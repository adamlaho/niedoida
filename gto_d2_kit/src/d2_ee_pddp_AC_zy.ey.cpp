/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pddp_AC_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1221_13_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49689 = ce + de;
    const double C49688 = yC - yD;
    const double C49699 = ce * de;
    const double C49698 = 0 * de;
    const double C49717 = 0 * ce;
    const double C49713 = 0 * de;
    const double C49761 = ae * be;
    const double C49760 = ae + be;
    const double C49759 = 0 * be;
    const double C49758 = zA - zB;
    const double C49789 = 0 * ae;
    const double C49784 = 0 * be;
    const double C49824 = yP - yQ;
    const double C49823 = zP - zQ;
    const double C49822 = p + q;
    const double C49821 = p * q;
    const double C49833 = bs[4];
    const double C49831 = xP - xQ;
    const double C49839 = bs[5];
    const double C49846 = bs[6];
    const double C49858 = bs[7];
    const double C49903 = bs[3];
    const double C50412 = bs[2];
    const double C119 = bs[0];
    const double C50757 = xA - xB;
    const double C50778 = xC - xD;
    const double C50810 = zC - zD;
    const double C50903 = yA - yB;
    const double C49697 = 2 * C49689;
    const double C49714 = std::pow(C49689, 2);
    const double C50815 = std::pow(C49688, 2);
    const double C50831 = C49688 * de;
    const double C50830 = C49688 * ce;
    const double C49700 = C49699 * C49688;
    const double C49715 = C49688 * C49698;
    const double C49721 = C49717 / C49689;
    const double C49762 = std::pow(C49760, 2);
    const double C49785 = 2 * C49760;
    const double C49834 = C49689 * C49760;
    const double C140 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (zP - zQ) * (yP - yQ) * ae * ce) /
                         C49689) /
                        C49760;
    const double C141 = (-((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                           bs[3] * (zP - zQ) * (yP - yQ) * ae * ce) /
                         C49689) /
                        C49760;
    const double C49763 = C49761 * C49758;
    const double C49786 = C49758 * C49759;
    const double C50915 = std::pow(C49758, 2);
    const double C50979 = C49758 * be;
    const double C50978 = C49758 * ae;
    const double C49794 = C49789 / C49760;
    const double C49888 = C49824 * ce;
    const double C50010 = std::pow(C49824, 2);
    const double C49826 = C49823 * C49824;
    const double C49874 = C49823 * ae;
    const double C50162 = std::pow(C49823, 2);
    const double C49825 = 2 * C49821;
    const double C49840 = std::pow(C49831, 2);
    const double C50760 = C50757 * be;
    const double C50759 = C50757 * ae;
    const double C50758 = std::pow(C50757, 2);
    const double C50781 = C50778 * de;
    const double C50780 = C50778 * ce;
    const double C50779 = std::pow(C50778, 2);
    const double C50845 = std::pow(C50810, 2);
    const double C50857 = C50810 * de;
    const double C50856 = C50810 * ce;
    const double C50904 = std::pow(C50903, 2);
    const double C50953 = C50903 * be;
    const double C50952 = C50903 * ae;
    const double C50789 = std::pow(C49697, -1);
    const double C51048 = std::pow(C49697, -2);
    const double C49718 = 2 * C49714;
    const double C51046 = 4 * C49714;
    const double C50816 = C50815 * C49699;
    const double C49719 = C49715 / C49689;
    const double C49764 = 2 * C49762;
    const double C51039 = 4 * C49762;
    const double C50768 = std::pow(C49785, -1);
    const double C51061 = std::pow(C49785, -2);
    const double C49791 = C49786 / C49760;
    const double C50916 = C50915 * C49761;
    const double C49890 = C49833 * C49888;
    const double C49893 = C49839 * C49888;
    const double C49897 = C49846 * C49888;
    const double C49955 = C49903 * C49888;
    const double C49972 = C49858 * C49888;
    const double C49828 = C49826 * ae;
    const double C49876 = C49833 * C49874;
    const double C49879 = C49839 * C49874;
    const double C49882 = C49846 * C49874;
    const double C49904 = C49903 * C49874;
    const double C49919 = C49858 * C49874;
    const double C49827 = C49825 / C49822;
    const double C126 = (-(bs[1] * C49874 * C49825) / C49822) / C49760;
    const double C127 = (bs[1] * C49888 * C49825) / (C49822 * C49689);
    const double C120 = -(C49831 * bs[1] * C49825) / C49822;
    const double C296 = -(C49824 * bs[1] * C49825) / C49822;
    const double C470 = -(C49823 * bs[1] * C49825) / C49822;
    const double C50761 = C50758 * C49761;
    const double C50782 = C50779 * C49699;
    const double C50846 = C50845 * C49699;
    const double C50905 = C50904 * C49761;
    const double C49726 = C49698 / C49718;
    const double C49724 = C49713 / C49718;
    const double C50817 = C50816 / C49689;
    const double C49723 = 0 - C49719;
    const double C49788 = C49759 / C49764;
    const double C49792 = C49784 / C49764;
    const double C49795 = 0 - C49791;
    const double C50917 = C50916 / C49760;
    const double C49829 = C49828 * ce;
    const double C49832 = std::pow(C49827, 4);
    const double C49838 = -C49827;
    const double C49845 = std::pow(C49827, 6);
    const double C50413 = std::pow(C49827, 2);
    const double C128 =
        (C49831 * std::pow(C49827, 2) * bs[2] * C49874) / C49760;
    const double C129 =
        -(C49831 * std::pow(C49827, 2) * bs[2] * C49888) / C49689;
    const double C302 =
        (C49824 * std::pow(C49827, 2) * bs[2] * C49874) / C49760;
    const double C303 =
        (ce * bs[1] * C49825) / (C49822 * C49689) -
        (C49824 * std::pow(C49827, 2) * bs[2] * C49888) / C49689;
    const double C480 =
        -(C49823 * std::pow(C49827, 2) * bs[2] * C49888) / C49689;
    const double C481 =
        (C49823 * std::pow(C49827, 2) * bs[2] * C49874) / C49760 -
        (ae * bs[1] * C49825) / (C49822 * C49760);
    const double C50762 = C50761 / C49760;
    const double C50783 = C50782 / C49689;
    const double C50847 = C50846 / C49689;
    const double C50906 = C50905 / C49760;
    const double C50818 = -C50817;
    const double C49728 = C49723 * ce;
    const double C49798 = C49795 * ae;
    const double C50918 = -C50917;
    const double C49835 = C49833 * C49829;
    const double C49842 = C49839 * C49829;
    const double C49848 = C49846 * C49829;
    const double C49861 = C49858 * C49829;
    const double C142 =
        (-(std::pow(C49827, 4) * bs[4] * C49829 * std::pow(xP - xQ, 2)) /
         C49689) /
            C49760 -
        (std::pow(-C49827, 3) * bs[3] * C49829) / (C49689 * C49760);
    const double C49877 = C49832 * C49876;
    const double C49891 = C49832 * C49890;
    const double C49938 = C49833 * C49832;
    const double C49841 = std::pow(C49838, 5);
    const double C49857 = std::pow(C49838, 7);
    const double C49902 = std::pow(C49838, 3);
    const double C314 =
        (-(C49824 * std::pow(C49838, 3) * bs[3] * C49829) / C49689) / C49760 -
        (std::pow(C49827, 2) * bs[2] * C49823 * ae * ce) / C49834;
    const double C488 =
        (-(C49823 * std::pow(C49838, 3) * bs[3] * C49829) / C49689) / C49760 -
        (ae * std::pow(C49827, 2) * bs[2] * C49888) / C49834;
    const double C49883 = C49845 * C49882;
    const double C49898 = C49845 * C49897;
    const double C49948 = C49846 * C49845;
    const double C50414 = C50412 * C50413;
    const double C50763 = -C50762;
    const double C50784 = -C50783;
    const double C50848 = -C50847;
    const double C50907 = -C50906;
    const double C50819 = std::exp(C50818);
    const double C49730 = C49728 / C49689;
    const double C49800 = C49798 / C49760;
    const double C50919 = std::exp(C50918);
    const double C49836 = C49832 * C49835;
    const double C49849 = C49845 * C49848;
    const double C49907 = C49831 * C49877;
    const double C50009 = C49877 * ce;
    const double C50007 = C49824 * C49877;
    const double C50539 = C49823 * C49877;
    const double C49958 = C49831 * C49891;
    const double C49985 = C49824 * C49891;
    const double C50161 = ae * C49891;
    const double C50159 = C49823 * C49891;
    const double C49939 = C49831 * C49938;
    const double C50087 = C49824 * C49938;
    const double C50086 = C49938 * ce;
    const double C50420 = C49938 * C49840;
    const double C50490 = C49938 * C50010;
    const double C50542 = C49938 * C50162;
    const double C50597 = C49823 * C49938;
    const double C50596 = C49938 * ae;
    const double C49843 = C49841 * C49842;
    const double C49880 = C49841 * C49879;
    const double C49894 = C49841 * C49893;
    const double C49942 = C49839 * C49841;
    const double C49863 = C49857 * C49861;
    const double C49921 = C49857 * C49919;
    const double C49975 = C49857 * C49972;
    const double C49905 = C49902 * C49904;
    const double C49935 = C49903 * C49902;
    const double C49956 = C49902 * C49955;
    const double C49884 = C49883 * C49840;
    const double C49918 = C49831 * C49883;
    const double C50041 = C49883 * C50010;
    const double C50257 = C49883 * ce;
    const double C50255 = C49824 * C49883;
    const double C50647 = C49823 * C49883;
    const double C49899 = C49898 * C49840;
    const double C49971 = C49831 * C49898;
    const double C50120 = C49824 * C49898;
    const double C50232 = C49898 * C50162;
    const double C50344 = ae * C49898;
    const double C50342 = C49823 * C49898;
    const double C49950 = C49948 * C49840;
    const double C50095 = C49831 * C49948;
    const double C50283 = C49948 * C50010;
    const double C50293 = C49824 * C49948;
    const double C50292 = C49948 * ce;
    const double C50651 = C49948 * C50162;
    const double C121 = C50414 * C49840 - (bs[1] * C49825) / C49822;
    const double C297 = C49824 * C49831 * C50414;
    const double C466 = C49823 * C49831 * C50414;
    const double C630 = C50414 * C50010 - (bs[1] * C49825) / C49822;
    const double C875 = C49823 * C49824 * C50414;
    const double C1008 = C50414 * C50162 - (bs[1] * C49825) / C49822;
    const double C50764 = std::exp(C50763);
    const double C50785 = std::exp(C50784);
    const double C50849 = std::exp(C50848);
    const double C50908 = std::exp(C50907);
    const double C49701 = C49700 * C50819;
    const double C118 = -(2 * ce * de * (yC - yD) * C50819) / (ce + de);
    const double C294 =
        ((C50819 - (C49688 * 2 * ce * de * C49688 * C50819) / C49689) * ce) /
            C49689 -
        (0 * de) / (2 * std::pow(C49689, 2));
    const double C295 =
        (0 * ce) / C49689 - (ce * de * C49688 * C50819) / std::pow(C49689, 2);
    const double C50832 = C50819 * C50830;
    const double C50835 = C50789 * C50819;
    const double C51051 = C50819 * C50831;
    const double C51050 = C50819 / C49697;
    const double C624 = C51048 * C50819;
    const double C49732 = C49730 - C49724;
    const double C49802 = C49800 - C49792;
    const double C155 = C50919 * C142;
    const double C151 = C50919 * C141;
    const double C149 = C50919 * C128;
    const double C2601 = C50919 * C314;
    const double C2599 = C50919 * C302;
    const double C49765 = C49763 * C50919;
    const double C117 = -(2 * ae * be * (zA - zB) * C50919) / (ae + be);
    const double C50980 = C50919 * C50978;
    const double C50983 = C50768 * C50919;
    const double C51069 = C50919 * C50979;
    const double C51062 = C50919 / C49785;
    const double C5343 = C51061 * C50919;
    const double C143 =
        (-2 * C49831 * C49836) / C49834 +
        C49831 *
            ((-(std::pow(-C49827, 5) * bs[5] * C49829 * std::pow(C49831, 2)) /
              C49689) /
                 C49760 -
             C49836 / C49834);
    const double C315 =
        (-(C49824 * C49831 * C49836) / C49689) / C49760 -
        (C49831 * std::pow(C49838, 3) * bs[3] * C49823 * ae * ce) / C49834;
    const double C484 =
        (-(C49823 * C49831 * C49836) / C49689) / C49760 -
        (ae * C49831 * std::pow(C49838, 3) * bs[3] * C49824 * ce) / C49834;
    const double C49850 = C49849 * C49840;
    const double C49859 = C49849 / C49834;
    const double C49856 = C49831 * C49849;
    const double C50039 = C49824 * C49849;
    const double C50230 = C49823 * C49849;
    const double C50012 = C50009 / C49834;
    const double C50164 = C50161 / C49834;
    const double C49990 = C49939 * ce;
    const double C50424 = 2 * C49939;
    const double C50470 = C49824 * C49939;
    const double C50549 = C49823 * C49939;
    const double C50548 = C49939 * ae;
    const double C50101 = C50087 * ce;
    const double C50502 = 2 * C50087;
    const double C50565 = C49823 * C50087;
    const double C50564 = C50087 * ae;
    const double C50602 = 2 * C50597;
    const double C50600 = C50597 * ae;
    const double C49847 = C49843 / C49834;
    const double C49930 = C49831 * C49843;
    const double C50008 = C49824 * C49843;
    const double C50160 = C49823 * C49843;
    const double C144 =
        3 * ((-(C49843 * C49840) / C49689) / C49760 - C49836 / C49834) +
        C49831 * ((-2 * C49831 * C49843) / C49834 +
                  C49831 * ((-(std::pow(C49827, 6) * bs[6] * C49829 * C49840) /
                             C49689) /
                                C49760 -
                            C49843 / C49834));
    const double C316 =
        C49824 * ((-(C49843 * C49840) / C49689) / C49760 - C49836 / C49834) -
        ((std::pow(C49838, 3) * bs[3] * C49874 +
          C49832 * C49833 * C49874 * C49840) *
         ce) /
            C49834;
    const double C485 =
        C49823 * ((-(C49843 * C49840) / C49689) / C49760 - C49836 / C49834) -
        (ae * (C49832 * C49833 * C49888 * C49840 +
               std::pow(C49838, 3) * bs[3] * C49888)) /
            C49834;
    const double C646 =
        (-(C49824 * C49907 * ce) / C49689) / C49760 -
        (C49831 * C49836) / C49834 +
        C49824 * ((-(C49824 * C49831 * C49843) / C49689) / C49760 -
                  (C49907 * ce) / C49834);
    const double C49909 = C49880 * C49840;
    const double C49912 = C49831 * C49880;
    const double C50013 = C49880 * C50010;
    const double C50040 = C49880 * ce;
    const double C50038 = C49824 * C49880;
    const double C50595 = C49823 * C49880;
    const double C49960 = C49894 * C49840;
    const double C49963 = C49831 * C49894;
    const double C50085 = C49824 * C49894;
    const double C50165 = C49894 * C50162;
    const double C50231 = ae * C49894;
    const double C50229 = C49823 * C49894;
    const double C49943 = C49942 * C49840;
    const double C49947 = C49831 * C49942;
    const double C50088 = C49942 * C50010;
    const double C50122 = C49824 * C49942;
    const double C50121 = C49942 * ce;
    const double C50598 = C49942 * C50162;
    const double C50649 = C49823 * C49942;
    const double C50648 = C49942 * ae;
    const double C49864 = C49863 * C49840;
    const double C50061 = C49831 * C49863;
    const double C50256 = C49824 * C49863;
    const double C50343 = C49823 * C49863;
    const double C49922 = C49921 * C49840;
    const double C50063 = C49831 * C49921;
    const double C50259 = C49921 * C50010;
    const double C49977 = C49975 * C49840;
    const double C50137 = C49831 * C49975;
    const double C50291 = C49824 * C49975;
    const double C50346 = C49975 * C50162;
    const double C645 = (-(C49824 * C49905 * ce) / C49689) / C49760 -
                        (C49902 * C49903 * C49829) / C49834 +
                        C49824 * ((-(C49824 * C49836) / C49689) / C49760 -
                                  (C49905 * ce) / C49834);
    const double C773 =
        2 * ((-(C49824 * C49836) / C49689) / C49760 - (C49905 * ce) / C49834) -
        ((C49905 + C49877 * std::pow(C49824, 2)) * ce) / C49834 +
        C49824 *
            ((-(C49824 * C49877 * ce) / C49689) / C49760 - C49836 / C49834 +
             C49824 * ((-(C49824 * C49843) / C49689) / C49760 -
                       (C49877 * ce) / C49834));
    const double C899 = C49823 * ((-(C49824 * C49836) / C49689) / C49760 -
                                  (C49905 * ce) / C49834) -
                        (ae * (C49824 * C49902 * C49903 * C49888 +
                               bs[2] * std::pow(C49827, 2) * ce)) /
                            C49834;
    const double C130 =
        (std::pow(C49827, 2) * bs[2] * C49874 + C49905 * C49840) / C49760;
    const double C132 =
        (2 * C49831 * C49905 + C49831 * (C49905 + C49877 * C49840)) / C49760;
    const double C304 = (C49824 * C49831 * C49905) / C49760;
    const double C306 = (C49824 * (C49905 + C49877 * C49840)) / C49760;
    const double C472 =
        (C49823 * C49831 * C49905 + C49831 * bs[2] * std::pow(C49827, 2) * ae) /
        C49760;
    const double C635 =
        (std::pow(C49827, 2) * bs[2] * C49874 + C49905 * C50010) / C49760;
    const double C637 = (C49831 * C49905 + C49907 * C50010) / C49760;
    const double C765 =
        (2 * C49824 * C49905 + C49824 * (C49905 + C49877 * C50010)) / C49760;
    const double C883 =
        (C49823 * C49824 * C49905 + C49824 * C50414 * ae) / C49760;
    const double C1013 =
        (C50413 * C50412 * C49874 + C49823 * (C49823 * C49905 + C50414 * ae) +
         C49823 * C50414 * ae) /
        C49760;
    const double C49986 = C49935 * ce;
    const double C900 =
        C49823 *
            ((-(C49824 * C49877 * ce) / C49689) / C49760 - C49836 / C49834 +
             C49824 * ((-(C49824 * C49843) / C49689) / C49760 -
                       (C49877 * ce) / C49834)) -
        (ae * (C49824 * (C49824 * C49891 + C49935 * ce) +
               C49902 * C49903 * C49888 + C49824 * C49935 * ce)) /
            C49834;
    const double C50417 = C49831 * C49935;
    const double C50421 = C49935 + C50420;
    const double C50467 = C49824 * C49935;
    const double C50491 = C49935 + C50490;
    const double C50541 = C49823 * C49935;
    const double C50540 = C49935 * ae;
    const double C50544 = C49935 + C50542;
    const double C474 = (C49823 * (C49905 + C49877 * C49840) +
                         (bs[2] * std::pow(C49827, 2) + C49935 * C49840) * ae) /
                        C49760;
    const double C885 = (C49823 * (C49905 + C49877 * C50010) +
                         (C50414 + C49935 * C50010) * ae) /
                        C49760;
    const double C1247 =
        (2 * (C49823 * C49905 + C50414 * ae) +
         C49823 * (C49905 + C49823 * (C49823 * C49877 + C49935 * ae) +
                   C49823 * C49935 * ae) +
         (C50414 + C49935 * C50162) * ae) /
        C49760;
    const double C122 =
        2 * C49831 * C50414 + C49831 * (C50414 + C49935 * C49840);
    const double C298 = C49824 * (C50414 + C49935 * C49840);
    const double C467 = C49823 * (C50414 + C49935 * C49840);
    const double C761 =
        2 * C49824 * C50414 + C49824 * (C50414 + C49935 * C50010);
    const double C876 = C49823 * (C50414 + C49935 * C50010);
    const double C1239 =
        2 * C49823 * C50414 + C49823 * (C50414 + C49935 * C50162);
    const double C1023 = (-(ae * C49823 * C49956) / C49689) / C49760 -
                         (C49902 * C49903 * C49829) / C49834 +
                         C49823 * ((-(C49823 * C49836) / C49689) / C49760 -
                                   (ae * C49956) / C49834);
    const double C1251 =
        2 * ((-(C49823 * C49836) / C49689) / C49760 - (ae * C49956) / C49834) -
        (ae * (C49891 * std::pow(C49823, 2) + C49956)) / C49834 +
        C49823 *
            ((-(ae * C49823 * C49891) / C49689) / C49760 - C49836 / C49834 +
             C49823 * ((-(C49823 * C49843) / C49689) / C49760 -
                       (ae * C49891) / C49834));
    const double C131 =
        -(C49956 * C49840 + std::pow(C49827, 2) * bs[2] * C49888) / C49689;
    const double C133 = (-2 * C49831 * C49956) / C49689 -
                        (C49831 * (C49891 * C49840 + C49956)) / C49689;
    const double C305 = -(C49824 * C49831 * C49956 +
                          C49831 * bs[2] * std::pow(C49827, 2) * ce) /
                        C49689;
    const double C307 =
        -(C49824 * (C49891 * C49840 + C49956) +
          (bs[2] * std::pow(C49827, 2) + C49935 * C49840) * ce) /
        C49689;
    const double C473 = -(C49823 * C49831 * C49956) / C49689;
    const double C475 = -(C49823 * (C49891 * C49840 + C49956)) / C49689;
    const double C636 = -(C49824 * (C49824 * C49956 + C50414 * ce) +
                          C50413 * C50412 * C49888 + C49824 * C50414 * ce) /
                        C49689;
    const double C884 = -(C49823 * (C49824 * C49956 + C50414 * ce)) / C49689;
    const double C1014 = -(C49956 * C50162 + C50413 * C50412 * C49888) / C49689;
    const double C1016 = -(C49958 * C50162 + C49831 * C49956) / C49689;
    const double C1246 = (-2 * C49823 * C49956) / C49689 -
                         (C49823 * (C49891 * C50162 + C49956)) / C49689;
    const double C49885 = C49880 + C49884;
    const double C49920 = 2 * C49918;
    const double C50022 = C49918 * C50010;
    const double C50062 = C49918 * ce;
    const double C50059 = C49824 * C49918;
    const double C50580 = C49823 * C49918;
    const double C50046 = C49880 + C50041;
    const double C50263 = C50257 / C49834;
    const double C50264 = 2 * C50255;
    const double C50261 = C50255 * ce;
    const double C50631 = C49823 * C50255;
    const double C49900 = C49899 + C49894;
    const double C49974 = -2 * C49971;
    const double C50092 = C49824 * C49971;
    const double C50174 = C49971 * C50162;
    const double C50208 = ae * C49971;
    const double C50206 = C49823 * C49971;
    const double C50237 = C50232 + C49894;
    const double C50350 = C50344 / C49834;
    const double C50352 = -2 * C50342;
    const double C50348 = ae * C50342;
    const double C49951 = C49942 + C49950;
    const double C50097 = C50095 * C50010;
    const double C50139 = C49824 * C50095;
    const double C50138 = C50095 * ce;
    const double C50583 = C50095 * C50162;
    const double C50285 = C49942 + C50283;
    const double C50299 = C50293 * ce;
    const double C50634 = C50293 * C50162;
    const double C50655 = C49942 + C50651;
    const double C50765 = C50764 * C50759;
    const double C50769 = C50768 * C50764;
    const double C51036 = C50764 * C50760;
    const double C51033 = C50764 / C49785;
    const double C17340 = C51061 * C50764;
    const double C50786 = C50785 * C50780;
    const double C50790 = C50789 * C50785;
    const double C51042 = C50785 / C49697;
    const double C51041 = C50785 * C50781;
    const double C293 = C51048 * C50785;
    const double C50858 = C50849 * C50856;
    const double C50861 = C50789 * C50849;
    const double C51056 = C50849 * C50857;
    const double C51055 = C50849 / C49697;
    const double C1007 = C51048 * C50849;
    const double C50954 = C50908 * C50952;
    const double C50957 = C50768 * C50908;
    const double C51065 = C50908 * C50953;
    const double C51060 = C50908 / C49785;
    const double C2438 = C51061 * C50908;
    const double C49702 = 2 * C49701;
    const double C49722 = C49701 / C49714;
    const double C51053 = C50832 / C49718;
    const double C51052 = C50832 * C50831;
    const double C51047 = C50832 / C49689;
    const double C50838 = C50835 * C50831;
    const double C755 = C50835 / C51046;
    const double C1479 = C50835 / C49697;
    const double C51079 = C51051 / C49689;
    const double C623 = (-2 * C50789 * C51051) / C49689;
    const double C622 = (C50819 * std::pow(C50831, 2)) / C49714 + C51050;
    const double C49790 = C49765 / C49762;
    const double C49787 = 2 * C49765;
    const double C5346 = ((0 * ae) / C49760 - C49765 / C49762) / (2 * C49760) +
                         (0 * ae) / C49760;
    const double C10871 =
        ((C50919 - (C49758 * 2 * C49765) / C49760) * ae) / C49760 -
        C49759 / C49764;
    const double C10872 = (0 * ae) / C49760 - C49765 / C49762;
    const double C33315 =
        (-C49759 / C49760) / (2 * C49760) -
        ((C50919 - (C49758 * 2 * C49765) / C49760) * be) / C49760;
    const double C33316 =
        (-(2 * C49765) / C49760) / (2 * C49760) - (0 * be) / C49760;
    const double C152 = C117 * C121;
    const double C150 = C117 * C129;
    const double C148 = C117 * C120;
    const double C323 = C117 * C297;
    const double C491 = C117 * C466;
    const double C2602 = C117 * C630;
    const double C2600 = C117 * C303;
    const double C2598 = C117 * C296;
    const double C3260 = C117 * C875;
    const double C51071 = C50980 / C49764;
    const double C51070 = C50980 * C50979;
    const double C51064 = C50980 / C49760;
    const double C5342 = (2 * C50768 * C50980) / C49760;
    const double C5345 =
        (((C50919 - (C49758 * 2 * C49765) / C49760) * ae) / C49760 -
         C49759 / C49764) /
            (2 * C49760) +
        ((C49758 * ((0 * ae) / C49760 - C49765 / C49762) + C50983) * ae) /
            C49760;
    const double C51072 = C50983 * C50979;
    const double C38907 = C50983 / C51039;
    const double C44230 = C50983 / C49785;
    const double C51088 = C51069 / C49760;
    const double C5341 = (C50919 * std::pow(C50978, 2)) / C49762 + C51062;
    const double C159 = C50919 * C143;
    const double C326 = C50919 * C315;
    const double C494 = C50919 * C484;
    const double C10881 = C50983 * C484;
    const double C33325 = C50983 * C484;
    const double C49851 = C49850 / C49689;
    const double C49860 = -2 * C49856;
    const double C50020 = C49824 * C49856;
    const double C50060 = C49856 / C49834;
    const double C50172 = C49823 * C49856;
    const double C50043 = C50039 / C49689;
    const double C50234 = C50230 / C49689;
    const double C901 =
        C49823 *
            ((-(C49824 * C49930) / C49689) / C49760 - (C49907 * ce) / C49834) -
        (ae * (C49824 * C49831 * C49891 + C49831 * C49935 * ce)) / C49834;
    const double C1024 = (-(ae * C49823 * C49958) / C49689) / C49760 -
                         (C49831 * C49836) / C49834 +
                         C49823 * ((-(C49823 * C49930) / C49689) / C49760 -
                                   (ae * C49958) / C49834);
    const double C50011 = C50008 / C49689;
    const double C50163 = C50160 / C49689;
    const double C161 = C50919 * C144;
    const double C332 = C50919 * C316;
    const double C498 = C50919 * C485;
    const double C10889 = C50983 * C485;
    const double C33333 = C50983 * C485;
    const double C658 = C50919 * C646;
    const double C49910 = C49877 + C49909;
    const double C49914 = 2 * C49912;
    const double C50021 = C49912 * ce;
    const double C50019 = C49824 * C49912;
    const double C774 =
        2 * ((-(C49824 * C49930) / C49689) / C49760 - (C49907 * ce) / C49834) -
        ((C49907 + C49912 * std::pow(C49824, 2)) * ce) / C49834 +
        C49824 *
            ((-(C49824 * C49912 * ce) / C49689) / C49760 - C49930 / C49834 +
             C49824 * ((-(C49824 * C49856) / C49689) / C49760 -
                       (C49912 * ce) / C49834));
    const double C902 =
        C49823 *
            ((-(C49824 * C49912 * ce) / C49689) / C49760 - C49930 / C49834 +
             C49824 * ((-(C49824 * C49856) / C49689) / C49760 -
                       (C49912 * ce) / C49834)) -
        (ae * (C49824 * (C49824 * C49831 * C49894 + C49939 * ce) +
               C49831 * C49891 + C49824 * C49939 * ce)) /
            C49834;
    const double C50547 = C49823 * C49912;
    const double C767 =
        (2 * C49824 * C49907 + C49824 * (C49907 + C49912 * C50010)) / C49760;
    const double C50015 = C49877 + C50013;
    const double C50044 = C50040 / C49834;
    const double C50045 = 2 * C50038;
    const double C50042 = C50038 * ce;
    const double C50563 = C49823 * C50038;
    const double C50599 = C50595 + C50596;
    const double C49961 = C49960 + C49891;
    const double C49965 = -2 * C49963;
    const double C49989 = C49824 * C49963;
    const double C50173 = ae * C49963;
    const double C50171 = C49823 * C49963;
    const double C1250 =
        2 * ((-(C49823 * C49930) / C49689) / C49760 - (ae * C49958) / C49834) -
        (ae * (C49963 * std::pow(C49823, 2) + C49958)) / C49834 +
        C49823 *
            ((-(ae * C49823 * C49963) / C49689) / C49760 - C49930 / C49834 +
             C49823 * ((-(C49823 * C49856) / C49689) / C49760 -
                       (ae * C49963) / C49834));
    const double C1244 = (-2 * C49823 * C49958) / C49689 -
                         (C49823 * (C49963 * C50162 + C49958)) / C49689;
    const double C50089 = C50085 + C50086;
    const double C50167 = C50165 + C49891;
    const double C50235 = C50231 / C49834;
    const double C50236 = -2 * C50229;
    const double C50233 = ae * C50229;
    const double C49944 = C49938 + C49943;
    const double C49949 = 2 * C49947;
    const double C50094 = C49824 * C49947;
    const double C50093 = C49947 * ce;
    const double C50494 = C49947 * C50010;
    const double C50550 = C49947 * C50162;
    const double C50582 = C49823 * C49947;
    const double C50581 = C49947 * ae;
    const double C50090 = C49938 + C50088;
    const double C50126 = C50122 * ce;
    const double C50284 = 2 * C50122;
    const double C50566 = C50122 * C50162;
    const double C50633 = C49823 * C50122;
    const double C50632 = C50122 * ae;
    const double C50125 = C50120 + C50121;
    const double C50601 = C49938 + C50598;
    const double C50656 = 2 * C50649;
    const double C50654 = C50649 * ae;
    const double C50653 = C50647 + C50648;
    const double C49865 = C49864 / C49689;
    const double C50065 = C49824 * C50061;
    const double C50207 = C49823 * C50061;
    const double C50262 = C50256 / C49689;
    const double C50349 = C50343 / C49689;
    const double C49923 = C49883 + C49922;
    const double C50068 = C50063 * C50010;
    const double C50265 = C49883 + C50259;
    const double C49978 = C49977 + C49898;
    const double C50142 = C49824 * C50137;
    const double C50209 = C50137 * C50162;
    const double C50298 = C50291 + C50292;
    const double C50353 = C50346 + C49898;
    const double C2605 = C50919 * C645;
    const double C2965 = C50919 * C773;
    const double C3263 = C50919 * C899;
    const double C13956 = C50983 * C899;
    const double C36320 = C50983 * C899;
    const double C153 = C50919 * C130;
    const double C157 = C50919 * C132;
    const double C324 = C50919 * C304;
    const double C330 = C50919 * C306;
    const double C492 = C50919 * C472;
    const double C10877 = C50983 * C472;
    const double C33321 = C50983 * C472;
    const double C2603 = C50919 * C635;
    const double C656 = C50919 * C637;
    const double C2963 = C50919 * C765;
    const double C3261 = C50919 * C883;
    const double C13952 = C50983 * C883;
    const double C36316 = C50983 * C883;
    const double C49987 = C49985 + C49986;
    const double C3267 = C50919 * C900;
    const double C14364 = C50983 * C900;
    const double C36328 = C50983 * C900;
    const double C638 = -(C49824 * (C49824 * C49958 + C50417 * ce) +
                          C49831 * C49956 + C49824 * C50417 * ce) /
                        C49689;
    const double C887 =
        (C49823 * C49824 * C49907 + C49824 * C50417 * ae) / C49760;
    const double C888 = -(C49823 * (C49824 * C49958 + C50417 * ce)) / C49689;
    const double C889 = (C49823 * (C49907 + C49912 * C50010) +
                         (C50417 + C49939 * C50010) * ae) /
                        C49760;
    const double C1015 =
        (C49831 * C49905 + C49823 * (C49823 * C49907 + C50417 * ae) +
         C49823 * C50417 * ae) /
        C49760;
    const double C1245 =
        (2 * (C49823 * C49907 + C50417 * ae) +
         C49823 * (C49907 + C49823 * (C49823 * C49912 + C49939 * ae) +
                   C49823 * C49939 * ae) +
         (C50417 + C49939 * C50162) * ae) /
        C49760;
    const double C631 = C49831 * C50414 + C50417 * C50010;
    const double C762 =
        2 * C49824 * C50417 + C49824 * (C50417 + C49939 * C50010);
    const double C877 = C49823 * C49824 * C50417;
    const double C878 = C49823 * (C50417 + C49939 * C50010);
    const double C1009 = C49831 * C50414 + C50417 * C50162;
    const double C1151 = C49824 * C50417 + C50470 * C50162;
    const double C1238 =
        2 * C49823 * C50417 + C49823 * (C50417 + C49939 * C50162);
    const double C123 = 3 * (C50414 + C49935 * C49840) +
                        C49831 * (2 * C50417 + C49831 * C50421);
    const double C299 = C49824 * (2 * C50417 + C49831 * C50421);
    const double C468 = C49823 * (2 * C50417 + C49831 * C50421);
    const double C632 = C50414 + C49935 * C49840 + C50421 * C50010;
    const double C879 = C49823 * C49824 * C50421;
    const double C1010 = C50414 + C49935 * C49840 + C50421 * C50162;
    const double C1154 =
        (C49824 * C49905 + C49823 * (C49823 * C50007 + C50467 * ae) +
         C49823 * C50467 * ae) /
        C49760;
    const double C3732 =
        (2 * (C49823 * C50007 + C50467 * ae) +
         C49823 * (C50007 + C49823 * (C49823 * C50038 + C50087 * ae) +
                   C49823 * C50087 * ae) +
         (C50467 + C50087 * C50162) * ae) /
        C49760;
    const double C1150 = C49824 * C50414 + C50467 * C50162;
    const double C3724 =
        2 * C49823 * C50467 + C49823 * (C50467 + C50087 * C50162);
    const double C2949 = 3 * (C50414 + C49935 * C50010) +
                         C49824 * (2 * C50467 + C49824 * C50491);
    const double C3243 = C49823 * (2 * C50467 + C49824 * C50491);
    const double C3429 = C50414 + C49935 * C50010 + C50491 * C50162;
    const double C50543 = C50539 + C50540;
    const double C6319 = 3 * (C50414 + C49935 * C50162) +
                         C49823 * (2 * C50541 + C49823 * C50544);
    const double C496 = C50919 * C474;
    const double C10885 = C50983 * C474;
    const double C33329 = C50983 * C474;
    const double C3265 = C50919 * C885;
    const double C14360 = C50983 * C885;
    const double C36324 = C50983 * C885;
    const double C156 = C117 * C122;
    const double C329 = C117 * C298;
    const double C495 = C117 * C467;
    const double C2962 = C117 * C761;
    const double C3264 = C117 * C876;
    const double C154 = C117 * C131;
    const double C158 = C117 * C133;
    const double C325 = C117 * C305;
    const double C331 = C117 * C307;
    const double C493 = C117 * C473;
    const double C497 = C117 * C475;
    const double C2604 = C117 * C636;
    const double C3262 = C117 * C884;
    const double C1031 = C117 * C1016;
    const double C49913 = C49831 * C49885;
    const double C49917 = 3 * C49885;
    const double C50032 = C49885 * ce;
    const double C50030 = C49824 * C49885;
    const double C50556 = C49823 * C49885;
    const double C50025 = C49912 + C50022;
    const double C50066 = C50062 / C49834;
    const double C50067 = 2 * C50059;
    const double C50064 = C50059 * ce;
    const double C50571 = C49823 * C50059;
    const double C50049 = C49824 * C50046;
    const double C50258 = 3 * C50046;
    const double C50254 = C50046 * ce;
    const double C50622 = C49823 * C50046;
    const double C50267 = C50261 / C49689;
    const double C49964 = C49831 * C49900;
    const double C49970 = -3 * C49900;
    const double C49993 = C49824 * C49900;
    const double C50184 = ae * C49900;
    const double C50182 = C49823 * C49900;
    const double C49976 = C49974 / C49689;
    const double C50177 = C50174 + C49963;
    const double C50212 = C50208 / C49834;
    const double C50213 = -2 * C50206;
    const double C50210 = ae * C50206;
    const double C50241 = C49823 * C50237;
    const double C50345 = -3 * C50237;
    const double C50341 = ae * C50237;
    const double C50357 = C50352 / C49689;
    const double C50355 = C50348 / C49689;
    const double C49952 = C49831 * C49951;
    const double C50112 = C49824 * C49951;
    const double C50111 = C49951 * ce;
    const double C50498 = C49951 * C50010;
    const double C50559 = C49951 * C50162;
    const double C50098 = C49947 + C50097;
    const double C50143 = C50139 * ce;
    const double C50574 = C50139 * C50162;
    const double C50586 = C49947 + C50583;
    const double C50286 = C49824 * C50285;
    const double C50294 = C50285 * ce;
    const double C50625 = C50285 * C50162;
    const double C50637 = C50122 + C50634;
    const double C50658 = C49823 * C50655;
    const double C51037 = C50765 / C49764;
    const double C51035 = C50765 / C49760;
    const double C51034 = C50765 * C50760;
    const double C17339 = (2 * C50768 * C50765) / C49760;
    const double C51038 = C50769 * C50760;
    const double C110 = C50769 / C51039;
    const double C8189 = C50769 / C49785;
    const double C51074 = C51036 / C49760;
    const double C17338 = (C50764 * std::pow(C50759, 2)) / C49762 + C51033;
    const double C51044 = C50786 / C49718;
    const double C51043 = C50786 * C50781;
    const double C51040 = C50786 / C49689;
    const double C50793 = C50790 * C50781;
    const double C115 = C50790 / C51046;
    const double C1354 = C50790 / C49697;
    const double C291 = (C50785 * std::pow(C50781, 2)) / C49714 + C51042;
    const double C51076 = C51041 / C49689;
    const double C292 = (-2 * C50789 * C51041) / C49689;
    const double C51058 = C50858 / C49718;
    const double C51057 = C50858 * C50857;
    const double C51049 = C50858 / C49689;
    const double C50864 = C50861 * C50857;
    const double C1235 = C50861 / C51046;
    const double C2009 = C50861 / C49697;
    const double C51082 = C51056 / C49689;
    const double C1006 = (-2 * C50789 * C51056) / C49689;
    const double C1005 = (C50849 * std::pow(C50857, 2)) / C49714 + C51055;
    const double C51067 = C50954 / C49764;
    const double C51066 = C50954 * C50953;
    const double C51063 = C50954 / C49760;
    const double C2437 = (2 * C50768 * C50954) / C49760;
    const double C51068 = C50957 * C50953;
    const double C19943 = C50957 / C51039;
    const double C24522 = C50957 / C49785;
    const double C51085 = C51065 / C49760;
    const double C2436 = (C50908 * std::pow(C50952, 2)) / C49762 + C51060;
    const double C49716 = C49688 * C49702;
    const double C628 =
        ((-C49698 / C49689) / C49697 -
         ((C50819 - (C49688 * C49702) / C49689) * de) / C49689) /
            C49697 -
        ((C49688 * ((-C49702 / C49689) / C49697 - (0 * de) / C49689) + C50835) *
         de) /
            C49689;
    const double C629 =
        ((-C49702 / C49689) / C49697 - (0 * de) / C49689) / C49697 -
        (0 * de) / C49689;
    const double C1356 = (-C49702 / C49689) / C49697 - (0 * de) / C49689;
    const double C49727 = C49721 - C49722;
    const double C51080 = C51052 / C49714;
    const double C51054 = C50838 / C49689;
    const double C1350 = -C51079;
    const double C49797 = C49794 - C49790;
    const double C49793 = C49758 * C49787;
    const double C5358 = C5346 * C1016;
    const double C10896 = C10871 * C122;
    const double C10892 = C10871 * C133;
    const double C10886 = C10871 * C131;
    const double C10882 = C10871 * C121;
    const double C10878 = C10871 * C129;
    const double C10874 = C10871 * C120;
    const double C11094 = C10871 * C307;
    const double C11090 = C10871 * C298;
    const double C11084 = C10871 * C305;
    const double C11080 = C10871 * C297;
    const double C11281 = C10871 * C475;
    const double C11277 = C10871 * C467;
    const double C11273 = C10871 * C473;
    const double C11269 = C10871 * C466;
    const double C11874 = C10871 * C1016;
    const double C13957 = C10871 * C303;
    const double C13953 = C10871 * C296;
    const double C14361 = C10871 * C636;
    const double C14357 = C10871 * C630;
    const double C14517 = C10871 * C761;
    const double C14731 = C10871 * C876;
    const double C14725 = C10871 * C884;
    const double C14721 = C10871 * C875;
    const double C10888 = C10872 * C475;
    const double C10884 = C10872 * C467;
    const double C10880 = C10872 * C473;
    const double C10876 = C10872 * C466;
    const double C11275 = C10872 * C1016;
    const double C13955 = C10872 * C884;
    const double C13951 = C10872 * C875;
    const double C14359 = C10872 * C876;
    const double C33340 = C33315 * C122;
    const double C33336 = C33315 * C133;
    const double C33330 = C33315 * C131;
    const double C33326 = C33315 * C121;
    const double C33322 = C33315 * C129;
    const double C33318 = C33315 * C120;
    const double C33538 = C33315 * C307;
    const double C33534 = C33315 * C298;
    const double C33528 = C33315 * C305;
    const double C33524 = C33315 * C297;
    const double C33725 = C33315 * C475;
    const double C33721 = C33315 * C467;
    const double C33717 = C33315 * C473;
    const double C33713 = C33315 * C466;
    const double C34318 = C33315 * C1016;
    const double C36329 = C33315 * C636;
    const double C36325 = C33315 * C630;
    const double C36321 = C33315 * C303;
    const double C36317 = C33315 * C296;
    const double C36633 = C33315 * C761;
    const double C36927 = C33315 * C876;
    const double C36921 = C33315 * C884;
    const double C36917 = C33315 * C875;
    const double C33332 = C33316 * C475;
    const double C33328 = C33316 * C467;
    const double C33324 = C33316 * C473;
    const double C33320 = C33316 * C466;
    const double C33719 = C33316 * C1016;
    const double C36323 = C33316 * C876;
    const double C36319 = C33316 * C884;
    const double C36315 = C33316 * C875;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C2627 = C2600 + C2601;
    const double C2626 = C2598 + C2599;
    const double C51089 = C51070 / C49762;
    const double C10903 = C51064 * C144;
    const double C10897 = C51064 * C132;
    const double C10893 = C51064 * C143;
    const double C10887 = C51064 * C142;
    const double C10883 = C51064 * C130;
    const double C10879 = C51064 * C141;
    const double C10875 = C51064 * C128;
    const double C11095 = C51064 * C316;
    const double C11091 = C51064 * C306;
    const double C11085 = C51064 * C315;
    const double C11081 = C51064 * C304;
    const double C11282 = C51064 * C485;
    const double C11278 = C51064 * C474;
    const double C11274 = C51064 * C484;
    const double C11270 = C51064 * C472;
    const double C11461 = C51064 * C646;
    const double C11457 = C51064 * C637;
    const double C13958 = C51064 * C314;
    const double C13954 = C51064 * C302;
    const double C14362 = C51064 * C645;
    const double C14358 = C51064 * C635;
    const double C14522 = C51064 * C773;
    const double C14518 = C51064 * C765;
    const double C14736 = C51064 * C900;
    const double C14732 = C51064 * C885;
    const double C14726 = C51064 * C899;
    const double C14722 = C51064 * C883;
    const double C5344 =
        (((0 - (C49758 * C49759) / C49760) * ae) / C49760 - (0 * be) / C49764) /
            (2 * C49760) +
        ((C49758 * (((C50919 - (C49758 * 2 * C49765) / C49760) * ae) / C49760 -
                    C49759 / C49764) +
          C51064) *
         ae) /
            C49760 +
        (0 * ae) / C49760 - C49765 / C49762;
    const double C5369 = C5342 * C474;
    const double C5363 = C5342 * C485;
    const double C5357 = C5342 * C484;
    const double C5351 = C5342 * C472;
    const double C21930 = C5342 * C899;
    const double C21924 = C5342 * C883;
    const double C22240 = C5342 * C900;
    const double C22234 = C5342 * C885;
    const double C5368 = C5345 * C467;
    const double C5362 = C5345 * C475;
    const double C5356 = C5345 * C473;
    const double C5350 = C5345 * C466;
    const double C5738 = C5345 * C1016;
    const double C21929 = C5345 * C884;
    const double C21923 = C5345 * C875;
    const double C22233 = C5345 * C876;
    const double C51090 = C51072 / C49760;
    const double C33313 = -C51088;
    const double C5379 = C5341 * C143;
    const double C5373 = C5341 * C132;
    const double C5371 = C5341 * C130;
    const double C5365 = C5341 * C142;
    const double C5355 = C5341 * C141;
    const double C5349 = C5341 * C128;
    const double C5567 = C5341 * C316;
    const double C5561 = C5341 * C306;
    const double C5559 = C5341 * C315;
    const double C5553 = C5341 * C304;
    const double C5749 = C5341 * C485;
    const double C5743 = C5341 * C474;
    const double C5737 = C5341 * C484;
    const double C5731 = C5341 * C472;
    const double C5919 = C5341 * C646;
    const double C5913 = C5341 * C637;
    const double C21932 = C5341 * C314;
    const double C21926 = C5341 * C302;
    const double C22238 = C5341 * C645;
    const double C22232 = C5341 * C635;
    const double C22358 = C5341 * C773;
    const double C22352 = C5341 * C765;
    const double C22534 = C5341 * C900;
    const double C22528 = C5341 * C885;
    const double C22518 = C5341 * C899;
    const double C22512 = C5341 * C883;
    const double C49852 = -C49851;
    const double C49862 = C49860 / C49834;
    const double C50023 = C50020 / C49689;
    const double C50175 = C50172 / C49689;
    const double C50048 = -C50043;
    const double C50239 = -C50234;
    const double C1643 = C50919 * C901;
    const double C5557 = C5342 * C901;
    const double C7107 = C5341 * C901;
    const double C11083 = C50983 * C901;
    const double C12636 = C51064 * C901;
    const double C33527 = C50983 * C901;
    const double C1032 = C50919 * C1024;
    const double C5359 = C5343 * C1024;
    const double C5739 = C5342 * C1024;
    const double C6339 = C5341 * C1024;
    const double C11276 = C50983 * C1024;
    const double C11875 = C51064 * C1024;
    const double C33720 = C50983 * C1024;
    const double C44246 = C44230 * C1024;
    const double C50014 = -C50011;
    const double C50166 = -C50163;
    const double C135 = (3 * (C49905 + C49877 * C49840) +
                         C49831 * (2 * C49907 + C49831 * C49910)) /
                        C49760;
    const double C308 = (C49824 * (2 * C49907 + C49831 * C49910)) / C49760;
    const double C476 =
        (C49823 * (2 * C49907 + C49831 * C49910) +
         (2 * C49831 * C49935 + C49831 * (C49935 + C49938 * C49840)) * ae) /
        C49760;
    const double C639 = (C49905 + C49877 * C49840 + C49910 * C50010) / C49760;
    const double C769 =
        (2 * C49824 * C49910 + C49824 * (C49910 + C49885 * C50010)) / C49760;
    const double C891 =
        (C49823 * C49824 * C49910 + C49824 * C50421 * ae) / C49760;
    const double C1017 =
        (C49905 + C49877 * C49840 + C49823 * (C49823 * C49910 + C50421 * ae) +
         C49823 * C50421 * ae) /
        C49760;
    const double C50024 = C50021 / C49834;
    const double C1156 =
        (C49824 * C49907 + C49823 * (C49823 * C50019 + C50470 * ae) +
         C49823 * C50470 * ae) /
        C49760;
    const double C2615 = C50919 * C774;
    const double C14374 = C51064 * C774;
    const double C2791 = C50919 * C902;
    const double C5921 = C5342 * C902;
    const double C11463 = C50983 * C902;
    const double C14744 = C51064 * C902;
    const double C33907 = C50983 * C902;
    const double C50551 = C50547 + C50548;
    const double C2613 = C50919 * C767;
    const double C14370 = C51064 * C767;
    const double C2952 = (3 * (C49905 + C49877 * C50010) +
                          C49824 * (2 * C50007 + C49824 * C50015)) /
                         C49760;
    const double C3247 = (C49823 * (2 * C50007 + C49824 * C50015) +
                          (2 * C50467 + C49824 * C50491) * ae) /
                         C49760;
    const double C3432 =
        (C49905 + C49877 * C50010 + C49823 * (C49823 * C50015 + C50491 * ae) +
         C49823 * C50491 * ae) /
        C49760;
    const double C50047 = C50042 / C49689;
    const double C50567 = C50563 + C50564;
    const double C50603 = C49823 * C50599;
    const double C50646 = 2 * C50599;
    const double C134 =
        (-3 * (C49891 * C49840 + C49956)) / C49689 +
        C49831 * ((-2 * C49958) / C49689 - (C49831 * C49961) / C49689);
    const double C309 =
        C49824 * ((-2 * C49958) / C49689 - (C49831 * C49961) / C49689) -
        ((2 * C49831 * C49935 + C49831 * (C49935 + C49938 * C49840)) * ce) /
            C49689;
    const double C477 =
        C49823 * ((-2 * C49958) / C49689 - (C49831 * C49961) / C49689);
    const double C640 = -(C49824 * (C49824 * C49961 + C50421 * ce) +
                          C49891 * C49840 + C49956 + C49824 * C50421 * ce) /
                        C49689;
    const double C892 = -(C49823 * (C49824 * C49961 + C50421 * ce)) / C49689;
    const double C1018 = -(C49961 * C50162 + C49891 * C49840 + C49956) / C49689;
    const double C1242 = (-2 * C49823 * C49961) / C49689 -
                         (C49823 * (C49900 * C50162 + C49961)) / C49689;
    const double C49967 = C49965 / C49689;
    const double C49991 = C49989 + C49990;
    const double C50176 = C50173 / C49834;
    const double C5741 = C5343 * C1250;
    const double C6341 = C5342 * C1250;
    const double C11877 = C50983 * C1250;
    const double C34321 = C50983 * C1250;
    const double C44628 = C44230 * C1250;
    const double C5740 = C5346 * C1244;
    const double C6340 = C5345 * C1244;
    const double C11876 = C10872 * C1244;
    const double C34320 = C33316 * C1244;
    const double C50100 = C49824 * C50089;
    const double C50119 = -2 * C50089;
    const double C50192 = ae * C50089;
    const double C50190 = C49823 * C50089;
    const double C6323 =
        (-3 * (C49891 * C50162 + C49956)) / C49689 +
        C49823 * ((-2 * C50159) / C49689 - (C49823 * C50167) / C49689);
    const double C50240 = C50236 / C49689;
    const double C50238 = C50233 / C49689;
    const double C49994 = C49944 * ce;
    const double C50425 = C49831 * C49944;
    const double C50429 = 3 * C49944;
    const double C50473 = C49824 * C49944;
    const double C50558 = C49823 * C49944;
    const double C50557 = C49944 * ae;
    const double C893 = (C49823 * (C49910 + C49885 * C50010) +
                         (C50421 + C49944 * C50010) * ae) /
                        C49760;
    const double C1243 =
        (2 * (C49823 * C49910 + C50421 * ae) +
         C49823 * (C49910 + C49823 * (C49823 * C49885 + C49944 * ae) +
                   C49823 * C49944 * ae) +
         (C50421 + C49944 * C50162) * ae) /
        C49760;
    const double C763 =
        2 * C49824 * C50421 + C49824 * (C50421 + C49944 * C50010);
    const double C880 = C49823 * (C50421 + C49944 * C50010);
    const double C1237 =
        2 * C49823 * C50421 + C49823 * (C50421 + C49944 * C50162);
    const double C50106 = C50094 * ce;
    const double C50507 = 2 * C50094;
    const double C50573 = C49823 * C50094;
    const double C50572 = C50094 * ae;
    const double C3730 =
        (2 * (C49823 * C50019 + C50470 * ae) +
         C49823 * (C50019 + C49823 * (C49823 * C50059 + C50094 * ae) +
                   C49823 * C50094 * ae) +
         (C50470 + C50094 * C50162) * ae) /
        C49760;
    const double C3723 =
        2 * C49823 * C50470 + C49823 * (C50470 + C50094 * C50162);
    const double C50096 = C50092 + C50093;
    const double C50495 = C49939 + C50494;
    const double C50552 = C49939 + C50550;
    const double C50587 = 2 * C50582;
    const double C50585 = C50582 * ae;
    const double C50584 = C50580 + C50581;
    const double C50123 = C50090 * ce;
    const double C50503 = C49824 * C50090;
    const double C50612 = 3 * C50090;
    const double C50624 = C49823 * C50090;
    const double C50623 = C50090 * ae;
    const double C3728 =
        (2 * (C49823 * C50015 + C50491 * ae) +
         C49823 * (C50015 + C49823 * (C49823 * C50046 + C50090 * ae) +
                   C49823 * C50090 * ae) +
         (C50491 + C50090 * C50162) * ae) /
        C49760;
    const double C3722 =
        2 * C49823 * C50491 + C49823 * (C50491 + C50090 * C50162);
    const double C50568 = C50087 + C50566;
    const double C50638 = 2 * C50633;
    const double C50636 = C50633 * ae;
    const double C50635 = C50631 + C50632;
    const double C50128 = C49824 * C50125;
    const double C50193 = C50125 * C50162;
    const double C50290 = -2 * C50125;
    const double C50324 = ae * C50125;
    const double C50322 = C49823 * C50125;
    const double C50604 = C49823 * C50601;
    const double C50652 = 3 * C50601;
    const double C50650 = C50601 * ae;
    const double C50657 = C49823 * C50653;
    const double C49866 = -C49865;
    const double C50070 = C50065 / C49689;
    const double C50211 = C50207 / C49689;
    const double C50268 = -C50262;
    const double C50356 = -C50349;
    const double C49924 = C49831 * C49923;
    const double C50033 = C49923 * C50010;
    const double C50071 = C49918 + C50068;
    const double C50269 = C49824 * C50265;
    const double C49979 = C49831 * C49978;
    const double C50110 = C49824 * C49978;
    const double C50185 = C49978 * C50162;
    const double C50145 = C50142 + C50138;
    const double C50214 = C50209 + C49971;
    const double C50302 = C49824 * C50298;
    const double C50325 = C50298 * C50162;
    const double C50358 = C49823 * C50353;
    const double C170 = C152 + C153;
    const double C345 = C323 + C324;
    const double C507 = C491 + C492;
    const double C2628 = C2602 + C2603;
    const double C3276 = C3260 + C3261;
    const double C1162 =
        (-(C49824 * C49836) / C49689) / C49760 - (C49905 * ce) / C49834 -
        (ae * C49823 * C49987) / C49834 +
        C49823 * (C49823 * ((-(C49824 * C49843) / C49689) / C49760 -
                            (C49877 * ce) / C49834) -
                  (ae * C49987) / C49834);
    const double C766 =
        (-2 * (C49824 * C49956 + C50414 * ce)) / C49689 -
        (C49824 * (C49824 * C49987 + C49956 + C49824 * C49935 * ce)) / C49689 -
        ((C50414 + C49935 * C50010) * ce) / C49689;
    const double C886 =
        -(C49823 * (C49824 * C49987 + C49956 + C49824 * C49935 * ce)) / C49689;
    const double C1155 =
        -(C49987 * C50162 + C49824 * C49956 + C50414 * ce) / C49689;
    const double C3731 = (-2 * C49823 * C49987) / C49689 -
                         (C49823 * (C50089 * C50162 + C49987)) / C49689;
    const double C657 = C117 * C638;
    const double C11460 = C10871 * C638;
    const double C33904 = C33315 * C638;
    const double C1639 = C50919 * C887;
    const double C5551 = C5342 * C887;
    const double C7101 = C5341 * C887;
    const double C11079 = C50983 * C887;
    const double C12632 = C51064 * C887;
    const double C33523 = C50983 * C887;
    const double C1642 = C117 * C888;
    const double C5556 = C5345 * C888;
    const double C11082 = C10872 * C888;
    const double C12635 = C10871 * C888;
    const double C33526 = C33316 * C888;
    const double C35079 = C33315 * C888;
    const double C2789 = C50919 * C889;
    const double C5915 = C5342 * C889;
    const double C11459 = C50983 * C889;
    const double C14740 = C51064 * C889;
    const double C33903 = C50983 * C889;
    const double C1030 = C50919 * C1015;
    const double C5353 = C5343 * C1015;
    const double C5733 = C5342 * C1015;
    const double C6333 = C5341 * C1015;
    const double C11272 = C50983 * C1015;
    const double C11871 = C51064 * C1015;
    const double C33716 = C50983 * C1015;
    const double C44240 = C44230 * C1015;
    const double C5735 = C5343 * C1245;
    const double C6335 = C5342 * C1245;
    const double C11873 = C50983 * C1245;
    const double C34317 = C50983 * C1245;
    const double C44622 = C44230 * C1245;
    const double C655 = C117 * C631;
    const double C11456 = C10871 * C631;
    const double C33900 = C33315 * C631;
    const double C2612 = C117 * C762;
    const double C14369 = C10871 * C762;
    const double C36645 = C33315 * C762;
    const double C1638 = C117 * C877;
    const double C5550 = C5345 * C877;
    const double C11078 = C10872 * C877;
    const double C12631 = C10871 * C877;
    const double C33522 = C33316 * C877;
    const double C35075 = C33315 * C877;
    const double C2788 = C117 * C878;
    const double C5914 = C5345 * C878;
    const double C11458 = C10872 * C878;
    const double C14739 = C10871 * C878;
    const double C33902 = C33316 * C878;
    const double C37857 = C33315 * C878;
    const double C1029 = C117 * C1009;
    const double C5352 = C5346 * C1009;
    const double C5732 = C5345 * C1009;
    const double C11271 = C10872 * C1009;
    const double C11870 = C10871 * C1009;
    const double C33715 = C33316 * C1009;
    const double C34314 = C33315 * C1009;
    const double C3442 = C117 * C1151;
    const double C5548 = C5346 * C1151;
    const double C7102 = C5345 * C1151;
    const double C12633 = C10872 * C1151;
    const double C14951 = C10871 * C1151;
    const double C35077 = C33316 * C1151;
    const double C41853 = C33315 * C1151;
    const double C5734 = C5346 * C1238;
    const double C6334 = C5345 * C1238;
    const double C11872 = C10872 * C1238;
    const double C34316 = C33316 * C1238;
    const double C162 = C117 * C123;
    const double C10898 = C10871 * C123;
    const double C33342 = C33315 * C123;
    const double C335 = C117 * C299;
    const double C11096 = C10871 * C299;
    const double C33540 = C33315 * C299;
    const double C499 = C117 * C468;
    const double C5374 = C5345 * C468;
    const double C10894 = C10872 * C468;
    const double C11285 = C10871 * C468;
    const double C33338 = C33316 * C468;
    const double C33729 = C33315 * C468;
    const double C663 = C117 * C632;
    const double C11464 = C10871 * C632;
    const double C33908 = C33315 * C632;
    const double C1644 = C117 * C879;
    const double C5562 = C5345 * C879;
    const double C11088 = C10872 * C879;
    const double C12639 = C10871 * C879;
    const double C33532 = C33316 * C879;
    const double C35083 = C33315 * C879;
    const double C1033 = C117 * C1010;
    const double C5366 = C5346 * C1010;
    const double C5744 = C5345 * C1010;
    const double C11279 = C10872 * C1010;
    const double C11878 = C10871 * C1010;
    const double C33723 = C33316 * C1010;
    const double C34322 = C33315 * C1010;
    const double C3613 = C50919 * C1154;
    const double C14724 = C50983 * C1154;
    const double C15160 = C51064 * C1154;
    const double C21922 = C5343 * C1154;
    const double C22514 = C5342 * C1154;
    const double C22848 = C5341 * C1154;
    const double C36920 = C50983 * C1154;
    const double C47190 = C44230 * C1154;
    const double C15158 = C50983 * C3732;
    const double C22516 = C5343 * C3732;
    const double C22846 = C5342 * C3732;
    const double C37248 = C50983 * C3732;
    const double C47784 = C44230 * C3732;
    const double C3612 = C117 * C1150;
    const double C14723 = C10872 * C1150;
    const double C15159 = C10871 * C1150;
    const double C21921 = C5346 * C1150;
    const double C22513 = C5345 * C1150;
    const double C36919 = C33316 * C1150;
    const double C37249 = C33315 * C1150;
    const double C15157 = C10872 * C3724;
    const double C22515 = C5346 * C3724;
    const double C22845 = C5345 * C3724;
    const double C37247 = C33316 * C3724;
    const double C3092 = C117 * C2949;
    const double C31186 = C10871 * C2949;
    const double C36761 = C33315 * C2949;
    const double C3268 = C117 * C3243;
    const double C14515 = C10872 * C3243;
    const double C22349 = C5345 * C3243;
    const double C31346 = C10871 * C3243;
    const double C36635 = C33316 * C3243;
    const double C36935 = C33315 * C3243;
    const double C3616 = C117 * C3429;
    const double C14729 = C10872 * C3429;
    const double C22235 = C5346 * C3429;
    const double C22525 = C5345 * C3429;
    const double C31650 = C10871 * C3429;
    const double C36925 = C33316 * C3429;
    const double C37257 = C33315 * C3429;
    const double C6322 =
        (3 * (C49905 + C49823 * C50543 + C50541 * ae) +
         C49823 * (2 * C50543 +
                   C49823 * (C49877 + C49823 * (C49823 * C49880 + C49938 * ae) +
                             C49823 * C49938 * ae) +
                   C50544 * ae) +
         (2 * C50541 + C49823 * C50544) * ae) /
        C49760;
    const double C172 = C156 + C157;
    const double C348 = C329 + C330;
    const double C509 = C495 + C496;
    const double C2980 = C2962 + C2963;
    const double C3278 = C3264 + C3265;
    const double C171 = C154 + C155;
    const double C173 = C158 + C159;
    const double C346 = C325 + C326;
    const double C349 = C331 + C332;
    const double C508 = C493 + C494;
    const double C510 = C497 + C498;
    const double C2629 = C2604 + C2605;
    const double C3277 = C3262 + C3263;
    const double C49915 = C49914 + C49913;
    const double C50034 = C50032 / C49834;
    const double C2954 = (3 * (C49907 + C49912 * C50010) +
                          C49824 * (2 * C50019 + C49824 * C50025)) /
                         C49760;
    const double C50069 = C50064 / C49689;
    const double C50052 = C50045 + C50049;
    const double C50260 = C50254 / C49834;
    const double C50270 = -C50267;
    const double C49966 = C49964 / C49689;
    const double C49973 = C49970 / C49689;
    const double C50186 = C50184 / C49834;
    const double C6325 =
        (-3 * (C49963 * C50162 + C49958)) / C49689 +
        C49823 * ((-2 * C50171) / C49689 - (C49823 * C50177) / C49689);
    const double C50217 = C50213 / C49689;
    const double C50215 = C50210 / C49689;
    const double C50244 = C50241 / C49689;
    const double C50351 = C50345 / C49689;
    const double C50347 = C50341 / C49834;
    const double C50359 = -C50355;
    const double C49953 = C49949 + C49952;
    const double C50114 = C50112 * ce;
    const double C50499 = C49944 + C50498;
    const double C50561 = C49944 + C50559;
    const double C50140 = C50098 * ce;
    const double C50508 = C49824 * C50098;
    const double C50576 = C50094 + C50574;
    const double C50589 = C49823 * C50586;
    const double C50287 = C50284 + C50286;
    const double C50300 = C50294 / C49689;
    const double C50627 = C50090 + C50625;
    const double C50640 = C49823 * C50637;
    const double C50660 = C50656 + C50658;
    const double C51073 = C51034 / C49762;
    const double C51075 = C51038 / C49760;
    const double C2434 = -C51074;
    const double C51077 = C51043 / C49714;
    const double C51045 = C50793 / C49689;
    const double C1480 = -C51076;
    const double C51083 = C51057 / C49714;
    const double C51059 = C50864 / C49689;
    const double C1765 = -C51082;
    const double C51086 = C51066 / C49762;
    const double C51087 = C51068 / C49760;
    const double C17341 = -C51085;
    const double C49720 = C49716 / C49689;
    const double C760 =
        (C49727 / C49697 - (0 * de) / C49689) / C49697 - (0 * de) / C49689;
    const double C1484 = C49727 / C49697 - (0 * de) / C49689;
    const double C51094 = C51050 - C51080;
    const double C51081 = C51053 - C51054;
    const double C627 =
        ((-(0 * de) / C49689) / C49697 -
         ((0 - (C49688 * C49698) / C49689) * de) / C49689) /
            C49697 -
        ((C49688 * ((-C49698 / C49689) / C49697 -
                    ((C50819 - (C49688 * C49702) / C49689) * de) / C49689) +
          C1350) *
         de) /
            C49689 +
        (-C49702 / C49689) / C49697 - (0 * de) / C49689;
    const double C38911 =
        (C49797 / C49785 - (0 * be) / C49760) / C49785 + (0 * ae) / C49760;
    const double C44233 = C49797 / C49785 - (0 * be) / C49760;
    const double C49796 = C49793 / C49760;
    const double C10913 = C10888 + C10889;
    const double C10911 = C10884 + C10885;
    const double C10909 = C10880 + C10881;
    const double C10907 = C10876 + C10877;
    const double C13967 = C13955 + C13956;
    const double C13965 = C13951 + C13952;
    const double C14378 = C14359 + C14360;
    const double C33357 = C33332 + C33333;
    const double C33355 = C33328 + C33329;
    const double C33353 = C33324 + C33325;
    const double C33351 = C33320 + C33321;
    const double C36335 = C36323 + C36324;
    const double C36333 = C36319 + C36320;
    const double C36331 = C36315 + C36316;
    const double C179 = C169 * C50819;
    const double C322 = C169 * C51047;
    const double C652 = C169 * C622;
    const double C1359 = C169 * C1350;
    const double C178 = C168 * C118;
    const double C321 = C168 * C294;
    const double C51098 = C51062 - C51089;
    const double C10917 = C10896 + C10897;
    const double C10915 = C10892 + C10893;
    const double C10912 = C10886 + C10887;
    const double C10910 = C10882 + C10883;
    const double C10908 = C10878 + C10879;
    const double C10906 = C10874 + C10875;
    const double C11112 = C11094 + C11095;
    const double C11110 = C11090 + C11091;
    const double C11107 = C11084 + C11085;
    const double C11105 = C11080 + C11081;
    const double C11299 = C11281 + C11282;
    const double C11297 = C11277 + C11278;
    const double C11295 = C11273 + C11274;
    const double C11293 = C11269 + C11270;
    const double C13968 = C13957 + C13958;
    const double C13966 = C13953 + C13954;
    const double C14379 = C14361 + C14362;
    const double C14377 = C14357 + C14358;
    const double C14524 = C14517 + C14518;
    const double C14750 = C14731 + C14732;
    const double C14747 = C14725 + C14726;
    const double C14745 = C14721 + C14722;
    const double C5378 = C5344 * C133;
    const double C5372 = C5344 * C122;
    const double C5370 = C5344 * C121;
    const double C5364 = C5344 * C131;
    const double C5354 = C5344 * C129;
    const double C5348 = C5344 * C120;
    const double C5566 = C5344 * C307;
    const double C5560 = C5344 * C298;
    const double C5558 = C5344 * C305;
    const double C5552 = C5344 * C297;
    const double C5748 = C5344 * C475;
    const double C5742 = C5344 * C467;
    const double C5736 = C5344 * C473;
    const double C5730 = C5344 * C466;
    const double C5918 = C5344 * C638;
    const double C5912 = C5344 * C631;
    const double C6338 = C5344 * C1016;
    const double C6332 = C5344 * C1009;
    const double C7106 = C5344 * C888;
    const double C7100 = C5344 * C877;
    const double C21931 = C5344 * C303;
    const double C21925 = C5344 * C296;
    const double C22237 = C5344 * C636;
    const double C22231 = C5344 * C630;
    const double C22351 = C5344 * C761;
    const double C22527 = C5344 * C876;
    const double C22517 = C5344 * C884;
    const double C22511 = C5344 * C875;
    const double C22847 = C5344 * C1150;
    const double C5394 = C5368 + C5369;
    const double C5391 = C5362 + C5363;
    const double C5388 = C5356 + C5357;
    const double C5385 = C5350 + C5351;
    const double C21937 = C21929 + C21930;
    const double C21934 = C21923 + C21924;
    const double C22244 = C22233 + C22234;
    const double C51099 = C51071 - C51090;
    const double C33347 = C33313 * C144;
    const double C33341 = C33313 * C132;
    const double C33337 = C33313 * C143;
    const double C33331 = C33313 * C142;
    const double C33327 = C33313 * C130;
    const double C33323 = C33313 * C141;
    const double C33319 = C33313 * C128;
    const double C33539 = C33313 * C316;
    const double C33535 = C33313 * C306;
    const double C33529 = C33313 * C315;
    const double C33525 = C33313 * C304;
    const double C33726 = C33313 * C485;
    const double C33722 = C33313 * C474;
    const double C33718 = C33313 * C484;
    const double C33714 = C33313 * C472;
    const double C33905 = C33313 * C646;
    const double C33901 = C33313 * C637;
    const double C34319 = C33313 * C1024;
    const double C34315 = C33313 * C1015;
    const double C35080 = C33313 * C901;
    const double C35076 = C33313 * C887;
    const double C36330 = C33313 * C645;
    const double C36326 = C33313 * C635;
    const double C36322 = C33313 * C314;
    const double C36318 = C33313 * C302;
    const double C36650 = C33313 * C774;
    const double C36646 = C33313 * C767;
    const double C36638 = C33313 * C773;
    const double C36634 = C33313 * C765;
    const double C36932 = C33313 * C900;
    const double C36928 = C33313 * C885;
    const double C36922 = C33313 * C899;
    const double C36918 = C33313 * C883;
    const double C37250 = C33313 * C1154;
    const double C37862 = C33313 * C902;
    const double C37858 = C33313 * C889;
    const double C49853 = C49852 / C49760;
    const double C50026 = -C50023;
    const double C50178 = -C50175;
    const double C50051 = C50048 / C49760;
    const double C50243 = C50239 / C49760;
    const double C1042 = C1031 + C1032;
    const double C5389 = C5358 + C5359;
    const double C5758 = C5738 + C5739;
    const double C11296 = C11275 + C11276;
    const double C11888 = C11874 + C11875;
    const double C33740 = C33719 + C33720;
    const double C50016 = C50014 / C49760;
    const double C50168 = C50166 / C49760;
    const double C163 = C50919 * C135;
    const double C10899 = C51064 * C135;
    const double C33343 = C33313 * C135;
    const double C336 = C50919 * C308;
    const double C11097 = C51064 * C308;
    const double C33541 = C33313 * C308;
    const double C500 = C50919 * C476;
    const double C5375 = C5342 * C476;
    const double C10895 = C50983 * C476;
    const double C11286 = C51064 * C476;
    const double C33339 = C50983 * C476;
    const double C33730 = C33313 * C476;
    const double C664 = C50919 * C639;
    const double C11465 = C51064 * C639;
    const double C33909 = C33313 * C639;
    const double C2621 = C50919 * C769;
    const double C1645 = C50919 * C891;
    const double C5563 = C5342 * C891;
    const double C11089 = C50983 * C891;
    const double C12640 = C51064 * C891;
    const double C33533 = C50983 * C891;
    const double C35084 = C33313 * C891;
    const double C1034 = C50919 * C1017;
    const double C5367 = C5343 * C1017;
    const double C5745 = C5342 * C1017;
    const double C11280 = C50983 * C1017;
    const double C11879 = C51064 * C1017;
    const double C33724 = C50983 * C1017;
    const double C34323 = C33313 * C1017;
    const double C44254 = C44230 * C1017;
    const double C3443 = C50919 * C1156;
    const double C5549 = C5343 * C1156;
    const double C7103 = C5342 * C1156;
    const double C12634 = C50983 * C1156;
    const double C14952 = C51064 * C1156;
    const double C35078 = C50983 * C1156;
    const double C41854 = C33313 * C1156;
    const double C44436 = C44230 * C1156;
    const double C3093 = C50919 * C2952;
    const double C31187 = C51064 * C2952;
    const double C36762 = C33313 * C2952;
    const double C3269 = C50919 * C3247;
    const double C14516 = C50983 * C3247;
    const double C22350 = C5342 * C3247;
    const double C31347 = C51064 * C3247;
    const double C36636 = C50983 * C3247;
    const double C36936 = C33313 * C3247;
    const double C3617 = C50919 * C3432;
    const double C14730 = C50983 * C3432;
    const double C22236 = C5343 * C3432;
    const double C22526 = C5342 * C3432;
    const double C31651 = C51064 * C3432;
    const double C36926 = C50983 * C3432;
    const double C37258 = C33313 * C3432;
    const double C47504 = C44230 * C3432;
    const double C50050 = -C50047;
    const double C50605 = C49877 + C50603;
    const double C160 = C117 * C134;
    const double C10902 = C10871 * C134;
    const double C33346 = C33315 * C134;
    const double C337 = C117 * C309;
    const double C11100 = C10871 * C309;
    const double C33544 = C33315 * C309;
    const double C501 = C117 * C477;
    const double C5380 = C5345 * C477;
    const double C10890 = C10872 * C477;
    const double C11289 = C10871 * C477;
    const double C33334 = C33316 * C477;
    const double C33733 = C33315 * C477;
    const double C665 = C117 * C640;
    const double C11468 = C10871 * C640;
    const double C33912 = C33315 * C640;
    const double C1648 = C117 * C892;
    const double C5568 = C5345 * C892;
    const double C11092 = C10872 * C892;
    const double C12643 = C10871 * C892;
    const double C33536 = C33316 * C892;
    const double C35087 = C33315 * C892;
    const double C1035 = C117 * C1018;
    const double C5360 = C5346 * C1018;
    const double C5750 = C5345 * C1018;
    const double C11283 = C10872 * C1018;
    const double C11882 = C10871 * C1018;
    const double C33727 = C33316 * C1018;
    const double C34326 = C33315 * C1018;
    const double C5752 = C5346 * C1242;
    const double C11884 = C10872 * C1242;
    const double C34328 = C33316 * C1242;
    const double C1163 =
        (-(C49824 * C49930) / C49689) / C49760 - (C49907 * ce) / C49834 -
        (ae * C49823 * C49991) / C49834 +
        C49823 * (C49823 * ((-(C49824 * C49856) / C49689) / C49760 -
                            (C49912 * ce) / C49834) -
                  (ae * C49991) / C49834);
    const double C768 =
        (-2 * (C49824 * C49958 + C50417 * ce)) / C49689 -
        (C49824 * (C49824 * C49991 + C49958 + C49824 * C49939 * ce)) / C49689 -
        ((C50417 + C49939 * C50010) * ce) / C49689;
    const double C890 =
        -(C49823 * (C49824 * C49991 + C49958 + C49824 * C49939 * ce)) / C49689;
    const double C1157 =
        -(C49991 * C50162 + C49824 * C49958 + C50417 * ce) / C49689;
    const double C5759 = C5740 + C5741;
    const double C6348 = C6340 + C6341;
    const double C11889 = C11876 + C11877;
    const double C34333 = C34320 + C34321;
    const double C50102 = C50100 + C49891;
    const double C50124 = C50119 / C49689;
    const double C50194 = C50192 / C49834;
    const double C50242 = -C50238;
    const double C49995 = C49993 + C49994;
    const double C50426 = C50424 + C50425;
    const double C1158 =
        (C49824 * C49910 + C49823 * (C49823 * C50030 + C50473 * ae) +
         C49823 * C50473 * ae) /
        C49760;
    const double C7096 =
        (2 * (C49823 * C50030 + C50473 * ae) +
         C49823 * (C50030 + C49823 * (C49823 * C49824 * C49923 + C50112 * ae) +
                   C49823 * C50112 * ae) +
         (C50473 + C50112 * C50162) * ae) /
        C49760;
    const double C1152 = C49824 * C50421 + C50473 * C50162;
    const double C7095 =
        2 * C49823 * C50473 + C49823 * (C50473 + C50112 * C50162);
    const double C50560 = C50556 + C50557;
    const double C2793 = C50919 * C893;
    const double C11467 = C50983 * C893;
    const double C33911 = C50983 * C893;
    const double C5747 = C5343 * C1243;
    const double C11881 = C50983 * C1243;
    const double C34325 = C50983 * C1243;
    const double C44634 = C44230 * C1243;
    const double C2620 = C117 * C763;
    const double C2792 = C117 * C880;
    const double C11466 = C10872 * C880;
    const double C33910 = C33316 * C880;
    const double C5746 = C5346 * C1237;
    const double C11880 = C10872 * C1237;
    const double C34324 = C33316 * C1237;
    const double C50575 = C50571 + C50572;
    const double C7105 = C5343 * C3730;
    const double C14954 = C50983 * C3730;
    const double C41856 = C50983 * C3730;
    const double C45960 = C44230 * C3730;
    const double C7104 = C5346 * C3723;
    const double C14953 = C10872 * C3723;
    const double C41855 = C33316 * C3723;
    const double C50105 = C49824 * C50096;
    const double C50136 = -2 * C50096;
    const double C50200 = ae * C50096;
    const double C50198 = C49823 * C50096;
    const double C3729 = (-2 * C49823 * C49991) / C49689 -
                         (C49823 * (C50096 * C50162 + C49991)) / C49689;
    const double C3249 = (C49823 * (2 * C50019 + C49824 * C50025) +
                          (2 * C50470 + C49824 * C50495) * ae) /
                         C49760;
    const double C3434 =
        (C49907 + C49912 * C50010 + C49823 * (C49823 * C50025 + C50495 * ae) +
         C49823 * C50495 * ae) /
        C49760;
    const double C2950 = 3 * (C50417 + C49939 * C50010) +
                         C49824 * (2 * C50470 + C49824 * C50495);
    const double C3244 = C49823 * (2 * C50470 + C49824 * C50495);
    const double C3430 = C50417 + C49939 * C50010 + C50495 * C50162;
    const double C3721 =
        2 * C49823 * C50495 + C49823 * (C50495 + C50098 * C50162);
    const double C6324 =
        (3 * (C49907 + C49823 * C50551 + C50549 * ae) +
         C49823 * (2 * C50551 +
                   C49823 * (C49912 + C49823 * (C49823 * C49918 + C49947 * ae) +
                             C49823 * C49947 * ae) +
                   C50552 * ae) +
         (2 * C50549 + C49823 * C50552) * ae) /
        C49760;
    const double C6320 = 3 * (C50417 + C49939 * C50162) +
                         C49823 * (2 * C50549 + C49823 * C50552);
    const double C50588 = C49823 * C50584;
    const double C50127 = C50123 / C49689;
    const double C50504 = C50502 + C50503;
    const double C50626 = C50622 + C50623;
    const double C22524 = C5343 * C3728;
    const double C31649 = C50983 * C3728;
    const double C37256 = C50983 * C3728;
    const double C47792 = C44230 * C3728;
    const double C22523 = C5346 * C3722;
    const double C31648 = C10872 * C3722;
    const double C37255 = C33316 * C3722;
    const double C6497 =
        (3 * (C50007 + C49823 * C50567 + C50565 * ae) +
         C49823 * (2 * C50567 +
                   C49823 * (C50038 + C49823 * (C49823 * C50255 + C50122 * ae) +
                             C49823 * C50122 * ae) +
                   C50568 * ae) +
         (2 * C50565 + C49823 * C50568) * ae) /
        C49760;
    const double C6495 = 3 * (C50467 + C50087 * C50162) +
                         C49823 * (2 * C50565 + C49823 * C50568);
    const double C50639 = C49823 * C50635;
    const double C50129 = C50128 + C49894;
    const double C50195 = C50193 + C50089;
    const double C50297 = C50290 / C49689;
    const double C50327 = C50324 / C49834;
    const double C50328 = -2 * C50322;
    const double C50326 = ae * C50322;
    const double C50606 = C50602 + C50604;
    const double C50659 = C49880 + C50657;
    const double C49867 = C49866 / C49760;
    const double C50073 = -C50070;
    const double C50216 = -C50211;
    const double C50271 = C50268 / C49760;
    const double C50360 = C50356 / C49760;
    const double C49925 = C49920 + C49924;
    const double C50035 = C49885 + C50033;
    const double C50074 = C49824 * C50071;
    const double C3726 =
        (2 * (C49823 * C50025 + C50495 * ae) +
         C49823 * (C50025 + C49823 * (C49823 * C50071 + C50098 * ae) +
                   C49823 * C50098 * ae) +
         (C50495 + C50098 * C50162) * ae) /
        C49760;
    const double C50272 = C50264 + C50269;
    const double C49980 = C49979 / C49689;
    const double C50113 = C50110 + C50111;
    const double C50187 = C50185 + C49900;
    const double C50146 = C49824 * C50145;
    const double C50201 = C50145 * C50162;
    const double C50218 = C49823 * C50214;
    const double C50303 = C50302 + C49898;
    const double C50329 = C50325 + C50125;
    const double C50361 = C50358 / C49689;
    const double C180 = C170 * C118;
    const double C327 = C170 * C294;
    const double C355 = C345 * C295;
    const double C653 = C345 * C628;
    const double C1360 = C345 * C1356;
    const double C2440 = C345 * C118;
    const double C2606 = C345 * C294;
    const double C515 = C507 * C118;
    const double C1900 = C507 * C294;
    const double C3615 = C50919 * C1162;
    const double C14728 = C50983 * C1162;
    const double C15164 = C51064 * C1162;
    const double C21928 = C5343 * C1162;
    const double C22520 = C5342 * C1162;
    const double C22854 = C5341 * C1162;
    const double C36924 = C50983 * C1162;
    const double C37254 = C33313 * C1162;
    const double C47196 = C44230 * C1162;
    const double C2964 = C117 * C766;
    const double C14521 = C10871 * C766;
    const double C22357 = C5344 * C766;
    const double C36637 = C33315 * C766;
    const double C3266 = C117 * C886;
    const double C14363 = C10872 * C886;
    const double C14735 = C10871 * C886;
    const double C22239 = C5345 * C886;
    const double C22533 = C5344 * C886;
    const double C36327 = C33316 * C886;
    const double C36931 = C33315 * C886;
    const double C3614 = C117 * C1155;
    const double C14727 = C10872 * C1155;
    const double C15163 = C10871 * C1155;
    const double C21927 = C5346 * C1155;
    const double C22519 = C5345 * C1155;
    const double C22853 = C5344 * C1155;
    const double C36923 = C33316 * C1155;
    const double C37253 = C33315 * C1155;
    const double C15161 = C10872 * C3731;
    const double C22521 = C5346 * C3731;
    const double C22851 = C5345 * C3731;
    const double C37251 = C33316 * C3731;
    const double C676 = C657 + C658;
    const double C11474 = C11460 + C11461;
    const double C1657 = C1642 + C1643;
    const double C5576 = C5556 + C5557;
    const double C11106 = C11082 + C11083;
    const double C12649 = C12635 + C12636;
    const double C33550 = C33526 + C33527;
    const double C675 = C655 + C656;
    const double C11472 = C11456 + C11457;
    const double C2630 = C2612 + C2613;
    const double C14381 = C14369 + C14370;
    const double C1656 = C1638 + C1639;
    const double C5573 = C5550 + C5551;
    const double C11104 = C11078 + C11079;
    const double C12647 = C12631 + C12632;
    const double C33548 = C33522 + C33523;
    const double C2796 = C2788 + C2789;
    const double C5925 = C5914 + C5915;
    const double C11473 = C11458 + C11459;
    const double C14754 = C14739 + C14740;
    const double C33917 = C33902 + C33903;
    const double C1041 = C1029 + C1030;
    const double C5386 = C5352 + C5353;
    const double C5755 = C5732 + C5733;
    const double C11294 = C11271 + C11272;
    const double C11886 = C11870 + C11871;
    const double C33738 = C33715 + C33716;
    const double C5756 = C5734 + C5735;
    const double C6345 = C6334 + C6335;
    const double C11887 = C11872 + C11873;
    const double C34331 = C34316 + C34317;
    const double C3620 = C3612 + C3613;
    const double C14746 = C14723 + C14724;
    const double C15166 = C15159 + C15160;
    const double C21933 = C21921 + C21922;
    const double C22536 = C22513 + C22514;
    const double C36942 = C36919 + C36920;
    const double C15165 = C15157 + C15158;
    const double C22537 = C22515 + C22516;
    const double C22856 = C22845 + C22846;
    const double C37263 = C37247 + C37248;
    const double C182 = C172 * C118;
    const double C333 = C172 * C294;
    const double C357 = C348 * C295;
    const double C661 = C348 * C628;
    const double C1364 = C348 * C1356;
    const double C2447 = C348 * C118;
    const double C2618 = C348 * C294;
    const double C517 = C509 * C118;
    const double C1904 = C509 * C294;
    const double C181 = C171 * C50819;
    const double C328 = C171 * C51047;
    const double C660 = C171 * C622;
    const double C1363 = C171 * C1350;
    const double C183 = C173 * C50819;
    const double C334 = C173 * C51047;
    const double C668 = C173 * C622;
    const double C1367 = C173 * C1350;
    const double C356 = C346 * C50835;
    const double C654 = C346 * C623;
    const double C1361 = C346 * C50835;
    const double C2441 = C346 * C50819;
    const double C2607 = C346 * C51047;
    const double C2967 = C346 * C622;
    const double C3885 = C346 * C1350;
    const double C358 = C349 * C50835;
    const double C662 = C349 * C623;
    const double C1365 = C349 * C50835;
    const double C2446 = C349 * C50819;
    const double C2617 = C349 * C51047;
    const double C3893 = C349 * C1350;
    const double C8646 = C349 * C622;
    const double C516 = C508 * C50819;
    const double C1640 = C508 * C1350;
    const double C1899 = C508 * C51047;
    const double C518 = C510 * C50819;
    const double C1646 = C510 * C1350;
    const double C1903 = C510 * C51047;
    const double C136 = (4 * (2 * C49907 + C49831 * C49910) +
                         C49831 * (3 * C49910 + C49831 * C49915)) /
                        C49760;
    const double C310 = (C49824 * (3 * C49910 + C49831 * C49915)) / C49760;
    const double C478 = (C49823 * (3 * C49910 + C49831 * C49915) +
                         (3 * (C49935 + C49938 * C49840) +
                          C49831 * (2 * C49939 + C49831 * C49944)) *
                             ae) /
                        C49760;
    const double C641 =
        (2 * C49907 + C49831 * C49910 + C49915 * C50010) / C49760;
    const double C2977 = C50919 * C2954;
    const double C50072 = -C50069;
    const double C3085 = (4 * (2 * C50007 + C49824 * C50015) +
                          C49824 * (3 * C50015 + C49824 * C50052)) /
                         C49760;
    const double C50273 = C50270 / C49760;
    const double C49968 = C49967 - C49966;
    const double C6342 = C5346 * C6325;
    const double C50219 = -C50215;
    const double C50247 = C50240 - C50244;
    const double C50362 = C50359 / C49760;
    const double C49998 = C49953 * ce;
    const double C50430 = C49831 * C49953;
    const double C50476 = C49824 * C49953;
    const double C2951 = 3 * (C50421 + C49944 * C50010) +
                         C49824 * (2 * C50473 + C49824 * C50499);
    const double C3431 = C50421 + C49944 * C50010 + C50499 * C50162;
    const double C4251 = C49823 * (2 * C50473 + C49824 * C50499);
    const double C6321 = 3 * (C50421 + C49944 * C50162) +
                         C49823 * (2 * C50558 + C49823 * C50561);
    const double C50144 = C50140 / C49689;
    const double C50509 = C50507 + C50508;
    const double C6496 = 3 * (C50470 + C50094 * C50162) +
                         C49823 * (2 * C50573 + C49823 * C50576);
    const double C50591 = C50587 + C50589;
    const double C50295 = C50287 * ce;
    const double C50613 = C49824 * C50287;
    const double C22838 = 3 * (C50491 + C50090 * C50162) +
                          C49823 * (2 * C50624 + C49823 * C50627);
    const double C50642 = C50638 + C50640;
    const double C50662 = C49823 * C50660;
    const double C51091 = C51033 - C51073;
    const double C51092 = C51037 - C51075;
    const double C51093 = C51042 - C51077;
    const double C51078 = C51044 - C51045;
    const double C51095 = C51055 - C51083;
    const double C51084 = C51058 - C51059;
    const double C51096 = C51060 - C51086;
    const double C51097 = C51067 - C51087;
    const double C49725 = C50819 - C49720;
    const double C1499 = C173 * C51094;
    const double C1493 = C171 * C51094;
    const double C1487 = C169 * C51094;
    const double C4047 = C346 * C51094;
    const double C9593 = C349 * C51094;
    const double C752 = (C51047 - C51079) / C49697 - (C51094 * C50831) / C49689;
    const double C1495 = C349 * C51081;
    const double C1489 = C346 * C51081;
    const double C753 =
        (2 * C50835 + C51094) / C49697 - (C51081 * C50831) / C49689;
    const double C754 = C51081 / C49697 - C50838 / C49718;
    const double C667 = C172 * C627;
    const double C659 = C170 * C627;
    const double C651 = C168 * C627;
    const double C2966 = C345 * C627;
    const double C8645 = C348 * C627;
    const double C44253 = C44233 * C1010;
    const double C44247 = C44233 * C1018;
    const double C44245 = C44233 * C1016;
    const double C44239 = C44233 * C1009;
    const double C44435 = C44233 * C1151;
    const double C44639 = C44233 * C1242;
    const double C44633 = C44233 * C1237;
    const double C44627 = C44233 * C1244;
    const double C44621 = C44233 * C1238;
    const double C45217 = C44233 * C6325;
    const double C45959 = C44233 * C3723;
    const double C47195 = C44233 * C1155;
    const double C47189 = C44233 * C1150;
    const double C47503 = C44233 * C3429;
    const double C47791 = C44233 * C3722;
    const double C47789 = C44233 * C3731;
    const double C47783 = C44233 * C3724;
    const double C49799 = C50919 - C49796;
    const double C44266 = C51098 * C143;
    const double C44260 = C51098 * C132;
    const double C44258 = C51098 * C130;
    const double C44252 = C51098 * C142;
    const double C44242 = C51098 * C141;
    const double C44236 = C51098 * C128;
    const double C44454 = C51098 * C316;
    const double C44448 = C51098 * C306;
    const double C44446 = C51098 * C315;
    const double C44440 = C51098 * C304;
    const double C44636 = C51098 * C485;
    const double C44630 = C51098 * C474;
    const double C44624 = C51098 * C484;
    const double C44618 = C51098 * C472;
    const double C44806 = C51098 * C646;
    const double C44800 = C51098 * C637;
    const double C45214 = C51098 * C1024;
    const double C45208 = C51098 * C1015;
    const double C45962 = C51098 * C901;
    const double C45956 = C51098 * C887;
    const double C47200 = C51098 * C314;
    const double C47194 = C51098 * C302;
    const double C47506 = C51098 * C645;
    const double C47500 = C51098 * C635;
    const double C47626 = C51098 * C773;
    const double C47620 = C51098 * C765;
    const double C47802 = C51098 * C900;
    const double C47796 = C51098 * C885;
    const double C47786 = C51098 * C899;
    const double C47780 = C51098 * C883;
    const double C48118 = C51098 * C1162;
    const double C48112 = C51098 * C1154;
    const double C38904 =
        (C51098 * C50978) / C49760 + (C51064 - C51088) / C49785;
    const double C10923 = C10912 + C10913;
    const double C10922 = C10910 + C10911;
    const double C31082 = C14377 + C14378;
    const double C5399 = C5378 + C5379;
    const double C5396 = C5372 + C5373;
    const double C5395 = C5370 + C5371;
    const double C5392 = C5364 + C5365;
    const double C5387 = C5354 + C5355;
    const double C5384 = C5348 + C5349;
    const double C5581 = C5566 + C5567;
    const double C5578 = C5560 + C5561;
    const double C5577 = C5558 + C5559;
    const double C5574 = C5552 + C5553;
    const double C5763 = C5748 + C5749;
    const double C5760 = C5742 + C5743;
    const double C5757 = C5736 + C5737;
    const double C5754 = C5730 + C5731;
    const double C5927 = C5918 + C5919;
    const double C5924 = C5912 + C5913;
    const double C6347 = C6338 + C6339;
    const double C6344 = C6332 + C6333;
    const double C7115 = C7106 + C7107;
    const double C7112 = C7100 + C7101;
    const double C21938 = C21931 + C21932;
    const double C21935 = C21925 + C21926;
    const double C22246 = C22237 + C22238;
    const double C22243 = C22231 + C22232;
    const double C22361 = C22351 + C22352;
    const double C22543 = C22527 + C22528;
    const double C22538 = C22517 + C22518;
    const double C22535 = C22511 + C22512;
    const double C22857 = C22847 + C22848;
    const double C44262 = C51099 * C476;
    const double C44256 = C51099 * C474;
    const double C44250 = C51099 * C485;
    const double C44244 = C51099 * C484;
    const double C44238 = C51099 * C472;
    const double C44450 = C51099 * C891;
    const double C44444 = C51099 * C901;
    const double C44438 = C51099 * C887;
    const double C44632 = C51099 * C1017;
    const double C44626 = C51099 * C1024;
    const double C44620 = C51099 * C1015;
    const double C44808 = C51099 * C902;
    const double C44802 = C51099 * C889;
    const double C45216 = C51099 * C1250;
    const double C45210 = C51099 * C1245;
    const double C45958 = C51099 * C1156;
    const double C47198 = C51099 * C899;
    const double C47192 = C51099 * C883;
    const double C47508 = C51099 * C900;
    const double C47502 = C51099 * C885;
    const double C47618 = C51099 * C3247;
    const double C47794 = C51099 * C3432;
    const double C47788 = C51099 * C1162;
    const double C47782 = C51099 * C1154;
    const double C48110 = C51099 * C3732;
    const double C38905 =
        (C51099 * C50978) / C49760 + (2 * C50983 + C51098) / C49785;
    const double C38906 = (C50978 * C50983) / C49764 + C51099 / C49785;
    const double C33361 = C33340 + C33341;
    const double C33359 = C33336 + C33337;
    const double C33356 = C33330 + C33331;
    const double C33354 = C33326 + C33327;
    const double C33352 = C33322 + C33323;
    const double C33350 = C33318 + C33319;
    const double C33556 = C33538 + C33539;
    const double C33554 = C33534 + C33535;
    const double C33551 = C33528 + C33529;
    const double C33549 = C33524 + C33525;
    const double C33743 = C33725 + C33726;
    const double C33741 = C33721 + C33722;
    const double C33739 = C33717 + C33718;
    const double C33737 = C33713 + C33714;
    const double C33918 = C33904 + C33905;
    const double C33916 = C33900 + C33901;
    const double C34332 = C34318 + C34319;
    const double C34330 = C34314 + C34315;
    const double C35093 = C35079 + C35080;
    const double C35091 = C35075 + C35076;
    const double C36338 = C36329 + C36330;
    const double C36336 = C36325 + C36326;
    const double C36334 = C36321 + C36322;
    const double C36332 = C36317 + C36318;
    const double C36656 = C36645 + C36646;
    const double C36651 = C36633 + C36634;
    const double C36946 = C36927 + C36928;
    const double C36943 = C36921 + C36922;
    const double C36941 = C36917 + C36918;
    const double C37264 = C37249 + C37250;
    const double C37864 = C37857 + C37858;
    const double C49854 = C49853 - C49847;
    const double C50027 = C50026 / C49760;
    const double C50179 = C50178 / C49760;
    const double C50054 = C50051 - C50044;
    const double C50246 = C50243 - C50235;
    const double C1048 = C1042 * C50819;
    const double C50017 = C50016 - C50012;
    const double C50169 = C50168 - C50164;
    const double C175 = C162 + C163;
    const double C10918 = C10898 + C10899;
    const double C33362 = C33342 + C33343;
    const double C351 = C335 + C336;
    const double C11113 = C11096 + C11097;
    const double C33557 = C33540 + C33541;
    const double C511 = C499 + C500;
    const double C5397 = C5374 + C5375;
    const double C10916 = C10894 + C10895;
    const double C11301 = C11285 + C11286;
    const double C33360 = C33338 + C33339;
    const double C33745 = C33729 + C33730;
    const double C677 = C663 + C664;
    const double C11476 = C11464 + C11465;
    const double C33920 = C33908 + C33909;
    const double C1658 = C1644 + C1645;
    const double C5579 = C5562 + C5563;
    const double C11109 = C11088 + C11089;
    const double C12651 = C12639 + C12640;
    const double C33553 = C33532 + C33533;
    const double C35095 = C35083 + C35084;
    const double C1043 = C1033 + C1034;
    const double C5393 = C5366 + C5367;
    const double C5761 = C5744 + C5745;
    const double C11298 = C11279 + C11280;
    const double C11890 = C11878 + C11879;
    const double C33742 = C33723 + C33724;
    const double C34334 = C34322 + C34323;
    const double C3450 = C3442 + C3443;
    const double C5572 = C5548 + C5549;
    const double C7113 = C7102 + C7103;
    const double C12648 = C12633 + C12634;
    const double C14959 = C14951 + C14952;
    const double C35092 = C35077 + C35078;
    const double C41861 = C41853 + C41854;
    const double C3096 = C3092 + C3093;
    const double C31193 = C31186 + C31187;
    const double C36768 = C36761 + C36762;
    const double C3280 = C3268 + C3269;
    const double C14523 = C14515 + C14516;
    const double C22360 = C22349 + C22350;
    const double C31353 = C31346 + C31347;
    const double C36652 = C36635 + C36636;
    const double C36950 = C36935 + C36936;
    const double C3622 = C3616 + C3617;
    const double C14749 = C14729 + C14730;
    const double C22245 = C22235 + C22236;
    const double C22542 = C22525 + C22526;
    const double C31657 = C31650 + C31651;
    const double C36945 = C36925 + C36926;
    const double C37268 = C37257 + C37258;
    const double C50053 = C50050 / C49760;
    const double C50607 = C50605 + C50600;
    const double C174 = C160 + C161;
    const double C10920 = C10902 + C10903;
    const double C33364 = C33346 + C33347;
    const double C3445 = C50919 * C1163;
    const double C5555 = C5343 * C1163;
    const double C7109 = C5342 * C1163;
    const double C12638 = C50983 * C1163;
    const double C14956 = C51064 * C1163;
    const double C35082 = C50983 * C1163;
    const double C41858 = C33313 * C1163;
    const double C44442 = C44230 * C1163;
    const double C45964 = C51099 * C1163;
    const double C2614 = C117 * C768;
    const double C14373 = C10871 * C768;
    const double C36649 = C33315 * C768;
    const double C2790 = C117 * C890;
    const double C5920 = C5345 * C890;
    const double C11462 = C10872 * C890;
    const double C14743 = C10871 * C890;
    const double C33906 = C33316 * C890;
    const double C37861 = C33315 * C890;
    const double C3444 = C117 * C1157;
    const double C5554 = C5346 * C1157;
    const double C7108 = C5345 * C1157;
    const double C12637 = C10872 * C1157;
    const double C14955 = C10871 * C1157;
    const double C35081 = C33316 * C1157;
    const double C41857 = C33315 * C1157;
    const double C44441 = C44233 * C1157;
    const double C50103 = C50102 + C50101;
    const double C50245 = C50242 / C49760;
    const double C770 =
        (-2 * (C49824 * C49961 + C50421 * ce)) / C49689 -
        (C49824 * (C49824 * C49995 + C49961 + C49824 * C49944 * ce)) / C49689 -
        ((C50421 + C49944 * C50010) * ce) / C49689;
    const double C894 =
        -(C49823 * (C49824 * C49995 + C49961 + C49824 * C49944 * ce)) / C49689;
    const double C1159 =
        -(C49995 * C50162 + C49824 * C49961 + C50421 * ce) / C49689;
    const double C895 =
        (C49823 * C49824 * C49915 + C49824 * C50426 * ae) / C49760;
    const double C1019 =
        (2 * C49907 + C49831 * C49910 +
         C49823 * (C49823 * C49915 + C50426 * ae) + C49823 * C50426 * ae) /
        C49760;
    const double C124 = 4 * (2 * C50417 + C49831 * C50421) +
                        C49831 * (3 * C50421 + C49831 * C50426);
    const double C300 = C49824 * (3 * C50421 + C49831 * C50426);
    const double C469 = C49823 * (3 * C50421 + C49831 * C50426);
    const double C633 = 2 * C50417 + C49831 * C50421 + C50426 * C50010;
    const double C764 =
        2 * C49824 * C50426 + C49824 * (C50426 + C49953 * C50010);
    const double C881 = C49823 * C49824 * C50426;
    const double C882 = C49823 * (C50426 + C49953 * C50010);
    const double C1011 = 2 * C50417 + C49831 * C50421 + C50426 * C50162;
    const double C1236 =
        2 * C49823 * C50426 + C49823 * (C50426 + C49953 * C50162);
    const double C5565 = C5343 * C1158;
    const double C9042 = C50919 * C1158;
    const double C12642 = C50983 * C1158;
    const double C35086 = C50983 * C1158;
    const double C44452 = C44230 * C1158;
    const double C5564 = C5346 * C1152;
    const double C9041 = C117 * C1152;
    const double C12641 = C10872 * C1152;
    const double C35085 = C33316 * C1152;
    const double C44451 = C44233 * C1152;
    const double C6327 =
        (3 * (C49910 + C49823 * C50560 + C50558 * ae) +
         C49823 * (2 * C50560 +
                   C49823 * (C49885 + C49823 * (C49823 * C49923 + C49951 * ae) +
                             C49823 * C49951 * ae) +
                   C50561 * ae) +
         (2 * C50558 + C49823 * C50561) * ae) /
        C49760;
    const double C2632 = C2620 + C2621;
    const double C2798 = C2792 + C2793;
    const double C11477 = C11466 + C11467;
    const double C33921 = C33910 + C33911;
    const double C5762 = C5746 + C5747;
    const double C11891 = C11880 + C11881;
    const double C34335 = C34324 + C34325;
    const double C6499 =
        (3 * (C50019 + C49823 * C50575 + C50573 * ae) +
         C49823 * (2 * C50575 +
                   C49823 * (C50059 +
                             C49823 * (C49823 * C49824 * C50063 + C50139 * ae) +
                             C49823 * C50139 * ae) +
                   C50576 * ae) +
         (2 * C50573 + C49823 * C50576) * ae) /
        C49760;
    const double C7114 = C7104 + C7105;
    const double C14960 = C14953 + C14954;
    const double C41862 = C41855 + C41856;
    const double C50107 = C50105 + C49963;
    const double C50141 = C50136 / C49689;
    const double C50202 = C50200 / C49834;
    const double C7110 = C5346 * C3729;
    const double C14957 = C10872 * C3729;
    const double C41859 = C33316 * C3729;
    const double C45965 = C44233 * C3729;
    const double C3273 = C50919 * C3249;
    const double C14372 = C50983 * C3249;
    const double C36644 = C50983 * C3249;
    const double C3447 = C50919 * C3434;
    const double C5917 = C5343 * C3434;
    const double C14738 = C50983 * C3434;
    const double C37856 = C50983 * C3434;
    const double C44804 = C44230 * C3434;
    const double C2976 = C117 * C2950;
    const double C3272 = C117 * C3244;
    const double C14371 = C10872 * C3244;
    const double C36643 = C33316 * C3244;
    const double C3446 = C117 * C3430;
    const double C5916 = C5346 * C3430;
    const double C14737 = C10872 * C3430;
    const double C37855 = C33316 * C3430;
    const double C44803 = C44233 * C3430;
    const double C6337 = C5343 * C6324;
    const double C45212 = C44230 * C6324;
    const double C6336 = C5346 * C6320;
    const double C45211 = C44233 * C6320;
    const double C50590 = C49912 + C50588;
    const double C3251 = (C49823 * (3 * C50015 + C49824 * C50052) +
                          (3 * C50491 + C49824 * C50504) * ae) /
                         C49760;
    const double C3605 =
        (2 * C50007 + C49824 * C50015 +
         C49823 * (C49823 * C50052 + C50504 * ae) + C49823 * C50504 * ae) /
        C49760;
    const double C3083 = 4 * (2 * C50467 + C49824 * C50491) +
                         C49824 * (3 * C50491 + C49824 * C50504);
    const double C3245 = C49823 * (3 * C50491 + C49824 * C50504);
    const double C3603 = 2 * C50467 + C49824 * C50491 + C50504 * C50162;
    const double C20694 =
        2 * C49823 * C50504 + C49823 * (C50504 + C50287 * C50162);
    const double C22839 =
        (3 * (C50015 + C49823 * C50626 + C50624 * ae) +
         C49823 * (2 * C50626 +
                   C49823 * (C50046 + C49823 * (C49823 * C50265 + C50285 * ae) +
                             C49823 * C50285 * ae) +
                   C50627 * ae) +
         (2 * C50624 + C49823 * C50627) * ae) /
        C49760;
    const double C22541 = C22523 + C22524;
    const double C31656 = C31648 + C31649;
    const double C37267 = C37255 + C37256;
    const double C22844 = C5343 * C6497;
    const double C48108 = C44230 * C6497;
    const double C22843 = C5346 * C6495;
    const double C48107 = C44233 * C6495;
    const double C50641 = C50038 + C50639;
    const double C50130 = C50129 + C50126;
    const double C6498 =
        (-3 * (C50089 * C50162 + C49987)) / C49689 +
        C49823 * ((-2 * C50190) / C49689 - (C49823 * C50195) / C49689);
    const double C50332 = C50328 / C49689;
    const double C50330 = C50326 / C49834;
    const double C6602 = 4 * (2 * C50541 + C49823 * C50544) +
                         C49823 * (3 * C50544 + C49823 * C50606);
    const double C50661 = C50659 + C50654;
    const double C49868 = C49867 - C49859;
    const double C50076 = C50073 / C49760;
    const double C50220 = C50216 / C49760;
    const double C50274 = C50271 - C50263;
    const double C50363 = C50360 - C50350;
    const double C49926 = C49831 * C49925;
    const double C771 =
        (2 * C49824 * C49915 + C49824 * (C49915 + C49925 * C50010)) / C49760;
    const double C897 = (C49823 * (C49915 + C49925 * C50010) +
                         (C50426 + C49953 * C50010) * ae) /
                        C49760;
    const double C1241 =
        (2 * (C49823 * C49915 + C50426 * ae) +
         C49823 * (C49915 + C49823 * (C49823 * C49925 + C49953 * ae) +
                   C49823 * C49953 * ae) +
         (C50426 + C49953 * C50162) * ae) /
        C49760;
    const double C2956 = (3 * (C49910 + C49885 * C50010) +
                          C49824 * (2 * C50030 + C49824 * C50035)) /
                         C49760;
    const double C3437 =
        (C49910 + C49885 * C50010 + C49823 * (C49823 * C50035 + C50499 * ae) +
         C49823 * C50499 * ae) /
        C49760;
    const double C4252 = (C49823 * (2 * C50030 + C49824 * C50035) +
                          (2 * C50473 + C49824 * C50499) * ae) /
                         C49760;
    const double C50077 = C50067 + C50074;
    const double C50275 = C49824 * C50272;
    const double C20696 =
        (2 * (C49823 * C50052 + C50504 * ae) +
         C49823 * (C50052 + C49823 * (C49823 * C50272 + C50287 * ae) +
                   C49823 * C50287 * ae) +
         (C50504 + C50287 * C50162) * ae) /
        C49760;
    const double C49981 = C49976 - C49980;
    const double C50115 = C49824 * C50113;
    const double C7097 = (-2 * C49823 * C49995) / C49689 -
                         (C49823 * (C50113 * C50162 + C49995)) / C49689;
    const double C6326 =
        (-3 * (C49900 * C50162 + C49961)) / C49689 +
        C49823 * ((-2 * C50182) / C49689 - (C49823 * C50187) / C49689);
    const double C50147 = C50146 + C49971;
    const double C50203 = C50201 + C50096;
    const double C50221 = C50218 / C49689;
    const double C50304 = C50303 + C50299;
    const double C50333 = C49823 * C50329;
    const double C50364 = C50357 - C50361;
    const double C2981 = C2964 + C2965;
    const double C14526 = C14521 + C14522;
    const double C22364 = C22357 + C22358;
    const double C36653 = C36637 + C36638;
    const double C3279 = C3266 + C3267;
    const double C14380 = C14363 + C14364;
    const double C14752 = C14735 + C14736;
    const double C22247 = C22239 + C22240;
    const double C22546 = C22533 + C22534;
    const double C36337 = C36327 + C36328;
    const double C36948 = C36931 + C36932;
    const double C3621 = C3614 + C3615;
    const double C14748 = C14727 + C14728;
    const double C15168 = C15163 + C15164;
    const double C21936 = C21927 + C21928;
    const double C22539 = C22519 + C22520;
    const double C22860 = C22853 + C22854;
    const double C36944 = C36923 + C36924;
    const double C37266 = C37253 + C37254;
    const double C682 = C676 * C624;
    const double C1491 = C676 * C1479;
    const double C2443 = C676 * C50819;
    const double C2611 = C676 * C51047;
    const double C2609 = C676 * C50835;
    const double C2973 = C676 * C622;
    const double C2969 = C676 * C623;
    const double C3889 = C676 * C1350;
    const double C3887 = C676 * C50835;
    const double C4053 = C676 * C51094;
    const double C4049 = C676 * C51081;
    const double C1663 = C1657 * C50835;
    const double C1901 = C1657 * C50835;
    const double C2785 = C1657 * C50819;
    const double C4257 = C1657 * C1350;
    const double C4605 = C1657 * C51047;
    const double C13962 = C11107 + C11106;
    const double C13960 = C11106 + C11107;
    const double C681 = C675 * C629;
    const double C1490 = C675 * C1484;
    const double C2442 = C675 * C118;
    const double C2610 = C675 * C294;
    const double C2608 = C675 * C295;
    const double C2972 = C675 * C627;
    const double C2968 = C675 * C628;
    const double C3886 = C675 * C1356;
    const double C2634 = C2630 * C295;
    const double C2974 = C2630 * C628;
    const double C2970 = C2630 * C629;
    const double C3890 = C2630 * C1356;
    const double C4050 = C2630 * C1484;
    const double C1662 = C1656 * C1356;
    const double C1898 = C1656 * C295;
    const double C2784 = C1656 * C118;
    const double C4606 = C1656 * C294;
    const double C13961 = C11105 + C11104;
    const double C13959 = C11104 + C11105;
    const double C2800 = C2796 * C118;
    const double C4256 = C2796 * C1356;
    const double C4610 = C2796 * C294;
    const double C4604 = C2796 * C295;
    const double C14367 = C11473 + C11472;
    const double C14365 = C11472 + C11473;
    const double C1047 = C1041 * C118;
    const double C188 = C180 + C181;
    const double C347 = C327 + C328;
    const double C191 = C183 + C182;
    const double C189 = C182 + C183;
    const double C350 = C333 + C334;
    const double C8193 = C2447 + C2446;
    const double C8343 = C2618 + C2617;
    const double C524 = C518 + C517;
    const double C165 = C50919 * C136;
    const double C340 = C50919 * C310;
    const double C504 = C50919 * C478;
    const double C10901 = C50983 * C478;
    const double C33345 = C50983 * C478;
    const double C672 = C50919 * C641;
    const double C50075 = C50072 / C49760;
    const double C20310 = C50919 * C3085;
    const double C50276 = C50273 - C49859;
    const double C137 =
        4 * ((-2 * C49958) / C49689 - (C49831 * C49961) / C49689) +
        C49831 * ((-3 * C49961) / C49689 + C49831 * C49968);
    const double C311 = C49824 * ((-3 * C49961) / C49689 + C49831 * C49968) -
                        ((3 * (C49935 + C49938 * C49840) +
                          C49831 * (2 * C49939 + C49831 * C49944)) *
                         ce) /
                            C49689;
    const double C479 = C49823 * ((-3 * C49961) / C49689 + C49831 * C49968);
    const double C642 = (-2 * C49958) / C49689 - (C49831 * C49961) / C49689 +
                        C49824 * (C49824 * C49968 - (C50426 * ce) / C49689) -
                        (C49824 * C50426 * ce) / C49689;
    const double C896 = C49823 * (C49824 * C49968 - (C50426 * ce) / C49689);
    const double C1020 =
        (-2 * C49958) / C49689 - (C49831 * C49961) / C49689 + C49968 * C50162;
    const double C50222 = C50219 / C49760;
    const double C6605 =
        4 * ((-2 * C50159) / C49689 - (C49823 * C50167) / C49689) +
        C49823 * ((-3 * C50167) / C49689 + C49823 * C50247);
    const double C50365 = C50362 - C49859;
    const double C49999 = C49998 / C49689;
    const double C50431 = C50429 + C50430;
    const double C1160 =
        (C49824 * C49915 + C49823 * (C49823 * C49824 * C49925 + C50476 * ae) +
         C49823 * C50476 * ae) /
        C49760;
    const double C1153 = C49824 * C50426 + C50476 * C50162;
    const double C3084 = 4 * (2 * C50470 + C49824 * C50495) +
                         C49824 * (3 * C50495 + C49824 * C50509);
    const double C3246 = C49823 * (3 * C50495 + C49824 * C50509);
    const double C3604 = 2 * C50470 + C49824 * C50495 + C50509 * C50162;
    const double C6601 = 4 * (2 * C50549 + C49823 * C50552) +
                         C49823 * (3 * C50552 + C49823 * C50591);
    const double C50301 = C50295 / C49689;
    const double C50614 = C50612 + C50613;
    const double C22958 = 4 * (2 * C50565 + C49823 * C50568) +
                          C49823 * (3 * C50568 + C49823 * C50642);
    const double C50664 = C50652 + C50662;
    const double C107 = (C51091 * C50759) / C49760 + (C51035 - C51074) / C49785;
    const double C108 =
        (C51092 * C50759) / C49760 + (2 * C50769 + C51091) / C49785;
    const double C109 = (C50759 * C50769) / C49764 + C51092 / C49785;
    const double C112 = (C51040 - C51076) / C49697 - (C51093 * C50781) / C49689;
    const double C113 =
        (2 * C50790 + C51093) / C49697 - (C51078 * C50781) / C49689;
    const double C114 = C51078 / C49697 - C50793 / C49718;
    const double C1232 =
        (C51049 - C51082) / C49697 - (C51095 * C50857) / C49689;
    const double C1233 =
        (2 * C50861 + C51095) / C49697 - (C51084 * C50857) / C49689;
    const double C1234 = C51084 / C49697 - C50864 / C49718;
    const double C19940 =
        (C51096 * C50952) / C49760 + (C51063 - C51085) / C49785;
    const double C19941 =
        (C51097 * C50952) / C49760 + (2 * C50957 + C51096) / C49785;
    const double C19942 = (C50952 * C50957) / C49764 + C51097 / C49785;
    const double C49729 = C49725 * ce;
    const double C1355 = (-C49698 / C49689) / C49697 - (C49725 * de) / C49689;
    const double C44280 = C44253 + C44254;
    const double C44276 = C44245 + C44246;
    const double C44273 = C44239 + C44240;
    const double C44459 = C44435 + C44436;
    const double C44649 = C44633 + C44634;
    const double C44646 = C44627 + C44628;
    const double C44643 = C44621 + C44622;
    const double C45969 = C45959 + C45960;
    const double C47204 = C47195 + C47196;
    const double C47201 = C47189 + C47190;
    const double C47513 = C47503 + C47504;
    const double C47809 = C47791 + C47792;
    const double C47805 = C47783 + C47784;
    const double C49801 = C49799 * ae;
    const double C10927 = C10923 * C50819;
    const double C11087 = C10923 * C51047;
    const double C12285 = C10923 * C1350;
    const double C10926 = C10922 * C118;
    const double C11086 = C10922 * C294;
    const double C33367 = C33356 + C33357;
    const double C33366 = C33354 + C33355;
    const double C40942 = C33551 + C33550;
    const double C40940 = C33550 + C33551;
    const double C40941 = C33549 + C33548;
    const double C40939 = C33548 + C33549;
    const double C36641 = C33917 + C33916;
    const double C41333 = C33916 + C33917;
    const double C36631 = C36336 + C36335;
    const double C145 =
        4 * ((-2 * C49831 * C49843) / C49834 + C49831 * C49854) +
        C49831 * (3 * C49854 + C49831 * ((-2 * C49831 * C49849) / C49834 +
                                         C49831 * ((-(std::pow(C49838, 7) *
                                                      bs[7] * C49829 * C49840) /
                                                    C49689) /
                                                       C49760 -
                                                   C49849 / C49834)));
    const double C317 =
        C49824 * ((-2 * C49831 * C49843) / C49834 + C49831 * C49854) -
        ((2 * C49831 * C49877 +
          C49831 * (C49877 + C49841 * C49839 * C49874 * C49840)) *
         ce) /
            C49834;
    const double C486 =
        (((-2 * C49831 * C49891) / C49689 -
          (C49831 * (C49841 * C49839 * C49888 * C49840 + C49891)) / C49689) *
         ae) /
            C49760 +
        C49823 * ((-2 * C49831 * C49843) / C49834 + C49831 * C49854);
    const double C647 = (-(C49843 * C49840) / C49689) / C49760 -
                        C49836 / C49834 - (C49824 * C49910 * ce) / C49834 +
                        C49824 * (C49824 * C49854 - (C49910 * ce) / C49834);
    const double C903 = C49823 * (C49824 * C49854 - (C49910 * ce) / C49834) -
                        (ae * (C49824 * (C49894 * C49840 + C49891) +
                               (C49935 + C49938 * C49840) * ce)) /
                            C49834;
    const double C1025 = (-(C49843 * C49840) / C49689) / C49760 -
                         C49836 / C49834 - (ae * C49823 * C49961) / C49834 +
                         C49823 * (C49823 * C49854 - (ae * C49961) / C49834);
    const double C50028 = C50027 - C50024;
    const double C50180 = C50179 - C50176;
    const double C50056 = C49824 * C50054;
    const double C50191 = C49823 * C50054;
    const double C50253 = 2 * C50054;
    const double C50249 = C49823 * C50246;
    const double C50340 = 2 * C50246;
    const double C2958 =
        3 * ((-(C50007 * ce) / C49689) / C49760 - C49836 / C49834 +
             C49824 * C50017) -
        ((2 * C50007 + C49824 * C50015) * ce) / C49834 +
        C49824 *
            (2 * C50017 - (C50015 * ce) / C49834 +
             C49824 * ((-(C49824 * C49880 * ce) / C49689) / C49760 - C49847 +
                       C49824 * ((-(C49824 * C49849) / C49689) / C49760 -
                                 (C49880 * ce) / C49834)));
    const double C3736 =
        2 * (C49823 * C50017 - (ae * C49987) / C49834) -
        (ae * (C50089 * std::pow(C49823, 2) + C49987)) / C49834 +
        C49823 * (C50017 - (ae * C49823 * C50089) / C49834 +
                  C49823 * (C49823 * C50054 - (ae * C50089) / C49834));
    const double C6328 =
        3 * ((-(ae * C50159) / C49689) / C49760 - C49836 / C49834 +
             C49823 * C50169) +
        (((-2 * C50159) / C49689 - (C49823 * C50167) / C49689) * ae) / C49760 +
        C49823 *
            (2 * C50169 - (ae * C50167) / C49834 +
             C49823 * ((-(ae * C49823 * C49894) / C49689) / C49760 - C49847 +
                       C49823 * ((-(C49823 * C49849) / C49689) / C49760 -
                                 (ae * C49894) / C49834)));
    const double C185 = C175 * C118;
    const double C342 = C175 * C294;
    const double C359 = C351 * C295;
    const double C669 = C351 * C628;
    const double C1368 = C351 * C1356;
    const double C2448 = C351 * C118;
    const double C8346 = C351 * C294;
    const double C519 = C511 * C118;
    const double C1908 = C511 * C294;
    const double C10925 = C10916 + C10917;
    const double C33369 = C33360 + C33361;
    const double C683 = C677 * C629;
    const double C1496 = C677 * C1484;
    const double C2445 = C677 * C118;
    const double C2623 = C677 * C294;
    const double C2616 = C677 * C295;
    const double C3892 = C677 * C1356;
    const double C8647 = C677 * C628;
    const double C1664 = C1658 * C1356;
    const double C1902 = C1658 * C295;
    const double C2786 = C1658 * C118;
    const double C10138 = C1658 * C294;
    const double C11117 = C11109 + C11110;
    const double C13963 = C11110 + C11109;
    const double C33561 = C33553 + C33554;
    const double C40943 = C33554 + C33553;
    const double C1049 = C1043 * C118;
    const double C11306 = C11298 + C11297;
    const double C33750 = C33742 + C33741;
    const double C3454 = C3450 * C118;
    const double C15948 = C12648 + C12647;
    const double C15945 = C12647 + C12648;
    const double C42838 = C35092 + C35091;
    const double C42835 = C35091 + C35092;
    const double C31182 = C14523 + C14524;
    const double C36757 = C36652 + C36651;
    const double C31342 = C14749 + C14750;
    const double C36953 = C36945 + C36946;
    const double C50055 = C50053 - C49847;
    const double C6606 =
        (4 * (2 * C50543 + C49823 * C50607 + C50544 * ae) +
         C49823 *
             (3 * C50607 +
              C49823 *
                  (2 * C50599 +
                   C49823 * (C49880 + C49823 * (C49823 * C49883 + C49942 * ae) +
                             C49823 * C49942 * ae) +
                   C50601 * ae) +
              C50606 * ae) +
         (3 * C50544 + C49823 * C50606) * ae) /
        C49760;
    const double C184 = C174 * C50819;
    const double C341 = C174 * C51047;
    const double C1371 = C174 * C1350;
    const double C2631 = C2614 + C2615;
    const double C14383 = C14373 + C14374;
    const double C36658 = C36649 + C36650;
    const double C2797 = C2790 + C2791;
    const double C5928 = C5920 + C5921;
    const double C11475 = C11462 + C11463;
    const double C14756 = C14743 + C14744;
    const double C33919 = C33906 + C33907;
    const double C37866 = C37861 + C37862;
    const double C3451 = C3444 + C3445;
    const double C5575 = C5554 + C5555;
    const double C7116 = C7108 + C7109;
    const double C12650 = C12637 + C12638;
    const double C14961 = C14955 + C14956;
    const double C35094 = C35081 + C35082;
    const double C41863 = C41857 + C41858;
    const double C44462 = C44441 + C44442;
    const double C2953 =
        (-3 * (C49824 * C49987 + C49956 + C50467 * ce)) / C49689 +
        C49824 * ((-2 * C49987) / C49689 - (C49824 * C50103) / C49689 -
                  (C50491 * ce) / C49689) -
        ((2 * C50467 + C49824 * C50491) * ce) / C49689;
    const double C3248 =
        C49823 * ((-2 * C49987) / C49689 - (C49824 * C50103) / C49689 -
                  (C50491 * ce) / C49689);
    const double C3433 =
        -(C50103 * C50162 + C49824 * C49987 + C49956 + C50467 * ce) / C49689;
    const double C50248 = C50245 - C49847;
    const double C2624 = C117 * C770;
    const double C2794 = C117 * C894;
    const double C11470 = C10872 * C894;
    const double C33914 = C33316 * C894;
    const double C5570 = C5346 * C1159;
    const double C9043 = C117 * C1159;
    const double C12645 = C10872 * C1159;
    const double C35089 = C33316 * C1159;
    const double C44457 = C44233 * C1159;
    const double C1651 = C50919 * C895;
    const double C11099 = C50983 * C895;
    const double C33543 = C50983 * C895;
    const double C1038 = C50919 * C1019;
    const double C5377 = C5343 * C1019;
    const double C11288 = C50983 * C1019;
    const double C33732 = C50983 * C1019;
    const double C44264 = C44230 * C1019;
    const double C164 = C117 * C124;
    const double C339 = C117 * C300;
    const double C503 = C117 * C469;
    const double C10900 = C10872 * C469;
    const double C33344 = C33316 * C469;
    const double C671 = C117 * C633;
    const double C1650 = C117 * C881;
    const double C11098 = C10872 * C881;
    const double C33542 = C33316 * C881;
    const double C1037 = C117 * C1011;
    const double C5376 = C5346 * C1011;
    const double C11287 = C10872 * C1011;
    const double C33731 = C33316 * C1011;
    const double C44263 = C44233 * C1011;
    const double C5580 = C5564 + C5565;
    const double C9045 = C9041 + C9042;
    const double C12652 = C12641 + C12642;
    const double C35096 = C35085 + C35086;
    const double C44467 = C44451 + C44452;
    const double C2636 = C2632 * C295;
    const double C3896 = C2632 * C1356;
    const double C8649 = C2632 * C629;
    const double C9596 = C2632 * C1484;
    const double C2802 = C2798 * C118;
    const double C9792 = C2798 * C1356;
    const double C10136 = C2798 * C295;
    const double C50108 = C50107 + C50106;
    const double C2982 = C2976 + C2977;
    const double C3282 = C3272 + C3273;
    const double C14382 = C14371 + C14372;
    const double C36655 = C36643 + C36644;
    const double C3452 = C3446 + C3447;
    const double C5926 = C5916 + C5917;
    const double C14753 = C14737 + C14738;
    const double C37863 = C37855 + C37856;
    const double C44813 = C44803 + C44804;
    const double C6346 = C6336 + C6337;
    const double C45221 = C45211 + C45212;
    const double C50592 = C50590 + C50585;
    const double C20418 = C50919 * C3251;
    const double C31185 = C50983 * C3251;
    const double C36760 = C50983 * C3251;
    const double C20624 = C50919 * C3605;
    const double C22348 = C5343 * C3605;
    const double C31345 = C50983 * C3605;
    const double C36934 = C50983 * C3605;
    const double C47616 = C44230 * C3605;
    const double C20309 = C117 * C3083;
    const double C20417 = C117 * C3245;
    const double C31184 = C10872 * C3245;
    const double C36759 = C33316 * C3245;
    const double C20623 = C117 * C3603;
    const double C22347 = C5346 * C3603;
    const double C31344 = C10872 * C3603;
    const double C36933 = C33316 * C3603;
    const double C47615 = C44233 * C3603;
    const double C22855 = C22843 + C22844;
    const double C48119 = C48107 + C48108;
    const double C50643 = C50641 + C50636;
    const double C50131 = C49824 * C50130;
    const double C50289 = -3 * C50130;
    const double C50316 = ae * C50130;
    const double C50314 = C49823 * C50130;
    const double C3727 = (-2 * C49823 * C50103) / C49689 -
                         (C49823 * (C50130 * C50162 + C50103)) / C49689;
    const double C22849 = C5346 * C6498;
    const double C48113 = C44233 * C6498;
    const double C50334 = C50054 - C50330;
    const double C50663 = C49823 * C50661;
    const double C49869 = C49831 * C49868;
    const double C50031 = C49824 * C49868;
    const double C50183 = C49823 * C49868;
    const double C775 =
        2 * (C49824 * C49854 - (C49910 * ce) / C49834) -
        ((C49910 + C49885 * std::pow(C49824, 2)) * ce) / C49834 +
        C49824 * (C49854 - (C49824 * C49885 * ce) / C49834 +
                  C49824 * (C49824 * C49868 - (C49885 * ce) / C49834));
    const double C904 =
        C49823 * (C49854 - (C49824 * C49885 * ce) / C49834 +
                  C49824 * (C49824 * C49868 - (C49885 * ce) / C49834)) -
        (ae * (C49824 * (C49824 * C49900 + C49944 * ce) + C49894 * C49840 +
               C49891 + C49824 * C49944 * ce)) /
            C49834;
    const double C1164 =
        C49824 * C49854 - (C49910 * ce) / C49834 -
        (ae * C49823 * C49995) / C49834 +
        C49823 * (C49823 * (C49824 * C49868 - (C49885 * ce) / C49834) -
                  (ae * C49995) / C49834);
    const double C1249 =
        2 * (C49823 * C49854 - (ae * C49961) / C49834) -
        (ae * (C49900 * std::pow(C49823, 2) + C49961)) / C49834 +
        C49823 * (C49854 - (ae * C49823 * C49900) / C49834 +
                  C49823 * (C49823 * C49868 - (ae * C49900) / C49834));
    const double C50079 = C50076 - C50066;
    const double C50223 = C50220 - C50212;
    const double C50277 = C49824 * C50274;
    const double C50323 = C49823 * C50274;
    const double C50366 = C49823 * C50363;
    const double C49927 = C49917 + C49926;
    const double C3087 = (4 * (2 * C50019 + C49824 * C50025) +
                          C49824 * (3 * C50025 + C49824 * C50077)) /
                         C49760;
    const double C3253 = (C49823 * (3 * C50025 + C49824 * C50077) +
                          (3 * C50495 + C49824 * C50509) * ae) /
                         C49760;
    const double C3607 =
        (2 * C50019 + C49824 * C50025 +
         C49823 * (C49823 * C50077 + C50509 * ae) + C49823 * C50509 * ae) /
        C49760;
    const double C50278 = C50258 + C50275;
    const double C49982 = C49831 * C49981;
    const double C49997 = C49824 * C49981;
    const double C1240 =
        2 * C49823 * C49968 + C49823 * (C49968 + C49981 * C50162);
    const double C50116 = C50115 + C49900;
    const double C50148 = C50147 + C50143;
    const double C6500 =
        (-3 * (C50096 * C50162 + C49991)) / C49689 +
        C49823 * ((-2 * C50198) / C49689 - (C49823 * C50203) / C49689);
    const double C50224 = C50217 - C50221;
    const double C50305 = C49824 * C50304;
    const double C50317 = C50304 * C50162;
    const double C50336 = C50333 / C49689;
    const double C50367 = C49823 * C50364;
    const double C31083 = C14379 + C14380;
    const double C36632 = C36338 + C36337;
    const double C363 = C347 - C357;
    const double C50078 = C50075 - C50060;
    const double C166 = C117 * C137;
    const double C343 = C117 * C311;
    const double C505 = C117 * C479;
    const double C10904 = C10872 * C479;
    const double C33348 = C33316 * C479;
    const double C673 = C117 * C642;
    const double C1654 = C117 * C896;
    const double C11102 = C10872 * C896;
    const double C33546 = C33316 * C896;
    const double C1039 = C117 * C1020;
    const double C5382 = C5346 * C1020;
    const double C11291 = C10872 * C1020;
    const double C33735 = C33316 * C1020;
    const double C44269 = C44233 * C1020;
    const double C50225 = C50222 - C50060;
    const double C125 = 5 * (3 * C50421 + C49831 * C50426) +
                        C49831 * (4 * C50426 + C49831 * C50431);
    const double C301 = C49824 * (4 * C50426 + C49831 * C50431);
    const double C471 = C49823 * (4 * C50426 + C49831 * C50431);
    const double C634 = 3 * C50421 + C49831 * C50426 + C50431 * C50010;
    const double C1012 = 3 * C50421 + C49831 * C50426 + C50431 * C50162;
    const double C1633 = C49823 * C49824 * C50431;
    const double C20304 = 5 * (3 * C50491 + C49824 * C50504) +
                          C49824 * (4 * C50504 + C49824 * C50614);
    const double C20412 = C49823 * (4 * C50504 + C49824 * C50614);
    const double C20618 = 3 * C50491 + C49824 * C50504 + C50614 * C50162;
    const double C39632 = 5 * (3 * C50544 + C49823 * C50606) +
                          C49823 * (4 * C50606 + C49823 * C50664);
    const double C49731 = C49729 / C49689;
    const double C1372 = C175 * C1355;
    const double C1366 = C172 * C1355;
    const double C1362 = C170 * C1355;
    const double C1358 = C168 * C1355;
    const double C1653 = C511 * C1355;
    const double C1647 = C509 * C1355;
    const double C1641 = C507 * C1355;
    const double C3898 = C677 * C1355;
    const double C3894 = C348 * C1355;
    const double C3888 = C675 * C1355;
    const double C3884 = C345 * C1355;
    const double C4262 = C2796 * C1355;
    const double C4258 = C1656 * C1355;
    const double C9442 = C351 * C1355;
    const double C9794 = C1658 * C1355;
    const double C12284 = C10922 * C1355;
    const double C49803 = C49801 / C49760;
    const double C10930 = C10926 + C10927;
    const double C11108 = C11086 + C11087;
    const double C33371 = C33367 * C50819;
    const double C33531 = C33367 * C51047;
    const double C34729 = C33367 * C1350;
    const double C33370 = C33366 * C118;
    const double C33530 = C33366 * C294;
    const double C34728 = C33366 * C1355;
    const double C167 = C50919 * C145;
    const double C338 = C50919 * C317;
    const double C11101 = C51064 * C317;
    const double C33545 = C33313 * C317;
    const double C502 = C50919 * C486;
    const double C5381 = C5342 * C486;
    const double C10891 = C50983 * C486;
    const double C11290 = C51064 * C486;
    const double C33335 = C50983 * C486;
    const double C33734 = C33313 * C486;
    const double C44268 = C51099 * C486;
    const double C666 = C50919 * C647;
    const double C11469 = C51064 * C647;
    const double C33913 = C33313 * C647;
    const double C1649 = C50919 * C903;
    const double C5569 = C5342 * C903;
    const double C11093 = C50983 * C903;
    const double C12644 = C51064 * C903;
    const double C33537 = C50983 * C903;
    const double C35088 = C33313 * C903;
    const double C44456 = C51099 * C903;
    const double C1036 = C50919 * C1025;
    const double C5361 = C5343 * C1025;
    const double C5751 = C5342 * C1025;
    const double C11284 = C50983 * C1025;
    const double C11883 = C51064 * C1025;
    const double C33728 = C50983 * C1025;
    const double C34327 = C33313 * C1025;
    const double C44248 = C44230 * C1025;
    const double C44638 = C51099 * C1025;
    const double C2959 =
        3 * ((-(C50019 * ce) / C49689) / C49760 - C49930 / C49834 +
             C49824 * C50028) -
        ((2 * C50019 + C49824 * C50025) * ce) / C49834 +
        C49824 * (2 * C50028 - (C50025 * ce) / C49834 +
                  C49824 * ((-(C49824 * C49918 * ce) / C49689) / C49760 -
                            C49856 / C49834 +
                            C49824 * ((-(C49824 * C49831 * C49863) / C49689) /
                                          C49760 -
                                      (C49918 * ce) / C49834)));
    const double C6329 =
        3 * ((-(ae * C50171) / C49689) / C49760 - C49930 / C49834 +
             C49823 * C50180) +
        (((-2 * C50171) / C49689 - (C49823 * C50177) / C49689) * ae) / C49760 +
        C49823 *
            (2 * C50180 - (ae * C50177) / C49834 +
             C49823 * ((-(ae * C49823 * C49971) / C49689) / C49760 - C50060 +
                       C49823 * ((-(C49823 * C50061) / C49689) / C49760 -
                                 (ae * C49971) / C49834)));
    const double C50196 = C50191 - C50194;
    const double C50266 = C50253 - C50260;
    const double C50354 = C50340 - C50347;
    const double C3095 = C50919 * C2958;
    const double C31191 = C51064 * C2958;
    const double C36766 = C33313 * C2958;
    const double C15162 = C50983 * C3736;
    const double C22522 = C5343 * C3736;
    const double C22852 = C5342 * C3736;
    const double C37252 = C50983 * C3736;
    const double C47790 = C44230 * C3736;
    const double C48116 = C51099 * C3736;
    const double C364 = C350 - C359;
    const double C10929 = C10925 * C118;
    const double C33373 = C33369 * C118;
    const double C8348 = C8343 - C2616;
    const double C11119 = C11117 * C295;
    const double C12286 = C11117 * C1356;
    const double C33563 = C33561 * C295;
    const double C34730 = C33561 * C1356;
    const double C11308 = C11306 * C118;
    const double C33752 = C33750 * C118;
    const double C50057 = C50055 + C50056;
    const double C190 = C184 + C185;
    const double C2635 = C2631 * C50835;
    const double C2975 = C2631 * C623;
    const double C2971 = C2631 * C624;
    const double C3891 = C2631 * C50835;
    const double C4055 = C2631 * C51081;
    const double C4051 = C2631 * C1479;
    const double C2801 = C2797 * C50819;
    const double C4261 = C2797 * C1350;
    const double C4259 = C2797 * C50835;
    const double C4609 = C2797 * C51047;
    const double C4607 = C2797 * C50835;
    const double C14368 = C11475 + C11474;
    const double C14366 = C11474 + C11475;
    const double C36642 = C33919 + C33918;
    const double C41334 = C33918 + C33919;
    const double C3455 = C3451 * C50819;
    const double C15947 = C12650 + C12649;
    const double C15946 = C12649 + C12650;
    const double C42837 = C35094 + C35093;
    const double C42836 = C35093 + C35094;
    const double C3094 = C117 * C2953;
    const double C31190 = C10871 * C2953;
    const double C36765 = C33315 * C2953;
    const double C3270 = C117 * C3248;
    const double C14519 = C10872 * C3248;
    const double C22355 = C5345 * C3248;
    const double C31350 = C10871 * C3248;
    const double C36639 = C33316 * C3248;
    const double C36939 = C33315 * C3248;
    const double C3618 = C117 * C3433;
    const double C14733 = C10872 * C3433;
    const double C22241 = C5346 * C3433;
    const double C22531 = C5345 * C3433;
    const double C31654 = C10871 * C3433;
    const double C36929 = C33316 * C3433;
    const double C37261 = C33315 * C3433;
    const double C47509 = C44233 * C3433;
    const double C50250 = C50248 + C50249;
    const double C176 = C164 + C165;
    const double C353 = C339 + C340;
    const double C513 = C503 + C504;
    const double C10919 = C10900 + C10901;
    const double C33363 = C33344 + C33345;
    const double C679 = C671 + C672;
    const double C1660 = C1650 + C1651;
    const double C11114 = C11098 + C11099;
    const double C33558 = C33542 + C33543;
    const double C1045 = C1037 + C1038;
    const double C5398 = C5376 + C5377;
    const double C11302 = C11287 + C11288;
    const double C33746 = C33731 + C33732;
    const double C44285 = C44263 + C44264;
    const double C9047 = C9045 * C118;
    const double C2955 =
        (-3 * (C49824 * C49991 + C49958 + C50470 * ce)) / C49689 +
        C49824 * ((-2 * C49991) / C49689 - (C49824 * C50108) / C49689 -
                  (C50495 * ce) / C49689) -
        ((2 * C50470 + C49824 * C50495) * ce) / C49689;
    const double C3250 =
        C49823 * ((-2 * C49991) / C49689 - (C49824 * C50108) / C49689 -
                  (C50495 * ce) / C49689);
    const double C3435 =
        -(C50108 * C50162 + C49824 * C49991 + C49958 + C50470 * ce) / C49689;
    const double C2984 = C2982 * C629;
    const double C4056 = C2982 * C1484;
    const double C4260 = C3282 * C1356;
    const double C4608 = C3282 * C295;
    const double C3456 = C3452 * C118;
    const double C6604 =
        (4 * (2 * C50551 + C49823 * C50592 + C50552 * ae) +
         C49823 *
             (3 * C50592 +
              C49823 *
                  (2 * C50584 +
                   C49823 * (C49918 + C49823 * (C49823 * C50063 + C50095 * ae) +
                             C49823 * C50095 * ae) +
                   C50586 * ae) +
              C50591 * ae) +
         (3 * C50552 + C49823 * C50591) * ae) /
        C49760;
    const double C20313 = C20309 + C20310;
    const double C20421 = C20417 + C20418;
    const double C31192 = C31184 + C31185;
    const double C36767 = C36759 + C36760;
    const double C20627 = C20623 + C20624;
    const double C22359 = C22347 + C22348;
    const double C31352 = C31344 + C31345;
    const double C36949 = C36933 + C36934;
    const double C47627 = C47615 + C47616;
    const double C22960 =
        (4 * (2 * C50567 + C49823 * C50643 + C50568 * ae) +
         C49823 * (3 * C50643 +
                   C49823 * (2 * C50635 +
                             C49823 * (C50255 +
                                       C49823 * (C49823 * C49824 * C49921 +
                                                 C50293 * ae) +
                                       C49823 * C50293 * ae) +
                             C50637 * ae) +
                   C50642 * ae) +
         (3 * C50568 + C49823 * C50642) * ae) /
        C49760;
    const double C50132 = C50131 / C49689;
    const double C50296 = C50289 / C49689;
    const double C50318 = C50316 / C49834;
    const double C22529 = C5346 * C3727;
    const double C31652 = C10872 * C3727;
    const double C37259 = C33316 * C3727;
    const double C47797 = C44233 * C3727;
    const double C50665 = C50646 + C50663;
    const double C49870 = C49862 + C49869;
    const double C50036 = C50031 - C50034;
    const double C50188 = C50183 - C50186;
    const double C2625 = C50919 * C775;
    const double C2795 = C50919 * C904;
    const double C11471 = C50983 * C904;
    const double C33915 = C50983 * C904;
    const double C5571 = C5343 * C1164;
    const double C9044 = C50919 * C1164;
    const double C12646 = C50983 * C1164;
    const double C35090 = C50983 * C1164;
    const double C44458 = C44230 * C1164;
    const double C5753 = C5343 * C1249;
    const double C11885 = C50983 * C1249;
    const double C34329 = C50983 * C1249;
    const double C44640 = C44230 * C1249;
    const double C50080 = C49824 * C50079;
    const double C50199 = C49823 * C50079;
    const double C3735 =
        2 * (C49823 * C50028 - (ae * C49991) / C49834) -
        (ae * (C50096 * std::pow(C49823, 2) + C49991)) / C49834 +
        C49823 * (C50028 - (ae * C49823 * C50096) / C49834 +
                  C49823 * (C49823 * C50079 - (ae * C50096) / C49834));
    const double C50226 = C49823 * C50223;
    const double C50279 = C50276 + C50277;
    const double C50331 = C50323 - C50327;
    const double C50368 = C50365 + C50366;
    const double C139 = (5 * (3 * C49910 + C49831 * C49915) +
                         C49831 * (4 * C49915 + C49831 * C49927)) /
                        C49760;
    const double C312 = (C49824 * (4 * C49915 + C49831 * C49927)) / C49760;
    const double C483 = (C49823 * (4 * C49915 + C49831 * C49927) +
                         (4 * (2 * C49939 + C49831 * C49944) +
                          C49831 * (3 * C49944 + C49831 * C49953)) *
                             ae) /
                        C49760;
    const double C643 =
        (3 * C49910 + C49831 * C49915 + C49927 * C50010) / C49760;
    const double C1022 =
        (3 * C49910 + C49831 * C49915 +
         C49823 * (C49823 * C49927 + C50431 * ae) + C49823 * C50431 * ae) /
        C49760;
    const double C1634 =
        (C49823 * C49824 * C49927 + C49824 * C50431 * ae) / C49760;
    const double C20305 = (5 * (3 * C50015 + C49824 * C50052) +
                           C49824 * (4 * C50052 + C49824 * C50278)) /
                          C49760;
    const double C20413 = (C49823 * (4 * C50052 + C49824 * C50278) +
                           (4 * C50504 + C49824 * C50614) * ae) /
                          C49760;
    const double C20619 =
        (3 * C50015 + C49824 * C50052 +
         C49823 * (C49823 * C50278 + C50614 * ae) + C49823 * C50614 * ae) /
        C49760;
    const double C49983 = C49973 + C49982;
    const double C50000 = C49997 - C49999;
    const double C50117 = C50116 + C50114;
    const double C50149 = C49824 * C50148;
    const double C3725 = (-2 * C49823 * C50108) / C49689 -
                         (C49823 * (C50148 * C50162 + C50108)) / C49689;
    const double C6603 =
        4 * ((-2 * C50171) / C49689 - (C49823 * C50177) / C49689) +
        C49823 * ((-3 * C50177) / C49689 + C49823 * C50224);
    const double C50306 = C50305 / C49689;
    const double C50319 = C50317 + C50130;
    const double C50338 = C50332 - C50336;
    const double C50369 = C50351 + C50367;
    const double C365 = C363 - C358;
    const double C49733 = C49731 - C49726;
    const double C1375 = C1366 + C1367;
    const double C1374 = C1362 + C1363;
    const double C9439 = C3894 + C3893;
    const double C12288 = C12284 + C12285;
    const double C49804 = C49803 - C49788;
    const double C33374 = C33370 + C33371;
    const double C33552 = C33530 + C33531;
    const double C34732 = C34728 + C34729;
    const double C177 = C166 + C167;
    const double C352 = C337 + C338;
    const double C11115 = C11100 + C11101;
    const double C33559 = C33544 + C33545;
    const double C512 = C501 + C502;
    const double C5400 = C5380 + C5381;
    const double C10914 = C10890 + C10891;
    const double C11303 = C11289 + C11290;
    const double C33358 = C33334 + C33335;
    const double C33747 = C33733 + C33734;
    const double C678 = C665 + C666;
    const double C11478 = C11468 + C11469;
    const double C33922 = C33912 + C33913;
    const double C1659 = C1648 + C1649;
    const double C5582 = C5568 + C5569;
    const double C11111 = C11092 + C11093;
    const double C12653 = C12643 + C12644;
    const double C33555 = C33536 + C33537;
    const double C35097 = C35087 + C35088;
    const double C1044 = C1035 + C1036;
    const double C5390 = C5360 + C5361;
    const double C5764 = C5750 + C5751;
    const double C11300 = C11283 + C11284;
    const double C11892 = C11882 + C11883;
    const double C33744 = C33727 + C33728;
    const double C34336 = C34326 + C34327;
    const double C44277 = C44247 + C44248;
    const double C2979 = C50919 * C2959;
    const double C6343 = C5343 * C6329;
    const double C45218 = C44230 * C6329;
    const double C6501 =
        3 * (C50017 - (ae * C50190) / C49834 + C49823 * C50196) +
        (((-2 * C50190) / C49689 - (C49823 * C50195) / C49689) * ae) / C49760 +
        C49823 *
            (2 * C50196 - (ae * C50195) / C49834 +
             C49823 *
                 (C50054 - (ae * C49823 * C50125) / C49834 +
                  C49823 * (C49823 * ((-(C49824 * C49863) / C49689) / C49760 -
                                      (C49883 * ce) / C49834) -
                            (ae * C50125) / C49834)));
    const double C15167 = C15161 + C15162;
    const double C22540 = C22521 + C22522;
    const double C22859 = C22851 + C22852;
    const double C37265 = C37251 + C37252;
    const double C47808 = C47789 + C47790;
    const double C11121 = C11108 - C11119;
    const double C3089 =
        4 * (2 * C50017 - (C50015 * ce) / C49834 + C49824 * C50057) -
        ((3 * C50015 + C49824 * C50052) * ce) / C49834 +
        C49824 *
            (3 * C50057 - (C50052 * ce) / C49834 +
             C49824 *
                 (2 * C50054 - (C50046 * ce) / C49834 +
                  C49824 *
                      ((-(C49824 * C49883 * ce) / C49689) / C49760 - C49859 +
                       C49824 * ((-(C49824 * C49863) / C49689) / C49760 -
                                 (C49883 * ce) / C49834))));
    const double C3255 =
        (((-2 * C49987) / C49689 -
          (C49824 * (C49824 * (C49824 * C49894 + C49938 * ce) + C49891 +
                     C49824 * C49938 * ce)) /
              C49689 -
          ((C49935 + C49938 * C50010) * ce) / C49689) *
         ae) /
            C49760 +
        C49823 * (2 * C50017 - (C50015 * ce) / C49834 + C49824 * C50057);
    const double C3257 =
        (((-3 * (C49824 * C50089 + C49891 + C50087 * ce)) / C49689 +
          C49824 * ((-2 * C50089) / C49689 -
                    (C49824 * (C49824 * (C49824 * C49898 + C49942 * ce) +
                               C49894 + C49824 * C49942 * ce)) /
                        C49689 -
                    (C50090 * ce) / C49689) -
          ((2 * C50087 + C49824 * C50090) * ce) / C49689) *
         ae) /
            C49760 +
        C49823 *
            (3 * C50057 - (C50052 * ce) / C49834 +
             C49824 *
                 (2 * C50054 - (C50046 * ce) / C49834 +
                  C49824 *
                      ((-(C49824 * C49883 * ce) / C49689) / C49760 - C49859 +
                       C49824 * ((-(C49824 * C49863) / C49689) / C49760 -
                                 (C49883 * ce) / C49834))));
    const double C3438 = (-(C50007 * ce) / C49689) / C49760 - C49836 / C49834 +
                         C49824 * C50017 - (ae * C49823 * C50103) / C49834 +
                         C49823 * (C49823 * C50057 - (ae * C50103) / C49834);
    const double C3734 =
        2 * (C49823 * C50057 - (ae * C50103) / C49834) -
        (ae * (C50130 * std::pow(C49823, 2) + C50103)) / C49834 +
        C49823 *
            (C50057 - (ae * C49823 * C50130) / C49834 +
             C49823 *
                 (C49823 *
                      ((-(C49824 * C49883 * ce) / C49689) / C49760 - C49859 +
                       C49824 * ((-(C49824 * C49863) / C49689) / C49760 -
                                 (C49883 * ce) / C49834)) -
                  (ae * C50130) / C49834));
    const double C3097 = C3094 + C3095;
    const double C31195 = C31190 + C31191;
    const double C36770 = C36765 + C36766;
    const double C6608 =
        4 * (2 * C50169 - (ae * C50167) / C49834 + C49823 * C50250) +
        (((-3 * C50167) / C49689 + C49823 * C50247) * ae) / C49760 +
        C49823 *
            (3 * C50250 + (C50247 * ae) / C49760 +
             C49823 *
                 (2 * C50246 - (ae * C50237) / C49834 +
                  C49823 *
                      ((-(ae * C49823 * C49898) / C49689) / C49760 - C49859 +
                       C49823 * ((-(C49823 * C49863) / C49689) / C49760 -
                                 (ae * C49898) / C49834))));
    const double C186 = C176 * C118;
    const double C361 = C353 * C295;
    const double C1370 = C353 * C1356;
    const double C8195 = C353 * C118;
    const double C521 = C513 * C118;
    const double C685 = C679 * C629;
    const double C1502 = C679 * C1484;
    const double C2450 = C679 * C118;
    const double C8344 = C679 * C295;
    const double C9440 = C679 * C1356;
    const double C1666 = C1660 * C1356;
    const double C1906 = C1660 * C295;
    const double C8496 = C1660 * C118;
    const double C1051 = C1045 * C118;
    const double C2978 = C117 * C2955;
    const double C3274 = C117 * C3250;
    const double C14375 = C10872 * C3250;
    const double C36647 = C33316 * C3250;
    const double C3448 = C117 * C3435;
    const double C5922 = C5346 * C3435;
    const double C14741 = C10872 * C3435;
    const double C37859 = C33316 * C3435;
    const double C44809 = C44233 * C3435;
    const double C50133 = C50124 - C50132;
    const double C50666 = C50665 + C50650;
    const double C146 =
        5 * (3 * C49854 + C49831 * C49870) +
        C49831 * (4 * C49870 +
                  C49831 * (3 * C49868 +
                            C49831 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834))));
    const double C318 =
        C49824 * (3 * C49854 + C49831 * C49870) -
        ((3 * (C49877 + C49880 * C49840) +
          C49831 * (2 * C49831 * C49880 +
                    C49831 * (C49880 + C49845 * C49846 * C49874 * C49840))) *
         ce) /
            C49834;
    const double C319 =
        C49824 * (4 * C49870 +
                  C49831 * (3 * C49868 +
                            C49831 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834)))) -
        ((4 * (2 * C49831 * C49880 + C49831 * C49885) +
          C49831 * (3 * C49885 +
                    C49831 * (2 * C49831 * C49883 +
                              C49831 * (C49883 +
                                        C49857 * C49858 * C49874 * C49840)))) *
         ce) /
            C49834;
    const double C487 =
        (((-3 * (C49894 * C49840 + C49891)) / C49689 +
          C49831 * ((-2 * C49831 * C49894) / C49689 -
                    (C49831 * (C49845 * C49846 * C49888 * C49840 + C49894)) /
                        C49689)) *
         ae) /
            C49760 +
        C49823 * (3 * C49854 + C49831 * C49870);
    const double C489 =
        ((4 * ((-2 * C49831 * C49894) / C49689 - (C49831 * C49900) / C49689) +
          C49831 * ((-3 * C49900) / C49689 +
                    C49831 * ((-2 * C49831 * C49898) / C49689 -
                              (C49831 *
                               (C49857 * C49858 * C49888 * C49840 + C49898)) /
                                  C49689))) *
         ae) /
            C49760 +
        C49823 * (4 * C49870 +
                  C49831 * (3 * C49868 +
                            C49831 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834))));
    const double C648 = (-2 * C49831 * C49843) / C49834 + C49831 * C49854 -
                        (C49824 * C49915 * ce) / C49834 +
                        C49824 * (C49824 * C49870 - (C49915 * ce) / C49834);
    const double C649 =
        3 * C49854 + C49831 * C49870 - (C49824 * C49927 * ce) / C49834 +
        C49824 * (C49824 * (3 * C49868 +
                            C49831 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834))) -
                  (C49927 * ce) / C49834);
    const double C776 =
        2 * (C49824 * C49870 - (C49915 * ce) / C49834) -
        ((C49915 + C49925 * std::pow(C49824, 2)) * ce) / C49834 +
        C49824 * (C49870 - (C49824 * C49925 * ce) / C49834 +
                  C49824 * (C49824 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834)) -
                            (C49925 * ce) / C49834));
    const double C905 = ((C49824 * ((-2 * C49831 * C49894) / C49689 -
                                    (C49831 * C49900) / C49689) -
                          ((2 * C49939 + C49831 * C49944) * ce) / C49689) *
                         ae) /
                            C49760 +
                        C49823 * (C49824 * C49870 - (C49915 * ce) / C49834);
    const double C906 =
        (((-2 * C49831 * C49894) / C49689 - (C49831 * C49900) / C49689 +
          C49824 * (C49824 * ((-2 * C49831 * C49898) / C49689 -
                              (C49831 *
                               (C49857 * C49858 * C49888 * C49840 + C49898)) /
                                  C49689) -
                    (C49953 * ce) / C49689) -
          (C49824 * C49953 * ce) / C49689) *
         ae) /
            C49760 +
        C49823 * (C49870 - (C49824 * C49925 * ce) / C49834 +
                  C49824 * (C49824 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834)) -
                            (C49925 * ce) / C49834));
    const double C1026 = (-2 * C49930) / C49834 + C49831 * C49854 +
                         (C49823 * C49968 * ae) / C49760 +
                         C49823 * ((C49968 * ae) / C49760 + C49823 * C49870);
    const double C1248 =
        2 * ((C49968 * ae) / C49760 + C49823 * C49870) +
        ((C49968 + C49981 * std::pow(C49823, 2)) * ae) / C49760 +
        C49823 * (C49870 + (C49823 * C49981 * ae) / C49760 +
                  C49823 * ((C49981 * ae) / C49760 +
                            C49823 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834))));
    const double C2960 =
        3 * (C49854 - (C50030 * ce) / C49834 + C49824 * C50036) -
        ((2 * C50030 + C49824 * C50035) * ce) / C49834 +
        C49824 * (2 * C50036 - (C50035 * ce) / C49834 +
                  C49824 * (C49868 - (C49824 * C49923 * ce) / C49834 +
                            C49824 * (C49824 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834) -
                                      (C49923 * ce) / C49834)));
    const double C7098 =
        2 * (C49823 * C50036 - (ae * C49995) / C49834) -
        (ae * (C50113 * C50162 + C49995)) / C49834 +
        C49823 * (C50036 - (ae * C49823 * C50113) / C49834 +
                  C49823 * (C49823 * (C49824 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834) -
                                      (C49923 * ce) / C49834) -
                            (ae * C50113) / C49834));
    const double C6330 =
        3 * (C49854 - (ae * C50182) / C49834 + C49823 * C50188) +
        (((-2 * C50182) / C49689 - (C49823 * C50187) / C49689) * ae) / C49760 +
        C49823 * (2 * C50188 - (ae * C50187) / C49834 +
                  C49823 * (C49868 - (ae * C49823 * C49978) / C49834 +
                            C49823 * (C49823 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834) -
                                      (ae * C49978) / C49834)));
    const double C2633 = C2624 + C2625;
    const double C2799 = C2794 + C2795;
    const double C11479 = C11470 + C11471;
    const double C33923 = C33914 + C33915;
    const double C5583 = C5570 + C5571;
    const double C9046 = C9043 + C9044;
    const double C12654 = C12645 + C12646;
    const double C35098 = C35089 + C35090;
    const double C44470 = C44457 + C44458;
    const double C5765 = C5752 + C5753;
    const double C11893 = C11884 + C11885;
    const double C34337 = C34328 + C34329;
    const double C44652 = C44639 + C44640;
    const double C50081 = C50078 + C50080;
    const double C50204 = C50199 - C50202;
    const double C7111 = C5343 * C3735;
    const double C14958 = C50983 * C3735;
    const double C41860 = C50983 * C3735;
    const double C45966 = C44230 * C3735;
    const double C50227 = C50225 + C50226;
    const double C50280 = C49824 * C50279;
    const double C50315 = C49823 * C50279;
    const double C50335 = C49823 * C50331;
    const double C50370 = C49823 * C50368;
    const double C1027 =
        3 * C49854 + C49831 * C49870 + (C49823 * C49983 * ae) / C49760 +
        C49823 * ((C49983 * ae) / C49760 +
                  C49823 * (3 * C49868 +
                            C49831 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834))));
    const double C1636 =
        ((C49824 * C49983 - ((3 * C49944 + C49831 * C49953) * ce) / C49689) *
         ae) /
            C49760 +
        C49823 * (C49824 * (3 * C49868 +
                            C49831 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834))) -
                  (C49927 * ce) / C49834);
    const double C138 = 5 * ((-3 * C49961) / C49689 + C49831 * C49968) +
                        C49831 * (4 * C49968 + C49831 * C49983);
    const double C313 = C49824 * (4 * C49968 + C49831 * C49983) -
                        ((4 * (2 * C49939 + C49831 * C49944) +
                          C49831 * (3 * C49944 + C49831 * C49953)) *
                         ce) /
                            C49689;
    const double C482 = C49823 * (4 * C49968 + C49831 * C49983);
    const double C644 = (-3 * C49961) / C49689 + C49831 * C49968 +
                        C49824 * (C49824 * C49983 - (C50431 * ce) / C49689) -
                        (C49824 * C50431 * ce) / C49689;
    const double C1021 =
        (-3 * C49961) / C49689 + C49831 * C49968 + C49983 * C50162;
    const double C1635 = C49823 * (C49824 * C49983 - (C50431 * ce) / C49689);
    const double C1165 =
        C49824 * C49870 - (C49915 * ce) / C49834 +
        (C49823 * C50000 * ae) / C49760 +
        C49823 * ((C50000 * ae) / C49760 +
                  C49823 * (C49824 * ((-2 * C49831 * C49863) / C49834 +
                                      C49831 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834)) -
                            (C49925 * ce) / C49834));
    const double C772 =
        2 * (C49824 * C49968 - (C50426 * ce) / C49689) +
        C49824 * (C49968 + C49824 * C50000 - (C49824 * C49953 * ce) / C49689) -
        ((C50426 + C49953 * C50010) * ce) / C49689;
    const double C898 =
        C49823 * (C49968 + C49824 * C50000 - (C49824 * C49953 * ce) / C49689);
    const double C1161 =
        C49824 * C49968 - (C50426 * ce) / C49689 + C50000 * C50162;
    const double C3440 =
        C49854 - (C50030 * ce) / C49834 + C49824 * C50036 -
        (ae * C49823 * C50117) / C49834 +
        C49823 * (C49823 * (C49868 - (C49824 * C49923 * ce) / C49834 +
                            C49824 * (C49824 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834) -
                                      (C49923 * ce) / C49834)) -
                  (ae * C50117) / C49834);
    const double C4254 =
        (((-2 * C49995) / C49689 - (C49824 * C50117) / C49689 -
          ((C49944 + C49951 * C50010) * ce) / C49689) *
         ae) /
            C49760 +
        C49823 * (2 * C50036 - (C50035 * ce) / C49834 +
                  C49824 * (C49868 - (C49824 * C49923 * ce) / C49834 +
                            C49824 * (C49824 * ((-(std::pow(C49827, 8) * bs[8] *
                                                   C49829 * C49840) /
                                                 C49689) /
                                                    C49760 -
                                                C49863 / C49834) -
                                      (C49923 * ce) / C49834)));
    const double C2957 =
        (-3 * (C49824 * C49995 + C49961 + C50473 * ce)) / C49689 +
        C49824 * ((-2 * C49995) / C49689 - (C49824 * C50117) / C49689 -
                  (C50499 * ce) / C49689) -
        ((2 * C50473 + C49824 * C50499) * ce) / C49689;
    const double C3436 =
        -(C50117 * C50162 + C49824 * C49995 + C49961 + C50473 * ce) / C49689;
    const double C4253 =
        C49823 * ((-2 * C49995) / C49689 - (C49824 * C50117) / C49689 -
                  (C50499 * ce) / C49689);
    const double C50150 = C50149 / C49689;
    const double C50307 = C50297 - C50306;
    const double C22840 =
        (-3 * (C50130 * C50162 + C50103)) / C49689 +
        C49823 * ((-2 * C50314) / C49689 - (C49823 * C50319) / C49689);
    const double C22959 =
        4 * ((-2 * C50190) / C49689 - (C49823 * C50195) / C49689) +
        C49823 * ((-3 * C50195) / C49689 + C49823 * C50338);
    const double C39633 = 5 * ((-3 * C50167) / C49689 + C49823 * C50247) +
                          C49823 * (4 * C50247 + C49823 * C50369);
    const double C757 =
        ((((0 - (C49688 * C49713) / C49689) * ce) / C49689 - (0 * de) / C49718 +
          C49698 / C49689) /
             C49697 -
         ((C49688 * C49732 + 0) * de) / C49689) /
            C49697 -
        ((C49688 * (C49732 / C49697 -
                    ((C49688 * C49733 + C51047) * de) / C49689 + C49727) +
          C51094) *
         de) /
            C49689 +
        C49733 / C49697 - ((C49688 * C49727 + C50835) * de) / C49689;
    const double C758 =
        (C49732 / C49697 - ((C49688 * C49733 + C51047) * de) / C49689 +
         C49727) /
            C49697 -
        ((C49688 *
              (C49733 / C49697 - ((C49688 * C49727 + C50835) * de) / C49689) +
          C51081) *
         de) /
            C49689 +
        2 * (C49727 / C49697 - (0 * de) / C49689);
    const double C759 =
        (C49733 / C49697 - ((C49688 * C49727 + C50835) * de) / C49689) /
            C49697 -
        ((C49688 * (C49727 / C49697 - (0 * de) / C49689) + C1479) * de) /
            C49689;
    const double C1482 =
        C49732 / C49697 - ((C49688 * C49733 + C51047) * de) / C49689 + C49727;
    const double C1483 =
        C49733 / C49697 - ((C49688 * C49727 + C50835) * de) / C49689;
    const double C1377 = C1375 - C1368;
    const double C1376 = C1374 - C1364;
    const double C9444 = C9439 - C3892;
    const double C12289 = C12288 - C12286;
    const double C38908 =
        ((((0 - (C49758 * C49784) / C49760) * ae) / C49760 - (0 * be) / C49764 +
          C49759 / C49760) /
             C49785 -
         ((C49758 * C49802 + 0) * be) / C49760) /
            C49785 +
        ((C49758 * (C49802 / C49785 -
                    ((C49758 * C49804 + C51064) * be) / C49760 + C49797) +
          C51098) *
         ae) /
            C49760 +
        C49804 / C49785 - ((C49758 * C49797 + C50983) * be) / C49760;
    const double C38909 =
        (C49802 / C49785 - ((C49758 * C49804 + C51064) * be) / C49760 +
         C49797) /
            C49785 +
        ((C49758 *
              (C49804 / C49785 - ((C49758 * C49797 + C50983) * be) / C49760) +
          C51099) *
         ae) /
            C49760 +
        2 * (C49797 / C49785 - (0 * be) / C49760);
    const double C38910 =
        (C49804 / C49785 - ((C49758 * C49797 + C50983) * be) / C49760) /
            C49785 +
        ((C49758 * (C49797 / C49785 - (0 * be) / C49760) + C44230) * ae) /
            C49760;
    const double C44231 =
        C49802 / C49785 - ((C49758 * C49804 + C51064) * be) / C49760 + C49797;
    const double C44232 =
        C49804 / C49785 - ((C49758 * C49797 + C50983) * be) / C49760;
    const double C33565 = C33552 - C33563;
    const double C34733 = C34732 - C34730;
    const double C187 = C177 * C50819;
    const double C360 = C352 * C50835;
    const double C670 = C352 * C623;
    const double C1369 = C352 * C50835;
    const double C1501 = C352 * C51081;
    const double C2449 = C352 * C50819;
    const double C8345 = C352 * C51047;
    const double C9441 = C352 * C1350;
    const double C520 = C512 * C50819;
    const double C1652 = C512 * C1350;
    const double C1907 = C512 * C51047;
    const double C10924 = C10914 + C10915;
    const double C33368 = C33358 + C33359;
    const double C684 = C678 * C624;
    const double C1497 = C678 * C1479;
    const double C2444 = C678 * C50819;
    const double C2622 = C678 * C51047;
    const double C2619 = C678 * C50835;
    const double C3897 = C678 * C1350;
    const double C3895 = C678 * C50835;
    const double C8648 = C678 * C623;
    const double C9595 = C678 * C51081;
    const double C1665 = C1659 * C50835;
    const double C1905 = C1659 * C50835;
    const double C2787 = C1659 * C50819;
    const double C9793 = C1659 * C1350;
    const double C10137 = C1659 * C51047;
    const double C11118 = C11111 + C11112;
    const double C13964 = C11112 + C11111;
    const double C33562 = C33555 + C33556;
    const double C40944 = C33556 + C33555;
    const double C1050 = C1044 * C50819;
    const double C11305 = C11300 + C11299;
    const double C33749 = C33744 + C33743;
    const double C6349 = C6342 + C6343;
    const double C45224 = C45217 + C45218;
    const double C22850 = C5343 * C6501;
    const double C48114 = C44230 * C6501;
    const double C20312 = C50919 * C3089;
    const double C3271 = C50919 * C3255;
    const double C14520 = C50983 * C3255;
    const double C22356 = C5342 * C3255;
    const double C31351 = C51064 * C3255;
    const double C36640 = C50983 * C3255;
    const double C36940 = C33313 * C3255;
    const double C47624 = C51099 * C3255;
    const double C20420 = C50919 * C3257;
    const double C31189 = C50983 * C3257;
    const double C36764 = C50983 * C3257;
    const double C3619 = C50919 * C3438;
    const double C14734 = C50983 * C3438;
    const double C22242 = C5343 * C3438;
    const double C22532 = C5342 * C3438;
    const double C31655 = C51064 * C3438;
    const double C36930 = C50983 * C3438;
    const double C37262 = C33313 * C3438;
    const double C47510 = C44230 * C3438;
    const double C47800 = C51099 * C3438;
    const double C22530 = C5343 * C3734;
    const double C31653 = C50983 * C3734;
    const double C37260 = C50983 * C3734;
    const double C47798 = C44230 * C3734;
    const double C2983 = C2978 + C2979;
    const double C50134 = C50133 - C50127;
    const double C39634 =
        (5 * (3 * C50607 + C49823 * C50666 + C50606 * ae) +
         C49823 * (4 * C50666 +
                   C49823 * (3 * C50661 +
                             C49823 * (2 * C50653 +
                                       C49823 * (C49883 +
                                                 C49823 * (C49823 * C49921 +
                                                           C49948 * ae) +
                                                 C49823 * C49948 * ae) +
                                       C50655 * ae) +
                             C50660 * ae) +
                   C50664 * ae) +
         (4 * C50606 + C49823 * C50664) * ae) /
        C49760;
    const double C344 = C50919 * C318;
    const double C506 = C50919 * C487;
    const double C10905 = C50983 * C487;
    const double C33349 = C50983 * C487;
    const double C674 = C50919 * C648;
    const double C1655 = C50919 * C905;
    const double C11103 = C50983 * C905;
    const double C33547 = C50983 * C905;
    const double C1040 = C50919 * C1026;
    const double C5383 = C5343 * C1026;
    const double C11292 = C50983 * C1026;
    const double C33736 = C50983 * C1026;
    const double C44270 = C44230 * C1026;
    const double C2637 = C2633 * C50835;
    const double C3899 = C2633 * C50835;
    const double C8650 = C2633 * C624;
    const double C9597 = C2633 * C1479;
    const double C2803 = C2799 * C50819;
    const double C9795 = C2799 * C50835;
    const double C10139 = C2799 * C50835;
    const double C9048 = C9046 * C50819;
    const double C3090 =
        4 * (2 * C50028 - (C50025 * ce) / C49834 + C49824 * C50081) -
        ((3 * C50025 + C49824 * C50077) * ce) / C49834 +
        C49824 *
            (3 * C50081 - (C50077 * ce) / C49834 +
             C49824 *
                 (2 * C50079 - (C50071 * ce) / C49834 +
                  C49824 * ((-(C49824 * C50063 * ce) / C49689) / C49760 -
                            C50061 / C49834 +
                            C49824 * ((-(C49824 * C49831 * std::pow(C49827, 8) *
                                         bs[8] * C49829) /
                                       C49689) /
                                          C49760 -
                                      (C50063 * ce) / C49834))));
    const double C3256 =
        (((-2 * C49991) / C49689 -
          (C49824 * (C49824 * (C49824 * C49971 + C49947 * ce) + C49963 +
                     C49824 * C49947 * ce)) /
              C49689 -
          ((C49939 + C49947 * C50010) * ce) / C49689) *
         ae) /
            C49760 +
        C49823 * (2 * C50028 - (C50025 * ce) / C49834 + C49824 * C50081);
    const double C3258 =
        (((-3 * (C49824 * C50096 + C49963 + C50094 * ce)) / C49689 +
          C49824 *
              ((-2 * C50096) / C49689 -
               (C49824 * (C49824 * (C49824 * C49831 * C49975 + C50095 * ce) +
                          C49971 + C49824 * C50095 * ce)) /
                   C49689 -
               (C50098 * ce) / C49689) -
          ((2 * C50094 + C49824 * C50098) * ce) / C49689) *
         ae) /
            C49760 +
        C49823 *
            (3 * C50081 - (C50077 * ce) / C49834 +
             C49824 *
                 (2 * C50079 - (C50071 * ce) / C49834 +
                  C49824 * ((-(C49824 * C50063 * ce) / C49689) / C49760 -
                            C50061 / C49834 +
                            C49824 * ((-(C49824 * C49831 * std::pow(C49827, 8) *
                                         bs[8] * C49829) /
                                       C49689) /
                                          C49760 -
                                      (C50063 * ce) / C49834))));
    const double C3439 = (-(C50019 * ce) / C49689) / C49760 - C49930 / C49834 +
                         C49824 * C50028 - (ae * C49823 * C50108) / C49834 +
                         C49823 * (C49823 * C50081 - (ae * C50108) / C49834);
    const double C3733 =
        2 * (C49823 * C50081 - (ae * C50108) / C49834) -
        (ae * (C50148 * std::pow(C49823, 2) + C50108)) / C49834 +
        C49823 *
            (C50081 - (ae * C49823 * C50148) / C49834 +
             C49823 *
                 (C49823 * ((-(C49824 * C50063 * ce) / C49689) / C49760 -
                            C50061 / C49834 +
                            C49824 * ((-(C49824 * C49831 * std::pow(C49827, 8) *
                                         bs[8] * C49829) /
                                       C49689) /
                                          C49760 -
                                      (C50063 * ce) / C49834)) -
                  (ae * C50148) / C49834));
    const double C6502 =
        3 * (C50028 - (ae * C50198) / C49834 + C49823 * C50204) +
        (((-2 * C50198) / C49689 - (C49823 * C50203) / C49689) * ae) / C49760 +
        C49823 *
            (2 * C50204 - (ae * C50203) / C49834 +
             C49823 *
                 (C50079 - (ae * C49823 * C50145) / C49834 +
                  C49823 * (C49823 * ((-(C49824 * C49831 * std::pow(C49827, 8) *
                                         bs[8] * C49829) /
                                       C49689) /
                                          C49760 -
                                      (C50063 * ce) / C49834) -
                            (ae * C50145) / C49834)));
    const double C7117 = C7110 + C7111;
    const double C14962 = C14957 + C14958;
    const double C41864 = C41859 + C41860;
    const double C45972 = C45965 + C45966;
    const double C6607 =
        4 * (2 * C50180 - (ae * C50177) / C49834 + C49823 * C50227) +
        (((-3 * C50177) / C49689 + C49823 * C50224) * ae) / C49760 +
        C49823 *
            (3 * C50227 + (C50224 * ae) / C49760 +
             C49823 *
                 (2 * C50223 - (ae * C50214) / C49834 +
                  C49823 * ((-(ae * C49823 * C50137) / C49689) / C49760 -
                            C50061 / C49834 +
                            C49823 * ((-(C49823 * C49831 * std::pow(C49827, 8) *
                                         bs[8] * C49829) /
                                       C49689) /
                                          C49760 -
                                      (ae * C50137) / C49834))));
    const double C50281 = C50266 + C50280;
    const double C50320 = C50315 - C50318;
    const double C50337 = C50334 + C50335;
    const double C50371 = C50354 + C50370;
    const double C50151 = C50141 - C50150;
    const double C50308 = C50307 - C50300;
    const double C1498 = C172 * C1482;
    const double C1492 = C170 * C1482;
    const double C1486 = C168 * C1482;
    const double C4052 = C675 * C1482;
    const double C4046 = C345 * C1482;
    const double C9592 = C348 * C1482;
    const double C1500 = C351 * C1483;
    const double C1494 = C348 * C1483;
    const double C1488 = C345 * C1483;
    const double C4054 = C2630 * C1483;
    const double C4048 = C675 * C1483;
    const double C9594 = C677 * C1483;
    const double C1378 = C1376 - C1365;
    const double C44265 = C44231 * C133;
    const double C44259 = C44231 * C122;
    const double C44257 = C44231 * C121;
    const double C44251 = C44231 * C131;
    const double C44241 = C44231 * C129;
    const double C44235 = C44231 * C120;
    const double C44453 = C44231 * C307;
    const double C44447 = C44231 * C298;
    const double C44445 = C44231 * C305;
    const double C44439 = C44231 * C297;
    const double C44635 = C44231 * C475;
    const double C44629 = C44231 * C467;
    const double C44623 = C44231 * C473;
    const double C44617 = C44231 * C466;
    const double C44805 = C44231 * C638;
    const double C44799 = C44231 * C631;
    const double C45213 = C44231 * C1016;
    const double C45207 = C44231 * C1009;
    const double C45961 = C44231 * C888;
    const double C45955 = C44231 * C877;
    const double C47199 = C44231 * C303;
    const double C47193 = C44231 * C296;
    const double C47505 = C44231 * C636;
    const double C47499 = C44231 * C630;
    const double C47625 = C44231 * C766;
    const double C47619 = C44231 * C761;
    const double C47801 = C44231 * C886;
    const double C47795 = C44231 * C876;
    const double C47785 = C44231 * C884;
    const double C47779 = C44231 * C875;
    const double C48117 = C44231 * C1155;
    const double C48111 = C44231 * C1150;
    const double C44267 = C44232 * C477;
    const double C44261 = C44232 * C468;
    const double C44255 = C44232 * C467;
    const double C44249 = C44232 * C475;
    const double C44243 = C44232 * C473;
    const double C44237 = C44232 * C466;
    const double C44455 = C44232 * C892;
    const double C44449 = C44232 * C879;
    const double C44443 = C44232 * C888;
    const double C44437 = C44232 * C877;
    const double C44637 = C44232 * C1018;
    const double C44631 = C44232 * C1010;
    const double C44625 = C44232 * C1016;
    const double C44619 = C44232 * C1009;
    const double C44807 = C44232 * C890;
    const double C44801 = C44232 * C878;
    const double C45215 = C44232 * C1244;
    const double C45209 = C44232 * C1238;
    const double C45963 = C44232 * C1157;
    const double C45957 = C44232 * C1151;
    const double C47197 = C44232 * C884;
    const double C47191 = C44232 * C875;
    const double C47507 = C44232 * C886;
    const double C47501 = C44232 * C876;
    const double C47623 = C44232 * C3248;
    const double C47617 = C44232 * C3243;
    const double C47799 = C44232 * C3433;
    const double C47793 = C44232 * C3429;
    const double C47787 = C44232 * C1155;
    const double C47781 = C44232 * C1150;
    const double C48115 = C44232 * C3731;
    const double C48109 = C44232 * C3724;
    const double C366 = C364 - C360;
    const double C1379 = C1377 - C1369;
    const double C8194 = C2449 + C2448;
    const double C523 = C520 + C519;
    const double C10928 = C10924 * C50819;
    const double C33372 = C33368 * C50819;
    const double C8349 = C8348 - C2619;
    const double C9445 = C9444 - C3895;
    const double C8498 = C2787 + C2786;
    const double C11120 = C11118 * C50835;
    const double C12287 = C11118 * C50835;
    const double C33564 = C33562 * C50835;
    const double C34731 = C33562 * C50835;
    const double C11307 = C11305 * C50819;
    const double C33751 = C33749 * C50819;
    const double C22858 = C22849 + C22850;
    const double C48122 = C48113 + C48114;
    const double C3281 = C3270 + C3271;
    const double C14525 = C14519 + C14520;
    const double C22363 = C22355 + C22356;
    const double C31355 = C31350 + C31351;
    const double C36654 = C36639 + C36640;
    const double C36952 = C36939 + C36940;
    const double C3623 = C3618 + C3619;
    const double C14751 = C14733 + C14734;
    const double C22248 = C22241 + C22242;
    const double C22545 = C22531 + C22532;
    const double C31659 = C31654 + C31655;
    const double C36947 = C36929 + C36930;
    const double C37270 = C37261 + C37262;
    const double C47516 = C47509 + C47510;
    const double C22544 = C22529 + C22530;
    const double C31658 = C31652 + C31653;
    const double C37269 = C37259 + C37260;
    const double C47812 = C47797 + C47798;
    const double C2985 = C2983 * C624;
    const double C4057 = C2983 * C1479;
    const double C3609 =
        2 * C50017 - (C50015 * ce) / C49834 + C49824 * C50057 +
        (C49823 * C50134 * ae) / C49760 +
        C49823 *
            ((C50134 * ae) / C49760 +
             C49823 *
                 (2 * C50054 - (C50046 * ce) / C49834 +
                  C49824 *
                      ((-(C49824 * C49883 * ce) / C49689) / C49760 - C49859 +
                       C49824 * ((-(C49824 * C49863) / C49689) / C49760 -
                                 (C49883 * ce) / C49834))));
    const double C3086 =
        4 * ((-2 * C49987) / C49689 - (C49824 * C50103) / C49689 -
             (C50491 * ce) / C49689) +
        C49824 * ((-3 * C50103) / C49689 + C49824 * C50134 -
                  (C50504 * ce) / C49689) -
        ((3 * C50491 + C49824 * C50504) * ce) / C49689;
    const double C3252 = C49823 * ((-3 * C50103) / C49689 + C49824 * C50134 -
                                   (C50504 * ce) / C49689);
    const double C3606 = (-2 * C49987) / C49689 - (C49824 * C50103) / C49689 -
                         (C50491 * ce) / C49689 + C50134 * C50162;
    const double C354 = C343 + C344;
    const double C514 = C505 + C506;
    const double C10921 = C10904 + C10905;
    const double C33365 = C33348 + C33349;
    const double C680 = C673 + C674;
    const double C1661 = C1654 + C1655;
    const double C11116 = C11102 + C11103;
    const double C33560 = C33546 + C33547;
    const double C1046 = C1039 + C1040;
    const double C5401 = C5382 + C5383;
    const double C11304 = C11291 + C11292;
    const double C33748 = C33735 + C33736;
    const double C44288 = C44269 + C44270;
    const double C3275 = C50919 * C3256;
    const double C14376 = C50983 * C3256;
    const double C36648 = C50983 * C3256;
    const double C3449 = C50919 * C3439;
    const double C5923 = C5343 * C3439;
    const double C14742 = C50983 * C3439;
    const double C37860 = C50983 * C3439;
    const double C44810 = C44230 * C3439;
    const double C20307 =
        5 * (3 * C50057 - (C50052 * ce) / C49834 + C49824 * C50281) -
        ((4 * C50052 + C49824 * C50278) * ce) / C49834 +
        C49824 *
            (4 * C50281 - (C50278 * ce) / C49834 +
             C49824 *
                 (3 * C50279 - (C50272 * ce) / C49834 +
                  C49824 *
                      (2 * C50274 - (C50265 * ce) / C49834 +
                       C49824 * ((-(C49824 * C49921 * ce) / C49689) / C49760 -
                                 C49863 / C49834 +
                                 C49824 * ((-(C49824 * std::pow(C49827, 8) *
                                              bs[8] * C49829) /
                                            C49689) /
                                               C49760 -
                                           (C49921 * ce) / C49834)))));
    const double C20415 =
        ((4 * C50134 +
          C49824 *
              ((-3 * C50130) / C49689 +
               C49824 * ((-2 * C50125) / C49689 -
                         (C49824 * (C49824 * (C49824 * C49975 + C49948 * ce) +
                                    C49898 + C49824 * C49948 * ce)) /
                             C49689 -
                         (C50285 * ce) / C49689) -
               (C50287 * ce) / C49689) -
          ((3 * C50090 + C49824 * C50287) * ce) / C49689) *
         ae) /
            C49760 +
        C49823 *
            (4 * C50281 - (C50278 * ce) / C49834 +
             C49824 *
                 (3 * C50279 - (C50272 * ce) / C49834 +
                  C49824 *
                      (2 * C50274 - (C50265 * ce) / C49834 +
                       C49824 * ((-(C49824 * C49921 * ce) / C49689) / C49760 -
                                 C49863 / C49834 +
                                 C49824 * ((-(C49824 * std::pow(C49827, 8) *
                                              bs[8] * C49829) /
                                            C49689) /
                                               C49760 -
                                           (C49921 * ce) / C49834)))));
    const double C22841 =
        3 * (C50057 - (ae * C50314) / C49834 + C49823 * C50320) +
        (((-2 * C50314) / C49689 - (C49823 * C50319) / C49689) * ae) / C49760 +
        C49823 *
            (2 * C50320 - (ae * C50319) / C49834 +
             C49823 *
                 (C50279 - (ae * C49823 * C50304) / C49834 +
                  C49823 *
                      (C49823 * ((-(C49824 * C49921 * ce) / C49689) / C49760 -
                                 C49863 / C49834 +
                                 C49824 * ((-(C49824 * std::pow(C49827, 8) *
                                              bs[8] * C49829) /
                                            C49689) /
                                               C49760 -
                                           (C49921 * ce) / C49834)) -
                       (ae * C50304) / C49834)));
    const double C22961 =
        4 * (2 * C50196 - (ae * C50195) / C49834 + C49823 * C50337) +
        (((-3 * C50195) / C49689 + C49823 * C50338) * ae) / C49760 +
        C49823 *
            (3 * C50337 + (C50338 * ae) / C49760 +
             C49823 *
                 (2 * C50331 - (ae * C50329) / C49834 +
                  C49823 *
                      (C50274 - (ae * C49823 * C50298) / C49834 +
                       C49823 * (C49823 * ((-(C49824 * std::pow(C49827, 8) *
                                              bs[8] * C49829) /
                                            C49689) /
                                               C49760 -
                                           (C49921 * ce) / C49834) -
                                 (ae * C50298) / C49834))));
    const double C39635 =
        5 * (3 * C50250 + (C50247 * ae) / C49760 + C49823 * C50371) +
        ((4 * C50247 + C49823 * C50369) * ae) / C49760 +
        C49823 *
            (4 * C50371 + (C50369 * ae) / C49760 +
             C49823 *
                 (3 * C50368 + (C50364 * ae) / C49760 +
                  C49823 *
                      (2 * C50363 - (ae * C50353) / C49834 +
                       C49823 * ((-(ae * C49823 * C49975) / C49689) / C49760 -
                                 C49863 / C49834 +
                                 C49823 * ((-(C49823 * std::pow(C49827, 8) *
                                              bs[8] * C49829) /
                                            C49689) /
                                               C49760 -
                                           (ae * C49975) / C49834)))));
    const double C50152 = C50151 - C50144;
    const double C50309 = C49824 * C50308;
    const double C20697 =
        2 * ((C50134 * ae) / C49760 + C49823 * C50281) +
        ((C50134 + C50308 * C50162) * ae) / C49760 +
        C49823 *
            (C50281 + (C49823 * C50308 * ae) / C49760 +
             C49823 *
                 ((C50308 * ae) / C49760 +
                  C49823 *
                      (2 * C50274 - (C50265 * ce) / C49834 +
                       C49824 * ((-(C49824 * C49921 * ce) / C49689) / C49760 -
                                 C49863 / C49834 +
                                 C49824 * ((-(C49824 * std::pow(C49827, 8) *
                                              bs[8] * C49829) /
                                            C49689) /
                                               C49760 -
                                           (C49921 * ce) / C49834)))));
    const double C20695 =
        2 * C49823 * C50134 + C49823 * (C50134 + C50308 * C50162);
    const double C44286 = C44265 + C44266;
    const double C44283 = C44259 + C44260;
    const double C44282 = C44257 + C44258;
    const double C44279 = C44251 + C44252;
    const double C44274 = C44241 + C44242;
    const double C44271 = C44235 + C44236;
    const double C44468 = C44453 + C44454;
    const double C44465 = C44447 + C44448;
    const double C44464 = C44445 + C44446;
    const double C44461 = C44439 + C44440;
    const double C44650 = C44635 + C44636;
    const double C44647 = C44629 + C44630;
    const double C44644 = C44623 + C44624;
    const double C44641 = C44617 + C44618;
    const double C44814 = C44805 + C44806;
    const double C44811 = C44799 + C44800;
    const double C45222 = C45213 + C45214;
    const double C45219 = C45207 + C45208;
    const double C45970 = C45961 + C45962;
    const double C45967 = C45955 + C45956;
    const double C47206 = C47199 + C47200;
    const double C47203 = C47193 + C47194;
    const double C47514 = C47505 + C47506;
    const double C47511 = C47499 + C47500;
    const double C47632 = C47625 + C47626;
    const double C47629 = C47619 + C47620;
    const double C47814 = C47801 + C47802;
    const double C47811 = C47795 + C47796;
    const double C47806 = C47785 + C47786;
    const double C47803 = C47779 + C47780;
    const double C48124 = C48117 + C48118;
    const double C48121 = C48111 + C48112;
    const double C44287 = C44267 + C44268;
    const double C44284 = C44261 + C44262;
    const double C44281 = C44255 + C44256;
    const double C44278 = C44249 + C44250;
    const double C44275 = C44243 + C44244;
    const double C44272 = C44237 + C44238;
    const double C44469 = C44455 + C44456;
    const double C44466 = C44449 + C44450;
    const double C44463 = C44443 + C44444;
    const double C44460 = C44437 + C44438;
    const double C44651 = C44637 + C44638;
    const double C44648 = C44631 + C44632;
    const double C44645 = C44625 + C44626;
    const double C44642 = C44619 + C44620;
    const double C44815 = C44807 + C44808;
    const double C44812 = C44801 + C44802;
    const double C45223 = C45215 + C45216;
    const double C45220 = C45209 + C45210;
    const double C45971 = C45963 + C45964;
    const double C45968 = C45957 + C45958;
    const double C47205 = C47197 + C47198;
    const double C47202 = C47191 + C47192;
    const double C47515 = C47507 + C47508;
    const double C47512 = C47501 + C47502;
    const double C47631 = C47623 + C47624;
    const double C47628 = C47617 + C47618;
    const double C47813 = C47799 + C47800;
    const double C47810 = C47793 + C47794;
    const double C47807 = C47787 + C47788;
    const double C47804 = C47781 + C47782;
    const double C48123 = C48115 + C48116;
    const double C48120 = C48109 + C48110;
    const double C10931 = C10928 + C10929;
    const double C33375 = C33372 + C33373;
    const double C11122 = C11121 - C11120;
    const double C12290 = C12289 - C12287;
    const double C33566 = C33565 - C33564;
    const double C34734 = C34733 - C34731;
    const double C11309 = C11307 + C11308;
    const double C33753 = C33751 + C33752;
    const double C31183 = C14525 + C14526;
    const double C36758 = C36654 + C36653;
    const double C31343 = C14751 + C14752;
    const double C36954 = C36947 + C36948;
    const double C20626 = C50919 * C3609;
    const double C22354 = C5343 * C3609;
    const double C31349 = C50983 * C3609;
    const double C36938 = C50983 * C3609;
    const double C47622 = C44230 * C3609;
    const double C20311 = C117 * C3086;
    const double C20419 = C117 * C3252;
    const double C31188 = C10872 * C3252;
    const double C36763 = C33316 * C3252;
    const double C20625 = C117 * C3606;
    const double C22353 = C5346 * C3606;
    const double C31348 = C10872 * C3606;
    const double C36937 = C33316 * C3606;
    const double C47621 = C44233 * C3606;
    const double C362 = C354 * C50835;
    const double C1373 = C354 * C50835;
    const double C8196 = C354 * C50819;
    const double C522 = C514 * C50819;
    const double C686 = C680 * C624;
    const double C1503 = C680 * C1479;
    const double C2451 = C680 * C50819;
    const double C8347 = C680 * C50835;
    const double C9443 = C680 * C50835;
    const double C1667 = C1661 * C50835;
    const double C1909 = C1661 * C50835;
    const double C8497 = C1661 * C50819;
    const double C1052 = C1046 * C50819;
    const double C3283 = C3274 + C3275;
    const double C14384 = C14375 + C14376;
    const double C36657 = C36647 + C36648;
    const double C3453 = C3448 + C3449;
    const double C5929 = C5922 + C5923;
    const double C14755 = C14741 + C14742;
    const double C37865 = C37859 + C37860;
    const double C44816 = C44809 + C44810;
    const double C3610 =
        2 * C50028 - (C50025 * ce) / C49834 + C49824 * C50081 +
        (C49823 * C50152 * ae) / C49760 +
        C49823 *
            ((C50152 * ae) / C49760 +
             C49823 *
                 (2 * C50079 - (C50071 * ce) / C49834 +
                  C49824 * ((-(C49824 * C50063 * ce) / C49689) / C49760 -
                            C50061 / C49834 +
                            C49824 * ((-(C49824 * C49831 * std::pow(C49827, 8) *
                                         bs[8] * C49829) /
                                       C49689) /
                                          C49760 -
                                      (C50063 * ce) / C49834))));
    const double C3088 =
        4 * ((-2 * C49991) / C49689 - (C49824 * C50108) / C49689 -
             (C50495 * ce) / C49689) +
        C49824 * ((-3 * C50108) / C49689 + C49824 * C50152 -
                  (C50509 * ce) / C49689) -
        ((3 * C50495 + C49824 * C50509) * ce) / C49689;
    const double C3254 = C49823 * ((-3 * C50108) / C49689 + C49824 * C50152 -
                                   (C50509 * ce) / C49689);
    const double C3608 = (-2 * C49991) / C49689 - (C49824 * C50108) / C49689 -
                         (C50495 * ce) / C49689 + C50152 * C50162;
    const double C50310 = C50296 + C50309;
    const double C20314 = C20311 + C20312;
    const double C20422 = C20419 + C20420;
    const double C31194 = C31188 + C31189;
    const double C36769 = C36763 + C36764;
    const double C20628 = C20625 + C20626;
    const double C22362 = C22353 + C22354;
    const double C31354 = C31348 + C31349;
    const double C36951 = C36937 + C36938;
    const double C47630 = C47621 + C47622;
    const double C4263 = C3283 * C50835;
    const double C4611 = C3283 * C50835;
    const double C3457 = C3453 * C50819;
    const double C50311 = C50310 - C50301;
    const double C20621 =
        3 * C50057 - (C50052 * ce) / C49834 + C49824 * C50281 +
        (C49823 * C50311 * ae) / C49760 +
        C49823 *
            ((C50311 * ae) / C49760 +
             C49823 *
                 (3 * C50279 - (C50272 * ce) / C49834 +
                  C49824 *
                      (2 * C50274 - (C50265 * ce) / C49834 +
                       C49824 * ((-(C49824 * C49921 * ce) / C49689) / C49760 -
                                 C49863 / C49834 +
                                 C49824 * ((-(C49824 * std::pow(C49827, 8) *
                                              bs[8] * C49829) /
                                            C49689) /
                                               C49760 -
                                           (C49921 * ce) / C49834)))));
    const double C20306 =
        5 * ((-3 * C50103) / C49689 + C49824 * C50134 -
             (C50504 * ce) / C49689) +
        C49824 * (4 * C50134 + C49824 * C50311 - (C50614 * ce) / C49689) -
        ((4 * C50504 + C49824 * C50614) * ce) / C49689;
    const double C20414 =
        C49823 * (4 * C50134 + C49824 * C50311 - (C50614 * ce) / C49689);
    const double C20620 = (-3 * C50103) / C49689 + C49824 * C50134 -
                          (C50504 * ce) / C49689 + C50311 * C50162;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C51091 +
            (C1358 + C1359 - C1360 - C1361) * C51092 + C1378 * C8189) *
               C51063 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C51091 +
            (C3884 + C3885 - C3886 - C3887) * C51092 + C9445 * C8189) *
               C50957) *
              C51093 +
          (((C1360 - (C1359 + C1358) + C1361) * C51091 +
            (C1364 - (C1363 + C1362) + C1365) * C51092 +
            (C1368 - (C1367 + C1366) + C1369) * C8189) *
               C51063 +
           ((C3886 - (C3885 + C3884) + C3887) * C51091 +
            (C3892 - (C3893 + C3894) + C3895) * C51092 +
            (C9440 - (C9441 + C9442) + C9443) * C8189) *
               C50957) *
              C51078 +
          ((C1378 * C51091 + C1379 * C51092 +
            (C1372 + C1371 - C1370 - C1373) * C8189) *
               C51063 +
           (C9445 * C51091 + (C9442 + C9441 - C9440 - C9443) * C51092 +
            (C353 * C1355 + C354 * C1350 -
             (C117 * C634 + C50919 * C643) * C1356 -
             (C117 * C644 + C50919 * C649) * C50835) *
                C8189) *
               C50957) *
              C1354) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C119 + C50919 * C126) * C1482 +
                    (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
                    C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                       C51091 +
                   (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C51092 +
                   (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C8189) *
                      C51063 +
                  ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 -
                    C2629 * C51081 + C2980 * C1484 + C2981 * C1479) *
                       C51091 +
                   (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C51092 +
                   (C9592 + C9593 - C9594 - C9595 + C9596 + C9597) * C8189) *
                      C50957) *
                     C1480 +
                 (((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C51091 +
                   (C1494 - (C1493 + C1492) + C1495 - C1496 - C1497) * C51092 +
                   (C1500 - (C1499 + C1498) + C1501 - C1502 - C1503) * C8189) *
                      C51063 +
                  ((C4048 - (C4047 + C4046) + C4049 - C4050 - C4051) * C51091 +
                   (C9594 - (C9593 + C9592) + C9595 - C9596 - C9597) * C51092 +
                   (C679 * C1483 - (C352 * C51094 + C351 * C1482) +
                    C680 * C51081 - (C117 * C764 + C50919 * C771) * C1484 -
                    (C117 * C772 + C50919 * C776) * C1479) *
                       C8189) *
                      C50957) *
                     C50790) *
                C50849) /
               (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C51091 +
             (C1358 + C1359 - C1360 - C1361) * C51092 + C1378 * C8189) *
                C51063 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C51091 +
             (C3884 + C3885 - C3886 - C3887) * C51092 + C9445 * C8189) *
                C50957) *
               C1480 +
           (((C1360 - (C1359 + C1358) + C1361) * C51091 +
             (C1364 - (C1363 + C1362) + C1365) * C51092 +
             (C1368 - (C1367 + C1366) + C1369) * C8189) *
                C51063 +
            ((C3886 - (C3885 + C3884) + C3887) * C51091 +
             (C3892 - (C3893 + C3894) + C3895) * C51092 +
             (C9440 - (C9441 + C9442) + C9443) * C8189) *
                C50957) *
               C50790) *
              C51049 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C51091 +
             (C1662 - (C1640 + C1641) + C1663) * C51092 +
             (C1664 - (C1646 + C1647) + C1665) * C8189) *
                C51063 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C51091 +
             (C4256 - (C4257 + C4258) + C4259) * C51092 +
             (C9792 - (C9793 + C9794) + C9795) * C8189) *
                C50957) *
               C1480 +
           (((C1641 + C1640 - C1662 - C1663) * C51091 +
             (C1647 + C1646 - C1664 - C1665) * C51092 +
             (C1653 + C1652 - C1666 - C1667) * C8189) *
                C51063 +
            ((C4258 + C4257 - C4256 - C4259) * C51091 +
             (C9794 + C9793 - C9792 - C9795) * C51092 +
             (C1660 * C1355 + C1661 * C1350 -
              (C117 * C882 + C50919 * C897) * C1356 -
              (C117 * C898 + C50919 * C906) * C50835) *
                 C8189) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C51091 +
             (C1358 + C1359 - C1360 - C1361) * C51092 + C1378 * C8189) *
                C51063 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C51091 +
             (C3884 + C3885 - C3886 - C3887) * C51092 + C9445 * C8189) *
                C50957) *
               C51040 +
           (((C1360 - (C1359 + C1358) + C1361) * C51091 +
             (C1364 - (C1363 + C1362) + C1365) * C51092 +
             (C1368 - (C1367 + C1366) + C1369) * C8189) *
                C51063 +
            ((C3886 - (C3885 + C3884) + C3887) * C51091 +
             (C3892 - (C3893 + C3894) + C3895) * C51092 +
             (C9440 - (C9441 + C9442) + C9443) * C8189) *
                C50957) *
               C50790) *
              C1765 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C51091 +
             (C1662 - (C1640 + C1641) + C1663) * C51092 +
             (C1664 - (C1646 + C1647) + C1665) * C8189) *
                C51063 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C51091 +
             (C4256 - (C4257 + C4258) + C4259) * C51092 +
             (C9792 - (C9793 + C9794) + C9795) * C8189) *
                C50957) *
               C51040 +
           (((C1641 + C1640 - C1662 - C1663) * C51091 +
             (C1647 + C1646 - C1664 - C1665) * C51092 +
             (C1653 + C1652 - C1666 - C1667) * C8189) *
                C51063 +
            ((C4258 + C4257 - C4256 - C4259) * C51091 +
             (C9794 + C9793 - C9792 - C9795) * C51092 +
             (C1660 * C1355 + C1661 * C1350 -
              (C117 * C882 + C50919 * C897) * C1356 -
              (C117 * C898 + C50919 * C906) * C50835) *
                 C8189) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C119 + C50919 * C126) * C1482 +
                    (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
                    C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                       C51091 +
                   (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C51092 +
                   (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C8189) *
                      C51063 +
                  ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 -
                    C2629 * C51081 + C2980 * C1484 + C2981 * C1479) *
                       C51091 +
                   (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C51092 +
                   (C9592 + C9593 - C9594 - C9595 + C9596 + C9597) * C8189) *
                      C50957) *
                     C50785 * C1765 +
                 (((C3276 * C1483 -
                    ((C117 * C480 + C50919 * C488) * C51094 +
                     (C117 * C470 + C50919 * C481) * C1482) +
                    C3277 * C51081 - C3278 * C1484 - C3279 * C1479) *
                       C51091 +
                   (C1656 * C1483 - (C508 * C51094 + C507 * C1482) +
                    C1657 * C51081 - C2796 * C1484 - C2797 * C1479) *
                       C51092 +
                   (C1658 * C1483 - (C510 * C51094 + C509 * C1482) +
                    C1659 * C51081 - C2798 * C1484 - C2799 * C1479) *
                       C8189) *
                      C51063 +
                  ((C3278 * C1483 - (C3277 * C51094 + C3276 * C1482) +
                    C3279 * C51081 - C3280 * C1484 - C3281 * C1479) *
                       C51091 +
                   (C2796 * C1483 - (C1657 * C51094 + C1656 * C1482) +
                    C2797 * C51081 - C3282 * C1484 - C3283 * C1479) *
                       C51092 +
                   (C2798 * C1483 - (C1659 * C51094 + C1658 * C1482) +
                    C2799 * C51081 - (C117 * C4251 + C50919 * C4252) * C1484 -
                    (C117 * C4253 + C50919 * C4254) * C1479) *
                       C8189) *
                      C50957) *
                     C50785 * C50861)) /
               (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C51091 +
            (C1358 + C1359 - C1360 - C1361) * C51092 + C1378 * C8189) *
               C51063 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C51091 +
            (C3884 + C3885 - C3886 - C3887) * C51092 + C9445 * C8189) *
               C50957) *
              C50785 * C51095 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C51091 +
            (C1662 - (C1640 + C1641) + C1663) * C51092 +
            (C1664 - (C1646 + C1647) + C1665) * C8189) *
               C51063 +
           ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C51091 +
            (C4256 - (C4257 + C4258) + C4259) * C51092 +
            (C9792 - (C9793 + C9794) + C9795) * C8189) *
               C50957) *
              C50785 * C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C1355 +
             (C117 * C1014 + C50919 * C1023) * C1350 - C3620 * C1356 -
             C3621 * C50835) *
                C51091 +
            (C1041 * C1355 + C1042 * C1350 - C3450 * C1356 - C3451 * C50835) *
                C51092 +
            (C1043 * C1355 + C1044 * C1350 - C9045 * C1356 - C9046 * C50835) *
                C8189) *
               C51063 +
           ((C3620 * C1355 + C3621 * C1350 - C3622 * C1356 - C3623 * C50835) *
                C51091 +
            (C3450 * C1355 + C3451 * C1350 - C3452 * C1356 - C3453 * C50835) *
                C51092 +
            (C9045 * C1355 + C9046 * C1350 -
             (C117 * C3431 + C50919 * C3437) * C1356 -
             (C117 * C3436 + C50919 * C3440) * C50835) *
                C8189) *
               C50957) *
              C50785 * C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C51091 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C51092 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C8189) *
               C51063 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C51091 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C51092 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C8189) *
               C50957) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C51091 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C51092 +
            (C669 - (C668 + C667) + C670 - C685 - C686) * C8189) *
               C51063 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C51091 +
            (C8647 - (C8646 + C8645) + C8648 - C8649 - C8650) * C51092 +
            (C679 * C628 - (C352 * C622 + C351 * C627) + C680 * C623 -
             (C117 * C764 + C50919 * C771) * C629 -
             (C117 * C772 + C50919 * C776) * C624) *
                C8189) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C51091 +
            (C178 + C179) * C51092 + C188 * C8189) *
               C51063 +
           ((C2626 * C118 + C2627 * C50819) * C51091 +
            (C2440 + C2441) * C51092 + C8193 * C8189) *
               C50957) *
              C112 -
          ((C8194 * C8189 + (C2446 + C2447) * C51092 +
            (C2441 + C2440) * C51091) *
               C50957 +
           (C191 * C8189 + (C181 + C180) * C51092 + (C179 + C178) * C51091) *
               C51063) *
              C113 +
          ((C188 * C51091 + C189 * C51092 + (C185 + C184) * C8189) * C51063 +
           (C8193 * C51091 + (C2448 + C2449) * C51092 +
            (C8195 + C8196) * C8189) *
               C50957) *
              C114 -
          ((((C117 * C313 + C50919 * C319) * C50819 +
             (C117 * C301 + C50919 * C312) * C118) *
                C8189 +
            (C8196 + C8195) * C51092 + C8194 * C51091) *
               C50957 +
           ((C187 + C186) * C8189 + C190 * C51092 + C191 * C51091) * C51063) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51091 +
             (C178 + C179) * C51092 + C188 * C8189) *
                C51063 +
            ((C2626 * C118 + C2627 * C50819) * C51091 +
             (C2440 + C2441) * C51092 + C8193 * C8189) *
                C50957) *
               C51040 -
           ((C8194 * C8189 + (C2446 + C2447) * C51092 +
             (C2441 + C2440) * C51091) *
                C50957 +
            (C191 * C8189 + (C181 + C180) * C51092 + (C179 + C178) * C51091) *
                C51063) *
               C50790) *
              C1005 +
          ((((C515 + C516) * C51091 + (C517 + C518) * C51092 +
             (C519 + C520) * C8189) *
                C51063 +
            ((C2784 + C2785) * C51091 + (C2786 + C2787) * C51092 +
             (C8496 + C8497) * C8189) *
                C50957) *
               C50790 -
           ((C8498 * C8189 + (C2785 + C2784) * C51092 +
             (C3277 * C50819 + C3276 * C118) * C51091) *
                C50957 +
            (C524 * C8189 + (C516 + C515) * C51092 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C51091) *
                C51063) *
               C51040) *
              C1006 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C51091 +
             (C1047 + C1048) * C51092 + (C1049 + C1050) * C8189) *
                C51063 +
            ((C3620 * C118 + C3621 * C50819) * C51091 +
             (C3454 + C3455) * C51092 + (C9047 + C9048) * C8189) *
                C50957) *
               C51040 -
           ((((C117 * C1161 + C50919 * C1165) * C50819 +
              (C117 * C1153 + C50919 * C1160) * C118) *
                 C8189 +
             (C9048 + C9047) * C51092 + (C3455 + C3454) * C51091) *
                C50957 +
            ((C1052 + C1051) * C8189 + (C1050 + C1049) * C51092 +
             (C1048 + C1047) * C51091) *
                C51063) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C51091 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C51092 +
           (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 +
            C677 * C759 + C678 * C754 - C2632 * C760 - C2633 * C755) *
               C8189) *
              C51063 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C51091 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C51092 +
           (C348 * C757 + C349 * C752 - C677 * C758 - C678 * C753 +
            C2632 * C759 + C2633 * C754 -
            (C117 * C2951 + C50919 * C2956) * C760 -
            (C117 * C2957 + C50919 * C2960) * C755) *
               C8189) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C51091 +
            (C321 + C322 - C355 - C356) * C51092 + C365 * C8189) *
               C51063 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C51091 +
            (C2606 + C2607 - C2608 - C2609) * C51092 + C8349 * C8189) *
               C50957) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C51091 +
            (C357 - (C328 + C327) + C358) * C51092 +
            (C359 - (C334 + C333) + C360) * C8189) *
               C51063 +
           ((C2608 - (C2607 + C2606) + C2609) * C51091 +
            (C2616 - (C2617 + C2618) + C2619) * C51092 +
            (C8344 - (C8345 + C8346) + C8347) * C8189) *
               C50957) *
              C292 +
          ((C365 * C51091 + C366 * C51092 +
            (C342 + C341 - C361 - C362) * C8189) *
               C51063 +
           (C8349 * C51091 + (C8346 + C8345 - C8344 - C8347) * C51092 +
            (C353 * C294 + C354 * C51047 -
             (C117 * C634 + C50919 * C643) * C295 -
             (C117 * C644 + C50919 * C649) * C50835) *
                C8189) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C51091 +
            (C321 + C322 - C355 - C356) * C51092 + C365 * C8189) *
               C51063 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C51091 +
            (C2606 + C2607 - C2608 - C2609) * C51092 + C8349 * C8189) *
               C50957) *
              C50785 * C1005 +
          (((C3276 * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             C3277 * C50835) *
                C51091 +
            (C1898 - (C1899 + C1900) + C1901) * C51092 +
            (C1902 - (C1903 + C1904) + C1905) * C8189) *
               C51063 +
           ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                C51091 +
            (C4604 - (C4605 + C4606) + C4607) * C51092 +
            (C2798 * C295 - (C1659 * C51047 + C1658 * C294) + C2799 * C50835) *
                C8189) *
               C50957) *
              C50785 * C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C294 +
             (C117 * C1014 + C50919 * C1023) * C51047 - C3620 * C295 -
             C3621 * C50835) *
                C51091 +
            (C1041 * C294 + C1042 * C51047 - C3450 * C295 - C3451 * C50835) *
                C51092 +
            (C1043 * C294 + C1044 * C51047 - C9045 * C295 - C9046 * C50835) *
                C8189) *
               C51063 +
           ((C3620 * C294 + C3621 * C51047 - C3622 * C295 - C3623 * C50835) *
                C51091 +
            (C3450 * C294 + C3451 * C51047 - C3452 * C295 - C3453 * C50835) *
                C51092 +
            (C9045 * C294 + C9046 * C51047 -
             (C117 * C3431 + C50919 * C3437) * C295 -
             (C117 * C3436 + C50919 * C3440) * C50835) *
                C8189) *
               C50957) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C51091 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C51092 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C8189) *
               C51063 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C51091 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C51092 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C8189) *
               C50957) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C51091 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C51092 +
            (C1658 * C628 - (C510 * C622 + C509 * C627) + C1659 * C623 -
             C2798 * C629 - C2799 * C624) *
                C8189) *
               C51063 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C51091 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C51092 +
            (C2798 * C628 - (C1659 * C622 + C1658 * C627) + C2799 * C623 -
             (C117 * C4251 + C50919 * C4252) * C629 -
             (C117 * C4253 + C50919 * C4254) * C624) *
                C8189) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51091 +
             (C178 + C179) * C51092 + C188 * C8189) *
                C51063 +
            ((C2626 * C118 + C2627 * C50819) * C51091 +
             (C2440 + C2441) * C51092 + C8193 * C8189) *
                C50957) *
               C291 -
           ((C8194 * C8189 + (C2446 + C2447) * C51092 +
             (C2441 + C2440) * C51091) *
                C50957 +
            (C191 * C8189 + (C181 + C180) * C51092 + (C179 + C178) * C51091) *
                C51063) *
               C292 +
           ((C188 * C51091 + C189 * C51092 + (C185 + C184) * C8189) * C51063 +
            (C8193 * C51091 + (C2448 + C2449) * C51092 +
             (C8195 + C8196) * C8189) *
                C50957) *
               C293) *
              C51049 +
          ((((C515 + C516) * C51091 + (C517 + C518) * C51092 +
             (C519 + C520) * C8189) *
                C51063 +
            ((C2784 + C2785) * C51091 + (C2786 + C2787) * C51092 +
             (C8496 + C8497) * C8189) *
                C50957) *
               C292 -
           ((C8498 * C8189 + (C2785 + C2784) * C51092 +
             (C3277 * C50819 + C3276 * C118) * C51091) *
                C50957 +
            (C524 * C8189 + (C516 + C515) * C51092 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C51091) *
                C51063) *
               C291 -
           ((((C117 * C1635 + C50919 * C1636) * C50819 +
              (C117 * C1633 + C50919 * C1634) * C118) *
                 C8189 +
             (C8497 + C8496) * C51092 + C8498 * C51091) *
                C50957 +
            ((C522 + C521) * C8189 + C523 * C51092 + C524 * C51091) * C51063) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C51091 +
            (C178 + C179) * C51092 + C188 * C8189) *
               C51063 +
           ((C2626 * C118 + C2627 * C50819) * C51091 +
            (C2440 + C2441) * C51092 + C8193 * C8189) *
               C50957) *
              C50785 * C1232 -
          ((C8498 * C8189 + (C2785 + C2784) * C51092 +
            (C3277 * C50819 + C3276 * C118) * C51091) *
               C50957 +
           (C524 * C8189 + (C516 + C515) * C51092 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C51091) *
               C51063) *
              C50785 * C1233 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C51091 +
            (C1047 + C1048) * C51092 + (C1049 + C1050) * C8189) *
               C51063 +
           ((C3620 * C118 + C3621 * C50819) * C51091 +
            (C3454 + C3455) * C51092 + (C9047 + C9048) * C8189) *
               C50957) *
              C50785 * C1234 -
          ((((C117 * C7097 + C50919 * C7098) * C50819 +
             (C117 * C7095 + C50919 * C7096) * C118) *
                C8189 +
            ((C117 * C3729 + C50919 * C3735) * C50819 +
             (C117 * C3723 + C50919 * C3730) * C118) *
                C51092 +
            ((C117 * C3731 + C50919 * C3736) * C50819 +
             (C117 * C3724 + C50919 * C3732) * C118) *
                C51091) *
               C50957 +
           (((C117 * C1242 + C50919 * C1249) * C50819 +
             (C117 * C1237 + C50919 * C1243) * C118) *
                C8189 +
            ((C117 * C1244 + C50919 * C1250) * C50819 +
             (C117 * C1238 + C50919 * C1245) * C118) *
                C51092 +
            ((C117 * C1246 + C50919 * C1251) * C50819 +
             (C117 * C1239 + C50919 * C1247) * C118) *
                C51091) *
               C51063) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51091 +
             (C178 + C179) * C51092 + C188 * C8189) *
                C51063 +
            ((C2626 * C118 + C2627 * C50819) * C51091 +
             (C2440 + C2441) * C51092 + C8193 * C8189) *
                C50957) *
               C51093 -
           ((C8194 * C8189 + (C2446 + C2447) * C51092 +
             (C2441 + C2440) * C51091) *
                C50957 +
            (C191 * C8189 + (C181 + C180) * C51092 + (C179 + C178) * C51091) *
                C51063) *
               C51078 +
           ((C188 * C51091 + C189 * C51092 + (C185 + C184) * C8189) * C51063 +
            (C8193 * C51091 + (C2448 + C2449) * C51092 +
             (C8195 + C8196) * C8189) *
                C50957) *
               C1354) *
              C1765 +
          ((((C515 + C516) * C51091 + (C517 + C518) * C51092 +
             (C519 + C520) * C8189) *
                C51063 +
            ((C2784 + C2785) * C51091 + (C2786 + C2787) * C51092 +
             (C8496 + C8497) * C8189) *
                C50957) *
               C51078 -
           ((C8498 * C8189 + (C2785 + C2784) * C51092 +
             (C3277 * C50819 + C3276 * C118) * C51091) *
                C50957 +
            (C524 * C8189 + (C516 + C515) * C51092 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C51091) *
                C51063) *
               C51093 -
           ((((C117 * C1635 + C50919 * C1636) * C50819 +
              (C117 * C1633 + C50919 * C1634) * C118) *
                 C8189 +
             (C8497 + C8496) * C51092 + C8498 * C51091) *
                C50957 +
            ((C522 + C521) * C8189 + C523 * C51092 + C524 * C51091) * C51063) *
               C1354) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C294 +
              (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
              C2627 * C50835) *
                 C51091 +
             (C321 + C322 - C355 - C356) * C51092 + C365 * C8189) *
                C51063 +
            ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                 C51091 +
             (C2606 + C2607 - C2608 - C2609) * C51092 + C8349 * C8189) *
                C50957) *
               C1480 +
           (((C355 - (C322 + C321) + C356) * C51091 +
             (C357 - (C328 + C327) + C358) * C51092 +
             (C359 - (C334 + C333) + C360) * C8189) *
                C51063 +
            ((C2608 - (C2607 + C2606) + C2609) * C51091 +
             (C2616 - (C2617 + C2618) + C2619) * C51092 +
             (C8344 - (C8345 + C8346) + C8347) * C8189) *
                C50957) *
               C50790) *
              C1765 +
          ((((C3276 * C295 -
              ((C117 * C480 + C50919 * C488) * C51047 +
               (C117 * C470 + C50919 * C481) * C294) +
              C3277 * C50835) *
                 C51091 +
             (C1898 - (C1899 + C1900) + C1901) * C51092 +
             (C1902 - (C1903 + C1904) + C1905) * C8189) *
                C51063 +
            ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                 C51091 +
             (C4604 - (C4605 + C4606) + C4607) * C51092 +
             (C10136 - (C10137 + C10138) + C10139) * C8189) *
                C50957) *
               C1480 +
           (((C1900 + C1899 - C1898 - C1901) * C51091 +
             (C1904 + C1903 - C1902 - C1905) * C51092 +
             (C1908 + C1907 - C1906 - C1909) * C8189) *
                C51063 +
            ((C4606 + C4605 - C4604 - C4607) * C51091 +
             (C10138 + C10137 - C10136 - C10139) * C51092 +
             (C1660 * C294 + C1661 * C51047 -
              (C117 * C882 + C50919 * C897) * C295 -
              (C117 * C898 + C50919 * C906) * C50835) *
                 C8189) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51091 +
             (C178 + C179) * C51092 + C188 * C8189) *
                C51063 +
            ((C2626 * C118 + C2627 * C50819) * C51091 +
             (C2440 + C2441) * C51092 + C8193 * C8189) *
                C50957) *
               C1480 -
           ((C8194 * C8189 + (C2446 + C2447) * C51092 +
             (C2441 + C2440) * C51091) *
                C50957 +
            (C191 * C8189 + (C181 + C180) * C51092 + (C179 + C178) * C51091) *
                C51063) *
               C50790) *
              C51095 +
          ((((C515 + C516) * C51091 + (C517 + C518) * C51092 +
             (C519 + C520) * C8189) *
                C51063 +
            ((C2784 + C2785) * C51091 + (C2786 + C2787) * C51092 +
             (C8496 + C8497) * C8189) *
                C50957) *
               C50790 -
           ((C8498 * C8189 + (C2785 + C2784) * C51092 +
             (C3277 * C50819 + C3276 * C118) * C51091) *
                C50957 +
            (C524 * C8189 + (C516 + C515) * C51092 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C51091) *
                C51063) *
               C1480) *
              C51084 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C51091 +
             (C1047 + C1048) * C51092 + (C1049 + C1050) * C8189) *
                C51063 +
            ((C3620 * C118 + C3621 * C50819) * C51091 +
             (C3454 + C3455) * C51092 + (C9047 + C9048) * C8189) *
                C50957) *
               C1480 -
           ((((C117 * C1161 + C50919 * C1165) * C50819 +
              (C117 * C1153 + C50919 * C1160) * C118) *
                 C8189 +
             (C9048 + C9047) * C51092 + (C3455 + C3454) * C51091) *
                C50957 +
            ((C1052 + C1051) * C8189 + (C1050 + C1049) * C51092 +
             (C1048 + C1047) * C51091) *
                C51063) *
               C50790) *
              C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C51091 +
            (C178 + C179) * C51092 + C188 * C8189) *
               C51063 +
           ((C2626 * C118 + C2627 * C50819) * C51091 +
            (C2440 + C2441) * C51092 + C8193 * C8189) *
               C50957) *
              C112 -
          ((C8194 * C8189 + (C2446 + C2447) * C51092 +
            (C2441 + C2440) * C51091) *
               C50957 +
           (C191 * C8189 + (C181 + C180) * C51092 + (C179 + C178) * C51091) *
               C51063) *
              C113 +
          ((C188 * C51091 + C189 * C51092 + (C185 + C184) * C8189) * C51063 +
           (C8193 * C51091 + (C2448 + C2449) * C51092 +
            (C8195 + C8196) * C8189) *
               C50957) *
              C114 -
          ((((C117 * C313 + C50919 * C319) * C50819 +
             (C117 * C301 + C50919 * C312) * C118) *
                C8189 +
            (C8196 + C8195) * C51092 + C8194 * C51091) *
               C50957 +
           ((C187 + C186) * C8189 + C190 * C51092 + C191 * C51091) * C51063) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C51091 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C51092 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C8189) *
               C51063 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C51091 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C51092 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C8189) *
               C50957) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C51091 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C51092 +
            (C669 - (C668 + C667) + C670 - C685 - C686) * C8189) *
               C51063 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C51091 +
            (C8647 - (C8646 + C8645) + C8648 - C8649 - C8650) * C51092 +
            (C679 * C628 - (C352 * C622 + C351 * C627) + C680 * C623 -
             (C117 * C764 + C50919 * C771) * C629 -
             (C117 * C772 + C50919 * C776) * C624) *
                C8189) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C51091 +
            (C321 + C322 - C355 - C356) * C51092 + C365 * C8189) *
               C51063 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C51091 +
            (C2606 + C2607 - C2608 - C2609) * C51092 + C8349 * C8189) *
               C50957) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C51091 +
            (C357 - (C328 + C327) + C358) * C51092 +
            (C359 - (C334 + C333) + C360) * C8189) *
               C51063 +
           ((C2608 - (C2607 + C2606) + C2609) * C51091 +
            (C2616 - (C2617 + C2618) + C2619) * C51092 +
            (C8344 - (C8345 + C8346) + C8347) * C8189) *
               C50957) *
              C292 +
          ((C365 * C51091 + C366 * C51092 +
            (C342 + C341 - C361 - C362) * C8189) *
               C51063 +
           (C8349 * C51091 + (C8346 + C8345 - C8344 - C8347) * C51092 +
            (C353 * C294 + C354 * C51047 -
             (C117 * C634 + C50919 * C643) * C295 -
             (C117 * C644 + C50919 * C649) * C50835) *
                C8189) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C51091 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C51092 +
           (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 +
            C677 * C759 + C678 * C754 - C2632 * C760 - C2633 * C755) *
               C8189) *
              C51063 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C51091 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C51092 +
           (C348 * C757 + C349 * C752 - C677 * C758 - C678 * C753 +
            C2632 * C759 + C2633 * C754 -
            (C117 * C2951 + C50919 * C2956) * C760 -
            (C117 * C2957 + C50919 * C2960) * C755) *
               C8189) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51091 +
             (C178 + C179) * C51092 + C188 * C8189) *
                C51063 +
            ((C2626 * C118 + C2627 * C50819) * C51091 +
             (C2440 + C2441) * C51092 + C8193 * C8189) *
                C50957) *
               C291 -
           ((C8194 * C8189 + (C2446 + C2447) * C51092 +
             (C2441 + C2440) * C51091) *
                C50957 +
            (C191 * C8189 + (C181 + C180) * C51092 + (C179 + C178) * C51091) *
                C51063) *
               C292 +
           ((C188 * C51091 + C189 * C51092 + (C185 + C184) * C8189) * C51063 +
            (C8193 * C51091 + (C2448 + C2449) * C51092 +
             (C8195 + C8196) * C8189) *
                C50957) *
               C293) *
              C51049 +
          ((((C515 + C516) * C51091 + (C517 + C518) * C51092 +
             (C519 + C520) * C8189) *
                C51063 +
            ((C2784 + C2785) * C51091 + (C2786 + C2787) * C51092 +
             (C8496 + C8497) * C8189) *
                C50957) *
               C292 -
           ((C8498 * C8189 + (C2785 + C2784) * C51092 +
             (C3277 * C50819 + C3276 * C118) * C51091) *
                C50957 +
            (C524 * C8189 + (C516 + C515) * C51092 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C51091) *
                C51063) *
               C291 -
           ((((C117 * C1635 + C50919 * C1636) * C50819 +
              (C117 * C1633 + C50919 * C1634) * C118) *
                 C8189 +
             (C8497 + C8496) * C51092 + C8498 * C51091) *
                C50957 +
            ((C522 + C521) * C8189 + C523 * C51092 + C524 * C51091) * C51063) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C51091 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C51092 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C8189) *
               C51063 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C51091 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C51092 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C8189) *
               C50957) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C51091 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C51092 +
            (C1658 * C628 - (C510 * C622 + C509 * C627) + C1659 * C623 -
             C2798 * C629 - C2799 * C624) *
                C8189) *
               C51063 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C51091 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C51092 +
            (C2798 * C628 - (C1659 * C622 + C1658 * C627) + C2799 * C623 -
             (C117 * C4251 + C50919 * C4252) * C629 -
             (C117 * C4253 + C50919 * C4254) * C624) *
                C8189) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1355 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C1350 -
             (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                C2434 +
            ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
             C13959 * C1356 - C13960 * C50835) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
             (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                C2434 +
            (C13961 * C1355 + C13962 * C1350 - C14367 * C1356 -
             C14368 * C50835) *
                C50769) *
               C50957) *
              C51093 +
          (((C13961 * C1356 -
             ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
             C13962 * C50835) *
                C2434 +
            (C13963 * C1356 -
             ((C10913 + C10912) * C1350 + (C10911 + C10910) * C1355) +
             C13964 * C50835) *
                C50769) *
               C51063 +
           ((C14365 * C1356 - (C13960 * C1350 + C13959 * C1355) +
             C14366 * C50835) *
                C2434 +
            ((C11476 + C11477) * C1356 - (C11118 * C1350 + C11117 * C1355) +
             (C11478 + C11479) * C50835) *
                C50769) *
               C50957) *
              C51078 +
          ((C12290 * C2434 +
            ((C10917 + C10916) * C1355 + (C10915 + C10914) * C1350 -
             (C11114 + C11113) * C1356 - (C11116 + C11115) * C50835) *
                C50769) *
               C51063 +
           ((C13963 * C1355 + C13964 * C1350 - (C11477 + C11476) * C1356 -
             (C11479 + C11478) * C50835) *
                C2434 +
            ((C11113 + C11114) * C1355 + (C11115 + C11116) * C1350 -
             (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                 C1356 -
             (C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                 C50835) *
                C50769) *
               C50957) *
              C1354) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1482 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51094 -
             (C13965 + C13966) * C1483 - (C13967 + C13968) * C51081 +
             (C14377 + C14378) * C1484 + (C14379 + C14380) * C1479) *
                C2434 +
            ((C10906 + C10907) * C1482 + (C10908 + C10909) * C51094 -
             C13959 * C1483 - C13960 * C51081 + C14365 * C1484 +
             C14366 * C1479) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C1482 + (C13968 + C13967) * C51094 -
             (C14378 + C14377) * C1483 - (C14380 + C14379) * C51081 +
             (C14524 + C14523) * C1484 + (C14526 + C14525) * C1479) *
                C2434 +
            (C13961 * C1482 + C13962 * C51094 - C14367 * C1483 -
             C14368 * C51081 + (C14381 + C14382) * C1484 +
             (C14383 + C14384) * C1479) *
                C50769) *
               C50957) *
              C1480 +
          (((C13961 * C1483 -
             ((C10909 + C10908) * C51094 + (C10907 + C10906) * C1482) +
             C13962 * C51081 - C14367 * C1484 - C14368 * C1479) *
                C2434 +
            (C13963 * C1483 -
             ((C10913 + C10912) * C51094 + (C10911 + C10910) * C1482) +
             C13964 * C51081 - (C11477 + C11476) * C1484 -
             (C11479 + C11478) * C1479) *
                C50769) *
               C51063 +
           ((C14365 * C1483 - (C13960 * C51094 + C13959 * C1482) +
             C14366 * C51081 - (C14382 + C14381) * C1484 -
             (C14384 + C14383) * C1479) *
                C2434 +
            ((C11476 + C11477) * C1483 - (C11118 * C51094 + C11117 * C1482) +
             (C11478 + C11479) * C51081 -
             (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
                 C1484 -
             (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
                 C1479) *
                C50769) *
               C50957) *
              C50790) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C1355 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C1350 -
              (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                 C2434 +
             ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
              C13959 * C1356 - C13960 * C50835) *
                 C50769) *
                C51063 +
            (((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
              (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                 C2434 +
             (C13961 * C1355 + C13962 * C1350 - C14367 * C1356 -
              C14368 * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           (((C13961 * C1356 -
              ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
              C13962 * C50835) *
                 C2434 +
             (C13963 * C1356 -
              ((C10913 + C10912) * C1350 + (C10911 + C10910) * C1355) +
              C13964 * C50835) *
                 C50769) *
                C51063 +
            ((C14365 * C1356 - (C13960 * C1350 + C13959 * C1355) +
              C14366 * C50835) *
                 C2434 +
             ((C11476 + C11477) * C1356 - (C11118 * C1350 + C11117 * C1355) +
              (C11478 + C11479) * C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C51049 +
          (((((C14745 + C14746) * C1356 -
              ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
                C51064 * C488) *
                   C1350 +
               (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
                C51064 * C481) *
                   C1355) +
              (C14747 + C14748) * C50835) *
                 C2434 +
             (C15945 * C1356 -
              ((C11296 + C11295) * C1350 + (C11294 + C11293) * C1355) +
              C15946 * C50835) *
                 C50769) *
                C51063 +
            (((C14750 + C14749) * C1356 -
              ((C14748 + C14747) * C1350 + (C14746 + C14745) * C1355) +
              (C14752 + C14751) * C50835) *
                 C2434 +
             ((C14754 + C14753) * C1356 - (C15947 * C1350 + C15948 * C1355) +
              (C14756 + C14755) * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           ((((C11293 + C11294) * C1355 + (C11295 + C11296) * C1350 -
              C15948 * C1356 - C15947 * C50835) *
                 C2434 +
             ((C11297 + C11298) * C1355 + (C11299 + C11300) * C1350 -
              (C12652 + C12651) * C1356 - (C12654 + C12653) * C50835) *
                 C50769) *
                C51063 +
            ((C15945 * C1355 + C15946 * C1350 - (C14753 + C14754) * C1356 -
              (C14755 + C14756) * C50835) *
                 C2434 +
             ((C12651 + C12652) * C1355 + (C12653 + C12654) * C1350 -
              (C10872 * C3431 + C50983 * C3437 + C10871 * C880 +
               C51064 * C893) *
                  C1356 -
              (C10872 * C3436 + C50983 * C3440 + C10871 * C894 +
               C51064 * C904) *
                  C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C1355 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C1350 -
              (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                 C2434 +
             ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
              C13959 * C1356 - C13960 * C50835) *
                 C50769) *
                C51063 +
            (((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
              (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                 C2434 +
             (C13961 * C1355 + C13962 * C1350 - C14367 * C1356 -
              C14368 * C50835) *
                 C50769) *
                C50957) *
               C51040 +
           (((C13961 * C1356 -
              ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
              C13962 * C50835) *
                 C2434 +
             (C13963 * C1356 -
              ((C10913 + C10912) * C1350 + (C10911 + C10910) * C1355) +
              C13964 * C50835) *
                 C50769) *
                C51063 +
            ((C14365 * C1356 - (C13960 * C1350 + C13959 * C1355) +
              C14366 * C50835) *
                 C2434 +
             ((C11476 + C11477) * C1356 - (C11118 * C1350 + C11117 * C1355) +
              (C11478 + C11479) * C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C1765 +
          (((((C14745 + C14746) * C1356 -
              ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
                C51064 * C488) *
                   C1350 +
               (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
                C51064 * C481) *
                   C1355) +
              (C14747 + C14748) * C50835) *
                 C2434 +
             (C15945 * C1356 -
              ((C11296 + C11295) * C1350 + (C11294 + C11293) * C1355) +
              C15946 * C50835) *
                 C50769) *
                C51063 +
            (((C14750 + C14749) * C1356 -
              ((C14748 + C14747) * C1350 + (C14746 + C14745) * C1355) +
              (C14752 + C14751) * C50835) *
                 C2434 +
             ((C14754 + C14753) * C1356 - (C15947 * C1350 + C15948 * C1355) +
              (C14756 + C14755) * C50835) *
                 C50769) *
                C50957) *
               C51040 +
           ((((C11293 + C11294) * C1355 + (C11295 + C11296) * C1350 -
              C15948 * C1356 - C15947 * C50835) *
                 C2434 +
             ((C11297 + C11298) * C1355 + (C11299 + C11300) * C1350 -
              (C12652 + C12651) * C1356 - (C12654 + C12653) * C50835) *
                 C50769) *
                C51063 +
            ((C15945 * C1355 + C15946 * C1350 - (C14753 + C14754) * C1356 -
              (C14755 + C14756) * C50835) *
                 C2434 +
             ((C12651 + C12652) * C1355 + (C12653 + C12654) * C1350 -
              (C10872 * C3431 + C50983 * C3437 + C10871 * C880 +
               C51064 * C893) *
                  C1356 -
              (C10872 * C3436 + C50983 * C3440 + C10871 * C894 +
               C51064 * C904) *
                  C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1482 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51094 -
             (C13965 + C13966) * C1483 - (C13967 + C13968) * C51081 +
             (C14377 + C14378) * C1484 + (C14379 + C14380) * C1479) *
                C2434 +
            ((C10906 + C10907) * C1482 + (C10908 + C10909) * C51094 -
             C13959 * C1483 - C13960 * C51081 + C14365 * C1484 +
             C14366 * C1479) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C1482 + (C13968 + C13967) * C51094 -
             (C14378 + C14377) * C1483 - (C14380 + C14379) * C51081 +
             (C14524 + C14523) * C1484 + (C14526 + C14525) * C1479) *
                C2434 +
            (C13961 * C1482 + C13962 * C51094 - C14367 * C1483 -
             C14368 * C51081 + (C14381 + C14382) * C1484 +
             (C14383 + C14384) * C1479) *
                C50769) *
               C50957) *
              C50785 * C1765 +
          ((((C14745 + C14746) * C1483 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C51094 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C1482) +
             (C14747 + C14748) * C51081 - (C14749 + C14750) * C1484 -
             (C14751 + C14752) * C1479) *
                C2434 +
            (C15945 * C1483 -
             ((C11296 + C11295) * C51094 + (C11294 + C11293) * C1482) +
             C15946 * C51081 - (C14753 + C14754) * C1484 -
             (C14755 + C14756) * C1479) *
                C50769) *
               C51063 +
           (((C14750 + C14749) * C1483 -
             ((C14748 + C14747) * C51094 + (C14746 + C14745) * C1482) +
             (C14752 + C14751) * C51081 -
             (C10872 * C3603 + C50983 * C3605 + C10871 * C3243 +
              C51064 * C3247) *
                 C1484 -
             (C10872 * C3606 + C50983 * C3609 + C10871 * C3248 +
              C51064 * C3255) *
                 C1479) *
                C2434 +
            ((C14754 + C14753) * C1483 - (C15947 * C51094 + C15948 * C1482) +
             (C14756 + C14755) * C51081 -
             (C10872 * C3604 + C50983 * C3607 + C10871 * C3244 +
              C51064 * C3249) *
                 C1484 -
             (C10872 * C3608 + C50983 * C3610 + C10871 * C3250 +
              C51064 * C3256) *
                 C1479) *
                C50769) *
               C50957) *
              C50785 * C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1355 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C1350 -
             (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                C2434 +
            ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
             C13959 * C1356 - C13960 * C50835) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
             (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                C2434 +
            (C13961 * C1355 + C13962 * C1350 - C14367 * C1356 -
             C14368 * C50835) *
                C50769) *
               C50957) *
              C50785 * C51095 +
          ((((C14745 + C14746) * C1356 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C1350 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C1355) +
             (C14747 + C14748) * C50835) *
                C2434 +
            (C15945 * C1356 -
             ((C11296 + C11295) * C1350 + (C11294 + C11293) * C1355) +
             C15946 * C50835) *
                C50769) *
               C51063 +
           (((C14750 + C14749) * C1356 -
             ((C14748 + C14747) * C1350 + (C14746 + C14745) * C1355) +
             (C14752 + C14751) * C50835) *
                C2434 +
            ((C14754 + C14753) * C1356 - (C15947 * C1350 + C15948 * C1355) +
             (C14756 + C14755) * C50835) *
                C50769) *
               C50957) *
              C50785 * C51084 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C1355 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C1350 -
             (C15165 + C15166) * C1356 - (C15167 + C15168) * C50835) *
                C2434 +
            ((C11886 + C11887) * C1355 + (C11888 + C11889) * C1350 -
             (C14960 + C14959) * C1356 - (C14962 + C14961) * C50835) *
                C50769) *
               C51063 +
           (((C15166 + C15165) * C1355 + (C15168 + C15167) * C1350 -
             (C10872 * C3722 + C50983 * C3728 + C10871 * C3429 +
              C51064 * C3432) *
                 C1356 -
             (C10872 * C3727 + C50983 * C3734 + C10871 * C3433 +
              C51064 * C3438) *
                 C50835) *
                C2434 +
            ((C14959 + C14960) * C1355 + (C14961 + C14962) * C1350 -
             (C10872 * C3721 + C50983 * C3726 + C10871 * C3430 +
              C51064 * C3434) *
                 C1356 -
             (C10872 * C3725 + C50983 * C3733 + C10871 * C3435 +
              C51064 * C3439) *
                 C50835) *
                C50769) *
               C50957) *
              C50785 * C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C627 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C622 -
             (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
             (C14377 + C14378) * C629 + (C14379 + C14380) * C624) *
                C2434 +
            ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
             C13959 * C628 - C13960 * C623 + C14365 * C629 + C14366 * C624) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
             (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
             (C10871 * C761 + C51064 * C765 + C10872 * C3243 + C50983 * C3247) *
                 C629 +
             (C10871 * C766 + C51064 * C773 + C10872 * C3248 + C50983 * C3255) *
                 C624) *
                C2434 +
            (C13961 * C627 + C13962 * C622 - C14367 * C628 - C14368 * C623 +
             (C14381 + C14382) * C629 + (C14383 + C14384) * C624) *
                C50769) *
               C50957) *
              C51040 +
          (((C13961 * C628 -
             ((C10909 + C10908) * C622 + (C10907 + C10906) * C627) +
             C13962 * C623 - C14367 * C629 - C14368 * C624) *
                C2434 +
            (C13963 * C628 -
             ((C10913 + C10912) * C622 + (C10911 + C10910) * C627) +
             C13964 * C623 - (C11477 + C11476) * C629 -
             (C11479 + C11478) * C624) *
                C50769) *
               C51063 +
           ((C14365 * C628 - (C13960 * C622 + C13959 * C627) + C14366 * C623 -
             (C14382 + C14381) * C629 - (C14384 + C14383) * C624) *
                C2434 +
            ((C11476 + C11477) * C628 - (C11118 * C622 + C11117 * C627) +
             (C11478 + C11479) * C623 -
             (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
                 C629 -
             (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
                 C624) *
                C50769) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C2434 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
               C51063 +
           (((C10871 * C296 + C51064 * C302 + C10872 * C875 + C50983 * C883) *
                 C118 +
             (C10871 * C303 + C51064 * C314 + C10872 * C884 + C50983 * C899) *
                 C50819) *
                C2434 +
            ((C11105 + C11104) * C118 + (C11107 + C11106) * C50819) * C50769) *
               C50957) *
              C112 -
          (((C11118 * C50819 + C11117 * C118) * C50769 +
            ((C11106 + C11107) * C50819 + (C11104 + C11105) * C118) * C2434) *
               C50957 +
           (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C2434) *
               C51063) *
              C113 +
          ((C10930 * C2434 +
            ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
               C51063 +
           (((C11110 + C11109) * C118 + (C11112 + C11111) * C50819) * C2434 +
            ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
               C50957) *
              C114 -
          ((((C10872 * C1635 + C50983 * C1636 + C10871 * C311 + C51064 * C318) *
                 C50819 +
             (C10872 * C1633 + C50983 * C1634 + C10871 * C300 + C51064 * C310) *
                 C118) *
                C50769 +
            ((C11116 + C11115) * C50819 + (C11114 + C11113) * C118) * C2434) *
               C50957 +
           (((C10921 + C10920) * C50819 + (C10919 + C10918) * C118) * C50769 +
            C10931 * C2434) *
               C51063) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C2434 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C51063 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C2434 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C51040 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C2434) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C2434) *
                C51063) *
               C50790) *
              C1005 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C2434 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C51063 +
            (((C12647 + C12648) * C118 + (C12649 + C12650) * C50819) * C2434 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C50790 -
           ((((C12650 + C12649) * C50819 + (C12648 + C12647) * C118) * C50769 +
             ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C2434) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C2434) *
                C51063) *
               C51040) *
              C1006 +
          (((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
               C50983 * C1247) *
                  C118 +
              (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
               C50983 * C1251) *
                  C50819) *
                 C2434 +
             ((C11886 + C11887) * C118 + (C11888 + C11889) * C50819) * C50769) *
                C51063 +
            (((C10871 * C1150 + C51064 * C1154 + C10872 * C3724 +
               C50983 * C3732) *
                  C118 +
              (C10871 * C1155 + C51064 * C1162 + C10872 * C3731 +
               C50983 * C3736) *
                  C50819) *
                 C2434 +
             ((C14959 + C14960) * C118 + (C14961 + C14962) * C50819) * C50769) *
                C50957) *
               C51040 -
           ((((C10872 * C7097 + C50983 * C7098 + C10871 * C1159 +
               C51064 * C1164) *
                  C50819 +
              (C10872 * C7095 + C50983 * C7096 + C10871 * C1152 +
               C51064 * C1158) *
                  C118) *
                 C50769 +
             ((C14962 + C14961) * C50819 + (C14960 + C14959) * C118) * C2434) *
                C50957 +
            (((C11893 + C11892) * C50819 + (C11891 + C11890) * C118) * C50769 +
             ((C11889 + C11888) * C50819 + (C11887 + C11886) * C118) * C2434) *
                C51063) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C757 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C752 -
            (C13965 + C13966) * C758 - (C13967 + C13968) * C753 +
            (C14377 + C14378) * C759 + (C14379 + C14380) * C754 -
            (C14523 + C14524) * C760 - (C14525 + C14526) * C755) *
               C2434 +
           ((C10906 + C10907) * C757 + (C10908 + C10909) * C752 -
            C13959 * C758 - C13960 * C753 + C14365 * C759 + C14366 * C754 -
            (C14382 + C14381) * C760 - (C14384 + C14383) * C755) *
               C50769) *
              C51063 +
          (((C13966 + C13965) * C757 + (C13968 + C13967) * C752 -
            (C14378 + C14377) * C758 - (C14380 + C14379) * C753 +
            (C14524 + C14523) * C759 + (C14526 + C14525) * C754 -
            (C10872 * C3245 + C50983 * C3251 + C10871 * C2949 +
             C51064 * C2952) *
                C760 -
            (C10872 * C3252 + C50983 * C3257 + C10871 * C2953 +
             C51064 * C2958) *
                C755) *
               C2434 +
           (C13961 * C757 + C13962 * C752 - C14367 * C758 - C14368 * C753 +
            (C14381 + C14382) * C759 + (C14383 + C14384) * C754 -
            (C10872 * C3246 + C50983 * C3253 + C10871 * C2950 +
             C51064 * C2954) *
                C760 -
            (C10872 * C3254 + C50983 * C3258 + C10871 * C2955 +
             C51064 * C2959) *
                C755) *
               C50769) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C294 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51047 -
             (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
                C2434 +
            ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
             C13959 * C295 - C13960 * C50835) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
             (C10872 * C876 + C50983 * C885 + C10871 * C630 + C51064 * C635) *
                 C295 -
             (C10872 * C886 + C50983 * C900 + C10871 * C636 + C51064 * C645) *
                 C50835) *
                C2434 +
            (C13961 * C294 + C13962 * C51047 - (C11473 + C11472) * C295 -
             (C11475 + C11474) * C50835) *
                C50769) *
               C50957) *
              C291 +
          (((C13961 * C295 -
             ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
             C13962 * C50835) *
                C2434 +
            (C13963 * C295 -
             ((C10913 + C10912) * C51047 + (C10911 + C10910) * C294) +
             C13964 * C50835) *
                C50769) *
               C51063 +
           (((C11472 + C11473) * C295 - (C13960 * C51047 + C13959 * C294) +
             (C11474 + C11475) * C50835) *
                C2434 +
            ((C11476 + C11477) * C295 - (C11118 * C51047 + C11117 * C294) +
             (C11478 + C11479) * C50835) *
                C50769) *
               C50957) *
              C292 +
          ((C11122 * C2434 +
            ((C10917 + C10916) * C294 + (C10915 + C10914) * C51047 -
             (C11114 + C11113) * C295 - (C11116 + C11115) * C50835) *
                C50769) *
               C51063 +
           ((C13963 * C294 + C13964 * C51047 - (C11477 + C11476) * C295 -
             (C11479 + C11478) * C50835) *
                C2434 +
            ((C11113 + C11114) * C294 + (C11115 + C11116) * C51047 -
             (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                 C295 -
             (C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                 C50835) *
                C50769) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C294 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51047 -
             (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
                C2434 +
            ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
             C13959 * C295 - C13960 * C50835) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
             (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
                C2434 +
            (C13961 * C294 + C13962 * C51047 - C14367 * C295 -
             C14368 * C50835) *
                C50769) *
               C50957) *
              C50785 * C1005 +
          ((((C14745 + C14746) * C295 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C51047 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C294) +
             (C14747 + C14748) * C50835) *
                C2434 +
            ((C12647 + C12648) * C295 -
             ((C11296 + C11295) * C51047 + (C11294 + C11293) * C294) +
             (C12649 + C12650) * C50835) *
                C50769) *
               C51063 +
           (((C14750 + C14749) * C295 -
             ((C14748 + C14747) * C51047 + (C14746 + C14745) * C294) +
             (C14752 + C14751) * C50835) *
                C2434 +
            ((C14754 + C14753) * C295 -
             ((C12650 + C12649) * C51047 + (C12648 + C12647) * C294) +
             (C14756 + C14755) * C50835) *
                C50769) *
               C50957) *
              C50785 * C1006 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C294 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C51047 -
             (C15165 + C15166) * C295 - (C15167 + C15168) * C50835) *
                C2434 +
            ((C11886 + C11887) * C294 + (C11888 + C11889) * C51047 -
             (C14960 + C14959) * C295 - (C14962 + C14961) * C50835) *
                C50769) *
               C51063 +
           (((C15166 + C15165) * C294 + (C15168 + C15167) * C51047 -
             (C10872 * C3722 + C50983 * C3728 + C10871 * C3429 +
              C51064 * C3432) *
                 C295 -
             (C10872 * C3727 + C50983 * C3734 + C10871 * C3433 +
              C51064 * C3438) *
                 C50835) *
                C2434 +
            ((C14959 + C14960) * C294 + (C14961 + C14962) * C51047 -
             (C10872 * C3721 + C50983 * C3726 + C10871 * C3430 +
              C51064 * C3434) *
                 C295 -
             (C10872 * C3725 + C50983 * C3733 + C10871 * C3435 +
              C51064 * C3439) *
                 C50835) *
                C50769) *
               C50957) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C627 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C622 -
             (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
             (C14377 + C14378) * C629 + (C14379 + C14380) * C624) *
                C2434 +
            ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
             C13959 * C628 - C13960 * C623 + C14365 * C629 + C14366 * C624) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
             (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
             (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
                C2434 +
            (C13961 * C627 + C13962 * C622 - C14367 * C628 - C14368 * C623 +
             (C14381 + C14382) * C629 + (C14383 + C14384) * C624) *
                C50769) *
               C50957) *
              C50785 * C51049 +
          ((((C14745 + C14746) * C628 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C622 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C627) +
             (C14747 + C14748) * C623 - (C14749 + C14750) * C629 -
             (C14751 + C14752) * C624) *
                C2434 +
            ((C12647 + C12648) * C628 -
             ((C11296 + C11295) * C622 + (C11294 + C11293) * C627) +
             (C12649 + C12650) * C623 - (C14753 + C14754) * C629 -
             (C14755 + C14756) * C624) *
                C50769) *
               C51063 +
           (((C14750 + C14749) * C628 -
             ((C14748 + C14747) * C622 + (C14746 + C14745) * C627) +
             (C14752 + C14751) * C623 -
             (C10872 * C3603 + C50983 * C3605 + C10871 * C3243 +
              C51064 * C3247) *
                 C629 -
             (C10872 * C3606 + C50983 * C3609 + C10871 * C3248 +
              C51064 * C3255) *
                 C624) *
                C2434 +
            ((C14754 + C14753) * C628 -
             ((C12650 + C12649) * C622 + (C12648 + C12647) * C627) +
             (C14756 + C14755) * C623 -
             (C10872 * C3604 + C50983 * C3607 + C10871 * C3244 +
              C51064 * C3249) *
                 C629 -
             (C10872 * C3608 + C50983 * C3610 + C10871 * C3250 +
              C51064 * C3256) *
                 C624) *
                C50769) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C2434 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C51063 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C2434 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C291 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C2434) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C2434) *
                C51063) *
               C292 +
           ((C10930 * C2434 +
             ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
                C51063 +
            ((C13963 * C118 + C13964 * C50819) * C2434 +
             ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
                C50957) *
               C293) *
              C51049 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C2434 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C51063 +
            (((C12647 + C12648) * C118 + (C12649 + C12650) * C50819) * C2434 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C292 -
           ((((C12650 + C12649) * C50819 + (C12648 + C12647) * C118) * C50769 +
             ((C10872 * C1155 + C50983 * C1162 + C10871 * C884 +
               C51064 * C899) *
                  C50819 +
              (C10872 * C1150 + C50983 * C1154 + C10871 * C875 +
               C51064 * C883) *
                  C118) *
                 C2434) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C2434) *
                C51063) *
               C291 -
           ((((C10872 * C1161 + C50983 * C1165 + C10871 * C896 +
               C51064 * C905) *
                  C50819 +
              (C10872 * C1153 + C50983 * C1160 + C10871 * C881 +
               C51064 * C895) *
                  C118) *
                 C50769 +
             ((C12654 + C12653) * C50819 + (C12652 + C12651) * C118) * C2434) *
                C50957 +
            (((C11304 + C11303) * C50819 + (C11302 + C11301) * C118) * C50769 +
             C11309 * C2434) *
                C51063) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C2434 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
               C51063 +
           (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C2434 +
            (C13961 * C118 + C13962 * C50819) * C50769) *
               C50957) *
              C50785 * C1232 -
          ((((C12650 + C12649) * C50819 + (C12648 + C12647) * C118) * C50769 +
            ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C2434) *
               C50957 +
           (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C2434) *
               C51063) *
              C50785 * C1233 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C2434 +
            ((C11886 + C11887) * C118 + (C11888 + C11889) * C50819) * C50769) *
               C51063 +
           (((C15166 + C15165) * C118 + (C15168 + C15167) * C50819) * C2434 +
            ((C14959 + C14960) * C118 + (C14961 + C14962) * C50819) * C50769) *
               C50957) *
              C50785 * C1234 -
          ((((C10872 * C6500 + C50983 * C6502 + C10871 * C3729 +
              C51064 * C3735) *
                 C50819 +
             (C10872 * C6496 + C50983 * C6499 + C10871 * C3723 +
              C51064 * C3730) *
                 C118) *
                C50769 +
            ((C10872 * C6498 + C50983 * C6501 + C10871 * C3731 +
              C51064 * C3736) *
                 C50819 +
             (C10872 * C6495 + C50983 * C6497 + C10871 * C3724 +
              C51064 * C3732) *
                 C118) *
                C2434) *
               C50957 +
           (((C10872 * C6325 + C50983 * C6329 + C10871 * C1244 +
              C51064 * C1250) *
                 C50819 +
             (C10872 * C6320 + C50983 * C6324 + C10871 * C1238 +
              C51064 * C1245) *
                 C118) *
                C50769 +
            ((C10872 * C6323 + C50983 * C6328 + C10871 * C1246 +
              C51064 * C1251) *
                 C50819 +
             (C10872 * C6319 + C50983 * C6322 + C10871 * C1239 +
              C51064 * C1247) *
                 C118) *
                C2434) *
               C51063) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C2434 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C51063 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C2434 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C51093 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C2434) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C2434) *
                C51063) *
               C51078 +
           ((C10930 * C2434 +
             ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
                C51063 +
            ((C13963 * C118 + C13964 * C50819) * C2434 +
             ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
                C50957) *
               C1354) *
              C1765 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C2434 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C51063 +
            ((C15945 * C118 + C15946 * C50819) * C2434 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C51078 -
           (((C15947 * C50819 + C15948 * C118) * C50769 +
             ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C2434) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C2434) *
                C51063) *
               C51093 -
           ((((C10872 * C1161 + C50983 * C1165 + C10871 * C896 +
               C51064 * C905) *
                  C50819 +
              (C10872 * C1153 + C50983 * C1160 + C10871 * C881 +
               C51064 * C895) *
                  C118) *
                 C50769 +
             ((C12654 + C12653) * C50819 + (C12652 + C12651) * C118) * C2434) *
                C50957 +
            (((C11304 + C11303) * C50819 + (C11302 + C11301) * C118) * C50769 +
             C11309 * C2434) *
                C51063) *
               C1354) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C294 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C51047 -
              (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
                 C2434 +
             ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
              C13959 * C295 - C13960 * C50835) *
                 C50769) *
                C51063 +
            (((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
              (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
                 C2434 +
             (C13961 * C294 + C13962 * C51047 - C14367 * C295 -
              C14368 * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           (((C13961 * C295 -
              ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
              C13962 * C50835) *
                 C2434 +
             (C13963 * C295 -
              ((C10913 + C10912) * C51047 + (C10911 + C10910) * C294) +
              C13964 * C50835) *
                 C50769) *
                C51063 +
            ((C14365 * C295 - (C13960 * C51047 + C13959 * C294) +
              C14366 * C50835) *
                 C2434 +
             ((C11476 + C11477) * C295 - (C11118 * C51047 + C11117 * C294) +
              (C11478 + C11479) * C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C1765 +
          (((((C14745 + C14746) * C295 -
              ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
                C51064 * C488) *
                   C51047 +
               (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
                C51064 * C481) *
                   C294) +
              (C14747 + C14748) * C50835) *
                 C2434 +
             (C15945 * C295 -
              ((C11296 + C11295) * C51047 + (C11294 + C11293) * C294) +
              C15946 * C50835) *
                 C50769) *
                C51063 +
            (((C14750 + C14749) * C295 -
              ((C14748 + C14747) * C51047 + (C14746 + C14745) * C294) +
              (C14752 + C14751) * C50835) *
                 C2434 +
             ((C14754 + C14753) * C295 - (C15947 * C51047 + C15948 * C294) +
              (C14756 + C14755) * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           ((((C11293 + C11294) * C294 + (C11295 + C11296) * C51047 -
              C15948 * C295 - C15947 * C50835) *
                 C2434 +
             ((C11297 + C11298) * C294 + (C11299 + C11300) * C51047 -
              (C12652 + C12651) * C295 - (C12654 + C12653) * C50835) *
                 C50769) *
                C51063 +
            ((C15945 * C294 + C15946 * C51047 - (C14753 + C14754) * C295 -
              (C14755 + C14756) * C50835) *
                 C2434 +
             ((C12651 + C12652) * C294 + (C12653 + C12654) * C51047 -
              (C10872 * C3431 + C50983 * C3437 + C10871 * C880 +
               C51064 * C893) *
                  C295 -
              (C10872 * C3436 + C50983 * C3440 + C10871 * C894 +
               C51064 * C904) *
                  C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C2434 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C51063 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C2434 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C1480 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C2434) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C2434) *
                C51063) *
               C50790) *
              C51095 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C2434 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C51063 +
            ((C15945 * C118 + C15946 * C50819) * C2434 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C50790 -
           (((C15947 * C50819 + C15948 * C118) * C50769 +
             ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C2434) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C2434) *
                C51063) *
               C1480) *
              C51084 +
          (((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
               C50983 * C1247) *
                  C118 +
              (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
               C50983 * C1251) *
                  C50819) *
                 C2434 +
             ((C11886 + C11887) * C118 + (C11888 + C11889) * C50819) * C50769) *
                C51063 +
            (((C15166 + C15165) * C118 + (C15168 + C15167) * C50819) * C2434 +
             ((C14959 + C14960) * C118 + (C14961 + C14962) * C50819) * C50769) *
                C50957) *
               C1480 -
           ((((C10872 * C7097 + C50983 * C7098 + C10871 * C1159 +
               C51064 * C1164) *
                  C50819 +
              (C10872 * C7095 + C50983 * C7096 + C10871 * C1152 +
               C51064 * C1158) *
                  C118) *
                 C50769 +
             ((C14962 + C14961) * C50819 + (C14960 + C14959) * C118) * C2434) *
                C50957 +
            (((C11893 + C11892) * C50819 + (C11891 + C11890) * C118) * C50769 +
             ((C11889 + C11888) * C50819 + (C11887 + C11886) * C118) * C2434) *
                C51063) *
               C50790) *
              C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C2434 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
               C51063 +
           (((C10871 * C296 + C51064 * C302 + C10872 * C875 + C50983 * C883) *
                 C118 +
             (C10871 * C303 + C51064 * C314 + C10872 * C884 + C50983 * C899) *
                 C50819) *
                C2434 +
            ((C11105 + C11104) * C118 + (C11107 + C11106) * C50819) * C50769) *
               C50957) *
              C112 -
          (((C11118 * C50819 + C11117 * C118) * C50769 +
            ((C11106 + C11107) * C50819 + (C11104 + C11105) * C118) * C2434) *
               C50957 +
           (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C2434) *
               C51063) *
              C113 +
          ((C10930 * C2434 +
            ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
               C51063 +
           (((C11110 + C11109) * C118 + (C11112 + C11111) * C50819) * C2434 +
            ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
               C50957) *
              C114 -
          ((((C10872 * C1635 + C50983 * C1636 + C10871 * C311 + C51064 * C318) *
                 C50819 +
             (C10872 * C1633 + C50983 * C1634 + C10871 * C300 + C51064 * C310) *
                 C118) *
                C50769 +
            ((C11116 + C11115) * C50819 + (C11114 + C11113) * C118) * C2434) *
               C50957 +
           (((C10921 + C10920) * C50819 + (C10919 + C10918) * C118) * C50769 +
            C10931 * C2434) *
               C51063) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C627 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C622 -
             (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
             (C14377 + C14378) * C629 + (C14379 + C14380) * C624) *
                C2434 +
            ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
             C13959 * C628 - C13960 * C623 + C14365 * C629 + C14366 * C624) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
             (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
             (C10871 * C761 + C51064 * C765 + C10872 * C3243 + C50983 * C3247) *
                 C629 +
             (C10871 * C766 + C51064 * C773 + C10872 * C3248 + C50983 * C3255) *
                 C624) *
                C2434 +
            (C13961 * C627 + C13962 * C622 - C14367 * C628 - C14368 * C623 +
             (C14381 + C14382) * C629 + (C14383 + C14384) * C624) *
                C50769) *
               C50957) *
              C51040 +
          (((C13961 * C628 -
             ((C10909 + C10908) * C622 + (C10907 + C10906) * C627) +
             C13962 * C623 - C14367 * C629 - C14368 * C624) *
                C2434 +
            (C13963 * C628 -
             ((C10913 + C10912) * C622 + (C10911 + C10910) * C627) +
             C13964 * C623 - (C11477 + C11476) * C629 -
             (C11479 + C11478) * C624) *
                C50769) *
               C51063 +
           ((C14365 * C628 - (C13960 * C622 + C13959 * C627) + C14366 * C623 -
             (C14382 + C14381) * C629 - (C14384 + C14383) * C624) *
                C2434 +
            ((C11476 + C11477) * C628 - (C11118 * C622 + C11117 * C627) +
             (C11478 + C11479) * C623 -
             (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
                 C629 -
             (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
                 C624) *
                C50769) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C294 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51047 -
             (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
                C2434 +
            ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
             C13959 * C295 - C13960 * C50835) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
             (C10872 * C876 + C50983 * C885 + C10871 * C630 + C51064 * C635) *
                 C295 -
             (C10872 * C886 + C50983 * C900 + C10871 * C636 + C51064 * C645) *
                 C50835) *
                C2434 +
            (C13961 * C294 + C13962 * C51047 - (C11473 + C11472) * C295 -
             (C11475 + C11474) * C50835) *
                C50769) *
               C50957) *
              C291 +
          (((C13961 * C295 -
             ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
             C13962 * C50835) *
                C2434 +
            (C13963 * C295 -
             ((C10913 + C10912) * C51047 + (C10911 + C10910) * C294) +
             C13964 * C50835) *
                C50769) *
               C51063 +
           (((C11472 + C11473) * C295 - (C13960 * C51047 + C13959 * C294) +
             (C11474 + C11475) * C50835) *
                C2434 +
            ((C11476 + C11477) * C295 - (C11118 * C51047 + C11117 * C294) +
             (C11478 + C11479) * C50835) *
                C50769) *
               C50957) *
              C292 +
          ((C11122 * C2434 +
            ((C10917 + C10916) * C294 + (C10915 + C10914) * C51047 -
             (C11114 + C11113) * C295 - (C11116 + C11115) * C50835) *
                C50769) *
               C51063 +
           ((C13963 * C294 + C13964 * C51047 - (C11477 + C11476) * C295 -
             (C11479 + C11478) * C50835) *
                C2434 +
            ((C11113 + C11114) * C294 + (C11115 + C11116) * C51047 -
             (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                 C295 -
             (C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                 C50835) *
                C50769) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C757 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C752 -
            (C13965 + C13966) * C758 - (C13967 + C13968) * C753 +
            (C14377 + C14378) * C759 + (C14379 + C14380) * C754 -
            (C14523 + C14524) * C760 - (C14525 + C14526) * C755) *
               C2434 +
           ((C10906 + C10907) * C757 + (C10908 + C10909) * C752 -
            C13959 * C758 - C13960 * C753 + C14365 * C759 + C14366 * C754 -
            (C14382 + C14381) * C760 - (C14384 + C14383) * C755) *
               C50769) *
              C51063 +
          (((C13966 + C13965) * C757 + (C13968 + C13967) * C752 -
            (C14378 + C14377) * C758 - (C14380 + C14379) * C753 +
            (C14524 + C14523) * C759 + (C14526 + C14525) * C754 -
            (C10872 * C3245 + C50983 * C3251 + C10871 * C2949 +
             C51064 * C2952) *
                C760 -
            (C10872 * C3252 + C50983 * C3257 + C10871 * C2953 +
             C51064 * C2958) *
                C755) *
               C2434 +
           (C13961 * C757 + C13962 * C752 - C14367 * C758 - C14368 * C753 +
            (C14381 + C14382) * C759 + (C14383 + C14384) * C754 -
            (C10872 * C3246 + C50983 * C3253 + C10871 * C2950 +
             C51064 * C2954) *
                C760 -
            (C10872 * C3254 + C50983 * C3258 + C10871 * C2955 +
             C51064 * C2959) *
                C755) *
               C50769) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C2434 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C51063 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C2434 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C291 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C2434) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C2434) *
                C51063) *
               C292 +
           ((C10930 * C2434 +
             ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
                C51063 +
            ((C13963 * C118 + C13964 * C50819) * C2434 +
             ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
                C50957) *
               C293) *
              C51049 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C2434 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C51063 +
            (((C12647 + C12648) * C118 + (C12649 + C12650) * C50819) * C2434 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C292 -
           ((((C12650 + C12649) * C50819 + (C12648 + C12647) * C118) * C50769 +
             ((C10872 * C1155 + C50983 * C1162 + C10871 * C884 +
               C51064 * C899) *
                  C50819 +
              (C10872 * C1150 + C50983 * C1154 + C10871 * C875 +
               C51064 * C883) *
                  C118) *
                 C2434) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C2434) *
                C51063) *
               C291 -
           ((((C10872 * C1161 + C50983 * C1165 + C10871 * C896 +
               C51064 * C905) *
                  C50819 +
              (C10872 * C1153 + C50983 * C1160 + C10871 * C881 +
               C51064 * C895) *
                  C118) *
                 C50769 +
             ((C12654 + C12653) * C50819 + (C12652 + C12651) * C118) * C2434) *
                C50957 +
            (((C11304 + C11303) * C50819 + (C11302 + C11301) * C118) * C50769 +
             C11309 * C2434) *
                C51063) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C627 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C622 -
             (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
             (C14377 + C14378) * C629 + (C14379 + C14380) * C624) *
                C2434 +
            ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
             C13959 * C628 - C13960 * C623 + C14365 * C629 + C14366 * C624) *
                C50769) *
               C51063 +
           (((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
             (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
             (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
                C2434 +
            (C13961 * C627 + C13962 * C622 - C14367 * C628 - C14368 * C623 +
             (C14381 + C14382) * C629 + (C14383 + C14384) * C624) *
                C50769) *
               C50957) *
              C50785 * C51049 +
          ((((C14745 + C14746) * C628 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C622 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C627) +
             (C14747 + C14748) * C623 - (C14749 + C14750) * C629 -
             (C14751 + C14752) * C624) *
                C2434 +
            ((C12647 + C12648) * C628 -
             ((C11296 + C11295) * C622 + (C11294 + C11293) * C627) +
             (C12649 + C12650) * C623 - (C14753 + C14754) * C629 -
             (C14755 + C14756) * C624) *
                C50769) *
               C51063 +
           (((C14750 + C14749) * C628 -
             ((C14748 + C14747) * C622 + (C14746 + C14745) * C627) +
             (C14752 + C14751) * C623 -
             (C10872 * C3603 + C50983 * C3605 + C10871 * C3243 +
              C51064 * C3247) *
                 C629 -
             (C10872 * C3606 + C50983 * C3609 + C10871 * C3248 +
              C51064 * C3255) *
                 C624) *
                C2434 +
            ((C14754 + C14753) * C628 -
             ((C12650 + C12649) * C622 + (C12648 + C12647) * C627) +
             (C14756 + C14755) * C623 -
             (C10872 * C3604 + C50983 * C3607 + C10871 * C3244 +
              C51064 * C3249) *
                 C629 -
             (C10872 * C3608 + C50983 * C3610 + C10871 * C3250 +
              C51064 * C3256) *
                 C624) *
                C50769) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C2434 +
            (C1358 + C1359 - C1360 - C1361) * C50769) *
               C2436 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C2434 +
            (C3884 + C3885 - C3886 - C3887) * C50769) *
               C2437 +
           ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C2434 +
            (C3888 + C3889 - C3890 - C3891) * C50769) *
               C2438) *
              C51093 +
          (((C1360 - (C1359 + C1358) + C1361) * C2434 +
            (C1364 - (C1363 + C1362) + C1365) * C50769) *
               C2436 +
           ((C3886 - (C3885 + C3884) + C3887) * C2434 +
            (C3892 - (C3893 + C3894) + C3895) * C50769) *
               C2437 +
           ((C3890 - (C3889 + C3888) + C3891) * C2434 +
            (C3896 - (C3897 + C3898) + C3899) * C50769) *
               C2438) *
              C51078 +
          ((C1378 * C2434 + C1379 * C50769) * C2436 +
           ((C3894 + C3893 - C3892 - C3895) * C2434 +
            (C351 * C1355 + C352 * C1350 - C679 * C1356 - C680 * C50835) *
                C50769) *
               C2437 +
           ((C3898 + C3897 - C3896 - C3899) * C2434 +
            (C679 * C1355 + C680 * C1350 -
             (C117 * C764 + C50919 * C771) * C1356 -
             (C117 * C772 + C50919 * C776) * C50835) *
                C50769) *
               C2438) *
              C1354) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1355 +
            (C117 * C127 + C50919 * C140) * C1350 -
            (C117 * C296 + C50919 * C302) * C1356 -
            (C117 * C303 + C50919 * C314) * C50835) *
               C107 +
           (C1358 + C1359 - C1360 - C1361) * C108 + C1378 * C109 +
           C1379 * C110) *
              C50908 * C51093 +
          ((C1360 - (C1359 + C1358) + C1361) * C107 +
           (C1364 - (C1363 + C1362) + C1365) * C108 +
           (C1368 - (C1367 + C1366) + C1369) * C109 +
           (C1370 - (C1371 + C1372) + C1373) * C110) *
              C50908 * C51078 +
          (C1378 * C107 + C1379 * C108 +
           (C1372 + C1371 - C1370 - C1373) * C109 +
           (C176 * C1355 + C177 * C1350 -
            (C117 * C301 + C50919 * C312) * C1356 -
            (C117 * C313 + C50919 * C319) * C50835) *
               C110) *
              C50908 * C1354) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C1355 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C1350 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C1356 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C50835) *
               C2434 +
           ((C5384 + C5385 + C5386) * C1355 + (C5387 + C5388 + C5389) * C1350 -
            (C5572 + C5573 + C5574) * C1356 -
            (C5575 + C5576 + C5577) * C50835) *
               C50769) *
              C50908 * C51093 +
          (((C5574 + C5573 + C5572) * C1356 -
            ((C5389 + C5388 + C5387) * C1350 +
             (C5386 + C5385 + C5384) * C1355) +
            (C5577 + C5576 + C5575) * C50835) *
               C2434 +
           ((C5578 + C5579 + C5580) * C1356 -
            ((C5390 + C5391 + C5392) * C1350 +
             (C5393 + C5394 + C5395) * C1355) +
            (C5581 + C5582 + C5583) * C50835) *
               C50769) *
              C50908 * C51078 +
          (((C5395 + C5394 + C5393) * C1355 + (C5392 + C5391 + C5390) * C1350 -
            (C5580 + C5579 + C5578) * C1356 -
            (C5583 + C5582 + C5581) * C50835) *
               C2434 +
           ((C5396 + C5397 + C5398) * C1355 + (C5399 + C5400 + C5401) * C1350 -
            (C5346 * C1153 + C5343 * C1160 + C5345 * C881 + C5342 * C895 +
             C5344 * C299 + C5341 * C308) *
                C1356 -
            (C5346 * C1161 + C5343 * C1165 + C5345 * C896 + C5342 * C905 +
             C5344 * C309 + C5341 * C317) *
                C50835) *
               C50769) *
              C50908 * C1354) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1482 +
             (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
             C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                C2434 +
            (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C50769) *
               C2436 +
           ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
             C2980 * C1484 + C2981 * C1479) *
                C2434 +
            (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C50769) *
               C2437 +
           ((C2628 * C1482 + C2629 * C51094 - C2980 * C1483 - C2981 * C51081 +
             C3096 * C1484 + C3097 * C1479) *
                C2434 +
            (C4052 + C4053 - C4054 - C4055 + C4056 + C4057) * C50769) *
               C2438) *
              C1480 +
          (((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C2434 +
            (C1494 - (C1493 + C1492) + C1495 - C1496 - C1497) * C50769) *
               C2436 +
           ((C4048 - (C4047 + C4046) + C4049 - C4050 - C4051) * C2434 +
            (C677 * C1483 - (C349 * C51094 + C348 * C1482) + C678 * C51081 -
             C2632 * C1484 - C2633 * C1479) *
                C50769) *
               C2437 +
           ((C4054 - (C4053 + C4052) + C4055 - C4056 - C4057) * C2434 +
            (C2632 * C1483 - (C678 * C51094 + C677 * C1482) + C2633 * C51081 -
             (C117 * C2951 + C50919 * C2956) * C1484 -
             (C117 * C2957 + C50919 * C2960) * C1479) *
                C50769) *
               C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1482 +
            (C117 * C127 + C50919 * C140) * C51094 -
            (C117 * C296 + C50919 * C302) * C1483 -
            (C117 * C303 + C50919 * C314) * C51081 +
            (C117 * C630 + C50919 * C635) * C1484 +
            (C117 * C636 + C50919 * C645) * C1479) *
               C107 +
           (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C108 +
           (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C109 +
           (C1498 + C1499 - C1500 - C1501 + C1502 + C1503) * C110) *
              C50908 * C1480 +
          ((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C107 +
           (C1494 - (C1493 + C1492) + C1495 - C1496 - C1497) * C108 +
           (C1500 - (C1499 + C1498) + C1501 - C1502 - C1503) * C109 +
           (C353 * C1483 - (C174 * C51094 + C175 * C1482) + C354 * C51081 -
            (C117 * C634 + C50919 * C643) * C1484 -
            (C117 * C644 + C50919 * C649) * C1479) *
               C110) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C1482 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51094 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C1483 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C51081 +
            (C5344 * C630 + C5341 * C635 + C5345 * C876 + C5342 * C885 +
             C5346 * C3429 + C5343 * C3432) *
                C1484 +
            (C5344 * C636 + C5341 * C645 + C5345 * C886 + C5342 * C900 +
             C5346 * C3433 + C5343 * C3438) *
                C1479) *
               C2434 +
           ((C5384 + C5385 + C5386) * C1482 + (C5387 + C5388 + C5389) * C51094 -
            (C5572 + C5573 + C5574) * C1483 - (C5575 + C5576 + C5577) * C51081 +
            (C5924 + C5925 + C5926) * C1484 + (C5927 + C5928 + C5929) * C1479) *
               C50769) *
              C50908 * C1480 +
          (((C5574 + C5573 + C5572) * C1483 -
            ((C5389 + C5388 + C5387) * C51094 +
             (C5386 + C5385 + C5384) * C1482) +
            (C5577 + C5576 + C5575) * C51081 - (C5926 + C5925 + C5924) * C1484 -
            (C5929 + C5928 + C5927) * C1479) *
               C2434 +
           ((C5578 + C5579 + C5580) * C1483 -
            ((C5390 + C5391 + C5392) * C51094 +
             (C5393 + C5394 + C5395) * C1482) +
            (C5581 + C5582 + C5583) * C51081 -
            (C5346 * C3431 + C5343 * C3437 + C5345 * C880 + C5342 * C893 +
             C5344 * C632 + C5341 * C639) *
                C1484 -
            (C5346 * C3436 + C5343 * C3440 + C5345 * C894 + C5342 * C904 +
             C5344 * C640 + C5341 * C647) *
                C1479) *
               C50769) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C2434 +
             (C1358 + C1359 - C1360 - C1361) * C50769) *
                C2436 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C2434 +
             (C3884 + C3885 - C3886 - C3887) * C50769) *
                C2437 +
            ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                 C2434 +
             (C3888 + C3889 - C3890 - C3891) * C50769) *
                C2438) *
               C1480 +
           (((C1360 - (C1359 + C1358) + C1361) * C2434 +
             (C1364 - (C1363 + C1362) + C1365) * C50769) *
                C2436 +
            ((C3886 - (C3885 + C3884) + C3887) * C2434 +
             (C3892 - (C3893 + C3894) + C3895) * C50769) *
                C2437 +
            ((C3890 - (C3889 + C3888) + C3891) * C2434 +
             (C3896 - (C3897 + C3898) + C3899) * C50769) *
                C2438) *
               C50790) *
              C51049 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C2434 +
             (C1662 - (C1640 + C1641) + C1663) * C50769) *
                C2436 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C2434 +
             (C4256 - (C4257 + C4258) + C4259) * C50769) *
                C2437 +
            ((C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) +
              C3281 * C50835) *
                 C2434 +
             (C4260 - (C4261 + C4262) + C4263) * C50769) *
                C2438) *
               C1480 +
           (((C1641 + C1640 - C1662 - C1663) * C2434 +
             (C1647 + C1646 - C1664 - C1665) * C50769) *
                C2436 +
            ((C4258 + C4257 - C4256 - C4259) * C2434 +
             (C1658 * C1355 + C1659 * C1350 - C2798 * C1356 - C2799 * C50835) *
                 C50769) *
                C2437 +
            ((C4262 + C4261 - C4260 - C4263) * C2434 +
             (C2798 * C1355 + C2799 * C1350 -
              (C117 * C4251 + C50919 * C4252) * C1356 -
              (C117 * C4253 + C50919 * C4254) * C50835) *
                 C50769) *
                C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 -
             (C117 * C296 + C50919 * C302) * C1356 -
             (C117 * C303 + C50919 * C314) * C50835) *
                C107 +
            (C1358 + C1359 - C1360 - C1361) * C108 + C1378 * C109 +
            C1379 * C110) *
               C50908 * C1480 +
           ((C1360 - (C1359 + C1358) + C1361) * C107 +
            (C1364 - (C1363 + C1362) + C1365) * C108 +
            (C1368 - (C1367 + C1366) + C1369) * C109 +
            (C1370 - (C1371 + C1372) + C1373) * C110) *
               C50908 * C50790) *
              C51049 +
          ((((C117 * C875 + C50919 * C883) * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             (C117 * C884 + C50919 * C899) * C50835) *
                C107 +
            (C1662 - (C1640 + C1641) + C1663) * C108 +
            (C1664 - (C1646 + C1647) + C1665) * C109 +
            (C1666 - (C1652 + C1653) + C1667) * C110) *
               C50908 * C1480 +
           ((C1641 + C1640 - C1662 - C1663) * C107 +
            (C1647 + C1646 - C1664 - C1665) * C108 +
            (C1653 + C1652 - C1666 - C1667) * C109 +
            (C513 * C1355 + C514 * C1350 -
             (C117 * C1633 + C50919 * C1634) * C1356 -
             (C117 * C1635 + C50919 * C1636) * C50835) *
                C110) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C1355 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C1350 -
             (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
              C5344 * C296 + C5341 * C302) *
                 C1356 -
             (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
              C5344 * C303 + C5341 * C314) *
                 C50835) *
                C2434 +
            ((C5384 + C5385 + C5386) * C1355 + (C5387 + C5388 + C5389) * C1350 -
             (C5572 + C5573 + C5574) * C1356 -
             (C5575 + C5576 + C5577) * C50835) *
                C50769) *
               C50908 * C1480 +
           (((C5574 + C5573 + C5572) * C1356 -
             ((C5389 + C5388 + C5387) * C1350 +
              (C5386 + C5385 + C5384) * C1355) +
             (C5577 + C5576 + C5575) * C50835) *
                C2434 +
            ((C5578 + C5579 + C5580) * C1356 -
             ((C5390 + C5391 + C5392) * C1350 +
              (C5393 + C5394 + C5395) * C1355) +
             (C5581 + C5582 + C5583) * C50835) *
                C50769) *
               C50908 * C50790) *
              C51049 +
          ((((C5344 * C875 + C5341 * C883 + C5345 * C1150 + C5342 * C1154 +
              C5346 * C3724 + C5343 * C3732) *
                 C1356 -
             ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
               C5344 * C480 + C5341 * C488) *
                  C1350 +
              (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
               C5344 * C470 + C5341 * C481) *
                  C1355) +
             (C5344 * C884 + C5341 * C899 + C5345 * C1155 + C5342 * C1162 +
              C5346 * C3731 + C5343 * C3736) *
                 C50835) *
                C2434 +
            ((C7112 + C7113 + C7114) * C1356 -
             ((C5759 + C5758 + C5757) * C1350 +
              (C5756 + C5755 + C5754) * C1355) +
             (C7115 + C7116 + C7117) * C50835) *
                C50769) *
               C50908 * C1480 +
           (((C5754 + C5755 + C5756) * C1355 + (C5757 + C5758 + C5759) * C1350 -
             (C7114 + C7113 + C7112) * C1356 -
             (C7117 + C7116 + C7115) * C50835) *
                C2434 +
            ((C5760 + C5761 + C5762) * C1355 + (C5763 + C5764 + C5765) * C1350 -
             (C5346 * C7095 + C5343 * C7096 + C5345 * C1152 + C5342 * C1158 +
              C5344 * C879 + C5341 * C891) *
                 C1356 -
             (C5346 * C7097 + C5343 * C7098 + C5345 * C1159 + C5342 * C1164 +
              C5344 * C892 + C5341 * C903) *
                 C50835) *
                C50769) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C2434 +
             (C1358 + C1359 - C1360 - C1361) * C50769) *
                C2436 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C2434 +
             (C3884 + C3885 - C3886 - C3887) * C50769) *
                C2437 +
            ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                 C2434 +
             (C3888 + C3889 - C3890 - C3891) * C50769) *
                C2438) *
               C51040 +
           (((C1360 - (C1359 + C1358) + C1361) * C2434 +
             (C1364 - (C1363 + C1362) + C1365) * C50769) *
                C2436 +
            ((C3886 - (C3885 + C3884) + C3887) * C2434 +
             (C3892 - (C3893 + C3894) + C3895) * C50769) *
                C2437 +
            ((C3890 - (C3889 + C3888) + C3891) * C2434 +
             (C3896 - (C3897 + C3898) + C3899) * C50769) *
                C2438) *
               C50790) *
              C1765 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C2434 +
             (C1662 - (C1640 + C1641) + C1663) * C50769) *
                C2436 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C2434 +
             (C4256 - (C4257 + C4258) + C4259) * C50769) *
                C2437 +
            ((C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) +
              C3281 * C50835) *
                 C2434 +
             (C4260 - (C4261 + C4262) + C4263) * C50769) *
                C2438) *
               C51040 +
           (((C1641 + C1640 - C1662 - C1663) * C2434 +
             (C1647 + C1646 - C1664 - C1665) * C50769) *
                C2436 +
            ((C4258 + C4257 - C4256 - C4259) * C2434 +
             (C1658 * C1355 + C1659 * C1350 - C2798 * C1356 - C2799 * C50835) *
                 C50769) *
                C2437 +
            ((C4262 + C4261 - C4260 - C4263) * C2434 +
             (C2798 * C1355 + C2799 * C1350 -
              (C117 * C4251 + C50919 * C4252) * C1356 -
              (C117 * C4253 + C50919 * C4254) * C50835) *
                 C50769) *
                C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 -
             (C117 * C296 + C50919 * C302) * C1356 -
             (C117 * C303 + C50919 * C314) * C50835) *
                C107 +
            (C1358 + C1359 - C1360 - C1361) * C108 + C1378 * C109 +
            C1379 * C110) *
               C50908 * C51040 +
           ((C1360 - (C1359 + C1358) + C1361) * C107 +
            (C1364 - (C1363 + C1362) + C1365) * C108 +
            (C1368 - (C1367 + C1366) + C1369) * C109 +
            (C1370 - (C1371 + C1372) + C1373) * C110) *
               C50908 * C50790) *
              C1765 +
          ((((C117 * C875 + C50919 * C883) * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             (C117 * C884 + C50919 * C899) * C50835) *
                C107 +
            (C1662 - (C1640 + C1641) + C1663) * C108 +
            (C1664 - (C1646 + C1647) + C1665) * C109 +
            (C1666 - (C1652 + C1653) + C1667) * C110) *
               C50908 * C51040 +
           ((C1641 + C1640 - C1662 - C1663) * C107 +
            (C1647 + C1646 - C1664 - C1665) * C108 +
            (C1653 + C1652 - C1666 - C1667) * C109 +
            (C513 * C1355 + C514 * C1350 -
             (C117 * C1633 + C50919 * C1634) * C1356 -
             (C117 * C1635 + C50919 * C1636) * C50835) *
                C110) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C1355 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C1350 -
             (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
              C5344 * C296 + C5341 * C302) *
                 C1356 -
             (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
              C5344 * C303 + C5341 * C314) *
                 C50835) *
                C2434 +
            ((C5384 + C5385 + C5386) * C1355 + (C5387 + C5388 + C5389) * C1350 -
             (C5572 + C5573 + C5574) * C1356 -
             (C5575 + C5576 + C5577) * C50835) *
                C50769) *
               C50908 * C51040 +
           (((C5574 + C5573 + C5572) * C1356 -
             ((C5389 + C5388 + C5387) * C1350 +
              (C5386 + C5385 + C5384) * C1355) +
             (C5577 + C5576 + C5575) * C50835) *
                C2434 +
            ((C5578 + C5579 + C5580) * C1356 -
             ((C5390 + C5391 + C5392) * C1350 +
              (C5393 + C5394 + C5395) * C1355) +
             (C5581 + C5582 + C5583) * C50835) *
                C50769) *
               C50908 * C50790) *
              C1765 +
          ((((C5344 * C875 + C5341 * C883 + C5345 * C1150 + C5342 * C1154 +
              C5346 * C3724 + C5343 * C3732) *
                 C1356 -
             ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
               C5344 * C480 + C5341 * C488) *
                  C1350 +
              (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
               C5344 * C470 + C5341 * C481) *
                  C1355) +
             (C5344 * C884 + C5341 * C899 + C5345 * C1155 + C5342 * C1162 +
              C5346 * C3731 + C5343 * C3736) *
                 C50835) *
                C2434 +
            ((C7112 + C7113 + C7114) * C1356 -
             ((C5759 + C5758 + C5757) * C1350 +
              (C5756 + C5755 + C5754) * C1355) +
             (C7115 + C7116 + C7117) * C50835) *
                C50769) *
               C50908 * C51040 +
           (((C5754 + C5755 + C5756) * C1355 + (C5757 + C5758 + C5759) * C1350 -
             (C7114 + C7113 + C7112) * C1356 -
             (C7117 + C7116 + C7115) * C50835) *
                C2434 +
            ((C5760 + C5761 + C5762) * C1355 + (C5763 + C5764 + C5765) * C1350 -
             (C5346 * C7095 + C5343 * C7096 + C5345 * C1152 + C5342 * C1158 +
              C5344 * C879 + C5341 * C891) *
                 C1356 -
             (C5346 * C7097 + C5343 * C7098 + C5345 * C1159 + C5342 * C1164 +
              C5344 * C892 + C5341 * C903) *
                 C50835) *
                C50769) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1482 +
             (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
             C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                C2434 +
            (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C50769) *
               C2436 +
           ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
             C2980 * C1484 + C2981 * C1479) *
                C2434 +
            (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C50769) *
               C2437 +
           ((C2628 * C1482 + C2629 * C51094 - C2980 * C1483 - C2981 * C51081 +
             C3096 * C1484 + C3097 * C1479) *
                C2434 +
            (C4052 + C4053 - C4054 - C4055 + C4056 + C4057) * C50769) *
               C2438) *
              C50785 * C1765 +
          (((C3276 * C1483 -
             ((C117 * C480 + C50919 * C488) * C51094 +
              (C117 * C470 + C50919 * C481) * C1482) +
             C3277 * C51081 - C3278 * C1484 - C3279 * C1479) *
                C2434 +
            (C1656 * C1483 - (C508 * C51094 + C507 * C1482) + C1657 * C51081 -
             C2796 * C1484 - C2797 * C1479) *
                C50769) *
               C2436 +
           ((C3278 * C1483 - (C3277 * C51094 + C3276 * C1482) + C3279 * C51081 -
             C3280 * C1484 - C3281 * C1479) *
                C2434 +
            (C2796 * C1483 - (C1657 * C51094 + C1656 * C1482) + C2797 * C51081 -
             C3282 * C1484 - C3283 * C1479) *
                C50769) *
               C2437 +
           ((C3280 * C1483 - (C3279 * C51094 + C3278 * C1482) + C3281 * C51081 -
             (C117 * C3245 + C50919 * C3251) * C1484 -
             (C117 * C3252 + C50919 * C3257) * C1479) *
                C2434 +
            (C3282 * C1483 - (C2797 * C51094 + C2796 * C1482) + C3283 * C51081 -
             (C117 * C3246 + C50919 * C3253) * C1484 -
             (C117 * C3254 + C50919 * C3258) * C1479) *
                C50769) *
               C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1482 +
            (C117 * C127 + C50919 * C140) * C51094 -
            (C117 * C296 + C50919 * C302) * C1483 -
            (C117 * C303 + C50919 * C314) * C51081 +
            (C117 * C630 + C50919 * C635) * C1484 +
            (C117 * C636 + C50919 * C645) * C1479) *
               C107 +
           (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C108 +
           (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C109 +
           (C1498 + C1499 - C1500 - C1501 + C1502 + C1503) * C110) *
              C50908 * C50785 * C1765 +
          (((C117 * C875 + C50919 * C883) * C1483 -
            ((C117 * C480 + C50919 * C488) * C51094 +
             (C117 * C470 + C50919 * C481) * C1482) +
            (C117 * C884 + C50919 * C899) * C51081 -
            (C117 * C876 + C50919 * C885) * C1484 -
            (C117 * C886 + C50919 * C900) * C1479) *
               C107 +
           (C1656 * C1483 - (C508 * C51094 + C507 * C1482) + C1657 * C51081 -
            (C117 * C878 + C50919 * C889) * C1484 -
            (C117 * C890 + C50919 * C902) * C1479) *
               C108 +
           (C1658 * C1483 - (C510 * C51094 + C509 * C1482) + C1659 * C51081 -
            (C117 * C880 + C50919 * C893) * C1484 -
            (C117 * C894 + C50919 * C904) * C1479) *
               C109 +
           (C1660 * C1483 - (C512 * C51094 + C511 * C1482) + C1661 * C51081 -
            (C117 * C882 + C50919 * C897) * C1484 -
            (C117 * C898 + C50919 * C906) * C1479) *
               C110) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C1482 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51094 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C1483 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C51081 +
            (C5344 * C630 + C5341 * C635 + C5345 * C876 + C5342 * C885 +
             C5346 * C3429 + C5343 * C3432) *
                C1484 +
            (C5344 * C636 + C5341 * C645 + C5345 * C886 + C5342 * C900 +
             C5346 * C3433 + C5343 * C3438) *
                C1479) *
               C2434 +
           ((C5384 + C5385 + C5386) * C1482 + (C5387 + C5388 + C5389) * C51094 -
            (C5572 + C5573 + C5574) * C1483 - (C5575 + C5576 + C5577) * C51081 +
            (C5924 + C5925 + C5926) * C1484 + (C5927 + C5928 + C5929) * C1479) *
               C50769) *
              C50908 * C50785 * C1765 +
          (((C5344 * C875 + C5341 * C883 + C5345 * C1150 + C5342 * C1154 +
             C5346 * C3724 + C5343 * C3732) *
                C1483 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C51094 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C1482) +
            (C5344 * C884 + C5341 * C899 + C5345 * C1155 + C5342 * C1162 +
             C5346 * C3731 + C5343 * C3736) *
                C51081 -
            (C5346 * C3722 + C5343 * C3728 + C5345 * C3429 + C5342 * C3432 +
             C5344 * C876 + C5341 * C885) *
                C1484 -
            (C5346 * C3727 + C5343 * C3734 + C5345 * C3433 + C5342 * C3438 +
             C5344 * C886 + C5341 * C900) *
                C1479) *
               C2434 +
           ((C7112 + C7113 + C7114) * C1483 -
            ((C5759 + C5758 + C5757) * C51094 +
             (C5756 + C5755 + C5754) * C1482) +
            (C7115 + C7116 + C7117) * C51081 -
            (C5346 * C3721 + C5343 * C3726 + C5345 * C3430 + C5342 * C3434 +
             C5344 * C878 + C5341 * C889) *
                C1484 -
            (C5346 * C3725 + C5343 * C3733 + C5345 * C3435 + C5342 * C3439 +
             C5344 * C890 + C5341 * C902) *
                C1479) *
               C50769) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C2434 +
            (C1358 + C1359 - C1360 - C1361) * C50769) *
               C2436 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C2434 +
            (C3884 + C3885 - C3886 - C3887) * C50769) *
               C2437 +
           ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C2434 +
            (C3888 + C3889 - C3890 - C3891) * C50769) *
               C2438) *
              C50785 * C51095 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C2434 +
            (C1662 - (C1640 + C1641) + C1663) * C50769) *
               C2436 +
           ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C2434 +
            (C4256 - (C4257 + C4258) + C4259) * C50769) *
               C2437 +
           ((C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) + C3281 * C50835) *
                C2434 +
            (C4260 - (C4261 + C4262) + C4263) * C50769) *
               C2438) *
              C50785 * C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C1355 +
             (C117 * C1014 + C50919 * C1023) * C1350 - C3620 * C1356 -
             C3621 * C50835) *
                C2434 +
            (C1041 * C1355 + C1042 * C1350 - C3450 * C1356 - C3451 * C50835) *
                C50769) *
               C2436 +
           ((C3620 * C1355 + C3621 * C1350 - C3622 * C1356 - C3623 * C50835) *
                C2434 +
            (C3450 * C1355 + C3451 * C1350 - C3452 * C1356 - C3453 * C50835) *
                C50769) *
               C2437 +
           ((C3622 * C1355 + C3623 * C1350 -
             (C117 * C3603 + C50919 * C3605) * C1356 -
             (C117 * C3606 + C50919 * C3609) * C50835) *
                C2434 +
            (C3452 * C1355 + C3453 * C1350 -
             (C117 * C3604 + C50919 * C3607) * C1356 -
             (C117 * C3608 + C50919 * C3610) * C50835) *
                C50769) *
               C2438) *
              C50785 * C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1355 +
            (C117 * C127 + C50919 * C140) * C1350 -
            (C117 * C296 + C50919 * C302) * C1356 -
            (C117 * C303 + C50919 * C314) * C50835) *
               C107 +
           (C1358 + C1359 - C1360 - C1361) * C108 + C1378 * C109 +
           C1379 * C110) *
              C50908 * C50785 * C51095 +
          (((C117 * C875 + C50919 * C883) * C1356 -
            ((C117 * C480 + C50919 * C488) * C1350 +
             (C117 * C470 + C50919 * C481) * C1355) +
            (C117 * C884 + C50919 * C899) * C50835) *
               C107 +
           (C1662 - (C1640 + C1641) + C1663) * C108 +
           (C1664 - (C1646 + C1647) + C1665) * C109 +
           (C1666 - (C1652 + C1653) + C1667) * C110) *
              C50908 * C50785 * C51084 +
          (((C117 * C1008 + C50919 * C1013) * C1355 +
            (C117 * C1014 + C50919 * C1023) * C1350 -
            (C117 * C1150 + C50919 * C1154) * C1356 -
            (C117 * C1155 + C50919 * C1162) * C50835) *
               C107 +
           (C1041 * C1355 + C1042 * C1350 -
            (C117 * C1151 + C50919 * C1156) * C1356 -
            (C117 * C1157 + C50919 * C1163) * C50835) *
               C108 +
           (C1043 * C1355 + C1044 * C1350 -
            (C117 * C1152 + C50919 * C1158) * C1356 -
            (C117 * C1159 + C50919 * C1164) * C50835) *
               C109 +
           (C1045 * C1355 + C1046 * C1350 -
            (C117 * C1153 + C50919 * C1160) * C1356 -
            (C117 * C1161 + C50919 * C1165) * C50835) *
               C110) *
              C50908 * C50785 * C2009)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C1355 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C1350 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C1356 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C50835) *
               C2434 +
           ((C5384 + C5385 + C5386) * C1355 + (C5387 + C5388 + C5389) * C1350 -
            (C5572 + C5573 + C5574) * C1356 -
            (C5575 + C5576 + C5577) * C50835) *
               C50769) *
              C50908 * C50785 * C51095 +
          (((C5344 * C875 + C5341 * C883 + C5345 * C1150 + C5342 * C1154 +
             C5346 * C3724 + C5343 * C3732) *
                C1356 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C1350 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C1355) +
            (C5344 * C884 + C5341 * C899 + C5345 * C1155 + C5342 * C1162 +
             C5346 * C3731 + C5343 * C3736) *
                C50835) *
               C2434 +
           ((C7112 + C7113 + C7114) * C1356 -
            ((C5759 + C5758 + C5757) * C1350 +
             (C5756 + C5755 + C5754) * C1355) +
            (C7115 + C7116 + C7117) * C50835) *
               C50769) *
              C50908 * C50785 * C51084 +
          (((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
             C5346 * C6319 + C5343 * C6322) *
                C1355 +
            (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
             C5346 * C6323 + C5343 * C6328) *
                C1350 -
            (C5346 * C6495 + C5343 * C6497 + C5345 * C3724 + C5342 * C3732 +
             C5344 * C1150 + C5341 * C1154) *
                C1356 -
            (C5346 * C6498 + C5343 * C6501 + C5345 * C3731 + C5342 * C3736 +
             C5344 * C1155 + C5341 * C1162) *
                C50835) *
               C2434 +
           ((C6344 + C6345 + C6346) * C1355 + (C6347 + C6348 + C6349) * C1350 -
            (C5346 * C6496 + C5343 * C6499 + C5345 * C3723 + C5342 * C3730 +
             C5344 * C1151 + C5341 * C1156) *
                C1356 -
            (C5346 * C6500 + C5343 * C6502 + C5345 * C3729 + C5342 * C3735 +
             C5344 * C1157 + C5341 * C1163) *
                C50835) *
               C50769) *
              C50908 * C50785 * C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50919 * C126) * C118 +
                (C117 * C127 + C50919 * C140) * C50819) *
                   C107 +
               (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                  C50908 * C112 -
              (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
               (C179 + C178) * C107) *
                  C50908 * C113 +
              (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
               (C186 + C187) * C110) *
                  C50908 * C114 -
              (((C117 * C138 + C50919 * C146) * C50819 +
                (C117 * C125 + C50919 * C139) * C118) *
                   C110 +
               (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
                  C50908 * C115) *
             C50849 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50919 * C126) * C627 +
                (C117 * C127 + C50919 * C140) * C622 -
                (C117 * C296 + C50919 * C302) * C628 -
                (C117 * C303 + C50919 * C314) * C623 +
                (C117 * C630 + C50919 * C635) * C629 +
                (C117 * C636 + C50919 * C645) * C624) *
                   C107 +
               (C651 + C652 - C653 - C654 + C681 + C682) * C108 +
               (C659 + C660 - C661 - C662 + C683 + C684) * C109 +
               (C667 + C668 - C669 - C670 + C685 + C686) * C110) *
                  C50908 * C51040 +
              ((C653 - (C652 + C651) + C654 - C681 - C682) * C107 +
               (C661 - (C660 + C659) + C662 - C683 - C684) * C108 +
               (C669 - (C668 + C667) + C670 - C685 - C686) * C109 +
               (C353 * C628 - (C174 * C622 + C175 * C627) + C354 * C623 -
                (C117 * C634 + C50919 * C643) * C629 -
                (C117 * C644 + C50919 * C649) * C624) *
                   C110) *
                  C50908 * C50790) *
             C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50908 * C51040 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50908 * C50790) *
              C1005 +
          (((C515 + C516) * C107 + (C517 + C518) * C108 + (C519 + C520) * C109 +
            (C521 + C522) * C110) *
               C50908 * C50790 -
           (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C107) *
               C50908 * C51040) *
              C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C107 +
            (C1047 + C1048) * C108 + (C1049 + C1050) * C109 +
            (C1051 + C1052) * C110) *
               C50908 * C51040 -
           (((C117 * C1021 + C50919 * C1027) * C50819 +
             (C117 * C1012 + C50919 * C1022) * C118) *
                C110 +
            (C1052 + C1051) * C109 + (C1050 + C1049) * C108 +
            (C1048 + C1047) * C107) *
               C50908 * C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C2434 +
            (C178 + C179) * C50769) *
               C2436 +
           (((C117 * C296 + C50919 * C302) * C118 +
             (C117 * C303 + C50919 * C314) * C50819) *
                C2434 +
            (C2440 + C2441) * C50769) *
               C2437 +
           (((C117 * C630 + C50919 * C635) * C118 +
             (C117 * C636 + C50919 * C645) * C50819) *
                C2434 +
            (C2442 + C2443) * C50769) *
               C2438) *
              C112 -
          (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
           ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
           ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
              C113 +
          ((C188 * C2434 + C189 * C50769) * C2436 +
           ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
           ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
              C114 -
          ((((C117 * C644 + C50919 * C649) * C50819 +
             (C117 * C634 + C50919 * C643) * C118) *
                C50769 +
            (C2451 + C2450) * C2434) *
               C2438 +
           ((C354 * C50819 + C353 * C118) * C50769 + (C2449 + C2448) * C2434) *
               C2437 +
           (C190 * C50769 + C191 * C2434) * C2436) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C2434 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C2436 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C2434 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C2437 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             (C117 * C2949 + C50919 * C2952) * C629 +
             (C117 * C2953 + C50919 * C2958) * C624) *
                C2434 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C2438) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C2434 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C50769) *
               C2436 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C2434 +
            (C677 * C628 - (C349 * C622 + C348 * C627) + C678 * C623 -
             C2632 * C629 - C2633 * C624) *
                C50769) *
               C2437 +
           ((C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C2434 +
            (C2632 * C628 - (C678 * C622 + C677 * C627) + C2633 * C623 -
             (C117 * C2951 + C50919 * C2956) * C629 -
             (C117 * C2957 + C50919 * C2960) * C624) *
                C50769) *
               C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C51040 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C50790) *
              C1005 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C50790 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C51040) *
              C1006 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C2434 +
             (C1047 + C1048) * C50769) *
                C2436 +
            (((C117 * C1150 + C50919 * C1154) * C118 +
              (C117 * C1155 + C50919 * C1162) * C50819) *
                 C2434 +
             (C3454 + C3455) * C50769) *
                C2437 +
            (((C117 * C3429 + C50919 * C3432) * C118 +
              (C117 * C3433 + C50919 * C3438) * C50819) *
                 C2434 +
             (C3456 + C3457) * C50769) *
                C2438) *
               C51040 -
           ((((C117 * C3436 + C50919 * C3440) * C50819 +
              (C117 * C3431 + C50919 * C3437) * C118) *
                 C50769 +
             (C3457 + C3456) * C2434) *
                C2438 +
            (((C117 * C1159 + C50919 * C1164) * C50819 +
              (C117 * C1152 + C50919 * C1158) * C118) *
                 C50769 +
             (C3455 + C3454) * C2434) *
                C2437 +
            ((C1050 + C1049) * C50769 + (C1048 + C1047) * C2434) * C2436) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C118 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C50819) *
               C2434 +
           ((C5384 + C5385 + C5386) * C118 + (C5387 + C5388 + C5389) * C50819) *
               C50769) *
              C50908 * C112 -
          (((C5390 + C5391 + C5392) * C50819 + (C5393 + C5394 + C5395) * C118) *
               C50769 +
           ((C5389 + C5388 + C5387) * C50819 + (C5386 + C5385 + C5384) * C118) *
               C2434) *
              C50908 * C113 +
          (((C5395 + C5394 + C5393) * C118 + (C5392 + C5391 + C5390) * C50819) *
               C2434 +
           ((C5396 + C5397 + C5398) * C118 + (C5399 + C5400 + C5401) * C50819) *
               C50769) *
              C50908 * C114 -
          (((C5346 * C1021 + C5343 * C1027 + C5345 * C479 + C5342 * C487 +
             C5344 * C134 + C5341 * C144) *
                C50819 +
            (C5346 * C1012 + C5343 * C1022 + C5345 * C469 + C5342 * C478 +
             C5344 * C123 + C5341 * C135) *
                C118) *
               C50769 +
           ((C5401 + C5400 + C5399) * C50819 + (C5398 + C5397 + C5396) * C118) *
               C2434) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C627 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C622 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C628 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C623 +
            (C5344 * C630 + C5341 * C635 + C5345 * C876 + C5342 * C885 +
             C5346 * C3429 + C5343 * C3432) *
                C629 +
            (C5344 * C636 + C5341 * C645 + C5345 * C886 + C5342 * C900 +
             C5346 * C3433 + C5343 * C3438) *
                C624) *
               C2434 +
           ((C5384 + C5385 + C5386) * C627 + (C5387 + C5388 + C5389) * C622 -
            (C5572 + C5573 + C5574) * C628 - (C5575 + C5576 + C5577) * C623 +
            (C5924 + C5925 + C5926) * C629 + (C5927 + C5928 + C5929) * C624) *
               C50769) *
              C50908 * C51040 +
          (((C5574 + C5573 + C5572) * C628 -
            ((C5389 + C5388 + C5387) * C622 + (C5386 + C5385 + C5384) * C627) +
            (C5577 + C5576 + C5575) * C623 - (C5926 + C5925 + C5924) * C629 -
            (C5929 + C5928 + C5927) * C624) *
               C2434 +
           ((C5578 + C5579 + C5580) * C628 -
            ((C5390 + C5391 + C5392) * C622 + (C5393 + C5394 + C5395) * C627) +
            (C5581 + C5582 + C5583) * C623 -
            (C5346 * C3431 + C5343 * C3437 + C5345 * C880 + C5342 * C893 +
             C5344 * C632 + C5341 * C639) *
                C629 -
            (C5346 * C3436 + C5343 * C3440 + C5345 * C894 + C5342 * C904 +
             C5344 * C640 + C5341 * C647) *
                C624) *
               C50769) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C2434 +
            ((C5384 + C5385 + C5386) * C118 +
             (C5387 + C5388 + C5389) * C50819) *
                C50769) *
               C50908 * C51040 -
           (((C5390 + C5391 + C5392) * C50819 +
             (C5393 + C5394 + C5395) * C118) *
                C50769 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C2434) *
               C50908 * C50790) *
              C1005 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C2434 +
            ((C5760 + C5761 + C5762) * C118 +
             (C5763 + C5764 + C5765) * C50819) *
                C50769) *
               C50908 * C50790 -
           (((C5759 + C5758 + C5757) * C50819 +
             (C5756 + C5755 + C5754) * C118) *
                C50769 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C2434) *
               C50908 * C51040) *
              C1006 +
          ((((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
              C5346 * C6319 + C5343 * C6322) *
                 C118 +
             (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
              C5346 * C6323 + C5343 * C6328) *
                 C50819) *
                C2434 +
            ((C6344 + C6345 + C6346) * C118 +
             (C6347 + C6348 + C6349) * C50819) *
                C50769) *
               C50908 * C51040 -
           (((C5346 * C6326 + C5343 * C6330 + C5345 * C1242 + C5342 * C1249 +
              C5344 * C1018 + C5341 * C1025) *
                 C50819 +
             (C5346 * C6321 + C5343 * C6327 + C5345 * C1237 + C5342 * C1243 +
              C5344 * C1010 + C5341 * C1017) *
                 C118) *
                C50769 +
            ((C6349 + C6348 + C6347) * C50819 +
             (C6346 + C6345 + C6344) * C118) *
                C2434) *
               C50908 * C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50919 * C126) * C294 +
                (C117 * C127 + C50919 * C140) * C51047 -
                (C117 * C296 + C50919 * C302) * C295 -
                (C117 * C303 + C50919 * C314) * C50835) *
                   C107 +
               (C321 + C322 - C355 - C356) * C108 + C365 * C109 + C366 * C110) *
                  C50908 * C291 +
              ((C355 - (C322 + C321) + C356) * C107 +
               (C357 - (C328 + C327) + C358) * C108 +
               (C359 - (C334 + C333) + C360) * C109 +
               (C361 - (C341 + C342) + C362) * C110) *
                  C50908 * C292 +
              (C365 * C107 + C366 * C108 + (C342 + C341 - C361 - C362) * C109 +
               (C176 * C294 + C177 * C51047 -
                (C117 * C301 + C50919 * C312) * C295 -
                (C117 * C313 + C50919 * C319) * C50835) *
                   C110) *
                  C50908 * C293) *
             C50849 +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C119 + C50919 * C126) * C757 +
               (C117 * C127 + C50919 * C140) * C752 -
               (C117 * C296 + C50919 * C302) * C758 -
               (C117 * C303 + C50919 * C314) * C753 +
               (C117 * C630 + C50919 * C635) * C759 +
               (C117 * C636 + C50919 * C645) * C754 -
               (C117 * C761 + C50919 * C765) * C760 -
               (C117 * C766 + C50919 * C773) * C755) *
                  C107 +
              (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
               C675 * C759 + C676 * C754 -
               (C117 * C762 + C50919 * C767) * C760 -
               (C117 * C768 + C50919 * C774) * C755) *
                  C108 +
              (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 +
               C677 * C759 + C678 * C754 -
               (C117 * C763 + C50919 * C769) * C760 -
               (C117 * C770 + C50919 * C775) * C755) *
                  C109 +
              (C172 * C757 + C173 * C752 - C351 * C758 - C352 * C753 +
               C679 * C759 + C680 * C754 -
               (C117 * C764 + C50919 * C771) * C760 -
               (C117 * C772 + C50919 * C776) * C755) *
                  C110) *
             C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 -
            (C117 * C296 + C50919 * C302) * C295 -
            (C117 * C303 + C50919 * C314) * C50835) *
               C107 +
           (C321 + C322 - C355 - C356) * C108 + C365 * C109 + C366 * C110) *
              C50908 * C50785 * C1005 +
          (((C117 * C875 + C50919 * C883) * C295 -
            ((C117 * C480 + C50919 * C488) * C51047 +
             (C117 * C470 + C50919 * C481) * C294) +
            (C117 * C884 + C50919 * C899) * C50835) *
               C107 +
           ((C117 * C877 + C50919 * C887) * C295 -
            (C508 * C51047 + C507 * C294) +
            (C117 * C888 + C50919 * C901) * C50835) *
               C108 +
           ((C117 * C879 + C50919 * C891) * C295 -
            (C510 * C51047 + C509 * C294) +
            (C117 * C892 + C50919 * C903) * C50835) *
               C109 +
           ((C117 * C881 + C50919 * C895) * C295 -
            (C512 * C51047 + C511 * C294) +
            (C117 * C896 + C50919 * C905) * C50835) *
               C110) *
              C50908 * C50785 * C1006 +
          (((C117 * C1008 + C50919 * C1013) * C294 +
            (C117 * C1014 + C50919 * C1023) * C51047 -
            (C117 * C1150 + C50919 * C1154) * C295 -
            (C117 * C1155 + C50919 * C1162) * C50835) *
               C107 +
           (C1041 * C294 + C1042 * C51047 -
            (C117 * C1151 + C50919 * C1156) * C295 -
            (C117 * C1157 + C50919 * C1163) * C50835) *
               C108 +
           (C1043 * C294 + C1044 * C51047 -
            (C117 * C1152 + C50919 * C1158) * C295 -
            (C117 * C1159 + C50919 * C1164) * C50835) *
               C109 +
           (C1045 * C294 + C1046 * C51047 -
            (C117 * C1153 + C50919 * C1160) * C295 -
            (C117 * C1161 + C50919 * C1165) * C50835) *
               C110) *
              C50908 * C50785 * C1007)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C2434 +
            (C321 + C322 - C355 - C356) * C50769) *
               C2436 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C2434 +
            (C2606 + C2607 - C2608 - C2609) * C50769) *
               C2437 +
           ((C2628 * C294 + C2629 * C51047 -
             (C117 * C761 + C50919 * C765) * C295 -
             (C117 * C766 + C50919 * C773) * C50835) *
                C2434 +
            (C2610 + C2611 - C2634 - C2635) * C50769) *
               C2438) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C2434 +
            (C357 - (C328 + C327) + C358) * C50769) *
               C2436 +
           ((C2608 - (C2607 + C2606) + C2609) * C2434 +
            (C2616 - (C2617 + C2618) + C2619) * C50769) *
               C2437 +
           ((C2634 - (C2611 + C2610) + C2635) * C2434 +
            (C2636 - (C2622 + C2623) + C2637) * C50769) *
               C2438) *
              C292 +
          ((C365 * C2434 + C366 * C50769) * C2436 +
           ((C2618 + C2617 - C2616 - C2619) * C2434 +
            (C351 * C294 + C352 * C51047 - C679 * C295 - C680 * C50835) *
                C50769) *
               C2437 +
           ((C2623 + C2622 - C2636 - C2637) * C2434 +
            (C679 * C294 + C680 * C51047 -
             (C117 * C764 + C50919 * C771) * C295 -
             (C117 * C772 + C50919 * C776) * C50835) *
                C50769) *
               C2438) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C2434 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C50769) *
              C2436 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C2434 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C50769) *
              C2437 +
          ((C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
            C3096 * C759 + C3097 * C754 -
            (C117 * C3083 + C50919 * C3085) * C760 -
            (C117 * C3086 + C50919 * C3089) * C755) *
               C2434 +
           (C675 * C757 + C676 * C752 - C2630 * C758 - C2631 * C753 +
            C2982 * C759 + C2983 * C754 -
            (C117 * C3084 + C50919 * C3087) * C760 -
            (C117 * C3088 + C50919 * C3090) * C755) *
               C50769) *
              C2438) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C2434 +
            (C321 + C322 - C355 - C356) * C50769) *
               C2436 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C2434 +
            (C2606 + C2607 - C2608 - C2609) * C50769) *
               C2437 +
           ((C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                C2434 +
            (C2610 + C2611 - C2634 - C2635) * C50769) *
               C2438) *
              C50785 * C1005 +
          (((C3276 * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             C3277 * C50835) *
                C2434 +
            (C1898 - (C1899 + C1900) + C1901) * C50769) *
               C2436 +
           ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                C2434 +
            (C2796 * C295 - (C1657 * C51047 + C1656 * C294) + C2797 * C50835) *
                C50769) *
               C2437 +
           ((C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
                C2434 +
            (C3282 * C295 - (C2797 * C51047 + C2796 * C294) + C3283 * C50835) *
                C50769) *
               C2438) *
              C50785 * C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C294 +
             (C117 * C1014 + C50919 * C1023) * C51047 - C3620 * C295 -
             C3621 * C50835) *
                C2434 +
            (C1041 * C294 + C1042 * C51047 - C3450 * C295 - C3451 * C50835) *
                C50769) *
               C2436 +
           ((C3620 * C294 + C3621 * C51047 - C3622 * C295 - C3623 * C50835) *
                C2434 +
            (C3450 * C294 + C3451 * C51047 - C3452 * C295 - C3453 * C50835) *
                C50769) *
               C2437 +
           ((C3622 * C294 + C3623 * C51047 -
             (C117 * C3603 + C50919 * C3605) * C295 -
             (C117 * C3606 + C50919 * C3609) * C50835) *
                C2434 +
            (C3452 * C294 + C3453 * C51047 -
             (C117 * C3604 + C50919 * C3607) * C295 -
             (C117 * C3608 + C50919 * C3610) * C50835) *
                C50769) *
               C2438) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C294 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51047 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C295 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C50835) *
               C2434 +
           ((C5384 + C5385 + C5386) * C294 + (C5387 + C5388 + C5389) * C51047 -
            (C5572 + C5573 + C5574) * C295 - (C5575 + C5576 + C5577) * C50835) *
               C50769) *
              C50908 * C291 +
          (((C5574 + C5573 + C5572) * C295 -
            ((C5389 + C5388 + C5387) * C51047 +
             (C5386 + C5385 + C5384) * C294) +
            (C5577 + C5576 + C5575) * C50835) *
               C2434 +
           ((C5578 + C5579 + C5580) * C295 -
            ((C5390 + C5391 + C5392) * C51047 +
             (C5393 + C5394 + C5395) * C294) +
            (C5581 + C5582 + C5583) * C50835) *
               C50769) *
              C50908 * C292 +
          (((C5395 + C5394 + C5393) * C294 + (C5392 + C5391 + C5390) * C51047 -
            (C5580 + C5579 + C5578) * C295 - (C5583 + C5582 + C5581) * C50835) *
               C2434 +
           ((C5396 + C5397 + C5398) * C294 + (C5399 + C5400 + C5401) * C51047 -
            (C5346 * C1153 + C5343 * C1160 + C5345 * C881 + C5342 * C895 +
             C5344 * C299 + C5341 * C308) *
                C295 -
            (C5346 * C1161 + C5343 * C1165 + C5345 * C896 + C5342 * C905 +
             C5344 * C309 + C5341 * C317) *
                C50835) *
               C50769) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
            C5346 * C1008 + C5343 * C1013) *
               C757 +
           (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
            C5346 * C1014 + C5343 * C1023) *
               C752 -
           (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
            C5344 * C296 + C5341 * C302) *
               C758 -
           (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
            C5344 * C303 + C5341 * C314) *
               C753 +
           (C5344 * C630 + C5341 * C635 + C5345 * C876 + C5342 * C885 +
            C5346 * C3429 + C5343 * C3432) *
               C759 +
           (C5344 * C636 + C5341 * C645 + C5345 * C886 + C5342 * C900 +
            C5346 * C3433 + C5343 * C3438) *
               C754 -
           (C5346 * C3603 + C5343 * C3605 + C5345 * C3243 + C5342 * C3247 +
            C5344 * C761 + C5341 * C765) *
               C760 -
           (C5346 * C3606 + C5343 * C3609 + C5345 * C3248 + C5342 * C3255 +
            C5344 * C766 + C5341 * C773) *
               C755) *
              C2434 +
          ((C5384 + C5385 + C5386) * C757 + (C5387 + C5388 + C5389) * C752 -
           (C5572 + C5573 + C5574) * C758 - (C5575 + C5576 + C5577) * C753 +
           (C5924 + C5925 + C5926) * C759 + (C5927 + C5928 + C5929) * C754 -
           (C5346 * C3604 + C5343 * C3607 + C5345 * C3244 + C5342 * C3249 +
            C5344 * C762 + C5341 * C767) *
               C760 -
           (C5346 * C3608 + C5343 * C3610 + C5345 * C3250 + C5342 * C3256 +
            C5344 * C768 + C5341 * C774) *
               C755) *
              C50769) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C294 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51047 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C295 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C50835) *
               C2434 +
           ((C5384 + C5385 + C5386) * C294 + (C5387 + C5388 + C5389) * C51047 -
            (C5572 + C5573 + C5574) * C295 - (C5575 + C5576 + C5577) * C50835) *
               C50769) *
              C50908 * C50785 * C1005 +
          (((C5344 * C875 + C5341 * C883 + C5345 * C1150 + C5342 * C1154 +
             C5346 * C3724 + C5343 * C3732) *
                C295 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C51047 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C294) +
            (C5344 * C884 + C5341 * C899 + C5345 * C1155 + C5342 * C1162 +
             C5346 * C3731 + C5343 * C3736) *
                C50835) *
               C2434 +
           ((C5344 * C877 + C5341 * C887 + C5345 * C1151 + C5342 * C1156 +
             C5346 * C3723 + C5343 * C3730) *
                C295 -
            ((C5759 + C5758 + C5757) * C51047 +
             (C5756 + C5755 + C5754) * C294) +
            (C5344 * C888 + C5341 * C901 + C5345 * C1157 + C5342 * C1163 +
             C5346 * C3729 + C5343 * C3735) *
                C50835) *
               C50769) *
              C50908 * C50785 * C1006 +
          (((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
             C5346 * C6319 + C5343 * C6322) *
                C294 +
            (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
             C5346 * C6323 + C5343 * C6328) *
                C51047 -
            (C5346 * C6495 + C5343 * C6497 + C5345 * C3724 + C5342 * C3732 +
             C5344 * C1150 + C5341 * C1154) *
                C295 -
            (C5346 * C6498 + C5343 * C6501 + C5345 * C3731 + C5342 * C3736 +
             C5344 * C1155 + C5341 * C1162) *
                C50835) *
               C2434 +
           ((C6344 + C6345 + C6346) * C294 + (C6347 + C6348 + C6349) * C51047 -
            (C5346 * C6496 + C5343 * C6499 + C5345 * C3723 + C5342 * C3730 +
             C5344 * C1151 + C5341 * C1156) *
                C295 -
            (C5346 * C6500 + C5343 * C6502 + C5345 * C3729 + C5342 * C3735 +
             C5344 * C1157 + C5341 * C1163) *
                C50835) *
               C50769) *
              C50908 * C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50919 * C126) * C118 +
                 (C117 * C127 + C50919 * C140) * C50819) *
                    C107 +
                (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                   C50908 * C291 -
               (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                (C179 + C178) * C107) *
                   C50908 * C292 +
               (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                (C186 + C187) * C110) *
                   C50908 * C293) *
                  C51049 +
              (((C515 + C516) * C107 + (C517 + C518) * C108 +
                (C519 + C520) * C109 + (C521 + C522) * C110) *
                   C50908 * C292 -
               (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
                ((C117 * C480 + C50919 * C488) * C50819 +
                 (C117 * C470 + C50919 * C481) * C118) *
                    C107) *
                   C50908 * C291 -
               (((C117 * C482 + C50919 * C489) * C50819 +
                 (C117 * C471 + C50919 * C483) * C118) *
                    C110 +
                (C522 + C521) * C109 + C523 * C108 + C524 * C107) *
                   C50908 * C293) *
                  C50861) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50919 * C126) * C627 +
                (C117 * C127 + C50919 * C140) * C622 -
                (C117 * C296 + C50919 * C302) * C628 -
                (C117 * C303 + C50919 * C314) * C623 +
                (C117 * C630 + C50919 * C635) * C629 +
                (C117 * C636 + C50919 * C645) * C624) *
                   C107 +
               (C651 + C652 - C653 - C654 + C681 + C682) * C108 +
               (C659 + C660 - C661 - C662 + C683 + C684) * C109 +
               (C667 + C668 - C669 - C670 + C685 + C686) * C110) *
                  C50908 * C50785 * C51049 +
              (((C117 * C875 + C50919 * C883) * C628 -
                ((C117 * C480 + C50919 * C488) * C622 +
                 (C117 * C470 + C50919 * C481) * C627) +
                (C117 * C884 + C50919 * C899) * C623 -
                (C117 * C876 + C50919 * C885) * C629 -
                (C117 * C886 + C50919 * C900) * C624) *
                   C107 +
               ((C117 * C877 + C50919 * C887) * C628 -
                (C508 * C622 + C507 * C627) +
                (C117 * C888 + C50919 * C901) * C623 -
                (C117 * C878 + C50919 * C889) * C629 -
                (C117 * C890 + C50919 * C902) * C624) *
                   C108 +
               ((C117 * C879 + C50919 * C891) * C628 -
                (C510 * C622 + C509 * C627) +
                (C117 * C892 + C50919 * C903) * C623 -
                (C117 * C880 + C50919 * C893) * C629 -
                (C117 * C894 + C50919 * C904) * C624) *
                   C109 +
               ((C117 * C881 + C50919 * C895) * C628 -
                (C512 * C622 + C511 * C627) +
                (C117 * C896 + C50919 * C905) * C623 -
                (C117 * C882 + C50919 * C897) * C629 -
                (C117 * C898 + C50919 * C906) * C624) *
                   C110) *
                  C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50908 * C50785 * C1232 -
          (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
           ((C117 * C480 + C50919 * C488) * C50819 +
            (C117 * C470 + C50919 * C481) * C118) *
               C107) *
              C50908 * C50785 * C1233 +
          (((C117 * C1008 + C50919 * C1013) * C118 +
            (C117 * C1014 + C50919 * C1023) * C50819) *
               C107 +
           (C1047 + C1048) * C108 + (C1049 + C1050) * C109 +
           (C1051 + C1052) * C110) *
              C50908 * C50785 * C1234 -
          (((C117 * C1240 + C50919 * C1248) * C50819 +
            (C117 * C1236 + C50919 * C1241) * C118) *
               C110 +
           ((C117 * C1242 + C50919 * C1249) * C50819 +
            (C117 * C1237 + C50919 * C1243) * C118) *
               C109 +
           ((C117 * C1244 + C50919 * C1250) * C50819 +
            (C117 * C1238 + C50919 * C1245) * C118) *
               C108 +
           ((C117 * C1246 + C50919 * C1251) * C50819 +
            (C117 * C1239 + C50919 * C1247) * C118) *
               C107) *
              C50908 * C50785 * C1235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C291 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C292 +
           ((C188 * C2434 + C189 * C50769) * C2436 +
            ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
            ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
               C293) *
              C51049 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C292 -
           (((C2801 + C2800) * C50769 +
             ((C117 * C886 + C50919 * C900) * C50819 +
              (C117 * C876 + C50919 * C885) * C118) *
                 C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             ((C117 * C884 + C50919 * C899) * C50819 +
              (C117 * C875 + C50919 * C883) * C118) *
                 C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C291 -
           ((((C117 * C898 + C50919 * C906) * C50819 +
              (C117 * C882 + C50919 * C897) * C118) *
                 C50769 +
             (C2803 + C2802) * C2434) *
                C2438 +
            ((C1661 * C50819 + C1660 * C118) * C50769 +
             (C2787 + C2786) * C2434) *
                C2437 +
            (C523 * C50769 + C524 * C2434) * C2436) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C2434 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C2436 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C2434 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C2437 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             C3096 * C629 + C3097 * C624) *
                C2434 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C2438) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C2434 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C50769) *
               C2436 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C2434 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C50769) *
               C2437 +
           ((C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
             (C117 * C3245 + C50919 * C3251) * C629 -
             (C117 * C3252 + C50919 * C3257) * C624) *
                C2434 +
            (C3282 * C628 - (C2797 * C622 + C2796 * C627) + C3283 * C623 -
             (C117 * C3246 + C50919 * C3253) * C629 -
             (C117 * C3254 + C50919 * C3258) * C624) *
                C50769) *
               C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C2434 +
            (C178 + C179) * C50769) *
               C2436 +
           ((C2626 * C118 + C2627 * C50819) * C2434 +
            (C2440 + C2441) * C50769) *
               C2437 +
           ((C2628 * C118 + C2629 * C50819) * C2434 +
            (C2442 + C2443) * C50769) *
               C2438) *
              C50785 * C1232 -
          (((C2801 + C2800) * C50769 +
            (C3279 * C50819 + C3278 * C118) * C2434) *
               C2438 +
           ((C2785 + C2784) * C50769 +
            (C3277 * C50819 + C3276 * C118) * C2434) *
               C2437 +
           ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                      (C117 * C470 + C50919 * C481) * C118) *
                                         C2434) *
               C2436) *
              C50785 * C1233 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C2434 +
            (C1047 + C1048) * C50769) *
               C2436 +
           ((C3620 * C118 + C3621 * C50819) * C2434 +
            (C3454 + C3455) * C50769) *
               C2437 +
           ((C3622 * C118 + C3623 * C50819) * C2434 +
            (C3456 + C3457) * C50769) *
               C2438) *
              C50785 * C1234 -
          ((((C117 * C3725 + C50919 * C3733) * C50819 +
             (C117 * C3721 + C50919 * C3726) * C118) *
                C50769 +
            ((C117 * C3727 + C50919 * C3734) * C50819 +
             (C117 * C3722 + C50919 * C3728) * C118) *
                C2434) *
               C2438 +
           (((C117 * C3729 + C50919 * C3735) * C50819 +
             (C117 * C3723 + C50919 * C3730) * C118) *
                C50769 +
            ((C117 * C3731 + C50919 * C3736) * C50819 +
             (C117 * C3724 + C50919 * C3732) * C118) *
                C2434) *
               C2437 +
           (((C117 * C1244 + C50919 * C1250) * C50819 +
             (C117 * C1238 + C50919 * C1245) * C118) *
                C50769 +
            ((C117 * C1246 + C50919 * C1251) * C50819 +
             (C117 * C1239 + C50919 * C1247) * C118) *
                C2434) *
               C2436) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C2434 +
            ((C5384 + C5385 + C5386) * C118 +
             (C5387 + C5388 + C5389) * C50819) *
                C50769) *
               C50908 * C291 -
           (((C5390 + C5391 + C5392) * C50819 +
             (C5393 + C5394 + C5395) * C118) *
                C50769 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C2434) *
               C50908 * C292 +
           (((C5395 + C5394 + C5393) * C118 +
             (C5392 + C5391 + C5390) * C50819) *
                C2434 +
            ((C5396 + C5397 + C5398) * C118 +
             (C5399 + C5400 + C5401) * C50819) *
                C50769) *
               C50908 * C293) *
              C51049 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C2434 +
            ((C5760 + C5761 + C5762) * C118 +
             (C5763 + C5764 + C5765) * C50819) *
                C50769) *
               C50908 * C292 -
           (((C5759 + C5758 + C5757) * C50819 +
             (C5756 + C5755 + C5754) * C118) *
                C50769 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C2434) *
               C50908 * C291 -
           (((C5346 * C1240 + C5343 * C1248 + C5345 * C1020 + C5342 * C1026 +
              C5344 * C477 + C5341 * C486) *
                 C50819 +
             (C5346 * C1236 + C5343 * C1241 + C5345 * C1011 + C5342 * C1019 +
              C5344 * C468 + C5341 * C476) *
                 C118) *
                C50769 +
            ((C5765 + C5764 + C5763) * C50819 +
             (C5762 + C5761 + C5760) * C118) *
                C2434) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C627 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C622 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C628 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C623 +
            (C5344 * C630 + C5341 * C635 + C5345 * C876 + C5342 * C885 +
             C5346 * C3429 + C5343 * C3432) *
                C629 +
            (C5344 * C636 + C5341 * C645 + C5345 * C886 + C5342 * C900 +
             C5346 * C3433 + C5343 * C3438) *
                C624) *
               C2434 +
           ((C5384 + C5385 + C5386) * C627 + (C5387 + C5388 + C5389) * C622 -
            (C5572 + C5573 + C5574) * C628 - (C5575 + C5576 + C5577) * C623 +
            (C5924 + C5925 + C5926) * C629 + (C5927 + C5928 + C5929) * C624) *
               C50769) *
              C50908 * C50785 * C51049 +
          (((C5344 * C875 + C5341 * C883 + C5345 * C1150 + C5342 * C1154 +
             C5346 * C3724 + C5343 * C3732) *
                C628 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C622 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C627) +
            (C5344 * C884 + C5341 * C899 + C5345 * C1155 + C5342 * C1162 +
             C5346 * C3731 + C5343 * C3736) *
                C623 -
            (C5346 * C3722 + C5343 * C3728 + C5345 * C3429 + C5342 * C3432 +
             C5344 * C876 + C5341 * C885) *
                C629 -
            (C5346 * C3727 + C5343 * C3734 + C5345 * C3433 + C5342 * C3438 +
             C5344 * C886 + C5341 * C900) *
                C624) *
               C2434 +
           ((C5344 * C877 + C5341 * C887 + C5345 * C1151 + C5342 * C1156 +
             C5346 * C3723 + C5343 * C3730) *
                C628 -
            ((C5759 + C5758 + C5757) * C622 + (C5756 + C5755 + C5754) * C627) +
            (C5344 * C888 + C5341 * C901 + C5345 * C1157 + C5342 * C1163 +
             C5346 * C3729 + C5343 * C3735) *
                C623 -
            (C5346 * C3721 + C5343 * C3726 + C5345 * C3430 + C5342 * C3434 +
             C5344 * C878 + C5341 * C889) *
                C629 -
            (C5346 * C3725 + C5343 * C3733 + C5345 * C3435 + C5342 * C3439 +
             C5344 * C890 + C5341 * C902) *
                C624) *
               C50769) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C118 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C50819) *
               C2434 +
           ((C5384 + C5385 + C5386) * C118 + (C5387 + C5388 + C5389) * C50819) *
               C50769) *
              C50908 * C50785 * C1232 -
          (((C5759 + C5758 + C5757) * C50819 + (C5756 + C5755 + C5754) * C118) *
               C50769 +
           ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
             C5344 * C480 + C5341 * C488) *
                C50819 +
            (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
             C5344 * C470 + C5341 * C481) *
                C118) *
               C2434) *
              C50908 * C50785 * C1233 +
          (((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
             C5346 * C6319 + C5343 * C6322) *
                C118 +
            (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
             C5346 * C6323 + C5343 * C6328) *
                C50819) *
               C2434 +
           ((C6344 + C6345 + C6346) * C118 + (C6347 + C6348 + C6349) * C50819) *
               C50769) *
              C50908 * C50785 * C1234 -
          (((C5346 * C6603 + C5343 * C6607 + C5345 * C6325 + C5342 * C6329 +
             C5344 * C1244 + C5341 * C1250) *
                C50819 +
            (C5346 * C6601 + C5343 * C6604 + C5345 * C6320 + C5342 * C6324 +
             C5344 * C1238 + C5341 * C1245) *
                C118) *
               C50769 +
           ((C5346 * C6605 + C5343 * C6608 + C5345 * C6323 + C5342 * C6328 +
             C5344 * C1246 + C5341 * C1251) *
                C50819 +
            (C5346 * C6602 + C5343 * C6606 + C5345 * C6319 + C5342 * C6322 +
             C5344 * C1239 + C5341 * C1247) *
                C118) *
               C2434) *
              C50908 * C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C51093 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C51078 +
           ((C188 * C2434 + C189 * C50769) * C2436 +
            ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
            ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
               C1354) *
              C1765 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C51078 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C51093 -
           ((((C117 * C898 + C50919 * C906) * C50819 +
              (C117 * C882 + C50919 * C897) * C118) *
                 C50769 +
             (C2803 + C2802) * C2434) *
                C2438 +
            ((C1661 * C50819 + C1660 * C118) * C50769 +
             (C2787 + C2786) * C2434) *
                C2437 +
            (C523 * C50769 + C524 * C2434) * C2436) *
               C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50908 * C51093 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50908 * C51078 +
           (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50908 * C1354) *
              C1765 +
          (((C515 + C516) * C107 + (C517 + C518) * C108 + (C519 + C520) * C109 +
            (C521 + C522) * C110) *
               C50908 * C51078 -
           (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C107) *
               C50908 * C51093 -
           (((C117 * C482 + C50919 * C489) * C50819 +
             (C117 * C471 + C50919 * C483) * C118) *
                C110 +
            (C522 + C521) * C109 + C523 * C108 + C524 * C107) *
               C50908 * C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C2434 +
            ((C5384 + C5385 + C5386) * C118 +
             (C5387 + C5388 + C5389) * C50819) *
                C50769) *
               C50908 * C51093 -
           (((C5390 + C5391 + C5392) * C50819 +
             (C5393 + C5394 + C5395) * C118) *
                C50769 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C2434) *
               C50908 * C51078 +
           (((C5395 + C5394 + C5393) * C118 +
             (C5392 + C5391 + C5390) * C50819) *
                C2434 +
            ((C5396 + C5397 + C5398) * C118 +
             (C5399 + C5400 + C5401) * C50819) *
                C50769) *
               C50908 * C1354) *
              C1765 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C2434 +
            ((C5760 + C5761 + C5762) * C118 +
             (C5763 + C5764 + C5765) * C50819) *
                C50769) *
               C50908 * C51078 -
           (((C5759 + C5758 + C5757) * C50819 +
             (C5756 + C5755 + C5754) * C118) *
                C50769 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C2434) *
               C50908 * C51093 -
           (((C5346 * C1240 + C5343 * C1248 + C5345 * C1020 + C5342 * C1026 +
              C5344 * C477 + C5341 * C486) *
                 C50819 +
             (C5346 * C1236 + C5343 * C1241 + C5345 * C1011 + C5342 * C1019 +
              C5344 * C468 + C5341 * C476) *
                 C118) *
                C50769 +
            ((C5765 + C5764 + C5763) * C50819 +
             (C5762 + C5761 + C5760) * C118) *
                C2434) *
               C50908 * C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C294 +
              (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
              C2627 * C50835) *
                 C2434 +
             (C321 + C322 - C355 - C356) * C50769) *
                C2436 +
            ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                 C2434 +
             (C2606 + C2607 - C2608 - C2609) * C50769) *
                C2437 +
            ((C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                 C2434 +
             (C2610 + C2611 - C2634 - C2635) * C50769) *
                C2438) *
               C1480 +
           (((C355 - (C322 + C321) + C356) * C2434 +
             (C357 - (C328 + C327) + C358) * C50769) *
                C2436 +
            ((C2608 - (C2607 + C2606) + C2609) * C2434 +
             (C2616 - (C2617 + C2618) + C2619) * C50769) *
                C2437 +
            ((C2634 - (C2611 + C2610) + C2635) * C2434 +
             (C2636 - (C2622 + C2623) + C2637) * C50769) *
                C2438) *
               C50790) *
              C1765 +
          ((((C3276 * C295 -
              ((C117 * C480 + C50919 * C488) * C51047 +
               (C117 * C470 + C50919 * C481) * C294) +
              C3277 * C50835) *
                 C2434 +
             (C1898 - (C1899 + C1900) + C1901) * C50769) *
                C2436 +
            ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                 C2434 +
             (C4604 - (C4605 + C4606) + C4607) * C50769) *
                C2437 +
            ((C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
                 C2434 +
             (C4608 - (C4609 + C4610) + C4611) * C50769) *
                C2438) *
               C1480 +
           (((C1900 + C1899 - C1898 - C1901) * C2434 +
             (C1904 + C1903 - C1902 - C1905) * C50769) *
                C2436 +
            ((C4606 + C4605 - C4604 - C4607) * C2434 +
             (C1658 * C294 + C1659 * C51047 - C2798 * C295 - C2799 * C50835) *
                 C50769) *
                C2437 +
            ((C4610 + C4609 - C4608 - C4611) * C2434 +
             (C2798 * C294 + C2799 * C51047 -
              (C117 * C4251 + C50919 * C4252) * C295 -
              (C117 * C4253 + C50919 * C4254) * C50835) *
                 C50769) *
                C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 -
             (C117 * C296 + C50919 * C302) * C295 -
             (C117 * C303 + C50919 * C314) * C50835) *
                C107 +
            (C321 + C322 - C355 - C356) * C108 + C365 * C109 + C366 * C110) *
               C50908 * C1480 +
           ((C355 - (C322 + C321) + C356) * C107 +
            (C357 - (C328 + C327) + C358) * C108 +
            (C359 - (C334 + C333) + C360) * C109 +
            (C361 - (C341 + C342) + C362) * C110) *
               C50908 * C50790) *
              C1765 +
          ((((C117 * C875 + C50919 * C883) * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             (C117 * C884 + C50919 * C899) * C50835) *
                C107 +
            (C1898 - (C1899 + C1900) + C1901) * C108 +
            (C1902 - (C1903 + C1904) + C1905) * C109 +
            (C1906 - (C1907 + C1908) + C1909) * C110) *
               C50908 * C1480 +
           ((C1900 + C1899 - C1898 - C1901) * C107 +
            (C1904 + C1903 - C1902 - C1905) * C108 +
            (C1908 + C1907 - C1906 - C1909) * C109 +
            (C513 * C294 + C514 * C51047 -
             (C117 * C1633 + C50919 * C1634) * C295 -
             (C117 * C1635 + C50919 * C1636) * C50835) *
                C110) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C294 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C51047 -
             (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
              C5344 * C296 + C5341 * C302) *
                 C295 -
             (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
              C5344 * C303 + C5341 * C314) *
                 C50835) *
                C2434 +
            ((C5384 + C5385 + C5386) * C294 + (C5387 + C5388 + C5389) * C51047 -
             (C5572 + C5573 + C5574) * C295 -
             (C5575 + C5576 + C5577) * C50835) *
                C50769) *
               C50908 * C1480 +
           (((C5574 + C5573 + C5572) * C295 -
             ((C5389 + C5388 + C5387) * C51047 +
              (C5386 + C5385 + C5384) * C294) +
             (C5577 + C5576 + C5575) * C50835) *
                C2434 +
            ((C5578 + C5579 + C5580) * C295 -
             ((C5390 + C5391 + C5392) * C51047 +
              (C5393 + C5394 + C5395) * C294) +
             (C5581 + C5582 + C5583) * C50835) *
                C50769) *
               C50908 * C50790) *
              C1765 +
          ((((C5344 * C875 + C5341 * C883 + C5345 * C1150 + C5342 * C1154 +
              C5346 * C3724 + C5343 * C3732) *
                 C295 -
             ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
               C5344 * C480 + C5341 * C488) *
                  C51047 +
              (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
               C5344 * C470 + C5341 * C481) *
                  C294) +
             (C5344 * C884 + C5341 * C899 + C5345 * C1155 + C5342 * C1162 +
              C5346 * C3731 + C5343 * C3736) *
                 C50835) *
                C2434 +
            ((C7112 + C7113 + C7114) * C295 -
             ((C5759 + C5758 + C5757) * C51047 +
              (C5756 + C5755 + C5754) * C294) +
             (C7115 + C7116 + C7117) * C50835) *
                C50769) *
               C50908 * C1480 +
           (((C5754 + C5755 + C5756) * C294 + (C5757 + C5758 + C5759) * C51047 -
             (C7114 + C7113 + C7112) * C295 -
             (C7117 + C7116 + C7115) * C50835) *
                C2434 +
            ((C5760 + C5761 + C5762) * C294 + (C5763 + C5764 + C5765) * C51047 -
             (C5346 * C7095 + C5343 * C7096 + C5345 * C1152 + C5342 * C1158 +
              C5344 * C879 + C5341 * C891) *
                 C295 -
             (C5346 * C7097 + C5343 * C7098 + C5345 * C1159 + C5342 * C1164 +
              C5344 * C892 + C5341 * C903) *
                 C50835) *
                C50769) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C1480 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C50790) *
              C51095 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C50790 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C1480) *
              C51084 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C2434 +
             (C1047 + C1048) * C50769) *
                C2436 +
            ((C3620 * C118 + C3621 * C50819) * C2434 +
             (C3454 + C3455) * C50769) *
                C2437 +
            ((C3622 * C118 + C3623 * C50819) * C2434 +
             (C3456 + C3457) * C50769) *
                C2438) *
               C1480 -
           ((((C117 * C3436 + C50919 * C3440) * C50819 +
              (C117 * C3431 + C50919 * C3437) * C118) *
                 C50769 +
             (C3457 + C3456) * C2434) *
                C2438 +
            (((C117 * C1159 + C50919 * C1164) * C50819 +
              (C117 * C1152 + C50919 * C1158) * C118) *
                 C50769 +
             (C3455 + C3454) * C2434) *
                C2437 +
            ((C1050 + C1049) * C50769 + (C1048 + C1047) * C2434) * C2436) *
               C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50908 * C1480 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50908 * C50790) *
              C51095 +
          (((C515 + C516) * C107 + (C517 + C518) * C108 + (C519 + C520) * C109 +
            (C521 + C522) * C110) *
               C50908 * C50790 -
           (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C107) *
               C50908 * C1480) *
              C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C107 +
            (C1047 + C1048) * C108 + (C1049 + C1050) * C109 +
            (C1051 + C1052) * C110) *
               C50908 * C1480 -
           (((C117 * C1021 + C50919 * C1027) * C50819 +
             (C117 * C1012 + C50919 * C1022) * C118) *
                C110 +
            (C1052 + C1051) * C109 + (C1050 + C1049) * C108 +
            (C1048 + C1047) * C107) *
               C50908 * C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C2434 +
            ((C5384 + C5385 + C5386) * C118 +
             (C5387 + C5388 + C5389) * C50819) *
                C50769) *
               C50908 * C1480 -
           (((C5390 + C5391 + C5392) * C50819 +
             (C5393 + C5394 + C5395) * C118) *
                C50769 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C2434) *
               C50908 * C50790) *
              C51095 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C2434 +
            ((C5760 + C5761 + C5762) * C118 +
             (C5763 + C5764 + C5765) * C50819) *
                C50769) *
               C50908 * C50790 -
           (((C5759 + C5758 + C5757) * C50819 +
             (C5756 + C5755 + C5754) * C118) *
                C50769 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C2434) *
               C50908 * C1480) *
              C51084 +
          ((((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
              C5346 * C6319 + C5343 * C6322) *
                 C118 +
             (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
              C5346 * C6323 + C5343 * C6328) *
                 C50819) *
                C2434 +
            ((C6344 + C6345 + C6346) * C118 +
             (C6347 + C6348 + C6349) * C50819) *
                C50769) *
               C50908 * C1480 -
           (((C5346 * C6326 + C5343 * C6330 + C5345 * C1242 + C5342 * C1249 +
              C5344 * C1018 + C5341 * C1025) *
                 C50819 +
             (C5346 * C6321 + C5343 * C6327 + C5345 * C1237 + C5342 * C1243 +
              C5344 * C1010 + C5341 * C1017) *
                 C118) *
                C50769 +
            ((C6349 + C6348 + C6347) * C50819 +
             (C6346 + C6345 + C6344) * C118) *
                C2434) *
               C50908 * C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 -
            (C117 * C296 + C50919 * C302) * C628 -
            (C117 * C303 + C50919 * C314) * C623 +
            (C117 * C630 + C50919 * C635) * C629 +
            (C117 * C636 + C50919 * C645) * C624) *
               C107 +
           (C651 + C652 - C653 - C654 + C681 + C682) * C108 +
           (C659 + C660 - C661 - C662 + C683 + C684) * C109 +
           (C667 + C668 - C669 - C670 + C685 + C686) * C110) *
              C50908 * C51040 +
          ((C653 - (C652 + C651) + C654 - C681 - C682) * C107 +
           (C661 - (C660 + C659) + C662 - C683 - C684) * C108 +
           (C669 - (C668 + C667) + C670 - C685 - C686) * C109 +
           (C353 * C628 - (C174 * C622 + C175 * C627) + C354 * C623 -
            (C117 * C634 + C50919 * C643) * C629 -
            (C117 * C644 + C50919 * C649) * C624) *
               C110) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50908 * C112 -
          (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
           (C179 + C178) * C107) *
              C50908 * C113 +
          (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
           (C186 + C187) * C110) *
              C50908 * C114 -
          (((C117 * C138 + C50919 * C146) * C50819 +
            (C117 * C125 + C50919 * C139) * C118) *
               C110 +
           (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C2434 +
            (C178 + C179) * C50769) *
               C2436 +
           (((C117 * C296 + C50919 * C302) * C118 +
             (C117 * C303 + C50919 * C314) * C50819) *
                C2434 +
            (C2440 + C2441) * C50769) *
               C2437 +
           (((C117 * C630 + C50919 * C635) * C118 +
             (C117 * C636 + C50919 * C645) * C50819) *
                C2434 +
            (C2442 + C2443) * C50769) *
               C2438) *
              C112 -
          (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
           ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
           ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
              C113 +
          ((C188 * C2434 + C189 * C50769) * C2436 +
           ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
           ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
              C114 -
          ((((C117 * C644 + C50919 * C649) * C50819 +
             (C117 * C634 + C50919 * C643) * C118) *
                C50769 +
            (C2451 + C2450) * C2434) *
               C2438 +
           ((C354 * C50819 + C353 * C118) * C50769 + (C2449 + C2448) * C2434) *
               C2437 +
           (C190 * C50769 + C191 * C2434) * C2436) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C2434 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C2436 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C2434 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C2437 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             (C117 * C2949 + C50919 * C2952) * C629 +
             (C117 * C2953 + C50919 * C2958) * C624) *
                C2434 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C2438) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C2434 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C50769) *
               C2436 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C2434 +
            (C677 * C628 - (C349 * C622 + C348 * C627) + C678 * C623 -
             C2632 * C629 - C2633 * C624) *
                C50769) *
               C2437 +
           ((C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C2434 +
            (C2632 * C628 - (C678 * C622 + C677 * C627) + C2633 * C623 -
             (C117 * C2951 + C50919 * C2956) * C629 -
             (C117 * C2957 + C50919 * C2960) * C624) *
                C50769) *
               C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C118 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C50819) *
               C2434 +
           ((C5384 + C5385 + C5386) * C118 + (C5387 + C5388 + C5389) * C50819) *
               C50769) *
              C50908 * C112 -
          (((C5390 + C5391 + C5392) * C50819 + (C5393 + C5394 + C5395) * C118) *
               C50769 +
           ((C5389 + C5388 + C5387) * C50819 + (C5386 + C5385 + C5384) * C118) *
               C2434) *
              C50908 * C113 +
          (((C5395 + C5394 + C5393) * C118 + (C5392 + C5391 + C5390) * C50819) *
               C2434 +
           ((C5396 + C5397 + C5398) * C118 + (C5399 + C5400 + C5401) * C50819) *
               C50769) *
              C50908 * C114 -
          (((C5346 * C1021 + C5343 * C1027 + C5345 * C479 + C5342 * C487 +
             C5344 * C134 + C5341 * C144) *
                C50819 +
            (C5346 * C1012 + C5343 * C1022 + C5345 * C469 + C5342 * C478 +
             C5344 * C123 + C5341 * C135) *
                C118) *
               C50769 +
           ((C5401 + C5400 + C5399) * C50819 + (C5398 + C5397 + C5396) * C118) *
               C2434) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C627 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C622 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C628 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C623 +
            (C5344 * C630 + C5341 * C635 + C5345 * C876 + C5342 * C885 +
             C5346 * C3429 + C5343 * C3432) *
                C629 +
            (C5344 * C636 + C5341 * C645 + C5345 * C886 + C5342 * C900 +
             C5346 * C3433 + C5343 * C3438) *
                C624) *
               C2434 +
           ((C5384 + C5385 + C5386) * C627 + (C5387 + C5388 + C5389) * C622 -
            (C5572 + C5573 + C5574) * C628 - (C5575 + C5576 + C5577) * C623 +
            (C5924 + C5925 + C5926) * C629 + (C5927 + C5928 + C5929) * C624) *
               C50769) *
              C50908 * C51040 +
          (((C5574 + C5573 + C5572) * C628 -
            ((C5389 + C5388 + C5387) * C622 + (C5386 + C5385 + C5384) * C627) +
            (C5577 + C5576 + C5575) * C623 - (C5926 + C5925 + C5924) * C629 -
            (C5929 + C5928 + C5927) * C624) *
               C2434 +
           ((C5578 + C5579 + C5580) * C628 -
            ((C5390 + C5391 + C5392) * C622 + (C5393 + C5394 + C5395) * C627) +
            (C5581 + C5582 + C5583) * C623 -
            (C5346 * C3431 + C5343 * C3437 + C5345 * C880 + C5342 * C893 +
             C5344 * C632 + C5341 * C639) *
                C629 -
            (C5346 * C3436 + C5343 * C3440 + C5345 * C894 + C5342 * C904 +
             C5344 * C640 + C5341 * C647) *
                C624) *
               C50769) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50919 * C126) * C757 +
           (C117 * C127 + C50919 * C140) * C752 -
           (C117 * C296 + C50919 * C302) * C758 -
           (C117 * C303 + C50919 * C314) * C753 +
           (C117 * C630 + C50919 * C635) * C759 +
           (C117 * C636 + C50919 * C645) * C754 -
           (C117 * C761 + C50919 * C765) * C760 -
           (C117 * C766 + C50919 * C773) * C755) *
              C107 +
          (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 + C675 * C759 +
           C676 * C754 - (C117 * C762 + C50919 * C767) * C760 -
           (C117 * C768 + C50919 * C774) * C755) *
              C108 +
          (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 + C677 * C759 +
           C678 * C754 - (C117 * C763 + C50919 * C769) * C760 -
           (C117 * C770 + C50919 * C775) * C755) *
              C109 +
          (C172 * C757 + C173 * C752 - C351 * C758 - C352 * C753 + C679 * C759 +
           C680 * C754 - (C117 * C764 + C50919 * C771) * C760 -
           (C117 * C772 + C50919 * C776) * C755) *
              C110) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 -
            (C117 * C296 + C50919 * C302) * C295 -
            (C117 * C303 + C50919 * C314) * C50835) *
               C107 +
           (C321 + C322 - C355 - C356) * C108 + C365 * C109 + C366 * C110) *
              C50908 * C291 +
          ((C355 - (C322 + C321) + C356) * C107 +
           (C357 - (C328 + C327) + C358) * C108 +
           (C359 - (C334 + C333) + C360) * C109 +
           (C361 - (C341 + C342) + C362) * C110) *
              C50908 * C292 +
          (C365 * C107 + C366 * C108 + (C342 + C341 - C361 - C362) * C109 +
           (C176 * C294 + C177 * C51047 - (C117 * C301 + C50919 * C312) * C295 -
            (C117 * C313 + C50919 * C319) * C50835) *
               C110) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C2434 +
            (C321 + C322 - C355 - C356) * C50769) *
               C2436 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C2434 +
            (C2606 + C2607 - C2608 - C2609) * C50769) *
               C2437 +
           ((C2628 * C294 + C2629 * C51047 -
             (C117 * C761 + C50919 * C765) * C295 -
             (C117 * C766 + C50919 * C773) * C50835) *
                C2434 +
            (C2610 + C2611 - C2634 - C2635) * C50769) *
               C2438) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C2434 +
            (C357 - (C328 + C327) + C358) * C50769) *
               C2436 +
           ((C2608 - (C2607 + C2606) + C2609) * C2434 +
            (C2616 - (C2617 + C2618) + C2619) * C50769) *
               C2437 +
           ((C2634 - (C2611 + C2610) + C2635) * C2434 +
            (C2636 - (C2622 + C2623) + C2637) * C50769) *
               C2438) *
              C292 +
          ((C365 * C2434 + C366 * C50769) * C2436 +
           ((C2618 + C2617 - C2616 - C2619) * C2434 +
            (C351 * C294 + C352 * C51047 - C679 * C295 - C680 * C50835) *
                C50769) *
               C2437 +
           ((C2623 + C2622 - C2636 - C2637) * C2434 +
            (C679 * C294 + C680 * C51047 -
             (C117 * C764 + C50919 * C771) * C295 -
             (C117 * C772 + C50919 * C776) * C50835) *
                C50769) *
               C2438) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C2434 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C50769) *
              C2436 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C2434 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C50769) *
              C2437 +
          ((C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
            C3096 * C759 + C3097 * C754 -
            (C117 * C3083 + C50919 * C3085) * C760 -
            (C117 * C3086 + C50919 * C3089) * C755) *
               C2434 +
           (C675 * C757 + C676 * C752 - C2630 * C758 - C2631 * C753 +
            C2982 * C759 + C2983 * C754 -
            (C117 * C3084 + C50919 * C3087) * C760 -
            (C117 * C3088 + C50919 * C3090) * C755) *
               C50769) *
              C2438) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C294 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51047 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C295 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C50835) *
               C2434 +
           ((C5384 + C5385 + C5386) * C294 + (C5387 + C5388 + C5389) * C51047 -
            (C5572 + C5573 + C5574) * C295 - (C5575 + C5576 + C5577) * C50835) *
               C50769) *
              C50908 * C291 +
          (((C5574 + C5573 + C5572) * C295 -
            ((C5389 + C5388 + C5387) * C51047 +
             (C5386 + C5385 + C5384) * C294) +
            (C5577 + C5576 + C5575) * C50835) *
               C2434 +
           ((C5578 + C5579 + C5580) * C295 -
            ((C5390 + C5391 + C5392) * C51047 +
             (C5393 + C5394 + C5395) * C294) +
            (C5581 + C5582 + C5583) * C50835) *
               C50769) *
              C50908 * C292 +
          (((C5395 + C5394 + C5393) * C294 + (C5392 + C5391 + C5390) * C51047 -
            (C5580 + C5579 + C5578) * C295 - (C5583 + C5582 + C5581) * C50835) *
               C2434 +
           ((C5396 + C5397 + C5398) * C294 + (C5399 + C5400 + C5401) * C51047 -
            (C5346 * C1153 + C5343 * C1160 + C5345 * C881 + C5342 * C895 +
             C5344 * C299 + C5341 * C308) *
                C295 -
            (C5346 * C1161 + C5343 * C1165 + C5345 * C896 + C5342 * C905 +
             C5344 * C309 + C5341 * C317) *
                C50835) *
               C50769) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
            C5346 * C1008 + C5343 * C1013) *
               C757 +
           (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
            C5346 * C1014 + C5343 * C1023) *
               C752 -
           (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
            C5344 * C296 + C5341 * C302) *
               C758 -
           (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
            C5344 * C303 + C5341 * C314) *
               C753 +
           (C5344 * C630 + C5341 * C635 + C5345 * C876 + C5342 * C885 +
            C5346 * C3429 + C5343 * C3432) *
               C759 +
           (C5344 * C636 + C5341 * C645 + C5345 * C886 + C5342 * C900 +
            C5346 * C3433 + C5343 * C3438) *
               C754 -
           (C5346 * C3603 + C5343 * C3605 + C5345 * C3243 + C5342 * C3247 +
            C5344 * C761 + C5341 * C765) *
               C760 -
           (C5346 * C3606 + C5343 * C3609 + C5345 * C3248 + C5342 * C3255 +
            C5344 * C766 + C5341 * C773) *
               C755) *
              C2434 +
          ((C5384 + C5385 + C5386) * C757 + (C5387 + C5388 + C5389) * C752 -
           (C5572 + C5573 + C5574) * C758 - (C5575 + C5576 + C5577) * C753 +
           (C5924 + C5925 + C5926) * C759 + (C5927 + C5928 + C5929) * C754 -
           (C5346 * C3604 + C5343 * C3607 + C5345 * C3244 + C5342 * C3249 +
            C5344 * C762 + C5341 * C767) *
               C760 -
           (C5346 * C3608 + C5343 * C3610 + C5345 * C3250 + C5342 * C3256 +
            C5344 * C768 + C5341 * C774) *
               C755) *
              C50769) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 -
            (C117 * C296 + C50919 * C302) * C628 -
            (C117 * C303 + C50919 * C314) * C623 +
            (C117 * C630 + C50919 * C635) * C629 +
            (C117 * C636 + C50919 * C645) * C624) *
               C107 +
           (C651 + C652 - C653 - C654 + C681 + C682) * C108 +
           (C659 + C660 - C661 - C662 + C683 + C684) * C109 +
           (C667 + C668 - C669 - C670 + C685 + C686) * C110) *
              C50908 * C50785 * C51049 +
          (((C117 * C875 + C50919 * C883) * C628 -
            ((C117 * C480 + C50919 * C488) * C622 +
             (C117 * C470 + C50919 * C481) * C627) +
            (C117 * C884 + C50919 * C899) * C623 -
            (C117 * C876 + C50919 * C885) * C629 -
            (C117 * C886 + C50919 * C900) * C624) *
               C107 +
           ((C117 * C877 + C50919 * C887) * C628 - (C508 * C622 + C507 * C627) +
            (C117 * C888 + C50919 * C901) * C623 -
            (C117 * C878 + C50919 * C889) * C629 -
            (C117 * C890 + C50919 * C902) * C624) *
               C108 +
           ((C117 * C879 + C50919 * C891) * C628 - (C510 * C622 + C509 * C627) +
            (C117 * C892 + C50919 * C903) * C623 -
            (C117 * C880 + C50919 * C893) * C629 -
            (C117 * C894 + C50919 * C904) * C624) *
               C109 +
           ((C117 * C881 + C50919 * C895) * C628 - (C512 * C622 + C511 * C627) +
            (C117 * C896 + C50919 * C905) * C623 -
            (C117 * C882 + C50919 * C897) * C629 -
            (C117 * C898 + C50919 * C906) * C624) *
               C110) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50908 * C291 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50908 * C292 +
           (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50908 * C293) *
              C51049 +
          (((C515 + C516) * C107 + (C517 + C518) * C108 + (C519 + C520) * C109 +
            (C521 + C522) * C110) *
               C50908 * C292 -
           (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C107) *
               C50908 * C291 -
           (((C117 * C482 + C50919 * C489) * C50819 +
             (C117 * C471 + C50919 * C483) * C118) *
                C110 +
            (C522 + C521) * C109 + C523 * C108 + C524 * C107) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C291 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C292 +
           ((C188 * C2434 + C189 * C50769) * C2436 +
            ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
            ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
               C293) *
              C51049 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C292 -
           (((C2801 + C2800) * C50769 +
             ((C117 * C886 + C50919 * C900) * C50819 +
              (C117 * C876 + C50919 * C885) * C118) *
                 C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             ((C117 * C884 + C50919 * C899) * C50819 +
              (C117 * C875 + C50919 * C883) * C118) *
                 C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C291 -
           ((((C117 * C898 + C50919 * C906) * C50819 +
              (C117 * C882 + C50919 * C897) * C118) *
                 C50769 +
             (C2803 + C2802) * C2434) *
                C2438 +
            ((C1661 * C50819 + C1660 * C118) * C50769 +
             (C2787 + C2786) * C2434) *
                C2437 +
            (C523 * C50769 + C524 * C2434) * C2436) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C2434 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C2436 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C2434 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C2437 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             C3096 * C629 + C3097 * C624) *
                C2434 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C2438) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C2434 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C50769) *
               C2436 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C2434 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C50769) *
               C2437 +
           ((C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
             (C117 * C3245 + C50919 * C3251) * C629 -
             (C117 * C3252 + C50919 * C3257) * C624) *
                C2434 +
            (C3282 * C628 - (C2797 * C622 + C2796 * C627) + C3283 * C623 -
             (C117 * C3246 + C50919 * C3253) * C629 -
             (C117 * C3254 + C50919 * C3258) * C624) *
                C50769) *
               C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C2434 +
            ((C5384 + C5385 + C5386) * C118 +
             (C5387 + C5388 + C5389) * C50819) *
                C50769) *
               C50908 * C291 -
           (((C5390 + C5391 + C5392) * C50819 +
             (C5393 + C5394 + C5395) * C118) *
                C50769 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C2434) *
               C50908 * C292 +
           (((C5395 + C5394 + C5393) * C118 +
             (C5392 + C5391 + C5390) * C50819) *
                C2434 +
            ((C5396 + C5397 + C5398) * C118 +
             (C5399 + C5400 + C5401) * C50819) *
                C50769) *
               C50908 * C293) *
              C51049 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C2434 +
            ((C5760 + C5761 + C5762) * C118 +
             (C5763 + C5764 + C5765) * C50819) *
                C50769) *
               C50908 * C292 -
           (((C5759 + C5758 + C5757) * C50819 +
             (C5756 + C5755 + C5754) * C118) *
                C50769 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C2434) *
               C50908 * C291 -
           (((C5346 * C1240 + C5343 * C1248 + C5345 * C1020 + C5342 * C1026 +
              C5344 * C477 + C5341 * C486) *
                 C50819 +
             (C5346 * C1236 + C5343 * C1241 + C5345 * C1011 + C5342 * C1019 +
              C5344 * C468 + C5341 * C476) *
                 C118) *
                C50769 +
            ((C5765 + C5764 + C5763) * C50819 +
             (C5762 + C5761 + C5760) * C118) *
                C2434) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C627 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C622 -
            (C5346 * C1150 + C5343 * C1154 + C5345 * C875 + C5342 * C883 +
             C5344 * C296 + C5341 * C302) *
                C628 -
            (C5346 * C1155 + C5343 * C1162 + C5345 * C884 + C5342 * C899 +
             C5344 * C303 + C5341 * C314) *
                C623 +
            (C5344 * C630 + C5341 * C635 + C5345 * C876 + C5342 * C885 +
             C5346 * C3429 + C5343 * C3432) *
                C629 +
            (C5344 * C636 + C5341 * C645 + C5345 * C886 + C5342 * C900 +
             C5346 * C3433 + C5343 * C3438) *
                C624) *
               C2434 +
           ((C5384 + C5385 + C5386) * C627 + (C5387 + C5388 + C5389) * C622 -
            (C5572 + C5573 + C5574) * C628 - (C5575 + C5576 + C5577) * C623 +
            (C5924 + C5925 + C5926) * C629 + (C5927 + C5928 + C5929) * C624) *
               C50769) *
              C50908 * C50785 * C51049 +
          (((C5344 * C875 + C5341 * C883 + C5345 * C1150 + C5342 * C1154 +
             C5346 * C3724 + C5343 * C3732) *
                C628 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C622 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C627) +
            (C5344 * C884 + C5341 * C899 + C5345 * C1155 + C5342 * C1162 +
             C5346 * C3731 + C5343 * C3736) *
                C623 -
            (C5346 * C3722 + C5343 * C3728 + C5345 * C3429 + C5342 * C3432 +
             C5344 * C876 + C5341 * C885) *
                C629 -
            (C5346 * C3727 + C5343 * C3734 + C5345 * C3433 + C5342 * C3438 +
             C5344 * C886 + C5341 * C900) *
                C624) *
               C2434 +
           ((C5344 * C877 + C5341 * C887 + C5345 * C1151 + C5342 * C1156 +
             C5346 * C3723 + C5343 * C3730) *
                C628 -
            ((C5759 + C5758 + C5757) * C622 + (C5756 + C5755 + C5754) * C627) +
            (C5344 * C888 + C5341 * C901 + C5345 * C1157 + C5342 * C1163 +
             C5346 * C3729 + C5343 * C3735) *
                C623 -
            (C5346 * C3721 + C5343 * C3726 + C5345 * C3430 + C5342 * C3434 +
             C5344 * C878 + C5341 * C889) *
                C629 -
            (C5346 * C3725 + C5343 * C3733 + C5345 * C3435 + C5342 * C3439 +
             C5344 * C890 + C5341 * C902) *
                C624) *
               C50769) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C1355 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C1350 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C1356 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C50835) *
               C51091 +
           ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
            (C11104 + C11105) * C1356 - (C11106 + C11107) * C50835) *
               C51092 +
           C12290 * C8189) *
              C50908 * C51093 +
          (((C11105 + C11104) * C1356 -
            ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
            (C11107 + C11106) * C50835) *
               C51091 +
           ((C11110 + C11109) * C1356 -
            ((C10913 + C10912) * C1350 + (C10911 + C10910) * C1355) +
            (C11112 + C11111) * C50835) *
               C51092 +
           ((C11113 + C11114) * C1356 - (C10924 * C1350 + C10925 * C1355) +
            (C11115 + C11116) * C50835) *
               C8189) *
              C50908 * C51078 +
          (C12290 * C51091 +
           ((C10917 + C10916) * C1355 + (C10915 + C10914) * C1350 -
            (C11114 + C11113) * C1356 - (C11116 + C11115) * C50835) *
               C51092 +
           ((C10918 + C10919) * C1355 + (C10920 + C10921) * C1350 -
            (C10872 * C1633 + C50983 * C1634 + C10871 * C300 + C51064 * C310) *
                C1356 -
            (C10872 * C1635 + C50983 * C1636 + C10871 * C311 + C51064 * C318) *
                C50835) *
               C8189) *
              C50908 * C1354) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C1482 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51094 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C1483 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C51081 +
            (C10871 * C630 + C51064 * C635 + C10872 * C876 + C50983 * C885) *
                C1484 +
            (C10871 * C636 + C51064 * C645 + C10872 * C886 + C50983 * C900) *
                C1479) *
               C51091 +
           ((C10906 + C10907) * C1482 + (C10908 + C10909) * C51094 -
            (C11104 + C11105) * C1483 - (C11106 + C11107) * C51081 +
            (C11472 + C11473) * C1484 + (C11474 + C11475) * C1479) *
               C51092 +
           (C10922 * C1482 + C10923 * C51094 - C11117 * C1483 -
            C11118 * C51081 + (C11476 + C11477) * C1484 +
            (C11478 + C11479) * C1479) *
               C8189) *
              C50908 * C1480 +
          (((C11105 + C11104) * C1483 -
            ((C10909 + C10908) * C51094 + (C10907 + C10906) * C1482) +
            (C11107 + C11106) * C51081 - (C11473 + C11472) * C1484 -
            (C11475 + C11474) * C1479) *
               C51091 +
           ((C11110 + C11109) * C1483 -
            ((C10913 + C10912) * C51094 + (C10911 + C10910) * C1482) +
            (C11112 + C11111) * C51081 - (C11477 + C11476) * C1484 -
            (C11479 + C11478) * C1479) *
               C51092 +
           ((C11113 + C11114) * C1483 - (C10924 * C51094 + C10925 * C1482) +
            (C11115 + C11116) * C51081 -
            (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                C1484 -
            (C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                C1479) *
               C8189) *
              C50908 * C50790) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1355 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C1350 -
             (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                 C1356 -
             (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                 C50835) *
                C51091 +
            ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
             (C11104 + C11105) * C1356 - (C11106 + C11107) * C50835) *
                C51092 +
            C12290 * C8189) *
               C50908 * C1480 +
           (((C11105 + C11104) * C1356 -
             ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
             (C11107 + C11106) * C50835) *
                C51091 +
            ((C11110 + C11109) * C1356 -
             ((C10913 + C10912) * C1350 + (C10911 + C10910) * C1355) +
             (C11112 + C11111) * C50835) *
                C51092 +
            ((C11113 + C11114) * C1356 - (C10924 * C1350 + C10925 * C1355) +
             (C11115 + C11116) * C50835) *
                C8189) *
               C50908 * C50790) *
              C51049 +
          ((((C10871 * C875 + C51064 * C883 + C10872 * C1150 + C50983 * C1154) *
                 C1356 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C1350 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C1355) +
             (C10871 * C884 + C51064 * C899 + C10872 * C1155 + C50983 * C1162) *
                 C50835) *
                C51091 +
            ((C12647 + C12648) * C1356 -
             ((C11296 + C11295) * C1350 + (C11294 + C11293) * C1355) +
             (C12649 + C12650) * C50835) *
                C51092 +
            ((C12651 + C12652) * C1356 - (C11305 * C1350 + C11306 * C1355) +
             (C12653 + C12654) * C50835) *
                C8189) *
               C50908 * C1480 +
           (((C11293 + C11294) * C1355 + (C11295 + C11296) * C1350 -
             (C12648 + C12647) * C1356 - (C12650 + C12649) * C50835) *
                C51091 +
            ((C11297 + C11298) * C1355 + (C11299 + C11300) * C1350 -
             (C12652 + C12651) * C1356 - (C12654 + C12653) * C50835) *
                C51092 +
            ((C11301 + C11302) * C1355 + (C11303 + C11304) * C1350 -
             (C10872 * C1153 + C50983 * C1160 + C10871 * C881 + C51064 * C895) *
                 C1356 -
             (C10872 * C1161 + C50983 * C1165 + C10871 * C896 + C51064 * C905) *
                 C50835) *
                C8189) *
               C50908 * C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1355 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C1350 -
             (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                 C1356 -
             (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                 C50835) *
                C51091 +
            ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
             (C11104 + C11105) * C1356 - (C11106 + C11107) * C50835) *
                C51092 +
            C12290 * C8189) *
               C50908 * C51040 +
           (((C11105 + C11104) * C1356 -
             ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
             (C11107 + C11106) * C50835) *
                C51091 +
            ((C11110 + C11109) * C1356 -
             ((C10913 + C10912) * C1350 + (C10911 + C10910) * C1355) +
             (C11112 + C11111) * C50835) *
                C51092 +
            ((C11113 + C11114) * C1356 - (C10924 * C1350 + C10925 * C1355) +
             (C11115 + C11116) * C50835) *
                C8189) *
               C50908 * C50790) *
              C1765 +
          ((((C10871 * C875 + C51064 * C883 + C10872 * C1150 + C50983 * C1154) *
                 C1356 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C1350 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C1355) +
             (C10871 * C884 + C51064 * C899 + C10872 * C1155 + C50983 * C1162) *
                 C50835) *
                C51091 +
            ((C12647 + C12648) * C1356 -
             ((C11296 + C11295) * C1350 + (C11294 + C11293) * C1355) +
             (C12649 + C12650) * C50835) *
                C51092 +
            ((C12651 + C12652) * C1356 - (C11305 * C1350 + C11306 * C1355) +
             (C12653 + C12654) * C50835) *
                C8189) *
               C50908 * C51040 +
           (((C11293 + C11294) * C1355 + (C11295 + C11296) * C1350 -
             (C12648 + C12647) * C1356 - (C12650 + C12649) * C50835) *
                C51091 +
            ((C11297 + C11298) * C1355 + (C11299 + C11300) * C1350 -
             (C12652 + C12651) * C1356 - (C12654 + C12653) * C50835) *
                C51092 +
            ((C11301 + C11302) * C1355 + (C11303 + C11304) * C1350 -
             (C10872 * C1153 + C50983 * C1160 + C10871 * C881 + C51064 * C895) *
                 C1356 -
             (C10872 * C1161 + C50983 * C1165 + C10871 * C896 + C51064 * C905) *
                 C50835) *
                C8189) *
               C50908 * C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C1482 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51094 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C1483 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C51081 +
            (C10871 * C630 + C51064 * C635 + C10872 * C876 + C50983 * C885) *
                C1484 +
            (C10871 * C636 + C51064 * C645 + C10872 * C886 + C50983 * C900) *
                C1479) *
               C51091 +
           ((C10906 + C10907) * C1482 + (C10908 + C10909) * C51094 -
            (C11104 + C11105) * C1483 - (C11106 + C11107) * C51081 +
            (C11472 + C11473) * C1484 + (C11474 + C11475) * C1479) *
               C51092 +
           (C10922 * C1482 + C10923 * C51094 - C11117 * C1483 -
            C11118 * C51081 + (C11476 + C11477) * C1484 +
            (C11478 + C11479) * C1479) *
               C8189) *
              C50908 * C50785 * C1765 +
          (((C10871 * C875 + C51064 * C883 + C10872 * C1150 + C50983 * C1154) *
                C1483 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C51094 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C1482) +
            (C10871 * C884 + C51064 * C899 + C10872 * C1155 + C50983 * C1162) *
                C51081 -
            (C10872 * C3429 + C50983 * C3432 + C10871 * C876 + C51064 * C885) *
                C1484 -
            (C10872 * C3433 + C50983 * C3438 + C10871 * C886 + C51064 * C900) *
                C1479) *
               C51091 +
           ((C12647 + C12648) * C1483 -
            ((C11296 + C11295) * C51094 + (C11294 + C11293) * C1482) +
            (C12649 + C12650) * C51081 -
            (C10872 * C3430 + C50983 * C3434 + C10871 * C878 + C51064 * C889) *
                C1484 -
            (C10872 * C3435 + C50983 * C3439 + C10871 * C890 + C51064 * C902) *
                C1479) *
               C51092 +
           ((C12651 + C12652) * C1483 - (C11305 * C51094 + C11306 * C1482) +
            (C12653 + C12654) * C51081 -
            (C10872 * C3431 + C50983 * C3437 + C10871 * C880 + C51064 * C893) *
                C1484 -
            (C10872 * C3436 + C50983 * C3440 + C10871 * C894 + C51064 * C904) *
                C1479) *
               C8189) *
              C50908 * C50785 * C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C1355 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C1350 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C1356 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C50835) *
               C51091 +
           ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
            (C11104 + C11105) * C1356 - (C11106 + C11107) * C50835) *
               C51092 +
           C12290 * C8189) *
              C50908 * C50785 * C51095 +
          (((C10871 * C875 + C51064 * C883 + C10872 * C1150 + C50983 * C1154) *
                C1356 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C1350 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C1355) +
            (C10871 * C884 + C51064 * C899 + C10872 * C1155 + C50983 * C1162) *
                C50835) *
               C51091 +
           ((C12647 + C12648) * C1356 -
            ((C11296 + C11295) * C1350 + (C11294 + C11293) * C1355) +
            (C12649 + C12650) * C50835) *
               C51092 +
           ((C12651 + C12652) * C1356 - (C11305 * C1350 + C11306 * C1355) +
            (C12653 + C12654) * C50835) *
               C8189) *
              C50908 * C50785 * C51084 +
          (((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
             C50983 * C1247) *
                C1355 +
            (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
             C50983 * C1251) *
                C1350 -
            (C10872 * C3724 + C50983 * C3732 + C10871 * C1150 +
             C51064 * C1154) *
                C1356 -
            (C10872 * C3731 + C50983 * C3736 + C10871 * C1155 +
             C51064 * C1162) *
                C50835) *
               C51091 +
           ((C11886 + C11887) * C1355 + (C11888 + C11889) * C1350 -
            (C10872 * C3723 + C50983 * C3730 + C10871 * C1151 +
             C51064 * C1156) *
                C1356 -
            (C10872 * C3729 + C50983 * C3735 + C10871 * C1157 +
             C51064 * C1163) *
                C50835) *
               C51092 +
           ((C11890 + C11891) * C1355 + (C11892 + C11893) * C1350 -
            (C10872 * C7095 + C50983 * C7096 + C10871 * C1152 +
             C51064 * C1158) *
                C1356 -
            (C10872 * C7097 + C50983 * C7098 + C10871 * C1159 +
             C51064 * C1164) *
                C50835) *
               C8189) *
              C50908 * C50785 * C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C627 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C622 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C628 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C623 +
            (C10871 * C630 + C51064 * C635 + C10872 * C876 + C50983 * C885) *
                C629 +
            (C10871 * C636 + C51064 * C645 + C10872 * C886 + C50983 * C900) *
                C624) *
               C51091 +
           ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
            (C11104 + C11105) * C628 - (C11106 + C11107) * C623 +
            (C11472 + C11473) * C629 + (C11474 + C11475) * C624) *
               C51092 +
           (C10922 * C627 + C10923 * C622 - C11117 * C628 - C11118 * C623 +
            (C11476 + C11477) * C629 + (C11478 + C11479) * C624) *
               C8189) *
              C50908 * C51040 +
          (((C11105 + C11104) * C628 -
            ((C10909 + C10908) * C622 + (C10907 + C10906) * C627) +
            (C11107 + C11106) * C623 - (C11473 + C11472) * C629 -
            (C11475 + C11474) * C624) *
               C51091 +
           ((C11110 + C11109) * C628 -
            ((C10913 + C10912) * C622 + (C10911 + C10910) * C627) +
            (C11112 + C11111) * C623 - (C11477 + C11476) * C629 -
            (C11479 + C11478) * C624) *
               C51092 +
           ((C11113 + C11114) * C628 - (C10924 * C622 + C10925 * C627) +
            (C11115 + C11116) * C623 -
            (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                C629 -
            (C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                C624) *
               C8189) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C118 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C50819) *
               C51091 +
           ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C51092 +
           C10930 * C8189) *
              C50908 * C112 -
          (C10931 * C8189 +
           ((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C51092 +
           ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51091) *
              C50908 * C113 +
          (C10930 * C51091 +
           ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C51092 +
           ((C10918 + C10919) * C118 + (C10920 + C10921) * C50819) * C8189) *
              C50908 * C114 -
          (((C10872 * C482 + C50983 * C489 + C10871 * C137 + C51064 * C145) *
                C50819 +
            (C10872 * C471 + C50983 * C483 + C10871 * C124 + C51064 * C136) *
                C118) *
               C8189 +
           ((C10921 + C10920) * C50819 + (C10919 + C10918) * C118) * C51092 +
           C10931 * C51091) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C51091 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C51092 +
            C10930 * C8189) *
               C50908 * C51040 -
           (C10931 * C8189 +
            ((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C51092 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51091) *
               C50908 * C50790) *
              C1005 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51091 +
            ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C51092 +
            ((C11301 + C11302) * C118 + (C11303 + C11304) * C50819) * C8189) *
               C50908 * C50790 -
           (C11309 * C8189 +
            ((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C51092 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C51091) *
               C50908 * C51040) *
              C1006 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C51091 +
            ((C11886 + C11887) * C118 + (C11888 + C11889) * C50819) * C51092 +
            ((C11890 + C11891) * C118 + (C11892 + C11893) * C50819) * C8189) *
               C50908 * C51040 -
           (((C10872 * C1240 + C50983 * C1248 + C10871 * C1020 +
              C51064 * C1026) *
                 C50819 +
             (C10872 * C1236 + C50983 * C1241 + C10871 * C1011 +
              C51064 * C1019) *
                 C118) *
                C8189 +
            ((C11893 + C11892) * C50819 + (C11891 + C11890) * C118) * C51092 +
            ((C11889 + C11888) * C50819 + (C11887 + C11886) * C118) * C51091) *
               C50908 * C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
               C757 +
           (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
               C752 -
           (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
               C758 -
           (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
               C753 +
           (C10871 * C630 + C51064 * C635 + C10872 * C876 + C50983 * C885) *
               C759 +
           (C10871 * C636 + C51064 * C645 + C10872 * C886 + C50983 * C900) *
               C754 -
           (C10872 * C3243 + C50983 * C3247 + C10871 * C761 + C51064 * C765) *
               C760 -
           (C10872 * C3248 + C50983 * C3255 + C10871 * C766 + C51064 * C773) *
               C755) *
              C51091 +
          ((C10906 + C10907) * C757 + (C10908 + C10909) * C752 -
           (C11104 + C11105) * C758 - (C11106 + C11107) * C753 +
           (C11472 + C11473) * C759 + (C11474 + C11475) * C754 -
           (C10872 * C3244 + C50983 * C3249 + C10871 * C762 + C51064 * C767) *
               C760 -
           (C10872 * C3250 + C50983 * C3256 + C10871 * C768 + C51064 * C774) *
               C755) *
              C51092 +
          (C10922 * C757 + C10923 * C752 - C11117 * C758 - C11118 * C753 +
           (C11476 + C11477) * C759 + (C11478 + C11479) * C754 -
           (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
               C760 -
           (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
               C755) *
              C8189) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C294 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51047 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C295 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C50835) *
               C51091 +
           ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
            (C11104 + C11105) * C295 - (C11106 + C11107) * C50835) *
               C51092 +
           C11122 * C8189) *
              C50908 * C291 +
          (((C11105 + C11104) * C295 -
            ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
            (C11107 + C11106) * C50835) *
               C51091 +
           ((C11110 + C11109) * C295 -
            ((C10913 + C10912) * C51047 + (C10911 + C10910) * C294) +
            (C11112 + C11111) * C50835) *
               C51092 +
           ((C11113 + C11114) * C295 - (C10924 * C51047 + C10925 * C294) +
            (C11115 + C11116) * C50835) *
               C8189) *
              C50908 * C292 +
          (C11122 * C51091 +
           ((C10917 + C10916) * C294 + (C10915 + C10914) * C51047 -
            (C11114 + C11113) * C295 - (C11116 + C11115) * C50835) *
               C51092 +
           ((C10918 + C10919) * C294 + (C10920 + C10921) * C51047 -
            (C10872 * C1633 + C50983 * C1634 + C10871 * C300 + C51064 * C310) *
                C295 -
            (C10872 * C1635 + C50983 * C1636 + C10871 * C311 + C51064 * C318) *
                C50835) *
               C8189) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C294 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51047 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C295 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C50835) *
               C51091 +
           ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
            (C11104 + C11105) * C295 - (C11106 + C11107) * C50835) *
               C51092 +
           C11122 * C8189) *
              C50908 * C50785 * C1005 +
          (((C10871 * C875 + C51064 * C883 + C10872 * C1150 + C50983 * C1154) *
                C295 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C51047 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C294) +
            (C10871 * C884 + C51064 * C899 + C10872 * C1155 + C50983 * C1162) *
                C50835) *
               C51091 +
           ((C10871 * C877 + C51064 * C887 + C10872 * C1151 + C50983 * C1156) *
                C295 -
            ((C11296 + C11295) * C51047 + (C11294 + C11293) * C294) +
            (C10871 * C888 + C51064 * C901 + C10872 * C1157 + C50983 * C1163) *
                C50835) *
               C51092 +
           ((C10871 * C879 + C51064 * C891 + C10872 * C1152 + C50983 * C1158) *
                C295 -
            (C11305 * C51047 + C11306 * C294) +
            (C10871 * C892 + C51064 * C903 + C10872 * C1159 + C50983 * C1164) *
                C50835) *
               C8189) *
              C50908 * C50785 * C1006 +
          (((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
             C50983 * C1247) *
                C294 +
            (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
             C50983 * C1251) *
                C51047 -
            (C10872 * C3724 + C50983 * C3732 + C10871 * C1150 +
             C51064 * C1154) *
                C295 -
            (C10872 * C3731 + C50983 * C3736 + C10871 * C1155 +
             C51064 * C1162) *
                C50835) *
               C51091 +
           ((C11886 + C11887) * C294 + (C11888 + C11889) * C51047 -
            (C10872 * C3723 + C50983 * C3730 + C10871 * C1151 +
             C51064 * C1156) *
                C295 -
            (C10872 * C3729 + C50983 * C3735 + C10871 * C1157 +
             C51064 * C1163) *
                C50835) *
               C51092 +
           ((C11890 + C11891) * C294 + (C11892 + C11893) * C51047 -
            (C10872 * C7095 + C50983 * C7096 + C10871 * C1152 +
             C51064 * C1158) *
                C295 -
            (C10872 * C7097 + C50983 * C7098 + C10871 * C1159 +
             C51064 * C1164) *
                C50835) *
               C8189) *
              C50908 * C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C627 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C622 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C628 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C623 +
            (C10871 * C630 + C51064 * C635 + C10872 * C876 + C50983 * C885) *
                C629 +
            (C10871 * C636 + C51064 * C645 + C10872 * C886 + C50983 * C900) *
                C624) *
               C51091 +
           ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
            (C11104 + C11105) * C628 - (C11106 + C11107) * C623 +
            (C11472 + C11473) * C629 + (C11474 + C11475) * C624) *
               C51092 +
           (C10922 * C627 + C10923 * C622 - C11117 * C628 - C11118 * C623 +
            (C11476 + C11477) * C629 + (C11478 + C11479) * C624) *
               C8189) *
              C50908 * C50785 * C51049 +
          (((C10871 * C875 + C51064 * C883 + C10872 * C1150 + C50983 * C1154) *
                C628 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C622 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C627) +
            (C10871 * C884 + C51064 * C899 + C10872 * C1155 + C50983 * C1162) *
                C623 -
            (C10872 * C3429 + C50983 * C3432 + C10871 * C876 + C51064 * C885) *
                C629 -
            (C10872 * C3433 + C50983 * C3438 + C10871 * C886 + C51064 * C900) *
                C624) *
               C51091 +
           ((C10871 * C877 + C51064 * C887 + C10872 * C1151 + C50983 * C1156) *
                C628 -
            ((C11296 + C11295) * C622 + (C11294 + C11293) * C627) +
            (C10871 * C888 + C51064 * C901 + C10872 * C1157 + C50983 * C1163) *
                C623 -
            (C10872 * C3430 + C50983 * C3434 + C10871 * C878 + C51064 * C889) *
                C629 -
            (C10872 * C3435 + C50983 * C3439 + C10871 * C890 + C51064 * C902) *
                C624) *
               C51092 +
           ((C10871 * C879 + C51064 * C891 + C10872 * C1152 + C50983 * C1158) *
                C628 -
            (C11305 * C622 + C11306 * C627) +
            (C10871 * C892 + C51064 * C903 + C10872 * C1159 + C50983 * C1164) *
                C623 -
            (C10872 * C3431 + C50983 * C3437 + C10871 * C880 + C51064 * C893) *
                C629 -
            (C10872 * C3436 + C50983 * C3440 + C10871 * C894 + C51064 * C904) *
                C624) *
               C8189) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C51091 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C51092 +
            C10930 * C8189) *
               C50908 * C291 -
           (C10931 * C8189 +
            ((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C51092 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51091) *
               C50908 * C292 +
           (C10930 * C51091 +
            ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C51092 +
            ((C10918 + C10919) * C118 + (C10920 + C10921) * C50819) * C8189) *
               C50908 * C293) *
              C51049 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51091 +
            ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C51092 +
            ((C11301 + C11302) * C118 + (C11303 + C11304) * C50819) * C8189) *
               C50908 * C292 -
           (C11309 * C8189 +
            ((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C51092 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C51091) *
               C50908 * C291 -
           (((C10872 * C1021 + C50983 * C1027 + C10871 * C479 + C51064 * C487) *
                 C50819 +
             (C10872 * C1012 + C50983 * C1022 + C10871 * C469 + C51064 * C478) *
                 C118) *
                C8189 +
            ((C11304 + C11303) * C50819 + (C11302 + C11301) * C118) * C51092 +
            C11309 * C51091) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C118 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C50819) *
               C51091 +
           ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C51092 +
           C10930 * C8189) *
              C50908 * C50785 * C1232 -
          (C11309 * C8189 +
           ((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C51092 +
           ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                C50819 +
            (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                C118) *
               C51091) *
              C50908 * C50785 * C1233 +
          (((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
             C50983 * C1247) *
                C118 +
            (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
             C50983 * C1251) *
                C50819) *
               C51091 +
           ((C11886 + C11887) * C118 + (C11888 + C11889) * C50819) * C51092 +
           ((C11890 + C11891) * C118 + (C11892 + C11893) * C50819) * C8189) *
              C50908 * C50785 * C1234 -
          (((C10872 * C6326 + C50983 * C6330 + C10871 * C1242 +
             C51064 * C1249) *
                C50819 +
            (C10872 * C6321 + C50983 * C6327 + C10871 * C1237 +
             C51064 * C1243) *
                C118) *
               C8189 +
           ((C10872 * C6325 + C50983 * C6329 + C10871 * C1244 +
             C51064 * C1250) *
                C50819 +
            (C10872 * C6320 + C50983 * C6324 + C10871 * C1238 +
             C51064 * C1245) *
                C118) *
               C51092 +
           ((C10872 * C6323 + C50983 * C6328 + C10871 * C1246 +
             C51064 * C1251) *
                C50819 +
            (C10872 * C6319 + C50983 * C6322 + C10871 * C1239 +
             C51064 * C1247) *
                C118) *
               C51091) *
              C50908 * C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C51091 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C51092 +
            C10930 * C8189) *
               C50908 * C51093 -
           (C10931 * C8189 +
            ((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C51092 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51091) *
               C50908 * C51078 +
           (C10930 * C51091 +
            ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C51092 +
            ((C10918 + C10919) * C118 + (C10920 + C10921) * C50819) * C8189) *
               C50908 * C1354) *
              C1765 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51091 +
            ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C51092 +
            ((C11301 + C11302) * C118 + (C11303 + C11304) * C50819) * C8189) *
               C50908 * C51078 -
           (C11309 * C8189 +
            ((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C51092 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C51091) *
               C50908 * C51093 -
           (((C10872 * C1021 + C50983 * C1027 + C10871 * C479 + C51064 * C487) *
                 C50819 +
             (C10872 * C1012 + C50983 * C1022 + C10871 * C469 + C51064 * C478) *
                 C118) *
                C8189 +
            ((C11304 + C11303) * C50819 + (C11302 + C11301) * C118) * C51092 +
            C11309 * C51091) *
               C50908 * C1354) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C294 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51047 -
             (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                 C295 -
             (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                 C50835) *
                C51091 +
            ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
             (C11104 + C11105) * C295 - (C11106 + C11107) * C50835) *
                C51092 +
            C11122 * C8189) *
               C50908 * C1480 +
           (((C11105 + C11104) * C295 -
             ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
             (C11107 + C11106) * C50835) *
                C51091 +
            ((C11110 + C11109) * C295 -
             ((C10913 + C10912) * C51047 + (C10911 + C10910) * C294) +
             (C11112 + C11111) * C50835) *
                C51092 +
            ((C11113 + C11114) * C295 - (C10924 * C51047 + C10925 * C294) +
             (C11115 + C11116) * C50835) *
                C8189) *
               C50908 * C50790) *
              C1765 +
          ((((C10871 * C875 + C51064 * C883 + C10872 * C1150 + C50983 * C1154) *
                 C295 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C51047 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C294) +
             (C10871 * C884 + C51064 * C899 + C10872 * C1155 + C50983 * C1162) *
                 C50835) *
                C51091 +
            ((C12647 + C12648) * C295 -
             ((C11296 + C11295) * C51047 + (C11294 + C11293) * C294) +
             (C12649 + C12650) * C50835) *
                C51092 +
            ((C12651 + C12652) * C295 - (C11305 * C51047 + C11306 * C294) +
             (C12653 + C12654) * C50835) *
                C8189) *
               C50908 * C1480 +
           (((C11293 + C11294) * C294 + (C11295 + C11296) * C51047 -
             (C12648 + C12647) * C295 - (C12650 + C12649) * C50835) *
                C51091 +
            ((C11297 + C11298) * C294 + (C11299 + C11300) * C51047 -
             (C12652 + C12651) * C295 - (C12654 + C12653) * C50835) *
                C51092 +
            ((C11301 + C11302) * C294 + (C11303 + C11304) * C51047 -
             (C10872 * C1153 + C50983 * C1160 + C10871 * C881 + C51064 * C895) *
                 C295 -
             (C10872 * C1161 + C50983 * C1165 + C10871 * C896 + C51064 * C905) *
                 C50835) *
                C8189) *
               C50908 * C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C51091 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C51092 +
            C10930 * C8189) *
               C50908 * C1480 -
           (C10931 * C8189 +
            ((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C51092 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51091) *
               C50908 * C50790) *
              C51095 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51091 +
            ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C51092 +
            ((C11301 + C11302) * C118 + (C11303 + C11304) * C50819) * C8189) *
               C50908 * C50790 -
           (C11309 * C8189 +
            ((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C51092 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C51091) *
               C50908 * C1480) *
              C51084 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C51091 +
            ((C11886 + C11887) * C118 + (C11888 + C11889) * C50819) * C51092 +
            ((C11890 + C11891) * C118 + (C11892 + C11893) * C50819) * C8189) *
               C50908 * C1480 -
           (((C10872 * C1240 + C50983 * C1248 + C10871 * C1020 +
              C51064 * C1026) *
                 C50819 +
             (C10872 * C1236 + C50983 * C1241 + C10871 * C1011 +
              C51064 * C1019) *
                 C118) *
                C8189 +
            ((C11893 + C11892) * C50819 + (C11891 + C11890) * C118) * C51092 +
            ((C11889 + C11888) * C50819 + (C11887 + C11886) * C118) * C51091) *
               C50908 * C50790) *
              C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C118 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C50819) *
               C51091 +
           ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C51092 +
           C10930 * C8189) *
              C50908 * C112 -
          (C10931 * C8189 +
           ((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C51092 +
           ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51091) *
              C50908 * C113 +
          (C10930 * C51091 +
           ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C51092 +
           ((C10918 + C10919) * C118 + (C10920 + C10921) * C50819) * C8189) *
              C50908 * C114 -
          (((C10872 * C482 + C50983 * C489 + C10871 * C137 + C51064 * C145) *
                C50819 +
            (C10872 * C471 + C50983 * C483 + C10871 * C124 + C51064 * C136) *
                C118) *
               C8189 +
           ((C10921 + C10920) * C50819 + (C10919 + C10918) * C118) * C51092 +
           C10931 * C51091) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C627 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C622 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C628 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C623 +
            (C10871 * C630 + C51064 * C635 + C10872 * C876 + C50983 * C885) *
                C629 +
            (C10871 * C636 + C51064 * C645 + C10872 * C886 + C50983 * C900) *
                C624) *
               C51091 +
           ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
            (C11104 + C11105) * C628 - (C11106 + C11107) * C623 +
            (C11472 + C11473) * C629 + (C11474 + C11475) * C624) *
               C51092 +
           (C10922 * C627 + C10923 * C622 - C11117 * C628 - C11118 * C623 +
            (C11476 + C11477) * C629 + (C11478 + C11479) * C624) *
               C8189) *
              C50908 * C51040 +
          (((C11105 + C11104) * C628 -
            ((C10909 + C10908) * C622 + (C10907 + C10906) * C627) +
            (C11107 + C11106) * C623 - (C11473 + C11472) * C629 -
            (C11475 + C11474) * C624) *
               C51091 +
           ((C11110 + C11109) * C628 -
            ((C10913 + C10912) * C622 + (C10911 + C10910) * C627) +
            (C11112 + C11111) * C623 - (C11477 + C11476) * C629 -
            (C11479 + C11478) * C624) *
               C51092 +
           ((C11113 + C11114) * C628 - (C10924 * C622 + C10925 * C627) +
            (C11115 + C11116) * C623 -
            (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                C629 -
            (C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                C624) *
               C8189) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C294 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51047 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C295 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C50835) *
               C51091 +
           ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
            (C11104 + C11105) * C295 - (C11106 + C11107) * C50835) *
               C51092 +
           C11122 * C8189) *
              C50908 * C291 +
          (((C11105 + C11104) * C295 -
            ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
            (C11107 + C11106) * C50835) *
               C51091 +
           ((C11110 + C11109) * C295 -
            ((C10913 + C10912) * C51047 + (C10911 + C10910) * C294) +
            (C11112 + C11111) * C50835) *
               C51092 +
           ((C11113 + C11114) * C295 - (C10924 * C51047 + C10925 * C294) +
            (C11115 + C11116) * C50835) *
               C8189) *
              C50908 * C292 +
          (C11122 * C51091 +
           ((C10917 + C10916) * C294 + (C10915 + C10914) * C51047 -
            (C11114 + C11113) * C295 - (C11116 + C11115) * C50835) *
               C51092 +
           ((C10918 + C10919) * C294 + (C10920 + C10921) * C51047 -
            (C10872 * C1633 + C50983 * C1634 + C10871 * C300 + C51064 * C310) *
                C295 -
            (C10872 * C1635 + C50983 * C1636 + C10871 * C311 + C51064 * C318) *
                C50835) *
               C8189) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
               C757 +
           (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
               C752 -
           (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
               C758 -
           (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
               C753 +
           (C10871 * C630 + C51064 * C635 + C10872 * C876 + C50983 * C885) *
               C759 +
           (C10871 * C636 + C51064 * C645 + C10872 * C886 + C50983 * C900) *
               C754 -
           (C10872 * C3243 + C50983 * C3247 + C10871 * C761 + C51064 * C765) *
               C760 -
           (C10872 * C3248 + C50983 * C3255 + C10871 * C766 + C51064 * C773) *
               C755) *
              C51091 +
          ((C10906 + C10907) * C757 + (C10908 + C10909) * C752 -
           (C11104 + C11105) * C758 - (C11106 + C11107) * C753 +
           (C11472 + C11473) * C759 + (C11474 + C11475) * C754 -
           (C10872 * C3244 + C50983 * C3249 + C10871 * C762 + C51064 * C767) *
               C760 -
           (C10872 * C3250 + C50983 * C3256 + C10871 * C768 + C51064 * C774) *
               C755) *
              C51092 +
          (C10922 * C757 + C10923 * C752 - C11117 * C758 - C11118 * C753 +
           (C11476 + C11477) * C759 + (C11478 + C11479) * C754 -
           (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
               C760 -
           (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
               C755) *
              C8189) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C51091 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C51092 +
            C10930 * C8189) *
               C50908 * C291 -
           (C10931 * C8189 +
            ((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C51092 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51091) *
               C50908 * C292 +
           (C10930 * C51091 +
            ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C51092 +
            ((C10918 + C10919) * C118 + (C10920 + C10921) * C50819) * C8189) *
               C50908 * C293) *
              C51049 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51091 +
            ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C51092 +
            ((C11301 + C11302) * C118 + (C11303 + C11304) * C50819) * C8189) *
               C50908 * C292 -
           (C11309 * C8189 +
            ((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C51092 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C51091) *
               C50908 * C291 -
           (((C10872 * C1021 + C50983 * C1027 + C10871 * C479 + C51064 * C487) *
                 C50819 +
             (C10872 * C1012 + C50983 * C1022 + C10871 * C469 + C51064 * C478) *
                 C118) *
                C8189 +
            ((C11304 + C11303) * C50819 + (C11302 + C11301) * C118) * C51092 +
            C11309 * C51091) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C627 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C622 -
            (C10872 * C875 + C50983 * C883 + C10871 * C296 + C51064 * C302) *
                C628 -
            (C10872 * C884 + C50983 * C899 + C10871 * C303 + C51064 * C314) *
                C623 +
            (C10871 * C630 + C51064 * C635 + C10872 * C876 + C50983 * C885) *
                C629 +
            (C10871 * C636 + C51064 * C645 + C10872 * C886 + C50983 * C900) *
                C624) *
               C51091 +
           ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
            (C11104 + C11105) * C628 - (C11106 + C11107) * C623 +
            (C11472 + C11473) * C629 + (C11474 + C11475) * C624) *
               C51092 +
           (C10922 * C627 + C10923 * C622 - C11117 * C628 - C11118 * C623 +
            (C11476 + C11477) * C629 + (C11478 + C11479) * C624) *
               C8189) *
              C50908 * C50785 * C51049 +
          (((C10871 * C875 + C51064 * C883 + C10872 * C1150 + C50983 * C1154) *
                C628 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C622 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C627) +
            (C10871 * C884 + C51064 * C899 + C10872 * C1155 + C50983 * C1162) *
                C623 -
            (C10872 * C3429 + C50983 * C3432 + C10871 * C876 + C51064 * C885) *
                C629 -
            (C10872 * C3433 + C50983 * C3438 + C10871 * C886 + C51064 * C900) *
                C624) *
               C51091 +
           ((C10871 * C877 + C51064 * C887 + C10872 * C1151 + C50983 * C1156) *
                C628 -
            ((C11296 + C11295) * C622 + (C11294 + C11293) * C627) +
            (C10871 * C888 + C51064 * C901 + C10872 * C1157 + C50983 * C1163) *
                C623 -
            (C10872 * C3430 + C50983 * C3434 + C10871 * C878 + C51064 * C889) *
                C629 -
            (C10872 * C3435 + C50983 * C3439 + C10871 * C890 + C51064 * C902) *
                C624) *
               C51092 +
           ((C10871 * C879 + C51064 * C891 + C10872 * C1152 + C50983 * C1158) *
                C628 -
            (C11305 * C622 + C11306 * C627) +
            (C10871 * C892 + C51064 * C903 + C10872 * C1159 + C50983 * C1164) *
                C623 -
            (C10872 * C3431 + C50983 * C3437 + C10871 * C880 + C51064 * C893) *
                C629 -
            (C10872 * C3436 + C50983 * C3440 + C10871 * C894 + C51064 * C904) *
                C624) *
               C8189) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1355 +
            (C117 * C127 + C50919 * C140) * C1350 -
            (C117 * C296 + C50919 * C302) * C1356 -
            (C117 * C303 + C50919 * C314) * C50835) *
               C107 +
           (C1358 + C1359 - C1360 - C1361) * C108 + C1378 * C109 +
           C1379 * C110) *
              C50908 * C51093 +
          ((C1360 - (C1359 + C1358) + C1361) * C107 +
           (C1364 - (C1363 + C1362) + C1365) * C108 +
           (C1368 - (C1367 + C1366) + C1369) * C109 +
           (C1370 - (C1371 + C1372) + C1373) * C110) *
              C50908 * C51078 +
          (C1378 * C107 + C1379 * C108 +
           (C1372 + C1371 - C1370 - C1373) * C109 +
           (C176 * C1355 + C177 * C1350 -
            (C117 * C301 + C50919 * C312) * C1356 -
            (C117 * C313 + C50919 * C319) * C50835) *
               C110) *
              C50908 * C1354) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C2434 +
            (C1358 + C1359 - C1360 - C1361) * C50769) *
               C2436 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C2434 +
            (C3884 + C3885 - C3886 - C3887) * C50769) *
               C2437 +
           ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C2434 +
            (C3888 + C3889 - C3890 - C3891) * C50769) *
               C2438) *
              C51093 +
          (((C1360 - (C1359 + C1358) + C1361) * C2434 +
            (C1364 - (C1363 + C1362) + C1365) * C50769) *
               C2436 +
           ((C3886 - (C3885 + C3884) + C3887) * C2434 +
            (C3892 - (C3893 + C3894) + C3895) * C50769) *
               C2437 +
           ((C3890 - (C3889 + C3888) + C3891) * C2434 +
            (C3896 - (C3897 + C3898) + C3899) * C50769) *
               C2438) *
              C51078 +
          ((C1378 * C2434 + C1379 * C50769) * C2436 +
           ((C3894 + C3893 - C3892 - C3895) * C2434 +
            (C351 * C1355 + C352 * C1350 - C679 * C1356 - C680 * C50835) *
                C50769) *
               C2437 +
           ((C3898 + C3897 - C3896 - C3899) * C2434 +
            (C679 * C1355 + C680 * C1350 -
             (C117 * C764 + C50919 * C771) * C1356 -
             (C117 * C772 + C50919 * C776) * C50835) *
                C50769) *
               C2438) *
              C1354) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1482 +
            (C117 * C127 + C50919 * C140) * C51094 -
            (C117 * C296 + C50919 * C302) * C1483 -
            (C117 * C303 + C50919 * C314) * C51081 +
            (C117 * C630 + C50919 * C635) * C1484 +
            (C117 * C636 + C50919 * C645) * C1479) *
               C107 +
           (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C108 +
           (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C109 +
           (C1498 + C1499 - C1500 - C1501 + C1502 + C1503) * C110) *
              C50908 * C1480 +
          ((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C107 +
           (C1494 - (C1493 + C1492) + C1495 - C1496 - C1497) * C108 +
           (C1500 - (C1499 + C1498) + C1501 - C1502 - C1503) * C109 +
           (C353 * C1483 - (C174 * C51094 + C175 * C1482) + C354 * C51081 -
            (C117 * C634 + C50919 * C643) * C1484 -
            (C117 * C644 + C50919 * C649) * C1479) *
               C110) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1482 +
             (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
             C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                C2434 +
            (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C50769) *
               C2436 +
           ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
             C2980 * C1484 + C2981 * C1479) *
                C2434 +
            (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C50769) *
               C2437 +
           ((C2628 * C1482 + C2629 * C51094 - C2980 * C1483 - C2981 * C51081 +
             C3096 * C1484 + C3097 * C1479) *
                C2434 +
            (C4052 + C4053 - C4054 - C4055 + C4056 + C4057) * C50769) *
               C2438) *
              C1480 +
          (((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C2434 +
            (C1494 - (C1493 + C1492) + C1495 - C1496 - C1497) * C50769) *
               C2436 +
           ((C4048 - (C4047 + C4046) + C4049 - C4050 - C4051) * C2434 +
            (C677 * C1483 - (C349 * C51094 + C348 * C1482) + C678 * C51081 -
             C2632 * C1484 - C2633 * C1479) *
                C50769) *
               C2437 +
           ((C4054 - (C4053 + C4052) + C4055 - C4056 - C4057) * C2434 +
            (C2632 * C1483 - (C678 * C51094 + C677 * C1482) + C2633 * C51081 -
             (C117 * C2951 + C50919 * C2956) * C1484 -
             (C117 * C2957 + C50919 * C2960) * C1479) *
                C50769) *
               C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 -
             (C117 * C296 + C50919 * C302) * C1356 -
             (C117 * C303 + C50919 * C314) * C50835) *
                C107 +
            (C1358 + C1359 - C1360 - C1361) * C108 + C1378 * C109 +
            C1379 * C110) *
               C50908 * C1480 +
           ((C1360 - (C1359 + C1358) + C1361) * C107 +
            (C1364 - (C1363 + C1362) + C1365) * C108 +
            (C1368 - (C1367 + C1366) + C1369) * C109 +
            (C1370 - (C1371 + C1372) + C1373) * C110) *
               C50908 * C50790) *
              C51049 +
          ((((C117 * C875 + C50919 * C883) * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             (C117 * C884 + C50919 * C899) * C50835) *
                C107 +
            (C1662 - (C1640 + C1641) + C1663) * C108 +
            (C1664 - (C1646 + C1647) + C1665) * C109 +
            (C1666 - (C1652 + C1653) + C1667) * C110) *
               C50908 * C1480 +
           ((C1641 + C1640 - C1662 - C1663) * C107 +
            (C1647 + C1646 - C1664 - C1665) * C108 +
            (C1653 + C1652 - C1666 - C1667) * C109 +
            (C513 * C1355 + C514 * C1350 -
             (C117 * C1633 + C50919 * C1634) * C1356 -
             (C117 * C1635 + C50919 * C1636) * C50835) *
                C110) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C2434 +
             (C1358 + C1359 - C1360 - C1361) * C50769) *
                C2436 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C2434 +
             (C3884 + C3885 - C3886 - C3887) * C50769) *
                C2437 +
            ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                 C2434 +
             (C3888 + C3889 - C3890 - C3891) * C50769) *
                C2438) *
               C1480 +
           (((C1360 - (C1359 + C1358) + C1361) * C2434 +
             (C1364 - (C1363 + C1362) + C1365) * C50769) *
                C2436 +
            ((C3886 - (C3885 + C3884) + C3887) * C2434 +
             (C3892 - (C3893 + C3894) + C3895) * C50769) *
                C2437 +
            ((C3890 - (C3889 + C3888) + C3891) * C2434 +
             (C3896 - (C3897 + C3898) + C3899) * C50769) *
                C2438) *
               C50790) *
              C51049 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C2434 +
             (C1662 - (C1640 + C1641) + C1663) * C50769) *
                C2436 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C2434 +
             (C4256 - (C4257 + C4258) + C4259) * C50769) *
                C2437 +
            ((C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) +
              C3281 * C50835) *
                 C2434 +
             (C4260 - (C4261 + C4262) + C4263) * C50769) *
                C2438) *
               C1480 +
           (((C1641 + C1640 - C1662 - C1663) * C2434 +
             (C1647 + C1646 - C1664 - C1665) * C50769) *
                C2436 +
            ((C4258 + C4257 - C4256 - C4259) * C2434 +
             (C1658 * C1355 + C1659 * C1350 - C2798 * C1356 - C2799 * C50835) *
                 C50769) *
                C2437 +
            ((C4262 + C4261 - C4260 - C4263) * C2434 +
             (C2798 * C1355 + C2799 * C1350 -
              (C117 * C4251 + C50919 * C4252) * C1356 -
              (C117 * C4253 + C50919 * C4254) * C50835) *
                 C50769) *
                C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 -
             (C117 * C296 + C50919 * C302) * C1356 -
             (C117 * C303 + C50919 * C314) * C50835) *
                C107 +
            (C1358 + C1359 - C1360 - C1361) * C108 + C1378 * C109 +
            C1379 * C110) *
               C50908 * C51040 +
           ((C1360 - (C1359 + C1358) + C1361) * C107 +
            (C1364 - (C1363 + C1362) + C1365) * C108 +
            (C1368 - (C1367 + C1366) + C1369) * C109 +
            (C1370 - (C1371 + C1372) + C1373) * C110) *
               C50908 * C50790) *
              C1765 +
          ((((C117 * C875 + C50919 * C883) * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             (C117 * C884 + C50919 * C899) * C50835) *
                C107 +
            (C1662 - (C1640 + C1641) + C1663) * C108 +
            (C1664 - (C1646 + C1647) + C1665) * C109 +
            (C1666 - (C1652 + C1653) + C1667) * C110) *
               C50908 * C51040 +
           ((C1641 + C1640 - C1662 - C1663) * C107 +
            (C1647 + C1646 - C1664 - C1665) * C108 +
            (C1653 + C1652 - C1666 - C1667) * C109 +
            (C513 * C1355 + C514 * C1350 -
             (C117 * C1633 + C50919 * C1634) * C1356 -
             (C117 * C1635 + C50919 * C1636) * C50835) *
                C110) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C2434 +
             (C1358 + C1359 - C1360 - C1361) * C50769) *
                C2436 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C2434 +
             (C3884 + C3885 - C3886 - C3887) * C50769) *
                C2437 +
            ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                 C2434 +
             (C3888 + C3889 - C3890 - C3891) * C50769) *
                C2438) *
               C51040 +
           (((C1360 - (C1359 + C1358) + C1361) * C2434 +
             (C1364 - (C1363 + C1362) + C1365) * C50769) *
                C2436 +
            ((C3886 - (C3885 + C3884) + C3887) * C2434 +
             (C3892 - (C3893 + C3894) + C3895) * C50769) *
                C2437 +
            ((C3890 - (C3889 + C3888) + C3891) * C2434 +
             (C3896 - (C3897 + C3898) + C3899) * C50769) *
                C2438) *
               C50790) *
              C1765 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C2434 +
             (C1662 - (C1640 + C1641) + C1663) * C50769) *
                C2436 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C2434 +
             (C4256 - (C4257 + C4258) + C4259) * C50769) *
                C2437 +
            ((C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) +
              C3281 * C50835) *
                 C2434 +
             (C4260 - (C4261 + C4262) + C4263) * C50769) *
                C2438) *
               C51040 +
           (((C1641 + C1640 - C1662 - C1663) * C2434 +
             (C1647 + C1646 - C1664 - C1665) * C50769) *
                C2436 +
            ((C4258 + C4257 - C4256 - C4259) * C2434 +
             (C1658 * C1355 + C1659 * C1350 - C2798 * C1356 - C2799 * C50835) *
                 C50769) *
                C2437 +
            ((C4262 + C4261 - C4260 - C4263) * C2434 +
             (C2798 * C1355 + C2799 * C1350 -
              (C117 * C4251 + C50919 * C4252) * C1356 -
              (C117 * C4253 + C50919 * C4254) * C50835) *
                 C50769) *
                C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C117 * C119 + C50919 * C126) * C1482 +
                    (C117 * C127 + C50919 * C140) * C51094 -
                    (C117 * C296 + C50919 * C302) * C1483 -
                    (C117 * C303 + C50919 * C314) * C51081 +
                    (C117 * C630 + C50919 * C635) * C1484 +
                    (C117 * C636 + C50919 * C645) * C1479) *
                       C107 +
                   (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C108 +
                   (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C109 +
                   (C1498 + C1499 - C1500 - C1501 + C1502 + C1503) * C110) *
                      C50908 * C50785 * C1765 +
                  (((C117 * C875 + C50919 * C883) * C1483 -
                    ((C117 * C480 + C50919 * C488) * C51094 +
                     (C117 * C470 + C50919 * C481) * C1482) +
                    (C117 * C884 + C50919 * C899) * C51081 -
                    (C117 * C876 + C50919 * C885) * C1484 -
                    (C117 * C886 + C50919 * C900) * C1479) *
                       C107 +
                   (C1656 * C1483 - (C508 * C51094 + C507 * C1482) +
                    C1657 * C51081 - (C117 * C878 + C50919 * C889) * C1484 -
                    (C117 * C890 + C50919 * C902) * C1479) *
                       C108 +
                   (C1658 * C1483 - (C510 * C51094 + C509 * C1482) +
                    C1659 * C51081 - (C117 * C880 + C50919 * C893) * C1484 -
                    (C117 * C894 + C50919 * C904) * C1479) *
                       C109 +
                   (C1660 * C1483 - (C512 * C51094 + C511 * C1482) +
                    C1661 * C51081 - (C117 * C882 + C50919 * C897) * C1484 -
                    (C117 * C898 + C50919 * C906) * C1479) *
                       C110) *
                      C50908 * C50785 * C50861)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50919 * C126) * C1482 +
                     (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
                     C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                        C2434 +
                    (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C50769) *
                       C2436 +
                   ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 -
                     C2629 * C51081 + C2980 * C1484 + C2981 * C1479) *
                        C2434 +
                    (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C50769) *
                       C2437 +
                   ((C2628 * C1482 + C2629 * C51094 - C2980 * C1483 -
                     C2981 * C51081 + C3096 * C1484 + C3097 * C1479) *
                        C2434 +
                    (C4052 + C4053 - C4054 - C4055 + C4056 + C4057) * C50769) *
                       C2438) *
                      C50785 * C1765 +
                  (((C3276 * C1483 -
                     ((C117 * C480 + C50919 * C488) * C51094 +
                      (C117 * C470 + C50919 * C481) * C1482) +
                     C3277 * C51081 - C3278 * C1484 - C3279 * C1479) *
                        C2434 +
                    (C1656 * C1483 - (C508 * C51094 + C507 * C1482) +
                     C1657 * C51081 - C2796 * C1484 - C2797 * C1479) *
                        C50769) *
                       C2436 +
                   ((C3278 * C1483 - (C3277 * C51094 + C3276 * C1482) +
                     C3279 * C51081 - C3280 * C1484 - C3281 * C1479) *
                        C2434 +
                    (C2796 * C1483 - (C1657 * C51094 + C1656 * C1482) +
                     C2797 * C51081 - C3282 * C1484 - C3283 * C1479) *
                        C50769) *
                       C2437 +
                   ((C3280 * C1483 - (C3279 * C51094 + C3278 * C1482) +
                     C3281 * C51081 - (C117 * C3245 + C50919 * C3251) * C1484 -
                     (C117 * C3252 + C50919 * C3257) * C1479) *
                        C2434 +
                    (C3282 * C1483 - (C2797 * C51094 + C2796 * C1482) +
                     C3283 * C51081 - (C117 * C3246 + C50919 * C3253) * C1484 -
                     (C117 * C3254 + C50919 * C3258) * C1479) *
                        C50769) *
                       C2438) *
                      C50785 * C50861)) /
                    (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1355 +
            (C117 * C127 + C50919 * C140) * C1350 -
            (C117 * C296 + C50919 * C302) * C1356 -
            (C117 * C303 + C50919 * C314) * C50835) *
               C107 +
           (C1358 + C1359 - C1360 - C1361) * C108 + C1378 * C109 +
           C1379 * C110) *
              C50908 * C50785 * C51095 +
          (((C117 * C875 + C50919 * C883) * C1356 -
            ((C117 * C480 + C50919 * C488) * C1350 +
             (C117 * C470 + C50919 * C481) * C1355) +
            (C117 * C884 + C50919 * C899) * C50835) *
               C107 +
           (C1662 - (C1640 + C1641) + C1663) * C108 +
           (C1664 - (C1646 + C1647) + C1665) * C109 +
           (C1666 - (C1652 + C1653) + C1667) * C110) *
              C50908 * C50785 * C51084 +
          (((C117 * C1008 + C50919 * C1013) * C1355 +
            (C117 * C1014 + C50919 * C1023) * C1350 -
            (C117 * C1150 + C50919 * C1154) * C1356 -
            (C117 * C1155 + C50919 * C1162) * C50835) *
               C107 +
           (C1041 * C1355 + C1042 * C1350 -
            (C117 * C1151 + C50919 * C1156) * C1356 -
            (C117 * C1157 + C50919 * C1163) * C50835) *
               C108 +
           (C1043 * C1355 + C1044 * C1350 -
            (C117 * C1152 + C50919 * C1158) * C1356 -
            (C117 * C1159 + C50919 * C1164) * C50835) *
               C109 +
           (C1045 * C1355 + C1046 * C1350 -
            (C117 * C1153 + C50919 * C1160) * C1356 -
            (C117 * C1161 + C50919 * C1165) * C50835) *
               C110) *
              C50908 * C50785 * C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C2434 +
            (C1358 + C1359 - C1360 - C1361) * C50769) *
               C2436 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C2434 +
            (C3884 + C3885 - C3886 - C3887) * C50769) *
               C2437 +
           ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C2434 +
            (C3888 + C3889 - C3890 - C3891) * C50769) *
               C2438) *
              C50785 * C51095 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C2434 +
            (C1662 - (C1640 + C1641) + C1663) * C50769) *
               C2436 +
           ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C2434 +
            (C4256 - (C4257 + C4258) + C4259) * C50769) *
               C2437 +
           ((C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) + C3281 * C50835) *
                C2434 +
            (C4260 - (C4261 + C4262) + C4263) * C50769) *
               C2438) *
              C50785 * C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C1355 +
             (C117 * C1014 + C50919 * C1023) * C1350 - C3620 * C1356 -
             C3621 * C50835) *
                C2434 +
            (C1041 * C1355 + C1042 * C1350 - C3450 * C1356 - C3451 * C50835) *
                C50769) *
               C2436 +
           ((C3620 * C1355 + C3621 * C1350 - C3622 * C1356 - C3623 * C50835) *
                C2434 +
            (C3450 * C1355 + C3451 * C1350 - C3452 * C1356 - C3453 * C50835) *
                C50769) *
               C2437 +
           ((C3622 * C1355 + C3623 * C1350 -
             (C117 * C3603 + C50919 * C3605) * C1356 -
             (C117 * C3606 + C50919 * C3609) * C50835) *
                C2434 +
            (C3452 * C1355 + C3453 * C1350 -
             (C117 * C3604 + C50919 * C3607) * C1356 -
             (C117 * C3608 + C50919 * C3610) * C50835) *
                C50769) *
               C2438) *
              C50785 * C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 -
            (C117 * C296 + C50919 * C302) * C628 -
            (C117 * C303 + C50919 * C314) * C623 +
            (C117 * C630 + C50919 * C635) * C629 +
            (C117 * C636 + C50919 * C645) * C624) *
               C107 +
           (C651 + C652 - C653 - C654 + C681 + C682) * C108 +
           (C659 + C660 - C661 - C662 + C683 + C684) * C109 +
           (C667 + C668 - C669 - C670 + C685 + C686) * C110) *
              C50908 * C51040 +
          ((C653 - (C652 + C651) + C654 - C681 - C682) * C107 +
           (C661 - (C660 + C659) + C662 - C683 - C684) * C108 +
           (C669 - (C668 + C667) + C670 - C685 - C686) * C109 +
           (C353 * C628 - (C174 * C622 + C175 * C627) + C354 * C623 -
            (C117 * C634 + C50919 * C643) * C629 -
            (C117 * C644 + C50919 * C649) * C624) *
               C110) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50908 * C112 -
          (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
           (C179 + C178) * C107) *
              C50908 * C113 +
          (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
           (C186 + C187) * C110) *
              C50908 * C114 -
          (((C117 * C138 + C50919 * C146) * C50819 +
            (C117 * C125 + C50919 * C139) * C118) *
               C110 +
           (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50908 * C51040 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50908 * C50790) *
              C1005 +
          (((C515 + C516) * C107 + (C517 + C518) * C108 + (C519 + C520) * C109 +
            (C521 + C522) * C110) *
               C50908 * C50790 -
           (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C107) *
               C50908 * C51040) *
              C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C107 +
            (C1047 + C1048) * C108 + (C1049 + C1050) * C109 +
            (C1051 + C1052) * C110) *
               C50908 * C51040 -
           (((C117 * C1021 + C50919 * C1027) * C50819 +
             (C117 * C1012 + C50919 * C1022) * C118) *
                C110 +
            (C1052 + C1051) * C109 + (C1050 + C1049) * C108 +
            (C1048 + C1047) * C107) *
               C50908 * C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C2434 +
            (C178 + C179) * C50769) *
               C2436 +
           (((C117 * C296 + C50919 * C302) * C118 +
             (C117 * C303 + C50919 * C314) * C50819) *
                C2434 +
            (C2440 + C2441) * C50769) *
               C2437 +
           (((C117 * C630 + C50919 * C635) * C118 +
             (C117 * C636 + C50919 * C645) * C50819) *
                C2434 +
            (C2442 + C2443) * C50769) *
               C2438) *
              C112 -
          (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
           ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
           ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
              C113 +
          ((C188 * C2434 + C189 * C50769) * C2436 +
           ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
           ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
              C114 -
          ((((C117 * C644 + C50919 * C649) * C50819 +
             (C117 * C634 + C50919 * C643) * C118) *
                C50769 +
            (C2451 + C2450) * C2434) *
               C2438 +
           ((C354 * C50819 + C353 * C118) * C50769 + (C2449 + C2448) * C2434) *
               C2437 +
           (C190 * C50769 + C191 * C2434) * C2436) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C2434 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C2436 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C2434 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C2437 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             (C117 * C2949 + C50919 * C2952) * C629 +
             (C117 * C2953 + C50919 * C2958) * C624) *
                C2434 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C2438) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C2434 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C50769) *
               C2436 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C2434 +
            (C677 * C628 - (C349 * C622 + C348 * C627) + C678 * C623 -
             C2632 * C629 - C2633 * C624) *
                C50769) *
               C2437 +
           ((C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C2434 +
            (C2632 * C628 - (C678 * C622 + C677 * C627) + C2633 * C623 -
             (C117 * C2951 + C50919 * C2956) * C629 -
             (C117 * C2957 + C50919 * C2960) * C624) *
                C50769) *
               C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C51040 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C50790) *
              C1005 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C50790 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C51040) *
              C1006 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C2434 +
             (C1047 + C1048) * C50769) *
                C2436 +
            (((C117 * C1150 + C50919 * C1154) * C118 +
              (C117 * C1155 + C50919 * C1162) * C50819) *
                 C2434 +
             (C3454 + C3455) * C50769) *
                C2437 +
            (((C117 * C3429 + C50919 * C3432) * C118 +
              (C117 * C3433 + C50919 * C3438) * C50819) *
                 C2434 +
             (C3456 + C3457) * C50769) *
                C2438) *
               C51040 -
           ((((C117 * C3436 + C50919 * C3440) * C50819 +
              (C117 * C3431 + C50919 * C3437) * C118) *
                 C50769 +
             (C3457 + C3456) * C2434) *
                C2438 +
            (((C117 * C1159 + C50919 * C1164) * C50819 +
              (C117 * C1152 + C50919 * C1158) * C118) *
                 C50769 +
             (C3455 + C3454) * C2434) *
                C2437 +
            ((C1050 + C1049) * C50769 + (C1048 + C1047) * C2434) * C2436) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50919 * C126) * C757 +
           (C117 * C127 + C50919 * C140) * C752 -
           (C117 * C296 + C50919 * C302) * C758 -
           (C117 * C303 + C50919 * C314) * C753 +
           (C117 * C630 + C50919 * C635) * C759 +
           (C117 * C636 + C50919 * C645) * C754 -
           (C117 * C761 + C50919 * C765) * C760 -
           (C117 * C766 + C50919 * C773) * C755) *
              C107 +
          (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 + C675 * C759 +
           C676 * C754 - (C117 * C762 + C50919 * C767) * C760 -
           (C117 * C768 + C50919 * C774) * C755) *
              C108 +
          (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 + C677 * C759 +
           C678 * C754 - (C117 * C763 + C50919 * C769) * C760 -
           (C117 * C770 + C50919 * C775) * C755) *
              C109 +
          (C172 * C757 + C173 * C752 - C351 * C758 - C352 * C753 + C679 * C759 +
           C680 * C754 - (C117 * C764 + C50919 * C771) * C760 -
           (C117 * C772 + C50919 * C776) * C755) *
              C110) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 -
            (C117 * C296 + C50919 * C302) * C295 -
            (C117 * C303 + C50919 * C314) * C50835) *
               C107 +
           (C321 + C322 - C355 - C356) * C108 + C365 * C109 + C366 * C110) *
              C50908 * C291 +
          ((C355 - (C322 + C321) + C356) * C107 +
           (C357 - (C328 + C327) + C358) * C108 +
           (C359 - (C334 + C333) + C360) * C109 +
           (C361 - (C341 + C342) + C362) * C110) *
              C50908 * C292 +
          (C365 * C107 + C366 * C108 + (C342 + C341 - C361 - C362) * C109 +
           (C176 * C294 + C177 * C51047 - (C117 * C301 + C50919 * C312) * C295 -
            (C117 * C313 + C50919 * C319) * C50835) *
               C110) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 -
            (C117 * C296 + C50919 * C302) * C295 -
            (C117 * C303 + C50919 * C314) * C50835) *
               C107 +
           (C321 + C322 - C355 - C356) * C108 + C365 * C109 + C366 * C110) *
              C50908 * C50785 * C1005 +
          (((C117 * C875 + C50919 * C883) * C295 -
            ((C117 * C480 + C50919 * C488) * C51047 +
             (C117 * C470 + C50919 * C481) * C294) +
            (C117 * C884 + C50919 * C899) * C50835) *
               C107 +
           ((C117 * C877 + C50919 * C887) * C295 -
            (C508 * C51047 + C507 * C294) +
            (C117 * C888 + C50919 * C901) * C50835) *
               C108 +
           ((C117 * C879 + C50919 * C891) * C295 -
            (C510 * C51047 + C509 * C294) +
            (C117 * C892 + C50919 * C903) * C50835) *
               C109 +
           ((C117 * C881 + C50919 * C895) * C295 -
            (C512 * C51047 + C511 * C294) +
            (C117 * C896 + C50919 * C905) * C50835) *
               C110) *
              C50908 * C50785 * C1006 +
          (((C117 * C1008 + C50919 * C1013) * C294 +
            (C117 * C1014 + C50919 * C1023) * C51047 -
            (C117 * C1150 + C50919 * C1154) * C295 -
            (C117 * C1155 + C50919 * C1162) * C50835) *
               C107 +
           (C1041 * C294 + C1042 * C51047 -
            (C117 * C1151 + C50919 * C1156) * C295 -
            (C117 * C1157 + C50919 * C1163) * C50835) *
               C108 +
           (C1043 * C294 + C1044 * C51047 -
            (C117 * C1152 + C50919 * C1158) * C295 -
            (C117 * C1159 + C50919 * C1164) * C50835) *
               C109 +
           (C1045 * C294 + C1046 * C51047 -
            (C117 * C1153 + C50919 * C1160) * C295 -
            (C117 * C1161 + C50919 * C1165) * C50835) *
               C110) *
              C50908 * C50785 * C1007)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C2434 +
            (C321 + C322 - C355 - C356) * C50769) *
               C2436 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C2434 +
            (C2606 + C2607 - C2608 - C2609) * C50769) *
               C2437 +
           ((C2628 * C294 + C2629 * C51047 -
             (C117 * C761 + C50919 * C765) * C295 -
             (C117 * C766 + C50919 * C773) * C50835) *
                C2434 +
            (C2610 + C2611 - C2634 - C2635) * C50769) *
               C2438) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C2434 +
            (C357 - (C328 + C327) + C358) * C50769) *
               C2436 +
           ((C2608 - (C2607 + C2606) + C2609) * C2434 +
            (C2616 - (C2617 + C2618) + C2619) * C50769) *
               C2437 +
           ((C2634 - (C2611 + C2610) + C2635) * C2434 +
            (C2636 - (C2622 + C2623) + C2637) * C50769) *
               C2438) *
              C292 +
          ((C365 * C2434 + C366 * C50769) * C2436 +
           ((C2618 + C2617 - C2616 - C2619) * C2434 +
            (C351 * C294 + C352 * C51047 - C679 * C295 - C680 * C50835) *
                C50769) *
               C2437 +
           ((C2623 + C2622 - C2636 - C2637) * C2434 +
            (C679 * C294 + C680 * C51047 -
             (C117 * C764 + C50919 * C771) * C295 -
             (C117 * C772 + C50919 * C776) * C50835) *
                C50769) *
               C2438) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C2434 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C50769) *
              C2436 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C2434 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C50769) *
              C2437 +
          ((C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
            C3096 * C759 + C3097 * C754 -
            (C117 * C3083 + C50919 * C3085) * C760 -
            (C117 * C3086 + C50919 * C3089) * C755) *
               C2434 +
           (C675 * C757 + C676 * C752 - C2630 * C758 - C2631 * C753 +
            C2982 * C759 + C2983 * C754 -
            (C117 * C3084 + C50919 * C3087) * C760 -
            (C117 * C3088 + C50919 * C3090) * C755) *
               C50769) *
              C2438) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C2434 +
            (C321 + C322 - C355 - C356) * C50769) *
               C2436 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C2434 +
            (C2606 + C2607 - C2608 - C2609) * C50769) *
               C2437 +
           ((C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                C2434 +
            (C2610 + C2611 - C2634 - C2635) * C50769) *
               C2438) *
              C50785 * C1005 +
          (((C3276 * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             C3277 * C50835) *
                C2434 +
            (C1898 - (C1899 + C1900) + C1901) * C50769) *
               C2436 +
           ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                C2434 +
            (C2796 * C295 - (C1657 * C51047 + C1656 * C294) + C2797 * C50835) *
                C50769) *
               C2437 +
           ((C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
                C2434 +
            (C3282 * C295 - (C2797 * C51047 + C2796 * C294) + C3283 * C50835) *
                C50769) *
               C2438) *
              C50785 * C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C294 +
             (C117 * C1014 + C50919 * C1023) * C51047 - C3620 * C295 -
             C3621 * C50835) *
                C2434 +
            (C1041 * C294 + C1042 * C51047 - C3450 * C295 - C3451 * C50835) *
                C50769) *
               C2436 +
           ((C3620 * C294 + C3621 * C51047 - C3622 * C295 - C3623 * C50835) *
                C2434 +
            (C3450 * C294 + C3451 * C51047 - C3452 * C295 - C3453 * C50835) *
                C50769) *
               C2437 +
           ((C3622 * C294 + C3623 * C51047 -
             (C117 * C3603 + C50919 * C3605) * C295 -
             (C117 * C3606 + C50919 * C3609) * C50835) *
                C2434 +
            (C3452 * C294 + C3453 * C51047 -
             (C117 * C3604 + C50919 * C3607) * C295 -
             (C117 * C3608 + C50919 * C3610) * C50835) *
                C50769) *
               C2438) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 -
            (C117 * C296 + C50919 * C302) * C628 -
            (C117 * C303 + C50919 * C314) * C623 +
            (C117 * C630 + C50919 * C635) * C629 +
            (C117 * C636 + C50919 * C645) * C624) *
               C107 +
           (C651 + C652 - C653 - C654 + C681 + C682) * C108 +
           (C659 + C660 - C661 - C662 + C683 + C684) * C109 +
           (C667 + C668 - C669 - C670 + C685 + C686) * C110) *
              C50908 * C50785 * C51049 +
          (((C117 * C875 + C50919 * C883) * C628 -
            ((C117 * C480 + C50919 * C488) * C622 +
             (C117 * C470 + C50919 * C481) * C627) +
            (C117 * C884 + C50919 * C899) * C623 -
            (C117 * C876 + C50919 * C885) * C629 -
            (C117 * C886 + C50919 * C900) * C624) *
               C107 +
           ((C117 * C877 + C50919 * C887) * C628 - (C508 * C622 + C507 * C627) +
            (C117 * C888 + C50919 * C901) * C623 -
            (C117 * C878 + C50919 * C889) * C629 -
            (C117 * C890 + C50919 * C902) * C624) *
               C108 +
           ((C117 * C879 + C50919 * C891) * C628 - (C510 * C622 + C509 * C627) +
            (C117 * C892 + C50919 * C903) * C623 -
            (C117 * C880 + C50919 * C893) * C629 -
            (C117 * C894 + C50919 * C904) * C624) *
               C109 +
           ((C117 * C881 + C50919 * C895) * C628 - (C512 * C622 + C511 * C627) +
            (C117 * C896 + C50919 * C905) * C623 -
            (C117 * C882 + C50919 * C897) * C629 -
            (C117 * C898 + C50919 * C906) * C624) *
               C110) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50908 * C291 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50908 * C292 +
           (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50908 * C293) *
              C51049 +
          (((C515 + C516) * C107 + (C517 + C518) * C108 + (C519 + C520) * C109 +
            (C521 + C522) * C110) *
               C50908 * C292 -
           (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C107) *
               C50908 * C291 -
           (((C117 * C482 + C50919 * C489) * C50819 +
             (C117 * C471 + C50919 * C483) * C118) *
                C110 +
            (C522 + C521) * C109 + C523 * C108 + C524 * C107) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50908 * C50785 * C1232 -
          (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
           ((C117 * C480 + C50919 * C488) * C50819 +
            (C117 * C470 + C50919 * C481) * C118) *
               C107) *
              C50908 * C50785 * C1233 +
          (((C117 * C1008 + C50919 * C1013) * C118 +
            (C117 * C1014 + C50919 * C1023) * C50819) *
               C107 +
           (C1047 + C1048) * C108 + (C1049 + C1050) * C109 +
           (C1051 + C1052) * C110) *
              C50908 * C50785 * C1234 -
          (((C117 * C1240 + C50919 * C1248) * C50819 +
            (C117 * C1236 + C50919 * C1241) * C118) *
               C110 +
           ((C117 * C1242 + C50919 * C1249) * C50819 +
            (C117 * C1237 + C50919 * C1243) * C118) *
               C109 +
           ((C117 * C1244 + C50919 * C1250) * C50819 +
            (C117 * C1238 + C50919 * C1245) * C118) *
               C108 +
           ((C117 * C1246 + C50919 * C1251) * C50819 +
            (C117 * C1239 + C50919 * C1247) * C118) *
               C107) *
              C50908 * C50785 * C1235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C291 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C292 +
           ((C188 * C2434 + C189 * C50769) * C2436 +
            ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
            ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
               C293) *
              C51049 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C292 -
           (((C2801 + C2800) * C50769 +
             ((C117 * C886 + C50919 * C900) * C50819 +
              (C117 * C876 + C50919 * C885) * C118) *
                 C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             ((C117 * C884 + C50919 * C899) * C50819 +
              (C117 * C875 + C50919 * C883) * C118) *
                 C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C291 -
           ((((C117 * C898 + C50919 * C906) * C50819 +
              (C117 * C882 + C50919 * C897) * C118) *
                 C50769 +
             (C2803 + C2802) * C2434) *
                C2438 +
            ((C1661 * C50819 + C1660 * C118) * C50769 +
             (C2787 + C2786) * C2434) *
                C2437 +
            (C523 * C50769 + C524 * C2434) * C2436) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C2434 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C2436 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C2434 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C2437 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             C3096 * C629 + C3097 * C624) *
                C2434 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C2438) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C2434 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C50769) *
               C2436 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C2434 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C50769) *
               C2437 +
           ((C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
             (C117 * C3245 + C50919 * C3251) * C629 -
             (C117 * C3252 + C50919 * C3257) * C624) *
                C2434 +
            (C3282 * C628 - (C2797 * C622 + C2796 * C627) + C3283 * C623 -
             (C117 * C3246 + C50919 * C3253) * C629 -
             (C117 * C3254 + C50919 * C3258) * C624) *
                C50769) *
               C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C2434 +
            (C178 + C179) * C50769) *
               C2436 +
           ((C2626 * C118 + C2627 * C50819) * C2434 +
            (C2440 + C2441) * C50769) *
               C2437 +
           ((C2628 * C118 + C2629 * C50819) * C2434 +
            (C2442 + C2443) * C50769) *
               C2438) *
              C50785 * C1232 -
          (((C2801 + C2800) * C50769 +
            (C3279 * C50819 + C3278 * C118) * C2434) *
               C2438 +
           ((C2785 + C2784) * C50769 +
            (C3277 * C50819 + C3276 * C118) * C2434) *
               C2437 +
           ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                      (C117 * C470 + C50919 * C481) * C118) *
                                         C2434) *
               C2436) *
              C50785 * C1233 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C2434 +
            (C1047 + C1048) * C50769) *
               C2436 +
           ((C3620 * C118 + C3621 * C50819) * C2434 +
            (C3454 + C3455) * C50769) *
               C2437 +
           ((C3622 * C118 + C3623 * C50819) * C2434 +
            (C3456 + C3457) * C50769) *
               C2438) *
              C50785 * C1234 -
          ((((C117 * C3725 + C50919 * C3733) * C50819 +
             (C117 * C3721 + C50919 * C3726) * C118) *
                C50769 +
            ((C117 * C3727 + C50919 * C3734) * C50819 +
             (C117 * C3722 + C50919 * C3728) * C118) *
                C2434) *
               C2438 +
           (((C117 * C3729 + C50919 * C3735) * C50819 +
             (C117 * C3723 + C50919 * C3730) * C118) *
                C50769 +
            ((C117 * C3731 + C50919 * C3736) * C50819 +
             (C117 * C3724 + C50919 * C3732) * C118) *
                C2434) *
               C2437 +
           (((C117 * C1244 + C50919 * C1250) * C50819 +
             (C117 * C1238 + C50919 * C1245) * C118) *
                C50769 +
            ((C117 * C1246 + C50919 * C1251) * C50819 +
             (C117 * C1239 + C50919 * C1247) * C118) *
                C2434) *
               C2436) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50908 * C51093 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50908 * C51078 +
           (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50908 * C1354) *
              C1765 +
          (((C515 + C516) * C107 + (C517 + C518) * C108 + (C519 + C520) * C109 +
            (C521 + C522) * C110) *
               C50908 * C51078 -
           (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C107) *
               C50908 * C51093 -
           (((C117 * C482 + C50919 * C489) * C50819 +
             (C117 * C471 + C50919 * C483) * C118) *
                C110 +
            (C522 + C521) * C109 + C523 * C108 + C524 * C107) *
               C50908 * C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C51093 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C51078 +
           ((C188 * C2434 + C189 * C50769) * C2436 +
            ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
            ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
               C1354) *
              C1765 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C51078 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C51093 -
           ((((C117 * C898 + C50919 * C906) * C50819 +
              (C117 * C882 + C50919 * C897) * C118) *
                 C50769 +
             (C2803 + C2802) * C2434) *
                C2438 +
            ((C1661 * C50819 + C1660 * C118) * C50769 +
             (C2787 + C2786) * C2434) *
                C2437 +
            (C523 * C50769 + C524 * C2434) * C2436) *
               C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 -
             (C117 * C296 + C50919 * C302) * C295 -
             (C117 * C303 + C50919 * C314) * C50835) *
                C107 +
            (C321 + C322 - C355 - C356) * C108 + C365 * C109 + C366 * C110) *
               C50908 * C1480 +
           ((C355 - (C322 + C321) + C356) * C107 +
            (C357 - (C328 + C327) + C358) * C108 +
            (C359 - (C334 + C333) + C360) * C109 +
            (C361 - (C341 + C342) + C362) * C110) *
               C50908 * C50790) *
              C1765 +
          ((((C117 * C875 + C50919 * C883) * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             (C117 * C884 + C50919 * C899) * C50835) *
                C107 +
            (C1898 - (C1899 + C1900) + C1901) * C108 +
            (C1902 - (C1903 + C1904) + C1905) * C109 +
            (C1906 - (C1907 + C1908) + C1909) * C110) *
               C50908 * C1480 +
           ((C1900 + C1899 - C1898 - C1901) * C107 +
            (C1904 + C1903 - C1902 - C1905) * C108 +
            (C1908 + C1907 - C1906 - C1909) * C109 +
            (C513 * C294 + C514 * C51047 -
             (C117 * C1633 + C50919 * C1634) * C295 -
             (C117 * C1635 + C50919 * C1636) * C50835) *
                C110) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C294 +
              (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
              C2627 * C50835) *
                 C2434 +
             (C321 + C322 - C355 - C356) * C50769) *
                C2436 +
            ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                 C2434 +
             (C2606 + C2607 - C2608 - C2609) * C50769) *
                C2437 +
            ((C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                 C2434 +
             (C2610 + C2611 - C2634 - C2635) * C50769) *
                C2438) *
               C1480 +
           (((C355 - (C322 + C321) + C356) * C2434 +
             (C357 - (C328 + C327) + C358) * C50769) *
                C2436 +
            ((C2608 - (C2607 + C2606) + C2609) * C2434 +
             (C2616 - (C2617 + C2618) + C2619) * C50769) *
                C2437 +
            ((C2634 - (C2611 + C2610) + C2635) * C2434 +
             (C2636 - (C2622 + C2623) + C2637) * C50769) *
                C2438) *
               C50790) *
              C1765 +
          ((((C3276 * C295 -
              ((C117 * C480 + C50919 * C488) * C51047 +
               (C117 * C470 + C50919 * C481) * C294) +
              C3277 * C50835) *
                 C2434 +
             (C1898 - (C1899 + C1900) + C1901) * C50769) *
                C2436 +
            ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                 C2434 +
             (C4604 - (C4605 + C4606) + C4607) * C50769) *
                C2437 +
            ((C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
                 C2434 +
             (C4608 - (C4609 + C4610) + C4611) * C50769) *
                C2438) *
               C1480 +
           (((C1900 + C1899 - C1898 - C1901) * C2434 +
             (C1904 + C1903 - C1902 - C1905) * C50769) *
                C2436 +
            ((C4606 + C4605 - C4604 - C4607) * C2434 +
             (C1658 * C294 + C1659 * C51047 - C2798 * C295 - C2799 * C50835) *
                 C50769) *
                C2437 +
            ((C4610 + C4609 - C4608 - C4611) * C2434 +
             (C2798 * C294 + C2799 * C51047 -
              (C117 * C4251 + C50919 * C4252) * C295 -
              (C117 * C4253 + C50919 * C4254) * C50835) *
                 C50769) *
                C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50908 * C1480 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50908 * C50790) *
              C51095 +
          (((C515 + C516) * C107 + (C517 + C518) * C108 + (C519 + C520) * C109 +
            (C521 + C522) * C110) *
               C50908 * C50790 -
           (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C107) *
               C50908 * C1480) *
              C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C107 +
            (C1047 + C1048) * C108 + (C1049 + C1050) * C109 +
            (C1051 + C1052) * C110) *
               C50908 * C1480 -
           (((C117 * C1021 + C50919 * C1027) * C50819 +
             (C117 * C1012 + C50919 * C1022) * C118) *
                C110 +
            (C1052 + C1051) * C109 + (C1050 + C1049) * C108 +
            (C1048 + C1047) * C107) *
               C50908 * C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C1480 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C50790) *
              C51095 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C50790 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C1480) *
              C51084 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C2434 +
             (C1047 + C1048) * C50769) *
                C2436 +
            ((C3620 * C118 + C3621 * C50819) * C2434 +
             (C3454 + C3455) * C50769) *
                C2437 +
            ((C3622 * C118 + C3623 * C50819) * C2434 +
             (C3456 + C3457) * C50769) *
                C2438) *
               C1480 -
           ((((C117 * C3436 + C50919 * C3440) * C50819 +
              (C117 * C3431 + C50919 * C3437) * C118) *
                 C50769 +
             (C3457 + C3456) * C2434) *
                C2438 +
            (((C117 * C1159 + C50919 * C1164) * C50819 +
              (C117 * C1152 + C50919 * C1158) * C118) *
                 C50769 +
             (C3455 + C3454) * C2434) *
                C2437 +
            ((C1050 + C1049) * C50769 + (C1048 + C1047) * C2434) * C2436) *
               C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50908 * C112 -
          (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
           (C179 + C178) * C107) *
              C50908 * C113 +
          (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
           (C186 + C187) * C110) *
              C50908 * C114 -
          (((C117 * C138 + C50919 * C146) * C50819 +
            (C117 * C125 + C50919 * C139) * C118) *
               C110 +
           (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 -
            (C117 * C296 + C50919 * C302) * C628 -
            (C117 * C303 + C50919 * C314) * C623 +
            (C117 * C630 + C50919 * C635) * C629 +
            (C117 * C636 + C50919 * C645) * C624) *
               C107 +
           (C651 + C652 - C653 - C654 + C681 + C682) * C108 +
           (C659 + C660 - C661 - C662 + C683 + C684) * C109 +
           (C667 + C668 - C669 - C670 + C685 + C686) * C110) *
              C50908 * C51040 +
          ((C653 - (C652 + C651) + C654 - C681 - C682) * C107 +
           (C661 - (C660 + C659) + C662 - C683 - C684) * C108 +
           (C669 - (C668 + C667) + C670 - C685 - C686) * C109 +
           (C353 * C628 - (C174 * C622 + C175 * C627) + C354 * C623 -
            (C117 * C634 + C50919 * C643) * C629 -
            (C117 * C644 + C50919 * C649) * C624) *
               C110) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C2434 +
            (C178 + C179) * C50769) *
               C2436 +
           (((C117 * C296 + C50919 * C302) * C118 +
             (C117 * C303 + C50919 * C314) * C50819) *
                C2434 +
            (C2440 + C2441) * C50769) *
               C2437 +
           (((C117 * C630 + C50919 * C635) * C118 +
             (C117 * C636 + C50919 * C645) * C50819) *
                C2434 +
            (C2442 + C2443) * C50769) *
               C2438) *
              C112 -
          (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
           ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
           ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
              C113 +
          ((C188 * C2434 + C189 * C50769) * C2436 +
           ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
           ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
              C114 -
          ((((C117 * C644 + C50919 * C649) * C50819 +
             (C117 * C634 + C50919 * C643) * C118) *
                C50769 +
            (C2451 + C2450) * C2434) *
               C2438 +
           ((C354 * C50819 + C353 * C118) * C50769 + (C2449 + C2448) * C2434) *
               C2437 +
           (C190 * C50769 + C191 * C2434) * C2436) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C2434 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C2436 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C2434 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C2437 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             (C117 * C2949 + C50919 * C2952) * C629 +
             (C117 * C2953 + C50919 * C2958) * C624) *
                C2434 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C2438) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C2434 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C50769) *
               C2436 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C2434 +
            (C677 * C628 - (C349 * C622 + C348 * C627) + C678 * C623 -
             C2632 * C629 - C2633 * C624) *
                C50769) *
               C2437 +
           ((C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C2434 +
            (C2632 * C628 - (C678 * C622 + C677 * C627) + C2633 * C623 -
             (C117 * C2951 + C50919 * C2956) * C629 -
             (C117 * C2957 + C50919 * C2960) * C624) *
                C50769) *
               C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 -
            (C117 * C296 + C50919 * C302) * C295 -
            (C117 * C303 + C50919 * C314) * C50835) *
               C107 +
           (C321 + C322 - C355 - C356) * C108 + C365 * C109 + C366 * C110) *
              C50908 * C291 +
          ((C355 - (C322 + C321) + C356) * C107 +
           (C357 - (C328 + C327) + C358) * C108 +
           (C359 - (C334 + C333) + C360) * C109 +
           (C361 - (C341 + C342) + C362) * C110) *
              C50908 * C292 +
          (C365 * C107 + C366 * C108 + (C342 + C341 - C361 - C362) * C109 +
           (C176 * C294 + C177 * C51047 - (C117 * C301 + C50919 * C312) * C295 -
            (C117 * C313 + C50919 * C319) * C50835) *
               C110) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50919 * C126) * C757 +
           (C117 * C127 + C50919 * C140) * C752 -
           (C117 * C296 + C50919 * C302) * C758 -
           (C117 * C303 + C50919 * C314) * C753 +
           (C117 * C630 + C50919 * C635) * C759 +
           (C117 * C636 + C50919 * C645) * C754 -
           (C117 * C761 + C50919 * C765) * C760 -
           (C117 * C766 + C50919 * C773) * C755) *
              C107 +
          (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 + C675 * C759 +
           C676 * C754 - (C117 * C762 + C50919 * C767) * C760 -
           (C117 * C768 + C50919 * C774) * C755) *
              C108 +
          (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 + C677 * C759 +
           C678 * C754 - (C117 * C763 + C50919 * C769) * C760 -
           (C117 * C770 + C50919 * C775) * C755) *
              C109 +
          (C172 * C757 + C173 * C752 - C351 * C758 - C352 * C753 + C679 * C759 +
           C680 * C754 - (C117 * C764 + C50919 * C771) * C760 -
           (C117 * C772 + C50919 * C776) * C755) *
              C110) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C2434 +
            (C321 + C322 - C355 - C356) * C50769) *
               C2436 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C2434 +
            (C2606 + C2607 - C2608 - C2609) * C50769) *
               C2437 +
           ((C2628 * C294 + C2629 * C51047 -
             (C117 * C761 + C50919 * C765) * C295 -
             (C117 * C766 + C50919 * C773) * C50835) *
                C2434 +
            (C2610 + C2611 - C2634 - C2635) * C50769) *
               C2438) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C2434 +
            (C357 - (C328 + C327) + C358) * C50769) *
               C2436 +
           ((C2608 - (C2607 + C2606) + C2609) * C2434 +
            (C2616 - (C2617 + C2618) + C2619) * C50769) *
               C2437 +
           ((C2634 - (C2611 + C2610) + C2635) * C2434 +
            (C2636 - (C2622 + C2623) + C2637) * C50769) *
               C2438) *
              C292 +
          ((C365 * C2434 + C366 * C50769) * C2436 +
           ((C2618 + C2617 - C2616 - C2619) * C2434 +
            (C351 * C294 + C352 * C51047 - C679 * C295 - C680 * C50835) *
                C50769) *
               C2437 +
           ((C2623 + C2622 - C2636 - C2637) * C2434 +
            (C679 * C294 + C680 * C51047 -
             (C117 * C764 + C50919 * C771) * C295 -
             (C117 * C772 + C50919 * C776) * C50835) *
                C50769) *
               C2438) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C2434 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C50769) *
              C2436 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C2434 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C50769) *
              C2437 +
          ((C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
            C3096 * C759 + C3097 * C754 -
            (C117 * C3083 + C50919 * C3085) * C760 -
            (C117 * C3086 + C50919 * C3089) * C755) *
               C2434 +
           (C675 * C757 + C676 * C752 - C2630 * C758 - C2631 * C753 +
            C2982 * C759 + C2983 * C754 -
            (C117 * C3084 + C50919 * C3087) * C760 -
            (C117 * C3088 + C50919 * C3090) * C755) *
               C50769) *
              C2438) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50908 * C291 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50908 * C292 +
           (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50908 * C293) *
              C51049 +
          (((C515 + C516) * C107 + (C517 + C518) * C108 + (C519 + C520) * C109 +
            (C521 + C522) * C110) *
               C50908 * C292 -
           (C523 * C110 + C524 * C109 + (C516 + C515) * C108 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C107) *
               C50908 * C291 -
           (((C117 * C482 + C50919 * C489) * C50819 +
             (C117 * C471 + C50919 * C483) * C118) *
                C110 +
            (C522 + C521) * C109 + C523 * C108 + C524 * C107) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 -
            (C117 * C296 + C50919 * C302) * C628 -
            (C117 * C303 + C50919 * C314) * C623 +
            (C117 * C630 + C50919 * C635) * C629 +
            (C117 * C636 + C50919 * C645) * C624) *
               C107 +
           (C651 + C652 - C653 - C654 + C681 + C682) * C108 +
           (C659 + C660 - C661 - C662 + C683 + C684) * C109 +
           (C667 + C668 - C669 - C670 + C685 + C686) * C110) *
              C50908 * C50785 * C51049 +
          (((C117 * C875 + C50919 * C883) * C628 -
            ((C117 * C480 + C50919 * C488) * C622 +
             (C117 * C470 + C50919 * C481) * C627) +
            (C117 * C884 + C50919 * C899) * C623 -
            (C117 * C876 + C50919 * C885) * C629 -
            (C117 * C886 + C50919 * C900) * C624) *
               C107 +
           ((C117 * C877 + C50919 * C887) * C628 - (C508 * C622 + C507 * C627) +
            (C117 * C888 + C50919 * C901) * C623 -
            (C117 * C878 + C50919 * C889) * C629 -
            (C117 * C890 + C50919 * C902) * C624) *
               C108 +
           ((C117 * C879 + C50919 * C891) * C628 - (C510 * C622 + C509 * C627) +
            (C117 * C892 + C50919 * C903) * C623 -
            (C117 * C880 + C50919 * C893) * C629 -
            (C117 * C894 + C50919 * C904) * C624) *
               C109 +
           ((C117 * C881 + C50919 * C895) * C628 - (C512 * C622 + C511 * C627) +
            (C117 * C896 + C50919 * C905) * C623 -
            (C117 * C882 + C50919 * C897) * C629 -
            (C117 * C898 + C50919 * C906) * C624) *
               C110) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C2434 +
             (C178 + C179) * C50769) *
                C2436 +
            ((C2626 * C118 + C2627 * C50819) * C2434 +
             (C2440 + C2441) * C50769) *
                C2437 +
            ((C2628 * C118 + C2629 * C50819) * C2434 +
             (C2442 + C2443) * C50769) *
                C2438) *
               C291 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C2434) * C2438 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C2434) * C2437 +
            ((C181 + C180) * C50769 + (C179 + C178) * C2434) * C2436) *
               C292 +
           ((C188 * C2434 + C189 * C50769) * C2436 +
            ((C2447 + C2446) * C2434 + (C2448 + C2449) * C50769) * C2437 +
            ((C2445 + C2444) * C2434 + (C2450 + C2451) * C50769) * C2438) *
               C293) *
              C51049 +
          ((((C515 + C516) * C2434 + (C517 + C518) * C50769) * C2436 +
            ((C2784 + C2785) * C2434 + (C2786 + C2787) * C50769) * C2437 +
            ((C2800 + C2801) * C2434 + (C2802 + C2803) * C50769) * C2438) *
               C292 -
           (((C2801 + C2800) * C50769 +
             ((C117 * C886 + C50919 * C900) * C50819 +
              (C117 * C876 + C50919 * C885) * C118) *
                 C2434) *
                C2438 +
            ((C2785 + C2784) * C50769 +
             ((C117 * C884 + C50919 * C899) * C50819 +
              (C117 * C875 + C50919 * C883) * C118) *
                 C2434) *
                C2437 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C2434) *
                C2436) *
               C291 -
           ((((C117 * C898 + C50919 * C906) * C50819 +
              (C117 * C882 + C50919 * C897) * C118) *
                 C50769 +
             (C2803 + C2802) * C2434) *
                C2438 +
            ((C1661 * C50819 + C1660 * C118) * C50769 +
             (C2787 + C2786) * C2434) *
                C2437 +
            (C523 * C50769 + C524 * C2434) * C2436) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C2434 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C2436 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C2434 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C2437 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             C3096 * C629 + C3097 * C624) *
                C2434 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C2438) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C2434 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C50769) *
               C2436 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C2434 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C50769) *
               C2437 +
           ((C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
             (C117 * C3245 + C50919 * C3251) * C629 -
             (C117 * C3252 + C50919 * C3257) * C624) *
                C2434 +
            (C3282 * C628 - (C2797 * C622 + C2796 * C627) + C3283 * C623 -
             (C117 * C3246 + C50919 * C3253) * C629 -
             (C117 * C3254 + C50919 * C3258) * C624) *
                C50769) *
               C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C51035 +
            (C1358 + C1359 - C1360 - C1361) * C50769) *
               C51096 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C51035 +
            (C3884 + C3885 - C3886 - C3887) * C50769) *
               C51097 +
           ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C51035 +
            (C3888 + C3889 - C3890 - C3891) * C50769) *
               C24522) *
              C51093 +
          (((C1360 - (C1359 + C1358) + C1361) * C51035 +
            (C1364 - (C1363 + C1362) + C1365) * C50769) *
               C51096 +
           ((C3886 - (C3885 + C3884) + C3887) * C51035 +
            (C3892 - (C3893 + C3894) + C3895) * C50769) *
               C51097 +
           ((C3890 - (C3889 + C3888) + C3891) * C51035 +
            (C3896 - (C3897 + C3898) + C3899) * C50769) *
               C24522) *
              C51078 +
          ((C1378 * C51035 + C1379 * C50769) * C51096 +
           (C9445 * C51035 + (C9442 + C9441 - C9440 - C9443) * C50769) *
               C51097 +
           ((C3898 + C3897 - C3896 - C3899) * C51035 +
            (C679 * C1355 + C680 * C1350 -
             (C117 * C764 + C50919 * C771) * C1356 -
             (C117 * C772 + C50919 * C776) * C50835) *
                C50769) *
               C24522) *
              C1354) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1482 +
             (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
             C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                C51035 +
            (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C50769) *
               C51096 +
           ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
             C2980 * C1484 + C2981 * C1479) *
                C51035 +
            (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C50769) *
               C51097 +
           ((C2628 * C1482 + C2629 * C51094 - C2980 * C1483 - C2981 * C51081 +
             C3096 * C1484 + C3097 * C1479) *
                C51035 +
            (C4052 + C4053 - C4054 - C4055 + C4056 + C4057) * C50769) *
               C24522) *
              C1480 +
          (((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C51035 +
            (C1494 - (C1493 + C1492) + C1495 - C1496 - C1497) * C50769) *
               C51096 +
           ((C4048 - (C4047 + C4046) + C4049 - C4050 - C4051) * C51035 +
            (C9594 - (C9593 + C9592) + C9595 - C9596 - C9597) * C50769) *
               C51097 +
           ((C4054 - (C4053 + C4052) + C4055 - C4056 - C4057) * C51035 +
            (C2632 * C1483 - (C678 * C51094 + C677 * C1482) + C2633 * C51081 -
             (C117 * C2951 + C50919 * C2956) * C1484 -
             (C117 * C2957 + C50919 * C2960) * C1479) *
                C50769) *
               C24522) *
              C50790) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C51035 +
             (C1358 + C1359 - C1360 - C1361) * C50769) *
                C51096 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C51035 +
             (C3884 + C3885 - C3886 - C3887) * C50769) *
                C51097 +
            ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                 C51035 +
             (C3888 + C3889 - C3890 - C3891) * C50769) *
                C24522) *
               C1480 +
           (((C1360 - (C1359 + C1358) + C1361) * C51035 +
             (C1364 - (C1363 + C1362) + C1365) * C50769) *
                C51096 +
            ((C3886 - (C3885 + C3884) + C3887) * C51035 +
             (C3892 - (C3893 + C3894) + C3895) * C50769) *
                C51097 +
            ((C3890 - (C3889 + C3888) + C3891) * C51035 +
             (C3896 - (C3897 + C3898) + C3899) * C50769) *
                C24522) *
               C50790) *
              C51049 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C51035 +
             (C1662 - (C1640 + C1641) + C1663) * C50769) *
                C51096 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C51035 +
             (C4256 - (C4257 + C4258) + C4259) * C50769) *
                C51097 +
            ((C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) +
              C3281 * C50835) *
                 C51035 +
             (C4260 - (C4261 + C4262) + C4263) * C50769) *
                C24522) *
               C1480 +
           (((C1641 + C1640 - C1662 - C1663) * C51035 +
             (C1647 + C1646 - C1664 - C1665) * C50769) *
                C51096 +
            ((C4258 + C4257 - C4256 - C4259) * C51035 +
             (C9794 + C9793 - C9792 - C9795) * C50769) *
                C51097 +
            ((C4262 + C4261 - C4260 - C4263) * C51035 +
             (C2798 * C1355 + C2799 * C1350 -
              (C117 * C4251 + C50919 * C4252) * C1356 -
              (C117 * C4253 + C50919 * C4254) * C50835) *
                 C50769) *
                C24522) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C51035 +
             (C1358 + C1359 - C1360 - C1361) * C50769) *
                C51096 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C51035 +
             (C3884 + C3885 - C3886 - C3887) * C50769) *
                C51097 +
            ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                 C51035 +
             (C3888 + C3889 - C3890 - C3891) * C50769) *
                C24522) *
               C51040 +
           (((C1360 - (C1359 + C1358) + C1361) * C51035 +
             (C1364 - (C1363 + C1362) + C1365) * C50769) *
                C51096 +
            ((C3886 - (C3885 + C3884) + C3887) * C51035 +
             (C3892 - (C3893 + C3894) + C3895) * C50769) *
                C51097 +
            ((C3890 - (C3889 + C3888) + C3891) * C51035 +
             (C3896 - (C3897 + C3898) + C3899) * C50769) *
                C24522) *
               C50790) *
              C1765 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C51035 +
             (C1662 - (C1640 + C1641) + C1663) * C50769) *
                C51096 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C51035 +
             (C4256 - (C4257 + C4258) + C4259) * C50769) *
                C51097 +
            ((C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) +
              C3281 * C50835) *
                 C51035 +
             (C4260 - (C4261 + C4262) + C4263) * C50769) *
                C24522) *
               C51040 +
           (((C1641 + C1640 - C1662 - C1663) * C51035 +
             (C1647 + C1646 - C1664 - C1665) * C50769) *
                C51096 +
            ((C4258 + C4257 - C4256 - C4259) * C51035 +
             (C9794 + C9793 - C9792 - C9795) * C50769) *
                C51097 +
            ((C4262 + C4261 - C4260 - C4263) * C51035 +
             (C2798 * C1355 + C2799 * C1350 -
              (C117 * C4251 + C50919 * C4252) * C1356 -
              (C117 * C4253 + C50919 * C4254) * C50835) *
                 C50769) *
                C24522) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50919 * C126) * C1482 +
                     (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
                     C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                        C51035 +
                    (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C50769) *
                       C51096 +
                   ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 -
                     C2629 * C51081 + C2980 * C1484 + C2981 * C1479) *
                        C51035 +
                    (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C50769) *
                       C51097 +
                   ((C2628 * C1482 + C2629 * C51094 - C2980 * C1483 -
                     C2981 * C51081 + C3096 * C1484 + C3097 * C1479) *
                        C51035 +
                    (C4052 + C4053 - C4054 - C4055 + C4056 + C4057) * C50769) *
                       C24522) *
                      C50785 * C1765 +
                  (((C3276 * C1483 -
                     ((C117 * C480 + C50919 * C488) * C51094 +
                      (C117 * C470 + C50919 * C481) * C1482) +
                     C3277 * C51081 - C3278 * C1484 - C3279 * C1479) *
                        C51035 +
                    (C1656 * C1483 - (C508 * C51094 + C507 * C1482) +
                     C1657 * C51081 - C2796 * C1484 - C2797 * C1479) *
                        C50769) *
                       C51096 +
                   ((C3278 * C1483 - (C3277 * C51094 + C3276 * C1482) +
                     C3279 * C51081 - C3280 * C1484 - C3281 * C1479) *
                        C51035 +
                    (C2796 * C1483 - (C1657 * C51094 + C1656 * C1482) +
                     C2797 * C51081 - C3282 * C1484 - C3283 * C1479) *
                        C50769) *
                       C51097 +
                   ((C3280 * C1483 - (C3279 * C51094 + C3278 * C1482) +
                     C3281 * C51081 - C20421 * C1484 - C20422 * C1479) *
                        C51035 +
                    (C3282 * C1483 - (C2797 * C51094 + C2796 * C1482) +
                     C3283 * C51081 - (C117 * C3246 + C50919 * C3253) * C1484 -
                     (C117 * C3254 + C50919 * C3258) * C1479) *
                        C50769) *
                       C24522) *
                      C50785 * C50861)) /
                (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C51035 +
            (C1358 + C1359 - C1360 - C1361) * C50769) *
               C51096 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C51035 +
            (C3884 + C3885 - C3886 - C3887) * C50769) *
               C51097 +
           ((C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C51035 +
            (C3888 + C3889 - C3890 - C3891) * C50769) *
               C24522) *
              C50785 * C51095 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C51035 +
            (C1662 - (C1640 + C1641) + C1663) * C50769) *
               C51096 +
           ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C51035 +
            (C4256 - (C4257 + C4258) + C4259) * C50769) *
               C51097 +
           ((C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) + C3281 * C50835) *
                C51035 +
            (C4260 - (C4261 + C4262) + C4263) * C50769) *
               C24522) *
              C50785 * C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C1355 +
             (C117 * C1014 + C50919 * C1023) * C1350 - C3620 * C1356 -
             C3621 * C50835) *
                C51035 +
            (C1041 * C1355 + C1042 * C1350 - C3450 * C1356 - C3451 * C50835) *
                C50769) *
               C51096 +
           ((C3620 * C1355 + C3621 * C1350 - C3622 * C1356 - C3623 * C50835) *
                C51035 +
            (C3450 * C1355 + C3451 * C1350 - C3452 * C1356 - C3453 * C50835) *
                C50769) *
               C51097 +
           ((C3622 * C1355 + C3623 * C1350 - C20627 * C1356 - C20628 * C50835) *
                C51035 +
            (C3452 * C1355 + C3453 * C1350 -
             (C117 * C3604 + C50919 * C3607) * C1356 -
             (C117 * C3608 + C50919 * C3610) * C50835) *
                C50769) *
               C24522) *
              C50785 * C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C51035 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C51096 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C51035 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C51097 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             C3096 * C629 + C3097 * C624) *
                C51035 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C24522) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C51035 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C50769) *
               C51096 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C51035 +
            (C8647 - (C8646 + C8645) + C8648 - C8649 - C8650) * C50769) *
               C51097 +
           ((C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C51035 +
            (C2632 * C628 - (C678 * C622 + C677 * C627) + C2633 * C623 -
             (C117 * C2951 + C50919 * C2956) * C629 -
             (C117 * C2957 + C50919 * C2960) * C624) *
                C50769) *
               C24522) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C51035 +
            (C178 + C179) * C50769) *
               C51096 +
           ((C2626 * C118 + C2627 * C50819) * C51035 +
            (C2440 + C2441) * C50769) *
               C51097 +
           ((C2628 * C118 + C2629 * C50819) * C51035 +
            (C2442 + C2443) * C50769) *
               C24522) *
              C112 -
          (((C2444 + C2445) * C50769 + (C2443 + C2442) * C51035) * C24522 +
           ((C2446 + C2447) * C50769 + (C2441 + C2440) * C51035) * C51097 +
           ((C181 + C180) * C50769 + (C179 + C178) * C51035) * C51096) *
              C113 +
          ((C188 * C51035 + C189 * C50769) * C51096 +
           (C8193 * C51035 + (C2448 + C2449) * C50769) * C51097 +
           ((C2445 + C2444) * C51035 + (C2450 + C2451) * C50769) * C24522) *
              C114 -
          ((((C117 * C644 + C50919 * C649) * C50819 +
             (C117 * C634 + C50919 * C643) * C118) *
                C50769 +
            (C2451 + C2450) * C51035) *
               C24522 +
           ((C8196 + C8195) * C50769 + C8194 * C51035) * C51097 +
           (C190 * C50769 + C191 * C51035) * C51096) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51035 +
             (C178 + C179) * C50769) *
                C51096 +
            ((C2626 * C118 + C2627 * C50819) * C51035 +
             (C2440 + C2441) * C50769) *
                C51097 +
            ((C2628 * C118 + C2629 * C50819) * C51035 +
             (C2442 + C2443) * C50769) *
                C24522) *
               C51040 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C51035) * C24522 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C51035) * C51097 +
            ((C181 + C180) * C50769 + (C179 + C178) * C51035) * C51096) *
               C50790) *
              C1005 +
          ((((C515 + C516) * C51035 + (C517 + C518) * C50769) * C51096 +
            ((C2784 + C2785) * C51035 + (C2786 + C2787) * C50769) * C51097 +
            ((C2800 + C2801) * C51035 + (C2802 + C2803) * C50769) * C24522) *
               C50790 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C51035) *
                C24522 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C51035) *
                C51097 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C51035) *
                C51096) *
               C51040) *
              C1006 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C51035 +
             (C1047 + C1048) * C50769) *
                C51096 +
            ((C3620 * C118 + C3621 * C50819) * C51035 +
             (C3454 + C3455) * C50769) *
                C51097 +
            ((C3622 * C118 + C3623 * C50819) * C51035 +
             (C3456 + C3457) * C50769) *
                C24522) *
               C51040 -
           ((((C117 * C3436 + C50919 * C3440) * C50819 +
              (C117 * C3431 + C50919 * C3437) * C118) *
                 C50769 +
             (C3457 + C3456) * C51035) *
                C24522 +
            ((C9048 + C9047) * C50769 + (C3455 + C3454) * C51035) * C51097 +
            ((C1050 + C1049) * C50769 + (C1048 + C1047) * C51035) * C51096) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C51035 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C50769) *
              C51096 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C51035 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C50769) *
              C51097 +
          ((C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
            C3096 * C759 + C3097 * C754 - C20313 * C760 - C20314 * C755) *
               C51035 +
           (C675 * C757 + C676 * C752 - C2630 * C758 - C2631 * C753 +
            C2982 * C759 + C2983 * C754 -
            (C117 * C3084 + C50919 * C3087) * C760 -
            (C117 * C3088 + C50919 * C3090) * C755) *
               C50769) *
              C24522) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C51035 +
            (C321 + C322 - C355 - C356) * C50769) *
               C51096 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C51035 +
            (C2606 + C2607 - C2608 - C2609) * C50769) *
               C51097 +
           ((C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                C51035 +
            (C2610 + C2611 - C2634 - C2635) * C50769) *
               C24522) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C51035 +
            (C357 - (C328 + C327) + C358) * C50769) *
               C51096 +
           ((C2608 - (C2607 + C2606) + C2609) * C51035 +
            (C2616 - (C2617 + C2618) + C2619) * C50769) *
               C51097 +
           ((C2634 - (C2611 + C2610) + C2635) * C51035 +
            (C2636 - (C2622 + C2623) + C2637) * C50769) *
               C24522) *
              C292 +
          ((C365 * C51035 + C366 * C50769) * C51096 +
           (C8349 * C51035 + (C8346 + C8345 - C8344 - C8347) * C50769) *
               C51097 +
           ((C2623 + C2622 - C2636 - C2637) * C51035 +
            (C679 * C294 + C680 * C51047 -
             (C117 * C764 + C50919 * C771) * C295 -
             (C117 * C772 + C50919 * C776) * C50835) *
                C50769) *
               C24522) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C51035 +
            (C321 + C322 - C355 - C356) * C50769) *
               C51096 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C51035 +
            (C2606 + C2607 - C2608 - C2609) * C50769) *
               C51097 +
           ((C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                C51035 +
            (C2610 + C2611 - C2634 - C2635) * C50769) *
               C24522) *
              C50785 * C1005 +
          (((C3276 * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             C3277 * C50835) *
                C51035 +
            (C1898 - (C1899 + C1900) + C1901) * C50769) *
               C51096 +
           ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                C51035 +
            (C4604 - (C4605 + C4606) + C4607) * C50769) *
               C51097 +
           ((C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
                C51035 +
            (C4608 - (C4609 + C4610) + C4611) * C50769) *
               C24522) *
              C50785 * C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C294 +
             (C117 * C1014 + C50919 * C1023) * C51047 - C3620 * C295 -
             C3621 * C50835) *
                C51035 +
            (C1041 * C294 + C1042 * C51047 - C3450 * C295 - C3451 * C50835) *
                C50769) *
               C51096 +
           ((C3620 * C294 + C3621 * C51047 - C3622 * C295 - C3623 * C50835) *
                C51035 +
            (C3450 * C294 + C3451 * C51047 - C3452 * C295 - C3453 * C50835) *
                C50769) *
               C51097 +
           ((C3622 * C294 + C3623 * C51047 - C20627 * C295 - C20628 * C50835) *
                C51035 +
            (C3452 * C294 + C3453 * C51047 -
             (C117 * C3604 + C50919 * C3607) * C295 -
             (C117 * C3608 + C50919 * C3610) * C50835) *
                C50769) *
               C24522) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C51035 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C51096 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C51035 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C51097 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             C3096 * C629 + C3097 * C624) *
                C51035 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C24522) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C51035 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C50769) *
               C51096 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C51035 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C50769) *
               C51097 +
           ((C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
             C20421 * C629 - C20422 * C624) *
                C51035 +
            (C3282 * C628 - (C2797 * C622 + C2796 * C627) + C3283 * C623 -
             (C117 * C3246 + C50919 * C3253) * C629 -
             (C117 * C3254 + C50919 * C3258) * C624) *
                C50769) *
               C24522) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51035 +
             (C178 + C179) * C50769) *
                C51096 +
            ((C2626 * C118 + C2627 * C50819) * C51035 +
             (C2440 + C2441) * C50769) *
                C51097 +
            ((C2628 * C118 + C2629 * C50819) * C51035 +
             (C2442 + C2443) * C50769) *
                C24522) *
               C291 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C51035) * C24522 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C51035) * C51097 +
            ((C181 + C180) * C50769 + (C179 + C178) * C51035) * C51096) *
               C292 +
           ((C188 * C51035 + C189 * C50769) * C51096 +
            (C8193 * C51035 + (C2448 + C2449) * C50769) * C51097 +
            ((C2445 + C2444) * C51035 + (C2450 + C2451) * C50769) * C24522) *
               C293) *
              C51049 +
          ((((C515 + C516) * C51035 + (C517 + C518) * C50769) * C51096 +
            ((C2784 + C2785) * C51035 + (C2786 + C2787) * C50769) * C51097 +
            ((C2800 + C2801) * C51035 + (C2802 + C2803) * C50769) * C24522) *
               C292 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C51035) *
                C24522 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C51035) *
                C51097 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C51035) *
                C51096) *
               C291 -
           ((((C117 * C898 + C50919 * C906) * C50819 +
              (C117 * C882 + C50919 * C897) * C118) *
                 C50769 +
             (C2803 + C2802) * C51035) *
                C24522 +
            ((C8497 + C8496) * C50769 + C8498 * C51035) * C51097 +
            (C523 * C50769 + C524 * C51035) * C51096) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C51035 +
            (C178 + C179) * C50769) *
               C51096 +
           ((C2626 * C118 + C2627 * C50819) * C51035 +
            (C2440 + C2441) * C50769) *
               C51097 +
           ((C2628 * C118 + C2629 * C50819) * C51035 +
            (C2442 + C2443) * C50769) *
               C24522) *
              C50785 * C1232 -
          (((C2801 + C2800) * C50769 +
            (C3279 * C50819 + C3278 * C118) * C51035) *
               C24522 +
           ((C2785 + C2784) * C50769 +
            (C3277 * C50819 + C3276 * C118) * C51035) *
               C51097 +
           ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                      (C117 * C470 + C50919 * C481) * C118) *
                                         C51035) *
               C51096) *
              C50785 * C1233 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C51035 +
            (C1047 + C1048) * C50769) *
               C51096 +
           ((C3620 * C118 + C3621 * C50819) * C51035 +
            (C3454 + C3455) * C50769) *
               C51097 +
           ((C3622 * C118 + C3623 * C50819) * C51035 +
            (C3456 + C3457) * C50769) *
               C24522) *
              C50785 * C1234 -
          ((((C117 * C3725 + C50919 * C3733) * C50819 +
             (C117 * C3721 + C50919 * C3726) * C118) *
                C50769 +
            ((C117 * C3727 + C50919 * C3734) * C50819 +
             (C117 * C3722 + C50919 * C3728) * C118) *
                C51035) *
               C24522 +
           (((C117 * C3729 + C50919 * C3735) * C50819 +
             (C117 * C3723 + C50919 * C3730) * C118) *
                C50769 +
            ((C117 * C3731 + C50919 * C3736) * C50819 +
             (C117 * C3724 + C50919 * C3732) * C118) *
                C51035) *
               C51097 +
           (((C117 * C1244 + C50919 * C1250) * C50819 +
             (C117 * C1238 + C50919 * C1245) * C118) *
                C50769 +
            ((C117 * C1246 + C50919 * C1251) * C50819 +
             (C117 * C1239 + C50919 * C1247) * C118) *
                C51035) *
               C51096) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51035 +
             (C178 + C179) * C50769) *
                C51096 +
            ((C2626 * C118 + C2627 * C50819) * C51035 +
             (C2440 + C2441) * C50769) *
                C51097 +
            ((C2628 * C118 + C2629 * C50819) * C51035 +
             (C2442 + C2443) * C50769) *
                C24522) *
               C51093 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C51035) * C24522 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C51035) * C51097 +
            ((C181 + C180) * C50769 + (C179 + C178) * C51035) * C51096) *
               C51078 +
           ((C188 * C51035 + C189 * C50769) * C51096 +
            (C8193 * C51035 + (C2448 + C2449) * C50769) * C51097 +
            ((C2445 + C2444) * C51035 + (C2450 + C2451) * C50769) * C24522) *
               C1354) *
              C1765 +
          ((((C515 + C516) * C51035 + (C517 + C518) * C50769) * C51096 +
            ((C2784 + C2785) * C51035 + (C2786 + C2787) * C50769) * C51097 +
            ((C2800 + C2801) * C51035 + (C2802 + C2803) * C50769) * C24522) *
               C51078 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C51035) *
                C24522 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C51035) *
                C51097 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C51035) *
                C51096) *
               C51093 -
           ((((C117 * C898 + C50919 * C906) * C50819 +
              (C117 * C882 + C50919 * C897) * C118) *
                 C50769 +
             (C2803 + C2802) * C51035) *
                C24522 +
            ((C8497 + C8496) * C50769 + C8498 * C51035) * C51097 +
            (C523 * C50769 + C524 * C51035) * C51096) *
               C1354) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C294 +
              (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
              C2627 * C50835) *
                 C51035 +
             (C321 + C322 - C355 - C356) * C50769) *
                C51096 +
            ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                 C51035 +
             (C2606 + C2607 - C2608 - C2609) * C50769) *
                C51097 +
            ((C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                 C51035 +
             (C2610 + C2611 - C2634 - C2635) * C50769) *
                C24522) *
               C1480 +
           (((C355 - (C322 + C321) + C356) * C51035 +
             (C357 - (C328 + C327) + C358) * C50769) *
                C51096 +
            ((C2608 - (C2607 + C2606) + C2609) * C51035 +
             (C2616 - (C2617 + C2618) + C2619) * C50769) *
                C51097 +
            ((C2634 - (C2611 + C2610) + C2635) * C51035 +
             (C2636 - (C2622 + C2623) + C2637) * C50769) *
                C24522) *
               C50790) *
              C1765 +
          ((((C3276 * C295 -
              ((C117 * C480 + C50919 * C488) * C51047 +
               (C117 * C470 + C50919 * C481) * C294) +
              C3277 * C50835) *
                 C51035 +
             (C1898 - (C1899 + C1900) + C1901) * C50769) *
                C51096 +
            ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                 C51035 +
             (C4604 - (C4605 + C4606) + C4607) * C50769) *
                C51097 +
            ((C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
                 C51035 +
             (C4608 - (C4609 + C4610) + C4611) * C50769) *
                C24522) *
               C1480 +
           (((C1900 + C1899 - C1898 - C1901) * C51035 +
             (C1904 + C1903 - C1902 - C1905) * C50769) *
                C51096 +
            ((C4606 + C4605 - C4604 - C4607) * C51035 +
             (C10138 + C10137 - C10136 - C10139) * C50769) *
                C51097 +
            ((C4610 + C4609 - C4608 - C4611) * C51035 +
             (C2798 * C294 + C2799 * C51047 -
              (C117 * C4251 + C50919 * C4252) * C295 -
              (C117 * C4253 + C50919 * C4254) * C50835) *
                 C50769) *
                C24522) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51035 +
             (C178 + C179) * C50769) *
                C51096 +
            ((C2626 * C118 + C2627 * C50819) * C51035 +
             (C2440 + C2441) * C50769) *
                C51097 +
            ((C2628 * C118 + C2629 * C50819) * C51035 +
             (C2442 + C2443) * C50769) *
                C24522) *
               C1480 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C51035) * C24522 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C51035) * C51097 +
            ((C181 + C180) * C50769 + (C179 + C178) * C51035) * C51096) *
               C50790) *
              C51095 +
          ((((C515 + C516) * C51035 + (C517 + C518) * C50769) * C51096 +
            ((C2784 + C2785) * C51035 + (C2786 + C2787) * C50769) * C51097 +
            ((C2800 + C2801) * C51035 + (C2802 + C2803) * C50769) * C24522) *
               C50790 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C51035) *
                C24522 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C51035) *
                C51097 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C51035) *
                C51096) *
               C1480) *
              C51084 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C51035 +
             (C1047 + C1048) * C50769) *
                C51096 +
            ((C3620 * C118 + C3621 * C50819) * C51035 +
             (C3454 + C3455) * C50769) *
                C51097 +
            ((C3622 * C118 + C3623 * C50819) * C51035 +
             (C3456 + C3457) * C50769) *
                C24522) *
               C1480 -
           ((((C117 * C3436 + C50919 * C3440) * C50819 +
              (C117 * C3431 + C50919 * C3437) * C118) *
                 C50769 +
             (C3457 + C3456) * C51035) *
                C24522 +
            ((C9048 + C9047) * C50769 + (C3455 + C3454) * C51035) * C51097 +
            ((C1050 + C1049) * C50769 + (C1048 + C1047) * C51035) * C51096) *
               C50790) *
              C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C51035 +
            (C178 + C179) * C50769) *
               C51096 +
           ((C2626 * C118 + C2627 * C50819) * C51035 +
            (C2440 + C2441) * C50769) *
               C51097 +
           ((C2628 * C118 + C2629 * C50819) * C51035 +
            (C2442 + C2443) * C50769) *
               C24522) *
              C112 -
          (((C2444 + C2445) * C50769 + (C2443 + C2442) * C51035) * C24522 +
           ((C2446 + C2447) * C50769 + (C2441 + C2440) * C51035) * C51097 +
           ((C181 + C180) * C50769 + (C179 + C178) * C51035) * C51096) *
              C113 +
          ((C188 * C51035 + C189 * C50769) * C51096 +
           (C8193 * C51035 + (C2448 + C2449) * C50769) * C51097 +
           ((C2445 + C2444) * C51035 + (C2450 + C2451) * C50769) * C24522) *
              C114 -
          ((((C117 * C644 + C50919 * C649) * C50819 +
             (C117 * C634 + C50919 * C643) * C118) *
                C50769 +
            (C2451 + C2450) * C51035) *
               C24522 +
           ((C8196 + C8195) * C50769 + C8194 * C51035) * C51097 +
           (C190 * C50769 + C191 * C51035) * C51096) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C51035 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C51096 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C51035 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C51097 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             C3096 * C629 + C3097 * C624) *
                C51035 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C24522) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C51035 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C50769) *
               C51096 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C51035 +
            (C8647 - (C8646 + C8645) + C8648 - C8649 - C8650) * C50769) *
               C51097 +
           ((C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C51035 +
            (C2632 * C628 - (C678 * C622 + C677 * C627) + C2633 * C623 -
             (C117 * C2951 + C50919 * C2956) * C629 -
             (C117 * C2957 + C50919 * C2960) * C624) *
                C50769) *
               C24522) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C51035 +
            (C321 + C322 - C355 - C356) * C50769) *
               C51096 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C51035 +
            (C2606 + C2607 - C2608 - C2609) * C50769) *
               C51097 +
           ((C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                C51035 +
            (C2610 + C2611 - C2634 - C2635) * C50769) *
               C24522) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C51035 +
            (C357 - (C328 + C327) + C358) * C50769) *
               C51096 +
           ((C2608 - (C2607 + C2606) + C2609) * C51035 +
            (C2616 - (C2617 + C2618) + C2619) * C50769) *
               C51097 +
           ((C2634 - (C2611 + C2610) + C2635) * C51035 +
            (C2636 - (C2622 + C2623) + C2637) * C50769) *
               C24522) *
              C292 +
          ((C365 * C51035 + C366 * C50769) * C51096 +
           (C8349 * C51035 + (C8346 + C8345 - C8344 - C8347) * C50769) *
               C51097 +
           ((C2623 + C2622 - C2636 - C2637) * C51035 +
            (C679 * C294 + C680 * C51047 -
             (C117 * C764 + C50919 * C771) * C295 -
             (C117 * C772 + C50919 * C776) * C50835) *
                C50769) *
               C24522) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C51035 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C50769) *
              C51096 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C51035 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C50769) *
              C51097 +
          ((C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
            C3096 * C759 + C3097 * C754 - C20313 * C760 - C20314 * C755) *
               C51035 +
           (C675 * C757 + C676 * C752 - C2630 * C758 - C2631 * C753 +
            C2982 * C759 + C2983 * C754 -
            (C117 * C3084 + C50919 * C3087) * C760 -
            (C117 * C3088 + C50919 * C3090) * C755) *
               C50769) *
              C24522) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C51035 +
             (C178 + C179) * C50769) *
                C51096 +
            ((C2626 * C118 + C2627 * C50819) * C51035 +
             (C2440 + C2441) * C50769) *
                C51097 +
            ((C2628 * C118 + C2629 * C50819) * C51035 +
             (C2442 + C2443) * C50769) *
                C24522) *
               C291 -
           (((C2444 + C2445) * C50769 + (C2443 + C2442) * C51035) * C24522 +
            ((C2446 + C2447) * C50769 + (C2441 + C2440) * C51035) * C51097 +
            ((C181 + C180) * C50769 + (C179 + C178) * C51035) * C51096) *
               C292 +
           ((C188 * C51035 + C189 * C50769) * C51096 +
            (C8193 * C51035 + (C2448 + C2449) * C50769) * C51097 +
            ((C2445 + C2444) * C51035 + (C2450 + C2451) * C50769) * C24522) *
               C293) *
              C51049 +
          ((((C515 + C516) * C51035 + (C517 + C518) * C50769) * C51096 +
            ((C2784 + C2785) * C51035 + (C2786 + C2787) * C50769) * C51097 +
            ((C2800 + C2801) * C51035 + (C2802 + C2803) * C50769) * C24522) *
               C292 -
           (((C2801 + C2800) * C50769 +
             (C3279 * C50819 + C3278 * C118) * C51035) *
                C24522 +
            ((C2785 + C2784) * C50769 +
             (C3277 * C50819 + C3276 * C118) * C51035) *
                C51097 +
            ((C516 + C515) * C50769 + ((C117 * C480 + C50919 * C488) * C50819 +
                                       (C117 * C470 + C50919 * C481) * C118) *
                                          C51035) *
                C51096) *
               C291 -
           ((((C117 * C898 + C50919 * C906) * C50819 +
              (C117 * C882 + C50919 * C897) * C118) *
                 C50769 +
             (C2803 + C2802) * C51035) *
                C24522 +
            ((C8497 + C8496) * C50769 + C8498 * C51035) * C51097 +
            (C523 * C50769 + C524 * C51035) * C51096) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C51035 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C50769) *
               C51096 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C51035 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C50769) *
               C51097 +
           ((C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
             C3096 * C629 + C3097 * C624) *
                C51035 +
            (C2972 + C2973 - C2974 - C2975 + C2984 + C2985) * C50769) *
               C24522) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C51035 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C50769) *
               C51096 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C51035 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C50769) *
               C51097 +
           ((C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
             C20421 * C629 - C20422 * C624) *
                C51035 +
            (C3282 * C628 - (C2797 * C622 + C2796 * C627) + C3283 * C623 -
             (C117 * C3246 + C50919 * C3253) * C629 -
             (C117 * C3254 + C50919 * C3258) * C624) *
                C50769) *
               C24522) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C1355 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C1350 -
            (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
               C50764 * C51096 +
           ((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
            (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
               C50764 * C51097 +
           (C31082 * C1355 + C31083 * C1350 - C31182 * C1356 -
            C31183 * C50835) *
               C50764 * C24522) *
              C51093 +
          ((C13961 * C1356 -
            ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
            C13962 * C50835) *
               C50764 * C51096 +
           (C14365 * C1356 - (C13960 * C1350 + C13959 * C1355) +
            C14366 * C50835) *
               C50764 * C51097 +
           ((C14381 + C14382) * C1356 - (C14368 * C1350 + C14367 * C1355) +
            (C14383 + C14384) * C50835) *
               C50764 * C24522) *
              C51078 +
          (C12290 * C50764 * C51096 +
           (C13963 * C1355 + C13964 * C1350 - (C11477 + C11476) * C1356 -
            (C11479 + C11478) * C50835) *
               C50764 * C51097 +
           ((C11476 + C11477) * C1355 + (C11478 + C11479) * C1350 -
            (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
                C1356 -
            (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
                C50835) *
               C50764 * C24522) *
              C1354) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C1482 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51094 -
            (C13965 + C13966) * C1483 - (C13967 + C13968) * C51081 +
            C31082 * C1484 + C31083 * C1479) *
               C50764 * C51096 +
           ((C13966 + C13965) * C1482 + (C13968 + C13967) * C51094 -
            (C14378 + C14377) * C1483 - (C14380 + C14379) * C51081 +
            (C14524 + C14523) * C1484 + (C14526 + C14525) * C1479) *
               C50764 * C51097 +
           (C31082 * C1482 + C31083 * C51094 - C31182 * C1483 -
            C31183 * C51081 + (C31193 + C31192) * C1484 +
            (C31195 + C31194) * C1479) *
               C50764 * C24522) *
              C1480 +
          ((C13961 * C1483 -
            ((C10909 + C10908) * C51094 + (C10907 + C10906) * C1482) +
            C13962 * C51081 - C14367 * C1484 - C14368 * C1479) *
               C50764 * C51096 +
           (C14365 * C1483 - (C13960 * C51094 + C13959 * C1482) +
            C14366 * C51081 - (C14382 + C14381) * C1484 -
            (C14384 + C14383) * C1479) *
               C50764 * C51097 +
           ((C14381 + C14382) * C1483 - (C14368 * C51094 + C14367 * C1482) +
            (C14383 + C14384) * C51081 -
            (C10872 * C3246 + C50983 * C3253 + C10871 * C2950 +
             C51064 * C2954) *
                C1484 -
            (C10872 * C3254 + C50983 * C3258 + C10871 * C2955 +
             C51064 * C2959) *
                C1479) *
               C50764 * C24522) *
              C50790) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1355 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C1350 -
             (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                C50764 * C51096 +
            ((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
             (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                C50764 * C51097 +
            (C31082 * C1355 + C31083 * C1350 - C31182 * C1356 -
             C31183 * C50835) *
                C50764 * C24522) *
               C1480 +
           ((C13961 * C1356 -
             ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
             C13962 * C50835) *
                C50764 * C51096 +
            (C14365 * C1356 - (C13960 * C1350 + C13959 * C1355) +
             C14366 * C50835) *
                C50764 * C51097 +
            ((C14381 + C14382) * C1356 - (C14368 * C1350 + C14367 * C1355) +
             (C14383 + C14384) * C50835) *
                C50764 * C24522) *
               C50790) *
              C51049 +
          ((((C14745 + C14746) * C1356 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C1350 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C1355) +
             (C14747 + C14748) * C50835) *
                C50764 * C51096 +
            ((C14750 + C14749) * C1356 -
             ((C14748 + C14747) * C1350 + (C14746 + C14745) * C1355) +
             (C14752 + C14751) * C50835) *
                C50764 * C51097 +
            ((C31353 + C31352) * C1356 - (C31343 * C1350 + C31342 * C1355) +
             (C31355 + C31354) * C50835) *
                C50764 * C24522) *
               C1480 +
           (((C11293 + C11294) * C1355 + (C11295 + C11296) * C1350 -
             C15948 * C1356 - C15947 * C50835) *
                C50764 * C51096 +
            (C15945 * C1355 + C15946 * C1350 - (C14753 + C14754) * C1356 -
             (C14755 + C14756) * C50835) *
                C50764 * C51097 +
            ((C14754 + C14753) * C1355 + (C14756 + C14755) * C1350 -
             (C10872 * C3604 + C50983 * C3607 + C10871 * C3244 +
              C51064 * C3249) *
                 C1356 -
             (C10872 * C3608 + C50983 * C3610 + C10871 * C3250 +
              C51064 * C3256) *
                 C50835) *
                C50764 * C24522) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1355 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C1350 -
             (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                C50764 * C51096 +
            ((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
             (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                C50764 * C51097 +
            (C31082 * C1355 + C31083 * C1350 - C31182 * C1356 -
             C31183 * C50835) *
                C50764 * C24522) *
               C51040 +
           ((C13961 * C1356 -
             ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
             C13962 * C50835) *
                C50764 * C51096 +
            (C14365 * C1356 - (C13960 * C1350 + C13959 * C1355) +
             C14366 * C50835) *
                C50764 * C51097 +
            ((C14381 + C14382) * C1356 - (C14368 * C1350 + C14367 * C1355) +
             (C14383 + C14384) * C50835) *
                C50764 * C24522) *
               C50790) *
              C1765 +
          ((((C14745 + C14746) * C1356 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C1350 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C1355) +
             (C14747 + C14748) * C50835) *
                C50764 * C51096 +
            ((C14750 + C14749) * C1356 -
             ((C14748 + C14747) * C1350 + (C14746 + C14745) * C1355) +
             (C14752 + C14751) * C50835) *
                C50764 * C51097 +
            ((C31353 + C31352) * C1356 - (C31343 * C1350 + C31342 * C1355) +
             (C31355 + C31354) * C50835) *
                C50764 * C24522) *
               C51040 +
           (((C11293 + C11294) * C1355 + (C11295 + C11296) * C1350 -
             C15948 * C1356 - C15947 * C50835) *
                C50764 * C51096 +
            (C15945 * C1355 + C15946 * C1350 - (C14753 + C14754) * C1356 -
             (C14755 + C14756) * C50835) *
                C50764 * C51097 +
            ((C14754 + C14753) * C1355 + (C14756 + C14755) * C1350 -
             (C10872 * C3604 + C50983 * C3607 + C10871 * C3244 +
              C51064 * C3249) *
                 C1356 -
             (C10872 * C3608 + C50983 * C3610 + C10871 * C3250 +
              C51064 * C3256) *
                 C50835) *
                C50764 * C24522) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C1482 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51094 -
            (C13965 + C13966) * C1483 - (C13967 + C13968) * C51081 +
            C31082 * C1484 + C31083 * C1479) *
               C50764 * C51096 +
           ((C13966 + C13965) * C1482 + (C13968 + C13967) * C51094 -
            (C14378 + C14377) * C1483 - (C14380 + C14379) * C51081 +
            (C14524 + C14523) * C1484 + (C14526 + C14525) * C1479) *
               C50764 * C51097 +
           (C31082 * C1482 + C31083 * C51094 - C31182 * C1483 -
            C31183 * C51081 + (C31193 + C31192) * C1484 +
            (C31195 + C31194) * C1479) *
               C50764 * C24522) *
              C50785 * C1765 +
          (((C14745 + C14746) * C1483 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C51094 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C1482) +
            (C14747 + C14748) * C51081 - C31342 * C1484 - C31343 * C1479) *
               C50764 * C51096 +
           ((C14750 + C14749) * C1483 -
            ((C14748 + C14747) * C51094 + (C14746 + C14745) * C1482) +
            (C14752 + C14751) * C51081 - (C31352 + C31353) * C1484 -
            (C31354 + C31355) * C1479) *
               C50764 * C51097 +
           ((C31353 + C31352) * C1483 - (C31343 * C51094 + C31342 * C1482) +
            (C31355 + C31354) * C51081 -
            (C10872 * C20618 + C50983 * C20619 + C10871 * C3245 +
             C51064 * C3251) *
                C1484 -
            (C10872 * C20620 + C50983 * C20621 + C10871 * C3252 +
             C51064 * C3257) *
                C1479) *
               C50764 * C24522) *
              C50785 * C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C1355 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C1350 -
            (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
               C50764 * C51096 +
           ((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
            (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
               C50764 * C51097 +
           (C31082 * C1355 + C31083 * C1350 - C31182 * C1356 -
            C31183 * C50835) *
               C50764 * C24522) *
              C50785 * C51095 +
          (((C14745 + C14746) * C1356 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C1350 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C1355) +
            (C14747 + C14748) * C50835) *
               C50764 * C51096 +
           ((C14750 + C14749) * C1356 -
            ((C14748 + C14747) * C1350 + (C14746 + C14745) * C1355) +
            (C14752 + C14751) * C50835) *
               C50764 * C51097 +
           ((C31353 + C31352) * C1356 - (C31343 * C1350 + C31342 * C1355) +
            (C31355 + C31354) * C50835) *
               C50764 * C24522) *
              C50785 * C51084 +
          (((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
             C50983 * C1247) *
                C1355 +
            (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
             C50983 * C1251) *
                C1350 -
            (C15165 + C15166) * C1356 - (C15167 + C15168) * C50835) *
               C50764 * C51096 +
           ((C15166 + C15165) * C1355 + (C15168 + C15167) * C1350 -
            (C31656 + C31657) * C1356 - (C31658 + C31659) * C50835) *
               C50764 * C51097 +
           ((C31657 + C31656) * C1355 + (C31659 + C31658) * C1350 -
            (C10872 * C20694 + C50983 * C20696 + C10871 * C3603 +
             C51064 * C3605) *
                C1356 -
            (C10872 * C20695 + C50983 * C20697 + C10871 * C3606 +
             C51064 * C3609) *
                C50835) *
               C50764 * C24522) *
              C50785 * C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C627 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C622 -
            (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
            C31082 * C629 + C31083 * C624) *
               C50764 * C51096 +
           ((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
            (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
            (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
               C50764 * C51097 +
           (C31082 * C627 + C31083 * C622 - (C14523 + C14524) * C628 -
            (C14525 + C14526) * C623 +
            (C10871 * C2949 + C51064 * C2952 + C10872 * C3245 +
             C50983 * C3251) *
                C629 +
            (C10871 * C2953 + C51064 * C2958 + C10872 * C3252 +
             C50983 * C3257) *
                C624) *
               C50764 * C24522) *
              C51040 +
          ((C13961 * C628 -
            ((C10909 + C10908) * C622 + (C10907 + C10906) * C627) +
            C13962 * C623 - C14367 * C629 - C14368 * C624) *
               C50764 * C51096 +
           (C14365 * C628 - (C13960 * C622 + C13959 * C627) + C14366 * C623 -
            (C14382 + C14381) * C629 - (C14384 + C14383) * C624) *
               C50764 * C51097 +
           ((C14381 + C14382) * C628 - (C14368 * C622 + C14367 * C627) +
            (C14383 + C14384) * C623 -
            (C10872 * C3246 + C50983 * C3253 + C10871 * C2950 +
             C51064 * C2954) *
                C629 -
            (C10872 * C3254 + C50983 * C3258 + C10871 * C2955 +
             C51064 * C2959) *
                C624) *
               C50764 * C24522) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C118 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C50819) *
               C50764 * C51096 +
           ((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C50764 *
               C51097 +
           ((C14377 + C14378) * C118 + (C14379 + C14380) * C50819) * C50764 *
               C24522) *
              C112 -
          ((C14368 * C50819 + C14367 * C118) * C50764 * C24522 +
           (C13960 * C50819 + C13959 * C118) * C50764 * C51097 +
           ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C50764 *
               C51096) *
              C113 +
          (C10930 * C50764 * C51096 +
           (C13963 * C118 + C13964 * C50819) * C50764 * C51097 +
           ((C11476 + C11477) * C118 + (C11478 + C11479) * C50819) * C50764 *
               C24522) *
              C114 -
          (((C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                C50819 +
            (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                C118) *
               C50764 * C24522 +
           ((C11116 + C11115) * C50819 + (C11114 + C11113) * C118) * C50764 *
               C51097 +
           C10931 * C50764 * C51096) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C51096 +
            ((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C50764 *
                C51097 +
            (C31082 * C118 + C31083 * C50819) * C50764 * C24522) *
               C51040 -
           ((C14368 * C50819 + C14367 * C118) * C50764 * C24522 +
            (C13960 * C50819 + C13959 * C118) * C50764 * C51097 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C50764 *
                C51096) *
               C50790) *
              C1005 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C50764 *
                C51096 +
            (C15945 * C118 + C15946 * C50819) * C50764 * C51097 +
            ((C14754 + C14753) * C118 + (C14756 + C14755) * C50819) * C50764 *
                C24522) *
               C50790 -
           ((C31343 * C50819 + C31342 * C118) * C50764 * C24522 +
            ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C50764 *
                C51097 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C50764 * C51096) *
               C51040) *
              C1006 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C50764 * C51096 +
            ((C15166 + C15165) * C118 + (C15168 + C15167) * C50819) * C50764 *
                C51097 +
            ((C10871 * C3429 + C51064 * C3432 + C10872 * C3722 +
              C50983 * C3728) *
                 C118 +
             (C10871 * C3433 + C51064 * C3438 + C10872 * C3727 +
              C50983 * C3734) *
                 C50819) *
                C50764 * C24522) *
               C51040 -
           (((C10872 * C3725 + C50983 * C3733 + C10871 * C3435 +
              C51064 * C3439) *
                 C50819 +
             (C10872 * C3721 + C50983 * C3726 + C10871 * C3430 +
              C51064 * C3434) *
                 C118) *
                C50764 * C24522 +
            ((C14962 + C14961) * C50819 + (C14960 + C14959) * C118) * C50764 *
                C51097 +
            ((C11889 + C11888) * C50819 + (C11887 + C11886) * C118) * C50764 *
                C51096) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
               C757 +
           (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
               C752 -
           (C13965 + C13966) * C758 - (C13967 + C13968) * C753 + C31082 * C759 +
           C31083 * C754 - C31182 * C760 - C31183 * C755) *
              C50764 * C51096 +
          ((C13966 + C13965) * C757 + (C13968 + C13967) * C752 -
           (C14378 + C14377) * C758 - (C14380 + C14379) * C753 +
           (C14524 + C14523) * C759 + (C14526 + C14525) * C754 -
           (C31192 + C31193) * C760 - (C31194 + C31195) * C755) *
              C50764 * C51097 +
          (C31082 * C757 + C31083 * C752 - C31182 * C758 - C31183 * C753 +
           (C31193 + C31192) * C759 + (C31195 + C31194) * C754 -
           (C10872 * C20412 + C50983 * C20413 + C10871 * C3083 +
            C51064 * C3085) *
               C760 -
           (C10872 * C20414 + C50983 * C20415 + C10871 * C3086 +
            C51064 * C3089) *
               C755) *
              C50764 * C24522) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C294 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51047 -
            (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
               C50764 * C51096 +
           ((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
            (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
               C50764 * C51097 +
           ((C14377 + C14378) * C294 + (C14379 + C14380) * C51047 -
            (C14523 + C14524) * C295 - (C14525 + C14526) * C50835) *
               C50764 * C24522) *
              C291 +
          ((C13961 * C295 -
            ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
            C13962 * C50835) *
               C50764 * C51096 +
           (C14365 * C295 - (C13960 * C51047 + C13959 * C294) +
            C14366 * C50835) *
               C50764 * C51097 +
           ((C14381 + C14382) * C295 - (C14368 * C51047 + C14367 * C294) +
            (C14383 + C14384) * C50835) *
               C50764 * C24522) *
              C292 +
          (C11122 * C50764 * C51096 +
           (C13963 * C294 + C13964 * C51047 - (C11477 + C11476) * C295 -
            (C11479 + C11478) * C50835) *
               C50764 * C51097 +
           ((C11476 + C11477) * C294 + (C11478 + C11479) * C51047 -
            (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
                C295 -
            (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
                C50835) *
               C50764 * C24522) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C294 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51047 -
            (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
               C50764 * C51096 +
           ((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
            (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
               C50764 * C51097 +
           (C31082 * C294 + C31083 * C51047 - C31182 * C295 - C31183 * C50835) *
               C50764 * C24522) *
              C50785 * C1005 +
          (((C14745 + C14746) * C295 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C51047 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C294) +
            (C14747 + C14748) * C50835) *
               C50764 * C51096 +
           ((C14750 + C14749) * C295 -
            ((C14748 + C14747) * C51047 + (C14746 + C14745) * C294) +
            (C14752 + C14751) * C50835) *
               C50764 * C51097 +
           ((C31353 + C31352) * C295 - (C31343 * C51047 + C31342 * C294) +
            (C31355 + C31354) * C50835) *
               C50764 * C24522) *
              C50785 * C1006 +
          (((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
             C50983 * C1247) *
                C294 +
            (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
             C50983 * C1251) *
                C51047 -
            (C15165 + C15166) * C295 - (C15167 + C15168) * C50835) *
               C50764 * C51096 +
           ((C15166 + C15165) * C294 + (C15168 + C15167) * C51047 -
            (C31656 + C31657) * C295 - (C31658 + C31659) * C50835) *
               C50764 * C51097 +
           ((C31657 + C31656) * C294 + (C31659 + C31658) * C51047 -
            (C10872 * C20694 + C50983 * C20696 + C10871 * C3603 +
             C51064 * C3605) *
                C295 -
            (C10872 * C20695 + C50983 * C20697 + C10871 * C3606 +
             C51064 * C3609) *
                C50835) *
               C50764 * C24522) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C627 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C622 -
            (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
            C31082 * C629 + C31083 * C624) *
               C50764 * C51096 +
           ((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
            (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
            (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
               C50764 * C51097 +
           (C31082 * C627 + C31083 * C622 - C31182 * C628 - C31183 * C623 +
            (C31193 + C31192) * C629 + (C31195 + C31194) * C624) *
               C50764 * C24522) *
              C50785 * C51049 +
          (((C14745 + C14746) * C628 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C622 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C627) +
            (C14747 + C14748) * C623 - C31342 * C629 - C31343 * C624) *
               C50764 * C51096 +
           ((C14750 + C14749) * C628 -
            ((C14748 + C14747) * C622 + (C14746 + C14745) * C627) +
            (C14752 + C14751) * C623 - (C31352 + C31353) * C629 -
            (C31354 + C31355) * C624) *
               C50764 * C51097 +
           ((C31353 + C31352) * C628 - (C31343 * C622 + C31342 * C627) +
            (C31355 + C31354) * C623 -
            (C10872 * C20618 + C50983 * C20619 + C10871 * C3245 +
             C51064 * C3251) *
                C629 -
            (C10872 * C20620 + C50983 * C20621 + C10871 * C3252 +
             C51064 * C3257) *
                C624) *
               C50764 * C24522) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C51096 +
            ((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C50764 *
                C51097 +
            ((C14377 + C14378) * C118 + (C14379 + C14380) * C50819) * C50764 *
                C24522) *
               C291 -
           ((C14368 * C50819 + C14367 * C118) * C50764 * C24522 +
            (C13960 * C50819 + C13959 * C118) * C50764 * C51097 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C50764 *
                C51096) *
               C292 +
           (C10930 * C50764 * C51096 +
            (C13963 * C118 + C13964 * C50819) * C50764 * C51097 +
            ((C11476 + C11477) * C118 + (C11478 + C11479) * C50819) * C50764 *
                C24522) *
               C293) *
              C51049 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C50764 *
                C51096 +
            (C15945 * C118 + C15946 * C50819) * C50764 * C51097 +
            ((C14754 + C14753) * C118 + (C14756 + C14755) * C50819) * C50764 *
                C24522) *
               C292 -
           (((C14751 + C14752) * C50819 + (C14749 + C14750) * C118) * C50764 *
                C24522 +
            ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C50764 *
                C51097 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C50764 * C51096) *
               C291 -
           (((C10872 * C3436 + C50983 * C3440 + C10871 * C894 + C51064 * C904) *
                 C50819 +
             (C10872 * C3431 + C50983 * C3437 + C10871 * C880 + C51064 * C893) *
                 C118) *
                C50764 * C24522 +
            ((C12654 + C12653) * C50819 + (C12652 + C12651) * C118) * C50764 *
                C51097 +
            C11309 * C50764 * C51096) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C118 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C50819) *
               C50764 * C51096 +
           ((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C50764 *
               C51097 +
           (C31082 * C118 + C31083 * C50819) * C50764 * C24522) *
              C50785 * C1232 -
          ((C31343 * C50819 + C31342 * C118) * C50764 * C24522 +
           ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C50764 *
               C51097 +
           ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                C50819 +
            (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                C118) *
               C50764 * C51096) *
              C50785 * C1233 +
          (((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
             C50983 * C1247) *
                C118 +
            (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
             C50983 * C1251) *
                C50819) *
               C50764 * C51096 +
           ((C15166 + C15165) * C118 + (C15168 + C15167) * C50819) * C50764 *
               C51097 +
           ((C31657 + C31656) * C118 + (C31659 + C31658) * C50819) * C50764 *
               C24522) *
              C50785 * C1234 -
          (((C10872 * C22840 + C50983 * C22841 + C10871 * C3727 +
             C51064 * C3734) *
                C50819 +
            (C10872 * C22838 + C50983 * C22839 + C10871 * C3722 +
             C51064 * C3728) *
                C118) *
               C50764 * C24522 +
           ((C10872 * C6498 + C50983 * C6501 + C10871 * C3731 +
             C51064 * C3736) *
                C50819 +
            (C10872 * C6495 + C50983 * C6497 + C10871 * C3724 +
             C51064 * C3732) *
                C118) *
               C50764 * C51097 +
           ((C10872 * C6323 + C50983 * C6328 + C10871 * C1246 +
             C51064 * C1251) *
                C50819 +
            (C10872 * C6319 + C50983 * C6322 + C10871 * C1239 +
             C51064 * C1247) *
                C118) *
               C50764 * C51096) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C51096 +
            ((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C50764 *
                C51097 +
            (C31082 * C118 + C31083 * C50819) * C50764 * C24522) *
               C51093 -
           ((C14368 * C50819 + C14367 * C118) * C50764 * C24522 +
            (C13960 * C50819 + C13959 * C118) * C50764 * C51097 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C50764 *
                C51096) *
               C51078 +
           (C10930 * C50764 * C51096 +
            (C13963 * C118 + C13964 * C50819) * C50764 * C51097 +
            ((C11476 + C11477) * C118 + (C11478 + C11479) * C50819) * C50764 *
                C24522) *
               C1354) *
              C1765 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C50764 *
                C51096 +
            (C15945 * C118 + C15946 * C50819) * C50764 * C51097 +
            ((C14754 + C14753) * C118 + (C14756 + C14755) * C50819) * C50764 *
                C24522) *
               C51078 -
           ((C31343 * C50819 + C31342 * C118) * C50764 * C24522 +
            ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C50764 *
                C51097 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C50764 * C51096) *
               C51093 -
           (((C10872 * C3436 + C50983 * C3440 + C10871 * C894 + C51064 * C904) *
                 C50819 +
             (C10872 * C3431 + C50983 * C3437 + C10871 * C880 + C51064 * C893) *
                 C118) *
                C50764 * C24522 +
            ((C12654 + C12653) * C50819 + (C12652 + C12651) * C118) * C50764 *
                C51097 +
            C11309 * C50764 * C51096) *
               C1354) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C294 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51047 -
             (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
                C50764 * C51096 +
            ((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
             (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
                C50764 * C51097 +
            (C31082 * C294 + C31083 * C51047 - C31182 * C295 -
             C31183 * C50835) *
                C50764 * C24522) *
               C1480 +
           ((C13961 * C295 -
             ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
             C13962 * C50835) *
                C50764 * C51096 +
            (C14365 * C295 - (C13960 * C51047 + C13959 * C294) +
             C14366 * C50835) *
                C50764 * C51097 +
            ((C14381 + C14382) * C295 - (C14368 * C51047 + C14367 * C294) +
             (C14383 + C14384) * C50835) *
                C50764 * C24522) *
               C50790) *
              C1765 +
          ((((C14745 + C14746) * C295 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C51047 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C294) +
             (C14747 + C14748) * C50835) *
                C50764 * C51096 +
            ((C14750 + C14749) * C295 -
             ((C14748 + C14747) * C51047 + (C14746 + C14745) * C294) +
             (C14752 + C14751) * C50835) *
                C50764 * C51097 +
            ((C31353 + C31352) * C295 - (C31343 * C51047 + C31342 * C294) +
             (C31355 + C31354) * C50835) *
                C50764 * C24522) *
               C1480 +
           (((C11293 + C11294) * C294 + (C11295 + C11296) * C51047 -
             C15948 * C295 - C15947 * C50835) *
                C50764 * C51096 +
            (C15945 * C294 + C15946 * C51047 - (C14753 + C14754) * C295 -
             (C14755 + C14756) * C50835) *
                C50764 * C51097 +
            ((C14754 + C14753) * C294 + (C14756 + C14755) * C51047 -
             (C10872 * C3604 + C50983 * C3607 + C10871 * C3244 +
              C51064 * C3249) *
                 C295 -
             (C10872 * C3608 + C50983 * C3610 + C10871 * C3250 +
              C51064 * C3256) *
                 C50835) *
                C50764 * C24522) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C51096 +
            ((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C50764 *
                C51097 +
            (C31082 * C118 + C31083 * C50819) * C50764 * C24522) *
               C1480 -
           ((C14368 * C50819 + C14367 * C118) * C50764 * C24522 +
            (C13960 * C50819 + C13959 * C118) * C50764 * C51097 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C50764 *
                C51096) *
               C50790) *
              C51095 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C50764 *
                C51096 +
            (C15945 * C118 + C15946 * C50819) * C50764 * C51097 +
            ((C14754 + C14753) * C118 + (C14756 + C14755) * C50819) * C50764 *
                C24522) *
               C50790 -
           ((C31343 * C50819 + C31342 * C118) * C50764 * C24522 +
            ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C50764 *
                C51097 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C50764 * C51096) *
               C1480) *
              C51084 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C50764 * C51096 +
            ((C15166 + C15165) * C118 + (C15168 + C15167) * C50819) * C50764 *
                C51097 +
            ((C31657 + C31656) * C118 + (C31659 + C31658) * C50819) * C50764 *
                C24522) *
               C1480 -
           (((C10872 * C3725 + C50983 * C3733 + C10871 * C3435 +
              C51064 * C3439) *
                 C50819 +
             (C10872 * C3721 + C50983 * C3726 + C10871 * C3430 +
              C51064 * C3434) *
                 C118) *
                C50764 * C24522 +
            ((C14962 + C14961) * C50819 + (C14960 + C14959) * C118) * C50764 *
                C51097 +
            ((C11889 + C11888) * C50819 + (C11887 + C11886) * C118) * C50764 *
                C51096) *
               C50790) *
              C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C118 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C50819) *
               C50764 * C51096 +
           ((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C50764 *
               C51097 +
           ((C14377 + C14378) * C118 + (C14379 + C14380) * C50819) * C50764 *
               C24522) *
              C112 -
          ((C14368 * C50819 + C14367 * C118) * C50764 * C24522 +
           (C13960 * C50819 + C13959 * C118) * C50764 * C51097 +
           ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C50764 *
               C51096) *
              C113 +
          (C10930 * C50764 * C51096 +
           (C13963 * C118 + C13964 * C50819) * C50764 * C51097 +
           ((C11476 + C11477) * C118 + (C11478 + C11479) * C50819) * C50764 *
               C24522) *
              C114 -
          (((C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                C50819 +
            (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                C118) *
               C50764 * C24522 +
           ((C11116 + C11115) * C50819 + (C11114 + C11113) * C118) * C50764 *
               C51097 +
           C10931 * C50764 * C51096) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C627 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C622 -
            (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
            C31082 * C629 + C31083 * C624) *
               C50764 * C51096 +
           ((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
            (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
            (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
               C50764 * C51097 +
           (C31082 * C627 + C31083 * C622 - (C14523 + C14524) * C628 -
            (C14525 + C14526) * C623 +
            (C10871 * C2949 + C51064 * C2952 + C10872 * C3245 +
             C50983 * C3251) *
                C629 +
            (C10871 * C2953 + C51064 * C2958 + C10872 * C3252 +
             C50983 * C3257) *
                C624) *
               C50764 * C24522) *
              C51040 +
          ((C13961 * C628 -
            ((C10909 + C10908) * C622 + (C10907 + C10906) * C627) +
            C13962 * C623 - C14367 * C629 - C14368 * C624) *
               C50764 * C51096 +
           (C14365 * C628 - (C13960 * C622 + C13959 * C627) + C14366 * C623 -
            (C14382 + C14381) * C629 - (C14384 + C14383) * C624) *
               C50764 * C51097 +
           ((C14381 + C14382) * C628 - (C14368 * C622 + C14367 * C627) +
            (C14383 + C14384) * C623 -
            (C10872 * C3246 + C50983 * C3253 + C10871 * C2950 +
             C51064 * C2954) *
                C629 -
            (C10872 * C3254 + C50983 * C3258 + C10871 * C2955 +
             C51064 * C2959) *
                C624) *
               C50764 * C24522) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C294 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C51047 -
            (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
               C50764 * C51096 +
           ((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
            (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
               C50764 * C51097 +
           ((C14377 + C14378) * C294 + (C14379 + C14380) * C51047 -
            (C14523 + C14524) * C295 - (C14525 + C14526) * C50835) *
               C50764 * C24522) *
              C291 +
          ((C13961 * C295 -
            ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
            C13962 * C50835) *
               C50764 * C51096 +
           (C14365 * C295 - (C13960 * C51047 + C13959 * C294) +
            C14366 * C50835) *
               C50764 * C51097 +
           ((C14381 + C14382) * C295 - (C14368 * C51047 + C14367 * C294) +
            (C14383 + C14384) * C50835) *
               C50764 * C24522) *
              C292 +
          (C11122 * C50764 * C51096 +
           (C13963 * C294 + C13964 * C51047 - (C11477 + C11476) * C295 -
            (C11479 + C11478) * C50835) *
               C50764 * C51097 +
           ((C11476 + C11477) * C294 + (C11478 + C11479) * C51047 -
            (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
                C295 -
            (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
                C50835) *
               C50764 * C24522) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
               C757 +
           (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
               C752 -
           (C13965 + C13966) * C758 - (C13967 + C13968) * C753 + C31082 * C759 +
           C31083 * C754 - C31182 * C760 - C31183 * C755) *
              C50764 * C51096 +
          ((C13966 + C13965) * C757 + (C13968 + C13967) * C752 -
           (C14378 + C14377) * C758 - (C14380 + C14379) * C753 +
           (C14524 + C14523) * C759 + (C14526 + C14525) * C754 -
           (C31192 + C31193) * C760 - (C31194 + C31195) * C755) *
              C50764 * C51097 +
          (C31082 * C757 + C31083 * C752 - C31182 * C758 - C31183 * C753 +
           (C31193 + C31192) * C759 + (C31195 + C31194) * C754 -
           (C10872 * C20412 + C50983 * C20413 + C10871 * C3083 +
            C51064 * C3085) *
               C760 -
           (C10872 * C20414 + C50983 * C20415 + C10871 * C3086 +
            C51064 * C3089) *
               C755) *
              C50764 * C24522) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C51096 +
            ((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C50764 *
                C51097 +
            ((C14377 + C14378) * C118 + (C14379 + C14380) * C50819) * C50764 *
                C24522) *
               C291 -
           ((C14368 * C50819 + C14367 * C118) * C50764 * C24522 +
            (C13960 * C50819 + C13959 * C118) * C50764 * C51097 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C50764 *
                C51096) *
               C292 +
           (C10930 * C50764 * C51096 +
            (C13963 * C118 + C13964 * C50819) * C50764 * C51097 +
            ((C11476 + C11477) * C118 + (C11478 + C11479) * C50819) * C50764 *
                C24522) *
               C293) *
              C51049 +
          ((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C50764 *
                C51096 +
            (C15945 * C118 + C15946 * C50819) * C50764 * C51097 +
            ((C14754 + C14753) * C118 + (C14756 + C14755) * C50819) * C50764 *
                C24522) *
               C292 -
           (((C14751 + C14752) * C50819 + (C14749 + C14750) * C118) * C50764 *
                C24522 +
            ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C50764 *
                C51097 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C50764 * C51096) *
               C291 -
           (((C10872 * C3436 + C50983 * C3440 + C10871 * C894 + C51064 * C904) *
                 C50819 +
             (C10872 * C3431 + C50983 * C3437 + C10871 * C880 + C51064 * C893) *
                 C118) *
                C50764 * C24522 +
            ((C12654 + C12653) * C50819 + (C12652 + C12651) * C118) * C50764 *
                C51097 +
            C11309 * C50764 * C51096) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C627 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C622 -
            (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
            C31082 * C629 + C31083 * C624) *
               C50764 * C51096 +
           ((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
            (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
            (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
               C50764 * C51097 +
           (C31082 * C627 + C31083 * C622 - C31182 * C628 - C31183 * C623 +
            (C31193 + C31192) * C629 + (C31195 + C31194) * C624) *
               C50764 * C24522) *
              C50785 * C51049 +
          (((C14745 + C14746) * C628 -
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C622 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C627) +
            (C14747 + C14748) * C623 - C31342 * C629 - C31343 * C624) *
               C50764 * C51096 +
           ((C14750 + C14749) * C628 -
            ((C14748 + C14747) * C622 + (C14746 + C14745) * C627) +
            (C14752 + C14751) * C623 - (C31352 + C31353) * C629 -
            (C31354 + C31355) * C624) *
               C50764 * C51097 +
           ((C31353 + C31352) * C628 - (C31343 * C622 + C31342 * C627) +
            (C31355 + C31354) * C623 -
            (C10872 * C20618 + C50983 * C20619 + C10871 * C3245 +
             C51064 * C3251) *
                C629 -
            (C10872 * C20620 + C50983 * C20621 + C10871 * C3252 +
             C51064 * C3257) *
                C624) *
               C50764 * C24522) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1355 +
            (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C1355 + C2981 * C1350 - C3096 * C1356 - C3097 * C50835) *
               C50764 * C19943) *
              C51093 +
          ((C1360 - (C1359 + C1358) + C1361) * C50764 * C19940 +
           (C3886 - (C3885 + C3884) + C3887) * C50764 * C19941 +
           (C3890 - (C3889 + C3888) + C3891) * C50764 * C19942 +
           (C2982 * C1356 - (C2631 * C1350 + C2630 * C1355) + C2983 * C50835) *
               C50764 * C19943) *
              C51078 +
          (C1378 * C50764 * C19940 + C9445 * C50764 * C19941 +
           (C3898 + C3897 - C3896 - C3899) * C50764 * C19942 +
           (C2632 * C1355 + C2633 * C1350 -
            (C117 * C2951 + C50919 * C2956) * C1356 -
            (C117 * C2957 + C50919 * C2960) * C50835) *
               C50764 * C19943) *
              C1354) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C17338 +
            (C1358 + C1359 - C1360 - C1361) * C17339 + C1378 * C17340) *
               C17341 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C17338 +
            (C3884 + C3885 - C3886 - C3887) * C17339 + C9445 * C17340) *
               C50957) *
              C51093 +
          (((C1360 - (C1359 + C1358) + C1361) * C17338 +
            (C1364 - (C1363 + C1362) + C1365) * C17339 +
            (C1368 - (C1367 + C1366) + C1369) * C17340) *
               C17341 +
           ((C3886 - (C3885 + C3884) + C3887) * C17338 +
            (C3892 - (C3893 + C3894) + C3895) * C17339 +
            (C9440 - (C9441 + C9442) + C9443) * C17340) *
               C50957) *
              C51078 +
          ((C1378 * C17338 + C1379 * C17339 +
            (C1372 + C1371 - C1370 - C1373) * C17340) *
               C17341 +
           (C9445 * C17338 + (C9442 + C9441 - C9440 - C9443) * C17339 +
            (C353 * C1355 + C354 * C1350 -
             (C117 * C634 + C50919 * C643) * C1356 -
             (C117 * C644 + C50919 * C649) * C50835) *
                C17340) *
               C50957) *
              C1354) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C1355 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C1350 -
            (C21933 + C21934 + C21935) * C1356 -
            (C21936 + C21937 + C21938) * C50835) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C1355 +
            (C21938 + C21937 + C21936) * C1350 -
            (C22245 + C22244 + C22243) * C1356 -
            (C22248 + C22247 + C22246) * C50835) *
               C50764 * C50957) *
              C51093 +
          (((C5574 + C5573 + C5572) * C1356 -
            ((C5389 + C5388 + C5387) * C1350 +
             (C5386 + C5385 + C5384) * C1355) +
            (C5577 + C5576 + C5575) * C50835) *
               C50764 * C17341 +
           ((C5924 + C5925 + C5926) * C1356 -
            ((C5575 + C5576 + C5577) * C1350 +
             (C5572 + C5573 + C5574) * C1355) +
            (C5927 + C5928 + C5929) * C50835) *
               C50764 * C50957) *
              C51078 +
          (((C5395 + C5394 + C5393) * C1355 + (C5392 + C5391 + C5390) * C1350 -
            (C5580 + C5579 + C5578) * C1356 -
            (C5583 + C5582 + C5581) * C50835) *
               C50764 * C17341 +
           ((C5578 + C5579 + C5580) * C1355 + (C5581 + C5582 + C5583) * C1350 -
            (C5346 * C3431 + C5343 * C3437 + C5345 * C880 + C5342 * C893 +
             C5344 * C632 + C5341 * C639) *
                C1356 -
            (C5346 * C3436 + C5343 * C3440 + C5345 * C894 + C5342 * C904 +
             C5344 * C640 + C5341 * C647) *
                C50835) *
               C50764 * C50957) *
              C1354) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1482 +
            (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
            C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
               C50764 * C19940 +
           (C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
            C2980 * C1484 + C2981 * C1479) *
               C50764 * C19941 +
           (C2628 * C1482 + C2629 * C51094 - C2980 * C1483 - C2981 * C51081 +
            C3096 * C1484 + C3097 * C1479) *
               C50764 * C19942 +
           (C2980 * C1482 + C2981 * C51094 - C3096 * C1483 - C3097 * C51081 +
            C20313 * C1484 + C20314 * C1479) *
               C50764 * C19943) *
              C1480 +
          ((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C50764 * C19940 +
           (C4048 - (C4047 + C4046) + C4049 - C4050 - C4051) * C50764 * C19941 +
           (C4054 - (C4053 + C4052) + C4055 - C4056 - C4057) * C50764 * C19942 +
           (C2982 * C1483 - (C2631 * C51094 + C2630 * C1482) + C2983 * C51081 -
            (C117 * C3084 + C50919 * C3087) * C1484 -
            (C117 * C3088 + C50919 * C3090) * C1479) *
               C50764 * C19943) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1482 +
             (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
             C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                C17338 +
            (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C17339 +
            (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C17340) *
               C17341 +
           ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
             C2980 * C1484 + C2981 * C1479) *
                C17338 +
            (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C17339 +
            (C9592 + C9593 - C9594 - C9595 + C9596 + C9597) * C17340) *
               C50957) *
              C1480 +
          (((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C17338 +
            (C1494 - (C1493 + C1492) + C1495 - C1496 - C1497) * C17339 +
            (C1500 - (C1499 + C1498) + C1501 - C1502 - C1503) * C17340) *
               C17341 +
           ((C4048 - (C4047 + C4046) + C4049 - C4050 - C4051) * C17338 +
            (C9594 - (C9593 + C9592) + C9595 - C9596 - C9597) * C17339 +
            (C679 * C1483 - (C352 * C51094 + C351 * C1482) + C680 * C51081 -
             (C117 * C764 + C50919 * C771) * C1484 -
             (C117 * C772 + C50919 * C776) * C1479) *
                C17340) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C1482 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51094 -
            (C21933 + C21934 + C21935) * C1483 -
            (C21936 + C21937 + C21938) * C51081 +
            (C22243 + C22244 + C22245) * C1484 +
            (C22246 + C22247 + C22248) * C1479) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C1482 +
            (C21938 + C21937 + C21936) * C51094 -
            (C22245 + C22244 + C22243) * C1483 -
            (C22248 + C22247 + C22246) * C51081 +
            (C22361 + C22360 + C22359) * C1484 +
            (C22364 + C22363 + C22362) * C1479) *
               C50764 * C50957) *
              C1480 +
          (((C5574 + C5573 + C5572) * C1483 -
            ((C5389 + C5388 + C5387) * C51094 +
             (C5386 + C5385 + C5384) * C1482) +
            (C5577 + C5576 + C5575) * C51081 - (C5926 + C5925 + C5924) * C1484 -
            (C5929 + C5928 + C5927) * C1479) *
               C50764 * C17341 +
           ((C5924 + C5925 + C5926) * C1483 -
            ((C5575 + C5576 + C5577) * C51094 +
             (C5572 + C5573 + C5574) * C1482) +
            (C5927 + C5928 + C5929) * C51081 -
            (C5346 * C3604 + C5343 * C3607 + C5345 * C3244 + C5342 * C3249 +
             C5344 * C762 + C5341 * C767) *
                C1484 -
            (C5346 * C3608 + C5343 * C3610 + C5345 * C3250 + C5342 * C3256 +
             C5344 * C768 + C5341 * C774) *
                C1479) *
               C50764 * C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C50764 * C19940 +
            (C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C50764 * C19941 +
            (C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C50764 * C19942 +
            (C2980 * C1355 + C2981 * C1350 - C3096 * C1356 - C3097 * C50835) *
                C50764 * C19943) *
               C1480 +
           ((C1360 - (C1359 + C1358) + C1361) * C50764 * C19940 +
            (C3886 - (C3885 + C3884) + C3887) * C50764 * C19941 +
            (C3890 - (C3889 + C3888) + C3891) * C50764 * C19942 +
            (C2982 * C1356 - (C2631 * C1350 + C2630 * C1355) + C2983 * C50835) *
                C50764 * C19943) *
               C50790) *
              C51049 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C50764 * C19940 +
            (C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C50764 * C19941 +
            (C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) + C3281 * C50835) *
                C50764 * C19942 +
            (C20421 * C1356 - (C3281 * C1350 + C3280 * C1355) +
             C20422 * C50835) *
                C50764 * C19943) *
               C1480 +
           ((C1641 + C1640 - C1662 - C1663) * C50764 * C19940 +
            (C4258 + C4257 - C4256 - C4259) * C50764 * C19941 +
            (C4262 + C4261 - C4260 - C4263) * C50764 * C19942 +
            (C3282 * C1355 + C3283 * C1350 -
             (C117 * C3246 + C50919 * C3253) * C1356 -
             (C117 * C3254 + C50919 * C3258) * C50835) *
                C50764 * C19943) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C17338 +
             (C1358 + C1359 - C1360 - C1361) * C17339 + C1378 * C17340) *
                C17341 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C17338 +
             (C3884 + C3885 - C3886 - C3887) * C17339 + C9445 * C17340) *
                C50957) *
               C1480 +
           (((C1360 - (C1359 + C1358) + C1361) * C17338 +
             (C1364 - (C1363 + C1362) + C1365) * C17339 +
             (C1368 - (C1367 + C1366) + C1369) * C17340) *
                C17341 +
            ((C3886 - (C3885 + C3884) + C3887) * C17338 +
             (C3892 - (C3893 + C3894) + C3895) * C17339 +
             (C9440 - (C9441 + C9442) + C9443) * C17340) *
                C50957) *
               C50790) *
              C51049 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C17338 +
             (C1662 - (C1640 + C1641) + C1663) * C17339 +
             (C1664 - (C1646 + C1647) + C1665) * C17340) *
                C17341 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C17338 +
             (C4256 - (C4257 + C4258) + C4259) * C17339 +
             (C9792 - (C9793 + C9794) + C9795) * C17340) *
                C50957) *
               C1480 +
           (((C1641 + C1640 - C1662 - C1663) * C17338 +
             (C1647 + C1646 - C1664 - C1665) * C17339 +
             (C1653 + C1652 - C1666 - C1667) * C17340) *
                C17341 +
            ((C4258 + C4257 - C4256 - C4259) * C17338 +
             (C9794 + C9793 - C9792 - C9795) * C17339 +
             (C1660 * C1355 + C1661 * C1350 -
              (C117 * C882 + C50919 * C897) * C1356 -
              (C117 * C898 + C50919 * C906) * C50835) *
                 C17340) *
                C50957) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C1355 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C1350 -
             (C21933 + C21934 + C21935) * C1356 -
             (C21936 + C21937 + C21938) * C50835) *
                C50764 * C17341 +
            ((C21935 + C21934 + C21933) * C1355 +
             (C21938 + C21937 + C21936) * C1350 -
             (C22245 + C22244 + C22243) * C1356 -
             (C22248 + C22247 + C22246) * C50835) *
                C50764 * C50957) *
               C1480 +
           (((C5574 + C5573 + C5572) * C1356 -
             ((C5389 + C5388 + C5387) * C1350 +
              (C5386 + C5385 + C5384) * C1355) +
             (C5577 + C5576 + C5575) * C50835) *
                C50764 * C17341 +
            ((C5924 + C5925 + C5926) * C1356 -
             ((C5575 + C5576 + C5577) * C1350 +
              (C5572 + C5573 + C5574) * C1355) +
             (C5927 + C5928 + C5929) * C50835) *
                C50764 * C50957) *
               C50790) *
              C51049 +
          ((((C22535 + C22536 + C22537) * C1356 -
             ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
               C5344 * C480 + C5341 * C488) *
                  C1350 +
              (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
               C5344 * C470 + C5341 * C481) *
                  C1355) +
             (C22538 + C22539 + C22540) * C50835) *
                C50764 * C17341 +
            ((C22543 + C22542 + C22541) * C1356 -
             ((C22540 + C22539 + C22538) * C1350 +
              (C22537 + C22536 + C22535) * C1355) +
             (C22546 + C22545 + C22544) * C50835) *
                C50764 * C50957) *
               C1480 +
           (((C5754 + C5755 + C5756) * C1355 + (C5757 + C5758 + C5759) * C1350 -
             (C7114 + C7113 + C7112) * C1356 -
             (C7117 + C7116 + C7115) * C50835) *
                C50764 * C17341 +
            ((C7112 + C7113 + C7114) * C1355 + (C7115 + C7116 + C7117) * C1350 -
             (C5346 * C3721 + C5343 * C3726 + C5345 * C3430 + C5342 * C3434 +
              C5344 * C878 + C5341 * C889) *
                 C1356 -
             (C5346 * C3725 + C5343 * C3733 + C5345 * C3435 + C5342 * C3439 +
              C5344 * C890 + C5341 * C902) *
                 C50835) *
                C50764 * C50957) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C50764 * C19940 +
            (C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C50764 * C19941 +
            (C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C50764 * C19942 +
            (C2980 * C1355 + C2981 * C1350 - C3096 * C1356 - C3097 * C50835) *
                C50764 * C19943) *
               C51040 +
           ((C1360 - (C1359 + C1358) + C1361) * C50764 * C19940 +
            (C3886 - (C3885 + C3884) + C3887) * C50764 * C19941 +
            (C3890 - (C3889 + C3888) + C3891) * C50764 * C19942 +
            (C2982 * C1356 - (C2631 * C1350 + C2630 * C1355) + C2983 * C50835) *
                C50764 * C19943) *
               C50790) *
              C1765 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C50764 * C19940 +
            (C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C50764 * C19941 +
            (C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) + C3281 * C50835) *
                C50764 * C19942 +
            (C20421 * C1356 - (C3281 * C1350 + C3280 * C1355) +
             C20422 * C50835) *
                C50764 * C19943) *
               C51040 +
           ((C1641 + C1640 - C1662 - C1663) * C50764 * C19940 +
            (C4258 + C4257 - C4256 - C4259) * C50764 * C19941 +
            (C4262 + C4261 - C4260 - C4263) * C50764 * C19942 +
            (C3282 * C1355 + C3283 * C1350 -
             (C117 * C3246 + C50919 * C3253) * C1356 -
             (C117 * C3254 + C50919 * C3258) * C50835) *
                C50764 * C19943) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C17338 +
             (C1358 + C1359 - C1360 - C1361) * C17339 + C1378 * C17340) *
                C17341 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C17338 +
             (C3884 + C3885 - C3886 - C3887) * C17339 + C9445 * C17340) *
                C50957) *
               C51040 +
           (((C1360 - (C1359 + C1358) + C1361) * C17338 +
             (C1364 - (C1363 + C1362) + C1365) * C17339 +
             (C1368 - (C1367 + C1366) + C1369) * C17340) *
                C17341 +
            ((C3886 - (C3885 + C3884) + C3887) * C17338 +
             (C3892 - (C3893 + C3894) + C3895) * C17339 +
             (C9440 - (C9441 + C9442) + C9443) * C17340) *
                C50957) *
               C50790) *
              C1765 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C17338 +
             (C1662 - (C1640 + C1641) + C1663) * C17339 +
             (C1664 - (C1646 + C1647) + C1665) * C17340) *
                C17341 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C17338 +
             (C4256 - (C4257 + C4258) + C4259) * C17339 +
             (C9792 - (C9793 + C9794) + C9795) * C17340) *
                C50957) *
               C51040 +
           (((C1641 + C1640 - C1662 - C1663) * C17338 +
             (C1647 + C1646 - C1664 - C1665) * C17339 +
             (C1653 + C1652 - C1666 - C1667) * C17340) *
                C17341 +
            ((C4258 + C4257 - C4256 - C4259) * C17338 +
             (C9794 + C9793 - C9792 - C9795) * C17339 +
             (C1660 * C1355 + C1661 * C1350 -
              (C117 * C882 + C50919 * C897) * C1356 -
              (C117 * C898 + C50919 * C906) * C50835) *
                 C17340) *
                C50957) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C1355 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C1350 -
             (C21933 + C21934 + C21935) * C1356 -
             (C21936 + C21937 + C21938) * C50835) *
                C50764 * C17341 +
            ((C21935 + C21934 + C21933) * C1355 +
             (C21938 + C21937 + C21936) * C1350 -
             (C22245 + C22244 + C22243) * C1356 -
             (C22248 + C22247 + C22246) * C50835) *
                C50764 * C50957) *
               C51040 +
           (((C5574 + C5573 + C5572) * C1356 -
             ((C5389 + C5388 + C5387) * C1350 +
              (C5386 + C5385 + C5384) * C1355) +
             (C5577 + C5576 + C5575) * C50835) *
                C50764 * C17341 +
            ((C5924 + C5925 + C5926) * C1356 -
             ((C5575 + C5576 + C5577) * C1350 +
              (C5572 + C5573 + C5574) * C1355) +
             (C5927 + C5928 + C5929) * C50835) *
                C50764 * C50957) *
               C50790) *
              C1765 +
          ((((C22535 + C22536 + C22537) * C1356 -
             ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
               C5344 * C480 + C5341 * C488) *
                  C1350 +
              (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
               C5344 * C470 + C5341 * C481) *
                  C1355) +
             (C22538 + C22539 + C22540) * C50835) *
                C50764 * C17341 +
            ((C22543 + C22542 + C22541) * C1356 -
             ((C22540 + C22539 + C22538) * C1350 +
              (C22537 + C22536 + C22535) * C1355) +
             (C22546 + C22545 + C22544) * C50835) *
                C50764 * C50957) *
               C51040 +
           (((C5754 + C5755 + C5756) * C1355 + (C5757 + C5758 + C5759) * C1350 -
             (C7114 + C7113 + C7112) * C1356 -
             (C7117 + C7116 + C7115) * C50835) *
                C50764 * C17341 +
            ((C7112 + C7113 + C7114) * C1355 + (C7115 + C7116 + C7117) * C1350 -
             (C5346 * C3721 + C5343 * C3726 + C5345 * C3430 + C5342 * C3434 +
              C5344 * C878 + C5341 * C889) *
                 C1356 -
             (C5346 * C3725 + C5343 * C3733 + C5345 * C3435 + C5342 * C3439 +
              C5344 * C890 + C5341 * C902) *
                 C50835) *
                C50764 * C50957) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1482 +
            (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
            C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
               C50764 * C19940 +
           (C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
            C2980 * C1484 + C2981 * C1479) *
               C50764 * C19941 +
           (C2628 * C1482 + C2629 * C51094 - C2980 * C1483 - C2981 * C51081 +
            C3096 * C1484 + C3097 * C1479) *
               C50764 * C19942 +
           (C2980 * C1482 + C2981 * C51094 - C3096 * C1483 - C3097 * C51081 +
            C20313 * C1484 + C20314 * C1479) *
               C50764 * C19943) *
              C50785 * C1765 +
          ((C3276 * C1483 -
            ((C117 * C480 + C50919 * C488) * C51094 +
             (C117 * C470 + C50919 * C481) * C1482) +
            C3277 * C51081 - C3278 * C1484 - C3279 * C1479) *
               C50764 * C19940 +
           (C3278 * C1483 - (C3277 * C51094 + C3276 * C1482) + C3279 * C51081 -
            C3280 * C1484 - C3281 * C1479) *
               C50764 * C19941 +
           (C3280 * C1483 - (C3279 * C51094 + C3278 * C1482) + C3281 * C51081 -
            C20421 * C1484 - C20422 * C1479) *
               C50764 * C19942 +
           (C20421 * C1483 - (C3281 * C51094 + C3280 * C1482) +
            C20422 * C51081 - (C117 * C20412 + C50919 * C20413) * C1484 -
            (C117 * C20414 + C50919 * C20415) * C1479) *
               C50764 * C19943) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1482 +
             (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
             C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                C17338 +
            (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C17339 +
            (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C17340) *
               C17341 +
           ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
             C2980 * C1484 + C2981 * C1479) *
                C17338 +
            (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C17339 +
            (C9592 + C9593 - C9594 - C9595 + C9596 + C9597) * C17340) *
               C50957) *
              C50785 * C1765 +
          (((C3276 * C1483 -
             ((C117 * C480 + C50919 * C488) * C51094 +
              (C117 * C470 + C50919 * C481) * C1482) +
             C3277 * C51081 - C3278 * C1484 - C3279 * C1479) *
                C17338 +
            (C1656 * C1483 - (C508 * C51094 + C507 * C1482) + C1657 * C51081 -
             C2796 * C1484 - C2797 * C1479) *
                C17339 +
            (C1658 * C1483 - (C510 * C51094 + C509 * C1482) + C1659 * C51081 -
             C2798 * C1484 - C2799 * C1479) *
                C17340) *
               C17341 +
           ((C3278 * C1483 - (C3277 * C51094 + C3276 * C1482) + C3279 * C51081 -
             C3280 * C1484 - C3281 * C1479) *
                C17338 +
            (C2796 * C1483 - (C1657 * C51094 + C1656 * C1482) + C2797 * C51081 -
             C3282 * C1484 - C3283 * C1479) *
                C17339 +
            (C2798 * C1483 - (C1659 * C51094 + C1658 * C1482) + C2799 * C51081 -
             (C117 * C4251 + C50919 * C4252) * C1484 -
             (C117 * C4253 + C50919 * C4254) * C1479) *
                C17340) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C1482 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51094 -
            (C21933 + C21934 + C21935) * C1483 -
            (C21936 + C21937 + C21938) * C51081 +
            (C22243 + C22244 + C22245) * C1484 +
            (C22246 + C22247 + C22248) * C1479) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C1482 +
            (C21938 + C21937 + C21936) * C51094 -
            (C22245 + C22244 + C22243) * C1483 -
            (C22248 + C22247 + C22246) * C51081 +
            (C22361 + C22360 + C22359) * C1484 +
            (C22364 + C22363 + C22362) * C1479) *
               C50764 * C50957) *
              C50785 * C1765 +
          (((C22535 + C22536 + C22537) * C1483 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C51094 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C1482) +
            (C22538 + C22539 + C22540) * C51081 -
            (C22541 + C22542 + C22543) * C1484 -
            (C22544 + C22545 + C22546) * C1479) *
               C50764 * C17341 +
           ((C22543 + C22542 + C22541) * C1483 -
            ((C22540 + C22539 + C22538) * C51094 +
             (C22537 + C22536 + C22535) * C1482) +
            (C22546 + C22545 + C22544) * C51081 -
            (C5346 * C20694 + C5343 * C20696 + C5345 * C3603 + C5342 * C3605 +
             C5344 * C3243 + C5341 * C3247) *
                C1484 -
            (C5346 * C20695 + C5343 * C20697 + C5345 * C3606 + C5342 * C3609 +
             C5344 * C3248 + C5341 * C3255) *
                C1479) *
               C50764 * C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1355 +
            (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C1355 + C2981 * C1350 - C3096 * C1356 - C3097 * C50835) *
               C50764 * C19943) *
              C50785 * C51095 +
          ((C3276 * C1356 -
            ((C117 * C480 + C50919 * C488) * C1350 +
             (C117 * C470 + C50919 * C481) * C1355) +
            C3277 * C50835) *
               C50764 * C19940 +
           (C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
               C50764 * C19941 +
           (C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) + C3281 * C50835) *
               C50764 * C19942 +
           (C20421 * C1356 - (C3281 * C1350 + C3280 * C1355) +
            C20422 * C50835) *
               C50764 * C19943) *
              C50785 * C51084 +
          (((C117 * C1008 + C50919 * C1013) * C1355 +
            (C117 * C1014 + C50919 * C1023) * C1350 - C3620 * C1356 -
            C3621 * C50835) *
               C50764 * C19940 +
           (C3620 * C1355 + C3621 * C1350 - C3622 * C1356 - C3623 * C50835) *
               C50764 * C19941 +
           (C3622 * C1355 + C3623 * C1350 - C20627 * C1356 - C20628 * C50835) *
               C50764 * C19942 +
           (C20627 * C1355 + C20628 * C1350 -
            (C117 * C20618 + C50919 * C20619) * C1356 -
            (C117 * C20620 + C50919 * C20621) * C50835) *
               C50764 * C19943) *
              C50785 * C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C17338 +
            (C1358 + C1359 - C1360 - C1361) * C17339 + C1378 * C17340) *
               C17341 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C17338 +
            (C3884 + C3885 - C3886 - C3887) * C17339 + C9445 * C17340) *
               C50957) *
              C50785 * C51095 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C17338 +
            (C1662 - (C1640 + C1641) + C1663) * C17339 +
            (C1664 - (C1646 + C1647) + C1665) * C17340) *
               C17341 +
           ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C17338 +
            (C4256 - (C4257 + C4258) + C4259) * C17339 +
            (C9792 - (C9793 + C9794) + C9795) * C17340) *
               C50957) *
              C50785 * C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C1355 +
             (C117 * C1014 + C50919 * C1023) * C1350 - C3620 * C1356 -
             C3621 * C50835) *
                C17338 +
            (C1041 * C1355 + C1042 * C1350 - C3450 * C1356 - C3451 * C50835) *
                C17339 +
            (C1043 * C1355 + C1044 * C1350 - C9045 * C1356 - C9046 * C50835) *
                C17340) *
               C17341 +
           ((C3620 * C1355 + C3621 * C1350 - C3622 * C1356 - C3623 * C50835) *
                C17338 +
            (C3450 * C1355 + C3451 * C1350 - C3452 * C1356 - C3453 * C50835) *
                C17339 +
            (C9045 * C1355 + C9046 * C1350 -
             (C117 * C3431 + C50919 * C3437) * C1356 -
             (C117 * C3436 + C50919 * C3440) * C50835) *
                C17340) *
               C50957) *
              C50785 * C2009)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C1355 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C1350 -
            (C21933 + C21934 + C21935) * C1356 -
            (C21936 + C21937 + C21938) * C50835) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C1355 +
            (C21938 + C21937 + C21936) * C1350 -
            (C22245 + C22244 + C22243) * C1356 -
            (C22248 + C22247 + C22246) * C50835) *
               C50764 * C50957) *
              C50785 * C51095 +
          (((C22535 + C22536 + C22537) * C1356 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C1350 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C1355) +
            (C22538 + C22539 + C22540) * C50835) *
               C50764 * C17341 +
           ((C22543 + C22542 + C22541) * C1356 -
            ((C22540 + C22539 + C22538) * C1350 +
             (C22537 + C22536 + C22535) * C1355) +
            (C22546 + C22545 + C22544) * C50835) *
               C50764 * C50957) *
              C50785 * C51084 +
          (((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
             C5346 * C6319 + C5343 * C6322) *
                C1355 +
            (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
             C5346 * C6323 + C5343 * C6328) *
                C1350 -
            (C22855 + C22856 + C22857) * C1356 -
            (C22858 + C22859 + C22860) * C50835) *
               C50764 * C17341 +
           ((C22857 + C22856 + C22855) * C1355 +
            (C22860 + C22859 + C22858) * C1350 -
            (C5346 * C22838 + C5343 * C22839 + C5345 * C3722 + C5342 * C3728 +
             C5344 * C3429 + C5341 * C3432) *
                C1356 -
            (C5346 * C22840 + C5343 * C22841 + C5345 * C3727 + C5342 * C3734 +
             C5344 * C3433 + C5341 * C3438) *
                C50835) *
               C50764 * C50957) *
              C50785 * C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50919 * C126) * C118 +
                 (C117 * C127 + C50919 * C140) * C50819) *
                    C17338 +
                (C178 + C179) * C17339 + C188 * C17340) *
                   C17341 +
               ((C2626 * C118 + C2627 * C50819) * C17338 +
                (C2440 + C2441) * C17339 + C8193 * C17340) *
                   C50957) *
                  C112 -
              ((C8194 * C17340 + (C2446 + C2447) * C17339 +
                (C2441 + C2440) * C17338) *
                   C50957 +
               (C191 * C17340 + (C181 + C180) * C17339 +
                (C179 + C178) * C17338) *
                   C17341) *
                  C113 +
              ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) *
                   C17341 +
               (C8193 * C17338 + (C2448 + C2449) * C17339 +
                (C8195 + C8196) * C17340) *
                   C50957) *
                  C114 -
              ((((C117 * C313 + C50919 * C319) * C50819 +
                 (C117 * C301 + C50919 * C312) * C118) *
                    C17340 +
                (C8196 + C8195) * C17339 + C8194 * C17338) *
                   C50957 +
               ((C187 + C186) * C17340 + C190 * C17339 + C191 * C17338) *
                   C17341) *
                  C115) *
             C50849 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50919 * C126) * C627 +
                 (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
                 C2627 * C623 + C2628 * C629 + C2629 * C624) *
                    C17338 +
                (C651 + C652 - C653 - C654 + C681 + C682) * C17339 +
                (C659 + C660 - C661 - C662 + C683 + C684) * C17340) *
                   C17341 +
               ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
                 C2980 * C629 + C2981 * C624) *
                    C17338 +
                (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C17339 +
                (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C17340) *
                   C50957) *
                  C51040 +
              (((C653 - (C652 + C651) + C654 - C681 - C682) * C17338 +
                (C661 - (C660 + C659) + C662 - C683 - C684) * C17339 +
                (C669 - (C668 + C667) + C670 - C685 - C686) * C17340) *
                   C17341 +
               ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C17338 +
                (C8647 - (C8646 + C8645) + C8648 - C8649 - C8650) * C17339 +
                (C679 * C628 - (C352 * C622 + C351 * C627) + C680 * C623 -
                 (C117 * C764 + C50919 * C771) * C629 -
                 (C117 * C772 + C50919 * C776) * C624) *
                    C17340) *
                   C50957) *
                  C50790) *
             C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C17338 +
             (C178 + C179) * C17339 + C188 * C17340) *
                C17341 +
            ((C2626 * C118 + C2627 * C50819) * C17338 +
             (C2440 + C2441) * C17339 + C8193 * C17340) *
                C50957) *
               C51040 -
           ((C8194 * C17340 + (C2446 + C2447) * C17339 +
             (C2441 + C2440) * C17338) *
                C50957 +
            (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
                C17341) *
               C50790) *
              C1005 +
          ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
             (C519 + C520) * C17340) *
                C17341 +
            ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
             (C8496 + C8497) * C17340) *
                C50957) *
               C50790 -
           ((C8498 * C17340 + (C2785 + C2784) * C17339 +
             (C3277 * C50819 + C3276 * C118) * C17338) *
                C50957 +
            (C524 * C17340 + (C516 + C515) * C17339 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C17338) *
                C17341) *
               C51040) *
              C1006 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C17338 +
             (C1047 + C1048) * C17339 + (C1049 + C1050) * C17340) *
                C17341 +
            ((C3620 * C118 + C3621 * C50819) * C17338 +
             (C3454 + C3455) * C17339 + (C9047 + C9048) * C17340) *
                C50957) *
               C51040 -
           ((((C117 * C1161 + C50919 * C1165) * C50819 +
              (C117 * C1153 + C50919 * C1160) * C118) *
                 C17340 +
             (C9048 + C9047) * C17339 + (C3455 + C3454) * C17338) *
                C50957 +
            ((C1052 + C1051) * C17340 + (C1050 + C1049) * C17339 +
             (C1048 + C1047) * C17338) *
                C17341) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C50764 * C19940 +
           (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
           (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
           (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
              C112 -
          ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
           (C2443 + C2442) * C50764 * C19942 +
           (C2441 + C2440) * C50764 * C19941 +
           (C179 + C178) * C50764 * C19940) *
              C113 +
          (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
           (C2445 + C2444) * C50764 * C19942 +
           (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
              C114 -
          (((C117 * C772 + C50919 * C776) * C50819 +
            (C117 * C764 + C50919 * C771) * C118) *
               C50764 * C19943 +
           (C2451 + C2450) * C50764 * C19942 + C8194 * C50764 * C19941 +
           C191 * C50764 * C19940) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 - C2627 * C623 +
            C2628 * C629 + C2629 * C624) *
               C50764 * C19940 +
           (C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
            C2980 * C629 + C2981 * C624) *
               C50764 * C19941 +
           (C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
            C3096 * C629 + C3097 * C624) *
               C50764 * C19942 +
           (C2980 * C627 + C2981 * C622 - C3096 * C628 - C3097 * C623 +
            (C117 * C3083 + C50919 * C3085) * C629 +
            (C117 * C3086 + C50919 * C3089) * C624) *
               C50764 * C19943) *
              C51040 +
          ((C653 - (C652 + C651) + C654 - C681 - C682) * C50764 * C19940 +
           (C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C50764 * C19941 +
           (C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C50764 * C19942 +
           (C2982 * C628 - (C2631 * C622 + C2630 * C627) + C2983 * C623 -
            (C117 * C3084 + C50919 * C3087) * C629 -
            (C117 * C3088 + C50919 * C3090) * C624) *
               C50764 * C19943) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C51040 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C50790) *
              C1005 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C50790 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C51040) *
              C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C50764 * C19940 +
            (C3620 * C118 + C3621 * C50819) * C50764 * C19941 +
            (C3622 * C118 + C3623 * C50819) * C50764 * C19942 +
            ((C117 * C3603 + C50919 * C3605) * C118 +
             (C117 * C3606 + C50919 * C3609) * C50819) *
                C50764 * C19943) *
               C51040 -
           (((C117 * C3608 + C50919 * C3610) * C50819 +
             (C117 * C3604 + C50919 * C3607) * C118) *
                C50764 * C19943 +
            (C3457 + C3456) * C50764 * C19942 +
            (C3455 + C3454) * C50764 * C19941 +
            (C1048 + C1047) * C50764 * C19940) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C118 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C50819) *
               C50764 * C17341 +
           ((C5344 * C296 + C5341 * C302 + C5345 * C875 + C5342 * C883 +
             C5346 * C1150 + C5343 * C1154) *
                C118 +
            (C5344 * C303 + C5341 * C314 + C5345 * C884 + C5342 * C899 +
             C5346 * C1155 + C5343 * C1162) *
                C50819) *
               C50764 * C50957) *
              C112 -
          (((C5575 + C5576 + C5577) * C50819 + (C5572 + C5573 + C5574) * C118) *
               C50764 * C50957 +
           ((C5389 + C5388 + C5387) * C50819 + (C5386 + C5385 + C5384) * C118) *
               C50764 * C17341) *
              C113 +
          (((C5395 + C5394 + C5393) * C118 + (C5392 + C5391 + C5390) * C50819) *
               C50764 * C17341 +
           ((C5578 + C5579 + C5580) * C118 + (C5581 + C5582 + C5583) * C50819) *
               C50764 * C50957) *
              C114 -
          (((C5346 * C1161 + C5343 * C1165 + C5345 * C896 + C5342 * C905 +
             C5344 * C309 + C5341 * C317) *
                C50819 +
            (C5346 * C1153 + C5343 * C1160 + C5345 * C881 + C5342 * C895 +
             C5344 * C299 + C5341 * C308) *
                C118) *
               C50764 * C50957 +
           ((C5401 + C5400 + C5399) * C50819 + (C5398 + C5397 + C5396) * C118) *
               C50764 * C17341) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C627 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C622 -
            (C21933 + C21934 + C21935) * C628 -
            (C21936 + C21937 + C21938) * C623 +
            (C22243 + C22244 + C22245) * C629 +
            (C22246 + C22247 + C22248) * C624) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C627 +
            (C21938 + C21937 + C21936) * C622 -
            (C22245 + C22244 + C22243) * C628 -
            (C22248 + C22247 + C22246) * C623 +
            (C5344 * C761 + C5341 * C765 + C5345 * C3243 + C5342 * C3247 +
             C5346 * C3603 + C5343 * C3605) *
                C629 +
            (C5344 * C766 + C5341 * C773 + C5345 * C3248 + C5342 * C3255 +
             C5346 * C3606 + C5343 * C3609) *
                C624) *
               C50764 * C50957) *
              C51040 +
          (((C5574 + C5573 + C5572) * C628 -
            ((C5389 + C5388 + C5387) * C622 + (C5386 + C5385 + C5384) * C627) +
            (C5577 + C5576 + C5575) * C623 - (C5926 + C5925 + C5924) * C629 -
            (C5929 + C5928 + C5927) * C624) *
               C50764 * C17341 +
           ((C5924 + C5925 + C5926) * C628 -
            ((C5575 + C5576 + C5577) * C622 + (C5572 + C5573 + C5574) * C627) +
            (C5927 + C5928 + C5929) * C623 -
            (C5346 * C3604 + C5343 * C3607 + C5345 * C3244 + C5342 * C3249 +
             C5344 * C762 + C5341 * C767) *
                C629 -
            (C5346 * C3608 + C5343 * C3610 + C5345 * C3250 + C5342 * C3256 +
             C5344 * C768 + C5341 * C774) *
                C624) *
               C50764 * C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C50764 * C17341 +
            ((C21935 + C21934 + C21933) * C118 +
             (C21938 + C21937 + C21936) * C50819) *
                C50764 * C50957) *
               C51040 -
           (((C5575 + C5576 + C5577) * C50819 +
             (C5572 + C5573 + C5574) * C118) *
                C50764 * C50957 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C50764 * C17341) *
               C50790) *
              C1005 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C50764 * C17341 +
            ((C7112 + C7113 + C7114) * C118 +
             (C7115 + C7116 + C7117) * C50819) *
                C50764 * C50957) *
               C50790 -
           (((C22540 + C22539 + C22538) * C50819 +
             (C22537 + C22536 + C22535) * C118) *
                C50764 * C50957 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C50764 * C17341) *
               C51040) *
              C1006 +
          ((((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
              C5346 * C6319 + C5343 * C6322) *
                 C118 +
             (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
              C5346 * C6323 + C5343 * C6328) *
                 C50819) *
                C50764 * C17341 +
            ((C5344 * C1150 + C5341 * C1154 + C5345 * C3724 + C5342 * C3732 +
              C5346 * C6495 + C5343 * C6497) *
                 C118 +
             (C5344 * C1155 + C5341 * C1162 + C5345 * C3731 + C5342 * C3736 +
              C5346 * C6498 + C5343 * C6501) *
                 C50819) *
                C50764 * C50957) *
               C51040 -
           (((C5346 * C6500 + C5343 * C6502 + C5345 * C3729 + C5342 * C3735 +
              C5344 * C1157 + C5341 * C1163) *
                 C50819 +
             (C5346 * C6496 + C5343 * C6499 + C5345 * C3723 + C5342 * C3730 +
              C5344 * C1151 + C5341 * C1156) *
                 C118) *
                C50764 * C50957 +
            ((C6349 + C6348 + C6347) * C50819 +
             (C6346 + C6345 + C6344) * C118) *
                C50764 * C17341) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50919 * C126) * C294 +
                 (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
                 C2627 * C50835) *
                    C17338 +
                (C321 + C322 - C355 - C356) * C17339 + C365 * C17340) *
                   C17341 +
               ((C2626 * C294 + C2627 * C51047 - C2628 * C295 -
                 C2629 * C50835) *
                    C17338 +
                (C2606 + C2607 - C2608 - C2609) * C17339 + C8349 * C17340) *
                   C50957) *
                  C291 +
              (((C355 - (C322 + C321) + C356) * C17338 +
                (C357 - (C328 + C327) + C358) * C17339 +
                (C359 - (C334 + C333) + C360) * C17340) *
                   C17341 +
               ((C2608 - (C2607 + C2606) + C2609) * C17338 +
                (C2616 - (C2617 + C2618) + C2619) * C17339 +
                (C8344 - (C8345 + C8346) + C8347) * C17340) *
                   C50957) *
                  C292 +
              ((C365 * C17338 + C366 * C17339 +
                (C342 + C341 - C361 - C362) * C17340) *
                   C17341 +
               (C8349 * C17338 + (C8346 + C8345 - C8344 - C8347) * C17339 +
                (C353 * C294 + C354 * C51047 -
                 (C117 * C634 + C50919 * C643) * C295 -
                 (C117 * C644 + C50919 * C649) * C50835) *
                    C17340) *
                   C50957) *
                  C293) *
             C50849 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50919 * C126) * C757 +
                (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 -
                C2627 * C753 + C2628 * C759 + C2629 * C754 - C2980 * C760 -
                C2981 * C755) *
                   C17338 +
               (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
                C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
                   C17339 +
               (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 +
                C677 * C759 + C678 * C754 - C2632 * C760 - C2633 * C755) *
                   C17340) *
                  C17341 +
              ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
                C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
                   C17338 +
               (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
                C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
                   C17339 +
               (C348 * C757 + C349 * C752 - C677 * C758 - C678 * C753 +
                C2632 * C759 + C2633 * C754 -
                (C117 * C2951 + C50919 * C2956) * C760 -
                (C117 * C2957 + C50919 * C2960) * C755) *
                   C17340) *
                  C50957) *
             C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C17338 +
            (C321 + C322 - C355 - C356) * C17339 + C365 * C17340) *
               C17341 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C17338 +
            (C2606 + C2607 - C2608 - C2609) * C17339 + C8349 * C17340) *
               C50957) *
              C50785 * C1005 +
          (((C3276 * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             C3277 * C50835) *
                C17338 +
            (C1898 - (C1899 + C1900) + C1901) * C17339 +
            (C1902 - (C1903 + C1904) + C1905) * C17340) *
               C17341 +
           ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                C17338 +
            (C4604 - (C4605 + C4606) + C4607) * C17339 +
            (C10136 - (C10137 + C10138) + C10139) * C17340) *
               C50957) *
              C50785 * C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C294 +
             (C117 * C1014 + C50919 * C1023) * C51047 - C3620 * C295 -
             C3621 * C50835) *
                C17338 +
            (C1041 * C294 + C1042 * C51047 - C3450 * C295 - C3451 * C50835) *
                C17339 +
            (C1043 * C294 + C1044 * C51047 - C9045 * C295 - C9046 * C50835) *
                C17340) *
               C17341 +
           ((C3620 * C294 + C3621 * C51047 - C3622 * C295 - C3623 * C50835) *
                C17338 +
            (C3450 * C294 + C3451 * C51047 - C3452 * C295 - C3453 * C50835) *
                C17339 +
            (C9045 * C294 + C9046 * C51047 -
             (C117 * C3431 + C50919 * C3437) * C295 -
             (C117 * C3436 + C50919 * C3440) * C50835) *
                C17340) *
               C50957) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C294 + C2981 * C51047 - C3096 * C295 - C3097 * C50835) *
               C50764 * C19943) *
              C291 +
          ((C355 - (C322 + C321) + C356) * C50764 * C19940 +
           (C2608 - (C2607 + C2606) + C2609) * C50764 * C19941 +
           (C2634 - (C2611 + C2610) + C2635) * C50764 * C19942 +
           (C2982 * C295 - (C2631 * C51047 + C2630 * C294) + C2983 * C50835) *
               C50764 * C19943) *
              C292 +
          (C365 * C50764 * C19940 + C8349 * C50764 * C19941 +
           (C2623 + C2622 - C2636 - C2637) * C50764 * C19942 +
           (C2632 * C294 + C2633 * C51047 -
            (C117 * C2951 + C50919 * C2956) * C295 -
            (C117 * C2957 + C50919 * C2960) * C50835) *
               C50764 * C19943) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50919 * C126) * C757 +
           (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
           C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
              C50764 * C19940 +
          (C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
           C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
              C50764 * C19941 +
          (C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
           C3096 * C759 + C3097 * C754 - C20313 * C760 - C20314 * C755) *
              C50764 * C19942 +
          (C2980 * C757 + C2981 * C752 - C3096 * C758 - C3097 * C753 +
           C20313 * C759 + C20314 * C754 -
           (C117 * C20304 + C50919 * C20305) * C760 -
           (C117 * C20306 + C50919 * C20307) * C755) *
              C50764 * C19943) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C294 + C2981 * C51047 - C3096 * C295 - C3097 * C50835) *
               C50764 * C19943) *
              C50785 * C1005 +
          ((C3276 * C295 -
            ((C117 * C480 + C50919 * C488) * C51047 +
             (C117 * C470 + C50919 * C481) * C294) +
            C3277 * C50835) *
               C50764 * C19940 +
           (C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
               C50764 * C19941 +
           (C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
               C50764 * C19942 +
           (C20421 * C295 - (C3281 * C51047 + C3280 * C294) + C20422 * C50835) *
               C50764 * C19943) *
              C50785 * C1006 +
          (((C117 * C1008 + C50919 * C1013) * C294 +
            (C117 * C1014 + C50919 * C1023) * C51047 - C3620 * C295 -
            C3621 * C50835) *
               C50764 * C19940 +
           (C3620 * C294 + C3621 * C51047 - C3622 * C295 - C3623 * C50835) *
               C50764 * C19941 +
           (C3622 * C294 + C3623 * C51047 - C20627 * C295 - C20628 * C50835) *
               C50764 * C19942 +
           (C20627 * C294 + C20628 * C51047 -
            (C117 * C20618 + C50919 * C20619) * C295 -
            (C117 * C20620 + C50919 * C20621) * C50835) *
               C50764 * C19943) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C294 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51047 -
            (C21933 + C21934 + C21935) * C295 -
            (C21936 + C21937 + C21938) * C50835) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C294 +
            (C21938 + C21937 + C21936) * C51047 -
            (C5346 * C3429 + C5343 * C3432 + C5345 * C876 + C5342 * C885 +
             C5344 * C630 + C5341 * C635) *
                C295 -
            (C5346 * C3433 + C5343 * C3438 + C5345 * C886 + C5342 * C900 +
             C5344 * C636 + C5341 * C645) *
                C50835) *
               C50764 * C50957) *
              C291 +
          (((C5574 + C5573 + C5572) * C295 -
            ((C5389 + C5388 + C5387) * C51047 +
             (C5386 + C5385 + C5384) * C294) +
            (C5577 + C5576 + C5575) * C50835) *
               C50764 * C17341 +
           ((C5924 + C5925 + C5926) * C295 -
            ((C5575 + C5576 + C5577) * C51047 +
             (C5572 + C5573 + C5574) * C294) +
            (C5927 + C5928 + C5929) * C50835) *
               C50764 * C50957) *
              C292 +
          (((C5395 + C5394 + C5393) * C294 + (C5392 + C5391 + C5390) * C51047 -
            (C5580 + C5579 + C5578) * C295 - (C5583 + C5582 + C5581) * C50835) *
               C50764 * C17341 +
           ((C5578 + C5579 + C5580) * C294 + (C5581 + C5582 + C5583) * C51047 -
            (C5346 * C3431 + C5343 * C3437 + C5345 * C880 + C5342 * C893 +
             C5344 * C632 + C5341 * C639) *
                C295 -
            (C5346 * C3436 + C5343 * C3440 + C5345 * C894 + C5342 * C904 +
             C5344 * C640 + C5341 * C647) *
                C50835) *
               C50764 * C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
            C5346 * C1008 + C5343 * C1013) *
               C757 +
           (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
            C5346 * C1014 + C5343 * C1023) *
               C752 -
           (C21933 + C21934 + C21935) * C758 -
           (C21936 + C21937 + C21938) * C753 +
           (C22243 + C22244 + C22245) * C759 +
           (C22246 + C22247 + C22248) * C754 -
           (C22359 + C22360 + C22361) * C760 -
           (C22362 + C22363 + C22364) * C755) *
              C50764 * C17341 +
          ((C21935 + C21934 + C21933) * C757 +
           (C21938 + C21937 + C21936) * C752 -
           (C22245 + C22244 + C22243) * C758 -
           (C22248 + C22247 + C22246) * C753 +
           (C22361 + C22360 + C22359) * C759 +
           (C22364 + C22363 + C22362) * C754 -
           (C5346 * C20618 + C5343 * C20619 + C5345 * C3245 + C5342 * C3251 +
            C5344 * C2949 + C5341 * C2952) *
               C760 -
           (C5346 * C20620 + C5343 * C20621 + C5345 * C3252 + C5342 * C3257 +
            C5344 * C2953 + C5341 * C2958) *
               C755) *
              C50764 * C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C294 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51047 -
            (C21933 + C21934 + C21935) * C295 -
            (C21936 + C21937 + C21938) * C50835) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C294 +
            (C21938 + C21937 + C21936) * C51047 -
            (C22245 + C22244 + C22243) * C295 -
            (C22248 + C22247 + C22246) * C50835) *
               C50764 * C50957) *
              C50785 * C1005 +
          (((C22535 + C22536 + C22537) * C295 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C51047 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C294) +
            (C22538 + C22539 + C22540) * C50835) *
               C50764 * C17341 +
           ((C22543 + C22542 + C22541) * C295 -
            ((C22540 + C22539 + C22538) * C51047 +
             (C22537 + C22536 + C22535) * C294) +
            (C22546 + C22545 + C22544) * C50835) *
               C50764 * C50957) *
              C50785 * C1006 +
          (((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
             C5346 * C6319 + C5343 * C6322) *
                C294 +
            (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
             C5346 * C6323 + C5343 * C6328) *
                C51047 -
            (C22855 + C22856 + C22857) * C295 -
            (C22858 + C22859 + C22860) * C50835) *
               C50764 * C17341 +
           ((C22857 + C22856 + C22855) * C294 +
            (C22860 + C22859 + C22858) * C51047 -
            (C5346 * C22838 + C5343 * C22839 + C5345 * C3722 + C5342 * C3728 +
             C5344 * C3429 + C5341 * C3432) *
                C295 -
            (C5346 * C22840 + C5343 * C22841 + C5345 * C3727 + C5342 * C3734 +
             C5344 * C3433 + C5341 * C3438) *
                C50835) *
               C50764 * C50957) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((((C117 * C119 + C50919 * C126) * C118 +
                  (C117 * C127 + C50919 * C140) * C50819) *
                     C17338 +
                 (C178 + C179) * C17339 + C188 * C17340) *
                    C17341 +
                ((C2626 * C118 + C2627 * C50819) * C17338 +
                 (C2440 + C2441) * C17339 + C8193 * C17340) *
                    C50957) *
                   C291 -
               ((C8194 * C17340 + (C2446 + C2447) * C17339 +
                 (C2441 + C2440) * C17338) *
                    C50957 +
                (C191 * C17340 + (C181 + C180) * C17339 +
                 (C179 + C178) * C17338) *
                    C17341) *
                   C292 +
               ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) *
                    C17341 +
                (C8193 * C17338 + (C2448 + C2449) * C17339 +
                 (C8195 + C8196) * C17340) *
                    C50957) *
                   C293) *
                  C51049 +
              ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
                 (C519 + C520) * C17340) *
                    C17341 +
                ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
                 (C8496 + C8497) * C17340) *
                    C50957) *
                   C292 -
               ((C8498 * C17340 + (C2785 + C2784) * C17339 +
                 (C3277 * C50819 + C3276 * C118) * C17338) *
                    C50957 +
                (C524 * C17340 + (C516 + C515) * C17339 +
                 ((C117 * C480 + C50919 * C488) * C50819 +
                  (C117 * C470 + C50919 * C481) * C118) *
                     C17338) *
                    C17341) *
                   C291 -
               ((((C117 * C1635 + C50919 * C1636) * C50819 +
                  (C117 * C1633 + C50919 * C1634) * C118) *
                     C17340 +
                 (C8497 + C8496) * C17339 + C8498 * C17338) *
                    C50957 +
                ((C522 + C521) * C17340 + C523 * C17339 + C524 * C17338) *
                    C17341) *
                   C293) *
                  C50861) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50919 * C126) * C627 +
                 (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
                 C2627 * C623 + C2628 * C629 + C2629 * C624) *
                    C17338 +
                (C651 + C652 - C653 - C654 + C681 + C682) * C17339 +
                (C659 + C660 - C661 - C662 + C683 + C684) * C17340) *
                   C17341 +
               ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
                 C2980 * C629 + C2981 * C624) *
                    C17338 +
                (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C17339 +
                (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C17340) *
                   C50957) *
                  C50785 * C51049 +
              (((C3276 * C628 -
                 ((C117 * C480 + C50919 * C488) * C622 +
                  (C117 * C470 + C50919 * C481) * C627) +
                 C3277 * C623 - C3278 * C629 - C3279 * C624) *
                    C17338 +
                (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
                 C2796 * C629 - C2797 * C624) *
                    C17339 +
                (C1658 * C628 - (C510 * C622 + C509 * C627) + C1659 * C623 -
                 C2798 * C629 - C2799 * C624) *
                    C17340) *
                   C17341 +
               ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
                 C3280 * C629 - C3281 * C624) *
                    C17338 +
                (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
                 C3282 * C629 - C3283 * C624) *
                    C17339 +
                (C2798 * C628 - (C1659 * C622 + C1658 * C627) + C2799 * C623 -
                 (C117 * C4251 + C50919 * C4252) * C629 -
                 (C117 * C4253 + C50919 * C4254) * C624) *
                    C17340) *
                   C50957) *
                  C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C17338 +
            (C178 + C179) * C17339 + C188 * C17340) *
               C17341 +
           ((C2626 * C118 + C2627 * C50819) * C17338 +
            (C2440 + C2441) * C17339 + C8193 * C17340) *
               C50957) *
              C50785 * C1232 -
          ((C8498 * C17340 + (C2785 + C2784) * C17339 +
            (C3277 * C50819 + C3276 * C118) * C17338) *
               C50957 +
           (C524 * C17340 + (C516 + C515) * C17339 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C17338) *
               C17341) *
              C50785 * C1233 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C17338 +
            (C1047 + C1048) * C17339 + (C1049 + C1050) * C17340) *
               C17341 +
           ((C3620 * C118 + C3621 * C50819) * C17338 +
            (C3454 + C3455) * C17339 + (C9047 + C9048) * C17340) *
               C50957) *
              C50785 * C1234 -
          ((((C117 * C7097 + C50919 * C7098) * C50819 +
             (C117 * C7095 + C50919 * C7096) * C118) *
                C17340 +
            ((C117 * C3729 + C50919 * C3735) * C50819 +
             (C117 * C3723 + C50919 * C3730) * C118) *
                C17339 +
            ((C117 * C3731 + C50919 * C3736) * C50819 +
             (C117 * C3724 + C50919 * C3732) * C118) *
                C17338) *
               C50957 +
           (((C117 * C1242 + C50919 * C1249) * C50819 +
             (C117 * C1237 + C50919 * C1243) * C118) *
                C17340 +
            ((C117 * C1244 + C50919 * C1250) * C50819 +
             (C117 * C1238 + C50919 * C1245) * C118) *
                C17339 +
            ((C117 * C1246 + C50919 * C1251) * C50819 +
             (C117 * C1239 + C50919 * C1247) * C118) *
                C17338) *
               C17341) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C291 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C292 +
           (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
            (C2445 + C2444) * C50764 * C19942 +
            (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
               C293) *
              C51049 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C292 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C291 -
           (((C117 * C4253 + C50919 * C4254) * C50819 +
             (C117 * C4251 + C50919 * C4252) * C118) *
                C50764 * C19943 +
            (C2803 + C2802) * C50764 * C19942 + C8498 * C50764 * C19941 +
            C524 * C50764 * C19940) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 - C2627 * C623 +
            C2628 * C629 + C2629 * C624) *
               C50764 * C19940 +
           (C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
            C2980 * C629 + C2981 * C624) *
               C50764 * C19941 +
           (C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
            C3096 * C629 + C3097 * C624) *
               C50764 * C19942 +
           (C2980 * C627 + C2981 * C622 - C3096 * C628 - C3097 * C623 +
            C20313 * C629 + C20314 * C624) *
               C50764 * C19943) *
              C50785 * C51049 +
          ((C3276 * C628 -
            ((C117 * C480 + C50919 * C488) * C622 +
             (C117 * C470 + C50919 * C481) * C627) +
            C3277 * C623 - C3278 * C629 - C3279 * C624) *
               C50764 * C19940 +
           (C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
            C3280 * C629 - C3281 * C624) *
               C50764 * C19941 +
           (C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
            C20421 * C629 - C20422 * C624) *
               C50764 * C19942 +
           (C20421 * C628 - (C3281 * C622 + C3280 * C627) + C20422 * C623 -
            (C117 * C20412 + C50919 * C20413) * C629 -
            (C117 * C20414 + C50919 * C20415) * C624) *
               C50764 * C19943) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C50764 * C19940 +
           (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
           (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
           (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
              C50785 * C1232 -
          ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
           (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
           (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
           ((C117 * C480 + C50919 * C488) * C50819 +
            (C117 * C470 + C50919 * C481) * C118) *
               C50764 * C19940) *
              C50785 * C1233 +
          (((C117 * C1008 + C50919 * C1013) * C118 +
            (C117 * C1014 + C50919 * C1023) * C50819) *
               C50764 * C19940 +
           (C3620 * C118 + C3621 * C50819) * C50764 * C19941 +
           (C3622 * C118 + C3623 * C50819) * C50764 * C19942 +
           (C20627 * C118 + C20628 * C50819) * C50764 * C19943) *
              C50785 * C1234 -
          (((C117 * C20695 + C50919 * C20697) * C50819 +
            (C117 * C20694 + C50919 * C20696) * C118) *
               C50764 * C19943 +
           ((C117 * C3727 + C50919 * C3734) * C50819 +
            (C117 * C3722 + C50919 * C3728) * C118) *
               C50764 * C19942 +
           ((C117 * C3731 + C50919 * C3736) * C50819 +
            (C117 * C3724 + C50919 * C3732) * C118) *
               C50764 * C19941 +
           ((C117 * C1246 + C50919 * C1251) * C50819 +
            (C117 * C1239 + C50919 * C1247) * C118) *
               C50764 * C19940) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C50764 * C17341 +
            ((C21935 + C21934 + C21933) * C118 +
             (C21938 + C21937 + C21936) * C50819) *
                C50764 * C50957) *
               C291 -
           (((C5575 + C5576 + C5577) * C50819 +
             (C5572 + C5573 + C5574) * C118) *
                C50764 * C50957 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C50764 * C17341) *
               C292 +
           (((C5395 + C5394 + C5393) * C118 +
             (C5392 + C5391 + C5390) * C50819) *
                C50764 * C17341 +
            ((C5578 + C5579 + C5580) * C118 +
             (C5581 + C5582 + C5583) * C50819) *
                C50764 * C50957) *
               C293) *
              C51049 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C50764 * C17341 +
            ((C7112 + C7113 + C7114) * C118 +
             (C7115 + C7116 + C7117) * C50819) *
                C50764 * C50957) *
               C292 -
           (((C5346 * C3731 + C5343 * C3736 + C5345 * C1155 + C5342 * C1162 +
              C5344 * C884 + C5341 * C899) *
                 C50819 +
             (C5346 * C3724 + C5343 * C3732 + C5345 * C1150 + C5342 * C1154 +
              C5344 * C875 + C5341 * C883) *
                 C118) *
                C50764 * C50957 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C50764 * C17341) *
               C291 -
           (((C5346 * C7097 + C5343 * C7098 + C5345 * C1159 + C5342 * C1164 +
              C5344 * C892 + C5341 * C903) *
                 C50819 +
             (C5346 * C7095 + C5343 * C7096 + C5345 * C1152 + C5342 * C1158 +
              C5344 * C879 + C5341 * C891) *
                 C118) *
                C50764 * C50957 +
            ((C5765 + C5764 + C5763) * C50819 +
             (C5762 + C5761 + C5760) * C118) *
                C50764 * C17341) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C627 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C622 -
            (C21933 + C21934 + C21935) * C628 -
            (C21936 + C21937 + C21938) * C623 +
            (C22243 + C22244 + C22245) * C629 +
            (C22246 + C22247 + C22248) * C624) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C627 +
            (C21938 + C21937 + C21936) * C622 -
            (C22245 + C22244 + C22243) * C628 -
            (C22248 + C22247 + C22246) * C623 +
            (C22361 + C22360 + C22359) * C629 +
            (C22364 + C22363 + C22362) * C624) *
               C50764 * C50957) *
              C50785 * C51049 +
          (((C22535 + C22536 + C22537) * C628 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C622 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C627) +
            (C22538 + C22539 + C22540) * C623 -
            (C22541 + C22542 + C22543) * C629 -
            (C22544 + C22545 + C22546) * C624) *
               C50764 * C17341 +
           ((C22543 + C22542 + C22541) * C628 -
            ((C22540 + C22539 + C22538) * C622 +
             (C22537 + C22536 + C22535) * C627) +
            (C22546 + C22545 + C22544) * C623 -
            (C5346 * C20694 + C5343 * C20696 + C5345 * C3603 + C5342 * C3605 +
             C5344 * C3243 + C5341 * C3247) *
                C629 -
            (C5346 * C20695 + C5343 * C20697 + C5345 * C3606 + C5342 * C3609 +
             C5344 * C3248 + C5341 * C3255) *
                C624) *
               C50764 * C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C118 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C50819) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C118 +
            (C21938 + C21937 + C21936) * C50819) *
               C50764 * C50957) *
              C50785 * C1232 -
          (((C22540 + C22539 + C22538) * C50819 +
            (C22537 + C22536 + C22535) * C118) *
               C50764 * C50957 +
           ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
             C5344 * C480 + C5341 * C488) *
                C50819 +
            (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
             C5344 * C470 + C5341 * C481) *
                C118) *
               C50764 * C17341) *
              C50785 * C1233 +
          (((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
             C5346 * C6319 + C5343 * C6322) *
                C118 +
            (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
             C5346 * C6323 + C5343 * C6328) *
                C50819) *
               C50764 * C17341 +
           ((C22857 + C22856 + C22855) * C118 +
            (C22860 + C22859 + C22858) * C50819) *
               C50764 * C50957) *
              C50785 * C1234 -
          (((C5346 * C22959 + C5343 * C22961 + C5345 * C6498 + C5342 * C6501 +
             C5344 * C3731 + C5341 * C3736) *
                C50819 +
            (C5346 * C22958 + C5343 * C22960 + C5345 * C6495 + C5342 * C6497 +
             C5344 * C3724 + C5341 * C3732) *
                C118) *
               C50764 * C50957 +
           ((C5346 * C6605 + C5343 * C6608 + C5345 * C6323 + C5342 * C6328 +
             C5344 * C1246 + C5341 * C1251) *
                C50819 +
            (C5346 * C6602 + C5343 * C6606 + C5345 * C6319 + C5342 * C6322 +
             C5344 * C1239 + C5341 * C1247) *
                C118) *
               C50764 * C17341) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C51093 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C51078 +
           (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
            (C2445 + C2444) * C50764 * C19942 +
            (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
               C1354) *
              C1765 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C51078 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C51093 -
           (((C117 * C4253 + C50919 * C4254) * C50819 +
             (C117 * C4251 + C50919 * C4252) * C118) *
                C50764 * C19943 +
            (C2803 + C2802) * C50764 * C19942 + C8498 * C50764 * C19941 +
            C524 * C50764 * C19940) *
               C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C17338 +
             (C178 + C179) * C17339 + C188 * C17340) *
                C17341 +
            ((C2626 * C118 + C2627 * C50819) * C17338 +
             (C2440 + C2441) * C17339 + C8193 * C17340) *
                C50957) *
               C51093 -
           ((C8194 * C17340 + (C2446 + C2447) * C17339 +
             (C2441 + C2440) * C17338) *
                C50957 +
            (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
                C17341) *
               C51078 +
           ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) * C17341 +
            (C8193 * C17338 + (C2448 + C2449) * C17339 +
             (C8195 + C8196) * C17340) *
                C50957) *
               C1354) *
              C1765 +
          ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
             (C519 + C520) * C17340) *
                C17341 +
            ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
             (C8496 + C8497) * C17340) *
                C50957) *
               C51078 -
           ((C8498 * C17340 + (C2785 + C2784) * C17339 +
             (C3277 * C50819 + C3276 * C118) * C17338) *
                C50957 +
            (C524 * C17340 + (C516 + C515) * C17339 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C17338) *
                C17341) *
               C51093 -
           ((((C117 * C1635 + C50919 * C1636) * C50819 +
              (C117 * C1633 + C50919 * C1634) * C118) *
                 C17340 +
             (C8497 + C8496) * C17339 + C8498 * C17338) *
                C50957 +
            ((C522 + C521) * C17340 + C523 * C17339 + C524 * C17338) * C17341) *
               C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C50764 * C17341 +
            ((C21935 + C21934 + C21933) * C118 +
             (C21938 + C21937 + C21936) * C50819) *
                C50764 * C50957) *
               C51093 -
           (((C5575 + C5576 + C5577) * C50819 +
             (C5572 + C5573 + C5574) * C118) *
                C50764 * C50957 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C50764 * C17341) *
               C51078 +
           (((C5395 + C5394 + C5393) * C118 +
             (C5392 + C5391 + C5390) * C50819) *
                C50764 * C17341 +
            ((C5578 + C5579 + C5580) * C118 +
             (C5581 + C5582 + C5583) * C50819) *
                C50764 * C50957) *
               C1354) *
              C1765 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C50764 * C17341 +
            ((C7112 + C7113 + C7114) * C118 +
             (C7115 + C7116 + C7117) * C50819) *
                C50764 * C50957) *
               C51078 -
           (((C22540 + C22539 + C22538) * C50819 +
             (C22537 + C22536 + C22535) * C118) *
                C50764 * C50957 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C50764 * C17341) *
               C51093 -
           (((C5346 * C7097 + C5343 * C7098 + C5345 * C1159 + C5342 * C1164 +
              C5344 * C892 + C5341 * C903) *
                 C50819 +
             (C5346 * C7095 + C5343 * C7096 + C5345 * C1152 + C5342 * C1158 +
              C5344 * C879 + C5341 * C891) *
                 C118) *
                C50764 * C50957 +
            ((C5765 + C5764 + C5763) * C50819 +
             (C5762 + C5761 + C5760) * C118) *
                C50764 * C17341) *
               C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C50764 * C19940 +
            (C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C50764 * C19941 +
            (C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                C50764 * C19942 +
            (C2980 * C294 + C2981 * C51047 - C3096 * C295 - C3097 * C50835) *
                C50764 * C19943) *
               C1480 +
           ((C355 - (C322 + C321) + C356) * C50764 * C19940 +
            (C2608 - (C2607 + C2606) + C2609) * C50764 * C19941 +
            (C2634 - (C2611 + C2610) + C2635) * C50764 * C19942 +
            (C2982 * C295 - (C2631 * C51047 + C2630 * C294) + C2983 * C50835) *
                C50764 * C19943) *
               C50790) *
              C1765 +
          (((C3276 * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             C3277 * C50835) *
                C50764 * C19940 +
            (C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                C50764 * C19941 +
            (C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
                C50764 * C19942 +
            (C20421 * C295 - (C3281 * C51047 + C3280 * C294) +
             C20422 * C50835) *
                C50764 * C19943) *
               C1480 +
           ((C1900 + C1899 - C1898 - C1901) * C50764 * C19940 +
            (C4606 + C4605 - C4604 - C4607) * C50764 * C19941 +
            (C4610 + C4609 - C4608 - C4611) * C50764 * C19942 +
            (C3282 * C294 + C3283 * C51047 -
             (C117 * C3246 + C50919 * C3253) * C295 -
             (C117 * C3254 + C50919 * C3258) * C50835) *
                C50764 * C19943) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C294 +
              (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
              C2627 * C50835) *
                 C17338 +
             (C321 + C322 - C355 - C356) * C17339 + C365 * C17340) *
                C17341 +
            ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                 C17338 +
             (C2606 + C2607 - C2608 - C2609) * C17339 + C8349 * C17340) *
                C50957) *
               C1480 +
           (((C355 - (C322 + C321) + C356) * C17338 +
             (C357 - (C328 + C327) + C358) * C17339 +
             (C359 - (C334 + C333) + C360) * C17340) *
                C17341 +
            ((C2608 - (C2607 + C2606) + C2609) * C17338 +
             (C2616 - (C2617 + C2618) + C2619) * C17339 +
             (C8344 - (C8345 + C8346) + C8347) * C17340) *
                C50957) *
               C50790) *
              C1765 +
          ((((C3276 * C295 -
              ((C117 * C480 + C50919 * C488) * C51047 +
               (C117 * C470 + C50919 * C481) * C294) +
              C3277 * C50835) *
                 C17338 +
             (C1898 - (C1899 + C1900) + C1901) * C17339 +
             (C1902 - (C1903 + C1904) + C1905) * C17340) *
                C17341 +
            ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                 C17338 +
             (C4604 - (C4605 + C4606) + C4607) * C17339 +
             (C10136 - (C10137 + C10138) + C10139) * C17340) *
                C50957) *
               C1480 +
           (((C1900 + C1899 - C1898 - C1901) * C17338 +
             (C1904 + C1903 - C1902 - C1905) * C17339 +
             (C1908 + C1907 - C1906 - C1909) * C17340) *
                C17341 +
            ((C4606 + C4605 - C4604 - C4607) * C17338 +
             (C10138 + C10137 - C10136 - C10139) * C17339 +
             (C1660 * C294 + C1661 * C51047 -
              (C117 * C882 + C50919 * C897) * C295 -
              (C117 * C898 + C50919 * C906) * C50835) *
                 C17340) *
                C50957) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C294 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C51047 -
             (C21933 + C21934 + C21935) * C295 -
             (C21936 + C21937 + C21938) * C50835) *
                C50764 * C17341 +
            ((C21935 + C21934 + C21933) * C294 +
             (C21938 + C21937 + C21936) * C51047 -
             (C22245 + C22244 + C22243) * C295 -
             (C22248 + C22247 + C22246) * C50835) *
                C50764 * C50957) *
               C1480 +
           (((C5574 + C5573 + C5572) * C295 -
             ((C5389 + C5388 + C5387) * C51047 +
              (C5386 + C5385 + C5384) * C294) +
             (C5577 + C5576 + C5575) * C50835) *
                C50764 * C17341 +
            ((C5924 + C5925 + C5926) * C295 -
             ((C5575 + C5576 + C5577) * C51047 +
              (C5572 + C5573 + C5574) * C294) +
             (C5927 + C5928 + C5929) * C50835) *
                C50764 * C50957) *
               C50790) *
              C1765 +
          ((((C22535 + C22536 + C22537) * C295 -
             ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
               C5344 * C480 + C5341 * C488) *
                  C51047 +
              (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
               C5344 * C470 + C5341 * C481) *
                  C294) +
             (C22538 + C22539 + C22540) * C50835) *
                C50764 * C17341 +
            ((C22543 + C22542 + C22541) * C295 -
             ((C22540 + C22539 + C22538) * C51047 +
              (C22537 + C22536 + C22535) * C294) +
             (C22546 + C22545 + C22544) * C50835) *
                C50764 * C50957) *
               C1480 +
           (((C5754 + C5755 + C5756) * C294 + (C5757 + C5758 + C5759) * C51047 -
             (C7114 + C7113 + C7112) * C295 -
             (C7117 + C7116 + C7115) * C50835) *
                C50764 * C17341 +
            ((C7112 + C7113 + C7114) * C294 + (C7115 + C7116 + C7117) * C51047 -
             (C5346 * C3721 + C5343 * C3726 + C5345 * C3430 + C5342 * C3434 +
              C5344 * C878 + C5341 * C889) *
                 C295 -
             (C5346 * C3725 + C5343 * C3733 + C5345 * C3435 + C5342 * C3439 +
              C5344 * C890 + C5341 * C902) *
                 C50835) *
                C50764 * C50957) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C1480 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C50790) *
              C51095 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C50790 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C1480) *
              C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C50764 * C19940 +
            (C3620 * C118 + C3621 * C50819) * C50764 * C19941 +
            (C3622 * C118 + C3623 * C50819) * C50764 * C19942 +
            (C20627 * C118 + C20628 * C50819) * C50764 * C19943) *
               C1480 -
           (((C117 * C3608 + C50919 * C3610) * C50819 +
             (C117 * C3604 + C50919 * C3607) * C118) *
                C50764 * C19943 +
            (C3457 + C3456) * C50764 * C19942 +
            (C3455 + C3454) * C50764 * C19941 +
            (C1048 + C1047) * C50764 * C19940) *
               C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C17338 +
             (C178 + C179) * C17339 + C188 * C17340) *
                C17341 +
            ((C2626 * C118 + C2627 * C50819) * C17338 +
             (C2440 + C2441) * C17339 + C8193 * C17340) *
                C50957) *
               C1480 -
           ((C8194 * C17340 + (C2446 + C2447) * C17339 +
             (C2441 + C2440) * C17338) *
                C50957 +
            (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
                C17341) *
               C50790) *
              C51095 +
          ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
             (C519 + C520) * C17340) *
                C17341 +
            ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
             (C8496 + C8497) * C17340) *
                C50957) *
               C50790 -
           ((C8498 * C17340 + (C2785 + C2784) * C17339 +
             (C3277 * C50819 + C3276 * C118) * C17338) *
                C50957 +
            (C524 * C17340 + (C516 + C515) * C17339 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C17338) *
                C17341) *
               C1480) *
              C51084 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C17338 +
             (C1047 + C1048) * C17339 + (C1049 + C1050) * C17340) *
                C17341 +
            ((C3620 * C118 + C3621 * C50819) * C17338 +
             (C3454 + C3455) * C17339 + (C9047 + C9048) * C17340) *
                C50957) *
               C1480 -
           ((((C117 * C1161 + C50919 * C1165) * C50819 +
              (C117 * C1153 + C50919 * C1160) * C118) *
                 C17340 +
             (C9048 + C9047) * C17339 + (C3455 + C3454) * C17338) *
                C50957 +
            ((C1052 + C1051) * C17340 + (C1050 + C1049) * C17339 +
             (C1048 + C1047) * C17338) *
                C17341) *
               C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C50764 * C17341 +
            ((C21935 + C21934 + C21933) * C118 +
             (C21938 + C21937 + C21936) * C50819) *
                C50764 * C50957) *
               C1480 -
           (((C5575 + C5576 + C5577) * C50819 +
             (C5572 + C5573 + C5574) * C118) *
                C50764 * C50957 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C50764 * C17341) *
               C50790) *
              C51095 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C50764 * C17341 +
            ((C7112 + C7113 + C7114) * C118 +
             (C7115 + C7116 + C7117) * C50819) *
                C50764 * C50957) *
               C50790 -
           (((C22540 + C22539 + C22538) * C50819 +
             (C22537 + C22536 + C22535) * C118) *
                C50764 * C50957 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C50764 * C17341) *
               C1480) *
              C51084 +
          ((((C5344 * C1008 + C5341 * C1013 + C5345 * C1239 + C5342 * C1247 +
              C5346 * C6319 + C5343 * C6322) *
                 C118 +
             (C5344 * C1014 + C5341 * C1023 + C5345 * C1246 + C5342 * C1251 +
              C5346 * C6323 + C5343 * C6328) *
                 C50819) *
                C50764 * C17341 +
            ((C22857 + C22856 + C22855) * C118 +
             (C22860 + C22859 + C22858) * C50819) *
                C50764 * C50957) *
               C1480 -
           (((C5346 * C6500 + C5343 * C6502 + C5345 * C3729 + C5342 * C3735 +
              C5344 * C1157 + C5341 * C1163) *
                 C50819 +
             (C5346 * C6496 + C5343 * C6499 + C5345 * C3723 + C5342 * C3730 +
              C5344 * C1151 + C5341 * C1156) *
                 C118) *
                C50764 * C50957 +
            ((C6349 + C6348 + C6347) * C50819 +
             (C6346 + C6345 + C6344) * C118) *
                C50764 * C17341) *
               C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C17338 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C17339 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C17340) *
               C17341 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C17338 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C17339 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C17340) *
               C50957) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C17338 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C17339 +
            (C669 - (C668 + C667) + C670 - C685 - C686) * C17340) *
               C17341 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C17338 +
            (C8647 - (C8646 + C8645) + C8648 - C8649 - C8650) * C17339 +
            (C679 * C628 - (C352 * C622 + C351 * C627) + C680 * C623 -
             (C117 * C764 + C50919 * C771) * C629 -
             (C117 * C772 + C50919 * C776) * C624) *
                C17340) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C17338 +
            (C178 + C179) * C17339 + C188 * C17340) *
               C17341 +
           ((C2626 * C118 + C2627 * C50819) * C17338 +
            (C2440 + C2441) * C17339 + C8193 * C17340) *
               C50957) *
              C112 -
          ((C8194 * C17340 + (C2446 + C2447) * C17339 +
            (C2441 + C2440) * C17338) *
               C50957 +
           (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
               C17341) *
              C113 +
          ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) * C17341 +
           (C8193 * C17338 + (C2448 + C2449) * C17339 +
            (C8195 + C8196) * C17340) *
               C50957) *
              C114 -
          ((((C117 * C313 + C50919 * C319) * C50819 +
             (C117 * C301 + C50919 * C312) * C118) *
                C17340 +
            (C8196 + C8195) * C17339 + C8194 * C17338) *
               C50957 +
           ((C187 + C186) * C17340 + C190 * C17339 + C191 * C17338) * C17341) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C50764 * C19940 +
           (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
           (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
           (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
              C112 -
          ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
           (C2443 + C2442) * C50764 * C19942 +
           (C2441 + C2440) * C50764 * C19941 +
           (C179 + C178) * C50764 * C19940) *
              C113 +
          (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
           (C2445 + C2444) * C50764 * C19942 +
           (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
              C114 -
          (((C117 * C772 + C50919 * C776) * C50819 +
            (C117 * C764 + C50919 * C771) * C118) *
               C50764 * C19943 +
           (C2451 + C2450) * C50764 * C19942 + C8194 * C50764 * C19941 +
           C191 * C50764 * C19940) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 - C2627 * C623 +
            C2628 * C629 + C2629 * C624) *
               C50764 * C19940 +
           (C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
            C2980 * C629 + C2981 * C624) *
               C50764 * C19941 +
           (C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
            C3096 * C629 + C3097 * C624) *
               C50764 * C19942 +
           (C2980 * C627 + C2981 * C622 - C3096 * C628 - C3097 * C623 +
            (C117 * C3083 + C50919 * C3085) * C629 +
            (C117 * C3086 + C50919 * C3089) * C624) *
               C50764 * C19943) *
              C51040 +
          ((C653 - (C652 + C651) + C654 - C681 - C682) * C50764 * C19940 +
           (C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C50764 * C19941 +
           (C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C50764 * C19942 +
           (C2982 * C628 - (C2631 * C622 + C2630 * C627) + C2983 * C623 -
            (C117 * C3084 + C50919 * C3087) * C629 -
            (C117 * C3088 + C50919 * C3090) * C624) *
               C50764 * C19943) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C118 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C50819) *
               C50764 * C17341 +
           ((C5344 * C296 + C5341 * C302 + C5345 * C875 + C5342 * C883 +
             C5346 * C1150 + C5343 * C1154) *
                C118 +
            (C5344 * C303 + C5341 * C314 + C5345 * C884 + C5342 * C899 +
             C5346 * C1155 + C5343 * C1162) *
                C50819) *
               C50764 * C50957) *
              C112 -
          (((C5575 + C5576 + C5577) * C50819 + (C5572 + C5573 + C5574) * C118) *
               C50764 * C50957 +
           ((C5389 + C5388 + C5387) * C50819 + (C5386 + C5385 + C5384) * C118) *
               C50764 * C17341) *
              C113 +
          (((C5395 + C5394 + C5393) * C118 + (C5392 + C5391 + C5390) * C50819) *
               C50764 * C17341 +
           ((C5578 + C5579 + C5580) * C118 + (C5581 + C5582 + C5583) * C50819) *
               C50764 * C50957) *
              C114 -
          (((C5346 * C1161 + C5343 * C1165 + C5345 * C896 + C5342 * C905 +
             C5344 * C309 + C5341 * C317) *
                C50819 +
            (C5346 * C1153 + C5343 * C1160 + C5345 * C881 + C5342 * C895 +
             C5344 * C299 + C5341 * C308) *
                C118) *
               C50764 * C50957 +
           ((C5401 + C5400 + C5399) * C50819 + (C5398 + C5397 + C5396) * C118) *
               C50764 * C17341) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C627 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C622 -
            (C21933 + C21934 + C21935) * C628 -
            (C21936 + C21937 + C21938) * C623 +
            (C22243 + C22244 + C22245) * C629 +
            (C22246 + C22247 + C22248) * C624) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C627 +
            (C21938 + C21937 + C21936) * C622 -
            (C22245 + C22244 + C22243) * C628 -
            (C22248 + C22247 + C22246) * C623 +
            (C5344 * C761 + C5341 * C765 + C5345 * C3243 + C5342 * C3247 +
             C5346 * C3603 + C5343 * C3605) *
                C629 +
            (C5344 * C766 + C5341 * C773 + C5345 * C3248 + C5342 * C3255 +
             C5346 * C3606 + C5343 * C3609) *
                C624) *
               C50764 * C50957) *
              C51040 +
          (((C5574 + C5573 + C5572) * C628 -
            ((C5389 + C5388 + C5387) * C622 + (C5386 + C5385 + C5384) * C627) +
            (C5577 + C5576 + C5575) * C623 - (C5926 + C5925 + C5924) * C629 -
            (C5929 + C5928 + C5927) * C624) *
               C50764 * C17341 +
           ((C5924 + C5925 + C5926) * C628 -
            ((C5575 + C5576 + C5577) * C622 + (C5572 + C5573 + C5574) * C627) +
            (C5927 + C5928 + C5929) * C623 -
            (C5346 * C3604 + C5343 * C3607 + C5345 * C3244 + C5342 * C3249 +
             C5344 * C762 + C5341 * C767) *
                C629 -
            (C5346 * C3608 + C5343 * C3610 + C5345 * C3250 + C5342 * C3256 +
             C5344 * C768 + C5341 * C774) *
                C624) *
               C50764 * C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C17338 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C17339 +
           (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 +
            C677 * C759 + C678 * C754 - C2632 * C760 - C2633 * C755) *
               C17340) *
              C17341 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C17338 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C17339 +
           (C348 * C757 + C349 * C752 - C677 * C758 - C678 * C753 +
            C2632 * C759 + C2633 * C754 -
            (C117 * C2951 + C50919 * C2956) * C760 -
            (C117 * C2957 + C50919 * C2960) * C755) *
               C17340) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C17338 +
            (C321 + C322 - C355 - C356) * C17339 + C365 * C17340) *
               C17341 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C17338 +
            (C2606 + C2607 - C2608 - C2609) * C17339 + C8349 * C17340) *
               C50957) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C17338 +
            (C357 - (C328 + C327) + C358) * C17339 +
            (C359 - (C334 + C333) + C360) * C17340) *
               C17341 +
           ((C2608 - (C2607 + C2606) + C2609) * C17338 +
            (C2616 - (C2617 + C2618) + C2619) * C17339 +
            (C8344 - (C8345 + C8346) + C8347) * C17340) *
               C50957) *
              C292 +
          ((C365 * C17338 + C366 * C17339 +
            (C342 + C341 - C361 - C362) * C17340) *
               C17341 +
           (C8349 * C17338 + (C8346 + C8345 - C8344 - C8347) * C17339 +
            (C353 * C294 + C354 * C51047 -
             (C117 * C634 + C50919 * C643) * C295 -
             (C117 * C644 + C50919 * C649) * C50835) *
                C17340) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C294 + C2981 * C51047 - C3096 * C295 - C3097 * C50835) *
               C50764 * C19943) *
              C291 +
          ((C355 - (C322 + C321) + C356) * C50764 * C19940 +
           (C2608 - (C2607 + C2606) + C2609) * C50764 * C19941 +
           (C2634 - (C2611 + C2610) + C2635) * C50764 * C19942 +
           (C2982 * C295 - (C2631 * C51047 + C2630 * C294) + C2983 * C50835) *
               C50764 * C19943) *
              C292 +
          (C365 * C50764 * C19940 + C8349 * C50764 * C19941 +
           (C2623 + C2622 - C2636 - C2637) * C50764 * C19942 +
           (C2632 * C294 + C2633 * C51047 -
            (C117 * C2951 + C50919 * C2956) * C295 -
            (C117 * C2957 + C50919 * C2960) * C50835) *
               C50764 * C19943) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50919 * C126) * C757 +
           (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
           C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
              C50764 * C19940 +
          (C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
           C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
              C50764 * C19941 +
          (C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
           C3096 * C759 + C3097 * C754 - C20313 * C760 - C20314 * C755) *
              C50764 * C19942 +
          (C2980 * C757 + C2981 * C752 - C3096 * C758 - C3097 * C753 +
           C20313 * C759 + C20314 * C754 -
           (C117 * C20304 + C50919 * C20305) * C760 -
           (C117 * C20306 + C50919 * C20307) * C755) *
              C50764 * C19943) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C294 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C51047 -
            (C21933 + C21934 + C21935) * C295 -
            (C21936 + C21937 + C21938) * C50835) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C294 +
            (C21938 + C21937 + C21936) * C51047 -
            (C5346 * C3429 + C5343 * C3432 + C5345 * C876 + C5342 * C885 +
             C5344 * C630 + C5341 * C635) *
                C295 -
            (C5346 * C3433 + C5343 * C3438 + C5345 * C886 + C5342 * C900 +
             C5344 * C636 + C5341 * C645) *
                C50835) *
               C50764 * C50957) *
              C291 +
          (((C5574 + C5573 + C5572) * C295 -
            ((C5389 + C5388 + C5387) * C51047 +
             (C5386 + C5385 + C5384) * C294) +
            (C5577 + C5576 + C5575) * C50835) *
               C50764 * C17341 +
           ((C5924 + C5925 + C5926) * C295 -
            ((C5575 + C5576 + C5577) * C51047 +
             (C5572 + C5573 + C5574) * C294) +
            (C5927 + C5928 + C5929) * C50835) *
               C50764 * C50957) *
              C292 +
          (((C5395 + C5394 + C5393) * C294 + (C5392 + C5391 + C5390) * C51047 -
            (C5580 + C5579 + C5578) * C295 - (C5583 + C5582 + C5581) * C50835) *
               C50764 * C17341 +
           ((C5578 + C5579 + C5580) * C294 + (C5581 + C5582 + C5583) * C51047 -
            (C5346 * C3431 + C5343 * C3437 + C5345 * C880 + C5342 * C893 +
             C5344 * C632 + C5341 * C639) *
                C295 -
            (C5346 * C3436 + C5343 * C3440 + C5345 * C894 + C5342 * C904 +
             C5344 * C640 + C5341 * C647) *
                C50835) *
               C50764 * C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
            C5346 * C1008 + C5343 * C1013) *
               C757 +
           (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
            C5346 * C1014 + C5343 * C1023) *
               C752 -
           (C21933 + C21934 + C21935) * C758 -
           (C21936 + C21937 + C21938) * C753 +
           (C22243 + C22244 + C22245) * C759 +
           (C22246 + C22247 + C22248) * C754 -
           (C22359 + C22360 + C22361) * C760 -
           (C22362 + C22363 + C22364) * C755) *
              C50764 * C17341 +
          ((C21935 + C21934 + C21933) * C757 +
           (C21938 + C21937 + C21936) * C752 -
           (C22245 + C22244 + C22243) * C758 -
           (C22248 + C22247 + C22246) * C753 +
           (C22361 + C22360 + C22359) * C759 +
           (C22364 + C22363 + C22362) * C754 -
           (C5346 * C20618 + C5343 * C20619 + C5345 * C3245 + C5342 * C3251 +
            C5344 * C2949 + C5341 * C2952) *
               C760 -
           (C5346 * C20620 + C5343 * C20621 + C5345 * C3252 + C5342 * C3257 +
            C5344 * C2953 + C5341 * C2958) *
               C755) *
              C50764 * C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C17338 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C17339 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C17340) *
               C17341 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C17338 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C17339 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C17340) *
               C50957) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C17338 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C17339 +
            (C1658 * C628 - (C510 * C622 + C509 * C627) + C1659 * C623 -
             C2798 * C629 - C2799 * C624) *
                C17340) *
               C17341 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C17338 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C17339 +
            (C2798 * C628 - (C1659 * C622 + C1658 * C627) + C2799 * C623 -
             (C117 * C4251 + C50919 * C4252) * C629 -
             (C117 * C4253 + C50919 * C4254) * C624) *
                C17340) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C17338 +
             (C178 + C179) * C17339 + C188 * C17340) *
                C17341 +
            ((C2626 * C118 + C2627 * C50819) * C17338 +
             (C2440 + C2441) * C17339 + C8193 * C17340) *
                C50957) *
               C291 -
           ((C8194 * C17340 + (C2446 + C2447) * C17339 +
             (C2441 + C2440) * C17338) *
                C50957 +
            (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
                C17341) *
               C292 +
           ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) * C17341 +
            (C8193 * C17338 + (C2448 + C2449) * C17339 +
             (C8195 + C8196) * C17340) *
                C50957) *
               C293) *
              C51049 +
          ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
             (C519 + C520) * C17340) *
                C17341 +
            ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
             (C8496 + C8497) * C17340) *
                C50957) *
               C292 -
           ((C8498 * C17340 + (C2785 + C2784) * C17339 +
             (C3277 * C50819 + C3276 * C118) * C17338) *
                C50957 +
            (C524 * C17340 + (C516 + C515) * C17339 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C17338) *
                C17341) *
               C291 -
           ((((C117 * C1635 + C50919 * C1636) * C50819 +
              (C117 * C1633 + C50919 * C1634) * C118) *
                 C17340 +
             (C8497 + C8496) * C17339 + C8498 * C17338) *
                C50957 +
            ((C522 + C521) * C17340 + C523 * C17339 + C524 * C17338) * C17341) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C291 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C292 +
           (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
            (C2445 + C2444) * C50764 * C19942 +
            (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
               C293) *
              C51049 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C292 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C291 -
           (((C117 * C4253 + C50919 * C4254) * C50819 +
             (C117 * C4251 + C50919 * C4252) * C118) *
                C50764 * C19943 +
            (C2803 + C2802) * C50764 * C19942 + C8498 * C50764 * C19941 +
            C524 * C50764 * C19940) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 - C2627 * C623 +
            C2628 * C629 + C2629 * C624) *
               C50764 * C19940 +
           (C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
            C2980 * C629 + C2981 * C624) *
               C50764 * C19941 +
           (C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
            C3096 * C629 + C3097 * C624) *
               C50764 * C19942 +
           (C2980 * C627 + C2981 * C622 - C3096 * C628 - C3097 * C623 +
            C20313 * C629 + C20314 * C624) *
               C50764 * C19943) *
              C50785 * C51049 +
          ((C3276 * C628 -
            ((C117 * C480 + C50919 * C488) * C622 +
             (C117 * C470 + C50919 * C481) * C627) +
            C3277 * C623 - C3278 * C629 - C3279 * C624) *
               C50764 * C19940 +
           (C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
            C3280 * C629 - C3281 * C624) *
               C50764 * C19941 +
           (C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
            C20421 * C629 - C20422 * C624) *
               C50764 * C19942 +
           (C20421 * C628 - (C3281 * C622 + C3280 * C627) + C20422 * C623 -
            (C117 * C20412 + C50919 * C20413) * C629 -
            (C117 * C20414 + C50919 * C20415) * C624) *
               C50764 * C19943) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
              C5346 * C1008 + C5343 * C1013) *
                 C118 +
             (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
              C5346 * C1014 + C5343 * C1023) *
                 C50819) *
                C50764 * C17341 +
            ((C21935 + C21934 + C21933) * C118 +
             (C21938 + C21937 + C21936) * C50819) *
                C50764 * C50957) *
               C291 -
           (((C5575 + C5576 + C5577) * C50819 +
             (C5572 + C5573 + C5574) * C118) *
                C50764 * C50957 +
            ((C5389 + C5388 + C5387) * C50819 +
             (C5386 + C5385 + C5384) * C118) *
                C50764 * C17341) *
               C292 +
           (((C5395 + C5394 + C5393) * C118 +
             (C5392 + C5391 + C5390) * C50819) *
                C50764 * C17341 +
            ((C5578 + C5579 + C5580) * C118 +
             (C5581 + C5582 + C5583) * C50819) *
                C50764 * C50957) *
               C293) *
              C51049 +
          ((((C5754 + C5755 + C5756) * C118 +
             (C5757 + C5758 + C5759) * C50819) *
                C50764 * C17341 +
            ((C7112 + C7113 + C7114) * C118 +
             (C7115 + C7116 + C7117) * C50819) *
                C50764 * C50957) *
               C292 -
           (((C5346 * C3731 + C5343 * C3736 + C5345 * C1155 + C5342 * C1162 +
              C5344 * C884 + C5341 * C899) *
                 C50819 +
             (C5346 * C3724 + C5343 * C3732 + C5345 * C1150 + C5342 * C1154 +
              C5344 * C875 + C5341 * C883) *
                 C118) *
                C50764 * C50957 +
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C50819 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C118) *
                C50764 * C17341) *
               C291 -
           (((C5346 * C7097 + C5343 * C7098 + C5345 * C1159 + C5342 * C1164 +
              C5344 * C892 + C5341 * C903) *
                 C50819 +
             (C5346 * C7095 + C5343 * C7096 + C5345 * C1152 + C5342 * C1158 +
              C5344 * C879 + C5341 * C891) *
                 C118) *
                C50764 * C50957 +
            ((C5765 + C5764 + C5763) * C50819 +
             (C5762 + C5761 + C5760) * C118) *
                C50764 * C17341) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5344 * C119 + C5341 * C126 + C5345 * C470 + C5342 * C481 +
             C5346 * C1008 + C5343 * C1013) *
                C627 +
            (C5344 * C127 + C5341 * C140 + C5345 * C480 + C5342 * C488 +
             C5346 * C1014 + C5343 * C1023) *
                C622 -
            (C21933 + C21934 + C21935) * C628 -
            (C21936 + C21937 + C21938) * C623 +
            (C22243 + C22244 + C22245) * C629 +
            (C22246 + C22247 + C22248) * C624) *
               C50764 * C17341 +
           ((C21935 + C21934 + C21933) * C627 +
            (C21938 + C21937 + C21936) * C622 -
            (C22245 + C22244 + C22243) * C628 -
            (C22248 + C22247 + C22246) * C623 +
            (C22361 + C22360 + C22359) * C629 +
            (C22364 + C22363 + C22362) * C624) *
               C50764 * C50957) *
              C50785 * C51049 +
          (((C22535 + C22536 + C22537) * C628 -
            ((C5346 * C1246 + C5343 * C1251 + C5345 * C1014 + C5342 * C1023 +
              C5344 * C480 + C5341 * C488) *
                 C622 +
             (C5346 * C1239 + C5343 * C1247 + C5345 * C1008 + C5342 * C1013 +
              C5344 * C470 + C5341 * C481) *
                 C627) +
            (C22538 + C22539 + C22540) * C623 -
            (C22541 + C22542 + C22543) * C629 -
            (C22544 + C22545 + C22546) * C624) *
               C50764 * C17341 +
           ((C22543 + C22542 + C22541) * C628 -
            ((C22540 + C22539 + C22538) * C622 +
             (C22537 + C22536 + C22535) * C627) +
            (C22546 + C22545 + C22544) * C623 -
            (C5346 * C20694 + C5343 * C20696 + C5345 * C3603 + C5342 * C3605 +
             C5344 * C3243 + C5341 * C3247) *
                C629 -
            (C5346 * C20695 + C5343 * C20697 + C5345 * C3606 + C5342 * C3609 +
             C5344 * C3248 + C5341 * C3255) *
                C624) *
               C50764 * C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1355 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C1350 -
             (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                C51035 +
            ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
             C13959 * C1356 - C13960 * C50835) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
             (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                C51035 +
            (C13961 * C1355 + C13962 * C1350 - C14367 * C1356 -
             C14368 * C50835) *
                C50769) *
               C50957) *
              C51093 +
          (((C13961 * C1356 -
             ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
             C13962 * C50835) *
                C51035 +
            (C13963 * C1356 -
             ((C10913 + C10912) * C1350 + (C10911 + C10910) * C1355) +
             C13964 * C50835) *
                C50769) *
               C17341 +
           ((C14365 * C1356 - (C13960 * C1350 + C13959 * C1355) +
             C14366 * C50835) *
                C51035 +
            ((C11476 + C11477) * C1356 - (C11118 * C1350 + C11117 * C1355) +
             (C11478 + C11479) * C50835) *
                C50769) *
               C50957) *
              C51078 +
          ((C12290 * C51035 +
            ((C10917 + C10916) * C1355 + (C10915 + C10914) * C1350 -
             (C11114 + C11113) * C1356 - (C11116 + C11115) * C50835) *
                C50769) *
               C17341 +
           ((C13963 * C1355 + C13964 * C1350 - (C11477 + C11476) * C1356 -
             (C11479 + C11478) * C50835) *
                C51035 +
            ((C11113 + C11114) * C1355 + (C11115 + C11116) * C1350 -
             (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                 C1356 -
             (C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                 C50835) *
                C50769) *
               C50957) *
              C1354) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1482 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51094 -
             (C13965 + C13966) * C1483 - (C13967 + C13968) * C51081 +
             (C14377 + C14378) * C1484 + (C14379 + C14380) * C1479) *
                C51035 +
            ((C10906 + C10907) * C1482 + (C10908 + C10909) * C51094 -
             C13959 * C1483 - C13960 * C51081 + C14365 * C1484 +
             C14366 * C1479) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C1482 + (C13968 + C13967) * C51094 -
             (C14378 + C14377) * C1483 - (C14380 + C14379) * C51081 +
             (C14524 + C14523) * C1484 + (C14526 + C14525) * C1479) *
                C51035 +
            (C13961 * C1482 + C13962 * C51094 - C14367 * C1483 -
             C14368 * C51081 + (C14381 + C14382) * C1484 +
             (C14383 + C14384) * C1479) *
                C50769) *
               C50957) *
              C1480 +
          (((C13961 * C1483 -
             ((C10909 + C10908) * C51094 + (C10907 + C10906) * C1482) +
             C13962 * C51081 - C14367 * C1484 - C14368 * C1479) *
                C51035 +
            (C13963 * C1483 -
             ((C10913 + C10912) * C51094 + (C10911 + C10910) * C1482) +
             C13964 * C51081 - (C11477 + C11476) * C1484 -
             (C11479 + C11478) * C1479) *
                C50769) *
               C17341 +
           ((C14365 * C1483 - (C13960 * C51094 + C13959 * C1482) +
             C14366 * C51081 - (C14382 + C14381) * C1484 -
             (C14384 + C14383) * C1479) *
                C51035 +
            ((C11476 + C11477) * C1483 - (C11118 * C51094 + C11117 * C1482) +
             (C11478 + C11479) * C51081 -
             (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
                 C1484 -
             (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
                 C1479) *
                C50769) *
               C50957) *
              C50790) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C1355 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C1350 -
              (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                 C51035 +
             ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
              C13959 * C1356 - C13960 * C50835) *
                 C50769) *
                C17341 +
            (((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
              (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                 C51035 +
             (C13961 * C1355 + C13962 * C1350 - C14367 * C1356 -
              C14368 * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           (((C13961 * C1356 -
              ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
              C13962 * C50835) *
                 C51035 +
             (C13963 * C1356 -
              ((C10913 + C10912) * C1350 + (C10911 + C10910) * C1355) +
              C13964 * C50835) *
                 C50769) *
                C17341 +
            ((C14365 * C1356 - (C13960 * C1350 + C13959 * C1355) +
              C14366 * C50835) *
                 C51035 +
             ((C11476 + C11477) * C1356 - (C11118 * C1350 + C11117 * C1355) +
              (C11478 + C11479) * C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C51049 +
          (((((C14745 + C14746) * C1356 -
              ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
                C51064 * C488) *
                   C1350 +
               (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
                C51064 * C481) *
                   C1355) +
              (C14747 + C14748) * C50835) *
                 C51035 +
             (C15945 * C1356 -
              ((C11296 + C11295) * C1350 + (C11294 + C11293) * C1355) +
              C15946 * C50835) *
                 C50769) *
                C17341 +
            (((C14750 + C14749) * C1356 -
              ((C14748 + C14747) * C1350 + (C14746 + C14745) * C1355) +
              (C14752 + C14751) * C50835) *
                 C51035 +
             ((C14754 + C14753) * C1356 - (C15947 * C1350 + C15948 * C1355) +
              (C14756 + C14755) * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           ((((C11293 + C11294) * C1355 + (C11295 + C11296) * C1350 -
              C15948 * C1356 - C15947 * C50835) *
                 C51035 +
             ((C11297 + C11298) * C1355 + (C11299 + C11300) * C1350 -
              (C12652 + C12651) * C1356 - (C12654 + C12653) * C50835) *
                 C50769) *
                C17341 +
            ((C15945 * C1355 + C15946 * C1350 - (C14753 + C14754) * C1356 -
              (C14755 + C14756) * C50835) *
                 C51035 +
             ((C12651 + C12652) * C1355 + (C12653 + C12654) * C1350 -
              (C10872 * C3431 + C50983 * C3437 + C10871 * C880 +
               C51064 * C893) *
                  C1356 -
              (C10872 * C3436 + C50983 * C3440 + C10871 * C894 +
               C51064 * C904) *
                  C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C1355 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C1350 -
              (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                 C51035 +
             ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
              C13959 * C1356 - C13960 * C50835) *
                 C50769) *
                C17341 +
            (((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
              (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                 C51035 +
             (C13961 * C1355 + C13962 * C1350 - C14367 * C1356 -
              C14368 * C50835) *
                 C50769) *
                C50957) *
               C51040 +
           (((C13961 * C1356 -
              ((C10909 + C10908) * C1350 + (C10907 + C10906) * C1355) +
              C13962 * C50835) *
                 C51035 +
             (C13963 * C1356 -
              ((C10913 + C10912) * C1350 + (C10911 + C10910) * C1355) +
              C13964 * C50835) *
                 C50769) *
                C17341 +
            ((C14365 * C1356 - (C13960 * C1350 + C13959 * C1355) +
              C14366 * C50835) *
                 C51035 +
             ((C11476 + C11477) * C1356 - (C11118 * C1350 + C11117 * C1355) +
              (C11478 + C11479) * C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C1765 +
          (((((C14745 + C14746) * C1356 -
              ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
                C51064 * C488) *
                   C1350 +
               (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
                C51064 * C481) *
                   C1355) +
              (C14747 + C14748) * C50835) *
                 C51035 +
             (C15945 * C1356 -
              ((C11296 + C11295) * C1350 + (C11294 + C11293) * C1355) +
              C15946 * C50835) *
                 C50769) *
                C17341 +
            (((C14750 + C14749) * C1356 -
              ((C14748 + C14747) * C1350 + (C14746 + C14745) * C1355) +
              (C14752 + C14751) * C50835) *
                 C51035 +
             ((C14754 + C14753) * C1356 - (C15947 * C1350 + C15948 * C1355) +
              (C14756 + C14755) * C50835) *
                 C50769) *
                C50957) *
               C51040 +
           ((((C11293 + C11294) * C1355 + (C11295 + C11296) * C1350 -
              C15948 * C1356 - C15947 * C50835) *
                 C51035 +
             ((C11297 + C11298) * C1355 + (C11299 + C11300) * C1350 -
              (C12652 + C12651) * C1356 - (C12654 + C12653) * C50835) *
                 C50769) *
                C17341 +
            ((C15945 * C1355 + C15946 * C1350 - (C14753 + C14754) * C1356 -
              (C14755 + C14756) * C50835) *
                 C51035 +
             ((C12651 + C12652) * C1355 + (C12653 + C12654) * C1350 -
              (C10872 * C3431 + C50983 * C3437 + C10871 * C880 +
               C51064 * C893) *
                  C1356 -
              (C10872 * C3436 + C50983 * C3440 + C10871 * C894 +
               C51064 * C904) *
                  C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1482 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51094 -
             (C13965 + C13966) * C1483 - (C13967 + C13968) * C51081 +
             (C14377 + C14378) * C1484 + (C14379 + C14380) * C1479) *
                C51035 +
            ((C10906 + C10907) * C1482 + (C10908 + C10909) * C51094 -
             C13959 * C1483 - C13960 * C51081 + C14365 * C1484 +
             C14366 * C1479) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C1482 + (C13968 + C13967) * C51094 -
             (C14378 + C14377) * C1483 - (C14380 + C14379) * C51081 +
             (C14524 + C14523) * C1484 + (C14526 + C14525) * C1479) *
                C51035 +
            (C13961 * C1482 + C13962 * C51094 - C14367 * C1483 -
             C14368 * C51081 + (C14381 + C14382) * C1484 +
             (C14383 + C14384) * C1479) *
                C50769) *
               C50957) *
              C50785 * C1765 +
          ((((C14745 + C14746) * C1483 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C51094 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C1482) +
             (C14747 + C14748) * C51081 - (C14749 + C14750) * C1484 -
             (C14751 + C14752) * C1479) *
                C51035 +
            (C15945 * C1483 -
             ((C11296 + C11295) * C51094 + (C11294 + C11293) * C1482) +
             C15946 * C51081 - (C14753 + C14754) * C1484 -
             (C14755 + C14756) * C1479) *
                C50769) *
               C17341 +
           (((C14750 + C14749) * C1483 -
             ((C14748 + C14747) * C51094 + (C14746 + C14745) * C1482) +
             (C14752 + C14751) * C51081 -
             (C10872 * C3603 + C50983 * C3605 + C10871 * C3243 +
              C51064 * C3247) *
                 C1484 -
             (C10872 * C3606 + C50983 * C3609 + C10871 * C3248 +
              C51064 * C3255) *
                 C1479) *
                C51035 +
            ((C14754 + C14753) * C1483 - (C15947 * C51094 + C15948 * C1482) +
             (C14756 + C14755) * C51081 -
             (C10872 * C3604 + C50983 * C3607 + C10871 * C3244 +
              C51064 * C3249) *
                 C1484 -
             (C10872 * C3608 + C50983 * C3610 + C10871 * C3250 +
              C51064 * C3256) *
                 C1479) *
                C50769) *
               C50957) *
              C50785 * C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C1355 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C1350 -
             (C13965 + C13966) * C1356 - (C13967 + C13968) * C50835) *
                C51035 +
            ((C10906 + C10907) * C1355 + (C10908 + C10909) * C1350 -
             C13959 * C1356 - C13960 * C50835) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C1355 + (C13968 + C13967) * C1350 -
             (C14378 + C14377) * C1356 - (C14380 + C14379) * C50835) *
                C51035 +
            (C13961 * C1355 + C13962 * C1350 - C14367 * C1356 -
             C14368 * C50835) *
                C50769) *
               C50957) *
              C50785 * C51095 +
          ((((C14745 + C14746) * C1356 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C1350 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C1355) +
             (C14747 + C14748) * C50835) *
                C51035 +
            (C15945 * C1356 -
             ((C11296 + C11295) * C1350 + (C11294 + C11293) * C1355) +
             C15946 * C50835) *
                C50769) *
               C17341 +
           (((C14750 + C14749) * C1356 -
             ((C14748 + C14747) * C1350 + (C14746 + C14745) * C1355) +
             (C14752 + C14751) * C50835) *
                C51035 +
            ((C14754 + C14753) * C1356 - (C15947 * C1350 + C15948 * C1355) +
             (C14756 + C14755) * C50835) *
                C50769) *
               C50957) *
              C50785 * C51084 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C1355 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C1350 -
             (C15165 + C15166) * C1356 - (C15167 + C15168) * C50835) *
                C51035 +
            ((C11886 + C11887) * C1355 + (C11888 + C11889) * C1350 -
             (C14960 + C14959) * C1356 - (C14962 + C14961) * C50835) *
                C50769) *
               C17341 +
           (((C15166 + C15165) * C1355 + (C15168 + C15167) * C1350 -
             (C10872 * C3722 + C50983 * C3728 + C10871 * C3429 +
              C51064 * C3432) *
                 C1356 -
             (C10872 * C3727 + C50983 * C3734 + C10871 * C3433 +
              C51064 * C3438) *
                 C50835) *
                C51035 +
            ((C14959 + C14960) * C1355 + (C14961 + C14962) * C1350 -
             (C10872 * C3721 + C50983 * C3726 + C10871 * C3430 +
              C51064 * C3434) *
                 C1356 -
             (C10872 * C3725 + C50983 * C3733 + C10871 * C3435 +
              C51064 * C3439) *
                 C50835) *
                C50769) *
               C50957) *
              C50785 * C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C627 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C622 -
             (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
             (C14377 + C14378) * C629 + (C14379 + C14380) * C624) *
                C51035 +
            ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
             C13959 * C628 - C13960 * C623 + C14365 * C629 + C14366 * C624) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
             (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
             (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
                C51035 +
            (C13961 * C627 + C13962 * C622 - C14367 * C628 - C14368 * C623 +
             (C14381 + C14382) * C629 + (C14383 + C14384) * C624) *
                C50769) *
               C50957) *
              C51040 +
          (((C13961 * C628 -
             ((C10909 + C10908) * C622 + (C10907 + C10906) * C627) +
             C13962 * C623 - C14367 * C629 - C14368 * C624) *
                C51035 +
            (C13963 * C628 -
             ((C10913 + C10912) * C622 + (C10911 + C10910) * C627) +
             C13964 * C623 - (C11477 + C11476) * C629 -
             (C11479 + C11478) * C624) *
                C50769) *
               C17341 +
           ((C14365 * C628 - (C13960 * C622 + C13959 * C627) + C14366 * C623 -
             (C14382 + C14381) * C629 - (C14384 + C14383) * C624) *
                C51035 +
            ((C11476 + C11477) * C628 - (C11118 * C622 + C11117 * C627) +
             (C11478 + C11479) * C623 -
             (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
                 C629 -
             (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
                 C624) *
                C50769) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C51035 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
               C17341 +
           (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C51035 +
            (C13961 * C118 + C13962 * C50819) * C50769) *
               C50957) *
              C112 -
          (((C11118 * C50819 + C11117 * C118) * C50769 +
            (C13960 * C50819 + C13959 * C118) * C51035) *
               C50957 +
           (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51035) *
               C17341) *
              C113 +
          ((C10930 * C51035 +
            ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
               C17341 +
           ((C13963 * C118 + C13964 * C50819) * C51035 +
            ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
               C50957) *
              C114 -
          ((((C10872 * C1635 + C50983 * C1636 + C10871 * C311 + C51064 * C318) *
                 C50819 +
             (C10872 * C1633 + C50983 * C1634 + C10871 * C300 + C51064 * C310) *
                 C118) *
                C50769 +
            ((C11116 + C11115) * C50819 + (C11114 + C11113) * C118) * C51035) *
               C50957 +
           (((C10921 + C10920) * C50819 + (C10919 + C10918) * C118) * C50769 +
            C10931 * C51035) *
               C17341) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C17341 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C51035 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C51040 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C51035) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51035) *
                C17341) *
               C50790) *
              C1005 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51035 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C17341 +
            ((C15945 * C118 + C15946 * C50819) * C51035 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C50790 -
           (((C15947 * C50819 + C15948 * C118) * C50769 +
             ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C51035) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C51035) *
                C17341) *
               C51040) *
              C1006 +
          (((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
               C50983 * C1247) *
                  C118 +
              (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
               C50983 * C1251) *
                  C50819) *
                 C51035 +
             ((C11886 + C11887) * C118 + (C11888 + C11889) * C50819) * C50769) *
                C17341 +
            (((C15166 + C15165) * C118 + (C15168 + C15167) * C50819) * C51035 +
             ((C14959 + C14960) * C118 + (C14961 + C14962) * C50819) * C50769) *
                C50957) *
               C51040 -
           ((((C10872 * C7097 + C50983 * C7098 + C10871 * C1159 +
               C51064 * C1164) *
                  C50819 +
              (C10872 * C7095 + C50983 * C7096 + C10871 * C1152 +
               C51064 * C1158) *
                  C118) *
                 C50769 +
             ((C14962 + C14961) * C50819 + (C14960 + C14959) * C118) * C51035) *
                C50957 +
            (((C11893 + C11892) * C50819 + (C11891 + C11890) * C118) * C50769 +
             ((C11889 + C11888) * C50819 + (C11887 + C11886) * C118) * C51035) *
                C17341) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C757 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C752 -
            (C13965 + C13966) * C758 - (C13967 + C13968) * C753 +
            (C14377 + C14378) * C759 + (C14379 + C14380) * C754 -
            (C14523 + C14524) * C760 - (C14525 + C14526) * C755) *
               C51035 +
           ((C10906 + C10907) * C757 + (C10908 + C10909) * C752 -
            C13959 * C758 - C13960 * C753 + C14365 * C759 + C14366 * C754 -
            (C14382 + C14381) * C760 - (C14384 + C14383) * C755) *
               C50769) *
              C17341 +
          (((C13966 + C13965) * C757 + (C13968 + C13967) * C752 -
            (C14378 + C14377) * C758 - (C14380 + C14379) * C753 +
            (C14524 + C14523) * C759 + (C14526 + C14525) * C754 -
            (C10872 * C3245 + C50983 * C3251 + C10871 * C2949 +
             C51064 * C2952) *
                C760 -
            (C10872 * C3252 + C50983 * C3257 + C10871 * C2953 +
             C51064 * C2958) *
                C755) *
               C51035 +
           (C13961 * C757 + C13962 * C752 - C14367 * C758 - C14368 * C753 +
            (C14381 + C14382) * C759 + (C14383 + C14384) * C754 -
            (C10872 * C3246 + C50983 * C3253 + C10871 * C2950 +
             C51064 * C2954) *
                C760 -
            (C10872 * C3254 + C50983 * C3258 + C10871 * C2955 +
             C51064 * C2959) *
                C755) *
               C50769) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C294 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51047 -
             (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
                C51035 +
            ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
             C13959 * C295 - C13960 * C50835) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
             (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
                C51035 +
            (C13961 * C294 + C13962 * C51047 - C14367 * C295 -
             C14368 * C50835) *
                C50769) *
               C50957) *
              C291 +
          (((C13961 * C295 -
             ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
             C13962 * C50835) *
                C51035 +
            (C13963 * C295 -
             ((C10913 + C10912) * C51047 + (C10911 + C10910) * C294) +
             C13964 * C50835) *
                C50769) *
               C17341 +
           ((C14365 * C295 - (C13960 * C51047 + C13959 * C294) +
             C14366 * C50835) *
                C51035 +
            ((C11476 + C11477) * C295 - (C11118 * C51047 + C11117 * C294) +
             (C11478 + C11479) * C50835) *
                C50769) *
               C50957) *
              C292 +
          ((C11122 * C51035 +
            ((C10917 + C10916) * C294 + (C10915 + C10914) * C51047 -
             (C11114 + C11113) * C295 - (C11116 + C11115) * C50835) *
                C50769) *
               C17341 +
           ((C13963 * C294 + C13964 * C51047 - (C11477 + C11476) * C295 -
             (C11479 + C11478) * C50835) *
                C51035 +
            ((C11113 + C11114) * C294 + (C11115 + C11116) * C51047 -
             (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                 C295 -
             (C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                 C50835) *
                C50769) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C294 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51047 -
             (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
                C51035 +
            ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
             C13959 * C295 - C13960 * C50835) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
             (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
                C51035 +
            (C13961 * C294 + C13962 * C51047 - C14367 * C295 -
             C14368 * C50835) *
                C50769) *
               C50957) *
              C50785 * C1005 +
          ((((C14745 + C14746) * C295 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C51047 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C294) +
             (C14747 + C14748) * C50835) *
                C51035 +
            (C15945 * C295 -
             ((C11296 + C11295) * C51047 + (C11294 + C11293) * C294) +
             C15946 * C50835) *
                C50769) *
               C17341 +
           (((C14750 + C14749) * C295 -
             ((C14748 + C14747) * C51047 + (C14746 + C14745) * C294) +
             (C14752 + C14751) * C50835) *
                C51035 +
            ((C14754 + C14753) * C295 - (C15947 * C51047 + C15948 * C294) +
             (C14756 + C14755) * C50835) *
                C50769) *
               C50957) *
              C50785 * C1006 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C294 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C51047 -
             (C15165 + C15166) * C295 - (C15167 + C15168) * C50835) *
                C51035 +
            ((C11886 + C11887) * C294 + (C11888 + C11889) * C51047 -
             (C14960 + C14959) * C295 - (C14962 + C14961) * C50835) *
                C50769) *
               C17341 +
           (((C15166 + C15165) * C294 + (C15168 + C15167) * C51047 -
             (C10872 * C3722 + C50983 * C3728 + C10871 * C3429 +
              C51064 * C3432) *
                 C295 -
             (C10872 * C3727 + C50983 * C3734 + C10871 * C3433 +
              C51064 * C3438) *
                 C50835) *
                C51035 +
            ((C14959 + C14960) * C294 + (C14961 + C14962) * C51047 -
             (C10872 * C3721 + C50983 * C3726 + C10871 * C3430 +
              C51064 * C3434) *
                 C295 -
             (C10872 * C3725 + C50983 * C3733 + C10871 * C3435 +
              C51064 * C3439) *
                 C50835) *
                C50769) *
               C50957) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C627 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C622 -
             (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
             (C14377 + C14378) * C629 + (C14379 + C14380) * C624) *
                C51035 +
            ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
             C13959 * C628 - C13960 * C623 + C14365 * C629 + C14366 * C624) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
             (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
             (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
                C51035 +
            (C13961 * C627 + C13962 * C622 - C14367 * C628 - C14368 * C623 +
             (C14381 + C14382) * C629 + (C14383 + C14384) * C624) *
                C50769) *
               C50957) *
              C50785 * C51049 +
          ((((C14745 + C14746) * C628 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C622 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C627) +
             (C14747 + C14748) * C623 - (C14749 + C14750) * C629 -
             (C14751 + C14752) * C624) *
                C51035 +
            (C15945 * C628 -
             ((C11296 + C11295) * C622 + (C11294 + C11293) * C627) +
             C15946 * C623 - (C14753 + C14754) * C629 -
             (C14755 + C14756) * C624) *
                C50769) *
               C17341 +
           (((C14750 + C14749) * C628 -
             ((C14748 + C14747) * C622 + (C14746 + C14745) * C627) +
             (C14752 + C14751) * C623 -
             (C10872 * C3603 + C50983 * C3605 + C10871 * C3243 +
              C51064 * C3247) *
                 C629 -
             (C10872 * C3606 + C50983 * C3609 + C10871 * C3248 +
              C51064 * C3255) *
                 C624) *
                C51035 +
            ((C14754 + C14753) * C628 - (C15947 * C622 + C15948 * C627) +
             (C14756 + C14755) * C623 -
             (C10872 * C3604 + C50983 * C3607 + C10871 * C3244 +
              C51064 * C3249) *
                 C629 -
             (C10872 * C3608 + C50983 * C3610 + C10871 * C3250 +
              C51064 * C3256) *
                 C624) *
                C50769) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C17341 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C51035 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C291 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C51035) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51035) *
                C17341) *
               C292 +
           ((C10930 * C51035 +
             ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
                C17341 +
            ((C13963 * C118 + C13964 * C50819) * C51035 +
             ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
                C50957) *
               C293) *
              C51049 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51035 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C17341 +
            ((C15945 * C118 + C15946 * C50819) * C51035 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C292 -
           (((C15947 * C50819 + C15948 * C118) * C50769 +
             ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C51035) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C51035) *
                C17341) *
               C291 -
           ((((C10872 * C1161 + C50983 * C1165 + C10871 * C896 +
               C51064 * C905) *
                  C50819 +
              (C10872 * C1153 + C50983 * C1160 + C10871 * C881 +
               C51064 * C895) *
                  C118) *
                 C50769 +
             ((C12654 + C12653) * C50819 + (C12652 + C12651) * C118) * C51035) *
                C50957 +
            (((C11304 + C11303) * C50819 + (C11302 + C11301) * C118) * C50769 +
             C11309 * C51035) *
                C17341) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C51035 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
               C17341 +
           (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C51035 +
            (C13961 * C118 + C13962 * C50819) * C50769) *
               C50957) *
              C50785 * C1232 -
          (((C15947 * C50819 + C15948 * C118) * C50769 +
            ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C51035) *
               C50957 +
           (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
            ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 + C51064 * C488) *
                 C50819 +
             (C10872 * C1008 + C50983 * C1013 + C10871 * C470 + C51064 * C481) *
                 C118) *
                C51035) *
               C17341) *
              C50785 * C1233 +
          ((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C51035 +
            ((C11886 + C11887) * C118 + (C11888 + C11889) * C50819) * C50769) *
               C17341 +
           (((C15166 + C15165) * C118 + (C15168 + C15167) * C50819) * C51035 +
            ((C14959 + C14960) * C118 + (C14961 + C14962) * C50819) * C50769) *
               C50957) *
              C50785 * C1234 -
          ((((C10872 * C6500 + C50983 * C6502 + C10871 * C3729 +
              C51064 * C3735) *
                 C50819 +
             (C10872 * C6496 + C50983 * C6499 + C10871 * C3723 +
              C51064 * C3730) *
                 C118) *
                C50769 +
            ((C10872 * C6498 + C50983 * C6501 + C10871 * C3731 +
              C51064 * C3736) *
                 C50819 +
             (C10872 * C6495 + C50983 * C6497 + C10871 * C3724 +
              C51064 * C3732) *
                 C118) *
                C51035) *
               C50957 +
           (((C10872 * C6325 + C50983 * C6329 + C10871 * C1244 +
              C51064 * C1250) *
                 C50819 +
             (C10872 * C6320 + C50983 * C6324 + C10871 * C1238 +
              C51064 * C1245) *
                 C118) *
                C50769 +
            ((C10872 * C6323 + C50983 * C6328 + C10871 * C1246 +
              C51064 * C1251) *
                 C50819 +
             (C10872 * C6319 + C50983 * C6322 + C10871 * C1239 +
              C51064 * C1247) *
                 C118) *
                C51035) *
               C17341) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C17341 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C51035 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C51093 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C51035) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51035) *
                C17341) *
               C51078 +
           ((C10930 * C51035 +
             ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
                C17341 +
            ((C13963 * C118 + C13964 * C50819) * C51035 +
             ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
                C50957) *
               C1354) *
              C1765 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51035 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C17341 +
            ((C15945 * C118 + C15946 * C50819) * C51035 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C51078 -
           (((C15947 * C50819 + C15948 * C118) * C50769 +
             ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C51035) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C51035) *
                C17341) *
               C51093 -
           ((((C10872 * C1161 + C50983 * C1165 + C10871 * C896 +
               C51064 * C905) *
                  C50819 +
              (C10872 * C1153 + C50983 * C1160 + C10871 * C881 +
               C51064 * C895) *
                  C118) *
                 C50769 +
             ((C12654 + C12653) * C50819 + (C12652 + C12651) * C118) * C51035) *
                C50957 +
            (((C11304 + C11303) * C50819 + (C11302 + C11301) * C118) * C50769 +
             C11309 * C51035) *
                C17341) *
               C1354) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C294 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C51047 -
              (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
                 C51035 +
             ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
              C13959 * C295 - C13960 * C50835) *
                 C50769) *
                C17341 +
            (((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
              (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
                 C51035 +
             (C13961 * C294 + C13962 * C51047 - C14367 * C295 -
              C14368 * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           (((C13961 * C295 -
              ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
              C13962 * C50835) *
                 C51035 +
             (C13963 * C295 -
              ((C10913 + C10912) * C51047 + (C10911 + C10910) * C294) +
              C13964 * C50835) *
                 C50769) *
                C17341 +
            ((C14365 * C295 - (C13960 * C51047 + C13959 * C294) +
              C14366 * C50835) *
                 C51035 +
             ((C11476 + C11477) * C295 - (C11118 * C51047 + C11117 * C294) +
              (C11478 + C11479) * C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C1765 +
          (((((C14745 + C14746) * C295 -
              ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
                C51064 * C488) *
                   C51047 +
               (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
                C51064 * C481) *
                   C294) +
              (C14747 + C14748) * C50835) *
                 C51035 +
             (C15945 * C295 -
              ((C11296 + C11295) * C51047 + (C11294 + C11293) * C294) +
              C15946 * C50835) *
                 C50769) *
                C17341 +
            (((C14750 + C14749) * C295 -
              ((C14748 + C14747) * C51047 + (C14746 + C14745) * C294) +
              (C14752 + C14751) * C50835) *
                 C51035 +
             ((C14754 + C14753) * C295 - (C15947 * C51047 + C15948 * C294) +
              (C14756 + C14755) * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           ((((C11293 + C11294) * C294 + (C11295 + C11296) * C51047 -
              C15948 * C295 - C15947 * C50835) *
                 C51035 +
             ((C11297 + C11298) * C294 + (C11299 + C11300) * C51047 -
              (C12652 + C12651) * C295 - (C12654 + C12653) * C50835) *
                 C50769) *
                C17341 +
            ((C15945 * C294 + C15946 * C51047 - (C14753 + C14754) * C295 -
              (C14755 + C14756) * C50835) *
                 C51035 +
             ((C12651 + C12652) * C294 + (C12653 + C12654) * C51047 -
              (C10872 * C3431 + C50983 * C3437 + C10871 * C880 +
               C51064 * C893) *
                  C295 -
              (C10872 * C3436 + C50983 * C3440 + C10871 * C894 +
               C51064 * C904) *
                  C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C17341 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C51035 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C1480 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C51035) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51035) *
                C17341) *
               C50790) *
              C51095 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51035 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C17341 +
            ((C15945 * C118 + C15946 * C50819) * C51035 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C50790 -
           (((C15947 * C50819 + C15948 * C118) * C50769 +
             ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C51035) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C51035) *
                C17341) *
               C1480) *
              C51084 +
          (((((C10871 * C1008 + C51064 * C1013 + C10872 * C1239 +
               C50983 * C1247) *
                  C118 +
              (C10871 * C1014 + C51064 * C1023 + C10872 * C1246 +
               C50983 * C1251) *
                  C50819) *
                 C51035 +
             ((C11886 + C11887) * C118 + (C11888 + C11889) * C50819) * C50769) *
                C17341 +
            (((C15166 + C15165) * C118 + (C15168 + C15167) * C50819) * C51035 +
             ((C14959 + C14960) * C118 + (C14961 + C14962) * C50819) * C50769) *
                C50957) *
               C1480 -
           ((((C10872 * C7097 + C50983 * C7098 + C10871 * C1159 +
               C51064 * C1164) *
                  C50819 +
              (C10872 * C7095 + C50983 * C7096 + C10871 * C1152 +
               C51064 * C1158) *
                  C118) *
                 C50769 +
             ((C14962 + C14961) * C50819 + (C14960 + C14959) * C118) * C51035) *
                C50957 +
            (((C11893 + C11892) * C50819 + (C11891 + C11890) * C118) * C50769 +
             ((C11889 + C11888) * C50819 + (C11887 + C11886) * C118) * C51035) *
                C17341) *
               C50790) *
              C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C118 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C50819) *
                C51035 +
            ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
               C17341 +
           (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C51035 +
            (C13961 * C118 + C13962 * C50819) * C50769) *
               C50957) *
              C112 -
          (((C11118 * C50819 + C11117 * C118) * C50769 +
            (C13960 * C50819 + C13959 * C118) * C51035) *
               C50957 +
           (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
            ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51035) *
               C17341) *
              C113 +
          ((C10930 * C51035 +
            ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
               C17341 +
           ((C13963 * C118 + C13964 * C50819) * C51035 +
            ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
               C50957) *
              C114 -
          ((((C10872 * C1635 + C50983 * C1636 + C10871 * C311 + C51064 * C318) *
                 C50819 +
             (C10872 * C1633 + C50983 * C1634 + C10871 * C300 + C51064 * C310) *
                 C118) *
                C50769 +
            ((C11116 + C11115) * C50819 + (C11114 + C11113) * C118) * C51035) *
               C50957 +
           (((C10921 + C10920) * C50819 + (C10919 + C10918) * C118) * C50769 +
            C10931 * C51035) *
               C17341) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C627 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C622 -
             (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
             (C14377 + C14378) * C629 + (C14379 + C14380) * C624) *
                C51035 +
            ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
             C13959 * C628 - C13960 * C623 + C14365 * C629 + C14366 * C624) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
             (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
             (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
                C51035 +
            (C13961 * C627 + C13962 * C622 - C14367 * C628 - C14368 * C623 +
             (C14381 + C14382) * C629 + (C14383 + C14384) * C624) *
                C50769) *
               C50957) *
              C51040 +
          (((C13961 * C628 -
             ((C10909 + C10908) * C622 + (C10907 + C10906) * C627) +
             C13962 * C623 - C14367 * C629 - C14368 * C624) *
                C51035 +
            (C13963 * C628 -
             ((C10913 + C10912) * C622 + (C10911 + C10910) * C627) +
             C13964 * C623 - (C11477 + C11476) * C629 -
             (C11479 + C11478) * C624) *
                C50769) *
               C17341 +
           ((C14365 * C628 - (C13960 * C622 + C13959 * C627) + C14366 * C623 -
             (C14382 + C14381) * C629 - (C14384 + C14383) * C624) *
                C51035 +
            ((C11476 + C11477) * C628 - (C11118 * C622 + C11117 * C627) +
             (C11478 + C11479) * C623 -
             (C10872 * C4251 + C50983 * C4252 + C10871 * C763 + C51064 * C769) *
                 C629 -
             (C10872 * C4253 + C50983 * C4254 + C10871 * C770 + C51064 * C775) *
                 C624) *
                C50769) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C294 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C51047 -
             (C13965 + C13966) * C295 - (C13967 + C13968) * C50835) *
                C51035 +
            ((C10906 + C10907) * C294 + (C10908 + C10909) * C51047 -
             C13959 * C295 - C13960 * C50835) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C294 + (C13968 + C13967) * C51047 -
             (C14378 + C14377) * C295 - (C14380 + C14379) * C50835) *
                C51035 +
            (C13961 * C294 + C13962 * C51047 - C14367 * C295 -
             C14368 * C50835) *
                C50769) *
               C50957) *
              C291 +
          (((C13961 * C295 -
             ((C10909 + C10908) * C51047 + (C10907 + C10906) * C294) +
             C13962 * C50835) *
                C51035 +
            (C13963 * C295 -
             ((C10913 + C10912) * C51047 + (C10911 + C10910) * C294) +
             C13964 * C50835) *
                C50769) *
               C17341 +
           ((C14365 * C295 - (C13960 * C51047 + C13959 * C294) +
             C14366 * C50835) *
                C51035 +
            ((C11476 + C11477) * C295 - (C11118 * C51047 + C11117 * C294) +
             (C11478 + C11479) * C50835) *
                C50769) *
               C50957) *
              C292 +
          ((C11122 * C51035 +
            ((C10917 + C10916) * C294 + (C10915 + C10914) * C51047 -
             (C11114 + C11113) * C295 - (C11116 + C11115) * C50835) *
                C50769) *
               C17341 +
           ((C13963 * C294 + C13964 * C51047 - (C11477 + C11476) * C295 -
             (C11479 + C11478) * C50835) *
                C51035 +
            ((C11113 + C11114) * C294 + (C11115 + C11116) * C51047 -
             (C10872 * C882 + C50983 * C897 + C10871 * C633 + C51064 * C641) *
                 C295 -
             (C10872 * C898 + C50983 * C906 + C10871 * C642 + C51064 * C648) *
                 C50835) *
                C50769) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                C757 +
            (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                C752 -
            (C13965 + C13966) * C758 - (C13967 + C13968) * C753 +
            (C14377 + C14378) * C759 + (C14379 + C14380) * C754 -
            (C14523 + C14524) * C760 - (C14525 + C14526) * C755) *
               C51035 +
           ((C10906 + C10907) * C757 + (C10908 + C10909) * C752 -
            C13959 * C758 - C13960 * C753 + C14365 * C759 + C14366 * C754 -
            (C14382 + C14381) * C760 - (C14384 + C14383) * C755) *
               C50769) *
              C17341 +
          (((C13966 + C13965) * C757 + (C13968 + C13967) * C752 -
            (C14378 + C14377) * C758 - (C14380 + C14379) * C753 +
            (C14524 + C14523) * C759 + (C14526 + C14525) * C754 -
            (C10872 * C3245 + C50983 * C3251 + C10871 * C2949 +
             C51064 * C2952) *
                C760 -
            (C10872 * C3252 + C50983 * C3257 + C10871 * C2953 +
             C51064 * C2958) *
                C755) *
               C51035 +
           (C13961 * C757 + C13962 * C752 - C14367 * C758 - C14368 * C753 +
            (C14381 + C14382) * C759 + (C14383 + C14384) * C754 -
            (C10872 * C3246 + C50983 * C3253 + C10871 * C2950 +
             C51064 * C2954) *
                C760 -
            (C10872 * C3254 + C50983 * C3258 + C10871 * C2955 +
             C51064 * C2959) *
                C755) *
               C50769) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                  C118 +
              (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C10906 + C10907) * C118 + (C10908 + C10909) * C50819) * C50769) *
                C17341 +
            (((C13966 + C13965) * C118 + (C13968 + C13967) * C50819) * C51035 +
             (C13961 * C118 + C13962 * C50819) * C50769) *
                C50957) *
               C291 -
           (((C11118 * C50819 + C11117 * C118) * C50769 +
             (C13960 * C50819 + C13959 * C118) * C51035) *
                C50957 +
            (((C10913 + C10912) * C50819 + (C10911 + C10910) * C118) * C50769 +
             ((C10909 + C10908) * C50819 + (C10907 + C10906) * C118) * C51035) *
                C17341) *
               C292 +
           ((C10930 * C51035 +
             ((C10917 + C10916) * C118 + (C10915 + C10914) * C50819) * C50769) *
                C17341 +
            ((C13963 * C118 + C13964 * C50819) * C51035 +
             ((C11113 + C11114) * C118 + (C11115 + C11116) * C50819) * C50769) *
                C50957) *
               C293) *
              C51049 +
          (((((C11293 + C11294) * C118 + (C11295 + C11296) * C50819) * C51035 +
             ((C11297 + C11298) * C118 + (C11299 + C11300) * C50819) * C50769) *
                C17341 +
            ((C15945 * C118 + C15946 * C50819) * C51035 +
             ((C12651 + C12652) * C118 + (C12653 + C12654) * C50819) * C50769) *
                C50957) *
               C292 -
           (((C15947 * C50819 + C15948 * C118) * C50769 +
             ((C14748 + C14747) * C50819 + (C14746 + C14745) * C118) * C51035) *
                C50957 +
            (((C11296 + C11295) * C50819 + (C11294 + C11293) * C118) * C50769 +
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C50819 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C118) *
                 C51035) *
                C17341) *
               C291 -
           ((((C10872 * C1161 + C50983 * C1165 + C10871 * C896 +
               C51064 * C905) *
                  C50819 +
              (C10872 * C1153 + C50983 * C1160 + C10871 * C881 +
               C51064 * C895) *
                  C118) *
                 C50769 +
             ((C12654 + C12653) * C50819 + (C12652 + C12651) * C118) * C51035) *
                C50957 +
            (((C11304 + C11303) * C50819 + (C11302 + C11301) * C118) * C50769 +
             C11309 * C51035) *
                C17341) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10871 * C119 + C51064 * C126 + C10872 * C470 + C50983 * C481) *
                 C627 +
             (C10871 * C127 + C51064 * C140 + C10872 * C480 + C50983 * C488) *
                 C622 -
             (C13965 + C13966) * C628 - (C13967 + C13968) * C623 +
             (C14377 + C14378) * C629 + (C14379 + C14380) * C624) *
                C51035 +
            ((C10906 + C10907) * C627 + (C10908 + C10909) * C622 -
             C13959 * C628 - C13960 * C623 + C14365 * C629 + C14366 * C624) *
                C50769) *
               C17341 +
           (((C13966 + C13965) * C627 + (C13968 + C13967) * C622 -
             (C14378 + C14377) * C628 - (C14380 + C14379) * C623 +
             (C14524 + C14523) * C629 + (C14526 + C14525) * C624) *
                C51035 +
            (C13961 * C627 + C13962 * C622 - C14367 * C628 - C14368 * C623 +
             (C14381 + C14382) * C629 + (C14383 + C14384) * C624) *
                C50769) *
               C50957) *
              C50785 * C51049 +
          ((((C14745 + C14746) * C628 -
             ((C10872 * C1014 + C50983 * C1023 + C10871 * C480 +
               C51064 * C488) *
                  C622 +
              (C10872 * C1008 + C50983 * C1013 + C10871 * C470 +
               C51064 * C481) *
                  C627) +
             (C14747 + C14748) * C623 - (C14749 + C14750) * C629 -
             (C14751 + C14752) * C624) *
                C51035 +
            (C15945 * C628 -
             ((C11296 + C11295) * C622 + (C11294 + C11293) * C627) +
             C15946 * C623 - (C14753 + C14754) * C629 -
             (C14755 + C14756) * C624) *
                C50769) *
               C17341 +
           (((C14750 + C14749) * C628 -
             ((C14748 + C14747) * C622 + (C14746 + C14745) * C627) +
             (C14752 + C14751) * C623 -
             (C10872 * C3603 + C50983 * C3605 + C10871 * C3243 +
              C51064 * C3247) *
                 C629 -
             (C10872 * C3606 + C50983 * C3609 + C10871 * C3248 +
              C51064 * C3255) *
                 C624) *
                C51035 +
            ((C14754 + C14753) * C628 - (C15947 * C622 + C15948 * C627) +
             (C14756 + C14755) * C623 -
             (C10872 * C3604 + C50983 * C3607 + C10871 * C3244 +
              C51064 * C3249) *
                 C629 -
             (C10872 * C3608 + C50983 * C3610 + C10871 * C3250 +
              C51064 * C3256) *
                 C624) *
                C50769) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C17338 +
            (C1358 + C1359 - C1360 - C1361) * C17339 + C1378 * C17340) *
               C17341 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C17338 +
            (C3884 + C3885 - C3886 - C3887) * C17339 + C9445 * C17340) *
               C50957) *
              C51093 +
          (((C1360 - (C1359 + C1358) + C1361) * C17338 +
            (C1364 - (C1363 + C1362) + C1365) * C17339 +
            (C1368 - (C1367 + C1366) + C1369) * C17340) *
               C17341 +
           ((C3886 - (C3885 + C3884) + C3887) * C17338 +
            (C3892 - (C3893 + C3894) + C3895) * C17339 +
            (C9440 - (C9441 + C9442) + C9443) * C17340) *
               C50957) *
              C51078 +
          ((C1378 * C17338 + C1379 * C17339 +
            (C1372 + C1371 - C1370 - C1373) * C17340) *
               C17341 +
           (C9445 * C17338 + (C9442 + C9441 - C9440 - C9443) * C17339 +
            (C353 * C1355 + C354 * C1350 -
             (C117 * C634 + C50919 * C643) * C1356 -
             (C117 * C644 + C50919 * C649) * C50835) *
                C17340) *
               C50957) *
              C1354) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1355 +
            (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C1355 + C2981 * C1350 - C3096 * C1356 - C3097 * C50835) *
               C50764 * C19943) *
              C51093 +
          ((C1360 - (C1359 + C1358) + C1361) * C50764 * C19940 +
           (C3886 - (C3885 + C3884) + C3887) * C50764 * C19941 +
           (C3890 - (C3889 + C3888) + C3891) * C50764 * C19942 +
           (C2982 * C1356 - (C2631 * C1350 + C2630 * C1355) + C2983 * C50835) *
               C50764 * C19943) *
              C51078 +
          (C1378 * C50764 * C19940 + C9445 * C50764 * C19941 +
           (C3898 + C3897 - C3896 - C3899) * C50764 * C19942 +
           (C2632 * C1355 + C2633 * C1350 -
            (C117 * C2951 + C50919 * C2956) * C1356 -
            (C117 * C2957 + C50919 * C2960) * C50835) *
               C50764 * C19943) *
              C1354) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1482 +
             (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
             C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                C17338 +
            (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C17339 +
            (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C17340) *
               C17341 +
           ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
             C2980 * C1484 + C2981 * C1479) *
                C17338 +
            (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C17339 +
            (C9592 + C9593 - C9594 - C9595 + C9596 + C9597) * C17340) *
               C50957) *
              C1480 +
          (((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C17338 +
            (C1494 - (C1493 + C1492) + C1495 - C1496 - C1497) * C17339 +
            (C1500 - (C1499 + C1498) + C1501 - C1502 - C1503) * C17340) *
               C17341 +
           ((C4048 - (C4047 + C4046) + C4049 - C4050 - C4051) * C17338 +
            (C9594 - (C9593 + C9592) + C9595 - C9596 - C9597) * C17339 +
            (C679 * C1483 - (C352 * C51094 + C351 * C1482) + C680 * C51081 -
             (C117 * C764 + C50919 * C771) * C1484 -
             (C117 * C772 + C50919 * C776) * C1479) *
                C17340) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1482 +
            (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
            C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
               C50764 * C19940 +
           (C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
            C2980 * C1484 + C2981 * C1479) *
               C50764 * C19941 +
           (C2628 * C1482 + C2629 * C51094 - C2980 * C1483 - C2981 * C51081 +
            C3096 * C1484 + C3097 * C1479) *
               C50764 * C19942 +
           (C2980 * C1482 + C2981 * C51094 - C3096 * C1483 - C3097 * C51081 +
            C20313 * C1484 + C20314 * C1479) *
               C50764 * C19943) *
              C1480 +
          ((C1488 - (C1487 + C1486) + C1489 - C1490 - C1491) * C50764 * C19940 +
           (C4048 - (C4047 + C4046) + C4049 - C4050 - C4051) * C50764 * C19941 +
           (C4054 - (C4053 + C4052) + C4055 - C4056 - C4057) * C50764 * C19942 +
           (C2982 * C1483 - (C2631 * C51094 + C2630 * C1482) + C2983 * C51081 -
            (C117 * C3084 + C50919 * C3087) * C1484 -
            (C117 * C3088 + C50919 * C3090) * C1479) *
               C50764 * C19943) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C17338 +
             (C1358 + C1359 - C1360 - C1361) * C17339 + C1378 * C17340) *
                C17341 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C17338 +
             (C3884 + C3885 - C3886 - C3887) * C17339 + C9445 * C17340) *
                C50957) *
               C1480 +
           (((C1360 - (C1359 + C1358) + C1361) * C17338 +
             (C1364 - (C1363 + C1362) + C1365) * C17339 +
             (C1368 - (C1367 + C1366) + C1369) * C17340) *
                C17341 +
            ((C3886 - (C3885 + C3884) + C3887) * C17338 +
             (C3892 - (C3893 + C3894) + C3895) * C17339 +
             (C9440 - (C9441 + C9442) + C9443) * C17340) *
                C50957) *
               C50790) *
              C51049 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C17338 +
             (C1662 - (C1640 + C1641) + C1663) * C17339 +
             (C1664 - (C1646 + C1647) + C1665) * C17340) *
                C17341 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C17338 +
             (C4256 - (C4257 + C4258) + C4259) * C17339 +
             (C9792 - (C9793 + C9794) + C9795) * C17340) *
                C50957) *
               C1480 +
           (((C1641 + C1640 - C1662 - C1663) * C17338 +
             (C1647 + C1646 - C1664 - C1665) * C17339 +
             (C1653 + C1652 - C1666 - C1667) * C17340) *
                C17341 +
            ((C4258 + C4257 - C4256 - C4259) * C17338 +
             (C9794 + C9793 - C9792 - C9795) * C17339 +
             (C1660 * C1355 + C1661 * C1350 -
              (C117 * C882 + C50919 * C897) * C1356 -
              (C117 * C898 + C50919 * C906) * C50835) *
                 C17340) *
                C50957) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C50764 * C19940 +
            (C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C50764 * C19941 +
            (C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C50764 * C19942 +
            (C2980 * C1355 + C2981 * C1350 - C3096 * C1356 - C3097 * C50835) *
                C50764 * C19943) *
               C1480 +
           ((C1360 - (C1359 + C1358) + C1361) * C50764 * C19940 +
            (C3886 - (C3885 + C3884) + C3887) * C50764 * C19941 +
            (C3890 - (C3889 + C3888) + C3891) * C50764 * C19942 +
            (C2982 * C1356 - (C2631 * C1350 + C2630 * C1355) + C2983 * C50835) *
                C50764 * C19943) *
               C50790) *
              C51049 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C50764 * C19940 +
            (C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C50764 * C19941 +
            (C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) + C3281 * C50835) *
                C50764 * C19942 +
            (C20421 * C1356 - (C3281 * C1350 + C3280 * C1355) +
             C20422 * C50835) *
                C50764 * C19943) *
               C1480 +
           ((C1641 + C1640 - C1662 - C1663) * C50764 * C19940 +
            (C4258 + C4257 - C4256 - C4259) * C50764 * C19941 +
            (C4262 + C4261 - C4260 - C4263) * C50764 * C19942 +
            (C3282 * C1355 + C3283 * C1350 -
             (C117 * C3246 + C50919 * C3253) * C1356 -
             (C117 * C3254 + C50919 * C3258) * C50835) *
                C50764 * C19943) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C1355 +
              (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
              C2627 * C50835) *
                 C17338 +
             (C1358 + C1359 - C1360 - C1361) * C17339 + C1378 * C17340) *
                C17341 +
            ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                 C17338 +
             (C3884 + C3885 - C3886 - C3887) * C17339 + C9445 * C17340) *
                C50957) *
               C51040 +
           (((C1360 - (C1359 + C1358) + C1361) * C17338 +
             (C1364 - (C1363 + C1362) + C1365) * C17339 +
             (C1368 - (C1367 + C1366) + C1369) * C17340) *
                C17341 +
            ((C3886 - (C3885 + C3884) + C3887) * C17338 +
             (C3892 - (C3893 + C3894) + C3895) * C17339 +
             (C9440 - (C9441 + C9442) + C9443) * C17340) *
                C50957) *
               C50790) *
              C1765 +
          ((((C3276 * C1356 -
              ((C117 * C480 + C50919 * C488) * C1350 +
               (C117 * C470 + C50919 * C481) * C1355) +
              C3277 * C50835) *
                 C17338 +
             (C1662 - (C1640 + C1641) + C1663) * C17339 +
             (C1664 - (C1646 + C1647) + C1665) * C17340) *
                C17341 +
            ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) +
              C3279 * C50835) *
                 C17338 +
             (C4256 - (C4257 + C4258) + C4259) * C17339 +
             (C9792 - (C9793 + C9794) + C9795) * C17340) *
                C50957) *
               C51040 +
           (((C1641 + C1640 - C1662 - C1663) * C17338 +
             (C1647 + C1646 - C1664 - C1665) * C17339 +
             (C1653 + C1652 - C1666 - C1667) * C17340) *
                C17341 +
            ((C4258 + C4257 - C4256 - C4259) * C17338 +
             (C9794 + C9793 - C9792 - C9795) * C17339 +
             (C1660 * C1355 + C1661 * C1350 -
              (C117 * C882 + C50919 * C897) * C1356 -
              (C117 * C898 + C50919 * C906) * C50835) *
                 C17340) *
                C50957) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C50764 * C19940 +
            (C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C50764 * C19941 +
            (C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
                C50764 * C19942 +
            (C2980 * C1355 + C2981 * C1350 - C3096 * C1356 - C3097 * C50835) *
                C50764 * C19943) *
               C51040 +
           ((C1360 - (C1359 + C1358) + C1361) * C50764 * C19940 +
            (C3886 - (C3885 + C3884) + C3887) * C50764 * C19941 +
            (C3890 - (C3889 + C3888) + C3891) * C50764 * C19942 +
            (C2982 * C1356 - (C2631 * C1350 + C2630 * C1355) + C2983 * C50835) *
                C50764 * C19943) *
               C50790) *
              C1765 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C50764 * C19940 +
            (C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C50764 * C19941 +
            (C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) + C3281 * C50835) *
                C50764 * C19942 +
            (C20421 * C1356 - (C3281 * C1350 + C3280 * C1355) +
             C20422 * C50835) *
                C50764 * C19943) *
               C51040 +
           ((C1641 + C1640 - C1662 - C1663) * C50764 * C19940 +
            (C4258 + C4257 - C4256 - C4259) * C50764 * C19941 +
            (C4262 + C4261 - C4260 - C4263) * C50764 * C19942 +
            (C3282 * C1355 + C3283 * C1350 -
             (C117 * C3246 + C50919 * C3253) * C1356 -
             (C117 * C3254 + C50919 * C3258) * C50835) *
                C50764 * C19943) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1482 +
             (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
             C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
                C17338 +
            (C1486 + C1487 - C1488 - C1489 + C1490 + C1491) * C17339 +
            (C1492 + C1493 - C1494 - C1495 + C1496 + C1497) * C17340) *
               C17341 +
           ((C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
             C2980 * C1484 + C2981 * C1479) *
                C17338 +
            (C4046 + C4047 - C4048 - C4049 + C4050 + C4051) * C17339 +
            (C9592 + C9593 - C9594 - C9595 + C9596 + C9597) * C17340) *
               C50957) *
              C50785 * C1765 +
          (((C3276 * C1483 -
             ((C117 * C480 + C50919 * C488) * C51094 +
              (C117 * C470 + C50919 * C481) * C1482) +
             C3277 * C51081 - C3278 * C1484 - C3279 * C1479) *
                C17338 +
            (C1656 * C1483 - (C508 * C51094 + C507 * C1482) + C1657 * C51081 -
             C2796 * C1484 - C2797 * C1479) *
                C17339 +
            (C1658 * C1483 - (C510 * C51094 + C509 * C1482) + C1659 * C51081 -
             C2798 * C1484 - C2799 * C1479) *
                C17340) *
               C17341 +
           ((C3278 * C1483 - (C3277 * C51094 + C3276 * C1482) + C3279 * C51081 -
             C3280 * C1484 - C3281 * C1479) *
                C17338 +
            (C2796 * C1483 - (C1657 * C51094 + C1656 * C1482) + C2797 * C51081 -
             C3282 * C1484 - C3283 * C1479) *
                C17339 +
            (C2798 * C1483 - (C1659 * C51094 + C1658 * C1482) + C2799 * C51081 -
             (C117 * C4251 + C50919 * C4252) * C1484 -
             (C117 * C4253 + C50919 * C4254) * C1479) *
                C17340) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1482 +
            (C117 * C127 + C50919 * C140) * C51094 - C2626 * C1483 -
            C2627 * C51081 + C2628 * C1484 + C2629 * C1479) *
               C50764 * C19940 +
           (C2626 * C1482 + C2627 * C51094 - C2628 * C1483 - C2629 * C51081 +
            C2980 * C1484 + C2981 * C1479) *
               C50764 * C19941 +
           (C2628 * C1482 + C2629 * C51094 - C2980 * C1483 - C2981 * C51081 +
            C3096 * C1484 + C3097 * C1479) *
               C50764 * C19942 +
           (C2980 * C1482 + C2981 * C51094 - C3096 * C1483 - C3097 * C51081 +
            C20313 * C1484 + C20314 * C1479) *
               C50764 * C19943) *
              C50785 * C1765 +
          ((C3276 * C1483 -
            ((C117 * C480 + C50919 * C488) * C51094 +
             (C117 * C470 + C50919 * C481) * C1482) +
            C3277 * C51081 - C3278 * C1484 - C3279 * C1479) *
               C50764 * C19940 +
           (C3278 * C1483 - (C3277 * C51094 + C3276 * C1482) + C3279 * C51081 -
            C3280 * C1484 - C3281 * C1479) *
               C50764 * C19941 +
           (C3280 * C1483 - (C3279 * C51094 + C3278 * C1482) + C3281 * C51081 -
            C20421 * C1484 - C20422 * C1479) *
               C50764 * C19942 +
           (C20421 * C1483 - (C3281 * C51094 + C3280 * C1482) +
            C20422 * C51081 - (C117 * C20412 + C50919 * C20413) * C1484 -
            (C117 * C20414 + C50919 * C20415) * C1479) *
               C50764 * C19943) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C1355 +
             (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
             C2627 * C50835) *
                C17338 +
            (C1358 + C1359 - C1360 - C1361) * C17339 + C1378 * C17340) *
               C17341 +
           ((C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
                C17338 +
            (C3884 + C3885 - C3886 - C3887) * C17339 + C9445 * C17340) *
               C50957) *
              C50785 * C51095 +
          (((C3276 * C1356 -
             ((C117 * C480 + C50919 * C488) * C1350 +
              (C117 * C470 + C50919 * C481) * C1355) +
             C3277 * C50835) *
                C17338 +
            (C1662 - (C1640 + C1641) + C1663) * C17339 +
            (C1664 - (C1646 + C1647) + C1665) * C17340) *
               C17341 +
           ((C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
                C17338 +
            (C4256 - (C4257 + C4258) + C4259) * C17339 +
            (C9792 - (C9793 + C9794) + C9795) * C17340) *
               C50957) *
              C50785 * C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C1355 +
             (C117 * C1014 + C50919 * C1023) * C1350 - C3620 * C1356 -
             C3621 * C50835) *
                C17338 +
            (C1041 * C1355 + C1042 * C1350 - C3450 * C1356 - C3451 * C50835) *
                C17339 +
            (C1043 * C1355 + C1044 * C1350 - C9045 * C1356 - C9046 * C50835) *
                C17340) *
               C17341 +
           ((C3620 * C1355 + C3621 * C1350 - C3622 * C1356 - C3623 * C50835) *
                C17338 +
            (C3450 * C1355 + C3451 * C1350 - C3452 * C1356 - C3453 * C50835) *
                C17339 +
            (C9045 * C1355 + C9046 * C1350 -
             (C117 * C3431 + C50919 * C3437) * C1356 -
             (C117 * C3436 + C50919 * C3440) * C50835) *
                C17340) *
               C50957) *
              C50785 * C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C1355 +
            (C117 * C127 + C50919 * C140) * C1350 - C2626 * C1356 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C1355 + C2627 * C1350 - C2628 * C1356 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C1355 + C2629 * C1350 - C2980 * C1356 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C1355 + C2981 * C1350 - C3096 * C1356 - C3097 * C50835) *
               C50764 * C19943) *
              C50785 * C51095 +
          ((C3276 * C1356 -
            ((C117 * C480 + C50919 * C488) * C1350 +
             (C117 * C470 + C50919 * C481) * C1355) +
            C3277 * C50835) *
               C50764 * C19940 +
           (C3278 * C1356 - (C3277 * C1350 + C3276 * C1355) + C3279 * C50835) *
               C50764 * C19941 +
           (C3280 * C1356 - (C3279 * C1350 + C3278 * C1355) + C3281 * C50835) *
               C50764 * C19942 +
           (C20421 * C1356 - (C3281 * C1350 + C3280 * C1355) +
            C20422 * C50835) *
               C50764 * C19943) *
              C50785 * C51084 +
          (((C117 * C1008 + C50919 * C1013) * C1355 +
            (C117 * C1014 + C50919 * C1023) * C1350 - C3620 * C1356 -
            C3621 * C50835) *
               C50764 * C19940 +
           (C3620 * C1355 + C3621 * C1350 - C3622 * C1356 - C3623 * C50835) *
               C50764 * C19941 +
           (C3622 * C1355 + C3623 * C1350 - C20627 * C1356 - C20628 * C50835) *
               C50764 * C19942 +
           (C20627 * C1355 + C20628 * C1350 -
            (C117 * C20618 + C50919 * C20619) * C1356 -
            (C117 * C20620 + C50919 * C20621) * C50835) *
               C50764 * C19943) *
              C50785 * C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C17338 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C17339 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C17340) *
               C17341 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C17338 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C17339 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C17340) *
               C50957) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C17338 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C17339 +
            (C669 - (C668 + C667) + C670 - C685 - C686) * C17340) *
               C17341 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C17338 +
            (C8647 - (C8646 + C8645) + C8648 - C8649 - C8650) * C17339 +
            (C679 * C628 - (C352 * C622 + C351 * C627) + C680 * C623 -
             (C117 * C764 + C50919 * C771) * C629 -
             (C117 * C772 + C50919 * C776) * C624) *
                C17340) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C17338 +
            (C178 + C179) * C17339 + C188 * C17340) *
               C17341 +
           ((C2626 * C118 + C2627 * C50819) * C17338 +
            (C2440 + C2441) * C17339 + C8193 * C17340) *
               C50957) *
              C112 -
          ((C8194 * C17340 + (C2446 + C2447) * C17339 +
            (C2441 + C2440) * C17338) *
               C50957 +
           (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
               C17341) *
              C113 +
          ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) * C17341 +
           (C8193 * C17338 + (C2448 + C2449) * C17339 +
            (C8195 + C8196) * C17340) *
               C50957) *
              C114 -
          ((((C117 * C313 + C50919 * C319) * C50819 +
             (C117 * C301 + C50919 * C312) * C118) *
                C17340 +
            (C8196 + C8195) * C17339 + C8194 * C17338) *
               C50957 +
           ((C187 + C186) * C17340 + C190 * C17339 + C191 * C17338) * C17341) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C17338 +
             (C178 + C179) * C17339 + C188 * C17340) *
                C17341 +
            ((C2626 * C118 + C2627 * C50819) * C17338 +
             (C2440 + C2441) * C17339 + C8193 * C17340) *
                C50957) *
               C51040 -
           ((C8194 * C17340 + (C2446 + C2447) * C17339 +
             (C2441 + C2440) * C17338) *
                C50957 +
            (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
                C17341) *
               C50790) *
              C1005 +
          ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
             (C519 + C520) * C17340) *
                C17341 +
            ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
             (C8496 + C8497) * C17340) *
                C50957) *
               C50790 -
           ((C8498 * C17340 + (C2785 + C2784) * C17339 +
             (C3277 * C50819 + C3276 * C118) * C17338) *
                C50957 +
            (C524 * C17340 + (C516 + C515) * C17339 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C17338) *
                C17341) *
               C51040) *
              C1006 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C17338 +
             (C1047 + C1048) * C17339 + (C1049 + C1050) * C17340) *
                C17341 +
            ((C3620 * C118 + C3621 * C50819) * C17338 +
             (C3454 + C3455) * C17339 + (C9047 + C9048) * C17340) *
                C50957) *
               C51040 -
           ((((C117 * C1161 + C50919 * C1165) * C50819 +
              (C117 * C1153 + C50919 * C1160) * C118) *
                 C17340 +
             (C9048 + C9047) * C17339 + (C3455 + C3454) * C17338) *
                C50957 +
            ((C1052 + C1051) * C17340 + (C1050 + C1049) * C17339 +
             (C1048 + C1047) * C17338) *
                C17341) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C50764 * C19940 +
           (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
           (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
           (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
              C112 -
          ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
           (C2443 + C2442) * C50764 * C19942 +
           (C2441 + C2440) * C50764 * C19941 +
           (C179 + C178) * C50764 * C19940) *
              C113 +
          (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
           (C2445 + C2444) * C50764 * C19942 +
           (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
              C114 -
          (((C117 * C772 + C50919 * C776) * C50819 +
            (C117 * C764 + C50919 * C771) * C118) *
               C50764 * C19943 +
           (C2451 + C2450) * C50764 * C19942 + C8194 * C50764 * C19941 +
           C191 * C50764 * C19940) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 - C2627 * C623 +
            C2628 * C629 + C2629 * C624) *
               C50764 * C19940 +
           (C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
            C2980 * C629 + C2981 * C624) *
               C50764 * C19941 +
           (C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
            C3096 * C629 + C3097 * C624) *
               C50764 * C19942 +
           (C2980 * C627 + C2981 * C622 - C3096 * C628 - C3097 * C623 +
            (C117 * C3083 + C50919 * C3085) * C629 +
            (C117 * C3086 + C50919 * C3089) * C624) *
               C50764 * C19943) *
              C51040 +
          ((C653 - (C652 + C651) + C654 - C681 - C682) * C50764 * C19940 +
           (C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C50764 * C19941 +
           (C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C50764 * C19942 +
           (C2982 * C628 - (C2631 * C622 + C2630 * C627) + C2983 * C623 -
            (C117 * C3084 + C50919 * C3087) * C629 -
            (C117 * C3088 + C50919 * C3090) * C624) *
               C50764 * C19943) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C51040 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C50790) *
              C1005 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C50790 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C51040) *
              C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C50764 * C19940 +
            (C3620 * C118 + C3621 * C50819) * C50764 * C19941 +
            (C3622 * C118 + C3623 * C50819) * C50764 * C19942 +
            ((C117 * C3603 + C50919 * C3605) * C118 +
             (C117 * C3606 + C50919 * C3609) * C50819) *
                C50764 * C19943) *
               C51040 -
           (((C117 * C3608 + C50919 * C3610) * C50819 +
             (C117 * C3604 + C50919 * C3607) * C118) *
                C50764 * C19943 +
            (C3457 + C3456) * C50764 * C19942 +
            (C3455 + C3454) * C50764 * C19941 +
            (C1048 + C1047) * C50764 * C19940) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C17338 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C17339 +
           (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 +
            C677 * C759 + C678 * C754 - C2632 * C760 - C2633 * C755) *
               C17340) *
              C17341 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C17338 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C17339 +
           (C348 * C757 + C349 * C752 - C677 * C758 - C678 * C753 +
            C2632 * C759 + C2633 * C754 -
            (C117 * C2951 + C50919 * C2956) * C760 -
            (C117 * C2957 + C50919 * C2960) * C755) *
               C17340) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C17338 +
            (C321 + C322 - C355 - C356) * C17339 + C365 * C17340) *
               C17341 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C17338 +
            (C2606 + C2607 - C2608 - C2609) * C17339 + C8349 * C17340) *
               C50957) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C17338 +
            (C357 - (C328 + C327) + C358) * C17339 +
            (C359 - (C334 + C333) + C360) * C17340) *
               C17341 +
           ((C2608 - (C2607 + C2606) + C2609) * C17338 +
            (C2616 - (C2617 + C2618) + C2619) * C17339 +
            (C8344 - (C8345 + C8346) + C8347) * C17340) *
               C50957) *
              C292 +
          ((C365 * C17338 + C366 * C17339 +
            (C342 + C341 - C361 - C362) * C17340) *
               C17341 +
           (C8349 * C17338 + (C8346 + C8345 - C8344 - C8347) * C17339 +
            (C353 * C294 + C354 * C51047 -
             (C117 * C634 + C50919 * C643) * C295 -
             (C117 * C644 + C50919 * C649) * C50835) *
                C17340) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C17338 +
            (C321 + C322 - C355 - C356) * C17339 + C365 * C17340) *
               C17341 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C17338 +
            (C2606 + C2607 - C2608 - C2609) * C17339 + C8349 * C17340) *
               C50957) *
              C50785 * C1005 +
          (((C3276 * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             C3277 * C50835) *
                C17338 +
            (C1898 - (C1899 + C1900) + C1901) * C17339 +
            (C1902 - (C1903 + C1904) + C1905) * C17340) *
               C17341 +
           ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                C17338 +
            (C4604 - (C4605 + C4606) + C4607) * C17339 +
            (C10136 - (C10137 + C10138) + C10139) * C17340) *
               C50957) *
              C50785 * C1006 +
          ((((C117 * C1008 + C50919 * C1013) * C294 +
             (C117 * C1014 + C50919 * C1023) * C51047 - C3620 * C295 -
             C3621 * C50835) *
                C17338 +
            (C1041 * C294 + C1042 * C51047 - C3450 * C295 - C3451 * C50835) *
                C17339 +
            (C1043 * C294 + C1044 * C51047 - C9045 * C295 - C9046 * C50835) *
                C17340) *
               C17341 +
           ((C3620 * C294 + C3621 * C51047 - C3622 * C295 - C3623 * C50835) *
                C17338 +
            (C3450 * C294 + C3451 * C51047 - C3452 * C295 - C3453 * C50835) *
                C17339 +
            (C9045 * C294 + C9046 * C51047 -
             (C117 * C3431 + C50919 * C3437) * C295 -
             (C117 * C3436 + C50919 * C3440) * C50835) *
                C17340) *
               C50957) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C294 + C2981 * C51047 - C3096 * C295 - C3097 * C50835) *
               C50764 * C19943) *
              C291 +
          ((C355 - (C322 + C321) + C356) * C50764 * C19940 +
           (C2608 - (C2607 + C2606) + C2609) * C50764 * C19941 +
           (C2634 - (C2611 + C2610) + C2635) * C50764 * C19942 +
           (C2982 * C295 - (C2631 * C51047 + C2630 * C294) + C2983 * C50835) *
               C50764 * C19943) *
              C292 +
          (C365 * C50764 * C19940 + C8349 * C50764 * C19941 +
           (C2623 + C2622 - C2636 - C2637) * C50764 * C19942 +
           (C2632 * C294 + C2633 * C51047 -
            (C117 * C2951 + C50919 * C2956) * C295 -
            (C117 * C2957 + C50919 * C2960) * C50835) *
               C50764 * C19943) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50919 * C126) * C757 +
           (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
           C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
              C50764 * C19940 +
          (C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
           C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
              C50764 * C19941 +
          (C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
           C3096 * C759 + C3097 * C754 - C20313 * C760 - C20314 * C755) *
              C50764 * C19942 +
          (C2980 * C757 + C2981 * C752 - C3096 * C758 - C3097 * C753 +
           C20313 * C759 + C20314 * C754 -
           (C117 * C20304 + C50919 * C20305) * C760 -
           (C117 * C20306 + C50919 * C20307) * C755) *
              C50764 * C19943) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C294 + C2981 * C51047 - C3096 * C295 - C3097 * C50835) *
               C50764 * C19943) *
              C50785 * C1005 +
          ((C3276 * C295 -
            ((C117 * C480 + C50919 * C488) * C51047 +
             (C117 * C470 + C50919 * C481) * C294) +
            C3277 * C50835) *
               C50764 * C19940 +
           (C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
               C50764 * C19941 +
           (C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
               C50764 * C19942 +
           (C20421 * C295 - (C3281 * C51047 + C3280 * C294) + C20422 * C50835) *
               C50764 * C19943) *
              C50785 * C1006 +
          (((C117 * C1008 + C50919 * C1013) * C294 +
            (C117 * C1014 + C50919 * C1023) * C51047 - C3620 * C295 -
            C3621 * C50835) *
               C50764 * C19940 +
           (C3620 * C294 + C3621 * C51047 - C3622 * C295 - C3623 * C50835) *
               C50764 * C19941 +
           (C3622 * C294 + C3623 * C51047 - C20627 * C295 - C20628 * C50835) *
               C50764 * C19942 +
           (C20627 * C294 + C20628 * C51047 -
            (C117 * C20618 + C50919 * C20619) * C295 -
            (C117 * C20620 + C50919 * C20621) * C50835) *
               C50764 * C19943) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C17338 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C17339 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C17340) *
               C17341 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C17338 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C17339 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C17340) *
               C50957) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C17338 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C17339 +
            (C1658 * C628 - (C510 * C622 + C509 * C627) + C1659 * C623 -
             C2798 * C629 - C2799 * C624) *
                C17340) *
               C17341 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C17338 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C17339 +
            (C2798 * C628 - (C1659 * C622 + C1658 * C627) + C2799 * C623 -
             (C117 * C4251 + C50919 * C4252) * C629 -
             (C117 * C4253 + C50919 * C4254) * C624) *
                C17340) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C17338 +
             (C178 + C179) * C17339 + C188 * C17340) *
                C17341 +
            ((C2626 * C118 + C2627 * C50819) * C17338 +
             (C2440 + C2441) * C17339 + C8193 * C17340) *
                C50957) *
               C291 -
           ((C8194 * C17340 + (C2446 + C2447) * C17339 +
             (C2441 + C2440) * C17338) *
                C50957 +
            (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
                C17341) *
               C292 +
           ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) * C17341 +
            (C8193 * C17338 + (C2448 + C2449) * C17339 +
             (C8195 + C8196) * C17340) *
                C50957) *
               C293) *
              C51049 +
          ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
             (C519 + C520) * C17340) *
                C17341 +
            ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
             (C8496 + C8497) * C17340) *
                C50957) *
               C292 -
           ((C8498 * C17340 + (C2785 + C2784) * C17339 +
             (C3277 * C50819 + C3276 * C118) * C17338) *
                C50957 +
            (C524 * C17340 + (C516 + C515) * C17339 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C17338) *
                C17341) *
               C291 -
           ((((C117 * C1635 + C50919 * C1636) * C50819 +
              (C117 * C1633 + C50919 * C1634) * C118) *
                 C17340 +
             (C8497 + C8496) * C17339 + C8498 * C17338) *
                C50957 +
            ((C522 + C521) * C17340 + C523 * C17339 + C524 * C17338) * C17341) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C17338 +
            (C178 + C179) * C17339 + C188 * C17340) *
               C17341 +
           ((C2626 * C118 + C2627 * C50819) * C17338 +
            (C2440 + C2441) * C17339 + C8193 * C17340) *
               C50957) *
              C50785 * C1232 -
          ((C8498 * C17340 + (C2785 + C2784) * C17339 +
            (C3277 * C50819 + C3276 * C118) * C17338) *
               C50957 +
           (C524 * C17340 + (C516 + C515) * C17339 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C17338) *
               C17341) *
              C50785 * C1233 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C17338 +
            (C1047 + C1048) * C17339 + (C1049 + C1050) * C17340) *
               C17341 +
           ((C3620 * C118 + C3621 * C50819) * C17338 +
            (C3454 + C3455) * C17339 + (C9047 + C9048) * C17340) *
               C50957) *
              C50785 * C1234 -
          ((((C117 * C7097 + C50919 * C7098) * C50819 +
             (C117 * C7095 + C50919 * C7096) * C118) *
                C17340 +
            ((C117 * C3729 + C50919 * C3735) * C50819 +
             (C117 * C3723 + C50919 * C3730) * C118) *
                C17339 +
            ((C117 * C3731 + C50919 * C3736) * C50819 +
             (C117 * C3724 + C50919 * C3732) * C118) *
                C17338) *
               C50957 +
           (((C117 * C1242 + C50919 * C1249) * C50819 +
             (C117 * C1237 + C50919 * C1243) * C118) *
                C17340 +
            ((C117 * C1244 + C50919 * C1250) * C50819 +
             (C117 * C1238 + C50919 * C1245) * C118) *
                C17339 +
            ((C117 * C1246 + C50919 * C1251) * C50819 +
             (C117 * C1239 + C50919 * C1247) * C118) *
                C17338) *
               C17341) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C291 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C292 +
           (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
            (C2445 + C2444) * C50764 * C19942 +
            (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
               C293) *
              C51049 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C292 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C291 -
           (((C117 * C4253 + C50919 * C4254) * C50819 +
             (C117 * C4251 + C50919 * C4252) * C118) *
                C50764 * C19943 +
            (C2803 + C2802) * C50764 * C19942 + C8498 * C50764 * C19941 +
            C524 * C50764 * C19940) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 - C2627 * C623 +
            C2628 * C629 + C2629 * C624) *
               C50764 * C19940 +
           (C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
            C2980 * C629 + C2981 * C624) *
               C50764 * C19941 +
           (C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
            C3096 * C629 + C3097 * C624) *
               C50764 * C19942 +
           (C2980 * C627 + C2981 * C622 - C3096 * C628 - C3097 * C623 +
            C20313 * C629 + C20314 * C624) *
               C50764 * C19943) *
              C50785 * C51049 +
          ((C3276 * C628 -
            ((C117 * C480 + C50919 * C488) * C622 +
             (C117 * C470 + C50919 * C481) * C627) +
            C3277 * C623 - C3278 * C629 - C3279 * C624) *
               C50764 * C19940 +
           (C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
            C3280 * C629 - C3281 * C624) *
               C50764 * C19941 +
           (C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
            C20421 * C629 - C20422 * C624) *
               C50764 * C19942 +
           (C20421 * C628 - (C3281 * C622 + C3280 * C627) + C20422 * C623 -
            (C117 * C20412 + C50919 * C20413) * C629 -
            (C117 * C20414 + C50919 * C20415) * C624) *
               C50764 * C19943) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C50764 * C19940 +
           (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
           (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
           (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
              C50785 * C1232 -
          ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
           (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
           (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
           ((C117 * C480 + C50919 * C488) * C50819 +
            (C117 * C470 + C50919 * C481) * C118) *
               C50764 * C19940) *
              C50785 * C1233 +
          (((C117 * C1008 + C50919 * C1013) * C118 +
            (C117 * C1014 + C50919 * C1023) * C50819) *
               C50764 * C19940 +
           (C3620 * C118 + C3621 * C50819) * C50764 * C19941 +
           (C3622 * C118 + C3623 * C50819) * C50764 * C19942 +
           (C20627 * C118 + C20628 * C50819) * C50764 * C19943) *
              C50785 * C1234 -
          (((C117 * C20695 + C50919 * C20697) * C50819 +
            (C117 * C20694 + C50919 * C20696) * C118) *
               C50764 * C19943 +
           ((C117 * C3727 + C50919 * C3734) * C50819 +
            (C117 * C3722 + C50919 * C3728) * C118) *
               C50764 * C19942 +
           ((C117 * C3731 + C50919 * C3736) * C50819 +
            (C117 * C3724 + C50919 * C3732) * C118) *
               C50764 * C19941 +
           ((C117 * C1246 + C50919 * C1251) * C50819 +
            (C117 * C1239 + C50919 * C1247) * C118) *
               C50764 * C19940) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C17338 +
             (C178 + C179) * C17339 + C188 * C17340) *
                C17341 +
            ((C2626 * C118 + C2627 * C50819) * C17338 +
             (C2440 + C2441) * C17339 + C8193 * C17340) *
                C50957) *
               C51093 -
           ((C8194 * C17340 + (C2446 + C2447) * C17339 +
             (C2441 + C2440) * C17338) *
                C50957 +
            (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
                C17341) *
               C51078 +
           ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) * C17341 +
            (C8193 * C17338 + (C2448 + C2449) * C17339 +
             (C8195 + C8196) * C17340) *
                C50957) *
               C1354) *
              C1765 +
          ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
             (C519 + C520) * C17340) *
                C17341 +
            ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
             (C8496 + C8497) * C17340) *
                C50957) *
               C51078 -
           ((C8498 * C17340 + (C2785 + C2784) * C17339 +
             (C3277 * C50819 + C3276 * C118) * C17338) *
                C50957 +
            (C524 * C17340 + (C516 + C515) * C17339 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C17338) *
                C17341) *
               C51093 -
           ((((C117 * C1635 + C50919 * C1636) * C50819 +
              (C117 * C1633 + C50919 * C1634) * C118) *
                 C17340 +
             (C8497 + C8496) * C17339 + C8498 * C17338) *
                C50957 +
            ((C522 + C521) * C17340 + C523 * C17339 + C524 * C17338) * C17341) *
               C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C51093 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C51078 +
           (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
            (C2445 + C2444) * C50764 * C19942 +
            (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
               C1354) *
              C1765 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C51078 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C51093 -
           (((C117 * C4253 + C50919 * C4254) * C50819 +
             (C117 * C4251 + C50919 * C4252) * C118) *
                C50764 * C19943 +
            (C2803 + C2802) * C50764 * C19942 + C8498 * C50764 * C19941 +
            C524 * C50764 * C19940) *
               C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C294 +
              (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
              C2627 * C50835) *
                 C17338 +
             (C321 + C322 - C355 - C356) * C17339 + C365 * C17340) *
                C17341 +
            ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                 C17338 +
             (C2606 + C2607 - C2608 - C2609) * C17339 + C8349 * C17340) *
                C50957) *
               C1480 +
           (((C355 - (C322 + C321) + C356) * C17338 +
             (C357 - (C328 + C327) + C358) * C17339 +
             (C359 - (C334 + C333) + C360) * C17340) *
                C17341 +
            ((C2608 - (C2607 + C2606) + C2609) * C17338 +
             (C2616 - (C2617 + C2618) + C2619) * C17339 +
             (C8344 - (C8345 + C8346) + C8347) * C17340) *
                C50957) *
               C50790) *
              C1765 +
          ((((C3276 * C295 -
              ((C117 * C480 + C50919 * C488) * C51047 +
               (C117 * C470 + C50919 * C481) * C294) +
              C3277 * C50835) *
                 C17338 +
             (C1898 - (C1899 + C1900) + C1901) * C17339 +
             (C1902 - (C1903 + C1904) + C1905) * C17340) *
                C17341 +
            ((C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                 C17338 +
             (C4604 - (C4605 + C4606) + C4607) * C17339 +
             (C10136 - (C10137 + C10138) + C10139) * C17340) *
                C50957) *
               C1480 +
           (((C1900 + C1899 - C1898 - C1901) * C17338 +
             (C1904 + C1903 - C1902 - C1905) * C17339 +
             (C1908 + C1907 - C1906 - C1909) * C17340) *
                C17341 +
            ((C4606 + C4605 - C4604 - C4607) * C17338 +
             (C10138 + C10137 - C10136 - C10139) * C17339 +
             (C1660 * C294 + C1661 * C51047 -
              (C117 * C882 + C50919 * C897) * C295 -
              (C117 * C898 + C50919 * C906) * C50835) *
                 C17340) *
                C50957) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C50764 * C19940 +
            (C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C50764 * C19941 +
            (C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
                C50764 * C19942 +
            (C2980 * C294 + C2981 * C51047 - C3096 * C295 - C3097 * C50835) *
                C50764 * C19943) *
               C1480 +
           ((C355 - (C322 + C321) + C356) * C50764 * C19940 +
            (C2608 - (C2607 + C2606) + C2609) * C50764 * C19941 +
            (C2634 - (C2611 + C2610) + C2635) * C50764 * C19942 +
            (C2982 * C295 - (C2631 * C51047 + C2630 * C294) + C2983 * C50835) *
                C50764 * C19943) *
               C50790) *
              C1765 +
          (((C3276 * C295 -
             ((C117 * C480 + C50919 * C488) * C51047 +
              (C117 * C470 + C50919 * C481) * C294) +
             C3277 * C50835) *
                C50764 * C19940 +
            (C3278 * C295 - (C3277 * C51047 + C3276 * C294) + C3279 * C50835) *
                C50764 * C19941 +
            (C3280 * C295 - (C3279 * C51047 + C3278 * C294) + C3281 * C50835) *
                C50764 * C19942 +
            (C20421 * C295 - (C3281 * C51047 + C3280 * C294) +
             C20422 * C50835) *
                C50764 * C19943) *
               C1480 +
           ((C1900 + C1899 - C1898 - C1901) * C50764 * C19940 +
            (C4606 + C4605 - C4604 - C4607) * C50764 * C19941 +
            (C4610 + C4609 - C4608 - C4611) * C50764 * C19942 +
            (C3282 * C294 + C3283 * C51047 -
             (C117 * C3246 + C50919 * C3253) * C295 -
             (C117 * C3254 + C50919 * C3258) * C50835) *
                C50764 * C19943) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C17338 +
             (C178 + C179) * C17339 + C188 * C17340) *
                C17341 +
            ((C2626 * C118 + C2627 * C50819) * C17338 +
             (C2440 + C2441) * C17339 + C8193 * C17340) *
                C50957) *
               C1480 -
           ((C8194 * C17340 + (C2446 + C2447) * C17339 +
             (C2441 + C2440) * C17338) *
                C50957 +
            (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
                C17341) *
               C50790) *
              C51095 +
          ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
             (C519 + C520) * C17340) *
                C17341 +
            ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
             (C8496 + C8497) * C17340) *
                C50957) *
               C50790 -
           ((C8498 * C17340 + (C2785 + C2784) * C17339 +
             (C3277 * C50819 + C3276 * C118) * C17338) *
                C50957 +
            (C524 * C17340 + (C516 + C515) * C17339 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C17338) *
                C17341) *
               C1480) *
              C51084 +
          (((((C117 * C1008 + C50919 * C1013) * C118 +
              (C117 * C1014 + C50919 * C1023) * C50819) *
                 C17338 +
             (C1047 + C1048) * C17339 + (C1049 + C1050) * C17340) *
                C17341 +
            ((C3620 * C118 + C3621 * C50819) * C17338 +
             (C3454 + C3455) * C17339 + (C9047 + C9048) * C17340) *
                C50957) *
               C1480 -
           ((((C117 * C1161 + C50919 * C1165) * C50819 +
              (C117 * C1153 + C50919 * C1160) * C118) *
                 C17340 +
             (C9048 + C9047) * C17339 + (C3455 + C3454) * C17338) *
                C50957 +
            ((C1052 + C1051) * C17340 + (C1050 + C1049) * C17339 +
             (C1048 + C1047) * C17338) *
                C17341) *
               C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C1480 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C50790) *
              C51095 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C50790 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C1480) *
              C51084 +
          ((((C117 * C1008 + C50919 * C1013) * C118 +
             (C117 * C1014 + C50919 * C1023) * C50819) *
                C50764 * C19940 +
            (C3620 * C118 + C3621 * C50819) * C50764 * C19941 +
            (C3622 * C118 + C3623 * C50819) * C50764 * C19942 +
            (C20627 * C118 + C20628 * C50819) * C50764 * C19943) *
               C1480 -
           (((C117 * C3608 + C50919 * C3610) * C50819 +
             (C117 * C3604 + C50919 * C3607) * C118) *
                C50764 * C19943 +
            (C3457 + C3456) * C50764 * C19942 +
            (C3455 + C3454) * C50764 * C19941 +
            (C1048 + C1047) * C50764 * C19940) *
               C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C17338 +
            (C178 + C179) * C17339 + C188 * C17340) *
               C17341 +
           ((C2626 * C118 + C2627 * C50819) * C17338 +
            (C2440 + C2441) * C17339 + C8193 * C17340) *
               C50957) *
              C112 -
          ((C8194 * C17340 + (C2446 + C2447) * C17339 +
            (C2441 + C2440) * C17338) *
               C50957 +
           (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
               C17341) *
              C113 +
          ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) * C17341 +
           (C8193 * C17338 + (C2448 + C2449) * C17339 +
            (C8195 + C8196) * C17340) *
               C50957) *
              C114 -
          ((((C117 * C313 + C50919 * C319) * C50819 +
             (C117 * C301 + C50919 * C312) * C118) *
                C17340 +
            (C8196 + C8195) * C17339 + C8194 * C17338) *
               C50957 +
           ((C187 + C186) * C17340 + C190 * C17339 + C191 * C17338) * C17341) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C17338 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C17339 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C17340) *
               C17341 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C17338 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C17339 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C17340) *
               C50957) *
              C51040 +
          (((C653 - (C652 + C651) + C654 - C681 - C682) * C17338 +
            (C661 - (C660 + C659) + C662 - C683 - C684) * C17339 +
            (C669 - (C668 + C667) + C670 - C685 - C686) * C17340) *
               C17341 +
           ((C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C17338 +
            (C8647 - (C8646 + C8645) + C8648 - C8649 - C8650) * C17339 +
            (C679 * C628 - (C352 * C622 + C351 * C627) + C680 * C623 -
             (C117 * C764 + C50919 * C771) * C629 -
             (C117 * C772 + C50919 * C776) * C624) *
                C17340) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C118 +
            (C117 * C127 + C50919 * C140) * C50819) *
               C50764 * C19940 +
           (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
           (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
           (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
              C112 -
          ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
           (C2443 + C2442) * C50764 * C19942 +
           (C2441 + C2440) * C50764 * C19941 +
           (C179 + C178) * C50764 * C19940) *
              C113 +
          (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
           (C2445 + C2444) * C50764 * C19942 +
           (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
              C114 -
          (((C117 * C772 + C50919 * C776) * C50819 +
            (C117 * C764 + C50919 * C771) * C118) *
               C50764 * C19943 +
           (C2451 + C2450) * C50764 * C19942 + C8194 * C50764 * C19941 +
           C191 * C50764 * C19940) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 - C2627 * C623 +
            C2628 * C629 + C2629 * C624) *
               C50764 * C19940 +
           (C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
            C2980 * C629 + C2981 * C624) *
               C50764 * C19941 +
           (C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
            C3096 * C629 + C3097 * C624) *
               C50764 * C19942 +
           (C2980 * C627 + C2981 * C622 - C3096 * C628 - C3097 * C623 +
            (C117 * C3083 + C50919 * C3085) * C629 +
            (C117 * C3086 + C50919 * C3089) * C624) *
               C50764 * C19943) *
              C51040 +
          ((C653 - (C652 + C651) + C654 - C681 - C682) * C50764 * C19940 +
           (C2968 - (C2967 + C2966) + C2969 - C2970 - C2971) * C50764 * C19941 +
           (C2974 - (C2973 + C2972) + C2975 - C2984 - C2985) * C50764 * C19942 +
           (C2982 * C628 - (C2631 * C622 + C2630 * C627) + C2983 * C623 -
            (C117 * C3084 + C50919 * C3087) * C629 -
            (C117 * C3088 + C50919 * C3090) * C624) *
               C50764 * C19943) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C294 +
             (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
             C2627 * C50835) *
                C17338 +
            (C321 + C322 - C355 - C356) * C17339 + C365 * C17340) *
               C17341 +
           ((C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
                C17338 +
            (C2606 + C2607 - C2608 - C2609) * C17339 + C8349 * C17340) *
               C50957) *
              C291 +
          (((C355 - (C322 + C321) + C356) * C17338 +
            (C357 - (C328 + C327) + C358) * C17339 +
            (C359 - (C334 + C333) + C360) * C17340) *
               C17341 +
           ((C2608 - (C2607 + C2606) + C2609) * C17338 +
            (C2616 - (C2617 + C2618) + C2619) * C17339 +
            (C8344 - (C8345 + C8346) + C8347) * C17340) *
               C50957) *
              C292 +
          ((C365 * C17338 + C366 * C17339 +
            (C342 + C341 - C361 - C362) * C17340) *
               C17341 +
           (C8349 * C17338 + (C8346 + C8345 - C8344 - C8347) * C17339 +
            (C353 * C294 + C354 * C51047 -
             (C117 * C634 + C50919 * C643) * C295 -
             (C117 * C644 + C50919 * C649) * C50835) *
                C17340) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C757 +
            (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
            C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
               C17338 +
           (C168 * C757 + C169 * C752 - C345 * C758 - C346 * C753 +
            C675 * C759 + C676 * C754 - C2630 * C760 - C2631 * C755) *
               C17339 +
           (C170 * C757 + C171 * C752 - C348 * C758 - C349 * C753 +
            C677 * C759 + C678 * C754 - C2632 * C760 - C2633 * C755) *
               C17340) *
              C17341 +
          ((C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
            C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
               C17338 +
           (C345 * C757 + C346 * C752 - C675 * C758 - C676 * C753 +
            C2630 * C759 + C2631 * C754 - C2982 * C760 - C2983 * C755) *
               C17339 +
           (C348 * C757 + C349 * C752 - C677 * C758 - C678 * C753 +
            C2632 * C759 + C2633 * C754 -
            (C117 * C2951 + C50919 * C2956) * C760 -
            (C117 * C2957 + C50919 * C2960) * C755) *
               C17340) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C294 +
            (C117 * C127 + C50919 * C140) * C51047 - C2626 * C295 -
            C2627 * C50835) *
               C50764 * C19940 +
           (C2626 * C294 + C2627 * C51047 - C2628 * C295 - C2629 * C50835) *
               C50764 * C19941 +
           (C2628 * C294 + C2629 * C51047 - C2980 * C295 - C2981 * C50835) *
               C50764 * C19942 +
           (C2980 * C294 + C2981 * C51047 - C3096 * C295 - C3097 * C50835) *
               C50764 * C19943) *
              C291 +
          ((C355 - (C322 + C321) + C356) * C50764 * C19940 +
           (C2608 - (C2607 + C2606) + C2609) * C50764 * C19941 +
           (C2634 - (C2611 + C2610) + C2635) * C50764 * C19942 +
           (C2982 * C295 - (C2631 * C51047 + C2630 * C294) + C2983 * C50835) *
               C50764 * C19943) *
              C292 +
          (C365 * C50764 * C19940 + C8349 * C50764 * C19941 +
           (C2623 + C2622 - C2636 - C2637) * C50764 * C19942 +
           (C2632 * C294 + C2633 * C51047 -
            (C117 * C2951 + C50919 * C2956) * C295 -
            (C117 * C2957 + C50919 * C2960) * C50835) *
               C50764 * C19943) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50919 * C126) * C757 +
           (C117 * C127 + C50919 * C140) * C752 - C2626 * C758 - C2627 * C753 +
           C2628 * C759 + C2629 * C754 - C2980 * C760 - C2981 * C755) *
              C50764 * C19940 +
          (C2626 * C757 + C2627 * C752 - C2628 * C758 - C2629 * C753 +
           C2980 * C759 + C2981 * C754 - C3096 * C760 - C3097 * C755) *
              C50764 * C19941 +
          (C2628 * C757 + C2629 * C752 - C2980 * C758 - C2981 * C753 +
           C3096 * C759 + C3097 * C754 - C20313 * C760 - C20314 * C755) *
              C50764 * C19942 +
          (C2980 * C757 + C2981 * C752 - C3096 * C758 - C3097 * C753 +
           C20313 * C759 + C20314 * C754 -
           (C117 * C20304 + C50919 * C20305) * C760 -
           (C117 * C20306 + C50919 * C20307) * C755) *
              C50764 * C19943) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50919 * C126) * C118 +
              (C117 * C127 + C50919 * C140) * C50819) *
                 C17338 +
             (C178 + C179) * C17339 + C188 * C17340) *
                C17341 +
            ((C2626 * C118 + C2627 * C50819) * C17338 +
             (C2440 + C2441) * C17339 + C8193 * C17340) *
                C50957) *
               C291 -
           ((C8194 * C17340 + (C2446 + C2447) * C17339 +
             (C2441 + C2440) * C17338) *
                C50957 +
            (C191 * C17340 + (C181 + C180) * C17339 + (C179 + C178) * C17338) *
                C17341) *
               C292 +
           ((C188 * C17338 + C189 * C17339 + (C185 + C184) * C17340) * C17341 +
            (C8193 * C17338 + (C2448 + C2449) * C17339 +
             (C8195 + C8196) * C17340) *
                C50957) *
               C293) *
              C51049 +
          ((((C515 + C516) * C17338 + (C517 + C518) * C17339 +
             (C519 + C520) * C17340) *
                C17341 +
            ((C2784 + C2785) * C17338 + (C2786 + C2787) * C17339 +
             (C8496 + C8497) * C17340) *
                C50957) *
               C292 -
           ((C8498 * C17340 + (C2785 + C2784) * C17339 +
             (C3277 * C50819 + C3276 * C118) * C17338) *
                C50957 +
            (C524 * C17340 + (C516 + C515) * C17339 +
             ((C117 * C480 + C50919 * C488) * C50819 +
              (C117 * C470 + C50919 * C481) * C118) *
                 C17338) *
                C17341) *
               C291 -
           ((((C117 * C1635 + C50919 * C1636) * C50819 +
              (C117 * C1633 + C50919 * C1634) * C118) *
                 C17340 +
             (C8497 + C8496) * C17339 + C8498 * C17338) *
                C50957 +
            ((C522 + C521) * C17340 + C523 * C17339 + C524 * C17338) * C17341) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C627 +
             (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 -
             C2627 * C623 + C2628 * C629 + C2629 * C624) *
                C17338 +
            (C651 + C652 - C653 - C654 + C681 + C682) * C17339 +
            (C659 + C660 - C661 - C662 + C683 + C684) * C17340) *
               C17341 +
           ((C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
             C2980 * C629 + C2981 * C624) *
                C17338 +
            (C2966 + C2967 - C2968 - C2969 + C2970 + C2971) * C17339 +
            (C8645 + C8646 - C8647 - C8648 + C8649 + C8650) * C17340) *
               C50957) *
              C50785 * C51049 +
          (((C3276 * C628 -
             ((C117 * C480 + C50919 * C488) * C622 +
              (C117 * C470 + C50919 * C481) * C627) +
             C3277 * C623 - C3278 * C629 - C3279 * C624) *
                C17338 +
            (C1656 * C628 - (C508 * C622 + C507 * C627) + C1657 * C623 -
             C2796 * C629 - C2797 * C624) *
                C17339 +
            (C1658 * C628 - (C510 * C622 + C509 * C627) + C1659 * C623 -
             C2798 * C629 - C2799 * C624) *
                C17340) *
               C17341 +
           ((C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
             C3280 * C629 - C3281 * C624) *
                C17338 +
            (C2796 * C628 - (C1657 * C622 + C1656 * C627) + C2797 * C623 -
             C3282 * C629 - C3283 * C624) *
                C17339 +
            (C2798 * C628 - (C1659 * C622 + C1658 * C627) + C2799 * C623 -
             (C117 * C4251 + C50919 * C4252) * C629 -
             (C117 * C4253 + C50919 * C4254) * C624) *
                C17340) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50919 * C126) * C118 +
             (C117 * C127 + C50919 * C140) * C50819) *
                C50764 * C19940 +
            (C2626 * C118 + C2627 * C50819) * C50764 * C19941 +
            (C2628 * C118 + C2629 * C50819) * C50764 * C19942 +
            (C2980 * C118 + C2981 * C50819) * C50764 * C19943) *
               C291 -
           ((C2631 * C50819 + C2630 * C118) * C50764 * C19943 +
            (C2443 + C2442) * C50764 * C19942 +
            (C2441 + C2440) * C50764 * C19941 +
            (C179 + C178) * C50764 * C19940) *
               C292 +
           (C188 * C50764 * C19940 + C8193 * C50764 * C19941 +
            (C2445 + C2444) * C50764 * C19942 +
            (C2632 * C118 + C2633 * C50819) * C50764 * C19943) *
               C293) *
              C51049 +
          (((C515 + C516) * C50764 * C19940 +
            (C2784 + C2785) * C50764 * C19941 +
            (C2800 + C2801) * C50764 * C19942 +
            (C3282 * C118 + C3283 * C50819) * C50764 * C19943) *
               C292 -
           ((C3281 * C50819 + C3280 * C118) * C50764 * C19943 +
            (C3279 * C50819 + C3278 * C118) * C50764 * C19942 +
            (C3277 * C50819 + C3276 * C118) * C50764 * C19941 +
            ((C117 * C480 + C50919 * C488) * C50819 +
             (C117 * C470 + C50919 * C481) * C118) *
                C50764 * C19940) *
               C291 -
           (((C117 * C4253 + C50919 * C4254) * C50819 +
             (C117 * C4251 + C50919 * C4252) * C118) *
                C50764 * C19943 +
            (C2803 + C2802) * C50764 * C19942 + C8498 * C50764 * C19941 +
            C524 * C50764 * C19940) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50919 * C126) * C627 +
            (C117 * C127 + C50919 * C140) * C622 - C2626 * C628 - C2627 * C623 +
            C2628 * C629 + C2629 * C624) *
               C50764 * C19940 +
           (C2626 * C627 + C2627 * C622 - C2628 * C628 - C2629 * C623 +
            C2980 * C629 + C2981 * C624) *
               C50764 * C19941 +
           (C2628 * C627 + C2629 * C622 - C2980 * C628 - C2981 * C623 +
            C3096 * C629 + C3097 * C624) *
               C50764 * C19942 +
           (C2980 * C627 + C2981 * C622 - C3096 * C628 - C3097 * C623 +
            C20313 * C629 + C20314 * C624) *
               C50764 * C19943) *
              C50785 * C51049 +
          ((C3276 * C628 -
            ((C117 * C480 + C50919 * C488) * C622 +
             (C117 * C470 + C50919 * C481) * C627) +
            C3277 * C623 - C3278 * C629 - C3279 * C624) *
               C50764 * C19940 +
           (C3278 * C628 - (C3277 * C622 + C3276 * C627) + C3279 * C623 -
            C3280 * C629 - C3281 * C624) *
               C50764 * C19941 +
           (C3280 * C628 - (C3279 * C622 + C3278 * C627) + C3281 * C623 -
            C20421 * C629 - C20422 * C624) *
               C50764 * C19942 +
           (C20421 * C628 - (C3281 * C622 + C3280 * C627) + C20422 * C623 -
            (C117 * C20412 + C50919 * C20413) * C629 -
            (C117 * C20414 + C50919 * C20415) * C624) *
               C50764 * C19943) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
                C51035 +
            ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
             C40939 * C1356 - C40940 * C50835) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
             (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
                C51035 +
            (C40941 * C1355 + C40942 * C1350 - C36641 * C1356 -
             C36642 * C50835) *
                C50769) *
               C50957) *
              C51093 +
          (((C40941 * C1356 -
             ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
             C40942 * C50835) *
                C51035 +
            (C40943 * C1356 -
             ((C33357 + C33356) * C1350 + (C33355 + C33354) * C1355) +
             C40944 * C50835) *
                C50769) *
               C51063 +
           ((C41333 * C1356 - (C40940 * C1350 + C40939 * C1355) +
             C41334 * C50835) *
                C51035 +
            ((C33920 + C33921) * C1356 - (C33562 * C1350 + C33561 * C1355) +
             (C33922 + C33923) * C50835) *
                C50769) *
               C50957) *
              C51078 +
          ((C34734 * C51035 +
            ((C33361 + C33360) * C1355 + (C33359 + C33358) * C1350 -
             (C33558 + C33557) * C1356 - (C33560 + C33559) * C50835) *
                C50769) *
               C51063 +
           ((C40943 * C1355 + C40944 * C1350 - (C33921 + C33920) * C1356 -
             (C33923 + C33922) * C50835) *
                C51035 +
            ((C33557 + C33558) * C1355 + (C33559 + C33560) * C1350 -
             (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                 C1356 -
             (C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                 C50835) *
                C50769) *
               C50957) *
              C1354) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1482 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C51094 -
             (C36331 + C36332) * C1483 - (C36333 + C36334) * C51081 +
             C36631 * C1484 + C36632 * C1479) *
                C51035 +
            ((C33350 + C33351) * C1482 + (C33352 + C33353) * C51094 -
             C40939 * C1483 - C40940 * C51081 + C41333 * C1484 +
             C41334 * C1479) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C1482 + (C36334 + C36333) * C51094 -
             (C36335 + C36336) * C1483 - (C36337 + C36338) * C51081 +
             (C36651 + C36652) * C1484 + (C36653 + C36654) * C1479) *
                C51035 +
            (C40941 * C1482 + C40942 * C51094 - C36641 * C1483 -
             C36642 * C51081 + (C36656 + C36655) * C1484 +
             (C36658 + C36657) * C1479) *
                C50769) *
               C50957) *
              C1480 +
          (((C40941 * C1483 -
             ((C33353 + C33352) * C51094 + (C33351 + C33350) * C1482) +
             C40942 * C51081 - C36641 * C1484 - C36642 * C1479) *
                C51035 +
            (C40943 * C1483 -
             ((C33357 + C33356) * C51094 + (C33355 + C33354) * C1482) +
             C40944 * C51081 - (C33921 + C33920) * C1484 -
             (C33923 + C33922) * C1479) *
                C50769) *
               C51063 +
           ((C41333 * C1483 - (C40940 * C51094 + C40939 * C1482) +
             C41334 * C51081 - (C36655 + C36656) * C1484 -
             (C36657 + C36658) * C1479) *
                C51035 +
            ((C33920 + C33921) * C1483 - (C33562 * C51094 + C33561 * C1482) +
             (C33922 + C33923) * C51081 -
             (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
                 C1484 -
             (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
                 C1479) *
                C50769) *
               C50957) *
              C50790) *
         C50849) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                  C1355 +
              (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                  C1350 -
              (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
                 C51035 +
             ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
              C40939 * C1356 - C40940 * C50835) *
                 C50769) *
                C51063 +
            (((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
              (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
                 C51035 +
             (C40941 * C1355 + C40942 * C1350 - C36641 * C1356 -
              C36642 * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           (((C40941 * C1356 -
              ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
              C40942 * C50835) *
                 C51035 +
             (C40943 * C1356 -
              ((C33357 + C33356) * C1350 + (C33355 + C33354) * C1355) +
              C40944 * C50835) *
                 C50769) *
                C51063 +
            ((C41333 * C1356 - (C40940 * C1350 + C40939 * C1355) +
              C41334 * C50835) *
                 C51035 +
             ((C33920 + C33921) * C1356 - (C33562 * C1350 + C33561 * C1355) +
              (C33922 + C33923) * C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C51049 +
          (((((C36941 + C36942) * C1356 -
              ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
                C33313 * C488) *
                   C1350 +
               (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
                C33313 * C481) *
                   C1355) +
              (C36943 + C36944) * C50835) *
                 C51035 +
             (C42835 * C1356 -
              ((C33740 + C33739) * C1350 + (C33738 + C33737) * C1355) +
              C42836 * C50835) *
                 C50769) *
                C51063 +
            (((C36946 + C36945) * C1356 -
              ((C36944 + C36943) * C1350 + (C36942 + C36941) * C1355) +
              (C36948 + C36947) * C50835) *
                 C51035 +
             ((C37864 + C37863) * C1356 - (C42837 * C1350 + C42838 * C1355) +
              (C37866 + C37865) * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           ((((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
              C42838 * C1356 - C42837 * C50835) *
                 C51035 +
             ((C33741 + C33742) * C1355 + (C33743 + C33744) * C1350 -
              (C35096 + C35095) * C1356 - (C35098 + C35097) * C50835) *
                 C50769) *
                C51063 +
            ((C42835 * C1355 + C42836 * C1350 - (C37863 + C37864) * C1356 -
              (C37865 + C37866) * C50835) *
                 C51035 +
             ((C35095 + C35096) * C1355 + (C35097 + C35098) * C1350 -
              (C33316 * C3431 + C50983 * C3437 + C33315 * C880 +
               C33313 * C893) *
                  C1356 -
              (C33316 * C3436 + C50983 * C3440 + C33315 * C894 +
               C33313 * C904) *
                  C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                  C1355 +
              (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                  C1350 -
              (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
                 C51035 +
             ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
              C40939 * C1356 - C40940 * C50835) *
                 C50769) *
                C51063 +
            (((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
              (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
                 C51035 +
             (C40941 * C1355 + C40942 * C1350 - C36641 * C1356 -
              C36642 * C50835) *
                 C50769) *
                C50957) *
               C51040 +
           (((C40941 * C1356 -
              ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
              C40942 * C50835) *
                 C51035 +
             (C40943 * C1356 -
              ((C33357 + C33356) * C1350 + (C33355 + C33354) * C1355) +
              C40944 * C50835) *
                 C50769) *
                C51063 +
            ((C41333 * C1356 - (C40940 * C1350 + C40939 * C1355) +
              C41334 * C50835) *
                 C51035 +
             ((C33920 + C33921) * C1356 - (C33562 * C1350 + C33561 * C1355) +
              (C33922 + C33923) * C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C1765 +
          (((((C36941 + C36942) * C1356 -
              ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
                C33313 * C488) *
                   C1350 +
               (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
                C33313 * C481) *
                   C1355) +
              (C36943 + C36944) * C50835) *
                 C51035 +
             (C42835 * C1356 -
              ((C33740 + C33739) * C1350 + (C33738 + C33737) * C1355) +
              C42836 * C50835) *
                 C50769) *
                C51063 +
            (((C36946 + C36945) * C1356 -
              ((C36944 + C36943) * C1350 + (C36942 + C36941) * C1355) +
              (C36948 + C36947) * C50835) *
                 C51035 +
             ((C37864 + C37863) * C1356 - (C42837 * C1350 + C42838 * C1355) +
              (C37866 + C37865) * C50835) *
                 C50769) *
                C50957) *
               C51040 +
           ((((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
              C42838 * C1356 - C42837 * C50835) *
                 C51035 +
             ((C33741 + C33742) * C1355 + (C33743 + C33744) * C1350 -
              (C35096 + C35095) * C1356 - (C35098 + C35097) * C50835) *
                 C50769) *
                C51063 +
            ((C42835 * C1355 + C42836 * C1350 - (C37863 + C37864) * C1356 -
              (C37865 + C37866) * C50835) *
                 C51035 +
             ((C35095 + C35096) * C1355 + (C35097 + C35098) * C1350 -
              (C33316 * C3431 + C50983 * C3437 + C33315 * C880 +
               C33313 * C893) *
                  C1356 -
              (C33316 * C3436 + C50983 * C3440 + C33315 * C894 +
               C33313 * C904) *
                  C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1482 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C51094 -
             (C36331 + C36332) * C1483 - (C36333 + C36334) * C51081 +
             C36631 * C1484 + C36632 * C1479) *
                C51035 +
            ((C33350 + C33351) * C1482 + (C33352 + C33353) * C51094 -
             C40939 * C1483 - C40940 * C51081 + C41333 * C1484 +
             C41334 * C1479) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C1482 + (C36334 + C36333) * C51094 -
             (C36335 + C36336) * C1483 - (C36337 + C36338) * C51081 +
             (C36651 + C36652) * C1484 + (C36653 + C36654) * C1479) *
                C51035 +
            (C40941 * C1482 + C40942 * C51094 - C36641 * C1483 -
             C36642 * C51081 + (C36656 + C36655) * C1484 +
             (C36658 + C36657) * C1479) *
                C50769) *
               C50957) *
              C50785 * C1765 +
          ((((C36941 + C36942) * C1483 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C51094 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1482) +
             (C36943 + C36944) * C51081 - C36953 * C1484 - C36954 * C1479) *
                C51035 +
            (C42835 * C1483 -
             ((C33740 + C33739) * C51094 + (C33738 + C33737) * C1482) +
             C42836 * C51081 - (C37863 + C37864) * C1484 -
             (C37865 + C37866) * C1479) *
                C50769) *
               C51063 +
           (((C36946 + C36945) * C1483 -
             ((C36944 + C36943) * C51094 + (C36942 + C36941) * C1482) +
             (C36948 + C36947) * C51081 - (C36949 + C36950) * C1484 -
             (C36951 + C36952) * C1479) *
                C51035 +
            ((C37864 + C37863) * C1483 - (C42837 * C51094 + C42838 * C1482) +
             (C37866 + C37865) * C51081 -
             (C33316 * C3604 + C50983 * C3607 + C33315 * C3244 +
              C33313 * C3249) *
                 C1484 -
             (C33316 * C3608 + C50983 * C3610 + C33315 * C3250 +
              C33313 * C3256) *
                 C1479) *
                C50769) *
               C50957) *
              C50785 * C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
                C51035 +
            ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
             C40939 * C1356 - C40940 * C50835) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
             (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
                C51035 +
            (C40941 * C1355 + C40942 * C1350 - C36641 * C1356 -
             C36642 * C50835) *
                C50769) *
               C50957) *
              C50785 * C51095 +
          ((((C36941 + C36942) * C1356 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C1350 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1355) +
             (C36943 + C36944) * C50835) *
                C51035 +
            (C42835 * C1356 -
             ((C33740 + C33739) * C1350 + (C33738 + C33737) * C1355) +
             C42836 * C50835) *
                C50769) *
               C51063 +
           (((C36946 + C36945) * C1356 -
             ((C36944 + C36943) * C1350 + (C36942 + C36941) * C1355) +
             (C36948 + C36947) * C50835) *
                C51035 +
            ((C37864 + C37863) * C1356 - (C42837 * C1350 + C42838 * C1355) +
             (C37866 + C37865) * C50835) *
                C50769) *
               C50957) *
              C50785 * C51084 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C1355 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C1350 -
             (C37263 + C37264) * C1356 - (C37265 + C37266) * C50835) *
                C51035 +
            ((C34330 + C34331) * C1355 + (C34332 + C34333) * C1350 -
             (C41862 + C41861) * C1356 - (C41864 + C41863) * C50835) *
                C50769) *
               C51063 +
           (((C37264 + C37263) * C1355 + (C37266 + C37265) * C1350 -
             (C37267 + C37268) * C1356 - (C37269 + C37270) * C50835) *
                C51035 +
            ((C41861 + C41862) * C1355 + (C41863 + C41864) * C1350 -
             (C33316 * C3721 + C50983 * C3726 + C33315 * C3430 +
              C33313 * C3434) *
                 C1356 -
             (C33316 * C3725 + C50983 * C3733 + C33315 * C3435 +
              C33313 * C3439) *
                 C50835) *
                C50769) *
               C50957) *
              C50785 * C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C627 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C622 -
             (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
             C36631 * C629 + C36632 * C624) *
                C51035 +
            ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
             C40939 * C628 - C40940 * C623 + C41333 * C629 + C41334 * C624) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
             (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
             (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
                C51035 +
            (C40941 * C627 + C40942 * C622 - C36641 * C628 - C36642 * C623 +
             (C36656 + C36655) * C629 + (C36658 + C36657) * C624) *
                C50769) *
               C50957) *
              C51040 +
          (((C40941 * C628 -
             ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
             C40942 * C623 - C36641 * C629 - C36642 * C624) *
                C51035 +
            (C40943 * C628 -
             ((C33357 + C33356) * C622 + (C33355 + C33354) * C627) +
             C40944 * C623 - (C33921 + C33920) * C629 -
             (C33923 + C33922) * C624) *
                C50769) *
               C51063 +
           ((C41333 * C628 - (C40940 * C622 + C40939 * C627) + C41334 * C623 -
             (C36655 + C36656) * C629 - (C36657 + C36658) * C624) *
                C51035 +
            ((C33920 + C33921) * C628 - (C33562 * C622 + C33561 * C627) +
             (C33922 + C33923) * C623 -
             (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
                 C629 -
             (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
                 C624) *
                C50769) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C51035 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C50769) *
               C51063 +
           (((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C51035 +
            ((C33549 + C33548) * C118 + (C33551 + C33550) * C50819) * C50769) *
               C50957) *
              C112 -
          (((C33562 * C50819 + C33561 * C118) * C50769 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C51035) *
               C50957 +
           (((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C50769 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C51035) *
               C51063) *
              C113 +
          ((C33374 * C51035 +
            ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C50769) *
               C51063 +
           (((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C51035 +
            ((C33557 + C33558) * C118 + (C33559 + C33560) * C50819) * C50769) *
               C50957) *
              C114 -
          ((((C33316 * C1635 + C50983 * C1636 + C33315 * C311 + C33313 * C318) *
                 C50819 +
             (C33316 * C1633 + C50983 * C1634 + C33315 * C300 + C33313 * C310) *
                 C118) *
                C50769 +
            ((C33560 + C33559) * C50819 + (C33558 + C33557) * C118) * C51035) *
               C50957 +
           (((C33365 + C33364) * C50819 + (C33363 + C33362) * C118) * C50769 +
            C33375 * C51035) *
               C51063) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                  C118 +
              (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C50769) *
                C51063 +
            (((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C51035 +
             (C40941 * C118 + C40942 * C50819) * C50769) *
                C50957) *
               C51040 -
           (((C33562 * C50819 + C33561 * C118) * C50769 +
             (C40940 * C50819 + C40939 * C118) * C51035) *
                C50957 +
            (((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C50769 +
             ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C51035) *
                C51063) *
               C50790) *
              C1005 +
          (((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C51035 +
             ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C50769) *
                C51063 +
            (((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C51035 +
             ((C35095 + C35096) * C118 + (C35097 + C35098) * C50819) * C50769) *
                C50957) *
               C50790 -
           ((((C35094 + C35093) * C50819 + (C35092 + C35091) * C118) * C50769 +
             ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C51035) *
                C50957 +
            (((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C50769 +
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C50819 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C118) *
                 C51035) *
                C51063) *
               C51040) *
              C1006 +
          (((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
               C50983 * C1247) *
                  C118 +
              (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
               C50983 * C1251) *
                  C50819) *
                 C51035 +
             ((C34330 + C34331) * C118 + (C34332 + C34333) * C50819) * C50769) *
                C51063 +
            (((C37264 + C37263) * C118 + (C37266 + C37265) * C50819) * C51035 +
             ((C41861 + C41862) * C118 + (C41863 + C41864) * C50819) * C50769) *
                C50957) *
               C51040 -
           ((((C33316 * C7097 + C50983 * C7098 + C33315 * C1159 +
               C33313 * C1164) *
                  C50819 +
              (C33316 * C7095 + C50983 * C7096 + C33315 * C1152 +
               C33313 * C1158) *
                  C118) *
                 C50769 +
             ((C41864 + C41863) * C50819 + (C41862 + C41861) * C118) * C51035) *
                C50957 +
            (((C34337 + C34336) * C50819 + (C34335 + C34334) * C118) * C50769 +
             ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C51035) *
                C51063) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C757 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C752 -
            (C36331 + C36332) * C758 - (C36333 + C36334) * C753 +
            C36631 * C759 + C36632 * C754 - C36757 * C760 - C36758 * C755) *
               C51035 +
           ((C33350 + C33351) * C757 + (C33352 + C33353) * C752 -
            C40939 * C758 - C40940 * C753 + C41333 * C759 + C41334 * C754 -
            (C36655 + C36656) * C760 - (C36657 + C36658) * C755) *
               C50769) *
              C51063 +
          (((C36332 + C36331) * C757 + (C36334 + C36333) * C752 -
            (C36335 + C36336) * C758 - (C36337 + C36338) * C753 +
            (C36651 + C36652) * C759 + (C36653 + C36654) * C754 -
            (C36767 + C36768) * C760 - (C36769 + C36770) * C755) *
               C51035 +
           (C40941 * C757 + C40942 * C752 - C36641 * C758 - C36642 * C753 +
            (C36656 + C36655) * C759 + (C36658 + C36657) * C754 -
            (C33316 * C3246 + C50983 * C3253 + C33315 * C2950 +
             C33313 * C2954) *
                C760 -
            (C33316 * C3254 + C50983 * C3258 + C33315 * C2955 +
             C33313 * C2959) *
                C755) *
               C50769) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C294 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C51047 -
             (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
                C51035 +
            ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
             C40939 * C295 - C40940 * C50835) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
             (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
                C51035 +
            (C40941 * C294 + C40942 * C51047 - C36641 * C295 -
             C36642 * C50835) *
                C50769) *
               C50957) *
              C291 +
          (((C40941 * C295 -
             ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
             C40942 * C50835) *
                C51035 +
            (C40943 * C295 -
             ((C33357 + C33356) * C51047 + (C33355 + C33354) * C294) +
             C40944 * C50835) *
                C50769) *
               C51063 +
           (((C33916 + C33917) * C295 - (C40940 * C51047 + C40939 * C294) +
             (C33918 + C33919) * C50835) *
                C51035 +
            ((C33920 + C33921) * C295 - (C33562 * C51047 + C33561 * C294) +
             (C33922 + C33923) * C50835) *
                C50769) *
               C50957) *
              C292 +
          ((C33566 * C51035 +
            ((C33361 + C33360) * C294 + (C33359 + C33358) * C51047 -
             (C33558 + C33557) * C295 - (C33560 + C33559) * C50835) *
                C50769) *
               C51063 +
           ((C40943 * C294 + C40944 * C51047 - (C33921 + C33920) * C295 -
             (C33923 + C33922) * C50835) *
                C51035 +
            ((C33557 + C33558) * C294 + (C33559 + C33560) * C51047 -
             (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                 C295 -
             (C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                 C50835) *
                C50769) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C294 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C51047 -
             (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
                C51035 +
            ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
             C40939 * C295 - C40940 * C50835) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
             (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
                C51035 +
            (C40941 * C294 + C40942 * C51047 - C36641 * C295 -
             C36642 * C50835) *
                C50769) *
               C50957) *
              C50785 * C1005 +
          ((((C36941 + C36942) * C295 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C51047 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C294) +
             (C36943 + C36944) * C50835) *
                C51035 +
            ((C35091 + C35092) * C295 -
             ((C33740 + C33739) * C51047 + (C33738 + C33737) * C294) +
             (C35093 + C35094) * C50835) *
                C50769) *
               C51063 +
           (((C36946 + C36945) * C295 -
             ((C36944 + C36943) * C51047 + (C36942 + C36941) * C294) +
             (C36948 + C36947) * C50835) *
                C51035 +
            ((C37864 + C37863) * C295 -
             ((C35094 + C35093) * C51047 + (C35092 + C35091) * C294) +
             (C37866 + C37865) * C50835) *
                C50769) *
               C50957) *
              C50785 * C1006 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C294 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C51047 -
             (C37263 + C37264) * C295 - (C37265 + C37266) * C50835) *
                C51035 +
            ((C34330 + C34331) * C294 + (C34332 + C34333) * C51047 -
             (C41862 + C41861) * C295 - (C41864 + C41863) * C50835) *
                C50769) *
               C51063 +
           (((C37264 + C37263) * C294 + (C37266 + C37265) * C51047 -
             (C37267 + C37268) * C295 - (C37269 + C37270) * C50835) *
                C51035 +
            ((C41861 + C41862) * C294 + (C41863 + C41864) * C51047 -
             (C33316 * C3721 + C50983 * C3726 + C33315 * C3430 +
              C33313 * C3434) *
                 C295 -
             (C33316 * C3725 + C50983 * C3733 + C33315 * C3435 +
              C33313 * C3439) *
                 C50835) *
                C50769) *
               C50957) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C627 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C622 -
             (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
             C36631 * C629 + C36632 * C624) *
                C51035 +
            ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
             C40939 * C628 - C40940 * C623 + C41333 * C629 + C41334 * C624) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
             (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
             (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
                C51035 +
            (C40941 * C627 + C40942 * C622 - C36641 * C628 - C36642 * C623 +
             (C36656 + C36655) * C629 + (C36658 + C36657) * C624) *
                C50769) *
               C50957) *
              C50785 * C51049 +
          ((((C36941 + C36942) * C628 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C622 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C627) +
             (C36943 + C36944) * C623 - C36953 * C629 - C36954 * C624) *
                C51035 +
            ((C35091 + C35092) * C628 -
             ((C33740 + C33739) * C622 + (C33738 + C33737) * C627) +
             (C35093 + C35094) * C623 - (C37863 + C37864) * C629 -
             (C37865 + C37866) * C624) *
                C50769) *
               C51063 +
           (((C36946 + C36945) * C628 -
             ((C36944 + C36943) * C622 + (C36942 + C36941) * C627) +
             (C36948 + C36947) * C623 - (C36949 + C36950) * C629 -
             (C36951 + C36952) * C624) *
                C51035 +
            ((C37864 + C37863) * C628 -
             ((C35094 + C35093) * C622 + (C35092 + C35091) * C627) +
             (C37866 + C37865) * C623 -
             (C33316 * C3604 + C50983 * C3607 + C33315 * C3244 +
              C33313 * C3249) *
                 C629 -
             (C33316 * C3608 + C50983 * C3610 + C33315 * C3250 +
              C33313 * C3256) *
                 C624) *
                C50769) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                  C118 +
              (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C50769) *
                C51063 +
            (((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C51035 +
             (C40941 * C118 + C40942 * C50819) * C50769) *
                C50957) *
               C291 -
           (((C33562 * C50819 + C33561 * C118) * C50769 +
             (C40940 * C50819 + C40939 * C118) * C51035) *
                C50957 +
            (((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C50769 +
             ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C51035) *
                C51063) *
               C292 +
           ((C33374 * C51035 +
             ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C50769) *
                C51063 +
            ((C40943 * C118 + C40944 * C50819) * C51035 +
             ((C33557 + C33558) * C118 + (C33559 + C33560) * C50819) * C50769) *
                C50957) *
               C293) *
              C51049 +
          (((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C51035 +
             ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C50769) *
                C51063 +
            (((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C51035 +
             ((C35095 + C35096) * C118 + (C35097 + C35098) * C50819) * C50769) *
                C50957) *
               C292 -
           ((((C35094 + C35093) * C50819 + (C35092 + C35091) * C118) * C50769 +
             ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C51035) *
                C50957 +
            (((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C50769 +
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C50819 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C118) *
                 C51035) *
                C51063) *
               C291 -
           ((((C33316 * C1161 + C50983 * C1165 + C33315 * C896 +
               C33313 * C905) *
                  C50819 +
              (C33316 * C1153 + C50983 * C1160 + C33315 * C881 +
               C33313 * C895) *
                  C118) *
                 C50769 +
             ((C35098 + C35097) * C50819 + (C35096 + C35095) * C118) * C51035) *
                C50957 +
            (((C33748 + C33747) * C50819 + (C33746 + C33745) * C118) * C50769 +
             C33753 * C51035) *
                C51063) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C51035 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C50769) *
               C51063 +
           (((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C51035 +
            (C40941 * C118 + C40942 * C50819) * C50769) *
               C50957) *
              C50785 * C1232 -
          ((((C35094 + C35093) * C50819 + (C35092 + C35091) * C118) * C50769 +
            ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C51035) *
               C50957 +
           (((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C50769 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C51035) *
               C51063) *
              C50785 * C1233 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C51035 +
            ((C34330 + C34331) * C118 + (C34332 + C34333) * C50819) * C50769) *
               C51063 +
           (((C37264 + C37263) * C118 + (C37266 + C37265) * C50819) * C51035 +
            ((C41861 + C41862) * C118 + (C41863 + C41864) * C50819) * C50769) *
               C50957) *
              C50785 * C1234 -
          ((((C33316 * C6500 + C50983 * C6502 + C33315 * C3729 +
              C33313 * C3735) *
                 C50819 +
             (C33316 * C6496 + C50983 * C6499 + C33315 * C3723 +
              C33313 * C3730) *
                 C118) *
                C50769 +
            ((C33316 * C6498 + C50983 * C6501 + C33315 * C3731 +
              C33313 * C3736) *
                 C50819 +
             (C33316 * C6495 + C50983 * C6497 + C33315 * C3724 +
              C33313 * C3732) *
                 C118) *
                C51035) *
               C50957 +
           (((C33316 * C6325 + C50983 * C6329 + C33315 * C1244 +
              C33313 * C1250) *
                 C50819 +
             (C33316 * C6320 + C50983 * C6324 + C33315 * C1238 +
              C33313 * C1245) *
                 C118) *
                C50769 +
            ((C33316 * C6323 + C50983 * C6328 + C33315 * C1246 +
              C33313 * C1251) *
                 C50819 +
             (C33316 * C6319 + C50983 * C6322 + C33315 * C1239 +
              C33313 * C1247) *
                 C118) *
                C51035) *
               C51063) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                  C118 +
              (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C50769) *
                C51063 +
            (((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C51035 +
             (C40941 * C118 + C40942 * C50819) * C50769) *
                C50957) *
               C51093 -
           (((C33562 * C50819 + C33561 * C118) * C50769 +
             (C40940 * C50819 + C40939 * C118) * C51035) *
                C50957 +
            (((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C50769 +
             ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C51035) *
                C51063) *
               C51078 +
           ((C33374 * C51035 +
             ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C50769) *
                C51063 +
            ((C40943 * C118 + C40944 * C50819) * C51035 +
             ((C33557 + C33558) * C118 + (C33559 + C33560) * C50819) * C50769) *
                C50957) *
               C1354) *
              C1765 +
          (((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C51035 +
             ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C50769) *
                C51063 +
            ((C42835 * C118 + C42836 * C50819) * C51035 +
             ((C35095 + C35096) * C118 + (C35097 + C35098) * C50819) * C50769) *
                C50957) *
               C51078 -
           (((C42837 * C50819 + C42838 * C118) * C50769 +
             ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C51035) *
                C50957 +
            (((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C50769 +
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C50819 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C118) *
                 C51035) *
                C51063) *
               C51093 -
           ((((C33316 * C1161 + C50983 * C1165 + C33315 * C896 +
               C33313 * C905) *
                  C50819 +
              (C33316 * C1153 + C50983 * C1160 + C33315 * C881 +
               C33313 * C895) *
                  C118) *
                 C50769 +
             ((C35098 + C35097) * C50819 + (C35096 + C35095) * C118) * C51035) *
                C50957 +
            (((C33748 + C33747) * C50819 + (C33746 + C33745) * C118) * C50769 +
             C33753 * C51035) *
                C51063) *
               C1354) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                  C294 +
              (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                  C51047 -
              (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
                 C51035 +
             ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
              C40939 * C295 - C40940 * C50835) *
                 C50769) *
                C51063 +
            (((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
              (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
                 C51035 +
             (C40941 * C294 + C40942 * C51047 - C36641 * C295 -
              C36642 * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           (((C40941 * C295 -
              ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
              C40942 * C50835) *
                 C51035 +
             (C40943 * C295 -
              ((C33357 + C33356) * C51047 + (C33355 + C33354) * C294) +
              C40944 * C50835) *
                 C50769) *
                C51063 +
            ((C41333 * C295 - (C40940 * C51047 + C40939 * C294) +
              C41334 * C50835) *
                 C51035 +
             ((C33920 + C33921) * C295 - (C33562 * C51047 + C33561 * C294) +
              (C33922 + C33923) * C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C1765 +
          (((((C36941 + C36942) * C295 -
              ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
                C33313 * C488) *
                   C51047 +
               (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
                C33313 * C481) *
                   C294) +
              (C36943 + C36944) * C50835) *
                 C51035 +
             (C42835 * C295 -
              ((C33740 + C33739) * C51047 + (C33738 + C33737) * C294) +
              C42836 * C50835) *
                 C50769) *
                C51063 +
            (((C36946 + C36945) * C295 -
              ((C36944 + C36943) * C51047 + (C36942 + C36941) * C294) +
              (C36948 + C36947) * C50835) *
                 C51035 +
             ((C37864 + C37863) * C295 - (C42837 * C51047 + C42838 * C294) +
              (C37866 + C37865) * C50835) *
                 C50769) *
                C50957) *
               C1480 +
           ((((C33737 + C33738) * C294 + (C33739 + C33740) * C51047 -
              C42838 * C295 - C42837 * C50835) *
                 C51035 +
             ((C33741 + C33742) * C294 + (C33743 + C33744) * C51047 -
              (C35096 + C35095) * C295 - (C35098 + C35097) * C50835) *
                 C50769) *
                C51063 +
            ((C42835 * C294 + C42836 * C51047 - (C37863 + C37864) * C295 -
              (C37865 + C37866) * C50835) *
                 C51035 +
             ((C35095 + C35096) * C294 + (C35097 + C35098) * C51047 -
              (C33316 * C3431 + C50983 * C3437 + C33315 * C880 +
               C33313 * C893) *
                  C295 -
              (C33316 * C3436 + C50983 * C3440 + C33315 * C894 +
               C33313 * C904) *
                  C50835) *
                 C50769) *
                C50957) *
               C50790) *
              C50861)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                  C118 +
              (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C50769) *
                C51063 +
            (((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C51035 +
             (C40941 * C118 + C40942 * C50819) * C50769) *
                C50957) *
               C1480 -
           (((C33562 * C50819 + C33561 * C118) * C50769 +
             (C40940 * C50819 + C40939 * C118) * C51035) *
                C50957 +
            (((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C50769 +
             ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C51035) *
                C51063) *
               C50790) *
              C51095 +
          (((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C51035 +
             ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C50769) *
                C51063 +
            ((C42835 * C118 + C42836 * C50819) * C51035 +
             ((C35095 + C35096) * C118 + (C35097 + C35098) * C50819) * C50769) *
                C50957) *
               C50790 -
           (((C42837 * C50819 + C42838 * C118) * C50769 +
             ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C51035) *
                C50957 +
            (((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C50769 +
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C50819 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C118) *
                 C51035) *
                C51063) *
               C1480) *
              C51084 +
          (((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
               C50983 * C1247) *
                  C118 +
              (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
               C50983 * C1251) *
                  C50819) *
                 C51035 +
             ((C34330 + C34331) * C118 + (C34332 + C34333) * C50819) * C50769) *
                C51063 +
            (((C37264 + C37263) * C118 + (C37266 + C37265) * C50819) * C51035 +
             ((C41861 + C41862) * C118 + (C41863 + C41864) * C50819) * C50769) *
                C50957) *
               C1480 -
           ((((C33316 * C7097 + C50983 * C7098 + C33315 * C1159 +
               C33313 * C1164) *
                  C50819 +
              (C33316 * C7095 + C50983 * C7096 + C33315 * C1152 +
               C33313 * C1158) *
                  C118) *
                 C50769 +
             ((C41864 + C41863) * C50819 + (C41862 + C41861) * C118) * C51035) *
                C50957 +
            (((C34337 + C34336) * C50819 + (C34335 + C34334) * C118) * C50769 +
             ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C51035) *
                C51063) *
               C50790) *
              C2009)) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C51035 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C50769) *
               C51063 +
           (((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C51035 +
            ((C33549 + C33548) * C118 + (C33551 + C33550) * C50819) * C50769) *
               C50957) *
              C112 -
          (((C33562 * C50819 + C33561 * C118) * C50769 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C51035) *
               C50957 +
           (((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C50769 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C51035) *
               C51063) *
              C113 +
          ((C33374 * C51035 +
            ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C50769) *
               C51063 +
           (((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C51035 +
            ((C33557 + C33558) * C118 + (C33559 + C33560) * C50819) * C50769) *
               C50957) *
              C114 -
          ((((C33316 * C1635 + C50983 * C1636 + C33315 * C311 + C33313 * C318) *
                 C50819 +
             (C33316 * C1633 + C50983 * C1634 + C33315 * C300 + C33313 * C310) *
                 C118) *
                C50769 +
            ((C33560 + C33559) * C50819 + (C33558 + C33557) * C118) * C51035) *
               C50957 +
           (((C33365 + C33364) * C50819 + (C33363 + C33362) * C118) * C50769 +
            C33375 * C51035) *
               C51063) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C627 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C622 -
             (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
             C36631 * C629 + C36632 * C624) *
                C51035 +
            ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
             C40939 * C628 - C40940 * C623 + C41333 * C629 + C41334 * C624) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
             (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
             (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
                C51035 +
            (C40941 * C627 + C40942 * C622 - C36641 * C628 - C36642 * C623 +
             (C36656 + C36655) * C629 + (C36658 + C36657) * C624) *
                C50769) *
               C50957) *
              C51040 +
          (((C40941 * C628 -
             ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
             C40942 * C623 - C36641 * C629 - C36642 * C624) *
                C51035 +
            (C40943 * C628 -
             ((C33357 + C33356) * C622 + (C33355 + C33354) * C627) +
             C40944 * C623 - (C33921 + C33920) * C629 -
             (C33923 + C33922) * C624) *
                C50769) *
               C51063 +
           ((C41333 * C628 - (C40940 * C622 + C40939 * C627) + C41334 * C623 -
             (C36655 + C36656) * C629 - (C36657 + C36658) * C624) *
                C51035 +
            ((C33920 + C33921) * C628 - (C33562 * C622 + C33561 * C627) +
             (C33922 + C33923) * C623 -
             (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
                 C629 -
             (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
                 C624) *
                C50769) *
               C50957) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C294 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C51047 -
             (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
                C51035 +
            ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
             C40939 * C295 - C40940 * C50835) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
             (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
                C51035 +
            (C40941 * C294 + C40942 * C51047 - C36641 * C295 -
             C36642 * C50835) *
                C50769) *
               C50957) *
              C291 +
          (((C40941 * C295 -
             ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
             C40942 * C50835) *
                C51035 +
            (C40943 * C295 -
             ((C33357 + C33356) * C51047 + (C33355 + C33354) * C294) +
             C40944 * C50835) *
                C50769) *
               C51063 +
           (((C33916 + C33917) * C295 - (C40940 * C51047 + C40939 * C294) +
             (C33918 + C33919) * C50835) *
                C51035 +
            ((C33920 + C33921) * C295 - (C33562 * C51047 + C33561 * C294) +
             (C33922 + C33923) * C50835) *
                C50769) *
               C50957) *
              C292 +
          ((C33566 * C51035 +
            ((C33361 + C33360) * C294 + (C33359 + C33358) * C51047 -
             (C33558 + C33557) * C295 - (C33560 + C33559) * C50835) *
                C50769) *
               C51063 +
           ((C40943 * C294 + C40944 * C51047 - (C33921 + C33920) * C295 -
             (C33923 + C33922) * C50835) *
                C51035 +
            ((C33557 + C33558) * C294 + (C33559 + C33560) * C51047 -
             (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                 C295 -
             (C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                 C50835) *
                C50769) *
               C50957) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C757 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C752 -
            (C36331 + C36332) * C758 - (C36333 + C36334) * C753 +
            C36631 * C759 + C36632 * C754 - C36757 * C760 - C36758 * C755) *
               C51035 +
           ((C33350 + C33351) * C757 + (C33352 + C33353) * C752 -
            C40939 * C758 - C40940 * C753 + C41333 * C759 + C41334 * C754 -
            (C36655 + C36656) * C760 - (C36657 + C36658) * C755) *
               C50769) *
              C51063 +
          (((C36332 + C36331) * C757 + (C36334 + C36333) * C752 -
            (C36335 + C36336) * C758 - (C36337 + C36338) * C753 +
            (C36651 + C36652) * C759 + (C36653 + C36654) * C754 -
            (C36767 + C36768) * C760 - (C36769 + C36770) * C755) *
               C51035 +
           (C40941 * C757 + C40942 * C752 - C36641 * C758 - C36642 * C753 +
            (C36656 + C36655) * C759 + (C36658 + C36657) * C754 -
            (C33316 * C3246 + C50983 * C3253 + C33315 * C2950 +
             C33313 * C2954) *
                C760 -
            (C33316 * C3254 + C50983 * C3258 + C33315 * C2955 +
             C33313 * C2959) *
                C755) *
               C50769) *
              C50957) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                  C118 +
              (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                  C50819) *
                 C51035 +
             ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C50769) *
                C51063 +
            (((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C51035 +
             (C40941 * C118 + C40942 * C50819) * C50769) *
                C50957) *
               C291 -
           (((C33562 * C50819 + C33561 * C118) * C50769 +
             (C40940 * C50819 + C40939 * C118) * C51035) *
                C50957 +
            (((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C50769 +
             ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C51035) *
                C51063) *
               C292 +
           ((C33374 * C51035 +
             ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C50769) *
                C51063 +
            ((C40943 * C118 + C40944 * C50819) * C51035 +
             ((C33557 + C33558) * C118 + (C33559 + C33560) * C50819) * C50769) *
                C50957) *
               C293) *
              C51049 +
          (((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C51035 +
             ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C50769) *
                C51063 +
            (((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C51035 +
             ((C35095 + C35096) * C118 + (C35097 + C35098) * C50819) * C50769) *
                C50957) *
               C292 -
           ((((C35094 + C35093) * C50819 + (C35092 + C35091) * C118) * C50769 +
             ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C51035) *
                C50957 +
            (((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C50769 +
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C50819 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C118) *
                 C51035) *
                C51063) *
               C291 -
           ((((C33316 * C1161 + C50983 * C1165 + C33315 * C896 +
               C33313 * C905) *
                  C50819 +
              (C33316 * C1153 + C50983 * C1160 + C33315 * C881 +
               C33313 * C895) *
                  C118) *
                 C50769 +
             ((C35098 + C35097) * C50819 + (C35096 + C35095) * C118) * C51035) *
                C50957 +
            (((C33748 + C33747) * C50819 + (C33746 + C33745) * C118) * C50769 +
             C33753 * C51035) *
                C51063) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C627 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C622 -
             (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
             C36631 * C629 + C36632 * C624) *
                C51035 +
            ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
             C40939 * C628 - C40940 * C623 + C41333 * C629 + C41334 * C624) *
                C50769) *
               C51063 +
           (((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
             (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
             (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
                C51035 +
            (C40941 * C627 + C40942 * C622 - C36641 * C628 - C36642 * C623 +
             (C36656 + C36655) * C629 + (C36658 + C36657) * C624) *
                C50769) *
               C50957) *
              C50785 * C51049 +
          ((((C36941 + C36942) * C628 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C622 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C627) +
             (C36943 + C36944) * C623 - C36953 * C629 - C36954 * C624) *
                C51035 +
            ((C35091 + C35092) * C628 -
             ((C33740 + C33739) * C622 + (C33738 + C33737) * C627) +
             (C35093 + C35094) * C623 - (C37863 + C37864) * C629 -
             (C37865 + C37866) * C624) *
                C50769) *
               C51063 +
           (((C36946 + C36945) * C628 -
             ((C36944 + C36943) * C622 + (C36942 + C36941) * C627) +
             (C36948 + C36947) * C623 - (C36949 + C36950) * C629 -
             (C36951 + C36952) * C624) *
                C51035 +
            ((C37864 + C37863) * C628 -
             ((C35094 + C35093) * C622 + (C35092 + C35091) * C627) +
             (C37866 + C37865) * C623 -
             (C33316 * C3604 + C50983 * C3607 + C33315 * C3244 +
              C33313 * C3249) *
                 C629 -
             (C33316 * C3608 + C50983 * C3610 + C33315 * C3250 +
              C33313 * C3256) *
                 C624) *
                C50769) *
               C50957) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C1355 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C1350 -
                     (C47201 + C47202 + C47203) * C1356 -
                     (C47204 + C47205 + C47206) * C50835) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C1355 +
                     (C47206 + C47205 + C47204) * C1350 -
                     (C47513 + C47512 + C47511) * C1356 -
                     (C47516 + C47515 + C47514) * C50835) *
                        C50764 * C50957) *
                       C51093 +
                   (((C44461 + C44460 + C44459) * C1356 -
                     ((C44276 + C44275 + C44274) * C1350 +
                      (C44273 + C44272 + C44271) * C1355) +
                     (C44464 + C44463 + C44462) * C50835) *
                        C50764 * C51063 +
                    ((C44811 + C44812 + C44813) * C1356 -
                     ((C44462 + C44463 + C44464) * C1350 +
                      (C44459 + C44460 + C44461) * C1355) +
                     (C44814 + C44815 + C44816) * C50835) *
                        C50764 * C50957) *
                       C51078 +
                   (((C44282 + C44281 + C44280) * C1355 +
                     (C44279 + C44278 + C44277) * C1350 -
                     (C44467 + C44466 + C44465) * C1356 -
                     (C44470 + C44469 + C44468) * C50835) *
                        C50764 * C51063 +
                    ((C44465 + C44466 + C44467) * C1355 +
                     (C44468 + C44469 + C44470) * C1350 -
                     (C44233 * C3431 + C44230 * C3437 + C44232 * C880 +
                      C51099 * C893 + C44231 * C632 + C51098 * C639) *
                         C1356 -
                     (C44233 * C3436 + C44230 * C3440 + C44232 * C894 +
                      C51099 * C904 + C44231 * C640 + C51098 * C647) *
                         C50835) *
                        C50764 * C50957) *
                       C1354) *
                  C50849) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C1482 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51094 -
                     (C47201 + C47202 + C47203) * C1483 -
                     (C47204 + C47205 + C47206) * C51081 +
                     (C47511 + C47512 + C47513) * C1484 +
                     (C47514 + C47515 + C47516) * C1479) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C1482 +
                     (C47206 + C47205 + C47204) * C51094 -
                     (C47513 + C47512 + C47511) * C1483 -
                     (C47516 + C47515 + C47514) * C51081 +
                     (C47629 + C47628 + C47627) * C1484 +
                     (C47632 + C47631 + C47630) * C1479) *
                        C50764 * C50957) *
                       C1480 +
                   (((C44461 + C44460 + C44459) * C1483 -
                     ((C44276 + C44275 + C44274) * C51094 +
                      (C44273 + C44272 + C44271) * C1482) +
                     (C44464 + C44463 + C44462) * C51081 -
                     (C44813 + C44812 + C44811) * C1484 -
                     (C44816 + C44815 + C44814) * C1479) *
                        C50764 * C51063 +
                    ((C44811 + C44812 + C44813) * C1483 -
                     ((C44462 + C44463 + C44464) * C51094 +
                      (C44459 + C44460 + C44461) * C1482) +
                     (C44814 + C44815 + C44816) * C51081 -
                     (C44233 * C3604 + C44230 * C3607 + C44232 * C3244 +
                      C51099 * C3249 + C44231 * C762 + C51098 * C767) *
                         C1484 -
                     (C44233 * C3608 + C44230 * C3610 + C44232 * C3250 +
                      C51099 * C3256 + C44231 * C768 + C51098 * C774) *
                         C1479) *
                        C50764 * C50957) *
                       C50790) *
                  C50849) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C1355 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C1350 -
                      (C47201 + C47202 + C47203) * C1356 -
                      (C47204 + C47205 + C47206) * C50835) *
                         C50764 * C51063 +
                     ((C47203 + C47202 + C47201) * C1355 +
                      (C47206 + C47205 + C47204) * C1350 -
                      (C47513 + C47512 + C47511) * C1356 -
                      (C47516 + C47515 + C47514) * C50835) *
                         C50764 * C50957) *
                        C1480 +
                    (((C44461 + C44460 + C44459) * C1356 -
                      ((C44276 + C44275 + C44274) * C1350 +
                       (C44273 + C44272 + C44271) * C1355) +
                      (C44464 + C44463 + C44462) * C50835) *
                         C50764 * C51063 +
                     ((C44811 + C44812 + C44813) * C1356 -
                      ((C44462 + C44463 + C44464) * C1350 +
                       (C44459 + C44460 + C44461) * C1355) +
                      (C44814 + C44815 + C44816) * C50835) *
                         C50764 * C50957) *
                        C50790) *
                       C51049 +
                   ((((C47803 + C47804 + C47805) * C1356 -
                      ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                        C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                           C1350 +
                       (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                        C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                           C1355) +
                      (C47806 + C47807 + C47808) * C50835) *
                         C50764 * C51063 +
                     ((C47811 + C47810 + C47809) * C1356 -
                      ((C47808 + C47807 + C47806) * C1350 +
                       (C47805 + C47804 + C47803) * C1355) +
                      (C47814 + C47813 + C47812) * C50835) *
                         C50764 * C50957) *
                        C1480 +
                    (((C44641 + C44642 + C44643) * C1355 +
                      (C44644 + C44645 + C44646) * C1350 -
                      (C45969 + C45968 + C45967) * C1356 -
                      (C45972 + C45971 + C45970) * C50835) *
                         C50764 * C51063 +
                     ((C45967 + C45968 + C45969) * C1355 +
                      (C45970 + C45971 + C45972) * C1350 -
                      (C44233 * C3721 + C44230 * C3726 + C44232 * C3430 +
                       C51099 * C3434 + C44231 * C878 + C51098 * C889) *
                          C1356 -
                      (C44233 * C3725 + C44230 * C3733 + C44232 * C3435 +
                       C51099 * C3439 + C44231 * C890 + C51098 * C902) *
                          C50835) *
                         C50764 * C50957) *
                        C50790) *
                       C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C1355 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C1350 -
                      (C47201 + C47202 + C47203) * C1356 -
                      (C47204 + C47205 + C47206) * C50835) *
                         C50764 * C51063 +
                     ((C47203 + C47202 + C47201) * C1355 +
                      (C47206 + C47205 + C47204) * C1350 -
                      (C47513 + C47512 + C47511) * C1356 -
                      (C47516 + C47515 + C47514) * C50835) *
                         C50764 * C50957) *
                        C51040 +
                    (((C44461 + C44460 + C44459) * C1356 -
                      ((C44276 + C44275 + C44274) * C1350 +
                       (C44273 + C44272 + C44271) * C1355) +
                      (C44464 + C44463 + C44462) * C50835) *
                         C50764 * C51063 +
                     ((C44811 + C44812 + C44813) * C1356 -
                      ((C44462 + C44463 + C44464) * C1350 +
                       (C44459 + C44460 + C44461) * C1355) +
                      (C44814 + C44815 + C44816) * C50835) *
                         C50764 * C50957) *
                        C50790) *
                       C1765 +
                   ((((C47803 + C47804 + C47805) * C1356 -
                      ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                        C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                           C1350 +
                       (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                        C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                           C1355) +
                      (C47806 + C47807 + C47808) * C50835) *
                         C50764 * C51063 +
                     ((C47811 + C47810 + C47809) * C1356 -
                      ((C47808 + C47807 + C47806) * C1350 +
                       (C47805 + C47804 + C47803) * C1355) +
                      (C47814 + C47813 + C47812) * C50835) *
                         C50764 * C50957) *
                        C51040 +
                    (((C44641 + C44642 + C44643) * C1355 +
                      (C44644 + C44645 + C44646) * C1350 -
                      (C45969 + C45968 + C45967) * C1356 -
                      (C45972 + C45971 + C45970) * C50835) *
                         C50764 * C51063 +
                     ((C45967 + C45968 + C45969) * C1355 +
                      (C45970 + C45971 + C45972) * C1350 -
                      (C44233 * C3721 + C44230 * C3726 + C44232 * C3430 +
                       C51099 * C3434 + C44231 * C878 + C51098 * C889) *
                          C1356 -
                      (C44233 * C3725 + C44230 * C3733 + C44232 * C3435 +
                       C51099 * C3439 + C44231 * C890 + C51098 * C902) *
                          C50835) *
                         C50764 * C50957) *
                        C50790) *
                       C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C1482 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51094 -
                     (C47201 + C47202 + C47203) * C1483 -
                     (C47204 + C47205 + C47206) * C51081 +
                     (C47511 + C47512 + C47513) * C1484 +
                     (C47514 + C47515 + C47516) * C1479) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C1482 +
                     (C47206 + C47205 + C47204) * C51094 -
                     (C47513 + C47512 + C47511) * C1483 -
                     (C47516 + C47515 + C47514) * C51081 +
                     (C47629 + C47628 + C47627) * C1484 +
                     (C47632 + C47631 + C47630) * C1479) *
                        C50764 * C50957) *
                       C50785 * C1765 +
                   (((C47803 + C47804 + C47805) * C1483 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C51094 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C1482) +
                     (C47806 + C47807 + C47808) * C51081 -
                     (C47809 + C47810 + C47811) * C1484 -
                     (C47812 + C47813 + C47814) * C1479) *
                        C50764 * C51063 +
                    ((C47811 + C47810 + C47809) * C1483 -
                     ((C47808 + C47807 + C47806) * C51094 +
                      (C47805 + C47804 + C47803) * C1482) +
                     (C47814 + C47813 + C47812) * C51081 -
                     (C44233 * C20694 + C44230 * C20696 + C44232 * C3603 +
                      C51099 * C3605 + C44231 * C3243 + C51098 * C3247) *
                         C1484 -
                     (C44233 * C20695 + C44230 * C20697 + C44232 * C3606 +
                      C51099 * C3609 + C44231 * C3248 + C51098 * C3255) *
                         C1479) *
                        C50764 * C50957) *
                       C50785 * C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C1355 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C1350 -
                     (C47201 + C47202 + C47203) * C1356 -
                     (C47204 + C47205 + C47206) * C50835) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C1355 +
                     (C47206 + C47205 + C47204) * C1350 -
                     (C47513 + C47512 + C47511) * C1356 -
                     (C47516 + C47515 + C47514) * C50835) *
                        C50764 * C50957) *
                       C50785 * C51095 +
                   (((C47803 + C47804 + C47805) * C1356 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C1350 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C1355) +
                     (C47806 + C47807 + C47808) * C50835) *
                        C50764 * C51063 +
                    ((C47811 + C47810 + C47809) * C1356 -
                     ((C47808 + C47807 + C47806) * C1350 +
                      (C47805 + C47804 + C47803) * C1355) +
                     (C47814 + C47813 + C47812) * C50835) *
                        C50764 * C50957) *
                       C50785 * C51084 +
                   (((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                      C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                         C1355 +
                     (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                      C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                         C1350 -
                     (C48119 + C48120 + C48121) * C1356 -
                     (C48122 + C48123 + C48124) * C50835) *
                        C50764 * C51063 +
                    ((C48121 + C48120 + C48119) * C1355 +
                     (C48124 + C48123 + C48122) * C1350 -
                     (C44233 * C22838 + C44230 * C22839 + C44232 * C3722 +
                      C51099 * C3728 + C44231 * C3429 + C51098 * C3432) *
                         C1356 -
                     (C44233 * C22840 + C44230 * C22841 + C44232 * C3727 +
                      C51099 * C3734 + C44231 * C3433 + C51098 * C3438) *
                         C50835) *
                        C50764 * C50957) *
                       C50785 * C2009)) /
                 (p * q * std::sqrt(p + q));
    d2ee[171] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C627 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C622 -
                     (C47201 + C47202 + C47203) * C628 -
                     (C47204 + C47205 + C47206) * C623 +
                     (C47511 + C47512 + C47513) * C629 +
                     (C47514 + C47515 + C47516) * C624) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C627 +
                     (C47206 + C47205 + C47204) * C622 -
                     (C47513 + C47512 + C47511) * C628 -
                     (C47516 + C47515 + C47514) * C623 +
                     (C44231 * C761 + C51098 * C765 + C44232 * C3243 +
                      C51099 * C3247 + C44233 * C3603 + C44230 * C3605) *
                         C629 +
                     (C44231 * C766 + C51098 * C773 + C44232 * C3248 +
                      C51099 * C3255 + C44233 * C3606 + C44230 * C3609) *
                         C624) *
                        C50764 * C50957) *
                       C51040 +
                   (((C44461 + C44460 + C44459) * C628 -
                     ((C44276 + C44275 + C44274) * C622 +
                      (C44273 + C44272 + C44271) * C627) +
                     (C44464 + C44463 + C44462) * C623 -
                     (C44813 + C44812 + C44811) * C629 -
                     (C44816 + C44815 + C44814) * C624) *
                        C50764 * C51063 +
                    ((C44811 + C44812 + C44813) * C628 -
                     ((C44462 + C44463 + C44464) * C622 +
                      (C44459 + C44460 + C44461) * C627) +
                     (C44814 + C44815 + C44816) * C623 -
                     (C44233 * C3604 + C44230 * C3607 + C44232 * C3244 +
                      C51099 * C3249 + C44231 * C762 + C51098 * C767) *
                         C629 -
                     (C44233 * C3608 + C44230 * C3610 + C44232 * C3250 +
                      C51099 * C3256 + C44231 * C768 + C51098 * C774) *
                         C624) *
                        C50764 * C50957) *
                       C50790) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C118 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C50819) *
                        C50764 * C51063 +
                    ((C44231 * C296 + C51098 * C302 + C44232 * C875 +
                      C51099 * C883 + C44233 * C1150 + C44230 * C1154) *
                         C118 +
                     (C44231 * C303 + C51098 * C314 + C44232 * C884 +
                      C51099 * C899 + C44233 * C1155 + C44230 * C1162) *
                         C50819) *
                        C50764 * C50957) *
                       C112 -
                   (((C44462 + C44463 + C44464) * C50819 +
                     (C44459 + C44460 + C44461) * C118) *
                        C50764 * C50957 +
                    ((C44276 + C44275 + C44274) * C50819 +
                     (C44273 + C44272 + C44271) * C118) *
                        C50764 * C51063) *
                       C113 +
                   (((C44282 + C44281 + C44280) * C118 +
                     (C44279 + C44278 + C44277) * C50819) *
                        C50764 * C51063 +
                    ((C44465 + C44466 + C44467) * C118 +
                     (C44468 + C44469 + C44470) * C50819) *
                        C50764 * C50957) *
                       C114 -
                   (((C44233 * C1161 + C44230 * C1165 + C44232 * C896 +
                      C51099 * C905 + C44231 * C309 + C51098 * C317) *
                         C50819 +
                     (C44233 * C1153 + C44230 * C1160 + C44232 * C881 +
                      C51099 * C895 + C44231 * C299 + C51098 * C308) *
                         C118) *
                        C50764 * C50957 +
                    ((C44288 + C44287 + C44286) * C50819 +
                     (C44285 + C44284 + C44283) * C118) *
                        C50764 * C51063) *
                       C115) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C50764 * C51063 +
                     ((C47203 + C47202 + C47201) * C118 +
                      (C47206 + C47205 + C47204) * C50819) *
                         C50764 * C50957) *
                        C51040 -
                    (((C44462 + C44463 + C44464) * C50819 +
                      (C44459 + C44460 + C44461) * C118) *
                         C50764 * C50957 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C50764 * C51063) *
                        C50790) *
                       C1005 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C50764 * C51063 +
                     ((C45967 + C45968 + C45969) * C118 +
                      (C45970 + C45971 + C45972) * C50819) *
                         C50764 * C50957) *
                        C50790 -
                    (((C47808 + C47807 + C47806) * C50819 +
                      (C47805 + C47804 + C47803) * C118) *
                         C50764 * C50957 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C50764 * C51063) *
                        C51040) *
                       C1006 +
                   ((((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                       C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                          C118 +
                      (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                       C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                          C50819) *
                         C50764 * C51063 +
                     ((C44231 * C1150 + C51098 * C1154 + C44232 * C3724 +
                       C51099 * C3732 + C44233 * C6495 + C44230 * C6497) *
                          C118 +
                      (C44231 * C1155 + C51098 * C1162 + C44232 * C3731 +
                       C51099 * C3736 + C44233 * C6498 + C44230 * C6501) *
                          C50819) *
                         C50764 * C50957) *
                        C51040 -
                    (((C44233 * C6500 + C44230 * C6502 + C44232 * C3729 +
                       C51099 * C3735 + C44231 * C1157 + C51098 * C1163) *
                          C50819 +
                      (C44233 * C6496 + C44230 * C6499 + C44232 * C3723 +
                       C51099 * C3730 + C44231 * C1151 + C51098 * C1156) *
                          C118) *
                         C50764 * C50957 +
                     ((C45224 + C45223 + C45222) * C50819 +
                      (C45221 + C45220 + C45219) * C118) *
                         C50764 * C51063) *
                        C50790) *
                       C1007)) /
                     (p * q * std::sqrt(p + q));
    d2ee[172] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                     C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                        C757 +
                    (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                     C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                        C752 -
                    (C47201 + C47202 + C47203) * C758 -
                    (C47204 + C47205 + C47206) * C753 +
                    (C47511 + C47512 + C47513) * C759 +
                    (C47514 + C47515 + C47516) * C754 -
                    (C47627 + C47628 + C47629) * C760 -
                    (C47630 + C47631 + C47632) * C755) *
                       C50764 * C51063 +
                   ((C47203 + C47202 + C47201) * C757 +
                    (C47206 + C47205 + C47204) * C752 -
                    (C47513 + C47512 + C47511) * C758 -
                    (C47516 + C47515 + C47514) * C753 +
                    (C47629 + C47628 + C47627) * C759 +
                    (C47632 + C47631 + C47630) * C754 -
                    (C44233 * C20618 + C44230 * C20619 + C44232 * C3245 +
                     C51099 * C3251 + C44231 * C2949 + C51098 * C2952) *
                        C760 -
                    (C44233 * C20620 + C44230 * C20621 + C44232 * C3252 +
                     C51099 * C3257 + C44231 * C2953 + C51098 * C2958) *
                        C755) *
                       C50764 * C50957) *
                  C50785 * C50849) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C294 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51047 -
                     (C47201 + C47202 + C47203) * C295 -
                     (C47204 + C47205 + C47206) * C50835) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C294 +
                     (C47206 + C47205 + C47204) * C51047 -
                     (C44233 * C3429 + C44230 * C3432 + C44232 * C876 +
                      C51099 * C885 + C44231 * C630 + C51098 * C635) *
                         C295 -
                     (C44233 * C3433 + C44230 * C3438 + C44232 * C886 +
                      C51099 * C900 + C44231 * C636 + C51098 * C645) *
                         C50835) *
                        C50764 * C50957) *
                       C291 +
                   (((C44461 + C44460 + C44459) * C295 -
                     ((C44276 + C44275 + C44274) * C51047 +
                      (C44273 + C44272 + C44271) * C294) +
                     (C44464 + C44463 + C44462) * C50835) *
                        C50764 * C51063 +
                    ((C44811 + C44812 + C44813) * C295 -
                     ((C44462 + C44463 + C44464) * C51047 +
                      (C44459 + C44460 + C44461) * C294) +
                     (C44814 + C44815 + C44816) * C50835) *
                        C50764 * C50957) *
                       C292 +
                   (((C44282 + C44281 + C44280) * C294 +
                     (C44279 + C44278 + C44277) * C51047 -
                     (C44467 + C44466 + C44465) * C295 -
                     (C44470 + C44469 + C44468) * C50835) *
                        C50764 * C51063 +
                    ((C44465 + C44466 + C44467) * C294 +
                     (C44468 + C44469 + C44470) * C51047 -
                     (C44233 * C3431 + C44230 * C3437 + C44232 * C880 +
                      C51099 * C893 + C44231 * C632 + C51098 * C639) *
                         C295 -
                     (C44233 * C3436 + C44230 * C3440 + C44232 * C894 +
                      C51099 * C904 + C44231 * C640 + C51098 * C647) *
                         C50835) *
                        C50764 * C50957) *
                       C293) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C294 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51047 -
                     (C47201 + C47202 + C47203) * C295 -
                     (C47204 + C47205 + C47206) * C50835) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C294 +
                     (C47206 + C47205 + C47204) * C51047 -
                     (C47513 + C47512 + C47511) * C295 -
                     (C47516 + C47515 + C47514) * C50835) *
                        C50764 * C50957) *
                       C50785 * C1005 +
                   (((C47803 + C47804 + C47805) * C295 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C51047 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C294) +
                     (C47806 + C47807 + C47808) * C50835) *
                        C50764 * C51063 +
                    ((C47811 + C47810 + C47809) * C295 -
                     ((C47808 + C47807 + C47806) * C51047 +
                      (C47805 + C47804 + C47803) * C294) +
                     (C47814 + C47813 + C47812) * C50835) *
                        C50764 * C50957) *
                       C50785 * C1006 +
                   (((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                      C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                         C294 +
                     (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                      C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                         C51047 -
                     (C48119 + C48120 + C48121) * C295 -
                     (C48122 + C48123 + C48124) * C50835) *
                        C50764 * C51063 +
                    ((C48121 + C48120 + C48119) * C294 +
                     (C48124 + C48123 + C48122) * C51047 -
                     (C44233 * C22838 + C44230 * C22839 + C44232 * C3722 +
                      C51099 * C3728 + C44231 * C3429 + C51098 * C3432) *
                         C295 -
                     (C44233 * C22840 + C44230 * C22841 + C44232 * C3727 +
                      C51099 * C3734 + C44231 * C3433 + C51098 * C3438) *
                         C50835) *
                        C50764 * C50957) *
                       C50785 * C1007)) /
                     (p * q * std::sqrt(p + q));
    d2ee[173] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C627 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C622 -
                     (C47201 + C47202 + C47203) * C628 -
                     (C47204 + C47205 + C47206) * C623 +
                     (C47511 + C47512 + C47513) * C629 +
                     (C47514 + C47515 + C47516) * C624) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C627 +
                     (C47206 + C47205 + C47204) * C622 -
                     (C47513 + C47512 + C47511) * C628 -
                     (C47516 + C47515 + C47514) * C623 +
                     (C47629 + C47628 + C47627) * C629 +
                     (C47632 + C47631 + C47630) * C624) *
                        C50764 * C50957) *
                       C50785 * C51049 +
                   (((C47803 + C47804 + C47805) * C628 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C622 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C627) +
                     (C47806 + C47807 + C47808) * C623 -
                     (C47809 + C47810 + C47811) * C629 -
                     (C47812 + C47813 + C47814) * C624) *
                        C50764 * C51063 +
                    ((C47811 + C47810 + C47809) * C628 -
                     ((C47808 + C47807 + C47806) * C622 +
                      (C47805 + C47804 + C47803) * C627) +
                     (C47814 + C47813 + C47812) * C623 -
                     (C44233 * C20694 + C44230 * C20696 + C44232 * C3603 +
                      C51099 * C3605 + C44231 * C3243 + C51098 * C3247) *
                         C629 -
                     (C44233 * C20695 + C44230 * C20697 + C44232 * C3606 +
                      C51099 * C3609 + C44231 * C3248 + C51098 * C3255) *
                         C624) *
                        C50764 * C50957) *
                       C50785 * C50861)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C50764 * C51063 +
                     ((C47203 + C47202 + C47201) * C118 +
                      (C47206 + C47205 + C47204) * C50819) *
                         C50764 * C50957) *
                        C291 -
                    (((C44462 + C44463 + C44464) * C50819 +
                      (C44459 + C44460 + C44461) * C118) *
                         C50764 * C50957 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C50764 * C51063) *
                        C292 +
                    (((C44282 + C44281 + C44280) * C118 +
                      (C44279 + C44278 + C44277) * C50819) *
                         C50764 * C51063 +
                     ((C44465 + C44466 + C44467) * C118 +
                      (C44468 + C44469 + C44470) * C50819) *
                         C50764 * C50957) *
                        C293) *
                       C51049 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C50764 * C51063 +
                     ((C45967 + C45968 + C45969) * C118 +
                      (C45970 + C45971 + C45972) * C50819) *
                         C50764 * C50957) *
                        C292 -
                    (((C44233 * C3731 + C44230 * C3736 + C44232 * C1155 +
                       C51099 * C1162 + C44231 * C884 + C51098 * C899) *
                          C50819 +
                      (C44233 * C3724 + C44230 * C3732 + C44232 * C1150 +
                       C51099 * C1154 + C44231 * C875 + C51098 * C883) *
                          C118) *
                         C50764 * C50957 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C50764 * C51063) *
                        C291 -
                    (((C44233 * C7097 + C44230 * C7098 + C44232 * C1159 +
                       C51099 * C1164 + C44231 * C892 + C51098 * C903) *
                          C50819 +
                      (C44233 * C7095 + C44230 * C7096 + C44232 * C1152 +
                       C51099 * C1158 + C44231 * C879 + C51098 * C891) *
                          C118) *
                         C50764 * C50957 +
                     ((C44652 + C44651 + C44650) * C50819 +
                      (C44649 + C44648 + C44647) * C118) *
                         C50764 * C51063) *
                        C293) *
                       C50861)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C118 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C50819) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C118 +
                     (C47206 + C47205 + C47204) * C50819) *
                        C50764 * C50957) *
                       C50785 * C1232 -
                   (((C47808 + C47807 + C47806) * C50819 +
                     (C47805 + C47804 + C47803) * C118) *
                        C50764 * C50957 +
                    ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                      C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                         C50819 +
                     (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                      C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                         C118) *
                        C50764 * C51063) *
                       C50785 * C1233 +
                   (((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                      C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                         C118 +
                     (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                      C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                         C50819) *
                        C50764 * C51063 +
                    ((C48121 + C48120 + C48119) * C118 +
                     (C48124 + C48123 + C48122) * C50819) *
                        C50764 * C50957) *
                       C50785 * C1234 -
                   (((C44233 * C22959 + C44230 * C22961 + C44232 * C6498 +
                      C51099 * C6501 + C44231 * C3731 + C51098 * C3736) *
                         C50819 +
                     (C44233 * C22958 + C44230 * C22960 + C44232 * C6495 +
                      C51099 * C6497 + C44231 * C3724 + C51098 * C3732) *
                         C118) *
                        C50764 * C50957 +
                    ((C44233 * C6605 + C44230 * C6608 + C44232 * C6323 +
                      C51099 * C6328 + C44231 * C1246 + C51098 * C1251) *
                         C50819 +
                     (C44233 * C6602 + C44230 * C6606 + C44232 * C6319 +
                      C51099 * C6322 + C44231 * C1239 + C51098 * C1247) *
                         C118) *
                        C50764 * C51063) *
                       C50785 * C1235)) /
                     (p * q * std::sqrt(p + q));
    d2ee[174] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C50764 * C51063 +
                     ((C47203 + C47202 + C47201) * C118 +
                      (C47206 + C47205 + C47204) * C50819) *
                         C50764 * C50957) *
                        C51093 -
                    (((C44462 + C44463 + C44464) * C50819 +
                      (C44459 + C44460 + C44461) * C118) *
                         C50764 * C50957 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C50764 * C51063) *
                        C51078 +
                    (((C44282 + C44281 + C44280) * C118 +
                      (C44279 + C44278 + C44277) * C50819) *
                         C50764 * C51063 +
                     ((C44465 + C44466 + C44467) * C118 +
                      (C44468 + C44469 + C44470) * C50819) *
                         C50764 * C50957) *
                        C1354) *
                       C1765 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C50764 * C51063 +
                     ((C45967 + C45968 + C45969) * C118 +
                      (C45970 + C45971 + C45972) * C50819) *
                         C50764 * C50957) *
                        C51078 -
                    (((C47808 + C47807 + C47806) * C50819 +
                      (C47805 + C47804 + C47803) * C118) *
                         C50764 * C50957 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C50764 * C51063) *
                        C51093 -
                    (((C44233 * C7097 + C44230 * C7098 + C44232 * C1159 +
                       C51099 * C1164 + C44231 * C892 + C51098 * C903) *
                          C50819 +
                      (C44233 * C7095 + C44230 * C7096 + C44232 * C1152 +
                       C51099 * C1158 + C44231 * C879 + C51098 * C891) *
                          C118) *
                         C50764 * C50957 +
                     ((C44652 + C44651 + C44650) * C50819 +
                      (C44649 + C44648 + C44647) * C118) *
                         C50764 * C51063) *
                        C1354) *
                       C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C294 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C51047 -
                      (C47201 + C47202 + C47203) * C295 -
                      (C47204 + C47205 + C47206) * C50835) *
                         C50764 * C51063 +
                     ((C47203 + C47202 + C47201) * C294 +
                      (C47206 + C47205 + C47204) * C51047 -
                      (C47513 + C47512 + C47511) * C295 -
                      (C47516 + C47515 + C47514) * C50835) *
                         C50764 * C50957) *
                        C1480 +
                    (((C44461 + C44460 + C44459) * C295 -
                      ((C44276 + C44275 + C44274) * C51047 +
                       (C44273 + C44272 + C44271) * C294) +
                      (C44464 + C44463 + C44462) * C50835) *
                         C50764 * C51063 +
                     ((C44811 + C44812 + C44813) * C295 -
                      ((C44462 + C44463 + C44464) * C51047 +
                       (C44459 + C44460 + C44461) * C294) +
                      (C44814 + C44815 + C44816) * C50835) *
                         C50764 * C50957) *
                        C50790) *
                       C1765 +
                   ((((C47803 + C47804 + C47805) * C295 -
                      ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                        C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                           C51047 +
                       (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                        C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                           C294) +
                      (C47806 + C47807 + C47808) * C50835) *
                         C50764 * C51063 +
                     ((C47811 + C47810 + C47809) * C295 -
                      ((C47808 + C47807 + C47806) * C51047 +
                       (C47805 + C47804 + C47803) * C294) +
                      (C47814 + C47813 + C47812) * C50835) *
                         C50764 * C50957) *
                        C1480 +
                    (((C44641 + C44642 + C44643) * C294 +
                      (C44644 + C44645 + C44646) * C51047 -
                      (C45969 + C45968 + C45967) * C295 -
                      (C45972 + C45971 + C45970) * C50835) *
                         C50764 * C51063 +
                     ((C45967 + C45968 + C45969) * C294 +
                      (C45970 + C45971 + C45972) * C51047 -
                      (C44233 * C3721 + C44230 * C3726 + C44232 * C3430 +
                       C51099 * C3434 + C44231 * C878 + C51098 * C889) *
                          C295 -
                      (C44233 * C3725 + C44230 * C3733 + C44232 * C3435 +
                       C51099 * C3439 + C44231 * C890 + C51098 * C902) *
                          C50835) *
                         C50764 * C50957) *
                        C50790) *
                       C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C50764 * C51063 +
                     ((C47203 + C47202 + C47201) * C118 +
                      (C47206 + C47205 + C47204) * C50819) *
                         C50764 * C50957) *
                        C1480 -
                    (((C44462 + C44463 + C44464) * C50819 +
                      (C44459 + C44460 + C44461) * C118) *
                         C50764 * C50957 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C50764 * C51063) *
                        C50790) *
                       C51095 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C50764 * C51063 +
                     ((C45967 + C45968 + C45969) * C118 +
                      (C45970 + C45971 + C45972) * C50819) *
                         C50764 * C50957) *
                        C50790 -
                    (((C47808 + C47807 + C47806) * C50819 +
                      (C47805 + C47804 + C47803) * C118) *
                         C50764 * C50957 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C50764 * C51063) *
                        C1480) *
                       C51084 +
                   ((((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                       C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                          C118 +
                      (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                       C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                          C50819) *
                         C50764 * C51063 +
                     ((C48121 + C48120 + C48119) * C118 +
                      (C48124 + C48123 + C48122) * C50819) *
                         C50764 * C50957) *
                        C1480 -
                    (((C44233 * C6500 + C44230 * C6502 + C44232 * C3729 +
                       C51099 * C3735 + C44231 * C1157 + C51098 * C1163) *
                          C50819 +
                      (C44233 * C6496 + C44230 * C6499 + C44232 * C3723 +
                       C51099 * C3730 + C44231 * C1151 + C51098 * C1156) *
                          C118) *
                         C50764 * C50957 +
                     ((C45224 + C45223 + C45222) * C50819 +
                      (C45221 + C45220 + C45219) * C118) *
                         C50764 * C51063) *
                        C50790) *
                       C2009)) /
                 (p * q * std::sqrt(p + q));
    d2ee[177] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C118 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C50819) *
                        C50764 * C51063 +
                    ((C44231 * C296 + C51098 * C302 + C44232 * C875 +
                      C51099 * C883 + C44233 * C1150 + C44230 * C1154) *
                         C118 +
                     (C44231 * C303 + C51098 * C314 + C44232 * C884 +
                      C51099 * C899 + C44233 * C1155 + C44230 * C1162) *
                         C50819) *
                        C50764 * C50957) *
                       C112 -
                   (((C44462 + C44463 + C44464) * C50819 +
                     (C44459 + C44460 + C44461) * C118) *
                        C50764 * C50957 +
                    ((C44276 + C44275 + C44274) * C50819 +
                     (C44273 + C44272 + C44271) * C118) *
                        C50764 * C51063) *
                       C113 +
                   (((C44282 + C44281 + C44280) * C118 +
                     (C44279 + C44278 + C44277) * C50819) *
                        C50764 * C51063 +
                    ((C44465 + C44466 + C44467) * C118 +
                     (C44468 + C44469 + C44470) * C50819) *
                        C50764 * C50957) *
                       C114 -
                   (((C44233 * C1161 + C44230 * C1165 + C44232 * C896 +
                      C51099 * C905 + C44231 * C309 + C51098 * C317) *
                         C50819 +
                     (C44233 * C1153 + C44230 * C1160 + C44232 * C881 +
                      C51099 * C895 + C44231 * C299 + C51098 * C308) *
                         C118) *
                        C50764 * C50957 +
                    ((C44288 + C44287 + C44286) * C50819 +
                     (C44285 + C44284 + C44283) * C118) *
                        C50764 * C51063) *
                       C115) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C627 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C622 -
                     (C47201 + C47202 + C47203) * C628 -
                     (C47204 + C47205 + C47206) * C623 +
                     (C47511 + C47512 + C47513) * C629 +
                     (C47514 + C47515 + C47516) * C624) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C627 +
                     (C47206 + C47205 + C47204) * C622 -
                     (C47513 + C47512 + C47511) * C628 -
                     (C47516 + C47515 + C47514) * C623 +
                     (C44231 * C761 + C51098 * C765 + C44232 * C3243 +
                      C51099 * C3247 + C44233 * C3603 + C44230 * C3605) *
                         C629 +
                     (C44231 * C766 + C51098 * C773 + C44232 * C3248 +
                      C51099 * C3255 + C44233 * C3606 + C44230 * C3609) *
                         C624) *
                        C50764 * C50957) *
                       C51040 +
                   (((C44461 + C44460 + C44459) * C628 -
                     ((C44276 + C44275 + C44274) * C622 +
                      (C44273 + C44272 + C44271) * C627) +
                     (C44464 + C44463 + C44462) * C623 -
                     (C44813 + C44812 + C44811) * C629 -
                     (C44816 + C44815 + C44814) * C624) *
                        C50764 * C51063 +
                    ((C44811 + C44812 + C44813) * C628 -
                     ((C44462 + C44463 + C44464) * C622 +
                      (C44459 + C44460 + C44461) * C627) +
                     (C44814 + C44815 + C44816) * C623 -
                     (C44233 * C3604 + C44230 * C3607 + C44232 * C3244 +
                      C51099 * C3249 + C44231 * C762 + C51098 * C767) *
                         C629 -
                     (C44233 * C3608 + C44230 * C3610 + C44232 * C3250 +
                      C51099 * C3256 + C44231 * C768 + C51098 * C774) *
                         C624) *
                        C50764 * C50957) *
                       C50790) *
                  C50849) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C294 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51047 -
                     (C47201 + C47202 + C47203) * C295 -
                     (C47204 + C47205 + C47206) * C50835) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C294 +
                     (C47206 + C47205 + C47204) * C51047 -
                     (C44233 * C3429 + C44230 * C3432 + C44232 * C876 +
                      C51099 * C885 + C44231 * C630 + C51098 * C635) *
                         C295 -
                     (C44233 * C3433 + C44230 * C3438 + C44232 * C886 +
                      C51099 * C900 + C44231 * C636 + C51098 * C645) *
                         C50835) *
                        C50764 * C50957) *
                       C291 +
                   (((C44461 + C44460 + C44459) * C295 -
                     ((C44276 + C44275 + C44274) * C51047 +
                      (C44273 + C44272 + C44271) * C294) +
                     (C44464 + C44463 + C44462) * C50835) *
                        C50764 * C51063 +
                    ((C44811 + C44812 + C44813) * C295 -
                     ((C44462 + C44463 + C44464) * C51047 +
                      (C44459 + C44460 + C44461) * C294) +
                     (C44814 + C44815 + C44816) * C50835) *
                        C50764 * C50957) *
                       C292 +
                   (((C44282 + C44281 + C44280) * C294 +
                     (C44279 + C44278 + C44277) * C51047 -
                     (C44467 + C44466 + C44465) * C295 -
                     (C44470 + C44469 + C44468) * C50835) *
                        C50764 * C51063 +
                    ((C44465 + C44466 + C44467) * C294 +
                     (C44468 + C44469 + C44470) * C51047 -
                     (C44233 * C3431 + C44230 * C3437 + C44232 * C880 +
                      C51099 * C893 + C44231 * C632 + C51098 * C639) *
                         C295 -
                     (C44233 * C3436 + C44230 * C3440 + C44232 * C894 +
                      C51099 * C904 + C44231 * C640 + C51098 * C647) *
                         C50835) *
                        C50764 * C50957) *
                       C293) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                     C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                        C757 +
                    (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                     C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                        C752 -
                    (C47201 + C47202 + C47203) * C758 -
                    (C47204 + C47205 + C47206) * C753 +
                    (C47511 + C47512 + C47513) * C759 +
                    (C47514 + C47515 + C47516) * C754 -
                    (C47627 + C47628 + C47629) * C760 -
                    (C47630 + C47631 + C47632) * C755) *
                       C50764 * C51063 +
                   ((C47203 + C47202 + C47201) * C757 +
                    (C47206 + C47205 + C47204) * C752 -
                    (C47513 + C47512 + C47511) * C758 -
                    (C47516 + C47515 + C47514) * C753 +
                    (C47629 + C47628 + C47627) * C759 +
                    (C47632 + C47631 + C47630) * C754 -
                    (C44233 * C20618 + C44230 * C20619 + C44232 * C3245 +
                     C51099 * C3251 + C44231 * C2949 + C51098 * C2952) *
                        C760 -
                    (C44233 * C20620 + C44230 * C20621 + C44232 * C3252 +
                     C51099 * C3257 + C44231 * C2953 + C51098 * C2958) *
                        C755) *
                       C50764 * C50957) *
                  C50785 * C50849) /
                     (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C50764 * C51063 +
                     ((C47203 + C47202 + C47201) * C118 +
                      (C47206 + C47205 + C47204) * C50819) *
                         C50764 * C50957) *
                        C291 -
                    (((C44462 + C44463 + C44464) * C50819 +
                      (C44459 + C44460 + C44461) * C118) *
                         C50764 * C50957 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C50764 * C51063) *
                        C292 +
                    (((C44282 + C44281 + C44280) * C118 +
                      (C44279 + C44278 + C44277) * C50819) *
                         C50764 * C51063 +
                     ((C44465 + C44466 + C44467) * C118 +
                      (C44468 + C44469 + C44470) * C50819) *
                         C50764 * C50957) *
                        C293) *
                       C51049 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C50764 * C51063 +
                     ((C45967 + C45968 + C45969) * C118 +
                      (C45970 + C45971 + C45972) * C50819) *
                         C50764 * C50957) *
                        C292 -
                    (((C44233 * C3731 + C44230 * C3736 + C44232 * C1155 +
                       C51099 * C1162 + C44231 * C884 + C51098 * C899) *
                          C50819 +
                      (C44233 * C3724 + C44230 * C3732 + C44232 * C1150 +
                       C51099 * C1154 + C44231 * C875 + C51098 * C883) *
                          C118) *
                         C50764 * C50957 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C50764 * C51063) *
                        C291 -
                    (((C44233 * C7097 + C44230 * C7098 + C44232 * C1159 +
                       C51099 * C1164 + C44231 * C892 + C51098 * C903) *
                          C50819 +
                      (C44233 * C7095 + C44230 * C7096 + C44232 * C1152 +
                       C51099 * C1158 + C44231 * C879 + C51098 * C891) *
                          C118) *
                         C50764 * C50957 +
                     ((C44652 + C44651 + C44650) * C50819 +
                      (C44649 + C44648 + C44647) * C118) *
                         C50764 * C51063) *
                        C293) *
                       C50861)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C627 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C622 -
                     (C47201 + C47202 + C47203) * C628 -
                     (C47204 + C47205 + C47206) * C623 +
                     (C47511 + C47512 + C47513) * C629 +
                     (C47514 + C47515 + C47516) * C624) *
                        C50764 * C51063 +
                    ((C47203 + C47202 + C47201) * C627 +
                     (C47206 + C47205 + C47204) * C622 -
                     (C47513 + C47512 + C47511) * C628 -
                     (C47516 + C47515 + C47514) * C623 +
                     (C47629 + C47628 + C47627) * C629 +
                     (C47632 + C47631 + C47630) * C624) *
                        C50764 * C50957) *
                       C50785 * C51049 +
                   (((C47803 + C47804 + C47805) * C628 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C622 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C627) +
                     (C47806 + C47807 + C47808) * C623 -
                     (C47809 + C47810 + C47811) * C629 -
                     (C47812 + C47813 + C47814) * C624) *
                        C50764 * C51063 +
                    ((C47811 + C47810 + C47809) * C628 -
                     ((C47808 + C47807 + C47806) * C622 +
                      (C47805 + C47804 + C47803) * C627) +
                     (C47814 + C47813 + C47812) * C623 -
                     (C44233 * C20694 + C44230 * C20696 + C44232 * C3603 +
                      C51099 * C3605 + C44231 * C3243 + C51098 * C3247) *
                         C629 -
                     (C44233 * C20695 + C44230 * C20697 + C44232 * C3606 +
                      C51099 * C3609 + C44231 * C3248 + C51098 * C3255) *
                         C624) *
                        C50764 * C50957) *
                       C50785 * C50861)) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1355 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C1350 -
            (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
            (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           (C36631 * C1355 + C36632 * C1350 - C36757 * C1356 -
            C36758 * C50835) *
               C50764 * C2438) *
              C51093 +
          (((C33549 + C33548) * C1356 -
            ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
            (C33551 + C33550) * C50835) *
               C50764 * C2436 +
           ((C33916 + C33917) * C1356 -
            ((C33550 + C33551) * C1350 + (C33548 + C33549) * C1355) +
            (C33918 + C33919) * C50835) *
               C50764 * C2437 +
           ((C36656 + C36655) * C1356 - (C36642 * C1350 + C36641 * C1355) +
            (C36658 + C36657) * C50835) *
               C50764 * C2438) *
              C51078 +
          (C34734 * C50764 * C2436 +
           ((C33554 + C33553) * C1355 + (C33556 + C33555) * C1350 -
            (C33921 + C33920) * C1356 - (C33923 + C33922) * C50835) *
               C50764 * C2437 +
           ((C33920 + C33921) * C1355 + (C33922 + C33923) * C1350 -
            (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
                C1356 -
            (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
                C50835) *
               C50764 * C2438) *
              C1354) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1355 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C1350 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C1356 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C50835) *
               C17338 +
           ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
            (C33548 + C33549) * C1356 - (C33550 + C33551) * C50835) *
               C17339 +
           C34734 * C17340) *
              C50908 * C51093 +
          (((C33549 + C33548) * C1356 -
            ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
            (C33551 + C33550) * C50835) *
               C17338 +
           ((C33554 + C33553) * C1356 -
            ((C33357 + C33356) * C1350 + (C33355 + C33354) * C1355) +
            (C33556 + C33555) * C50835) *
               C17339 +
           ((C33557 + C33558) * C1356 - (C33368 * C1350 + C33369 * C1355) +
            (C33559 + C33560) * C50835) *
               C17340) *
              C50908 * C51078 +
          (C34734 * C17338 +
           ((C33361 + C33360) * C1355 + (C33359 + C33358) * C1350 -
            (C33558 + C33557) * C1356 - (C33560 + C33559) * C50835) *
               C17339 +
           ((C33362 + C33363) * C1355 + (C33364 + C33365) * C1350 -
            (C33316 * C1633 + C50983 * C1634 + C33315 * C300 + C33313 * C310) *
                C1356 -
            (C33316 * C1635 + C50983 * C1636 + C33315 * C311 + C33313 * C318) *
                C50835) *
               C17340) *
              C50908 * C1354) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C1355 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C1350 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C1356 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C50835) *
              C50764 * C50908 * C51093 +
          ((C38908 * C297 + C38904 * C304 + C38909 * C877 + C38905 * C887 +
            C38910 * C1151 + C38906 * C1156 + C38911 * C3723 + C38907 * C3730) *
               C1356 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C1350 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C1355) +
           (C38908 * C305 + C38904 * C315 + C38909 * C888 + C38905 * C901 +
            C38910 * C1157 + C38906 * C1163 + C38911 * C3729 + C38907 * C3735) *
               C50835) *
              C50764 * C50908 * C51078 +
          ((C38908 * C121 + C38904 * C130 + C38909 * C467 + C38905 * C474 +
            C38910 * C1010 + C38906 * C1017 + C38911 * C1237 + C38907 * C1243) *
               C1355 +
           (C38908 * C131 + C38904 * C142 + C38909 * C475 + C38905 * C485 +
            C38910 * C1018 + C38906 * C1025 + C38911 * C1242 + C38907 * C1249) *
               C1350 -
           (C38911 * C7095 + C38907 * C7096 + C38910 * C1152 + C38906 * C1158 +
            C38909 * C879 + C38905 * C891 + C38908 * C298 + C38904 * C306) *
               C1356 -
           (C38911 * C7097 + C38907 * C7098 + C38910 * C1159 + C38906 * C1164 +
            C38909 * C892 + C38905 * C903 + C38908 * C307 + C38904 * C316) *
               C50835) *
              C50764 * C50908 * C1354) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1482 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51094 -
            (C36331 + C36332) * C1483 - (C36333 + C36334) * C51081 +
            C36631 * C1484 + C36632 * C1479) *
               C50764 * C2436 +
           ((C36332 + C36331) * C1482 + (C36334 + C36333) * C51094 -
            (C36335 + C36336) * C1483 - (C36337 + C36338) * C51081 +
            (C36651 + C36652) * C1484 + (C36653 + C36654) * C1479) *
               C50764 * C2437 +
           (C36631 * C1482 + C36632 * C51094 - C36757 * C1483 -
            C36758 * C51081 + (C36768 + C36767) * C1484 +
            (C36770 + C36769) * C1479) *
               C50764 * C2438) *
              C1480 +
          (((C33549 + C33548) * C1483 -
            ((C33353 + C33352) * C51094 + (C33351 + C33350) * C1482) +
            (C33551 + C33550) * C51081 - C36641 * C1484 - C36642 * C1479) *
               C50764 * C2436 +
           ((C33916 + C33917) * C1483 -
            ((C33550 + C33551) * C51094 + (C33548 + C33549) * C1482) +
            (C33918 + C33919) * C51081 - (C36655 + C36656) * C1484 -
            (C36657 + C36658) * C1479) *
               C50764 * C2437 +
           ((C36656 + C36655) * C1483 - (C36642 * C51094 + C36641 * C1482) +
            (C36658 + C36657) * C51081 -
            (C33316 * C3246 + C50983 * C3253 + C33315 * C2950 +
             C33313 * C2954) *
                C1484 -
            (C33316 * C3254 + C50983 * C3258 + C33315 * C2955 +
             C33313 * C2959) *
                C1479) *
               C50764 * C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1482 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51094 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C1483 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C51081 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C1484 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C1479) *
               C17338 +
           ((C33350 + C33351) * C1482 + (C33352 + C33353) * C51094 -
            (C33548 + C33549) * C1483 - (C33550 + C33551) * C51081 +
            (C33916 + C33917) * C1484 + (C33918 + C33919) * C1479) *
               C17339 +
           (C33366 * C1482 + C33367 * C51094 - C33561 * C1483 -
            C33562 * C51081 + (C33920 + C33921) * C1484 +
            (C33922 + C33923) * C1479) *
               C17340) *
              C50908 * C1480 +
          (((C33549 + C33548) * C1483 -
            ((C33353 + C33352) * C51094 + (C33351 + C33350) * C1482) +
            (C33551 + C33550) * C51081 - (C33917 + C33916) * C1484 -
            (C33919 + C33918) * C1479) *
               C17338 +
           ((C33554 + C33553) * C1483 -
            ((C33357 + C33356) * C51094 + (C33355 + C33354) * C1482) +
            (C33556 + C33555) * C51081 - (C33921 + C33920) * C1484 -
            (C33923 + C33922) * C1479) *
               C17339 +
           ((C33557 + C33558) * C1483 - (C33368 * C51094 + C33369 * C1482) +
            (C33559 + C33560) * C51081 -
            (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                C1484 -
            (C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                C1479) *
               C17340) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C1482 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C51094 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C1483 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C51081 +
           (C38908 * C630 + C38904 * C635 + C38909 * C876 + C38905 * C885 +
            C38910 * C3429 + C38906 * C3432 + C38911 * C3722 + C38907 * C3728) *
               C1484 +
           (C38908 * C636 + C38904 * C645 + C38909 * C886 + C38905 * C900 +
            C38910 * C3433 + C38906 * C3438 + C38911 * C3727 + C38907 * C3734) *
               C1479) *
              C50764 * C50908 * C1480 +
          ((C38908 * C297 + C38904 * C304 + C38909 * C877 + C38905 * C887 +
            C38910 * C1151 + C38906 * C1156 + C38911 * C3723 + C38907 * C3730) *
               C1483 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C51094 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C1482) +
           (C38908 * C305 + C38904 * C315 + C38909 * C888 + C38905 * C901 +
            C38910 * C1157 + C38906 * C1163 + C38911 * C3729 + C38907 * C3735) *
               C51081 -
           (C38911 * C3721 + C38907 * C3726 + C38910 * C3430 + C38906 * C3434 +
            C38909 * C878 + C38905 * C889 + C38908 * C631 + C38904 * C637) *
               C1484 -
           (C38911 * C3725 + C38907 * C3733 + C38910 * C3435 + C38906 * C3439 +
            C38909 * C890 + C38905 * C902 + C38908 * C638 + C38904 * C646) *
               C1479) *
              C50764 * C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
                C50764 * C2436 +
            ((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
             (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
                C50764 * C2437 +
            (C36631 * C1355 + C36632 * C1350 - C36757 * C1356 -
             C36758 * C50835) *
                C50764 * C2438) *
               C1480 +
           (((C33549 + C33548) * C1356 -
             ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
             (C33551 + C33550) * C50835) *
                C50764 * C2436 +
            ((C33916 + C33917) * C1356 -
             ((C33550 + C33551) * C1350 + (C33548 + C33549) * C1355) +
             (C33918 + C33919) * C50835) *
                C50764 * C2437 +
            ((C36656 + C36655) * C1356 - (C36642 * C1350 + C36641 * C1355) +
             (C36658 + C36657) * C50835) *
                C50764 * C2438) *
               C50790) *
              C51049 +
          ((((C36941 + C36942) * C1356 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C1350 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1355) +
             (C36943 + C36944) * C50835) *
                C50764 * C2436 +
            ((C36946 + C36945) * C1356 -
             ((C36944 + C36943) * C1350 + (C36942 + C36941) * C1355) +
             (C36948 + C36947) * C50835) *
                C50764 * C2437 +
            ((C36950 + C36949) * C1356 - (C36954 * C1350 + C36953 * C1355) +
             (C36952 + C36951) * C50835) *
                C50764 * C2438) *
               C1480 +
           (((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
             (C35092 + C35091) * C1356 - (C35094 + C35093) * C50835) *
                C50764 * C2436 +
            ((C35091 + C35092) * C1355 + (C35093 + C35094) * C1350 -
             (C37863 + C37864) * C1356 - (C37865 + C37866) * C50835) *
                C50764 * C2437 +
            ((C37864 + C37863) * C1355 + (C37866 + C37865) * C1350 -
             (C33316 * C3604 + C50983 * C3607 + C33315 * C3244 +
              C33313 * C3249) *
                 C1356 -
             (C33316 * C3608 + C50983 * C3610 + C33315 * C3250 +
              C33313 * C3256) *
                 C50835) *
                C50764 * C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                 C1356 -
             (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                 C50835) *
                C17338 +
            ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
             (C33548 + C33549) * C1356 - (C33550 + C33551) * C50835) *
                C17339 +
            C34734 * C17340) *
               C50908 * C1480 +
           (((C33549 + C33548) * C1356 -
             ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
             (C33551 + C33550) * C50835) *
                C17338 +
            ((C33554 + C33553) * C1356 -
             ((C33357 + C33356) * C1350 + (C33355 + C33354) * C1355) +
             (C33556 + C33555) * C50835) *
                C17339 +
            ((C33557 + C33558) * C1356 - (C33368 * C1350 + C33369 * C1355) +
             (C33559 + C33560) * C50835) *
                C17340) *
               C50908 * C50790) *
              C51049 +
          ((((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                 C1356 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C1350 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1355) +
             (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                 C50835) *
                C17338 +
            ((C35091 + C35092) * C1356 -
             ((C33740 + C33739) * C1350 + (C33738 + C33737) * C1355) +
             (C35093 + C35094) * C50835) *
                C17339 +
            ((C35095 + C35096) * C1356 - (C33749 * C1350 + C33750 * C1355) +
             (C35097 + C35098) * C50835) *
                C17340) *
               C50908 * C1480 +
           (((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
             (C35092 + C35091) * C1356 - (C35094 + C35093) * C50835) *
                C17338 +
            ((C33741 + C33742) * C1355 + (C33743 + C33744) * C1350 -
             (C35096 + C35095) * C1356 - (C35098 + C35097) * C50835) *
                C17339 +
            ((C33745 + C33746) * C1355 + (C33747 + C33748) * C1350 -
             (C33316 * C1153 + C50983 * C1160 + C33315 * C881 + C33313 * C895) *
                 C1356 -
             (C33316 * C1161 + C50983 * C1165 + C33315 * C896 + C33313 * C905) *
                 C50835) *
                C17340) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
             C38910 * C1008 + C38906 * C1013 + C38911 * C1239 +
             C38907 * C1247) *
                C1355 +
            (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
             C38910 * C1014 + C38906 * C1023 + C38911 * C1246 +
             C38907 * C1251) *
                C1350 -
            (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
             C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
                C1356 -
            (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
             C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
                C50835) *
               C50764 * C50908 * C1480 +
           ((C38908 * C297 + C38904 * C304 + C38909 * C877 + C38905 * C887 +
             C38910 * C1151 + C38906 * C1156 + C38911 * C3723 +
             C38907 * C3730) *
                C1356 -
            ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 +
              C38906 * C1024 + C38909 * C473 + C38905 * C484 + C38908 * C129 +
              C38904 * C141) *
                 C1350 +
             (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 +
              C38906 * C1015 + C38909 * C466 + C38905 * C472 + C38908 * C120 +
              C38904 * C128) *
                 C1355) +
            (C38908 * C305 + C38904 * C315 + C38909 * C888 + C38905 * C901 +
             C38910 * C1157 + C38906 * C1163 + C38911 * C3729 +
             C38907 * C3735) *
                C50835) *
               C50764 * C50908 * C50790) *
              C51049 +
          (((C38908 * C875 + C38904 * C883 + C38909 * C1150 + C38905 * C1154 +
             C38910 * C3724 + C38906 * C3732 + C38911 * C6495 +
             C38907 * C6497) *
                C1356 -
            ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 +
              C38906 * C1251 + C38909 * C1014 + C38905 * C1023 + C38908 * C480 +
              C38904 * C488) *
                 C1350 +
             (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 +
              C38906 * C1247 + C38909 * C1008 + C38905 * C1013 + C38908 * C470 +
              C38904 * C481) *
                 C1355) +
            (C38908 * C884 + C38904 * C899 + C38909 * C1155 + C38905 * C1162 +
             C38910 * C3731 + C38906 * C3736 + C38911 * C6498 +
             C38907 * C6501) *
                C50835) *
               C50764 * C50908 * C1480 +
           ((C38908 * C466 + C38904 * C472 + C38909 * C1009 + C38905 * C1015 +
             C38910 * C1238 + C38906 * C1245 + C38911 * C6320 +
             C38907 * C6324) *
                C1355 +
            (C38908 * C473 + C38904 * C484 + C38909 * C1016 + C38905 * C1024 +
             C38910 * C1244 + C38906 * C1250 + C38911 * C6325 +
             C38907 * C6329) *
                C1350 -
            (C38911 * C6496 + C38907 * C6499 + C38910 * C3723 + C38906 * C3730 +
             C38909 * C1151 + C38905 * C1156 + C38908 * C877 + C38904 * C887) *
                C1356 -
            (C38911 * C6500 + C38907 * C6502 + C38910 * C3729 + C38906 * C3735 +
             C38909 * C1157 + C38905 * C1163 + C38908 * C888 + C38904 * C901) *
                C50835) *
               C50764 * C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
                C50764 * C2436 +
            ((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
             (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
                C50764 * C2437 +
            (C36631 * C1355 + C36632 * C1350 - C36757 * C1356 -
             C36758 * C50835) *
                C50764 * C2438) *
               C51040 +
           (((C33549 + C33548) * C1356 -
             ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
             (C33551 + C33550) * C50835) *
                C50764 * C2436 +
            ((C33916 + C33917) * C1356 -
             ((C33550 + C33551) * C1350 + (C33548 + C33549) * C1355) +
             (C33918 + C33919) * C50835) *
                C50764 * C2437 +
            ((C36656 + C36655) * C1356 - (C36642 * C1350 + C36641 * C1355) +
             (C36658 + C36657) * C50835) *
                C50764 * C2438) *
               C50790) *
              C1765 +
          ((((C36941 + C36942) * C1356 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C1350 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1355) +
             (C36943 + C36944) * C50835) *
                C50764 * C2436 +
            ((C36946 + C36945) * C1356 -
             ((C36944 + C36943) * C1350 + (C36942 + C36941) * C1355) +
             (C36948 + C36947) * C50835) *
                C50764 * C2437 +
            ((C36950 + C36949) * C1356 - (C36954 * C1350 + C36953 * C1355) +
             (C36952 + C36951) * C50835) *
                C50764 * C2438) *
               C51040 +
           (((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
             (C35092 + C35091) * C1356 - (C35094 + C35093) * C50835) *
                C50764 * C2436 +
            ((C35091 + C35092) * C1355 + (C35093 + C35094) * C1350 -
             (C37863 + C37864) * C1356 - (C37865 + C37866) * C50835) *
                C50764 * C2437 +
            ((C37864 + C37863) * C1355 + (C37866 + C37865) * C1350 -
             (C33316 * C3604 + C50983 * C3607 + C33315 * C3244 +
              C33313 * C3249) *
                 C1356 -
             (C33316 * C3608 + C50983 * C3610 + C33315 * C3250 +
              C33313 * C3256) *
                 C50835) *
                C50764 * C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                 C1356 -
             (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                 C50835) *
                C17338 +
            ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
             (C33548 + C33549) * C1356 - (C33550 + C33551) * C50835) *
                C17339 +
            C34734 * C17340) *
               C50908 * C51040 +
           (((C33549 + C33548) * C1356 -
             ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
             (C33551 + C33550) * C50835) *
                C17338 +
            ((C33554 + C33553) * C1356 -
             ((C33357 + C33356) * C1350 + (C33355 + C33354) * C1355) +
             (C33556 + C33555) * C50835) *
                C17339 +
            ((C33557 + C33558) * C1356 - (C33368 * C1350 + C33369 * C1355) +
             (C33559 + C33560) * C50835) *
                C17340) *
               C50908 * C50790) *
              C1765 +
          ((((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                 C1356 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C1350 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1355) +
             (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                 C50835) *
                C17338 +
            ((C35091 + C35092) * C1356 -
             ((C33740 + C33739) * C1350 + (C33738 + C33737) * C1355) +
             (C35093 + C35094) * C50835) *
                C17339 +
            ((C35095 + C35096) * C1356 - (C33749 * C1350 + C33750 * C1355) +
             (C35097 + C35098) * C50835) *
                C17340) *
               C50908 * C51040 +
           (((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
             (C35092 + C35091) * C1356 - (C35094 + C35093) * C50835) *
                C17338 +
            ((C33741 + C33742) * C1355 + (C33743 + C33744) * C1350 -
             (C35096 + C35095) * C1356 - (C35098 + C35097) * C50835) *
                C17339 +
            ((C33745 + C33746) * C1355 + (C33747 + C33748) * C1350 -
             (C33316 * C1153 + C50983 * C1160 + C33315 * C881 + C33313 * C895) *
                 C1356 -
             (C33316 * C1161 + C50983 * C1165 + C33315 * C896 + C33313 * C905) *
                 C50835) *
                C17340) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
             C38910 * C1008 + C38906 * C1013 + C38911 * C1239 +
             C38907 * C1247) *
                C1355 +
            (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
             C38910 * C1014 + C38906 * C1023 + C38911 * C1246 +
             C38907 * C1251) *
                C1350 -
            (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
             C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
                C1356 -
            (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
             C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
                C50835) *
               C50764 * C50908 * C51040 +
           ((C38908 * C297 + C38904 * C304 + C38909 * C877 + C38905 * C887 +
             C38910 * C1151 + C38906 * C1156 + C38911 * C3723 +
             C38907 * C3730) *
                C1356 -
            ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 +
              C38906 * C1024 + C38909 * C473 + C38905 * C484 + C38908 * C129 +
              C38904 * C141) *
                 C1350 +
             (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 +
              C38906 * C1015 + C38909 * C466 + C38905 * C472 + C38908 * C120 +
              C38904 * C128) *
                 C1355) +
            (C38908 * C305 + C38904 * C315 + C38909 * C888 + C38905 * C901 +
             C38910 * C1157 + C38906 * C1163 + C38911 * C3729 +
             C38907 * C3735) *
                C50835) *
               C50764 * C50908 * C50790) *
              C1765 +
          (((C38908 * C875 + C38904 * C883 + C38909 * C1150 + C38905 * C1154 +
             C38910 * C3724 + C38906 * C3732 + C38911 * C6495 +
             C38907 * C6497) *
                C1356 -
            ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 +
              C38906 * C1251 + C38909 * C1014 + C38905 * C1023 + C38908 * C480 +
              C38904 * C488) *
                 C1350 +
             (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 +
              C38906 * C1247 + C38909 * C1008 + C38905 * C1013 + C38908 * C470 +
              C38904 * C481) *
                 C1355) +
            (C38908 * C884 + C38904 * C899 + C38909 * C1155 + C38905 * C1162 +
             C38910 * C3731 + C38906 * C3736 + C38911 * C6498 +
             C38907 * C6501) *
                C50835) *
               C50764 * C50908 * C51040 +
           ((C38908 * C466 + C38904 * C472 + C38909 * C1009 + C38905 * C1015 +
             C38910 * C1238 + C38906 * C1245 + C38911 * C6320 +
             C38907 * C6324) *
                C1355 +
            (C38908 * C473 + C38904 * C484 + C38909 * C1016 + C38905 * C1024 +
             C38910 * C1244 + C38906 * C1250 + C38911 * C6325 +
             C38907 * C6329) *
                C1350 -
            (C38911 * C6496 + C38907 * C6499 + C38910 * C3723 + C38906 * C3730 +
             C38909 * C1151 + C38905 * C1156 + C38908 * C877 + C38904 * C887) *
                C1356 -
            (C38911 * C6500 + C38907 * C6502 + C38910 * C3729 + C38906 * C3735 +
             C38909 * C1157 + C38905 * C1163 + C38908 * C888 + C38904 * C901) *
                C50835) *
               C50764 * C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1482 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51094 -
            (C36331 + C36332) * C1483 - (C36333 + C36334) * C51081 +
            C36631 * C1484 + C36632 * C1479) *
               C50764 * C2436 +
           ((C36332 + C36331) * C1482 + (C36334 + C36333) * C51094 -
            (C36335 + C36336) * C1483 - (C36337 + C36338) * C51081 +
            (C36651 + C36652) * C1484 + (C36653 + C36654) * C1479) *
               C50764 * C2437 +
           (C36631 * C1482 + C36632 * C51094 - C36757 * C1483 -
            C36758 * C51081 + (C36768 + C36767) * C1484 +
            (C36770 + C36769) * C1479) *
               C50764 * C2438) *
              C50785 * C1765 +
          (((C36941 + C36942) * C1483 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C51094 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C1482) +
            (C36943 + C36944) * C51081 - C36953 * C1484 - C36954 * C1479) *
               C50764 * C2436 +
           ((C36946 + C36945) * C1483 -
            ((C36944 + C36943) * C51094 + (C36942 + C36941) * C1482) +
            (C36948 + C36947) * C51081 - (C36949 + C36950) * C1484 -
            (C36951 + C36952) * C1479) *
               C50764 * C2437 +
           ((C36950 + C36949) * C1483 - (C36954 * C51094 + C36953 * C1482) +
            (C36952 + C36951) * C51081 -
            (C33316 * C20618 + C50983 * C20619 + C33315 * C3245 +
             C33313 * C3251) *
                C1484 -
            (C33316 * C20620 + C50983 * C20621 + C33315 * C3252 +
             C33313 * C3257) *
                C1479) *
               C50764 * C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1482 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51094 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C1483 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C51081 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C1484 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C1479) *
               C17338 +
           ((C33350 + C33351) * C1482 + (C33352 + C33353) * C51094 -
            (C33548 + C33549) * C1483 - (C33550 + C33551) * C51081 +
            (C33916 + C33917) * C1484 + (C33918 + C33919) * C1479) *
               C17339 +
           (C33366 * C1482 + C33367 * C51094 - C33561 * C1483 -
            C33562 * C51081 + (C33920 + C33921) * C1484 +
            (C33922 + C33923) * C1479) *
               C17340) *
              C50908 * C50785 * C1765 +
          (((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                C1483 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C51094 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C1482) +
            (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                C51081 -
            (C33316 * C3429 + C50983 * C3432 + C33315 * C876 + C33313 * C885) *
                C1484 -
            (C33316 * C3433 + C50983 * C3438 + C33315 * C886 + C33313 * C900) *
                C1479) *
               C17338 +
           ((C35091 + C35092) * C1483 -
            ((C33740 + C33739) * C51094 + (C33738 + C33737) * C1482) +
            (C35093 + C35094) * C51081 -
            (C33316 * C3430 + C50983 * C3434 + C33315 * C878 + C33313 * C889) *
                C1484 -
            (C33316 * C3435 + C50983 * C3439 + C33315 * C890 + C33313 * C902) *
                C1479) *
               C17339 +
           ((C35095 + C35096) * C1483 - (C33749 * C51094 + C33750 * C1482) +
            (C35097 + C35098) * C51081 -
            (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                C1484 -
            (C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                C1479) *
               C17340) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C1482 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C51094 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C1483 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C51081 +
           (C38908 * C630 + C38904 * C635 + C38909 * C876 + C38905 * C885 +
            C38910 * C3429 + C38906 * C3432 + C38911 * C3722 + C38907 * C3728) *
               C1484 +
           (C38908 * C636 + C38904 * C645 + C38909 * C886 + C38905 * C900 +
            C38910 * C3433 + C38906 * C3438 + C38911 * C3727 + C38907 * C3734) *
               C1479) *
              C50764 * C50908 * C50785 * C1765 +
          ((C38908 * C875 + C38904 * C883 + C38909 * C1150 + C38905 * C1154 +
            C38910 * C3724 + C38906 * C3732 + C38911 * C6495 + C38907 * C6497) *
               C1483 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C51094 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C1482) +
           (C38908 * C884 + C38904 * C899 + C38909 * C1155 + C38905 * C1162 +
            C38910 * C3731 + C38906 * C3736 + C38911 * C6498 + C38907 * C6501) *
               C51081 -
           (C38911 * C22838 + C38907 * C22839 + C38910 * C3722 +
            C38906 * C3728 + C38909 * C3429 + C38905 * C3432 + C38908 * C876 +
            C38904 * C885) *
               C1484 -
           (C38911 * C22840 + C38907 * C22841 + C38910 * C3727 +
            C38906 * C3734 + C38909 * C3433 + C38905 * C3438 + C38908 * C886 +
            C38904 * C900) *
               C1479) *
              C50764 * C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1355 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C1350 -
            (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
            (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           (C36631 * C1355 + C36632 * C1350 - C36757 * C1356 -
            C36758 * C50835) *
               C50764 * C2438) *
              C50785 * C51095 +
          (((C36941 + C36942) * C1356 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C1350 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C1355) +
            (C36943 + C36944) * C50835) *
               C50764 * C2436 +
           ((C36946 + C36945) * C1356 -
            ((C36944 + C36943) * C1350 + (C36942 + C36941) * C1355) +
            (C36948 + C36947) * C50835) *
               C50764 * C2437 +
           ((C36950 + C36949) * C1356 - (C36954 * C1350 + C36953 * C1355) +
            (C36952 + C36951) * C50835) *
               C50764 * C2438) *
              C50785 * C51084 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C1355 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C1350 -
            (C37263 + C37264) * C1356 - (C37265 + C37266) * C50835) *
               C50764 * C2436 +
           ((C37264 + C37263) * C1355 + (C37266 + C37265) * C1350 -
            (C37267 + C37268) * C1356 - (C37269 + C37270) * C50835) *
               C50764 * C2437 +
           ((C37268 + C37267) * C1355 + (C37270 + C37269) * C1350 -
            (C33316 * C20694 + C50983 * C20696 + C33315 * C3603 +
             C33313 * C3605) *
                C1356 -
            (C33316 * C20695 + C50983 * C20697 + C33315 * C3606 +
             C33313 * C3609) *
                C50835) *
               C50764 * C2438) *
              C50785 * C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1355 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C1350 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C1356 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C50835) *
               C17338 +
           ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
            (C33548 + C33549) * C1356 - (C33550 + C33551) * C50835) *
               C17339 +
           C34734 * C17340) *
              C50908 * C50785 * C51095 +
          (((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                C1356 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C1350 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C1355) +
            (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                C50835) *
               C17338 +
           ((C35091 + C35092) * C1356 -
            ((C33740 + C33739) * C1350 + (C33738 + C33737) * C1355) +
            (C35093 + C35094) * C50835) *
               C17339 +
           ((C35095 + C35096) * C1356 - (C33749 * C1350 + C33750 * C1355) +
            (C35097 + C35098) * C50835) *
               C17340) *
              C50908 * C50785 * C51084 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C1355 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C1350 -
            (C33316 * C3724 + C50983 * C3732 + C33315 * C1150 +
             C33313 * C1154) *
                C1356 -
            (C33316 * C3731 + C50983 * C3736 + C33315 * C1155 +
             C33313 * C1162) *
                C50835) *
               C17338 +
           ((C34330 + C34331) * C1355 + (C34332 + C34333) * C1350 -
            (C33316 * C3723 + C50983 * C3730 + C33315 * C1151 +
             C33313 * C1156) *
                C1356 -
            (C33316 * C3729 + C50983 * C3735 + C33315 * C1157 +
             C33313 * C1163) *
                C50835) *
               C17339 +
           ((C34334 + C34335) * C1355 + (C34336 + C34337) * C1350 -
            (C33316 * C7095 + C50983 * C7096 + C33315 * C1152 +
             C33313 * C1158) *
                C1356 -
            (C33316 * C7097 + C50983 * C7098 + C33315 * C1159 +
             C33313 * C1164) *
                C50835) *
               C17340) *
              C50908 * C50785 * C2009)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C1355 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C1350 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C1356 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C50835) *
              C50764 * C50908 * C50785 * C51095 +
          ((C38908 * C875 + C38904 * C883 + C38909 * C1150 + C38905 * C1154 +
            C38910 * C3724 + C38906 * C3732 + C38911 * C6495 + C38907 * C6497) *
               C1356 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C1350 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C1355) +
           (C38908 * C884 + C38904 * C899 + C38909 * C1155 + C38905 * C1162 +
            C38910 * C3731 + C38906 * C3736 + C38911 * C6498 + C38907 * C6501) *
               C50835) *
              C50764 * C50908 * C50785 * C51084 +
          ((C38908 * C1008 + C38904 * C1013 + C38909 * C1239 + C38905 * C1247 +
            C38910 * C6319 + C38906 * C6322 + C38911 * C6602 + C38907 * C6606) *
               C1355 +
           (C38908 * C1014 + C38904 * C1023 + C38909 * C1246 + C38905 * C1251 +
            C38910 * C6323 + C38906 * C6328 + C38911 * C6605 + C38907 * C6608) *
               C1350 -
           (C38911 * C22958 + C38907 * C22960 + C38910 * C6495 +
            C38906 * C6497 + C38909 * C3724 + C38905 * C3732 + C38908 * C1150 +
            C38904 * C1154) *
               C1356 -
           (C38911 * C22959 + C38907 * C22961 + C38910 * C6498 +
            C38906 * C6501 + C38909 * C3731 + C38905 * C3736 + C38908 * C1155 +
            C38904 * C1162) *
               C50835) *
              C50764 * C50908 * C50785 * C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C33315 * C119 + C33313 * C126 + C33316 * C470 +
                 C50983 * C481) *
                    C118 +
                (C33315 * C127 + C33313 * C140 + C33316 * C480 +
                 C50983 * C488) *
                    C50819) *
                   C17338 +
               ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) *
                   C17339 +
               C33374 * C17340) *
                  C50908 * C112 -
              (C33375 * C17340 +
               ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) *
                   C17339 +
               ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) *
                   C17338) *
                  C50908 * C113 +
              (C33374 * C17338 +
               ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) *
                   C17339 +
               ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) *
                   C17340) *
                  C50908 * C114 -
              (((C33316 * C482 + C50983 * C489 + C33315 * C137 +
                 C33313 * C145) *
                    C50819 +
                (C33316 * C471 + C50983 * C483 + C33315 * C124 +
                 C33313 * C136) *
                    C118) *
                   C17340 +
               ((C33365 + C33364) * C50819 + (C33363 + C33362) * C118) *
                   C17339 +
               C33375 * C17338) *
                  C50908 * C115) *
             C50849 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C33315 * C119 + C33313 * C126 + C33316 * C470 +
                 C50983 * C481) *
                    C627 +
                (C33315 * C127 + C33313 * C140 + C33316 * C480 +
                 C50983 * C488) *
                    C622 -
                (C33316 * C875 + C50983 * C883 + C33315 * C296 +
                 C33313 * C302) *
                    C628 -
                (C33316 * C884 + C50983 * C899 + C33315 * C303 +
                 C33313 * C314) *
                    C623 +
                (C33315 * C630 + C33313 * C635 + C33316 * C876 +
                 C50983 * C885) *
                    C629 +
                (C33315 * C636 + C33313 * C645 + C33316 * C886 +
                 C50983 * C900) *
                    C624) *
                   C17338 +
               ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
                (C33548 + C33549) * C628 - (C33550 + C33551) * C623 +
                (C33916 + C33917) * C629 + (C33918 + C33919) * C624) *
                   C17339 +
               (C33366 * C627 + C33367 * C622 - C33561 * C628 - C33562 * C623 +
                (C33920 + C33921) * C629 + (C33922 + C33923) * C624) *
                   C17340) *
                  C50908 * C51040 +
              (((C33549 + C33548) * C628 -
                ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
                (C33551 + C33550) * C623 - (C33917 + C33916) * C629 -
                (C33919 + C33918) * C624) *
                   C17338 +
               ((C33554 + C33553) * C628 -
                ((C33357 + C33356) * C622 + (C33355 + C33354) * C627) +
                (C33556 + C33555) * C623 - (C33921 + C33920) * C629 -
                (C33923 + C33922) * C624) *
                   C17339 +
               ((C33557 + C33558) * C628 - (C33368 * C622 + C33369 * C627) +
                (C33559 + C33560) * C623 -
                (C33316 * C882 + C50983 * C897 + C33315 * C633 +
                 C33313 * C641) *
                    C629 -
                (C33316 * C898 + C50983 * C906 + C33315 * C642 +
                 C33313 * C648) *
                    C624) *
                   C17340) *
                  C50908 * C50790) *
             C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C17338 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
            C33374 * C17340) *
               C50908 * C51040 -
           (C33375 * C17340 +
            ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
               C50908 * C50790) *
              C1005 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C17338 +
            ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C17339 +
            ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) * C17340) *
               C50908 * C50790 -
           (C33753 * C17340 +
            ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C17338) *
               C50908 * C51040) *
              C1006 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C17338 +
            ((C34330 + C34331) * C118 + (C34332 + C34333) * C50819) * C17339 +
            ((C34334 + C34335) * C118 + (C34336 + C34337) * C50819) * C17340) *
               C50908 * C51040 -
           (((C33316 * C1240 + C50983 * C1248 + C33315 * C1020 +
              C33313 * C1026) *
                 C50819 +
             (C33316 * C1236 + C50983 * C1241 + C33315 * C1011 +
              C33313 * C1019) *
                 C118) *
                C17340 +
            ((C34337 + C34336) * C50819 + (C34335 + C34334) * C118) * C17339 +
            ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C17338) *
               C50908 * C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C50764 * C2436 +
           ((C33315 * C296 + C33313 * C302 + C33316 * C875 + C50983 * C883) *
                C118 +
            (C33315 * C303 + C33313 * C314 + C33316 * C884 + C50983 * C899) *
                C50819) *
               C50764 * C2437 +
           ((C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C118 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C50819) *
               C50764 * C2438) *
              C112 -
          (((C33919 + C33918) * C50819 + (C33917 + C33916) * C118) * C50764 *
               C2438 +
           ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
               C2437 +
           ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
               C2436) *
              C113 +
          (C33374 * C50764 * C2436 +
           ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
               C2437 +
           ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
               C2438) *
              C114 -
          (((C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                C50819 +
            (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                C118) *
               C50764 * C2438 +
           ((C33560 + C33559) * C50819 + (C33558 + C33557) * C118) * C50764 *
               C2437 +
           C33375 * C50764 * C2436) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
            C36631 * C629 + C36632 * C624) *
               C50764 * C2436 +
           ((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
            (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
            (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
               C50764 * C2437 +
           (C36631 * C627 + C36632 * C622 - (C36652 + C36651) * C628 -
            (C36654 + C36653) * C623 +
            (C33315 * C2949 + C33313 * C2952 + C33316 * C3245 +
             C50983 * C3251) *
                C629 +
            (C33315 * C2953 + C33313 * C2958 + C33316 * C3252 +
             C50983 * C3257) *
                C624) *
               C50764 * C2438) *
              C51040 +
          (((C33549 + C33548) * C628 -
            ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
            (C33551 + C33550) * C623 - C36641 * C629 - C36642 * C624) *
               C50764 * C2436 +
           ((C33916 + C33917) * C628 -
            ((C33550 + C33551) * C622 + (C33548 + C33549) * C627) +
            (C33918 + C33919) * C623 - (C36655 + C36656) * C629 -
            (C36657 + C36658) * C624) *
               C50764 * C2437 +
           ((C36656 + C36655) * C628 - (C36642 * C622 + C36641 * C627) +
            (C36658 + C36657) * C623 -
            (C33316 * C3246 + C50983 * C3253 + C33315 * C2950 +
             C33313 * C2954) *
                C629 -
            (C33316 * C3254 + C50983 * C3258 + C33315 * C2955 +
             C33313 * C2959) *
                C624) *
               C50764 * C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            (C36631 * C118 + C36632 * C50819) * C50764 * C2438) *
               C51040 -
           ((C36642 * C50819 + C36641 * C118) * C50764 * C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C50790) *
              C1005 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C33315 * C878 + C33313 * C889 + C33316 * C3430 + C50983 * C3434) *
                 C118 +
             (C33315 * C890 + C33313 * C902 + C33316 * C3435 + C50983 * C3439) *
                 C50819) *
                C50764 * C2438) *
               C50790 -
           ((C36954 * C50819 + C36953 * C118) * C50764 * C2438 +
            ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C50764 *
                C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C51040) *
              C1006 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C50764 * C2436 +
            ((C33315 * C1150 + C33313 * C1154 + C33316 * C3724 +
              C50983 * C3732) *
                 C118 +
             (C33315 * C1155 + C33313 * C1162 + C33316 * C3731 +
              C50983 * C3736) *
                 C50819) *
                C50764 * C2437 +
            ((C33315 * C3429 + C33313 * C3432 + C33316 * C3722 +
              C50983 * C3728) *
                 C118 +
             (C33315 * C3433 + C33313 * C3438 + C33316 * C3727 +
              C50983 * C3734) *
                 C50819) *
                C50764 * C2438) *
               C51040 -
           (((C33316 * C3725 + C50983 * C3733 + C33315 * C3435 +
              C33313 * C3439) *
                 C50819 +
             (C33316 * C3721 + C50983 * C3726 + C33315 * C3430 +
              C33313 * C3434) *
                 C118) *
                C50764 * C2438 +
            ((C33316 * C3729 + C50983 * C3735 + C33315 * C1157 +
              C33313 * C1163) *
                 C50819 +
             (C33316 * C3723 + C50983 * C3730 + C33315 * C1151 +
              C33313 * C1156) *
                 C118) *
                C50764 * C2437 +
            ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C50764 *
                C2436) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C118 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C50819) *
              C50764 * C50908 * C112 -
          ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
            C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
               C50819 +
           (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
            C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
               C118) *
              C50764 * C50908 * C113 +
          ((C38908 * C121 + C38904 * C130 + C38909 * C467 + C38905 * C474 +
            C38910 * C1010 + C38906 * C1017 + C38911 * C1237 + C38907 * C1243) *
               C118 +
           (C38908 * C131 + C38904 * C142 + C38909 * C475 + C38905 * C485 +
            C38910 * C1018 + C38906 * C1025 + C38911 * C1242 + C38907 * C1249) *
               C50819) *
              C50764 * C50908 * C114 -
          ((C38911 * C1240 + C38907 * C1248 + C38910 * C1020 + C38906 * C1026 +
            C38909 * C477 + C38905 * C486 + C38908 * C133 + C38904 * C143) *
               C50819 +
           (C38911 * C1236 + C38907 * C1241 + C38910 * C1011 + C38906 * C1019 +
            C38909 * C468 + C38905 * C476 + C38908 * C122 + C38904 * C132) *
               C118) *
              C50764 * C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C627 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C622 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C628 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C623 +
           (C38908 * C630 + C38904 * C635 + C38909 * C876 + C38905 * C885 +
            C38910 * C3429 + C38906 * C3432 + C38911 * C3722 + C38907 * C3728) *
               C629 +
           (C38908 * C636 + C38904 * C645 + C38909 * C886 + C38905 * C900 +
            C38910 * C3433 + C38906 * C3438 + C38911 * C3727 + C38907 * C3734) *
               C624) *
              C50764 * C50908 * C51040 +
          ((C38908 * C297 + C38904 * C304 + C38909 * C877 + C38905 * C887 +
            C38910 * C1151 + C38906 * C1156 + C38911 * C3723 + C38907 * C3730) *
               C628 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C622 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C627) +
           (C38908 * C305 + C38904 * C315 + C38909 * C888 + C38905 * C901 +
            C38910 * C1157 + C38906 * C1163 + C38911 * C3729 + C38907 * C3735) *
               C623 -
           (C38911 * C3721 + C38907 * C3726 + C38910 * C3430 + C38906 * C3434 +
            C38909 * C878 + C38905 * C889 + C38908 * C631 + C38904 * C637) *
               C629 -
           (C38911 * C3725 + C38907 * C3733 + C38910 * C3435 + C38906 * C3439 +
            C38909 * C890 + C38905 * C902 + C38908 * C638 + C38904 * C646) *
               C624) *
              C50764 * C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
             C38910 * C1008 + C38906 * C1013 + C38911 * C1239 +
             C38907 * C1247) *
                C118 +
            (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
             C38910 * C1014 + C38906 * C1023 + C38911 * C1246 +
             C38907 * C1251) *
                C50819) *
               C50764 * C50908 * C51040 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C50819 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C118) *
               C50764 * C50908 * C50790) *
              C1005 +
          (((C38908 * C466 + C38904 * C472 + C38909 * C1009 + C38905 * C1015 +
             C38910 * C1238 + C38906 * C1245 + C38911 * C6320 +
             C38907 * C6324) *
                C118 +
            (C38908 * C473 + C38904 * C484 + C38909 * C1016 + C38905 * C1024 +
             C38910 * C1244 + C38906 * C1250 + C38911 * C6325 +
             C38907 * C6329) *
                C50819) *
               C50764 * C50908 * C50790 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C50819 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C118) *
               C50764 * C50908 * C51040) *
              C1006 +
          (((C38908 * C1008 + C38904 * C1013 + C38909 * C1239 + C38905 * C1247 +
             C38910 * C6319 + C38906 * C6322 + C38911 * C6602 +
             C38907 * C6606) *
                C118 +
            (C38908 * C1014 + C38904 * C1023 + C38909 * C1246 + C38905 * C1251 +
             C38910 * C6323 + C38906 * C6328 + C38911 * C6605 +
             C38907 * C6608) *
                C50819) *
               C50764 * C50908 * C51040 -
           ((C38911 * C6603 + C38907 * C6607 + C38910 * C6325 + C38906 * C6329 +
             C38909 * C1244 + C38905 * C1250 + C38908 * C1016 +
             C38904 * C1024) *
                C50819 +
            (C38911 * C6601 + C38907 * C6604 + C38910 * C6320 + C38906 * C6324 +
             C38909 * C1238 + C38905 * C1245 + C38908 * C1009 +
             C38904 * C1015) *
                C118) *
               C50764 * C50908 * C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C33315 * C119 + C33313 * C126 + C33316 * C470 +
                 C50983 * C481) *
                    C294 +
                (C33315 * C127 + C33313 * C140 + C33316 * C480 +
                 C50983 * C488) *
                    C51047 -
                (C33316 * C875 + C50983 * C883 + C33315 * C296 +
                 C33313 * C302) *
                    C295 -
                (C33316 * C884 + C50983 * C899 + C33315 * C303 +
                 C33313 * C314) *
                    C50835) *
                   C17338 +
               ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
                (C33548 + C33549) * C295 - (C33550 + C33551) * C50835) *
                   C17339 +
               C33566 * C17340) *
                  C50908 * C291 +
              (((C33549 + C33548) * C295 -
                ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
                (C33551 + C33550) * C50835) *
                   C17338 +
               ((C33554 + C33553) * C295 -
                ((C33357 + C33356) * C51047 + (C33355 + C33354) * C294) +
                (C33556 + C33555) * C50835) *
                   C17339 +
               ((C33557 + C33558) * C295 - (C33368 * C51047 + C33369 * C294) +
                (C33559 + C33560) * C50835) *
                   C17340) *
                  C50908 * C292 +
              (C33566 * C17338 +
               ((C33361 + C33360) * C294 + (C33359 + C33358) * C51047 -
                (C33558 + C33557) * C295 - (C33560 + C33559) * C50835) *
                   C17339 +
               ((C33362 + C33363) * C294 + (C33364 + C33365) * C51047 -
                (C33316 * C1633 + C50983 * C1634 + C33315 * C300 +
                 C33313 * C310) *
                    C295 -
                (C33316 * C1635 + C50983 * C1636 + C33315 * C311 +
                 C33313 * C318) *
                    C50835) *
                   C17340) *
                  C50908 * C293) *
             C50849 +
         0.5 * std::pow(Pi, 2.5) *
             (((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                   C757 +
               (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                   C752 -
               (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                   C758 -
               (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                   C753 +
               (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                   C759 +
               (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                   C754 -
               (C33316 * C3243 + C50983 * C3247 + C33315 * C761 +
                C33313 * C765) *
                   C760 -
               (C33316 * C3248 + C50983 * C3255 + C33315 * C766 +
                C33313 * C773) *
                   C755) *
                  C17338 +
              ((C33350 + C33351) * C757 + (C33352 + C33353) * C752 -
               (C33548 + C33549) * C758 - (C33550 + C33551) * C753 +
               (C33916 + C33917) * C759 + (C33918 + C33919) * C754 -
               (C33316 * C3244 + C50983 * C3249 + C33315 * C762 +
                C33313 * C767) *
                   C760 -
               (C33316 * C3250 + C50983 * C3256 + C33315 * C768 +
                C33313 * C774) *
                   C755) *
                  C17339 +
              (C33366 * C757 + C33367 * C752 - C33561 * C758 - C33562 * C753 +
               (C33920 + C33921) * C759 + (C33922 + C33923) * C754 -
               (C33316 * C4251 + C50983 * C4252 + C33315 * C763 +
                C33313 * C769) *
                   C760 -
               (C33316 * C4253 + C50983 * C4254 + C33315 * C770 +
                C33313 * C775) *
                   C755) *
                  C17340) *
             C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C295 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C50835) *
               C17338 +
           ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
            (C33548 + C33549) * C295 - (C33550 + C33551) * C50835) *
               C17339 +
           C33566 * C17340) *
              C50908 * C50785 * C1005 +
          (((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                C295 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C51047 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C294) +
            (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                C50835) *
               C17338 +
           ((C33315 * C877 + C33313 * C887 + C33316 * C1151 + C50983 * C1156) *
                C295 -
            ((C33740 + C33739) * C51047 + (C33738 + C33737) * C294) +
            (C33315 * C888 + C33313 * C901 + C33316 * C1157 + C50983 * C1163) *
                C50835) *
               C17339 +
           ((C33315 * C879 + C33313 * C891 + C33316 * C1152 + C50983 * C1158) *
                C295 -
            (C33749 * C51047 + C33750 * C294) +
            (C33315 * C892 + C33313 * C903 + C33316 * C1159 + C50983 * C1164) *
                C50835) *
               C17340) *
              C50908 * C50785 * C1006 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C294 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C51047 -
            (C33316 * C3724 + C50983 * C3732 + C33315 * C1150 +
             C33313 * C1154) *
                C295 -
            (C33316 * C3731 + C50983 * C3736 + C33315 * C1155 +
             C33313 * C1162) *
                C50835) *
               C17338 +
           ((C34330 + C34331) * C294 + (C34332 + C34333) * C51047 -
            (C33316 * C3723 + C50983 * C3730 + C33315 * C1151 +
             C33313 * C1156) *
                C295 -
            (C33316 * C3729 + C50983 * C3735 + C33315 * C1157 +
             C33313 * C1163) *
                C50835) *
               C17339 +
           ((C34334 + C34335) * C294 + (C34336 + C34337) * C51047 -
            (C33316 * C7095 + C50983 * C7096 + C33315 * C1152 +
             C33313 * C1158) *
                C295 -
            (C33316 * C7097 + C50983 * C7098 + C33315 * C1159 +
             C33313 * C1164) *
                C50835) *
               C17340) *
              C50908 * C50785 * C1007)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
            (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           ((C36336 + C36335) * C294 + (C36338 + C36337) * C51047 -
            (C33316 * C3243 + C50983 * C3247 + C33315 * C761 + C33313 * C765) *
                C295 -
            (C33316 * C3248 + C50983 * C3255 + C33315 * C766 + C33313 * C773) *
                C50835) *
               C50764 * C2438) *
              C291 +
          (((C33549 + C33548) * C295 -
            ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
            (C33551 + C33550) * C50835) *
               C50764 * C2436 +
           ((C33916 + C33917) * C295 -
            ((C33550 + C33551) * C51047 + (C33548 + C33549) * C294) +
            (C33918 + C33919) * C50835) *
               C50764 * C2437 +
           ((C33315 * C762 + C33313 * C767 + C33316 * C3244 + C50983 * C3249) *
                C295 -
            ((C33919 + C33918) * C51047 + (C33917 + C33916) * C294) +
            (C33315 * C768 + C33313 * C774 + C33316 * C3250 + C50983 * C3256) *
                C50835) *
               C50764 * C2438) *
              C292 +
          (C33566 * C50764 * C2436 +
           ((C33554 + C33553) * C294 + (C33556 + C33555) * C51047 -
            (C33921 + C33920) * C295 - (C33923 + C33922) * C50835) *
               C50764 * C2437 +
           ((C33920 + C33921) * C294 + (C33922 + C33923) * C51047 -
            (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
                C295 -
            (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
                C50835) *
               C50764 * C2438) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
               C757 +
           (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
               C752 -
           (C36331 + C36332) * C758 - (C36333 + C36334) * C753 + C36631 * C759 +
           C36632 * C754 - C36757 * C760 - C36758 * C755) *
              C50764 * C2436 +
          ((C36332 + C36331) * C757 + (C36334 + C36333) * C752 -
           (C36335 + C36336) * C758 - (C36337 + C36338) * C753 +
           (C36651 + C36652) * C759 + (C36653 + C36654) * C754 -
           (C36767 + C36768) * C760 - (C36769 + C36770) * C755) *
              C50764 * C2437 +
          (C36631 * C757 + C36632 * C752 - C36757 * C758 - C36758 * C753 +
           (C36768 + C36767) * C759 + (C36770 + C36769) * C754 -
           (C33316 * C20412 + C50983 * C20413 + C33315 * C3083 +
            C33313 * C3085) *
               C760 -
           (C33316 * C20414 + C50983 * C20415 + C33315 * C3086 +
            C33313 * C3089) *
               C755) *
              C50764 * C2438) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
            (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           (C36631 * C294 + C36632 * C51047 - C36757 * C295 - C36758 * C50835) *
               C50764 * C2438) *
              C50785 * C1005 +
          (((C36941 + C36942) * C295 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C51047 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C294) +
            (C36943 + C36944) * C50835) *
               C50764 * C2436 +
           ((C36946 + C36945) * C295 -
            ((C36944 + C36943) * C51047 + (C36942 + C36941) * C294) +
            (C36948 + C36947) * C50835) *
               C50764 * C2437 +
           ((C36950 + C36949) * C295 - (C36954 * C51047 + C36953 * C294) +
            (C36952 + C36951) * C50835) *
               C50764 * C2438) *
              C50785 * C1006 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C294 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C51047 -
            (C37263 + C37264) * C295 - (C37265 + C37266) * C50835) *
               C50764 * C2436 +
           ((C37264 + C37263) * C294 + (C37266 + C37265) * C51047 -
            (C37267 + C37268) * C295 - (C37269 + C37270) * C50835) *
               C50764 * C2437 +
           ((C37268 + C37267) * C294 + (C37270 + C37269) * C51047 -
            (C33316 * C20694 + C50983 * C20696 + C33315 * C3603 +
             C33313 * C3605) *
                C295 -
            (C33316 * C20695 + C50983 * C20697 + C33315 * C3606 +
             C33313 * C3609) *
                C50835) *
               C50764 * C2438) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C294 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C51047 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C295 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C50835) *
              C50764 * C50908 * C291 +
          ((C38908 * C297 + C38904 * C304 + C38909 * C877 + C38905 * C887 +
            C38910 * C1151 + C38906 * C1156 + C38911 * C3723 + C38907 * C3730) *
               C295 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C51047 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C294) +
           (C38908 * C305 + C38904 * C315 + C38909 * C888 + C38905 * C901 +
            C38910 * C1157 + C38906 * C1163 + C38911 * C3729 + C38907 * C3735) *
               C50835) *
              C50764 * C50908 * C292 +
          ((C38908 * C121 + C38904 * C130 + C38909 * C467 + C38905 * C474 +
            C38910 * C1010 + C38906 * C1017 + C38911 * C1237 + C38907 * C1243) *
               C294 +
           (C38908 * C131 + C38904 * C142 + C38909 * C475 + C38905 * C485 +
            C38910 * C1018 + C38906 * C1025 + C38911 * C1242 + C38907 * C1249) *
               C51047 -
           (C38911 * C7095 + C38907 * C7096 + C38910 * C1152 + C38906 * C1158 +
            C38909 * C879 + C38905 * C891 + C38908 * C298 + C38904 * C306) *
               C295 -
           (C38911 * C7097 + C38907 * C7098 + C38910 * C1159 + C38906 * C1164 +
            C38909 * C892 + C38905 * C903 + C38908 * C307 + C38904 * C316) *
               C50835) *
              C50764 * C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
           C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
              C757 +
          (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
           C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
              C752 -
          (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
           C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
              C758 -
          (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
           C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
              C753 +
          (C38908 * C630 + C38904 * C635 + C38909 * C876 + C38905 * C885 +
           C38910 * C3429 + C38906 * C3432 + C38911 * C3722 + C38907 * C3728) *
              C759 +
          (C38908 * C636 + C38904 * C645 + C38909 * C886 + C38905 * C900 +
           C38910 * C3433 + C38906 * C3438 + C38911 * C3727 + C38907 * C3734) *
              C754 -
          (C38911 * C20694 + C38907 * C20696 + C38910 * C3603 + C38906 * C3605 +
           C38909 * C3243 + C38905 * C3247 + C38908 * C761 + C38904 * C765) *
              C760 -
          (C38911 * C20695 + C38907 * C20697 + C38910 * C3606 + C38906 * C3609 +
           C38909 * C3248 + C38905 * C3255 + C38908 * C766 + C38904 * C773) *
              C755) *
         C50764 * C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C294 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C51047 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C295 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C50835) *
              C50764 * C50908 * C50785 * C1005 +
          ((C38908 * C875 + C38904 * C883 + C38909 * C1150 + C38905 * C1154 +
            C38910 * C3724 + C38906 * C3732 + C38911 * C6495 + C38907 * C6497) *
               C295 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C51047 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C294) +
           (C38908 * C884 + C38904 * C899 + C38909 * C1155 + C38905 * C1162 +
            C38910 * C3731 + C38906 * C3736 + C38911 * C6498 + C38907 * C6501) *
               C50835) *
              C50764 * C50908 * C50785 * C1006 +
          ((C38908 * C1008 + C38904 * C1013 + C38909 * C1239 + C38905 * C1247 +
            C38910 * C6319 + C38906 * C6322 + C38911 * C6602 + C38907 * C6606) *
               C294 +
           (C38908 * C1014 + C38904 * C1023 + C38909 * C1246 + C38905 * C1251 +
            C38910 * C6323 + C38906 * C6328 + C38911 * C6605 + C38907 * C6608) *
               C51047 -
           (C38911 * C22958 + C38907 * C22960 + C38910 * C6495 +
            C38906 * C6497 + C38909 * C3724 + C38905 * C3732 + C38908 * C1150 +
            C38904 * C1154) *
               C295 -
           (C38911 * C22959 + C38907 * C22961 + C38910 * C6498 +
            C38906 * C6501 + C38909 * C3731 + C38905 * C3736 + C38908 * C1155 +
            C38904 * C1162) *
               C50835) *
              C50764 * C50908 * C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C33315 * C119 + C33313 * C126 + C33316 * C470 +
                  C50983 * C481) *
                     C118 +
                 (C33315 * C127 + C33313 * C140 + C33316 * C480 +
                  C50983 * C488) *
                     C50819) *
                    C17338 +
                ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) *
                    C17339 +
                C33374 * C17340) *
                   C50908 * C291 -
               (C33375 * C17340 +
                ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) *
                    C17339 +
                ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) *
                    C17338) *
                   C50908 * C292 +
               (C33374 * C17338 +
                ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) *
                    C17339 +
                ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) *
                    C17340) *
                   C50908 * C293) *
                  C51049 +
              ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) *
                    C17338 +
                ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) *
                    C17339 +
                ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) *
                    C17340) *
                   C50908 * C292 -
               (C33753 * C17340 +
                ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) *
                    C17339 +
                ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
                  C33313 * C488) *
                     C50819 +
                 (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
                  C33313 * C481) *
                     C118) *
                    C17338) *
                   C50908 * C291 -
               (((C33316 * C1021 + C50983 * C1027 + C33315 * C479 +
                  C33313 * C487) *
                     C50819 +
                 (C33316 * C1012 + C50983 * C1022 + C33315 * C469 +
                  C33313 * C478) *
                     C118) *
                    C17340 +
                ((C33748 + C33747) * C50819 + (C33746 + C33745) * C118) *
                    C17339 +
                C33753 * C17338) *
                   C50908 * C293) *
                  C50861) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C33315 * C119 + C33313 * C126 + C33316 * C470 +
                 C50983 * C481) *
                    C627 +
                (C33315 * C127 + C33313 * C140 + C33316 * C480 +
                 C50983 * C488) *
                    C622 -
                (C33316 * C875 + C50983 * C883 + C33315 * C296 +
                 C33313 * C302) *
                    C628 -
                (C33316 * C884 + C50983 * C899 + C33315 * C303 +
                 C33313 * C314) *
                    C623 +
                (C33315 * C630 + C33313 * C635 + C33316 * C876 +
                 C50983 * C885) *
                    C629 +
                (C33315 * C636 + C33313 * C645 + C33316 * C886 +
                 C50983 * C900) *
                    C624) *
                   C17338 +
               ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
                (C33548 + C33549) * C628 - (C33550 + C33551) * C623 +
                (C33916 + C33917) * C629 + (C33918 + C33919) * C624) *
                   C17339 +
               (C33366 * C627 + C33367 * C622 - C33561 * C628 - C33562 * C623 +
                (C33920 + C33921) * C629 + (C33922 + C33923) * C624) *
                   C17340) *
                  C50908 * C50785 * C51049 +
              (((C33315 * C875 + C33313 * C883 + C33316 * C1150 +
                 C50983 * C1154) *
                    C628 -
                ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
                  C33313 * C488) *
                     C622 +
                 (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
                  C33313 * C481) *
                     C627) +
                (C33315 * C884 + C33313 * C899 + C33316 * C1155 +
                 C50983 * C1162) *
                    C623 -
                (C33316 * C3429 + C50983 * C3432 + C33315 * C876 +
                 C33313 * C885) *
                    C629 -
                (C33316 * C3433 + C50983 * C3438 + C33315 * C886 +
                 C33313 * C900) *
                    C624) *
                   C17338 +
               ((C33315 * C877 + C33313 * C887 + C33316 * C1151 +
                 C50983 * C1156) *
                    C628 -
                ((C33740 + C33739) * C622 + (C33738 + C33737) * C627) +
                (C33315 * C888 + C33313 * C901 + C33316 * C1157 +
                 C50983 * C1163) *
                    C623 -
                (C33316 * C3430 + C50983 * C3434 + C33315 * C878 +
                 C33313 * C889) *
                    C629 -
                (C33316 * C3435 + C50983 * C3439 + C33315 * C890 +
                 C33313 * C902) *
                    C624) *
                   C17339 +
               ((C33315 * C879 + C33313 * C891 + C33316 * C1152 +
                 C50983 * C1158) *
                    C628 -
                (C33749 * C622 + C33750 * C627) +
                (C33315 * C892 + C33313 * C903 + C33316 * C1159 +
                 C50983 * C1164) *
                    C623 -
                (C33316 * C3431 + C50983 * C3437 + C33315 * C880 +
                 C33313 * C893) *
                    C629 -
                (C33316 * C3436 + C50983 * C3440 + C33315 * C894 +
                 C33313 * C904) *
                    C624) *
                   C17340) *
                  C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C17338 +
           ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
           C33374 * C17340) *
              C50908 * C50785 * C1232 -
          (C33753 * C17340 +
           ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
           ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                C50819 +
            (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                C118) *
               C17338) *
              C50908 * C50785 * C1233 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C118 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C50819) *
               C17338 +
           ((C34330 + C34331) * C118 + (C34332 + C34333) * C50819) * C17339 +
           ((C34334 + C34335) * C118 + (C34336 + C34337) * C50819) * C17340) *
              C50908 * C50785 * C1234 -
          (((C33316 * C6326 + C50983 * C6330 + C33315 * C1242 +
             C33313 * C1249) *
                C50819 +
            (C33316 * C6321 + C50983 * C6327 + C33315 * C1237 +
             C33313 * C1243) *
                C118) *
               C17340 +
           ((C33316 * C6325 + C50983 * C6329 + C33315 * C1244 +
             C33313 * C1250) *
                C50819 +
            (C33316 * C6320 + C50983 * C6324 + C33315 * C1238 +
             C33313 * C1245) *
                C118) *
               C17339 +
           ((C33316 * C6323 + C50983 * C6328 + C33315 * C1246 +
             C33313 * C1251) *
                C50819 +
            (C33316 * C6319 + C50983 * C6322 + C33315 * C1239 +
             C33313 * C1247) *
                C118) *
               C17338) *
              C50908 * C50785 * C1235)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            ((C36336 + C36335) * C118 + (C36338 + C36337) * C50819) * C50764 *
                C2438) *
               C291 -
           (((C33919 + C33918) * C50819 + (C33917 + C33916) * C118) * C50764 *
                C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C292 +
           (C33374 * C50764 * C2436 +
            ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
                C2437 +
            ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
                C2438) *
               C293) *
              C51049 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C33315 * C878 + C33313 * C889 + C33316 * C3430 + C50983 * C3434) *
                 C118 +
             (C33315 * C890 + C33313 * C902 + C33316 * C3435 + C50983 * C3439) *
                 C50819) *
                C50764 * C2438) *
               C292 -
           (((C33316 * C3433 + C50983 * C3438 + C33315 * C886 + C33313 * C900) *
                 C50819 +
             (C33316 * C3429 + C50983 * C3432 + C33315 * C876 + C33313 * C885) *
                 C118) *
                C50764 * C2438 +
            ((C33316 * C1155 + C50983 * C1162 + C33315 * C884 + C33313 * C899) *
                 C50819 +
             (C33316 * C1150 + C50983 * C1154 + C33315 * C875 + C33313 * C883) *
                 C118) *
                C50764 * C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C291 -
           (((C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                 C50819 +
             (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                 C118) *
                C50764 * C2438 +
            ((C35098 + C35097) * C50819 + (C35096 + C35095) * C118) * C50764 *
                C2437 +
            C33753 * C50764 * C2436) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
            C36631 * C629 + C36632 * C624) *
               C50764 * C2436 +
           ((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
            (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
            (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
               C50764 * C2437 +
           (C36631 * C627 + C36632 * C622 - C36757 * C628 - C36758 * C623 +
            (C36768 + C36767) * C629 + (C36770 + C36769) * C624) *
               C50764 * C2438) *
              C50785 * C51049 +
          (((C36941 + C36942) * C628 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C622 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C627) +
            (C36943 + C36944) * C623 - C36953 * C629 - C36954 * C624) *
               C50764 * C2436 +
           ((C36946 + C36945) * C628 -
            ((C36944 + C36943) * C622 + (C36942 + C36941) * C627) +
            (C36948 + C36947) * C623 - (C36949 + C36950) * C629 -
            (C36951 + C36952) * C624) *
               C50764 * C2437 +
           ((C36950 + C36949) * C628 - (C36954 * C622 + C36953 * C627) +
            (C36952 + C36951) * C623 -
            (C33316 * C20618 + C50983 * C20619 + C33315 * C3245 +
             C33313 * C3251) *
                C629 -
            (C33316 * C20620 + C50983 * C20621 + C33315 * C3252 +
             C33313 * C3257) *
                C624) *
               C50764 * C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C50764 * C2436 +
           ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
               C2437 +
           (C36631 * C118 + C36632 * C50819) * C50764 * C2438) *
              C50785 * C1232 -
          ((C36954 * C50819 + C36953 * C118) * C50764 * C2438 +
           ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C50764 *
               C2437 +
           ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                C50819 +
            (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                C118) *
               C50764 * C2436) *
              C50785 * C1233 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C118 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C50819) *
               C50764 * C2436 +
           ((C37264 + C37263) * C118 + (C37266 + C37265) * C50819) * C50764 *
               C2437 +
           ((C37268 + C37267) * C118 + (C37270 + C37269) * C50819) * C50764 *
               C2438) *
              C50785 * C1234 -
          (((C33316 * C22840 + C50983 * C22841 + C33315 * C3727 +
             C33313 * C3734) *
                C50819 +
            (C33316 * C22838 + C50983 * C22839 + C33315 * C3722 +
             C33313 * C3728) *
                C118) *
               C50764 * C2438 +
           ((C33316 * C6498 + C50983 * C6501 + C33315 * C3731 +
             C33313 * C3736) *
                C50819 +
            (C33316 * C6495 + C50983 * C6497 + C33315 * C3724 +
             C33313 * C3732) *
                C118) *
               C50764 * C2437 +
           ((C33316 * C6323 + C50983 * C6328 + C33315 * C1246 +
             C33313 * C1251) *
                C50819 +
            (C33316 * C6319 + C50983 * C6322 + C33315 * C1239 +
             C33313 * C1247) *
                C118) *
               C50764 * C2436) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
             C38910 * C1008 + C38906 * C1013 + C38911 * C1239 +
             C38907 * C1247) *
                C118 +
            (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
             C38910 * C1014 + C38906 * C1023 + C38911 * C1246 +
             C38907 * C1251) *
                C50819) *
               C50764 * C50908 * C291 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C50819 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C118) *
               C50764 * C50908 * C292 +
           ((C38908 * C121 + C38904 * C130 + C38909 * C467 + C38905 * C474 +
             C38910 * C1010 + C38906 * C1017 + C38911 * C1237 +
             C38907 * C1243) *
                C118 +
            (C38908 * C131 + C38904 * C142 + C38909 * C475 + C38905 * C485 +
             C38910 * C1018 + C38906 * C1025 + C38911 * C1242 +
             C38907 * C1249) *
                C50819) *
               C50764 * C50908 * C293) *
              C51049 +
          (((C38908 * C466 + C38904 * C472 + C38909 * C1009 + C38905 * C1015 +
             C38910 * C1238 + C38906 * C1245 + C38911 * C6320 +
             C38907 * C6324) *
                C118 +
            (C38908 * C473 + C38904 * C484 + C38909 * C1016 + C38905 * C1024 +
             C38910 * C1244 + C38906 * C1250 + C38911 * C6325 +
             C38907 * C6329) *
                C50819) *
               C50764 * C50908 * C292 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C50819 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C118) *
               C50764 * C50908 * C291 -
           ((C38911 * C6326 + C38907 * C6330 + C38910 * C1242 + C38906 * C1249 +
             C38909 * C1018 + C38905 * C1025 + C38908 * C475 + C38904 * C485) *
                C50819 +
            (C38911 * C6321 + C38907 * C6327 + C38910 * C1237 + C38906 * C1243 +
             C38909 * C1010 + C38905 * C1017 + C38908 * C467 + C38904 * C474) *
                C118) *
               C50764 * C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C627 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C622 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C628 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C623 +
           (C38908 * C630 + C38904 * C635 + C38909 * C876 + C38905 * C885 +
            C38910 * C3429 + C38906 * C3432 + C38911 * C3722 + C38907 * C3728) *
               C629 +
           (C38908 * C636 + C38904 * C645 + C38909 * C886 + C38905 * C900 +
            C38910 * C3433 + C38906 * C3438 + C38911 * C3727 + C38907 * C3734) *
               C624) *
              C50764 * C50908 * C50785 * C51049 +
          ((C38908 * C875 + C38904 * C883 + C38909 * C1150 + C38905 * C1154 +
            C38910 * C3724 + C38906 * C3732 + C38911 * C6495 + C38907 * C6497) *
               C628 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C622 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C627) +
           (C38908 * C884 + C38904 * C899 + C38909 * C1155 + C38905 * C1162 +
            C38910 * C3731 + C38906 * C3736 + C38911 * C6498 + C38907 * C6501) *
               C623 -
           (C38911 * C22838 + C38907 * C22839 + C38910 * C3722 +
            C38906 * C3728 + C38909 * C3429 + C38905 * C3432 + C38908 * C876 +
            C38904 * C885) *
               C629 -
           (C38911 * C22840 + C38907 * C22841 + C38910 * C3727 +
            C38906 * C3734 + C38909 * C3433 + C38905 * C3438 + C38908 * C886 +
            C38904 * C900) *
               C624) *
              C50764 * C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C118 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C50819) *
              C50764 * C50908 * C50785 * C1232 -
          ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
            C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
               C50819 +
           (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
            C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
               C118) *
              C50764 * C50908 * C50785 * C1233 +
          ((C38908 * C1008 + C38904 * C1013 + C38909 * C1239 + C38905 * C1247 +
            C38910 * C6319 + C38906 * C6322 + C38911 * C6602 + C38907 * C6606) *
               C118 +
           (C38908 * C1014 + C38904 * C1023 + C38909 * C1246 + C38905 * C1251 +
            C38910 * C6323 + C38906 * C6328 + C38911 * C6605 + C38907 * C6608) *
               C50819) *
              C50764 * C50908 * C50785 * C1234 -
          ((C38911 * C39633 + C38907 * C39635 + C38910 * C6605 +
            C38906 * C6608 + C38909 * C6323 + C38905 * C6328 + C38908 * C1246 +
            C38904 * C1251) *
               C50819 +
           (C38911 * C39632 + C38907 * C39634 + C38910 * C6602 +
            C38906 * C6606 + C38909 * C6319 + C38905 * C6322 + C38908 * C1239 +
            C38904 * C1247) *
               C118) *
              C50764 * C50908 * C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            (C36631 * C118 + C36632 * C50819) * C50764 * C2438) *
               C51093 -
           ((C36642 * C50819 + C36641 * C118) * C50764 * C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C51078 +
           (C33374 * C50764 * C2436 +
            ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
                C2437 +
            ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
                C2438) *
               C1354) *
              C1765 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C37864 + C37863) * C118 + (C37866 + C37865) * C50819) * C50764 *
                C2438) *
               C51078 -
           ((C36954 * C50819 + C36953 * C118) * C50764 * C2438 +
            ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C50764 *
                C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C51093 -
           (((C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                 C50819 +
             (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                 C118) *
                C50764 * C2438 +
            ((C35098 + C35097) * C50819 + (C35096 + C35095) * C118) * C50764 *
                C2437 +
            C33753 * C50764 * C2436) *
               C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C17338 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
            C33374 * C17340) *
               C50908 * C51093 -
           (C33375 * C17340 +
            ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
               C50908 * C51078 +
           (C33374 * C17338 +
            ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C17339 +
            ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) * C17340) *
               C50908 * C1354) *
              C1765 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C17338 +
            ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C17339 +
            ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) * C17340) *
               C50908 * C51078 -
           (C33753 * C17340 +
            ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C17338) *
               C50908 * C51093 -
           (((C33316 * C1021 + C50983 * C1027 + C33315 * C479 + C33313 * C487) *
                 C50819 +
             (C33316 * C1012 + C50983 * C1022 + C33315 * C469 + C33313 * C478) *
                 C118) *
                C17340 +
            ((C33748 + C33747) * C50819 + (C33746 + C33745) * C118) * C17339 +
            C33753 * C17338) *
               C50908 * C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
             C38910 * C1008 + C38906 * C1013 + C38911 * C1239 +
             C38907 * C1247) *
                C118 +
            (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
             C38910 * C1014 + C38906 * C1023 + C38911 * C1246 +
             C38907 * C1251) *
                C50819) *
               C50764 * C50908 * C51093 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C50819 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C118) *
               C50764 * C50908 * C51078 +
           ((C38908 * C121 + C38904 * C130 + C38909 * C467 + C38905 * C474 +
             C38910 * C1010 + C38906 * C1017 + C38911 * C1237 +
             C38907 * C1243) *
                C118 +
            (C38908 * C131 + C38904 * C142 + C38909 * C475 + C38905 * C485 +
             C38910 * C1018 + C38906 * C1025 + C38911 * C1242 +
             C38907 * C1249) *
                C50819) *
               C50764 * C50908 * C1354) *
              C1765 +
          (((C38908 * C466 + C38904 * C472 + C38909 * C1009 + C38905 * C1015 +
             C38910 * C1238 + C38906 * C1245 + C38911 * C6320 +
             C38907 * C6324) *
                C118 +
            (C38908 * C473 + C38904 * C484 + C38909 * C1016 + C38905 * C1024 +
             C38910 * C1244 + C38906 * C1250 + C38911 * C6325 +
             C38907 * C6329) *
                C50819) *
               C50764 * C50908 * C51078 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C50819 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C118) *
               C50764 * C50908 * C51093 -
           ((C38911 * C6326 + C38907 * C6330 + C38910 * C1242 + C38906 * C1249 +
             C38909 * C1018 + C38905 * C1025 + C38908 * C475 + C38904 * C485) *
                C50819 +
            (C38911 * C6321 + C38907 * C6327 + C38910 * C1237 + C38906 * C1243 +
             C38909 * C1010 + C38905 * C1017 + C38908 * C467 + C38904 * C474) *
                C118) *
               C50764 * C50908 * C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C294 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C51047 -
             (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
                C50764 * C2436 +
            ((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
             (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
                C50764 * C2437 +
            (C36631 * C294 + C36632 * C51047 - C36757 * C295 -
             C36758 * C50835) *
                C50764 * C2438) *
               C1480 +
           (((C33549 + C33548) * C295 -
             ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
             (C33551 + C33550) * C50835) *
                C50764 * C2436 +
            ((C33916 + C33917) * C295 -
             ((C33550 + C33551) * C51047 + (C33548 + C33549) * C294) +
             (C33918 + C33919) * C50835) *
                C50764 * C2437 +
            ((C36656 + C36655) * C295 - (C36642 * C51047 + C36641 * C294) +
             (C36658 + C36657) * C50835) *
                C50764 * C2438) *
               C50790) *
              C1765 +
          ((((C36941 + C36942) * C295 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C51047 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C294) +
             (C36943 + C36944) * C50835) *
                C50764 * C2436 +
            ((C36946 + C36945) * C295 -
             ((C36944 + C36943) * C51047 + (C36942 + C36941) * C294) +
             (C36948 + C36947) * C50835) *
                C50764 * C2437 +
            ((C36950 + C36949) * C295 - (C36954 * C51047 + C36953 * C294) +
             (C36952 + C36951) * C50835) *
                C50764 * C2438) *
               C1480 +
           (((C33737 + C33738) * C294 + (C33739 + C33740) * C51047 -
             (C35092 + C35091) * C295 - (C35094 + C35093) * C50835) *
                C50764 * C2436 +
            ((C35091 + C35092) * C294 + (C35093 + C35094) * C51047 -
             (C37863 + C37864) * C295 - (C37865 + C37866) * C50835) *
                C50764 * C2437 +
            ((C37864 + C37863) * C294 + (C37866 + C37865) * C51047 -
             (C33316 * C3604 + C50983 * C3607 + C33315 * C3244 +
              C33313 * C3249) *
                 C295 -
             (C33316 * C3608 + C50983 * C3610 + C33315 * C3250 +
              C33313 * C3256) *
                 C50835) *
                C50764 * C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C294 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C51047 -
             (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                 C295 -
             (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                 C50835) *
                C17338 +
            ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
             (C33548 + C33549) * C295 - (C33550 + C33551) * C50835) *
                C17339 +
            C33566 * C17340) *
               C50908 * C1480 +
           (((C33549 + C33548) * C295 -
             ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
             (C33551 + C33550) * C50835) *
                C17338 +
            ((C33554 + C33553) * C295 -
             ((C33357 + C33356) * C51047 + (C33355 + C33354) * C294) +
             (C33556 + C33555) * C50835) *
                C17339 +
            ((C33557 + C33558) * C295 - (C33368 * C51047 + C33369 * C294) +
             (C33559 + C33560) * C50835) *
                C17340) *
               C50908 * C50790) *
              C1765 +
          ((((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                 C295 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C51047 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C294) +
             (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                 C50835) *
                C17338 +
            ((C35091 + C35092) * C295 -
             ((C33740 + C33739) * C51047 + (C33738 + C33737) * C294) +
             (C35093 + C35094) * C50835) *
                C17339 +
            ((C35095 + C35096) * C295 - (C33749 * C51047 + C33750 * C294) +
             (C35097 + C35098) * C50835) *
                C17340) *
               C50908 * C1480 +
           (((C33737 + C33738) * C294 + (C33739 + C33740) * C51047 -
             (C35092 + C35091) * C295 - (C35094 + C35093) * C50835) *
                C17338 +
            ((C33741 + C33742) * C294 + (C33743 + C33744) * C51047 -
             (C35096 + C35095) * C295 - (C35098 + C35097) * C50835) *
                C17339 +
            ((C33745 + C33746) * C294 + (C33747 + C33748) * C51047 -
             (C33316 * C1153 + C50983 * C1160 + C33315 * C881 + C33313 * C895) *
                 C295 -
             (C33316 * C1161 + C50983 * C1165 + C33315 * C896 + C33313 * C905) *
                 C50835) *
                C17340) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
             C38910 * C1008 + C38906 * C1013 + C38911 * C1239 +
             C38907 * C1247) *
                C294 +
            (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
             C38910 * C1014 + C38906 * C1023 + C38911 * C1246 +
             C38907 * C1251) *
                C51047 -
            (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
             C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
                C295 -
            (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
             C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
                C50835) *
               C50764 * C50908 * C1480 +
           ((C38908 * C297 + C38904 * C304 + C38909 * C877 + C38905 * C887 +
             C38910 * C1151 + C38906 * C1156 + C38911 * C3723 +
             C38907 * C3730) *
                C295 -
            ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 +
              C38906 * C1024 + C38909 * C473 + C38905 * C484 + C38908 * C129 +
              C38904 * C141) *
                 C51047 +
             (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 +
              C38906 * C1015 + C38909 * C466 + C38905 * C472 + C38908 * C120 +
              C38904 * C128) *
                 C294) +
            (C38908 * C305 + C38904 * C315 + C38909 * C888 + C38905 * C901 +
             C38910 * C1157 + C38906 * C1163 + C38911 * C3729 +
             C38907 * C3735) *
                C50835) *
               C50764 * C50908 * C50790) *
              C1765 +
          (((C38908 * C875 + C38904 * C883 + C38909 * C1150 + C38905 * C1154 +
             C38910 * C3724 + C38906 * C3732 + C38911 * C6495 +
             C38907 * C6497) *
                C295 -
            ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 +
              C38906 * C1251 + C38909 * C1014 + C38905 * C1023 + C38908 * C480 +
              C38904 * C488) *
                 C51047 +
             (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 +
              C38906 * C1247 + C38909 * C1008 + C38905 * C1013 + C38908 * C470 +
              C38904 * C481) *
                 C294) +
            (C38908 * C884 + C38904 * C899 + C38909 * C1155 + C38905 * C1162 +
             C38910 * C3731 + C38906 * C3736 + C38911 * C6498 +
             C38907 * C6501) *
                C50835) *
               C50764 * C50908 * C1480 +
           ((C38908 * C466 + C38904 * C472 + C38909 * C1009 + C38905 * C1015 +
             C38910 * C1238 + C38906 * C1245 + C38911 * C6320 +
             C38907 * C6324) *
                C294 +
            (C38908 * C473 + C38904 * C484 + C38909 * C1016 + C38905 * C1024 +
             C38910 * C1244 + C38906 * C1250 + C38911 * C6325 +
             C38907 * C6329) *
                C51047 -
            (C38911 * C6496 + C38907 * C6499 + C38910 * C3723 + C38906 * C3730 +
             C38909 * C1151 + C38905 * C1156 + C38908 * C877 + C38904 * C887) *
                C295 -
            (C38911 * C6500 + C38907 * C6502 + C38910 * C3729 + C38906 * C3735 +
             C38909 * C1157 + C38905 * C1163 + C38908 * C888 + C38904 * C901) *
                C50835) *
               C50764 * C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            (C36631 * C118 + C36632 * C50819) * C50764 * C2438) *
               C1480 -
           ((C36642 * C50819 + C36641 * C118) * C50764 * C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C50790) *
              C51095 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C37864 + C37863) * C118 + (C37866 + C37865) * C50819) * C50764 *
                C2438) *
               C50790 -
           ((C36954 * C50819 + C36953 * C118) * C50764 * C2438 +
            ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C50764 *
                C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C1480) *
              C51084 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C50764 * C2436 +
            ((C37264 + C37263) * C118 + (C37266 + C37265) * C50819) * C50764 *
                C2437 +
            ((C37268 + C37267) * C118 + (C37270 + C37269) * C50819) * C50764 *
                C2438) *
               C1480 -
           (((C33316 * C3725 + C50983 * C3733 + C33315 * C3435 +
              C33313 * C3439) *
                 C50819 +
             (C33316 * C3721 + C50983 * C3726 + C33315 * C3430 +
              C33313 * C3434) *
                 C118) *
                C50764 * C2438 +
            ((C33316 * C3729 + C50983 * C3735 + C33315 * C1157 +
              C33313 * C1163) *
                 C50819 +
             (C33316 * C3723 + C50983 * C3730 + C33315 * C1151 +
              C33313 * C1156) *
                 C118) *
                C50764 * C2437 +
            ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C50764 *
                C2436) *
               C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C17338 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
            C33374 * C17340) *
               C50908 * C1480 -
           (C33375 * C17340 +
            ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
               C50908 * C50790) *
              C51095 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C17338 +
            ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C17339 +
            ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) * C17340) *
               C50908 * C50790 -
           (C33753 * C17340 +
            ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C17338) *
               C50908 * C1480) *
              C51084 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C17338 +
            ((C34330 + C34331) * C118 + (C34332 + C34333) * C50819) * C17339 +
            ((C34334 + C34335) * C118 + (C34336 + C34337) * C50819) * C17340) *
               C50908 * C1480 -
           (((C33316 * C1240 + C50983 * C1248 + C33315 * C1020 +
              C33313 * C1026) *
                 C50819 +
             (C33316 * C1236 + C50983 * C1241 + C33315 * C1011 +
              C33313 * C1019) *
                 C118) *
                C17340 +
            ((C34337 + C34336) * C50819 + (C34335 + C34334) * C118) * C17339 +
            ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C17338) *
               C50908 * C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
             C38910 * C1008 + C38906 * C1013 + C38911 * C1239 +
             C38907 * C1247) *
                C118 +
            (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
             C38910 * C1014 + C38906 * C1023 + C38911 * C1246 +
             C38907 * C1251) *
                C50819) *
               C50764 * C50908 * C1480 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C50819 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C118) *
               C50764 * C50908 * C50790) *
              C51095 +
          (((C38908 * C466 + C38904 * C472 + C38909 * C1009 + C38905 * C1015 +
             C38910 * C1238 + C38906 * C1245 + C38911 * C6320 +
             C38907 * C6324) *
                C118 +
            (C38908 * C473 + C38904 * C484 + C38909 * C1016 + C38905 * C1024 +
             C38910 * C1244 + C38906 * C1250 + C38911 * C6325 +
             C38907 * C6329) *
                C50819) *
               C50764 * C50908 * C50790 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C50819 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C118) *
               C50764 * C50908 * C1480) *
              C51084 +
          (((C38908 * C1008 + C38904 * C1013 + C38909 * C1239 + C38905 * C1247 +
             C38910 * C6319 + C38906 * C6322 + C38911 * C6602 +
             C38907 * C6606) *
                C118 +
            (C38908 * C1014 + C38904 * C1023 + C38909 * C1246 + C38905 * C1251 +
             C38910 * C6323 + C38906 * C6328 + C38911 * C6605 +
             C38907 * C6608) *
                C50819) *
               C50764 * C50908 * C1480 -
           ((C38911 * C6603 + C38907 * C6607 + C38910 * C6325 + C38906 * C6329 +
             C38909 * C1244 + C38905 * C1250 + C38908 * C1016 +
             C38904 * C1024) *
                C50819 +
            (C38911 * C6601 + C38907 * C6604 + C38910 * C6320 + C38906 * C6324 +
             C38909 * C1238 + C38905 * C1245 + C38908 * C1009 +
             C38904 * C1015) *
                C118) *
               C50764 * C50908 * C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C628 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C623 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C629 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C624) *
               C17338 +
           ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
            (C33548 + C33549) * C628 - (C33550 + C33551) * C623 +
            (C33916 + C33917) * C629 + (C33918 + C33919) * C624) *
               C17339 +
           (C33366 * C627 + C33367 * C622 - C33561 * C628 - C33562 * C623 +
            (C33920 + C33921) * C629 + (C33922 + C33923) * C624) *
               C17340) *
              C50908 * C51040 +
          (((C33549 + C33548) * C628 -
            ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
            (C33551 + C33550) * C623 - (C33917 + C33916) * C629 -
            (C33919 + C33918) * C624) *
               C17338 +
           ((C33554 + C33553) * C628 -
            ((C33357 + C33356) * C622 + (C33355 + C33354) * C627) +
            (C33556 + C33555) * C623 - (C33921 + C33920) * C629 -
            (C33923 + C33922) * C624) *
               C17339 +
           ((C33557 + C33558) * C628 - (C33368 * C622 + C33369 * C627) +
            (C33559 + C33560) * C623 -
            (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                C629 -
            (C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                C624) *
               C17340) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C17338 +
           ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
           C33374 * C17340) *
              C50908 * C112 -
          (C33375 * C17340 +
           ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
           ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
              C50908 * C113 +
          (C33374 * C17338 +
           ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C17339 +
           ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) * C17340) *
              C50908 * C114 -
          (((C33316 * C482 + C50983 * C489 + C33315 * C137 + C33313 * C145) *
                C50819 +
            (C33316 * C471 + C50983 * C483 + C33315 * C124 + C33313 * C136) *
                C118) *
               C17340 +
           ((C33365 + C33364) * C50819 + (C33363 + C33362) * C118) * C17339 +
           C33375 * C17338) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C50764 * C2436 +
           ((C33315 * C296 + C33313 * C302 + C33316 * C875 + C50983 * C883) *
                C118 +
            (C33315 * C303 + C33313 * C314 + C33316 * C884 + C50983 * C899) *
                C50819) *
               C50764 * C2437 +
           ((C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C118 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C50819) *
               C50764 * C2438) *
              C112 -
          (((C33919 + C33918) * C50819 + (C33917 + C33916) * C118) * C50764 *
               C2438 +
           ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
               C2437 +
           ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
               C2436) *
              C113 +
          (C33374 * C50764 * C2436 +
           ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
               C2437 +
           ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
               C2438) *
              C114 -
          (((C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                C50819 +
            (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                C118) *
               C50764 * C2438 +
           ((C33560 + C33559) * C50819 + (C33558 + C33557) * C118) * C50764 *
               C2437 +
           C33375 * C50764 * C2436) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
            C36631 * C629 + C36632 * C624) *
               C50764 * C2436 +
           ((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
            (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
            (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
               C50764 * C2437 +
           (C36631 * C627 + C36632 * C622 - (C36652 + C36651) * C628 -
            (C36654 + C36653) * C623 +
            (C33315 * C2949 + C33313 * C2952 + C33316 * C3245 +
             C50983 * C3251) *
                C629 +
            (C33315 * C2953 + C33313 * C2958 + C33316 * C3252 +
             C50983 * C3257) *
                C624) *
               C50764 * C2438) *
              C51040 +
          (((C33549 + C33548) * C628 -
            ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
            (C33551 + C33550) * C623 - C36641 * C629 - C36642 * C624) *
               C50764 * C2436 +
           ((C33916 + C33917) * C628 -
            ((C33550 + C33551) * C622 + (C33548 + C33549) * C627) +
            (C33918 + C33919) * C623 - (C36655 + C36656) * C629 -
            (C36657 + C36658) * C624) *
               C50764 * C2437 +
           ((C36656 + C36655) * C628 - (C36642 * C622 + C36641 * C627) +
            (C36658 + C36657) * C623 -
            (C33316 * C3246 + C50983 * C3253 + C33315 * C2950 +
             C33313 * C2954) *
                C629 -
            (C33316 * C3254 + C50983 * C3258 + C33315 * C2955 +
             C33313 * C2959) *
                C624) *
               C50764 * C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C118 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C50819) *
              C50764 * C50908 * C112 -
          ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
            C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
               C50819 +
           (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
            C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
               C118) *
              C50764 * C50908 * C113 +
          ((C38908 * C121 + C38904 * C130 + C38909 * C467 + C38905 * C474 +
            C38910 * C1010 + C38906 * C1017 + C38911 * C1237 + C38907 * C1243) *
               C118 +
           (C38908 * C131 + C38904 * C142 + C38909 * C475 + C38905 * C485 +
            C38910 * C1018 + C38906 * C1025 + C38911 * C1242 + C38907 * C1249) *
               C50819) *
              C50764 * C50908 * C114 -
          ((C38911 * C1240 + C38907 * C1248 + C38910 * C1020 + C38906 * C1026 +
            C38909 * C477 + C38905 * C486 + C38908 * C133 + C38904 * C143) *
               C50819 +
           (C38911 * C1236 + C38907 * C1241 + C38910 * C1011 + C38906 * C1019 +
            C38909 * C468 + C38905 * C476 + C38908 * C122 + C38904 * C132) *
               C118) *
              C50764 * C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C627 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C622 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C628 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C623 +
           (C38908 * C630 + C38904 * C635 + C38909 * C876 + C38905 * C885 +
            C38910 * C3429 + C38906 * C3432 + C38911 * C3722 + C38907 * C3728) *
               C629 +
           (C38908 * C636 + C38904 * C645 + C38909 * C886 + C38905 * C900 +
            C38910 * C3433 + C38906 * C3438 + C38911 * C3727 + C38907 * C3734) *
               C624) *
              C50764 * C50908 * C51040 +
          ((C38908 * C297 + C38904 * C304 + C38909 * C877 + C38905 * C887 +
            C38910 * C1151 + C38906 * C1156 + C38911 * C3723 + C38907 * C3730) *
               C628 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C622 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C627) +
           (C38908 * C305 + C38904 * C315 + C38909 * C888 + C38905 * C901 +
            C38910 * C1157 + C38906 * C1163 + C38911 * C3729 + C38907 * C3735) *
               C623 -
           (C38911 * C3721 + C38907 * C3726 + C38910 * C3430 + C38906 * C3434 +
            C38909 * C878 + C38905 * C889 + C38908 * C631 + C38904 * C637) *
               C629 -
           (C38911 * C3725 + C38907 * C3733 + C38910 * C3435 + C38906 * C3439 +
            C38909 * C890 + C38905 * C902 + C38908 * C638 + C38904 * C646) *
               C624) *
              C50764 * C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
               C757 +
           (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
               C752 -
           (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
               C758 -
           (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
               C753 +
           (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
               C759 +
           (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
               C754 -
           (C33316 * C3243 + C50983 * C3247 + C33315 * C761 + C33313 * C765) *
               C760 -
           (C33316 * C3248 + C50983 * C3255 + C33315 * C766 + C33313 * C773) *
               C755) *
              C17338 +
          ((C33350 + C33351) * C757 + (C33352 + C33353) * C752 -
           (C33548 + C33549) * C758 - (C33550 + C33551) * C753 +
           (C33916 + C33917) * C759 + (C33918 + C33919) * C754 -
           (C33316 * C3244 + C50983 * C3249 + C33315 * C762 + C33313 * C767) *
               C760 -
           (C33316 * C3250 + C50983 * C3256 + C33315 * C768 + C33313 * C774) *
               C755) *
              C17339 +
          (C33366 * C757 + C33367 * C752 - C33561 * C758 - C33562 * C753 +
           (C33920 + C33921) * C759 + (C33922 + C33923) * C754 -
           (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
               C760 -
           (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
               C755) *
              C17340) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C295 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C50835) *
               C17338 +
           ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
            (C33548 + C33549) * C295 - (C33550 + C33551) * C50835) *
               C17339 +
           C33566 * C17340) *
              C50908 * C291 +
          (((C33549 + C33548) * C295 -
            ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
            (C33551 + C33550) * C50835) *
               C17338 +
           ((C33554 + C33553) * C295 -
            ((C33357 + C33356) * C51047 + (C33355 + C33354) * C294) +
            (C33556 + C33555) * C50835) *
               C17339 +
           ((C33557 + C33558) * C295 - (C33368 * C51047 + C33369 * C294) +
            (C33559 + C33560) * C50835) *
               C17340) *
              C50908 * C292 +
          (C33566 * C17338 +
           ((C33361 + C33360) * C294 + (C33359 + C33358) * C51047 -
            (C33558 + C33557) * C295 - (C33560 + C33559) * C50835) *
               C17339 +
           ((C33362 + C33363) * C294 + (C33364 + C33365) * C51047 -
            (C33316 * C1633 + C50983 * C1634 + C33315 * C300 + C33313 * C310) *
                C295 -
            (C33316 * C1635 + C50983 * C1636 + C33315 * C311 + C33313 * C318) *
                C50835) *
               C17340) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
            (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           ((C36336 + C36335) * C294 + (C36338 + C36337) * C51047 -
            (C33316 * C3243 + C50983 * C3247 + C33315 * C761 + C33313 * C765) *
                C295 -
            (C33316 * C3248 + C50983 * C3255 + C33315 * C766 + C33313 * C773) *
                C50835) *
               C50764 * C2438) *
              C291 +
          (((C33549 + C33548) * C295 -
            ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
            (C33551 + C33550) * C50835) *
               C50764 * C2436 +
           ((C33916 + C33917) * C295 -
            ((C33550 + C33551) * C51047 + (C33548 + C33549) * C294) +
            (C33918 + C33919) * C50835) *
               C50764 * C2437 +
           ((C33315 * C762 + C33313 * C767 + C33316 * C3244 + C50983 * C3249) *
                C295 -
            ((C33919 + C33918) * C51047 + (C33917 + C33916) * C294) +
            (C33315 * C768 + C33313 * C774 + C33316 * C3250 + C50983 * C3256) *
                C50835) *
               C50764 * C2438) *
              C292 +
          (C33566 * C50764 * C2436 +
           ((C33554 + C33553) * C294 + (C33556 + C33555) * C51047 -
            (C33921 + C33920) * C295 - (C33923 + C33922) * C50835) *
               C50764 * C2437 +
           ((C33920 + C33921) * C294 + (C33922 + C33923) * C51047 -
            (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
                C295 -
            (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
                C50835) *
               C50764 * C2438) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
               C757 +
           (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
               C752 -
           (C36331 + C36332) * C758 - (C36333 + C36334) * C753 + C36631 * C759 +
           C36632 * C754 - C36757 * C760 - C36758 * C755) *
              C50764 * C2436 +
          ((C36332 + C36331) * C757 + (C36334 + C36333) * C752 -
           (C36335 + C36336) * C758 - (C36337 + C36338) * C753 +
           (C36651 + C36652) * C759 + (C36653 + C36654) * C754 -
           (C36767 + C36768) * C760 - (C36769 + C36770) * C755) *
              C50764 * C2437 +
          (C36631 * C757 + C36632 * C752 - C36757 * C758 - C36758 * C753 +
           (C36768 + C36767) * C759 + (C36770 + C36769) * C754 -
           (C33316 * C20412 + C50983 * C20413 + C33315 * C3083 +
            C33313 * C3085) *
               C760 -
           (C33316 * C20414 + C50983 * C20415 + C33315 * C3086 +
            C33313 * C3089) *
               C755) *
              C50764 * C2438) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C294 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C51047 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C295 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C50835) *
              C50764 * C50908 * C291 +
          ((C38908 * C297 + C38904 * C304 + C38909 * C877 + C38905 * C887 +
            C38910 * C1151 + C38906 * C1156 + C38911 * C3723 + C38907 * C3730) *
               C295 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C51047 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C294) +
           (C38908 * C305 + C38904 * C315 + C38909 * C888 + C38905 * C901 +
            C38910 * C1157 + C38906 * C1163 + C38911 * C3729 + C38907 * C3735) *
               C50835) *
              C50764 * C50908 * C292 +
          ((C38908 * C121 + C38904 * C130 + C38909 * C467 + C38905 * C474 +
            C38910 * C1010 + C38906 * C1017 + C38911 * C1237 + C38907 * C1243) *
               C294 +
           (C38908 * C131 + C38904 * C142 + C38909 * C475 + C38905 * C485 +
            C38910 * C1018 + C38906 * C1025 + C38911 * C1242 + C38907 * C1249) *
               C51047 -
           (C38911 * C7095 + C38907 * C7096 + C38910 * C1152 + C38906 * C1158 +
            C38909 * C879 + C38905 * C891 + C38908 * C298 + C38904 * C306) *
               C295 -
           (C38911 * C7097 + C38907 * C7098 + C38910 * C1159 + C38906 * C1164 +
            C38909 * C892 + C38905 * C903 + C38908 * C307 + C38904 * C316) *
               C50835) *
              C50764 * C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
           C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
              C757 +
          (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
           C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
              C752 -
          (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
           C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
              C758 -
          (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
           C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
              C753 +
          (C38908 * C630 + C38904 * C635 + C38909 * C876 + C38905 * C885 +
           C38910 * C3429 + C38906 * C3432 + C38911 * C3722 + C38907 * C3728) *
              C759 +
          (C38908 * C636 + C38904 * C645 + C38909 * C886 + C38905 * C900 +
           C38910 * C3433 + C38906 * C3438 + C38911 * C3727 + C38907 * C3734) *
              C754 -
          (C38911 * C20694 + C38907 * C20696 + C38910 * C3603 + C38906 * C3605 +
           C38909 * C3243 + C38905 * C3247 + C38908 * C761 + C38904 * C765) *
              C760 -
          (C38911 * C20695 + C38907 * C20697 + C38910 * C3606 + C38906 * C3609 +
           C38909 * C3248 + C38905 * C3255 + C38908 * C766 + C38904 * C773) *
              C755) *
         C50764 * C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C628 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C623 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C629 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C624) *
               C17338 +
           ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
            (C33548 + C33549) * C628 - (C33550 + C33551) * C623 +
            (C33916 + C33917) * C629 + (C33918 + C33919) * C624) *
               C17339 +
           (C33366 * C627 + C33367 * C622 - C33561 * C628 - C33562 * C623 +
            (C33920 + C33921) * C629 + (C33922 + C33923) * C624) *
               C17340) *
              C50908 * C50785 * C51049 +
          (((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                C628 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C622 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C627) +
            (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                C623 -
            (C33316 * C3429 + C50983 * C3432 + C33315 * C876 + C33313 * C885) *
                C629 -
            (C33316 * C3433 + C50983 * C3438 + C33315 * C886 + C33313 * C900) *
                C624) *
               C17338 +
           ((C33315 * C877 + C33313 * C887 + C33316 * C1151 + C50983 * C1156) *
                C628 -
            ((C33740 + C33739) * C622 + (C33738 + C33737) * C627) +
            (C33315 * C888 + C33313 * C901 + C33316 * C1157 + C50983 * C1163) *
                C623 -
            (C33316 * C3430 + C50983 * C3434 + C33315 * C878 + C33313 * C889) *
                C629 -
            (C33316 * C3435 + C50983 * C3439 + C33315 * C890 + C33313 * C902) *
                C624) *
               C17339 +
           ((C33315 * C879 + C33313 * C891 + C33316 * C1152 + C50983 * C1158) *
                C628 -
            (C33749 * C622 + C33750 * C627) +
            (C33315 * C892 + C33313 * C903 + C33316 * C1159 + C50983 * C1164) *
                C623 -
            (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                C629 -
            (C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                C624) *
               C17340) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C17338 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
            C33374 * C17340) *
               C50908 * C291 -
           (C33375 * C17340 +
            ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
               C50908 * C292 +
           (C33374 * C17338 +
            ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C17339 +
            ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) * C17340) *
               C50908 * C293) *
              C51049 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C17338 +
            ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C17339 +
            ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) * C17340) *
               C50908 * C292 -
           (C33753 * C17340 +
            ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C17338) *
               C50908 * C291 -
           (((C33316 * C1021 + C50983 * C1027 + C33315 * C479 + C33313 * C487) *
                 C50819 +
             (C33316 * C1012 + C50983 * C1022 + C33315 * C469 + C33313 * C478) *
                 C118) *
                C17340 +
            ((C33748 + C33747) * C50819 + (C33746 + C33745) * C118) * C17339 +
            C33753 * C17338) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            ((C36336 + C36335) * C118 + (C36338 + C36337) * C50819) * C50764 *
                C2438) *
               C291 -
           (((C33919 + C33918) * C50819 + (C33917 + C33916) * C118) * C50764 *
                C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C292 +
           (C33374 * C50764 * C2436 +
            ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
                C2437 +
            ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
                C2438) *
               C293) *
              C51049 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C33315 * C878 + C33313 * C889 + C33316 * C3430 + C50983 * C3434) *
                 C118 +
             (C33315 * C890 + C33313 * C902 + C33316 * C3435 + C50983 * C3439) *
                 C50819) *
                C50764 * C2438) *
               C292 -
           (((C33316 * C3433 + C50983 * C3438 + C33315 * C886 + C33313 * C900) *
                 C50819 +
             (C33316 * C3429 + C50983 * C3432 + C33315 * C876 + C33313 * C885) *
                 C118) *
                C50764 * C2438 +
            ((C33316 * C1155 + C50983 * C1162 + C33315 * C884 + C33313 * C899) *
                 C50819 +
             (C33316 * C1150 + C50983 * C1154 + C33315 * C875 + C33313 * C883) *
                 C118) *
                C50764 * C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C291 -
           (((C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                 C50819 +
             (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                 C118) *
                C50764 * C2438 +
            ((C35098 + C35097) * C50819 + (C35096 + C35095) * C118) * C50764 *
                C2437 +
            C33753 * C50764 * C2436) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
            C36631 * C629 + C36632 * C624) *
               C50764 * C2436 +
           ((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
            (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
            (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
               C50764 * C2437 +
           (C36631 * C627 + C36632 * C622 - C36757 * C628 - C36758 * C623 +
            (C36768 + C36767) * C629 + (C36770 + C36769) * C624) *
               C50764 * C2438) *
              C50785 * C51049 +
          (((C36941 + C36942) * C628 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C622 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C627) +
            (C36943 + C36944) * C623 - C36953 * C629 - C36954 * C624) *
               C50764 * C2436 +
           ((C36946 + C36945) * C628 -
            ((C36944 + C36943) * C622 + (C36942 + C36941) * C627) +
            (C36948 + C36947) * C623 - (C36949 + C36950) * C629 -
            (C36951 + C36952) * C624) *
               C50764 * C2437 +
           ((C36950 + C36949) * C628 - (C36954 * C622 + C36953 * C627) +
            (C36952 + C36951) * C623 -
            (C33316 * C20618 + C50983 * C20619 + C33315 * C3245 +
             C33313 * C3251) *
                C629 -
            (C33316 * C20620 + C50983 * C20621 + C33315 * C3252 +
             C33313 * C3257) *
                C624) *
               C50764 * C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
             C38910 * C1008 + C38906 * C1013 + C38911 * C1239 +
             C38907 * C1247) *
                C118 +
            (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
             C38910 * C1014 + C38906 * C1023 + C38911 * C1246 +
             C38907 * C1251) *
                C50819) *
               C50764 * C50908 * C291 -
           ((C38911 * C1244 + C38907 * C1250 + C38910 * C1016 + C38906 * C1024 +
             C38909 * C473 + C38905 * C484 + C38908 * C129 + C38904 * C141) *
                C50819 +
            (C38911 * C1238 + C38907 * C1245 + C38910 * C1009 + C38906 * C1015 +
             C38909 * C466 + C38905 * C472 + C38908 * C120 + C38904 * C128) *
                C118) *
               C50764 * C50908 * C292 +
           ((C38908 * C121 + C38904 * C130 + C38909 * C467 + C38905 * C474 +
             C38910 * C1010 + C38906 * C1017 + C38911 * C1237 +
             C38907 * C1243) *
                C118 +
            (C38908 * C131 + C38904 * C142 + C38909 * C475 + C38905 * C485 +
             C38910 * C1018 + C38906 * C1025 + C38911 * C1242 +
             C38907 * C1249) *
                C50819) *
               C50764 * C50908 * C293) *
              C51049 +
          (((C38908 * C466 + C38904 * C472 + C38909 * C1009 + C38905 * C1015 +
             C38910 * C1238 + C38906 * C1245 + C38911 * C6320 +
             C38907 * C6324) *
                C118 +
            (C38908 * C473 + C38904 * C484 + C38909 * C1016 + C38905 * C1024 +
             C38910 * C1244 + C38906 * C1250 + C38911 * C6325 +
             C38907 * C6329) *
                C50819) *
               C50764 * C50908 * C292 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C50819 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C118) *
               C50764 * C50908 * C291 -
           ((C38911 * C6326 + C38907 * C6330 + C38910 * C1242 + C38906 * C1249 +
             C38909 * C1018 + C38905 * C1025 + C38908 * C475 + C38904 * C485) *
                C50819 +
            (C38911 * C6321 + C38907 * C6327 + C38910 * C1237 + C38906 * C1243 +
             C38909 * C1010 + C38905 * C1017 + C38908 * C467 + C38904 * C474) *
                C118) *
               C50764 * C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38908 * C119 + C38904 * C126 + C38909 * C470 + C38905 * C481 +
            C38910 * C1008 + C38906 * C1013 + C38911 * C1239 + C38907 * C1247) *
               C627 +
           (C38908 * C127 + C38904 * C140 + C38909 * C480 + C38905 * C488 +
            C38910 * C1014 + C38906 * C1023 + C38911 * C1246 + C38907 * C1251) *
               C622 -
           (C38911 * C3724 + C38907 * C3732 + C38910 * C1150 + C38906 * C1154 +
            C38909 * C875 + C38905 * C883 + C38908 * C296 + C38904 * C302) *
               C628 -
           (C38911 * C3731 + C38907 * C3736 + C38910 * C1155 + C38906 * C1162 +
            C38909 * C884 + C38905 * C899 + C38908 * C303 + C38904 * C314) *
               C623 +
           (C38908 * C630 + C38904 * C635 + C38909 * C876 + C38905 * C885 +
            C38910 * C3429 + C38906 * C3432 + C38911 * C3722 + C38907 * C3728) *
               C629 +
           (C38908 * C636 + C38904 * C645 + C38909 * C886 + C38905 * C900 +
            C38910 * C3433 + C38906 * C3438 + C38911 * C3727 + C38907 * C3734) *
               C624) *
              C50764 * C50908 * C50785 * C51049 +
          ((C38908 * C875 + C38904 * C883 + C38909 * C1150 + C38905 * C1154 +
            C38910 * C3724 + C38906 * C3732 + C38911 * C6495 + C38907 * C6497) *
               C628 -
           ((C38911 * C6323 + C38907 * C6328 + C38910 * C1246 + C38906 * C1251 +
             C38909 * C1014 + C38905 * C1023 + C38908 * C480 + C38904 * C488) *
                C622 +
            (C38911 * C6319 + C38907 * C6322 + C38910 * C1239 + C38906 * C1247 +
             C38909 * C1008 + C38905 * C1013 + C38908 * C470 + C38904 * C481) *
                C627) +
           (C38908 * C884 + C38904 * C899 + C38909 * C1155 + C38905 * C1162 +
            C38910 * C3731 + C38906 * C3736 + C38911 * C6498 + C38907 * C6501) *
               C623 -
           (C38911 * C22838 + C38907 * C22839 + C38910 * C3722 +
            C38906 * C3728 + C38909 * C3429 + C38905 * C3432 + C38908 * C876 +
            C38904 * C885) *
               C629 -
           (C38911 * C22840 + C38907 * C22841 + C38910 * C3727 +
            C38906 * C3734 + C38909 * C3433 + C38905 * C3438 + C38908 * C886 +
            C38904 * C900) *
               C624) *
              C50764 * C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C1355 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C1350 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C1356 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C50835) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C1355 +
                     (C44274 + C44275 + C44276) * C1350 -
                     (C44459 + C44460 + C44461) * C1356 -
                     (C44462 + C44463 + C44464) * C50835) *
                        C50769) *
                       C50908 * C51093 +
                   (((C44461 + C44460 + C44459) * C1356 -
                     ((C44276 + C44275 + C44274) * C1350 +
                      (C44273 + C44272 + C44271) * C1355) +
                     (C44464 + C44463 + C44462) * C50835) *
                        C51035 +
                    ((C44465 + C44466 + C44467) * C1356 -
                     ((C44277 + C44278 + C44279) * C1350 +
                      (C44280 + C44281 + C44282) * C1355) +
                     (C44468 + C44469 + C44470) * C50835) *
                        C50769) *
                       C50908 * C51078 +
                   (((C44282 + C44281 + C44280) * C1355 +
                     (C44279 + C44278 + C44277) * C1350 -
                     (C44467 + C44466 + C44465) * C1356 -
                     (C44470 + C44469 + C44468) * C50835) *
                        C51035 +
                    ((C44283 + C44284 + C44285) * C1355 +
                     (C44286 + C44287 + C44288) * C1350 -
                     (C44233 * C1153 + C44230 * C1160 + C44232 * C881 +
                      C51099 * C895 + C44231 * C299 + C51098 * C308) *
                         C1356 -
                     (C44233 * C1161 + C44230 * C1165 + C44232 * C896 +
                      C51099 * C905 + C44231 * C309 + C51098 * C317) *
                         C50835) *
                        C50769) *
                       C50908 * C1354) *
                  C50849) /
                 (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C1482 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51094 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C1483 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C51081 +
                     (C44231 * C630 + C51098 * C635 + C44232 * C876 +
                      C51099 * C885 + C44233 * C3429 + C44230 * C3432) *
                         C1484 +
                     (C44231 * C636 + C51098 * C645 + C44232 * C886 +
                      C51099 * C900 + C44233 * C3433 + C44230 * C3438) *
                         C1479) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C1482 +
                     (C44274 + C44275 + C44276) * C51094 -
                     (C44459 + C44460 + C44461) * C1483 -
                     (C44462 + C44463 + C44464) * C51081 +
                     (C44811 + C44812 + C44813) * C1484 +
                     (C44814 + C44815 + C44816) * C1479) *
                        C50769) *
                       C50908 * C1480 +
                   (((C44461 + C44460 + C44459) * C1483 -
                     ((C44276 + C44275 + C44274) * C51094 +
                      (C44273 + C44272 + C44271) * C1482) +
                     (C44464 + C44463 + C44462) * C51081 -
                     (C44813 + C44812 + C44811) * C1484 -
                     (C44816 + C44815 + C44814) * C1479) *
                        C51035 +
                    ((C44465 + C44466 + C44467) * C1483 -
                     ((C44277 + C44278 + C44279) * C51094 +
                      (C44280 + C44281 + C44282) * C1482) +
                     (C44468 + C44469 + C44470) * C51081 -
                     (C44233 * C3431 + C44230 * C3437 + C44232 * C880 +
                      C51099 * C893 + C44231 * C632 + C51098 * C639) *
                         C1484 -
                     (C44233 * C3436 + C44230 * C3440 + C44232 * C894 +
                      C51099 * C904 + C44231 * C640 + C51098 * C647) *
                         C1479) *
                        C50769) *
                       C50908 * C50790) *
                  C50849) /
                 (p * q * std::sqrt(p + q));
    d2ee[197] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C1355 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C1350 -
                      (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                       C51099 * C883 + C44231 * C296 + C51098 * C302) *
                          C1356 -
                      (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                       C51099 * C899 + C44231 * C303 + C51098 * C314) *
                          C50835) *
                         C51035 +
                     ((C44271 + C44272 + C44273) * C1355 +
                      (C44274 + C44275 + C44276) * C1350 -
                      (C44459 + C44460 + C44461) * C1356 -
                      (C44462 + C44463 + C44464) * C50835) *
                         C50769) *
                        C50908 * C1480 +
                    (((C44461 + C44460 + C44459) * C1356 -
                      ((C44276 + C44275 + C44274) * C1350 +
                       (C44273 + C44272 + C44271) * C1355) +
                      (C44464 + C44463 + C44462) * C50835) *
                         C51035 +
                     ((C44465 + C44466 + C44467) * C1356 -
                      ((C44277 + C44278 + C44279) * C1350 +
                       (C44280 + C44281 + C44282) * C1355) +
                      (C44468 + C44469 + C44470) * C50835) *
                         C50769) *
                        C50908 * C50790) *
                       C51049 +
                   ((((C44231 * C875 + C51098 * C883 + C44232 * C1150 +
                       C51099 * C1154 + C44233 * C3724 + C44230 * C3732) *
                          C1356 -
                      ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                        C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                           C1350 +
                       (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                        C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                           C1355) +
                      (C44231 * C884 + C51098 * C899 + C44232 * C1155 +
                       C51099 * C1162 + C44233 * C3731 + C44230 * C3736) *
                          C50835) *
                         C51035 +
                     ((C45967 + C45968 + C45969) * C1356 -
                      ((C44646 + C44645 + C44644) * C1350 +
                       (C44643 + C44642 + C44641) * C1355) +
                      (C45970 + C45971 + C45972) * C50835) *
                         C50769) *
                        C50908 * C1480 +
                    (((C44641 + C44642 + C44643) * C1355 +
                      (C44644 + C44645 + C44646) * C1350 -
                      (C45969 + C45968 + C45967) * C1356 -
                      (C45972 + C45971 + C45970) * C50835) *
                         C51035 +
                     ((C44647 + C44648 + C44649) * C1355 +
                      (C44650 + C44651 + C44652) * C1350 -
                      (C44233 * C7095 + C44230 * C7096 + C44232 * C1152 +
                       C51099 * C1158 + C44231 * C879 + C51098 * C891) *
                          C1356 -
                      (C44233 * C7097 + C44230 * C7098 + C44232 * C1159 +
                       C51099 * C1164 + C44231 * C892 + C51098 * C903) *
                          C50835) *
                         C50769) *
                        C50908 * C50790) *
                       C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[198] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C1355 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C1350 -
                      (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                       C51099 * C883 + C44231 * C296 + C51098 * C302) *
                          C1356 -
                      (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                       C51099 * C899 + C44231 * C303 + C51098 * C314) *
                          C50835) *
                         C51035 +
                     ((C44271 + C44272 + C44273) * C1355 +
                      (C44274 + C44275 + C44276) * C1350 -
                      (C44459 + C44460 + C44461) * C1356 -
                      (C44462 + C44463 + C44464) * C50835) *
                         C50769) *
                        C50908 * C51040 +
                    (((C44461 + C44460 + C44459) * C1356 -
                      ((C44276 + C44275 + C44274) * C1350 +
                       (C44273 + C44272 + C44271) * C1355) +
                      (C44464 + C44463 + C44462) * C50835) *
                         C51035 +
                     ((C44465 + C44466 + C44467) * C1356 -
                      ((C44277 + C44278 + C44279) * C1350 +
                       (C44280 + C44281 + C44282) * C1355) +
                      (C44468 + C44469 + C44470) * C50835) *
                         C50769) *
                        C50908 * C50790) *
                       C1765 +
                   ((((C44231 * C875 + C51098 * C883 + C44232 * C1150 +
                       C51099 * C1154 + C44233 * C3724 + C44230 * C3732) *
                          C1356 -
                      ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                        C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                           C1350 +
                       (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                        C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                           C1355) +
                      (C44231 * C884 + C51098 * C899 + C44232 * C1155 +
                       C51099 * C1162 + C44233 * C3731 + C44230 * C3736) *
                          C50835) *
                         C51035 +
                     ((C45967 + C45968 + C45969) * C1356 -
                      ((C44646 + C44645 + C44644) * C1350 +
                       (C44643 + C44642 + C44641) * C1355) +
                      (C45970 + C45971 + C45972) * C50835) *
                         C50769) *
                        C50908 * C51040 +
                    (((C44641 + C44642 + C44643) * C1355 +
                      (C44644 + C44645 + C44646) * C1350 -
                      (C45969 + C45968 + C45967) * C1356 -
                      (C45972 + C45971 + C45970) * C50835) *
                         C51035 +
                     ((C44647 + C44648 + C44649) * C1355 +
                      (C44650 + C44651 + C44652) * C1350 -
                      (C44233 * C7095 + C44230 * C7096 + C44232 * C1152 +
                       C51099 * C1158 + C44231 * C879 + C51098 * C891) *
                          C1356 -
                      (C44233 * C7097 + C44230 * C7098 + C44232 * C1159 +
                       C51099 * C1164 + C44231 * C892 + C51098 * C903) *
                          C50835) *
                         C50769) *
                        C50908 * C50790) *
                       C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C1482 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51094 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C1483 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C51081 +
                     (C44231 * C630 + C51098 * C635 + C44232 * C876 +
                      C51099 * C885 + C44233 * C3429 + C44230 * C3432) *
                         C1484 +
                     (C44231 * C636 + C51098 * C645 + C44232 * C886 +
                      C51099 * C900 + C44233 * C3433 + C44230 * C3438) *
                         C1479) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C1482 +
                     (C44274 + C44275 + C44276) * C51094 -
                     (C44459 + C44460 + C44461) * C1483 -
                     (C44462 + C44463 + C44464) * C51081 +
                     (C44811 + C44812 + C44813) * C1484 +
                     (C44814 + C44815 + C44816) * C1479) *
                        C50769) *
                       C50908 * C50785 * C1765 +
                   (((C44231 * C875 + C51098 * C883 + C44232 * C1150 +
                      C51099 * C1154 + C44233 * C3724 + C44230 * C3732) *
                         C1483 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C51094 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C1482) +
                     (C44231 * C884 + C51098 * C899 + C44232 * C1155 +
                      C51099 * C1162 + C44233 * C3731 + C44230 * C3736) *
                         C51081 -
                     (C44233 * C3722 + C44230 * C3728 + C44232 * C3429 +
                      C51099 * C3432 + C44231 * C876 + C51098 * C885) *
                         C1484 -
                     (C44233 * C3727 + C44230 * C3734 + C44232 * C3433 +
                      C51099 * C3438 + C44231 * C886 + C51098 * C900) *
                         C1479) *
                        C51035 +
                    ((C45967 + C45968 + C45969) * C1483 -
                     ((C44646 + C44645 + C44644) * C51094 +
                      (C44643 + C44642 + C44641) * C1482) +
                     (C45970 + C45971 + C45972) * C51081 -
                     (C44233 * C3721 + C44230 * C3726 + C44232 * C3430 +
                      C51099 * C3434 + C44231 * C878 + C51098 * C889) *
                         C1484 -
                     (C44233 * C3725 + C44230 * C3733 + C44232 * C3435 +
                      C51099 * C3439 + C44231 * C890 + C51098 * C902) *
                         C1479) *
                        C50769) *
                       C50908 * C50785 * C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C1355 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C1350 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C1356 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C50835) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C1355 +
                     (C44274 + C44275 + C44276) * C1350 -
                     (C44459 + C44460 + C44461) * C1356 -
                     (C44462 + C44463 + C44464) * C50835) *
                        C50769) *
                       C50908 * C50785 * C51095 +
                   (((C44231 * C875 + C51098 * C883 + C44232 * C1150 +
                      C51099 * C1154 + C44233 * C3724 + C44230 * C3732) *
                         C1356 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C1350 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C1355) +
                     (C44231 * C884 + C51098 * C899 + C44232 * C1155 +
                      C51099 * C1162 + C44233 * C3731 + C44230 * C3736) *
                         C50835) *
                        C51035 +
                    ((C45967 + C45968 + C45969) * C1356 -
                     ((C44646 + C44645 + C44644) * C1350 +
                      (C44643 + C44642 + C44641) * C1355) +
                     (C45970 + C45971 + C45972) * C50835) *
                        C50769) *
                       C50908 * C50785 * C51084 +
                   (((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                      C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                         C1355 +
                     (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                      C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                         C1350 -
                     (C44233 * C6495 + C44230 * C6497 + C44232 * C3724 +
                      C51099 * C3732 + C44231 * C1150 + C51098 * C1154) *
                         C1356 -
                     (C44233 * C6498 + C44230 * C6501 + C44232 * C3731 +
                      C51099 * C3736 + C44231 * C1155 + C51098 * C1162) *
                         C50835) *
                        C51035 +
                    ((C45219 + C45220 + C45221) * C1355 +
                     (C45222 + C45223 + C45224) * C1350 -
                     (C44233 * C6496 + C44230 * C6499 + C44232 * C3723 +
                      C51099 * C3730 + C44231 * C1151 + C51098 * C1156) *
                         C1356 -
                     (C44233 * C6500 + C44230 * C6502 + C44232 * C3729 +
                      C51099 * C3735 + C44231 * C1157 + C51098 * C1163) *
                         C50835) *
                        C50769) *
                       C50908 * C50785 * C2009)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C627 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C622 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C628 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C623 +
                     (C44231 * C630 + C51098 * C635 + C44232 * C876 +
                      C51099 * C885 + C44233 * C3429 + C44230 * C3432) *
                         C629 +
                     (C44231 * C636 + C51098 * C645 + C44232 * C886 +
                      C51099 * C900 + C44233 * C3433 + C44230 * C3438) *
                         C624) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C627 +
                     (C44274 + C44275 + C44276) * C622 -
                     (C44459 + C44460 + C44461) * C628 -
                     (C44462 + C44463 + C44464) * C623 +
                     (C44811 + C44812 + C44813) * C629 +
                     (C44814 + C44815 + C44816) * C624) *
                        C50769) *
                       C50908 * C51040 +
                   (((C44461 + C44460 + C44459) * C628 -
                     ((C44276 + C44275 + C44274) * C622 +
                      (C44273 + C44272 + C44271) * C627) +
                     (C44464 + C44463 + C44462) * C623 -
                     (C44813 + C44812 + C44811) * C629 -
                     (C44816 + C44815 + C44814) * C624) *
                        C51035 +
                    ((C44465 + C44466 + C44467) * C628 -
                     ((C44277 + C44278 + C44279) * C622 +
                      (C44280 + C44281 + C44282) * C627) +
                     (C44468 + C44469 + C44470) * C623 -
                     (C44233 * C3431 + C44230 * C3437 + C44232 * C880 +
                      C51099 * C893 + C44231 * C632 + C51098 * C639) *
                         C629 -
                     (C44233 * C3436 + C44230 * C3440 + C44232 * C894 +
                      C51099 * C904 + C44231 * C640 + C51098 * C647) *
                         C624) *
                        C50769) *
                       C50908 * C50790) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C118 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C50819) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C118 +
                     (C44274 + C44275 + C44276) * C50819) *
                        C50769) *
                       C50908 * C112 -
                   (((C44277 + C44278 + C44279) * C50819 +
                     (C44280 + C44281 + C44282) * C118) *
                        C50769 +
                    ((C44276 + C44275 + C44274) * C50819 +
                     (C44273 + C44272 + C44271) * C118) *
                        C51035) *
                       C50908 * C113 +
                   (((C44282 + C44281 + C44280) * C118 +
                     (C44279 + C44278 + C44277) * C50819) *
                        C51035 +
                    ((C44283 + C44284 + C44285) * C118 +
                     (C44286 + C44287 + C44288) * C50819) *
                        C50769) *
                       C50908 * C114 -
                   (((C44233 * C1021 + C44230 * C1027 + C44232 * C479 +
                      C51099 * C487 + C44231 * C134 + C51098 * C144) *
                         C50819 +
                     (C44233 * C1012 + C44230 * C1022 + C44232 * C469 +
                      C51099 * C478 + C44231 * C123 + C51098 * C135) *
                         C118) *
                        C50769 +
                    ((C44288 + C44287 + C44286) * C50819 +
                     (C44285 + C44284 + C44283) * C118) *
                        C51035) *
                       C50908 * C115) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C51035 +
                     ((C44271 + C44272 + C44273) * C118 +
                      (C44274 + C44275 + C44276) * C50819) *
                         C50769) *
                        C50908 * C51040 -
                    (((C44277 + C44278 + C44279) * C50819 +
                      (C44280 + C44281 + C44282) * C118) *
                         C50769 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C51035) *
                        C50908 * C50790) *
                       C1005 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C51035 +
                     ((C44647 + C44648 + C44649) * C118 +
                      (C44650 + C44651 + C44652) * C50819) *
                         C50769) *
                        C50908 * C50790 -
                    (((C44646 + C44645 + C44644) * C50819 +
                      (C44643 + C44642 + C44641) * C118) *
                         C50769 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C51035) *
                        C50908 * C51040) *
                       C1006 +
                   ((((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                       C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                          C118 +
                      (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                       C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                          C50819) *
                         C51035 +
                     ((C45219 + C45220 + C45221) * C118 +
                      (C45222 + C45223 + C45224) * C50819) *
                         C50769) *
                        C50908 * C51040 -
                    (((C44233 * C6326 + C44230 * C6330 + C44232 * C1242 +
                       C51099 * C1249 + C44231 * C1018 + C51098 * C1025) *
                          C50819 +
                      (C44233 * C6321 + C44230 * C6327 + C44232 * C1237 +
                       C51099 * C1243 + C44231 * C1010 + C51098 * C1017) *
                          C118) *
                         C50769 +
                     ((C45224 + C45223 + C45222) * C50819 +
                      (C45221 + C45220 + C45219) * C118) *
                         C51035) *
                        C50908 * C50790) *
                       C1007)) /
                     (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                     C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                        C757 +
                    (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                     C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                        C752 -
                    (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                     C51099 * C883 + C44231 * C296 + C51098 * C302) *
                        C758 -
                    (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                     C51099 * C899 + C44231 * C303 + C51098 * C314) *
                        C753 +
                    (C44231 * C630 + C51098 * C635 + C44232 * C876 +
                     C51099 * C885 + C44233 * C3429 + C44230 * C3432) *
                        C759 +
                    (C44231 * C636 + C51098 * C645 + C44232 * C886 +
                     C51099 * C900 + C44233 * C3433 + C44230 * C3438) *
                        C754 -
                    (C44233 * C3603 + C44230 * C3605 + C44232 * C3243 +
                     C51099 * C3247 + C44231 * C761 + C51098 * C765) *
                        C760 -
                    (C44233 * C3606 + C44230 * C3609 + C44232 * C3248 +
                     C51099 * C3255 + C44231 * C766 + C51098 * C773) *
                        C755) *
                       C51035 +
                   ((C44271 + C44272 + C44273) * C757 +
                    (C44274 + C44275 + C44276) * C752 -
                    (C44459 + C44460 + C44461) * C758 -
                    (C44462 + C44463 + C44464) * C753 +
                    (C44811 + C44812 + C44813) * C759 +
                    (C44814 + C44815 + C44816) * C754 -
                    (C44233 * C3604 + C44230 * C3607 + C44232 * C3244 +
                     C51099 * C3249 + C44231 * C762 + C51098 * C767) *
                        C760 -
                    (C44233 * C3608 + C44230 * C3610 + C44232 * C3250 +
                     C51099 * C3256 + C44231 * C768 + C51098 * C774) *
                        C755) *
                       C50769) *
                  C50908 * C50785 * C50849) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C294 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51047 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C295 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C50835) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C294 +
                     (C44274 + C44275 + C44276) * C51047 -
                     (C44459 + C44460 + C44461) * C295 -
                     (C44462 + C44463 + C44464) * C50835) *
                        C50769) *
                       C50908 * C291 +
                   (((C44461 + C44460 + C44459) * C295 -
                     ((C44276 + C44275 + C44274) * C51047 +
                      (C44273 + C44272 + C44271) * C294) +
                     (C44464 + C44463 + C44462) * C50835) *
                        C51035 +
                    ((C44465 + C44466 + C44467) * C295 -
                     ((C44277 + C44278 + C44279) * C51047 +
                      (C44280 + C44281 + C44282) * C294) +
                     (C44468 + C44469 + C44470) * C50835) *
                        C50769) *
                       C50908 * C292 +
                   (((C44282 + C44281 + C44280) * C294 +
                     (C44279 + C44278 + C44277) * C51047 -
                     (C44467 + C44466 + C44465) * C295 -
                     (C44470 + C44469 + C44468) * C50835) *
                        C51035 +
                    ((C44283 + C44284 + C44285) * C294 +
                     (C44286 + C44287 + C44288) * C51047 -
                     (C44233 * C1153 + C44230 * C1160 + C44232 * C881 +
                      C51099 * C895 + C44231 * C299 + C51098 * C308) *
                         C295 -
                     (C44233 * C1161 + C44230 * C1165 + C44232 * C896 +
                      C51099 * C905 + C44231 * C309 + C51098 * C317) *
                         C50835) *
                        C50769) *
                       C50908 * C293) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C294 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51047 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C295 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C50835) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C294 +
                     (C44274 + C44275 + C44276) * C51047 -
                     (C44459 + C44460 + C44461) * C295 -
                     (C44462 + C44463 + C44464) * C50835) *
                        C50769) *
                       C50908 * C50785 * C1005 +
                   (((C44231 * C875 + C51098 * C883 + C44232 * C1150 +
                      C51099 * C1154 + C44233 * C3724 + C44230 * C3732) *
                         C295 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C51047 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C294) +
                     (C44231 * C884 + C51098 * C899 + C44232 * C1155 +
                      C51099 * C1162 + C44233 * C3731 + C44230 * C3736) *
                         C50835) *
                        C51035 +
                    ((C44231 * C877 + C51098 * C887 + C44232 * C1151 +
                      C51099 * C1156 + C44233 * C3723 + C44230 * C3730) *
                         C295 -
                     ((C44646 + C44645 + C44644) * C51047 +
                      (C44643 + C44642 + C44641) * C294) +
                     (C44231 * C888 + C51098 * C901 + C44232 * C1157 +
                      C51099 * C1163 + C44233 * C3729 + C44230 * C3735) *
                         C50835) *
                        C50769) *
                       C50908 * C50785 * C1006 +
                   (((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                      C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                         C294 +
                     (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                      C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                         C51047 -
                     (C44233 * C6495 + C44230 * C6497 + C44232 * C3724 +
                      C51099 * C3732 + C44231 * C1150 + C51098 * C1154) *
                         C295 -
                     (C44233 * C6498 + C44230 * C6501 + C44232 * C3731 +
                      C51099 * C3736 + C44231 * C1155 + C51098 * C1162) *
                         C50835) *
                        C51035 +
                    ((C45219 + C45220 + C45221) * C294 +
                     (C45222 + C45223 + C45224) * C51047 -
                     (C44233 * C6496 + C44230 * C6499 + C44232 * C3723 +
                      C51099 * C3730 + C44231 * C1151 + C51098 * C1156) *
                         C295 -
                     (C44233 * C6500 + C44230 * C6502 + C44232 * C3729 +
                      C51099 * C3735 + C44231 * C1157 + C51098 * C1163) *
                         C50835) *
                        C50769) *
                       C50908 * C50785 * C1007)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C627 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C622 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C628 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C623 +
                     (C44231 * C630 + C51098 * C635 + C44232 * C876 +
                      C51099 * C885 + C44233 * C3429 + C44230 * C3432) *
                         C629 +
                     (C44231 * C636 + C51098 * C645 + C44232 * C886 +
                      C51099 * C900 + C44233 * C3433 + C44230 * C3438) *
                         C624) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C627 +
                     (C44274 + C44275 + C44276) * C622 -
                     (C44459 + C44460 + C44461) * C628 -
                     (C44462 + C44463 + C44464) * C623 +
                     (C44811 + C44812 + C44813) * C629 +
                     (C44814 + C44815 + C44816) * C624) *
                        C50769) *
                       C50908 * C50785 * C51049 +
                   (((C44231 * C875 + C51098 * C883 + C44232 * C1150 +
                      C51099 * C1154 + C44233 * C3724 + C44230 * C3732) *
                         C628 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C622 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C627) +
                     (C44231 * C884 + C51098 * C899 + C44232 * C1155 +
                      C51099 * C1162 + C44233 * C3731 + C44230 * C3736) *
                         C623 -
                     (C44233 * C3722 + C44230 * C3728 + C44232 * C3429 +
                      C51099 * C3432 + C44231 * C876 + C51098 * C885) *
                         C629 -
                     (C44233 * C3727 + C44230 * C3734 + C44232 * C3433 +
                      C51099 * C3438 + C44231 * C886 + C51098 * C900) *
                         C624) *
                        C51035 +
                    ((C44231 * C877 + C51098 * C887 + C44232 * C1151 +
                      C51099 * C1156 + C44233 * C3723 + C44230 * C3730) *
                         C628 -
                     ((C44646 + C44645 + C44644) * C622 +
                      (C44643 + C44642 + C44641) * C627) +
                     (C44231 * C888 + C51098 * C901 + C44232 * C1157 +
                      C51099 * C1163 + C44233 * C3729 + C44230 * C3735) *
                         C623 -
                     (C44233 * C3721 + C44230 * C3726 + C44232 * C3430 +
                      C51099 * C3434 + C44231 * C878 + C51098 * C889) *
                         C629 -
                     (C44233 * C3725 + C44230 * C3733 + C44232 * C3435 +
                      C51099 * C3439 + C44231 * C890 + C51098 * C902) *
                         C624) *
                        C50769) *
                       C50908 * C50785 * C50861)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C51035 +
                     ((C44271 + C44272 + C44273) * C118 +
                      (C44274 + C44275 + C44276) * C50819) *
                         C50769) *
                        C50908 * C291 -
                    (((C44277 + C44278 + C44279) * C50819 +
                      (C44280 + C44281 + C44282) * C118) *
                         C50769 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C51035) *
                        C50908 * C292 +
                    (((C44282 + C44281 + C44280) * C118 +
                      (C44279 + C44278 + C44277) * C50819) *
                         C51035 +
                     ((C44283 + C44284 + C44285) * C118 +
                      (C44286 + C44287 + C44288) * C50819) *
                         C50769) *
                        C50908 * C293) *
                       C51049 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C51035 +
                     ((C44647 + C44648 + C44649) * C118 +
                      (C44650 + C44651 + C44652) * C50819) *
                         C50769) *
                        C50908 * C292 -
                    (((C44646 + C44645 + C44644) * C50819 +
                      (C44643 + C44642 + C44641) * C118) *
                         C50769 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C51035) *
                        C50908 * C291 -
                    (((C44233 * C1240 + C44230 * C1248 + C44232 * C1020 +
                       C51099 * C1026 + C44231 * C477 + C51098 * C486) *
                          C50819 +
                      (C44233 * C1236 + C44230 * C1241 + C44232 * C1011 +
                       C51099 * C1019 + C44231 * C468 + C51098 * C476) *
                          C118) *
                         C50769 +
                     ((C44652 + C44651 + C44650) * C50819 +
                      (C44649 + C44648 + C44647) * C118) *
                         C51035) *
                        C50908 * C293) *
                       C50861)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C118 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C50819) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C118 +
                     (C44274 + C44275 + C44276) * C50819) *
                        C50769) *
                       C50908 * C50785 * C1232 -
                   (((C44646 + C44645 + C44644) * C50819 +
                     (C44643 + C44642 + C44641) * C118) *
                        C50769 +
                    ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                      C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                         C50819 +
                     (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                      C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                         C118) *
                        C51035) *
                       C50908 * C50785 * C1233 +
                   (((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                      C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                         C118 +
                     (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                      C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                         C50819) *
                        C51035 +
                    ((C45219 + C45220 + C45221) * C118 +
                     (C45222 + C45223 + C45224) * C50819) *
                        C50769) *
                       C50908 * C50785 * C1234 -
                   (((C44233 * C6603 + C44230 * C6607 + C44232 * C6325 +
                      C51099 * C6329 + C44231 * C1244 + C51098 * C1250) *
                         C50819 +
                     (C44233 * C6601 + C44230 * C6604 + C44232 * C6320 +
                      C51099 * C6324 + C44231 * C1238 + C51098 * C1245) *
                         C118) *
                        C50769 +
                    ((C44233 * C6605 + C44230 * C6608 + C44232 * C6323 +
                      C51099 * C6328 + C44231 * C1246 + C51098 * C1251) *
                         C50819 +
                     (C44233 * C6602 + C44230 * C6606 + C44232 * C6319 +
                      C51099 * C6322 + C44231 * C1239 + C51098 * C1247) *
                         C118) *
                        C51035) *
                       C50908 * C50785 * C1235)) /
                     (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C51035 +
                     ((C44271 + C44272 + C44273) * C118 +
                      (C44274 + C44275 + C44276) * C50819) *
                         C50769) *
                        C50908 * C51093 -
                    (((C44277 + C44278 + C44279) * C50819 +
                      (C44280 + C44281 + C44282) * C118) *
                         C50769 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C51035) *
                        C50908 * C51078 +
                    (((C44282 + C44281 + C44280) * C118 +
                      (C44279 + C44278 + C44277) * C50819) *
                         C51035 +
                     ((C44283 + C44284 + C44285) * C118 +
                      (C44286 + C44287 + C44288) * C50819) *
                         C50769) *
                        C50908 * C1354) *
                       C1765 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C51035 +
                     ((C44647 + C44648 + C44649) * C118 +
                      (C44650 + C44651 + C44652) * C50819) *
                         C50769) *
                        C50908 * C51078 -
                    (((C44646 + C44645 + C44644) * C50819 +
                      (C44643 + C44642 + C44641) * C118) *
                         C50769 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C51035) *
                        C50908 * C51093 -
                    (((C44233 * C1240 + C44230 * C1248 + C44232 * C1020 +
                       C51099 * C1026 + C44231 * C477 + C51098 * C486) *
                          C50819 +
                      (C44233 * C1236 + C44230 * C1241 + C44232 * C1011 +
                       C51099 * C1019 + C44231 * C468 + C51098 * C476) *
                          C118) *
                         C50769 +
                     ((C44652 + C44651 + C44650) * C50819 +
                      (C44649 + C44648 + C44647) * C118) *
                         C51035) *
                        C50908 * C1354) *
                       C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C294 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C51047 -
                      (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                       C51099 * C883 + C44231 * C296 + C51098 * C302) *
                          C295 -
                      (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                       C51099 * C899 + C44231 * C303 + C51098 * C314) *
                          C50835) *
                         C51035 +
                     ((C44271 + C44272 + C44273) * C294 +
                      (C44274 + C44275 + C44276) * C51047 -
                      (C44459 + C44460 + C44461) * C295 -
                      (C44462 + C44463 + C44464) * C50835) *
                         C50769) *
                        C50908 * C1480 +
                    (((C44461 + C44460 + C44459) * C295 -
                      ((C44276 + C44275 + C44274) * C51047 +
                       (C44273 + C44272 + C44271) * C294) +
                      (C44464 + C44463 + C44462) * C50835) *
                         C51035 +
                     ((C44465 + C44466 + C44467) * C295 -
                      ((C44277 + C44278 + C44279) * C51047 +
                       (C44280 + C44281 + C44282) * C294) +
                      (C44468 + C44469 + C44470) * C50835) *
                         C50769) *
                        C50908 * C50790) *
                       C1765 +
                   ((((C44231 * C875 + C51098 * C883 + C44232 * C1150 +
                       C51099 * C1154 + C44233 * C3724 + C44230 * C3732) *
                          C295 -
                      ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                        C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                           C51047 +
                       (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                        C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                           C294) +
                      (C44231 * C884 + C51098 * C899 + C44232 * C1155 +
                       C51099 * C1162 + C44233 * C3731 + C44230 * C3736) *
                          C50835) *
                         C51035 +
                     ((C45967 + C45968 + C45969) * C295 -
                      ((C44646 + C44645 + C44644) * C51047 +
                       (C44643 + C44642 + C44641) * C294) +
                      (C45970 + C45971 + C45972) * C50835) *
                         C50769) *
                        C50908 * C1480 +
                    (((C44641 + C44642 + C44643) * C294 +
                      (C44644 + C44645 + C44646) * C51047 -
                      (C45969 + C45968 + C45967) * C295 -
                      (C45972 + C45971 + C45970) * C50835) *
                         C51035 +
                     ((C44647 + C44648 + C44649) * C294 +
                      (C44650 + C44651 + C44652) * C51047 -
                      (C44233 * C7095 + C44230 * C7096 + C44232 * C1152 +
                       C51099 * C1158 + C44231 * C879 + C51098 * C891) *
                          C295 -
                      (C44233 * C7097 + C44230 * C7098 + C44232 * C1159 +
                       C51099 * C1164 + C44231 * C892 + C51098 * C903) *
                          C50835) *
                         C50769) *
                        C50908 * C50790) *
                       C50861)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C51035 +
                     ((C44271 + C44272 + C44273) * C118 +
                      (C44274 + C44275 + C44276) * C50819) *
                         C50769) *
                        C50908 * C1480 -
                    (((C44277 + C44278 + C44279) * C50819 +
                      (C44280 + C44281 + C44282) * C118) *
                         C50769 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C51035) *
                        C50908 * C50790) *
                       C51095 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C51035 +
                     ((C44647 + C44648 + C44649) * C118 +
                      (C44650 + C44651 + C44652) * C50819) *
                         C50769) *
                        C50908 * C50790 -
                    (((C44646 + C44645 + C44644) * C50819 +
                      (C44643 + C44642 + C44641) * C118) *
                         C50769 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C51035) *
                        C50908 * C1480) *
                       C51084 +
                   ((((C44231 * C1008 + C51098 * C1013 + C44232 * C1239 +
                       C51099 * C1247 + C44233 * C6319 + C44230 * C6322) *
                          C118 +
                      (C44231 * C1014 + C51098 * C1023 + C44232 * C1246 +
                       C51099 * C1251 + C44233 * C6323 + C44230 * C6328) *
                          C50819) *
                         C51035 +
                     ((C45219 + C45220 + C45221) * C118 +
                      (C45222 + C45223 + C45224) * C50819) *
                         C50769) *
                        C50908 * C1480 -
                    (((C44233 * C6326 + C44230 * C6330 + C44232 * C1242 +
                       C51099 * C1249 + C44231 * C1018 + C51098 * C1025) *
                          C50819 +
                      (C44233 * C6321 + C44230 * C6327 + C44232 * C1237 +
                       C51099 * C1243 + C44231 * C1010 + C51098 * C1017) *
                          C118) *
                         C50769 +
                     ((C45224 + C45223 + C45222) * C50819 +
                      (C45221 + C45220 + C45219) * C118) *
                         C51035) *
                        C50908 * C50790) *
                       C2009)) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C118 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C50819) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C118 +
                     (C44274 + C44275 + C44276) * C50819) *
                        C50769) *
                       C50908 * C112 -
                   (((C44277 + C44278 + C44279) * C50819 +
                     (C44280 + C44281 + C44282) * C118) *
                        C50769 +
                    ((C44276 + C44275 + C44274) * C50819 +
                     (C44273 + C44272 + C44271) * C118) *
                        C51035) *
                       C50908 * C113 +
                   (((C44282 + C44281 + C44280) * C118 +
                     (C44279 + C44278 + C44277) * C50819) *
                        C51035 +
                    ((C44283 + C44284 + C44285) * C118 +
                     (C44286 + C44287 + C44288) * C50819) *
                        C50769) *
                       C50908 * C114 -
                   (((C44233 * C1021 + C44230 * C1027 + C44232 * C479 +
                      C51099 * C487 + C44231 * C134 + C51098 * C144) *
                         C50819 +
                     (C44233 * C1012 + C44230 * C1022 + C44232 * C469 +
                      C51099 * C478 + C44231 * C123 + C51098 * C135) *
                         C118) *
                        C50769 +
                    ((C44288 + C44287 + C44286) * C50819 +
                     (C44285 + C44284 + C44283) * C118) *
                        C51035) *
                       C50908 * C115) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C627 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C622 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C628 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C623 +
                     (C44231 * C630 + C51098 * C635 + C44232 * C876 +
                      C51099 * C885 + C44233 * C3429 + C44230 * C3432) *
                         C629 +
                     (C44231 * C636 + C51098 * C645 + C44232 * C886 +
                      C51099 * C900 + C44233 * C3433 + C44230 * C3438) *
                         C624) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C627 +
                     (C44274 + C44275 + C44276) * C622 -
                     (C44459 + C44460 + C44461) * C628 -
                     (C44462 + C44463 + C44464) * C623 +
                     (C44811 + C44812 + C44813) * C629 +
                     (C44814 + C44815 + C44816) * C624) *
                        C50769) *
                       C50908 * C51040 +
                   (((C44461 + C44460 + C44459) * C628 -
                     ((C44276 + C44275 + C44274) * C622 +
                      (C44273 + C44272 + C44271) * C627) +
                     (C44464 + C44463 + C44462) * C623 -
                     (C44813 + C44812 + C44811) * C629 -
                     (C44816 + C44815 + C44814) * C624) *
                        C51035 +
                    ((C44465 + C44466 + C44467) * C628 -
                     ((C44277 + C44278 + C44279) * C622 +
                      (C44280 + C44281 + C44282) * C627) +
                     (C44468 + C44469 + C44470) * C623 -
                     (C44233 * C3431 + C44230 * C3437 + C44232 * C880 +
                      C51099 * C893 + C44231 * C632 + C51098 * C639) *
                         C629 -
                     (C44233 * C3436 + C44230 * C3440 + C44232 * C894 +
                      C51099 * C904 + C44231 * C640 + C51098 * C647) *
                         C624) *
                        C50769) *
                       C50908 * C50790) *
                  C50849) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C294 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C51047 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C295 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C50835) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C294 +
                     (C44274 + C44275 + C44276) * C51047 -
                     (C44459 + C44460 + C44461) * C295 -
                     (C44462 + C44463 + C44464) * C50835) *
                        C50769) *
                       C50908 * C291 +
                   (((C44461 + C44460 + C44459) * C295 -
                     ((C44276 + C44275 + C44274) * C51047 +
                      (C44273 + C44272 + C44271) * C294) +
                     (C44464 + C44463 + C44462) * C50835) *
                        C51035 +
                    ((C44465 + C44466 + C44467) * C295 -
                     ((C44277 + C44278 + C44279) * C51047 +
                      (C44280 + C44281 + C44282) * C294) +
                     (C44468 + C44469 + C44470) * C50835) *
                        C50769) *
                       C50908 * C292 +
                   (((C44282 + C44281 + C44280) * C294 +
                     (C44279 + C44278 + C44277) * C51047 -
                     (C44467 + C44466 + C44465) * C295 -
                     (C44470 + C44469 + C44468) * C50835) *
                        C51035 +
                    ((C44283 + C44284 + C44285) * C294 +
                     (C44286 + C44287 + C44288) * C51047 -
                     (C44233 * C1153 + C44230 * C1160 + C44232 * C881 +
                      C51099 * C895 + C44231 * C299 + C51098 * C308) *
                         C295 -
                     (C44233 * C1161 + C44230 * C1165 + C44232 * C896 +
                      C51099 * C905 + C44231 * C309 + C51098 * C317) *
                         C50835) *
                        C50769) *
                       C50908 * C293) *
                  C50849) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                     C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                        C757 +
                    (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                     C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                        C752 -
                    (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                     C51099 * C883 + C44231 * C296 + C51098 * C302) *
                        C758 -
                    (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                     C51099 * C899 + C44231 * C303 + C51098 * C314) *
                        C753 +
                    (C44231 * C630 + C51098 * C635 + C44232 * C876 +
                     C51099 * C885 + C44233 * C3429 + C44230 * C3432) *
                        C759 +
                    (C44231 * C636 + C51098 * C645 + C44232 * C886 +
                     C51099 * C900 + C44233 * C3433 + C44230 * C3438) *
                        C754 -
                    (C44233 * C3603 + C44230 * C3605 + C44232 * C3243 +
                     C51099 * C3247 + C44231 * C761 + C51098 * C765) *
                        C760 -
                    (C44233 * C3606 + C44230 * C3609 + C44232 * C3248 +
                     C51099 * C3255 + C44231 * C766 + C51098 * C773) *
                        C755) *
                       C51035 +
                   ((C44271 + C44272 + C44273) * C757 +
                    (C44274 + C44275 + C44276) * C752 -
                    (C44459 + C44460 + C44461) * C758 -
                    (C44462 + C44463 + C44464) * C753 +
                    (C44811 + C44812 + C44813) * C759 +
                    (C44814 + C44815 + C44816) * C754 -
                    (C44233 * C3604 + C44230 * C3607 + C44232 * C3244 +
                     C51099 * C3249 + C44231 * C762 + C51098 * C767) *
                        C760 -
                    (C44233 * C3608 + C44230 * C3610 + C44232 * C3250 +
                     C51099 * C3256 + C44231 * C768 + C51098 * C774) *
                        C755) *
                       C50769) *
                  C50908 * C50785 * C50849) /
                     (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                       C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                          C118 +
                      (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                       C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                          C50819) *
                         C51035 +
                     ((C44271 + C44272 + C44273) * C118 +
                      (C44274 + C44275 + C44276) * C50819) *
                         C50769) *
                        C50908 * C291 -
                    (((C44277 + C44278 + C44279) * C50819 +
                      (C44280 + C44281 + C44282) * C118) *
                         C50769 +
                     ((C44276 + C44275 + C44274) * C50819 +
                      (C44273 + C44272 + C44271) * C118) *
                         C51035) *
                        C50908 * C292 +
                    (((C44282 + C44281 + C44280) * C118 +
                      (C44279 + C44278 + C44277) * C50819) *
                         C51035 +
                     ((C44283 + C44284 + C44285) * C118 +
                      (C44286 + C44287 + C44288) * C50819) *
                         C50769) *
                        C50908 * C293) *
                       C51049 +
                   ((((C44641 + C44642 + C44643) * C118 +
                      (C44644 + C44645 + C44646) * C50819) *
                         C51035 +
                     ((C44647 + C44648 + C44649) * C118 +
                      (C44650 + C44651 + C44652) * C50819) *
                         C50769) *
                        C50908 * C292 -
                    (((C44646 + C44645 + C44644) * C50819 +
                      (C44643 + C44642 + C44641) * C118) *
                         C50769 +
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C50819 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C118) *
                         C51035) *
                        C50908 * C291 -
                    (((C44233 * C1240 + C44230 * C1248 + C44232 * C1020 +
                       C51099 * C1026 + C44231 * C477 + C51098 * C486) *
                          C50819 +
                      (C44233 * C1236 + C44230 * C1241 + C44232 * C1011 +
                       C51099 * C1019 + C44231 * C468 + C51098 * C476) *
                          C118) *
                         C50769 +
                     ((C44652 + C44651 + C44650) * C50819 +
                      (C44649 + C44648 + C44647) * C118) *
                         C51035) *
                        C50908 * C293) *
                       C50861)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44231 * C119 + C51098 * C126 + C44232 * C470 +
                      C51099 * C481 + C44233 * C1008 + C44230 * C1013) *
                         C627 +
                     (C44231 * C127 + C51098 * C140 + C44232 * C480 +
                      C51099 * C488 + C44233 * C1014 + C44230 * C1023) *
                         C622 -
                     (C44233 * C1150 + C44230 * C1154 + C44232 * C875 +
                      C51099 * C883 + C44231 * C296 + C51098 * C302) *
                         C628 -
                     (C44233 * C1155 + C44230 * C1162 + C44232 * C884 +
                      C51099 * C899 + C44231 * C303 + C51098 * C314) *
                         C623 +
                     (C44231 * C630 + C51098 * C635 + C44232 * C876 +
                      C51099 * C885 + C44233 * C3429 + C44230 * C3432) *
                         C629 +
                     (C44231 * C636 + C51098 * C645 + C44232 * C886 +
                      C51099 * C900 + C44233 * C3433 + C44230 * C3438) *
                         C624) *
                        C51035 +
                    ((C44271 + C44272 + C44273) * C627 +
                     (C44274 + C44275 + C44276) * C622 -
                     (C44459 + C44460 + C44461) * C628 -
                     (C44462 + C44463 + C44464) * C623 +
                     (C44811 + C44812 + C44813) * C629 +
                     (C44814 + C44815 + C44816) * C624) *
                        C50769) *
                       C50908 * C50785 * C51049 +
                   (((C44231 * C875 + C51098 * C883 + C44232 * C1150 +
                      C51099 * C1154 + C44233 * C3724 + C44230 * C3732) *
                         C628 -
                     ((C44233 * C1246 + C44230 * C1251 + C44232 * C1014 +
                       C51099 * C1023 + C44231 * C480 + C51098 * C488) *
                          C622 +
                      (C44233 * C1239 + C44230 * C1247 + C44232 * C1008 +
                       C51099 * C1013 + C44231 * C470 + C51098 * C481) *
                          C627) +
                     (C44231 * C884 + C51098 * C899 + C44232 * C1155 +
                      C51099 * C1162 + C44233 * C3731 + C44230 * C3736) *
                         C623 -
                     (C44233 * C3722 + C44230 * C3728 + C44232 * C3429 +
                      C51099 * C3432 + C44231 * C876 + C51098 * C885) *
                         C629 -
                     (C44233 * C3727 + C44230 * C3734 + C44232 * C3433 +
                      C51099 * C3438 + C44231 * C886 + C51098 * C900) *
                         C624) *
                        C51035 +
                    ((C44231 * C877 + C51098 * C887 + C44232 * C1151 +
                      C51099 * C1156 + C44233 * C3723 + C44230 * C3730) *
                         C628 -
                     ((C44646 + C44645 + C44644) * C622 +
                      (C44643 + C44642 + C44641) * C627) +
                     (C44231 * C888 + C51098 * C901 + C44232 * C1157 +
                      C51099 * C1163 + C44233 * C3729 + C44230 * C3735) *
                         C623 -
                     (C44233 * C3721 + C44230 * C3726 + C44232 * C3430 +
                      C51099 * C3434 + C44231 * C878 + C51098 * C889) *
                         C629 -
                     (C44233 * C3725 + C44230 * C3733 + C44232 * C3435 +
                      C51099 * C3439 + C44231 * C890 + C51098 * C902) *
                         C624) *
                        C50769) *
                       C50908 * C50785 * C50861)) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1355 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C1350 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C1356 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C50835) *
               C17338 +
           ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
            (C33548 + C33549) * C1356 - (C33550 + C33551) * C50835) *
               C17339 +
           C34734 * C17340) *
              C50908 * C51093 +
          (((C33549 + C33548) * C1356 -
            ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
            (C33551 + C33550) * C50835) *
               C17338 +
           ((C33554 + C33553) * C1356 -
            ((C33357 + C33356) * C1350 + (C33355 + C33354) * C1355) +
            (C33556 + C33555) * C50835) *
               C17339 +
           ((C33557 + C33558) * C1356 - (C33368 * C1350 + C33369 * C1355) +
            (C33559 + C33560) * C50835) *
               C17340) *
              C50908 * C51078 +
          (C34734 * C17338 +
           ((C33361 + C33360) * C1355 + (C33359 + C33358) * C1350 -
            (C33558 + C33557) * C1356 - (C33560 + C33559) * C50835) *
               C17339 +
           ((C33362 + C33363) * C1355 + (C33364 + C33365) * C1350 -
            (C33316 * C1633 + C50983 * C1634 + C33315 * C300 + C33313 * C310) *
                C1356 -
            (C33316 * C1635 + C50983 * C1636 + C33315 * C311 + C33313 * C318) *
                C50835) *
               C17340) *
              C50908 * C1354) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1355 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C1350 -
            (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
            (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           (C36631 * C1355 + C36632 * C1350 - C36757 * C1356 -
            C36758 * C50835) *
               C50764 * C2438) *
              C51093 +
          (((C33549 + C33548) * C1356 -
            ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
            (C33551 + C33550) * C50835) *
               C50764 * C2436 +
           ((C33916 + C33917) * C1356 -
            ((C33550 + C33551) * C1350 + (C33548 + C33549) * C1355) +
            (C33918 + C33919) * C50835) *
               C50764 * C2437 +
           ((C36656 + C36655) * C1356 - (C36642 * C1350 + C36641 * C1355) +
            (C36658 + C36657) * C50835) *
               C50764 * C2438) *
              C51078 +
          (C34734 * C50764 * C2436 +
           ((C33554 + C33553) * C1355 + (C33556 + C33555) * C1350 -
            (C33921 + C33920) * C1356 - (C33923 + C33922) * C50835) *
               C50764 * C2437 +
           ((C33920 + C33921) * C1355 + (C33922 + C33923) * C1350 -
            (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
                C1356 -
            (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
                C50835) *
               C50764 * C2438) *
              C1354) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1482 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51094 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C1483 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C51081 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C1484 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C1479) *
               C17338 +
           ((C33350 + C33351) * C1482 + (C33352 + C33353) * C51094 -
            (C33548 + C33549) * C1483 - (C33550 + C33551) * C51081 +
            (C33916 + C33917) * C1484 + (C33918 + C33919) * C1479) *
               C17339 +
           (C33366 * C1482 + C33367 * C51094 - C33561 * C1483 -
            C33562 * C51081 + (C33920 + C33921) * C1484 +
            (C33922 + C33923) * C1479) *
               C17340) *
              C50908 * C1480 +
          (((C33549 + C33548) * C1483 -
            ((C33353 + C33352) * C51094 + (C33351 + C33350) * C1482) +
            (C33551 + C33550) * C51081 - (C33917 + C33916) * C1484 -
            (C33919 + C33918) * C1479) *
               C17338 +
           ((C33554 + C33553) * C1483 -
            ((C33357 + C33356) * C51094 + (C33355 + C33354) * C1482) +
            (C33556 + C33555) * C51081 - (C33921 + C33920) * C1484 -
            (C33923 + C33922) * C1479) *
               C17339 +
           ((C33557 + C33558) * C1483 - (C33368 * C51094 + C33369 * C1482) +
            (C33559 + C33560) * C51081 -
            (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                C1484 -
            (C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                C1479) *
               C17340) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1482 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51094 -
            (C36331 + C36332) * C1483 - (C36333 + C36334) * C51081 +
            C36631 * C1484 + C36632 * C1479) *
               C50764 * C2436 +
           ((C36332 + C36331) * C1482 + (C36334 + C36333) * C51094 -
            (C36335 + C36336) * C1483 - (C36337 + C36338) * C51081 +
            (C36651 + C36652) * C1484 + (C36653 + C36654) * C1479) *
               C50764 * C2437 +
           (C36631 * C1482 + C36632 * C51094 - C36757 * C1483 -
            C36758 * C51081 + (C36768 + C36767) * C1484 +
            (C36770 + C36769) * C1479) *
               C50764 * C2438) *
              C1480 +
          (((C33549 + C33548) * C1483 -
            ((C33353 + C33352) * C51094 + (C33351 + C33350) * C1482) +
            (C33551 + C33550) * C51081 - C36641 * C1484 - C36642 * C1479) *
               C50764 * C2436 +
           ((C33916 + C33917) * C1483 -
            ((C33550 + C33551) * C51094 + (C33548 + C33549) * C1482) +
            (C33918 + C33919) * C51081 - (C36655 + C36656) * C1484 -
            (C36657 + C36658) * C1479) *
               C50764 * C2437 +
           ((C36656 + C36655) * C1483 - (C36642 * C51094 + C36641 * C1482) +
            (C36658 + C36657) * C51081 -
            (C33316 * C3246 + C50983 * C3253 + C33315 * C2950 +
             C33313 * C2954) *
                C1484 -
            (C33316 * C3254 + C50983 * C3258 + C33315 * C2955 +
             C33313 * C2959) *
                C1479) *
               C50764 * C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                 C1356 -
             (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                 C50835) *
                C17338 +
            ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
             (C33548 + C33549) * C1356 - (C33550 + C33551) * C50835) *
                C17339 +
            C34734 * C17340) *
               C50908 * C1480 +
           (((C33549 + C33548) * C1356 -
             ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
             (C33551 + C33550) * C50835) *
                C17338 +
            ((C33554 + C33553) * C1356 -
             ((C33357 + C33356) * C1350 + (C33355 + C33354) * C1355) +
             (C33556 + C33555) * C50835) *
                C17339 +
            ((C33557 + C33558) * C1356 - (C33368 * C1350 + C33369 * C1355) +
             (C33559 + C33560) * C50835) *
                C17340) *
               C50908 * C50790) *
              C51049 +
          ((((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                 C1356 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C1350 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1355) +
             (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                 C50835) *
                C17338 +
            ((C35091 + C35092) * C1356 -
             ((C33740 + C33739) * C1350 + (C33738 + C33737) * C1355) +
             (C35093 + C35094) * C50835) *
                C17339 +
            ((C35095 + C35096) * C1356 - (C33749 * C1350 + C33750 * C1355) +
             (C35097 + C35098) * C50835) *
                C17340) *
               C50908 * C1480 +
           (((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
             (C35092 + C35091) * C1356 - (C35094 + C35093) * C50835) *
                C17338 +
            ((C33741 + C33742) * C1355 + (C33743 + C33744) * C1350 -
             (C35096 + C35095) * C1356 - (C35098 + C35097) * C50835) *
                C17339 +
            ((C33745 + C33746) * C1355 + (C33747 + C33748) * C1350 -
             (C33316 * C1153 + C50983 * C1160 + C33315 * C881 + C33313 * C895) *
                 C1356 -
             (C33316 * C1161 + C50983 * C1165 + C33315 * C896 + C33313 * C905) *
                 C50835) *
                C17340) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
                C50764 * C2436 +
            ((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
             (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
                C50764 * C2437 +
            (C36631 * C1355 + C36632 * C1350 - C36757 * C1356 -
             C36758 * C50835) *
                C50764 * C2438) *
               C1480 +
           (((C33549 + C33548) * C1356 -
             ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
             (C33551 + C33550) * C50835) *
                C50764 * C2436 +
            ((C33916 + C33917) * C1356 -
             ((C33550 + C33551) * C1350 + (C33548 + C33549) * C1355) +
             (C33918 + C33919) * C50835) *
                C50764 * C2437 +
            ((C36656 + C36655) * C1356 - (C36642 * C1350 + C36641 * C1355) +
             (C36658 + C36657) * C50835) *
                C50764 * C2438) *
               C50790) *
              C51049 +
          ((((C36941 + C36942) * C1356 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C1350 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1355) +
             (C36943 + C36944) * C50835) *
                C50764 * C2436 +
            ((C36946 + C36945) * C1356 -
             ((C36944 + C36943) * C1350 + (C36942 + C36941) * C1355) +
             (C36948 + C36947) * C50835) *
                C50764 * C2437 +
            ((C36950 + C36949) * C1356 - (C36954 * C1350 + C36953 * C1355) +
             (C36952 + C36951) * C50835) *
                C50764 * C2438) *
               C1480 +
           (((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
             (C35092 + C35091) * C1356 - (C35094 + C35093) * C50835) *
                C50764 * C2436 +
            ((C35091 + C35092) * C1355 + (C35093 + C35094) * C1350 -
             (C37863 + C37864) * C1356 - (C37865 + C37866) * C50835) *
                C50764 * C2437 +
            ((C37864 + C37863) * C1355 + (C37866 + C37865) * C1350 -
             (C33316 * C3604 + C50983 * C3607 + C33315 * C3244 +
              C33313 * C3249) *
                 C1356 -
             (C33316 * C3608 + C50983 * C3610 + C33315 * C3250 +
              C33313 * C3256) *
                 C50835) *
                C50764 * C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                 C1356 -
             (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                 C50835) *
                C17338 +
            ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
             (C33548 + C33549) * C1356 - (C33550 + C33551) * C50835) *
                C17339 +
            C34734 * C17340) *
               C50908 * C51040 +
           (((C33549 + C33548) * C1356 -
             ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
             (C33551 + C33550) * C50835) *
                C17338 +
            ((C33554 + C33553) * C1356 -
             ((C33357 + C33356) * C1350 + (C33355 + C33354) * C1355) +
             (C33556 + C33555) * C50835) *
                C17339 +
            ((C33557 + C33558) * C1356 - (C33368 * C1350 + C33369 * C1355) +
             (C33559 + C33560) * C50835) *
                C17340) *
               C50908 * C50790) *
              C1765 +
          ((((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                 C1356 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C1350 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1355) +
             (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                 C50835) *
                C17338 +
            ((C35091 + C35092) * C1356 -
             ((C33740 + C33739) * C1350 + (C33738 + C33737) * C1355) +
             (C35093 + C35094) * C50835) *
                C17339 +
            ((C35095 + C35096) * C1356 - (C33749 * C1350 + C33750 * C1355) +
             (C35097 + C35098) * C50835) *
                C17340) *
               C50908 * C51040 +
           (((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
             (C35092 + C35091) * C1356 - (C35094 + C35093) * C50835) *
                C17338 +
            ((C33741 + C33742) * C1355 + (C33743 + C33744) * C1350 -
             (C35096 + C35095) * C1356 - (C35098 + C35097) * C50835) *
                C17339 +
            ((C33745 + C33746) * C1355 + (C33747 + C33748) * C1350 -
             (C33316 * C1153 + C50983 * C1160 + C33315 * C881 + C33313 * C895) *
                 C1356 -
             (C33316 * C1161 + C50983 * C1165 + C33315 * C896 + C33313 * C905) *
                 C50835) *
                C17340) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C1355 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C1350 -
             (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
                C50764 * C2436 +
            ((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
             (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
                C50764 * C2437 +
            (C36631 * C1355 + C36632 * C1350 - C36757 * C1356 -
             C36758 * C50835) *
                C50764 * C2438) *
               C51040 +
           (((C33549 + C33548) * C1356 -
             ((C33353 + C33352) * C1350 + (C33351 + C33350) * C1355) +
             (C33551 + C33550) * C50835) *
                C50764 * C2436 +
            ((C33916 + C33917) * C1356 -
             ((C33550 + C33551) * C1350 + (C33548 + C33549) * C1355) +
             (C33918 + C33919) * C50835) *
                C50764 * C2437 +
            ((C36656 + C36655) * C1356 - (C36642 * C1350 + C36641 * C1355) +
             (C36658 + C36657) * C50835) *
                C50764 * C2438) *
               C50790) *
              C1765 +
          ((((C36941 + C36942) * C1356 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C1350 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C1355) +
             (C36943 + C36944) * C50835) *
                C50764 * C2436 +
            ((C36946 + C36945) * C1356 -
             ((C36944 + C36943) * C1350 + (C36942 + C36941) * C1355) +
             (C36948 + C36947) * C50835) *
                C50764 * C2437 +
            ((C36950 + C36949) * C1356 - (C36954 * C1350 + C36953 * C1355) +
             (C36952 + C36951) * C50835) *
                C50764 * C2438) *
               C51040 +
           (((C33737 + C33738) * C1355 + (C33739 + C33740) * C1350 -
             (C35092 + C35091) * C1356 - (C35094 + C35093) * C50835) *
                C50764 * C2436 +
            ((C35091 + C35092) * C1355 + (C35093 + C35094) * C1350 -
             (C37863 + C37864) * C1356 - (C37865 + C37866) * C50835) *
                C50764 * C2437 +
            ((C37864 + C37863) * C1355 + (C37866 + C37865) * C1350 -
             (C33316 * C3604 + C50983 * C3607 + C33315 * C3244 +
              C33313 * C3249) *
                 C1356 -
             (C33316 * C3608 + C50983 * C3610 + C33315 * C3250 +
              C33313 * C3256) *
                 C50835) *
                C50764 * C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1482 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51094 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C1483 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C51081 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C1484 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C1479) *
               C17338 +
           ((C33350 + C33351) * C1482 + (C33352 + C33353) * C51094 -
            (C33548 + C33549) * C1483 - (C33550 + C33551) * C51081 +
            (C33916 + C33917) * C1484 + (C33918 + C33919) * C1479) *
               C17339 +
           (C33366 * C1482 + C33367 * C51094 - C33561 * C1483 -
            C33562 * C51081 + (C33920 + C33921) * C1484 +
            (C33922 + C33923) * C1479) *
               C17340) *
              C50908 * C50785 * C1765 +
          (((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                C1483 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C51094 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C1482) +
            (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                C51081 -
            (C33316 * C3429 + C50983 * C3432 + C33315 * C876 + C33313 * C885) *
                C1484 -
            (C33316 * C3433 + C50983 * C3438 + C33315 * C886 + C33313 * C900) *
                C1479) *
               C17338 +
           ((C35091 + C35092) * C1483 -
            ((C33740 + C33739) * C51094 + (C33738 + C33737) * C1482) +
            (C35093 + C35094) * C51081 -
            (C33316 * C3430 + C50983 * C3434 + C33315 * C878 + C33313 * C889) *
                C1484 -
            (C33316 * C3435 + C50983 * C3439 + C33315 * C890 + C33313 * C902) *
                C1479) *
               C17339 +
           ((C35095 + C35096) * C1483 - (C33749 * C51094 + C33750 * C1482) +
            (C35097 + C35098) * C51081 -
            (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                C1484 -
            (C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                C1479) *
               C17340) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1482 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51094 -
            (C36331 + C36332) * C1483 - (C36333 + C36334) * C51081 +
            C36631 * C1484 + C36632 * C1479) *
               C50764 * C2436 +
           ((C36332 + C36331) * C1482 + (C36334 + C36333) * C51094 -
            (C36335 + C36336) * C1483 - (C36337 + C36338) * C51081 +
            (C36651 + C36652) * C1484 + (C36653 + C36654) * C1479) *
               C50764 * C2437 +
           (C36631 * C1482 + C36632 * C51094 - C36757 * C1483 -
            C36758 * C51081 + (C36768 + C36767) * C1484 +
            (C36770 + C36769) * C1479) *
               C50764 * C2438) *
              C50785 * C1765 +
          (((C36941 + C36942) * C1483 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C51094 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C1482) +
            (C36943 + C36944) * C51081 - C36953 * C1484 - C36954 * C1479) *
               C50764 * C2436 +
           ((C36946 + C36945) * C1483 -
            ((C36944 + C36943) * C51094 + (C36942 + C36941) * C1482) +
            (C36948 + C36947) * C51081 - (C36949 + C36950) * C1484 -
            (C36951 + C36952) * C1479) *
               C50764 * C2437 +
           ((C36950 + C36949) * C1483 - (C36954 * C51094 + C36953 * C1482) +
            (C36952 + C36951) * C51081 -
            (C33316 * C20618 + C50983 * C20619 + C33315 * C3245 +
             C33313 * C3251) *
                C1484 -
            (C33316 * C20620 + C50983 * C20621 + C33315 * C3252 +
             C33313 * C3257) *
                C1479) *
               C50764 * C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1355 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C1350 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C1356 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C50835) *
               C17338 +
           ((C33350 + C33351) * C1355 + (C33352 + C33353) * C1350 -
            (C33548 + C33549) * C1356 - (C33550 + C33551) * C50835) *
               C17339 +
           C34734 * C17340) *
              C50908 * C50785 * C51095 +
          (((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                C1356 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C1350 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C1355) +
            (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                C50835) *
               C17338 +
           ((C35091 + C35092) * C1356 -
            ((C33740 + C33739) * C1350 + (C33738 + C33737) * C1355) +
            (C35093 + C35094) * C50835) *
               C17339 +
           ((C35095 + C35096) * C1356 - (C33749 * C1350 + C33750 * C1355) +
            (C35097 + C35098) * C50835) *
               C17340) *
              C50908 * C50785 * C51084 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C1355 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C1350 -
            (C33316 * C3724 + C50983 * C3732 + C33315 * C1150 +
             C33313 * C1154) *
                C1356 -
            (C33316 * C3731 + C50983 * C3736 + C33315 * C1155 +
             C33313 * C1162) *
                C50835) *
               C17338 +
           ((C34330 + C34331) * C1355 + (C34332 + C34333) * C1350 -
            (C33316 * C3723 + C50983 * C3730 + C33315 * C1151 +
             C33313 * C1156) *
                C1356 -
            (C33316 * C3729 + C50983 * C3735 + C33315 * C1157 +
             C33313 * C1163) *
                C50835) *
               C17339 +
           ((C34334 + C34335) * C1355 + (C34336 + C34337) * C1350 -
            (C33316 * C7095 + C50983 * C7096 + C33315 * C1152 +
             C33313 * C1158) *
                C1356 -
            (C33316 * C7097 + C50983 * C7098 + C33315 * C1159 +
             C33313 * C1164) *
                C50835) *
               C17340) *
              C50908 * C50785 * C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C1355 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C1350 -
            (C36331 + C36332) * C1356 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C1355 + (C36334 + C36333) * C1350 -
            (C36335 + C36336) * C1356 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           (C36631 * C1355 + C36632 * C1350 - C36757 * C1356 -
            C36758 * C50835) *
               C50764 * C2438) *
              C50785 * C51095 +
          (((C36941 + C36942) * C1356 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C1350 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C1355) +
            (C36943 + C36944) * C50835) *
               C50764 * C2436 +
           ((C36946 + C36945) * C1356 -
            ((C36944 + C36943) * C1350 + (C36942 + C36941) * C1355) +
            (C36948 + C36947) * C50835) *
               C50764 * C2437 +
           ((C36950 + C36949) * C1356 - (C36954 * C1350 + C36953 * C1355) +
            (C36952 + C36951) * C50835) *
               C50764 * C2438) *
              C50785 * C51084 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C1355 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C1350 -
            (C37263 + C37264) * C1356 - (C37265 + C37266) * C50835) *
               C50764 * C2436 +
           ((C37264 + C37263) * C1355 + (C37266 + C37265) * C1350 -
            (C37267 + C37268) * C1356 - (C37269 + C37270) * C50835) *
               C50764 * C2437 +
           ((C37268 + C37267) * C1355 + (C37270 + C37269) * C1350 -
            (C33316 * C20694 + C50983 * C20696 + C33315 * C3603 +
             C33313 * C3605) *
                C1356 -
            (C33316 * C20695 + C50983 * C20697 + C33315 * C3606 +
             C33313 * C3609) *
                C50835) *
               C50764 * C2438) *
              C50785 * C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C628 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C623 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C629 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C624) *
               C17338 +
           ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
            (C33548 + C33549) * C628 - (C33550 + C33551) * C623 +
            (C33916 + C33917) * C629 + (C33918 + C33919) * C624) *
               C17339 +
           (C33366 * C627 + C33367 * C622 - C33561 * C628 - C33562 * C623 +
            (C33920 + C33921) * C629 + (C33922 + C33923) * C624) *
               C17340) *
              C50908 * C51040 +
          (((C33549 + C33548) * C628 -
            ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
            (C33551 + C33550) * C623 - (C33917 + C33916) * C629 -
            (C33919 + C33918) * C624) *
               C17338 +
           ((C33554 + C33553) * C628 -
            ((C33357 + C33356) * C622 + (C33355 + C33354) * C627) +
            (C33556 + C33555) * C623 - (C33921 + C33920) * C629 -
            (C33923 + C33922) * C624) *
               C17339 +
           ((C33557 + C33558) * C628 - (C33368 * C622 + C33369 * C627) +
            (C33559 + C33560) * C623 -
            (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                C629 -
            (C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                C624) *
               C17340) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C17338 +
           ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
           C33374 * C17340) *
              C50908 * C112 -
          (C33375 * C17340 +
           ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
           ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
              C50908 * C113 +
          (C33374 * C17338 +
           ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C17339 +
           ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) * C17340) *
              C50908 * C114 -
          (((C33316 * C482 + C50983 * C489 + C33315 * C137 + C33313 * C145) *
                C50819 +
            (C33316 * C471 + C50983 * C483 + C33315 * C124 + C33313 * C136) *
                C118) *
               C17340 +
           ((C33365 + C33364) * C50819 + (C33363 + C33362) * C118) * C17339 +
           C33375 * C17338) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C17338 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
            C33374 * C17340) *
               C50908 * C51040 -
           (C33375 * C17340 +
            ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
               C50908 * C50790) *
              C1005 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C17338 +
            ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C17339 +
            ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) * C17340) *
               C50908 * C50790 -
           (C33753 * C17340 +
            ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C17338) *
               C50908 * C51040) *
              C1006 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C17338 +
            ((C34330 + C34331) * C118 + (C34332 + C34333) * C50819) * C17339 +
            ((C34334 + C34335) * C118 + (C34336 + C34337) * C50819) * C17340) *
               C50908 * C51040 -
           (((C33316 * C1240 + C50983 * C1248 + C33315 * C1020 +
              C33313 * C1026) *
                 C50819 +
             (C33316 * C1236 + C50983 * C1241 + C33315 * C1011 +
              C33313 * C1019) *
                 C118) *
                C17340 +
            ((C34337 + C34336) * C50819 + (C34335 + C34334) * C118) * C17339 +
            ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C17338) *
               C50908 * C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C50764 * C2436 +
           ((C33315 * C296 + C33313 * C302 + C33316 * C875 + C50983 * C883) *
                C118 +
            (C33315 * C303 + C33313 * C314 + C33316 * C884 + C50983 * C899) *
                C50819) *
               C50764 * C2437 +
           ((C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C118 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C50819) *
               C50764 * C2438) *
              C112 -
          (((C33919 + C33918) * C50819 + (C33917 + C33916) * C118) * C50764 *
               C2438 +
           ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
               C2437 +
           ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
               C2436) *
              C113 +
          (C33374 * C50764 * C2436 +
           ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
               C2437 +
           ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
               C2438) *
              C114 -
          (((C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                C50819 +
            (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                C118) *
               C50764 * C2438 +
           ((C33560 + C33559) * C50819 + (C33558 + C33557) * C118) * C50764 *
               C2437 +
           C33375 * C50764 * C2436) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
            C36631 * C629 + C36632 * C624) *
               C50764 * C2436 +
           ((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
            (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
            (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
               C50764 * C2437 +
           (C36631 * C627 + C36632 * C622 - (C36652 + C36651) * C628 -
            (C36654 + C36653) * C623 +
            (C33315 * C2949 + C33313 * C2952 + C33316 * C3245 +
             C50983 * C3251) *
                C629 +
            (C33315 * C2953 + C33313 * C2958 + C33316 * C3252 +
             C50983 * C3257) *
                C624) *
               C50764 * C2438) *
              C51040 +
          (((C33549 + C33548) * C628 -
            ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
            (C33551 + C33550) * C623 - C36641 * C629 - C36642 * C624) *
               C50764 * C2436 +
           ((C33916 + C33917) * C628 -
            ((C33550 + C33551) * C622 + (C33548 + C33549) * C627) +
            (C33918 + C33919) * C623 - (C36655 + C36656) * C629 -
            (C36657 + C36658) * C624) *
               C50764 * C2437 +
           ((C36656 + C36655) * C628 - (C36642 * C622 + C36641 * C627) +
            (C36658 + C36657) * C623 -
            (C33316 * C3246 + C50983 * C3253 + C33315 * C2950 +
             C33313 * C2954) *
                C629 -
            (C33316 * C3254 + C50983 * C3258 + C33315 * C2955 +
             C33313 * C2959) *
                C624) *
               C50764 * C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            (C36631 * C118 + C36632 * C50819) * C50764 * C2438) *
               C51040 -
           ((C36642 * C50819 + C36641 * C118) * C50764 * C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C50790) *
              C1005 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C33315 * C878 + C33313 * C889 + C33316 * C3430 + C50983 * C3434) *
                 C118 +
             (C33315 * C890 + C33313 * C902 + C33316 * C3435 + C50983 * C3439) *
                 C50819) *
                C50764 * C2438) *
               C50790 -
           ((C36954 * C50819 + C36953 * C118) * C50764 * C2438 +
            ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C50764 *
                C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C51040) *
              C1006 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C50764 * C2436 +
            ((C33315 * C1150 + C33313 * C1154 + C33316 * C3724 +
              C50983 * C3732) *
                 C118 +
             (C33315 * C1155 + C33313 * C1162 + C33316 * C3731 +
              C50983 * C3736) *
                 C50819) *
                C50764 * C2437 +
            ((C33315 * C3429 + C33313 * C3432 + C33316 * C3722 +
              C50983 * C3728) *
                 C118 +
             (C33315 * C3433 + C33313 * C3438 + C33316 * C3727 +
              C50983 * C3734) *
                 C50819) *
                C50764 * C2438) *
               C51040 -
           (((C33316 * C3725 + C50983 * C3733 + C33315 * C3435 +
              C33313 * C3439) *
                 C50819 +
             (C33316 * C3721 + C50983 * C3726 + C33315 * C3430 +
              C33313 * C3434) *
                 C118) *
                C50764 * C2438 +
            ((C33316 * C3729 + C50983 * C3735 + C33315 * C1157 +
              C33313 * C1163) *
                 C50819 +
             (C33316 * C3723 + C50983 * C3730 + C33315 * C1151 +
              C33313 * C1156) *
                 C118) *
                C50764 * C2437 +
            ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C50764 *
                C2436) *
               C50790) *
              C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
               C757 +
           (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
               C752 -
           (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
               C758 -
           (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
               C753 +
           (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
               C759 +
           (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
               C754 -
           (C33316 * C3243 + C50983 * C3247 + C33315 * C761 + C33313 * C765) *
               C760 -
           (C33316 * C3248 + C50983 * C3255 + C33315 * C766 + C33313 * C773) *
               C755) *
              C17338 +
          ((C33350 + C33351) * C757 + (C33352 + C33353) * C752 -
           (C33548 + C33549) * C758 - (C33550 + C33551) * C753 +
           (C33916 + C33917) * C759 + (C33918 + C33919) * C754 -
           (C33316 * C3244 + C50983 * C3249 + C33315 * C762 + C33313 * C767) *
               C760 -
           (C33316 * C3250 + C50983 * C3256 + C33315 * C768 + C33313 * C774) *
               C755) *
              C17339 +
          (C33366 * C757 + C33367 * C752 - C33561 * C758 - C33562 * C753 +
           (C33920 + C33921) * C759 + (C33922 + C33923) * C754 -
           (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
               C760 -
           (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
               C755) *
              C17340) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C295 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C50835) *
               C17338 +
           ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
            (C33548 + C33549) * C295 - (C33550 + C33551) * C50835) *
               C17339 +
           C33566 * C17340) *
              C50908 * C291 +
          (((C33549 + C33548) * C295 -
            ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
            (C33551 + C33550) * C50835) *
               C17338 +
           ((C33554 + C33553) * C295 -
            ((C33357 + C33356) * C51047 + (C33355 + C33354) * C294) +
            (C33556 + C33555) * C50835) *
               C17339 +
           ((C33557 + C33558) * C295 - (C33368 * C51047 + C33369 * C294) +
            (C33559 + C33560) * C50835) *
               C17340) *
              C50908 * C292 +
          (C33566 * C17338 +
           ((C33361 + C33360) * C294 + (C33359 + C33358) * C51047 -
            (C33558 + C33557) * C295 - (C33560 + C33559) * C50835) *
               C17339 +
           ((C33362 + C33363) * C294 + (C33364 + C33365) * C51047 -
            (C33316 * C1633 + C50983 * C1634 + C33315 * C300 + C33313 * C310) *
                C295 -
            (C33316 * C1635 + C50983 * C1636 + C33315 * C311 + C33313 * C318) *
                C50835) *
               C17340) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C295 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C50835) *
               C17338 +
           ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
            (C33548 + C33549) * C295 - (C33550 + C33551) * C50835) *
               C17339 +
           C33566 * C17340) *
              C50908 * C50785 * C1005 +
          (((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                C295 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C51047 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C294) +
            (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                C50835) *
               C17338 +
           ((C33315 * C877 + C33313 * C887 + C33316 * C1151 + C50983 * C1156) *
                C295 -
            ((C33740 + C33739) * C51047 + (C33738 + C33737) * C294) +
            (C33315 * C888 + C33313 * C901 + C33316 * C1157 + C50983 * C1163) *
                C50835) *
               C17339 +
           ((C33315 * C879 + C33313 * C891 + C33316 * C1152 + C50983 * C1158) *
                C295 -
            (C33749 * C51047 + C33750 * C294) +
            (C33315 * C892 + C33313 * C903 + C33316 * C1159 + C50983 * C1164) *
                C50835) *
               C17340) *
              C50908 * C50785 * C1006 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C294 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C51047 -
            (C33316 * C3724 + C50983 * C3732 + C33315 * C1150 +
             C33313 * C1154) *
                C295 -
            (C33316 * C3731 + C50983 * C3736 + C33315 * C1155 +
             C33313 * C1162) *
                C50835) *
               C17338 +
           ((C34330 + C34331) * C294 + (C34332 + C34333) * C51047 -
            (C33316 * C3723 + C50983 * C3730 + C33315 * C1151 +
             C33313 * C1156) *
                C295 -
            (C33316 * C3729 + C50983 * C3735 + C33315 * C1157 +
             C33313 * C1163) *
                C50835) *
               C17339 +
           ((C34334 + C34335) * C294 + (C34336 + C34337) * C51047 -
            (C33316 * C7095 + C50983 * C7096 + C33315 * C1152 +
             C33313 * C1158) *
                C295 -
            (C33316 * C7097 + C50983 * C7098 + C33315 * C1159 +
             C33313 * C1164) *
                C50835) *
               C17340) *
              C50908 * C50785 * C1007)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
            (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           ((C36336 + C36335) * C294 + (C36338 + C36337) * C51047 -
            (C33316 * C3243 + C50983 * C3247 + C33315 * C761 + C33313 * C765) *
                C295 -
            (C33316 * C3248 + C50983 * C3255 + C33315 * C766 + C33313 * C773) *
                C50835) *
               C50764 * C2438) *
              C291 +
          (((C33549 + C33548) * C295 -
            ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
            (C33551 + C33550) * C50835) *
               C50764 * C2436 +
           ((C33916 + C33917) * C295 -
            ((C33550 + C33551) * C51047 + (C33548 + C33549) * C294) +
            (C33918 + C33919) * C50835) *
               C50764 * C2437 +
           ((C33315 * C762 + C33313 * C767 + C33316 * C3244 + C50983 * C3249) *
                C295 -
            ((C33919 + C33918) * C51047 + (C33917 + C33916) * C294) +
            (C33315 * C768 + C33313 * C774 + C33316 * C3250 + C50983 * C3256) *
                C50835) *
               C50764 * C2438) *
              C292 +
          (C33566 * C50764 * C2436 +
           ((C33554 + C33553) * C294 + (C33556 + C33555) * C51047 -
            (C33921 + C33920) * C295 - (C33923 + C33922) * C50835) *
               C50764 * C2437 +
           ((C33920 + C33921) * C294 + (C33922 + C33923) * C51047 -
            (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
                C295 -
            (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
                C50835) *
               C50764 * C2438) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
               C757 +
           (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
               C752 -
           (C36331 + C36332) * C758 - (C36333 + C36334) * C753 + C36631 * C759 +
           C36632 * C754 - C36757 * C760 - C36758 * C755) *
              C50764 * C2436 +
          ((C36332 + C36331) * C757 + (C36334 + C36333) * C752 -
           (C36335 + C36336) * C758 - (C36337 + C36338) * C753 +
           (C36651 + C36652) * C759 + (C36653 + C36654) * C754 -
           (C36767 + C36768) * C760 - (C36769 + C36770) * C755) *
              C50764 * C2437 +
          (C36631 * C757 + C36632 * C752 - C36757 * C758 - C36758 * C753 +
           (C36768 + C36767) * C759 + (C36770 + C36769) * C754 -
           (C33316 * C20412 + C50983 * C20413 + C33315 * C3083 +
            C33313 * C3085) *
               C760 -
           (C33316 * C20414 + C50983 * C20415 + C33315 * C3086 +
            C33313 * C3089) *
               C755) *
              C50764 * C2438) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
            (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           (C36631 * C294 + C36632 * C51047 - C36757 * C295 - C36758 * C50835) *
               C50764 * C2438) *
              C50785 * C1005 +
          (((C36941 + C36942) * C295 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C51047 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C294) +
            (C36943 + C36944) * C50835) *
               C50764 * C2436 +
           ((C36946 + C36945) * C295 -
            ((C36944 + C36943) * C51047 + (C36942 + C36941) * C294) +
            (C36948 + C36947) * C50835) *
               C50764 * C2437 +
           ((C36950 + C36949) * C295 - (C36954 * C51047 + C36953 * C294) +
            (C36952 + C36951) * C50835) *
               C50764 * C2438) *
              C50785 * C1006 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C294 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C51047 -
            (C37263 + C37264) * C295 - (C37265 + C37266) * C50835) *
               C50764 * C2436 +
           ((C37264 + C37263) * C294 + (C37266 + C37265) * C51047 -
            (C37267 + C37268) * C295 - (C37269 + C37270) * C50835) *
               C50764 * C2437 +
           ((C37268 + C37267) * C294 + (C37270 + C37269) * C51047 -
            (C33316 * C20694 + C50983 * C20696 + C33315 * C3603 +
             C33313 * C3605) *
                C295 -
            (C33316 * C20695 + C50983 * C20697 + C33315 * C3606 +
             C33313 * C3609) *
                C50835) *
               C50764 * C2438) *
              C50785 * C1007)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C628 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C623 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C629 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C624) *
               C17338 +
           ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
            (C33548 + C33549) * C628 - (C33550 + C33551) * C623 +
            (C33916 + C33917) * C629 + (C33918 + C33919) * C624) *
               C17339 +
           (C33366 * C627 + C33367 * C622 - C33561 * C628 - C33562 * C623 +
            (C33920 + C33921) * C629 + (C33922 + C33923) * C624) *
               C17340) *
              C50908 * C50785 * C51049 +
          (((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                C628 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C622 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C627) +
            (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                C623 -
            (C33316 * C3429 + C50983 * C3432 + C33315 * C876 + C33313 * C885) *
                C629 -
            (C33316 * C3433 + C50983 * C3438 + C33315 * C886 + C33313 * C900) *
                C624) *
               C17338 +
           ((C33315 * C877 + C33313 * C887 + C33316 * C1151 + C50983 * C1156) *
                C628 -
            ((C33740 + C33739) * C622 + (C33738 + C33737) * C627) +
            (C33315 * C888 + C33313 * C901 + C33316 * C1157 + C50983 * C1163) *
                C623 -
            (C33316 * C3430 + C50983 * C3434 + C33315 * C878 + C33313 * C889) *
                C629 -
            (C33316 * C3435 + C50983 * C3439 + C33315 * C890 + C33313 * C902) *
                C624) *
               C17339 +
           ((C33315 * C879 + C33313 * C891 + C33316 * C1152 + C50983 * C1158) *
                C628 -
            (C33749 * C622 + C33750 * C627) +
            (C33315 * C892 + C33313 * C903 + C33316 * C1159 + C50983 * C1164) *
                C623 -
            (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                C629 -
            (C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                C624) *
               C17340) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C17338 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
            C33374 * C17340) *
               C50908 * C291 -
           (C33375 * C17340 +
            ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
               C50908 * C292 +
           (C33374 * C17338 +
            ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C17339 +
            ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) * C17340) *
               C50908 * C293) *
              C51049 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C17338 +
            ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C17339 +
            ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) * C17340) *
               C50908 * C292 -
           (C33753 * C17340 +
            ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C17338) *
               C50908 * C291 -
           (((C33316 * C1021 + C50983 * C1027 + C33315 * C479 + C33313 * C487) *
                 C50819 +
             (C33316 * C1012 + C50983 * C1022 + C33315 * C469 + C33313 * C478) *
                 C118) *
                C17340 +
            ((C33748 + C33747) * C50819 + (C33746 + C33745) * C118) * C17339 +
            C33753 * C17338) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C17338 +
           ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
           C33374 * C17340) *
              C50908 * C50785 * C1232 -
          (C33753 * C17340 +
           ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
           ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                C50819 +
            (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                C118) *
               C17338) *
              C50908 * C50785 * C1233 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C118 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C50819) *
               C17338 +
           ((C34330 + C34331) * C118 + (C34332 + C34333) * C50819) * C17339 +
           ((C34334 + C34335) * C118 + (C34336 + C34337) * C50819) * C17340) *
              C50908 * C50785 * C1234 -
          (((C33316 * C6326 + C50983 * C6330 + C33315 * C1242 +
             C33313 * C1249) *
                C50819 +
            (C33316 * C6321 + C50983 * C6327 + C33315 * C1237 +
             C33313 * C1243) *
                C118) *
               C17340 +
           ((C33316 * C6325 + C50983 * C6329 + C33315 * C1244 +
             C33313 * C1250) *
                C50819 +
            (C33316 * C6320 + C50983 * C6324 + C33315 * C1238 +
             C33313 * C1245) *
                C118) *
               C17339 +
           ((C33316 * C6323 + C50983 * C6328 + C33315 * C1246 +
             C33313 * C1251) *
                C50819 +
            (C33316 * C6319 + C50983 * C6322 + C33315 * C1239 +
             C33313 * C1247) *
                C118) *
               C17338) *
              C50908 * C50785 * C1235)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            ((C36336 + C36335) * C118 + (C36338 + C36337) * C50819) * C50764 *
                C2438) *
               C291 -
           (((C33919 + C33918) * C50819 + (C33917 + C33916) * C118) * C50764 *
                C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C292 +
           (C33374 * C50764 * C2436 +
            ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
                C2437 +
            ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
                C2438) *
               C293) *
              C51049 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C33315 * C878 + C33313 * C889 + C33316 * C3430 + C50983 * C3434) *
                 C118 +
             (C33315 * C890 + C33313 * C902 + C33316 * C3435 + C50983 * C3439) *
                 C50819) *
                C50764 * C2438) *
               C292 -
           (((C33316 * C3433 + C50983 * C3438 + C33315 * C886 + C33313 * C900) *
                 C50819 +
             (C33316 * C3429 + C50983 * C3432 + C33315 * C876 + C33313 * C885) *
                 C118) *
                C50764 * C2438 +
            ((C33316 * C1155 + C50983 * C1162 + C33315 * C884 + C33313 * C899) *
                 C50819 +
             (C33316 * C1150 + C50983 * C1154 + C33315 * C875 + C33313 * C883) *
                 C118) *
                C50764 * C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C291 -
           (((C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                 C50819 +
             (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                 C118) *
                C50764 * C2438 +
            ((C35098 + C35097) * C50819 + (C35096 + C35095) * C118) * C50764 *
                C2437 +
            C33753 * C50764 * C2436) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
            C36631 * C629 + C36632 * C624) *
               C50764 * C2436 +
           ((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
            (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
            (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
               C50764 * C2437 +
           (C36631 * C627 + C36632 * C622 - C36757 * C628 - C36758 * C623 +
            (C36768 + C36767) * C629 + (C36770 + C36769) * C624) *
               C50764 * C2438) *
              C50785 * C51049 +
          (((C36941 + C36942) * C628 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C622 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C627) +
            (C36943 + C36944) * C623 - C36953 * C629 - C36954 * C624) *
               C50764 * C2436 +
           ((C36946 + C36945) * C628 -
            ((C36944 + C36943) * C622 + (C36942 + C36941) * C627) +
            (C36948 + C36947) * C623 - (C36949 + C36950) * C629 -
            (C36951 + C36952) * C624) *
               C50764 * C2437 +
           ((C36950 + C36949) * C628 - (C36954 * C622 + C36953 * C627) +
            (C36952 + C36951) * C623 -
            (C33316 * C20618 + C50983 * C20619 + C33315 * C3245 +
             C33313 * C3251) *
                C629 -
            (C33316 * C20620 + C50983 * C20621 + C33315 * C3252 +
             C33313 * C3257) *
                C624) *
               C50764 * C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C50764 * C2436 +
           ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
               C2437 +
           (C36631 * C118 + C36632 * C50819) * C50764 * C2438) *
              C50785 * C1232 -
          ((C36954 * C50819 + C36953 * C118) * C50764 * C2438 +
           ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C50764 *
               C2437 +
           ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                C50819 +
            (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                C118) *
               C50764 * C2436) *
              C50785 * C1233 +
          (((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
             C50983 * C1247) *
                C118 +
            (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
             C50983 * C1251) *
                C50819) *
               C50764 * C2436 +
           ((C37264 + C37263) * C118 + (C37266 + C37265) * C50819) * C50764 *
               C2437 +
           ((C37268 + C37267) * C118 + (C37270 + C37269) * C50819) * C50764 *
               C2438) *
              C50785 * C1234 -
          (((C33316 * C22840 + C50983 * C22841 + C33315 * C3727 +
             C33313 * C3734) *
                C50819 +
            (C33316 * C22838 + C50983 * C22839 + C33315 * C3722 +
             C33313 * C3728) *
                C118) *
               C50764 * C2438 +
           ((C33316 * C6498 + C50983 * C6501 + C33315 * C3731 +
             C33313 * C3736) *
                C50819 +
            (C33316 * C6495 + C50983 * C6497 + C33315 * C3724 +
             C33313 * C3732) *
                C118) *
               C50764 * C2437 +
           ((C33316 * C6323 + C50983 * C6328 + C33315 * C1246 +
             C33313 * C1251) *
                C50819 +
            (C33316 * C6319 + C50983 * C6322 + C33315 * C1239 +
             C33313 * C1247) *
                C118) *
               C50764 * C2436) *
              C50785 * C1235)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C17338 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
            C33374 * C17340) *
               C50908 * C51093 -
           (C33375 * C17340 +
            ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
               C50908 * C51078 +
           (C33374 * C17338 +
            ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C17339 +
            ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) * C17340) *
               C50908 * C1354) *
              C1765 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C17338 +
            ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C17339 +
            ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) * C17340) *
               C50908 * C51078 -
           (C33753 * C17340 +
            ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C17338) *
               C50908 * C51093 -
           (((C33316 * C1021 + C50983 * C1027 + C33315 * C479 + C33313 * C487) *
                 C50819 +
             (C33316 * C1012 + C50983 * C1022 + C33315 * C469 + C33313 * C478) *
                 C118) *
                C17340 +
            ((C33748 + C33747) * C50819 + (C33746 + C33745) * C118) * C17339 +
            C33753 * C17338) *
               C50908 * C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            (C36631 * C118 + C36632 * C50819) * C50764 * C2438) *
               C51093 -
           ((C36642 * C50819 + C36641 * C118) * C50764 * C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C51078 +
           (C33374 * C50764 * C2436 +
            ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
                C2437 +
            ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
                C2438) *
               C1354) *
              C1765 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C37864 + C37863) * C118 + (C37866 + C37865) * C50819) * C50764 *
                C2438) *
               C51078 -
           ((C36954 * C50819 + C36953 * C118) * C50764 * C2438 +
            ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C50764 *
                C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C51093 -
           (((C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                 C50819 +
             (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                 C118) *
                C50764 * C2438 +
            ((C35098 + C35097) * C50819 + (C35096 + C35095) * C118) * C50764 *
                C2437 +
            C33753 * C50764 * C2436) *
               C1354) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C294 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C51047 -
             (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                 C295 -
             (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                 C50835) *
                C17338 +
            ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
             (C33548 + C33549) * C295 - (C33550 + C33551) * C50835) *
                C17339 +
            C33566 * C17340) *
               C50908 * C1480 +
           (((C33549 + C33548) * C295 -
             ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
             (C33551 + C33550) * C50835) *
                C17338 +
            ((C33554 + C33553) * C295 -
             ((C33357 + C33356) * C51047 + (C33355 + C33354) * C294) +
             (C33556 + C33555) * C50835) *
                C17339 +
            ((C33557 + C33558) * C295 - (C33368 * C51047 + C33369 * C294) +
             (C33559 + C33560) * C50835) *
                C17340) *
               C50908 * C50790) *
              C1765 +
          ((((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                 C295 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C51047 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C294) +
             (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                 C50835) *
                C17338 +
            ((C35091 + C35092) * C295 -
             ((C33740 + C33739) * C51047 + (C33738 + C33737) * C294) +
             (C35093 + C35094) * C50835) *
                C17339 +
            ((C35095 + C35096) * C295 - (C33749 * C51047 + C33750 * C294) +
             (C35097 + C35098) * C50835) *
                C17340) *
               C50908 * C1480 +
           (((C33737 + C33738) * C294 + (C33739 + C33740) * C51047 -
             (C35092 + C35091) * C295 - (C35094 + C35093) * C50835) *
                C17338 +
            ((C33741 + C33742) * C294 + (C33743 + C33744) * C51047 -
             (C35096 + C35095) * C295 - (C35098 + C35097) * C50835) *
                C17339 +
            ((C33745 + C33746) * C294 + (C33747 + C33748) * C51047 -
             (C33316 * C1153 + C50983 * C1160 + C33315 * C881 + C33313 * C895) *
                 C295 -
             (C33316 * C1161 + C50983 * C1165 + C33315 * C896 + C33313 * C905) *
                 C50835) *
                C17340) *
               C50908 * C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C294 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C51047 -
             (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
                C50764 * C2436 +
            ((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
             (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
                C50764 * C2437 +
            (C36631 * C294 + C36632 * C51047 - C36757 * C295 -
             C36758 * C50835) *
                C50764 * C2438) *
               C1480 +
           (((C33549 + C33548) * C295 -
             ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
             (C33551 + C33550) * C50835) *
                C50764 * C2436 +
            ((C33916 + C33917) * C295 -
             ((C33550 + C33551) * C51047 + (C33548 + C33549) * C294) +
             (C33918 + C33919) * C50835) *
                C50764 * C2437 +
            ((C36656 + C36655) * C295 - (C36642 * C51047 + C36641 * C294) +
             (C36658 + C36657) * C50835) *
                C50764 * C2438) *
               C50790) *
              C1765 +
          ((((C36941 + C36942) * C295 -
             ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 +
               C33313 * C488) *
                  C51047 +
              (C33316 * C1008 + C50983 * C1013 + C33315 * C470 +
               C33313 * C481) *
                  C294) +
             (C36943 + C36944) * C50835) *
                C50764 * C2436 +
            ((C36946 + C36945) * C295 -
             ((C36944 + C36943) * C51047 + (C36942 + C36941) * C294) +
             (C36948 + C36947) * C50835) *
                C50764 * C2437 +
            ((C36950 + C36949) * C295 - (C36954 * C51047 + C36953 * C294) +
             (C36952 + C36951) * C50835) *
                C50764 * C2438) *
               C1480 +
           (((C33737 + C33738) * C294 + (C33739 + C33740) * C51047 -
             (C35092 + C35091) * C295 - (C35094 + C35093) * C50835) *
                C50764 * C2436 +
            ((C35091 + C35092) * C294 + (C35093 + C35094) * C51047 -
             (C37863 + C37864) * C295 - (C37865 + C37866) * C50835) *
                C50764 * C2437 +
            ((C37864 + C37863) * C294 + (C37866 + C37865) * C51047 -
             (C33316 * C3604 + C50983 * C3607 + C33315 * C3244 +
              C33313 * C3249) *
                 C295 -
             (C33316 * C3608 + C50983 * C3610 + C33315 * C3250 +
              C33313 * C3256) *
                 C50835) *
                C50764 * C2438) *
               C50790) *
              C50861)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C17338 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
            C33374 * C17340) *
               C50908 * C1480 -
           (C33375 * C17340 +
            ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
               C50908 * C50790) *
              C51095 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C17338 +
            ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C17339 +
            ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) * C17340) *
               C50908 * C50790 -
           (C33753 * C17340 +
            ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C17338) *
               C50908 * C1480) *
              C51084 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C17338 +
            ((C34330 + C34331) * C118 + (C34332 + C34333) * C50819) * C17339 +
            ((C34334 + C34335) * C118 + (C34336 + C34337) * C50819) * C17340) *
               C50908 * C1480 -
           (((C33316 * C1240 + C50983 * C1248 + C33315 * C1020 +
              C33313 * C1026) *
                 C50819 +
             (C33316 * C1236 + C50983 * C1241 + C33315 * C1011 +
              C33313 * C1019) *
                 C118) *
                C17340 +
            ((C34337 + C34336) * C50819 + (C34335 + C34334) * C118) * C17339 +
            ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C17338) *
               C50908 * C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            (C36631 * C118 + C36632 * C50819) * C50764 * C2438) *
               C1480 -
           ((C36642 * C50819 + C36641 * C118) * C50764 * C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C50790) *
              C51095 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C37864 + C37863) * C118 + (C37866 + C37865) * C50819) * C50764 *
                C2438) *
               C50790 -
           ((C36954 * C50819 + C36953 * C118) * C50764 * C2438 +
            ((C36944 + C36943) * C50819 + (C36942 + C36941) * C118) * C50764 *
                C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C1480) *
              C51084 +
          ((((C33315 * C1008 + C33313 * C1013 + C33316 * C1239 +
              C50983 * C1247) *
                 C118 +
             (C33315 * C1014 + C33313 * C1023 + C33316 * C1246 +
              C50983 * C1251) *
                 C50819) *
                C50764 * C2436 +
            ((C37264 + C37263) * C118 + (C37266 + C37265) * C50819) * C50764 *
                C2437 +
            ((C37268 + C37267) * C118 + (C37270 + C37269) * C50819) * C50764 *
                C2438) *
               C1480 -
           (((C33316 * C3725 + C50983 * C3733 + C33315 * C3435 +
              C33313 * C3439) *
                 C50819 +
             (C33316 * C3721 + C50983 * C3726 + C33315 * C3430 +
              C33313 * C3434) *
                 C118) *
                C50764 * C2438 +
            ((C33316 * C3729 + C50983 * C3735 + C33315 * C1157 +
              C33313 * C1163) *
                 C50819 +
             (C33316 * C3723 + C50983 * C3730 + C33315 * C1151 +
              C33313 * C1156) *
                 C118) *
                C50764 * C2437 +
            ((C34333 + C34332) * C50819 + (C34331 + C34330) * C118) * C50764 *
                C2436) *
               C50790) *
              C2009)) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C17338 +
           ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
           C33374 * C17340) *
              C50908 * C112 -
          (C33375 * C17340 +
           ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
           ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
              C50908 * C113 +
          (C33374 * C17338 +
           ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C17339 +
           ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) * C17340) *
              C50908 * C114 -
          (((C33316 * C482 + C50983 * C489 + C33315 * C137 + C33313 * C145) *
                C50819 +
            (C33316 * C471 + C50983 * C483 + C33315 * C124 + C33313 * C136) *
                C118) *
               C17340 +
           ((C33365 + C33364) * C50819 + (C33363 + C33362) * C118) * C17339 +
           C33375 * C17338) *
              C50908 * C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C628 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C623 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C629 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C624) *
               C17338 +
           ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
            (C33548 + C33549) * C628 - (C33550 + C33551) * C623 +
            (C33916 + C33917) * C629 + (C33918 + C33919) * C624) *
               C17339 +
           (C33366 * C627 + C33367 * C622 - C33561 * C628 - C33562 * C623 +
            (C33920 + C33921) * C629 + (C33922 + C33923) * C624) *
               C17340) *
              C50908 * C51040 +
          (((C33549 + C33548) * C628 -
            ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
            (C33551 + C33550) * C623 - (C33917 + C33916) * C629 -
            (C33919 + C33918) * C624) *
               C17338 +
           ((C33554 + C33553) * C628 -
            ((C33357 + C33356) * C622 + (C33355 + C33354) * C627) +
            (C33556 + C33555) * C623 - (C33921 + C33920) * C629 -
            (C33923 + C33922) * C624) *
               C17339 +
           ((C33557 + C33558) * C628 - (C33368 * C622 + C33369 * C627) +
            (C33559 + C33560) * C623 -
            (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                C629 -
            (C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                C624) *
               C17340) *
              C50908 * C50790) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C118 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C50819) *
               C50764 * C2436 +
           ((C33315 * C296 + C33313 * C302 + C33316 * C875 + C50983 * C883) *
                C118 +
            (C33315 * C303 + C33313 * C314 + C33316 * C884 + C50983 * C899) *
                C50819) *
               C50764 * C2437 +
           ((C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C118 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C50819) *
               C50764 * C2438) *
              C112 -
          (((C33919 + C33918) * C50819 + (C33917 + C33916) * C118) * C50764 *
               C2438 +
           ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
               C2437 +
           ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
               C2436) *
              C113 +
          (C33374 * C50764 * C2436 +
           ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
               C2437 +
           ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
               C2438) *
              C114 -
          (((C33316 * C898 + C50983 * C906 + C33315 * C642 + C33313 * C648) *
                C50819 +
            (C33316 * C882 + C50983 * C897 + C33315 * C633 + C33313 * C641) *
                C118) *
               C50764 * C2438 +
           ((C33560 + C33559) * C50819 + (C33558 + C33557) * C118) * C50764 *
               C2437 +
           C33375 * C50764 * C2436) *
              C115) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
            C36631 * C629 + C36632 * C624) *
               C50764 * C2436 +
           ((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
            (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
            (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
               C50764 * C2437 +
           (C36631 * C627 + C36632 * C622 - (C36652 + C36651) * C628 -
            (C36654 + C36653) * C623 +
            (C33315 * C2949 + C33313 * C2952 + C33316 * C3245 +
             C50983 * C3251) *
                C629 +
            (C33315 * C2953 + C33313 * C2958 + C33316 * C3252 +
             C50983 * C3257) *
                C624) *
               C50764 * C2438) *
              C51040 +
          (((C33549 + C33548) * C628 -
            ((C33353 + C33352) * C622 + (C33351 + C33350) * C627) +
            (C33551 + C33550) * C623 - C36641 * C629 - C36642 * C624) *
               C50764 * C2436 +
           ((C33916 + C33917) * C628 -
            ((C33550 + C33551) * C622 + (C33548 + C33549) * C627) +
            (C33918 + C33919) * C623 - (C36655 + C36656) * C629 -
            (C36657 + C36658) * C624) *
               C50764 * C2437 +
           ((C36656 + C36655) * C628 - (C36642 * C622 + C36641 * C627) +
            (C36658 + C36657) * C623 -
            (C33316 * C3246 + C50983 * C3253 + C33315 * C2950 +
             C33313 * C2954) *
                C629 -
            (C33316 * C3254 + C50983 * C3258 + C33315 * C2955 +
             C33313 * C2959) *
                C624) *
               C50764 * C2438) *
              C50790) *
         C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C295 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C50835) *
               C17338 +
           ((C33350 + C33351) * C294 + (C33352 + C33353) * C51047 -
            (C33548 + C33549) * C295 - (C33550 + C33551) * C50835) *
               C17339 +
           C33566 * C17340) *
              C50908 * C291 +
          (((C33549 + C33548) * C295 -
            ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
            (C33551 + C33550) * C50835) *
               C17338 +
           ((C33554 + C33553) * C295 -
            ((C33357 + C33356) * C51047 + (C33355 + C33354) * C294) +
            (C33556 + C33555) * C50835) *
               C17339 +
           ((C33557 + C33558) * C295 - (C33368 * C51047 + C33369 * C294) +
            (C33559 + C33560) * C50835) *
               C17340) *
              C50908 * C292 +
          (C33566 * C17338 +
           ((C33361 + C33360) * C294 + (C33359 + C33358) * C51047 -
            (C33558 + C33557) * C295 - (C33560 + C33559) * C50835) *
               C17339 +
           ((C33362 + C33363) * C294 + (C33364 + C33365) * C51047 -
            (C33316 * C1633 + C50983 * C1634 + C33315 * C300 + C33313 * C310) *
                C295 -
            (C33316 * C1635 + C50983 * C1636 + C33315 * C311 + C33313 * C318) *
                C50835) *
               C17340) *
              C50908 * C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
               C757 +
           (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
               C752 -
           (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
               C758 -
           (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
               C753 +
           (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
               C759 +
           (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
               C754 -
           (C33316 * C3243 + C50983 * C3247 + C33315 * C761 + C33313 * C765) *
               C760 -
           (C33316 * C3248 + C50983 * C3255 + C33315 * C766 + C33313 * C773) *
               C755) *
              C17338 +
          ((C33350 + C33351) * C757 + (C33352 + C33353) * C752 -
           (C33548 + C33549) * C758 - (C33550 + C33551) * C753 +
           (C33916 + C33917) * C759 + (C33918 + C33919) * C754 -
           (C33316 * C3244 + C50983 * C3249 + C33315 * C762 + C33313 * C767) *
               C760 -
           (C33316 * C3250 + C50983 * C3256 + C33315 * C768 + C33313 * C774) *
               C755) *
              C17339 +
          (C33366 * C757 + C33367 * C752 - C33561 * C758 - C33562 * C753 +
           (C33920 + C33921) * C759 + (C33922 + C33923) * C754 -
           (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
               C760 -
           (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
               C755) *
              C17340) *
         C50908 * C50785 * C50849) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C294 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C51047 -
            (C36331 + C36332) * C295 - (C36333 + C36334) * C50835) *
               C50764 * C2436 +
           ((C36332 + C36331) * C294 + (C36334 + C36333) * C51047 -
            (C36335 + C36336) * C295 - (C36337 + C36338) * C50835) *
               C50764 * C2437 +
           ((C36336 + C36335) * C294 + (C36338 + C36337) * C51047 -
            (C33316 * C3243 + C50983 * C3247 + C33315 * C761 + C33313 * C765) *
                C295 -
            (C33316 * C3248 + C50983 * C3255 + C33315 * C766 + C33313 * C773) *
                C50835) *
               C50764 * C2438) *
              C291 +
          (((C33549 + C33548) * C295 -
            ((C33353 + C33352) * C51047 + (C33351 + C33350) * C294) +
            (C33551 + C33550) * C50835) *
               C50764 * C2436 +
           ((C33916 + C33917) * C295 -
            ((C33550 + C33551) * C51047 + (C33548 + C33549) * C294) +
            (C33918 + C33919) * C50835) *
               C50764 * C2437 +
           ((C33315 * C762 + C33313 * C767 + C33316 * C3244 + C50983 * C3249) *
                C295 -
            ((C33919 + C33918) * C51047 + (C33917 + C33916) * C294) +
            (C33315 * C768 + C33313 * C774 + C33316 * C3250 + C50983 * C3256) *
                C50835) *
               C50764 * C2438) *
              C292 +
          (C33566 * C50764 * C2436 +
           ((C33554 + C33553) * C294 + (C33556 + C33555) * C51047 -
            (C33921 + C33920) * C295 - (C33923 + C33922) * C50835) *
               C50764 * C2437 +
           ((C33920 + C33921) * C294 + (C33922 + C33923) * C51047 -
            (C33316 * C4251 + C50983 * C4252 + C33315 * C763 + C33313 * C769) *
                C295 -
            (C33316 * C4253 + C50983 * C4254 + C33315 * C770 + C33313 * C775) *
                C50835) *
               C50764 * C2438) *
              C293) *
         C50849) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
               C757 +
           (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
               C752 -
           (C36331 + C36332) * C758 - (C36333 + C36334) * C753 + C36631 * C759 +
           C36632 * C754 - C36757 * C760 - C36758 * C755) *
              C50764 * C2436 +
          ((C36332 + C36331) * C757 + (C36334 + C36333) * C752 -
           (C36335 + C36336) * C758 - (C36337 + C36338) * C753 +
           (C36651 + C36652) * C759 + (C36653 + C36654) * C754 -
           (C36767 + C36768) * C760 - (C36769 + C36770) * C755) *
              C50764 * C2437 +
          (C36631 * C757 + C36632 * C752 - C36757 * C758 - C36758 * C753 +
           (C36768 + C36767) * C759 + (C36770 + C36769) * C754 -
           (C33316 * C20412 + C50983 * C20413 + C33315 * C3083 +
            C33313 * C3085) *
               C760 -
           (C33316 * C20414 + C50983 * C20415 + C33315 * C3086 +
            C33313 * C3089) *
               C755) *
              C50764 * C2438) *
         C50785 * C50849) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C17338 +
            ((C33350 + C33351) * C118 + (C33352 + C33353) * C50819) * C17339 +
            C33374 * C17340) *
               C50908 * C291 -
           (C33375 * C17340 +
            ((C33357 + C33356) * C50819 + (C33355 + C33354) * C118) * C17339 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C17338) *
               C50908 * C292 +
           (C33374 * C17338 +
            ((C33361 + C33360) * C118 + (C33359 + C33358) * C50819) * C17339 +
            ((C33362 + C33363) * C118 + (C33364 + C33365) * C50819) * C17340) *
               C50908 * C293) *
              C51049 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C17338 +
            ((C33741 + C33742) * C118 + (C33743 + C33744) * C50819) * C17339 +
            ((C33745 + C33746) * C118 + (C33747 + C33748) * C50819) * C17340) *
               C50908 * C292 -
           (C33753 * C17340 +
            ((C33740 + C33739) * C50819 + (C33738 + C33737) * C118) * C17339 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C17338) *
               C50908 * C291 -
           (((C33316 * C1021 + C50983 * C1027 + C33315 * C479 + C33313 * C487) *
                 C50819 +
             (C33316 * C1012 + C50983 * C1022 + C33315 * C469 + C33313 * C478) *
                 C118) *
                C17340 +
            ((C33748 + C33747) * C50819 + (C33746 + C33745) * C118) * C17339 +
            C33753 * C17338) *
               C50908 * C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C33316 * C875 + C50983 * C883 + C33315 * C296 + C33313 * C302) *
                C628 -
            (C33316 * C884 + C50983 * C899 + C33315 * C303 + C33313 * C314) *
                C623 +
            (C33315 * C630 + C33313 * C635 + C33316 * C876 + C50983 * C885) *
                C629 +
            (C33315 * C636 + C33313 * C645 + C33316 * C886 + C50983 * C900) *
                C624) *
               C17338 +
           ((C33350 + C33351) * C627 + (C33352 + C33353) * C622 -
            (C33548 + C33549) * C628 - (C33550 + C33551) * C623 +
            (C33916 + C33917) * C629 + (C33918 + C33919) * C624) *
               C17339 +
           (C33366 * C627 + C33367 * C622 - C33561 * C628 - C33562 * C623 +
            (C33920 + C33921) * C629 + (C33922 + C33923) * C624) *
               C17340) *
              C50908 * C50785 * C51049 +
          (((C33315 * C875 + C33313 * C883 + C33316 * C1150 + C50983 * C1154) *
                C628 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C622 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C627) +
            (C33315 * C884 + C33313 * C899 + C33316 * C1155 + C50983 * C1162) *
                C623 -
            (C33316 * C3429 + C50983 * C3432 + C33315 * C876 + C33313 * C885) *
                C629 -
            (C33316 * C3433 + C50983 * C3438 + C33315 * C886 + C33313 * C900) *
                C624) *
               C17338 +
           ((C33315 * C877 + C33313 * C887 + C33316 * C1151 + C50983 * C1156) *
                C628 -
            ((C33740 + C33739) * C622 + (C33738 + C33737) * C627) +
            (C33315 * C888 + C33313 * C901 + C33316 * C1157 + C50983 * C1163) *
                C623 -
            (C33316 * C3430 + C50983 * C3434 + C33315 * C878 + C33313 * C889) *
                C629 -
            (C33316 * C3435 + C50983 * C3439 + C33315 * C890 + C33313 * C902) *
                C624) *
               C17339 +
           ((C33315 * C879 + C33313 * C891 + C33316 * C1152 + C50983 * C1158) *
                C628 -
            (C33749 * C622 + C33750 * C627) +
            (C33315 * C892 + C33313 * C903 + C33316 * C1159 + C50983 * C1164) *
                C623 -
            (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                C629 -
            (C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                C624) *
               C17340) *
              C50908 * C50785 * C50861)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                 C118 +
             (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                 C50819) *
                C50764 * C2436 +
            ((C36332 + C36331) * C118 + (C36334 + C36333) * C50819) * C50764 *
                C2437 +
            ((C36336 + C36335) * C118 + (C36338 + C36337) * C50819) * C50764 *
                C2438) *
               C291 -
           (((C33919 + C33918) * C50819 + (C33917 + C33916) * C118) * C50764 *
                C2438 +
            ((C33550 + C33551) * C50819 + (C33548 + C33549) * C118) * C50764 *
                C2437 +
            ((C33353 + C33352) * C50819 + (C33351 + C33350) * C118) * C50764 *
                C2436) *
               C292 +
           (C33374 * C50764 * C2436 +
            ((C33554 + C33553) * C118 + (C33556 + C33555) * C50819) * C50764 *
                C2437 +
            ((C33920 + C33921) * C118 + (C33922 + C33923) * C50819) * C50764 *
                C2438) *
               C293) *
              C51049 +
          ((((C33737 + C33738) * C118 + (C33739 + C33740) * C50819) * C50764 *
                C2436 +
            ((C35091 + C35092) * C118 + (C35093 + C35094) * C50819) * C50764 *
                C2437 +
            ((C33315 * C878 + C33313 * C889 + C33316 * C3430 + C50983 * C3434) *
                 C118 +
             (C33315 * C890 + C33313 * C902 + C33316 * C3435 + C50983 * C3439) *
                 C50819) *
                C50764 * C2438) *
               C292 -
           (((C33316 * C3433 + C50983 * C3438 + C33315 * C886 + C33313 * C900) *
                 C50819 +
             (C33316 * C3429 + C50983 * C3432 + C33315 * C876 + C33313 * C885) *
                 C118) *
                C50764 * C2438 +
            ((C33316 * C1155 + C50983 * C1162 + C33315 * C884 + C33313 * C899) *
                 C50819 +
             (C33316 * C1150 + C50983 * C1154 + C33315 * C875 + C33313 * C883) *
                 C118) *
                C50764 * C2437 +
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C50819 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C118) *
                C50764 * C2436) *
               C291 -
           (((C33316 * C3436 + C50983 * C3440 + C33315 * C894 + C33313 * C904) *
                 C50819 +
             (C33316 * C3431 + C50983 * C3437 + C33315 * C880 + C33313 * C893) *
                 C118) *
                C50764 * C2438 +
            ((C35098 + C35097) * C50819 + (C35096 + C35095) * C118) * C50764 *
                C2437 +
            C33753 * C50764 * C2436) *
               C293) *
              C50861)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33315 * C119 + C33313 * C126 + C33316 * C470 + C50983 * C481) *
                C627 +
            (C33315 * C127 + C33313 * C140 + C33316 * C480 + C50983 * C488) *
                C622 -
            (C36331 + C36332) * C628 - (C36333 + C36334) * C623 +
            C36631 * C629 + C36632 * C624) *
               C50764 * C2436 +
           ((C36332 + C36331) * C627 + (C36334 + C36333) * C622 -
            (C36335 + C36336) * C628 - (C36337 + C36338) * C623 +
            (C36651 + C36652) * C629 + (C36653 + C36654) * C624) *
               C50764 * C2437 +
           (C36631 * C627 + C36632 * C622 - C36757 * C628 - C36758 * C623 +
            (C36768 + C36767) * C629 + (C36770 + C36769) * C624) *
               C50764 * C2438) *
              C50785 * C51049 +
          (((C36941 + C36942) * C628 -
            ((C33316 * C1014 + C50983 * C1023 + C33315 * C480 + C33313 * C488) *
                 C622 +
             (C33316 * C1008 + C50983 * C1013 + C33315 * C470 + C33313 * C481) *
                 C627) +
            (C36943 + C36944) * C623 - C36953 * C629 - C36954 * C624) *
               C50764 * C2436 +
           ((C36946 + C36945) * C628 -
            ((C36944 + C36943) * C622 + (C36942 + C36941) * C627) +
            (C36948 + C36947) * C623 - (C36949 + C36950) * C629 -
            (C36951 + C36952) * C624) *
               C50764 * C2437 +
           ((C36950 + C36949) * C628 - (C36954 * C622 + C36953 * C627) +
            (C36952 + C36951) * C623 -
            (C33316 * C20618 + C50983 * C20619 + C33315 * C3245 +
             C33313 * C3251) *
                C629 -
            (C33316 * C20620 + C50983 * C20621 + C33315 * C3252 +
             C33313 * C3257) *
                C624) *
               C50764 * C2438) *
              C50785 * C50861)) /
            (p * q * std::sqrt(p + q));
}
