/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AA_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_11_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49726 = 0 * ae;
    const double C49725 = ae * be;
    const double C49724 = 0 * be;
    const double C49723 = ae + be;
    const double C49722 = 0 * be;
    const double C49721 = xA - xB;
    const double C49765 = 0 * be;
    const double C49764 = yA - yB;
    const double C49806 = 0 * ae;
    const double C49802 = 0 * be;
    const double C49846 = xP - xQ;
    const double C49845 = yP - yQ;
    const double C49844 = p + q;
    const double C49843 = p * q;
    const double C49853 = std::pow(ae, 2);
    const double C49851 = bs[3];
    const double C49861 = bs[4];
    const double C49870 = bs[5];
    const double C49884 = bs[6];
    const double C49906 = bs[7];
    const double C50032 = zP - zQ;
    const double C50156 = bs[2];
    const double C122 = bs[0];
    const double C50538 = ce + de;
    const double C50537 = ce * de;
    const double C50536 = xC - xD;
    const double C50560 = yC - yD;
    const double C50576 = zC - zD;
    const double C50673 = zA - zB;
    const double C49731 = C49726 / C49723;
    const double C49728 = 2 * C49723;
    const double C49727 = std::pow(C49723, 2);
    const double C49730 = C49725 * C49721;
    const double C49729 = C49721 * C49724;
    const double C50514 = C49721 * be;
    const double C50513 = C49721 * ae;
    const double C50512 = std::pow(C49721, 2);
    const double C49766 = C49725 * C49764;
    const double C49803 = C49764 * C49765;
    const double C50658 = std::pow(C49764, 2);
    const double C50710 = C49764 * be;
    const double C50709 = C49764 * ae;
    const double C49811 = C49806 / C49723;
    const double C49871 = std::pow(C49846, 2);
    const double C49929 = C49846 * ae;
    const double C49854 = C49845 * ae;
    const double C49852 = C49846 * C49845;
    const double C50040 = std::pow(C49845, 2);
    const double C49847 = 2 * C49843;
    const double C50101 = std::pow(C50032, 2);
    const double C50540 = 2 * C50538;
    const double C50550 = std::pow(C50538, 2);
    const double C50542 = C50536 * de;
    const double C50541 = C50536 * ce;
    const double C50539 = std::pow(C50536, 2);
    const double C50561 = std::pow(C50560, 2);
    const double C50613 = C50560 * de;
    const double C50612 = C50560 * ce;
    const double C50577 = std::pow(C50576, 2);
    const double C50641 = C50576 * de;
    const double C50640 = C50576 * ce;
    const double C50674 = std::pow(C50673, 2);
    const double C50738 = C50673 * be;
    const double C50737 = C50673 * ae;
    const double C50522 = std::pow(C49728, -1);
    const double C50818 = std::pow(C49728, -2);
    const double C49732 = 2 * C49727;
    const double C143 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C49727;
    const double C50796 = 4 * C49727;
    const double C49733 = C49729 / C49723;
    const double C50515 = C50512 * C49725;
    const double C49808 = C49803 / C49723;
    const double C50659 = C50658 * C49725;
    const double C49932 = C49861 * C49929;
    const double C49938 = C49851 * C49929;
    const double C49945 = C49870 * C49929;
    const double C49957 = C49884 * C49929;
    const double C49978 = C49906 * C49929;
    const double C49857 = C49851 * C49854;
    const double C49863 = C49861 * C49854;
    const double C49873 = C49870 * C49854;
    const double C49888 = C49884 * C49854;
    const double C49912 = C49906 * C49854;
    const double C49856 = C49852 * C49853;
    const double C49848 = C49847 / C49844;
    const double C129 = (-(bs[1] * C49854 * C49847) / C49844) / C49723;
    const double C130 = (-(bs[1] * C49929 * C49847) / C49844) / C49723;
    const double C123 = -(C49846 * bs[1] * C49847) / C49844;
    const double C286 = -(C49845 * bs[1] * C49847) / C49844;
    const double C463 = -(C50032 * bs[1] * C49847) / C49844;
    const double C50551 = std::pow(C50540, -1);
    const double C50805 = std::pow(C50540, -2);
    const double C50555 = 2 * C50550;
    const double C50803 = 4 * C50550;
    const double C50543 = C50539 * C50537;
    const double C50562 = C50561 * C50537;
    const double C50578 = C50577 * C50537;
    const double C50675 = C50674 * C49725;
    const double C49738 = C49724 / C49732;
    const double C49736 = C49722 / C49732;
    const double C49805 = C49765 / C49732;
    const double C49809 = C49802 / C49732;
    const double C49735 = 0 - C49733;
    const double C50516 = C50515 / C49723;
    const double C49812 = 0 - C49808;
    const double C50660 = C50659 / C49723;
    const double C49862 = C49861 * C49856;
    const double C49872 = C49870 * C49856;
    const double C49886 = C49884 * C49856;
    const double C49910 = C49906 * C49856;
    const double C49850 = -C49848;
    const double C49860 = std::pow(C49848, 4);
    const double C49883 = std::pow(C49848, 6);
    const double C144 = (ae * std::pow(C49848, 2) * bs[2] * C49845 * ae +
                         C49846 * std::pow(-C49848, 3) * bs[3] * C49846 *
                             C49845 * std::pow(ae, 2)) /
                        C49727;
    const double C50155 = std::pow(C49848, 2);
    const double C131 =
        (C49846 * std::pow(C49848, 2) * bs[2] * C49854) / C49723;
    const double C132 =
        (C49846 * std::pow(C49848, 2) * bs[2] * C49929) / C49723 -
        (ae * bs[1] * C49847) / (C49844 * C49723);
    const double C50544 = C50543 / C50538;
    const double C50563 = C50562 / C50538;
    const double C50579 = C50578 / C50538;
    const double C50676 = C50675 / C49723;
    const double C49740 = C49735 * ae;
    const double C50517 = -C50516;
    const double C49815 = C49812 * ae;
    const double C50661 = -C50660;
    const double C49855 = std::pow(C49850, 3);
    const double C49869 = std::pow(C49850, 5);
    const double C49905 = std::pow(C49850, 7);
    const double C49865 = C49860 * C49863;
    const double C49864 = C49860 * C49862;
    const double C49931 = C49861 * C49860;
    const double C49933 = C49860 * C49932;
    const double C49891 = C49883 * C49888;
    const double C49890 = C49883 * C49886;
    const double C49959 = C49883 * C49957;
    const double C49979 = C49884 * C49883;
    const double C50157 = C50156 * C50155;
    const double C299 = (C49845 * C50155 * C50156 * C49929) / C49723;
    const double C300 = (C49845 * C50155 * C50156 * C49854) / C49723 -
                        (ae * bs[1] * C49847) / (C49844 * C49723);
    const double C476 = (C50032 * C50155 * C50156 * C49929) / C49723;
    const double C477 = (C50032 * C50155 * C50156 * C49854) / C49723;
    const double C50545 = -C50544;
    const double C50564 = -C50563;
    const double C50580 = -C50579;
    const double C50677 = -C50676;
    const double C49743 = C49740 / C49723;
    const double C50518 = std::exp(C50517);
    const double C49817 = C49815 / C49723;
    const double C50662 = std::exp(C50661);
    const double C49858 = C49855 * C49857;
    const double C49930 = C49851 * C49855;
    const double C49939 = C49855 * C49938;
    const double C316 = (ae * std::pow(C49848, 2) * bs[2] * C49929 +
                         C49845 * C49855 * C49851 * C49856) /
                        C49727;
    const double C493 = ((zP - zQ) * C49855 * C49851 * C49856) / C49727;
    const double C49875 = C49869 * C49873;
    const double C49874 = C49869 * C49872;
    const double C49948 = C49869 * C49945;
    const double C49958 = C49870 * C49869;
    const double C49915 = C49905 * C49912;
    const double C49914 = C49905 * C49910;
    const double C49981 = C49905 * C49978;
    const double C49868 = ae * C49865;
    const double C49867 = C49846 * C49865;
    const double C50262 = C49845 * C49865;
    const double C494 =
        (C49855 * C49851 * C49856 + C49864 * std::pow(zP - zQ, 2)) / C49727;
    const double C49947 = C49846 * C49931;
    const double C49946 = C49931 * ae;
    const double C50162 = C49931 * C49871;
    const double C50264 = C49931 * C50040;
    const double C50311 = C49845 * C49931;
    const double C50491 = C49931 * C50101;
    const double C50502 = C50032 * C49931;
    const double C49941 = C49846 * C49933;
    const double C50038 = ae * C49933;
    const double C50037 = C49845 * C49933;
    const double C49893 = C49891 * C49871;
    const double C49904 = ae * C49891;
    const double C49903 = C49846 * C49891;
    const double C50365 = C49845 * C49891;
    const double C50407 = C49891 * C50101;
    const double C49892 = C49846 * C49890;
    const double C50081 = C49845 * C49890;
    const double C50111 = C49890 * C50101;
    const double C50143 = C50032 * C49890;
    const double C49963 = C49846 * C49959;
    const double C50082 = C49959 * C50040;
    const double C50117 = ae * C49959;
    const double C50116 = C49845 * C49959;
    const double C50400 = C49959 * C50101;
    const double C49984 = C49979 * C49871;
    const double C49983 = C49846 * C49979;
    const double C49982 = C49979 * ae;
    const double C50368 = C49979 * C50040;
    const double C124 = C50157 * C49871 - (bs[1] * C49847) / C49844;
    const double C285 = C49845 * C49846 * C50157;
    const double C287 = C50157 * C50040 - (bs[1] * C49847) / C49844;
    const double C462 = C50032 * C49846 * C50157;
    const double C464 = C50157 * C50101 - (bs[1] * C49847) / C49844;
    const double C889 = C50032 * C49845 * C50157;
    const double C50546 = std::exp(C50545);
    const double C50565 = std::exp(C50564);
    const double C50581 = std::exp(C50580);
    const double C50678 = std::exp(C50677);
    const double C49745 = C49743 - C49736;
    const double C49734 = C49730 * C50518;
    const double C50519 = C50518 * C50513;
    const double C50523 = C50522 * C50518;
    const double C50793 = C50518 * C50514;
    const double C50790 = C50518 / C49728;
    const double C17176 = C50818 * C50518;
    const double C49819 = C49817 - C49809;
    const double C154 = C50662 * C144;
    const double C152 = C50662 * C131;
    const double C5510 = C50662 * C477;
    const double C49767 = C49766 * C50662;
    const double C117 = -(2 * ae * be * (yA - yB) * C50662) / (ae + be);
    const double C50711 = C50662 * C50709;
    const double C50714 = C50522 * C50662;
    const double C50822 = C50662 * C50710;
    const double C50817 = C50662 / C49728;
    const double C2291 = C50818 * C50662;
    const double C145 = (C49855 * C49851 * C49856 + ae * C49846 * C49858 +
                         C49846 * (ae * C49858 + C49846 * std::pow(C49848, 4) *
                                                     bs[4] * C49856)) /
                        C49727;
    const double C146 =
        (2 * (ae * C49858 + C49846 * C49864) +
         ae * (C49858 + C49865 * std::pow(C49846, 2)) +
         C49846 * (C49864 + ae * C49846 * C49865 +
                   C49846 * (ae * C49865 +
                             C49846 * std::pow(C49850, 5) * bs[5] * C49856))) /
        C49727;
    const double C315 = (ae * (C49846 * C49855 * C49851 * C49929 +
                               bs[2] * std::pow(C49848, 2) * ae) +
                         C49845 * (ae * C49858 + C49846 * C49864)) /
                        C49727;
    const double C492 = ((zP - zQ) * (ae * C49858 + C49846 * C49864)) / C49727;
    const double C133 =
        (std::pow(C49848, 2) * bs[2] * C49854 + C49858 * C49871) / C49723;
    const double C135 =
        (2 * C49846 * C49858 + C49846 * (C49858 + C49865 * C49871)) / C49723;
    const double C298 =
        (C49845 * C49846 * C49858 + C49846 * C50157 * ae) / C49723;
    const double C301 =
        (C50155 * C50156 * C49854 + C49845 * (C49845 * C49858 + C50157 * ae) +
         C49845 * C50157 * ae) /
        C49723;
    const double C473 = (C50032 * (C49858 + C49865 * C49871)) / C49723;
    const double C475 = (C50032 * C49846 * C49858) / C49723;
    const double C478 = (C50155 * C50156 * C49854 + C49858 * C50101) / C49723;
    const double C894 = (C50032 * (C49845 * C49858 + C50157 * ae)) / C49723;
    const double C1857 =
        (2 * C50032 * C49858 + C50032 * (C49858 + C49865 * C50101)) / C49723;
    const double C49942 = C49930 * ae;
    const double C50161 = C49846 * C49930;
    const double C50263 = C49845 * C49930;
    const double C296 = (C49845 * (C49858 + C49865 * C49871) +
                         (C50157 + C49930 * C49871) * ae) /
                        C49723;
    const double C125 =
        2 * C49846 * C50157 + C49846 * (C50157 + C49930 * C49871);
    const double C284 = C49845 * (C50157 + C49930 * C49871);
    const double C461 = C50032 * (C50157 + C49930 * C49871);
    const double C1104 =
        2 * C49845 * C50157 + C49845 * (C50157 + C49930 * C50040);
    const double C1565 = C50032 * (C50157 + C49930 * C50040);
    const double C1849 =
        2 * C50032 * C50157 + C50032 * (C50157 + C49930 * C50101);
    const double C5496 =
        3 * (C50157 + C49930 * C50101) +
        C50032 * (2 * C50032 * C49930 + C50032 * (C49930 + C49931 * C50101));
    const double C317 = (C49855 * C49851 * C49856 + ae * C49845 * C49939 +
                         C49845 * (ae * C49939 + C49845 * C49864)) /
                        C49727;
    const double C904 = ((zP - zQ) * (ae * C49939 + C49845 * C49864)) / C49727;
    const double C134 =
        (C50155 * C50156 * C49929 + C49846 * (C49846 * C49939 + C50157 * ae) +
         C49846 * C50157 * ae) /
        C49723;
    const double C297 = (C49845 * (C49846 * C49939 + C50157 * ae)) / C49723;
    const double C302 = (C50155 * C50156 * C49929 + C49939 * C50040) / C49723;
    const double C474 = (C50032 * (C49846 * C49939 + C50157 * ae)) / C49723;
    const double C479 = (C50155 * C50156 * C49929 + C49939 * C50101) / C49723;
    const double C895 = (C50032 * C49845 * C49939) / C49723;
    const double C1111 =
        (2 * C49845 * C49939 + C49845 * (C49939 + C49933 * C50040)) / C49723;
    const double C1572 = (C50032 * (C49939 + C49933 * C50040)) / C49723;
    const double C1856 =
        (2 * C50032 * C49939 + C50032 * (C49939 + C49933 * C50101)) / C49723;
    const double C5512 = C50662 * C493;
    const double C49877 = C49875 * C49871;
    const double C49882 = ae * C49875;
    const double C49881 = C49846 * C49875;
    const double C50310 = C49845 * C49875;
    const double C50360 = C49875 * C50101;
    const double C50406 = C50032 * C49875;
    const double C5499 =
        (3 * (C49858 + C49865 * C50101) +
         C50032 * (2 * C50032 * C49865 + C50032 * (C49865 + C49875 * C50101))) /
        C49723;
    const double C49876 = C49846 * C49874;
    const double C50039 = C49845 * C49874;
    const double C1116 = (2 * (ae * C49939 + C49845 * C49864) +
                          ae * (C49939 + C49933 * std::pow(C49845, 2)) +
                          C49845 * (C49864 + ae * C49845 * C49933 +
                                    C49845 * (ae * C49933 + C49845 * C49874))) /
                         C49727;
    const double C1230 =
        (ae * C49939 + C49845 * C49864 +
         (ae * C49933 + C49845 * C49874) * std::pow(zP - zQ, 2)) /
        C49727;
    const double C1577 =
        ((zP - zQ) * (C49864 + ae * C49845 * C49933 +
                      C49845 * (ae * C49933 + C49845 * C49874))) /
        C49727;
    const double C1861 = (2 * C50032 * C49864 +
                          C50032 * (C49864 + C49874 * std::pow(C50032, 2))) /
                         C49727;
    const double C5505 =
        (3 * (C49864 + C49874 * C50101) +
         C50032 * (2 * C50032 * C49874 + C50032 * (C49874 + C49890 * C50101))) /
        C49727;
    const double C49950 = C49846 * C49948;
    const double C50042 = C49948 * C50040;
    const double C50080 = ae * C49948;
    const double C50079 = C49845 * C49948;
    const double C50357 = C49948 * C50101;
    const double C50399 = C50032 * C49948;
    const double C5500 =
        (3 * (C49939 + C49933 * C50101) +
         C50032 * (2 * C50032 * C49933 + C50032 * (C49933 + C49948 * C50101))) /
        C49723;
    const double C49962 = C49958 * C49871;
    const double C49961 = C49846 * C49958;
    const double C49960 = C49958 * ae;
    const double C50312 = C49958 * C50040;
    const double C50366 = C49845 * C49958;
    const double C50503 = C49958 * C50101;
    const double C49917 = C49915 * C49871;
    const double C49916 = C49846 * C49914;
    const double C50118 = C49845 * C49914;
    const double C50144 = C49914 * C50101;
    const double C49985 = C49846 * C49981;
    const double C50120 = C49981 * C50040;
    const double C480 = (C49846 * C49858 + C49867 * C50101) / C49723;
    const double C5518 = C50662 * C494;
    const double C49949 = C49947 * ae;
    const double C50167 = 2 * C49947;
    const double C50270 = C49845 * C49947;
    const double C50163 = C49930 + C50162;
    const double C50266 = C49930 + C50264;
    const double C50316 = 2 * C50311;
    const double C50314 = C50311 * ae;
    const double C50492 = C49930 + C50491;
    const double C50504 = 2 * C50502;
    const double C1225 = (C49845 * C49939 + C50037 * C50101) / C49723;
    const double C49895 = C49875 + C49893;
    const double C49911 = 2 * C49903;
    const double C49909 = ae * C49903;
    const double C50296 = C49845 * C49903;
    const double C50354 = C49903 * C50101;
    const double C50409 = C49875 + C50407;
    const double C50112 = C49874 + C50111;
    const double C50145 = 2 * C50143;
    const double C50086 = C49948 + C50082;
    const double C50124 = 2 * C50116;
    const double C50122 = ae * C50116;
    const double C50393 = C50116 * C50101;
    const double C50402 = C49948 + C50400;
    const double C49987 = C49958 + C49984;
    const double C49986 = C49983 * ae;
    const double C50298 = C49983 * C50040;
    const double C50372 = C49958 + C50368;
    const double C50547 = C50546 * C50541;
    const double C50552 = C50551 * C50546;
    const double C50800 = C50546 * C50542;
    const double C50797 = C50546 / C50540;
    const double C1029 = C50805 * C50546;
    const double C50614 = C50565 * C50612;
    const double C50617 = C50551 * C50565;
    const double C50809 = C50565 * C50613;
    const double C50804 = C50565 / C50540;
    const double C280 = C50805 * C50565;
    const double C50642 = C50581 * C50640;
    const double C50645 = C50551 * C50581;
    const double C50813 = C50581 * C50641;
    const double C50806 = C50581 / C50540;
    const double C459 = C50805 * C50581;
    const double C50739 = C50678 * C50737;
    const double C50742 = C50522 * C50678;
    const double C50826 = C50678 * C50738;
    const double C50819 = C50678 / C49728;
    const double C5185 = C50818 * C50678;
    const double C49739 = C49734 / C49727;
    const double C49737 = 2 * C49734;
    const double C50794 = C50519 / C49732;
    const double C50792 = C50519 / C49723;
    const double C50791 = C50519 * C50514;
    const double C17175 = (2 * C50522 * C50519) / C49723;
    const double C50795 = C50523 * C50514;
    const double C109 = C50523 / C50796;
    const double C8028 = C50523 / C49728;
    const double C50831 = C50793 / C49723;
    const double C17174 = (C50518 * std::pow(C50513, 2)) / C49727 + C50790;
    const double C49807 = C49767 / C49727;
    const double C49804 = 2 * C49767;
    const double C2296 =
        ((0 * ae) / C49723 - C49767 / C49727) / C49728 + (0 * ae) / C49723;
    const double C8029 =
        ((C50662 - (C49764 * 2 * C49767) / C49723) * ae) / C49723 -
        C49765 / C49732;
    const double C8030 = (0 * ae) / C49723 - C49767 / C49727;
    const double C17177 =
        (-C49765 / C49723) / C49728 -
        ((C50662 - (C49764 * 2 * C49767) / C49723) * be) / C49723;
    const double C17178 = (-(2 * C49767) / C49723) / C49728 - (0 * be) / C49723;
    const double C155 = C117 * C124;
    const double C153 = C117 * C132;
    const double C151 = C117 * C123;
    const double C334 = C117 * C285;
    const double C511 = C117 * C462;
    const double C5515 = C117 * C464;
    const double C5511 = C117 * C476;
    const double C5509 = C117 * C463;
    const double C6079 = C117 * C889;
    const double C50824 = C50711 / C49732;
    const double C50823 = C50711 * C50710;
    const double C50820 = C50711 / C49723;
    const double C2290 = (2 * C50522 * C50711) / C49723;
    const double C2295 =
        (((C50662 - (C49764 * 2 * C49767) / C49723) * ae) / C49723 -
         C49765 / C49732) /
            C49728 +
        ((C49764 * ((0 * ae) / C49723 - C49767 / C49727) + C50714) * ae) /
            C49723;
    const double C50825 = C50714 * C50710;
    const double C19981 = C50714 / C50796;
    const double C24590 = C50714 / C49728;
    const double C50842 = C50822 / C49723;
    const double C2289 = (C50662 * std::pow(C50709, 2)) / C49727 + C50817;
    const double C158 = C50662 * C145;
    const double C162 = C50662 * C146;
    const double C333 = C50662 * C315;
    const double C8042 = C50714 * C315;
    const double C17190 = C50714 * C315;
    const double C510 = C50662 * C492;
    const double C156 = C50662 * C133;
    const double C160 = C50662 * C135;
    const double C335 = C50662 * C298;
    const double C8038 = C50714 * C298;
    const double C17186 = C50714 * C298;
    const double C508 = C50662 * C473;
    const double C512 = C50662 * C475;
    const double C5516 = C50662 * C478;
    const double C6080 = C50662 * C894;
    const double C13994 = C50714 * C894;
    const double C22096 = C50714 * C894;
    const double C5528 = C50662 * C1857;
    const double C49943 = C49941 + C49942;
    const double C50265 = C50262 + C49942;
    const double C1112 =
        (2 * (C49845 * C49858 + C50157 * ae) +
         C49845 * (C49858 + C49845 * (C49845 * C49865 + C49942) +
                   C49845 * C49930 * ae) +
         (C50157 + C49930 * C50040) * ae) /
        C49723;
    const double C1226 =
        (C49845 * C49858 + C50157 * ae + (C49845 * C49865 + C49942) * C50101) /
        C49723;
    const double C1573 =
        (C50032 * (C49858 + C49845 * (C49845 * C49865 + C49942) +
                   C49845 * C49930 * ae)) /
        C49723;
    const double C303 =
        (C49846 * C49858 + C49845 * (C49845 * C49867 + C50161 * ae) +
         C49845 * C50161 * ae) /
        C49723;
    const double C896 = (C50032 * (C49845 * C49867 + C50161 * ae)) / C49723;
    const double C288 = C49846 * C50157 + C50161 * C50040;
    const double C465 = C49846 * C50157 + C50161 * C50101;
    const double C890 = C50032 * C49845 * C50161;
    const double C1103 =
        2 * C49845 * C50161 + C49845 * (C50161 + C49947 * C50040);
    const double C1564 = C50032 * (C50161 + C49947 * C50040);
    const double C1848 =
        2 * C50032 * C50161 + C50032 * (C50161 + C49947 * C50101);
    const double C1218 = C49845 * C50157 + C50263 * C50101;
    const double C4586 =
        2 * C50032 * C50263 + C50032 * (C50263 + C50311 * C50101);
    const double C331 = C50662 * C296;
    const double C8046 = C50714 * C296;
    const double C17194 = C50714 * C296;
    const double C159 = C117 * C125;
    const double C330 = C117 * C284;
    const double C507 = C117 * C461;
    const double C7010 = C117 * C1565;
    const double C5527 = C117 * C1849;
    const double C7429 = C117 * C5496;
    const double C6082 = C50662 * C904;
    const double C13998 = C50714 * C904;
    const double C22100 = C50714 * C904;
    const double C157 = C117 * C134;
    const double C332 = C117 * C297;
    const double C509 = C117 * C474;
    const double C5517 = C117 * C479;
    const double C6081 = C117 * C895;
    const double C7012 = C117 * C1572;
    const double C5525 = C117 * C1856;
    const double C49879 = C49865 + C49877;
    const double C49894 = C49882 + C49892;
    const double C49887 = 2 * C49881;
    const double C49885 = ae * C49881;
    const double C50269 = C49845 * C49881;
    const double C1855 =
        (2 * C50032 * C49867 + C50032 * (C49867 + C49881 * C50101)) / C49723;
    const double C5501 =
        (3 * (C49867 + C49881 * C50101) +
         C50032 * (2 * C50032 * C49881 + C50032 * (C49881 + C49903 * C50101))) /
        C49723;
    const double C50313 = C50310 + C49946;
    const double C50361 = C49865 + C50360;
    const double C50408 = 2 * C50406;
    const double C7430 = C50662 * C5499;
    const double C49878 = C49868 + C49876;
    const double C50041 = C50038 + C50039;
    const double C6088 = C50662 * C1230;
    const double C14004 = C50714 * C1230;
    const double C22108 = C50714 * C1230;
    const double C7013 = C50662 * C1577;
    const double C14690 = C50714 * C1577;
    const double C22644 = C50714 * C1577;
    const double C36652 = C2291 * C1577;
    const double C5526 = C50662 * C1861;
    const double C7432 = C50662 * C5505;
    const double C49951 = C49950 + C49946;
    const double C50043 = C49933 + C50042;
    const double C50084 = C50080 + C50081;
    const double C50085 = 2 * C50079;
    const double C50083 = ae * C50079;
    const double C4592 =
        (2 * C50032 * C50037 + C50032 * (C50037 + C50079 * C50101)) / C49723;
    const double C6506 =
        (3 * (C50037 + C50079 * C50101) +
         C50032 * (2 * C50032 * C50079 + C50032 * (C50079 + C50116 * C50101))) /
        C49723;
    const double C50358 = C49933 + C50357;
    const double C50401 = 2 * C50399;
    const double C7431 = C117 * C5500;
    const double C49965 = C49931 + C49962;
    const double C49964 = C49961 * ae;
    const double C49980 = 2 * C49961;
    const double C50271 = C49961 * C50040;
    const double C50297 = C49845 * C49961;
    const double C50488 = C49961 * C50101;
    const double C5497 =
        3 * (C50161 + C49947 * C50101) +
        C50032 * (2 * C50032 * C49947 + C50032 * (C49947 + C49961 * C50101));
    const double C49966 = C49963 + C49960;
    const double C50370 = C50365 + C49960;
    const double C50315 = C49931 + C50312;
    const double C50373 = 2 * C50366;
    const double C50371 = C50366 * ae;
    const double C50499 = C50366 * C50101;
    const double C6503 =
        3 * (C50263 + C50311 * C50101) +
        C50032 * (2 * C50032 * C50311 + C50032 * (C50311 + C50366 * C50101));
    const double C50505 = C49931 + C50503;
    const double C49919 = C49891 + C49917;
    const double C49918 = C49904 + C49916;
    const double C50123 = C50117 + C50118;
    const double C50146 = C49890 + C50144;
    const double C49988 = C49985 + C49982;
    const double C50125 = C49959 + C50120;
    const double C514 = C50662 * C480;
    const double C1110 =
        (2 * (C49845 * C49867 + C50161 * ae) +
         C49845 * (C49867 + C49845 * (C49845 * C49881 + C49949) +
                   C49845 * C49947 * ae) +
         (C50161 + C49947 * C50040) * ae) /
        C49723;
    const double C1224 =
        (C49845 * C49867 + C50161 * ae + (C49845 * C49881 + C49949) * C50101) /
        C49723;
    const double C1571 =
        (C50032 * (C49867 + C49845 * (C49845 * C49881 + C49949) +
                   C49845 * C49947 * ae)) /
        C49723;
    const double C1217 = C49845 * C50161 + C50270 * C50101;
    const double C126 = 3 * (C50157 + C49930 * C49871) +
                        C49846 * (2 * C50161 + C49846 * C50163);
    const double C283 = C49845 * (2 * C50161 + C49846 * C50163);
    const double C289 = C50157 + C49930 * C49871 + C50163 * C50040;
    const double C460 = C50032 * (2 * C50161 + C49846 * C50163);
    const double C466 = C50157 + C49930 * C49871 + C50163 * C50101;
    const double C891 = C50032 * C49845 * C50163;
    const double C2499 = 3 * (C50157 + C49930 * C50040) +
                         C49845 * (2 * C50263 + C49845 * C50266);
    const double C2693 = C50157 + C49930 * C50040 + C50266 * C50101;
    const double C3263 = C50032 * (2 * C50263 + C49845 * C50266);
    const double C7420 =
        4 * (2 * C50032 * C49930 + C50032 * C50492) +
        C50032 * (3 * C50492 + C50032 * (2 * C50032 * C49931 +
                                         C50032 * (C49931 + C49958 * C50101)));
    const double C6087 = C117 * C1225;
    const double C49897 = C49846 * C49895;
    const double C49907 = 3 * C49895;
    const double C49902 = ae * C49895;
    const double C50277 = C49845 * C49895;
    const double C49913 = C49890 + C49909;
    const double C50355 = C49881 + C50354;
    const double C50410 = C50032 * C50409;
    const double C7426 =
        (4 * (2 * C50032 * C49874 + C50032 * C50112) +
         C50032 *
             (3 * C50112 + C50032 * (2 * C50032 * C49890 +
                                     C50032 * (C49890 + C49914 * C50101)))) /
        C49727;
    const double C50089 = C49845 * C50086;
    const double C50119 = 3 * C50086;
    const double C50115 = ae * C50086;
    const double C50126 = C49890 + C50122;
    const double C50394 = C50079 + C50393;
    const double C50403 = C50032 * C50402;
    const double C49990 = C49846 * C49987;
    const double C49989 = C49987 * ae;
    const double C50279 = C49987 * C50040;
    const double C50301 = C49961 + C50298;
    const double C50375 = C49845 * C50372;
    const double C50801 = C50547 / C50555;
    const double C50799 = C50547 / C50538;
    const double C50798 = C50547 * C50542;
    const double C1028 = (2 * C50551 * C50547) / C50538;
    const double C50802 = C50552 * C50542;
    const double C116 = C50552 / C50803;
    const double C638 = C50552 / C50540;
    const double C50834 = C50800 / C50538;
    const double C1027 = (C50546 * std::pow(C50541, 2)) / C50550 + C50797;
    const double C50811 = C50614 / C50555;
    const double C50810 = C50614 * C50613;
    const double C50807 = C50614 / C50538;
    const double C279 = (2 * C50551 * C50614) / C50538;
    const double C50812 = C50617 * C50613;
    const double C1099 = C50617 / C50803;
    const double C1331 = C50617 / C50540;
    const double C50836 = C50809 / C50538;
    const double C278 = (C50565 * std::pow(C50612, 2)) / C50550 + C50804;
    const double C50815 = C50642 / C50555;
    const double C50814 = C50642 * C50641;
    const double C50808 = C50642 / C50538;
    const double C458 = (2 * C50551 * C50642) / C50538;
    const double C50816 = C50645 * C50641;
    const double C1845 = C50645 / C50803;
    const double C2092 = C50645 / C50540;
    const double C50839 = C50813 / C50538;
    const double C457 = (C50581 * std::pow(C50640, 2)) / C50550 + C50806;
    const double C50828 = C50739 / C49732;
    const double C50827 = C50739 * C50738;
    const double C50821 = C50739 / C49723;
    const double C5184 = (2 * C50522 * C50739) / C49723;
    const double C50829 = C50742 * C50738;
    const double C39055 = C50742 / C50796;
    const double C44420 = C50742 / C49728;
    const double C50845 = C50826 / C49723;
    const double C5183 = (C50678 * std::pow(C50737, 2)) / C49727 + C50819;
    const double C49742 = C49731 - C49739;
    const double C49741 = C49721 * C49737;
    const double C2298 = (-C49737 / C49723) / C49728 - (0 * be) / C49723;
    const double C19987 = -C49737 / C49723;
    const double C50830 = C50791 / C49727;
    const double C50832 = C50795 / C49723;
    const double C2292 = -C50831;
    const double C49814 = C49811 - C49807;
    const double C49810 = C49764 * C49804;
    const double C36651 = C2296 * C1572;
    const double C36645 = C2296 * C1565;
    const double C8057 = C8029 * C125;
    const double C8047 = C8029 * C134;
    const double C8043 = C8029 * C124;
    const double C8039 = C8029 * C132;
    const double C8035 = C8029 * C123;
    const double C8247 = C8029 * C285;
    const double C8243 = C8029 * C297;
    const double C8239 = C8029 * C284;
    const double C8441 = C8029 * C462;
    const double C8437 = C8029 * C474;
    const double C8433 = C8029 * C461;
    const double C14009 = C8029 * C464;
    const double C14005 = C8029 * C479;
    const double C13995 = C8029 * C476;
    const double C13991 = C8029 * C463;
    const double C14687 = C8029 * C895;
    const double C14683 = C8029 * C889;
    const double C15233 = C8029 * C1225;
    const double C15891 = C8029 * C1572;
    const double C15887 = C8029 * C1565;
    const double C16421 = C8029 * C1856;
    const double C16417 = C8029 * C1849;
    const double C49213 = C8029 * C5500;
    const double C49209 = C8029 * C5496;
    const double C8045 = C8030 * C284;
    const double C8041 = C8030 * C297;
    const double C8037 = C8030 * C285;
    const double C14003 = C8030 * C1225;
    const double C13997 = C8030 * C895;
    const double C13993 = C8030 * C889;
    const double C14689 = C8030 * C1572;
    const double C14685 = C8030 * C1565;
    const double C17205 = C17177 * C125;
    const double C17195 = C17177 * C134;
    const double C17191 = C17177 * C124;
    const double C17187 = C17177 * C132;
    const double C17183 = C17177 * C123;
    const double C17395 = C17177 * C285;
    const double C17391 = C17177 * C297;
    const double C17387 = C17177 * C284;
    const double C17589 = C17177 * C462;
    const double C17585 = C17177 * C474;
    const double C17581 = C17177 * C461;
    const double C22115 = C17177 * C1849;
    const double C22111 = C17177 * C1856;
    const double C22105 = C17177 * C479;
    const double C22101 = C17177 * C464;
    const double C22097 = C17177 * C476;
    const double C22093 = C17177 * C463;
    const double C22649 = C17177 * C1225;
    const double C22641 = C17177 * C895;
    const double C22637 = C17177 * C889;
    const double C23574 = C17177 * C1572;
    const double C23570 = C17177 * C1565;
    const double C23994 = C17177 * C5500;
    const double C23990 = C17177 * C5496;
    const double C17193 = C17178 * C284;
    const double C17189 = C17178 * C297;
    const double C17185 = C17178 * C285;
    const double C22107 = C17178 * C1225;
    const double C22099 = C17178 * C895;
    const double C22095 = C17178 * C889;
    const double C22643 = C17178 * C1572;
    const double C22639 = C17178 * C1565;
    const double C172 = C153 + C154;
    const double C171 = C151 + C152;
    const double C5546 = C5511 + C5512;
    const double C5545 = C5509 + C5510;
    const double C50843 = C50823 / C49727;
    const double C8058 = C50820 * C135;
    const double C8054 = C50820 * C146;
    const double C8048 = C50820 * C145;
    const double C8044 = C50820 * C133;
    const double C8040 = C50820 * C144;
    const double C8036 = C50820 * C131;
    const double C8248 = C50820 * C298;
    const double C8244 = C50820 * C315;
    const double C8240 = C50820 * C296;
    const double C8444 = C50820 * C480;
    const double C8442 = C50820 * C475;
    const double C8438 = C50820 * C492;
    const double C8434 = C50820 * C473;
    const double C14010 = C50820 * C478;
    const double C14006 = C50820 * C494;
    const double C13996 = C50820 * C493;
    const double C13992 = C50820 * C477;
    const double C14688 = C50820 * C904;
    const double C14684 = C50820 * C894;
    const double C15234 = C50820 * C1230;
    const double C15892 = C50820 * C1577;
    const double C16422 = C50820 * C1861;
    const double C16418 = C50820 * C1857;
    const double C49214 = C50820 * C5505;
    const double C49210 = C50820 * C5499;
    const double C2294 =
        (((0 - (C49764 * C49765) / C49723) * ae) / C49723 - (0 * be) / C49732) /
            C49728 +
        ((C49764 * (((C50662 - (C49764 * 2 * C49767) / C49723) * ae) / C49723 -
                    C49765 / C49732) +
          C50820) *
         ae) /
            C49723 +
        (0 * ae) / C49723 - C49767 / C49727;
    const double C2321 = C2290 * C296;
    const double C2309 = C2290 * C315;
    const double C2303 = C2290 * C298;
    const double C36656 = C2290 * C1230;
    const double C36650 = C2290 * C904;
    const double C36644 = C2290 * C894;
    const double C37172 = C2290 * C1577;
    const double C2320 = C2295 * C284;
    const double C2308 = C2295 * C297;
    const double C2302 = C2295 * C285;
    const double C36655 = C2295 * C1225;
    const double C36649 = C2295 * C895;
    const double C36643 = C2295 * C889;
    const double C37171 = C2295 * C1572;
    const double C37165 = C2295 * C1565;
    const double C50844 = C50825 / C49723;
    const double C31226 = C24590 * C1577;
    const double C17172 = -C50842;
    const double C2331 = C2289 * C146;
    const double C2325 = C2289 * C135;
    const double C2323 = C2289 * C133;
    const double C2317 = C2289 * C145;
    const double C2307 = C2289 * C144;
    const double C2301 = C2289 * C131;
    const double C2523 = C2289 * C298;
    const double C2517 = C2289 * C315;
    const double C2719 = C2289 * C480;
    const double C2717 = C2289 * C475;
    const double C2711 = C2289 * C492;
    const double C2889 = C2289 * C296;
    const double C3053 = C2289 * C473;
    const double C36664 = C2289 * C478;
    const double C36658 = C2289 * C494;
    const double C36648 = C2289 * C493;
    const double C36642 = C2289 * C477;
    const double C37170 = C2289 * C904;
    const double C37164 = C2289 * C894;
    const double C37578 = C2289 * C1230;
    const double C38082 = C2289 * C1577;
    const double C38490 = C2289 * C1861;
    const double C38484 = C2289 * C1857;
    const double C173 = C155 + C156;
    const double C353 = C334 + C335;
    const double C530 = C511 + C512;
    const double C5547 = C5515 + C5516;
    const double C6103 = C6079 + C6080;
    const double C136 =
        (2 * (C49846 * C49939 + C50157 * ae) +
         C49846 * (C49939 + C49846 * C49943 + C49846 * C49930 * ae) +
         (C50157 + C49930 * C49871) * ae) /
        C49723;
    const double C295 =
        (C49845 * (C49939 + C49846 * C49943 + C50161 * ae)) / C49723;
    const double C304 =
        (C49846 * C49939 + C50157 * ae + C49943 * C50040) / C49723;
    const double C472 =
        (C50032 * (C49939 + C49846 * C49943 + C50161 * ae)) / C49723;
    const double C481 =
        (C49846 * C49939 + C50157 * ae + C49943 * C50101) / C49723;
    const double C897 = (C50032 * C49845 * C49943) / C49723;
    const double C2502 =
        (3 * (C49858 + C49845 * C50265 + C50263 * ae) +
         C49845 * (2 * C50265 +
                   C49845 * (C49865 + C49845 * (C49845 * C49875 + C49946) +
                             C49845 * C49931 * ae) +
                   C50266 * ae) +
         (2 * C50263 + C49845 * C50266) * ae) /
        C49723;
    const double C2696 =
        (C49858 + C49845 * C50265 + C50263 * ae +
         (C49865 + C49845 * (C49845 * C49875 + C49946) + C49845 * C49931 * ae) *
             C50101) /
        C49723;
    const double C3266 =
        (C50032 * (2 * C50265 +
                   C49845 * (C49865 + C49845 * (C49845 * C49875 + C49946) +
                             C49845 * C49931 * ae) +
                   C50266 * ae)) /
        C49723;
    const double C6086 = C50662 * C1226;
    const double C14008 = C50714 * C1226;
    const double C15230 = C50820 * C1226;
    const double C22104 = C50714 * C1226;
    const double C36662 = C2290 * C1226;
    const double C37572 = C2289 * C1226;
    const double C7011 = C50662 * C1573;
    const double C14686 = C50714 * C1573;
    const double C15888 = C50820 * C1573;
    const double C22640 = C50714 * C1573;
    const double C31220 = C24590 * C1573;
    const double C36646 = C2291 * C1573;
    const double C37166 = C2290 * C1573;
    const double C38076 = C2289 * C1573;
    const double C337 = C50662 * C303;
    const double C2305 = C2291 * C303;
    const double C2525 = C2289 * C303;
    const double C2521 = C2290 * C303;
    const double C8250 = C50820 * C303;
    const double C8246 = C50714 * C303;
    const double C17394 = C50714 * C303;
    const double C24604 = C24590 * C303;
    const double C911 = C50662 * C896;
    const double C2715 = C2290 * C896;
    const double C3277 = C2289 * C896;
    const double C8440 = C50714 * C896;
    const double C8990 = C50820 * C896;
    const double C17588 = C50714 * C896;
    const double C336 = C117 * C288;
    const double C2304 = C2296 * C288;
    const double C2520 = C2295 * C288;
    const double C8249 = C8029 * C288;
    const double C8245 = C8030 * C288;
    const double C17397 = C17177 * C288;
    const double C17393 = C17178 * C288;
    const double C513 = C117 * C465;
    const double C8443 = C8029 * C465;
    const double C17591 = C17177 * C465;
    const double C910 = C117 * C890;
    const double C2714 = C2295 * C890;
    const double C8439 = C8030 * C890;
    const double C8989 = C8029 * C890;
    const double C17587 = C17178 * C890;
    const double C18137 = C17177 * C890;
    const double C2526 = C2295 * C1103;
    const double C2518 = C2296 * C1103;
    const double C8251 = C8030 * C1103;
    const double C17399 = C17178 * C1103;
    const double C2712 = C2296 * C1564;
    const double C3278 = C2295 * C1564;
    const double C5337 = C117 * C1564;
    const double C8991 = C8030 * C1564;
    const double C13785 = C8029 * C1564;
    const double C18139 = C17178 * C1564;
    const double C27633 = C17177 * C1564;
    const double C5523 = C117 * C1848;
    const double C14015 = C8029 * C1848;
    const double C22117 = C17177 * C1848;
    const double C6085 = C117 * C1218;
    const double C14007 = C8030 * C1218;
    const double C15229 = C8029 * C1218;
    const double C22103 = C17178 * C1218;
    const double C22645 = C17177 * C1218;
    const double C36661 = C2295 * C1218;
    const double C6511 = C117 * C4586;
    const double C16419 = C8030 * C4586;
    const double C22113 = C17178 * C4586;
    const double C23067 = C17177 * C4586;
    const double C38485 = C2295 * C4586;
    const double C48302 = C8029 * C4586;
    const double C175 = C159 + C160;
    const double C351 = C330 + C331;
    const double C528 = C507 + C508;
    const double C5552 = C5527 + C5528;
    const double C174 = C157 + C158;
    const double C352 = C332 + C333;
    const double C529 = C509 + C510;
    const double C5548 = C5517 + C5518;
    const double C6104 = C6081 + C6082;
    const double C138 = (3 * (C49858 + C49865 * C49871) +
                         C49846 * (2 * C49867 + C49846 * C49879)) /
                        C49723;
    const double C294 = (C49845 * (2 * C49867 + C49846 * C49879) +
                         (2 * C50161 + C49846 * C50163) * ae) /
                        C49723;
    const double C305 =
        (C49858 + C49865 * C49871 + C49845 * (C49845 * C49879 + C50163 * ae) +
         C49845 * C50163 * ae) /
        C49723;
    const double C471 = (C50032 * (2 * C49867 + C49846 * C49879)) / C49723;
    const double C482 = (C49858 + C49865 * C49871 + C49879 * C50101) / C49723;
    const double C898 = (C50032 * (C49845 * C49879 + C50163 * ae)) / C49723;
    const double C1853 =
        (2 * C50032 * C49879 + C50032 * (C49879 + C49895 * C50101)) / C49723;
    const double C49896 = C49846 * C49894;
    const double C49901 = 2 * C49894;
    const double C50047 = C49845 * C49894;
    const double C49889 = C49874 + C49885;
    const double C50272 = C50269 + C49949;
    const double C5524 = C50662 * C1855;
    const double C14016 = C50820 * C1855;
    const double C5530 = C50662 * C5501;
    const double C50317 = C49845 * C50313;
    const double C50364 = 2 * C50313;
    const double C4594 =
        (2 * C50032 * C50265 + C50032 * (C50265 + C50313 * C50101)) / C49723;
    const double C6507 =
        (3 * (C50265 + C50313 * C50101) +
         C50032 * (2 * C50032 * C50313 +
                   C50032 * (C50313 + (C49845 * C49891 + C49960) * C50101))) /
        C49723;
    const double C7424 =
        (4 * (2 * C50032 * C49865 + C50032 * C50361) +
         C50032 *
             (3 * C50361 + C50032 * (2 * C50032 * C49875 +
                                     C50032 * (C49875 + C49891 * C50101)))) /
        C49723;
    const double C7436 = C7429 + C7430;
    const double C147 =
        (3 * (C49864 + ae * C49867 + C49846 * C49878) +
         ae * (2 * C49867 + C49846 * C49879) +
         C49846 *
             (2 * C49878 + ae * C49879 +
              C49846 * (C49874 + ae * C49846 * C49875 +
                        C49846 * (ae * C49875 + C49846 * std::pow(C49848, 6) *
                                                    bs[6] * C49856)))) /
        C49727;
    const double C314 = (ae * (C49855 * C49851 * C49929 +
                               C49846 * (C49846 * C49933 + C49930 * ae) +
                               C49846 * C49930 * ae) +
                         C49845 * (C49864 + ae * C49867 + C49846 * C49878)) /
                        C49727;
    const double C318 = (ae * C49858 + C49846 * C49864 + ae * C49845 * C49943 +
                         C49845 * (ae * C49943 + C49845 * C49878)) /
                        C49727;
    const double C491 =
        ((zP - zQ) * (C49864 + ae * C49867 + C49846 * C49878)) / C49727;
    const double C495 =
        (ae * C49858 + C49846 * C49864 + C49878 * std::pow(zP - zQ, 2)) /
        C49727;
    const double C905 = ((zP - zQ) * (ae * C49943 + C49845 * C49878)) / C49727;
    const double C1860 = (2 * C50032 * C49878 +
                          C50032 * (C49878 + C49894 * std::pow(C50032, 2))) /
                         C49727;
    const double C2702 = (C49864 + ae * C50037 + C49845 * C50041 +
                          (C49874 + ae * C49845 * C49948 +
                           C49845 * (ae * C49948 + C49845 * C49890)) *
                              std::pow(C50032, 2)) /
                         C49727;
    const double C7023 = C7012 + C7013;
    const double C5551 = C5525 + C5526;
    const double C49952 = C49846 * C49951;
    const double C49956 = 2 * C49951;
    const double C50046 = ae * C49951;
    const double C50045 = C49845 * C49951;
    const double C1115 = (2 * (ae * C49943 + C49845 * C49878) +
                          ae * (C49943 + C49951 * std::pow(C49845, 2)) +
                          C49845 * (C49878 + ae * C49845 * C49951 +
                                    C49845 * (ae * C49951 + C49845 * C49894))) /
                         C49727;
    const double C1229 =
        (ae * C49943 + C49845 * C49878 +
         (ae * C49951 + C49845 * C49894) * std::pow(zP - zQ, 2)) /
        C49727;
    const double C1576 =
        ((zP - zQ) * (C49878 + ae * C49845 * C49951 +
                      C49845 * (ae * C49951 + C49845 * C49894))) /
        C49727;
    const double C1109 =
        (2 * C49845 * C49943 + C49845 * (C49943 + C49951 * C50040)) / C49723;
    const double C1570 = (C50032 * (C49943 + C49951 * C50040)) / C49723;
    const double C1854 =
        (2 * C50032 * C49943 + C50032 * (C49943 + C49951 * C50101)) / C49723;
    const double C2508 =
        (3 * (C49864 + ae * C50037 + C49845 * C50041) +
         ae * (2 * C50037 + C49845 * C50043) +
         C49845 * (2 * C50041 + ae * C50043 +
                   C49845 * (C49874 + ae * C49845 * C49948 +
                             C49845 * (ae * C49948 + C49845 * C49890)))) /
        C49727;
    const double C3272 =
        (C50032 * (2 * C50041 + ae * C50043 +
                   C49845 * (C49874 + ae * C49845 * C49948 +
                             C49845 * (ae * C49948 + C49845 * C49890)))) /
        C49727;
    const double C2503 = (3 * (C49939 + C49933 * C50040) +
                          C49845 * (2 * C50037 + C49845 * C50043)) /
                         C49723;
    const double C2697 = (C49939 + C49933 * C50040 + C50043 * C50101) / C49723;
    const double C3267 = (C50032 * (2 * C50037 + C49845 * C50043)) / C49723;
    const double C4591 =
        (2 * C50032 * C50043 + C50032 * (C50043 + C50086 * C50101)) / C49723;
    const double C50088 = C49845 * C50084;
    const double C50114 = 2 * C50084;
    const double C4598 = (2 * C50032 * C50041 +
                          C50032 * (C50041 + C50084 * std::pow(C50032, 2))) /
                         C49727;
    const double C6509 =
        (3 * (C50041 + C50084 * C50101) +
         C50032 *
             (2 * C50032 * C50084 +
              C50032 * (C50084 + (ae * C49959 + C49845 * C49914) * C50101))) /
        C49727;
    const double C50087 = C49874 + C50083;
    const double C6513 = C117 * C4592;
    const double C16423 = C8030 * C4592;
    const double C22109 = C17178 * C4592;
    const double C23071 = C17177 * C4592;
    const double C38491 = C2295 * C4592;
    const double C48306 = C8029 * C4592;
    const double C23996 = C17178 * C6506;
    const double C39881 = C117 * C6506;
    const double C49215 = C8030 * C6506;
    const double C7423 =
        (4 * (2 * C50032 * C49933 + C50032 * C50358) +
         C50032 *
             (3 * C50358 + C50032 * (2 * C50032 * C49948 +
                                     C50032 * (C49948 + C49959 * C50101)))) /
        C49723;
    const double C7437 = C7431 + C7432;
    const double C49967 = C49965 * ae;
    const double C50168 = C49846 * C49965;
    const double C50171 = 3 * C49965;
    const double C50278 = C49845 * C49965;
    const double C1102 =
        2 * C49845 * C50163 + C49845 * (C50163 + C49965 * C50040);
    const double C1563 = C50032 * (C50163 + C49965 * C50040);
    const double C1847 =
        2 * C50032 * C50163 + C50032 * (C50163 + C49965 * C50101);
    const double C5498 =
        3 * (C50163 + C49965 * C50101) +
        C50032 * (2 * C50032 * C49965 + C50032 * (C49965 + C49987 * C50101));
    const double C50299 = C50296 + C49964;
    const double C50273 = C49947 + C50271;
    const double C50302 = 2 * C50297;
    const double C50300 = C50297 * ae;
    const double C4584 =
        2 * C50032 * C50270 + C50032 * (C50270 + C50297 * C50101);
    const double C6502 =
        3 * (C50270 + C50297 * C50101) +
        C50032 * (2 * C50032 * C50297 +
                  C50032 * (C50297 + C49845 * C49983 * C50101));
    const double C50489 = C49947 + C50488;
    const double C5529 = C117 * C5497;
    const double C49968 = C49846 * C49966;
    const double C49977 = 2 * C49966;
    const double C50048 = C49966 * C50040;
    const double C50066 = ae * C49966;
    const double C50065 = C49845 * C49966;
    const double C50351 = C49966 * C50101;
    const double C5502 =
        (3 * (C49943 + C49951 * C50101) +
         C50032 * (2 * C50032 * C49951 + C50032 * (C49951 + C49966 * C50101))) /
        C49723;
    const double C50374 = C49845 * C50370;
    const double C50396 = C50370 * C50101;
    const double C50318 = C49845 * C50315;
    const double C50369 = 3 * C50315;
    const double C50367 = C50315 * ae;
    const double C4585 =
        2 * C50032 * C50266 + C50032 * (C50266 + C50315 * C50101);
    const double C23062 =
        3 * (C50266 + C50315 * C50101) +
        C50032 * (2 * C50032 * C50315 + C50032 * (C50315 + C50372 * C50101));
    const double C50500 = C50311 + C50499;
    const double C23992 = C17178 * C6503;
    const double C39879 = C117 * C6503;
    const double C49211 = C8030 * C6503;
    const double C50506 = C50032 * C50505;
    const double C49921 = C49846 * C49919;
    const double C5504 =
        (3 * (C49879 + C49895 * C50101) +
         C50032 * (2 * C50032 * C49895 + C50032 * (C49895 + C49919 * C50101))) /
        C49723;
    const double C49920 = C49846 * C49918;
    const double C50067 = C49845 * C49918;
    const double C50108 = C49918 * C50101;
    const double C5506 =
        (3 * (C49878 + C49894 * C50101) +
         C50032 * (2 * C50032 * C49894 + C50032 * (C49894 + C49918 * C50101))) /
        C49727;
    const double C50127 = C49845 * C50123;
    const double C50140 = C50123 * C50101;
    const double C50147 = C50032 * C50146;
    const double C49991 = C49846 * C49988;
    const double C50068 = C49988 * C50040;
    const double C50128 = C49845 * C50125;
    const double C23063 =
        (3 * (C50043 + C50086 * C50101) +
         C50032 * (2 * C50032 * C50086 + C50032 * (C50086 + C50125 * C50101))) /
        C49723;
    const double C2527 = C2290 * C1110;
    const double C2519 = C2291 * C1110;
    const double C8252 = C50714 * C1110;
    const double C17400 = C50714 * C1110;
    const double C24806 = C24590 * C1110;
    const double C2721 = C2290 * C1224;
    const double C5336 = C50662 * C1224;
    const double C8446 = C50714 * C1224;
    const double C14694 = C50820 * C1224;
    const double C17594 = C50714 * C1224;
    const double C2713 = C2291 * C1571;
    const double C3279 = C2290 * C1571;
    const double C5338 = C50662 * C1571;
    const double C8992 = C50714 * C1571;
    const double C13786 = C50820 * C1571;
    const double C18140 = C50714 * C1571;
    const double C24988 = C24590 * C1571;
    const double C2720 = C2295 * C1217;
    const double C5335 = C117 * C1217;
    const double C8445 = C8030 * C1217;
    const double C14693 = C8029 * C1217;
    const double C17593 = C17178 * C1217;
    const double C22653 = C17177 * C1217;
    const double C165 = C117 * C126;
    const double C8059 = C8029 * C126;
    const double C17207 = C17177 * C126;
    const double C326 = C117 * C283;
    const double C2326 = C2295 * C283;
    const double C8055 = C8030 * C283;
    const double C8623 = C8029 * C283;
    const double C17203 = C17178 * C283;
    const double C17771 = C17177 * C283;
    const double C340 = C117 * C289;
    const double C2318 = C2296 * C289;
    const double C2890 = C2295 * C289;
    const double C8257 = C8029 * C289;
    const double C8237 = C8030 * C289;
    const double C17405 = C17177 * C289;
    const double C17385 = C17178 * C289;
    const double C503 = C117 * C460;
    const double C8783 = C8029 * C460;
    const double C17931 = C17177 * C460;
    const double C517 = C117 * C466;
    const double C8451 = C8029 * C466;
    const double C17599 = C17177 * C466;
    const double C914 = C117 * C891;
    const double C3054 = C2295 * C891;
    const double C8431 = C8030 * C891;
    const double C8997 = C8029 * C891;
    const double C17579 = C17178 * C891;
    const double C18145 = C17177 * C891;
    const double C7016 = C117 * C2693;
    const double C15231 = C8030 * C2693;
    const double C22647 = C17178 * C2693;
    const double C23578 = C17177 * C2693;
    const double C36659 = C2296 * C2693;
    const double C37573 = C2295 * C2693;
    const double C48805 = C8029 * C2693;
    const double C15889 = C8030 * C3263;
    const double C23572 = C17178 * C3263;
    const double C37167 = C2296 * C3263;
    const double C38077 = C2295 * C3263;
    const double C40495 = C117 * C7420;
    const double C6106 = C6087 + C6088;
    const double C49899 = C49887 + C49897;
    const double C7422 =
        (4 * (2 * C50032 * C49881 + C50032 * C50355) +
         C50032 * (3 * C50355 +
                   C50032 * (2 * C50032 * C49903 +
                             C50032 * (C49903 + C49846 * C49915 * C50101)))) /
        C49723;
    const double C50411 = C50408 + C50410;
    const double C40498 = C50662 * C7426;
    const double C50091 = C50085 + C50089;
    const double C23984 =
        (4 * (2 * C50032 * C50079 + C50032 * C50394) +
         C50032 * (3 * C50394 +
                   C50032 * (2 * C50032 * C50116 +
                             C50032 * (C50116 + C49845 * C49981 * C50101)))) /
        C49723;
    const double C50404 = C50401 + C50403;
    const double C49992 = C49980 + C49990;
    const double C50281 = C49965 + C50279;
    const double C50304 = C49845 * C50301;
    const double C50377 = C50373 + C50375;
    const double C50833 = C50798 / C50550;
    const double C50835 = C50802 / C50538;
    const double C281 = -C50834;
    const double C50837 = C50810 / C50550;
    const double C50838 = C50812 / C50538;
    const double C1025 = -C50836;
    const double C50840 = C50814 / C50550;
    const double C50841 = C50816 / C50538;
    const double C1676 = -C50839;
    const double C50846 = C50827 / C49727;
    const double C50847 = C50829 / C49723;
    const double C33658 = -C50845;
    const double C121 =
        (C49742 / C49728 - (0 * be) / C49723) / C49728 + (0 * ae) / C49723;
    const double C8033 = C49742 / C49728 - (0 * be) / C49723;
    const double C17181 = C49742 / C49728 + (0 * ae) / C49723;
    const double C49744 = C49741 / C49723;
    const double C50848 = C50790 - C50830;
    const double C50849 = C50794 - C50832;
    const double C19986 =
        (C49814 / C49728 - (0 * be) / C49723) / C49728 + (0 * ae) / C49723;
    const double C24595 = C49814 / C49728 - (0 * be) / C49723;
    const double C49813 = C49810 / C49723;
    const double C36670 = C36651 + C36652;
    const double C8072 = C8045 + C8046;
    const double C8070 = C8041 + C8042;
    const double C8068 = C8037 + C8038;
    const double C14027 = C14003 + C14004;
    const double C14026 = C13997 + C13998;
    const double C14024 = C13993 + C13994;
    const double C14706 = C14689 + C14690;
    const double C17220 = C17193 + C17194;
    const double C17218 = C17189 + C17190;
    const double C17216 = C17185 + C17186;
    const double C22134 = C22107 + C22108;
    const double C22130 = C22099 + C22100;
    const double C22128 = C22095 + C22096;
    const double C22664 = C22643 + C22644;
    const double C5559 = C5546 * C2292;
    const double C33954 = C5546 * C17174;
    const double C39254 = C5546 * C50518;
    const double C44715 = C5546 * C50792;
    const double C39253 = C5545 * C19987;
    const double C50856 = C50817 - C50843;
    const double C8078 = C8057 + C8058;
    const double C8073 = C8047 + C8048;
    const double C8071 = C8043 + C8044;
    const double C8069 = C8039 + C8040;
    const double C8067 = C8035 + C8036;
    const double C8272 = C8247 + C8248;
    const double C8270 = C8243 + C8244;
    const double C8268 = C8239 + C8240;
    const double C8466 = C8441 + C8442;
    const double C8464 = C8437 + C8438;
    const double C8462 = C8433 + C8434;
    const double C14030 = C14009 + C14010;
    const double C14028 = C14005 + C14006;
    const double C14025 = C13995 + C13996;
    const double C14023 = C13991 + C13992;
    const double C14705 = C14687 + C14688;
    const double C14703 = C14683 + C14684;
    const double C15239 = C15233 + C15234;
    const double C15897 = C15891 + C15892;
    const double C16427 = C16421 + C16422;
    const double C16425 = C16417 + C16418;
    const double C49221 = C49213 + C49214;
    const double C49219 = C49209 + C49210;
    const double C2324 = C2294 * C125;
    const double C2322 = C2294 * C124;
    const double C2316 = C2294 * C134;
    const double C2306 = C2294 * C132;
    const double C2300 = C2294 * C123;
    const double C2524 = C2294 * C288;
    const double C2522 = C2294 * C285;
    const double C2516 = C2294 * C297;
    const double C2718 = C2294 * C465;
    const double C2716 = C2294 * C462;
    const double C2710 = C2294 * C474;
    const double C2888 = C2294 * C284;
    const double C3052 = C2294 * C461;
    const double C3276 = C2294 * C890;
    const double C36663 = C2294 * C464;
    const double C36657 = C2294 * C479;
    const double C36647 = C2294 * C476;
    const double C36641 = C2294 * C463;
    const double C37169 = C2294 * C895;
    const double C37163 = C2294 * C889;
    const double C37577 = C2294 * C1225;
    const double C37571 = C2294 * C1218;
    const double C38081 = C2294 * C1572;
    const double C38075 = C2294 * C1565;
    const double C38489 = C2294 * C1856;
    const double C38483 = C2294 * C1849;
    const double C2346 = C2320 + C2321;
    const double C2340 = C2308 + C2309;
    const double C2337 = C2302 + C2303;
    const double C36672 = C36655 + C36656;
    const double C36669 = C36649 + C36650;
    const double C36666 = C36643 + C36644;
    const double C37179 = C37171 + C37172;
    const double C50857 = C50824 - C50844;
    const double C17206 = C17172 * C135;
    const double C17202 = C17172 * C146;
    const double C17196 = C17172 * C145;
    const double C17192 = C17172 * C133;
    const double C17188 = C17172 * C144;
    const double C17184 = C17172 * C131;
    const double C17398 = C17172 * C303;
    const double C17396 = C17172 * C298;
    const double C17392 = C17172 * C315;
    const double C17388 = C17172 * C296;
    const double C17592 = C17172 * C480;
    const double C17590 = C17172 * C475;
    const double C17586 = C17172 * C492;
    const double C17582 = C17172 * C473;
    const double C18138 = C17172 * C896;
    const double C22118 = C17172 * C1855;
    const double C22116 = C17172 * C1857;
    const double C22112 = C17172 * C1861;
    const double C22106 = C17172 * C494;
    const double C22102 = C17172 * C478;
    const double C22098 = C17172 * C493;
    const double C22094 = C17172 * C477;
    const double C22654 = C17172 * C1224;
    const double C22650 = C17172 * C1230;
    const double C22646 = C17172 * C1226;
    const double C22642 = C17172 * C904;
    const double C22638 = C17172 * C894;
    const double C23575 = C17172 * C1577;
    const double C23571 = C17172 * C1573;
    const double C23995 = C17172 * C5505;
    const double C23991 = C17172 * C5499;
    const double C27634 = C17172 * C1571;
    const double C5513 = C530 * C2298;
    const double C39261 = C530 * C19987;
    const double C44716 = C530 * C49742;
    const double C39255 = C5547 * C19987;
    const double C39605 = C6103 * C19987;
    const double C161 = C117 * C136;
    const double C2330 = C2294 * C136;
    const double C8053 = C8029 * C136;
    const double C17201 = C17177 * C136;
    const double C328 = C117 * C295;
    const double C2314 = C2295 * C295;
    const double C2894 = C2294 * C295;
    const double C8049 = C8030 * C295;
    const double C8235 = C8029 * C295;
    const double C17197 = C17178 * C295;
    const double C17383 = C17177 * C295;
    const double C338 = C117 * C304;
    const double C2310 = C2296 * C304;
    const double C2530 = C2294 * C304;
    const double C2514 = C2295 * C304;
    const double C8253 = C8029 * C304;
    const double C8241 = C8030 * C304;
    const double C17401 = C17177 * C304;
    const double C17389 = C17178 * C304;
    const double C505 = C117 * C472;
    const double C3058 = C2294 * C472;
    const double C8429 = C8029 * C472;
    const double C17577 = C17177 * C472;
    const double C515 = C117 * C481;
    const double C2724 = C2294 * C481;
    const double C8447 = C8029 * C481;
    const double C17595 = C17177 * C481;
    const double C912 = C117 * C897;
    const double C2708 = C2295 * C897;
    const double C3282 = C2294 * C897;
    const double C8435 = C8030 * C897;
    const double C8993 = C8029 * C897;
    const double C17583 = C17178 * C897;
    const double C18141 = C17177 * C897;
    const double C7017 = C50662 * C2696;
    const double C15232 = C50714 * C2696;
    const double C22648 = C50714 * C2696;
    const double C23579 = C17172 * C2696;
    const double C31234 = C24590 * C2696;
    const double C36660 = C2291 * C2696;
    const double C37574 = C2290 * C2696;
    const double C48806 = C50820 * C2696;
    const double C15890 = C50714 * C3266;
    const double C23573 = C50714 * C3266;
    const double C31742 = C24590 * C3266;
    const double C37168 = C2291 * C3266;
    const double C38078 = C2290 * C3266;
    const double C7022 = C7010 + C7011;
    const double C14704 = C14685 + C14686;
    const double C15895 = C15887 + C15888;
    const double C22662 = C22639 + C22640;
    const double C36667 = C36645 + C36646;
    const double C37176 = C37165 + C37166;
    const double C354 = C336 + C337;
    const double C2338 = C2304 + C2305;
    const double C2540 = C2520 + C2521;
    const double C8273 = C8249 + C8250;
    const double C8271 = C8245 + C8246;
    const double C17419 = C17393 + C17394;
    const double C531 = C513 + C514;
    const double C8467 = C8443 + C8444;
    const double C922 = C910 + C911;
    const double C2734 = C2714 + C2715;
    const double C8465 = C8439 + C8440;
    const double C9005 = C8989 + C8990;
    const double C17613 = C17587 + C17588;
    const double C6105 = C6085 + C6086;
    const double C14029 = C14007 + C14008;
    const double C15237 = C15229 + C15230;
    const double C22132 = C22103 + C22104;
    const double C36675 = C36661 + C36662;
    const double C5535 = C528 * C2298;
    const double C39469 = C528 * C19987;
    const double C44728 = C528 * C49742;
    const double C39257 = C5552 * C19987;
    const double C5534 = C529 * C2292;
    const double C5514 = C529 * C50523;
    const double C33966 = C529 * C17174;
    const double C33956 = C529 * C17175;
    const double C39262 = C529 * C50518;
    const double C44727 = C529 * C50792;
    const double C44717 = C529 * C50523;
    const double C5561 = C5548 * C2292;
    const double C33963 = C5548 * C17174;
    const double C39256 = C5548 * C50518;
    const double C44719 = C5548 * C50792;
    const double C6110 = C6104 * C2292;
    const double C34470 = C6104 * C17174;
    const double C39606 = C6104 * C50518;
    const double C45239 = C6104 * C50792;
    const double C166 = C50662 * C138;
    const double C8060 = C50820 * C138;
    const double C17208 = C17172 * C138;
    const double C327 = C50662 * C294;
    const double C2327 = C2290 * C294;
    const double C8056 = C50714 * C294;
    const double C8624 = C50820 * C294;
    const double C17204 = C50714 * C294;
    const double C17772 = C17172 * C294;
    const double C341 = C50662 * C305;
    const double C2319 = C2291 * C305;
    const double C2891 = C2290 * C305;
    const double C8258 = C50820 * C305;
    const double C8238 = C50714 * C305;
    const double C17406 = C17172 * C305;
    const double C17386 = C50714 * C305;
    const double C24618 = C24590 * C305;
    const double C504 = C50662 * C471;
    const double C8784 = C50820 * C471;
    const double C17932 = C17172 * C471;
    const double C518 = C50662 * C482;
    const double C8452 = C50820 * C482;
    const double C17600 = C17172 * C482;
    const double C915 = C50662 * C898;
    const double C3055 = C2290 * C898;
    const double C8432 = C50714 * C898;
    const double C8998 = C50820 * C898;
    const double C17580 = C50714 * C898;
    const double C18146 = C17172 * C898;
    const double C5542 = C50662 * C1853;
    const double C49908 = C49901 + C49902;
    const double C49898 = C49889 + C49896;
    const double C2698 =
        (C49867 + C49845 * C50272 + C50270 * ae +
         (C49881 + C49845 * (C49845 * C49903 + C49964) + C49845 * C49961 * ae) *
             C50101) /
        C49723;
    const double C5550 = C5523 + C5524;
    const double C14031 = C14015 + C14016;
    const double C50319 = C49865 + C50317;
    const double C6512 = C50662 * C4594;
    const double C16420 = C50714 * C4594;
    const double C22114 = C50714 * C4594;
    const double C23068 = C17172 * C4594;
    const double C38486 = C2290 * C4594;
    const double C48303 = C50820 * C4594;
    const double C23993 = C50714 * C6507;
    const double C39880 = C50662 * C6507;
    const double C49212 = C50714 * C6507;
    const double C40496 = C50662 * C7424;
    const double C39260 = C7436 * C19987;
    const double C164 = C50662 * C147;
    const double C8064 = C50820 * C147;
    const double C17212 = C17172 * C147;
    const double C329 = C50662 * C314;
    const double C2315 = C2290 * C314;
    const double C2895 = C2289 * C314;
    const double C8050 = C50714 * C314;
    const double C8236 = C50820 * C314;
    const double C17198 = C50714 * C314;
    const double C17384 = C17172 * C314;
    const double C339 = C50662 * C318;
    const double C2311 = C2291 * C318;
    const double C2531 = C2289 * C318;
    const double C2515 = C2290 * C318;
    const double C8254 = C50820 * C318;
    const double C8242 = C50714 * C318;
    const double C17402 = C17172 * C318;
    const double C17390 = C50714 * C318;
    const double C24610 = C24590 * C318;
    const double C506 = C50662 * C491;
    const double C3059 = C2289 * C491;
    const double C8430 = C50820 * C491;
    const double C17578 = C17172 * C491;
    const double C516 = C50662 * C495;
    const double C2725 = C2289 * C495;
    const double C8448 = C50820 * C495;
    const double C17596 = C17172 * C495;
    const double C913 = C50662 * C905;
    const double C2709 = C2290 * C905;
    const double C3283 = C2289 * C905;
    const double C8436 = C50714 * C905;
    const double C8994 = C50820 * C905;
    const double C17584 = C50714 * C905;
    const double C18142 = C17172 * C905;
    const double C5522 = C50662 * C1860;
    const double C14020 = C50820 * C1860;
    const double C22122 = C17172 * C1860;
    const double C7019 = C50662 * C2702;
    const double C15236 = C50714 * C2702;
    const double C22652 = C50714 * C2702;
    const double C23583 = C17172 * C2702;
    const double C31228 = C24590 * C2702;
    const double C36654 = C2291 * C2702;
    const double C37580 = C2290 * C2702;
    const double C48810 = C50820 * C2702;
    const double C7027 = C7023 * C2292;
    const double C35364 = C7023 * C17174;
    const double C40216 = C7023 * C50518;
    const double C46138 = C7023 * C50792;
    const double C5564 = C5551 * C2292;
    const double C35760 = C5551 * C17174;
    const double C39258 = C5551 * C50518;
    const double C44724 = C5551 * C50792;
    const double C49953 = C49933 + C49952;
    const double C50049 = C50046 + C50047;
    const double C1223 = (C49845 * C49943 + C50045 * C50101) / C49723;
    const double C2533 = C2290 * C1115;
    const double C2513 = C2291 * C1115;
    const double C8256 = C50714 * C1115;
    const double C17404 = C50714 * C1115;
    const double C24800 = C24590 * C1115;
    const double C2727 = C2290 * C1229;
    const double C5334 = C50662 * C1229;
    const double C8450 = C50714 * C1229;
    const double C14698 = C50820 * C1229;
    const double C17598 = C50714 * C1229;
    const double C22658 = C17172 * C1229;
    const double C2707 = C2291 * C1576;
    const double C3285 = C2290 * C1576;
    const double C5340 = C50662 * C1576;
    const double C8996 = C50714 * C1576;
    const double C13790 = C50820 * C1576;
    const double C18144 = C50714 * C1576;
    const double C24982 = C24590 * C1576;
    const double C27638 = C17172 * C1576;
    const double C2532 = C2295 * C1109;
    const double C2512 = C2296 * C1109;
    const double C8255 = C8030 * C1109;
    const double C17403 = C17178 * C1109;
    const double C2706 = C2296 * C1570;
    const double C3284 = C2295 * C1570;
    const double C5339 = C117 * C1570;
    const double C8995 = C8030 * C1570;
    const double C13789 = C8029 * C1570;
    const double C18143 = C17178 * C1570;
    const double C27637 = C17177 * C1570;
    const double C5521 = C117 * C1854;
    const double C14019 = C8029 * C1854;
    const double C22121 = C17177 * C1854;
    const double C15894 = C50714 * C3272;
    const double C23577 = C50714 * C3272;
    const double C31748 = C24590 * C3272;
    const double C37174 = C2291 * C3272;
    const double C38084 = C2290 * C3272;
    const double C7018 = C117 * C2697;
    const double C15235 = C8030 * C2697;
    const double C22651 = C17178 * C2697;
    const double C23582 = C17177 * C2697;
    const double C36653 = C2296 * C2697;
    const double C37579 = C2295 * C2697;
    const double C48809 = C8029 * C2697;
    const double C15893 = C8030 * C3267;
    const double C23576 = C17178 * C3267;
    const double C37173 = C2296 * C3267;
    const double C38083 = C2295 * C3267;
    const double C23073 = C17178 * C4591;
    const double C38493 = C2296 * C4591;
    const double C40221 = C117 * C4591;
    const double C48308 = C8030 * C4591;
    const double C50121 = C50114 + C50115;
    const double C6514 = C50662 * C4598;
    const double C16424 = C50714 * C4598;
    const double C22110 = C50714 * C4598;
    const double C23072 = C17172 * C4598;
    const double C38492 = C2290 * C4598;
    const double C48307 = C50820 * C4598;
    const double C23997 = C50714 * C6509;
    const double C39882 = C50662 * C6509;
    const double C49216 = C50714 * C6509;
    const double C50090 = C50087 + C50088;
    const double C40497 = C117 * C7423;
    const double C7440 = C7437 * C2292;
    const double C39259 = C7437 * C50518;
    const double C46537 = C7437 * C50792;
    const double C50280 = C50277 + C49967;
    const double C1108 =
        (2 * (C49845 * C49879 + C50163 * ae) +
         C49845 * (C49879 + C49845 * (C49845 * C49895 + C49967) +
                   C49845 * C49965 * ae) +
         (C50163 + C49965 * C50040) * ae) /
        C49723;
    const double C1222 =
        (C49845 * C49879 + C50163 * ae + (C49845 * C49895 + C49967) * C50101) /
        C49723;
    const double C1569 =
        (C50032 * (C49879 + C49845 * (C49845 * C49895 + C49967) +
                   C49845 * C49965 * ae)) /
        C49723;
    const double C50169 = C50167 + C50168;
    const double C1216 = C49845 * C50163 + C50278 * C50101;
    const double C6074 =
        2 * C50032 * C50278 + C50032 * (C50278 + C49845 * C49987 * C50101);
    const double C2892 = C2296 * C1102;
    const double C8259 = C8030 * C1102;
    const double C17407 = C17178 * C1102;
    const double C3056 = C2296 * C1563;
    const double C8999 = C8030 * C1563;
    const double C11011 = C117 * C1563;
    const double C18147 = C17178 * C1563;
    const double C5541 = C117 * C1847;
    const double C50303 = C49845 * C50299;
    const double C4590 =
        (2 * C50032 * C50272 + C50032 * (C50272 + C50299 * C50101)) / C49723;
    const double C6505 =
        (3 * (C50272 + C50299 * C50101) +
         C50032 * (2 * C50032 * C50299 +
                   C50032 * (C50299 +
                             (C49845 * C49846 * C49915 + C49986) * C50101))) /
        C49723;
    const double C2504 =
        (3 * (C49867 + C49845 * C50272 + C50270 * ae) +
         C49845 * (2 * C50272 +
                   C49845 * (C49881 + C49845 * (C49845 * C49903 + C49964) +
                             C49845 * C49961 * ae) +
                   C50273 * ae) +
         (2 * C50270 + C49845 * C50273) * ae) /
        C49723;
    const double C3268 =
        (C50032 * (2 * C50272 +
                   C49845 * (C49881 + C49845 * (C49845 * C49903 + C49964) +
                             C49845 * C49961 * ae) +
                   C50273 * ae)) /
        C49723;
    const double C2500 = 3 * (C50161 + C49947 * C50040) +
                         C49845 * (2 * C50270 + C49845 * C50273);
    const double C2694 = C50161 + C49947 * C50040 + C50273 * C50101;
    const double C3264 = C50032 * (2 * C50270 + C49845 * C50273);
    const double C4583 =
        2 * C50032 * C50273 + C50032 * (C50273 + C50301 * C50101);
    const double C6091 = C117 * C4584;
    const double C14017 = C8030 * C4584;
    const double C22119 = C17178 * C4584;
    const double C7419 =
        4 * (2 * C50032 * C49947 + C50032 * C50489) +
        C50032 * (3 * C50489 + C50032 * (2 * C50032 * C49961 +
                                         C50032 * (C49961 + C49983 * C50101)));
    const double C5553 = C5529 + C5530;
    const double C49969 = C49948 + C49968;
    const double C50050 = C49951 + C50048;
    const double C50071 = 2 * C50065;
    const double C50069 = ae * C50065;
    const double C4588 =
        (2 * C50032 * C50045 + C50032 * (C50045 + C50065 * C50101)) / C49723;
    const double C6504 =
        (3 * (C50045 + C50065 * C50101) +
         C50032 * (2 * C50032 * C50065 +
                   C50032 * (C50065 + C49845 * C49988 * C50101))) /
        C49723;
    const double C50352 = C49951 + C50351;
    const double C5531 = C117 * C5502;
    const double C50376 = C49875 + C50374;
    const double C50397 = C50313 + C50396;
    const double C50320 = C50316 + C50318;
    const double C23069 = C17178 * C4585;
    const double C38487 = C2296 * C4585;
    const double C40219 = C117 * C4585;
    const double C48304 = C8030 * C4585;
    const double C23983 =
        4 * (2 * C50032 * C50311 + C50032 * C50500) +
        C50032 * (3 * C50500 +
                  C50032 * (2 * C50032 * C50366 +
                            C50032 * (C50366 + C49845 * C49979 * C50101)));
    const double C50507 = C50504 + C50506;
    const double C49923 = C49911 + C49921;
    const double C49922 = C49913 + C49920;
    const double C50070 = C50066 + C50067;
    const double C50109 = C49894 + C50108;
    const double C5532 = C50662 * C5506;
    const double C50129 = C50126 + C50127;
    const double C50141 = C50084 + C50140;
    const double C50148 = C50145 + C50147;
    const double C49993 = C49959 + C49991;
    const double C50072 = C49966 + C50068;
    const double C50130 = C50124 + C50128;
    const double C2543 = C2526 + C2527;
    const double C2539 = C2518 + C2519;
    const double C8274 = C8251 + C8252;
    const double C17422 = C17399 + C17400;
    const double C2733 = C2712 + C2713;
    const double C3289 = C3278 + C3279;
    const double C5347 = C5337 + C5338;
    const double C9006 = C8991 + C8992;
    const double C13793 = C13785 + C13786;
    const double C18154 = C18139 + C18140;
    const double C2737 = C2720 + C2721;
    const double C5346 = C5335 + C5336;
    const double C8468 = C8445 + C8446;
    const double C14707 = C14693 + C14694;
    const double C17616 = C17593 + C17594;
    const double C6112 = C6106 * C2292;
    const double C34872 = C6106 * C17174;
    const double C39608 = C6106 * C50518;
    const double C45243 = C6106 * C50792;
    const double C139 = (4 * (2 * C49867 + C49846 * C49879) +
                         C49846 * (3 * C49879 + C49846 * C49899)) /
                        C49723;
    const double C484 =
        (2 * C49867 + C49846 * C49879 + C49899 * C50101) / C49723;
    const double C486 = (C50032 * (3 * C49879 + C49846 * C49899)) / C49723;
    const double C40490 =
        (5 * (3 * C50361 + C50032 * C50411) +
         C50032 * (4 * C50411 +
                   C50032 * (3 * C50409 +
                             C50032 * (2 * C50032 * C49891 +
                                       C50032 * (C49891 + C49915 * C50101))))) /
        C49723;
    const double C3541 = (4 * (2 * C50037 + C49845 * C50043) +
                          C49845 * (3 * C50043 + C49845 * C50091)) /
                         C49723;
    const double C3695 =
        (2 * C50037 + C49845 * C50043 + C50091 * C50101) / C49723;
    const double C4189 = (C50032 * (3 * C50043 + C49845 * C50091)) / C49723;
    const double C40489 =
        (5 * (3 * C50358 + C50032 * C50404) +
         C50032 * (4 * C50404 +
                   C50032 * (3 * C50402 +
                             C50032 * (2 * C50032 * C49959 +
                                       C50032 * (C49959 + C49981 * C50101))))) /
        C49723;
    const double C49994 = C49992 * ae;
    const double C50172 = C49846 * C49992;
    const double C2501 = 3 * (C50163 + C49965 * C50040) +
                         C49845 * (2 * C50278 + C49845 * C50281);
    const double C2695 = C50163 + C49965 * C50040 + C50281 * C50101;
    const double C3265 = C50032 * (2 * C50278 + C49845 * C50281);
    const double C50306 = C50302 + C50304;
    const double C50379 = C49845 * C50377;
    const double C50850 = C50797 - C50833;
    const double C50851 = C50801 - C50835;
    const double C50852 = C50804 - C50837;
    const double C50853 = C50811 - C50838;
    const double C50854 = C50806 - C50840;
    const double C50855 = C50815 - C50841;
    const double C50858 = C50819 - C50846;
    const double C50859 = C50828 - C50847;
    const double C11167 = C528 * C8033;
    const double C33957 = C528 * C17181;
    const double C49746 = C50518 - C49744;
    const double C11176 = C529 * C50848;
    const double C11173 = C5548 * C50848;
    const double C11164 = C5546 * C50848;
    const double C11680 = C6104 * C50848;
    const double C12082 = C6106 * C50848;
    const double C12574 = C7023 * C50848;
    const double C12970 = C5551 * C50848;
    const double C106 = (C50848 * C50513) / C49723 + (C50792 - C50831) / C49728;
    const double C11166 = C529 * C50849;
    const double C107 =
        (C50849 * C50513) / C49723 + (2 * C50523 + C50848) / C49728;
    const double C108 = (C50513 * C50523) / C49732 + C50849 / C49728;
    const double C24617 = C24595 * C289;
    const double C24609 = C24595 * C304;
    const double C24603 = C24595 * C288;
    const double C24805 = C24595 * C1103;
    const double C24799 = C24595 * C1109;
    const double C24987 = C24595 * C1564;
    const double C24981 = C24595 * C1570;
    const double C25167 = C24595 * C1102;
    const double C25331 = C24595 * C1563;
    const double C31233 = C24595 * C2693;
    const double C31227 = C24595 * C2697;
    const double C31225 = C24595 * C1572;
    const double C31219 = C24595 * C1565;
    const double C31747 = C24595 * C3267;
    const double C31741 = C24595 * C3263;
    const double C33067 = C24595 * C4591;
    const double C33061 = C24595 * C4585;
    const double C49816 = C50662 - C49813;
    const double C24630 = C50856 * C146;
    const double C24624 = C50856 * C135;
    const double C24622 = C50856 * C133;
    const double C24616 = C50856 * C145;
    const double C24606 = C50856 * C144;
    const double C24600 = C50856 * C131;
    const double C24818 = C50856 * C318;
    const double C24812 = C50856 * C303;
    const double C24810 = C50856 * C298;
    const double C24804 = C50856 * C315;
    const double C25000 = C50856 * C495;
    const double C24994 = C50856 * C480;
    const double C24992 = C50856 * C475;
    const double C24986 = C50856 * C492;
    const double C25170 = C50856 * C314;
    const double C25164 = C50856 * C296;
    const double C25334 = C50856 * C491;
    const double C25328 = C50856 * C473;
    const double C25546 = C50856 * C905;
    const double C25540 = C50856 * C896;
    const double C31238 = C50856 * C478;
    const double C31232 = C50856 * C494;
    const double C31222 = C50856 * C493;
    const double C31216 = C50856 * C477;
    const double C31744 = C50856 * C904;
    const double C31738 = C50856 * C894;
    const double C32152 = C50856 * C1230;
    const double C32146 = C50856 * C1226;
    const double C32656 = C50856 * C1577;
    const double C32650 = C50856 * C1573;
    const double C33064 = C50856 * C1861;
    const double C33058 = C50856 * C1857;
    const double C19978 =
        (C50856 * C50709) / C49723 + (C50820 - C50842) / C49728;
    const double C8083 = C8071 + C8072;
    const double C47419 = C14028 + C14027;
    const double C2348 = C2324 + C2325;
    const double C2347 = C2322 + C2323;
    const double C2344 = C2316 + C2317;
    const double C2339 = C2306 + C2307;
    const double C2336 = C2300 + C2301;
    const double C2542 = C2524 + C2525;
    const double C2541 = C2522 + C2523;
    const double C2538 = C2516 + C2517;
    const double C2736 = C2718 + C2719;
    const double C2735 = C2716 + C2717;
    const double C2732 = C2710 + C2711;
    const double C2900 = C2888 + C2889;
    const double C3064 = C3052 + C3053;
    const double C3288 = C3276 + C3277;
    const double C36676 = C36663 + C36664;
    const double C36673 = C36657 + C36658;
    const double C36668 = C36647 + C36648;
    const double C36665 = C36641 + C36642;
    const double C37178 = C37169 + C37170;
    const double C37175 = C37163 + C37164;
    const double C37586 = C37577 + C37578;
    const double C37583 = C37571 + C37572;
    const double C38090 = C38081 + C38082;
    const double C38087 = C38075 + C38076;
    const double C38498 = C38489 + C38490;
    const double C38495 = C38483 + C38484;
    const double C24626 = C50857 * C294;
    const double C24620 = C50857 * C296;
    const double C24614 = C50857 * C314;
    const double C24608 = C50857 * C315;
    const double C24602 = C50857 * C298;
    const double C24820 = C50857 * C1115;
    const double C24814 = C50857 * C1110;
    const double C24808 = C50857 * C303;
    const double C24802 = C50857 * C318;
    const double C25002 = C50857 * C1229;
    const double C24996 = C50857 * C1224;
    const double C24990 = C50857 * C896;
    const double C24984 = C50857 * C905;
    const double C25166 = C50857 * C305;
    const double C25330 = C50857 * C898;
    const double C25548 = C50857 * C1576;
    const double C25542 = C50857 * C1571;
    const double C31236 = C50857 * C1226;
    const double C31230 = C50857 * C1230;
    const double C31224 = C50857 * C904;
    const double C31218 = C50857 * C894;
    const double C31746 = C50857 * C1577;
    const double C31740 = C50857 * C1573;
    const double C32154 = C50857 * C2702;
    const double C32148 = C50857 * C2696;
    const double C32658 = C50857 * C3272;
    const double C32652 = C50857 * C3266;
    const double C33066 = C50857 * C4598;
    const double C33060 = C50857 * C4594;
    const double C19979 =
        (C50857 * C50709) / C49723 + (2 * C50714 + C50856) / C49728;
    const double C19980 = (C50709 * C50714) / C49732 + C50857 / C49728;
    const double C17226 = C17205 + C17206;
    const double C17221 = C17195 + C17196;
    const double C17219 = C17191 + C17192;
    const double C17217 = C17187 + C17188;
    const double C17215 = C17183 + C17184;
    const double C17421 = C17397 + C17398;
    const double C17420 = C17395 + C17396;
    const double C17418 = C17391 + C17392;
    const double C17416 = C17387 + C17388;
    const double C17615 = C17591 + C17592;
    const double C17614 = C17589 + C17590;
    const double C17612 = C17585 + C17586;
    const double C17610 = C17581 + C17582;
    const double C18153 = C18137 + C18138;
    const double C22139 = C22117 + C22118;
    const double C22138 = C22115 + C22116;
    const double C22136 = C22111 + C22112;
    const double C22133 = C22105 + C22106;
    const double C22131 = C22101 + C22102;
    const double C22129 = C22097 + C22098;
    const double C22127 = C22093 + C22094;
    const double C22669 = C22653 + C22654;
    const double C22667 = C22649 + C22650;
    const double C22665 = C22645 + C22646;
    const double C22663 = C22641 + C22642;
    const double C22661 = C22637 + C22638;
    const double C23588 = C23574 + C23575;
    const double C23586 = C23570 + C23571;
    const double C24002 = C23994 + C23995;
    const double C24000 = C23990 + C23991;
    const double C27641 = C27633 + C27634;
    const double C176 = C161 + C162;
    const double C2351 = C2330 + C2331;
    const double C8076 = C8053 + C8054;
    const double C17224 = C17201 + C17202;
    const double C7024 = C7016 + C7017;
    const double C15238 = C15231 + C15232;
    const double C22666 = C22647 + C22648;
    const double C23590 = C23578 + C23579;
    const double C36674 = C36659 + C36660;
    const double C37584 = C37573 + C37574;
    const double C48813 = C48805 + C48806;
    const double C15896 = C15889 + C15890;
    const double C23587 = C23572 + C23573;
    const double C37177 = C37167 + C37168;
    const double C38088 = C38077 + C38078;
    const double C40215 = C7022 * C19987;
    const double C5519 = C531 * C2298;
    const double C39263 = C531 * C19987;
    const double C44720 = C531 * C49742;
    const double C6083 = C922 * C2298;
    const double C39611 = C922 * C19987;
    const double C45240 = C922 * C49742;
    const double C14012 = C8465 + C8466;
    const double C13999 = C8466 + C8465;
    const double C39607 = C6105 * C19987;
    const double C47418 = C14030 + C14029;
    const double C39269 = C39255 + C39256;
    const double C178 = C165 + C166;
    const double C8079 = C8059 + C8060;
    const double C17227 = C17207 + C17208;
    const double C349 = C326 + C327;
    const double C2349 = C2326 + C2327;
    const double C8077 = C8055 + C8056;
    const double C8631 = C8623 + C8624;
    const double C17225 = C17203 + C17204;
    const double C17779 = C17771 + C17772;
    const double C356 = C340 + C341;
    const double C2345 = C2318 + C2319;
    const double C2901 = C2890 + C2891;
    const double C8277 = C8257 + C8258;
    const double C8267 = C8237 + C8238;
    const double C17425 = C17405 + C17406;
    const double C17415 = C17385 + C17386;
    const double C526 = C503 + C504;
    const double C8791 = C8783 + C8784;
    const double C17939 = C17931 + C17932;
    const double C533 = C517 + C518;
    const double C8471 = C8451 + C8452;
    const double C17619 = C17599 + C17600;
    const double C924 = C914 + C915;
    const double C3065 = C3054 + C3055;
    const double C8461 = C8431 + C8432;
    const double C9009 = C8997 + C8998;
    const double C17609 = C17579 + C17580;
    const double C18157 = C18145 + C18146;
    const double C148 =
        (4 * (2 * C49878 + ae * C49879 + C49846 * C49898) +
         ae * (3 * C49879 + C49846 * C49899) +
         C49846 * (3 * C49898 + ae * C49899 +
                   C49846 * (2 * C49894 + ae * C49895 +
                             C49846 * (C49890 + ae * C49846 * C49891 +
                                       C49846 * (ae * C49891 +
                                                 C49846 * std::pow(C49850, 7) *
                                                     bs[7] * C49856))))) /
        C49727;
    const double C313 =
        (ae * (2 * (C49846 * C49933 + C49930 * ae) +
               C49846 *
                   (C49933 +
                    C49846 * (C49846 * C49869 * C49870 * C49929 + C49931 * ae) +
                    C49846 * C49931 * ae) +
               (C49930 + C49931 * C49871) * ae) +
         C49845 * (2 * C49878 + ae * C49879 + C49846 * C49898)) /
        C49727;
    const double C490 =
        ((zP - zQ) * (2 * C49878 + ae * C49879 + C49846 * C49898)) / C49727;
    const double C496 = (C49864 + ae * C49867 + C49846 * C49878 +
                         C49898 * std::pow(zP - zQ, 2)) /
                        C49727;
    const double C2723 = C2291 * C2698;
    const double C5342 = C50662 * C2698;
    const double C14696 = C50714 * C2698;
    const double C22656 = C50714 * C2698;
    const double C24998 = C24590 * C2698;
    const double C5563 = C5550 * C2298;
    const double C39265 = C5550 * C19987;
    const double C44723 = C5550 * C49742;
    const double C50321 = C50319 + C50314;
    const double C6518 = C6511 + C6512;
    const double C16426 = C16419 + C16420;
    const double C22137 = C22113 + C22114;
    const double C23077 = C23067 + C23068;
    const double C38496 = C38485 + C38486;
    const double C48312 = C48302 + C48303;
    const double C24001 = C23992 + C23993;
    const double C39885 = C39879 + C39880;
    const double C49220 = C49211 + C49212;
    const double C40499 = C40495 + C40496;
    const double C350 = C328 + C329;
    const double C2343 = C2314 + C2315;
    const double C2903 = C2894 + C2895;
    const double C8074 = C8049 + C8050;
    const double C8266 = C8235 + C8236;
    const double C17222 = C17197 + C17198;
    const double C17414 = C17383 + C17384;
    const double C355 = C338 + C339;
    const double C2341 = C2310 + C2311;
    const double C2545 = C2530 + C2531;
    const double C2537 = C2514 + C2515;
    const double C8275 = C8253 + C8254;
    const double C8269 = C8241 + C8242;
    const double C17423 = C17401 + C17402;
    const double C17417 = C17389 + C17390;
    const double C527 = C505 + C506;
    const double C3067 = C3058 + C3059;
    const double C8460 = C8429 + C8430;
    const double C17608 = C17577 + C17578;
    const double C532 = C515 + C516;
    const double C2739 = C2724 + C2725;
    const double C8469 = C8447 + C8448;
    const double C17617 = C17595 + C17596;
    const double C923 = C912 + C913;
    const double C2731 = C2708 + C2709;
    const double C3291 = C3282 + C3283;
    const double C8463 = C8435 + C8436;
    const double C9007 = C8993 + C8994;
    const double C17611 = C17583 + C17584;
    const double C18155 = C18141 + C18142;
    const double C39270 = C39257 + C39258;
    const double C40494 = C39258 + C39257;
    const double C49954 = C49953 + C49949;
    const double C2703 = (C49878 + ae * C50045 + C49845 * C50049 +
                          (C49894 + ae * C49845 * C49966 +
                           C49845 * (ae * C49966 + C49845 * C49918)) *
                              std::pow(C50032, 2)) /
                         C49727;
    const double C2726 = C2295 * C1223;
    const double C5333 = C117 * C1223;
    const double C8449 = C8030 * C1223;
    const double C14697 = C8029 * C1223;
    const double C17597 = C17178 * C1223;
    const double C22657 = C17177 * C1223;
    const double C2546 = C2532 + C2533;
    const double C2536 = C2512 + C2513;
    const double C8276 = C8255 + C8256;
    const double C17424 = C17403 + C17404;
    const double C2730 = C2706 + C2707;
    const double C3292 = C3284 + C3285;
    const double C5348 = C5339 + C5340;
    const double C9008 = C8995 + C8996;
    const double C13795 = C13789 + C13790;
    const double C18156 = C18143 + C18144;
    const double C27643 = C27637 + C27638;
    const double C5549 = C5521 + C5522;
    const double C14033 = C14019 + C14020;
    const double C22141 = C22121 + C22122;
    const double C7025 = C7018 + C7019;
    const double C15240 = C15235 + C15236;
    const double C22668 = C22651 + C22652;
    const double C23592 = C23582 + C23583;
    const double C36671 = C36653 + C36654;
    const double C37587 = C37579 + C37580;
    const double C48815 = C48809 + C48810;
    const double C15898 = C15893 + C15894;
    const double C23589 = C23576 + C23577;
    const double C37180 = C37173 + C37174;
    const double C38091 = C38083 + C38084;
    const double C6519 = C6513 + C6514;
    const double C16428 = C16423 + C16424;
    const double C22135 = C22109 + C22110;
    const double C23079 = C23071 + C23072;
    const double C38499 = C38491 + C38492;
    const double C48314 = C48306 + C48307;
    const double C24003 = C23996 + C23997;
    const double C39886 = C39881 + C39882;
    const double C49222 = C49215 + C49216;
    const double C3544 =
        (4 * (2 * C50041 + ae * C50043 + C49845 * C50090) +
         ae * (3 * C50043 + C49845 * C50091) +
         C49845 *
             (3 * C50090 + ae * C50091 +
              C49845 * (2 * C50084 + ae * C50086 +
                        C49845 * (C49890 + ae * C49845 * C49959 +
                                  C49845 * (ae * C49959 + C49845 * C49914))))) /
        C49727;
    const double C3698 =
        (2 * C50041 + ae * C50043 + C49845 * C50090 +
         (2 * C50084 + ae * C50086 +
          C49845 * (C49890 + ae * C49845 * C49959 +
                    C49845 * (ae * C49959 + C49845 * C49914))) *
             std::pow(C50032, 2)) /
        C49727;
    const double C4192 =
        (C50032 *
         (3 * C50090 + ae * C50091 +
          C49845 * (2 * C50084 + ae * C50086 +
                    C49845 * (C49890 + ae * C49845 * C49959 +
                              C49845 * (ae * C49959 + C49845 * C49914))))) /
        C49727;
    const double C4597 =
        (2 * C50032 * C50090 +
         C50032 * (C50090 + (C49890 + ae * C49845 * C49959 +
                             C49845 * (ae * C49959 + C49845 * C49914)) *
                                std::pow(C50032, 2))) /
        C49727;
    const double C40500 = C40497 + C40498;
    const double C40493 = C39259 + C39260;
    const double C2507 =
        (3 * (C49879 + C49845 * C50280 + C50278 * ae) +
         C49845 * (2 * C50280 +
                   C49845 * (C49895 + C49845 * (C49845 * C49919 + C49989) +
                             C49845 * C49987 * ae) +
                   C50281 * ae) +
         (2 * C50278 + C49845 * C50281) * ae) /
        C49723;
    const double C2701 =
        (C49879 + C49845 * C50280 + C50278 * ae +
         (C49895 + C49845 * (C49845 * C49919 + C49989) + C49845 * C49987 * ae) *
             C50101) /
        C49723;
    const double C3271 =
        (C50032 * (2 * C50280 +
                   C49845 * (C49895 + C49845 * (C49845 * C49919 + C49989) +
                             C49845 * C49987 * ae) +
                   C50281 * ae)) /
        C49723;
    const double C6076 =
        (2 * C50032 * C50280 +
         C50032 * (C50280 + (C49845 * C49919 + C49989) * C50101)) /
        C49723;
    const double C2893 = C2291 * C1108;
    const double C8260 = C50714 * C1108;
    const double C17408 = C50714 * C1108;
    const double C25168 = C24590 * C1108;
    const double C5722 = C50662 * C1222;
    const double C8454 = C50714 * C1222;
    const double C17602 = C50714 * C1222;
    const double C3057 = C2291 * C1569;
    const double C9000 = C50714 * C1569;
    const double C11012 = C50662 * C1569;
    const double C18148 = C50714 * C1569;
    const double C25332 = C24590 * C1569;
    const double C307 =
        (2 * C49867 + C49846 * C49879 +
         C49845 * (C49845 * C49899 + C50169 * ae) + C49845 * C50169 * ae) /
        C49723;
    const double C309 = (C49845 * (3 * C49879 + C49846 * C49899) +
                         (3 * C50163 + C49846 * C50169) * ae) /
                        C49723;
    const double C900 = (C50032 * (C49845 * C49899 + C50169 * ae)) / C49723;
    const double C127 = 4 * (2 * C50161 + C49846 * C50163) +
                        C49846 * (3 * C50163 + C49846 * C50169);
    const double C290 = 2 * C50161 + C49846 * C50163 + C50169 * C50040;
    const double C291 = C49845 * (3 * C50163 + C49846 * C50169);
    const double C467 = 2 * C50161 + C49846 * C50163 + C50169 * C50101;
    const double C468 = C50032 * (3 * C50163 + C49846 * C50169);
    const double C892 = C50032 * C49845 * C50169;
    const double C1101 =
        2 * C49845 * C50169 + C49845 * (C50169 + C49992 * C50040);
    const double C1215 = C49845 * C50169 + C49845 * C49992 * C50101;
    const double C1562 = C50032 * (C50169 + C49992 * C50040);
    const double C1846 =
        2 * C50032 * C50169 + C50032 * (C50169 + C49992 * C50101);
    const double C5721 = C117 * C1216;
    const double C8453 = C8030 * C1216;
    const double C17601 = C17178 * C1216;
    const double C5555 = C5541 + C5542;
    const double C50305 = C49881 + C50303;
    const double C6092 = C50662 * C4590;
    const double C14018 = C50714 * C4590;
    const double C22120 = C50714 * C4590;
    const double C2529 = C2291 * C2504;
    const double C24816 = C24590 * C2504;
    const double C3281 = C2291 * C3268;
    const double C13788 = C50714 * C3268;
    const double C25544 = C24590 * C3268;
    const double C27636 = C50714 * C3268;
    const double C2528 = C2296 * C2500;
    const double C24815 = C24595 * C2500;
    const double C2722 = C2296 * C2694;
    const double C5341 = C117 * C2694;
    const double C14695 = C8030 * C2694;
    const double C22655 = C17178 * C2694;
    const double C24997 = C24595 * C2694;
    const double C3280 = C2296 * C3264;
    const double C13787 = C8030 * C3264;
    const double C25543 = C24595 * C3264;
    const double C27635 = C17178 * C3264;
    const double C7433 = C5553 * C2298;
    const double C39267 = C5553 * C19987;
    const double C46538 = C5553 * C49742;
    const double C49970 = C49969 + C49964;
    const double C2509 =
        (3 * (C49878 + ae * C50045 + C49845 * C50049) +
         ae * (2 * C50045 + C49845 * C50050) +
         C49845 * (2 * C50049 + ae * C50050 +
                   C49845 * (C49894 + ae * C49845 * C49966 +
                             C49845 * (ae * C49966 + C49845 * C49918)))) /
        C49727;
    const double C3273 =
        (C50032 * (2 * C50049 + ae * C50050 +
                   C49845 * (C49894 + ae * C49845 * C49966 +
                             C49845 * (ae * C49966 + C49845 * C49918)))) /
        C49727;
    const double C2505 = (3 * (C49943 + C49951 * C50040) +
                          C49845 * (2 * C50045 + C49845 * C50050)) /
                         C49723;
    const double C2699 = (C49943 + C49951 * C50040 + C50050 * C50101) / C49723;
    const double C3269 = (C50032 * (2 * C50045 + C49845 * C50050)) / C49723;
    const double C50073 = C49894 + C50069;
    const double C6093 = C117 * C4588;
    const double C14021 = C8030 * C4588;
    const double C22123 = C17178 * C4588;
    const double C7421 =
        (4 * (2 * C50032 * C49951 + C50032 * C50352) +
         C50032 *
             (3 * C50352 + C50032 * (2 * C50032 * C49966 +
                                     C50032 * (C49966 + C49988 * C50101)))) /
        C49723;
    const double C50378 = C50376 + C50371;
    const double C23985 =
        (4 * (2 * C50032 * C50313 + C50032 * C50397) +
         C50032 * (3 * C50397 +
                   C50032 * (2 * C50032 * C50370 +
                             C50032 * (C50370 +
                                       (C49845 * C49915 + C49982) * C50101)))) /
        C49723;
    const double C3538 = 4 * (2 * C50263 + C49845 * C50266) +
                         C49845 * (3 * C50266 + C49845 * C50320);
    const double C3692 = 2 * C50263 + C49845 * C50266 + C50320 * C50101;
    const double C4186 = C50032 * (3 * C50266 + C49845 * C50320);
    const double C21372 =
        2 * C50032 * C50320 + C50032 * (C50320 + C50377 * C50101);
    const double C40488 =
        5 * (3 * C50492 + C50032 * C50507) +
        C50032 * (4 * C50507 +
                  C50032 * (3 * C50505 +
                            C50032 * (2 * C50032 * C49958 +
                                      C50032 * (C49958 + C49979 * C50101))));
    const double C49925 = C49846 * C49923;
    const double C1851 =
        (2 * C50032 * C49899 + C50032 * (C49899 + C49923 * C50101)) / C49723;
    const double C49924 = C49846 * C49922;
    const double C50054 = C49845 * C49922;
    const double C1859 = (2 * C50032 * C49898 +
                          C50032 * (C49898 + C49922 * std::pow(C50032, 2))) /
                         C49727;
    const double C5507 =
        (3 * (C49898 + C49922 * C50101) +
         C50032 * (2 * C50032 * C49922 +
                   C50032 * (C49922 + (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)) *
                                          C50101))) /
        C49727;
    const double C50074 = C49845 * C50070;
    const double C4596 = (2 * C50032 * C50049 +
                          C50032 * (C50049 + C50070 * std::pow(C50032, 2))) /
                         C49727;
    const double C6508 =
        (3 * (C50049 + C50070 * C50101) +
         C50032 * (2 * C50032 * C50070 +
                   C50032 * (C50070 + (ae * C49988 +
                                       C49845 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)) *
                                          C50101))) /
        C49727;
    const double C7425 =
        (4 * (2 * C50032 * C49894 + C50032 * C50109) +
         C50032 * (3 * C50109 +
                   C50032 * (2 * C50032 * C49918 +
                             C50032 * (C49918 + (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856) *
                                                    C50101)))) /
        C49727;
    const double C5554 = C5531 + C5532;
    const double C50131 = C49845 * C50129;
    const double C23065 =
        (3 * (C50090 + C50129 * C50101) +
         C50032 * (2 * C50032 * C50129 +
                   C50032 * (C50129 + (C49914 + ae * C49845 * C49981 +
                                       C49845 * (ae * C49981 +
                                                 C49845 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)) *
                                          C50101))) /
        C49727;
    const double C23986 =
        (4 * (2 * C50032 * C50084 + C50032 * C50141) +
         C50032 * (3 * C50141 +
                   C50032 * (2 * C50032 * C50123 +
                             C50032 * (C50123 + (ae * C49981 +
                                                 C49845 * std::pow(C49848, 8) *
                                                     bs[8] * C49856) *
                                                    C50101)))) /
        C49727;
    const double C40491 =
        (5 * (3 * C50112 + C50032 * C50148) +
         C50032 * (4 * C50148 +
                   C50032 * (3 * C50146 +
                             C50032 * (2 * C50032 * C49914 +
                                       C50032 * (C49914 + std::pow(C49848, 8) *
                                                              bs[8] * C49856 *
                                                              C50101))))) /
        C49727;
    const double C49995 = C49993 + C49986;
    const double C50075 = C49845 * C50072;
    const double C4587 =
        (2 * C50032 * C50050 + C50032 * (C50050 + C50072 * C50101)) / C49723;
    const double C50132 = C49845 * C50130;
    const double C21373 =
        (2 * C50032 * C50091 + C50032 * (C50091 + C50130 * C50101)) / C49723;
    const double C7014 = C5347 * C2298;
    const double C46139 = C5347 * C49742;
    const double C14702 = C9006 + C9005;
    const double C14691 = C9005 + C9006;
    const double C6089 = C5346 * C2298;
    const double C39613 = C5346 * C19987;
    const double C45244 = C5346 * C49742;
    const double C14013 = C8467 + C8468;
    const double C14002 = C8468 + C8467;
    const double C168 = C50662 * C139;
    const double C522 = C50662 * C484;
    const double C755 = C50662 * C486;
    const double C23584 = C17178 * C3695;
    const double C32155 = C24595 * C3695;
    const double C37581 = C2296 * C3695;
    const double C48811 = C8030 * C3695;
    const double C32659 = C24595 * C4189;
    const double C38085 = C2296 * C4189;
    const double C1106 =
        (2 * (C49845 * C49899 + C50169 * ae) +
         C49845 * (C49899 + C49845 * (C49845 * C49923 + C49994) +
                   C49845 * C49992 * ae) +
         (C50169 + C49992 * C50040) * ae) /
        C49723;
    const double C1220 =
        (C49845 * C49899 + C50169 * ae + (C49845 * C49923 + C49994) * C50101) /
        C49723;
    const double C1567 =
        (C50032 * (C49899 + C49845 * (C49845 * C49923 + C49994) +
                   C49845 * C49992 * ae)) /
        C49723;
    const double C50173 = C50171 + C50172;
    const double C3537 = 4 * (2 * C50270 + C49845 * C50273) +
                         C49845 * (3 * C50273 + C49845 * C50306);
    const double C3691 = 2 * C50270 + C49845 * C50273 + C50306 * C50101;
    const double C4185 = C50032 * (3 * C50273 + C49845 * C50306);
    const double C50381 = C50369 + C50379;
    const double C113 = (C50850 * C50541) / C50538 + (C50799 - C50834) / C50540;
    const double C114 =
        (C50851 * C50541) / C50538 + (2 * C50552 + C50850) / C50540;
    const double C115 = (C50541 * C50552) / C50555 + C50851 / C50540;
    const double C1096 =
        (C50852 * C50612) / C50538 + (C50807 - C50836) / C50540;
    const double C1097 =
        (C50853 * C50612) / C50538 + (2 * C50617 + C50852) / C50540;
    const double C1098 = (C50612 * C50617) / C50555 + C50853 / C50540;
    const double C1842 =
        (C50854 * C50640) / C50538 + (C50808 - C50839) / C50540;
    const double C1843 =
        (C50855 * C50640) / C50538 + (2 * C50645 + C50854) / C50540;
    const double C1844 = (C50640 * C50645) / C50555 + C50855 / C50540;
    const double C39052 =
        (C50858 * C50737) / C49723 + (C50821 - C50845) / C49728;
    const double C39053 =
        (C50859 * C50737) / C49723 + (2 * C50742 + C50858) / C49728;
    const double C39054 = (C50737 * C50742) / C49732 + C50859 / C49728;
    const double C49747 = C49746 * ae;
    const double C2297 = (-C49724 / C49723) / C49728 - (C49746 * be) / C49723;
    const double C24644 = C24617 + C24618;
    const double C24640 = C24609 + C24610;
    const double C24637 = C24603 + C24604;
    const double C24826 = C24805 + C24806;
    const double C24823 = C24799 + C24800;
    const double C25008 = C24987 + C24988;
    const double C25005 = C24981 + C24982;
    const double C31248 = C31233 + C31234;
    const double C31245 = C31227 + C31228;
    const double C31244 = C31225 + C31226;
    const double C31241 = C31219 + C31220;
    const double C31754 = C31747 + C31748;
    const double C31751 = C31741 + C31742;
    const double C49818 = C49816 * ae;
    const double C47423 = C47419 * C50518;
    const double C17231 = C17219 + C17220;
    const double C22126 = C17616 + C17615;
    const double C27843 = C17615 + C17616;
    const double C27842 = C17613 + C17614;
    const double C27839 = C17614 + C17613;
    const double C28496 = C18154 + C18153;
    const double C28493 = C18153 + C18154;
    const double C22146 = C22133 + C22134;
    const double C22145 = C22131 + C22132;
    const double C40217 = C7024 * C19987;
    const double C48311 = C15238 + C15237;
    const double C23076 = C22666 + C22665;
    const double C39884 = C39608 + C39607;
    const double C47422 = C47418 * C19987;
    const double C8086 = C8077 + C8078;
    const double C17234 = C17225 + C17226;
    const double C8622 = C8267 + C8268;
    const double C17770 = C17415 + C17416;
    const double C5875 = C526 * C2298;
    const double C11179 = C526 * C8033;
    const double C33969 = C526 * C17181;
    const double C45038 = C526 * C49742;
    const double C5539 = C533 * C2298;
    const double C11170 = C533 * C8033;
    const double C33960 = C533 * C17181;
    const double C39471 = C533 * C19987;
    const double C44732 = C533 * C49742;
    const double C6097 = C924 * C2298;
    const double C11683 = C924 * C8033;
    const double C34473 = C924 * C17181;
    const double C45248 = C924 * C49742;
    const double C8782 = C8461 + C8462;
    const double C14423 = C8462 + C8461;
    const double C17930 = C17609 + C17610;
    const double C28233 = C17610 + C17609;
    const double C170 = C50662 * C148;
    const double C325 = C50662 * C313;
    const double C2333 = C2290 * C313;
    const double C8052 = C50714 * C313;
    const double C8628 = C50820 * C313;
    const double C17200 = C50714 * C313;
    const double C17776 = C17172 * C313;
    const double C24632 = C50857 * C313;
    const double C502 = C50662 * C490;
    const double C8788 = C50820 * C490;
    const double C17936 = C17172 * C490;
    const double C520 = C50662 * C496;
    const double C8456 = C50820 * C496;
    const double C17604 = C17172 * C496;
    const double C3542 =
        (4 * (2 * C50265 + C49845 * C50321 + C50266 * ae) +
         C49845 *
             (3 * C50321 +
              C49845 * (2 * C50313 +
                        C49845 * (C49875 + C49845 * (C49845 * C49891 + C49960) +
                                  C49845 * C49958 * ae) +
                        C50315 * ae) +
              C50320 * ae) +
         (3 * C50266 + C49845 * C50320) * ae) /
        C49723;
    const double C3696 =
        (2 * C50265 + C49845 * C50321 + C50266 * ae +
         (2 * C50313 +
          C49845 * (C49875 + C49845 * (C49845 * C49891 + C49960) +
                    C49845 * C49958 * ae) +
          C50315 * ae) *
             C50101) /
        C49723;
    const double C4190 =
        (C50032 *
         (3 * C50321 +
          C49845 * (2 * C50313 +
                    C49845 * (C49875 + C49845 * (C49845 * C49891 + C49960) +
                              C49845 * C49958 * ae) +
                    C50315 * ae) +
          C50320 * ae)) /
        C49723;
    const double C4593 =
        (2 * C50032 * C50321 +
         C50032 * (C50321 + (C49875 + C49845 * (C49845 * C49891 + C49960) +
                             C49845 * C49958 * ae) *
                                C50101)) /
        C49723;
    const double C39609 = C6518 * C19987;
    const double C49208 = C16426 + C16425;
    const double C23989 = C22137 + C22138;
    const double C39887 = C39885 * C19987;
    const double C40501 = C40499 * C19987;
    const double C8084 = C8073 + C8074;
    const double C17232 = C17221 + C17222;
    const double C5536 = C527 * C50523;
    const double C5874 = C527 * C2292;
    const double C11178 = C527 * C50849;
    const double C11168 = C527 * C8028;
    const double C11480 = C527 * C50848;
    const double C33968 = C527 * C17175;
    const double C33958 = C527 * C17176;
    const double C34270 = C527 * C17174;
    const double C39470 = C527 * C50518;
    const double C44729 = C527 * C50523;
    const double C45037 = C527 * C50792;
    const double C5538 = C532 * C2292;
    const double C5520 = C532 * C50523;
    const double C11182 = C532 * C50848;
    const double C11171 = C532 * C50849;
    const double C33972 = C532 * C17174;
    const double C33961 = C532 * C17175;
    const double C39264 = C532 * C50518;
    const double C44731 = C532 * C50792;
    const double C44721 = C532 * C50523;
    const double C6096 = C923 * C2292;
    const double C6084 = C923 * C50523;
    const double C11686 = C923 * C50848;
    const double C11682 = C923 * C50849;
    const double C34476 = C923 * C17174;
    const double C34472 = C923 * C17175;
    const double C39612 = C923 * C50518;
    const double C45247 = C923 * C50792;
    const double C45241 = C923 * C50523;
    const double C14011 = C8463 + C8464;
    const double C14000 = C8464 + C8463;
    const double C27841 = C17611 + C17612;
    const double C27840 = C17612 + C17611;
    const double C319 =
        (C49864 + ae * C49867 + C49846 * C49878 + ae * C49845 * C49954 +
         C49845 * (ae * C49954 + C49845 * C49898)) /
        C49727;
    const double C906 = ((zP - zQ) * (ae * C49954 + C49845 * C49898)) / C49727;
    const double C137 = (3 * (C49939 + C49846 * C49943 + C50161 * ae) +
                         C49846 * (2 * C49943 + C49846 * C49954 + C50163 * ae) +
                         (2 * C50161 + C49846 * C50163) * ae) /
                        C49723;
    const double C293 =
        (C49845 * (2 * C49943 + C49846 * C49954 + C50163 * ae)) / C49723;
    const double C306 =
        (C49939 + C49846 * C49943 + C50161 * ae + C49954 * C50040) / C49723;
    const double C470 =
        (C50032 * (2 * C49943 + C49846 * C49954 + C50163 * ae)) / C49723;
    const double C483 =
        (C49939 + C49846 * C49943 + C50161 * ae + C49954 * C50101) / C49723;
    const double C899 = (C50032 * C49845 * C49954) / C49723;
    const double C2729 = C2291 * C2703;
    const double C5344 = C50662 * C2703;
    const double C14700 = C50714 * C2703;
    const double C22660 = C50714 * C2703;
    const double C25004 = C24590 * C2703;
    const double C2740 = C2726 + C2727;
    const double C5345 = C5333 + C5334;
    const double C8470 = C8449 + C8450;
    const double C14709 = C14697 + C14698;
    const double C17618 = C17597 + C17598;
    const double C22671 = C22657 + C22658;
    const double C7015 = C5348 * C50523;
    const double C12576 = C5348 * C50849;
    const double C35366 = C5348 * C17175;
    const double C46140 = C5348 * C50523;
    const double C14701 = C9008 + C9007;
    const double C14692 = C9007 + C9008;
    const double C28495 = C18156 + C18155;
    const double C28494 = C18155 + C18156;
    const double C5567 = C5549 * C2292;
    const double C5562 = C5549 * C50523;
    const double C12972 = C5549 * C50849;
    const double C35762 = C5549 * C17175;
    const double C39266 = C5549 * C50518;
    const double C44735 = C5549 * C50792;
    const double C44722 = C5549 * C50523;
    const double C7029 = C7025 * C2292;
    const double C40218 = C7025 * C50518;
    const double C46142 = C7025 * C50792;
    const double C48310 = C15240 + C15239;
    const double C23075 = C22668 + C22667;
    const double C6522 = C6519 * C2292;
    const double C39610 = C6519 * C50518;
    const double C45645 = C6519 * C50792;
    const double C49207 = C16428 + C16427;
    const double C23988 = C22135 + C22136;
    const double C39888 = C39886 * C50518;
    const double C23585 = C50714 * C3698;
    const double C32156 = C24590 * C3698;
    const double C37582 = C2291 * C3698;
    const double C48812 = C50714 * C3698;
    const double C32660 = C24590 * C4192;
    const double C38086 = C2291 * C4192;
    const double C23074 = C50714 * C4597;
    const double C33068 = C24590 * C4597;
    const double C38494 = C2291 * C4597;
    const double C40222 = C50662 * C4597;
    const double C48309 = C50714 * C4597;
    const double C40502 = C40500 * C50518;
    const double C2902 = C2892 + C2893;
    const double C8278 = C8259 + C8260;
    const double C17426 = C17407 + C17408;
    const double C25177 = C25167 + C25168;
    const double C3066 = C3056 + C3057;
    const double C9010 = C8999 + C9000;
    const double C11015 = C11011 + C11012;
    const double C18158 = C18147 + C18148;
    const double C25341 = C25331 + C25332;
    const double C345 = C50662 * C307;
    const double C2329 = C2291 * C307;
    const double C8626 = C50714 * C307;
    const double C17774 = C50714 * C307;
    const double C24628 = C24590 * C307;
    const double C645 = C50662 * C309;
    const double C8062 = C50714 * C309;
    const double C17210 = C50714 * C309;
    const double C919 = C50662 * C900;
    const double C8786 = C50714 * C900;
    const double C17934 = C50714 * C900;
    const double C167 = C117 * C127;
    const double C344 = C117 * C290;
    const double C2328 = C2296 * C290;
    const double C8625 = C8030 * C290;
    const double C17773 = C17178 * C290;
    const double C24627 = C24595 * C290;
    const double C644 = C117 * C291;
    const double C8061 = C8030 * C291;
    const double C17209 = C17178 * C291;
    const double C521 = C117 * C467;
    const double C754 = C117 * C468;
    const double C918 = C117 * C892;
    const double C8785 = C8030 * C892;
    const double C17933 = C17178 * C892;
    const double C5725 = C5721 + C5722;
    const double C8472 = C8453 + C8454;
    const double C17620 = C17601 + C17602;
    const double C5568 = C5555 * C2298;
    const double C12973 = C5555 * C8033;
    const double C35763 = C5555 * C17181;
    const double C39473 = C5555 * C19987;
    const double C44736 = C5555 * C49742;
    const double C50307 = C50305 + C50300;
    const double C6107 = C6091 + C6092;
    const double C14032 = C14017 + C14018;
    const double C22140 = C22119 + C22120;
    const double C2544 = C2528 + C2529;
    const double C24831 = C24815 + C24816;
    const double C2738 = C2722 + C2723;
    const double C5349 = C5341 + C5342;
    const double C14708 = C14695 + C14696;
    const double C22670 = C22655 + C22656;
    const double C25013 = C24997 + C24998;
    const double C3290 = C3280 + C3281;
    const double C13794 = C13787 + C13788;
    const double C25553 = C25543 + C25544;
    const double C27642 = C27635 + C27636;
    const double C49971 = C49846 * C49970;
    const double C49976 = 3 * C49970;
    const double C50053 = ae * C49970;
    const double C50052 = C49845 * C49970;
    const double C1114 = (2 * (ae * C49954 + C49845 * C49898) +
                          ae * (C49954 + C49970 * std::pow(C49845, 2)) +
                          C49845 * (C49898 + ae * C49845 * C49970 +
                                    C49845 * (ae * C49970 + C49845 * C49922))) /
                         C49727;
    const double C1228 =
        (ae * C49954 + C49845 * C49898 +
         (ae * C49970 + C49845 * C49922) * std::pow(zP - zQ, 2)) /
        C49727;
    const double C1575 =
        ((zP - zQ) * (C49898 + ae * C49845 * C49970 +
                      C49845 * (ae * C49970 + C49845 * C49922))) /
        C49727;
    const double C1107 =
        (2 * C49845 * C49954 + C49845 * (C49954 + C49970 * C50040)) / C49723;
    const double C1568 = (C50032 * (C49954 + C49970 * C50040)) / C49723;
    const double C1852 =
        (2 * C50032 * C49954 + C50032 * (C49954 + C49970 * C50101)) / C49723;
    const double C2535 = C2291 * C2509;
    const double C24822 = C24590 * C2509;
    const double C3287 = C2291 * C3273;
    const double C13792 = C50714 * C3273;
    const double C25550 = C24590 * C3273;
    const double C27640 = C50714 * C3273;
    const double C2534 = C2296 * C2505;
    const double C24821 = C24595 * C2505;
    const double C2728 = C2296 * C2699;
    const double C5343 = C117 * C2699;
    const double C14699 = C8030 * C2699;
    const double C22659 = C17178 * C2699;
    const double C25003 = C24595 * C2699;
    const double C3286 = C2296 * C3269;
    const double C13791 = C8030 * C3269;
    const double C25549 = C24595 * C3269;
    const double C27639 = C17178 * C3269;
    const double C50380 = C49845 * C50378;
    const double C23064 =
        (3 * (C50321 + C50378 * C50101) +
         C50032 *
             (2 * C50032 * C50378 +
              C50032 * (C50378 + (C49891 + C49845 * (C49845 * C49915 + C49982) +
                                  C49845 * C49979 * ae) *
                                     C50101))) /
        C49723;
    const double C23580 = C17178 * C3692;
    const double C32149 = C24595 * C3692;
    const double C37575 = C2296 * C3692;
    const double C48807 = C8030 * C3692;
    const double C32653 = C24595 * C4186;
    const double C38079 = C2296 * C4186;
    const double C49927 = C49907 + C49925;
    const double C49926 = C49908 + C49924;
    const double C5544 = C50662 * C1859;
    const double C50076 = C50073 + C50074;
    const double C6094 = C50662 * C4596;
    const double C14022 = C50714 * C4596;
    const double C22124 = C50714 * C4596;
    const double C7434 = C5554 * C50523;
    const double C39268 = C5554 * C50518;
    const double C46539 = C5554 * C50523;
    const double C50133 = C50121 + C50131;
    const double C49996 = C49846 * C49995;
    const double C50055 = C49995 * C50040;
    const double C5503 =
        (3 * (C49954 + C49970 * C50101) +
         C50032 * (2 * C50032 * C49970 + C50032 * (C49970 + C49995 * C50101))) /
        C49723;
    const double C50077 = C50071 + C50075;
    const double C50134 = C50119 + C50132;
    const double C47421 = C14002 * C19987;
    const double C128 = 5 * (3 * C50163 + C49846 * C50169) +
                        C49846 * (4 * C50169 + C49846 * C50173);
    const double C292 = 3 * C50163 + C49846 * C50169 + C50173 * C50040;
    const double C469 = 3 * C50163 + C49846 * C50169 + C50173 * C50101;
    const double C639 = C49845 * (4 * C50169 + C49846 * C50173);
    const double C749 = C50032 * (4 * C50169 + C49846 * C50173);
    const double C893 = C50032 * C49845 * C50173;
    const double C20674 = 5 * (3 * C50266 + C49845 * C50320) +
                          C49845 * (4 * C50320 + C49845 * C50381);
    const double C20776 = 3 * C50266 + C49845 * C50320 + C50381 * C50101;
    const double C21106 = C50032 * (4 * C50320 + C49845 * C50381);
    const double C49748 = C49747 / C49723;
    const double C5537 = C531 * C2297;
    const double C5533 = C530 * C2297;
    const double C5566 = C5550 * C2297;
    const double C5565 = C5552 * C2297;
    const double C5560 = C5547 * C2297;
    const double C5558 = C5545 * C2297;
    const double C5877 = C533 * C2297;
    const double C5873 = C528 * C2297;
    const double C6099 = C5346 * C2297;
    const double C6095 = C922 * C2297;
    const double C6111 = C6105 * C2297;
    const double C6109 = C6103 * C2297;
    const double C6521 = C6518 * C2297;
    const double C7028 = C7024 * C2297;
    const double C7026 = C7022 * C2297;
    const double C7439 = C7436 * C2297;
    const double C49820 = C49818 / C49723;
    const double C22144 = C22126 * C19987;
    const double C22149 = C22146 * C50518;
    const double C22148 = C22145 * C19987;
    const double C48317 = C48311 * C19987;
    const double C23082 = C23076 * C19987;
    const double C47425 = C47422 + C47423;
    const double C23581 = C50714 * C3696;
    const double C32150 = C24590 * C3696;
    const double C37576 = C2291 * C3696;
    const double C48808 = C50714 * C3696;
    const double C32654 = C24590 * C4190;
    const double C38080 = C2291 * C4190;
    const double C23070 = C50714 * C4593;
    const double C33062 = C24590 * C4593;
    const double C38488 = C2291 * C4593;
    const double C40220 = C50662 * C4593;
    const double C48305 = C50714 * C4593;
    const double C49218 = C49208 * C19987;
    const double C23999 = C23989 * C19987;
    const double C39272 = C39264 + C39263;
    const double C343 = C50662 * C319;
    const double C2313 = C2291 * C319;
    const double C2897 = C2290 * C319;
    const double C8262 = C50820 * C319;
    const double C8234 = C50714 * C319;
    const double C17410 = C17172 * C319;
    const double C17382 = C50714 * C319;
    const double C24612 = C24590 * C319;
    const double C25172 = C50857 * C319;
    const double C917 = C50662 * C906;
    const double C3061 = C2290 * C906;
    const double C8428 = C50714 * C906;
    const double C9002 = C50820 * C906;
    const double C17576 = C50714 * C906;
    const double C18150 = C17172 * C906;
    const double C25336 = C50857 * C906;
    const double C163 = C117 * C137;
    const double C8063 = C8029 * C137;
    const double C17211 = C17177 * C137;
    const double C324 = C117 * C293;
    const double C2332 = C2295 * C293;
    const double C8051 = C8030 * C293;
    const double C8627 = C8029 * C293;
    const double C17199 = C17178 * C293;
    const double C17775 = C17177 * C293;
    const double C342 = C117 * C306;
    const double C2312 = C2296 * C306;
    const double C2896 = C2295 * C306;
    const double C8261 = C8029 * C306;
    const double C8233 = C8030 * C306;
    const double C17409 = C17177 * C306;
    const double C17381 = C17178 * C306;
    const double C24611 = C24595 * C306;
    const double C501 = C117 * C470;
    const double C8787 = C8029 * C470;
    const double C17935 = C17177 * C470;
    const double C519 = C117 * C483;
    const double C8455 = C8029 * C483;
    const double C17603 = C17177 * C483;
    const double C916 = C117 * C899;
    const double C3060 = C2295 * C899;
    const double C8427 = C8030 * C899;
    const double C9001 = C8029 * C899;
    const double C17575 = C17178 * C899;
    const double C18149 = C17177 * C899;
    const double C6100 = C5345 * C2292;
    const double C6090 = C5345 * C50523;
    const double C12084 = C5345 * C50849;
    const double C34874 = C5345 * C17175;
    const double C39614 = C5345 * C50518;
    const double C45251 = C5345 * C50792;
    const double C45245 = C5345 * C50523;
    const double C14014 = C8469 + C8470;
    const double C14001 = C8470 + C8469;
    const double C22125 = C17618 + C17617;
    const double C27844 = C17617 + C17618;
    const double C39271 = C39266 + C39265;
    const double C48316 = C48310 * C50518;
    const double C23081 = C23075 * C50518;
    const double C39883 = C39610 + C39609;
    const double C49217 = C49207 * C50518;
    const double C23998 = C23988 * C50518;
    const double C23593 = C23584 + C23585;
    const double C32162 = C32155 + C32156;
    const double C37588 = C37581 + C37582;
    const double C48816 = C48811 + C48812;
    const double C32666 = C32659 + C32660;
    const double C38092 = C38085 + C38086;
    const double C23080 = C23073 + C23074;
    const double C33074 = C33067 + C33068;
    const double C38500 = C38493 + C38494;
    const double C40224 = C40221 + C40222;
    const double C48315 = C48308 + C48309;
    const double C12577 = C11015 * C8033;
    const double C35367 = C11015 * C17181;
    const double C179 = C167 + C168;
    const double C358 = C344 + C345;
    const double C2350 = C2328 + C2329;
    const double C8632 = C8625 + C8626;
    const double C17780 = C17773 + C17774;
    const double C24649 = C24627 + C24628;
    const double C648 = C644 + C645;
    const double C8080 = C8061 + C8062;
    const double C17228 = C17209 + C17210;
    const double C535 = C521 + C522;
    const double C758 = C754 + C755;
    const double C926 = C918 + C919;
    const double C8792 = C8785 + C8786;
    const double C17940 = C17933 + C17934;
    const double C6101 = C5725 * C2298;
    const double C12085 = C5725 * C8033;
    const double C34875 = C5725 * C17181;
    const double C45252 = C5725 * C49742;
    const double C3540 =
        (4 * (2 * C50272 + C49845 * C50307 + C50273 * ae) +
         C49845 *
             (3 * C50307 +
              C49845 * (2 * C50299 +
                        C49845 * (C49903 +
                                  C49845 * (C49845 * C49846 * C49915 + C49986) +
                                  C49845 * C49983 * ae) +
                        C50301 * ae) +
              C50306 * ae) +
         (3 * C50273 + C49845 * C50306) * ae) /
        C49723;
    const double C3694 =
        (2 * C50272 + C49845 * C50307 + C50273 * ae +
         (2 * C50299 +
          C49845 * (C49903 + C49845 * (C49845 * C49846 * C49915 + C49986) +
                    C49845 * C49983 * ae) +
          C50301 * ae) *
             C50101) /
        C49723;
    const double C4188 =
        (C50032 *
         (3 * C50307 +
          C49845 *
              (2 * C50299 +
               C49845 * (C49903 + C49845 * (C49845 * C49846 * C49915 + C49986) +
                         C49845 * C49983 * ae) +
               C50301 * ae) +
          C50306 * ae)) /
        C49723;
    const double C4589 =
        (2 * C50032 * C50307 +
         C50032 *
             (C50307 + (C49903 + C49845 * (C49845 * C49846 * C49915 + C49986) +
                        C49845 * C49983 * ae) *
                           C50101)) /
        C49723;
    const double C6515 = C6107 * C2298;
    const double C39615 = C6107 * C19987;
    const double C45646 = C6107 * C49742;
    const double C7020 = C5349 * C2298;
    const double C46143 = C5349 * C49742;
    const double C49972 = C49956 + C49971;
    const double C50056 = C50053 + C50054;
    const double C1221 = (C49845 * C49954 + C50052 * C50101) / C49723;
    const double C6075 =
        (2 * C50032 * C50052 + C50032 * (C50052 + C49845 * C49995 * C50101)) /
        C49723;
    const double C2899 = C2291 * C1114;
    const double C8264 = C50714 * C1114;
    const double C17412 = C50714 * C1114;
    const double C25174 = C24590 * C1114;
    const double C5724 = C50662 * C1228;
    const double C8458 = C50714 * C1228;
    const double C17606 = C50714 * C1228;
    const double C3063 = C2291 * C1575;
    const double C9004 = C50714 * C1575;
    const double C11014 = C50662 * C1575;
    const double C18152 = C50714 * C1575;
    const double C25338 = C24590 * C1575;
    const double C2898 = C2296 * C1107;
    const double C8263 = C8030 * C1107;
    const double C17411 = C17178 * C1107;
    const double C25173 = C24595 * C1107;
    const double C3062 = C2296 * C1568;
    const double C9003 = C8030 * C1568;
    const double C11013 = C117 * C1568;
    const double C18151 = C17178 * C1568;
    const double C25337 = C24595 * C1568;
    const double C5543 = C117 * C1852;
    const double C2547 = C2534 + C2535;
    const double C24834 = C24821 + C24822;
    const double C2741 = C2728 + C2729;
    const double C5350 = C5343 + C5344;
    const double C14710 = C14699 + C14700;
    const double C22672 = C22659 + C22660;
    const double C25016 = C25003 + C25004;
    const double C3293 = C3286 + C3287;
    const double C13796 = C13791 + C13792;
    const double C25556 = C25549 + C25550;
    const double C27644 = C27639 + C27640;
    const double C50382 = C50364 + C50380;
    const double C142 = (5 * (3 * C49879 + C49846 * C49899) +
                         C49846 * (4 * C49899 + C49846 * C49927)) /
                        C49723;
    const double C312 =
        (3 * C49879 + C49846 * C49899 +
         C49845 * (C49845 * C49927 + C50173 * ae) + C49845 * C50173 * ae) /
        C49723;
    const double C489 =
        (3 * C49879 + C49846 * C49899 + C49927 * C50101) / C49723;
    const double C641 = (C49845 * (4 * C49899 + C49846 * C49927) +
                         (4 * C50169 + C49846 * C50173) * ae) /
                        C49723;
    const double C751 = (C50032 * (4 * C49899 + C49846 * C49927)) / C49723;
    const double C903 = (C50032 * (C49845 * C49927 + C50173 * ae)) / C49723;
    const double C149 =
        (5 * (3 * C49898 + ae * C49899 + C49846 * C49926) +
         ae * (4 * C49899 + C49846 * C49927) +
         C49846 *
             (4 * C49926 + ae * C49927 +
              C49846 *
                  (3 * C49922 + ae * C49923 +
                   C49846 * (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49727;
    const double C497 = (2 * C49878 + ae * C49879 + C49846 * C49898 +
                         C49926 * std::pow(zP - zQ, 2)) /
                        C49727;
    const double C498 =
        ((zP - zQ) * (3 * C49898 + ae * C49899 + C49846 * C49926)) / C49727;
    const double C499 =
        (3 * C49898 + ae * C49899 + C49846 * C49926 +
         (3 * C49922 + ae * C49923 +
          C49846 *
              (2 * C49918 + ae * C49919 +
               C49846 * (C49914 + ae * C49846 * C49915 +
                         C49846 * (ae * C49915 + C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))) *
             std::pow(zP - zQ, 2)) /
        C49727;
    const double C752 =
        ((zP - zQ) *
         (4 * C49926 + ae * C49927 +
          C49846 * (3 * C49922 + ae * C49923 +
                    C49846 * (2 * C49918 + ae * C49919 +
                              C49846 * (C49914 + ae * C49846 * C49915 +
                                        C49846 * (ae * C49915 +
                                                  C49846 * std::pow(C49848, 8) *
                                                      bs[8] * C49856)))))) /
        C49727;
    const double C1858 =
        (2 * C50032 * C49926 +
         C50032 * (C49926 + (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856))) *
                                std::pow(C50032, 2))) /
        C49727;
    const double C3697 =
        (2 * C50049 + ae * C50050 + C49845 * C50076 +
         (2 * C50070 + ae * C50072 +
          C49845 *
              (C49918 + ae * C49845 * C49988 +
               C49845 * (ae * C49988 +
                         C49845 * (ae * C49915 + C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))) *
             std::pow(C50032, 2)) /
        C49727;
    const double C4595 =
        (2 * C50032 * C50076 +
         C50032 * (C50076 + (C49918 + ae * C49845 * C49988 +
                             C49845 * (ae * C49988 +
                                       C49845 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856))) *
                                std::pow(C50032, 2))) /
        C49727;
    const double C6108 = C6093 + C6094;
    const double C14034 = C14021 + C14022;
    const double C22142 = C22123 + C22124;
    const double C20779 =
        (3 * C50090 + ae * C50091 + C49845 * C50133 +
         (3 * C50129 + ae * C50130 +
          C49845 *
              (2 * C50123 + ae * C50125 +
               C49845 * (C49914 + ae * C49845 * C49981 +
                         C49845 * (ae * C49981 + C49845 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))) *
             C50101) /
        C49727;
    const double C21375 =
        (2 * C50032 * C50133 +
         C50032 * (C50133 + (2 * C50123 + ae * C50125 +
                             C49845 * (C49914 + ae * C49845 * C49981 +
                                       C49845 * (ae * C49981 +
                                                 C49845 * std::pow(C49848, 8) *
                                                     bs[8] * C49856))) *
                                C50101)) /
        C49727;
    const double C49997 = C49977 + C49996;
    const double C50057 = C49970 + C50055;
    const double C3543 =
        (4 * (2 * C50049 + ae * C50050 + C49845 * C50076) +
         ae * (3 * C50050 + C49845 * C50077) +
         C49845 *
             (3 * C50076 + ae * C50077 +
              C49845 *
                  (2 * C50070 + ae * C50072 +
                   C49845 * (C49918 + ae * C49845 * C49988 +
                             C49845 * (ae * C49988 +
                                       C49845 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49727;
    const double C4191 =
        (C50032 *
         (3 * C50076 + ae * C50077 +
          C49845 * (2 * C50070 + ae * C50072 +
                    C49845 * (C49918 + ae * C49845 * C49988 +
                              C49845 * (ae * C49988 +
                                        C49845 * (ae * C49915 +
                                                  C49846 * std::pow(C49848, 8) *
                                                      bs[8] * C49856)))))) /
        C49727;
    const double C3539 = (4 * (2 * C50045 + C49845 * C50050) +
                          C49845 * (3 * C50050 + C49845 * C50077)) /
                         C49723;
    const double C3693 =
        (2 * C50045 + C49845 * C50050 + C50077 * C50101) / C49723;
    const double C4187 = (C50032 * (3 * C50050 + C49845 * C50077)) / C49723;
    const double C20677 =
        (5 * (3 * C50090 + ae * C50091 + C49845 * C50133) +
         ae * (4 * C50091 + C49845 * C50134) +
         C49845 *
             (4 * C50133 + ae * C50134 +
              C49845 *
                  (3 * C50129 + ae * C50130 +
                   C49845 * (2 * C50123 + ae * C50125 +
                             C49845 * (C49914 + ae * C49845 * C49981 +
                                       C49845 * (ae * C49981 +
                                                 C49845 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49727;
    const double C21109 =
        (C50032 *
         (4 * C50133 + ae * C50134 +
          C49845 * (3 * C50129 + ae * C50130 +
                    C49845 * (2 * C50123 + ae * C50125 +
                              C49845 * (C49914 + ae * C49845 * C49981 +
                                        C49845 * (ae * C49981 +
                                                  C49845 * std::pow(C49848, 8) *
                                                      bs[8] * C49856)))))) /
        C49727;
    const double C20675 = (5 * (3 * C50043 + C49845 * C50091) +
                           C49845 * (4 * C50091 + C49845 * C50134)) /
                          C49723;
    const double C20777 =
        (3 * C50043 + C49845 * C50091 + C50134 * C50101) / C49723;
    const double C21107 = (C50032 * (4 * C50091 + C49845 * C50134)) / C49723;
    const double C49749 = C49748 - C49738;
    const double C5557 = C5538 + C5537;
    const double C7428 = C5564 + C5565;
    const double C5571 = C5560 + C5561;
    const double C6517 = C6112 + C6111;
    const double C49821 = C49820 - C49805;
    const double C22150 = C22148 + C22149;
    const double C23591 = C23580 + C23581;
    const double C32159 = C32149 + C32150;
    const double C37585 = C37575 + C37576;
    const double C48814 = C48807 + C48808;
    const double C32663 = C32653 + C32654;
    const double C38089 = C38079 + C38080;
    const double C23078 = C23069 + C23070;
    const double C33071 = C33061 + C33062;
    const double C38497 = C38487 + C38488;
    const double C40223 = C40219 + C40220;
    const double C48313 = C48304 + C48305;
    const double C177 = C163 + C164;
    const double C8081 = C8063 + C8064;
    const double C17229 = C17211 + C17212;
    const double C348 = C324 + C325;
    const double C2352 = C2332 + C2333;
    const double C8075 = C8051 + C8052;
    const double C8633 = C8627 + C8628;
    const double C17223 = C17199 + C17200;
    const double C17781 = C17775 + C17776;
    const double C357 = C342 + C343;
    const double C2342 = C2312 + C2313;
    const double C2904 = C2896 + C2897;
    const double C8279 = C8261 + C8262;
    const double C8265 = C8233 + C8234;
    const double C17427 = C17409 + C17410;
    const double C17413 = C17381 + C17382;
    const double C24641 = C24611 + C24612;
    const double C525 = C501 + C502;
    const double C8793 = C8787 + C8788;
    const double C17941 = C17935 + C17936;
    const double C534 = C519 + C520;
    const double C8473 = C8455 + C8456;
    const double C17621 = C17603 + C17604;
    const double C925 = C916 + C917;
    const double C3068 = C3060 + C3061;
    const double C8459 = C8427 + C8428;
    const double C9011 = C9001 + C9002;
    const double C17607 = C17575 + C17576;
    const double C18159 = C18149 + C18150;
    const double C47420 = C14001 * C50518;
    const double C22143 = C22125 * C50518;
    const double C48318 = C48316 + C48317;
    const double C23083 = C23081 + C23082;
    const double C49223 = C49217 + C49218;
    const double C24004 = C23998 + C23999;
    const double C40226 = C40224 * C50518;
    const double C5879 = C535 * C2298;
    const double C11185 = C535 * C8033;
    const double C33975 = C535 * C17181;
    const double C45042 = C535 * C49742;
    const double C11483 = C758 * C8033;
    const double C34273 = C758 * C17181;
    const double C11689 = C926 * C8033;
    const double C34479 = C926 * C17181;
    const double C49973 = C49972 + C49967;
    const double C2704 =
        (C49898 + ae * C50052 + C49845 * C50056 +
         (C49922 + ae * C49845 * C49995 +
          C49845 *
              (ae * C49995 +
               C49845 * (C49914 + ae * C49846 * C49915 +
                         C49846 * (ae * C49915 + C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))) *
             std::pow(C50032, 2)) /
        C49727;
    const double C6077 =
        (2 * C50032 * C50056 +
         C50032 * (C50056 + (ae * C49995 +
                             C49845 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856))) *
                                C50101)) /
        C49727;
    const double C5723 = C117 * C1221;
    const double C8457 = C8030 * C1221;
    const double C17605 = C17178 * C1221;
    const double C2905 = C2898 + C2899;
    const double C8280 = C8263 + C8264;
    const double C17428 = C17411 + C17412;
    const double C25180 = C25173 + C25174;
    const double C3069 = C3062 + C3063;
    const double C9012 = C9003 + C9004;
    const double C11016 = C11013 + C11014;
    const double C18160 = C18151 + C18152;
    const double C25344 = C25337 + C25338;
    const double C5556 = C5543 + C5544;
    const double C7021 = C5350 * C50523;
    const double C46144 = C5350 * C50523;
    const double C50383 = C50382 + C50367;
    const double C524 = C50662 * C497;
    const double C757 = C50662 * C498;
    const double C6516 = C6108 * C50523;
    const double C39616 = C6108 * C50518;
    const double C45647 = C6108 * C50523;
    const double C49998 = C49997 + C49989;
    const double C2510 =
        (3 * (C49898 + ae * C50052 + C49845 * C50056) +
         ae * (2 * C50052 + C49845 * C50057) +
         C49845 *
             (2 * C50056 + ae * C50057 +
              C49845 *
                  (C49922 + ae * C49845 * C49995 +
                   C49845 * (ae * C49995 +
                             C49845 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49727;
    const double C3274 =
        (C50032 *
         (2 * C50056 + ae * C50057 +
          C49845 * (C49922 + ae * C49845 * C49995 +
                    C49845 * (ae * C49995 +
                              C49845 * (C49914 + ae * C49846 * C49915 +
                                        C49846 * (ae * C49915 +
                                                  C49846 * std::pow(C49848, 8) *
                                                      bs[8] * C49856)))))) /
        C49727;
    const double C2506 = (3 * (C49954 + C49970 * C50040) +
                          C49845 * (2 * C50052 + C49845 * C50057)) /
                         C49723;
    const double C2700 = (C49954 + C49970 * C50040 + C50057 * C50101) / C49723;
    const double C3270 = (C50032 * (2 * C50052 + C49845 * C50057)) / C49723;
    const double C44734 = C5550 * C49749;
    const double C44730 = C531 * C49749;
    const double C44726 = C530 * C49749;
    const double C44725 = C5552 * C49749;
    const double C44718 = C5547 * C49749;
    const double C44714 = C5545 * C49749;
    const double C45040 = C533 * C49749;
    const double C45036 = C528 * C49749;
    const double C45250 = C5346 * C49749;
    const double C45246 = C922 * C49749;
    const double C45242 = C6105 * C49749;
    const double C45238 = C6103 * C49749;
    const double C45644 = C6518 * C49749;
    const double C46141 = C7024 * C49749;
    const double C46137 = C7022 * C49749;
    const double C46536 = C7436 * C49749;
    const double C118 =
        ((((0 - (C49721 * C49722) / C49723) * ae) / C49723 - (0 * be) / C49732 +
          C49724 / C49723) /
             C49728 -
         ((C49721 * C49745 + 0) * be) / C49723) /
            C49728 +
        ((C49721 * (C49745 / C49728 -
                    ((C49721 * C49749 + C50792) * be) / C49723 + C49742) +
          C50848) *
         ae) /
            C49723 +
        C49749 / C49728 - ((C49721 * C49742 + C50523) * be) / C49723;
    const double C119 =
        (C49745 / C49728 - ((C49721 * C49749 + C50792) * be) / C49723 +
         C49742) /
            C49728 +
        ((C49721 *
              (C49749 / C49728 - ((C49721 * C49742 + C50523) * be) / C49723) +
          C50849) *
         ae) /
            C49723 +
        2 * (C49742 / C49728 - (0 * be) / C49723);
    const double C120 =
        (C49749 / C49728 - ((C49721 * C49742 + C50523) * be) / C49723) /
            C49728 +
        ((C49721 * (C49742 / C49728 - (0 * be) / C49723) + C8028) * ae) /
            C49723;
    const double C8031 =
        C49745 / C49728 - ((C49721 * C49749 + C50792) * be) / C49723 + C49742;
    const double C8032 =
        C49749 / C49728 - ((C49721 * C49742 + C50523) * be) / C49723;
    const double C17179 =
        C49745 / C49728 + ((C49721 * C49749 + C50792) * ae) / C49723 + C49742;
    const double C17180 =
        C49749 / C49728 + ((C49721 * C49742 + C50523) * ae) / C49723;
    const double C5570 = C5539 + C5557;
    const double C7435 = C5563 + C7428;
    const double C5573 = C5571 + C5519;
    const double C6520 = C6089 + C6517;
    const double C19983 =
        ((((0 - (C49764 * C49802) / C49723) * ae) / C49723 - (0 * be) / C49732 +
          C49765 / C49723) /
             C49728 -
         ((C49764 * C49819 + 0) * be) / C49723) /
            C49728 +
        ((C49764 * (C49819 / C49728 -
                    ((C49764 * C49821 + C50820) * be) / C49723 + C49814) +
          C50856) *
         ae) /
            C49723 +
        C49821 / C49728 - ((C49764 * C49814 + C50714) * be) / C49723;
    const double C19984 =
        (C49819 / C49728 - ((C49764 * C49821 + C50820) * be) / C49723 +
         C49814) /
            C49728 +
        ((C49764 *
              (C49821 / C49728 - ((C49764 * C49814 + C50714) * be) / C49723) +
          C50857) *
         ae) /
            C49723 +
        2 * (C49814 / C49728 - (0 * be) / C49723);
    const double C19985 =
        (C49821 / C49728 - ((C49764 * C49814 + C50714) * be) / C49723) /
            C49728 +
        ((C49764 * (C49814 / C49728 - (0 * be) / C49723) + C24590) * ae) /
            C49723;
    const double C24593 =
        C49819 / C49728 - ((C49764 * C49821 + C50820) * be) / C49723 + C49814;
    const double C24594 =
        C49821 / C49728 - ((C49764 * C49814 + C50714) * be) / C49723;
    const double C40225 = C40223 * C19987;
    const double C8085 = C8075 + C8076;
    const double C17233 = C17223 + C17224;
    const double C8621 = C8265 + C8266;
    const double C17769 = C17413 + C17414;
    const double C5876 = C525 * C50523;
    const double C11180 = C525 * C8028;
    const double C11482 = C525 * C50849;
    const double C33970 = C525 * C17176;
    const double C34272 = C525 * C17175;
    const double C45039 = C525 * C50523;
    const double C5540 = C534 * C50523;
    const double C5878 = C534 * C2292;
    const double C11184 = C534 * C50849;
    const double C11169 = C534 * C8028;
    const double C33974 = C534 * C17175;
    const double C33959 = C534 * C17176;
    const double C39472 = C534 * C50518;
    const double C44733 = C534 * C50523;
    const double C45041 = C534 * C50792;
    const double C6098 = C925 * C50523;
    const double C11688 = C925 * C50849;
    const double C11684 = C925 * C8028;
    const double C34478 = C925 * C17175;
    const double C34474 = C925 * C17176;
    const double C45249 = C925 * C50523;
    const double C8781 = C8459 + C8460;
    const double C14424 = C8460 + C8459;
    const double C17929 = C17607 + C17608;
    const double C28234 = C17608 + C17607;
    const double C47424 = C47420 + C47421;
    const double C22147 = C22143 + C22144;
    const double C320 =
        (2 * C49878 + ae * C49879 + C49846 * C49898 + ae * C49845 * C49973 +
         C49845 * (ae * C49973 + C49845 * C49926)) /
        C49727;
    const double C321 =
        (ae * (3 * C49954 + C49846 * C49973 +
               (2 * C49947 + C49846 * C49965) * ae) +
         C49845 * (3 * C49898 + ae * C49899 + C49846 * C49926)) /
        C49727;
    const double C907 = ((zP - zQ) * (ae * C49973 + C49845 * C49926)) / C49727;
    const double C140 = (4 * (2 * C49943 + C49846 * C49954 + C50163 * ae) +
                         C49846 * (3 * C49954 + C49846 * C49973 + C50169 * ae) +
                         (3 * C50163 + C49846 * C50169) * ae) /
                        C49723;
    const double C308 =
        (2 * C49943 + C49846 * C49954 + C50163 * ae + C49973 * C50040) / C49723;
    const double C310 =
        (C49845 * (3 * C49954 + C49846 * C49973 + C50169 * ae)) / C49723;
    const double C485 =
        (2 * C49943 + C49846 * C49954 + C50163 * ae + C49973 * C50101) / C49723;
    const double C487 =
        (C50032 * (3 * C49954 + C49846 * C49973 + C50169 * ae)) / C49723;
    const double C901 = (C50032 * C49845 * C49973) / C49723;
    const double C5726 = C5723 + C5724;
    const double C8474 = C8457 + C8458;
    const double C17622 = C17605 + C17606;
    const double C12578 = C11016 * C8028;
    const double C35368 = C11016 * C17176;
    const double C5569 = C5556 * C50523;
    const double C12974 = C5556 * C8028;
    const double C35764 = C5556 * C17176;
    const double C39474 = C5556 * C50518;
    const double C44737 = C5556 * C50523;
    const double C20676 =
        (5 * (3 * C50321 + C49845 * C50383 + C50320 * ae) +
         C49845 *
             (4 * C50383 +
              C49845 *
                  (3 * C50378 +
                   C49845 *
                       (2 * C50370 +
                        C49845 * (C49891 + C49845 * (C49845 * C49915 + C49982) +
                                  C49845 * C49979 * ae) +
                        C50372 * ae) +
                   C50377 * ae) +
              C50381 * ae) +
         (4 * C50320 + C49845 * C50381) * ae) /
        C49723;
    const double C20778 =
        (3 * C50321 + C49845 * C50383 + C50320 * ae +
         (3 * C50378 +
          C49845 * (2 * C50370 +
                    C49845 * (C49891 + C49845 * (C49845 * C49915 + C49982) +
                              C49845 * C49979 * ae) +
                    C50372 * ae) +
          C50377 * ae) *
             C50101) /
        C49723;
    const double C21108 =
        (C50032 *
         (4 * C50383 +
          C49845 * (3 * C50378 +
                    C49845 * (2 * C50370 +
                              C49845 * (C49891 +
                                        C49845 * (C49845 * C49915 + C49982) +
                                        C49845 * C49979 * ae) +
                              C50372 * ae) +
                    C50377 * ae) +
          C50381 * ae)) /
        C49723;
    const double C21374 =
        (2 * C50032 * C50383 +
         C50032 *
             (C50383 + (2 * C50370 +
                        C49845 * (C49891 + C49845 * (C49845 * C49915 + C49982) +
                                  C49845 * C49979 * ae) +
                        C50372 * ae) *
                           C50101)) /
        C49723;
    const double C49999 = C49846 * C49998;
    const double C1113 =
        (2 * (ae * C49973 + C49845 * C49926) +
         ae * (C49973 + C49998 * std::pow(C49845, 2)) +
         C49845 *
             (C49926 + ae * C49845 * C49998 +
              C49845 *
                  (ae * C49998 +
                   C49845 * (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49727;
    const double C1227 =
        (ae * C49973 + C49845 * C49926 +
         (ae * C49998 +
          C49845 *
              (2 * C49918 + ae * C49919 +
               C49846 * (C49914 + ae * C49846 * C49915 +
                         C49846 * (ae * C49915 + C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))) *
             std::pow(zP - zQ, 2)) /
        C49727;
    const double C1574 =
        ((zP - zQ) *
         (C49926 + ae * C49845 * C49998 +
          C49845 * (ae * C49998 +
                    C49845 * (2 * C49918 + ae * C49919 +
                              C49846 * (C49914 + ae * C49846 * C49915 +
                                        C49846 * (ae * C49915 +
                                                  C49846 * std::pow(C49848, 8) *
                                                      bs[8] * C49856)))))) /
        C49727;
    const double C1105 =
        (2 * C49845 * C49973 + C49845 * (C49973 + C49998 * C50040)) / C49723;
    const double C1219 = (C49845 * C49973 + C49845 * C49998 * C50101) / C49723;
    const double C1566 = (C50032 * (C49973 + C49998 * C50040)) / C49723;
    const double C1850 =
        (2 * C50032 * C49973 + C50032 * (C49973 + C49998 * C50101)) / C49723;
    const double C44739 = C44731 + C44730;
    const double C46535 = C44724 + C44725;
    const double C44738 = C44718 + C44719;
    const double C45648 = C45243 + C45242;
    const double C11181 = C531 * C8031;
    const double C11175 = C530 * C8031;
    const double C11174 = C5547 * C8031;
    const double C11163 = C5545 * C8031;
    const double C11479 = C528 * C8031;
    const double C11685 = C922 * C8031;
    const double C11679 = C6103 * C8031;
    const double C12081 = C6105 * C8031;
    const double C12573 = C7022 * C8031;
    const double C12969 = C5552 * C8031;
    const double C11183 = C533 * C8032;
    const double C11177 = C528 * C8032;
    const double C11172 = C531 * C8032;
    const double C11165 = C530 * C8032;
    const double C11481 = C526 * C8032;
    const double C11687 = C924 * C8032;
    const double C11681 = C922 * C8032;
    const double C12083 = C5346 * C8032;
    const double C12575 = C5347 * C8032;
    const double C12971 = C5550 * C8032;
    const double C33971 = C531 * C17179;
    const double C33965 = C530 * C17179;
    const double C33964 = C5547 * C17179;
    const double C33953 = C5545 * C17179;
    const double C34269 = C528 * C17179;
    const double C34475 = C922 * C17179;
    const double C34469 = C6103 * C17179;
    const double C34871 = C6105 * C17179;
    const double C35363 = C7022 * C17179;
    const double C35759 = C5552 * C17179;
    const double C33973 = C533 * C17180;
    const double C33967 = C528 * C17180;
    const double C33962 = C531 * C17180;
    const double C33955 = C530 * C17180;
    const double C34271 = C526 * C17180;
    const double C34477 = C924 * C17180;
    const double C34471 = C922 * C17180;
    const double C34873 = C5346 * C17180;
    const double C35365 = C5347 * C17180;
    const double C35761 = C5550 * C17180;
    const double C7438 = C5562 + C7435;
    const double C5574 = C5573 + C5520;
    const double C6523 = C6090 + C6520;
    const double C24629 = C24593 * C136;
    const double C24623 = C24593 * C125;
    const double C24621 = C24593 * C124;
    const double C24615 = C24593 * C134;
    const double C24605 = C24593 * C132;
    const double C24599 = C24593 * C123;
    const double C24817 = C24593 * C304;
    const double C24811 = C24593 * C288;
    const double C24809 = C24593 * C285;
    const double C24803 = C24593 * C297;
    const double C24999 = C24593 * C481;
    const double C24993 = C24593 * C465;
    const double C24991 = C24593 * C462;
    const double C24985 = C24593 * C474;
    const double C25169 = C24593 * C295;
    const double C25163 = C24593 * C284;
    const double C25333 = C24593 * C472;
    const double C25327 = C24593 * C461;
    const double C25545 = C24593 * C897;
    const double C25539 = C24593 * C890;
    const double C31237 = C24593 * C464;
    const double C31231 = C24593 * C479;
    const double C31221 = C24593 * C476;
    const double C31215 = C24593 * C463;
    const double C31743 = C24593 * C895;
    const double C31737 = C24593 * C889;
    const double C32151 = C24593 * C1225;
    const double C32145 = C24593 * C1218;
    const double C32655 = C24593 * C1572;
    const double C32649 = C24593 * C1565;
    const double C33063 = C24593 * C1856;
    const double C33057 = C24593 * C1849;
    const double C24631 = C24594 * C293;
    const double C24625 = C24594 * C283;
    const double C24619 = C24594 * C284;
    const double C24613 = C24594 * C295;
    const double C24607 = C24594 * C297;
    const double C24601 = C24594 * C285;
    const double C24819 = C24594 * C1109;
    const double C24813 = C24594 * C1103;
    const double C24807 = C24594 * C288;
    const double C24801 = C24594 * C304;
    const double C25001 = C24594 * C1223;
    const double C24995 = C24594 * C1217;
    const double C24989 = C24594 * C890;
    const double C24983 = C24594 * C897;
    const double C25171 = C24594 * C306;
    const double C25165 = C24594 * C289;
    const double C25335 = C24594 * C899;
    const double C25329 = C24594 * C891;
    const double C25547 = C24594 * C1570;
    const double C25541 = C24594 * C1564;
    const double C31235 = C24594 * C1218;
    const double C31229 = C24594 * C1225;
    const double C31223 = C24594 * C895;
    const double C31217 = C24594 * C889;
    const double C31745 = C24594 * C1572;
    const double C31739 = C24594 * C1565;
    const double C32153 = C24594 * C2697;
    const double C32147 = C24594 * C2693;
    const double C32657 = C24594 * C3267;
    const double C32651 = C24594 * C3263;
    const double C33065 = C24594 * C4592;
    const double C33059 = C24594 * C4586;
    const double C5572 = C5540 + C5570;
    const double C347 = C50662 * C320;
    const double C2335 = C2291 * C320;
    const double C8630 = C50714 * C320;
    const double C17778 = C50714 * C320;
    const double C24634 = C24590 * C320;
    const double C647 = C50662 * C321;
    const double C8066 = C50714 * C321;
    const double C17214 = C50714 * C321;
    const double C921 = C50662 * C907;
    const double C8790 = C50714 * C907;
    const double C17938 = C50714 * C907;
    const double C169 = C117 * C140;
    const double C346 = C117 * C308;
    const double C2334 = C2296 * C308;
    const double C8629 = C8030 * C308;
    const double C17777 = C17178 * C308;
    const double C24633 = C24595 * C308;
    const double C646 = C117 * C310;
    const double C8065 = C8030 * C310;
    const double C17213 = C17178 * C310;
    const double C523 = C117 * C485;
    const double C756 = C117 * C487;
    const double C920 = C117 * C901;
    const double C8789 = C8030 * C901;
    const double C17937 = C17178 * C901;
    const double C6102 = C5726 * C50523;
    const double C12086 = C5726 * C8028;
    const double C34876 = C5726 * C17176;
    const double C45253 = C5726 * C50523;
    const double C50000 = C49976 + C49999;
    const double C44741 = C44732 + C44739;
    const double C46540 = C44723 + C46535;
    const double C44740 = C44738 + C44720;
    const double C45649 = C45244 + C45648;
    const double C24650 = C24629 + C24630;
    const double C24647 = C24623 + C24624;
    const double C24646 = C24621 + C24622;
    const double C24643 = C24615 + C24616;
    const double C24638 = C24605 + C24606;
    const double C24635 = C24599 + C24600;
    const double C24832 = C24817 + C24818;
    const double C24829 = C24811 + C24812;
    const double C24828 = C24809 + C24810;
    const double C24825 = C24803 + C24804;
    const double C25014 = C24999 + C25000;
    const double C25011 = C24993 + C24994;
    const double C25010 = C24991 + C24992;
    const double C25007 = C24985 + C24986;
    const double C25178 = C25169 + C25170;
    const double C25175 = C25163 + C25164;
    const double C25342 = C25333 + C25334;
    const double C25339 = C25327 + C25328;
    const double C25554 = C25545 + C25546;
    const double C25551 = C25539 + C25540;
    const double C31250 = C31237 + C31238;
    const double C31247 = C31231 + C31232;
    const double C31242 = C31221 + C31222;
    const double C31239 = C31215 + C31216;
    const double C31752 = C31743 + C31744;
    const double C31749 = C31737 + C31738;
    const double C32160 = C32151 + C32152;
    const double C32157 = C32145 + C32146;
    const double C32664 = C32655 + C32656;
    const double C32661 = C32649 + C32650;
    const double C33072 = C33063 + C33064;
    const double C33069 = C33057 + C33058;
    const double C24651 = C24631 + C24632;
    const double C24648 = C24625 + C24626;
    const double C24645 = C24619 + C24620;
    const double C24642 = C24613 + C24614;
    const double C24639 = C24607 + C24608;
    const double C24636 = C24601 + C24602;
    const double C24833 = C24819 + C24820;
    const double C24830 = C24813 + C24814;
    const double C24827 = C24807 + C24808;
    const double C24824 = C24801 + C24802;
    const double C25015 = C25001 + C25002;
    const double C25012 = C24995 + C24996;
    const double C25009 = C24989 + C24990;
    const double C25006 = C24983 + C24984;
    const double C25179 = C25171 + C25172;
    const double C25176 = C25165 + C25166;
    const double C25343 = C25335 + C25336;
    const double C25340 = C25329 + C25330;
    const double C25555 = C25547 + C25548;
    const double C25552 = C25541 + C25542;
    const double C31249 = C31235 + C31236;
    const double C31246 = C31229 + C31230;
    const double C31243 = C31223 + C31224;
    const double C31240 = C31217 + C31218;
    const double C31753 = C31745 + C31746;
    const double C31750 = C31739 + C31740;
    const double C32161 = C32153 + C32154;
    const double C32158 = C32147 + C32148;
    const double C32665 = C32657 + C32658;
    const double C32662 = C32651 + C32652;
    const double C33073 = C33065 + C33066;
    const double C33070 = C33059 + C33060;
    const double C180 = C169 + C170;
    const double C359 = C346 + C347;
    const double C2353 = C2334 + C2335;
    const double C8634 = C8629 + C8630;
    const double C17782 = C17777 + C17778;
    const double C24652 = C24633 + C24634;
    const double C649 = C646 + C647;
    const double C8082 = C8065 + C8066;
    const double C17230 = C17213 + C17214;
    const double C536 = C523 + C524;
    const double C759 = C756 + C757;
    const double C927 = C920 + C921;
    const double C8794 = C8789 + C8790;
    const double C17942 = C17937 + C17938;
    const double C50001 = C50000 + C49994;
    const double C44743 = C44733 + C44741;
    const double C46541 = C44722 + C46540;
    const double C44742 = C44740 + C44721;
    const double C45650 = C45245 + C45649;
    const double C5880 = C536 * C50523;
    const double C11186 = C536 * C8028;
    const double C33976 = C536 * C17176;
    const double C45043 = C536 * C50523;
    const double C11484 = C759 * C8028;
    const double C34274 = C759 * C17176;
    const double C11690 = C927 * C8028;
    const double C34480 = C927 * C17176;
    const double C322 =
        (3 * C49898 + ae * C49899 + C49846 * C49926 + ae * C49845 * C50001 +
         C49845 *
             (ae * C50001 +
              C49845 *
                  (3 * C49922 + ae * C49923 +
                   C49846 * (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49727;
    const double C642 =
        (ae * (4 * C49973 + C49846 * C50001 +
               (3 * C49965 + C49846 * C49992) * ae) +
         C49845 *
             (4 * C49926 + ae * C49927 +
              C49846 *
                  (3 * C49922 + ae * C49923 +
                   C49846 * (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49727;
    const double C908 =
        ((zP - zQ) *
         (ae * C50001 +
          C49845 * (3 * C49922 + ae * C49923 +
                    C49846 * (2 * C49918 + ae * C49919 +
                              C49846 * (C49914 + ae * C49846 * C49915 +
                                        C49846 * (ae * C49915 +
                                                  C49846 * std::pow(C49848, 8) *
                                                      bs[8] * C49856)))))) /
        C49727;
    const double C141 = (5 * (3 * C49954 + C49846 * C49973 + C50169 * ae) +
                         C49846 * (4 * C49973 + C49846 * C50001 + C50173 * ae) +
                         (4 * C50169 + C49846 * C50173) * ae) /
                        C49723;
    const double C311 =
        (3 * C49954 + C49846 * C49973 + C50169 * ae + C50001 * C50040) / C49723;
    const double C488 =
        (3 * C49954 + C49846 * C49973 + C50169 * ae + C50001 * C50101) / C49723;
    const double C640 =
        (C49845 * (4 * C49973 + C49846 * C50001 + C50173 * ae)) / C49723;
    const double C750 =
        (C50032 * (4 * C49973 + C49846 * C50001 + C50173 * ae)) / C49723;
    const double C902 = (C50032 * C49845 * C50001) / C49723;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50581 * C50807 -
           (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
            (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C50581 * C50617) *
              C50850 +
          (((C8272 + C8271) * C8031 + (C8270 + C8269) * C50848 +
            (C8268 + C8267) * C8032 + (C8266 + C8265) * C50849 +
            (C8631 + C8632) * C8033 + (C8633 + C8634) * C8028) *
               C50678 * C50581 * C50617 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C50581 * C50807) *
              C50851 +
          ((C8083 * C8031 + C8084 * C50848 + (C8078 + C8077) * C8032 +
            (C8076 + C8075) * C50849 + (C8079 + C8080) * C8033 +
            (C8081 + C8082) * C8028) *
               C50678 * C50581 * C50807 -
           ((C8030 * C311 + C50714 * C322 + C8029 * C310 + C50820 * C321) *
                C8028 +
            (C8030 * C292 + C50714 * C312 + C8029 * C291 + C50820 * C309) *
                C8033 +
            (C8634 + C8633) * C50849 + (C8632 + C8631) * C8032 +
            C8621 * C50848 + C8622 * C8031) *
               C50678 * C50581 * C50617) *
              C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C8031 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50848 +
             (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 +
             C8083 * C8033 + C8084 * C8028) *
                C50678 * C50808 -
            (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
             (C8465 + C8466) * C8032 +
             (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                 C50848 +
             (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                 C8031) *
                C50678 * C50645) *
               C50807 +
           (((C8029 * C889 + C50820 * C894 + C8030 * C1565 + C50714 * C1573) *
                 C8031 +
             (C8029 * C895 + C50820 * C904 + C8030 * C1572 + C50714 * C1577) *
                 C50848 +
             (C9005 + C9006) * C8032 + (C9007 + C9008) * C50849 +
             (C9009 + C9010) * C8033 + (C9011 + C9012) * C8028) *
                C50678 * C50645 -
            (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
             (C8271 + C8272) * C8032 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50848 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C8031) *
                C50678 * C50808) *
               C50617) *
              C281 +
          ((((C8466 + C8465) * C8031 + (C8464 + C8463) * C50848 +
             (C8462 + C8461) * C8032 + (C8460 + C8459) * C50849 +
             (C8791 + C8792) * C8033 + (C8793 + C8794) * C8028) *
                C50678 * C50645 -
            (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
             (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
             (C8068 + C8067) * C8031) *
                C50678 * C50808) *
               C50807 +
           (((C8272 + C8271) * C8031 + (C8270 + C8269) * C50848 +
             (C8268 + C8267) * C8032 + (C8266 + C8265) * C50849 +
             (C8631 + C8632) * C8033 + (C8633 + C8634) * C8028) *
                C50678 * C50808 -
            ((C8030 * C1566 + C50714 * C1574 + C8029 * C901 + C50820 * C907) *
                 C8028 +
             (C8030 * C1562 + C50714 * C1567 + C8029 * C892 + C50820 * C900) *
                 C8033 +
             (C9012 + C9011) * C50849 + (C9010 + C9009) * C8032 +
             (C9008 + C9007) * C50848 + (C9006 + C9005) * C8031) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50581 * C278 -
           ((C8265 + C8266) * C8028 + (C8267 + C8268) * C8033 +
            (C8269 + C8270) * C50849 + (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C50581 * C279 +
           ((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C8031 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50848 +
            (C8273 + C8274) * C8032 + (C8275 + C8276) * C50849 +
            (C8277 + C8278) * C8033 + (C8279 + C8280) * C8028) *
               C50678 * C50581 * C280) *
              C281 +
          (((C8272 + C8271) * C8031 + (C8270 + C8269) * C50848 +
            (C8268 + C8267) * C8032 + (C8266 + C8265) * C50849 +
            (C8029 * C283 + C50820 * C294 + C8030 * C290 + C50714 * C307) *
                C8033 +
            (C8029 * C293 + C50820 * C313 + C8030 * C308 + C50714 * C320) *
                C8028) *
               C50678 * C50581 * C279 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C50581 * C278 -
           ((C8030 * C1105 + C50714 * C1113 + C8029 * C308 + C50820 * C320) *
                C8028 +
            (C8030 * C1101 + C50714 * C1106 + C8029 * C290 + C50820 * C307) *
                C8033 +
            (C8280 + C8279) * C50849 + (C8278 + C8277) * C8032 +
            (C8276 + C8275) * C50848 + (C8274 + C8273) * C8031) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
               C8031 +
           (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
               C50848 +
           (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
           C8084 * C8028) *
              C50678 * C50581 * C50565 * C113 -
          (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
           (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
           (C8068 + C8067) * C8031) *
              C50678 * C50581 * C50565 * C114 +
          (C8083 * C8031 + C8084 * C50848 + (C8078 + C8077) * C8032 +
           (C8076 + C8075) * C50849 + (C8079 + C8080) * C8033 +
           (C8081 + C8082) * C8028) *
              C50678 * C50581 * C50565 * C115 -
          ((C8030 * C640 + C50714 * C642 + C8029 * C140 + C50820 * C148) *
               C8028 +
           (C8030 * C639 + C50714 * C641 + C8029 * C127 + C50820 * C139) *
               C8033 +
           (C8082 + C8081) * C50849 + (C8080 + C8079) * C8032 + C8085 * C50848 +
           C8086 * C8031) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C457 -
           ((C8459 + C8460) * C8028 + (C8461 + C8462) * C8033 +
            (C8463 + C8464) * C50849 + (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C458 +
           ((C8029 * C464 + C50820 * C478 + C8030 * C1218 + C50714 * C1226) *
                C8031 +
            (C8029 * C479 + C50820 * C494 + C8030 * C1225 + C50714 * C1230) *
                C50848 +
            (C8467 + C8468) * C8032 + (C8469 + C8470) * C50849 +
            (C8471 + C8472) * C8033 + (C8473 + C8474) * C8028) *
               C50678 * C459) *
              C50565 * C281 +
          (((C8466 + C8465) * C8031 + (C8464 + C8463) * C50848 +
            (C8462 + C8461) * C8032 + (C8460 + C8459) * C50849 +
            (C8029 * C460 + C50820 * C471 + C8030 * C892 + C50714 * C900) *
                C8033 +
            (C8029 * C470 + C50820 * C490 + C8030 * C901 + C50714 * C907) *
                C8028) *
               C50678 * C458 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C457 -
           ((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                C8028 +
            (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                C8033 +
            (C8474 + C8473) * C50849 + (C8472 + C8471) * C8032 +
            (C8470 + C8469) * C50848 + (C8468 + C8467) * C8031) *
               C50678 * C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50808 -
           (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
            (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C50645) *
              C50565 * C50850 +
          (((C8466 + C8465) * C8031 + (C8464 + C8463) * C50848 +
            (C8462 + C8461) * C8032 + (C8460 + C8459) * C50849 +
            (C8791 + C8792) * C8033 + (C8793 + C8794) * C8028) *
               C50678 * C50645 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C50808) *
              C50565 * C50851 +
          ((C8083 * C8031 + C8084 * C50848 + (C8078 + C8077) * C8032 +
            (C8076 + C8075) * C50849 + (C8079 + C8080) * C8033 +
            (C8081 + C8082) * C8028) *
               C50678 * C50808 -
           ((C8030 * C902 + C50714 * C908 + C8029 * C487 + C50820 * C498) *
                C8028 +
            (C8030 * C893 + C50714 * C903 + C8029 * C468 + C50820 * C486) *
                C8033 +
            (C8794 + C8793) * C50849 + (C8792 + C8791) * C8032 +
            C8781 * C50848 + C8782 * C8031) *
               C50678 * C50645) *
              C50565 * C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
               C8031 +
           (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
               C50848 +
           (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
           C8084 * C8028) *
              C50678 * C50581 * C50565 * C113 -
          (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
           (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
           (C8068 + C8067) * C8031) *
              C50678 * C50581 * C50565 * C114 +
          (C8083 * C8031 + C8084 * C50848 + (C8078 + C8077) * C8032 +
           (C8076 + C8075) * C50849 + (C8079 + C8080) * C8033 +
           (C8081 + C8082) * C8028) *
              C50678 * C50581 * C50565 * C115 -
          ((C8030 * C640 + C50714 * C642 + C8029 * C140 + C50820 * C148) *
               C8028 +
           (C8030 * C639 + C50714 * C641 + C8029 * C127 + C50820 * C139) *
               C8033 +
           (C8082 + C8081) * C50849 + (C8080 + C8079) * C8032 + C8085 * C50848 +
           C8086 * C8031) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50581 * C278 -
           ((C8265 + C8266) * C8028 + (C8267 + C8268) * C8033 +
            (C8269 + C8270) * C50849 + (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C50581 * C279 +
           ((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C8031 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50848 +
            (C8273 + C8274) * C8032 + (C8275 + C8276) * C50849 +
            (C8277 + C8278) * C8033 + (C8279 + C8280) * C8028) *
               C50678 * C50581 * C280) *
              C281 +
          (((C8272 + C8271) * C8031 + (C8270 + C8269) * C50848 +
            (C8268 + C8267) * C8032 + (C8266 + C8265) * C50849 +
            (C8029 * C283 + C50820 * C294 + C8030 * C290 + C50714 * C307) *
                C8033 +
            (C8029 * C293 + C50820 * C313 + C8030 * C308 + C50714 * C320) *
                C8028) *
               C50678 * C50581 * C279 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C50581 * C278 -
           ((C8030 * C1105 + C50714 * C1113 + C8029 * C308 + C50820 * C320) *
                C8028 +
            (C8030 * C1101 + C50714 * C1106 + C8029 * C290 + C50820 * C307) *
                C8033 +
            (C8280 + C8279) * C50849 + (C8278 + C8277) * C8032 +
            (C8276 + C8275) * C50848 + (C8274 + C8273) * C8031) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50581 * C50852 -
           (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
            (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C50581 * C50853 +
           ((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C8031 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50848 +
            (C8273 + C8274) * C8032 + (C8275 + C8276) * C50849 +
            (C8277 + C8278) * C8033 + (C8279 + C8280) * C8028) *
               C50678 * C50581 * C1331) *
              C50799 +
          (((C8272 + C8271) * C8031 + (C8270 + C8269) * C50848 +
            (C8268 + C8267) * C8032 + (C8266 + C8265) * C50849 +
            (C8631 + C8632) * C8033 + (C8633 + C8634) * C8028) *
               C50678 * C50581 * C50853 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C50581 * C50852 -
           ((C8030 * C1105 + C50714 * C1113 + C8029 * C308 + C50820 * C320) *
                C8028 +
            (C8030 * C1101 + C50714 * C1106 + C8029 * C290 + C50820 * C307) *
                C8033 +
            (C8280 + C8279) * C50849 + (C8278 + C8277) * C8032 +
            (C8276 + C8275) * C50848 + (C8274 + C8273) * C8031) *
               C50678 * C50581 * C1331) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50808 -
           (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
            (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C50645) *
              C50852 +
          (((C8029 * C889 + C50820 * C894 + C8030 * C1565 + C50714 * C1573) *
                C8031 +
            (C8029 * C895 + C50820 * C904 + C8030 * C1572 + C50714 * C1577) *
                C50848 +
            (C9005 + C9006) * C8032 + (C9007 + C9008) * C50849 +
            (C9009 + C9010) * C8033 + (C9011 + C9012) * C8028) *
               C50678 * C50645 -
           (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
            (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C50808) *
              C50853 +
          (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C8031 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50848 +
            (C8273 + C8274) * C8032 + (C8275 + C8276) * C50849 +
            (C8277 + C8278) * C8033 + (C8279 + C8280) * C8028) *
               C50678 * C50808 -
           ((C8030 * C3270 + C50714 * C3274 + C8029 * C1568 + C50820 * C1575) *
                C8028 +
            (C8030 * C3265 + C50714 * C3271 + C8029 * C1563 + C50820 * C1569) *
                C8033 +
            (C8030 * C3269 + C50714 * C3273 + C8029 * C1570 + C50820 * C1576) *
                C50849 +
            (C8030 * C3264 + C50714 * C3268 + C8029 * C1564 + C50820 * C1571) *
                C8032 +
            (C8030 * C3267 + C50714 * C3272 + C8029 * C1572 + C50820 * C1577) *
                C50848 +
            (C8030 * C3263 + C50714 * C3266 + C8029 * C1565 + C50820 * C1573) *
                C8031) *
               C50678 * C50645) *
              C1331) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
               C8031 +
           (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
               C50848 +
           (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
           C8084 * C8028) *
              C50678 * C50581 * C1096 -
          (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
           (C8271 + C8272) * C8032 +
           (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
               C50848 +
           (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
               C8031) *
              C50678 * C50581 * C1097 +
          ((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
               C8031 +
           (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
               C50848 +
           (C8273 + C8274) * C8032 + (C8275 + C8276) * C50849 +
           (C8277 + C8278) * C8033 + (C8279 + C8280) * C8028) *
              C50678 * C50581 * C1098 -
          ((C8030 * C2506 + C50714 * C2510 + C8029 * C1107 + C50820 * C1114) *
               C8028 +
           (C8030 * C2501 + C50714 * C2507 + C8029 * C1102 + C50820 * C1108) *
               C8033 +
           (C8030 * C2505 + C50714 * C2509 + C8029 * C1109 + C50820 * C1115) *
               C50849 +
           (C8030 * C2500 + C50714 * C2504 + C8029 * C1103 + C50820 * C1110) *
               C8032 +
           (C8030 * C2503 + C50714 * C2508 + C8029 * C1111 + C50820 * C1116) *
               C50848 +
           (C8030 * C2499 + C50714 * C2502 + C8029 * C1104 + C50820 * C1112) *
               C8031) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50581 * C1025 -
           (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
            (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C8272 + C8271) * C8031 + (C8270 + C8269) * C50848 +
            (C8268 + C8267) * C8032 + (C8266 + C8265) * C50849 +
            (C8631 + C8632) * C8033 + (C8633 + C8634) * C8028) *
               C50678 * C50581 * C50617 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C50581 * C1025) *
              C1028 +
          ((C8083 * C8031 + C8084 * C50848 + (C8078 + C8077) * C8032 +
            (C8076 + C8075) * C50849 + (C8079 + C8080) * C8033 +
            (C8081 + C8082) * C8028) *
               C50678 * C50581 * C1025 -
           ((C8030 * C311 + C50714 * C322 + C8029 * C310 + C50820 * C321) *
                C8028 +
            (C8030 * C292 + C50714 * C312 + C8029 * C291 + C50820 * C309) *
                C8033 +
            (C8634 + C8633) * C50849 + (C8632 + C8631) * C8032 +
            C8621 * C50848 + C8622 * C8031) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C457 -
           (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
            (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C458 +
           ((C8029 * C464 + C50820 * C478 + C8030 * C1218 + C50714 * C1226) *
                C8031 +
            (C8029 * C479 + C50820 * C494 + C8030 * C1225 + C50714 * C1230) *
                C50848 +
            (C8467 + C8468) * C8032 + (C8469 + C8470) * C50849 +
            (C8471 + C8472) * C8033 + (C8473 + C8474) * C8028) *
               C50678 * C459) *
              C1025 +
          (((C8029 * C889 + C50820 * C894 + C8030 * C1565 + C50714 * C1573) *
                C8031 +
            (C8029 * C895 + C50820 * C904 + C8030 * C1572 + C50714 * C1577) *
                C50848 +
            (C9005 + C9006) * C8032 + (C9007 + C9008) * C50849 +
            (C9009 + C9010) * C8033 + (C9011 + C9012) * C8028) *
               C50678 * C458 -
           (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
            (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C457 -
           ((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 + C50820 * C1228) *
                C8028 +
            (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 + C50820 * C1222) *
                C8033 +
            (C8030 * C2699 + C50714 * C2703 + C8029 * C1223 + C50820 * C1229) *
                C50849 +
            (C8030 * C2694 + C50714 * C2698 + C8029 * C1217 + C50820 * C1224) *
                C8032 +
            (C8030 * C2697 + C50714 * C2702 + C8029 * C1225 + C50820 * C1230) *
                C50848 +
            (C8030 * C2693 + C50714 * C2696 + C8029 * C1218 + C50820 * C1226) *
                C8031) *
               C50678 * C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C8031 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50848 +
             (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 +
             C8083 * C8033 + C8084 * C8028) *
                C50678 * C50808 -
            (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
             (C8465 + C8466) * C8032 +
             (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                 C50848 +
             (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                 C8031) *
                C50678 * C50645) *
               C1025 +
           (((C8029 * C889 + C50820 * C894 + C8030 * C1565 + C50714 * C1573) *
                 C8031 +
             (C8029 * C895 + C50820 * C904 + C8030 * C1572 + C50714 * C1577) *
                 C50848 +
             (C9005 + C9006) * C8032 + (C9007 + C9008) * C50849 +
             (C9009 + C9010) * C8033 + (C9011 + C9012) * C8028) *
                C50678 * C50645 -
            (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
             (C8271 + C8272) * C8032 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50848 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C8031) *
                C50678 * C50808) *
               C50617) *
              C50799 +
          ((((C8466 + C8465) * C8031 + (C8464 + C8463) * C50848 +
             (C8462 + C8461) * C8032 + (C8460 + C8459) * C50849 +
             (C8791 + C8792) * C8033 + (C8793 + C8794) * C8028) *
                C50678 * C50645 -
            (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
             (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
             (C8068 + C8067) * C8031) *
                C50678 * C50808) *
               C1025 +
           (((C8272 + C8271) * C8031 + (C8270 + C8269) * C50848 +
             (C8268 + C8267) * C8032 + (C8266 + C8265) * C50849 +
             (C8631 + C8632) * C8033 + (C8633 + C8634) * C8028) *
                C50678 * C50808 -
            ((C8030 * C1566 + C50714 * C1574 + C8029 * C901 + C50820 * C907) *
                 C8028 +
             (C8030 * C1562 + C50714 * C1567 + C8029 * C892 + C50820 * C900) *
                 C8033 +
             (C9012 + C9011) * C50849 + (C9010 + C9009) * C8032 +
             (C9008 + C9007) * C50848 + (C9006 + C9005) * C8031) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50581 * C1025 -
           (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
            (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C8272 + C8271) * C8031 + (C8270 + C8269) * C50848 +
            (C8268 + C8267) * C8032 + (C8266 + C8265) * C50849 +
            (C8631 + C8632) * C8033 + (C8633 + C8634) * C8028) *
               C50678 * C50581 * C50617 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C50581 * C1025) *
              C1028 +
          ((C8083 * C8031 + C8084 * C50848 + (C8078 + C8077) * C8032 +
            (C8076 + C8075) * C50849 + (C8079 + C8080) * C8033 +
            (C8081 + C8082) * C8028) *
               C50678 * C50581 * C1025 -
           ((C8030 * C311 + C50714 * C322 + C8029 * C310 + C50820 * C321) *
                C8028 +
            (C8030 * C292 + C50714 * C312 + C8029 * C291 + C50820 * C309) *
                C8033 +
            (C8634 + C8633) * C50849 + (C8632 + C8631) * C8032 +
            C8621 * C50848 + C8622 * C8031) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
               C8031 +
           (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
               C50848 +
           (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
           C8084 * C8028) *
              C50678 * C50581 * C1096 -
          (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
           (C8271 + C8272) * C8032 +
           (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
               C50848 +
           (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
               C8031) *
              C50678 * C50581 * C1097 +
          ((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
               C8031 +
           (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
               C50848 +
           (C8273 + C8274) * C8032 + (C8275 + C8276) * C50849 +
           (C8277 + C8278) * C8033 + (C8279 + C8280) * C8028) *
              C50678 * C50581 * C1098 -
          ((C8030 * C2506 + C50714 * C2510 + C8029 * C1107 + C50820 * C1114) *
               C8028 +
           (C8030 * C2501 + C50714 * C2507 + C8029 * C1102 + C50820 * C1108) *
               C8033 +
           (C8030 * C2505 + C50714 * C2509 + C8029 * C1109 + C50820 * C1115) *
               C50849 +
           (C8030 * C2500 + C50714 * C2504 + C8029 * C1103 + C50820 * C1110) *
               C8032 +
           (C8030 * C2503 + C50714 * C2508 + C8029 * C1111 + C50820 * C1116) *
               C50848 +
           (C8030 * C2499 + C50714 * C2502 + C8029 * C1104 + C50820 * C1112) *
               C8031) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C8031 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50848 +
             (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 +
             C8083 * C8033 + C8084 * C8028) *
                C50678 * C1676 -
            (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
             (C8465 + C8466) * C8032 +
             (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                 C50848 +
             (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                 C8031) *
                C50678 * C50645) *
               C50807 +
           (((C8029 * C889 + C50820 * C894 + C8030 * C1565 + C50714 * C1573) *
                 C8031 +
             (C8029 * C895 + C50820 * C904 + C8030 * C1572 + C50714 * C1577) *
                 C50848 +
             (C9005 + C9006) * C8032 + (C9007 + C9008) * C50849 +
             (C9009 + C9010) * C8033 + (C9011 + C9012) * C8028) *
                C50678 * C50645 -
            (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
             (C8271 + C8272) * C8032 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50848 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C8031) *
                C50678 * C1676) *
               C50617) *
              C50799 +
          ((((C8466 + C8465) * C8031 + (C8464 + C8463) * C50848 +
             (C8462 + C8461) * C8032 + (C8460 + C8459) * C50849 +
             (C8791 + C8792) * C8033 + (C8793 + C8794) * C8028) *
                C50678 * C50645 -
            (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
             (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
             (C8068 + C8067) * C8031) *
                C50678 * C1676) *
               C50807 +
           (((C8272 + C8271) * C8031 + (C8270 + C8269) * C50848 +
             (C8268 + C8267) * C8032 + (C8266 + C8265) * C50849 +
             (C8631 + C8632) * C8033 + (C8633 + C8634) * C8028) *
                C50678 * C1676 -
            ((C8030 * C1566 + C50714 * C1574 + C8029 * C901 + C50820 * C907) *
                 C8028 +
             (C8030 * C1562 + C50714 * C1567 + C8029 * C892 + C50820 * C900) *
                 C8033 +
             (C9012 + C9011) * C50849 + (C9010 + C9009) * C8032 +
             (C9008 + C9007) * C50848 + (C9006 + C9005) * C8031) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50854 -
           (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
            (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C50855 +
           ((C8029 * C464 + C50820 * C478 + C8030 * C1218 + C50714 * C1226) *
                C8031 +
            (C8029 * C479 + C50820 * C494 + C8030 * C1225 + C50714 * C1230) *
                C50848 +
            (C8467 + C8468) * C8032 + (C8469 + C8470) * C50849 +
            (C8471 + C8472) * C8033 + (C8473 + C8474) * C8028) *
               C50678 * C2092) *
              C50807 +
          (((C8029 * C889 + C50820 * C894 + C8030 * C1565 + C50714 * C1573) *
                C8031 +
            (C8029 * C895 + C50820 * C904 + C8030 * C1572 + C50714 * C1577) *
                C50848 +
            (C9005 + C9006) * C8032 + (C9007 + C9008) * C50849 +
            (C9009 + C9010) * C8033 + (C9011 + C9012) * C8028) *
               C50678 * C50855 -
           (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
            (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C50854 -
           ((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 + C50820 * C1228) *
                C8028 +
            (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 + C50820 * C1222) *
                C8033 +
            (C8030 * C2699 + C50714 * C2703 + C8029 * C1223 + C50820 * C1229) *
                C50849 +
            (C8030 * C2694 + C50714 * C2698 + C8029 * C1217 + C50820 * C1224) *
                C8032 +
            (C8030 * C2697 + C50714 * C2702 + C8029 * C1225 + C50820 * C1230) *
                C50848 +
            (C8030 * C2693 + C50714 * C2696 + C8029 * C1218 + C50820 * C1226) *
                C8031) *
               C50678 * C2092) *
              C50617) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C1676 -
           (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
            (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C50645) *
              C278 +
          (((C8029 * C889 + C50820 * C894 + C8030 * C1565 + C50714 * C1573) *
                C8031 +
            (C8029 * C895 + C50820 * C904 + C8030 * C1572 + C50714 * C1577) *
                C50848 +
            (C9005 + C9006) * C8032 + (C9007 + C9008) * C50849 +
            (C9009 + C9010) * C8033 + (C9011 + C9012) * C8028) *
               C50678 * C50645 -
           (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
            (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C1676) *
              C279 +
          (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C8031 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50848 +
            (C8273 + C8274) * C8032 + (C8275 + C8276) * C50849 +
            (C8277 + C8278) * C8033 + (C8279 + C8280) * C8028) *
               C50678 * C1676 -
           ((C8030 * C3270 + C50714 * C3274 + C8029 * C1568 + C50820 * C1575) *
                C8028 +
            (C8030 * C3265 + C50714 * C3271 + C8029 * C1563 + C50820 * C1569) *
                C8033 +
            (C8030 * C3269 + C50714 * C3273 + C8029 * C1570 + C50820 * C1576) *
                C50849 +
            (C8030 * C3264 + C50714 * C3268 + C8029 * C1564 + C50820 * C1571) *
                C8032 +
            (C8030 * C3267 + C50714 * C3272 + C8029 * C1572 + C50820 * C1577) *
                C50848 +
            (C8030 * C3263 + C50714 * C3266 + C8029 * C1565 + C50820 * C1573) *
                C8031) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C1676 -
           (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
            (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C8466 + C8465) * C8031 + (C8464 + C8463) * C50848 +
            (C8462 + C8461) * C8032 + (C8460 + C8459) * C50849 +
            (C8791 + C8792) * C8033 + (C8793 + C8794) * C8028) *
               C50678 * C50645 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C1676) *
              C50565 * C1028 +
          ((C8083 * C8031 + C8084 * C50848 + (C8078 + C8077) * C8032 +
            (C8076 + C8075) * C50849 + (C8079 + C8080) * C8033 +
            (C8081 + C8082) * C8028) *
               C50678 * C1676 -
           ((C8030 * C902 + C50714 * C908 + C8029 * C487 + C50820 * C498) *
                C8028 +
            (C8030 * C893 + C50714 * C903 + C8029 * C468 + C50820 * C486) *
                C8033 +
            (C8794 + C8793) * C50849 + (C8792 + C8791) * C8032 +
            C8781 * C50848 + C8782 * C8031) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
               C8031 +
           (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
               C50848 +
           (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
           C8084 * C8028) *
              C50678 * C1842 -
          (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
           (C8465 + C8466) * C8032 +
           (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
               C50848 +
           (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
               C8031) *
              C50678 * C1843 +
          ((C8029 * C464 + C50820 * C478 + C8030 * C1218 + C50714 * C1226) *
               C8031 +
           (C8029 * C479 + C50820 * C494 + C8030 * C1225 + C50714 * C1230) *
               C50848 +
           (C8467 + C8468) * C8032 + (C8469 + C8470) * C50849 +
           (C8471 + C8472) * C8033 + (C8473 + C8474) * C8028) *
              C50678 * C1844 -
          ((C8030 * C6075 + C50714 * C6077 + C8029 * C1852 + C50820 * C1859) *
               C8028 +
           (C8030 * C6074 + C50714 * C6076 + C8029 * C1847 + C50820 * C1853) *
               C8033 +
           (C8030 * C4588 + C50714 * C4596 + C8029 * C1854 + C50820 * C1860) *
               C50849 +
           (C8030 * C4584 + C50714 * C4590 + C8029 * C1848 + C50820 * C1855) *
               C8032 +
           (C8030 * C4592 + C50714 * C4598 + C8029 * C1856 + C50820 * C1861) *
               C50848 +
           (C8030 * C4586 + C50714 * C4594 + C8029 * C1849 + C50820 * C1857) *
               C8031) *
              C50678 * C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C50854 -
           (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
            (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C50855 +
           ((C8029 * C464 + C50820 * C478 + C8030 * C1218 + C50714 * C1226) *
                C8031 +
            (C8029 * C479 + C50820 * C494 + C8030 * C1225 + C50714 * C1230) *
                C50848 +
            (C8467 + C8468) * C8032 + (C8469 + C8470) * C50849 +
            (C8471 + C8472) * C8033 + (C8473 + C8474) * C8028) *
               C50678 * C2092) *
              C50565 * C50799 +
          (((C8466 + C8465) * C8031 + (C8464 + C8463) * C50848 +
            (C8462 + C8461) * C8032 + (C8460 + C8459) * C50849 +
            (C8791 + C8792) * C8033 + (C8793 + C8794) * C8028) *
               C50678 * C50855 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C50854 -
           ((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                C8028 +
            (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                C8033 +
            (C8474 + C8473) * C50849 + (C8472 + C8471) * C8032 +
            (C8470 + C8469) * C50848 + (C8468 + C8467) * C8031) *
               C50678 * C2092) *
              C50565 * C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C1676 -
           (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
            (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C8466 + C8465) * C8031 + (C8464 + C8463) * C50848 +
            (C8462 + C8461) * C8032 + (C8460 + C8459) * C50849 +
            (C8791 + C8792) * C8033 + (C8793 + C8794) * C8028) *
               C50678 * C50645 -
           (C8085 * C8028 + C8086 * C8033 + (C8074 + C8073) * C50849 +
            (C8072 + C8071) * C8032 + (C8070 + C8069) * C50848 +
            (C8068 + C8067) * C8031) *
               C50678 * C1676) *
              C50565 * C1028 +
          ((C8083 * C8031 + C8084 * C50848 + (C8078 + C8077) * C8032 +
            (C8076 + C8075) * C50849 + (C8079 + C8080) * C8033 +
            (C8081 + C8082) * C8028) *
               C50678 * C1676 -
           ((C8030 * C902 + C50714 * C908 + C8029 * C487 + C50820 * C498) *
                C8028 +
            (C8030 * C893 + C50714 * C903 + C8029 * C468 + C50820 * C486) *
                C8033 +
            (C8794 + C8793) * C50849 + (C8792 + C8791) * C8032 +
            C8781 * C50848 + C8782 * C8031) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C8031 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50848 +
            (C8067 + C8068) * C8032 + (C8069 + C8070) * C50849 + C8083 * C8033 +
            C8084 * C8028) *
               C50678 * C1676 -
           (C8781 * C8028 + C8782 * C8033 + (C8463 + C8464) * C50849 +
            (C8465 + C8466) * C8032 +
            (C8030 * C895 + C50714 * C904 + C8029 * C476 + C50820 * C493) *
                C50848 +
            (C8030 * C889 + C50714 * C894 + C8029 * C463 + C50820 * C477) *
                C8031) *
               C50678 * C50645) *
              C278 +
          (((C8029 * C889 + C50820 * C894 + C8030 * C1565 + C50714 * C1573) *
                C8031 +
            (C8029 * C895 + C50820 * C904 + C8030 * C1572 + C50714 * C1577) *
                C50848 +
            (C9005 + C9006) * C8032 + (C9007 + C9008) * C50849 +
            (C9009 + C9010) * C8033 + (C9011 + C9012) * C8028) *
               C50678 * C50645 -
           (C8621 * C8028 + C8622 * C8033 + (C8269 + C8270) * C50849 +
            (C8271 + C8272) * C8032 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50848 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C8031) *
               C50678 * C1676) *
              C279 +
          (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C8031 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50848 +
            (C8273 + C8274) * C8032 + (C8275 + C8276) * C50849 +
            (C8277 + C8278) * C8033 + (C8279 + C8280) * C8028) *
               C50678 * C1676 -
           ((C8030 * C3270 + C50714 * C3274 + C8029 * C1568 + C50820 * C1575) *
                C8028 +
            (C8030 * C3265 + C50714 * C3271 + C8029 * C1563 + C50820 * C1569) *
                C8033 +
            (C8030 * C3269 + C50714 * C3273 + C8029 * C1570 + C50820 * C1576) *
                C50849 +
            (C8030 * C3264 + C50714 * C3268 + C8029 * C1564 + C50820 * C1571) *
                C8032 +
            (C8030 * C3267 + C50714 * C3272 + C8029 * C1572 + C50820 * C1577) *
                C50848 +
            (C8030 * C3263 + C50714 * C3266 + C8029 * C1565 + C50820 * C1573) *
                C8031) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C50581 * C50807 -
           (((C9008 + C9007) * C50523 + (C9006 + C9005) * C2298 +
             (C8030 * C1572 + C50714 * C1577 + C8029 * C895 + C50820 * C904) *
                 C2292 +
             (C8030 * C1565 + C50714 * C1573 + C8029 * C889 + C50820 * C894) *
                 C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C50581 * C50617) *
              C50850 +
          ((((C8272 + C8271) * C2297 + (C8270 + C8269) * C2292 +
             (C8268 + C8267) * C2298 + (C8266 + C8265) * C50523) *
                C50821 +
            ((C9005 + C9006) * C2297 + (C9007 + C9008) * C2292 +
             (C9009 + C9010) * C2298 + (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C50617 -
           ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 + C14012 * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C50581 * C50807) *
              C50851 +
          (((C8083 * C2297 + C8084 * C2292 + (C8078 + C8077) * C2298 +
             (C8076 + C8075) * C50523) *
                C50821 +
            ((C8462 + C8461) * C2297 + (C8460 + C8459) * C2292 +
             (C8791 + C8792) * C2298 + (C8793 + C8794) * C50523) *
                C50742) *
               C50581 * C50807 -
           (((C8030 * C1566 + C50714 * C1574 + C8029 * C901 + C50820 * C907) *
                 C50523 +
             (C8030 * C1562 + C50714 * C1567 + C8029 * C892 + C50820 * C900) *
                 C2298 +
             (C9012 + C9011) * C2292 + (C9010 + C9009) * C2297) *
                C50742 +
            ((C8634 + C8633) * C50523 + (C8632 + C8631) * C2298 +
             C8621 * C2292 + C8622 * C2297) *
                C50821) *
               C50581 * C50617) *
              C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                  C2297 +
              (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                  C2292 +
              (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                 C50821 +
             ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
              C13999 * C2298 + C14000 * C50523) *
                 C50742) *
                C50808 -
            ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
              (C14029 + C14030) * C2297) *
                 C50742 +
             (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
              (C14024 + C14023) * C2297) *
                 C50821) *
                C50645) *
               C50807 +
           ((((C14703 + C14704) * C2297 + (C14705 + C14706) * C2292 +
              C14691 * C2298 + C14692 * C50523) *
                 C50821 +
             ((C8029 * C1218 + C50820 * C1226 + C8030 * C2693 +
               C50714 * C2696) *
                  C2297 +
              (C8029 * C1225 + C50820 * C1230 + C8030 * C2697 +
               C50714 * C2702) *
                  C2292 +
              (C14707 + C14708) * C2298 + (C14709 + C14710) * C50523) *
                 C50742) *
                C50645 -
            ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
              (C14704 + C14703) * C2297) *
                 C50742 +
             ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
              (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                  C2292 +
              (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                  C2297) *
                 C50821) *
                C50808) *
               C50617) *
              C281 +
          ((((C13999 * C2297 + C14000 * C2292 + C14423 * C2298 +
              C14424 * C50523) *
                 C50821 +
             (C14013 * C2297 + C14014 * C2292 + (C8471 + C8472) * C2298 +
              (C8473 + C8474) * C50523) *
                 C50742) *
                C50645 -
            ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 +
              C14012 * C2297) *
                 C50742 +
             ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
              (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                 C50821) *
                C50808) *
               C50807 +
           ((((C8272 + C8271) * C2297 + (C8270 + C8269) * C2292 +
              (C8268 + C8267) * C2298 + (C8266 + C8265) * C50523) *
                 C50821 +
             (C14691 * C2297 + C14692 * C2292 + (C9009 + C9010) * C2298 +
              (C9011 + C9012) * C50523) *
                 C50742) *
                C50808 -
            (((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 +
               C50820 * C1228) *
                  C50523 +
              (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 +
               C50820 * C1222) *
                  C2298 +
              (C14710 + C14709) * C2292 + (C14708 + C14707) * C2297) *
                 C50742 +
             ((C9012 + C9011) * C50523 + (C9010 + C9009) * C2298 +
              C14701 * C2292 + C14702 * C2297) *
                 C50821) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C8029 * C463 + C50820 * C477 + C8030 * C889 + C50714 * C894) *
                 C2297 +
             (C8029 * C476 + C50820 * C493 + C8030 * C895 + C50714 * C904) *
                 C2292 +
             (C8466 + C8465) * C2298 + (C8464 + C8463) * C50523) *
                C50742) *
               C50581 * C278 -
           (((C9008 + C9007) * C50523 + (C9006 + C9005) * C2298 +
             (C8030 * C1572 + C50714 * C1577 + C8029 * C895 + C50820 * C904) *
                 C2292 +
             (C8030 * C1565 + C50714 * C1573 + C8029 * C889 + C50820 * C894) *
                 C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C50581 * C279 +
           (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C2297 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C2292 +
             (C8273 + C8274) * C2298 + (C8275 + C8276) * C50523) *
                C50821 +
            ((C8029 * C1565 + C50820 * C1573 + C8030 * C3263 + C50714 * C3266) *
                 C2297 +
             (C8029 * C1572 + C50820 * C1577 + C8030 * C3267 + C50714 * C3272) *
                 C2292 +
             (C13793 + C13794) * C2298 + (C13795 + C13796) * C50523) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C8272 + C8271) * C2297 + (C8270 + C8269) * C2292 +
             (C8268 + C8267) * C2298 + (C8266 + C8265) * C50523) *
                C50821 +
            ((C9005 + C9006) * C2297 + (C9007 + C9008) * C2292 +
             (C9009 + C9010) * C2298 + (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C279 -
           ((C8781 * C50523 + C8782 * C2298 + (C8463 + C8464) * C2292 +
             (C8465 + C8466) * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C50581 * C278 -
           (((C8030 * C3270 + C50714 * C3274 + C8029 * C1568 + C50820 * C1575) *
                 C50523 +
             (C8030 * C3265 + C50714 * C3271 + C8029 * C1563 + C50820 * C1569) *
                 C2298 +
             (C13796 + C13795) * C2292 + (C13794 + C13793) * C2297) *
                C50742 +
            ((C8280 + C8279) * C50523 + (C8278 + C8277) * C2298 +
             (C8276 + C8275) * C2292 + (C8274 + C8273) * C2297) *
                C50821) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C2297 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C2292 +
            (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
               C50821 +
           ((C8029 * C463 + C50820 * C477 + C8030 * C889 + C50714 * C894) *
                C2297 +
            (C8029 * C476 + C50820 * C493 + C8030 * C895 + C50714 * C904) *
                C2292 +
            (C8466 + C8465) * C2298 + (C8464 + C8463) * C50523) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C8781 * C50523 + C8782 * C2298 + (C8463 + C8464) * C2292 +
            (C8465 + C8466) * C2297) *
               C50742 +
           ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
            (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
               C50821) *
              C50581 * C50565 * C114 +
          ((C8083 * C2297 + C8084 * C2292 + (C8078 + C8077) * C2298 +
            (C8076 + C8075) * C50523) *
               C50821 +
           ((C8462 + C8461) * C2297 + (C8460 + C8459) * C2292 +
            (C8791 + C8792) * C2298 + (C8793 + C8794) * C50523) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C8030 * C902 + C50714 * C908 + C8029 * C487 + C50820 * C498) *
                C50523 +
            (C8030 * C893 + C50714 * C903 + C8029 * C468 + C50820 * C486) *
                C2298 +
            (C8794 + C8793) * C2292 + (C8792 + C8791) * C2297) *
               C50742 +
           ((C8082 + C8081) * C50523 + (C8080 + C8079) * C2298 + C8085 * C2292 +
            C8086 * C2297) *
               C50821) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C457 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C458 +
           (((C14030 + C14029) * C2297 + (C14028 + C14027) * C2292 +
             C14013 * C2298 + C14014 * C50523) *
                C50821 +
            ((C8029 * C1849 + C50820 * C1857 + C8030 * C4586 + C50714 * C4594) *
                 C2297 +
             (C8029 * C1856 + C50820 * C1861 + C8030 * C4592 + C50714 * C4598) *
                 C2292 +
             (C14031 + C14032) * C2298 + (C14033 + C14034) * C50523) *
                C50742) *
               C459) *
              C50565 * C281 +
          (((C13999 * C2297 + C14000 * C2292 + (C8462 + C8461) * C2298 +
             (C8460 + C8459) * C50523) *
                C50821 +
            (C14013 * C2297 + C14014 * C2292 + (C8471 + C8472) * C2298 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C458 -
           ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 + C14012 * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C457 -
           (((C8030 * C6075 + C50714 * C6077 + C8029 * C1852 + C50820 * C1859) *
                 C50523 +
             (C8030 * C6074 + C50714 * C6076 + C8029 * C1847 + C50820 * C1853) *
                 C2298 +
             (C14034 + C14033) * C2292 + (C14032 + C14031) * C2297) *
                C50742 +
            ((C8474 + C8473) * C50523 + (C8472 + C8471) * C2298 +
             C14001 * C2292 + C14002 * C2297) *
                C50821) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C50808 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C50645) *
              C50565 * C50850 +
          (((C13999 * C2297 + C14000 * C2292 + C14423 * C2298 +
             C14424 * C50523) *
                C50821 +
            (C14013 * C2297 + C14014 * C2292 + (C8471 + C8472) * C2298 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C50645 -
           ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 + C14012 * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C50808) *
              C50565 * C50851 +
          (((C8083 * C2297 + C8084 * C2292 + (C8078 + C8077) * C2298 +
             (C8076 + C8075) * C50523) *
                C50821 +
            (C14423 * C2297 + C14424 * C2292 + (C8791 + C8792) * C2298 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C50808 -
           (((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                 C50523 +
             (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                 C2298 +
             (C8474 + C8473) * C2292 + (C8472 + C8471) * C2297) *
                C50742 +
            ((C8794 + C8793) * C50523 + (C8792 + C8791) * C2298 +
             C8781 * C2292 + C8782 * C2297) *
                C50821) *
               C50645) *
              C50565 * C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C2297 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C2292 +
            (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
               C50821 +
           ((C8029 * C463 + C50820 * C477 + C8030 * C889 + C50714 * C894) *
                C2297 +
            (C8029 * C476 + C50820 * C493 + C8030 * C895 + C50714 * C904) *
                C2292 +
            (C8466 + C8465) * C2298 + (C8464 + C8463) * C50523) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C8781 * C50523 + C8782 * C2298 + (C8463 + C8464) * C2292 +
            (C8465 + C8466) * C2297) *
               C50742 +
           ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
            (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
               C50821) *
              C50581 * C50565 * C114 +
          ((C8083 * C2297 + C8084 * C2292 + (C8078 + C8077) * C2298 +
            (C8076 + C8075) * C50523) *
               C50821 +
           ((C8462 + C8461) * C2297 + (C8460 + C8459) * C2292 +
            (C8791 + C8792) * C2298 + (C8793 + C8794) * C50523) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C8030 * C902 + C50714 * C908 + C8029 * C487 + C50820 * C498) *
                C50523 +
            (C8030 * C893 + C50714 * C903 + C8029 * C468 + C50820 * C486) *
                C2298 +
            (C8794 + C8793) * C2292 + (C8792 + C8791) * C2297) *
               C50742 +
           ((C8082 + C8081) * C50523 + (C8080 + C8079) * C2298 + C8085 * C2292 +
            C8086 * C2297) *
               C50821) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C8029 * C463 + C50820 * C477 + C8030 * C889 + C50714 * C894) *
                 C2297 +
             (C8029 * C476 + C50820 * C493 + C8030 * C895 + C50714 * C904) *
                 C2292 +
             (C8466 + C8465) * C2298 + (C8464 + C8463) * C50523) *
                C50742) *
               C50581 * C278 -
           (((C9008 + C9007) * C50523 + (C9006 + C9005) * C2298 +
             (C8030 * C1572 + C50714 * C1577 + C8029 * C895 + C50820 * C904) *
                 C2292 +
             (C8030 * C1565 + C50714 * C1573 + C8029 * C889 + C50820 * C894) *
                 C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C50581 * C279 +
           (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C2297 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C2292 +
             (C8273 + C8274) * C2298 + (C8275 + C8276) * C50523) *
                C50821 +
            ((C8029 * C1565 + C50820 * C1573 + C8030 * C3263 + C50714 * C3266) *
                 C2297 +
             (C8029 * C1572 + C50820 * C1577 + C8030 * C3267 + C50714 * C3272) *
                 C2292 +
             (C13793 + C13794) * C2298 + (C13795 + C13796) * C50523) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C8272 + C8271) * C2297 + (C8270 + C8269) * C2292 +
             (C8268 + C8267) * C2298 + (C8266 + C8265) * C50523) *
                C50821 +
            ((C9005 + C9006) * C2297 + (C9007 + C9008) * C2292 +
             (C9009 + C9010) * C2298 + (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C279 -
           ((C8781 * C50523 + C8782 * C2298 + (C8463 + C8464) * C2292 +
             (C8465 + C8466) * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C50581 * C278 -
           (((C8030 * C3270 + C50714 * C3274 + C8029 * C1568 + C50820 * C1575) *
                 C50523 +
             (C8030 * C3265 + C50714 * C3271 + C8029 * C1563 + C50820 * C1569) *
                 C2298 +
             (C13796 + C13795) * C2292 + (C13794 + C13793) * C2297) *
                C50742 +
            ((C8280 + C8279) * C50523 + (C8278 + C8277) * C2298 +
             (C8276 + C8275) * C2292 + (C8274 + C8273) * C2297) *
                C50821) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C50581 * C50852 -
           ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
             (C14704 + C14703) * C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C50581 * C50853 +
           (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C2297 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C2292 +
             (C8273 + C8274) * C2298 + (C8275 + C8276) * C50523) *
                C50821 +
            ((C8029 * C1565 + C50820 * C1573 + C8030 * C3263 + C50714 * C3266) *
                 C2297 +
             (C8029 * C1572 + C50820 * C1577 + C8030 * C3267 + C50714 * C3272) *
                 C2292 +
             (C13793 + C13794) * C2298 + (C13795 + C13796) * C50523) *
                C50742) *
               C50581 * C1331) *
              C50799 +
          ((((C8272 + C8271) * C2297 + (C8270 + C8269) * C2292 +
             (C8268 + C8267) * C2298 + (C8266 + C8265) * C50523) *
                C50821 +
            (C14691 * C2297 + C14692 * C2292 + (C9009 + C9010) * C2298 +
             (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C50853 -
           ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 + C14012 * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C50581 * C50852 -
           (((C8030 * C3270 + C50714 * C3274 + C8029 * C1568 + C50820 * C1575) *
                 C50523 +
             (C8030 * C3265 + C50714 * C3271 + C8029 * C1563 + C50820 * C1569) *
                 C2298 +
             (C13796 + C13795) * C2292 + (C13794 + C13793) * C2297) *
                C50742 +
            ((C8280 + C8279) * C50523 + (C8278 + C8277) * C2298 +
             (C8276 + C8275) * C2292 + (C8274 + C8273) * C2297) *
                C50821) *
               C50581 * C1331) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C50808 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C50645) *
              C50852 +
          ((((C14703 + C14704) * C2297 + (C14705 + C14706) * C2292 +
             C14691 * C2298 + C14692 * C50523) *
                C50821 +
            ((C15237 + C15238) * C2297 + (C15239 + C15240) * C2292 +
             (C14707 + C14708) * C2298 + (C14709 + C14710) * C50523) *
                C50742) *
               C50645 -
           ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
             (C14704 + C14703) * C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C50808) *
              C50853 +
          ((((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C2297 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C2292 +
             (C8273 + C8274) * C2298 + (C8275 + C8276) * C50523) *
                C50821 +
            ((C15895 + C15896) * C2297 + (C15897 + C15898) * C2292 +
             (C13793 + C13794) * C2298 + (C13795 + C13796) * C50523) *
                C50742) *
               C50808 -
           (((C8030 * C3693 + C50714 * C3697 + C8029 * C2699 + C50820 * C2703) *
                 C50523 +
             (C8030 * C3691 + C50714 * C3694 + C8029 * C2694 + C50820 * C2698) *
                 C2298 +
             (C8030 * C3695 + C50714 * C3698 + C8029 * C2697 + C50820 * C2702) *
                 C2292 +
             (C8030 * C3692 + C50714 * C3696 + C8029 * C2693 + C50820 * C2696) *
                 C2297) *
                C50742 +
            ((C13796 + C13795) * C50523 + (C13794 + C13793) * C2298 +
             (C15898 + C15897) * C2292 + (C15896 + C15895) * C2297) *
                C50821) *
               C50645) *
              C1331) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C2297 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C2292 +
            (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
               C50821 +
           ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
            C13999 * C2298 + C14000 * C50523) *
               C50742) *
              C50581 * C1096 -
          ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
            (C14704 + C14703) * C2297) *
               C50742 +
           ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C2292 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C2297) *
               C50821) *
              C50581 * C1097 +
          (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C2297 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C2292 +
            (C8273 + C8274) * C2298 + (C8275 + C8276) * C50523) *
               C50821 +
           ((C8029 * C1565 + C50820 * C1573 + C8030 * C3263 + C50714 * C3266) *
                C2297 +
            (C8029 * C1572 + C50820 * C1577 + C8030 * C3267 + C50714 * C3272) *
                C2292 +
            (C13793 + C13794) * C2298 + (C13795 + C13796) * C50523) *
               C50742) *
              C50581 * C1098 -
          (((C8030 * C4187 + C50714 * C4191 + C8029 * C3269 + C50820 * C3273) *
                C50523 +
            (C8030 * C4185 + C50714 * C4188 + C8029 * C3264 + C50820 * C3268) *
                C2298 +
            (C8030 * C4189 + C50714 * C4192 + C8029 * C3267 + C50820 * C3272) *
                C2292 +
            (C8030 * C4186 + C50714 * C4190 + C8029 * C3263 + C50820 * C3266) *
                C2297) *
               C50742 +
           ((C8030 * C2505 + C50714 * C2509 + C8029 * C1109 + C50820 * C1115) *
                C50523 +
            (C8030 * C2500 + C50714 * C2504 + C8029 * C1103 + C50820 * C1110) *
                C2298 +
            (C8030 * C2503 + C50714 * C2508 + C8029 * C1111 + C50820 * C1116) *
                C2292 +
            (C8030 * C2499 + C50714 * C2502 + C8029 * C1104 + C50820 * C1112) *
                C2297) *
               C50821) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C50581 * C1025 -
           ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
             (C14704 + C14703) * C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C50581 * C50617) *
              C1027 +
          ((((C8272 + C8271) * C2297 + (C8270 + C8269) * C2292 +
             (C8268 + C8267) * C2298 + (C8266 + C8265) * C50523) *
                C50821 +
            (C14691 * C2297 + C14692 * C2292 + (C9009 + C9010) * C2298 +
             (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C50617 -
           ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 + C14012 * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C50581 * C1025) *
              C1028 +
          (((C8083 * C2297 + C8084 * C2292 + (C8078 + C8077) * C2298 +
             (C8076 + C8075) * C50523) *
                C50821 +
            (C14423 * C2297 + C14424 * C2292 + (C8791 + C8792) * C2298 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C50581 * C1025 -
           (((C8030 * C1566 + C50714 * C1574 + C8029 * C901 + C50820 * C907) *
                 C50523 +
             (C8030 * C1562 + C50714 * C1567 + C8029 * C892 + C50820 * C900) *
                 C2298 +
             (C9012 + C9011) * C2292 + (C9010 + C9009) * C2297) *
                C50742 +
            ((C8634 + C8633) * C50523 + (C8632 + C8631) * C2298 +
             C8621 * C2292 + C8622 * C2297) *
                C50821) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C457 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C458 +
           (((C14030 + C14029) * C2297 + (C14028 + C14027) * C2292 +
             C14013 * C2298 + C14014 * C50523) *
                C50821 +
            ((C8029 * C1849 + C50820 * C1857 + C8030 * C4586 + C50714 * C4594) *
                 C2297 +
             (C8029 * C1856 + C50820 * C1861 + C8030 * C4592 + C50714 * C4598) *
                 C2292 +
             (C14031 + C14032) * C2298 + (C14033 + C14034) * C50523) *
                C50742) *
               C459) *
              C1025 +
          ((((C14703 + C14704) * C2297 + (C14705 + C14706) * C2292 +
             C14691 * C2298 + C14692 * C50523) *
                C50821 +
            ((C15237 + C15238) * C2297 + (C15239 + C15240) * C2292 +
             (C14707 + C14708) * C2298 + (C14709 + C14710) * C50523) *
                C50742) *
               C458 -
           ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
             (C14704 + C14703) * C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C457 -
           (((C8030 * C4587 + C50714 * C4595 + C8029 * C4588 + C50820 * C4596) *
                 C50523 +
             (C8030 * C4583 + C50714 * C4589 + C8029 * C4584 + C50820 * C4590) *
                 C2298 +
             (C8030 * C4591 + C50714 * C4597 + C8029 * C4592 + C50820 * C4598) *
                 C2292 +
             (C8030 * C4585 + C50714 * C4593 + C8029 * C4586 + C50820 * C4594) *
                 C2297) *
                C50742 +
            ((C14710 + C14709) * C50523 + (C14708 + C14707) * C2298 +
             (C15240 + C15239) * C2292 + (C15238 + C15237) * C2297) *
                C50821) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                  C2297 +
              (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                  C2292 +
              (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                 C50821 +
             ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
              C13999 * C2298 + C14000 * C50523) *
                 C50742) *
                C50808 -
            ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
              (C14029 + C14030) * C2297) *
                 C50742 +
             (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
              (C14024 + C14023) * C2297) *
                 C50821) *
                C50645) *
               C1025 +
           ((((C14703 + C14704) * C2297 + (C14705 + C14706) * C2292 +
              C14691 * C2298 + C14692 * C50523) *
                 C50821 +
             ((C15237 + C15238) * C2297 + (C15239 + C15240) * C2292 +
              (C14707 + C14708) * C2298 + (C14709 + C14710) * C50523) *
                 C50742) *
                C50645 -
            ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
              (C14704 + C14703) * C2297) *
                 C50742 +
             ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
              (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                  C2292 +
              (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                  C2297) *
                 C50821) *
                C50808) *
               C50617) *
              C50799 +
          ((((C13999 * C2297 + C14000 * C2292 + C14423 * C2298 +
              C14424 * C50523) *
                 C50821 +
             (C14013 * C2297 + C14014 * C2292 + (C8471 + C8472) * C2298 +
              (C8473 + C8474) * C50523) *
                 C50742) *
                C50645 -
            ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 +
              C14012 * C2297) *
                 C50742 +
             ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
              (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                 C50821) *
                C50808) *
               C1025 +
           ((((C8272 + C8271) * C2297 + (C8270 + C8269) * C2292 +
              (C8268 + C8267) * C2298 + (C8266 + C8265) * C50523) *
                 C50821 +
             (C14691 * C2297 + C14692 * C2292 + (C9009 + C9010) * C2298 +
              (C9011 + C9012) * C50523) *
                 C50742) *
                C50808 -
            (((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 +
               C50820 * C1228) *
                  C50523 +
              (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 +
               C50820 * C1222) *
                  C2298 +
              (C14710 + C14709) * C2292 + (C14708 + C14707) * C2297) *
                 C50742 +
             ((C9012 + C9011) * C50523 + (C9010 + C9009) * C2298 +
              C14701 * C2292 + C14702 * C2297) *
                 C50821) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C50581 * C1025 -
           ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
             (C14704 + C14703) * C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C50581 * C50617) *
              C1027 +
          ((((C8272 + C8271) * C2297 + (C8270 + C8269) * C2292 +
             (C8268 + C8267) * C2298 + (C8266 + C8265) * C50523) *
                C50821 +
            (C14691 * C2297 + C14692 * C2292 + (C9009 + C9010) * C2298 +
             (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C50617 -
           ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 + C14012 * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C50581 * C1025) *
              C1028 +
          (((C8083 * C2297 + C8084 * C2292 + (C8078 + C8077) * C2298 +
             (C8076 + C8075) * C50523) *
                C50821 +
            (C14423 * C2297 + C14424 * C2292 + (C8791 + C8792) * C2298 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C50581 * C1025 -
           (((C8030 * C1566 + C50714 * C1574 + C8029 * C901 + C50820 * C907) *
                 C50523 +
             (C8030 * C1562 + C50714 * C1567 + C8029 * C892 + C50820 * C900) *
                 C2298 +
             (C9012 + C9011) * C2292 + (C9010 + C9009) * C2297) *
                C50742 +
            ((C8634 + C8633) * C50523 + (C8632 + C8631) * C2298 +
             C8621 * C2292 + C8622 * C2297) *
                C50821) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C2297 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C2292 +
            (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
               C50821 +
           ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
            C13999 * C2298 + C14000 * C50523) *
               C50742) *
              C50581 * C1096 -
          ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
            (C14704 + C14703) * C2297) *
               C50742 +
           ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C2292 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C2297) *
               C50821) *
              C50581 * C1097 +
          (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C2297 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C2292 +
            (C8273 + C8274) * C2298 + (C8275 + C8276) * C50523) *
               C50821 +
           ((C8029 * C1565 + C50820 * C1573 + C8030 * C3263 + C50714 * C3266) *
                C2297 +
            (C8029 * C1572 + C50820 * C1577 + C8030 * C3267 + C50714 * C3272) *
                C2292 +
            (C13793 + C13794) * C2298 + (C13795 + C13796) * C50523) *
               C50742) *
              C50581 * C1098 -
          (((C8030 * C4187 + C50714 * C4191 + C8029 * C3269 + C50820 * C3273) *
                C50523 +
            (C8030 * C4185 + C50714 * C4188 + C8029 * C3264 + C50820 * C3268) *
                C2298 +
            (C8030 * C4189 + C50714 * C4192 + C8029 * C3267 + C50820 * C3272) *
                C2292 +
            (C8030 * C4186 + C50714 * C4190 + C8029 * C3263 + C50820 * C3266) *
                C2297) *
               C50742 +
           ((C8030 * C2505 + C50714 * C2509 + C8029 * C1109 + C50820 * C1115) *
                C50523 +
            (C8030 * C2500 + C50714 * C2504 + C8029 * C1103 + C50820 * C1110) *
                C2298 +
            (C8030 * C2503 + C50714 * C2508 + C8029 * C1111 + C50820 * C1116) *
                C2292 +
            (C8030 * C2499 + C50714 * C2502 + C8029 * C1104 + C50820 * C1112) *
                C2297) *
               C50821) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                  C2297 +
              (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                  C2292 +
              (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                 C50821 +
             ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
              C13999 * C2298 + C14000 * C50523) *
                 C50742) *
                C1676 -
            ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
              (C14029 + C14030) * C2297) *
                 C50742 +
             (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
              (C14024 + C14023) * C2297) *
                 C50821) *
                C50645) *
               C50807 +
           ((((C14703 + C14704) * C2297 + (C14705 + C14706) * C2292 +
              C14691 * C2298 + C14692 * C50523) *
                 C50821 +
             ((C15237 + C15238) * C2297 + (C15239 + C15240) * C2292 +
              (C14707 + C14708) * C2298 + (C14709 + C14710) * C50523) *
                 C50742) *
                C50645 -
            ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
              (C14704 + C14703) * C2297) *
                 C50742 +
             ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
              (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                  C2292 +
              (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                  C2297) *
                 C50821) *
                C1676) *
               C50617) *
              C50799 +
          ((((C13999 * C2297 + C14000 * C2292 + C14423 * C2298 +
              C14424 * C50523) *
                 C50821 +
             (C14013 * C2297 + C14014 * C2292 + (C8471 + C8472) * C2298 +
              (C8473 + C8474) * C50523) *
                 C50742) *
                C50645 -
            ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 +
              C14012 * C2297) *
                 C50742 +
             ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
              (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                 C50821) *
                C1676) *
               C50807 +
           ((((C8272 + C8271) * C2297 + (C8270 + C8269) * C2292 +
              (C8268 + C8267) * C2298 + (C8266 + C8265) * C50523) *
                 C50821 +
             (C14691 * C2297 + C14692 * C2292 + (C9009 + C9010) * C2298 +
              (C9011 + C9012) * C50523) *
                 C50742) *
                C1676 -
            (((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 +
               C50820 * C1228) *
                  C50523 +
              (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 +
               C50820 * C1222) *
                  C2298 +
              (C14710 + C14709) * C2292 + (C14708 + C14707) * C2297) *
                 C50742 +
             ((C9012 + C9011) * C50523 + (C9010 + C9009) * C2298 +
              C14701 * C2292 + C14702 * C2297) *
                 C50821) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C50854 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C50855 +
           (((C14030 + C14029) * C2297 + (C14028 + C14027) * C2292 +
             C14013 * C2298 + C14014 * C50523) *
                C50821 +
            ((C16425 + C16426) * C2297 + (C16427 + C16428) * C2292 +
             (C14031 + C14032) * C2298 + (C14033 + C14034) * C50523) *
                C50742) *
               C2092) *
              C50807 +
          ((((C14703 + C14704) * C2297 + (C14705 + C14706) * C2292 +
             C14691 * C2298 + C14692 * C50523) *
                C50821 +
            ((C15237 + C15238) * C2297 + (C15239 + C15240) * C2292 +
             (C14707 + C14708) * C2298 + (C14709 + C14710) * C50523) *
                C50742) *
               C50855 -
           ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
             (C14704 + C14703) * C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C50854 -
           (((C8030 * C4587 + C50714 * C4595 + C8029 * C4588 + C50820 * C4596) *
                 C50523 +
             (C8030 * C4583 + C50714 * C4589 + C8029 * C4584 + C50820 * C4590) *
                 C2298 +
             (C8030 * C4591 + C50714 * C4597 + C8029 * C4592 + C50820 * C4598) *
                 C2292 +
             (C8030 * C4585 + C50714 * C4593 + C8029 * C4586 + C50820 * C4594) *
                 C2297) *
                C50742 +
            ((C14710 + C14709) * C50523 + (C14708 + C14707) * C2298 +
             (C15240 + C15239) * C2292 + (C15238 + C15237) * C2297) *
                C50821) *
               C2092) *
              C50617) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C1676 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C50645) *
              C278 +
          ((((C14703 + C14704) * C2297 + (C14705 + C14706) * C2292 +
             C14691 * C2298 + C14692 * C50523) *
                C50821 +
            ((C15237 + C15238) * C2297 + (C15239 + C15240) * C2292 +
             (C14707 + C14708) * C2298 + (C14709 + C14710) * C50523) *
                C50742) *
               C50645 -
           ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
             (C14704 + C14703) * C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C1676) *
              C279 +
          ((((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C2297 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C2292 +
             (C8273 + C8274) * C2298 + (C8275 + C8276) * C50523) *
                C50821 +
            ((C15895 + C15896) * C2297 + (C15897 + C15898) * C2292 +
             (C13793 + C13794) * C2298 + (C13795 + C13796) * C50523) *
                C50742) *
               C1676 -
           (((C8030 * C3693 + C50714 * C3697 + C8029 * C2699 + C50820 * C2703) *
                 C50523 +
             (C8030 * C3691 + C50714 * C3694 + C8029 * C2694 + C50820 * C2698) *
                 C2298 +
             (C8030 * C3695 + C50714 * C3698 + C8029 * C2697 + C50820 * C2702) *
                 C2292 +
             (C8030 * C3692 + C50714 * C3696 + C8029 * C2693 + C50820 * C2696) *
                 C2297) *
                C50742 +
            ((C13796 + C13795) * C50523 + (C13794 + C13793) * C2298 +
             (C15898 + C15897) * C2292 + (C15896 + C15895) * C2297) *
                C50821) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C1676 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C50645) *
              C50565 * C1027 +
          (((C13999 * C2297 + C14000 * C2292 + C14423 * C2298 +
             C14424 * C50523) *
                C50821 +
            (C14013 * C2297 + C14014 * C2292 + (C8471 + C8472) * C2298 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C50645 -
           ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 + C14012 * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C1676) *
              C50565 * C1028 +
          (((C8083 * C2297 + C8084 * C2292 + (C8078 + C8077) * C2298 +
             (C8076 + C8075) * C50523) *
                C50821 +
            (C14423 * C2297 + C14424 * C2292 + (C8791 + C8792) * C2298 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C1676 -
           (((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                 C50523 +
             (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                 C2298 +
             (C8474 + C8473) * C2292 + (C8472 + C8471) * C2297) *
                C50742 +
            ((C8794 + C8793) * C50523 + (C8792 + C8791) * C2298 +
             C8781 * C2292 + C8782 * C2297) *
                C50821) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C2297 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C2292 +
            (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
               C50821 +
           ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
            C13999 * C2298 + C14000 * C50523) *
               C50742) *
              C1842 -
          ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
            (C14029 + C14030) * C2297) *
               C50742 +
           (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
            (C14024 + C14023) * C2297) *
               C50821) *
              C1843 +
          (((C14030 + C14029) * C2297 + (C14028 + C14027) * C2292 +
            C14013 * C2298 + C14014 * C50523) *
               C50821 +
           ((C16425 + C16426) * C2297 + (C16427 + C16428) * C2292 +
            (C14031 + C14032) * C2298 + (C14033 + C14034) * C50523) *
               C50742) *
              C1844 -
          (((C8030 * C6504 + C50714 * C6508 + C8029 * C5502 + C50820 * C5506) *
                C50523 +
            (C8030 * C6502 + C50714 * C6505 + C8029 * C5497 + C50820 * C5501) *
                C2298 +
            (C8030 * C6506 + C50714 * C6509 + C8029 * C5500 + C50820 * C5505) *
                C2292 +
            (C8030 * C6503 + C50714 * C6507 + C8029 * C5496 + C50820 * C5499) *
                C2297) *
               C50742 +
           ((C14034 + C14033) * C50523 + (C14032 + C14031) * C2298 +
            (C16428 + C16427) * C2292 + (C16426 + C16425) * C2297) *
               C50821) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C50854 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C50855 +
           (((C14030 + C14029) * C2297 + (C14028 + C14027) * C2292 +
             C14013 * C2298 + C14014 * C50523) *
                C50821 +
            ((C16425 + C16426) * C2297 + (C16427 + C16428) * C2292 +
             (C14031 + C14032) * C2298 + (C14033 + C14034) * C50523) *
                C50742) *
               C2092) *
              C50565 * C50799 +
          (((C13999 * C2297 + C14000 * C2292 + C14423 * C2298 +
             C14424 * C50523) *
                C50821 +
            (C14013 * C2297 + C14014 * C2292 + (C8471 + C8472) * C2298 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C50855 -
           ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 + C14012 * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C50854 -
           (((C8030 * C6075 + C50714 * C6077 + C8029 * C1852 + C50820 * C1859) *
                 C50523 +
             (C8030 * C6074 + C50714 * C6076 + C8029 * C1847 + C50820 * C1853) *
                 C2298 +
             (C14034 + C14033) * C2292 + (C14032 + C14031) * C2297) *
                C50742 +
            ((C8474 + C8473) * C50523 + (C8472 + C8471) * C2298 +
             C14001 * C2292 + C14002 * C2297) *
                C50821) *
               C2092) *
              C50565 * C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C1676 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C50645) *
              C50565 * C1027 +
          (((C13999 * C2297 + C14000 * C2292 + C14423 * C2298 +
             C14424 * C50523) *
                C50821 +
            (C14013 * C2297 + C14014 * C2292 + (C8471 + C8472) * C2298 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C50645 -
           ((C8781 * C50523 + C8782 * C2298 + C14011 * C2292 + C14012 * C2297) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C2298 +
             (C8070 + C8069) * C2292 + (C8068 + C8067) * C2297) *
                C50821) *
               C1676) *
              C50565 * C1028 +
          (((C8083 * C2297 + C8084 * C2292 + (C8078 + C8077) * C2298 +
             (C8076 + C8075) * C50523) *
                C50821 +
            (C14423 * C2297 + C14424 * C2292 + (C8791 + C8792) * C2298 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C1676 -
           (((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                 C50523 +
             (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                 C2298 +
             (C8474 + C8473) * C2292 + (C8472 + C8471) * C2297) *
                C50742 +
            ((C8794 + C8793) * C50523 + (C8792 + C8791) * C2298 +
             C8781 * C2292 + C8782 * C2297) *
                C50821) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C2297 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C2292 +
             (C8067 + C8068) * C2298 + (C8069 + C8070) * C50523) *
                C50821 +
            ((C14023 + C14024) * C2297 + (C14025 + C14026) * C2292 +
             C13999 * C2298 + C14000 * C50523) *
                C50742) *
               C1676 -
           ((C14001 * C50523 + C14002 * C2298 + (C14027 + C14028) * C2292 +
             (C14029 + C14030) * C2297) *
                C50742 +
            (C14011 * C50523 + C14012 * C2298 + (C14026 + C14025) * C2292 +
             (C14024 + C14023) * C2297) *
                C50821) *
               C50645) *
              C278 +
          ((((C14703 + C14704) * C2297 + (C14705 + C14706) * C2292 +
             C14691 * C2298 + C14692 * C50523) *
                C50821 +
            ((C15237 + C15238) * C2297 + (C15239 + C15240) * C2292 +
             (C14707 + C14708) * C2298 + (C14709 + C14710) * C50523) *
                C50742) *
               C50645 -
           ((C14701 * C50523 + C14702 * C2298 + (C14706 + C14705) * C2292 +
             (C14704 + C14703) * C2297) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C2298 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C2292 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C2297) *
                C50821) *
               C1676) *
              C279 +
          ((((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C2297 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C2292 +
             (C8273 + C8274) * C2298 + (C8275 + C8276) * C50523) *
                C50821 +
            ((C15895 + C15896) * C2297 + (C15897 + C15898) * C2292 +
             (C13793 + C13794) * C2298 + (C13795 + C13796) * C50523) *
                C50742) *
               C1676 -
           (((C8030 * C3693 + C50714 * C3697 + C8029 * C2699 + C50820 * C2703) *
                 C50523 +
             (C8030 * C3691 + C50714 * C3694 + C8029 * C2694 + C50820 * C2698) *
                 C2298 +
             (C8030 * C3695 + C50714 * C3698 + C8029 * C2697 + C50820 * C2702) *
                 C2292 +
             (C8030 * C3692 + C50714 * C3696 + C8029 * C2693 + C50820 * C2696) *
                 C2297) *
                C50742 +
            ((C13796 + C13795) * C50523 + (C13794 + C13793) * C2298 +
             (C15898 + C15897) * C2292 + (C15896 + C15895) * C2297) *
                C50821) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C50807 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C50617) *
              C50850 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2900 + C2901 + C2902) * C2298 +
            (C2903 + C2904 + C2905) * C50523) *
               C50678 * C50581 * C50617 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C50807) *
              C50851 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C50581 * C50807 -
           ((C2296 * C1105 + C2291 * C1113 + C2295 * C308 + C2290 * C320 +
             C2294 * C293 + C2289 * C313) *
                C50523 +
            (C2296 * C1101 + C2291 * C1106 + C2295 * C290 + C2290 * C307 +
             C2294 * C283 + C2289 * C294) *
                C2298 +
            (C2905 + C2904 + C2903) * C2292 + (C2902 + C2901 + C2900) * C2297) *
               C50678 * C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C50807 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C50617) *
              C50850 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
               C50678 * C50581 * C50617 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C50807) *
              C50851 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C50581 * C50807 -
           ((C117 * C640 + C50662 * C642) * C109 +
            (C117 * C639 + C50662 * C641) * C121 + C649 * C108 + C648 * C120 +
            C348 * C107 + C349 * C119 + C350 * C106 + C351 * C118) *
               C50678 * C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C50581 * C50807 -
           ((C5345 * C50523 + C5346 * C2298 +
             (C117 * C1225 + C50662 * C1230) * C2292 +
             (C117 * C1218 + C50662 * C1226) * C2297) *
                C5185 +
            (C923 * C50523 + C922 * C2298 +
             (C117 * C895 + C50662 * C904) * C2292 +
             (C117 * C889 + C50662 * C894) * C2297) *
                C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C50581 * C50617) *
              C50850 +
          (((C353 * C2297 + C352 * C2292 + C351 * C2298 + C350 * C50523) *
                C5183 +
            (C922 * C2297 + C923 * C2292 + C924 * C2298 + C925 * C50523) *
                C5184 +
            (C5346 * C2297 + C5345 * C2292 + C5725 * C2298 + C5726 * C50523) *
                C5185) *
               C50581 * C50617 -
           (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C50581 * C50807) *
              C50851 +
          (((C173 * C2297 + C174 * C2292 + C175 * C2298 + C176 * C50523) *
                C5183 +
            (C528 * C2297 + C527 * C2292 + C526 * C2298 + C525 * C50523) *
                C5184 +
            (C533 * C2297 + C534 * C2292 + C535 * C2298 + C536 * C50523) *
                C5185) *
               C50581 * C50807 -
           (((C117 * C1219 + C50662 * C1227) * C50523 +
             (C117 * C1215 + C50662 * C1220) * C2298 + C5726 * C2292 +
             C5725 * C2297) *
                C5185 +
            (C927 * C50523 + C926 * C2298 + C925 * C2292 + C924 * C2297) *
                C5184 +
            (C348 * C50523 + C349 * C2298 + C350 * C2292 + C351 * C2297) *
                C5183) *
               C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C2297 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C2292 +
             (C2336 + C2337 + C2338) * C2298 +
             (C2339 + C2340 + C2341) * C50523) *
                C50678 * C50808 -
            ((C2730 + C2731 + C2732) * C50523 +
             (C2733 + C2734 + C2735) * C2298 +
             (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
              C2294 * C476 + C2289 * C493) *
                 C2292 +
             (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
              C2294 * C463 + C2289 * C477) *
                 C2297) *
                C50678 * C50645) *
               C50807 +
           (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
              C2296 * C3263 + C2291 * C3266) *
                 C2297 +
             (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
              C2296 * C3267 + C2291 * C3272) *
                 C2292 +
             (C3288 + C3289 + C3290) * C2298 +
             (C3291 + C3292 + C3293) * C50523) *
                C50678 * C50645 -
            ((C2536 + C2537 + C2538) * C50523 +
             (C2539 + C2540 + C2541) * C2298 +
             (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C2292 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C2297) *
                C50678 * C50808) *
               C50617) *
              C281 +
          ((((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
             (C3064 + C3065 + C3066) * C2298 +
             (C3067 + C3068 + C3069) * C50523) *
                C50678 * C50645 -
            ((C2342 + C2343 + C2344) * C50523 +
             (C2345 + C2346 + C2347) * C2298 + (C2341 + C2340 + C2339) * C2292 +
             (C2338 + C2337 + C2336) * C2297) *
                C50678 * C50808) *
               C50807 +
           (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
             (C2900 + C2901 + C2902) * C2298 +
             (C2903 + C2904 + C2905) * C50523) *
                C50678 * C50808 -
            ((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50523 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C2298 +
             (C3293 + C3292 + C3291) * C2292 +
             (C3290 + C3289 + C3288) * C2297) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C118 +
             (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
             C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
                C50678 * C50808 -
            (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
             C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
             (C117 * C463 + C50662 * C477) * C118) *
                C50678 * C50645) *
               C50807 +
           (((C117 * C889 + C50662 * C894) * C118 +
             (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
             C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
                C50678 * C50645 -
            (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
             C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
             (C117 * C286 + C50662 * C300) * C118) *
                C50678 * C50808) *
               C50617) *
              C281 +
          (((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
             C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
                C50678 * C50645 -
            (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
             C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                C50678 * C50808) *
               C50807 +
           ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
             C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
                C50678 * C50808 -
            ((C117 * C902 + C50662 * C908) * C109 +
             (C117 * C893 + C50662 * C903) * C121 + C927 * C108 + C926 * C120 +
             C925 * C107 + C924 * C119 + C923 * C106 + C922 * C118) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C2297 +
              (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
              C172 * C50523) *
                 C5183 +
             (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
                C50808 -
            ((C5562 + C5563 + C5564 + C5565) * C5185 +
             (C5520 + C5519 + C5561 + C5560) * C5184 +
             (C5514 + C5513 + C5559 + C5558) * C5183) *
                C50645) *
               C50807 +
           (((C6109 + C6110 + C6083 + C6084) * C5183 +
             (C6111 + C6112 + C6089 + C6090) * C5184 +
             ((C117 * C4586 + C50662 * C4594) * C2297 +
              (C117 * C4592 + C50662 * C4598) * C2292 + C6107 * C2298 +
              C6108 * C50523) *
                 C5185) *
                C50645 -
            ((C6090 + C6089 + C6112 + C6111) * C5185 +
             (C6084 + C6083 + C6110 + C6109) * C5184 +
             (C352 * C50523 + C353 * C2298 +
              (C117 * C299 + C50662 * C316) * C2292 +
              (C117 * C286 + C50662 * C300) * C2297) *
                 C5183) *
                C50808) *
               C50617) *
              C281 +
          ((((C5533 + C5534 + C5535 + C5536) * C5183 +
             (C5537 + C5538 + C5539 + C5540) * C5184 +
             (C5566 + C5567 + C5568 + C5569) * C5185) *
                C50645 -
            (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
             (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                 C5183) *
                C50808) *
               C50807 +
           (((C353 * C2297 + C352 * C2292 + C351 * C2298 + C350 * C50523) *
                 C5183 +
             (C6095 + C6096 + C6097 + C6098) * C5184 +
             (C6099 + C6100 + C6101 + C6102) * C5185) *
                C50808 -
            (((C117 * C6075 + C50662 * C6077) * C50523 +
              (C117 * C6074 + C50662 * C6076) * C2298 + C6108 * C2292 +
              C6107 * C2297) *
                 C5185 +
             (C6102 + C6101 + C6100 + C6099) * C5184 +
             (C6098 + C6097 + C6096 + C6095) * C5183) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C50662 * C129) * C118 +
               (C117 * C130 + C50662 * C143) * C106 + C171 * C119 +
               C172 * C107 + C173 * C120 + C174 * C108 + C175 * C121 +
               C176 * C109) *
                  C50678 * C50581 * C50565 * C113 -
              (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
               C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                  C50678 * C50581 * C50565 * C114 +
              (C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
               C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
                  C50678 * C50581 * C50565 * C115 -
              ((C117 * C141 + C50662 * C149) * C109 +
               (C117 * C128 + C50662 * C142) * C121 + C180 * C108 +
               C179 * C120 + C177 * C107 + C178 * C119 + C176 * C106 +
               C175 * C118) *
                  C50678 * C50581 * C50565 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50662 * C129) * C118 +
                (C117 * C130 + C50662 * C143) * C106 + C171 * C119 +
                C172 * C107 + C173 * C120 + C174 * C108 + C175 * C121 +
                C176 * C109) *
                   C50678 * C50581 * C278 -
               (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
                C352 * C107 + C353 * C119 +
                (C117 * C299 + C50662 * C316) * C106 +
                (C117 * C286 + C50662 * C300) * C118) *
                   C50678 * C50581 * C279 +
               ((C117 * C287 + C50662 * C301) * C118 +
                (C117 * C302 + C50662 * C317) * C106 + C354 * C119 +
                C355 * C107 + C356 * C120 + C357 * C108 + C358 * C121 +
                C359 * C109) *
                   C50678 * C50581 * C280) *
                  C281 +
              ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
                C349 * C120 + C348 * C108 +
                (C117 * C291 + C50662 * C309) * C121 +
                (C117 * C310 + C50662 * C321) * C109) *
                   C50678 * C50581 * C279 -
               (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
                C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                   C50678 * C50581 * C278 -
               ((C117 * C311 + C50662 * C322) * C109 +
                (C117 * C292 + C50662 * C312) * C121 + C359 * C108 +
                C358 * C120 + C357 * C107 + C356 * C119 + C355 * C106 +
                C354 * C118) *
                   C50678 * C50581 * C280) *
                  C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C457 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C458 +
           ((C117 * C464 + C50662 * C478) * C118 +
            (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
            C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
               C50678 * C459) *
              C50565 * C281 +
          ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
            C526 * C120 + C525 * C108 + (C117 * C468 + C50662 * C486) * C121 +
            (C117 * C487 + C50662 * C498) * C109) *
               C50678 * C458 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C457 -
           ((C117 * C488 + C50662 * C499) * C109 +
            (C117 * C469 + C50662 * C489) * C121 + C536 * C108 + C535 * C120 +
            C534 * C107 + C533 * C119 + C532 * C106 + C531 * C118) *
               C50678 * C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C50581 * C50565 * C113 -
          ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
           (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
              C50678 * C50581 * C50565 * C114 +
          ((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
           (C2348 + C2349 + C2350) * C2298 + (C2351 + C2352 + C2353) * C50523) *
              C50678 * C50581 * C50565 * C115 -
          ((C2296 * C311 + C2291 * C322 + C2295 * C310 + C2290 * C321 +
            C2294 * C137 + C2289 * C147) *
               C50523 +
           (C2296 * C292 + C2291 * C312 + C2295 * C291 + C2290 * C309 +
            C2294 * C126 + C2289 * C138) *
               C2298 +
           (C2353 + C2352 + C2351) * C2292 + (C2350 + C2349 + C2348) * C2297) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C278 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C279 +
           ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C50581 * C280) *
              C281 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2294 * C284 + C2289 * C296 + C2295 * C289 + C2290 * C305 +
             C2296 * C1102 + C2291 * C1108) *
                C2298 +
            (C2294 * C295 + C2289 * C314 + C2295 * C306 + C2290 * C319 +
             C2296 * C1107 + C2291 * C1114) *
                C50523) *
               C50678 * C50581 * C279 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C278 -
           ((C2296 * C2506 + C2291 * C2510 + C2295 * C1107 + C2290 * C1114 +
             C2294 * C306 + C2289 * C319) *
                C50523 +
            (C2296 * C2501 + C2291 * C2507 + C2295 * C1102 + C2290 * C1108 +
             C2294 * C289 + C2289 * C305) *
                C2298 +
            (C2547 + C2546 + C2545) * C2292 + (C2544 + C2543 + C2542) * C2297) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C457 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C458 +
           ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
             C2296 * C2693 + C2291 * C2696) *
                C2297 +
            (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
             C2296 * C2697 + C2291 * C2702) *
                C2292 +
            (C2736 + C2737 + C2738) * C2298 +
            (C2739 + C2740 + C2741) * C50523) *
               C50678 * C459) *
              C50565 * C281 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C2294 * C461 + C2289 * C473 + C2295 * C891 + C2290 * C898 +
             C2296 * C1563 + C2291 * C1569) *
                C2298 +
            (C2294 * C472 + C2289 * C491 + C2295 * C899 + C2290 * C906 +
             C2296 * C1568 + C2291 * C1575) *
                C50523) *
               C50678 * C458 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C457 -
           ((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
             C2294 * C483 + C2289 * C496) *
                C50523 +
            (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
             C2294 * C466 + C2289 * C482) *
                C2298 +
            (C2741 + C2740 + C2739) * C2292 + (C2738 + C2737 + C2736) * C2297) *
               C50678 * C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C2297 +
            (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
            C172 * C50523) *
               C5183 +
           ((C117 * C463 + C50662 * C477) * C2297 +
            (C117 * C476 + C50662 * C493) * C2292 + C530 * C2298 +
            C529 * C50523) *
               C5184 +
           ((C117 * C464 + C50662 * C478) * C2297 +
            (C117 * C479 + C50662 * C494) * C2292 + C531 * C2298 +
            C532 * C50523) *
               C5185) *
              C50581 * C50565 * C113 -
          ((C534 * C50523 + C533 * C2298 + C532 * C2292 + C531 * C2297) *
               C5185 +
           (C527 * C50523 + C528 * C2298 + C529 * C2292 + C530 * C2297) *
               C5184 +
           (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
               C5183) *
              C50581 * C50565 * C114 +
          ((C173 * C2297 + C174 * C2292 + C175 * C2298 + C176 * C50523) *
               C5183 +
           (C528 * C2297 + C527 * C2292 + C526 * C2298 + C525 * C50523) *
               C5184 +
           (C533 * C2297 + C534 * C2292 + C535 * C2298 + C536 * C50523) *
               C5185) *
              C50581 * C50565 * C115 -
          (((C117 * C488 + C50662 * C499) * C50523 +
            (C117 * C469 + C50662 * C489) * C2298 + C536 * C2292 +
            C535 * C2297) *
               C5185 +
           (C759 * C50523 + C758 * C2298 + C525 * C2292 + C526 * C2297) *
               C5184 +
           (C177 * C50523 + C178 * C2298 + C176 * C2292 + C175 * C2297) *
               C5183) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            ((C117 * C463 + C50662 * C477) * C2297 +
             (C117 * C476 + C50662 * C493) * C2292 + C530 * C2298 +
             C529 * C50523) *
                C5184 +
            ((C117 * C464 + C50662 * C478) * C2297 +
             (C117 * C479 + C50662 * C494) * C2292 + C531 * C2298 +
             C532 * C50523) *
                C5185) *
               C50581 * C278 -
           ((C5345 * C50523 + C5346 * C2298 +
             (C117 * C1225 + C50662 * C1230) * C2292 +
             (C117 * C1218 + C50662 * C1226) * C2297) *
                C5185 +
            (C923 * C50523 + C922 * C2298 +
             (C117 * C895 + C50662 * C904) * C2292 +
             (C117 * C889 + C50662 * C894) * C2297) *
                C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C50581 * C279 +
           (((C117 * C287 + C50662 * C301) * C2297 +
             (C117 * C302 + C50662 * C317) * C2292 + C354 * C2298 +
             C355 * C50523) *
                C5183 +
            ((C117 * C1565 + C50662 * C1573) * C2297 +
             (C117 * C1572 + C50662 * C1577) * C2292 + C5347 * C2298 +
             C5348 * C50523) *
                C5184 +
            ((C117 * C2693 + C50662 * C2696) * C2297 +
             (C117 * C2697 + C50662 * C2702) * C2292 + C5349 * C2298 +
             C5350 * C50523) *
                C5185) *
               C50581 * C280) *
              C281 +
          (((C353 * C2297 + C352 * C2292 + C351 * C2298 + C350 * C50523) *
                C5183 +
            (C922 * C2297 + C923 * C2292 + C924 * C2298 + C925 * C50523) *
                C5184 +
            (C5346 * C2297 + C5345 * C2292 +
             (C117 * C1216 + C50662 * C1222) * C2298 +
             (C117 * C1221 + C50662 * C1228) * C50523) *
                C5185) *
               C50581 * C279 -
           ((C534 * C50523 + C533 * C2298 + C532 * C2292 + C531 * C2297) *
                C5185 +
            (C527 * C50523 + C528 * C2298 + C529 * C2292 + C530 * C2297) *
                C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C50581 * C278 -
           (((C117 * C2700 + C50662 * C2704) * C50523 +
             (C117 * C2695 + C50662 * C2701) * C2298 + C5350 * C2292 +
             C5349 * C2297) *
                C5185 +
            ((C117 * C1568 + C50662 * C1575) * C50523 +
             (C117 * C1563 + C50662 * C1569) * C2298 + C5348 * C2292 +
             C5347 * C2297) *
                C5184 +
            (C357 * C50523 + C356 * C2298 + C355 * C2292 + C354 * C2297) *
                C5183) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C457 -
           ((C5562 + C5563 + C5564 + C5565) * C5185 +
            (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C458 +
           (C5574 * C5183 + (C5565 + C5564 + C5563 + C5562) * C5184 +
            ((C117 * C5496 + C50662 * C5499) * C2297 +
             (C117 * C5500 + C50662 * C5505) * C2292 + C5553 * C2298 +
             C5554 * C50523) *
                C5185) *
               C459) *
              C50565 * C281 +
          (((C5533 + C5534 + C5535 + C5536) * C5183 +
            (C5537 + C5538 + C5539 + C5540) * C5184 +
            (C5566 + C5567 + C5568 + C5569) * C5185) *
               C458 -
           (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C457 -
           (((C117 * C5503 + C50662 * C5507) * C50523 +
             (C117 * C5498 + C50662 * C5504) * C2298 + C5554 * C2292 +
             C5553 * C2297) *
                C5185 +
            (C5569 + C5568 + C5567 + C5566) * C5184 + C5572 * C5183) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50808 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C50565 * C50850 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C3064 + C3065 + C3066) * C2298 +
            (C3067 + C3068 + C3069) * C50523) *
               C50678 * C50645 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50808) *
              C50565 * C50851 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C50808 -
           ((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50523 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C2298 +
            (C3069 + C3068 + C3067) * C2292 + (C3066 + C3065 + C3064) * C2297) *
               C50678 * C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50808 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C50565 * C50850 +
          ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
            C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
               C50678 * C50645 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50808) *
              C50565 * C50851 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C50808 -
           ((C117 * C750 + C50662 * C752) * C109 +
            (C117 * C749 + C50662 * C751) * C121 + C759 * C108 + C758 * C120 +
            C525 * C107 + C526 * C119 + C527 * C106 + C528 * C118) *
               C50678 * C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C50808 -
           ((C5562 + C5563 + C5564 + C5565) * C5185 +
            (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C50645) *
              C50565 * C50850 +
          (((C5533 + C5534 + C5535 + C5536) * C5183 +
            (C5537 + C5538 + C5539 + C5540) * C5184 +
            (C5566 + C5567 + C5568 + C5569) * C5185) *
               C50645 -
           (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C50808) *
              C50565 * C50851 +
          (((C173 * C2297 + C174 * C2292 + C175 * C2298 + C176 * C50523) *
                C5183 +
            (C5873 + C5874 + C5875 + C5876) * C5184 +
            (C5877 + C5878 + C5879 + C5880) * C5185) *
               C50808 -
           (((C117 * C1850 + C50662 * C1858) * C50523 +
             (C117 * C1846 + C50662 * C1851) * C2298 + C5556 * C2292 +
             C5555 * C2297) *
                C5185 +
            (C5880 + C5879 + C5878 + C5877) * C5184 +
            (C5876 + C5875 + C5874 + C5873) * C5183) *
               C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C278 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C279 +
           ((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C50581 * C280) *
              C281 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + (C117 * C291 + C50662 * C309) * C121 +
            (C117 * C310 + C50662 * C321) * C109) *
               C50678 * C50581 * C279 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C278 -
           ((C117 * C311 + C50662 * C322) * C109 +
            (C117 * C292 + C50662 * C312) * C121 + C359 * C108 + C358 * C120 +
            C357 * C107 + C356 * C119 + C355 * C106 + C354 * C118) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50662 * C129) * C118 +
           (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
           C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
              C50678 * C50581 * C50565 * C113 -
          (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 + C174 * C107 +
           C173 * C119 + C172 * C106 + C171 * C118) *
              C50678 * C50581 * C50565 * C114 +
          (C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 + C178 * C120 +
           C177 * C108 + C179 * C121 + C180 * C109) *
              C50678 * C50581 * C50565 * C115 -
          ((C117 * C141 + C50662 * C149) * C109 +
           (C117 * C128 + C50662 * C142) * C121 + C180 * C108 + C179 * C120 +
           C177 * C107 + C178 * C119 + C176 * C106 + C175 * C118) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C50581 * C50565 * C113 -
          ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
           (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
              C50678 * C50581 * C50565 * C114 +
          ((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
           (C2348 + C2349 + C2350) * C2298 + (C2351 + C2352 + C2353) * C50523) *
              C50678 * C50581 * C50565 * C115 -
          ((C2296 * C311 + C2291 * C322 + C2295 * C310 + C2290 * C321 +
            C2294 * C137 + C2289 * C147) *
               C50523 +
           (C2296 * C292 + C2291 * C312 + C2295 * C291 + C2290 * C309 +
            C2294 * C126 + C2289 * C138) *
               C2298 +
           (C2353 + C2352 + C2351) * C2292 + (C2350 + C2349 + C2348) * C2297) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C278 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C279 +
           ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C50581 * C280) *
              C281 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2294 * C284 + C2289 * C296 + C2295 * C289 + C2290 * C305 +
             C2296 * C1102 + C2291 * C1108) *
                C2298 +
            (C2294 * C295 + C2289 * C314 + C2295 * C306 + C2290 * C319 +
             C2296 * C1107 + C2291 * C1114) *
                C50523) *
               C50678 * C50581 * C279 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C278 -
           ((C2296 * C2506 + C2291 * C2510 + C2295 * C1107 + C2290 * C1114 +
             C2294 * C306 + C2289 * C319) *
                C50523 +
            (C2296 * C2501 + C2291 * C2507 + C2295 * C1102 + C2290 * C1108 +
             C2294 * C289 + C2289 * C305) *
                C2298 +
            (C2547 + C2546 + C2545) * C2292 + (C2544 + C2543 + C2542) * C2297) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C2297 +
            (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
            C172 * C50523) *
               C5183 +
           ((C117 * C463 + C50662 * C477) * C2297 +
            (C117 * C476 + C50662 * C493) * C2292 + C530 * C2298 +
            C529 * C50523) *
               C5184 +
           ((C117 * C464 + C50662 * C478) * C2297 +
            (C117 * C479 + C50662 * C494) * C2292 + C531 * C2298 +
            C532 * C50523) *
               C5185) *
              C50581 * C50565 * C113 -
          ((C534 * C50523 + C533 * C2298 + C532 * C2292 + C531 * C2297) *
               C5185 +
           (C527 * C50523 + C528 * C2298 + C529 * C2292 + C530 * C2297) *
               C5184 +
           (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
               C5183) *
              C50581 * C50565 * C114 +
          ((C173 * C2297 + C174 * C2292 + C175 * C2298 + C176 * C50523) *
               C5183 +
           (C528 * C2297 + C527 * C2292 + C526 * C2298 + C525 * C50523) *
               C5184 +
           (C533 * C2297 + C534 * C2292 + C535 * C2298 + C536 * C50523) *
               C5185) *
              C50581 * C50565 * C115 -
          (((C117 * C488 + C50662 * C499) * C50523 +
            (C117 * C469 + C50662 * C489) * C2298 + C536 * C2292 +
            C535 * C2297) *
               C5185 +
           (C759 * C50523 + C758 * C2298 + C525 * C2292 + C526 * C2297) *
               C5184 +
           (C177 * C50523 + C178 * C2298 + C176 * C2292 + C175 * C2297) *
               C5183) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            ((C117 * C463 + C50662 * C477) * C2297 +
             (C117 * C476 + C50662 * C493) * C2292 + C530 * C2298 +
             C529 * C50523) *
                C5184 +
            ((C117 * C464 + C50662 * C478) * C2297 +
             (C117 * C479 + C50662 * C494) * C2292 + C531 * C2298 +
             C532 * C50523) *
                C5185) *
               C50581 * C278 -
           ((C5345 * C50523 + C5346 * C2298 +
             (C117 * C1225 + C50662 * C1230) * C2292 +
             (C117 * C1218 + C50662 * C1226) * C2297) *
                C5185 +
            (C923 * C50523 + C922 * C2298 +
             (C117 * C895 + C50662 * C904) * C2292 +
             (C117 * C889 + C50662 * C894) * C2297) *
                C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C50581 * C279 +
           (((C117 * C287 + C50662 * C301) * C2297 +
             (C117 * C302 + C50662 * C317) * C2292 + C354 * C2298 +
             C355 * C50523) *
                C5183 +
            ((C117 * C1565 + C50662 * C1573) * C2297 +
             (C117 * C1572 + C50662 * C1577) * C2292 + C5347 * C2298 +
             C5348 * C50523) *
                C5184 +
            ((C117 * C2693 + C50662 * C2696) * C2297 +
             (C117 * C2697 + C50662 * C2702) * C2292 + C5349 * C2298 +
             C5350 * C50523) *
                C5185) *
               C50581 * C280) *
              C281 +
          (((C353 * C2297 + C352 * C2292 + C351 * C2298 + C350 * C50523) *
                C5183 +
            (C922 * C2297 + C923 * C2292 + C924 * C2298 + C925 * C50523) *
                C5184 +
            (C5346 * C2297 + C5345 * C2292 +
             (C117 * C1216 + C50662 * C1222) * C2298 +
             (C117 * C1221 + C50662 * C1228) * C50523) *
                C5185) *
               C50581 * C279 -
           ((C534 * C50523 + C533 * C2298 + C532 * C2292 + C531 * C2297) *
                C5185 +
            (C527 * C50523 + C528 * C2298 + C529 * C2292 + C530 * C2297) *
                C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C50581 * C278 -
           (((C117 * C2700 + C50662 * C2704) * C50523 +
             (C117 * C2695 + C50662 * C2701) * C2298 + C5350 * C2292 +
             C5349 * C2297) *
                C5185 +
            ((C117 * C1568 + C50662 * C1575) * C50523 +
             (C117 * C1563 + C50662 * C1569) * C2298 + C5348 * C2292 +
             C5347 * C2297) *
                C5184 +
            (C357 * C50523 + C356 * C2298 + C355 * C2292 + C354 * C2297) *
                C5183) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C50852 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C50853 +
           ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C50581 * C1331) *
              C50799 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2900 + C2901 + C2902) * C2298 +
            (C2903 + C2904 + C2905) * C50523) *
               C50678 * C50581 * C50853 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C50852 -
           ((C2296 * C2506 + C2291 * C2510 + C2295 * C1107 + C2290 * C1114 +
             C2294 * C306 + C2289 * C319) *
                C50523 +
            (C2296 * C2501 + C2291 * C2507 + C2295 * C1102 + C2290 * C1108 +
             C2294 * C289 + C2289 * C305) *
                C2298 +
            (C2547 + C2546 + C2545) * C2292 + (C2544 + C2543 + C2542) * C2297) *
               C50678 * C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C50852 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C50853 +
           ((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C50581 * C1331) *
              C50799 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
               C50678 * C50581 * C50853 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C50852 -
           ((C117 * C311 + C50662 * C322) * C109 +
            (C117 * C292 + C50662 * C312) * C121 + C359 * C108 + C358 * C120 +
            C357 * C107 + C356 * C119 + C355 * C106 + C354 * C118) *
               C50678 * C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C50581 * C50852 -
           (C6523 * C5185 + (C6084 + C6083 + C6110 + C6109) * C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C50581 * C50853 +
           (((C117 * C287 + C50662 * C301) * C2297 +
             (C117 * C302 + C50662 * C317) * C2292 + C354 * C2298 +
             C355 * C50523) *
                C5183 +
            ((C117 * C1565 + C50662 * C1573) * C2297 +
             (C117 * C1572 + C50662 * C1577) * C2292 + C5347 * C2298 +
             C5348 * C50523) *
                C5184 +
            ((C117 * C2693 + C50662 * C2696) * C2297 +
             (C117 * C2697 + C50662 * C2702) * C2292 + C5349 * C2298 +
             C5350 * C50523) *
                C5185) *
               C50581 * C1331) *
              C50799 +
          (((C353 * C2297 + C352 * C2292 + C351 * C2298 + C350 * C50523) *
                C5183 +
            (C6095 + C6096 + C6097 + C6098) * C5184 +
            (C6099 + C6100 + C6101 + C6102) * C5185) *
               C50581 * C50853 -
           (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C50581 * C50852 -
           (((C117 * C2700 + C50662 * C2704) * C50523 +
             (C117 * C2695 + C50662 * C2701) * C2298 + C5350 * C2292 +
             C5349 * C2297) *
                C5185 +
            ((C117 * C1568 + C50662 * C1575) * C50523 +
             (C117 * C1563 + C50662 * C1569) * C2298 + C5348 * C2292 +
             C5347 * C2297) *
                C5184 +
            (C357 * C50523 + C356 * C2298 + C355 * C2292 + C354 * C2297) *
                C5183) *
               C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50808 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C50852 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C50645 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50808) *
              C50853 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C50808 -
           ((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
             C2294 * C1570 + C2289 * C1576) *
                C50523 +
            (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
             C2294 * C1564 + C2289 * C1571) *
                C2298 +
            (C2296 * C4189 + C2291 * C4192 + C2295 * C3267 + C2290 * C3272 +
             C2294 * C1572 + C2289 * C1577) *
                C2292 +
            (C2296 * C4186 + C2291 * C4190 + C2295 * C3263 + C2290 * C3266 +
             C2294 * C1565 + C2289 * C1573) *
                C2297) *
               C50678 * C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50808 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C50852 +
          (((C117 * C889 + C50662 * C894) * C118 +
            (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
            C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
               C50678 * C50645 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50808) *
              C50853 +
          (((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C50808 -
           ((C117 * C1566 + C50662 * C1574) * C109 +
            (C117 * C1562 + C50662 * C1567) * C121 +
            (C117 * C1568 + C50662 * C1575) * C108 +
            (C117 * C1563 + C50662 * C1569) * C120 +
            (C117 * C1570 + C50662 * C1576) * C107 +
            (C117 * C1564 + C50662 * C1571) * C119 +
            (C117 * C1572 + C50662 * C1577) * C106 +
            (C117 * C1565 + C50662 * C1573) * C118) *
               C50678 * C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C50808 -
           ((C5562 + C5563 + C5564 + C5565) * C5185 +
            (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C50645) *
              C50852 +
          (((C6109 + C6110 + C6083 + C6084) * C5183 +
            (C6111 + C6112 + C6089 + C6090) * C5184 +
            (C6521 + C6522 + C6515 + C6516) * C5185) *
               C50645 -
           (C6523 * C5185 + (C6084 + C6083 + C6110 + C6109) * C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C50808) *
              C50853 +
          ((((C117 * C287 + C50662 * C301) * C2297 +
             (C117 * C302 + C50662 * C317) * C2292 + C354 * C2298 +
             C355 * C50523) *
                C5183 +
            (C7026 + C7027 + C7014 + C7015) * C5184 +
            (C7028 + C7029 + C7020 + C7021) * C5185) *
               C50808 -
           (((C117 * C4587 + C50662 * C4595) * C50523 +
             (C117 * C4583 + C50662 * C4589) * C2298 +
             (C117 * C4591 + C50662 * C4597) * C2292 +
             (C117 * C4585 + C50662 * C4593) * C2297) *
                C5185 +
            (C7021 + C7020 + C7029 + C7028) * C5184 +
            (C7015 + C7014 + C7027 + C7026) * C5183) *
               C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50662 * C129) * C118 +
                (C117 * C130 + C50662 * C143) * C106 + C171 * C119 +
                C172 * C107 + C173 * C120 + C174 * C108 + C175 * C121 +
                C176 * C109) *
                   C50678 * C50581 * C1025 -
               (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
                C352 * C107 + C353 * C119 +
                (C117 * C299 + C50662 * C316) * C106 +
                (C117 * C286 + C50662 * C300) * C118) *
                   C50678 * C50581 * C50617) *
                  C1027 +
              ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
                C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
                   C50678 * C50581 * C50617 -
               (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
                C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                   C50678 * C50581 * C1025) *
                  C1028 +
              ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
                C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
                   C50678 * C50581 * C1025 -
               ((C117 * C640 + C50662 * C642) * C109 +
                (C117 * C639 + C50662 * C641) * C121 + C649 * C108 +
                C648 * C120 + C348 * C107 + C349 * C119 + C350 * C106 +
                C351 * C118) *
                   C50678 * C50581 * C50617) *
                  C1029) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C50662 * C129) * C118 +
               (C117 * C130 + C50662 * C143) * C106 + C171 * C119 +
               C172 * C107 + C173 * C120 + C174 * C108 + C175 * C121 +
               C176 * C109) *
                  C50678 * C50581 * C1096 -
              (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
               C352 * C107 + C353 * C119 +
               (C117 * C299 + C50662 * C316) * C106 +
               (C117 * C286 + C50662 * C300) * C118) *
                  C50678 * C50581 * C1097 +
              ((C117 * C287 + C50662 * C301) * C118 +
               (C117 * C302 + C50662 * C317) * C106 + C354 * C119 +
               C355 * C107 + C356 * C120 + C357 * C108 + C358 * C121 +
               C359 * C109) *
                  C50678 * C50581 * C1098 -
              ((C117 * C1105 + C50662 * C1113) * C109 +
               (C117 * C1101 + C50662 * C1106) * C121 +
               (C117 * C1107 + C50662 * C1114) * C108 +
               (C117 * C1102 + C50662 * C1108) * C120 +
               (C117 * C1109 + C50662 * C1115) * C107 +
               (C117 * C1103 + C50662 * C1110) * C119 +
               (C117 * C1111 + C50662 * C1116) * C106 +
               (C117 * C1104 + C50662 * C1112) * C118) *
                  C50678 * C50581 * C1099) *
             C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C457 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C458 +
           ((C117 * C464 + C50662 * C478) * C118 +
            (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
            C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
               C50678 * C459) *
              C1025 +
          (((C117 * C889 + C50662 * C894) * C118 +
            (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
            C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
               C50678 * C458 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C457 -
           ((C117 * C1219 + C50662 * C1227) * C109 +
            (C117 * C1215 + C50662 * C1220) * C121 +
            (C117 * C1221 + C50662 * C1228) * C108 +
            (C117 * C1216 + C50662 * C1222) * C120 +
            (C117 * C1223 + C50662 * C1229) * C107 +
            (C117 * C1217 + C50662 * C1224) * C119 +
            (C117 * C1225 + C50662 * C1230) * C106 +
            (C117 * C1218 + C50662 * C1226) * C118) *
               C50678 * C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C1025 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2900 + C2901 + C2902) * C2298 +
            (C2903 + C2904 + C2905) * C50523) *
               C50678 * C50581 * C50617 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C1025) *
              C1028 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C50581 * C1025 -
           ((C2296 * C1105 + C2291 * C1113 + C2295 * C308 + C2290 * C320 +
             C2294 * C293 + C2289 * C313) *
                C50523 +
            (C2296 * C1101 + C2291 * C1106 + C2295 * C290 + C2290 * C307 +
             C2294 * C283 + C2289 * C294) *
                C2298 +
            (C2905 + C2904 + C2903) * C2292 + (C2902 + C2901 + C2900) * C2297) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C50581 * C1096 -
          ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
           (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
            C2294 * C299 + C2289 * C316) *
               C2292 +
           (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
            C2294 * C286 + C2289 * C300) *
               C2297) *
              C50678 * C50581 * C1097 +
          ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
            C2296 * C2499 + C2291 * C2502) *
               C2297 +
           (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
            C2296 * C2503 + C2291 * C2508) *
               C2292 +
           (C2542 + C2543 + C2544) * C2298 + (C2545 + C2546 + C2547) * C50523) *
              C50678 * C50581 * C1098 -
          ((C2296 * C3539 + C2291 * C3543 + C2295 * C2505 + C2290 * C2509 +
            C2294 * C1109 + C2289 * C1115) *
               C50523 +
           (C2296 * C3537 + C2291 * C3540 + C2295 * C2500 + C2290 * C2504 +
            C2294 * C1103 + C2289 * C1110) *
               C2298 +
           (C2296 * C3541 + C2291 * C3544 + C2295 * C2503 + C2290 * C2508 +
            C2294 * C1111 + C2289 * C1116) *
               C2292 +
           (C2296 * C3538 + C2291 * C3542 + C2295 * C2499 + C2290 * C2502 +
            C2294 * C1104 + C2289 * C1112) *
               C2297) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C457 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C458 +
           ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
             C2296 * C2693 + C2291 * C2696) *
                C2297 +
            (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
             C2296 * C2697 + C2291 * C2702) *
                C2292 +
            (C2736 + C2737 + C2738) * C2298 +
            (C2739 + C2740 + C2741) * C50523) *
               C50678 * C459) *
              C1025 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C458 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C457 -
           ((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
             C2294 * C1223 + C2289 * C1229) *
                C50523 +
            (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
             C2294 * C1217 + C2289 * C1224) *
                C2298 +
            (C2296 * C3695 + C2291 * C3698 + C2295 * C2697 + C2290 * C2702 +
             C2294 * C1225 + C2289 * C1230) *
                C2292 +
            (C2296 * C3692 + C2291 * C3696 + C2295 * C2693 + C2290 * C2696 +
             C2294 * C1218 + C2289 * C1226) *
                C2297) *
               C50678 * C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C50581 * C1025 -
           ((C6090 + C6089 + C6112 + C6111) * C5185 +
            (C6084 + C6083 + C6110 + C6109) * C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C2297 + C352 * C2292 + C351 * C2298 + C350 * C50523) *
                C5183 +
            (C6095 + C6096 + C6097 + C6098) * C5184 +
            (C6099 + C6100 + C6101 + C6102) * C5185) *
               C50581 * C50617 -
           (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C2297 + C174 * C2292 + C175 * C2298 + C176 * C50523) *
                C5183 +
            (C5873 + C5874 + C5875 + C5876) * C5184 +
            (C5877 + C5878 + C5879 + C5880) * C5185) *
               C50581 * C1025 -
           (((C117 * C1219 + C50662 * C1227) * C50523 +
             (C117 * C1215 + C50662 * C1220) * C2298 + C5726 * C2292 +
             C5725 * C2297) *
                C5185 +
            (C927 * C50523 + C926 * C2298 + C925 * C2292 + C924 * C2297) *
                C5184 +
            (C348 * C50523 + C349 * C2298 + C350 * C2292 + C351 * C2297) *
                C5183) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C2297 +
            (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
            C172 * C50523) *
               C5183 +
           (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
              C50581 * C1096 -
          ((C6090 + C6089 + C6112 + C6111) * C5185 +
           (C6084 + C6083 + C6110 + C6109) * C5184 +
           (C352 * C50523 + C353 * C2298 +
            (C117 * C299 + C50662 * C316) * C2292 +
            (C117 * C286 + C50662 * C300) * C2297) *
               C5183) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C2297 +
            (C117 * C302 + C50662 * C317) * C2292 + C354 * C2298 +
            C355 * C50523) *
               C5183 +
           ((C117 * C1565 + C50662 * C1573) * C2297 +
            (C117 * C1572 + C50662 * C1577) * C2292 + C5347 * C2298 +
            C5348 * C50523) *
               C5184 +
           ((C117 * C2693 + C50662 * C2696) * C2297 +
            (C117 * C2697 + C50662 * C2702) * C2292 + C5349 * C2298 +
            C5350 * C50523) *
               C5185) *
              C50581 * C1098 -
          (((C117 * C3693 + C50662 * C3697) * C50523 +
            (C117 * C3691 + C50662 * C3694) * C2298 +
            (C117 * C3695 + C50662 * C3698) * C2292 +
            (C117 * C3692 + C50662 * C3696) * C2297) *
               C5185 +
           ((C117 * C3269 + C50662 * C3273) * C50523 +
            (C117 * C3264 + C50662 * C3268) * C2298 +
            (C117 * C3267 + C50662 * C3272) * C2292 +
            (C117 * C3263 + C50662 * C3266) * C2297) *
               C5184 +
           ((C117 * C1109 + C50662 * C1115) * C50523 +
            (C117 * C1103 + C50662 * C1110) * C2298 +
            (C117 * C1111 + C50662 * C1116) * C2292 +
            (C117 * C1104 + C50662 * C1112) * C2297) *
               C5183) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C457 -
           ((C5562 + C5563 + C5564 + C5565) * C5185 +
            (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C458 +
           (C5574 * C5183 + (C5565 + C5564 + C5563 + C5562) * C5184 +
            ((C117 * C5496 + C50662 * C5499) * C2297 +
             (C117 * C5500 + C50662 * C5505) * C2292 + C5553 * C2298 +
             C5554 * C50523) *
                C5185) *
               C459) *
              C1025 +
          (((C6109 + C6110 + C6083 + C6084) * C5183 +
            (C6111 + C6112 + C6089 + C6090) * C5184 +
            (C6521 + C6522 + C6515 + C6516) * C5185) *
               C458 -
           (C6523 * C5185 + (C6084 + C6083 + C6110 + C6109) * C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C457 -
           (((C117 * C6504 + C50662 * C6508) * C50523 +
             (C117 * C6502 + C50662 * C6505) * C2298 +
             (C117 * C6506 + C50662 * C6509) * C2292 +
             (C117 * C6503 + C50662 * C6507) * C2297) *
                C5185 +
            (C6516 + C6515 + C6522 + C6521) * C5184 + C6523 * C5183) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C2297 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C2292 +
             (C2336 + C2337 + C2338) * C2298 +
             (C2339 + C2340 + C2341) * C50523) *
                C50678 * C50808 -
            ((C2730 + C2731 + C2732) * C50523 +
             (C2733 + C2734 + C2735) * C2298 +
             (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
              C2294 * C476 + C2289 * C493) *
                 C2292 +
             (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
              C2294 * C463 + C2289 * C477) *
                 C2297) *
                C50678 * C50645) *
               C1025 +
           (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
              C2296 * C3263 + C2291 * C3266) *
                 C2297 +
             (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
              C2296 * C3267 + C2291 * C3272) *
                 C2292 +
             (C3288 + C3289 + C3290) * C2298 +
             (C3291 + C3292 + C3293) * C50523) *
                C50678 * C50645 -
            ((C2536 + C2537 + C2538) * C50523 +
             (C2539 + C2540 + C2541) * C2298 +
             (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C2292 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C2297) *
                C50678 * C50808) *
               C50617) *
              C50799 +
          ((((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
             (C3064 + C3065 + C3066) * C2298 +
             (C3067 + C3068 + C3069) * C50523) *
                C50678 * C50645 -
            ((C2342 + C2343 + C2344) * C50523 +
             (C2345 + C2346 + C2347) * C2298 + (C2341 + C2340 + C2339) * C2292 +
             (C2338 + C2337 + C2336) * C2297) *
                C50678 * C50808) *
               C1025 +
           (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
             (C2900 + C2901 + C2902) * C2298 +
             (C2903 + C2904 + C2905) * C50523) *
                C50678 * C50808 -
            ((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50523 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C2298 +
             (C3293 + C3292 + C3291) * C2292 +
             (C3290 + C3289 + C3288) * C2297) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C118 +
             (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
             C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
                C50678 * C50808 -
            (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
             C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
             (C117 * C463 + C50662 * C477) * C118) *
                C50678 * C50645) *
               C1025 +
           (((C117 * C889 + C50662 * C894) * C118 +
             (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
             C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
                C50678 * C50645 -
            (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
             C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
             (C117 * C286 + C50662 * C300) * C118) *
                C50678 * C50808) *
               C50617) *
              C50799 +
          (((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
             C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
                C50678 * C50645 -
            (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
             C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                C50678 * C50808) *
               C1025 +
           ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
             C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
                C50678 * C50808 -
            ((C117 * C902 + C50662 * C908) * C109 +
             (C117 * C893 + C50662 * C903) * C121 + C927 * C108 + C926 * C120 +
             C925 * C107 + C924 * C119 + C923 * C106 + C922 * C118) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C2297 +
              (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
              C172 * C50523) *
                 C5183 +
             (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
                C50808 -
            ((C5562 + C5563 + C5564 + C5565) * C5185 +
             (C5520 + C5519 + C5561 + C5560) * C5184 +
             (C5514 + C5513 + C5559 + C5558) * C5183) *
                C50645) *
               C1025 +
           (((C6109 + C6110 + C6083 + C6084) * C5183 +
             (C6111 + C6112 + C6089 + C6090) * C5184 +
             (C6521 + C6522 + C6515 + C6516) * C5185) *
                C50645 -
            (C6523 * C5185 + (C6084 + C6083 + C6110 + C6109) * C5184 +
             (C352 * C50523 + C353 * C2298 +
              (C117 * C299 + C50662 * C316) * C2292 +
              (C117 * C286 + C50662 * C300) * C2297) *
                 C5183) *
                C50808) *
               C50617) *
              C50799 +
          ((((C5533 + C5534 + C5535 + C5536) * C5183 +
             (C5537 + C5538 + C5539 + C5540) * C5184 +
             (C5566 + C5567 + C5568 + C5569) * C5185) *
                C50645 -
            (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
             (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                 C5183) *
                C50808) *
               C1025 +
           (((C353 * C2297 + C352 * C2292 + C351 * C2298 + C350 * C50523) *
                 C5183 +
             (C6095 + C6096 + C6097 + C6098) * C5184 +
             (C6099 + C6100 + C6101 + C6102) * C5185) *
                C50808 -
            (((C117 * C6075 + C50662 * C6077) * C50523 +
              (C117 * C6074 + C50662 * C6076) * C2298 + C6108 * C2292 +
              C6107 * C2297) *
                 C5185 +
             (C6102 + C6101 + C6100 + C6099) * C5184 +
             (C6098 + C6097 + C6096 + C6095) * C5183) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50662 * C129) * C118 +
           (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
           C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
              C50678 * C50581 * C1096 -
          (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 + C352 * C107 +
           C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
           (C117 * C286 + C50662 * C300) * C118) *
              C50678 * C50581 * C1097 +
          ((C117 * C287 + C50662 * C301) * C118 +
           (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
           C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
              C50678 * C50581 * C1098 -
          ((C117 * C1105 + C50662 * C1113) * C109 +
           (C117 * C1101 + C50662 * C1106) * C121 +
           (C117 * C1107 + C50662 * C1114) * C108 +
           (C117 * C1102 + C50662 * C1108) * C120 +
           (C117 * C1109 + C50662 * C1115) * C107 +
           (C117 * C1103 + C50662 * C1110) * C119 +
           (C117 * C1111 + C50662 * C1116) * C106 +
           (C117 * C1104 + C50662 * C1112) * C118) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C1025 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C50617) *
              C1027 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
               C50678 * C50581 * C50617 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C1025) *
              C1028 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C50581 * C1025 -
           ((C117 * C640 + C50662 * C642) * C109 +
            (C117 * C639 + C50662 * C641) * C121 + C649 * C108 + C648 * C120 +
            C348 * C107 + C349 * C119 + C350 * C106 + C351 * C118) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C1025 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2900 + C2901 + C2902) * C2298 +
            (C2903 + C2904 + C2905) * C50523) *
               C50678 * C50581 * C50617 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C1025) *
              C1028 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C50581 * C1025 -
           ((C2296 * C1105 + C2291 * C1113 + C2295 * C308 + C2290 * C320 +
             C2294 * C293 + C2289 * C313) *
                C50523 +
            (C2296 * C1101 + C2291 * C1106 + C2295 * C290 + C2290 * C307 +
             C2294 * C283 + C2289 * C294) *
                C2298 +
            (C2905 + C2904 + C2903) * C2292 + (C2902 + C2901 + C2900) * C2297) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C50581 * C1096 -
          ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
           (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
            C2294 * C299 + C2289 * C316) *
               C2292 +
           (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
            C2294 * C286 + C2289 * C300) *
               C2297) *
              C50678 * C50581 * C1097 +
          ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
            C2296 * C2499 + C2291 * C2502) *
               C2297 +
           (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
            C2296 * C2503 + C2291 * C2508) *
               C2292 +
           (C2542 + C2543 + C2544) * C2298 + (C2545 + C2546 + C2547) * C50523) *
              C50678 * C50581 * C1098 -
          ((C2296 * C3539 + C2291 * C3543 + C2295 * C2505 + C2290 * C2509 +
            C2294 * C1109 + C2289 * C1115) *
               C50523 +
           (C2296 * C3537 + C2291 * C3540 + C2295 * C2500 + C2290 * C2504 +
            C2294 * C1103 + C2289 * C1110) *
               C2298 +
           (C2296 * C3541 + C2291 * C3544 + C2295 * C2503 + C2290 * C2508 +
            C2294 * C1111 + C2289 * C1116) *
               C2292 +
           (C2296 * C3538 + C2291 * C3542 + C2295 * C2499 + C2290 * C2502 +
            C2294 * C1104 + C2289 * C1112) *
               C2297) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C50581 * C1025 -
           ((C6090 + C6089 + C6112 + C6111) * C5185 +
            (C6084 + C6083 + C6110 + C6109) * C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C2297 + C352 * C2292 + C351 * C2298 + C350 * C50523) *
                C5183 +
            (C6095 + C6096 + C6097 + C6098) * C5184 +
            (C6099 + C6100 + C6101 + C6102) * C5185) *
               C50581 * C50617 -
           (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C2297 + C174 * C2292 + C175 * C2298 + C176 * C50523) *
                C5183 +
            (C5873 + C5874 + C5875 + C5876) * C5184 +
            (C5877 + C5878 + C5879 + C5880) * C5185) *
               C50581 * C1025 -
           (((C117 * C1219 + C50662 * C1227) * C50523 +
             (C117 * C1215 + C50662 * C1220) * C2298 + C5726 * C2292 +
             C5725 * C2297) *
                C5185 +
            (C927 * C50523 + C926 * C2298 + C925 * C2292 + C924 * C2297) *
                C5184 +
            (C348 * C50523 + C349 * C2298 + C350 * C2292 + C351 * C2297) *
                C5183) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C2297 +
            (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
            C172 * C50523) *
               C5183 +
           (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
              C50581 * C1096 -
          ((C6090 + C6089 + C6112 + C6111) * C5185 +
           (C6084 + C6083 + C6110 + C6109) * C5184 +
           (C352 * C50523 + C353 * C2298 +
            (C117 * C299 + C50662 * C316) * C2292 +
            (C117 * C286 + C50662 * C300) * C2297) *
               C5183) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C2297 +
            (C117 * C302 + C50662 * C317) * C2292 + C354 * C2298 +
            C355 * C50523) *
               C5183 +
           ((C117 * C1565 + C50662 * C1573) * C2297 +
            (C117 * C1572 + C50662 * C1577) * C2292 + C5347 * C2298 +
            C5348 * C50523) *
               C5184 +
           ((C117 * C2693 + C50662 * C2696) * C2297 +
            (C117 * C2697 + C50662 * C2702) * C2292 + C5349 * C2298 +
            C5350 * C50523) *
               C5185) *
              C50581 * C1098 -
          (((C117 * C3693 + C50662 * C3697) * C50523 +
            (C117 * C3691 + C50662 * C3694) * C2298 +
            (C117 * C3695 + C50662 * C3698) * C2292 +
            (C117 * C3692 + C50662 * C3696) * C2297) *
               C5185 +
           ((C117 * C3269 + C50662 * C3273) * C50523 +
            (C117 * C3264 + C50662 * C3268) * C2298 +
            (C117 * C3267 + C50662 * C3272) * C2292 +
            (C117 * C3263 + C50662 * C3266) * C2297) *
               C5184 +
           ((C117 * C1109 + C50662 * C1115) * C50523 +
            (C117 * C1103 + C50662 * C1110) * C2298 +
            (C117 * C1111 + C50662 * C1116) * C2292 +
            (C117 * C1104 + C50662 * C1112) * C2297) *
               C5183) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C2297 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C2292 +
             (C2336 + C2337 + C2338) * C2298 +
             (C2339 + C2340 + C2341) * C50523) *
                C50678 * C1676 -
            ((C2730 + C2731 + C2732) * C50523 +
             (C2733 + C2734 + C2735) * C2298 +
             (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
              C2294 * C476 + C2289 * C493) *
                 C2292 +
             (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
              C2294 * C463 + C2289 * C477) *
                 C2297) *
                C50678 * C50645) *
               C50807 +
           (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
              C2296 * C3263 + C2291 * C3266) *
                 C2297 +
             (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
              C2296 * C3267 + C2291 * C3272) *
                 C2292 +
             (C3288 + C3289 + C3290) * C2298 +
             (C3291 + C3292 + C3293) * C50523) *
                C50678 * C50645 -
            ((C2536 + C2537 + C2538) * C50523 +
             (C2539 + C2540 + C2541) * C2298 +
             (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C2292 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C2297) *
                C50678 * C1676) *
               C50617) *
              C50799 +
          ((((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
             (C3064 + C3065 + C3066) * C2298 +
             (C3067 + C3068 + C3069) * C50523) *
                C50678 * C50645 -
            ((C2342 + C2343 + C2344) * C50523 +
             (C2345 + C2346 + C2347) * C2298 + (C2341 + C2340 + C2339) * C2292 +
             (C2338 + C2337 + C2336) * C2297) *
                C50678 * C1676) *
               C50807 +
           (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
             (C2900 + C2901 + C2902) * C2298 +
             (C2903 + C2904 + C2905) * C50523) *
                C50678 * C1676 -
            ((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50523 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C2298 +
             (C3293 + C3292 + C3291) * C2292 +
             (C3290 + C3289 + C3288) * C2297) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C118 +
             (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
             C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
                C50678 * C1676 -
            (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
             C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
             (C117 * C463 + C50662 * C477) * C118) *
                C50678 * C50645) *
               C50807 +
           (((C117 * C889 + C50662 * C894) * C118 +
             (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
             C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
                C50678 * C50645 -
            (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
             C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
             (C117 * C286 + C50662 * C300) * C118) *
                C50678 * C1676) *
               C50617) *
              C50799 +
          (((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
             C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
                C50678 * C50645 -
            (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
             C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                C50678 * C1676) *
               C50807 +
           ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
             C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
                C50678 * C1676 -
            ((C117 * C902 + C50662 * C908) * C109 +
             (C117 * C893 + C50662 * C903) * C121 + C927 * C108 + C926 * C120 +
             C925 * C107 + C924 * C119 + C923 * C106 + C922 * C118) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C2297 +
              (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
              C172 * C50523) *
                 C5183 +
             (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
                C1676 -
            (C7438 * C5185 + (C5520 + C5519 + C5561 + C5560) * C5184 +
             (C5514 + C5513 + C5559 + C5558) * C5183) *
                C50645) *
               C50807 +
           (((C6109 + C6110 + C6083 + C6084) * C5183 +
             (C6111 + C6112 + C6089 + C6090) * C5184 +
             (C6521 + C6522 + C6515 + C6516) * C5185) *
                C50645 -
            (C6523 * C5185 + (C6084 + C6083 + C6110 + C6109) * C5184 +
             (C352 * C50523 + C353 * C2298 +
              (C117 * C299 + C50662 * C316) * C2292 +
              (C117 * C286 + C50662 * C300) * C2297) *
                 C5183) *
                C1676) *
               C50617) *
              C50799 +
          ((((C5533 + C5534 + C5535 + C5536) * C5183 +
             (C5537 + C5538 + C5539 + C5540) * C5184 +
             (C5566 + C5567 + C5568 + C5569) * C5185) *
                C50645 -
            (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
             (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                 C5183) *
                C1676) *
               C50807 +
           (((C353 * C2297 + C352 * C2292 + C351 * C2298 + C350 * C50523) *
                 C5183 +
             (C6095 + C6096 + C6097 + C6098) * C5184 +
             (C6099 + C6100 + C6101 + C6102) * C5185) *
                C1676 -
            (((C117 * C6075 + C50662 * C6077) * C50523 +
              (C117 * C6074 + C50662 * C6076) * C2298 + C6108 * C2292 +
              C6107 * C2297) *
                 C5185 +
             (C6102 + C6101 + C6100 + C6099) * C5184 +
             (C6098 + C6097 + C6096 + C6095) * C5183) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50854 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50855 +
           ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
             C2296 * C2693 + C2291 * C2696) *
                C2297 +
            (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
             C2296 * C2697 + C2291 * C2702) *
                C2292 +
            (C2736 + C2737 + C2738) * C2298 +
            (C2739 + C2740 + C2741) * C50523) *
               C50678 * C2092) *
              C50807 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C50855 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50854 -
           ((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
             C2294 * C1223 + C2289 * C1229) *
                C50523 +
            (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
             C2294 * C1217 + C2289 * C1224) *
                C2298 +
            (C2296 * C3695 + C2291 * C3698 + C2295 * C2697 + C2290 * C2702 +
             C2294 * C1225 + C2289 * C1230) *
                C2292 +
            (C2296 * C3692 + C2291 * C3696 + C2295 * C2693 + C2290 * C2696 +
             C2294 * C1218 + C2289 * C1226) *
                C2297) *
               C50678 * C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50854 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50855 +
           ((C117 * C464 + C50662 * C478) * C118 +
            (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
            C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
               C50678 * C2092) *
              C50807 +
          (((C117 * C889 + C50662 * C894) * C118 +
            (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
            C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
               C50678 * C50855 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50854 -
           ((C117 * C1219 + C50662 * C1227) * C109 +
            (C117 * C1215 + C50662 * C1220) * C121 +
            (C117 * C1221 + C50662 * C1228) * C108 +
            (C117 * C1216 + C50662 * C1222) * C120 +
            (C117 * C1223 + C50662 * C1229) * C107 +
            (C117 * C1217 + C50662 * C1224) * C119 +
            (C117 * C1225 + C50662 * C1230) * C106 +
            (C117 * C1218 + C50662 * C1226) * C118) *
               C50678 * C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C50854 -
           (C7438 * C5185 + (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C50855 +
           (C5574 * C5183 + (C5565 + C5564 + C5563 + C5562) * C5184 +
            (C7439 + C7440 + C7433 + C7434) * C5185) *
               C2092) *
              C50807 +
          (((C6109 + C6110 + C6083 + C6084) * C5183 +
            (C6111 + C6112 + C6089 + C6090) * C5184 +
            (C6521 + C6522 + C6515 + C6516) * C5185) *
               C50855 -
           (C6523 * C5185 + (C6084 + C6083 + C6110 + C6109) * C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C50854 -
           (((C117 * C6504 + C50662 * C6508) * C50523 +
             (C117 * C6502 + C50662 * C6505) * C2298 +
             (C117 * C6506 + C50662 * C6509) * C2292 +
             (C117 * C6503 + C50662 * C6507) * C2297) *
                C5185 +
            (C6516 + C6515 + C6522 + C6521) * C5184 + C6523 * C5183) *
               C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50662 * C129) * C118 +
                (C117 * C130 + C50662 * C143) * C106 + C171 * C119 +
                C172 * C107 + C173 * C120 + C174 * C108 + C175 * C121 +
                C176 * C109) *
                   C50678 * C1676 -
               (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
                C529 * C107 + C530 * C119 +
                (C117 * C476 + C50662 * C493) * C106 +
                (C117 * C463 + C50662 * C477) * C118) *
                   C50678 * C50645) *
                  C50565 * C1027 +
              ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
                C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
                   C50678 * C50645 -
               (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
                C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                   C50678 * C1676) *
                  C50565 * C1028 +
              ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
                C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
                   C50678 * C1676 -
               ((C117 * C750 + C50662 * C752) * C109 +
                (C117 * C749 + C50662 * C751) * C121 + C759 * C108 +
                C758 * C120 + C525 * C107 + C526 * C119 + C527 * C106 +
                C528 * C118) *
                   C50678 * C50645) *
                  C50565 * C1029) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50662 * C129) * C118 +
                (C117 * C130 + C50662 * C143) * C106 + C171 * C119 +
                C172 * C107 + C173 * C120 + C174 * C108 + C175 * C121 +
                C176 * C109) *
                   C50678 * C1676 -
               (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
                C529 * C107 + C530 * C119 +
                (C117 * C476 + C50662 * C493) * C106 +
                (C117 * C463 + C50662 * C477) * C118) *
                   C50678 * C50645) *
                  C278 +
              (((C117 * C889 + C50662 * C894) * C118 +
                (C117 * C895 + C50662 * C904) * C106 + C922 * C119 +
                C923 * C107 + C924 * C120 + C925 * C108 + C926 * C121 +
                C927 * C109) *
                   C50678 * C50645 -
               (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
                C352 * C107 + C353 * C119 +
                (C117 * C299 + C50662 * C316) * C106 +
                (C117 * C286 + C50662 * C300) * C118) *
                   C50678 * C1676) *
                  C279 +
              (((C117 * C287 + C50662 * C301) * C118 +
                (C117 * C302 + C50662 * C317) * C106 + C354 * C119 +
                C355 * C107 + C356 * C120 + C357 * C108 + C358 * C121 +
                C359 * C109) *
                   C50678 * C1676 -
               ((C117 * C1566 + C50662 * C1574) * C109 +
                (C117 * C1562 + C50662 * C1567) * C121 +
                (C117 * C1568 + C50662 * C1575) * C108 +
                (C117 * C1563 + C50662 * C1569) * C120 +
                (C117 * C1570 + C50662 * C1576) * C107 +
                (C117 * C1564 + C50662 * C1571) * C119 +
                (C117 * C1572 + C50662 * C1577) * C106 +
                (C117 * C1565 + C50662 * C1573) * C118) *
                   C50678 * C50645) *
                  C280) *
             C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C50662 * C129) * C118 +
           (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
           C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
              C50678 * C1842 -
          (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 + C529 * C107 +
           C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
           (C117 * C463 + C50662 * C477) * C118) *
              C50678 * C1843 +
          ((C117 * C464 + C50662 * C478) * C118 +
           (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
           C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
              C50678 * C1844 -
          ((C117 * C1850 + C50662 * C1858) * C109 +
           (C117 * C1846 + C50662 * C1851) * C121 +
           (C117 * C1852 + C50662 * C1859) * C108 +
           (C117 * C1847 + C50662 * C1853) * C120 +
           (C117 * C1854 + C50662 * C1860) * C107 +
           (C117 * C1848 + C50662 * C1855) * C119 +
           (C117 * C1856 + C50662 * C1861) * C106 +
           (C117 * C1849 + C50662 * C1857) * C118) *
              C50678 * C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C1676 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C3064 + C3065 + C3066) * C2298 +
            (C3067 + C3068 + C3069) * C50523) *
               C50678 * C50645 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C1676) *
              C50565 * C1028 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C1676 -
           ((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50523 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C2298 +
            (C3069 + C3068 + C3067) * C2292 + (C3066 + C3065 + C3064) * C2297) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C1676 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C278 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C50645 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C1676) *
              C279 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C1676 -
           ((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
             C2294 * C1570 + C2289 * C1576) *
                C50523 +
            (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
             C2294 * C1564 + C2289 * C1571) *
                C2298 +
            (C2296 * C4189 + C2291 * C4192 + C2295 * C3267 + C2290 * C3272 +
             C2294 * C1572 + C2289 * C1577) *
                C2292 +
            (C2296 * C4186 + C2291 * C4190 + C2295 * C3263 + C2290 * C3266 +
             C2294 * C1565 + C2289 * C1573) *
                C2297) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C1842 -
          ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
           (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
            C2294 * C476 + C2289 * C493) *
               C2292 +
           (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
            C2294 * C463 + C2289 * C477) *
               C2297) *
              C50678 * C1843 +
          ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
            C2296 * C2693 + C2291 * C2696) *
               C2297 +
           (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
            C2296 * C2697 + C2291 * C2702) *
               C2292 +
           (C2736 + C2737 + C2738) * C2298 + (C2739 + C2740 + C2741) * C50523) *
              C50678 * C1844 -
          ((C2296 * C4587 + C2291 * C4595 + C2295 * C4588 + C2290 * C4596 +
            C2294 * C1854 + C2289 * C1860) *
               C50523 +
           (C2296 * C4583 + C2291 * C4589 + C2295 * C4584 + C2290 * C4590 +
            C2294 * C1848 + C2289 * C1855) *
               C2298 +
           (C2296 * C4591 + C2291 * C4597 + C2295 * C4592 + C2290 * C4598 +
            C2294 * C1856 + C2289 * C1861) *
               C2292 +
           (C2296 * C4585 + C2291 * C4593 + C2295 * C4586 + C2290 * C4594 +
            C2294 * C1849 + C2289 * C1857) *
               C2297) *
              C50678 * C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C1676 -
           ((C5562 + C5563 + C5564 + C5565) * C5185 +
            (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C50645) *
              C50565 * C1027 +
          (((C5533 + C5534 + C5535 + C5536) * C5183 +
            (C5537 + C5538 + C5539 + C5540) * C5184 +
            (C5566 + C5567 + C5568 + C5569) * C5185) *
               C50645 -
           (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C2297 + C174 * C2292 + C175 * C2298 + C176 * C50523) *
                C5183 +
            (C5873 + C5874 + C5875 + C5876) * C5184 +
            (C5877 + C5878 + C5879 + C5880) * C5185) *
               C1676 -
           (((C117 * C1850 + C50662 * C1858) * C50523 +
             (C117 * C1846 + C50662 * C1851) * C2298 + C5556 * C2292 +
             C5555 * C2297) *
                C5185 +
            (C5880 + C5879 + C5878 + C5877) * C5184 +
            (C5876 + C5875 + C5874 + C5873) * C5183) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C1676 -
           ((C5562 + C5563 + C5564 + C5565) * C5185 +
            (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C50645) *
              C278 +
          (((C6109 + C6110 + C6083 + C6084) * C5183 +
            (C6111 + C6112 + C6089 + C6090) * C5184 +
            (C6521 + C6522 + C6515 + C6516) * C5185) *
               C50645 -
           (C6523 * C5185 + (C6084 + C6083 + C6110 + C6109) * C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C2297 +
             (C117 * C302 + C50662 * C317) * C2292 + C354 * C2298 +
             C355 * C50523) *
                C5183 +
            (C7026 + C7027 + C7014 + C7015) * C5184 +
            (C7028 + C7029 + C7020 + C7021) * C5185) *
               C1676 -
           (((C117 * C4587 + C50662 * C4595) * C50523 +
             (C117 * C4583 + C50662 * C4589) * C2298 +
             (C117 * C4591 + C50662 * C4597) * C2292 +
             (C117 * C4585 + C50662 * C4593) * C2297) *
                C5185 +
            (C7021 + C7020 + C7029 + C7028) * C5184 +
            (C7015 + C7014 + C7027 + C7026) * C5183) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C2297 +
            (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
            C172 * C50523) *
               C5183 +
           (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
              C1842 -
          (C7438 * C5185 + (C5520 + C5519 + C5561 + C5560) * C5184 +
           (C5514 + C5513 + C5559 + C5558) * C5183) *
              C1843 +
          (C5574 * C5183 + (C5565 + C5564 + C5563 + C5562) * C5184 +
           (C7439 + C7440 + C7433 + C7434) * C5185) *
              C1844 -
          (((C117 * C7421 + C50662 * C7425) * C50523 +
            (C117 * C7419 + C50662 * C7422) * C2298 +
            (C117 * C7423 + C50662 * C7426) * C2292 +
            (C117 * C7420 + C50662 * C7424) * C2297) *
               C5185 +
           (C7434 + C7433 + C7440 + C7439) * C5184 + C7438 * C5183) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50854 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50855 +
           ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
             C2296 * C2693 + C2291 * C2696) *
                C2297 +
            (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
             C2296 * C2697 + C2291 * C2702) *
                C2292 +
            (C2736 + C2737 + C2738) * C2298 +
            (C2739 + C2740 + C2741) * C50523) *
               C50678 * C2092) *
              C50565 * C50799 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C3064 + C3065 + C3066) * C2298 +
            (C3067 + C3068 + C3069) * C50523) *
               C50678 * C50855 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50854 -
           ((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
             C2294 * C483 + C2289 * C496) *
                C50523 +
            (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
             C2294 * C466 + C2289 * C482) *
                C2298 +
            (C2741 + C2740 + C2739) * C2292 + (C2738 + C2737 + C2736) * C2297) *
               C50678 * C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50854 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50855 +
           ((C117 * C464 + C50662 * C478) * C118 +
            (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
            C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
               C50678 * C2092) *
              C50565 * C50799 +
          ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
            C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
               C50678 * C50855 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50854 -
           ((C117 * C488 + C50662 * C499) * C109 +
            (C117 * C469 + C50662 * C489) * C121 + C536 * C108 + C535 * C120 +
            C534 * C107 + C533 * C119 + C532 * C106 + C531 * C118) *
               C50678 * C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C50854 -
           (C7438 * C5185 + (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C50855 +
           (C5574 * C5183 + (C5565 + C5564 + C5563 + C5562) * C5184 +
            (C7439 + C7440 + C7433 + C7434) * C5185) *
               C2092) *
              C50565 * C50799 +
          (((C5533 + C5534 + C5535 + C5536) * C5183 +
            (C5537 + C5538 + C5539 + C5540) * C5184 +
            (C5566 + C5567 + C5568 + C5569) * C5185) *
               C50855 -
           (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C50854 -
           (((C117 * C5503 + C50662 * C5507) * C50523 +
             (C117 * C5498 + C50662 * C5504) * C2298 + C5554 * C2292 +
             C5553 * C2297) *
                C5185 +
            (C5569 + C5568 + C5567 + C5566) * C5184 + C5572 * C5183) *
               C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C1676 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C278 +
          (((C117 * C889 + C50662 * C894) * C118 +
            (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
            C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
               C50678 * C50645 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C1676) *
              C279 +
          (((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C1676 -
           ((C117 * C1566 + C50662 * C1574) * C109 +
            (C117 * C1562 + C50662 * C1567) * C121 +
            (C117 * C1568 + C50662 * C1575) * C108 +
            (C117 * C1563 + C50662 * C1569) * C120 +
            (C117 * C1570 + C50662 * C1576) * C107 +
            (C117 * C1564 + C50662 * C1571) * C119 +
            (C117 * C1572 + C50662 * C1577) * C106 +
            (C117 * C1565 + C50662 * C1573) * C118) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C1676 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C50565 * C1027 +
          ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
            C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
               C50678 * C50645 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C1676) *
              C50565 * C1028 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C1676 -
           ((C117 * C750 + C50662 * C752) * C109 +
            (C117 * C749 + C50662 * C751) * C121 + C759 * C108 + C758 * C120 +
            C525 * C107 + C526 * C119 + C527 * C106 + C528 * C118) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C1676 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C3064 + C3065 + C3066) * C2298 +
            (C3067 + C3068 + C3069) * C50523) *
               C50678 * C50645 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C1676) *
              C50565 * C1028 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C1676 -
           ((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50523 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C2298 +
            (C3069 + C3068 + C3067) * C2292 + (C3066 + C3065 + C3064) * C2297) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C1676 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C278 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C50645 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C1676) *
              C279 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C1676 -
           ((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
             C2294 * C1570 + C2289 * C1576) *
                C50523 +
            (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
             C2294 * C1564 + C2289 * C1571) *
                C2298 +
            (C2296 * C4189 + C2291 * C4192 + C2295 * C3267 + C2290 * C3272 +
             C2294 * C1572 + C2289 * C1577) *
                C2292 +
            (C2296 * C4186 + C2291 * C4190 + C2295 * C3263 + C2290 * C3266 +
             C2294 * C1565 + C2289 * C1573) *
                C2297) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C1676 -
           ((C5562 + C5563 + C5564 + C5565) * C5185 +
            (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C50645) *
              C50565 * C1027 +
          (((C5533 + C5534 + C5535 + C5536) * C5183 +
            (C5537 + C5538 + C5539 + C5540) * C5184 +
            (C5566 + C5567 + C5568 + C5569) * C5185) *
               C50645 -
           (C5572 * C5185 + (C5536 + C5535 + C5534 + C5533) * C5184 +
            (C174 * C50523 + C173 * C2298 + C172 * C2292 + C171 * C2297) *
                C5183) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C2297 + C174 * C2292 + C175 * C2298 + C176 * C50523) *
                C5183 +
            (C5873 + C5874 + C5875 + C5876) * C5184 +
            (C5877 + C5878 + C5879 + C5880) * C5185) *
               C1676 -
           (((C117 * C1850 + C50662 * C1858) * C50523 +
             (C117 * C1846 + C50662 * C1851) * C2298 + C5556 * C2292 +
             C5555 * C2297) *
                C5185 +
            (C5880 + C5879 + C5878 + C5877) * C5184 +
            (C5876 + C5875 + C5874 + C5873) * C5183) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C2297 +
             (C117 * C130 + C50662 * C143) * C2292 + C171 * C2298 +
             C172 * C50523) *
                C5183 +
            (C5558 + C5559 + C5513 + C5514) * C5184 + C5574 * C5185) *
               C1676 -
           ((C5562 + C5563 + C5564 + C5565) * C5185 +
            (C5520 + C5519 + C5561 + C5560) * C5184 +
            (C5514 + C5513 + C5559 + C5558) * C5183) *
               C50645) *
              C278 +
          (((C6109 + C6110 + C6083 + C6084) * C5183 +
            (C6111 + C6112 + C6089 + C6090) * C5184 +
            (C6521 + C6522 + C6515 + C6516) * C5185) *
               C50645 -
           (C6523 * C5185 + (C6084 + C6083 + C6110 + C6109) * C5184 +
            (C352 * C50523 + C353 * C2298 +
             (C117 * C299 + C50662 * C316) * C2292 +
             (C117 * C286 + C50662 * C300) * C2297) *
                C5183) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C2297 +
             (C117 * C302 + C50662 * C317) * C2292 + C354 * C2298 +
             C355 * C50523) *
                C5183 +
            (C7026 + C7027 + C7014 + C7015) * C5184 +
            (C7028 + C7029 + C7020 + C7021) * C5185) *
               C1676 -
           (((C117 * C4587 + C50662 * C4595) * C50523 +
             (C117 * C4583 + C50662 * C4589) * C2298 +
             (C117 * C4591 + C50662 * C4597) * C2292 +
             (C117 * C4585 + C50662 * C4593) * C2297) *
                C5185 +
            (C7021 + C7020 + C7029 + C7028) * C5184 +
            (C7015 + C7014 + C7027 + C7026) * C5183) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C50581 * C50807 -
           ((C925 * C8028 + C924 * C8033 + C923 * C50849 + C922 * C8032 +
             C6104 * C50848 + C6103 * C8031) *
                C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C50581 * C50617) *
              C50850 +
          (((C353 * C8031 + C352 * C50848 + C351 * C8032 + C350 * C50849 +
             C349 * C8033 + C348 * C8028) *
                C50821 +
            (C922 * C8031 + C923 * C50848 + C924 * C8032 + C925 * C50849 +
             C926 * C8033 + C927 * C8028) *
                C50742) *
               C50581 * C50617 -
           ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C50581 * C50807) *
              C50851 +
          (((C173 * C8031 + C174 * C50848 + C175 * C8032 + C176 * C50849 +
             C178 * C8033 + C177 * C8028) *
                C50821 +
            (C528 * C8031 + C527 * C50848 + C526 * C8032 + C525 * C50849 +
             C758 * C8033 + C759 * C8028) *
                C50742) *
               C50581 * C50807 -
           (((C117 * C902 + C50662 * C908) * C8028 +
             (C117 * C893 + C50662 * C903) * C8033 + C927 * C50849 +
             C926 * C8032 + C925 * C50848 + C924 * C8031) *
                C50742 +
            (C649 * C8028 + C648 * C8033 + C348 * C50849 + C349 * C8032 +
             C350 * C50848 + C351 * C8031) *
                C50821) *
               C50581 * C50617) *
              C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C8031 +
              (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
              C172 * C50849 + C173 * C8033 + C174 * C8028) *
                 C50821 +
             (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
                C50808 -
            ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
             (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
                C50645) *
               C50807 +
           (((C11679 + C11680 + C11681 + C11682 + C11683 + C11684) * C50821 +
             (C6105 * C8031 + C6106 * C50848 + C5346 * C8032 + C5345 * C50849 +
              C5725 * C8033 + C5726 * C8028) *
                 C50742) *
                C50645 -
            ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
             (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
              (C117 * C299 + C50662 * C316) * C50848 +
              (C117 * C286 + C50662 * C300) * C8031) *
                 C50821) *
                C50808) *
               C50617) *
              C281 +
          ((((C11175 + C11176 + C11177 + C11178 + C11179 + C11180) * C50821 +
             (C11181 + C11182 + C11183 + C11184 + C11185 + C11186) * C50742) *
                C50645 -
            ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
             (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
              C172 * C50848 + C171 * C8031) *
                 C50821) *
                C50808) *
               C50807 +
           (((C353 * C8031 + C352 * C50848 + C351 * C8032 + C350 * C50849 +
              C349 * C8033 + C348 * C8028) *
                 C50821 +
             (C11685 + C11686 + C11687 + C11688 + C11689 + C11690) * C50742) *
                C50808 -
            (((C117 * C1219 + C50662 * C1227) * C8028 +
              (C117 * C1215 + C50662 * C1220) * C8033 + C5726 * C50849 +
              C5725 * C8032 + C5345 * C50848 + C5346 * C8031) *
                 C50742 +
             (C11690 + C11689 + C11688 + C11687 + C11686 + C11685) * C50821) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C5545 * C8031 + C5546 * C50848 + C530 * C8032 + C529 * C50849 +
             C528 * C8033 + C527 * C8028) *
                C50742) *
               C50581 * C278 -
           ((C925 * C8028 + C924 * C8033 + C923 * C50849 + C922 * C8032 +
             C6104 * C50848 + C6103 * C8031) *
                C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C50581 * C279 +
           (((C117 * C287 + C50662 * C301) * C8031 +
             (C117 * C302 + C50662 * C317) * C50848 + C354 * C8032 +
             C355 * C50849 + C356 * C8033 + C357 * C8028) *
                C50821 +
            (C7022 * C8031 + C7023 * C50848 + C5347 * C8032 + C5348 * C50849 +
             C11015 * C8033 + C11016 * C8028) *
                C50742) *
               C50581 * C280) *
              C281 +
          (((C353 * C8031 + C352 * C50848 + C351 * C8032 + C350 * C50849 +
             C349 * C8033 + C348 * C8028) *
                C50821 +
            (C922 * C8031 + C923 * C50848 + C924 * C8032 + C925 * C50849 +
             C926 * C8033 + C927 * C8028) *
                C50742) *
               C50581 * C279 -
           ((C525 * C8028 + C526 * C8033 + C527 * C50849 + C528 * C8032 +
             C529 * C50848 + C530 * C8031) *
                C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C50581 * C278 -
           (((C117 * C1566 + C50662 * C1574) * C8028 +
             (C117 * C1562 + C50662 * C1567) * C8033 + C11016 * C50849 +
             C11015 * C8032 + C5348 * C50848 + C5347 * C8031) *
                C50742 +
            (C359 * C8028 + C358 * C8033 + C357 * C50849 + C356 * C8032 +
             C355 * C50848 + C354 * C8031) *
                C50821) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C8031 +
            (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
            C172 * C50849 + C173 * C8033 + C174 * C8028) *
               C50821 +
           (C5545 * C8031 + C5546 * C50848 + C530 * C8032 + C529 * C50849 +
            C528 * C8033 + C527 * C8028) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C525 * C8028 + C526 * C8033 + C527 * C50849 + C528 * C8032 +
            C529 * C50848 + C530 * C8031) *
               C50742 +
           (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
            C172 * C50848 + C171 * C8031) *
               C50821) *
              C50581 * C50565 * C114 +
          ((C173 * C8031 + C174 * C50848 + C175 * C8032 + C176 * C50849 +
            C178 * C8033 + C177 * C8028) *
               C50821 +
           (C528 * C8031 + C527 * C50848 + C526 * C8032 + C525 * C50849 +
            C758 * C8033 + C759 * C8028) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C117 * C750 + C50662 * C752) * C8028 +
            (C117 * C749 + C50662 * C751) * C8033 + C759 * C50849 +
            C758 * C8032 + C525 * C50848 + C526 * C8031) *
               C50742 +
           (C180 * C8028 + C179 * C8033 + C177 * C50849 + C178 * C8032 +
            C176 * C50848 + C175 * C8031) *
               C50821) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C457 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C458 +
           ((C11174 + C11173 + C11172 + C11171 + C11170 + C11169) * C50821 +
            (C5552 * C8031 + C5551 * C50848 + C5550 * C8032 + C5549 * C50849 +
             C5555 * C8033 + C5556 * C8028) *
                C50742) *
               C459) *
              C50565 * C281 +
          (((C11175 + C11176 + C11177 + C11178 + C11179 + C11180) * C50821 +
            (C11181 + C11182 + C11183 + C11184 + C11185 + C11186) * C50742) *
               C458 -
           ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C457 -
           (((C117 * C1850 + C50662 * C1858) * C8028 +
             (C117 * C1846 + C50662 * C1851) * C8033 + C5556 * C50849 +
             C5555 * C8032 + C5549 * C50848 + C5550 * C8031) *
                C50742 +
            (C11186 + C11185 + C11184 + C11183 + C11182 + C11181) * C50821) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C50808 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C50645) *
              C50565 * C50850 +
          (((C11175 + C11176 + C11177 + C11178 + C11179 + C11180) * C50821 +
            (C11181 + C11182 + C11183 + C11184 + C11185 + C11186) * C50742) *
               C50645 -
           ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C50808) *
              C50565 * C50851 +
          (((C173 * C8031 + C174 * C50848 + C175 * C8032 + C176 * C50849 +
             C178 * C8033 + C177 * C8028) *
                C50821 +
            (C11479 + C11480 + C11481 + C11482 + C11483 + C11484) * C50742) *
               C50808 -
           (((C117 * C488 + C50662 * C499) * C8028 +
             (C117 * C469 + C50662 * C489) * C8033 + C536 * C50849 +
             C535 * C8032 + C534 * C50848 + C533 * C8031) *
                C50742 +
            (C11484 + C11483 + C11482 + C11481 + C11480 + C11479) * C50821) *
               C50645) *
              C50565 * C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C117 * C122 + C50662 * C129) * C8031 +
                    (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
                    C172 * C50849 + C173 * C8033 + C174 * C8028) *
                       C50821 +
                   (C5545 * C8031 + C5546 * C50848 + C530 * C8032 +
                    C529 * C50849 + C528 * C8033 + C527 * C8028) *
                       C50742) *
                      C50581 * C50565 * C113 -
                  ((C525 * C8028 + C526 * C8033 + C527 * C50849 + C528 * C8032 +
                    C529 * C50848 + C530 * C8031) *
                       C50742 +
                   (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
                    C172 * C50848 + C171 * C8031) *
                       C50821) *
                      C50581 * C50565 * C114 +
                  ((C173 * C8031 + C174 * C50848 + C175 * C8032 +
                    C176 * C50849 + C178 * C8033 + C177 * C8028) *
                       C50821 +
                   (C528 * C8031 + C527 * C50848 + C526 * C8032 +
                    C525 * C50849 + C758 * C8033 + C759 * C8028) *
                       C50742) *
                      C50581 * C50565 * C115 -
                  (((C117 * C750 + C50662 * C752) * C8028 +
                    (C117 * C749 + C50662 * C751) * C8033 + C759 * C50849 +
                    C758 * C8032 + C525 * C50848 + C526 * C8031) *
                       C50742 +
                   (C180 * C8028 + C179 * C8033 + C177 * C50849 + C178 * C8032 +
                    C176 * C50848 + C175 * C8031) *
                       C50821) *
                      C50581 * C50565 * C116)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C122 + C50662 * C129) * C8031 +
                     (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
                     C172 * C50849 + C173 * C8033 + C174 * C8028) *
                        C50821 +
                    (C5545 * C8031 + C5546 * C50848 + C530 * C8032 +
                     C529 * C50849 + C528 * C8033 + C527 * C8028) *
                        C50742) *
                       C50581 * C278 -
                   ((C925 * C8028 + C924 * C8033 + C923 * C50849 +
                     C922 * C8032 + C6104 * C50848 + C6103 * C8031) *
                        C50742 +
                    (C350 * C8028 + C351 * C8033 + C352 * C50849 +
                     C353 * C8032 + (C117 * C299 + C50662 * C316) * C50848 +
                     (C117 * C286 + C50662 * C300) * C8031) *
                        C50821) *
                       C50581 * C279 +
                   (((C117 * C287 + C50662 * C301) * C8031 +
                     (C117 * C302 + C50662 * C317) * C50848 + C354 * C8032 +
                     C355 * C50849 + C356 * C8033 + C357 * C8028) *
                        C50821 +
                    (C7022 * C8031 + C7023 * C50848 + C5347 * C8032 +
                     C5348 * C50849 + C11015 * C8033 + C11016 * C8028) *
                        C50742) *
                       C50581 * C280) *
                      C281 +
                  (((C353 * C8031 + C352 * C50848 + C351 * C8032 +
                     C350 * C50849 + C349 * C8033 + C348 * C8028) *
                        C50821 +
                    (C922 * C8031 + C923 * C50848 + C924 * C8032 +
                     C925 * C50849 + C926 * C8033 + C927 * C8028) *
                        C50742) *
                       C50581 * C279 -
                   ((C525 * C8028 + C526 * C8033 + C527 * C50849 +
                     C528 * C8032 + C529 * C50848 + C530 * C8031) *
                        C50742 +
                    (C176 * C8028 + C175 * C8033 + C174 * C50849 +
                     C173 * C8032 + C172 * C50848 + C171 * C8031) *
                        C50821) *
                       C50581 * C278 -
                   (((C117 * C1566 + C50662 * C1574) * C8028 +
                     (C117 * C1562 + C50662 * C1567) * C8033 + C11016 * C50849 +
                     C11015 * C8032 + C5348 * C50848 + C5347 * C8031) *
                        C50742 +
                    (C359 * C8028 + C358 * C8033 + C357 * C50849 +
                     C356 * C8032 + C355 * C50848 + C354 * C8031) *
                        C50821) *
                       C50581 * C280) *
                      C50552)) /
                    (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C50581 * C50852 -
           ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C50581 * C50853 +
           (((C117 * C287 + C50662 * C301) * C8031 +
             (C117 * C302 + C50662 * C317) * C50848 + C354 * C8032 +
             C355 * C50849 + C356 * C8033 + C357 * C8028) *
                C50821 +
            (C7022 * C8031 + C7023 * C50848 + C5347 * C8032 + C5348 * C50849 +
             C11015 * C8033 + C11016 * C8028) *
                C50742) *
               C50581 * C1331) *
              C50799 +
          (((C353 * C8031 + C352 * C50848 + C351 * C8032 + C350 * C50849 +
             C349 * C8033 + C348 * C8028) *
                C50821 +
            (C11685 + C11686 + C11687 + C11688 + C11689 + C11690) * C50742) *
               C50581 * C50853 -
           ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C50581 * C50852 -
           (((C117 * C1566 + C50662 * C1574) * C8028 +
             (C117 * C1562 + C50662 * C1567) * C8033 + C11016 * C50849 +
             C11015 * C8032 + C5348 * C50848 + C5347 * C8031) *
                C50742 +
            (C359 * C8028 + C358 * C8033 + C357 * C50849 + C356 * C8032 +
             C355 * C50848 + C354 * C8031) *
                C50821) *
               C50581 * C1331) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C50808 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C50645) *
              C50852 +
          (((C11679 + C11680 + C11681 + C11682 + C11683 + C11684) * C50821 +
            (C12081 + C12082 + C12083 + C12084 + C12085 + C12086) * C50742) *
               C50645 -
           ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C50808) *
              C50853 +
          ((((C117 * C287 + C50662 * C301) * C8031 +
             (C117 * C302 + C50662 * C317) * C50848 + C354 * C8032 +
             C355 * C50849 + C356 * C8033 + C357 * C8028) *
                C50821 +
            (C12573 + C12574 + C12575 + C12576 + C12577 + C12578) * C50742) *
               C50808 -
           (((C117 * C2700 + C50662 * C2704) * C8028 +
             (C117 * C2695 + C50662 * C2701) * C8033 + C5350 * C50849 +
             C5349 * C8032 + C7025 * C50848 + C7024 * C8031) *
                C50742 +
            (C12578 + C12577 + C12576 + C12575 + C12574 + C12573) * C50821) *
               C50645) *
              C1331) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C8031 +
            (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
            C172 * C50849 + C173 * C8033 + C174 * C8028) *
               C50821 +
           (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
              C50581 * C1096 -
          ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
           (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
            (C117 * C299 + C50662 * C316) * C50848 +
            (C117 * C286 + C50662 * C300) * C8031) *
               C50821) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C8031 +
            (C117 * C302 + C50662 * C317) * C50848 + C354 * C8032 +
            C355 * C50849 + C356 * C8033 + C357 * C8028) *
               C50821 +
           (C7022 * C8031 + C7023 * C50848 + C5347 * C8032 + C5348 * C50849 +
            C11015 * C8033 + C11016 * C8028) *
               C50742) *
              C50581 * C1098 -
          (((C117 * C3270 + C50662 * C3274) * C8028 +
            (C117 * C3265 + C50662 * C3271) * C8033 +
            (C117 * C3269 + C50662 * C3273) * C50849 +
            (C117 * C3264 + C50662 * C3268) * C8032 +
            (C117 * C3267 + C50662 * C3272) * C50848 +
            (C117 * C3263 + C50662 * C3266) * C8031) *
               C50742 +
           ((C117 * C1107 + C50662 * C1114) * C8028 +
            (C117 * C1102 + C50662 * C1108) * C8033 +
            (C117 * C1109 + C50662 * C1115) * C50849 +
            (C117 * C1103 + C50662 * C1110) * C8032 +
            (C117 * C1111 + C50662 * C1116) * C50848 +
            (C117 * C1104 + C50662 * C1112) * C8031) *
               C50821) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C50581 * C1025 -
           ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C8031 + C352 * C50848 + C351 * C8032 + C350 * C50849 +
             C349 * C8033 + C348 * C8028) *
                C50821 +
            (C11685 + C11686 + C11687 + C11688 + C11689 + C11690) * C50742) *
               C50581 * C50617 -
           ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C8031 + C174 * C50848 + C175 * C8032 + C176 * C50849 +
             C178 * C8033 + C177 * C8028) *
                C50821 +
            (C11479 + C11480 + C11481 + C11482 + C11483 + C11484) * C50742) *
               C50581 * C1025 -
           (((C117 * C902 + C50662 * C908) * C8028 +
             (C117 * C893 + C50662 * C903) * C8033 + C927 * C50849 +
             C926 * C8032 + C925 * C50848 + C924 * C8031) *
                C50742 +
            (C649 * C8028 + C648 * C8033 + C348 * C50849 + C349 * C8032 +
             C350 * C50848 + C351 * C8031) *
                C50821) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C457 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C458 +
           ((C11174 + C11173 + C11172 + C11171 + C11170 + C11169) * C50821 +
            (C5552 * C8031 + C5551 * C50848 + C5550 * C8032 + C5549 * C50849 +
             C5555 * C8033 + C5556 * C8028) *
                C50742) *
               C459) *
              C1025 +
          (((C11679 + C11680 + C11681 + C11682 + C11683 + C11684) * C50821 +
            (C12081 + C12082 + C12083 + C12084 + C12085 + C12086) * C50742) *
               C458 -
           ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C457 -
           (((C117 * C6075 + C50662 * C6077) * C8028 +
             (C117 * C6074 + C50662 * C6076) * C8033 + C6108 * C50849 +
             C6107 * C8032 + C6519 * C50848 + C6518 * C8031) *
                C50742 +
            (C12086 + C12085 + C12084 + C12083 + C12082 + C12081) * C50821) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C8031 +
              (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
              C172 * C50849 + C173 * C8033 + C174 * C8028) *
                 C50821 +
             (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
                C50808 -
            ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
             (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
                C50645) *
               C1025 +
           (((C11679 + C11680 + C11681 + C11682 + C11683 + C11684) * C50821 +
             (C12081 + C12082 + C12083 + C12084 + C12085 + C12086) * C50742) *
                C50645 -
            ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
             (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
              (C117 * C299 + C50662 * C316) * C50848 +
              (C117 * C286 + C50662 * C300) * C8031) *
                 C50821) *
                C50808) *
               C50617) *
              C50799 +
          ((((C11175 + C11176 + C11177 + C11178 + C11179 + C11180) * C50821 +
             (C11181 + C11182 + C11183 + C11184 + C11185 + C11186) * C50742) *
                C50645 -
            ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
             (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
              C172 * C50848 + C171 * C8031) *
                 C50821) *
                C50808) *
               C1025 +
           (((C353 * C8031 + C352 * C50848 + C351 * C8032 + C350 * C50849 +
              C349 * C8033 + C348 * C8028) *
                 C50821 +
             (C11685 + C11686 + C11687 + C11688 + C11689 + C11690) * C50742) *
                C50808 -
            (((C117 * C1219 + C50662 * C1227) * C8028 +
              (C117 * C1215 + C50662 * C1220) * C8033 + C5726 * C50849 +
              C5725 * C8032 + C5345 * C50848 + C5346 * C8031) *
                 C50742 +
             (C11690 + C11689 + C11688 + C11687 + C11686 + C11685) * C50821) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C50581 * C1025 -
           ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C8031 + C352 * C50848 + C351 * C8032 + C350 * C50849 +
             C349 * C8033 + C348 * C8028) *
                C50821 +
            (C11685 + C11686 + C11687 + C11688 + C11689 + C11690) * C50742) *
               C50581 * C50617 -
           ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C8031 + C174 * C50848 + C175 * C8032 + C176 * C50849 +
             C178 * C8033 + C177 * C8028) *
                C50821 +
            (C11479 + C11480 + C11481 + C11482 + C11483 + C11484) * C50742) *
               C50581 * C1025 -
           (((C117 * C902 + C50662 * C908) * C8028 +
             (C117 * C893 + C50662 * C903) * C8033 + C927 * C50849 +
             C926 * C8032 + C925 * C50848 + C924 * C8031) *
                C50742 +
            (C649 * C8028 + C648 * C8033 + C348 * C50849 + C349 * C8032 +
             C350 * C50848 + C351 * C8031) *
                C50821) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C8031 +
            (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
            C172 * C50849 + C173 * C8033 + C174 * C8028) *
               C50821 +
           (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
              C50581 * C1096 -
          ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
           (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
            (C117 * C299 + C50662 * C316) * C50848 +
            (C117 * C286 + C50662 * C300) * C8031) *
               C50821) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C8031 +
            (C117 * C302 + C50662 * C317) * C50848 + C354 * C8032 +
            C355 * C50849 + C356 * C8033 + C357 * C8028) *
               C50821 +
           (C7022 * C8031 + C7023 * C50848 + C5347 * C8032 + C5348 * C50849 +
            C11015 * C8033 + C11016 * C8028) *
               C50742) *
              C50581 * C1098 -
          (((C117 * C3270 + C50662 * C3274) * C8028 +
            (C117 * C3265 + C50662 * C3271) * C8033 +
            (C117 * C3269 + C50662 * C3273) * C50849 +
            (C117 * C3264 + C50662 * C3268) * C8032 +
            (C117 * C3267 + C50662 * C3272) * C50848 +
            (C117 * C3263 + C50662 * C3266) * C8031) *
               C50742 +
           ((C117 * C1107 + C50662 * C1114) * C8028 +
            (C117 * C1102 + C50662 * C1108) * C8033 +
            (C117 * C1109 + C50662 * C1115) * C50849 +
            (C117 * C1103 + C50662 * C1110) * C8032 +
            (C117 * C1111 + C50662 * C1116) * C50848 +
            (C117 * C1104 + C50662 * C1112) * C8031) *
               C50821) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C8031 +
              (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
              C172 * C50849 + C173 * C8033 + C174 * C8028) *
                 C50821 +
             (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
                C1676 -
            ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
             (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
                C50645) *
               C50807 +
           (((C11679 + C11680 + C11681 + C11682 + C11683 + C11684) * C50821 +
             (C12081 + C12082 + C12083 + C12084 + C12085 + C12086) * C50742) *
                C50645 -
            ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
             (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
              (C117 * C299 + C50662 * C316) * C50848 +
              (C117 * C286 + C50662 * C300) * C8031) *
                 C50821) *
                C1676) *
               C50617) *
              C50799 +
          ((((C11175 + C11176 + C11177 + C11178 + C11179 + C11180) * C50821 +
             (C11181 + C11182 + C11183 + C11184 + C11185 + C11186) * C50742) *
                C50645 -
            ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
             (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
              C172 * C50848 + C171 * C8031) *
                 C50821) *
                C1676) *
               C50807 +
           (((C353 * C8031 + C352 * C50848 + C351 * C8032 + C350 * C50849 +
              C349 * C8033 + C348 * C8028) *
                 C50821 +
             (C11685 + C11686 + C11687 + C11688 + C11689 + C11690) * C50742) *
                C1676 -
            (((C117 * C1219 + C50662 * C1227) * C8028 +
              (C117 * C1215 + C50662 * C1220) * C8033 + C5726 * C50849 +
              C5725 * C8032 + C5345 * C50848 + C5346 * C8031) *
                 C50742 +
             (C11690 + C11689 + C11688 + C11687 + C11686 + C11685) * C50821) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C50854 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C50855 +
           ((C11174 + C11173 + C11172 + C11171 + C11170 + C11169) * C50821 +
            (C12969 + C12970 + C12971 + C12972 + C12973 + C12974) * C50742) *
               C2092) *
              C50807 +
          (((C11679 + C11680 + C11681 + C11682 + C11683 + C11684) * C50821 +
            (C12081 + C12082 + C12083 + C12084 + C12085 + C12086) * C50742) *
               C50855 -
           ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C50854 -
           (((C117 * C6075 + C50662 * C6077) * C8028 +
             (C117 * C6074 + C50662 * C6076) * C8033 + C6108 * C50849 +
             C6107 * C8032 + C6519 * C50848 + C6518 * C8031) *
                C50742 +
            (C12086 + C12085 + C12084 + C12083 + C12082 + C12081) * C50821) *
               C2092) *
              C50617) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C1676 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C50645) *
              C278 +
          (((C11679 + C11680 + C11681 + C11682 + C11683 + C11684) * C50821 +
            (C12081 + C12082 + C12083 + C12084 + C12085 + C12086) * C50742) *
               C50645 -
           ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C8031 +
             (C117 * C302 + C50662 * C317) * C50848 + C354 * C8032 +
             C355 * C50849 + C356 * C8033 + C357 * C8028) *
                C50821 +
            (C12573 + C12574 + C12575 + C12576 + C12577 + C12578) * C50742) *
               C1676 -
           (((C117 * C2700 + C50662 * C2704) * C8028 +
             (C117 * C2695 + C50662 * C2701) * C8033 + C5350 * C50849 +
             C5349 * C8032 + C7025 * C50848 + C7024 * C8031) *
                C50742 +
            (C12578 + C12577 + C12576 + C12575 + C12574 + C12573) * C50821) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C1676 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C50645) *
              C50565 * C1027 +
          (((C11175 + C11176 + C11177 + C11178 + C11179 + C11180) * C50821 +
            (C11181 + C11182 + C11183 + C11184 + C11185 + C11186) * C50742) *
               C50645 -
           ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C8031 + C174 * C50848 + C175 * C8032 + C176 * C50849 +
             C178 * C8033 + C177 * C8028) *
                C50821 +
            (C11479 + C11480 + C11481 + C11482 + C11483 + C11484) * C50742) *
               C1676 -
           (((C117 * C488 + C50662 * C499) * C8028 +
             (C117 * C469 + C50662 * C489) * C8033 + C536 * C50849 +
             C535 * C8032 + C534 * C50848 + C533 * C8031) *
                C50742 +
            (C11484 + C11483 + C11482 + C11481 + C11480 + C11479) * C50821) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C8031 +
            (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
            C172 * C50849 + C173 * C8033 + C174 * C8028) *
               C50821 +
           (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
              C1842 -
          ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
           (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
              C1843 +
          ((C11174 + C11173 + C11172 + C11171 + C11170 + C11169) * C50821 +
           (C12969 + C12970 + C12971 + C12972 + C12973 + C12974) * C50742) *
              C1844 -
          (((C117 * C5503 + C50662 * C5507) * C8028 +
            (C117 * C5498 + C50662 * C5504) * C8033 + C5554 * C50849 +
            C5553 * C8032 + C7437 * C50848 + C7436 * C8031) *
               C50742 +
           (C12974 + C12973 + C12972 + C12971 + C12970 + C12969) * C50821) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C50854 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C50855 +
           ((C11174 + C11173 + C11172 + C11171 + C11170 + C11169) * C50821 +
            (C12969 + C12970 + C12971 + C12972 + C12973 + C12974) * C50742) *
               C2092) *
              C50565 * C50799 +
          (((C11175 + C11176 + C11177 + C11178 + C11179 + C11180) * C50821 +
            (C11181 + C11182 + C11183 + C11184 + C11185 + C11186) * C50742) *
               C50855 -
           ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C50854 -
           (((C117 * C1850 + C50662 * C1858) * C8028 +
             (C117 * C1846 + C50662 * C1851) * C8033 + C5556 * C50849 +
             C5555 * C8032 + C5549 * C50848 + C5550 * C8031) *
                C50742 +
            (C11186 + C11185 + C11184 + C11183 + C11182 + C11181) * C50821) *
               C2092) *
              C50565 * C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C1676 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C50645) *
              C50565 * C1027 +
          (((C11175 + C11176 + C11177 + C11178 + C11179 + C11180) * C50821 +
            (C11181 + C11182 + C11183 + C11184 + C11185 + C11186) * C50742) *
               C50645 -
           ((C11180 + C11179 + C11178 + C11177 + C11176 + C11175) * C50742 +
            (C176 * C8028 + C175 * C8033 + C174 * C50849 + C173 * C8032 +
             C172 * C50848 + C171 * C8031) *
                C50821) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C8031 + C174 * C50848 + C175 * C8032 + C176 * C50849 +
             C178 * C8033 + C177 * C8028) *
                C50821 +
            (C11479 + C11480 + C11481 + C11482 + C11483 + C11484) * C50742) *
               C1676 -
           (((C117 * C488 + C50662 * C499) * C8028 +
             (C117 * C469 + C50662 * C489) * C8033 + C536 * C50849 +
             C535 * C8032 + C534 * C50848 + C533 * C8031) *
                C50742 +
            (C11484 + C11483 + C11482 + C11481 + C11480 + C11479) * C50821) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C8031 +
             (C117 * C130 + C50662 * C143) * C50848 + C171 * C8032 +
             C172 * C50849 + C173 * C8033 + C174 * C8028) *
                C50821 +
            (C11163 + C11164 + C11165 + C11166 + C11167 + C11168) * C50742) *
               C1676 -
           ((C11169 + C11170 + C11171 + C11172 + C11173 + C11174) * C50742 +
            (C11168 + C11167 + C11166 + C11165 + C11164 + C11163) * C50821) *
               C50645) *
              C278 +
          (((C11679 + C11680 + C11681 + C11682 + C11683 + C11684) * C50821 +
            (C12081 + C12082 + C12083 + C12084 + C12085 + C12086) * C50742) *
               C50645 -
           ((C11684 + C11683 + C11682 + C11681 + C11680 + C11679) * C50742 +
            (C350 * C8028 + C351 * C8033 + C352 * C50849 + C353 * C8032 +
             (C117 * C299 + C50662 * C316) * C50848 +
             (C117 * C286 + C50662 * C300) * C8031) *
                C50821) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C8031 +
             (C117 * C302 + C50662 * C317) * C50848 + C354 * C8032 +
             C355 * C50849 + C356 * C8033 + C357 * C8028) *
                C50821 +
            (C12573 + C12574 + C12575 + C12576 + C12577 + C12578) * C50742) *
               C1676 -
           (((C117 * C2700 + C50662 * C2704) * C8028 +
             (C117 * C2695 + C50662 * C2701) * C8033 + C5350 * C50849 +
             C5349 * C8032 + C7025 * C50848 + C7024 * C8031) *
                C50742 +
            (C12578 + C12577 + C12576 + C12575 + C12574 + C12573) * C50821) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C50807 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C50617) *
              C50850 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
               C50678 * C50581 * C50617 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C50807) *
              C50851 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C50581 * C50807 -
           ((C117 * C640 + C50662 * C642) * C109 +
            (C117 * C639 + C50662 * C641) * C121 + C649 * C108 + C648 * C120 +
            C348 * C107 + C349 * C119 + C350 * C106 + C351 * C118) *
               C50678 * C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C50807 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C50617) *
              C50850 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2900 + C2901 + C2902) * C2298 +
            (C2903 + C2904 + C2905) * C50523) *
               C50678 * C50581 * C50617 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C50807) *
              C50851 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C50581 * C50807 -
           ((C2296 * C1105 + C2291 * C1113 + C2295 * C308 + C2290 * C320 +
             C2294 * C293 + C2289 * C313) *
                C50523 +
            (C2296 * C1101 + C2291 * C1106 + C2295 * C290 + C2290 * C307 +
             C2294 * C283 + C2289 * C294) *
                C2298 +
            (C2905 + C2904 + C2903) * C2292 + (C2902 + C2901 + C2900) * C2297) *
               C50678 * C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C118 +
             (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
             C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
                C50678 * C50808 -
            (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
             C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
             (C117 * C463 + C50662 * C477) * C118) *
                C50678 * C50645) *
               C50807 +
           (((C117 * C889 + C50662 * C894) * C118 +
             (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
             C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
                C50678 * C50645 -
            (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
             C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
             (C117 * C286 + C50662 * C300) * C118) *
                C50678 * C50808) *
               C50617) *
              C281 +
          (((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
             C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
                C50678 * C50645 -
            (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
             C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                C50678 * C50808) *
               C50807 +
           ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
             C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
                C50678 * C50808 -
            ((C117 * C902 + C50662 * C908) * C109 +
             (C117 * C893 + C50662 * C903) * C121 + C927 * C108 + C926 * C120 +
             C925 * C107 + C924 * C119 + C923 * C106 + C922 * C118) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C2297 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C2292 +
             (C2336 + C2337 + C2338) * C2298 +
             (C2339 + C2340 + C2341) * C50523) *
                C50678 * C50808 -
            ((C2730 + C2731 + C2732) * C50523 +
             (C2733 + C2734 + C2735) * C2298 +
             (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
              C2294 * C476 + C2289 * C493) *
                 C2292 +
             (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
              C2294 * C463 + C2289 * C477) *
                 C2297) *
                C50678 * C50645) *
               C50807 +
           (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
              C2296 * C3263 + C2291 * C3266) *
                 C2297 +
             (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
              C2296 * C3267 + C2291 * C3272) *
                 C2292 +
             (C3288 + C3289 + C3290) * C2298 +
             (C3291 + C3292 + C3293) * C50523) *
                C50678 * C50645 -
            ((C2536 + C2537 + C2538) * C50523 +
             (C2539 + C2540 + C2541) * C2298 +
             (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C2292 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C2297) *
                C50678 * C50808) *
               C50617) *
              C281 +
          ((((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
             (C3064 + C3065 + C3066) * C2298 +
             (C3067 + C3068 + C3069) * C50523) *
                C50678 * C50645 -
            ((C2342 + C2343 + C2344) * C50523 +
             (C2345 + C2346 + C2347) * C2298 + (C2341 + C2340 + C2339) * C2292 +
             (C2338 + C2337 + C2336) * C2297) *
                C50678 * C50808) *
               C50807 +
           (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
             (C2900 + C2901 + C2902) * C2298 +
             (C2903 + C2904 + C2905) * C50523) *
                C50678 * C50808 -
            ((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50523 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C2298 +
             (C3293 + C3292 + C3291) * C2292 +
             (C3290 + C3289 + C3288) * C2297) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C278 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C279 +
           ((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C50581 * C280) *
              C281 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + (C117 * C291 + C50662 * C309) * C121 +
            (C117 * C310 + C50662 * C321) * C109) *
               C50678 * C50581 * C279 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C278 -
           ((C117 * C311 + C50662 * C322) * C109 +
            (C117 * C292 + C50662 * C312) * C121 + C359 * C108 + C358 * C120 +
            C357 * C107 + C356 * C119 + C355 * C106 + C354 * C118) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50662 * C129) * C118 +
           (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
           C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
              C50678 * C50581 * C50565 * C113 -
          (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 + C174 * C107 +
           C173 * C119 + C172 * C106 + C171 * C118) *
              C50678 * C50581 * C50565 * C114 +
          (C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 + C178 * C120 +
           C177 * C108 + C179 * C121 + C180 * C109) *
              C50678 * C50581 * C50565 * C115 -
          ((C117 * C141 + C50662 * C149) * C109 +
           (C117 * C128 + C50662 * C142) * C121 + C180 * C108 + C179 * C120 +
           C177 * C107 + C178 * C119 + C176 * C106 + C175 * C118) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C457 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C458 +
           ((C117 * C464 + C50662 * C478) * C118 +
            (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
            C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
               C50678 * C459) *
              C50565 * C281 +
          ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
            C526 * C120 + C525 * C108 + (C117 * C468 + C50662 * C486) * C121 +
            (C117 * C487 + C50662 * C498) * C109) *
               C50678 * C458 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C457 -
           ((C117 * C488 + C50662 * C499) * C109 +
            (C117 * C469 + C50662 * C489) * C121 + C536 * C108 + C535 * C120 +
            C534 * C107 + C533 * C119 + C532 * C106 + C531 * C118) *
               C50678 * C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C50581 * C50565 * C113 -
          ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
           (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
              C50678 * C50581 * C50565 * C114 +
          ((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
           (C2348 + C2349 + C2350) * C2298 + (C2351 + C2352 + C2353) * C50523) *
              C50678 * C50581 * C50565 * C115 -
          ((C2296 * C311 + C2291 * C322 + C2295 * C310 + C2290 * C321 +
            C2294 * C137 + C2289 * C147) *
               C50523 +
           (C2296 * C292 + C2291 * C312 + C2295 * C291 + C2290 * C309 +
            C2294 * C126 + C2289 * C138) *
               C2298 +
           (C2353 + C2352 + C2351) * C2292 + (C2350 + C2349 + C2348) * C2297) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C278 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C279 +
           ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C50581 * C280) *
              C281 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2294 * C284 + C2289 * C296 + C2295 * C289 + C2290 * C305 +
             C2296 * C1102 + C2291 * C1108) *
                C2298 +
            (C2294 * C295 + C2289 * C314 + C2295 * C306 + C2290 * C319 +
             C2296 * C1107 + C2291 * C1114) *
                C50523) *
               C50678 * C50581 * C279 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C278 -
           ((C2296 * C2506 + C2291 * C2510 + C2295 * C1107 + C2290 * C1114 +
             C2294 * C306 + C2289 * C319) *
                C50523 +
            (C2296 * C2501 + C2291 * C2507 + C2295 * C1102 + C2290 * C1108 +
             C2294 * C289 + C2289 * C305) *
                C2298 +
            (C2547 + C2546 + C2545) * C2292 + (C2544 + C2543 + C2542) * C2297) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C457 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C458 +
           ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
             C2296 * C2693 + C2291 * C2696) *
                C2297 +
            (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
             C2296 * C2697 + C2291 * C2702) *
                C2292 +
            (C2736 + C2737 + C2738) * C2298 +
            (C2739 + C2740 + C2741) * C50523) *
               C50678 * C459) *
              C50565 * C281 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C2294 * C461 + C2289 * C473 + C2295 * C891 + C2290 * C898 +
             C2296 * C1563 + C2291 * C1569) *
                C2298 +
            (C2294 * C472 + C2289 * C491 + C2295 * C899 + C2290 * C906 +
             C2296 * C1568 + C2291 * C1575) *
                C50523) *
               C50678 * C458 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C457 -
           ((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
             C2294 * C483 + C2289 * C496) *
                C50523 +
            (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
             C2294 * C466 + C2289 * C482) *
                C2298 +
            (C2741 + C2740 + C2739) * C2292 + (C2738 + C2737 + C2736) * C2297) *
               C50678 * C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50808 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C50565 * C50850 +
          ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
            C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
               C50678 * C50645 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50808) *
              C50565 * C50851 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C50808 -
           ((C117 * C750 + C50662 * C752) * C109 +
            (C117 * C749 + C50662 * C751) * C121 + C759 * C108 + C758 * C120 +
            C525 * C107 + C526 * C119 + C527 * C106 + C528 * C118) *
               C50678 * C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50808 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C50565 * C50850 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C3064 + C3065 + C3066) * C2298 +
            (C3067 + C3068 + C3069) * C50523) *
               C50678 * C50645 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50808) *
              C50565 * C50851 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C50808 -
           ((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50523 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C2298 +
            (C3069 + C3068 + C3067) * C2292 + (C3066 + C3065 + C3064) * C2297) *
               C50678 * C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50662 * C129) * C118 +
           (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
           C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
              C50678 * C50581 * C50565 * C113 -
          (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 + C174 * C107 +
           C173 * C119 + C172 * C106 + C171 * C118) *
              C50678 * C50581 * C50565 * C114 +
          (C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 + C178 * C120 +
           C177 * C108 + C179 * C121 + C180 * C109) *
              C50678 * C50581 * C50565 * C115 -
          ((C117 * C141 + C50662 * C149) * C109 +
           (C117 * C128 + C50662 * C142) * C121 + C180 * C108 + C179 * C120 +
           C177 * C107 + C178 * C119 + C176 * C106 + C175 * C118) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C278 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C279 +
           ((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C50581 * C280) *
              C281 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + (C117 * C291 + C50662 * C309) * C121 +
            (C117 * C310 + C50662 * C321) * C109) *
               C50678 * C50581 * C279 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C278 -
           ((C117 * C311 + C50662 * C322) * C109 +
            (C117 * C292 + C50662 * C312) * C121 + C359 * C108 + C358 * C120 +
            C357 * C107 + C356 * C119 + C355 * C106 + C354 * C118) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C50581 * C50565 * C113 -
          ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
           (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
              C50678 * C50581 * C50565 * C114 +
          ((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
           (C2348 + C2349 + C2350) * C2298 + (C2351 + C2352 + C2353) * C50523) *
              C50678 * C50581 * C50565 * C115 -
          ((C2296 * C311 + C2291 * C322 + C2295 * C310 + C2290 * C321 +
            C2294 * C137 + C2289 * C147) *
               C50523 +
           (C2296 * C292 + C2291 * C312 + C2295 * C291 + C2290 * C309 +
            C2294 * C126 + C2289 * C138) *
               C2298 +
           (C2353 + C2352 + C2351) * C2292 + (C2350 + C2349 + C2348) * C2297) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C278 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C279 +
           ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C50581 * C280) *
              C281 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2294 * C284 + C2289 * C296 + C2295 * C289 + C2290 * C305 +
             C2296 * C1102 + C2291 * C1108) *
                C2298 +
            (C2294 * C295 + C2289 * C314 + C2295 * C306 + C2290 * C319 +
             C2296 * C1107 + C2291 * C1114) *
                C50523) *
               C50678 * C50581 * C279 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C278 -
           ((C2296 * C2506 + C2291 * C2510 + C2295 * C1107 + C2290 * C1114 +
             C2294 * C306 + C2289 * C319) *
                C50523 +
            (C2296 * C2501 + C2291 * C2507 + C2295 * C1102 + C2290 * C1108 +
             C2294 * C289 + C2289 * C305) *
                C2298 +
            (C2547 + C2546 + C2545) * C2292 + (C2544 + C2543 + C2542) * C2297) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C50852 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C50853 +
           ((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C50581 * C1331) *
              C50799 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
               C50678 * C50581 * C50853 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C50852 -
           ((C117 * C311 + C50662 * C322) * C109 +
            (C117 * C292 + C50662 * C312) * C121 + C359 * C108 + C358 * C120 +
            C357 * C107 + C356 * C119 + C355 * C106 + C354 * C118) *
               C50678 * C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C50852 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C50853 +
           ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C50581 * C1331) *
              C50799 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2900 + C2901 + C2902) * C2298 +
            (C2903 + C2904 + C2905) * C50523) *
               C50678 * C50581 * C50853 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C50852 -
           ((C2296 * C2506 + C2291 * C2510 + C2295 * C1107 + C2290 * C1114 +
             C2294 * C306 + C2289 * C319) *
                C50523 +
            (C2296 * C2501 + C2291 * C2507 + C2295 * C1102 + C2290 * C1108 +
             C2294 * C289 + C2289 * C305) *
                C2298 +
            (C2547 + C2546 + C2545) * C2292 + (C2544 + C2543 + C2542) * C2297) *
               C50678 * C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50808 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C50852 +
          (((C117 * C889 + C50662 * C894) * C118 +
            (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
            C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
               C50678 * C50645 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50808) *
              C50853 +
          (((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C50808 -
           ((C117 * C1566 + C50662 * C1574) * C109 +
            (C117 * C1562 + C50662 * C1567) * C121 +
            (C117 * C1568 + C50662 * C1575) * C108 +
            (C117 * C1563 + C50662 * C1569) * C120 +
            (C117 * C1570 + C50662 * C1576) * C107 +
            (C117 * C1564 + C50662 * C1571) * C119 +
            (C117 * C1572 + C50662 * C1577) * C106 +
            (C117 * C1565 + C50662 * C1573) * C118) *
               C50678 * C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50808 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C50852 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C50645 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50808) *
              C50853 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C50808 -
           ((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
             C2294 * C1570 + C2289 * C1576) *
                C50523 +
            (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
             C2294 * C1564 + C2289 * C1571) *
                C2298 +
            (C2296 * C4189 + C2291 * C4192 + C2295 * C3267 + C2290 * C3272 +
             C2294 * C1572 + C2289 * C1577) *
                C2292 +
            (C2296 * C4186 + C2291 * C4190 + C2295 * C3263 + C2290 * C3266 +
             C2294 * C1565 + C2289 * C1573) *
                C2297) *
               C50678 * C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50662 * C129) * C118 +
           (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
           C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
              C50678 * C50581 * C1096 -
          (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 + C352 * C107 +
           C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
           (C117 * C286 + C50662 * C300) * C118) *
              C50678 * C50581 * C1097 +
          ((C117 * C287 + C50662 * C301) * C118 +
           (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
           C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
              C50678 * C50581 * C1098 -
          ((C117 * C1105 + C50662 * C1113) * C109 +
           (C117 * C1101 + C50662 * C1106) * C121 +
           (C117 * C1107 + C50662 * C1114) * C108 +
           (C117 * C1102 + C50662 * C1108) * C120 +
           (C117 * C1109 + C50662 * C1115) * C107 +
           (C117 * C1103 + C50662 * C1110) * C119 +
           (C117 * C1111 + C50662 * C1116) * C106 +
           (C117 * C1104 + C50662 * C1112) * C118) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C1025 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C50617) *
              C1027 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
               C50678 * C50581 * C50617 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C1025) *
              C1028 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C50581 * C1025 -
           ((C117 * C640 + C50662 * C642) * C109 +
            (C117 * C639 + C50662 * C641) * C121 + C649 * C108 + C648 * C120 +
            C348 * C107 + C349 * C119 + C350 * C106 + C351 * C118) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C457 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C458 +
           ((C117 * C464 + C50662 * C478) * C118 +
            (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
            C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
               C50678 * C459) *
              C1025 +
          (((C117 * C889 + C50662 * C894) * C118 +
            (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
            C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
               C50678 * C458 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C457 -
           ((C117 * C1219 + C50662 * C1227) * C109 +
            (C117 * C1215 + C50662 * C1220) * C121 +
            (C117 * C1221 + C50662 * C1228) * C108 +
            (C117 * C1216 + C50662 * C1222) * C120 +
            (C117 * C1223 + C50662 * C1229) * C107 +
            (C117 * C1217 + C50662 * C1224) * C119 +
            (C117 * C1225 + C50662 * C1230) * C106 +
            (C117 * C1218 + C50662 * C1226) * C118) *
               C50678 * C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C1025 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2900 + C2901 + C2902) * C2298 +
            (C2903 + C2904 + C2905) * C50523) *
               C50678 * C50581 * C50617 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C1025) *
              C1028 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C50581 * C1025 -
           ((C2296 * C1105 + C2291 * C1113 + C2295 * C308 + C2290 * C320 +
             C2294 * C293 + C2289 * C313) *
                C50523 +
            (C2296 * C1101 + C2291 * C1106 + C2295 * C290 + C2290 * C307 +
             C2294 * C283 + C2289 * C294) *
                C2298 +
            (C2905 + C2904 + C2903) * C2292 + (C2902 + C2901 + C2900) * C2297) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C50581 * C1096 -
          ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
           (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
            C2294 * C299 + C2289 * C316) *
               C2292 +
           (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
            C2294 * C286 + C2289 * C300) *
               C2297) *
              C50678 * C50581 * C1097 +
          ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
            C2296 * C2499 + C2291 * C2502) *
               C2297 +
           (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
            C2296 * C2503 + C2291 * C2508) *
               C2292 +
           (C2542 + C2543 + C2544) * C2298 + (C2545 + C2546 + C2547) * C50523) *
              C50678 * C50581 * C1098 -
          ((C2296 * C3539 + C2291 * C3543 + C2295 * C2505 + C2290 * C2509 +
            C2294 * C1109 + C2289 * C1115) *
               C50523 +
           (C2296 * C3537 + C2291 * C3540 + C2295 * C2500 + C2290 * C2504 +
            C2294 * C1103 + C2289 * C1110) *
               C2298 +
           (C2296 * C3541 + C2291 * C3544 + C2295 * C2503 + C2290 * C2508 +
            C2294 * C1111 + C2289 * C1116) *
               C2292 +
           (C2296 * C3538 + C2291 * C3542 + C2295 * C2499 + C2290 * C2502 +
            C2294 * C1104 + C2289 * C1112) *
               C2297) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C457 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C458 +
           ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
             C2296 * C2693 + C2291 * C2696) *
                C2297 +
            (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
             C2296 * C2697 + C2291 * C2702) *
                C2292 +
            (C2736 + C2737 + C2738) * C2298 +
            (C2739 + C2740 + C2741) * C50523) *
               C50678 * C459) *
              C1025 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C458 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C457 -
           ((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
             C2294 * C1223 + C2289 * C1229) *
                C50523 +
            (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
             C2294 * C1217 + C2289 * C1224) *
                C2298 +
            (C2296 * C3695 + C2291 * C3698 + C2295 * C2697 + C2290 * C2702 +
             C2294 * C1225 + C2289 * C1230) *
                C2292 +
            (C2296 * C3692 + C2291 * C3696 + C2295 * C2693 + C2290 * C2696 +
             C2294 * C1218 + C2289 * C1226) *
                C2297) *
               C50678 * C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C118 +
             (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
             C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
                C50678 * C50808 -
            (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
             C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
             (C117 * C463 + C50662 * C477) * C118) *
                C50678 * C50645) *
               C1025 +
           (((C117 * C889 + C50662 * C894) * C118 +
             (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
             C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
                C50678 * C50645 -
            (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
             C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
             (C117 * C286 + C50662 * C300) * C118) *
                C50678 * C50808) *
               C50617) *
              C50799 +
          (((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
             C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
                C50678 * C50645 -
            (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
             C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                C50678 * C50808) *
               C1025 +
           ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
             C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
                C50678 * C50808 -
            ((C117 * C902 + C50662 * C908) * C109 +
             (C117 * C893 + C50662 * C903) * C121 + C927 * C108 + C926 * C120 +
             C925 * C107 + C924 * C119 + C923 * C106 + C922 * C118) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C2297 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C2292 +
             (C2336 + C2337 + C2338) * C2298 +
             (C2339 + C2340 + C2341) * C50523) *
                C50678 * C50808 -
            ((C2730 + C2731 + C2732) * C50523 +
             (C2733 + C2734 + C2735) * C2298 +
             (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
              C2294 * C476 + C2289 * C493) *
                 C2292 +
             (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
              C2294 * C463 + C2289 * C477) *
                 C2297) *
                C50678 * C50645) *
               C1025 +
           (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
              C2296 * C3263 + C2291 * C3266) *
                 C2297 +
             (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
              C2296 * C3267 + C2291 * C3272) *
                 C2292 +
             (C3288 + C3289 + C3290) * C2298 +
             (C3291 + C3292 + C3293) * C50523) *
                C50678 * C50645 -
            ((C2536 + C2537 + C2538) * C50523 +
             (C2539 + C2540 + C2541) * C2298 +
             (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C2292 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C2297) *
                C50678 * C50808) *
               C50617) *
              C50799 +
          ((((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
             (C3064 + C3065 + C3066) * C2298 +
             (C3067 + C3068 + C3069) * C50523) *
                C50678 * C50645 -
            ((C2342 + C2343 + C2344) * C50523 +
             (C2345 + C2346 + C2347) * C2298 + (C2341 + C2340 + C2339) * C2292 +
             (C2338 + C2337 + C2336) * C2297) *
                C50678 * C50808) *
               C1025 +
           (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
             (C2900 + C2901 + C2902) * C2298 +
             (C2903 + C2904 + C2905) * C50523) *
                C50678 * C50808 -
            ((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50523 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C2298 +
             (C3293 + C3292 + C3291) * C2292 +
             (C3290 + C3289 + C3288) * C2297) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50581 * C1025 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50581 * C50617) *
              C1027 +
          ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
            C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
               C50678 * C50581 * C50617 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50581 * C1025) *
              C1028 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C50581 * C1025 -
           ((C117 * C640 + C50662 * C642) * C109 +
            (C117 * C639 + C50662 * C641) * C121 + C649 * C108 + C648 * C120 +
            C348 * C107 + C349 * C119 + C350 * C106 + C351 * C118) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50662 * C129) * C118 +
           (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
           C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
              C50678 * C50581 * C1096 -
          (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 + C352 * C107 +
           C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
           (C117 * C286 + C50662 * C300) * C118) *
              C50678 * C50581 * C1097 +
          ((C117 * C287 + C50662 * C301) * C118 +
           (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
           C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
              C50678 * C50581 * C1098 -
          ((C117 * C1105 + C50662 * C1113) * C109 +
           (C117 * C1101 + C50662 * C1106) * C121 +
           (C117 * C1107 + C50662 * C1114) * C108 +
           (C117 * C1102 + C50662 * C1108) * C120 +
           (C117 * C1109 + C50662 * C1115) * C107 +
           (C117 * C1103 + C50662 * C1110) * C119 +
           (C117 * C1111 + C50662 * C1116) * C106 +
           (C117 * C1104 + C50662 * C1112) * C118) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50581 * C1025 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
            (C2900 + C2901 + C2902) * C2298 +
            (C2903 + C2904 + C2905) * C50523) *
               C50678 * C50581 * C50617 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50581 * C1025) *
              C1028 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C50581 * C1025 -
           ((C2296 * C1105 + C2291 * C1113 + C2295 * C308 + C2290 * C320 +
             C2294 * C293 + C2289 * C313) *
                C50523 +
            (C2296 * C1101 + C2291 * C1106 + C2295 * C290 + C2290 * C307 +
             C2294 * C283 + C2289 * C294) *
                C2298 +
            (C2905 + C2904 + C2903) * C2292 + (C2902 + C2901 + C2900) * C2297) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C50581 * C1096 -
          ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
           (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
            C2294 * C299 + C2289 * C316) *
               C2292 +
           (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
            C2294 * C286 + C2289 * C300) *
               C2297) *
              C50678 * C50581 * C1097 +
          ((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
            C2296 * C2499 + C2291 * C2502) *
               C2297 +
           (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
            C2296 * C2503 + C2291 * C2508) *
               C2292 +
           (C2542 + C2543 + C2544) * C2298 + (C2545 + C2546 + C2547) * C50523) *
              C50678 * C50581 * C1098 -
          ((C2296 * C3539 + C2291 * C3543 + C2295 * C2505 + C2290 * C2509 +
            C2294 * C1109 + C2289 * C1115) *
               C50523 +
           (C2296 * C3537 + C2291 * C3540 + C2295 * C2500 + C2290 * C2504 +
            C2294 * C1103 + C2289 * C1110) *
               C2298 +
           (C2296 * C3541 + C2291 * C3544 + C2295 * C2503 + C2290 * C2508 +
            C2294 * C1111 + C2289 * C1116) *
               C2292 +
           (C2296 * C3538 + C2291 * C3542 + C2295 * C2499 + C2290 * C2502 +
            C2294 * C1104 + C2289 * C1112) *
               C2297) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C118 +
             (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
             C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
                C50678 * C1676 -
            (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
             C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
             (C117 * C463 + C50662 * C477) * C118) *
                C50678 * C50645) *
               C50807 +
           (((C117 * C889 + C50662 * C894) * C118 +
             (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
             C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
                C50678 * C50645 -
            (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
             C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
             (C117 * C286 + C50662 * C300) * C118) *
                C50678 * C1676) *
               C50617) *
              C50799 +
          (((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
             C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
                C50678 * C50645 -
            (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
             C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
                C50678 * C1676) *
               C50807 +
           ((C353 * C118 + C352 * C106 + C351 * C119 + C350 * C107 +
             C349 * C120 + C348 * C108 + C648 * C121 + C649 * C109) *
                C50678 * C1676 -
            ((C117 * C902 + C50662 * C908) * C109 +
             (C117 * C893 + C50662 * C903) * C121 + C927 * C108 + C926 * C120 +
             C925 * C107 + C924 * C119 + C923 * C106 + C922 * C118) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C2297 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C2292 +
             (C2336 + C2337 + C2338) * C2298 +
             (C2339 + C2340 + C2341) * C50523) *
                C50678 * C1676 -
            ((C2730 + C2731 + C2732) * C50523 +
             (C2733 + C2734 + C2735) * C2298 +
             (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
              C2294 * C476 + C2289 * C493) *
                 C2292 +
             (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
              C2294 * C463 + C2289 * C477) *
                 C2297) *
                C50678 * C50645) *
               C50807 +
           (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
              C2296 * C3263 + C2291 * C3266) *
                 C2297 +
             (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
              C2296 * C3267 + C2291 * C3272) *
                 C2292 +
             (C3288 + C3289 + C3290) * C2298 +
             (C3291 + C3292 + C3293) * C50523) *
                C50678 * C50645 -
            ((C2536 + C2537 + C2538) * C50523 +
             (C2539 + C2540 + C2541) * C2298 +
             (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C2292 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C2297) *
                C50678 * C1676) *
               C50617) *
              C50799 +
          ((((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
             (C3064 + C3065 + C3066) * C2298 +
             (C3067 + C3068 + C3069) * C50523) *
                C50678 * C50645 -
            ((C2342 + C2343 + C2344) * C50523 +
             (C2345 + C2346 + C2347) * C2298 + (C2341 + C2340 + C2339) * C2292 +
             (C2338 + C2337 + C2336) * C2297) *
                C50678 * C1676) *
               C50807 +
           (((C2541 + C2540 + C2539) * C2297 + (C2538 + C2537 + C2536) * C2292 +
             (C2900 + C2901 + C2902) * C2298 +
             (C2903 + C2904 + C2905) * C50523) *
                C50678 * C1676 -
            ((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50523 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C2298 +
             (C3293 + C3292 + C3291) * C2292 +
             (C3290 + C3289 + C3288) * C2297) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50854 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50855 +
           ((C117 * C464 + C50662 * C478) * C118 +
            (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
            C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
               C50678 * C2092) *
              C50807 +
          (((C117 * C889 + C50662 * C894) * C118 +
            (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
            C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
               C50678 * C50855 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C50854 -
           ((C117 * C1219 + C50662 * C1227) * C109 +
            (C117 * C1215 + C50662 * C1220) * C121 +
            (C117 * C1221 + C50662 * C1228) * C108 +
            (C117 * C1216 + C50662 * C1222) * C120 +
            (C117 * C1223 + C50662 * C1229) * C107 +
            (C117 * C1217 + C50662 * C1224) * C119 +
            (C117 * C1225 + C50662 * C1230) * C106 +
            (C117 * C1218 + C50662 * C1226) * C118) *
               C50678 * C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50854 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50855 +
           ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
             C2296 * C2693 + C2291 * C2696) *
                C2297 +
            (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
             C2296 * C2697 + C2291 * C2702) *
                C2292 +
            (C2736 + C2737 + C2738) * C2298 +
            (C2739 + C2740 + C2741) * C50523) *
               C50678 * C2092) *
              C50807 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C50855 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C50854 -
           ((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
             C2294 * C1223 + C2289 * C1229) *
                C50523 +
            (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
             C2294 * C1217 + C2289 * C1224) *
                C2298 +
            (C2296 * C3695 + C2291 * C3698 + C2295 * C2697 + C2290 * C2702 +
             C2294 * C1225 + C2289 * C1230) *
                C2292 +
            (C2296 * C3692 + C2291 * C3696 + C2295 * C2693 + C2290 * C2696 +
             C2294 * C1218 + C2289 * C1226) *
                C2297) *
               C50678 * C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C1676 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C278 +
          (((C117 * C889 + C50662 * C894) * C118 +
            (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
            C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
               C50678 * C50645 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C1676) *
              C279 +
          (((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C1676 -
           ((C117 * C1566 + C50662 * C1574) * C109 +
            (C117 * C1562 + C50662 * C1567) * C121 +
            (C117 * C1568 + C50662 * C1575) * C108 +
            (C117 * C1563 + C50662 * C1569) * C120 +
            (C117 * C1570 + C50662 * C1576) * C107 +
            (C117 * C1564 + C50662 * C1571) * C119 +
            (C117 * C1572 + C50662 * C1577) * C106 +
            (C117 * C1565 + C50662 * C1573) * C118) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C1676 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C50565 * C1027 +
          ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
            C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
               C50678 * C50645 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C1676) *
              C50565 * C1028 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C1676 -
           ((C117 * C750 + C50662 * C752) * C109 +
            (C117 * C749 + C50662 * C751) * C121 + C759 * C108 + C758 * C120 +
            C525 * C107 + C526 * C119 + C527 * C106 + C528 * C118) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C50662 * C129) * C118 +
           (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
           C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
              C50678 * C1842 -
          (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 + C529 * C107 +
           C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
           (C117 * C463 + C50662 * C477) * C118) *
              C50678 * C1843 +
          ((C117 * C464 + C50662 * C478) * C118 +
           (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
           C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
              C50678 * C1844 -
          ((C117 * C1850 + C50662 * C1858) * C109 +
           (C117 * C1846 + C50662 * C1851) * C121 +
           (C117 * C1852 + C50662 * C1859) * C108 +
           (C117 * C1847 + C50662 * C1853) * C120 +
           (C117 * C1854 + C50662 * C1860) * C107 +
           (C117 * C1848 + C50662 * C1855) * C119 +
           (C117 * C1856 + C50662 * C1861) * C106 +
           (C117 * C1849 + C50662 * C1857) * C118) *
              C50678 * C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C1676 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C3064 + C3065 + C3066) * C2298 +
            (C3067 + C3068 + C3069) * C50523) *
               C50678 * C50645 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C1676) *
              C50565 * C1028 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C1676 -
           ((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50523 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C2298 +
            (C3069 + C3068 + C3067) * C2292 + (C3066 + C3065 + C3064) * C2297) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C1676 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C278 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C50645 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C1676) *
              C279 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C1676 -
           ((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
             C2294 * C1570 + C2289 * C1576) *
                C50523 +
            (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
             C2294 * C1564 + C2289 * C1571) *
                C2298 +
            (C2296 * C4189 + C2291 * C4192 + C2295 * C3267 + C2290 * C3272 +
             C2294 * C1572 + C2289 * C1577) *
                C2292 +
            (C2296 * C4186 + C2291 * C4190 + C2295 * C3263 + C2290 * C3266 +
             C2294 * C1565 + C2289 * C1573) *
                C2297) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
            C2296 * C287 + C2291 * C301) *
               C2297 +
           (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
            C2296 * C302 + C2291 * C317) *
               C2292 +
           (C2336 + C2337 + C2338) * C2298 + (C2339 + C2340 + C2341) * C50523) *
              C50678 * C1842 -
          ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
           (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
            C2294 * C476 + C2289 * C493) *
               C2292 +
           (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
            C2294 * C463 + C2289 * C477) *
               C2297) *
              C50678 * C1843 +
          ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
            C2296 * C2693 + C2291 * C2696) *
               C2297 +
           (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
            C2296 * C2697 + C2291 * C2702) *
               C2292 +
           (C2736 + C2737 + C2738) * C2298 + (C2739 + C2740 + C2741) * C50523) *
              C50678 * C1844 -
          ((C2296 * C4587 + C2291 * C4595 + C2295 * C4588 + C2290 * C4596 +
            C2294 * C1854 + C2289 * C1860) *
               C50523 +
           (C2296 * C4583 + C2291 * C4589 + C2295 * C4584 + C2290 * C4590 +
            C2294 * C1848 + C2289 * C1855) *
               C2298 +
           (C2296 * C4591 + C2291 * C4597 + C2295 * C4592 + C2290 * C4598 +
            C2294 * C1856 + C2289 * C1861) *
               C2292 +
           (C2296 * C4585 + C2291 * C4593 + C2295 * C4586 + C2290 * C4594 +
            C2294 * C1849 + C2289 * C1857) *
               C2297) *
              C50678 * C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C50854 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50855 +
           ((C117 * C464 + C50662 * C478) * C118 +
            (C117 * C479 + C50662 * C494) * C106 + C531 * C119 + C532 * C107 +
            C533 * C120 + C534 * C108 + C535 * C121 + C536 * C109) *
               C50678 * C2092) *
              C50565 * C50799 +
          ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
            C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
               C50678 * C50855 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C50854 -
           ((C117 * C488 + C50662 * C499) * C109 +
            (C117 * C469 + C50662 * C489) * C121 + C536 * C108 + C535 * C120 +
            C534 * C107 + C533 * C119 + C532 * C106 + C531 * C118) *
               C50678 * C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C50854 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50855 +
           ((C2294 * C464 + C2289 * C478 + C2295 * C1218 + C2290 * C1226 +
             C2296 * C2693 + C2291 * C2696) *
                C2297 +
            (C2294 * C479 + C2289 * C494 + C2295 * C1225 + C2290 * C1230 +
             C2296 * C2697 + C2291 * C2702) *
                C2292 +
            (C2736 + C2737 + C2738) * C2298 +
            (C2739 + C2740 + C2741) * C50523) *
               C50678 * C2092) *
              C50565 * C50799 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C3064 + C3065 + C3066) * C2298 +
            (C3067 + C3068 + C3069) * C50523) *
               C50678 * C50855 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C50854 -
           ((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
             C2294 * C483 + C2289 * C496) *
                C50523 +
            (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
             C2294 * C466 + C2289 * C482) *
                C2298 +
            (C2741 + C2740 + C2739) * C2292 + (C2738 + C2737 + C2736) * C2297) *
               C50678 * C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C1676 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C50565 * C1027 +
          ((C530 * C118 + C529 * C106 + C528 * C119 + C527 * C107 +
            C526 * C120 + C525 * C108 + C758 * C121 + C759 * C109) *
               C50678 * C50645 -
           (C177 * C109 + C178 * C121 + C176 * C108 + C175 * C120 +
            C174 * C107 + C173 * C119 + C172 * C106 + C171 * C118) *
               C50678 * C1676) *
              C50565 * C1028 +
          ((C173 * C118 + C174 * C106 + C175 * C119 + C176 * C107 +
            C178 * C120 + C177 * C108 + C179 * C121 + C180 * C109) *
               C50678 * C1676 -
           ((C117 * C750 + C50662 * C752) * C109 +
            (C117 * C749 + C50662 * C751) * C121 + C759 * C108 + C758 * C120 +
            C525 * C107 + C526 * C119 + C527 * C106 + C528 * C118) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C118 +
            (C117 * C130 + C50662 * C143) * C106 + C171 * C119 + C172 * C107 +
            C173 * C120 + C174 * C108 + C175 * C121 + C176 * C109) *
               C50678 * C1676 -
           (C525 * C109 + C526 * C121 + C527 * C108 + C528 * C120 +
            C529 * C107 + C530 * C119 + (C117 * C476 + C50662 * C493) * C106 +
            (C117 * C463 + C50662 * C477) * C118) *
               C50678 * C50645) *
              C278 +
          (((C117 * C889 + C50662 * C894) * C118 +
            (C117 * C895 + C50662 * C904) * C106 + C922 * C119 + C923 * C107 +
            C924 * C120 + C925 * C108 + C926 * C121 + C927 * C109) *
               C50678 * C50645 -
           (C348 * C109 + C349 * C121 + C350 * C108 + C351 * C120 +
            C352 * C107 + C353 * C119 + (C117 * C299 + C50662 * C316) * C106 +
            (C117 * C286 + C50662 * C300) * C118) *
               C50678 * C1676) *
              C279 +
          (((C117 * C287 + C50662 * C301) * C118 +
            (C117 * C302 + C50662 * C317) * C106 + C354 * C119 + C355 * C107 +
            C356 * C120 + C357 * C108 + C358 * C121 + C359 * C109) *
               C50678 * C1676 -
           ((C117 * C1566 + C50662 * C1574) * C109 +
            (C117 * C1562 + C50662 * C1567) * C121 +
            (C117 * C1568 + C50662 * C1575) * C108 +
            (C117 * C1563 + C50662 * C1569) * C120 +
            (C117 * C1570 + C50662 * C1576) * C107 +
            (C117 * C1564 + C50662 * C1571) * C119 +
            (C117 * C1572 + C50662 * C1577) * C106 +
            (C117 * C1565 + C50662 * C1573) * C118) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C1676 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C2735 + C2734 + C2733) * C2297 + (C2732 + C2731 + C2730) * C2292 +
            (C3064 + C3065 + C3066) * C2298 +
            (C3067 + C3068 + C3069) * C50523) *
               C50678 * C50645 -
           ((C2342 + C2343 + C2344) * C50523 + (C2345 + C2346 + C2347) * C2298 +
            (C2341 + C2340 + C2339) * C2292 + (C2338 + C2337 + C2336) * C2297) *
               C50678 * C1676) *
              C50565 * C1028 +
          (((C2347 + C2346 + C2345) * C2297 + (C2344 + C2343 + C2342) * C2292 +
            (C2348 + C2349 + C2350) * C2298 +
            (C2351 + C2352 + C2353) * C50523) *
               C50678 * C1676 -
           ((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50523 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C2298 +
            (C3069 + C3068 + C3067) * C2292 + (C3066 + C3065 + C3064) * C2297) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C2297 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C2292 +
            (C2336 + C2337 + C2338) * C2298 +
            (C2339 + C2340 + C2341) * C50523) *
               C50678 * C1676 -
           ((C2730 + C2731 + C2732) * C50523 + (C2733 + C2734 + C2735) * C2298 +
            (C2296 * C1572 + C2291 * C1577 + C2295 * C895 + C2290 * C904 +
             C2294 * C476 + C2289 * C493) *
                C2292 +
            (C2296 * C1565 + C2291 * C1573 + C2295 * C889 + C2290 * C894 +
             C2294 * C463 + C2289 * C477) *
                C2297) *
               C50678 * C50645) *
              C278 +
          (((C2294 * C889 + C2289 * C894 + C2295 * C1565 + C2290 * C1573 +
             C2296 * C3263 + C2291 * C3266) *
                C2297 +
            (C2294 * C895 + C2289 * C904 + C2295 * C1572 + C2290 * C1577 +
             C2296 * C3267 + C2291 * C3272) *
                C2292 +
            (C3288 + C3289 + C3290) * C2298 +
            (C3291 + C3292 + C3293) * C50523) *
               C50678 * C50645 -
           ((C2536 + C2537 + C2538) * C50523 + (C2539 + C2540 + C2541) * C2298 +
            (C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C2292 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C2297) *
               C50678 * C1676) *
              C279 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C2297 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C2292 +
            (C2542 + C2543 + C2544) * C2298 +
            (C2545 + C2546 + C2547) * C50523) *
               C50678 * C1676 -
           ((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
             C2294 * C1570 + C2289 * C1576) *
                C50523 +
            (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
             C2294 * C1564 + C2289 * C1571) *
                C2298 +
            (C2296 * C4189 + C2291 * C4192 + C2295 * C3267 + C2290 * C3272 +
             C2294 * C1572 + C2289 * C1577) *
                C2292 +
            (C2296 * C4186 + C2291 * C4190 + C2295 * C3263 + C2290 * C3266 +
             C2294 * C1565 + C2289 * C1573) *
                C2297) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50581 * C50807 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C50581 * C50617) *
                      C50850 +
                  (((C24828 + C24827 + C24826) * C49749 +
                    (C24825 + C24824 + C24823) * C50792 +
                    (C25175 + C25176 + C25177) * C49742 +
                    (C25178 + C25179 + C25180) * C50523) *
                       C50678 * C50581 * C50617 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C50581 * C50807) *
                      C50851 +
                  (((C24646 + C24645 + C24644) * C49749 +
                    (C24643 + C24642 + C24641) * C50792 +
                    (C24647 + C24648 + C24649) * C49742 +
                    (C24650 + C24651 + C24652) * C50523) *
                       C50678 * C50581 * C50807 -
                   ((C24595 * C1105 + C24590 * C1113 + C24594 * C308 +
                     C50857 * C320 + C24593 * C293 + C50856 * C313) *
                        C50523 +
                    (C24595 * C1101 + C24590 * C1106 + C24594 * C290 +
                     C50857 * C307 + C24593 * C283 + C50856 * C294) *
                        C49742 +
                    (C25180 + C25179 + C25178) * C50792 +
                    (C25177 + C25176 + C25175) * C49749) *
                       C50678 * C50581 * C50617) *
                      C638)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C49749 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50792 +
                     (C24635 + C24636 + C24637) * C49742 +
                     (C24638 + C24639 + C24640) * C50523) *
                        C50678 * C50808 -
                    ((C25005 + C25006 + C25007) * C50523 +
                     (C25008 + C25009 + C25010) * C49742 +
                     (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                      C50857 * C904 + C24593 * C476 + C50856 * C493) *
                         C50792 +
                     (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                      C50857 * C894 + C24593 * C463 + C50856 * C477) *
                         C49749) *
                        C50678 * C50645) *
                       C50807 +
                   (((C24593 * C889 + C50856 * C894 + C24594 * C1565 +
                      C50857 * C1573 + C24595 * C3263 + C24590 * C3266) *
                         C49749 +
                     (C24593 * C895 + C50856 * C904 + C24594 * C1572 +
                      C50857 * C1577 + C24595 * C3267 + C24590 * C3272) *
                         C50792 +
                     (C25551 + C25552 + C25553) * C49742 +
                     (C25554 + C25555 + C25556) * C50523) *
                        C50678 * C50645 -
                    ((C24823 + C24824 + C24825) * C50523 +
                     (C24826 + C24827 + C24828) * C49742 +
                     (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50792 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C49749) *
                        C50678 * C50808) *
                       C50617) *
                      C281 +
                  ((((C25010 + C25009 + C25008) * C49749 +
                     (C25007 + C25006 + C25005) * C50792 +
                     (C25339 + C25340 + C25341) * C49742 +
                     (C25342 + C25343 + C25344) * C50523) *
                        C50678 * C50645 -
                    ((C24641 + C24642 + C24643) * C50523 +
                     (C24644 + C24645 + C24646) * C49742 +
                     (C24640 + C24639 + C24638) * C50792 +
                     (C24637 + C24636 + C24635) * C49749) *
                        C50678 * C50808) *
                       C50807 +
                   (((C24828 + C24827 + C24826) * C49749 +
                     (C24825 + C24824 + C24823) * C50792 +
                     (C25175 + C25176 + C25177) * C49742 +
                     (C25178 + C25179 + C25180) * C50523) *
                        C50678 * C50808 -
                    ((C24595 * C3270 + C24590 * C3274 + C24594 * C1568 +
                      C50857 * C1575 + C24593 * C899 + C50856 * C906) *
                         C50523 +
                     (C24595 * C3265 + C24590 * C3271 + C24594 * C1563 +
                      C50857 * C1569 + C24593 * C891 + C50856 * C898) *
                         C49742 +
                     (C25556 + C25555 + C25554) * C50792 +
                     (C25553 + C25552 + C25551) * C49749) *
                        C50678 * C50645) *
                       C50617) *
                      C50552)) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50581 * C278 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C50581 * C279 +
                   ((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                     C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                        C49749 +
                    (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                     C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                        C50792 +
                    (C24829 + C24830 + C24831) * C49742 +
                    (C24832 + C24833 + C24834) * C50523) *
                       C50678 * C50581 * C280) *
                      C281 +
                  (((C24828 + C24827 + C24826) * C49749 +
                    (C24825 + C24824 + C24823) * C50792 +
                    (C24593 * C284 + C50856 * C296 + C24594 * C289 +
                     C50857 * C305 + C24595 * C1102 + C24590 * C1108) *
                        C49742 +
                    (C24593 * C295 + C50856 * C314 + C24594 * C306 +
                     C50857 * C319 + C24595 * C1107 + C24590 * C1114) *
                        C50523) *
                       C50678 * C50581 * C279 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C50581 * C278 -
                   ((C24595 * C2506 + C24590 * C2510 + C24594 * C1107 +
                     C50857 * C1114 + C24593 * C306 + C50856 * C319) *
                        C50523 +
                    (C24595 * C2501 + C24590 * C2507 + C24594 * C1102 +
                     C50857 * C1108 + C24593 * C289 + C50856 * C305) *
                        C49742 +
                    (C24834 + C24833 + C24832) * C50792 +
                    (C24831 + C24830 + C24829) * C49749) *
                       C50678 * C50581 * C280) *
                      C50552)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                    C50857 * C300 + C24595 * C287 + C24590 * C301) *
                       C49749 +
                   (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                    C50857 * C316 + C24595 * C302 + C24590 * C317) *
                       C50792 +
                   (C24635 + C24636 + C24637) * C49742 +
                   (C24638 + C24639 + C24640) * C50523) *
                      C50678 * C50581 * C50565 * C113 -
                  ((C24641 + C24642 + C24643) * C50523 +
                   (C24644 + C24645 + C24646) * C49742 +
                   (C24640 + C24639 + C24638) * C50792 +
                   (C24637 + C24636 + C24635) * C49749) *
                      C50678 * C50581 * C50565 * C114 +
                  ((C24646 + C24645 + C24644) * C49749 +
                   (C24643 + C24642 + C24641) * C50792 +
                   (C24647 + C24648 + C24649) * C49742 +
                   (C24650 + C24651 + C24652) * C50523) *
                      C50678 * C50581 * C50565 * C115 -
                  ((C24595 * C311 + C24590 * C322 + C24594 * C310 +
                    C50857 * C321 + C24593 * C137 + C50856 * C147) *
                       C50523 +
                   (C24595 * C292 + C24590 * C312 + C24594 * C291 +
                    C50857 * C309 + C24593 * C126 + C50856 * C138) *
                       C49742 +
                   (C24652 + C24651 + C24650) * C50792 +
                   (C24649 + C24648 + C24647) * C49749) *
                      C50678 * C50581 * C50565 * C116)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C457 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C458 +
                   ((C24593 * C464 + C50856 * C478 + C24594 * C1218 +
                     C50857 * C1226 + C24595 * C2693 + C24590 * C2696) *
                        C49749 +
                    (C24593 * C479 + C50856 * C494 + C24594 * C1225 +
                     C50857 * C1230 + C24595 * C2697 + C24590 * C2702) *
                        C50792 +
                    (C25011 + C25012 + C25013) * C49742 +
                    (C25014 + C25015 + C25016) * C50523) *
                       C50678 * C459) *
                      C50565 * C281 +
                  (((C25010 + C25009 + C25008) * C49749 +
                    (C25007 + C25006 + C25005) * C50792 +
                    (C24593 * C461 + C50856 * C473 + C24594 * C891 +
                     C50857 * C898 + C24595 * C1563 + C24590 * C1569) *
                        C49742 +
                    (C24593 * C472 + C50856 * C491 + C24594 * C899 +
                     C50857 * C906 + C24595 * C1568 + C24590 * C1575) *
                        C50523) *
                       C50678 * C458 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C457 -
                   ((C24595 * C2700 + C24590 * C2704 + C24594 * C1221 +
                     C50857 * C1228 + C24593 * C483 + C50856 * C496) *
                        C50523 +
                    (C24595 * C2695 + C24590 * C2701 + C24594 * C1216 +
                     C50857 * C1222 + C24593 * C466 + C50856 * C482) *
                        C49742 +
                    (C25016 + C25015 + C25014) * C50792 +
                    (C25013 + C25012 + C25011) * C49749) *
                       C50678 * C459) *
                      C50565 * C50552)) /
                    (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50808 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C50645) *
                      C50565 * C50850 +
                  (((C25010 + C25009 + C25008) * C49749 +
                    (C25007 + C25006 + C25005) * C50792 +
                    (C25339 + C25340 + C25341) * C49742 +
                    (C25342 + C25343 + C25344) * C50523) *
                       C50678 * C50645 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C50808) *
                      C50565 * C50851 +
                  (((C24646 + C24645 + C24644) * C49749 +
                    (C24643 + C24642 + C24641) * C50792 +
                    (C24647 + C24648 + C24649) * C49742 +
                    (C24650 + C24651 + C24652) * C50523) *
                       C50678 * C50808 -
                   ((C24595 * C1566 + C24590 * C1574 + C24594 * C901 +
                     C50857 * C907 + C24593 * C470 + C50856 * C490) *
                        C50523 +
                    (C24595 * C1562 + C24590 * C1567 + C24594 * C892 +
                     C50857 * C900 + C24593 * C460 + C50856 * C471) *
                        C49742 +
                    (C25344 + C25343 + C25342) * C50792 +
                    (C25341 + C25340 + C25339) * C49749) *
                       C50678 * C50645) *
                      C50565 * C638)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                    C50857 * C300 + C24595 * C287 + C24590 * C301) *
                       C49749 +
                   (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                    C50857 * C316 + C24595 * C302 + C24590 * C317) *
                       C50792 +
                   (C24635 + C24636 + C24637) * C49742 +
                   (C24638 + C24639 + C24640) * C50523) *
                      C50678 * C50581 * C50565 * C113 -
                  ((C24641 + C24642 + C24643) * C50523 +
                   (C24644 + C24645 + C24646) * C49742 +
                   (C24640 + C24639 + C24638) * C50792 +
                   (C24637 + C24636 + C24635) * C49749) *
                      C50678 * C50581 * C50565 * C114 +
                  ((C24646 + C24645 + C24644) * C49749 +
                   (C24643 + C24642 + C24641) * C50792 +
                   (C24647 + C24648 + C24649) * C49742 +
                   (C24650 + C24651 + C24652) * C50523) *
                      C50678 * C50581 * C50565 * C115 -
                  ((C24595 * C311 + C24590 * C322 + C24594 * C310 +
                    C50857 * C321 + C24593 * C137 + C50856 * C147) *
                       C50523 +
                   (C24595 * C292 + C24590 * C312 + C24594 * C291 +
                    C50857 * C309 + C24593 * C126 + C50856 * C138) *
                       C49742 +
                   (C24652 + C24651 + C24650) * C50792 +
                   (C24649 + C24648 + C24647) * C49749) *
                      C50678 * C50581 * C50565 * C116)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50581 * C278 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C50581 * C279 +
                   ((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                     C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                        C49749 +
                    (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                     C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                        C50792 +
                    (C24829 + C24830 + C24831) * C49742 +
                    (C24832 + C24833 + C24834) * C50523) *
                       C50678 * C50581 * C280) *
                      C281 +
                  (((C24828 + C24827 + C24826) * C49749 +
                    (C24825 + C24824 + C24823) * C50792 +
                    (C24593 * C284 + C50856 * C296 + C24594 * C289 +
                     C50857 * C305 + C24595 * C1102 + C24590 * C1108) *
                        C49742 +
                    (C24593 * C295 + C50856 * C314 + C24594 * C306 +
                     C50857 * C319 + C24595 * C1107 + C24590 * C1114) *
                        C50523) *
                       C50678 * C50581 * C279 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C50581 * C278 -
                   ((C24595 * C2506 + C24590 * C2510 + C24594 * C1107 +
                     C50857 * C1114 + C24593 * C306 + C50856 * C319) *
                        C50523 +
                    (C24595 * C2501 + C24590 * C2507 + C24594 * C1102 +
                     C50857 * C1108 + C24593 * C289 + C50856 * C305) *
                        C49742 +
                    (C24834 + C24833 + C24832) * C50792 +
                    (C24831 + C24830 + C24829) * C49749) *
                       C50678 * C50581 * C280) *
                      C50552)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50581 * C50852 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C50581 * C50853 +
                   ((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                     C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                        C49749 +
                    (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                     C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                        C50792 +
                    (C24829 + C24830 + C24831) * C49742 +
                    (C24832 + C24833 + C24834) * C50523) *
                       C50678 * C50581 * C1331) *
                      C50799 +
                  (((C24828 + C24827 + C24826) * C49749 +
                    (C24825 + C24824 + C24823) * C50792 +
                    (C25175 + C25176 + C25177) * C49742 +
                    (C25178 + C25179 + C25180) * C50523) *
                       C50678 * C50581 * C50853 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C50581 * C50852 -
                   ((C24595 * C2506 + C24590 * C2510 + C24594 * C1107 +
                     C50857 * C1114 + C24593 * C306 + C50856 * C319) *
                        C50523 +
                    (C24595 * C2501 + C24590 * C2507 + C24594 * C1102 +
                     C50857 * C1108 + C24593 * C289 + C50856 * C305) *
                        C49742 +
                    (C24834 + C24833 + C24832) * C50792 +
                    (C24831 + C24830 + C24829) * C49749) *
                       C50678 * C50581 * C1331) *
                      C50552)) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50808 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C50645) *
                      C50852 +
                  (((C24593 * C889 + C50856 * C894 + C24594 * C1565 +
                     C50857 * C1573 + C24595 * C3263 + C24590 * C3266) *
                        C49749 +
                    (C24593 * C895 + C50856 * C904 + C24594 * C1572 +
                     C50857 * C1577 + C24595 * C3267 + C24590 * C3272) *
                        C50792 +
                    (C25551 + C25552 + C25553) * C49742 +
                    (C25554 + C25555 + C25556) * C50523) *
                       C50678 * C50645 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C50808) *
                      C50853 +
                  (((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                     C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                        C49749 +
                    (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                     C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                        C50792 +
                    (C24829 + C24830 + C24831) * C49742 +
                    (C24832 + C24833 + C24834) * C50523) *
                       C50678 * C50808 -
                   ((C24595 * C4187 + C24590 * C4191 + C24594 * C3269 +
                     C50857 * C3273 + C24593 * C1570 + C50856 * C1576) *
                        C50523 +
                    (C24595 * C4185 + C24590 * C4188 + C24594 * C3264 +
                     C50857 * C3268 + C24593 * C1564 + C50856 * C1571) *
                        C49742 +
                    (C24595 * C4189 + C24590 * C4192 + C24594 * C3267 +
                     C50857 * C3272 + C24593 * C1572 + C50856 * C1577) *
                        C50792 +
                    (C24595 * C4186 + C24590 * C4190 + C24594 * C3263 +
                     C50857 * C3266 + C24593 * C1565 + C50856 * C1573) *
                        C49749) *
                       C50678 * C50645) *
                      C1331) *
                 C50546) /
                (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                    C50857 * C300 + C24595 * C287 + C24590 * C301) *
                       C49749 +
                   (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                    C50857 * C316 + C24595 * C302 + C24590 * C317) *
                       C50792 +
                   (C24635 + C24636 + C24637) * C49742 +
                   (C24638 + C24639 + C24640) * C50523) *
                      C50678 * C50581 * C1096 -
                  ((C24823 + C24824 + C24825) * C50523 +
                   (C24826 + C24827 + C24828) * C49742 +
                   (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                    C50857 * C317 + C24593 * C299 + C50856 * C316) *
                       C50792 +
                   (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                    C50857 * C301 + C24593 * C286 + C50856 * C300) *
                       C49749) *
                      C50678 * C50581 * C1097 +
                  ((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                    C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                       C49749 +
                   (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                    C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                       C50792 +
                   (C24829 + C24830 + C24831) * C49742 +
                   (C24832 + C24833 + C24834) * C50523) *
                      C50678 * C50581 * C1098 -
                  ((C24595 * C3539 + C24590 * C3543 + C24594 * C2505 +
                    C50857 * C2509 + C24593 * C1109 + C50856 * C1115) *
                       C50523 +
                   (C24595 * C3537 + C24590 * C3540 + C24594 * C2500 +
                    C50857 * C2504 + C24593 * C1103 + C50856 * C1110) *
                       C49742 +
                   (C24595 * C3541 + C24590 * C3544 + C24594 * C2503 +
                    C50857 * C2508 + C24593 * C1111 + C50856 * C1116) *
                       C50792 +
                   (C24595 * C3538 + C24590 * C3542 + C24594 * C2499 +
                    C50857 * C2502 + C24593 * C1104 + C50856 * C1112) *
                       C49749) *
                      C50678 * C50581 * C1099) *
                 C50546) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50581 * C1025 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C50581 * C50617) *
                      C1027 +
                  (((C24828 + C24827 + C24826) * C49749 +
                    (C24825 + C24824 + C24823) * C50792 +
                    (C25175 + C25176 + C25177) * C49742 +
                    (C25178 + C25179 + C25180) * C50523) *
                       C50678 * C50581 * C50617 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C50581 * C1025) *
                      C1028 +
                  (((C24646 + C24645 + C24644) * C49749 +
                    (C24643 + C24642 + C24641) * C50792 +
                    (C24647 + C24648 + C24649) * C49742 +
                    (C24650 + C24651 + C24652) * C50523) *
                       C50678 * C50581 * C1025 -
                   ((C24595 * C1105 + C24590 * C1113 + C24594 * C308 +
                     C50857 * C320 + C24593 * C293 + C50856 * C313) *
                        C50523 +
                    (C24595 * C1101 + C24590 * C1106 + C24594 * C290 +
                     C50857 * C307 + C24593 * C283 + C50856 * C294) *
                        C49742 +
                    (C25180 + C25179 + C25178) * C50792 +
                    (C25177 + C25176 + C25175) * C49749) *
                       C50678 * C50581 * C50617) *
                      C1029)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C457 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C458 +
                   ((C24593 * C464 + C50856 * C478 + C24594 * C1218 +
                     C50857 * C1226 + C24595 * C2693 + C24590 * C2696) *
                        C49749 +
                    (C24593 * C479 + C50856 * C494 + C24594 * C1225 +
                     C50857 * C1230 + C24595 * C2697 + C24590 * C2702) *
                        C50792 +
                    (C25011 + C25012 + C25013) * C49742 +
                    (C25014 + C25015 + C25016) * C50523) *
                       C50678 * C459) *
                      C1025 +
                  (((C24593 * C889 + C50856 * C894 + C24594 * C1565 +
                     C50857 * C1573 + C24595 * C3263 + C24590 * C3266) *
                        C49749 +
                    (C24593 * C895 + C50856 * C904 + C24594 * C1572 +
                     C50857 * C1577 + C24595 * C3267 + C24590 * C3272) *
                        C50792 +
                    (C25551 + C25552 + C25553) * C49742 +
                    (C25554 + C25555 + C25556) * C50523) *
                       C50678 * C458 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C457 -
                   ((C24595 * C3693 + C24590 * C3697 + C24594 * C2699 +
                     C50857 * C2703 + C24593 * C1223 + C50856 * C1229) *
                        C50523 +
                    (C24595 * C3691 + C24590 * C3694 + C24594 * C2694 +
                     C50857 * C2698 + C24593 * C1217 + C50856 * C1224) *
                        C49742 +
                    (C24595 * C3695 + C24590 * C3698 + C24594 * C2697 +
                     C50857 * C2702 + C24593 * C1225 + C50856 * C1230) *
                        C50792 +
                    (C24595 * C3692 + C24590 * C3696 + C24594 * C2693 +
                     C50857 * C2696 + C24593 * C1218 + C50856 * C1226) *
                        C49749) *
                       C50678 * C459) *
                      C50617) *
                 C50546) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C49749 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50792 +
                     (C24635 + C24636 + C24637) * C49742 +
                     (C24638 + C24639 + C24640) * C50523) *
                        C50678 * C50808 -
                    ((C25005 + C25006 + C25007) * C50523 +
                     (C25008 + C25009 + C25010) * C49742 +
                     (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                      C50857 * C904 + C24593 * C476 + C50856 * C493) *
                         C50792 +
                     (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                      C50857 * C894 + C24593 * C463 + C50856 * C477) *
                         C49749) *
                        C50678 * C50645) *
                       C1025 +
                   (((C24593 * C889 + C50856 * C894 + C24594 * C1565 +
                      C50857 * C1573 + C24595 * C3263 + C24590 * C3266) *
                         C49749 +
                     (C24593 * C895 + C50856 * C904 + C24594 * C1572 +
                      C50857 * C1577 + C24595 * C3267 + C24590 * C3272) *
                         C50792 +
                     (C25551 + C25552 + C25553) * C49742 +
                     (C25554 + C25555 + C25556) * C50523) *
                        C50678 * C50645 -
                    ((C24823 + C24824 + C24825) * C50523 +
                     (C24826 + C24827 + C24828) * C49742 +
                     (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50792 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C49749) *
                        C50678 * C50808) *
                       C50617) *
                      C50799 +
                  ((((C25010 + C25009 + C25008) * C49749 +
                     (C25007 + C25006 + C25005) * C50792 +
                     (C25339 + C25340 + C25341) * C49742 +
                     (C25342 + C25343 + C25344) * C50523) *
                        C50678 * C50645 -
                    ((C24641 + C24642 + C24643) * C50523 +
                     (C24644 + C24645 + C24646) * C49742 +
                     (C24640 + C24639 + C24638) * C50792 +
                     (C24637 + C24636 + C24635) * C49749) *
                        C50678 * C50808) *
                       C1025 +
                   (((C24828 + C24827 + C24826) * C49749 +
                     (C24825 + C24824 + C24823) * C50792 +
                     (C25175 + C25176 + C25177) * C49742 +
                     (C25178 + C25179 + C25180) * C50523) *
                        C50678 * C50808 -
                    ((C24595 * C3270 + C24590 * C3274 + C24594 * C1568 +
                      C50857 * C1575 + C24593 * C899 + C50856 * C906) *
                         C50523 +
                     (C24595 * C3265 + C24590 * C3271 + C24594 * C1563 +
                      C50857 * C1569 + C24593 * C891 + C50856 * C898) *
                         C49742 +
                     (C25556 + C25555 + C25554) * C50792 +
                     (C25553 + C25552 + C25551) * C49749) *
                        C50678 * C50645) *
                       C50617) *
                      C50552)) /
                (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50581 * C1025 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C50581 * C50617) *
                      C1027 +
                  (((C24828 + C24827 + C24826) * C49749 +
                    (C24825 + C24824 + C24823) * C50792 +
                    (C25175 + C25176 + C25177) * C49742 +
                    (C25178 + C25179 + C25180) * C50523) *
                       C50678 * C50581 * C50617 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C50581 * C1025) *
                      C1028 +
                  (((C24646 + C24645 + C24644) * C49749 +
                    (C24643 + C24642 + C24641) * C50792 +
                    (C24647 + C24648 + C24649) * C49742 +
                    (C24650 + C24651 + C24652) * C50523) *
                       C50678 * C50581 * C1025 -
                   ((C24595 * C1105 + C24590 * C1113 + C24594 * C308 +
                     C50857 * C320 + C24593 * C293 + C50856 * C313) *
                        C50523 +
                    (C24595 * C1101 + C24590 * C1106 + C24594 * C290 +
                     C50857 * C307 + C24593 * C283 + C50856 * C294) *
                        C49742 +
                    (C25180 + C25179 + C25178) * C50792 +
                    (C25177 + C25176 + C25175) * C49749) *
                       C50678 * C50581 * C50617) *
                      C1029)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                    C50857 * C300 + C24595 * C287 + C24590 * C301) *
                       C49749 +
                   (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                    C50857 * C316 + C24595 * C302 + C24590 * C317) *
                       C50792 +
                   (C24635 + C24636 + C24637) * C49742 +
                   (C24638 + C24639 + C24640) * C50523) *
                      C50678 * C50581 * C1096 -
                  ((C24823 + C24824 + C24825) * C50523 +
                   (C24826 + C24827 + C24828) * C49742 +
                   (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                    C50857 * C317 + C24593 * C299 + C50856 * C316) *
                       C50792 +
                   (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                    C50857 * C301 + C24593 * C286 + C50856 * C300) *
                       C49749) *
                      C50678 * C50581 * C1097 +
                  ((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                    C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                       C49749 +
                   (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                    C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                       C50792 +
                   (C24829 + C24830 + C24831) * C49742 +
                   (C24832 + C24833 + C24834) * C50523) *
                      C50678 * C50581 * C1098 -
                  ((C24595 * C3539 + C24590 * C3543 + C24594 * C2505 +
                    C50857 * C2509 + C24593 * C1109 + C50856 * C1115) *
                       C50523 +
                   (C24595 * C3537 + C24590 * C3540 + C24594 * C2500 +
                    C50857 * C2504 + C24593 * C1103 + C50856 * C1110) *
                       C49742 +
                   (C24595 * C3541 + C24590 * C3544 + C24594 * C2503 +
                    C50857 * C2508 + C24593 * C1111 + C50856 * C1116) *
                       C50792 +
                   (C24595 * C3538 + C24590 * C3542 + C24594 * C2499 +
                    C50857 * C2502 + C24593 * C1104 + C50856 * C1112) *
                       C49749) *
                      C50678 * C50581 * C1099) *
                 C50546) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C49749 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50792 +
                     (C24635 + C24636 + C24637) * C49742 +
                     (C24638 + C24639 + C24640) * C50523) *
                        C50678 * C1676 -
                    ((C25005 + C25006 + C25007) * C50523 +
                     (C25008 + C25009 + C25010) * C49742 +
                     (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                      C50857 * C904 + C24593 * C476 + C50856 * C493) *
                         C50792 +
                     (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                      C50857 * C894 + C24593 * C463 + C50856 * C477) *
                         C49749) *
                        C50678 * C50645) *
                       C50807 +
                   (((C24593 * C889 + C50856 * C894 + C24594 * C1565 +
                      C50857 * C1573 + C24595 * C3263 + C24590 * C3266) *
                         C49749 +
                     (C24593 * C895 + C50856 * C904 + C24594 * C1572 +
                      C50857 * C1577 + C24595 * C3267 + C24590 * C3272) *
                         C50792 +
                     (C25551 + C25552 + C25553) * C49742 +
                     (C25554 + C25555 + C25556) * C50523) *
                        C50678 * C50645 -
                    ((C24823 + C24824 + C24825) * C50523 +
                     (C24826 + C24827 + C24828) * C49742 +
                     (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50792 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C49749) *
                        C50678 * C1676) *
                       C50617) *
                      C50799 +
                  ((((C25010 + C25009 + C25008) * C49749 +
                     (C25007 + C25006 + C25005) * C50792 +
                     (C25339 + C25340 + C25341) * C49742 +
                     (C25342 + C25343 + C25344) * C50523) *
                        C50678 * C50645 -
                    ((C24641 + C24642 + C24643) * C50523 +
                     (C24644 + C24645 + C24646) * C49742 +
                     (C24640 + C24639 + C24638) * C50792 +
                     (C24637 + C24636 + C24635) * C49749) *
                        C50678 * C1676) *
                       C50807 +
                   (((C24828 + C24827 + C24826) * C49749 +
                     (C24825 + C24824 + C24823) * C50792 +
                     (C25175 + C25176 + C25177) * C49742 +
                     (C25178 + C25179 + C25180) * C50523) *
                        C50678 * C1676 -
                    ((C24595 * C3270 + C24590 * C3274 + C24594 * C1568 +
                      C50857 * C1575 + C24593 * C899 + C50856 * C906) *
                         C50523 +
                     (C24595 * C3265 + C24590 * C3271 + C24594 * C1563 +
                      C50857 * C1569 + C24593 * C891 + C50856 * C898) *
                         C49742 +
                     (C25556 + C25555 + C25554) * C50792 +
                     (C25553 + C25552 + C25551) * C49749) *
                        C50678 * C50645) *
                       C50617) *
                      C50552)) /
                (p * q * std::sqrt(p + q));
    d2ee[86] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50854 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C50855 +
                   ((C24593 * C464 + C50856 * C478 + C24594 * C1218 +
                     C50857 * C1226 + C24595 * C2693 + C24590 * C2696) *
                        C49749 +
                    (C24593 * C479 + C50856 * C494 + C24594 * C1225 +
                     C50857 * C1230 + C24595 * C2697 + C24590 * C2702) *
                        C50792 +
                    (C25011 + C25012 + C25013) * C49742 +
                    (C25014 + C25015 + C25016) * C50523) *
                       C50678 * C2092) *
                      C50807 +
                  (((C24593 * C889 + C50856 * C894 + C24594 * C1565 +
                     C50857 * C1573 + C24595 * C3263 + C24590 * C3266) *
                        C49749 +
                    (C24593 * C895 + C50856 * C904 + C24594 * C1572 +
                     C50857 * C1577 + C24595 * C3267 + C24590 * C3272) *
                        C50792 +
                    (C25551 + C25552 + C25553) * C49742 +
                    (C25554 + C25555 + C25556) * C50523) *
                       C50678 * C50855 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C50854 -
                   ((C24595 * C3693 + C24590 * C3697 + C24594 * C2699 +
                     C50857 * C2703 + C24593 * C1223 + C50856 * C1229) *
                        C50523 +
                    (C24595 * C3691 + C24590 * C3694 + C24594 * C2694 +
                     C50857 * C2698 + C24593 * C1217 + C50856 * C1224) *
                        C49742 +
                    (C24595 * C3695 + C24590 * C3698 + C24594 * C2697 +
                     C50857 * C2702 + C24593 * C1225 + C50856 * C1230) *
                        C50792 +
                    (C24595 * C3692 + C24590 * C3696 + C24594 * C2693 +
                     C50857 * C2696 + C24593 * C1218 + C50856 * C1226) *
                        C49749) *
                       C50678 * C2092) *
                      C50617) *
                 C50546) /
                (p * q * std::sqrt(p + q));
    d2ee[87] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C1676 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C50645) *
                      C278 +
                  (((C24593 * C889 + C50856 * C894 + C24594 * C1565 +
                     C50857 * C1573 + C24595 * C3263 + C24590 * C3266) *
                        C49749 +
                    (C24593 * C895 + C50856 * C904 + C24594 * C1572 +
                     C50857 * C1577 + C24595 * C3267 + C24590 * C3272) *
                        C50792 +
                    (C25551 + C25552 + C25553) * C49742 +
                    (C25554 + C25555 + C25556) * C50523) *
                       C50678 * C50645 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C1676) *
                      C279 +
                  (((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                     C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                        C49749 +
                    (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                     C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                        C50792 +
                    (C24829 + C24830 + C24831) * C49742 +
                    (C24832 + C24833 + C24834) * C50523) *
                       C50678 * C1676 -
                   ((C24595 * C4187 + C24590 * C4191 + C24594 * C3269 +
                     C50857 * C3273 + C24593 * C1570 + C50856 * C1576) *
                        C50523 +
                    (C24595 * C4185 + C24590 * C4188 + C24594 * C3264 +
                     C50857 * C3268 + C24593 * C1564 + C50856 * C1571) *
                        C49742 +
                    (C24595 * C4189 + C24590 * C4192 + C24594 * C3267 +
                     C50857 * C3272 + C24593 * C1572 + C50856 * C1577) *
                        C50792 +
                    (C24595 * C4186 + C24590 * C4190 + C24594 * C3263 +
                     C50857 * C3266 + C24593 * C1565 + C50856 * C1573) *
                        C49749) *
                       C50678 * C50645) *
                      C280) *
                 C50546) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C1676 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C50645) *
                      C50565 * C1027 +
                  (((C25010 + C25009 + C25008) * C49749 +
                    (C25007 + C25006 + C25005) * C50792 +
                    (C25339 + C25340 + C25341) * C49742 +
                    (C25342 + C25343 + C25344) * C50523) *
                       C50678 * C50645 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C1676) *
                      C50565 * C1028 +
                  (((C24646 + C24645 + C24644) * C49749 +
                    (C24643 + C24642 + C24641) * C50792 +
                    (C24647 + C24648 + C24649) * C49742 +
                    (C24650 + C24651 + C24652) * C50523) *
                       C50678 * C1676 -
                   ((C24595 * C1566 + C24590 * C1574 + C24594 * C901 +
                     C50857 * C907 + C24593 * C470 + C50856 * C490) *
                        C50523 +
                    (C24595 * C1562 + C24590 * C1567 + C24594 * C892 +
                     C50857 * C900 + C24593 * C460 + C50856 * C471) *
                        C49742 +
                    (C25344 + C25343 + C25342) * C50792 +
                    (C25341 + C25340 + C25339) * C49749) *
                       C50678 * C50645) *
                      C50565 * C1029)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                    C50857 * C300 + C24595 * C287 + C24590 * C301) *
                       C49749 +
                   (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                    C50857 * C316 + C24595 * C302 + C24590 * C317) *
                       C50792 +
                   (C24635 + C24636 + C24637) * C49742 +
                   (C24638 + C24639 + C24640) * C50523) *
                      C50678 * C1842 -
                  ((C25005 + C25006 + C25007) * C50523 +
                   (C25008 + C25009 + C25010) * C49742 +
                   (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                    C50857 * C904 + C24593 * C476 + C50856 * C493) *
                       C50792 +
                   (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                    C50857 * C894 + C24593 * C463 + C50856 * C477) *
                       C49749) *
                      C50678 * C1843 +
                  ((C24593 * C464 + C50856 * C478 + C24594 * C1218 +
                    C50857 * C1226 + C24595 * C2693 + C24590 * C2696) *
                       C49749 +
                   (C24593 * C479 + C50856 * C494 + C24594 * C1225 +
                    C50857 * C1230 + C24595 * C2697 + C24590 * C2702) *
                       C50792 +
                   (C25011 + C25012 + C25013) * C49742 +
                   (C25014 + C25015 + C25016) * C50523) *
                      C50678 * C1844 -
                  ((C24595 * C4587 + C24590 * C4595 + C24594 * C4588 +
                    C50857 * C4596 + C24593 * C1854 + C50856 * C1860) *
                       C50523 +
                   (C24595 * C4583 + C24590 * C4589 + C24594 * C4584 +
                    C50857 * C4590 + C24593 * C1848 + C50856 * C1855) *
                       C49742 +
                   (C24595 * C4591 + C24590 * C4597 + C24594 * C4592 +
                    C50857 * C4598 + C24593 * C1856 + C50856 * C1861) *
                       C50792 +
                   (C24595 * C4585 + C24590 * C4593 + C24594 * C4586 +
                    C50857 * C4594 + C24593 * C1849 + C50856 * C1857) *
                       C49749) *
                      C50678 * C1845) *
                 C50565 * C50546) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C50854 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C50855 +
                   ((C24593 * C464 + C50856 * C478 + C24594 * C1218 +
                     C50857 * C1226 + C24595 * C2693 + C24590 * C2696) *
                        C49749 +
                    (C24593 * C479 + C50856 * C494 + C24594 * C1225 +
                     C50857 * C1230 + C24595 * C2697 + C24590 * C2702) *
                        C50792 +
                    (C25011 + C25012 + C25013) * C49742 +
                    (C25014 + C25015 + C25016) * C50523) *
                       C50678 * C2092) *
                      C50565 * C50799 +
                  (((C25010 + C25009 + C25008) * C49749 +
                    (C25007 + C25006 + C25005) * C50792 +
                    (C25339 + C25340 + C25341) * C49742 +
                    (C25342 + C25343 + C25344) * C50523) *
                       C50678 * C50855 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C50854 -
                   ((C24595 * C2700 + C24590 * C2704 + C24594 * C1221 +
                     C50857 * C1228 + C24593 * C483 + C50856 * C496) *
                        C50523 +
                    (C24595 * C2695 + C24590 * C2701 + C24594 * C1216 +
                     C50857 * C1222 + C24593 * C466 + C50856 * C482) *
                        C49742 +
                    (C25016 + C25015 + C25014) * C50792 +
                    (C25013 + C25012 + C25011) * C49749) *
                       C50678 * C2092) *
                      C50565 * C50552)) /
                (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C1676 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C50645) *
                      C50565 * C1027 +
                  (((C25010 + C25009 + C25008) * C49749 +
                    (C25007 + C25006 + C25005) * C50792 +
                    (C25339 + C25340 + C25341) * C49742 +
                    (C25342 + C25343 + C25344) * C50523) *
                       C50678 * C50645 -
                   ((C24641 + C24642 + C24643) * C50523 +
                    (C24644 + C24645 + C24646) * C49742 +
                    (C24640 + C24639 + C24638) * C50792 +
                    (C24637 + C24636 + C24635) * C49749) *
                       C50678 * C1676) *
                      C50565 * C1028 +
                  (((C24646 + C24645 + C24644) * C49749 +
                    (C24643 + C24642 + C24641) * C50792 +
                    (C24647 + C24648 + C24649) * C49742 +
                    (C24650 + C24651 + C24652) * C50523) *
                       C50678 * C1676 -
                   ((C24595 * C1566 + C24590 * C1574 + C24594 * C901 +
                     C50857 * C907 + C24593 * C470 + C50856 * C490) *
                        C50523 +
                    (C24595 * C1562 + C24590 * C1567 + C24594 * C892 +
                     C50857 * C900 + C24593 * C460 + C50856 * C471) *
                        C49742 +
                    (C25344 + C25343 + C25342) * C50792 +
                    (C25341 + C25340 + C25339) * C49749) *
                       C50678 * C50645) *
                      C50565 * C1029)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C49749 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50792 +
                    (C24635 + C24636 + C24637) * C49742 +
                    (C24638 + C24639 + C24640) * C50523) *
                       C50678 * C1676 -
                   ((C25005 + C25006 + C25007) * C50523 +
                    (C25008 + C25009 + C25010) * C49742 +
                    (C24595 * C1572 + C24590 * C1577 + C24594 * C895 +
                     C50857 * C904 + C24593 * C476 + C50856 * C493) *
                        C50792 +
                    (C24595 * C1565 + C24590 * C1573 + C24594 * C889 +
                     C50857 * C894 + C24593 * C463 + C50856 * C477) *
                        C49749) *
                       C50678 * C50645) *
                      C278 +
                  (((C24593 * C889 + C50856 * C894 + C24594 * C1565 +
                     C50857 * C1573 + C24595 * C3263 + C24590 * C3266) *
                        C49749 +
                    (C24593 * C895 + C50856 * C904 + C24594 * C1572 +
                     C50857 * C1577 + C24595 * C3267 + C24590 * C3272) *
                        C50792 +
                    (C25551 + C25552 + C25553) * C49742 +
                    (C25554 + C25555 + C25556) * C50523) *
                       C50678 * C50645 -
                   ((C24823 + C24824 + C24825) * C50523 +
                    (C24826 + C24827 + C24828) * C49742 +
                    (C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50792 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C49749) *
                       C50678 * C1676) *
                      C279 +
                  (((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                     C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                        C49749 +
                    (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                     C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                        C50792 +
                    (C24829 + C24830 + C24831) * C49742 +
                    (C24832 + C24833 + C24834) * C50523) *
                       C50678 * C1676 -
                   ((C24595 * C4187 + C24590 * C4191 + C24594 * C3269 +
                     C50857 * C3273 + C24593 * C1570 + C50856 * C1576) *
                        C50523 +
                    (C24595 * C4185 + C24590 * C4188 + C24594 * C3264 +
                     C50857 * C3268 + C24593 * C1564 + C50856 * C1571) *
                        C49742 +
                    (C24595 * C4189 + C24590 * C4192 + C24594 * C3267 +
                     C50857 * C3272 + C24593 * C1572 + C50856 * C1577) *
                        C50792 +
                    (C24595 * C4186 + C24590 * C4190 + C24594 * C3263 +
                     C50857 * C3266 + C24593 * C1565 + C50856 * C1573) *
                        C49749) *
                       C50678 * C50645) *
                      C280) *
                 C50546) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C31239 + C31240 + C31241) * C19987 +
                     (C31242 + C31243 + C31244) * C50518) *
                        C50742) *
                       C50581 * C50807 -
                   (((C24595 * C3267 + C24590 * C3272 + C24594 * C1572 +
                      C50857 * C1577 + C24593 * C895 + C50856 * C904) *
                         C50518 +
                     (C24595 * C3263 + C24590 * C3266 + C24594 * C1565 +
                      C50857 * C1573 + C24593 * C889 + C50856 * C894) *
                         C19987) *
                        C50742 +
                    ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50518 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C19987) *
                        C50821) *
                       C50581 * C50617) *
                      C50850 +
                  ((((C24828 + C24827 + C24826) * C19987 +
                     (C24825 + C24824 + C24823) * C50518) *
                        C50821 +
                    ((C25551 + C25552 + C25553) * C19987 +
                     (C25554 + C25555 + C25556) * C50518) *
                        C50742) *
                       C50581 * C50617 -
                   (((C25005 + C25006 + C25007) * C50518 +
                     (C25008 + C25009 + C25010) * C19987) *
                        C50742 +
                    ((C24640 + C24639 + C24638) * C50518 +
                     (C24637 + C24636 + C24635) * C19987) *
                        C50821) *
                       C50581 * C50807) *
                      C50851 +
                  ((((C24646 + C24645 + C24644) * C19987 +
                     (C24643 + C24642 + C24641) * C50518) *
                        C50821 +
                    ((C25339 + C25340 + C25341) * C19987 +
                     (C25342 + C25343 + C25344) * C50518) *
                        C50742) *
                       C50581 * C50807 -
                   (((C24595 * C3270 + C24590 * C3274 + C24594 * C1568 +
                      C50857 * C1575 + C24593 * C899 + C50856 * C906) *
                         C50518 +
                     (C24595 * C3265 + C24590 * C3271 + C24594 * C1563 +
                      C50857 * C1569 + C24593 * C891 + C50856 * C898) *
                         C19987) *
                        C50742 +
                    ((C25180 + C25179 + C25178) * C50518 +
                     (C25177 + C25176 + C25175) * C19987) *
                        C50821) *
                       C50581 * C50617) *
                      C638)) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                       C50857 * C300 + C24595 * C287 + C24590 * C301) *
                          C19987 +
                      (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                       C50857 * C316 + C24595 * C302 + C24590 * C317) *
                          C50518) *
                         C50821 +
                     ((C31239 + C31240 + C31241) * C19987 +
                      (C31242 + C31243 + C31244) * C50518) *
                         C50742) *
                        C50808 -
                    (((C31245 + C31246 + C31247) * C50518 +
                      (C31248 + C31249 + C31250) * C19987) *
                         C50742 +
                     ((C31244 + C31243 + C31242) * C50518 +
                      (C31241 + C31240 + C31239) * C19987) *
                         C50821) *
                        C50645) *
                       C50807 +
                   ((((C31749 + C31750 + C31751) * C19987 +
                      (C31752 + C31753 + C31754) * C50518) *
                         C50821 +
                     ((C24593 * C1218 + C50856 * C1226 + C24594 * C2693 +
                       C50857 * C2696 + C24595 * C3692 + C24590 * C3696) *
                          C19987 +
                      (C24593 * C1225 + C50856 * C1230 + C24594 * C2697 +
                       C50857 * C2702 + C24595 * C3695 + C24590 * C3698) *
                          C50518) *
                         C50742) *
                        C50645 -
                    (((C31754 + C31753 + C31752) * C50518 +
                      (C31751 + C31750 + C31749) * C19987) *
                         C50742 +
                     ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                       C50857 * C317 + C24593 * C299 + C50856 * C316) *
                          C50518 +
                      (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                       C50857 * C301 + C24593 * C286 + C50856 * C300) *
                          C19987) *
                         C50821) *
                        C50808) *
                       C50617) *
                      C281 +
                  (((((C25010 + C25009 + C25008) * C19987 +
                      (C25007 + C25006 + C25005) * C50518) *
                         C50821 +
                     ((C25011 + C25012 + C25013) * C19987 +
                      (C25014 + C25015 + C25016) * C50518) *
                         C50742) *
                        C50645 -
                    (((C25005 + C25006 + C25007) * C50518 +
                      (C25008 + C25009 + C25010) * C19987) *
                         C50742 +
                     ((C24640 + C24639 + C24638) * C50518 +
                      (C24637 + C24636 + C24635) * C19987) *
                         C50821) *
                        C50808) *
                       C50807 +
                   ((((C24828 + C24827 + C24826) * C19987 +
                      (C24825 + C24824 + C24823) * C50518) *
                         C50821 +
                     ((C25551 + C25552 + C25553) * C19987 +
                      (C25554 + C25555 + C25556) * C50518) *
                         C50742) *
                        C50808 -
                    (((C24595 * C3693 + C24590 * C3697 + C24594 * C2699 +
                       C50857 * C2703 + C24593 * C1223 + C50856 * C1229) *
                          C50518 +
                      (C24595 * C3691 + C24590 * C3694 + C24594 * C2694 +
                       C50857 * C2698 + C24593 * C1217 + C50856 * C1224) *
                          C19987) *
                         C50742 +
                     ((C25556 + C25555 + C25554) * C50518 +
                      (C25553 + C25552 + C25551) * C19987) *
                         C50821) *
                        C50645) *
                       C50617) *
                      C50552)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C24593 * C463 + C50856 * C477 + C24594 * C889 +
                      C50857 * C894 + C24595 * C1565 + C24590 * C1573) *
                         C19987 +
                     (C24593 * C476 + C50856 * C493 + C24594 * C895 +
                      C50857 * C904 + C24595 * C1572 + C24590 * C1577) *
                         C50518) *
                        C50742) *
                       C50581 * C278 -
                   (((C24595 * C3267 + C24590 * C3272 + C24594 * C1572 +
                      C50857 * C1577 + C24593 * C895 + C50856 * C904) *
                         C50518 +
                     (C24595 * C3263 + C24590 * C3266 + C24594 * C1565 +
                      C50857 * C1573 + C24593 * C889 + C50856 * C894) *
                         C19987) *
                        C50742 +
                    ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50518 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C19987) *
                        C50821) *
                       C50581 * C279 +
                   (((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                      C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                         C19987 +
                     (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                      C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                         C50518) *
                        C50821 +
                    ((C24593 * C1565 + C50856 * C1573 + C24594 * C3263 +
                      C50857 * C3266 + C24595 * C4186 + C24590 * C4190) *
                         C19987 +
                     (C24593 * C1572 + C50856 * C1577 + C24594 * C3267 +
                      C50857 * C3272 + C24595 * C4189 + C24590 * C4192) *
                         C50518) *
                        C50742) *
                       C50581 * C280) *
                      C281 +
                  ((((C24828 + C24827 + C24826) * C19987 +
                     (C24825 + C24824 + C24823) * C50518) *
                        C50821 +
                    ((C25551 + C25552 + C25553) * C19987 +
                     (C25554 + C25555 + C25556) * C50518) *
                        C50742) *
                       C50581 * C279 -
                   (((C25005 + C25006 + C25007) * C50518 +
                     (C25008 + C25009 + C25010) * C19987) *
                        C50742 +
                    ((C24640 + C24639 + C24638) * C50518 +
                     (C24637 + C24636 + C24635) * C19987) *
                        C50821) *
                       C50581 * C278 -
                   (((C24595 * C4187 + C24590 * C4191 + C24594 * C3269 +
                      C50857 * C3273 + C24593 * C1570 + C50856 * C1576) *
                         C50518 +
                     (C24595 * C4185 + C24590 * C4188 + C24594 * C3264 +
                      C50857 * C3268 + C24593 * C1564 + C50856 * C1571) *
                         C19987) *
                        C50742 +
                    ((C24834 + C24833 + C24832) * C50518 +
                     (C24831 + C24830 + C24829) * C19987) *
                        C50821) *
                       C50581 * C280) *
                      C50552)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C19987 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50518) *
                       C50821 +
                   ((C24593 * C463 + C50856 * C477 + C24594 * C889 +
                     C50857 * C894 + C24595 * C1565 + C24590 * C1573) *
                        C19987 +
                    (C24593 * C476 + C50856 * C493 + C24594 * C895 +
                     C50857 * C904 + C24595 * C1572 + C24590 * C1577) *
                        C50518) *
                       C50742) *
                      C50581 * C50565 * C113 -
                  (((C25005 + C25006 + C25007) * C50518 +
                    (C25008 + C25009 + C25010) * C19987) *
                       C50742 +
                   ((C24640 + C24639 + C24638) * C50518 +
                    (C24637 + C24636 + C24635) * C19987) *
                       C50821) *
                      C50581 * C50565 * C114 +
                  (((C24646 + C24645 + C24644) * C19987 +
                    (C24643 + C24642 + C24641) * C50518) *
                       C50821 +
                   ((C25339 + C25340 + C25341) * C19987 +
                    (C25342 + C25343 + C25344) * C50518) *
                       C50742) *
                      C50581 * C50565 * C115 -
                  (((C24595 * C1566 + C24590 * C1574 + C24594 * C901 +
                     C50857 * C907 + C24593 * C470 + C50856 * C490) *
                        C50518 +
                    (C24595 * C1562 + C24590 * C1567 + C24594 * C892 +
                     C50857 * C900 + C24593 * C460 + C50856 * C471) *
                        C19987) *
                       C50742 +
                   ((C24652 + C24651 + C24650) * C50518 +
                    (C24649 + C24648 + C24647) * C19987) *
                       C50821) *
                      C50581 * C50565 * C116)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C31239 + C31240 + C31241) * C19987 +
                     (C31242 + C31243 + C31244) * C50518) *
                        C50742) *
                       C457 -
                   (((C31245 + C31246 + C31247) * C50518 +
                     (C31248 + C31249 + C31250) * C19987) *
                        C50742 +
                    ((C31244 + C31243 + C31242) * C50518 +
                     (C31241 + C31240 + C31239) * C19987) *
                        C50821) *
                       C458 +
                   (((C31250 + C31249 + C31248) * C19987 +
                     (C31247 + C31246 + C31245) * C50518) *
                        C50821 +
                    ((C24593 * C1849 + C50856 * C1857 + C24594 * C4586 +
                      C50857 * C4594 + C24595 * C4585 + C24590 * C4593) *
                         C19987 +
                     (C24593 * C1856 + C50856 * C1861 + C24594 * C4592 +
                      C50857 * C4598 + C24595 * C4591 + C24590 * C4597) *
                         C50518) *
                        C50742) *
                       C459) *
                      C50565 * C281 +
                  ((((C25010 + C25009 + C25008) * C19987 +
                     (C25007 + C25006 + C25005) * C50518) *
                        C50821 +
                    ((C25011 + C25012 + C25013) * C19987 +
                     (C25014 + C25015 + C25016) * C50518) *
                        C50742) *
                       C458 -
                   (((C25005 + C25006 + C25007) * C50518 +
                     (C25008 + C25009 + C25010) * C19987) *
                        C50742 +
                    ((C24640 + C24639 + C24638) * C50518 +
                     (C24637 + C24636 + C24635) * C19987) *
                        C50821) *
                       C457 -
                   (((C24595 * C4587 + C24590 * C4595 + C24594 * C4588 +
                      C50857 * C4596 + C24593 * C1854 + C50856 * C1860) *
                         C50518 +
                     (C24595 * C4583 + C24590 * C4589 + C24594 * C4584 +
                      C50857 * C4590 + C24593 * C1848 + C50856 * C1855) *
                         C19987) *
                        C50742 +
                    ((C25016 + C25015 + C25014) * C50518 +
                     (C25013 + C25012 + C25011) * C19987) *
                        C50821) *
                       C459) *
                      C50565 * C50552)) /
                    (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C31239 + C31240 + C31241) * C19987 +
                     (C31242 + C31243 + C31244) * C50518) *
                        C50742) *
                       C50808 -
                   (((C31245 + C31246 + C31247) * C50518 +
                     (C31248 + C31249 + C31250) * C19987) *
                        C50742 +
                    ((C31244 + C31243 + C31242) * C50518 +
                     (C31241 + C31240 + C31239) * C19987) *
                        C50821) *
                       C50645) *
                      C50565 * C50850 +
                  ((((C25010 + C25009 + C25008) * C19987 +
                     (C25007 + C25006 + C25005) * C50518) *
                        C50821 +
                    ((C25011 + C25012 + C25013) * C19987 +
                     (C25014 + C25015 + C25016) * C50518) *
                        C50742) *
                       C50645 -
                   (((C25005 + C25006 + C25007) * C50518 +
                     (C25008 + C25009 + C25010) * C19987) *
                        C50742 +
                    ((C24640 + C24639 + C24638) * C50518 +
                     (C24637 + C24636 + C24635) * C19987) *
                        C50821) *
                       C50808) *
                      C50565 * C50851 +
                  ((((C24646 + C24645 + C24644) * C19987 +
                     (C24643 + C24642 + C24641) * C50518) *
                        C50821 +
                    ((C25339 + C25340 + C25341) * C19987 +
                     (C25342 + C25343 + C25344) * C50518) *
                        C50742) *
                       C50808 -
                   (((C24595 * C2700 + C24590 * C2704 + C24594 * C1221 +
                      C50857 * C1228 + C24593 * C483 + C50856 * C496) *
                         C50518 +
                     (C24595 * C2695 + C24590 * C2701 + C24594 * C1216 +
                      C50857 * C1222 + C24593 * C466 + C50856 * C482) *
                         C19987) *
                        C50742 +
                    ((C25344 + C25343 + C25342) * C50518 +
                     (C25341 + C25340 + C25339) * C19987) *
                        C50821) *
                       C50645) *
                      C50565 * C638)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C19987 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50518) *
                       C50821 +
                   ((C24593 * C463 + C50856 * C477 + C24594 * C889 +
                     C50857 * C894 + C24595 * C1565 + C24590 * C1573) *
                        C19987 +
                    (C24593 * C476 + C50856 * C493 + C24594 * C895 +
                     C50857 * C904 + C24595 * C1572 + C24590 * C1577) *
                        C50518) *
                       C50742) *
                      C50581 * C50565 * C113 -
                  (((C25005 + C25006 + C25007) * C50518 +
                    (C25008 + C25009 + C25010) * C19987) *
                       C50742 +
                   ((C24640 + C24639 + C24638) * C50518 +
                    (C24637 + C24636 + C24635) * C19987) *
                       C50821) *
                      C50581 * C50565 * C114 +
                  (((C24646 + C24645 + C24644) * C19987 +
                    (C24643 + C24642 + C24641) * C50518) *
                       C50821 +
                   ((C25339 + C25340 + C25341) * C19987 +
                    (C25342 + C25343 + C25344) * C50518) *
                       C50742) *
                      C50581 * C50565 * C115 -
                  (((C24595 * C1566 + C24590 * C1574 + C24594 * C901 +
                     C50857 * C907 + C24593 * C470 + C50856 * C490) *
                        C50518 +
                    (C24595 * C1562 + C24590 * C1567 + C24594 * C892 +
                     C50857 * C900 + C24593 * C460 + C50856 * C471) *
                        C19987) *
                       C50742 +
                   ((C24652 + C24651 + C24650) * C50518 +
                    (C24649 + C24648 + C24647) * C19987) *
                       C50821) *
                      C50581 * C50565 * C116)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C24593 * C463 + C50856 * C477 + C24594 * C889 +
                      C50857 * C894 + C24595 * C1565 + C24590 * C1573) *
                         C19987 +
                     (C24593 * C476 + C50856 * C493 + C24594 * C895 +
                      C50857 * C904 + C24595 * C1572 + C24590 * C1577) *
                         C50518) *
                        C50742) *
                       C50581 * C278 -
                   (((C24595 * C3267 + C24590 * C3272 + C24594 * C1572 +
                      C50857 * C1577 + C24593 * C895 + C50856 * C904) *
                         C50518 +
                     (C24595 * C3263 + C24590 * C3266 + C24594 * C1565 +
                      C50857 * C1573 + C24593 * C889 + C50856 * C894) *
                         C19987) *
                        C50742 +
                    ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50518 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C19987) *
                        C50821) *
                       C50581 * C279 +
                   (((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                      C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                         C19987 +
                     (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                      C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                         C50518) *
                        C50821 +
                    ((C24593 * C1565 + C50856 * C1573 + C24594 * C3263 +
                      C50857 * C3266 + C24595 * C4186 + C24590 * C4190) *
                         C19987 +
                     (C24593 * C1572 + C50856 * C1577 + C24594 * C3267 +
                      C50857 * C3272 + C24595 * C4189 + C24590 * C4192) *
                         C50518) *
                        C50742) *
                       C50581 * C280) *
                      C281 +
                  ((((C24828 + C24827 + C24826) * C19987 +
                     (C24825 + C24824 + C24823) * C50518) *
                        C50821 +
                    ((C25551 + C25552 + C25553) * C19987 +
                     (C25554 + C25555 + C25556) * C50518) *
                        C50742) *
                       C50581 * C279 -
                   (((C25005 + C25006 + C25007) * C50518 +
                     (C25008 + C25009 + C25010) * C19987) *
                        C50742 +
                    ((C24640 + C24639 + C24638) * C50518 +
                     (C24637 + C24636 + C24635) * C19987) *
                        C50821) *
                       C50581 * C278 -
                   (((C24595 * C4187 + C24590 * C4191 + C24594 * C3269 +
                      C50857 * C3273 + C24593 * C1570 + C50856 * C1576) *
                         C50518 +
                     (C24595 * C4185 + C24590 * C4188 + C24594 * C3264 +
                      C50857 * C3268 + C24593 * C1564 + C50856 * C1571) *
                         C19987) *
                        C50742 +
                    ((C24834 + C24833 + C24832) * C50518 +
                     (C24831 + C24830 + C24829) * C19987) *
                        C50821) *
                       C50581 * C280) *
                      C50552)) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C31239 + C31240 + C31241) * C19987 +
                     (C31242 + C31243 + C31244) * C50518) *
                        C50742) *
                       C50581 * C50852 -
                   (((C31754 + C31753 + C31752) * C50518 +
                     (C31751 + C31750 + C31749) * C19987) *
                        C50742 +
                    ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50518 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C19987) *
                        C50821) *
                       C50581 * C50853 +
                   (((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                      C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                         C19987 +
                     (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                      C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                         C50518) *
                        C50821 +
                    ((C24593 * C1565 + C50856 * C1573 + C24594 * C3263 +
                      C50857 * C3266 + C24595 * C4186 + C24590 * C4190) *
                         C19987 +
                     (C24593 * C1572 + C50856 * C1577 + C24594 * C3267 +
                      C50857 * C3272 + C24595 * C4189 + C24590 * C4192) *
                         C50518) *
                        C50742) *
                       C50581 * C1331) *
                      C50799 +
                  ((((C24828 + C24827 + C24826) * C19987 +
                     (C24825 + C24824 + C24823) * C50518) *
                        C50821 +
                    ((C25551 + C25552 + C25553) * C19987 +
                     (C25554 + C25555 + C25556) * C50518) *
                        C50742) *
                       C50581 * C50853 -
                   (((C25005 + C25006 + C25007) * C50518 +
                     (C25008 + C25009 + C25010) * C19987) *
                        C50742 +
                    ((C24640 + C24639 + C24638) * C50518 +
                     (C24637 + C24636 + C24635) * C19987) *
                        C50821) *
                       C50581 * C50852 -
                   (((C24595 * C4187 + C24590 * C4191 + C24594 * C3269 +
                      C50857 * C3273 + C24593 * C1570 + C50856 * C1576) *
                         C50518 +
                     (C24595 * C4185 + C24590 * C4188 + C24594 * C3264 +
                      C50857 * C3268 + C24593 * C1564 + C50856 * C1571) *
                         C19987) *
                        C50742 +
                    ((C24834 + C24833 + C24832) * C50518 +
                     (C24831 + C24830 + C24829) * C19987) *
                        C50821) *
                       C50581 * C1331) *
                      C50552)) /
                (p * q * std::sqrt(p + q));
    d2ee[96] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C31239 + C31240 + C31241) * C19987 +
                     (C31242 + C31243 + C31244) * C50518) *
                        C50742) *
                       C50808 -
                   (((C31245 + C31246 + C31247) * C50518 +
                     (C31248 + C31249 + C31250) * C19987) *
                        C50742 +
                    ((C31244 + C31243 + C31242) * C50518 +
                     (C31241 + C31240 + C31239) * C19987) *
                        C50821) *
                       C50645) *
                      C50852 +
                  ((((C31749 + C31750 + C31751) * C19987 +
                     (C31752 + C31753 + C31754) * C50518) *
                        C50821 +
                    ((C32157 + C32158 + C32159) * C19987 +
                     (C32160 + C32161 + C32162) * C50518) *
                        C50742) *
                       C50645 -
                   (((C31754 + C31753 + C31752) * C50518 +
                     (C31751 + C31750 + C31749) * C19987) *
                        C50742 +
                    ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50518 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C19987) *
                        C50821) *
                       C50808) *
                      C50853 +
                  ((((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                      C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                         C19987 +
                     (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                      C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                         C50518) *
                        C50821 +
                    ((C32661 + C32662 + C32663) * C19987 +
                     (C32664 + C32665 + C32666) * C50518) *
                        C50742) *
                       C50808 -
                   (((C24595 * C20777 + C24590 * C20779 + C24594 * C3695 +
                      C50857 * C3698 + C24593 * C2697 + C50856 * C2702) *
                         C50518 +
                     (C24595 * C20776 + C24590 * C20778 + C24594 * C3692 +
                      C50857 * C3696 + C24593 * C2693 + C50856 * C2696) *
                         C19987) *
                        C50742 +
                    ((C32666 + C32665 + C32664) * C50518 +
                     (C32663 + C32662 + C32661) * C19987) *
                        C50821) *
                       C50645) *
                      C1331) *
                 C50546) /
                (p * q * std::sqrt(p + q));
    d2ee[97] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C19987 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50518) *
                       C50821 +
                   ((C31239 + C31240 + C31241) * C19987 +
                    (C31242 + C31243 + C31244) * C50518) *
                       C50742) *
                      C50581 * C1096 -
                  (((C31754 + C31753 + C31752) * C50518 +
                    (C31751 + C31750 + C31749) * C19987) *
                       C50742 +
                   ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50518 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C19987) *
                       C50821) *
                      C50581 * C1097 +
                  (((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                     C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                        C19987 +
                    (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                     C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                        C50518) *
                       C50821 +
                   ((C24593 * C1565 + C50856 * C1573 + C24594 * C3263 +
                     C50857 * C3266 + C24595 * C4186 + C24590 * C4190) *
                        C19987 +
                    (C24593 * C1572 + C50856 * C1577 + C24594 * C3267 +
                     C50857 * C3272 + C24595 * C4189 + C24590 * C4192) *
                        C50518) *
                       C50742) *
                      C50581 * C1098 -
                  (((C24595 * C21107 + C24590 * C21109 + C24594 * C4189 +
                     C50857 * C4192 + C24593 * C3267 + C50856 * C3272) *
                        C50518 +
                    (C24595 * C21106 + C24590 * C21108 + C24594 * C4186 +
                     C50857 * C4190 + C24593 * C3263 + C50856 * C3266) *
                        C19987) *
                       C50742 +
                   ((C24595 * C3541 + C24590 * C3544 + C24594 * C2503 +
                     C50857 * C2508 + C24593 * C1111 + C50856 * C1116) *
                        C50518 +
                    (C24595 * C3538 + C24590 * C3542 + C24594 * C2499 +
                     C50857 * C2502 + C24593 * C1104 + C50856 * C1112) *
                        C19987) *
                       C50821) *
                      C50581 * C1099) *
                 C50546) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C31239 + C31240 + C31241) * C19987 +
                     (C31242 + C31243 + C31244) * C50518) *
                        C50742) *
                       C50581 * C1025 -
                   (((C31754 + C31753 + C31752) * C50518 +
                     (C31751 + C31750 + C31749) * C19987) *
                        C50742 +
                    ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50518 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C19987) *
                        C50821) *
                       C50581 * C50617) *
                      C1027 +
                  ((((C24828 + C24827 + C24826) * C19987 +
                     (C24825 + C24824 + C24823) * C50518) *
                        C50821 +
                    ((C25551 + C25552 + C25553) * C19987 +
                     (C25554 + C25555 + C25556) * C50518) *
                        C50742) *
                       C50581 * C50617 -
                   (((C25005 + C25006 + C25007) * C50518 +
                     (C25008 + C25009 + C25010) * C19987) *
                        C50742 +
                    ((C24640 + C24639 + C24638) * C50518 +
                     (C24637 + C24636 + C24635) * C19987) *
                        C50821) *
                       C50581 * C1025) *
                      C1028 +
                  ((((C24646 + C24645 + C24644) * C19987 +
                     (C24643 + C24642 + C24641) * C50518) *
                        C50821 +
                    ((C25339 + C25340 + C25341) * C19987 +
                     (C25342 + C25343 + C25344) * C50518) *
                        C50742) *
                       C50581 * C1025 -
                   (((C24595 * C3270 + C24590 * C3274 + C24594 * C1568 +
                      C50857 * C1575 + C24593 * C899 + C50856 * C906) *
                         C50518 +
                     (C24595 * C3265 + C24590 * C3271 + C24594 * C1563 +
                      C50857 * C1569 + C24593 * C891 + C50856 * C898) *
                         C19987) *
                        C50742 +
                    ((C25180 + C25179 + C25178) * C50518 +
                     (C25177 + C25176 + C25175) * C19987) *
                        C50821) *
                       C50581 * C50617) *
                      C1029)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C31239 + C31240 + C31241) * C19987 +
                     (C31242 + C31243 + C31244) * C50518) *
                        C50742) *
                       C457 -
                   (((C31245 + C31246 + C31247) * C50518 +
                     (C31248 + C31249 + C31250) * C19987) *
                        C50742 +
                    ((C31244 + C31243 + C31242) * C50518 +
                     (C31241 + C31240 + C31239) * C19987) *
                        C50821) *
                       C458 +
                   (((C31250 + C31249 + C31248) * C19987 +
                     (C31247 + C31246 + C31245) * C50518) *
                        C50821 +
                    ((C24593 * C1849 + C50856 * C1857 + C24594 * C4586 +
                      C50857 * C4594 + C24595 * C4585 + C24590 * C4593) *
                         C19987 +
                     (C24593 * C1856 + C50856 * C1861 + C24594 * C4592 +
                      C50857 * C4598 + C24595 * C4591 + C24590 * C4597) *
                         C50518) *
                        C50742) *
                       C459) *
                      C1025 +
                  ((((C31749 + C31750 + C31751) * C19987 +
                     (C31752 + C31753 + C31754) * C50518) *
                        C50821 +
                    ((C32157 + C32158 + C32159) * C19987 +
                     (C32160 + C32161 + C32162) * C50518) *
                        C50742) *
                       C458 -
                   (((C31754 + C31753 + C31752) * C50518 +
                     (C31751 + C31750 + C31749) * C19987) *
                        C50742 +
                    ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50518 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C19987) *
                        C50821) *
                       C457 -
                   (((C24595 * C21373 + C24590 * C21375 + C24594 * C4591 +
                      C50857 * C4597 + C24593 * C4592 + C50856 * C4598) *
                         C50518 +
                     (C24595 * C21372 + C24590 * C21374 + C24594 * C4585 +
                      C50857 * C4593 + C24593 * C4586 + C50856 * C4594) *
                         C19987) *
                        C50742 +
                    ((C32162 + C32161 + C32160) * C50518 +
                     (C32159 + C32158 + C32157) * C19987) *
                        C50821) *
                       C459) *
                      C50617) *
                 C50546) /
                    (p * q * std::sqrt(p + q));
    d2ee[98] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                       C50857 * C300 + C24595 * C287 + C24590 * C301) *
                          C19987 +
                      (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                       C50857 * C316 + C24595 * C302 + C24590 * C317) *
                          C50518) *
                         C50821 +
                     ((C31239 + C31240 + C31241) * C19987 +
                      (C31242 + C31243 + C31244) * C50518) *
                         C50742) *
                        C50808 -
                    (((C31245 + C31246 + C31247) * C50518 +
                      (C31248 + C31249 + C31250) * C19987) *
                         C50742 +
                     ((C31244 + C31243 + C31242) * C50518 +
                      (C31241 + C31240 + C31239) * C19987) *
                         C50821) *
                        C50645) *
                       C1025 +
                   ((((C31749 + C31750 + C31751) * C19987 +
                      (C31752 + C31753 + C31754) * C50518) *
                         C50821 +
                     ((C32157 + C32158 + C32159) * C19987 +
                      (C32160 + C32161 + C32162) * C50518) *
                         C50742) *
                        C50645 -
                    (((C31754 + C31753 + C31752) * C50518 +
                      (C31751 + C31750 + C31749) * C19987) *
                         C50742 +
                     ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                       C50857 * C317 + C24593 * C299 + C50856 * C316) *
                          C50518 +
                      (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                       C50857 * C301 + C24593 * C286 + C50856 * C300) *
                          C19987) *
                         C50821) *
                        C50808) *
                       C50617) *
                      C50799 +
                  (((((C25010 + C25009 + C25008) * C19987 +
                      (C25007 + C25006 + C25005) * C50518) *
                         C50821 +
                     ((C25011 + C25012 + C25013) * C19987 +
                      (C25014 + C25015 + C25016) * C50518) *
                         C50742) *
                        C50645 -
                    (((C25005 + C25006 + C25007) * C50518 +
                      (C25008 + C25009 + C25010) * C19987) *
                         C50742 +
                     ((C24640 + C24639 + C24638) * C50518 +
                      (C24637 + C24636 + C24635) * C19987) *
                         C50821) *
                        C50808) *
                       C1025 +
                   ((((C24828 + C24827 + C24826) * C19987 +
                      (C24825 + C24824 + C24823) * C50518) *
                         C50821 +
                     ((C25551 + C25552 + C25553) * C19987 +
                      (C25554 + C25555 + C25556) * C50518) *
                         C50742) *
                        C50808 -
                    (((C24595 * C3693 + C24590 * C3697 + C24594 * C2699 +
                       C50857 * C2703 + C24593 * C1223 + C50856 * C1229) *
                          C50518 +
                      (C24595 * C3691 + C24590 * C3694 + C24594 * C2694 +
                       C50857 * C2698 + C24593 * C1217 + C50856 * C1224) *
                          C19987) *
                         C50742 +
                     ((C25556 + C25555 + C25554) * C50518 +
                      (C25553 + C25552 + C25551) * C19987) *
                         C50821) *
                        C50645) *
                       C50617) *
                      C50552)) /
                (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C31239 + C31240 + C31241) * C19987 +
                     (C31242 + C31243 + C31244) * C50518) *
                        C50742) *
                       C50581 * C1025 -
                   (((C31754 + C31753 + C31752) * C50518 +
                     (C31751 + C31750 + C31749) * C19987) *
                        C50742 +
                    ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                      C50857 * C317 + C24593 * C299 + C50856 * C316) *
                         C50518 +
                     (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                      C50857 * C301 + C24593 * C286 + C50856 * C300) *
                         C19987) *
                        C50821) *
                       C50581 * C50617) *
                      C1027 +
                  ((((C24828 + C24827 + C24826) * C19987 +
                     (C24825 + C24824 + C24823) * C50518) *
                        C50821 +
                    ((C25551 + C25552 + C25553) * C19987 +
                     (C25554 + C25555 + C25556) * C50518) *
                        C50742) *
                       C50581 * C50617 -
                   (((C25005 + C25006 + C25007) * C50518 +
                     (C25008 + C25009 + C25010) * C19987) *
                        C50742 +
                    ((C24640 + C24639 + C24638) * C50518 +
                     (C24637 + C24636 + C24635) * C19987) *
                        C50821) *
                       C50581 * C1025) *
                      C1028 +
                  ((((C24646 + C24645 + C24644) * C19987 +
                     (C24643 + C24642 + C24641) * C50518) *
                        C50821 +
                    ((C25339 + C25340 + C25341) * C19987 +
                     (C25342 + C25343 + C25344) * C50518) *
                        C50742) *
                       C50581 * C1025 -
                   (((C24595 * C3270 + C24590 * C3274 + C24594 * C1568 +
                      C50857 * C1575 + C24593 * C899 + C50856 * C906) *
                         C50518 +
                     (C24595 * C3265 + C24590 * C3271 + C24594 * C1563 +
                      C50857 * C1569 + C24593 * C891 + C50856 * C898) *
                         C19987) *
                        C50742 +
                    ((C25180 + C25179 + C25178) * C50518 +
                     (C25177 + C25176 + C25175) * C19987) *
                        C50821) *
                       C50581 * C50617) *
                      C1029)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                     C50857 * C300 + C24595 * C287 + C24590 * C301) *
                        C19987 +
                    (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                     C50857 * C316 + C24595 * C302 + C24590 * C317) *
                        C50518) *
                       C50821 +
                   ((C31239 + C31240 + C31241) * C19987 +
                    (C31242 + C31243 + C31244) * C50518) *
                       C50742) *
                      C50581 * C1096 -
                  (((C31754 + C31753 + C31752) * C50518 +
                    (C31751 + C31750 + C31749) * C19987) *
                       C50742 +
                   ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                     C50857 * C317 + C24593 * C299 + C50856 * C316) *
                        C50518 +
                    (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                     C50857 * C301 + C24593 * C286 + C50856 * C300) *
                        C19987) *
                       C50821) *
                      C50581 * C1097 +
                  (((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                     C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                        C19987 +
                    (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                     C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                        C50518) *
                       C50821 +
                   ((C24593 * C1565 + C50856 * C1573 + C24594 * C3263 +
                     C50857 * C3266 + C24595 * C4186 + C24590 * C4190) *
                        C19987 +
                    (C24593 * C1572 + C50856 * C1577 + C24594 * C3267 +
                     C50857 * C3272 + C24595 * C4189 + C24590 * C4192) *
                        C50518) *
                       C50742) *
                      C50581 * C1098 -
                  (((C24595 * C21107 + C24590 * C21109 + C24594 * C4189 +
                     C50857 * C4192 + C24593 * C3267 + C50856 * C3272) *
                        C50518 +
                    (C24595 * C21106 + C24590 * C21108 + C24594 * C4186 +
                     C50857 * C4190 + C24593 * C3263 + C50856 * C3266) *
                        C19987) *
                       C50742 +
                   ((C24595 * C3541 + C24590 * C3544 + C24594 * C2503 +
                     C50857 * C2508 + C24593 * C1111 + C50856 * C1116) *
                        C50518 +
                    (C24595 * C3538 + C24590 * C3542 + C24594 * C2499 +
                     C50857 * C2502 + C24593 * C1104 + C50856 * C1112) *
                        C19987) *
                       C50821) *
                      C50581 * C1099) *
                 C50546) /
                    (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                        C50857 * C300 + C24595 * C287 + C24590 * C301) *
                           C19987 +
                       (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                        C50857 * C316 + C24595 * C302 + C24590 * C317) *
                           C50518) *
                          C50821 +
                      ((C31239 + C31240 + C31241) * C19987 +
                       (C31242 + C31243 + C31244) * C50518) *
                          C50742) *
                         C1676 -
                     (((C31245 + C31246 + C31247) * C50518 +
                       (C31248 + C31249 + C31250) * C19987) *
                          C50742 +
                      ((C31244 + C31243 + C31242) * C50518 +
                       (C31241 + C31240 + C31239) * C19987) *
                          C50821) *
                         C50645) *
                        C50807 +
                    ((((C31749 + C31750 + C31751) * C19987 +
                       (C31752 + C31753 + C31754) * C50518) *
                          C50821 +
                      ((C32157 + C32158 + C32159) * C19987 +
                       (C32160 + C32161 + C32162) * C50518) *
                          C50742) *
                         C50645 -
                     (((C31754 + C31753 + C31752) * C50518 +
                       (C31751 + C31750 + C31749) * C19987) *
                          C50742 +
                      ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                        C50857 * C317 + C24593 * C299 + C50856 * C316) *
                           C50518 +
                       (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                        C50857 * C301 + C24593 * C286 + C50856 * C300) *
                           C19987) *
                          C50821) *
                         C1676) *
                        C50617) *
                       C50799 +
                   (((((C25010 + C25009 + C25008) * C19987 +
                       (C25007 + C25006 + C25005) * C50518) *
                          C50821 +
                      ((C25011 + C25012 + C25013) * C19987 +
                       (C25014 + C25015 + C25016) * C50518) *
                          C50742) *
                         C50645 -
                     (((C25005 + C25006 + C25007) * C50518 +
                       (C25008 + C25009 + C25010) * C19987) *
                          C50742 +
                      ((C24640 + C24639 + C24638) * C50518 +
                       (C24637 + C24636 + C24635) * C19987) *
                          C50821) *
                         C1676) *
                        C50807 +
                    ((((C24828 + C24827 + C24826) * C19987 +
                       (C24825 + C24824 + C24823) * C50518) *
                          C50821 +
                      ((C25551 + C25552 + C25553) * C19987 +
                       (C25554 + C25555 + C25556) * C50518) *
                          C50742) *
                         C1676 -
                     (((C24595 * C3693 + C24590 * C3697 + C24594 * C2699 +
                        C50857 * C2703 + C24593 * C1223 + C50856 * C1229) *
                           C50518 +
                       (C24595 * C3691 + C24590 * C3694 + C24594 * C2694 +
                        C50857 * C2698 + C24593 * C1217 + C50856 * C1224) *
                           C19987) *
                          C50742 +
                      ((C25556 + C25555 + C25554) * C50518 +
                       (C25553 + C25552 + C25551) * C19987) *
                          C50821) *
                         C50645) *
                        C50617) *
                       C50552)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                       C50857 * C300 + C24595 * C287 + C24590 * C301) *
                          C19987 +
                      (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                       C50857 * C316 + C24595 * C302 + C24590 * C317) *
                          C50518) *
                         C50821 +
                     ((C31239 + C31240 + C31241) * C19987 +
                      (C31242 + C31243 + C31244) * C50518) *
                         C50742) *
                        C50854 -
                    (((C31245 + C31246 + C31247) * C50518 +
                      (C31248 + C31249 + C31250) * C19987) *
                         C50742 +
                     ((C31244 + C31243 + C31242) * C50518 +
                      (C31241 + C31240 + C31239) * C19987) *
                         C50821) *
                        C50855 +
                    (((C31250 + C31249 + C31248) * C19987 +
                      (C31247 + C31246 + C31245) * C50518) *
                         C50821 +
                     ((C33069 + C33070 + C33071) * C19987 +
                      (C33072 + C33073 + C33074) * C50518) *
                         C50742) *
                        C2092) *
                       C50807 +
                   ((((C31749 + C31750 + C31751) * C19987 +
                      (C31752 + C31753 + C31754) * C50518) *
                         C50821 +
                     ((C32157 + C32158 + C32159) * C19987 +
                      (C32160 + C32161 + C32162) * C50518) *
                         C50742) *
                        C50855 -
                    (((C31754 + C31753 + C31752) * C50518 +
                      (C31751 + C31750 + C31749) * C19987) *
                         C50742 +
                     ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                       C50857 * C317 + C24593 * C299 + C50856 * C316) *
                          C50518 +
                      (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                       C50857 * C301 + C24593 * C286 + C50856 * C300) *
                          C19987) *
                         C50821) *
                        C50854 -
                    (((C24595 * C21373 + C24590 * C21375 + C24594 * C4591 +
                       C50857 * C4597 + C24593 * C4592 + C50856 * C4598) *
                          C50518 +
                      (C24595 * C21372 + C24590 * C21374 + C24594 * C4585 +
                       C50857 * C4593 + C24593 * C4586 + C50856 * C4594) *
                          C19987) *
                         C50742 +
                     ((C32162 + C32161 + C32160) * C50518 +
                      (C32159 + C32158 + C32157) * C19987) *
                         C50821) *
                        C2092) *
                       C50617) *
                  C50546) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                       C50857 * C300 + C24595 * C287 + C24590 * C301) *
                          C19987 +
                      (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                       C50857 * C316 + C24595 * C302 + C24590 * C317) *
                          C50518) *
                         C50821 +
                     ((C31239 + C31240 + C31241) * C19987 +
                      (C31242 + C31243 + C31244) * C50518) *
                         C50742) *
                        C1676 -
                    (((C31245 + C31246 + C31247) * C50518 +
                      (C31248 + C31249 + C31250) * C19987) *
                         C50742 +
                     ((C31244 + C31243 + C31242) * C50518 +
                      (C31241 + C31240 + C31239) * C19987) *
                         C50821) *
                        C50645) *
                       C278 +
                   ((((C31749 + C31750 + C31751) * C19987 +
                      (C31752 + C31753 + C31754) * C50518) *
                         C50821 +
                     ((C32157 + C32158 + C32159) * C19987 +
                      (C32160 + C32161 + C32162) * C50518) *
                         C50742) *
                        C50645 -
                    (((C31754 + C31753 + C31752) * C50518 +
                      (C31751 + C31750 + C31749) * C19987) *
                         C50742 +
                     ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                       C50857 * C317 + C24593 * C299 + C50856 * C316) *
                          C50518 +
                      (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                       C50857 * C301 + C24593 * C286 + C50856 * C300) *
                          C19987) *
                         C50821) *
                        C1676) *
                       C279 +
                   ((((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                       C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                          C19987 +
                      (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                       C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                          C50518) *
                         C50821 +
                     ((C32661 + C32662 + C32663) * C19987 +
                      (C32664 + C32665 + C32666) * C50518) *
                         C50742) *
                        C1676 -
                    (((C24595 * C20777 + C24590 * C20779 + C24594 * C3695 +
                       C50857 * C3698 + C24593 * C2697 + C50856 * C2702) *
                          C50518 +
                      (C24595 * C20776 + C24590 * C20778 + C24594 * C3692 +
                       C50857 * C3696 + C24593 * C2693 + C50856 * C2696) *
                          C19987) *
                         C50742 +
                     ((C32666 + C32665 + C32664) * C50518 +
                      (C32663 + C32662 + C32661) * C19987) *
                         C50821) *
                        C50645) *
                       C280) *
                  C50546) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                       C50857 * C300 + C24595 * C287 + C24590 * C301) *
                          C19987 +
                      (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                       C50857 * C316 + C24595 * C302 + C24590 * C317) *
                          C50518) *
                         C50821 +
                     ((C31239 + C31240 + C31241) * C19987 +
                      (C31242 + C31243 + C31244) * C50518) *
                         C50742) *
                        C1676 -
                    (((C31245 + C31246 + C31247) * C50518 +
                      (C31248 + C31249 + C31250) * C19987) *
                         C50742 +
                     ((C31244 + C31243 + C31242) * C50518 +
                      (C31241 + C31240 + C31239) * C19987) *
                         C50821) *
                        C50645) *
                       C50565 * C1027 +
                   ((((C25010 + C25009 + C25008) * C19987 +
                      (C25007 + C25006 + C25005) * C50518) *
                         C50821 +
                     ((C25011 + C25012 + C25013) * C19987 +
                      (C25014 + C25015 + C25016) * C50518) *
                         C50742) *
                        C50645 -
                    (((C25005 + C25006 + C25007) * C50518 +
                      (C25008 + C25009 + C25010) * C19987) *
                         C50742 +
                     ((C24640 + C24639 + C24638) * C50518 +
                      (C24637 + C24636 + C24635) * C19987) *
                         C50821) *
                        C1676) *
                       C50565 * C1028 +
                   ((((C24646 + C24645 + C24644) * C19987 +
                      (C24643 + C24642 + C24641) * C50518) *
                         C50821 +
                     ((C25339 + C25340 + C25341) * C19987 +
                      (C25342 + C25343 + C25344) * C50518) *
                         C50742) *
                        C1676 -
                    (((C24595 * C2700 + C24590 * C2704 + C24594 * C1221 +
                       C50857 * C1228 + C24593 * C483 + C50856 * C496) *
                          C50518 +
                      (C24595 * C2695 + C24590 * C2701 + C24594 * C1216 +
                       C50857 * C1222 + C24593 * C466 + C50856 * C482) *
                          C19987) *
                         C50742 +
                     ((C25344 + C25343 + C25342) * C50518 +
                      (C25341 + C25340 + C25339) * C19987) *
                         C50821) *
                        C50645) *
                       C50565 * C1029)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                      C50857 * C300 + C24595 * C287 + C24590 * C301) *
                         C19987 +
                     (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                      C50857 * C316 + C24595 * C302 + C24590 * C317) *
                         C50518) *
                        C50821 +
                    ((C31239 + C31240 + C31241) * C19987 +
                     (C31242 + C31243 + C31244) * C50518) *
                        C50742) *
                       C1842 -
                   (((C31245 + C31246 + C31247) * C50518 +
                     (C31248 + C31249 + C31250) * C19987) *
                        C50742 +
                    ((C31244 + C31243 + C31242) * C50518 +
                     (C31241 + C31240 + C31239) * C19987) *
                        C50821) *
                       C1843 +
                   (((C31250 + C31249 + C31248) * C19987 +
                     (C31247 + C31246 + C31245) * C50518) *
                        C50821 +
                    ((C33069 + C33070 + C33071) * C19987 +
                     (C33072 + C33073 + C33074) * C50518) *
                        C50742) *
                       C1844 -
                   (((C24595 * C23063 + C24590 * C23065 + C24594 * C6506 +
                      C50857 * C6509 + C24593 * C5500 + C50856 * C5505) *
                         C50518 +
                     (C24595 * C23062 + C24590 * C23064 + C24594 * C6503 +
                      C50857 * C6507 + C24593 * C5496 + C50856 * C5499) *
                         C19987) *
                        C50742 +
                    ((C33074 + C33073 + C33072) * C50518 +
                     (C33071 + C33070 + C33069) * C19987) *
                        C50821) *
                       C1845) *
                  C50565 * C50546) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                       C50857 * C300 + C24595 * C287 + C24590 * C301) *
                          C19987 +
                      (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                       C50857 * C316 + C24595 * C302 + C24590 * C317) *
                          C50518) *
                         C50821 +
                     ((C31239 + C31240 + C31241) * C19987 +
                      (C31242 + C31243 + C31244) * C50518) *
                         C50742) *
                        C50854 -
                    (((C31245 + C31246 + C31247) * C50518 +
                      (C31248 + C31249 + C31250) * C19987) *
                         C50742 +
                     ((C31244 + C31243 + C31242) * C50518 +
                      (C31241 + C31240 + C31239) * C19987) *
                         C50821) *
                        C50855 +
                    (((C31250 + C31249 + C31248) * C19987 +
                      (C31247 + C31246 + C31245) * C50518) *
                         C50821 +
                     ((C33069 + C33070 + C33071) * C19987 +
                      (C33072 + C33073 + C33074) * C50518) *
                         C50742) *
                        C2092) *
                       C50565 * C50799 +
                   ((((C25010 + C25009 + C25008) * C19987 +
                      (C25007 + C25006 + C25005) * C50518) *
                         C50821 +
                     ((C25011 + C25012 + C25013) * C19987 +
                      (C25014 + C25015 + C25016) * C50518) *
                         C50742) *
                        C50855 -
                    (((C25005 + C25006 + C25007) * C50518 +
                      (C25008 + C25009 + C25010) * C19987) *
                         C50742 +
                     ((C24640 + C24639 + C24638) * C50518 +
                      (C24637 + C24636 + C24635) * C19987) *
                         C50821) *
                        C50854 -
                    (((C24595 * C4587 + C24590 * C4595 + C24594 * C4588 +
                       C50857 * C4596 + C24593 * C1854 + C50856 * C1860) *
                          C50518 +
                      (C24595 * C4583 + C24590 * C4589 + C24594 * C4584 +
                       C50857 * C4590 + C24593 * C1848 + C50856 * C1855) *
                          C19987) *
                         C50742 +
                     ((C25016 + C25015 + C25014) * C50518 +
                      (C25013 + C25012 + C25011) * C19987) *
                         C50821) *
                        C2092) *
                       C50565 * C50552)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                       C50857 * C300 + C24595 * C287 + C24590 * C301) *
                          C19987 +
                      (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                       C50857 * C316 + C24595 * C302 + C24590 * C317) *
                          C50518) *
                         C50821 +
                     ((C31239 + C31240 + C31241) * C19987 +
                      (C31242 + C31243 + C31244) * C50518) *
                         C50742) *
                        C1676 -
                    (((C31245 + C31246 + C31247) * C50518 +
                      (C31248 + C31249 + C31250) * C19987) *
                         C50742 +
                     ((C31244 + C31243 + C31242) * C50518 +
                      (C31241 + C31240 + C31239) * C19987) *
                         C50821) *
                        C50645) *
                       C50565 * C1027 +
                   ((((C25010 + C25009 + C25008) * C19987 +
                      (C25007 + C25006 + C25005) * C50518) *
                         C50821 +
                     ((C25011 + C25012 + C25013) * C19987 +
                      (C25014 + C25015 + C25016) * C50518) *
                         C50742) *
                        C50645 -
                    (((C25005 + C25006 + C25007) * C50518 +
                      (C25008 + C25009 + C25010) * C19987) *
                         C50742 +
                     ((C24640 + C24639 + C24638) * C50518 +
                      (C24637 + C24636 + C24635) * C19987) *
                         C50821) *
                        C1676) *
                       C50565 * C1028 +
                   ((((C24646 + C24645 + C24644) * C19987 +
                      (C24643 + C24642 + C24641) * C50518) *
                         C50821 +
                     ((C25339 + C25340 + C25341) * C19987 +
                      (C25342 + C25343 + C25344) * C50518) *
                         C50742) *
                        C1676 -
                    (((C24595 * C2700 + C24590 * C2704 + C24594 * C1221 +
                       C50857 * C1228 + C24593 * C483 + C50856 * C496) *
                          C50518 +
                      (C24595 * C2695 + C24590 * C2701 + C24594 * C1216 +
                       C50857 * C1222 + C24593 * C466 + C50856 * C482) *
                          C19987) *
                         C50742 +
                     ((C25344 + C25343 + C25342) * C50518 +
                      (C25341 + C25340 + C25339) * C19987) *
                         C50821) *
                        C50645) *
                       C50565 * C1029)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C24593 * C122 + C50856 * C129 + C24594 * C286 +
                       C50857 * C300 + C24595 * C287 + C24590 * C301) *
                          C19987 +
                      (C24593 * C130 + C50856 * C143 + C24594 * C299 +
                       C50857 * C316 + C24595 * C302 + C24590 * C317) *
                          C50518) *
                         C50821 +
                     ((C31239 + C31240 + C31241) * C19987 +
                      (C31242 + C31243 + C31244) * C50518) *
                         C50742) *
                        C1676 -
                    (((C31245 + C31246 + C31247) * C50518 +
                      (C31248 + C31249 + C31250) * C19987) *
                         C50742 +
                     ((C31244 + C31243 + C31242) * C50518 +
                      (C31241 + C31240 + C31239) * C19987) *
                         C50821) *
                        C50645) *
                       C278 +
                   ((((C31749 + C31750 + C31751) * C19987 +
                      (C31752 + C31753 + C31754) * C50518) *
                         C50821 +
                     ((C32157 + C32158 + C32159) * C19987 +
                      (C32160 + C32161 + C32162) * C50518) *
                         C50742) *
                        C50645 -
                    (((C31754 + C31753 + C31752) * C50518 +
                      (C31751 + C31750 + C31749) * C19987) *
                         C50742 +
                     ((C24595 * C1111 + C24590 * C1116 + C24594 * C302 +
                       C50857 * C317 + C24593 * C299 + C50856 * C316) *
                          C50518 +
                      (C24595 * C1104 + C24590 * C1112 + C24594 * C287 +
                       C50857 * C301 + C24593 * C286 + C50856 * C300) *
                          C19987) *
                         C50821) *
                        C1676) *
                       C279 +
                   ((((C24593 * C287 + C50856 * C301 + C24594 * C1104 +
                       C50857 * C1112 + C24595 * C2499 + C24590 * C2502) *
                          C19987 +
                      (C24593 * C302 + C50856 * C317 + C24594 * C1111 +
                       C50857 * C1116 + C24595 * C2503 + C24590 * C2508) *
                          C50518) *
                         C50821 +
                     ((C32661 + C32662 + C32663) * C19987 +
                      (C32664 + C32665 + C32666) * C50518) *
                         C50742) *
                        C1676 -
                    (((C24595 * C20777 + C24590 * C20779 + C24594 * C3695 +
                       C50857 * C3698 + C24593 * C2697 + C50856 * C2702) *
                          C50518 +
                      (C24595 * C20776 + C24590 * C20778 + C24594 * C3692 +
                       C50857 * C3696 + C24593 * C2693 + C50856 * C2696) *
                          C19987) *
                         C50742 +
                     ((C32666 + C32665 + C32664) * C50518 +
                      (C32663 + C32662 + C32661) * C19987) *
                         C50821) *
                        C50645) *
                       C280) *
                  C50546) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C50807 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C50617) *
              C50850 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C50617 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C50807) *
              C50851 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C50581 * C50807 -
           ((C19986 * C2506 + C19981 * C2510 + C19985 * C1107 + C19980 * C1114 +
             C19984 * C306 + C19979 * C319 + C19983 * C295 + C19978 * C314) *
                C50518 +
            (C19986 * C2501 + C19981 * C2507 + C19985 * C1102 + C19980 * C1108 +
             C19984 * C289 + C19979 * C305 + C19983 * C284 + C19978 * C296) *
                C19987) *
               C50678 * C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C50807 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C50617) *
              C50850 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
               C50678 * C50581 * C50617 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C50807) *
              C50851 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C50581 * C50807 -
           ((C17178 * C311 + C50714 * C322 + C17177 * C310 + C17172 * C321) *
                C17176 +
            (C17178 * C292 + C50714 * C312 + C17177 * C291 + C17172 * C309) *
                C17181 +
            (C17782 + C17781) * C17175 + (C17780 + C17779) * C17180 +
            C17769 * C17174 + C17770 * C17179) *
               C50678 * C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C50581 * C50807 -
           (((C17178 * C2697 + C50714 * C2702 + C17177 * C1225 +
              C17172 * C1230) *
                 C50518 +
             (C17178 * C2693 + C50714 * C2696 + C17177 * C1218 +
              C17172 * C1226) *
                 C19987) *
                C5185 +
            ((C17178 * C1572 + C50714 * C1577 + C17177 * C895 + C17172 * C904) *
                 C50518 +
             (C17178 * C1565 + C50714 * C1573 + C17177 * C889 + C17172 * C894) *
                 C19987) *
                C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C50581 * C50617) *
              C50850 +
          ((((C17420 + C17419) * C19987 + (C17418 + C17417) * C50518) * C5183 +
            ((C18153 + C18154) * C19987 + (C18155 + C18156) * C50518) * C5184 +
            ((C17177 * C1217 + C17172 * C1224 + C17178 * C2694 +
              C50714 * C2698) *
                 C19987 +
             (C17177 * C1223 + C17172 * C1229 + C17178 * C2699 +
              C50714 * C2703) *
                 C50518) *
                C5185) *
               C50581 * C50617 -
           (C22147 * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C50581 * C50807) *
              C50851 +
          (((C17231 * C19987 + C17232 * C50518) * C5183 +
            ((C17610 + C17609) * C19987 + (C17608 + C17607) * C50518) * C5184 +
            ((C17619 + C17620) * C19987 + (C17621 + C17622) * C50518) * C5185) *
               C50581 * C50807 -
           (((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
              C17172 * C1228) *
                 C50518 +
             (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
              C17172 * C1222) *
                 C19987) *
                C5185 +
            ((C18160 + C18159) * C50518 + (C18158 + C18157) * C19987) * C5184 +
            (C17769 * C50518 + C17770 * C19987) * C5183) *
               C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
              C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                 C19987 +
             (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
              C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                 C50518) *
                C50678 * C50808 -
            ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 +
              C19980 * C1577 + C19984 * C895 + C19979 * C904 + C19983 * C476 +
              C19978 * C493) *
                 C50518 +
             (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 +
              C19980 * C1573 + C19984 * C889 + C19979 * C894 + C19983 * C463 +
              C19978 * C477) *
                 C19987) *
                C50678 * C50645) *
               C50807 +
           (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
              C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
              C19981 * C4190) *
                 C19987 +
             (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
              C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
              C19981 * C4192) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 +
              C19980 * C1116 + C19984 * C302 + C19979 * C317 + C19983 * C299 +
              C19978 * C316) *
                 C50518 +
             (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 +
              C19980 * C1112 + C19984 * C287 + C19979 * C301 + C19983 * C286 +
              C19978 * C300) *
                 C19987) *
                C50678 * C50808) *
               C50617) *
              C281 +
          ((((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
              C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
              C19981 * C3268) *
                 C19987 +
             (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
              C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
              C19981 * C3273) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
              C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                 C50518 +
             (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
              C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                 C19987) *
                C50678 * C50808) *
               C50807 +
           (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
              C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
              C19981 * C2504) *
                 C19987 +
             (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
              C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
              C19981 * C2509) *
                 C50518) *
                C50678 * C50808 -
            ((C19986 * C4187 + C19981 * C4191 + C19985 * C3269 +
              C19980 * C3273 + C19984 * C1570 + C19979 * C1576 + C19983 * C897 +
              C19978 * C905) *
                 C50518 +
             (C19986 * C4185 + C19981 * C4188 + C19985 * C3264 +
              C19980 * C3268 + C19984 * C1564 + C19979 * C1571 + C19983 * C890 +
              C19978 * C896) *
                 C19987) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C17179 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C17174 +
             (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
             C17231 * C17181 + C17232 * C17176) *
                C50678 * C50808 -
            (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
             (C17613 + C17614) * C17180 +
             (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                 C17174 +
             (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                 C17179) *
                C50678 * C50645) *
               C50807 +
           (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                 C17179 +
             (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                 C17174 +
             (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
             (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
                C50678 * C50645 -
            (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
             (C17419 + C17420) * C17180 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C17174 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C17179) *
                C50678 * C50808) *
               C50617) *
              C281 +
          ((((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
             (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
             (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
                C50678 * C50645 -
            (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
             (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
             (C17216 + C17215) * C17179) *
                C50678 * C50808) *
               C50807 +
           (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
             (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
             (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
                C50678 * C50808 -
            ((C17178 * C1566 + C50714 * C1574 + C17177 * C901 + C17172 * C907) *
                 C17176 +
             (C17178 * C1562 + C50714 * C1567 + C17177 * C892 + C17172 * C900) *
                 C17181 +
             (C18160 + C18159) * C17175 + (C18158 + C18157) * C17180 +
             (C18156 + C18155) * C17174 + (C18154 + C18153) * C17179) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                  C19987 +
              (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                  C50518) *
                 C5183 +
             ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
             C22150 * C5185) *
                C50808 -
            (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
             ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
             ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) *
                 C5183) *
                C50645) *
               C50807 +
           ((((C22661 + C22662) * C19987 + (C22663 + C22664) * C50518) * C5183 +
             ((C22665 + C22666) * C19987 + (C22667 + C22668) * C50518) * C5184 +
             ((C17177 * C4586 + C17172 * C4594 + C17178 * C4585 +
               C50714 * C4593) *
                  C19987 +
              (C17177 * C4592 + C17172 * C4598 + C17178 * C4591 +
               C50714 * C4597) *
                  C50518) *
                 C5185) *
                C50645 -
            (((C22668 + C22667) * C50518 + (C22666 + C22665) * C19987) * C5185 +
             ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
             ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                  C50518 +
              (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                  C19987) *
                 C5183) *
                C50808) *
               C50617) *
              C281 +
          (((((C17614 + C17613) * C19987 + (C17612 + C17611) * C50518) * C5183 +
             ((C17615 + C17616) * C19987 + (C17617 + C17618) * C50518) * C5184 +
             ((C22139 + C22140) * C19987 + (C22141 + C22142) * C50518) *
                 C5185) *
                C50645 -
            (C22147 * C5185 +
             ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
             ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) *
                 C5183) *
                C50808) *
               C50807 +
           ((((C17420 + C17419) * C19987 + (C17418 + C17417) * C50518) * C5183 +
             ((C18153 + C18154) * C19987 + (C18155 + C18156) * C50518) * C5184 +
             ((C22669 + C22670) * C19987 + (C22671 + C22672) * C50518) *
                 C5185) *
                C50808 -
            (((C17178 * C4587 + C50714 * C4595 + C17177 * C4588 +
               C17172 * C4596) *
                  C50518 +
              (C17178 * C4583 + C50714 * C4589 + C17177 * C4584 +
               C17172 * C4590) *
                  C19987) *
                 C5185 +
             ((C22672 + C22671) * C50518 + (C22670 + C22669) * C19987) * C5184 +
             ((C18156 + C18155) * C50518 + (C18154 + C18153) * C19987) *
                 C5183) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                   C17179 +
               (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                   C17174 +
               (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
               C17231 * C17181 + C17232 * C17176) *
                  C50678 * C50581 * C50565 * C113 -
              (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
               (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
               (C17216 + C17215) * C17179) *
                  C50678 * C50581 * C50565 * C114 +
              (C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
               (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
               (C17229 + C17230) * C17176) *
                  C50678 * C50581 * C50565 * C115 -
              ((C17178 * C640 + C50714 * C642 + C17177 * C140 + C17172 * C148) *
                   C17176 +
               (C17178 * C639 + C50714 * C641 + C17177 * C127 + C17172 * C139) *
                   C17181 +
               (C17230 + C17229) * C17175 + (C17228 + C17227) * C17180 +
               C17233 * C17174 + C17234 * C17179) *
                  C50678 * C50581 * C50565 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17177 * C122 + C17172 * C129 + C17178 * C286 +
                 C50714 * C300) *
                    C17179 +
                (C17177 * C130 + C17172 * C143 + C17178 * C299 +
                 C50714 * C316) *
                    C17174 +
                (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
                C17231 * C17181 + C17232 * C17176) *
                   C50678 * C50581 * C278 -
               ((C17413 + C17414) * C17176 + (C17415 + C17416) * C17181 +
                (C17417 + C17418) * C17175 + (C17419 + C17420) * C17180 +
                (C17178 * C302 + C50714 * C317 + C17177 * C299 +
                 C17172 * C316) *
                    C17174 +
                (C17178 * C287 + C50714 * C301 + C17177 * C286 +
                 C17172 * C300) *
                    C17179) *
                   C50678 * C50581 * C279 +
               ((C17177 * C287 + C17172 * C301 + C17178 * C1104 +
                 C50714 * C1112) *
                    C17179 +
                (C17177 * C302 + C17172 * C317 + C17178 * C1111 +
                 C50714 * C1116) *
                    C17174 +
                (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
                (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
                   C50678 * C50581 * C280) *
                  C281 +
              (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
                (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
                (C17177 * C283 + C17172 * C294 + C17178 * C290 +
                 C50714 * C307) *
                    C17181 +
                (C17177 * C293 + C17172 * C313 + C17178 * C308 +
                 C50714 * C320) *
                    C17176) *
                   C50678 * C50581 * C279 -
               (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
                (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
                (C17216 + C17215) * C17179) *
                   C50678 * C50581 * C278 -
               ((C17178 * C1105 + C50714 * C1113 + C17177 * C308 +
                 C17172 * C320) *
                    C17176 +
                (C17178 * C1101 + C50714 * C1106 + C17177 * C290 +
                 C17172 * C307) *
                    C17181 +
                (C17428 + C17427) * C17175 + (C17426 + C17425) * C17180 +
                (C17424 + C17423) * C17174 + (C17422 + C17421) * C17179) *
                   C50678 * C50581 * C280) *
                  C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C457 -
           ((C17607 + C17608) * C17176 + (C17609 + C17610) * C17181 +
            (C17611 + C17612) * C17175 + (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C458 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C17179 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C17174 +
            (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
            (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
               C50678 * C459) *
              C50565 * C281 +
          (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
            (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
            (C17177 * C460 + C17172 * C471 + C17178 * C892 + C50714 * C900) *
                C17181 +
            (C17177 * C470 + C17172 * C490 + C17178 * C901 + C50714 * C907) *
                C17176) *
               C50678 * C458 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C457 -
           ((C17178 * C1219 + C50714 * C1227 + C17177 * C485 + C17172 * C497) *
                C17176 +
            (C17178 * C1215 + C50714 * C1220 + C17177 * C467 + C17172 * C484) *
                C17181 +
            (C17622 + C17621) * C17175 + (C17620 + C17619) * C17180 +
            (C17618 + C17617) * C17174 + (C17616 + C17615) * C17179) *
               C50678 * C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C50581 * C50565 * C113 -
          ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
            C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
               C50518 +
           (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
            C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
               C19987) *
              C50678 * C50581 * C50565 * C114 +
          ((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
            C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
               C19987 +
           (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
            C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
               C50518) *
              C50678 * C50581 * C50565 * C115 -
          ((C19986 * C1105 + C19981 * C1113 + C19985 * C308 + C19980 * C320 +
            C19984 * C293 + C19979 * C313 + C19983 * C136 + C19978 * C146) *
               C50518 +
           (C19986 * C1101 + C19981 * C1106 + C19985 * C290 + C19980 * C307 +
            C19984 * C283 + C19979 * C294 + C19983 * C125 + C19978 * C135) *
               C19987) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C278 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C279 +
           ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C50581 * C280) *
              C281 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C279 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C278 -
           ((C19986 * C3539 + C19981 * C3543 + C19985 * C2505 + C19980 * C2509 +
             C19984 * C1109 + C19979 * C1115 + C19983 * C304 + C19978 * C318) *
                C50518 +
            (C19986 * C3537 + C19981 * C3540 + C19985 * C2500 + C19980 * C2504 +
             C19984 * C1103 + C19979 * C1110 + C19983 * C288 + C19978 * C303) *
                C19987) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C457 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C458 +
           ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
             C19985 * C2693 + C19980 * C2696 + C19986 * C3692 +
             C19981 * C3696) *
                C19987 +
            (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
             C19985 * C2697 + C19980 * C2702 + C19986 * C3695 +
             C19981 * C3698) *
                C50518) *
               C50678 * C459) *
              C50565 * C281 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C458 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C457 -
           ((C19986 * C3693 + C19981 * C3697 + C19985 * C2699 + C19980 * C2703 +
             C19984 * C1223 + C19979 * C1229 + C19983 * C481 + C19978 * C495) *
                C50518 +
            (C19986 * C3691 + C19981 * C3694 + C19985 * C2694 + C19980 * C2698 +
             C19984 * C1217 + C19979 * C1224 + C19983 * C465 + C19978 * C480) *
                C19987) *
               C50678 * C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C19987 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50518) *
               C5183 +
           ((C17177 * C463 + C17172 * C477 + C17178 * C889 + C50714 * C894) *
                C19987 +
            (C17177 * C476 + C17172 * C493 + C17178 * C895 + C50714 * C904) *
                C50518) *
               C5184 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C19987 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C50518) *
               C5185) *
              C50581 * C50565 * C113 -
          (((C17618 + C17617) * C50518 + (C17616 + C17615) * C19987) * C5185 +
           ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
           ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
              C50581 * C50565 * C114 +
          ((C17231 * C19987 + C17232 * C50518) * C5183 +
           ((C17610 + C17609) * C19987 + (C17608 + C17607) * C50518) * C5184 +
           ((C17619 + C17620) * C19987 + (C17621 + C17622) * C50518) * C5185) *
              C50581 * C50565 * C115 -
          (((C17178 * C1219 + C50714 * C1227 + C17177 * C485 + C17172 * C497) *
                C50518 +
            (C17178 * C1215 + C50714 * C1220 + C17177 * C467 + C17172 * C484) *
                C19987) *
               C5185 +
           ((C17942 + C17941) * C50518 + (C17940 + C17939) * C19987) * C5184 +
           (C17233 * C50518 + C17234 * C19987) * C5183) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C17177 * C463 + C17172 * C477 + C17178 * C889 + C50714 * C894) *
                 C19987 +
             (C17177 * C476 + C17172 * C493 + C17178 * C895 + C50714 * C904) *
                 C50518) *
                C5184 +
            ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                 C19987 +
             (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                 C50518) *
                C5185) *
               C50581 * C278 -
           (((C17178 * C2697 + C50714 * C2702 + C17177 * C1225 +
              C17172 * C1230) *
                 C50518 +
             (C17178 * C2693 + C50714 * C2696 + C17177 * C1218 +
              C17172 * C1226) *
                 C19987) *
                C5185 +
            ((C17178 * C1572 + C50714 * C1577 + C17177 * C895 + C17172 * C904) *
                 C50518 +
             (C17178 * C1565 + C50714 * C1573 + C17177 * C889 + C17172 * C894) *
                 C19987) *
                C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C50581 * C279 +
           (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C19987 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50518) *
                C5183 +
            ((C17177 * C1565 + C17172 * C1573 + C17178 * C3263 +
              C50714 * C3266) *
                 C19987 +
             (C17177 * C1572 + C17172 * C1577 + C17178 * C3267 +
              C50714 * C3272) *
                 C50518) *
                C5184 +
            ((C17177 * C2693 + C17172 * C2696 + C17178 * C3692 +
              C50714 * C3696) *
                 C19987 +
             (C17177 * C2697 + C17172 * C2702 + C17178 * C3695 +
              C50714 * C3698) *
                 C50518) *
                C5185) *
               C50581 * C280) *
              C281 +
          ((((C17420 + C17419) * C19987 + (C17418 + C17417) * C50518) * C5183 +
            ((C18153 + C18154) * C19987 + (C18155 + C18156) * C50518) * C5184 +
            ((C17177 * C1217 + C17172 * C1224 + C17178 * C2694 +
              C50714 * C2698) *
                 C19987 +
             (C17177 * C1223 + C17172 * C1229 + C17178 * C2699 +
              C50714 * C2703) *
                 C50518) *
                C5185) *
               C50581 * C279 -
           (((C17618 + C17617) * C50518 + (C17616 + C17615) * C19987) * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C50581 * C278 -
           (((C17178 * C3693 + C50714 * C3697 + C17177 * C2699 +
              C17172 * C2703) *
                 C50518 +
             (C17178 * C3691 + C50714 * C3694 + C17177 * C2694 +
              C17172 * C2698) *
                 C19987) *
                C5185 +
            ((C17178 * C3269 + C50714 * C3273 + C17177 * C1570 +
              C17172 * C1576) *
                 C50518 +
             (C17178 * C3264 + C50714 * C3268 + C17177 * C1564 +
              C17172 * C1571) *
                 C19987) *
                C5184 +
            ((C17424 + C17423) * C50518 + (C17422 + C17421) * C19987) * C5183) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C457 -
           (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C458 +
           (C22150 * C5183 +
            ((C22138 + C22137) * C19987 + (C22136 + C22135) * C50518) * C5184 +
            ((C17177 * C5496 + C17172 * C5499 + C17178 * C6503 +
              C50714 * C6507) *
                 C19987 +
             (C17177 * C5500 + C17172 * C5505 + C17178 * C6506 +
              C50714 * C6509) *
                 C50518) *
                C5185) *
               C459) *
              C50565 * C281 +
          ((((C17614 + C17613) * C19987 + (C17612 + C17611) * C50518) * C5183 +
            ((C17615 + C17616) * C19987 + (C17617 + C17618) * C50518) * C5184 +
            ((C22139 + C22140) * C19987 + (C22141 + C22142) * C50518) * C5185) *
               C458 -
           (C22147 * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C457 -
           (((C17178 * C6504 + C50714 * C6508 + C17177 * C5502 +
              C17172 * C5506) *
                 C50518 +
             (C17178 * C6502 + C50714 * C6505 + C17177 * C5497 +
              C17172 * C5501) *
                 C19987) *
                C5185 +
            ((C22142 + C22141) * C50518 + (C22140 + C22139) * C19987) * C5184 +
            C22147 * C5183) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50808 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C50565 * C50850 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50808) *
              C50565 * C50851 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C50808 -
           ((C19986 * C3270 + C19981 * C3274 + C19985 * C1568 + C19980 * C1575 +
             C19984 * C899 + C19979 * C906 + C19983 * C472 + C19978 * C491) *
                C50518 +
            (C19986 * C3265 + C19981 * C3271 + C19985 * C1563 + C19980 * C1569 +
             C19984 * C891 + C19979 * C898 + C19983 * C461 + C19978 * C473) *
                C19987) *
               C50678 * C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50808 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C50565 * C50850 +
          (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
            (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
            (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
               C50678 * C50645 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50808) *
              C50565 * C50851 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C50808 -
           ((C17178 * C902 + C50714 * C908 + C17177 * C487 + C17172 * C498) *
                C17176 +
            (C17178 * C893 + C50714 * C903 + C17177 * C468 + C17172 * C486) *
                C17181 +
            (C17942 + C17941) * C17175 + (C17940 + C17939) * C17180 +
            C17929 * C17174 + C17930 * C17179) *
               C50678 * C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C50808 -
           (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C50645) *
              C50565 * C50850 +
          ((((C17614 + C17613) * C19987 + (C17612 + C17611) * C50518) * C5183 +
            ((C17615 + C17616) * C19987 + (C17617 + C17618) * C50518) * C5184 +
            ((C22139 + C22140) * C19987 + (C22141 + C22142) * C50518) * C5185) *
               C50645 -
           (C22147 * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C50808) *
              C50565 * C50851 +
          (((C17231 * C19987 + C17232 * C50518) * C5183 +
            ((C17610 + C17609) * C19987 + (C17608 + C17607) * C50518) * C5184 +
            ((C17619 + C17620) * C19987 + (C17621 + C17622) * C50518) * C5185) *
               C50808 -
           (((C17178 * C6075 + C50714 * C6077 + C17177 * C1852 +
              C17172 * C1859) *
                 C50518 +
             (C17178 * C6074 + C50714 * C6076 + C17177 * C1847 +
              C17172 * C1853) *
                 C19987) *
                C5185 +
            ((C17622 + C17621) * C50518 + (C17620 + C17619) * C19987) * C5184 +
            (C17929 * C50518 + C17930 * C19987) * C5183) *
               C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C278 -
           ((C17413 + C17414) * C17176 + (C17415 + C17416) * C17181 +
            (C17417 + C17418) * C17175 + (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C279 +
           ((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C50581 * C280) *
              C281 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17177 * C283 + C17172 * C294 + C17178 * C290 + C50714 * C307) *
                C17181 +
            (C17177 * C293 + C17172 * C313 + C17178 * C308 + C50714 * C320) *
                C17176) *
               C50678 * C50581 * C279 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C278 -
           ((C17178 * C1105 + C50714 * C1113 + C17177 * C308 + C17172 * C320) *
                C17176 +
            (C17178 * C1101 + C50714 * C1106 + C17177 * C290 + C17172 * C307) *
                C17181 +
            (C17428 + C17427) * C17175 + (C17426 + C17425) * C17180 +
            (C17424 + C17423) * C17174 + (C17422 + C17421) * C17179) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
               C17179 +
           (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
               C17174 +
           (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
           C17231 * C17181 + C17232 * C17176) *
              C50678 * C50581 * C50565 * C113 -
          (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
           (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
           (C17216 + C17215) * C17179) *
              C50678 * C50581 * C50565 * C114 +
          (C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
           (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
           (C17229 + C17230) * C17176) *
              C50678 * C50581 * C50565 * C115 -
          ((C17178 * C640 + C50714 * C642 + C17177 * C140 + C17172 * C148) *
               C17176 +
           (C17178 * C639 + C50714 * C641 + C17177 * C127 + C17172 * C139) *
               C17181 +
           (C17230 + C17229) * C17175 + (C17228 + C17227) * C17180 +
           C17233 * C17174 + C17234 * C17179) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C50581 * C50565 * C113 -
          ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
            C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
               C50518 +
           (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
            C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
               C19987) *
              C50678 * C50581 * C50565 * C114 +
          ((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
            C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
               C19987 +
           (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
            C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
               C50518) *
              C50678 * C50581 * C50565 * C115 -
          ((C19986 * C1105 + C19981 * C1113 + C19985 * C308 + C19980 * C320 +
            C19984 * C293 + C19979 * C313 + C19983 * C136 + C19978 * C146) *
               C50518 +
           (C19986 * C1101 + C19981 * C1106 + C19985 * C290 + C19980 * C307 +
            C19984 * C283 + C19979 * C294 + C19983 * C125 + C19978 * C135) *
               C19987) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C278 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C279 +
           ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C50581 * C280) *
              C281 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C279 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C278 -
           ((C19986 * C3539 + C19981 * C3543 + C19985 * C2505 + C19980 * C2509 +
             C19984 * C1109 + C19979 * C1115 + C19983 * C304 + C19978 * C318) *
                C50518 +
            (C19986 * C3537 + C19981 * C3540 + C19985 * C2500 + C19980 * C2504 +
             C19984 * C1103 + C19979 * C1110 + C19983 * C288 + C19978 * C303) *
                C19987) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C19987 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50518) *
               C5183 +
           ((C17177 * C463 + C17172 * C477 + C17178 * C889 + C50714 * C894) *
                C19987 +
            (C17177 * C476 + C17172 * C493 + C17178 * C895 + C50714 * C904) *
                C50518) *
               C5184 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C19987 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C50518) *
               C5185) *
              C50581 * C50565 * C113 -
          (((C17618 + C17617) * C50518 + (C17616 + C17615) * C19987) * C5185 +
           ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
           ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
              C50581 * C50565 * C114 +
          ((C17231 * C19987 + C17232 * C50518) * C5183 +
           ((C17610 + C17609) * C19987 + (C17608 + C17607) * C50518) * C5184 +
           ((C17619 + C17620) * C19987 + (C17621 + C17622) * C50518) * C5185) *
              C50581 * C50565 * C115 -
          (((C17178 * C1219 + C50714 * C1227 + C17177 * C485 + C17172 * C497) *
                C50518 +
            (C17178 * C1215 + C50714 * C1220 + C17177 * C467 + C17172 * C484) *
                C19987) *
               C5185 +
           ((C17942 + C17941) * C50518 + (C17940 + C17939) * C19987) * C5184 +
           (C17233 * C50518 + C17234 * C19987) * C5183) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C17177 * C463 + C17172 * C477 + C17178 * C889 + C50714 * C894) *
                 C19987 +
             (C17177 * C476 + C17172 * C493 + C17178 * C895 + C50714 * C904) *
                 C50518) *
                C5184 +
            ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                 C19987 +
             (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                 C50518) *
                C5185) *
               C50581 * C278 -
           (((C17178 * C2697 + C50714 * C2702 + C17177 * C1225 +
              C17172 * C1230) *
                 C50518 +
             (C17178 * C2693 + C50714 * C2696 + C17177 * C1218 +
              C17172 * C1226) *
                 C19987) *
                C5185 +
            ((C17178 * C1572 + C50714 * C1577 + C17177 * C895 + C17172 * C904) *
                 C50518 +
             (C17178 * C1565 + C50714 * C1573 + C17177 * C889 + C17172 * C894) *
                 C19987) *
                C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C50581 * C279 +
           (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C19987 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50518) *
                C5183 +
            ((C17177 * C1565 + C17172 * C1573 + C17178 * C3263 +
              C50714 * C3266) *
                 C19987 +
             (C17177 * C1572 + C17172 * C1577 + C17178 * C3267 +
              C50714 * C3272) *
                 C50518) *
                C5184 +
            ((C17177 * C2693 + C17172 * C2696 + C17178 * C3692 +
              C50714 * C3696) *
                 C19987 +
             (C17177 * C2697 + C17172 * C2702 + C17178 * C3695 +
              C50714 * C3698) *
                 C50518) *
                C5185) *
               C50581 * C280) *
              C281 +
          ((((C17420 + C17419) * C19987 + (C17418 + C17417) * C50518) * C5183 +
            ((C18153 + C18154) * C19987 + (C18155 + C18156) * C50518) * C5184 +
            ((C17177 * C1217 + C17172 * C1224 + C17178 * C2694 +
              C50714 * C2698) *
                 C19987 +
             (C17177 * C1223 + C17172 * C1229 + C17178 * C2699 +
              C50714 * C2703) *
                 C50518) *
                C5185) *
               C50581 * C279 -
           (((C17618 + C17617) * C50518 + (C17616 + C17615) * C19987) * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C50581 * C278 -
           (((C17178 * C3693 + C50714 * C3697 + C17177 * C2699 +
              C17172 * C2703) *
                 C50518 +
             (C17178 * C3691 + C50714 * C3694 + C17177 * C2694 +
              C17172 * C2698) *
                 C19987) *
                C5185 +
            ((C17178 * C3269 + C50714 * C3273 + C17177 * C1570 +
              C17172 * C1576) *
                 C50518 +
             (C17178 * C3264 + C50714 * C3268 + C17177 * C1564 +
              C17172 * C1571) *
                 C19987) *
                C5184 +
            ((C17424 + C17423) * C50518 + (C17422 + C17421) * C19987) * C5183) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C50852 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C50853 +
           ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C50581 * C1331) *
              C50799 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C50853 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C50852 -
           ((C19986 * C3539 + C19981 * C3543 + C19985 * C2505 + C19980 * C2509 +
             C19984 * C1109 + C19979 * C1115 + C19983 * C304 + C19978 * C318) *
                C50518 +
            (C19986 * C3537 + C19981 * C3540 + C19985 * C2500 + C19980 * C2504 +
             C19984 * C1103 + C19979 * C1110 + C19983 * C288 + C19978 * C303) *
                C19987) *
               C50678 * C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C50852 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C50853 +
           ((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C50581 * C1331) *
              C50799 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
               C50678 * C50581 * C50853 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C50852 -
           ((C17178 * C1105 + C50714 * C1113 + C17177 * C308 + C17172 * C320) *
                C17176 +
            (C17178 * C1101 + C50714 * C1106 + C17177 * C290 + C17172 * C307) *
                C17181 +
            (C17428 + C17427) * C17175 + (C17426 + C17425) * C17180 +
            (C17424 + C17423) * C17174 + (C17422 + C17421) * C17179) *
               C50678 * C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C50581 * C50852 -
           (C23083 * C5185 +
            ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C50581 * C50853 +
           (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C19987 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50518) *
                C5183 +
            ((C17177 * C1565 + C17172 * C1573 + C17178 * C3263 +
              C50714 * C3266) *
                 C19987 +
             (C17177 * C1572 + C17172 * C1577 + C17178 * C3267 +
              C50714 * C3272) *
                 C50518) *
                C5184 +
            ((C17177 * C2693 + C17172 * C2696 + C17178 * C3692 +
              C50714 * C3696) *
                 C19987 +
             (C17177 * C2697 + C17172 * C2702 + C17178 * C3695 +
              C50714 * C3698) *
                 C50518) *
                C5185) *
               C50581 * C1331) *
              C50799 +
          ((((C17420 + C17419) * C19987 + (C17418 + C17417) * C50518) * C5183 +
            ((C18153 + C18154) * C19987 + (C18155 + C18156) * C50518) * C5184 +
            ((C22669 + C22670) * C19987 + (C22671 + C22672) * C50518) * C5185) *
               C50581 * C50853 -
           (C22147 * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C50581 * C50852 -
           (((C17178 * C3693 + C50714 * C3697 + C17177 * C2699 +
              C17172 * C2703) *
                 C50518 +
             (C17178 * C3691 + C50714 * C3694 + C17177 * C2694 +
              C17172 * C2698) *
                 C19987) *
                C5185 +
            ((C17178 * C3269 + C50714 * C3273 + C17177 * C1570 +
              C17172 * C1576) *
                 C50518 +
             (C17178 * C3264 + C50714 * C3268 + C17177 * C1564 +
              C17172 * C1571) *
                 C19987) *
                C5184 +
            ((C17424 + C17423) * C50518 + (C17422 + C17421) * C19987) * C5183) *
               C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50808 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C50852 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50808) *
              C50853 +
          (((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C50808 -
           ((C19986 * C21107 + C19981 * C21109 + C19985 * C4189 +
             C19980 * C4192 + C19984 * C3267 + C19979 * C3272 + C19983 * C1572 +
             C19978 * C1577) *
                C50518 +
            (C19986 * C21106 + C19981 * C21108 + C19985 * C4186 +
             C19980 * C4190 + C19984 * C3263 + C19979 * C3266 + C19983 * C1565 +
             C19978 * C1573) *
                C19987) *
               C50678 * C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50808 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C50852 +
          (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                C17179 +
            (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                C17174 +
            (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
            (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
               C50678 * C50645 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50808) *
              C50853 +
          (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C50808 -
           ((C17178 * C3270 + C50714 * C3274 + C17177 * C1568 +
             C17172 * C1575) *
                C17176 +
            (C17178 * C3265 + C50714 * C3271 + C17177 * C1563 +
             C17172 * C1569) *
                C17181 +
            (C17178 * C3269 + C50714 * C3273 + C17177 * C1570 +
             C17172 * C1576) *
                C17175 +
            (C17178 * C3264 + C50714 * C3268 + C17177 * C1564 +
             C17172 * C1571) *
                C17180 +
            (C17178 * C3267 + C50714 * C3272 + C17177 * C1572 +
             C17172 * C1577) *
                C17174 +
            (C17178 * C3263 + C50714 * C3266 + C17177 * C1565 +
             C17172 * C1573) *
                C17179) *
               C50678 * C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C50808 -
           (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C50645) *
              C50852 +
          ((((C22661 + C22662) * C19987 + (C22663 + C22664) * C50518) * C5183 +
            ((C22665 + C22666) * C19987 + (C22667 + C22668) * C50518) * C5184 +
            ((C23077 + C23078) * C19987 + (C23079 + C23080) * C50518) * C5185) *
               C50645 -
           (C23083 * C5185 +
            ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C50808) *
              C50853 +
          ((((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C19987 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50518) *
                C5183 +
            ((C23586 + C23587) * C19987 + (C23588 + C23589) * C50518) * C5184 +
            ((C23590 + C23591) * C19987 + (C23592 + C23593) * C50518) * C5185) *
               C50808 -
           (((C17178 * C21373 + C50714 * C21375 + C17177 * C4591 +
              C17172 * C4597) *
                 C50518 +
             (C17178 * C21372 + C50714 * C21374 + C17177 * C4585 +
              C17172 * C4593) *
                 C19987) *
                C5185 +
            ((C23593 + C23592) * C50518 + (C23591 + C23590) * C19987) * C5184 +
            ((C23589 + C23588) * C50518 + (C23587 + C23586) * C19987) * C5183) *
               C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17177 * C122 + C17172 * C129 + C17178 * C286 +
                 C50714 * C300) *
                    C17179 +
                (C17177 * C130 + C17172 * C143 + C17178 * C299 +
                 C50714 * C316) *
                    C17174 +
                (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
                C17231 * C17181 + C17232 * C17176) *
                   C50678 * C50581 * C1025 -
               (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
                (C17419 + C17420) * C17180 +
                (C17178 * C302 + C50714 * C317 + C17177 * C299 +
                 C17172 * C316) *
                    C17174 +
                (C17178 * C287 + C50714 * C301 + C17177 * C286 +
                 C17172 * C300) *
                    C17179) *
                   C50678 * C50581 * C50617) *
                  C1027 +
              (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
                (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
                (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
                   C50678 * C50581 * C50617 -
               (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
                (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
                (C17216 + C17215) * C17179) *
                   C50678 * C50581 * C1025) *
                  C1028 +
              ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
                (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
                (C17229 + C17230) * C17176) *
                   C50678 * C50581 * C1025 -
               ((C17178 * C311 + C50714 * C322 + C17177 * C310 +
                 C17172 * C321) *
                    C17176 +
                (C17178 * C292 + C50714 * C312 + C17177 * C291 +
                 C17172 * C309) *
                    C17181 +
                (C17782 + C17781) * C17175 + (C17780 + C17779) * C17180 +
                C17769 * C17174 + C17770 * C17179) *
                   C50678 * C50581 * C50617) *
                  C1029) +
         0.5 * std::pow(Pi, 2.5) *
             (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                   C17179 +
               (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                   C17174 +
               (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
               C17231 * C17181 + C17232 * C17176) *
                  C50678 * C50581 * C1096 -
              (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
               (C17419 + C17420) * C17180 +
               (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                   C17174 +
               (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                   C17179) *
                  C50678 * C50581 * C1097 +
              ((C17177 * C287 + C17172 * C301 + C17178 * C1104 +
                C50714 * C1112) *
                   C17179 +
               (C17177 * C302 + C17172 * C317 + C17178 * C1111 +
                C50714 * C1116) *
                   C17174 +
               (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
               (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
                  C50678 * C50581 * C1098 -
              ((C17178 * C2506 + C50714 * C2510 + C17177 * C1107 +
                C17172 * C1114) *
                   C17176 +
               (C17178 * C2501 + C50714 * C2507 + C17177 * C1102 +
                C17172 * C1108) *
                   C17181 +
               (C17178 * C2505 + C50714 * C2509 + C17177 * C1109 +
                C17172 * C1115) *
                   C17175 +
               (C17178 * C2500 + C50714 * C2504 + C17177 * C1103 +
                C17172 * C1110) *
                   C17180 +
               (C17178 * C2503 + C50714 * C2508 + C17177 * C1111 +
                C17172 * C1116) *
                   C17174 +
               (C17178 * C2499 + C50714 * C2502 + C17177 * C1104 +
                C17172 * C1112) *
                   C17179) *
                  C50678 * C50581 * C1099) *
             C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C457 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C458 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C17179 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C17174 +
            (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
            (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
               C50678 * C459) *
              C1025 +
          (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                C17179 +
            (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                C17174 +
            (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
            (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
               C50678 * C458 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C457 -
           ((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
             C17172 * C1228) *
                C17176 +
            (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
             C17172 * C1222) *
                C17181 +
            (C17178 * C2699 + C50714 * C2703 + C17177 * C1223 +
             C17172 * C1229) *
                C17175 +
            (C17178 * C2694 + C50714 * C2698 + C17177 * C1217 +
             C17172 * C1224) *
                C17180 +
            (C17178 * C2697 + C50714 * C2702 + C17177 * C1225 +
             C17172 * C1230) *
                C17174 +
            (C17178 * C2693 + C50714 * C2696 + C17177 * C1218 +
             C17172 * C1226) *
                C17179) *
               C50678 * C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C1025 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C50617 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C1025) *
              C1028 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C50581 * C1025 -
           ((C19986 * C2506 + C19981 * C2510 + C19985 * C1107 + C19980 * C1114 +
             C19984 * C306 + C19979 * C319 + C19983 * C295 + C19978 * C314) *
                C50518 +
            (C19986 * C2501 + C19981 * C2507 + C19985 * C1102 + C19980 * C1108 +
             C19984 * C289 + C19979 * C305 + C19983 * C284 + C19978 * C296) *
                C19987) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C50581 * C1096 -
          ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
            C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
               C50518 +
           (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
            C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
               C19987) *
              C50678 * C50581 * C1097 +
          ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
            C19985 * C2499 + C19980 * C2502 + C19986 * C3538 + C19981 * C3542) *
               C19987 +
           (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
            C19985 * C2503 + C19980 * C2508 + C19986 * C3541 + C19981 * C3544) *
               C50518) *
              C50678 * C50581 * C1098 -
          ((C19986 * C20675 + C19981 * C20677 + C19985 * C3541 +
            C19980 * C3544 + C19984 * C2503 + C19979 * C2508 + C19983 * C1111 +
            C19978 * C1116) *
               C50518 +
           (C19986 * C20674 + C19981 * C20676 + C19985 * C3538 +
            C19980 * C3542 + C19984 * C2499 + C19979 * C2502 + C19983 * C1104 +
            C19978 * C1112) *
               C19987) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C457 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C458 +
           ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
             C19985 * C2693 + C19980 * C2696 + C19986 * C3692 +
             C19981 * C3696) *
                C19987 +
            (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
             C19985 * C2697 + C19980 * C2702 + C19986 * C3695 +
             C19981 * C3698) *
                C50518) *
               C50678 * C459) *
              C1025 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C458 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C457 -
           ((C19986 * C20777 + C19981 * C20779 + C19985 * C3695 +
             C19980 * C3698 + C19984 * C2697 + C19979 * C2702 + C19983 * C1225 +
             C19978 * C1230) *
                C50518 +
            (C19986 * C20776 + C19981 * C20778 + C19985 * C3692 +
             C19980 * C3696 + C19984 * C2693 + C19979 * C2696 + C19983 * C1218 +
             C19978 * C1226) *
                C19987) *
               C50678 * C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C50581 * C1025 -
           (((C22668 + C22667) * C50518 + (C22666 + C22665) * C19987) * C5185 +
            ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C50581 * C50617) *
              C1027 +
          ((((C17420 + C17419) * C19987 + (C17418 + C17417) * C50518) * C5183 +
            ((C18153 + C18154) * C19987 + (C18155 + C18156) * C50518) * C5184 +
            ((C22669 + C22670) * C19987 + (C22671 + C22672) * C50518) * C5185) *
               C50581 * C50617 -
           (C22147 * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C50581 * C1025) *
              C1028 +
          (((C17231 * C19987 + C17232 * C50518) * C5183 +
            ((C17610 + C17609) * C19987 + (C17608 + C17607) * C50518) * C5184 +
            ((C17619 + C17620) * C19987 + (C17621 + C17622) * C50518) * C5185) *
               C50581 * C1025 -
           (((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
              C17172 * C1228) *
                 C50518 +
             (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
              C17172 * C1222) *
                 C19987) *
                C5185 +
            ((C18160 + C18159) * C50518 + (C18158 + C18157) * C19987) * C5184 +
            (C17769 * C50518 + C17770 * C19987) * C5183) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C19987 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50518) *
               C5183 +
           ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
           C22150 * C5185) *
              C50581 * C1096 -
          (((C22668 + C22667) * C50518 + (C22666 + C22665) * C19987) * C5185 +
           ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
           ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C50518 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C19987) *
               C5183) *
              C50581 * C1097 +
          (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C19987 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C50518) *
               C5183 +
           ((C17177 * C1565 + C17172 * C1573 + C17178 * C3263 +
             C50714 * C3266) *
                C19987 +
            (C17177 * C1572 + C17172 * C1577 + C17178 * C3267 +
             C50714 * C3272) *
                C50518) *
               C5184 +
           ((C17177 * C2693 + C17172 * C2696 + C17178 * C3692 +
             C50714 * C3696) *
                C19987 +
            (C17177 * C2697 + C17172 * C2702 + C17178 * C3695 +
             C50714 * C3698) *
                C50518) *
               C5185) *
              C50581 * C1098 -
          (((C17178 * C20777 + C50714 * C20779 + C17177 * C3695 +
             C17172 * C3698) *
                C50518 +
            (C17178 * C20776 + C50714 * C20778 + C17177 * C3692 +
             C17172 * C3696) *
                C19987) *
               C5185 +
           ((C17178 * C4189 + C50714 * C4192 + C17177 * C3267 +
             C17172 * C3272) *
                C50518 +
            (C17178 * C4186 + C50714 * C4190 + C17177 * C3263 +
             C17172 * C3266) *
                C19987) *
               C5184 +
           ((C17178 * C2503 + C50714 * C2508 + C17177 * C1111 +
             C17172 * C1116) *
                C50518 +
            (C17178 * C2499 + C50714 * C2502 + C17177 * C1104 +
             C17172 * C1112) *
                C19987) *
               C5183) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C457 -
           (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C458 +
           (C22150 * C5183 +
            ((C22138 + C22137) * C19987 + (C22136 + C22135) * C50518) * C5184 +
            ((C17177 * C5496 + C17172 * C5499 + C17178 * C6503 +
              C50714 * C6507) *
                 C19987 +
             (C17177 * C5500 + C17172 * C5505 + C17178 * C6506 +
              C50714 * C6509) *
                 C50518) *
                C5185) *
               C459) *
              C1025 +
          ((((C22661 + C22662) * C19987 + (C22663 + C22664) * C50518) * C5183 +
            ((C22665 + C22666) * C19987 + (C22667 + C22668) * C50518) * C5184 +
            ((C23077 + C23078) * C19987 + (C23079 + C23080) * C50518) * C5185) *
               C458 -
           (C23083 * C5185 +
            ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C457 -
           (((C17178 * C23063 + C50714 * C23065 + C17177 * C6506 +
              C17172 * C6509) *
                 C50518 +
             (C17178 * C23062 + C50714 * C23064 + C17177 * C6503 +
              C17172 * C6507) *
                 C19987) *
                C5185 +
            ((C23080 + C23079) * C50518 + (C23078 + C23077) * C19987) * C5184 +
            C23083 * C5183) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
              C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                 C19987 +
             (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
              C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                 C50518) *
                C50678 * C50808 -
            ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 +
              C19980 * C1577 + C19984 * C895 + C19979 * C904 + C19983 * C476 +
              C19978 * C493) *
                 C50518 +
             (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 +
              C19980 * C1573 + C19984 * C889 + C19979 * C894 + C19983 * C463 +
              C19978 * C477) *
                 C19987) *
                C50678 * C50645) *
               C1025 +
           (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
              C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
              C19981 * C4190) *
                 C19987 +
             (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
              C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
              C19981 * C4192) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 +
              C19980 * C1116 + C19984 * C302 + C19979 * C317 + C19983 * C299 +
              C19978 * C316) *
                 C50518 +
             (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 +
              C19980 * C1112 + C19984 * C287 + C19979 * C301 + C19983 * C286 +
              C19978 * C300) *
                 C19987) *
                C50678 * C50808) *
               C50617) *
              C50799 +
          ((((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
              C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
              C19981 * C3268) *
                 C19987 +
             (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
              C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
              C19981 * C3273) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
              C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                 C50518 +
             (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
              C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                 C19987) *
                C50678 * C50808) *
               C1025 +
           (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
              C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
              C19981 * C2504) *
                 C19987 +
             (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
              C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
              C19981 * C2509) *
                 C50518) *
                C50678 * C50808 -
            ((C19986 * C4187 + C19981 * C4191 + C19985 * C3269 +
              C19980 * C3273 + C19984 * C1570 + C19979 * C1576 + C19983 * C897 +
              C19978 * C905) *
                 C50518 +
             (C19986 * C4185 + C19981 * C4188 + C19985 * C3264 +
              C19980 * C3268 + C19984 * C1564 + C19979 * C1571 + C19983 * C890 +
              C19978 * C896) *
                 C19987) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C17179 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C17174 +
             (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
             C17231 * C17181 + C17232 * C17176) *
                C50678 * C50808 -
            (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
             (C17613 + C17614) * C17180 +
             (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                 C17174 +
             (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                 C17179) *
                C50678 * C50645) *
               C1025 +
           (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                 C17179 +
             (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                 C17174 +
             (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
             (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
                C50678 * C50645 -
            (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
             (C17419 + C17420) * C17180 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C17174 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C17179) *
                C50678 * C50808) *
               C50617) *
              C50799 +
          ((((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
             (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
             (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
                C50678 * C50645 -
            (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
             (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
             (C17216 + C17215) * C17179) *
                C50678 * C50808) *
               C1025 +
           (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
             (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
             (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
                C50678 * C50808 -
            ((C17178 * C1566 + C50714 * C1574 + C17177 * C901 + C17172 * C907) *
                 C17176 +
             (C17178 * C1562 + C50714 * C1567 + C17177 * C892 + C17172 * C900) *
                 C17181 +
             (C18160 + C18159) * C17175 + (C18158 + C18157) * C17180 +
             (C18156 + C18155) * C17174 + (C18154 + C18153) * C17179) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                  C19987 +
              (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                  C50518) *
                 C5183 +
             ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
             C22150 * C5185) *
                C50808 -
            (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
             ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
             ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) *
                 C5183) *
                C50645) *
               C1025 +
           ((((C22661 + C22662) * C19987 + (C22663 + C22664) * C50518) * C5183 +
             ((C22665 + C22666) * C19987 + (C22667 + C22668) * C50518) * C5184 +
             ((C23077 + C23078) * C19987 + (C23079 + C23080) * C50518) *
                 C5185) *
                C50645 -
            (C23083 * C5185 +
             ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
             ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                  C50518 +
              (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                  C19987) *
                 C5183) *
                C50808) *
               C50617) *
              C50799 +
          (((((C17614 + C17613) * C19987 + (C17612 + C17611) * C50518) * C5183 +
             ((C17615 + C17616) * C19987 + (C17617 + C17618) * C50518) * C5184 +
             ((C22139 + C22140) * C19987 + (C22141 + C22142) * C50518) *
                 C5185) *
                C50645 -
            (C22147 * C5185 +
             ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
             ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) *
                 C5183) *
                C50808) *
               C1025 +
           ((((C17420 + C17419) * C19987 + (C17418 + C17417) * C50518) * C5183 +
             ((C18153 + C18154) * C19987 + (C18155 + C18156) * C50518) * C5184 +
             ((C22669 + C22670) * C19987 + (C22671 + C22672) * C50518) *
                 C5185) *
                C50808 -
            (((C17178 * C4587 + C50714 * C4595 + C17177 * C4588 +
               C17172 * C4596) *
                  C50518 +
              (C17178 * C4583 + C50714 * C4589 + C17177 * C4584 +
               C17172 * C4590) *
                  C19987) *
                 C5185 +
             ((C22672 + C22671) * C50518 + (C22670 + C22669) * C19987) * C5184 +
             ((C18156 + C18155) * C50518 + (C18154 + C18153) * C19987) *
                 C5183) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
               C17179 +
           (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
               C17174 +
           (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
           C17231 * C17181 + C17232 * C17176) *
              C50678 * C50581 * C1096 -
          (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
           (C17419 + C17420) * C17180 +
           (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
               C17174 +
           (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
               C17179) *
              C50678 * C50581 * C1097 +
          ((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
               C17179 +
           (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
               C17174 +
           (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
           (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
              C50678 * C50581 * C1098 -
          ((C17178 * C2506 + C50714 * C2510 + C17177 * C1107 + C17172 * C1114) *
               C17176 +
           (C17178 * C2501 + C50714 * C2507 + C17177 * C1102 + C17172 * C1108) *
               C17181 +
           (C17178 * C2505 + C50714 * C2509 + C17177 * C1109 + C17172 * C1115) *
               C17175 +
           (C17178 * C2500 + C50714 * C2504 + C17177 * C1103 + C17172 * C1110) *
               C17180 +
           (C17178 * C2503 + C50714 * C2508 + C17177 * C1111 + C17172 * C1116) *
               C17174 +
           (C17178 * C2499 + C50714 * C2502 + C17177 * C1104 + C17172 * C1112) *
               C17179) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C1025 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
               C50678 * C50581 * C50617 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C1025) *
              C1028 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C50581 * C1025 -
           ((C17178 * C311 + C50714 * C322 + C17177 * C310 + C17172 * C321) *
                C17176 +
            (C17178 * C292 + C50714 * C312 + C17177 * C291 + C17172 * C309) *
                C17181 +
            (C17782 + C17781) * C17175 + (C17780 + C17779) * C17180 +
            C17769 * C17174 + C17770 * C17179) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C1025 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C50617 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C1025) *
              C1028 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C50581 * C1025 -
           ((C19986 * C2506 + C19981 * C2510 + C19985 * C1107 + C19980 * C1114 +
             C19984 * C306 + C19979 * C319 + C19983 * C295 + C19978 * C314) *
                C50518 +
            (C19986 * C2501 + C19981 * C2507 + C19985 * C1102 + C19980 * C1108 +
             C19984 * C289 + C19979 * C305 + C19983 * C284 + C19978 * C296) *
                C19987) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C50581 * C1096 -
          ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
            C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
               C50518 +
           (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
            C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
               C19987) *
              C50678 * C50581 * C1097 +
          ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
            C19985 * C2499 + C19980 * C2502 + C19986 * C3538 + C19981 * C3542) *
               C19987 +
           (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
            C19985 * C2503 + C19980 * C2508 + C19986 * C3541 + C19981 * C3544) *
               C50518) *
              C50678 * C50581 * C1098 -
          ((C19986 * C20675 + C19981 * C20677 + C19985 * C3541 +
            C19980 * C3544 + C19984 * C2503 + C19979 * C2508 + C19983 * C1111 +
            C19978 * C1116) *
               C50518 +
           (C19986 * C20674 + C19981 * C20676 + C19985 * C3538 +
            C19980 * C3542 + C19984 * C2499 + C19979 * C2502 + C19983 * C1104 +
            C19978 * C1112) *
               C19987) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C50581 * C1025 -
           (((C22668 + C22667) * C50518 + (C22666 + C22665) * C19987) * C5185 +
            ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C50581 * C50617) *
              C1027 +
          ((((C17420 + C17419) * C19987 + (C17418 + C17417) * C50518) * C5183 +
            ((C18153 + C18154) * C19987 + (C18155 + C18156) * C50518) * C5184 +
            ((C22669 + C22670) * C19987 + (C22671 + C22672) * C50518) * C5185) *
               C50581 * C50617 -
           (C22147 * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C50581 * C1025) *
              C1028 +
          (((C17231 * C19987 + C17232 * C50518) * C5183 +
            ((C17610 + C17609) * C19987 + (C17608 + C17607) * C50518) * C5184 +
            ((C17619 + C17620) * C19987 + (C17621 + C17622) * C50518) * C5185) *
               C50581 * C1025 -
           (((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
              C17172 * C1228) *
                 C50518 +
             (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
              C17172 * C1222) *
                 C19987) *
                C5185 +
            ((C18160 + C18159) * C50518 + (C18158 + C18157) * C19987) * C5184 +
            (C17769 * C50518 + C17770 * C19987) * C5183) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C19987 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50518) *
               C5183 +
           ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
           C22150 * C5185) *
              C50581 * C1096 -
          (((C22668 + C22667) * C50518 + (C22666 + C22665) * C19987) * C5185 +
           ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
           ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C50518 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C19987) *
               C5183) *
              C50581 * C1097 +
          (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C19987 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C50518) *
               C5183 +
           ((C17177 * C1565 + C17172 * C1573 + C17178 * C3263 +
             C50714 * C3266) *
                C19987 +
            (C17177 * C1572 + C17172 * C1577 + C17178 * C3267 +
             C50714 * C3272) *
                C50518) *
               C5184 +
           ((C17177 * C2693 + C17172 * C2696 + C17178 * C3692 +
             C50714 * C3696) *
                C19987 +
            (C17177 * C2697 + C17172 * C2702 + C17178 * C3695 +
             C50714 * C3698) *
                C50518) *
               C5185) *
              C50581 * C1098 -
          (((C17178 * C20777 + C50714 * C20779 + C17177 * C3695 +
             C17172 * C3698) *
                C50518 +
            (C17178 * C20776 + C50714 * C20778 + C17177 * C3692 +
             C17172 * C3696) *
                C19987) *
               C5185 +
           ((C17178 * C4189 + C50714 * C4192 + C17177 * C3267 +
             C17172 * C3272) *
                C50518 +
            (C17178 * C4186 + C50714 * C4190 + C17177 * C3263 +
             C17172 * C3266) *
                C19987) *
               C5184 +
           ((C17178 * C2503 + C50714 * C2508 + C17177 * C1111 +
             C17172 * C1116) *
                C50518 +
            (C17178 * C2499 + C50714 * C2502 + C17177 * C1104 +
             C17172 * C1112) *
                C19987) *
               C5183) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
              C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                 C19987 +
             (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
              C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                 C50518) *
                C50678 * C1676 -
            ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 +
              C19980 * C1577 + C19984 * C895 + C19979 * C904 + C19983 * C476 +
              C19978 * C493) *
                 C50518 +
             (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 +
              C19980 * C1573 + C19984 * C889 + C19979 * C894 + C19983 * C463 +
              C19978 * C477) *
                 C19987) *
                C50678 * C50645) *
               C50807 +
           (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
              C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
              C19981 * C4190) *
                 C19987 +
             (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
              C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
              C19981 * C4192) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 +
              C19980 * C1116 + C19984 * C302 + C19979 * C317 + C19983 * C299 +
              C19978 * C316) *
                 C50518 +
             (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 +
              C19980 * C1112 + C19984 * C287 + C19979 * C301 + C19983 * C286 +
              C19978 * C300) *
                 C19987) *
                C50678 * C1676) *
               C50617) *
              C50799 +
          ((((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
              C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
              C19981 * C3268) *
                 C19987 +
             (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
              C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
              C19981 * C3273) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
              C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                 C50518 +
             (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
              C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                 C19987) *
                C50678 * C1676) *
               C50807 +
           (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
              C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
              C19981 * C2504) *
                 C19987 +
             (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
              C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
              C19981 * C2509) *
                 C50518) *
                C50678 * C1676 -
            ((C19986 * C4187 + C19981 * C4191 + C19985 * C3269 +
              C19980 * C3273 + C19984 * C1570 + C19979 * C1576 + C19983 * C897 +
              C19978 * C905) *
                 C50518 +
             (C19986 * C4185 + C19981 * C4188 + C19985 * C3264 +
              C19980 * C3268 + C19984 * C1564 + C19979 * C1571 + C19983 * C890 +
              C19978 * C896) *
                 C19987) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C17179 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C17174 +
             (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
             C17231 * C17181 + C17232 * C17176) *
                C50678 * C1676 -
            (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
             (C17613 + C17614) * C17180 +
             (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                 C17174 +
             (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                 C17179) *
                C50678 * C50645) *
               C50807 +
           (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                 C17179 +
             (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                 C17174 +
             (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
             (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
                C50678 * C50645 -
            (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
             (C17419 + C17420) * C17180 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C17174 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C17179) *
                C50678 * C1676) *
               C50617) *
              C50799 +
          ((((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
             (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
             (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
                C50678 * C50645 -
            (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
             (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
             (C17216 + C17215) * C17179) *
                C50678 * C1676) *
               C50807 +
           (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
             (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
             (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
                C50678 * C1676 -
            ((C17178 * C1566 + C50714 * C1574 + C17177 * C901 + C17172 * C907) *
                 C17176 +
             (C17178 * C1562 + C50714 * C1567 + C17177 * C892 + C17172 * C900) *
                 C17181 +
             (C18160 + C18159) * C17175 + (C18158 + C18157) * C17180 +
             (C18156 + C18155) * C17174 + (C18154 + C18153) * C17179) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                  C19987 +
              (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                  C50518) *
                 C5183 +
             ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
             C22150 * C5185) *
                C1676 -
            (C24004 * C5185 +
             ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
             ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) *
                 C5183) *
                C50645) *
               C50807 +
           ((((C22661 + C22662) * C19987 + (C22663 + C22664) * C50518) * C5183 +
             ((C22665 + C22666) * C19987 + (C22667 + C22668) * C50518) * C5184 +
             ((C23077 + C23078) * C19987 + (C23079 + C23080) * C50518) *
                 C5185) *
                C50645 -
            (C23083 * C5185 +
             ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
             ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                  C50518 +
              (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                  C19987) *
                 C5183) *
                C1676) *
               C50617) *
              C50799 +
          (((((C17614 + C17613) * C19987 + (C17612 + C17611) * C50518) * C5183 +
             ((C17615 + C17616) * C19987 + (C17617 + C17618) * C50518) * C5184 +
             ((C22139 + C22140) * C19987 + (C22141 + C22142) * C50518) *
                 C5185) *
                C50645 -
            (C22147 * C5185 +
             ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
             ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) *
                 C5183) *
                C1676) *
               C50807 +
           ((((C17420 + C17419) * C19987 + (C17418 + C17417) * C50518) * C5183 +
             ((C18153 + C18154) * C19987 + (C18155 + C18156) * C50518) * C5184 +
             ((C22669 + C22670) * C19987 + (C22671 + C22672) * C50518) *
                 C5185) *
                C1676 -
            (((C17178 * C4587 + C50714 * C4595 + C17177 * C4588 +
               C17172 * C4596) *
                  C50518 +
              (C17178 * C4583 + C50714 * C4589 + C17177 * C4584 +
               C17172 * C4590) *
                  C19987) *
                 C5185 +
             ((C22672 + C22671) * C50518 + (C22670 + C22669) * C19987) * C5184 +
             ((C18156 + C18155) * C50518 + (C18154 + C18153) * C19987) *
                 C5183) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50854 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50855 +
           ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
             C19985 * C2693 + C19980 * C2696 + C19986 * C3692 +
             C19981 * C3696) *
                C19987 +
            (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
             C19985 * C2697 + C19980 * C2702 + C19986 * C3695 +
             C19981 * C3698) *
                C50518) *
               C50678 * C2092) *
              C50807 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C50855 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50854 -
           ((C19986 * C20777 + C19981 * C20779 + C19985 * C3695 +
             C19980 * C3698 + C19984 * C2697 + C19979 * C2702 + C19983 * C1225 +
             C19978 * C1230) *
                C50518 +
            (C19986 * C20776 + C19981 * C20778 + C19985 * C3692 +
             C19980 * C3696 + C19984 * C2693 + C19979 * C2696 + C19983 * C1218 +
             C19978 * C1226) *
                C19987) *
               C50678 * C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50854 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50855 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C17179 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C17174 +
            (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
            (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
               C50678 * C2092) *
              C50807 +
          (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                C17179 +
            (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                C17174 +
            (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
            (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
               C50678 * C50855 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50854 -
           ((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
             C17172 * C1228) *
                C17176 +
            (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
             C17172 * C1222) *
                C17181 +
            (C17178 * C2699 + C50714 * C2703 + C17177 * C1223 +
             C17172 * C1229) *
                C17175 +
            (C17178 * C2694 + C50714 * C2698 + C17177 * C1217 +
             C17172 * C1224) *
                C17180 +
            (C17178 * C2697 + C50714 * C2702 + C17177 * C1225 +
             C17172 * C1230) *
                C17174 +
            (C17178 * C2693 + C50714 * C2696 + C17177 * C1218 +
             C17172 * C1226) *
                C17179) *
               C50678 * C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C50854 -
           (C24004 * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C50855 +
           (C22150 * C5183 +
            ((C22138 + C22137) * C19987 + (C22136 + C22135) * C50518) * C5184 +
            ((C24000 + C24001) * C19987 + (C24002 + C24003) * C50518) * C5185) *
               C2092) *
              C50807 +
          ((((C22661 + C22662) * C19987 + (C22663 + C22664) * C50518) * C5183 +
            ((C22665 + C22666) * C19987 + (C22667 + C22668) * C50518) * C5184 +
            ((C23077 + C23078) * C19987 + (C23079 + C23080) * C50518) * C5185) *
               C50855 -
           (C23083 * C5185 +
            ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C50854 -
           (((C17178 * C23063 + C50714 * C23065 + C17177 * C6506 +
              C17172 * C6509) *
                 C50518 +
             (C17178 * C23062 + C50714 * C23064 + C17177 * C6503 +
              C17172 * C6507) *
                 C19987) *
                C5185 +
            ((C23080 + C23079) * C50518 + (C23078 + C23077) * C19987) * C5184 +
            C23083 * C5183) *
               C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17177 * C122 + C17172 * C129 + C17178 * C286 +
                 C50714 * C300) *
                    C17179 +
                (C17177 * C130 + C17172 * C143 + C17178 * C299 +
                 C50714 * C316) *
                    C17174 +
                (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
                C17231 * C17181 + C17232 * C17176) *
                   C50678 * C1676 -
               (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
                (C17613 + C17614) * C17180 +
                (C17178 * C895 + C50714 * C904 + C17177 * C476 +
                 C17172 * C493) *
                    C17174 +
                (C17178 * C889 + C50714 * C894 + C17177 * C463 +
                 C17172 * C477) *
                    C17179) *
                   C50678 * C50645) *
                  C50565 * C1027 +
              (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
                (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
                (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
                   C50678 * C50645 -
               (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
                (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
                (C17216 + C17215) * C17179) *
                   C50678 * C1676) *
                  C50565 * C1028 +
              ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
                (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
                (C17229 + C17230) * C17176) *
                   C50678 * C1676 -
               ((C17178 * C902 + C50714 * C908 + C17177 * C487 +
                 C17172 * C498) *
                    C17176 +
                (C17178 * C893 + C50714 * C903 + C17177 * C468 +
                 C17172 * C486) *
                    C17181 +
                (C17942 + C17941) * C17175 + (C17940 + C17939) * C17180 +
                C17929 * C17174 + C17930 * C17179) *
                   C50678 * C50645) *
                  C50565 * C1029) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17177 * C122 + C17172 * C129 + C17178 * C286 +
                 C50714 * C300) *
                    C17179 +
                (C17177 * C130 + C17172 * C143 + C17178 * C299 +
                 C50714 * C316) *
                    C17174 +
                (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
                C17231 * C17181 + C17232 * C17176) *
                   C50678 * C1676 -
               (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
                (C17613 + C17614) * C17180 +
                (C17178 * C895 + C50714 * C904 + C17177 * C476 +
                 C17172 * C493) *
                    C17174 +
                (C17178 * C889 + C50714 * C894 + C17177 * C463 +
                 C17172 * C477) *
                    C17179) *
                   C50678 * C50645) *
                  C278 +
              (((C17177 * C889 + C17172 * C894 + C17178 * C1565 +
                 C50714 * C1573) *
                    C17179 +
                (C17177 * C895 + C17172 * C904 + C17178 * C1572 +
                 C50714 * C1577) *
                    C17174 +
                (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
                (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
                   C50678 * C50645 -
               (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
                (C17419 + C17420) * C17180 +
                (C17178 * C302 + C50714 * C317 + C17177 * C299 +
                 C17172 * C316) *
                    C17174 +
                (C17178 * C287 + C50714 * C301 + C17177 * C286 +
                 C17172 * C300) *
                    C17179) *
                   C50678 * C1676) *
                  C279 +
              (((C17177 * C287 + C17172 * C301 + C17178 * C1104 +
                 C50714 * C1112) *
                    C17179 +
                (C17177 * C302 + C17172 * C317 + C17178 * C1111 +
                 C50714 * C1116) *
                    C17174 +
                (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
                (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
                   C50678 * C1676 -
               ((C17178 * C3270 + C50714 * C3274 + C17177 * C1568 +
                 C17172 * C1575) *
                    C17176 +
                (C17178 * C3265 + C50714 * C3271 + C17177 * C1563 +
                 C17172 * C1569) *
                    C17181 +
                (C17178 * C3269 + C50714 * C3273 + C17177 * C1570 +
                 C17172 * C1576) *
                    C17175 +
                (C17178 * C3264 + C50714 * C3268 + C17177 * C1564 +
                 C17172 * C1571) *
                    C17180 +
                (C17178 * C3267 + C50714 * C3272 + C17177 * C1572 +
                 C17172 * C1577) *
                    C17174 +
                (C17178 * C3263 + C50714 * C3266 + C17177 * C1565 +
                 C17172 * C1573) *
                    C17179) *
                   C50678 * C50645) *
                  C280) *
             C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
               C17179 +
           (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
               C17174 +
           (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
           C17231 * C17181 + C17232 * C17176) *
              C50678 * C1842 -
          (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
           (C17613 + C17614) * C17180 +
           (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
               C17174 +
           (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
               C17179) *
              C50678 * C1843 +
          ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
               C17179 +
           (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
               C17174 +
           (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
           (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
              C50678 * C1844 -
          ((C17178 * C6075 + C50714 * C6077 + C17177 * C1852 + C17172 * C1859) *
               C17176 +
           (C17178 * C6074 + C50714 * C6076 + C17177 * C1847 + C17172 * C1853) *
               C17181 +
           (C17178 * C4588 + C50714 * C4596 + C17177 * C1854 + C17172 * C1860) *
               C17175 +
           (C17178 * C4584 + C50714 * C4590 + C17177 * C1848 + C17172 * C1855) *
               C17180 +
           (C17178 * C4592 + C50714 * C4598 + C17177 * C1856 + C17172 * C1861) *
               C17174 +
           (C17178 * C4586 + C50714 * C4594 + C17177 * C1849 + C17172 * C1857) *
               C17179) *
              C50678 * C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C1676) *
              C50565 * C1028 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3270 + C19981 * C3274 + C19985 * C1568 + C19980 * C1575 +
             C19984 * C899 + C19979 * C906 + C19983 * C472 + C19978 * C491) *
                C50518 +
            (C19986 * C3265 + C19981 * C3271 + C19985 * C1563 + C19980 * C1569 +
             C19984 * C891 + C19979 * C898 + C19983 * C461 + C19978 * C473) *
                C19987) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C278 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C1676) *
              C279 +
          (((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C21107 + C19981 * C21109 + C19985 * C4189 +
             C19980 * C4192 + C19984 * C3267 + C19979 * C3272 + C19983 * C1572 +
             C19978 * C1577) *
                C50518 +
            (C19986 * C21106 + C19981 * C21108 + C19985 * C4186 +
             C19980 * C4190 + C19984 * C3263 + C19979 * C3266 + C19983 * C1565 +
             C19978 * C1573) *
                C19987) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C1842 -
          ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
            C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
               C50518 +
           (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
            C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
               C19987) *
              C50678 * C1843 +
          ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
            C19985 * C2693 + C19980 * C2696 + C19986 * C3692 + C19981 * C3696) *
               C19987 +
           (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
            C19985 * C2697 + C19980 * C2702 + C19986 * C3695 + C19981 * C3698) *
               C50518) *
              C50678 * C1844 -
          ((C19986 * C21373 + C19981 * C21375 + C19985 * C4591 +
            C19980 * C4597 + C19984 * C4592 + C19979 * C4598 + C19983 * C1856 +
            C19978 * C1861) *
               C50518 +
           (C19986 * C21372 + C19981 * C21374 + C19985 * C4585 +
            C19980 * C4593 + C19984 * C4586 + C19979 * C4594 + C19983 * C1849 +
            C19978 * C1857) *
               C19987) *
              C50678 * C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C1676 -
           (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C50645) *
              C50565 * C1027 +
          ((((C17614 + C17613) * C19987 + (C17612 + C17611) * C50518) * C5183 +
            ((C17615 + C17616) * C19987 + (C17617 + C17618) * C50518) * C5184 +
            ((C22139 + C22140) * C19987 + (C22141 + C22142) * C50518) * C5185) *
               C50645 -
           (C22147 * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C1676) *
              C50565 * C1028 +
          (((C17231 * C19987 + C17232 * C50518) * C5183 +
            ((C17610 + C17609) * C19987 + (C17608 + C17607) * C50518) * C5184 +
            ((C17619 + C17620) * C19987 + (C17621 + C17622) * C50518) * C5185) *
               C1676 -
           (((C17178 * C6075 + C50714 * C6077 + C17177 * C1852 +
              C17172 * C1859) *
                 C50518 +
             (C17178 * C6074 + C50714 * C6076 + C17177 * C1847 +
              C17172 * C1853) *
                 C19987) *
                C5185 +
            ((C17622 + C17621) * C50518 + (C17620 + C17619) * C19987) * C5184 +
            (C17929 * C50518 + C17930 * C19987) * C5183) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C1676 -
           (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C50645) *
              C278 +
          ((((C22661 + C22662) * C19987 + (C22663 + C22664) * C50518) * C5183 +
            ((C22665 + C22666) * C19987 + (C22667 + C22668) * C50518) * C5184 +
            ((C23077 + C23078) * C19987 + (C23079 + C23080) * C50518) * C5185) *
               C50645 -
           (C23083 * C5185 +
            ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C1676) *
              C279 +
          ((((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C19987 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50518) *
                C5183 +
            ((C23586 + C23587) * C19987 + (C23588 + C23589) * C50518) * C5184 +
            ((C23590 + C23591) * C19987 + (C23592 + C23593) * C50518) * C5185) *
               C1676 -
           (((C17178 * C21373 + C50714 * C21375 + C17177 * C4591 +
              C17172 * C4597) *
                 C50518 +
             (C17178 * C21372 + C50714 * C21374 + C17177 * C4585 +
              C17172 * C4593) *
                 C19987) *
                C5185 +
            ((C23593 + C23592) * C50518 + (C23591 + C23590) * C19987) * C5184 +
            ((C23589 + C23588) * C50518 + (C23587 + C23586) * C19987) * C5183) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C19987 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50518) *
               C5183 +
           ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
           C22150 * C5185) *
              C1842 -
          (C24004 * C5185 +
           ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
           ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
              C1843 +
          (C22150 * C5183 +
           ((C22138 + C22137) * C19987 + (C22136 + C22135) * C50518) * C5184 +
           ((C24000 + C24001) * C19987 + (C24002 + C24003) * C50518) * C5185) *
              C1844 -
          (((C17178 * C23984 + C50714 * C23986 + C17177 * C7423 +
             C17172 * C7426) *
                C50518 +
            (C17178 * C23983 + C50714 * C23985 + C17177 * C7420 +
             C17172 * C7424) *
                C19987) *
               C5185 +
           ((C24003 + C24002) * C50518 + (C24001 + C24000) * C19987) * C5184 +
           C24004 * C5183) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50854 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50855 +
           ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
             C19985 * C2693 + C19980 * C2696 + C19986 * C3692 +
             C19981 * C3696) *
                C19987 +
            (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
             C19985 * C2697 + C19980 * C2702 + C19986 * C3695 +
             C19981 * C3698) *
                C50518) *
               C50678 * C2092) *
              C50565 * C50799 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C50855 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50854 -
           ((C19986 * C3693 + C19981 * C3697 + C19985 * C2699 + C19980 * C2703 +
             C19984 * C1223 + C19979 * C1229 + C19983 * C481 + C19978 * C495) *
                C50518 +
            (C19986 * C3691 + C19981 * C3694 + C19985 * C2694 + C19980 * C2698 +
             C19984 * C1217 + C19979 * C1224 + C19983 * C465 + C19978 * C480) *
                C19987) *
               C50678 * C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50854 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50855 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C17179 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C17174 +
            (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
            (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
               C50678 * C2092) *
              C50565 * C50799 +
          (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
            (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
            (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
               C50678 * C50855 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50854 -
           ((C17178 * C1219 + C50714 * C1227 + C17177 * C485 + C17172 * C497) *
                C17176 +
            (C17178 * C1215 + C50714 * C1220 + C17177 * C467 + C17172 * C484) *
                C17181 +
            (C17622 + C17621) * C17175 + (C17620 + C17619) * C17180 +
            (C17618 + C17617) * C17174 + (C17616 + C17615) * C17179) *
               C50678 * C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C50854 -
           (C24004 * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C50855 +
           (C22150 * C5183 +
            ((C22138 + C22137) * C19987 + (C22136 + C22135) * C50518) * C5184 +
            ((C24000 + C24001) * C19987 + (C24002 + C24003) * C50518) * C5185) *
               C2092) *
              C50565 * C50799 +
          ((((C17614 + C17613) * C19987 + (C17612 + C17611) * C50518) * C5183 +
            ((C17615 + C17616) * C19987 + (C17617 + C17618) * C50518) * C5184 +
            ((C22139 + C22140) * C19987 + (C22141 + C22142) * C50518) * C5185) *
               C50855 -
           (C22147 * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C50854 -
           (((C17178 * C6504 + C50714 * C6508 + C17177 * C5502 +
              C17172 * C5506) *
                 C50518 +
             (C17178 * C6502 + C50714 * C6505 + C17177 * C5497 +
              C17172 * C5501) *
                 C19987) *
                C5185 +
            ((C22142 + C22141) * C50518 + (C22140 + C22139) * C19987) * C5184 +
            C22147 * C5183) *
               C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C1676 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C278 +
          (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                C17179 +
            (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                C17174 +
            (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
            (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
               C50678 * C50645 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C1676) *
              C279 +
          (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C1676 -
           ((C17178 * C3270 + C50714 * C3274 + C17177 * C1568 +
             C17172 * C1575) *
                C17176 +
            (C17178 * C3265 + C50714 * C3271 + C17177 * C1563 +
             C17172 * C1569) *
                C17181 +
            (C17178 * C3269 + C50714 * C3273 + C17177 * C1570 +
             C17172 * C1576) *
                C17175 +
            (C17178 * C3264 + C50714 * C3268 + C17177 * C1564 +
             C17172 * C1571) *
                C17180 +
            (C17178 * C3267 + C50714 * C3272 + C17177 * C1572 +
             C17172 * C1577) *
                C17174 +
            (C17178 * C3263 + C50714 * C3266 + C17177 * C1565 +
             C17172 * C1573) *
                C17179) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C1676 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
            (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
            (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
               C50678 * C50645 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C1676) *
              C50565 * C1028 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C1676 -
           ((C17178 * C902 + C50714 * C908 + C17177 * C487 + C17172 * C498) *
                C17176 +
            (C17178 * C893 + C50714 * C903 + C17177 * C468 + C17172 * C486) *
                C17181 +
            (C17942 + C17941) * C17175 + (C17940 + C17939) * C17180 +
            C17929 * C17174 + C17930 * C17179) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C1676) *
              C50565 * C1028 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3270 + C19981 * C3274 + C19985 * C1568 + C19980 * C1575 +
             C19984 * C899 + C19979 * C906 + C19983 * C472 + C19978 * C491) *
                C50518 +
            (C19986 * C3265 + C19981 * C3271 + C19985 * C1563 + C19980 * C1569 +
             C19984 * C891 + C19979 * C898 + C19983 * C461 + C19978 * C473) *
                C19987) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C278 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C1676) *
              C279 +
          (((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C21107 + C19981 * C21109 + C19985 * C4189 +
             C19980 * C4192 + C19984 * C3267 + C19979 * C3272 + C19983 * C1572 +
             C19978 * C1577) *
                C50518 +
            (C19986 * C21106 + C19981 * C21108 + C19985 * C4186 +
             C19980 * C4190 + C19984 * C3263 + C19979 * C3266 + C19983 * C1565 +
             C19978 * C1573) *
                C19987) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C1676 -
           (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C50645) *
              C50565 * C1027 +
          ((((C17614 + C17613) * C19987 + (C17612 + C17611) * C50518) * C5183 +
            ((C17615 + C17616) * C19987 + (C17617 + C17618) * C50518) * C5184 +
            ((C22139 + C22140) * C19987 + (C22141 + C22142) * C50518) * C5185) *
               C50645 -
           (C22147 * C5185 +
            ((C17611 + C17612) * C50518 + (C17613 + C17614) * C19987) * C5184 +
            ((C17218 + C17217) * C50518 + (C17216 + C17215) * C19987) * C5183) *
               C1676) *
              C50565 * C1028 +
          (((C17231 * C19987 + C17232 * C50518) * C5183 +
            ((C17610 + C17609) * C19987 + (C17608 + C17607) * C50518) * C5184 +
            ((C17619 + C17620) * C19987 + (C17621 + C17622) * C50518) * C5185) *
               C1676 -
           (((C17178 * C6075 + C50714 * C6077 + C17177 * C1852 +
              C17172 * C1859) *
                 C50518 +
             (C17178 * C6074 + C50714 * C6076 + C17177 * C1847 +
              C17172 * C1853) *
                 C19987) *
                C5185 +
            ((C17622 + C17621) * C50518 + (C17620 + C17619) * C19987) * C5184 +
            (C17929 * C50518 + C17930 * C19987) * C5183) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C19987 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50518) *
                C5183 +
            ((C22127 + C22128) * C19987 + (C22129 + C22130) * C50518) * C5184 +
            C22150 * C5185) *
               C1676 -
           (((C22135 + C22136) * C50518 + (C22137 + C22138) * C19987) * C5185 +
            ((C22134 + C22133) * C50518 + (C22132 + C22131) * C19987) * C5184 +
            ((C22130 + C22129) * C50518 + (C22128 + C22127) * C19987) * C5183) *
               C50645) *
              C278 +
          ((((C22661 + C22662) * C19987 + (C22663 + C22664) * C50518) * C5183 +
            ((C22665 + C22666) * C19987 + (C22667 + C22668) * C50518) * C5184 +
            ((C23077 + C23078) * C19987 + (C23079 + C23080) * C50518) * C5185) *
               C50645 -
           (C23083 * C5185 +
            ((C22664 + C22663) * C50518 + (C22662 + C22661) * C19987) * C5184 +
            ((C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50518 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C19987) *
                C5183) *
               C1676) *
              C279 +
          ((((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C19987 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50518) *
                C5183 +
            ((C23586 + C23587) * C19987 + (C23588 + C23589) * C50518) * C5184 +
            ((C23590 + C23591) * C19987 + (C23592 + C23593) * C50518) * C5185) *
               C1676 -
           (((C17178 * C21373 + C50714 * C21375 + C17177 * C4591 +
              C17172 * C4597) *
                 C50518 +
             (C17178 * C21372 + C50714 * C21374 + C17177 * C4585 +
              C17172 * C4593) *
                 C19987) *
                C5185 +
            ((C23593 + C23592) * C50518 + (C23591 + C23590) * C19987) * C5184 +
            ((C23589 + C23588) * C50518 + (C23587 + C23586) * C19987) * C5183) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C50581 * C50807 -
           (((C18156 + C18155) * C50523 + (C18154 + C18153) * C49742 +
             (C22664 + C22663) * C50792 + (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C50581 * C50617) *
              C50850 +
          ((((C17420 + C17419) * C49749 + (C17418 + C17417) * C50792 +
             (C17416 + C17415) * C49742 + (C17414 + C17413) * C50523) *
                C50821 +
            ((C18153 + C18154) * C49749 + (C18155 + C18156) * C50792 +
             (C18157 + C18158) * C49742 + (C18159 + C18160) * C50523) *
                C50742) *
               C50581 * C50617 -
           ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
             C27842 * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C50581 * C50807) *
              C50851 +
          (((C17231 * C49749 + C17232 * C50792 + (C17226 + C17225) * C49742 +
             (C17224 + C17223) * C50523) *
                C50821 +
            ((C17610 + C17609) * C49749 + (C17608 + C17607) * C50792 +
             (C17939 + C17940) * C49742 + (C17941 + C17942) * C50523) *
                C50742) *
               C50581 * C50807 -
           (((C17178 * C1566 + C50714 * C1574 + C17177 * C901 + C17172 * C907) *
                 C50523 +
             (C17178 * C1562 + C50714 * C1567 + C17177 * C892 + C17172 * C900) *
                 C49742 +
             (C18160 + C18159) * C50792 + (C18158 + C18157) * C49749) *
                C50742 +
            ((C17782 + C17781) * C50523 + (C17780 + C17779) * C49742 +
             C17769 * C50792 + C17770 * C49749) *
                C50821) *
               C50581 * C50617) *
              C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                  C49749 +
              (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                  C50792 +
              (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                 C50821 +
             ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
              C27839 * C49742 + C27840 * C50523) *
                 C50742) *
                C50808 -
            ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
              (C22132 + C22131) * C49749) *
                 C50742 +
             (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
              (C22128 + C22127) * C49749) *
                 C50821) *
                C50645) *
               C50807 +
           ((((C22661 + C22662) * C49749 + (C22663 + C22664) * C50792 +
              C28493 * C49742 + C28494 * C50523) *
                 C50821 +
             ((C22665 + C22666) * C49749 + (C22667 + C22668) * C50792 +
              (C22669 + C22670) * C49742 + (C22671 + C22672) * C50523) *
                 C50742) *
                C50645 -
            ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
              (C22662 + C22661) * C49749) *
                 C50742 +
             ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
              (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                  C50792 +
              (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                  C49749) *
                 C50821) *
                C50808) *
               C50617) *
              C281 +
          ((((C27839 * C49749 + C27840 * C50792 + C28233 * C49742 +
              C28234 * C50523) *
                 C50821 +
             (C27843 * C49749 + C27844 * C50792 + (C17619 + C17620) * C49742 +
              (C17621 + C17622) * C50523) *
                 C50742) *
                C50645 -
            ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
              C27842 * C49749) *
                 C50742 +
             ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
              (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                 C50821) *
                C50808) *
               C50807 +
           ((((C17420 + C17419) * C49749 + (C17418 + C17417) * C50792 +
              (C17416 + C17415) * C49742 + (C17414 + C17413) * C50523) *
                 C50821 +
             (C28493 * C49749 + C28494 * C50792 + (C18157 + C18158) * C49742 +
              (C18159 + C18160) * C50523) *
                 C50742) *
                C50808 -
            (((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
               C17172 * C1228) *
                  C50523 +
              (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
               C17172 * C1222) *
                  C49742 +
              (C22672 + C22671) * C50792 + (C22670 + C22669) * C49749) *
                 C50742 +
             ((C18160 + C18159) * C50523 + (C18158 + C18157) * C49742 +
              C28495 * C50792 + C28496 * C49749) *
                 C50821) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             (C17614 + C17613) * C49742 + (C17612 + C17611) * C50523) *
                C50742) *
               C50581 * C278 -
           (((C18156 + C18155) * C50523 + (C18154 + C18153) * C49742 +
             (C22664 + C22663) * C50792 + (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C50581 * C279 +
           (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C49749 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50792 +
             (C17421 + C17422) * C49742 + (C17423 + C17424) * C50523) *
                C50821 +
            ((C23586 + C23587) * C49749 + (C23588 + C23589) * C50792 +
             (C27641 + C27642) * C49742 + (C27643 + C27644) * C50523) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C17420 + C17419) * C49749 + (C17418 + C17417) * C50792 +
             (C17416 + C17415) * C49742 + (C17414 + C17413) * C50523) *
                C50821 +
            ((C18153 + C18154) * C49749 + (C18155 + C18156) * C50792 +
             (C18157 + C18158) * C49742 + (C18159 + C18160) * C50523) *
                C50742) *
               C50581 * C279 -
           ((C17929 * C50523 + C17930 * C49742 + (C17611 + C17612) * C50792 +
             (C17613 + C17614) * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C50581 * C278 -
           (((C17178 * C3270 + C50714 * C3274 + C17177 * C1568 +
              C17172 * C1575) *
                 C50523 +
             (C17178 * C3265 + C50714 * C3271 + C17177 * C1563 +
              C17172 * C1569) *
                 C49742 +
             (C27644 + C27643) * C50792 + (C27642 + C27641) * C49749) *
                C50742 +
            ((C17428 + C17427) * C50523 + (C17426 + C17425) * C49742 +
             (C17424 + C17423) * C50792 + (C17422 + C17421) * C49749) *
                C50821) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C49749 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50792 +
            (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
               C50821 +
           ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
            (C17614 + C17613) * C49742 + (C17612 + C17611) * C50523) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C17929 * C50523 + C17930 * C49742 + (C17611 + C17612) * C50792 +
            (C17613 + C17614) * C49749) *
               C50742 +
           ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
            (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
               C50821) *
              C50581 * C50565 * C114 +
          ((C17231 * C49749 + C17232 * C50792 + (C17226 + C17225) * C49742 +
            (C17224 + C17223) * C50523) *
               C50821 +
           ((C17610 + C17609) * C49749 + (C17608 + C17607) * C50792 +
            (C17939 + C17940) * C49742 + (C17941 + C17942) * C50523) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C17178 * C902 + C50714 * C908 + C17177 * C487 + C17172 * C498) *
                C50523 +
            (C17178 * C893 + C50714 * C903 + C17177 * C468 + C17172 * C486) *
                C49742 +
            (C17942 + C17941) * C50792 + (C17940 + C17939) * C49749) *
               C50742 +
           ((C17230 + C17229) * C50523 + (C17228 + C17227) * C49742 +
            C17233 * C50792 + C17234 * C49749) *
               C50821) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C457 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C458 +
           ((C22145 * C49749 + C22146 * C50792 + C27843 * C49742 +
             C27844 * C50523) *
                C50821 +
            ((C22138 + C22137) * C49749 + (C22136 + C22135) * C50792 +
             (C22139 + C22140) * C49742 + (C22141 + C22142) * C50523) *
                C50742) *
               C459) *
              C50565 * C281 +
          (((C27839 * C49749 + C27840 * C50792 + (C17610 + C17609) * C49742 +
             (C17608 + C17607) * C50523) *
                C50821 +
            (C27843 * C49749 + C27844 * C50792 + (C17619 + C17620) * C49742 +
             (C17621 + C17622) * C50523) *
                C50742) *
               C458 -
           ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
             C27842 * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C457 -
           (((C17178 * C6075 + C50714 * C6077 + C17177 * C1852 +
              C17172 * C1859) *
                 C50523 +
             (C17178 * C6074 + C50714 * C6076 + C17177 * C1847 +
              C17172 * C1853) *
                 C49742 +
             (C22142 + C22141) * C50792 + (C22140 + C22139) * C49749) *
                C50742 +
            ((C17622 + C17621) * C50523 + (C17620 + C17619) * C49742 +
             C22125 * C50792 + C22126 * C49749) *
                C50821) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C50808 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C50645) *
              C50565 * C50850 +
          (((C27839 * C49749 + C27840 * C50792 + C28233 * C49742 +
             C28234 * C50523) *
                C50821 +
            (C27843 * C49749 + C27844 * C50792 + (C17619 + C17620) * C49742 +
             (C17621 + C17622) * C50523) *
                C50742) *
               C50645 -
           ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
             C27842 * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C50808) *
              C50565 * C50851 +
          (((C17231 * C49749 + C17232 * C50792 + (C17226 + C17225) * C49742 +
             (C17224 + C17223) * C50523) *
                C50821 +
            (C28233 * C49749 + C28234 * C50792 + (C17939 + C17940) * C49742 +
             (C17941 + C17942) * C50523) *
                C50742) *
               C50808 -
           (((C17178 * C1219 + C50714 * C1227 + C17177 * C485 + C17172 * C497) *
                 C50523 +
             (C17178 * C1215 + C50714 * C1220 + C17177 * C467 + C17172 * C484) *
                 C49742 +
             (C17622 + C17621) * C50792 + (C17620 + C17619) * C49749) *
                C50742 +
            ((C17942 + C17941) * C50523 + (C17940 + C17939) * C49742 +
             C17929 * C50792 + C17930 * C49749) *
                C50821) *
               C50645) *
              C50565 * C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C49749 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50792 +
            (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
               C50821 +
           ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
            (C17614 + C17613) * C49742 + (C17612 + C17611) * C50523) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C17929 * C50523 + C17930 * C49742 + (C17611 + C17612) * C50792 +
            (C17613 + C17614) * C49749) *
               C50742 +
           ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
            (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
               C50821) *
              C50581 * C50565 * C114 +
          ((C17231 * C49749 + C17232 * C50792 + (C17226 + C17225) * C49742 +
            (C17224 + C17223) * C50523) *
               C50821 +
           ((C17610 + C17609) * C49749 + (C17608 + C17607) * C50792 +
            (C17939 + C17940) * C49742 + (C17941 + C17942) * C50523) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C17178 * C902 + C50714 * C908 + C17177 * C487 + C17172 * C498) *
                C50523 +
            (C17178 * C893 + C50714 * C903 + C17177 * C468 + C17172 * C486) *
                C49742 +
            (C17942 + C17941) * C50792 + (C17940 + C17939) * C49749) *
               C50742 +
           ((C17230 + C17229) * C50523 + (C17228 + C17227) * C49742 +
            C17233 * C50792 + C17234 * C49749) *
               C50821) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             (C17614 + C17613) * C49742 + (C17612 + C17611) * C50523) *
                C50742) *
               C50581 * C278 -
           (((C18156 + C18155) * C50523 + (C18154 + C18153) * C49742 +
             (C22664 + C22663) * C50792 + (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C50581 * C279 +
           (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C49749 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50792 +
             (C17421 + C17422) * C49742 + (C17423 + C17424) * C50523) *
                C50821 +
            ((C23586 + C23587) * C49749 + (C23588 + C23589) * C50792 +
             (C27641 + C27642) * C49742 + (C27643 + C27644) * C50523) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C17420 + C17419) * C49749 + (C17418 + C17417) * C50792 +
             (C17416 + C17415) * C49742 + (C17414 + C17413) * C50523) *
                C50821 +
            ((C18153 + C18154) * C49749 + (C18155 + C18156) * C50792 +
             (C18157 + C18158) * C49742 + (C18159 + C18160) * C50523) *
                C50742) *
               C50581 * C279 -
           ((C17929 * C50523 + C17930 * C49742 + (C17611 + C17612) * C50792 +
             (C17613 + C17614) * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C50581 * C278 -
           (((C17178 * C3270 + C50714 * C3274 + C17177 * C1568 +
              C17172 * C1575) *
                 C50523 +
             (C17178 * C3265 + C50714 * C3271 + C17177 * C1563 +
              C17172 * C1569) *
                 C49742 +
             (C27644 + C27643) * C50792 + (C27642 + C27641) * C49749) *
                C50742 +
            ((C17428 + C17427) * C50523 + (C17426 + C17425) * C49742 +
             (C17424 + C17423) * C50792 + (C17422 + C17421) * C49749) *
                C50821) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C50581 * C50852 -
           ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
             (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C50581 * C50853 +
           (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C49749 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50792 +
             (C17421 + C17422) * C49742 + (C17423 + C17424) * C50523) *
                C50821 +
            ((C23586 + C23587) * C49749 + (C23588 + C23589) * C50792 +
             (C27641 + C27642) * C49742 + (C27643 + C27644) * C50523) *
                C50742) *
               C50581 * C1331) *
              C50799 +
          ((((C17420 + C17419) * C49749 + (C17418 + C17417) * C50792 +
             (C17416 + C17415) * C49742 + (C17414 + C17413) * C50523) *
                C50821 +
            (C28493 * C49749 + C28494 * C50792 + (C18157 + C18158) * C49742 +
             (C18159 + C18160) * C50523) *
                C50742) *
               C50581 * C50853 -
           ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
             C27842 * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C50581 * C50852 -
           (((C17178 * C3270 + C50714 * C3274 + C17177 * C1568 +
              C17172 * C1575) *
                 C50523 +
             (C17178 * C3265 + C50714 * C3271 + C17177 * C1563 +
              C17172 * C1569) *
                 C49742 +
             (C27644 + C27643) * C50792 + (C27642 + C27641) * C49749) *
                C50742 +
            ((C17428 + C17427) * C50523 + (C17426 + C17425) * C49742 +
             (C17424 + C17423) * C50792 + (C17422 + C17421) * C49749) *
                C50821) *
               C50581 * C1331) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C50808 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C50645) *
              C50852 +
          ((((C22661 + C22662) * C49749 + (C22663 + C22664) * C50792 +
             C28493 * C49742 + C28494 * C50523) *
                C50821 +
            ((C22665 + C22666) * C49749 + (C22667 + C22668) * C50792 +
             (C22669 + C22670) * C49742 + (C22671 + C22672) * C50523) *
                C50742) *
               C50645 -
           ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
             (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C50808) *
              C50853 +
          ((((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C49749 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50792 +
             (C17421 + C17422) * C49742 + (C17423 + C17424) * C50523) *
                C50821 +
            ((C23586 + C23587) * C49749 + (C23588 + C23589) * C50792 +
             (C27641 + C27642) * C49742 + (C27643 + C27644) * C50523) *
                C50742) *
               C50808 -
           (((C17178 * C3693 + C50714 * C3697 + C17177 * C2699 +
              C17172 * C2703) *
                 C50523 +
             (C17178 * C3691 + C50714 * C3694 + C17177 * C2694 +
              C17172 * C2698) *
                 C49742 +
             (C23593 + C23592) * C50792 + (C23591 + C23590) * C49749) *
                C50742 +
            ((C27644 + C27643) * C50523 + (C27642 + C27641) * C49742 +
             (C23589 + C23588) * C50792 + (C23587 + C23586) * C49749) *
                C50821) *
               C50645) *
              C1331) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C49749 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50792 +
            (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
               C50821 +
           ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
            C27839 * C49742 + C27840 * C50523) *
               C50742) *
              C50581 * C1096 -
          ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
            (C22662 + C22661) * C49749) *
               C50742 +
           ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C50792 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C49749) *
               C50821) *
              C50581 * C1097 +
          (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C49749 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C50792 +
            (C17421 + C17422) * C49742 + (C17423 + C17424) * C50523) *
               C50821 +
           ((C23586 + C23587) * C49749 + (C23588 + C23589) * C50792 +
            (C27641 + C27642) * C49742 + (C27643 + C27644) * C50523) *
               C50742) *
              C50581 * C1098 -
          (((C17178 * C4187 + C50714 * C4191 + C17177 * C3269 +
             C17172 * C3273) *
                C50523 +
            (C17178 * C4185 + C50714 * C4188 + C17177 * C3264 +
             C17172 * C3268) *
                C49742 +
            (C17178 * C4189 + C50714 * C4192 + C17177 * C3267 +
             C17172 * C3272) *
                C50792 +
            (C17178 * C4186 + C50714 * C4190 + C17177 * C3263 +
             C17172 * C3266) *
                C49749) *
               C50742 +
           ((C17178 * C2505 + C50714 * C2509 + C17177 * C1109 +
             C17172 * C1115) *
                C50523 +
            (C17178 * C2500 + C50714 * C2504 + C17177 * C1103 +
             C17172 * C1110) *
                C49742 +
            (C17178 * C2503 + C50714 * C2508 + C17177 * C1111 +
             C17172 * C1116) *
                C50792 +
            (C17178 * C2499 + C50714 * C2502 + C17177 * C1104 +
             C17172 * C1112) *
                C49749) *
               C50821) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C50581 * C1025 -
           ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
             (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C50581 * C50617) *
              C1027 +
          ((((C17420 + C17419) * C49749 + (C17418 + C17417) * C50792 +
             (C17416 + C17415) * C49742 + (C17414 + C17413) * C50523) *
                C50821 +
            (C28493 * C49749 + C28494 * C50792 + (C18157 + C18158) * C49742 +
             (C18159 + C18160) * C50523) *
                C50742) *
               C50581 * C50617 -
           ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
             C27842 * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C50581 * C1025) *
              C1028 +
          (((C17231 * C49749 + C17232 * C50792 + (C17226 + C17225) * C49742 +
             (C17224 + C17223) * C50523) *
                C50821 +
            (C28233 * C49749 + C28234 * C50792 + (C17939 + C17940) * C49742 +
             (C17941 + C17942) * C50523) *
                C50742) *
               C50581 * C1025 -
           (((C17178 * C1566 + C50714 * C1574 + C17177 * C901 + C17172 * C907) *
                 C50523 +
             (C17178 * C1562 + C50714 * C1567 + C17177 * C892 + C17172 * C900) *
                 C49742 +
             (C18160 + C18159) * C50792 + (C18158 + C18157) * C49749) *
                C50742 +
            ((C17782 + C17781) * C50523 + (C17780 + C17779) * C49742 +
             C17769 * C50792 + C17770 * C49749) *
                C50821) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C457 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C458 +
           ((C22145 * C49749 + C22146 * C50792 + C27843 * C49742 +
             C27844 * C50523) *
                C50821 +
            ((C22138 + C22137) * C49749 + (C22136 + C22135) * C50792 +
             (C22139 + C22140) * C49742 + (C22141 + C22142) * C50523) *
                C50742) *
               C459) *
              C1025 +
          ((((C22661 + C22662) * C49749 + (C22663 + C22664) * C50792 +
             C28493 * C49742 + C28494 * C50523) *
                C50821 +
            ((C22665 + C22666) * C49749 + (C22667 + C22668) * C50792 +
             (C22669 + C22670) * C49742 + (C22671 + C22672) * C50523) *
                C50742) *
               C458 -
           ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
             (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C457 -
           (((C17178 * C4587 + C50714 * C4595 + C17177 * C4588 +
              C17172 * C4596) *
                 C50523 +
             (C17178 * C4583 + C50714 * C4589 + C17177 * C4584 +
              C17172 * C4590) *
                 C49742 +
             (C23080 + C23079) * C50792 + (C23078 + C23077) * C49749) *
                C50742 +
            ((C22672 + C22671) * C50523 + (C22670 + C22669) * C49742 +
             C23075 * C50792 + C23076 * C49749) *
                C50821) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                  C49749 +
              (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                  C50792 +
              (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                 C50821 +
             ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
              C27839 * C49742 + C27840 * C50523) *
                 C50742) *
                C50808 -
            ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
              (C22132 + C22131) * C49749) *
                 C50742 +
             (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
              (C22128 + C22127) * C49749) *
                 C50821) *
                C50645) *
               C1025 +
           ((((C22661 + C22662) * C49749 + (C22663 + C22664) * C50792 +
              C28493 * C49742 + C28494 * C50523) *
                 C50821 +
             ((C22665 + C22666) * C49749 + (C22667 + C22668) * C50792 +
              (C22669 + C22670) * C49742 + (C22671 + C22672) * C50523) *
                 C50742) *
                C50645 -
            ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
              (C22662 + C22661) * C49749) *
                 C50742 +
             ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
              (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                  C50792 +
              (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                  C49749) *
                 C50821) *
                C50808) *
               C50617) *
              C50799 +
          ((((C27839 * C49749 + C27840 * C50792 + C28233 * C49742 +
              C28234 * C50523) *
                 C50821 +
             (C27843 * C49749 + C27844 * C50792 + (C17619 + C17620) * C49742 +
              (C17621 + C17622) * C50523) *
                 C50742) *
                C50645 -
            ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
              C27842 * C49749) *
                 C50742 +
             ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
              (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                 C50821) *
                C50808) *
               C1025 +
           ((((C17420 + C17419) * C49749 + (C17418 + C17417) * C50792 +
              (C17416 + C17415) * C49742 + (C17414 + C17413) * C50523) *
                 C50821 +
             (C28493 * C49749 + C28494 * C50792 + (C18157 + C18158) * C49742 +
              (C18159 + C18160) * C50523) *
                 C50742) *
                C50808 -
            (((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
               C17172 * C1228) *
                  C50523 +
              (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
               C17172 * C1222) *
                  C49742 +
              (C22672 + C22671) * C50792 + (C22670 + C22669) * C49749) *
                 C50742 +
             ((C18160 + C18159) * C50523 + (C18158 + C18157) * C49742 +
              C28495 * C50792 + C28496 * C49749) *
                 C50821) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C50581 * C1025 -
           ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
             (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C50581 * C50617) *
              C1027 +
          ((((C17420 + C17419) * C49749 + (C17418 + C17417) * C50792 +
             (C17416 + C17415) * C49742 + (C17414 + C17413) * C50523) *
                C50821 +
            (C28493 * C49749 + C28494 * C50792 + (C18157 + C18158) * C49742 +
             (C18159 + C18160) * C50523) *
                C50742) *
               C50581 * C50617 -
           ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
             C27842 * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C50581 * C1025) *
              C1028 +
          (((C17231 * C49749 + C17232 * C50792 + (C17226 + C17225) * C49742 +
             (C17224 + C17223) * C50523) *
                C50821 +
            (C28233 * C49749 + C28234 * C50792 + (C17939 + C17940) * C49742 +
             (C17941 + C17942) * C50523) *
                C50742) *
               C50581 * C1025 -
           (((C17178 * C1566 + C50714 * C1574 + C17177 * C901 + C17172 * C907) *
                 C50523 +
             (C17178 * C1562 + C50714 * C1567 + C17177 * C892 + C17172 * C900) *
                 C49742 +
             (C18160 + C18159) * C50792 + (C18158 + C18157) * C49749) *
                C50742 +
            ((C17782 + C17781) * C50523 + (C17780 + C17779) * C49742 +
             C17769 * C50792 + C17770 * C49749) *
                C50821) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C49749 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50792 +
            (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
               C50821 +
           ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
            C27839 * C49742 + C27840 * C50523) *
               C50742) *
              C50581 * C1096 -
          ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
            (C22662 + C22661) * C49749) *
               C50742 +
           ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C50792 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C49749) *
               C50821) *
              C50581 * C1097 +
          (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C49749 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C50792 +
            (C17421 + C17422) * C49742 + (C17423 + C17424) * C50523) *
               C50821 +
           ((C23586 + C23587) * C49749 + (C23588 + C23589) * C50792 +
            (C27641 + C27642) * C49742 + (C27643 + C27644) * C50523) *
               C50742) *
              C50581 * C1098 -
          (((C17178 * C4187 + C50714 * C4191 + C17177 * C3269 +
             C17172 * C3273) *
                C50523 +
            (C17178 * C4185 + C50714 * C4188 + C17177 * C3264 +
             C17172 * C3268) *
                C49742 +
            (C17178 * C4189 + C50714 * C4192 + C17177 * C3267 +
             C17172 * C3272) *
                C50792 +
            (C17178 * C4186 + C50714 * C4190 + C17177 * C3263 +
             C17172 * C3266) *
                C49749) *
               C50742 +
           ((C17178 * C2505 + C50714 * C2509 + C17177 * C1109 +
             C17172 * C1115) *
                C50523 +
            (C17178 * C2500 + C50714 * C2504 + C17177 * C1103 +
             C17172 * C1110) *
                C49742 +
            (C17178 * C2503 + C50714 * C2508 + C17177 * C1111 +
             C17172 * C1116) *
                C50792 +
            (C17178 * C2499 + C50714 * C2502 + C17177 * C1104 +
             C17172 * C1112) *
                C49749) *
               C50821) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                  C49749 +
              (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                  C50792 +
              (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                 C50821 +
             ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
              C27839 * C49742 + C27840 * C50523) *
                 C50742) *
                C1676 -
            ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
              (C22132 + C22131) * C49749) *
                 C50742 +
             (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
              (C22128 + C22127) * C49749) *
                 C50821) *
                C50645) *
               C50807 +
           ((((C22661 + C22662) * C49749 + (C22663 + C22664) * C50792 +
              C28493 * C49742 + C28494 * C50523) *
                 C50821 +
             ((C22665 + C22666) * C49749 + (C22667 + C22668) * C50792 +
              (C22669 + C22670) * C49742 + (C22671 + C22672) * C50523) *
                 C50742) *
                C50645 -
            ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
              (C22662 + C22661) * C49749) *
                 C50742 +
             ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
              (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                  C50792 +
              (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                  C49749) *
                 C50821) *
                C1676) *
               C50617) *
              C50799 +
          ((((C27839 * C49749 + C27840 * C50792 + C28233 * C49742 +
              C28234 * C50523) *
                 C50821 +
             (C27843 * C49749 + C27844 * C50792 + (C17619 + C17620) * C49742 +
              (C17621 + C17622) * C50523) *
                 C50742) *
                C50645 -
            ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
              C27842 * C49749) *
                 C50742 +
             ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
              (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                 C50821) *
                C1676) *
               C50807 +
           ((((C17420 + C17419) * C49749 + (C17418 + C17417) * C50792 +
              (C17416 + C17415) * C49742 + (C17414 + C17413) * C50523) *
                 C50821 +
             (C28493 * C49749 + C28494 * C50792 + (C18157 + C18158) * C49742 +
              (C18159 + C18160) * C50523) *
                 C50742) *
                C1676 -
            (((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
               C17172 * C1228) *
                  C50523 +
              (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
               C17172 * C1222) *
                  C49742 +
              (C22672 + C22671) * C50792 + (C22670 + C22669) * C49749) *
                 C50742 +
             ((C18160 + C18159) * C50523 + (C18158 + C18157) * C49742 +
              C28495 * C50792 + C28496 * C49749) *
                 C50821) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C50854 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C50855 +
           ((C22145 * C49749 + C22146 * C50792 + C27843 * C49742 +
             C27844 * C50523) *
                C50821 +
            ((C22138 + C22137) * C49749 + (C22136 + C22135) * C50792 +
             (C22139 + C22140) * C49742 + (C22141 + C22142) * C50523) *
                C50742) *
               C2092) *
              C50807 +
          ((((C22661 + C22662) * C49749 + (C22663 + C22664) * C50792 +
             C28493 * C49742 + C28494 * C50523) *
                C50821 +
            ((C22665 + C22666) * C49749 + (C22667 + C22668) * C50792 +
             (C22669 + C22670) * C49742 + (C22671 + C22672) * C50523) *
                C50742) *
               C50855 -
           ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
             (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C50854 -
           (((C17178 * C4587 + C50714 * C4595 + C17177 * C4588 +
              C17172 * C4596) *
                 C50523 +
             (C17178 * C4583 + C50714 * C4589 + C17177 * C4584 +
              C17172 * C4590) *
                 C49742 +
             (C23080 + C23079) * C50792 + (C23078 + C23077) * C49749) *
                C50742 +
            ((C22672 + C22671) * C50523 + (C22670 + C22669) * C49742 +
             C23075 * C50792 + C23076 * C49749) *
                C50821) *
               C2092) *
              C50617) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C1676 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C50645) *
              C278 +
          ((((C22661 + C22662) * C49749 + (C22663 + C22664) * C50792 +
             C28493 * C49742 + C28494 * C50523) *
                C50821 +
            ((C22665 + C22666) * C49749 + (C22667 + C22668) * C50792 +
             (C22669 + C22670) * C49742 + (C22671 + C22672) * C50523) *
                C50742) *
               C50645 -
           ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
             (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C1676) *
              C279 +
          ((((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C49749 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50792 +
             (C17421 + C17422) * C49742 + (C17423 + C17424) * C50523) *
                C50821 +
            ((C23586 + C23587) * C49749 + (C23588 + C23589) * C50792 +
             (C27641 + C27642) * C49742 + (C27643 + C27644) * C50523) *
                C50742) *
               C1676 -
           (((C17178 * C3693 + C50714 * C3697 + C17177 * C2699 +
              C17172 * C2703) *
                 C50523 +
             (C17178 * C3691 + C50714 * C3694 + C17177 * C2694 +
              C17172 * C2698) *
                 C49742 +
             (C23593 + C23592) * C50792 + (C23591 + C23590) * C49749) *
                C50742 +
            ((C27644 + C27643) * C50523 + (C27642 + C27641) * C49742 +
             (C23589 + C23588) * C50792 + (C23587 + C23586) * C49749) *
                C50821) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C1676 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C50645) *
              C50565 * C1027 +
          (((C27839 * C49749 + C27840 * C50792 + C28233 * C49742 +
             C28234 * C50523) *
                C50821 +
            (C27843 * C49749 + C27844 * C50792 + (C17619 + C17620) * C49742 +
             (C17621 + C17622) * C50523) *
                C50742) *
               C50645 -
           ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
             C27842 * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C1676) *
              C50565 * C1028 +
          (((C17231 * C49749 + C17232 * C50792 + (C17226 + C17225) * C49742 +
             (C17224 + C17223) * C50523) *
                C50821 +
            (C28233 * C49749 + C28234 * C50792 + (C17939 + C17940) * C49742 +
             (C17941 + C17942) * C50523) *
                C50742) *
               C1676 -
           (((C17178 * C1219 + C50714 * C1227 + C17177 * C485 + C17172 * C497) *
                 C50523 +
             (C17178 * C1215 + C50714 * C1220 + C17177 * C467 + C17172 * C484) *
                 C49742 +
             (C17622 + C17621) * C50792 + (C17620 + C17619) * C49749) *
                C50742 +
            ((C17942 + C17941) * C50523 + (C17940 + C17939) * C49742 +
             C17929 * C50792 + C17930 * C49749) *
                C50821) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C49749 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C50792 +
            (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
               C50821 +
           ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
            C27839 * C49742 + C27840 * C50523) *
               C50742) *
              C1842 -
          ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
            (C22132 + C22131) * C49749) *
               C50742 +
           (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
            (C22128 + C22127) * C49749) *
               C50821) *
              C1843 +
          ((C22145 * C49749 + C22146 * C50792 + C27843 * C49742 +
            C27844 * C50523) *
               C50821 +
           ((C22138 + C22137) * C49749 + (C22136 + C22135) * C50792 +
            (C22139 + C22140) * C49742 + (C22141 + C22142) * C50523) *
               C50742) *
              C1844 -
          (((C17178 * C6504 + C50714 * C6508 + C17177 * C5502 +
             C17172 * C5506) *
                C50523 +
            (C17178 * C6502 + C50714 * C6505 + C17177 * C5497 +
             C17172 * C5501) *
                C49742 +
            (C24003 + C24002) * C50792 + (C24001 + C24000) * C49749) *
               C50742 +
           ((C22142 + C22141) * C50523 + (C22140 + C22139) * C49742 +
            C23988 * C50792 + C23989 * C49749) *
               C50821) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C50854 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C50855 +
           ((C22145 * C49749 + C22146 * C50792 + C27843 * C49742 +
             C27844 * C50523) *
                C50821 +
            ((C22138 + C22137) * C49749 + (C22136 + C22135) * C50792 +
             (C22139 + C22140) * C49742 + (C22141 + C22142) * C50523) *
                C50742) *
               C2092) *
              C50565 * C50799 +
          (((C27839 * C49749 + C27840 * C50792 + C28233 * C49742 +
             C28234 * C50523) *
                C50821 +
            (C27843 * C49749 + C27844 * C50792 + (C17619 + C17620) * C49742 +
             (C17621 + C17622) * C50523) *
                C50742) *
               C50855 -
           ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
             C27842 * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C50854 -
           (((C17178 * C6075 + C50714 * C6077 + C17177 * C1852 +
              C17172 * C1859) *
                 C50523 +
             (C17178 * C6074 + C50714 * C6076 + C17177 * C1847 +
              C17172 * C1853) *
                 C49742 +
             (C22142 + C22141) * C50792 + (C22140 + C22139) * C49749) *
                C50742 +
            ((C17622 + C17621) * C50523 + (C17620 + C17619) * C49742 +
             C22125 * C50792 + C22126 * C49749) *
                C50821) *
               C2092) *
              C50565 * C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C1676 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C50645) *
              C50565 * C1027 +
          (((C27839 * C49749 + C27840 * C50792 + C28233 * C49742 +
             C28234 * C50523) *
                C50821 +
            (C27843 * C49749 + C27844 * C50792 + (C17619 + C17620) * C49742 +
             (C17621 + C17622) * C50523) *
                C50742) *
               C50645 -
           ((C17929 * C50523 + C17930 * C49742 + C27841 * C50792 +
             C27842 * C49749) *
                C50742 +
            ((C17222 + C17221) * C50523 + (C17220 + C17219) * C49742 +
             (C17218 + C17217) * C50792 + (C17216 + C17215) * C49749) *
                C50821) *
               C1676) *
              C50565 * C1028 +
          (((C17231 * C49749 + C17232 * C50792 + (C17226 + C17225) * C49742 +
             (C17224 + C17223) * C50523) *
                C50821 +
            (C28233 * C49749 + C28234 * C50792 + (C17939 + C17940) * C49742 +
             (C17941 + C17942) * C50523) *
                C50742) *
               C1676 -
           (((C17178 * C1219 + C50714 * C1227 + C17177 * C485 + C17172 * C497) *
                 C50523 +
             (C17178 * C1215 + C50714 * C1220 + C17177 * C467 + C17172 * C484) *
                 C49742 +
             (C17622 + C17621) * C50792 + (C17620 + C17619) * C49749) *
                C50742 +
            ((C17942 + C17941) * C50523 + (C17940 + C17939) * C49742 +
             C17929 * C50792 + C17930 * C49749) *
                C50821) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C49749 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C50792 +
             (C17215 + C17216) * C49742 + (C17217 + C17218) * C50523) *
                C50821 +
            ((C22127 + C22128) * C49749 + (C22129 + C22130) * C50792 +
             C27839 * C49742 + C27840 * C50523) *
                C50742) *
               C1676 -
           ((C22125 * C50523 + C22126 * C49742 + (C22134 + C22133) * C50792 +
             (C22132 + C22131) * C49749) *
                C50742 +
            (C27841 * C50523 + C27842 * C49742 + (C22130 + C22129) * C50792 +
             (C22128 + C22127) * C49749) *
                C50821) *
               C50645) *
              C278 +
          ((((C22661 + C22662) * C49749 + (C22663 + C22664) * C50792 +
             C28493 * C49742 + C28494 * C50523) *
                C50821 +
            ((C22665 + C22666) * C49749 + (C22667 + C22668) * C50792 +
             (C22669 + C22670) * C49742 + (C22671 + C22672) * C50523) *
                C50742) *
               C50645 -
           ((C28495 * C50523 + C28496 * C49742 + (C22664 + C22663) * C50792 +
             (C22662 + C22661) * C49749) *
                C50742 +
            ((C17417 + C17418) * C50523 + (C17419 + C17420) * C49742 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C50792 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C49749) *
                C50821) *
               C1676) *
              C279 +
          ((((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                 C49749 +
             (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                 C50792 +
             (C17421 + C17422) * C49742 + (C17423 + C17424) * C50523) *
                C50821 +
            ((C23586 + C23587) * C49749 + (C23588 + C23589) * C50792 +
             (C27641 + C27642) * C49742 + (C27643 + C27644) * C50523) *
                C50742) *
               C1676 -
           (((C17178 * C3693 + C50714 * C3697 + C17177 * C2699 +
              C17172 * C2703) *
                 C50523 +
             (C17178 * C3691 + C50714 * C3694 + C17177 * C2694 +
              C17172 * C2698) *
                 C49742 +
             (C23593 + C23592) * C50792 + (C23591 + C23590) * C49749) *
                C50742 +
            ((C27644 + C27643) * C50523 + (C27642 + C27641) * C49742 +
             (C23589 + C23588) * C50792 + (C23587 + C23586) * C49749) *
                C50821) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C50807 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C50617) *
              C50850 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
               C50678 * C50581 * C50617 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C50807) *
              C50851 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C50581 * C50807 -
           ((C17178 * C311 + C50714 * C322 + C17177 * C310 + C17172 * C321) *
                C17176 +
            (C17178 * C292 + C50714 * C312 + C17177 * C291 + C17172 * C309) *
                C17181 +
            (C17782 + C17781) * C17175 + (C17780 + C17779) * C17180 +
            C17769 * C17174 + C17770 * C17179) *
               C50678 * C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C50807 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C50617) *
              C50850 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C50617 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C50807) *
              C50851 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C50581 * C50807 -
           ((C19986 * C2506 + C19981 * C2510 + C19985 * C1107 + C19980 * C1114 +
             C19984 * C306 + C19979 * C319 + C19983 * C295 + C19978 * C314) *
                C50518 +
            (C19986 * C2501 + C19981 * C2507 + C19985 * C1102 + C19980 * C1108 +
             C19984 * C289 + C19979 * C305 + C19983 * C284 + C19978 * C296) *
                C19987) *
               C50678 * C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C17179 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C17174 +
             (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
             C17231 * C17181 + C17232 * C17176) *
                C50678 * C50808 -
            (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
             (C17613 + C17614) * C17180 +
             (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                 C17174 +
             (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                 C17179) *
                C50678 * C50645) *
               C50807 +
           (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                 C17179 +
             (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                 C17174 +
             (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
             (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
                C50678 * C50645 -
            (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
             (C17419 + C17420) * C17180 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C17174 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C17179) *
                C50678 * C50808) *
               C50617) *
              C281 +
          ((((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
             (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
             (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
                C50678 * C50645 -
            (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
             (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
             (C17216 + C17215) * C17179) *
                C50678 * C50808) *
               C50807 +
           (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
             (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
             (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
                C50678 * C50808 -
            ((C17178 * C1566 + C50714 * C1574 + C17177 * C901 + C17172 * C907) *
                 C17176 +
             (C17178 * C1562 + C50714 * C1567 + C17177 * C892 + C17172 * C900) *
                 C17181 +
             (C18160 + C18159) * C17175 + (C18158 + C18157) * C17180 +
             (C18156 + C18155) * C17174 + (C18154 + C18153) * C17179) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
              C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                 C19987 +
             (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
              C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                 C50518) *
                C50678 * C50808 -
            ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 +
              C19980 * C1577 + C19984 * C895 + C19979 * C904 + C19983 * C476 +
              C19978 * C493) *
                 C50518 +
             (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 +
              C19980 * C1573 + C19984 * C889 + C19979 * C894 + C19983 * C463 +
              C19978 * C477) *
                 C19987) *
                C50678 * C50645) *
               C50807 +
           (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
              C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
              C19981 * C4190) *
                 C19987 +
             (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
              C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
              C19981 * C4192) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 +
              C19980 * C1116 + C19984 * C302 + C19979 * C317 + C19983 * C299 +
              C19978 * C316) *
                 C50518 +
             (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 +
              C19980 * C1112 + C19984 * C287 + C19979 * C301 + C19983 * C286 +
              C19978 * C300) *
                 C19987) *
                C50678 * C50808) *
               C50617) *
              C281 +
          ((((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
              C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
              C19981 * C3268) *
                 C19987 +
             (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
              C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
              C19981 * C3273) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
              C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                 C50518 +
             (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
              C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                 C19987) *
                C50678 * C50808) *
               C50807 +
           (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
              C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
              C19981 * C2504) *
                 C19987 +
             (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
              C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
              C19981 * C2509) *
                 C50518) *
                C50678 * C50808 -
            ((C19986 * C4187 + C19981 * C4191 + C19985 * C3269 +
              C19980 * C3273 + C19984 * C1570 + C19979 * C1576 + C19983 * C897 +
              C19978 * C905) *
                 C50518 +
             (C19986 * C4185 + C19981 * C4188 + C19985 * C3264 +
              C19980 * C3268 + C19984 * C1564 + C19979 * C1571 + C19983 * C890 +
              C19978 * C896) *
                 C19987) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C278 -
           ((C17413 + C17414) * C17176 + (C17415 + C17416) * C17181 +
            (C17417 + C17418) * C17175 + (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C279 +
           ((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C50581 * C280) *
              C281 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17177 * C283 + C17172 * C294 + C17178 * C290 + C50714 * C307) *
                C17181 +
            (C17177 * C293 + C17172 * C313 + C17178 * C308 + C50714 * C320) *
                C17176) *
               C50678 * C50581 * C279 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C278 -
           ((C17178 * C1105 + C50714 * C1113 + C17177 * C308 + C17172 * C320) *
                C17176 +
            (C17178 * C1101 + C50714 * C1106 + C17177 * C290 + C17172 * C307) *
                C17181 +
            (C17428 + C17427) * C17175 + (C17426 + C17425) * C17180 +
            (C17424 + C17423) * C17174 + (C17422 + C17421) * C17179) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
               C17179 +
           (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
               C17174 +
           (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
           C17231 * C17181 + C17232 * C17176) *
              C50678 * C50581 * C50565 * C113 -
          (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
           (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
           (C17216 + C17215) * C17179) *
              C50678 * C50581 * C50565 * C114 +
          (C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
           (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
           (C17229 + C17230) * C17176) *
              C50678 * C50581 * C50565 * C115 -
          ((C17178 * C640 + C50714 * C642 + C17177 * C140 + C17172 * C148) *
               C17176 +
           (C17178 * C639 + C50714 * C641 + C17177 * C127 + C17172 * C139) *
               C17181 +
           (C17230 + C17229) * C17175 + (C17228 + C17227) * C17180 +
           C17233 * C17174 + C17234 * C17179) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C457 -
           ((C17607 + C17608) * C17176 + (C17609 + C17610) * C17181 +
            (C17611 + C17612) * C17175 + (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C458 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C17179 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C17174 +
            (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
            (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
               C50678 * C459) *
              C50565 * C281 +
          (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
            (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
            (C17177 * C460 + C17172 * C471 + C17178 * C892 + C50714 * C900) *
                C17181 +
            (C17177 * C470 + C17172 * C490 + C17178 * C901 + C50714 * C907) *
                C17176) *
               C50678 * C458 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C457 -
           ((C17178 * C1219 + C50714 * C1227 + C17177 * C485 + C17172 * C497) *
                C17176 +
            (C17178 * C1215 + C50714 * C1220 + C17177 * C467 + C17172 * C484) *
                C17181 +
            (C17622 + C17621) * C17175 + (C17620 + C17619) * C17180 +
            (C17618 + C17617) * C17174 + (C17616 + C17615) * C17179) *
               C50678 * C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C50581 * C50565 * C113 -
          ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
            C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
               C50518 +
           (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
            C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
               C19987) *
              C50678 * C50581 * C50565 * C114 +
          ((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
            C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
               C19987 +
           (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
            C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
               C50518) *
              C50678 * C50581 * C50565 * C115 -
          ((C19986 * C1105 + C19981 * C1113 + C19985 * C308 + C19980 * C320 +
            C19984 * C293 + C19979 * C313 + C19983 * C136 + C19978 * C146) *
               C50518 +
           (C19986 * C1101 + C19981 * C1106 + C19985 * C290 + C19980 * C307 +
            C19984 * C283 + C19979 * C294 + C19983 * C125 + C19978 * C135) *
               C19987) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C278 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C279 +
           ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C50581 * C280) *
              C281 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C279 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C278 -
           ((C19986 * C3539 + C19981 * C3543 + C19985 * C2505 + C19980 * C2509 +
             C19984 * C1109 + C19979 * C1115 + C19983 * C304 + C19978 * C318) *
                C50518 +
            (C19986 * C3537 + C19981 * C3540 + C19985 * C2500 + C19980 * C2504 +
             C19984 * C1103 + C19979 * C1110 + C19983 * C288 + C19978 * C303) *
                C19987) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C457 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C458 +
           ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
             C19985 * C2693 + C19980 * C2696 + C19986 * C3692 +
             C19981 * C3696) *
                C19987 +
            (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
             C19985 * C2697 + C19980 * C2702 + C19986 * C3695 +
             C19981 * C3698) *
                C50518) *
               C50678 * C459) *
              C50565 * C281 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C458 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C457 -
           ((C19986 * C3693 + C19981 * C3697 + C19985 * C2699 + C19980 * C2703 +
             C19984 * C1223 + C19979 * C1229 + C19983 * C481 + C19978 * C495) *
                C50518 +
            (C19986 * C3691 + C19981 * C3694 + C19985 * C2694 + C19980 * C2698 +
             C19984 * C1217 + C19979 * C1224 + C19983 * C465 + C19978 * C480) *
                C19987) *
               C50678 * C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50808 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C50565 * C50850 +
          (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
            (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
            (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
               C50678 * C50645 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50808) *
              C50565 * C50851 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C50808 -
           ((C17178 * C902 + C50714 * C908 + C17177 * C487 + C17172 * C498) *
                C17176 +
            (C17178 * C893 + C50714 * C903 + C17177 * C468 + C17172 * C486) *
                C17181 +
            (C17942 + C17941) * C17175 + (C17940 + C17939) * C17180 +
            C17929 * C17174 + C17930 * C17179) *
               C50678 * C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50808 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C50565 * C50850 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50808) *
              C50565 * C50851 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C50808 -
           ((C19986 * C3270 + C19981 * C3274 + C19985 * C1568 + C19980 * C1575 +
             C19984 * C899 + C19979 * C906 + C19983 * C472 + C19978 * C491) *
                C50518 +
            (C19986 * C3265 + C19981 * C3271 + C19985 * C1563 + C19980 * C1569 +
             C19984 * C891 + C19979 * C898 + C19983 * C461 + C19978 * C473) *
                C19987) *
               C50678 * C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
               C17179 +
           (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
               C17174 +
           (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
           C17231 * C17181 + C17232 * C17176) *
              C50678 * C50581 * C50565 * C113 -
          (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
           (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
           (C17216 + C17215) * C17179) *
              C50678 * C50581 * C50565 * C114 +
          (C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
           (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
           (C17229 + C17230) * C17176) *
              C50678 * C50581 * C50565 * C115 -
          ((C17178 * C640 + C50714 * C642 + C17177 * C140 + C17172 * C148) *
               C17176 +
           (C17178 * C639 + C50714 * C641 + C17177 * C127 + C17172 * C139) *
               C17181 +
           (C17230 + C17229) * C17175 + (C17228 + C17227) * C17180 +
           C17233 * C17174 + C17234 * C17179) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C278 -
           ((C17413 + C17414) * C17176 + (C17415 + C17416) * C17181 +
            (C17417 + C17418) * C17175 + (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C279 +
           ((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C50581 * C280) *
              C281 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17177 * C283 + C17172 * C294 + C17178 * C290 + C50714 * C307) *
                C17181 +
            (C17177 * C293 + C17172 * C313 + C17178 * C308 + C50714 * C320) *
                C17176) *
               C50678 * C50581 * C279 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C278 -
           ((C17178 * C1105 + C50714 * C1113 + C17177 * C308 + C17172 * C320) *
                C17176 +
            (C17178 * C1101 + C50714 * C1106 + C17177 * C290 + C17172 * C307) *
                C17181 +
            (C17428 + C17427) * C17175 + (C17426 + C17425) * C17180 +
            (C17424 + C17423) * C17174 + (C17422 + C17421) * C17179) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C50581 * C50565 * C113 -
          ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
            C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
               C50518 +
           (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
            C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
               C19987) *
              C50678 * C50581 * C50565 * C114 +
          ((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
            C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
               C19987 +
           (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
            C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
               C50518) *
              C50678 * C50581 * C50565 * C115 -
          ((C19986 * C1105 + C19981 * C1113 + C19985 * C308 + C19980 * C320 +
            C19984 * C293 + C19979 * C313 + C19983 * C136 + C19978 * C146) *
               C50518 +
           (C19986 * C1101 + C19981 * C1106 + C19985 * C290 + C19980 * C307 +
            C19984 * C283 + C19979 * C294 + C19983 * C125 + C19978 * C135) *
               C19987) *
              C50678 * C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C278 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C279 +
           ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C50581 * C280) *
              C281 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C279 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C278 -
           ((C19986 * C3539 + C19981 * C3543 + C19985 * C2505 + C19980 * C2509 +
             C19984 * C1109 + C19979 * C1115 + C19983 * C304 + C19978 * C318) *
                C50518 +
            (C19986 * C3537 + C19981 * C3540 + C19985 * C2500 + C19980 * C2504 +
             C19984 * C1103 + C19979 * C1110 + C19983 * C288 + C19978 * C303) *
                C19987) *
               C50678 * C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C50852 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C50853 +
           ((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C50581 * C1331) *
              C50799 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
               C50678 * C50581 * C50853 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C50852 -
           ((C17178 * C1105 + C50714 * C1113 + C17177 * C308 + C17172 * C320) *
                C17176 +
            (C17178 * C1101 + C50714 * C1106 + C17177 * C290 + C17172 * C307) *
                C17181 +
            (C17428 + C17427) * C17175 + (C17426 + C17425) * C17180 +
            (C17424 + C17423) * C17174 + (C17422 + C17421) * C17179) *
               C50678 * C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C50852 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C50853 +
           ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C50581 * C1331) *
              C50799 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C50853 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C50852 -
           ((C19986 * C3539 + C19981 * C3543 + C19985 * C2505 + C19980 * C2509 +
             C19984 * C1109 + C19979 * C1115 + C19983 * C304 + C19978 * C318) *
                C50518 +
            (C19986 * C3537 + C19981 * C3540 + C19985 * C2500 + C19980 * C2504 +
             C19984 * C1103 + C19979 * C1110 + C19983 * C288 + C19978 * C303) *
                C19987) *
               C50678 * C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50808 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C50852 +
          (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                C17179 +
            (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                C17174 +
            (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
            (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
               C50678 * C50645 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50808) *
              C50853 +
          (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C50808 -
           ((C17178 * C3270 + C50714 * C3274 + C17177 * C1568 +
             C17172 * C1575) *
                C17176 +
            (C17178 * C3265 + C50714 * C3271 + C17177 * C1563 +
             C17172 * C1569) *
                C17181 +
            (C17178 * C3269 + C50714 * C3273 + C17177 * C1570 +
             C17172 * C1576) *
                C17175 +
            (C17178 * C3264 + C50714 * C3268 + C17177 * C1564 +
             C17172 * C1571) *
                C17180 +
            (C17178 * C3267 + C50714 * C3272 + C17177 * C1572 +
             C17172 * C1577) *
                C17174 +
            (C17178 * C3263 + C50714 * C3266 + C17177 * C1565 +
             C17172 * C1573) *
                C17179) *
               C50678 * C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50808 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C50852 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50808) *
              C50853 +
          (((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C50808 -
           ((C19986 * C21107 + C19981 * C21109 + C19985 * C4189 +
             C19980 * C4192 + C19984 * C3267 + C19979 * C3272 + C19983 * C1572 +
             C19978 * C1577) *
                C50518 +
            (C19986 * C21106 + C19981 * C21108 + C19985 * C4186 +
             C19980 * C4190 + C19984 * C3263 + C19979 * C3266 + C19983 * C1565 +
             C19978 * C1573) *
                C19987) *
               C50678 * C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
               C17179 +
           (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
               C17174 +
           (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
           C17231 * C17181 + C17232 * C17176) *
              C50678 * C50581 * C1096 -
          (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
           (C17419 + C17420) * C17180 +
           (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
               C17174 +
           (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
               C17179) *
              C50678 * C50581 * C1097 +
          ((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
               C17179 +
           (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
               C17174 +
           (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
           (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
              C50678 * C50581 * C1098 -
          ((C17178 * C2506 + C50714 * C2510 + C17177 * C1107 + C17172 * C1114) *
               C17176 +
           (C17178 * C2501 + C50714 * C2507 + C17177 * C1102 + C17172 * C1108) *
               C17181 +
           (C17178 * C2505 + C50714 * C2509 + C17177 * C1109 + C17172 * C1115) *
               C17175 +
           (C17178 * C2500 + C50714 * C2504 + C17177 * C1103 + C17172 * C1110) *
               C17180 +
           (C17178 * C2503 + C50714 * C2508 + C17177 * C1111 + C17172 * C1116) *
               C17174 +
           (C17178 * C2499 + C50714 * C2502 + C17177 * C1104 + C17172 * C1112) *
               C17179) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C1025 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
               C50678 * C50581 * C50617 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C1025) *
              C1028 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C50581 * C1025 -
           ((C17178 * C311 + C50714 * C322 + C17177 * C310 + C17172 * C321) *
                C17176 +
            (C17178 * C292 + C50714 * C312 + C17177 * C291 + C17172 * C309) *
                C17181 +
            (C17782 + C17781) * C17175 + (C17780 + C17779) * C17180 +
            C17769 * C17174 + C17770 * C17179) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C457 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C458 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C17179 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C17174 +
            (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
            (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
               C50678 * C459) *
              C1025 +
          (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                C17179 +
            (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                C17174 +
            (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
            (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
               C50678 * C458 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C457 -
           ((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
             C17172 * C1228) *
                C17176 +
            (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
             C17172 * C1222) *
                C17181 +
            (C17178 * C2699 + C50714 * C2703 + C17177 * C1223 +
             C17172 * C1229) *
                C17175 +
            (C17178 * C2694 + C50714 * C2698 + C17177 * C1217 +
             C17172 * C1224) *
                C17180 +
            (C17178 * C2697 + C50714 * C2702 + C17177 * C1225 +
             C17172 * C1230) *
                C17174 +
            (C17178 * C2693 + C50714 * C2696 + C17177 * C1218 +
             C17172 * C1226) *
                C17179) *
               C50678 * C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C1025 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C50617 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C1025) *
              C1028 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C50581 * C1025 -
           ((C19986 * C2506 + C19981 * C2510 + C19985 * C1107 + C19980 * C1114 +
             C19984 * C306 + C19979 * C319 + C19983 * C295 + C19978 * C314) *
                C50518 +
            (C19986 * C2501 + C19981 * C2507 + C19985 * C1102 + C19980 * C1108 +
             C19984 * C289 + C19979 * C305 + C19983 * C284 + C19978 * C296) *
                C19987) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C50581 * C1096 -
          ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
            C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
               C50518 +
           (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
            C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
               C19987) *
              C50678 * C50581 * C1097 +
          ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
            C19985 * C2499 + C19980 * C2502 + C19986 * C3538 + C19981 * C3542) *
               C19987 +
           (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
            C19985 * C2503 + C19980 * C2508 + C19986 * C3541 + C19981 * C3544) *
               C50518) *
              C50678 * C50581 * C1098 -
          ((C19986 * C20675 + C19981 * C20677 + C19985 * C3541 +
            C19980 * C3544 + C19984 * C2503 + C19979 * C2508 + C19983 * C1111 +
            C19978 * C1116) *
               C50518 +
           (C19986 * C20674 + C19981 * C20676 + C19985 * C3538 +
            C19980 * C3542 + C19984 * C2499 + C19979 * C2502 + C19983 * C1104 +
            C19978 * C1112) *
               C19987) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C457 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C458 +
           ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
             C19985 * C2693 + C19980 * C2696 + C19986 * C3692 +
             C19981 * C3696) *
                C19987 +
            (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
             C19985 * C2697 + C19980 * C2702 + C19986 * C3695 +
             C19981 * C3698) *
                C50518) *
               C50678 * C459) *
              C1025 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C458 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C457 -
           ((C19986 * C20777 + C19981 * C20779 + C19985 * C3695 +
             C19980 * C3698 + C19984 * C2697 + C19979 * C2702 + C19983 * C1225 +
             C19978 * C1230) *
                C50518 +
            (C19986 * C20776 + C19981 * C20778 + C19985 * C3692 +
             C19980 * C3696 + C19984 * C2693 + C19979 * C2696 + C19983 * C1218 +
             C19978 * C1226) *
                C19987) *
               C50678 * C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C17179 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C17174 +
             (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
             C17231 * C17181 + C17232 * C17176) *
                C50678 * C50808 -
            (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
             (C17613 + C17614) * C17180 +
             (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                 C17174 +
             (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                 C17179) *
                C50678 * C50645) *
               C1025 +
           (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                 C17179 +
             (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                 C17174 +
             (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
             (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
                C50678 * C50645 -
            (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
             (C17419 + C17420) * C17180 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C17174 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C17179) *
                C50678 * C50808) *
               C50617) *
              C50799 +
          ((((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
             (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
             (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
                C50678 * C50645 -
            (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
             (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
             (C17216 + C17215) * C17179) *
                C50678 * C50808) *
               C1025 +
           (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
             (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
             (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
                C50678 * C50808 -
            ((C17178 * C1566 + C50714 * C1574 + C17177 * C901 + C17172 * C907) *
                 C17176 +
             (C17178 * C1562 + C50714 * C1567 + C17177 * C892 + C17172 * C900) *
                 C17181 +
             (C18160 + C18159) * C17175 + (C18158 + C18157) * C17180 +
             (C18156 + C18155) * C17174 + (C18154 + C18153) * C17179) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
              C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                 C19987 +
             (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
              C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                 C50518) *
                C50678 * C50808 -
            ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 +
              C19980 * C1577 + C19984 * C895 + C19979 * C904 + C19983 * C476 +
              C19978 * C493) *
                 C50518 +
             (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 +
              C19980 * C1573 + C19984 * C889 + C19979 * C894 + C19983 * C463 +
              C19978 * C477) *
                 C19987) *
                C50678 * C50645) *
               C1025 +
           (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
              C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
              C19981 * C4190) *
                 C19987 +
             (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
              C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
              C19981 * C4192) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 +
              C19980 * C1116 + C19984 * C302 + C19979 * C317 + C19983 * C299 +
              C19978 * C316) *
                 C50518 +
             (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 +
              C19980 * C1112 + C19984 * C287 + C19979 * C301 + C19983 * C286 +
              C19978 * C300) *
                 C19987) *
                C50678 * C50808) *
               C50617) *
              C50799 +
          ((((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
              C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
              C19981 * C3268) *
                 C19987 +
             (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
              C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
              C19981 * C3273) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
              C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                 C50518 +
             (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
              C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                 C19987) *
                C50678 * C50808) *
               C1025 +
           (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
              C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
              C19981 * C2504) *
                 C19987 +
             (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
              C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
              C19981 * C2509) *
                 C50518) *
                C50678 * C50808 -
            ((C19986 * C4187 + C19981 * C4191 + C19985 * C3269 +
              C19980 * C3273 + C19984 * C1570 + C19979 * C1576 + C19983 * C897 +
              C19978 * C905) *
                 C50518 +
             (C19986 * C4185 + C19981 * C4188 + C19985 * C3264 +
              C19980 * C3268 + C19984 * C1564 + C19979 * C1571 + C19983 * C890 +
              C19978 * C896) *
                 C19987) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50581 * C1025 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
            (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
            (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
               C50678 * C50581 * C50617 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50581 * C1025) *
              C1028 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C50581 * C1025 -
           ((C17178 * C311 + C50714 * C322 + C17177 * C310 + C17172 * C321) *
                C17176 +
            (C17178 * C292 + C50714 * C312 + C17177 * C291 + C17172 * C309) *
                C17181 +
            (C17782 + C17781) * C17175 + (C17780 + C17779) * C17180 +
            C17769 * C17174 + C17770 * C17179) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
               C17179 +
           (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
               C17174 +
           (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
           C17231 * C17181 + C17232 * C17176) *
              C50678 * C50581 * C1096 -
          (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
           (C17419 + C17420) * C17180 +
           (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
               C17174 +
           (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
               C17179) *
              C50678 * C50581 * C1097 +
          ((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
               C17179 +
           (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
               C17174 +
           (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
           (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
              C50678 * C50581 * C1098 -
          ((C17178 * C2506 + C50714 * C2510 + C17177 * C1107 + C17172 * C1114) *
               C17176 +
           (C17178 * C2501 + C50714 * C2507 + C17177 * C1102 + C17172 * C1108) *
               C17181 +
           (C17178 * C2505 + C50714 * C2509 + C17177 * C1109 + C17172 * C1115) *
               C17175 +
           (C17178 * C2500 + C50714 * C2504 + C17177 * C1103 + C17172 * C1110) *
               C17180 +
           (C17178 * C2503 + C50714 * C2508 + C17177 * C1111 + C17172 * C1116) *
               C17174 +
           (C17178 * C2499 + C50714 * C2502 + C17177 * C1104 + C17172 * C1112) *
               C17179) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50581 * C1025 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50581 * C50617) *
              C1027 +
          (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
             C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
             C19981 * C2504) *
                C19987 +
            (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
             C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
             C19981 * C2509) *
                C50518) *
               C50678 * C50581 * C50617 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50581 * C1025) *
              C1028 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C50581 * C1025 -
           ((C19986 * C2506 + C19981 * C2510 + C19985 * C1107 + C19980 * C1114 +
             C19984 * C306 + C19979 * C319 + C19983 * C295 + C19978 * C314) *
                C50518 +
            (C19986 * C2501 + C19981 * C2507 + C19985 * C1102 + C19980 * C1108 +
             C19984 * C289 + C19979 * C305 + C19983 * C284 + C19978 * C296) *
                C19987) *
               C50678 * C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C50581 * C1096 -
          ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
            C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
               C50518 +
           (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
            C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
               C19987) *
              C50678 * C50581 * C1097 +
          ((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
            C19985 * C2499 + C19980 * C2502 + C19986 * C3538 + C19981 * C3542) *
               C19987 +
           (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
            C19985 * C2503 + C19980 * C2508 + C19986 * C3541 + C19981 * C3544) *
               C50518) *
              C50678 * C50581 * C1098 -
          ((C19986 * C20675 + C19981 * C20677 + C19985 * C3541 +
            C19980 * C3544 + C19984 * C2503 + C19979 * C2508 + C19983 * C1111 +
            C19978 * C1116) *
               C50518 +
           (C19986 * C20674 + C19981 * C20676 + C19985 * C3538 +
            C19980 * C3542 + C19984 * C2499 + C19979 * C2502 + C19983 * C1104 +
            C19978 * C1112) *
               C19987) *
              C50678 * C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                 C17179 +
             (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                 C17174 +
             (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
             C17231 * C17181 + C17232 * C17176) *
                C50678 * C1676 -
            (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
             (C17613 + C17614) * C17180 +
             (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                 C17174 +
             (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                 C17179) *
                C50678 * C50645) *
               C50807 +
           (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                 C17179 +
             (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                 C17174 +
             (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
             (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
                C50678 * C50645 -
            (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
             (C17419 + C17420) * C17180 +
             (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                 C17174 +
             (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                 C17179) *
                C50678 * C1676) *
               C50617) *
              C50799 +
          ((((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
             (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
             (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
                C50678 * C50645 -
            (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
             (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
             (C17216 + C17215) * C17179) *
                C50678 * C1676) *
               C50807 +
           (((C17420 + C17419) * C17179 + (C17418 + C17417) * C17174 +
             (C17416 + C17415) * C17180 + (C17414 + C17413) * C17175 +
             (C17779 + C17780) * C17181 + (C17781 + C17782) * C17176) *
                C50678 * C1676 -
            ((C17178 * C1566 + C50714 * C1574 + C17177 * C901 + C17172 * C907) *
                 C17176 +
             (C17178 * C1562 + C50714 * C1567 + C17177 * C892 + C17172 * C900) *
                 C17181 +
             (C18160 + C18159) * C17175 + (C18158 + C18157) * C17180 +
             (C18156 + C18155) * C17174 + (C18154 + C18153) * C17179) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
              C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                 C19987 +
             (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
              C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                 C50518) *
                C50678 * C1676 -
            ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 +
              C19980 * C1577 + C19984 * C895 + C19979 * C904 + C19983 * C476 +
              C19978 * C493) *
                 C50518 +
             (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 +
              C19980 * C1573 + C19984 * C889 + C19979 * C894 + C19983 * C463 +
              C19978 * C477) *
                 C19987) *
                C50678 * C50645) *
               C50807 +
           (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
              C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
              C19981 * C4190) *
                 C19987 +
             (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
              C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
              C19981 * C4192) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 +
              C19980 * C1116 + C19984 * C302 + C19979 * C317 + C19983 * C299 +
              C19978 * C316) *
                 C50518 +
             (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 +
              C19980 * C1112 + C19984 * C287 + C19979 * C301 + C19983 * C286 +
              C19978 * C300) *
                 C19987) *
                C50678 * C1676) *
               C50617) *
              C50799 +
          ((((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
              C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
              C19981 * C3268) *
                 C19987 +
             (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
              C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
              C19981 * C3273) *
                 C50518) *
                C50678 * C50645 -
            ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
              C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                 C50518 +
             (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
              C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                 C19987) *
                C50678 * C1676) *
               C50807 +
           (((C19983 * C285 + C19978 * C298 + C19984 * C288 + C19979 * C303 +
              C19985 * C1103 + C19980 * C1110 + C19986 * C2500 +
              C19981 * C2504) *
                 C19987 +
             (C19983 * C297 + C19978 * C315 + C19984 * C304 + C19979 * C318 +
              C19985 * C1109 + C19980 * C1115 + C19986 * C2505 +
              C19981 * C2509) *
                 C50518) *
                C50678 * C1676 -
            ((C19986 * C4187 + C19981 * C4191 + C19985 * C3269 +
              C19980 * C3273 + C19984 * C1570 + C19979 * C1576 + C19983 * C897 +
              C19978 * C905) *
                 C50518 +
             (C19986 * C4185 + C19981 * C4188 + C19985 * C3264 +
              C19980 * C3268 + C19984 * C1564 + C19979 * C1571 + C19983 * C890 +
              C19978 * C896) *
                 C19987) *
                C50678 * C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50854 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50855 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C17179 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C17174 +
            (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
            (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
               C50678 * C2092) *
              C50807 +
          (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                C17179 +
            (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                C17174 +
            (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
            (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
               C50678 * C50855 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C50854 -
           ((C17178 * C2700 + C50714 * C2704 + C17177 * C1221 +
             C17172 * C1228) *
                C17176 +
            (C17178 * C2695 + C50714 * C2701 + C17177 * C1216 +
             C17172 * C1222) *
                C17181 +
            (C17178 * C2699 + C50714 * C2703 + C17177 * C1223 +
             C17172 * C1229) *
                C17175 +
            (C17178 * C2694 + C50714 * C2698 + C17177 * C1217 +
             C17172 * C1224) *
                C17180 +
            (C17178 * C2697 + C50714 * C2702 + C17177 * C1225 +
             C17172 * C1230) *
                C17174 +
            (C17178 * C2693 + C50714 * C2696 + C17177 * C1218 +
             C17172 * C1226) *
                C17179) *
               C50678 * C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50854 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50855 +
           ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
             C19985 * C2693 + C19980 * C2696 + C19986 * C3692 +
             C19981 * C3696) *
                C19987 +
            (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
             C19985 * C2697 + C19980 * C2702 + C19986 * C3695 +
             C19981 * C3698) *
                C50518) *
               C50678 * C2092) *
              C50807 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C50855 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C50854 -
           ((C19986 * C20777 + C19981 * C20779 + C19985 * C3695 +
             C19980 * C3698 + C19984 * C2697 + C19979 * C2702 + C19983 * C1225 +
             C19978 * C1230) *
                C50518 +
            (C19986 * C20776 + C19981 * C20778 + C19985 * C3692 +
             C19980 * C3696 + C19984 * C2693 + C19979 * C2696 + C19983 * C1218 +
             C19978 * C1226) *
                C19987) *
               C50678 * C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C1676 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C278 +
          (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                C17179 +
            (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                C17174 +
            (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
            (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
               C50678 * C50645 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C1676) *
              C279 +
          (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C1676 -
           ((C17178 * C3270 + C50714 * C3274 + C17177 * C1568 +
             C17172 * C1575) *
                C17176 +
            (C17178 * C3265 + C50714 * C3271 + C17177 * C1563 +
             C17172 * C1569) *
                C17181 +
            (C17178 * C3269 + C50714 * C3273 + C17177 * C1570 +
             C17172 * C1576) *
                C17175 +
            (C17178 * C3264 + C50714 * C3268 + C17177 * C1564 +
             C17172 * C1571) *
                C17180 +
            (C17178 * C3267 + C50714 * C3272 + C17177 * C1572 +
             C17172 * C1577) *
                C17174 +
            (C17178 * C3263 + C50714 * C3266 + C17177 * C1565 +
             C17172 * C1573) *
                C17179) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C1676 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
            (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
            (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
               C50678 * C50645 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C1676) *
              C50565 * C1028 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C1676 -
           ((C17178 * C902 + C50714 * C908 + C17177 * C487 + C17172 * C498) *
                C17176 +
            (C17178 * C893 + C50714 * C903 + C17177 * C468 + C17172 * C486) *
                C17181 +
            (C17942 + C17941) * C17175 + (C17940 + C17939) * C17180 +
            C17929 * C17174 + C17930 * C17179) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
               C17179 +
           (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
               C17174 +
           (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
           C17231 * C17181 + C17232 * C17176) *
              C50678 * C1842 -
          (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
           (C17613 + C17614) * C17180 +
           (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
               C17174 +
           (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
               C17179) *
              C50678 * C1843 +
          ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
               C17179 +
           (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
               C17174 +
           (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
           (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
              C50678 * C1844 -
          ((C17178 * C6075 + C50714 * C6077 + C17177 * C1852 + C17172 * C1859) *
               C17176 +
           (C17178 * C6074 + C50714 * C6076 + C17177 * C1847 + C17172 * C1853) *
               C17181 +
           (C17178 * C4588 + C50714 * C4596 + C17177 * C1854 + C17172 * C1860) *
               C17175 +
           (C17178 * C4584 + C50714 * C4590 + C17177 * C1848 + C17172 * C1855) *
               C17180 +
           (C17178 * C4592 + C50714 * C4598 + C17177 * C1856 + C17172 * C1861) *
               C17174 +
           (C17178 * C4586 + C50714 * C4594 + C17177 * C1849 + C17172 * C1857) *
               C17179) *
              C50678 * C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C1676) *
              C50565 * C1028 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3270 + C19981 * C3274 + C19985 * C1568 + C19980 * C1575 +
             C19984 * C899 + C19979 * C906 + C19983 * C472 + C19978 * C491) *
                C50518 +
            (C19986 * C3265 + C19981 * C3271 + C19985 * C1563 + C19980 * C1569 +
             C19984 * C891 + C19979 * C898 + C19983 * C461 + C19978 * C473) *
                C19987) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C278 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C1676) *
              C279 +
          (((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C21107 + C19981 * C21109 + C19985 * C4189 +
             C19980 * C4192 + C19984 * C3267 + C19979 * C3272 + C19983 * C1572 +
             C19978 * C1577) *
                C50518 +
            (C19986 * C21106 + C19981 * C21108 + C19985 * C4186 +
             C19980 * C4190 + C19984 * C3263 + C19979 * C3266 + C19983 * C1565 +
             C19978 * C1573) *
                C19987) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
            C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
               C19987 +
           (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
            C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
               C50518) *
              C50678 * C1842 -
          ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
            C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
               C50518 +
           (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
            C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
               C19987) *
              C50678 * C1843 +
          ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
            C19985 * C2693 + C19980 * C2696 + C19986 * C3692 + C19981 * C3696) *
               C19987 +
           (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
            C19985 * C2697 + C19980 * C2702 + C19986 * C3695 + C19981 * C3698) *
               C50518) *
              C50678 * C1844 -
          ((C19986 * C21373 + C19981 * C21375 + C19985 * C4591 +
            C19980 * C4597 + C19984 * C4592 + C19979 * C4598 + C19983 * C1856 +
            C19978 * C1861) *
               C50518 +
           (C19986 * C21372 + C19981 * C21374 + C19985 * C4585 +
            C19980 * C4593 + C19984 * C4586 + C19979 * C4594 + C19983 * C1849 +
            C19978 * C1857) *
               C19987) *
              C50678 * C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C50854 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50855 +
           ((C17177 * C464 + C17172 * C478 + C17178 * C1218 + C50714 * C1226) *
                C17179 +
            (C17177 * C479 + C17172 * C494 + C17178 * C1225 + C50714 * C1230) *
                C17174 +
            (C17615 + C17616) * C17180 + (C17617 + C17618) * C17175 +
            (C17619 + C17620) * C17181 + (C17621 + C17622) * C17176) *
               C50678 * C2092) *
              C50565 * C50799 +
          (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
            (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
            (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
               C50678 * C50855 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C50854 -
           ((C17178 * C1219 + C50714 * C1227 + C17177 * C485 + C17172 * C497) *
                C17176 +
            (C17178 * C1215 + C50714 * C1220 + C17177 * C467 + C17172 * C484) *
                C17181 +
            (C17622 + C17621) * C17175 + (C17620 + C17619) * C17180 +
            (C17618 + C17617) * C17174 + (C17616 + C17615) * C17179) *
               C50678 * C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C50854 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50855 +
           ((C19983 * C464 + C19978 * C478 + C19984 * C1218 + C19979 * C1226 +
             C19985 * C2693 + C19980 * C2696 + C19986 * C3692 +
             C19981 * C3696) *
                C19987 +
            (C19983 * C479 + C19978 * C494 + C19984 * C1225 + C19979 * C1230 +
             C19985 * C2697 + C19980 * C2702 + C19986 * C3695 +
             C19981 * C3698) *
                C50518) *
               C50678 * C2092) *
              C50565 * C50799 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C50855 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C50854 -
           ((C19986 * C3693 + C19981 * C3697 + C19985 * C2699 + C19980 * C2703 +
             C19984 * C1223 + C19979 * C1229 + C19983 * C481 + C19978 * C495) *
                C50518 +
            (C19986 * C3691 + C19981 * C3694 + C19985 * C2694 + C19980 * C2698 +
             C19984 * C1217 + C19979 * C1224 + C19983 * C465 + C19978 * C480) *
                C19987) *
               C50678 * C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C1676 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C17614 + C17613) * C17179 + (C17612 + C17611) * C17174 +
            (C17610 + C17609) * C17180 + (C17608 + C17607) * C17175 +
            (C17939 + C17940) * C17181 + (C17941 + C17942) * C17176) *
               C50678 * C50645 -
           (C17233 * C17176 + C17234 * C17181 + (C17222 + C17221) * C17175 +
            (C17220 + C17219) * C17180 + (C17218 + C17217) * C17174 +
            (C17216 + C17215) * C17179) *
               C50678 * C1676) *
              C50565 * C1028 +
          ((C17231 * C17179 + C17232 * C17174 + (C17226 + C17225) * C17180 +
            (C17224 + C17223) * C17175 + (C17227 + C17228) * C17181 +
            (C17229 + C17230) * C17176) *
               C50678 * C1676 -
           ((C17178 * C902 + C50714 * C908 + C17177 * C487 + C17172 * C498) *
                C17176 +
            (C17178 * C893 + C50714 * C903 + C17177 * C468 + C17172 * C486) *
                C17181 +
            (C17942 + C17941) * C17175 + (C17940 + C17939) * C17180 +
            C17929 * C17174 + C17930 * C17179) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17177 * C122 + C17172 * C129 + C17178 * C286 + C50714 * C300) *
                C17179 +
            (C17177 * C130 + C17172 * C143 + C17178 * C299 + C50714 * C316) *
                C17174 +
            (C17215 + C17216) * C17180 + (C17217 + C17218) * C17175 +
            C17231 * C17181 + C17232 * C17176) *
               C50678 * C1676 -
           (C17929 * C17176 + C17930 * C17181 + (C17611 + C17612) * C17175 +
            (C17613 + C17614) * C17180 +
            (C17178 * C895 + C50714 * C904 + C17177 * C476 + C17172 * C493) *
                C17174 +
            (C17178 * C889 + C50714 * C894 + C17177 * C463 + C17172 * C477) *
                C17179) *
               C50678 * C50645) *
              C278 +
          (((C17177 * C889 + C17172 * C894 + C17178 * C1565 + C50714 * C1573) *
                C17179 +
            (C17177 * C895 + C17172 * C904 + C17178 * C1572 + C50714 * C1577) *
                C17174 +
            (C18153 + C18154) * C17180 + (C18155 + C18156) * C17175 +
            (C18157 + C18158) * C17181 + (C18159 + C18160) * C17176) *
               C50678 * C50645 -
           (C17769 * C17176 + C17770 * C17181 + (C17417 + C17418) * C17175 +
            (C17419 + C17420) * C17180 +
            (C17178 * C302 + C50714 * C317 + C17177 * C299 + C17172 * C316) *
                C17174 +
            (C17178 * C287 + C50714 * C301 + C17177 * C286 + C17172 * C300) *
                C17179) *
               C50678 * C1676) *
              C279 +
          (((C17177 * C287 + C17172 * C301 + C17178 * C1104 + C50714 * C1112) *
                C17179 +
            (C17177 * C302 + C17172 * C317 + C17178 * C1111 + C50714 * C1116) *
                C17174 +
            (C17421 + C17422) * C17180 + (C17423 + C17424) * C17175 +
            (C17425 + C17426) * C17181 + (C17427 + C17428) * C17176) *
               C50678 * C1676 -
           ((C17178 * C3270 + C50714 * C3274 + C17177 * C1568 +
             C17172 * C1575) *
                C17176 +
            (C17178 * C3265 + C50714 * C3271 + C17177 * C1563 +
             C17172 * C1569) *
                C17181 +
            (C17178 * C3269 + C50714 * C3273 + C17177 * C1570 +
             C17172 * C1576) *
                C17175 +
            (C17178 * C3264 + C50714 * C3268 + C17177 * C1564 +
             C17172 * C1571) *
                C17180 +
            (C17178 * C3267 + C50714 * C3272 + C17177 * C1572 +
             C17172 * C1577) *
                C17174 +
            (C17178 * C3263 + C50714 * C3266 + C17177 * C1565 +
             C17172 * C1573) *
                C17179) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C50565 * C1027 +
          (((C19983 * C462 + C19978 * C475 + C19984 * C890 + C19979 * C896 +
             C19985 * C1564 + C19980 * C1571 + C19986 * C3264 +
             C19981 * C3268) *
                C19987 +
            (C19983 * C474 + C19978 * C492 + C19984 * C897 + C19979 * C905 +
             C19985 * C1570 + C19980 * C1576 + C19986 * C3269 +
             C19981 * C3273) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C1109 + C19981 * C1115 + C19985 * C304 + C19980 * C318 +
             C19984 * C297 + C19979 * C315 + C19983 * C132 + C19978 * C144) *
                C50518 +
            (C19986 * C1103 + C19981 * C1110 + C19985 * C288 + C19980 * C303 +
             C19984 * C285 + C19979 * C298 + C19983 * C123 + C19978 * C131) *
                C19987) *
               C50678 * C1676) *
              C50565 * C1028 +
          (((C19983 * C124 + C19978 * C133 + C19984 * C284 + C19979 * C296 +
             C19985 * C289 + C19980 * C305 + C19986 * C1102 + C19981 * C1108) *
                C19987 +
            (C19983 * C134 + C19978 * C145 + C19984 * C295 + C19979 * C314 +
             C19985 * C306 + C19980 * C319 + C19986 * C1107 + C19981 * C1114) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3270 + C19981 * C3274 + C19985 * C1568 + C19980 * C1575 +
             C19984 * C899 + C19979 * C906 + C19983 * C472 + C19978 * C491) *
                C50518 +
            (C19986 * C3265 + C19981 * C3271 + C19985 * C1563 + C19980 * C1569 +
             C19984 * C891 + C19979 * C898 + C19983 * C461 + C19978 * C473) *
                C19987) *
               C50678 * C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19983 * C122 + C19978 * C129 + C19984 * C286 + C19979 * C300 +
             C19985 * C287 + C19980 * C301 + C19986 * C1104 + C19981 * C1112) *
                C19987 +
            (C19983 * C130 + C19978 * C143 + C19984 * C299 + C19979 * C316 +
             C19985 * C302 + C19980 * C317 + C19986 * C1111 + C19981 * C1116) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C3267 + C19981 * C3272 + C19985 * C1572 + C19980 * C1577 +
             C19984 * C895 + C19979 * C904 + C19983 * C476 + C19978 * C493) *
                C50518 +
            (C19986 * C3263 + C19981 * C3266 + C19985 * C1565 + C19980 * C1573 +
             C19984 * C889 + C19979 * C894 + C19983 * C463 + C19978 * C477) *
                C19987) *
               C50678 * C50645) *
              C278 +
          (((C19983 * C889 + C19978 * C894 + C19984 * C1565 + C19979 * C1573 +
             C19985 * C3263 + C19980 * C3266 + C19986 * C4186 +
             C19981 * C4190) *
                C19987 +
            (C19983 * C895 + C19978 * C904 + C19984 * C1572 + C19979 * C1577 +
             C19985 * C3267 + C19980 * C3272 + C19986 * C4189 +
             C19981 * C4192) *
                C50518) *
               C50678 * C50645 -
           ((C19986 * C2503 + C19981 * C2508 + C19985 * C1111 + C19980 * C1116 +
             C19984 * C302 + C19979 * C317 + C19983 * C299 + C19978 * C316) *
                C50518 +
            (C19986 * C2499 + C19981 * C2502 + C19985 * C1104 + C19980 * C1112 +
             C19984 * C287 + C19979 * C301 + C19983 * C286 + C19978 * C300) *
                C19987) *
               C50678 * C1676) *
              C279 +
          (((C19983 * C287 + C19978 * C301 + C19984 * C1104 + C19979 * C1112 +
             C19985 * C2499 + C19980 * C2502 + C19986 * C3538 +
             C19981 * C3542) *
                C19987 +
            (C19983 * C302 + C19978 * C317 + C19984 * C1111 + C19979 * C1116 +
             C19985 * C2503 + C19980 * C2508 + C19986 * C3541 +
             C19981 * C3544) *
                C50518) *
               C50678 * C1676 -
           ((C19986 * C21107 + C19981 * C21109 + C19985 * C4189 +
             C19980 * C4192 + C19984 * C3267 + C19979 * C3272 + C19983 * C1572 +
             C19978 * C1577) *
                C50518 +
            (C19986 * C21106 + C19981 * C21108 + C19985 * C4186 +
             C19980 * C4190 + C19984 * C3263 + C19979 * C3266 + C19983 * C1565 +
             C19978 * C1573) *
                C19987) *
               C50678 * C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50581 * C50807 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C50581 * C50617) *
              C50850 +
          ((((C8272 + C8271) * C49749 + (C8270 + C8269) * C50792 +
             (C8268 + C8267) * C49742 + (C8266 + C8265) * C50523) *
                C33658 +
            (C14691 * C49749 + C14692 * C50792 + (C9009 + C9010) * C49742 +
             (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C50617 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C50581 * C50807) *
              C50851 +
          (((C8083 * C49749 + C8084 * C50792 + (C8078 + C8077) * C49742 +
             (C8076 + C8075) * C50523) *
                C33658 +
            (C14423 * C49749 + C14424 * C50792 + (C8791 + C8792) * C49742 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C50581 * C50807 -
           (((C8030 * C1566 + C50714 * C1574 + C8029 * C901 + C50820 * C907) *
                 C50523 +
             (C8030 * C1562 + C50714 * C1567 + C8029 * C892 + C50820 * C900) *
                 C49742 +
             (C9012 + C9011) * C50792 + (C9010 + C9009) * C49749) *
                C50742 +
            ((C8634 + C8633) * C50523 + (C8632 + C8631) * C49742 +
             C8621 * C50792 + C8622 * C49749) *
                C33658) *
               C50581 * C50617) *
              C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                  C49749 +
              (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                  C50792 +
              (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                 C33658 +
             ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
              C13999 * C49742 + C14000 * C50523) *
                 C50742) *
                C50808 -
            ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
              (C14029 + C14030) * C49749) *
                 C50742 +
             (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
              (C14024 + C14023) * C49749) *
                 C33658) *
                C50645) *
               C50807 +
           ((((C14703 + C14704) * C49749 + (C14705 + C14706) * C50792 +
              C14691 * C49742 + C14692 * C50523) *
                 C33658 +
             ((C15237 + C15238) * C49749 + (C15239 + C15240) * C50792 +
              (C14707 + C14708) * C49742 + (C14709 + C14710) * C50523) *
                 C50742) *
                C50645 -
            ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
              (C14704 + C14703) * C49749) *
                 C50742 +
             ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
              (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                  C50792 +
              (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                  C49749) *
                 C33658) *
                C50808) *
               C50617) *
              C281 +
          ((((C13999 * C49749 + C14000 * C50792 + C14423 * C49742 +
              C14424 * C50523) *
                 C33658 +
             (C14013 * C49749 + C14014 * C50792 + (C8471 + C8472) * C49742 +
              (C8473 + C8474) * C50523) *
                 C50742) *
                C50645 -
            ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
              C14012 * C49749) *
                 C50742 +
             ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
              (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                 C33658) *
                C50808) *
               C50807 +
           ((((C8272 + C8271) * C49749 + (C8270 + C8269) * C50792 +
              (C8268 + C8267) * C49742 + (C8266 + C8265) * C50523) *
                 C33658 +
             (C14691 * C49749 + C14692 * C50792 + (C9009 + C9010) * C49742 +
              (C9011 + C9012) * C50523) *
                 C50742) *
                C50808 -
            (((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 +
               C50820 * C1228) *
                  C50523 +
              (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 +
               C50820 * C1222) *
                  C49742 +
              (C14710 + C14709) * C50792 + (C14708 + C14707) * C49749) *
                 C50742 +
             ((C9012 + C9011) * C50523 + (C9010 + C9009) * C49742 +
              C14701 * C50792 + C14702 * C49749) *
                 C33658) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50581 * C278 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C50581 * C279 +
           (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C49749 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50792 +
             (C8273 + C8274) * C49742 + (C8275 + C8276) * C50523) *
                C33658 +
            ((C15895 + C15896) * C49749 + (C15897 + C15898) * C50792 +
             (C13793 + C13794) * C49742 + (C13795 + C13796) * C50523) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C8272 + C8271) * C49749 + (C8270 + C8269) * C50792 +
             (C8268 + C8267) * C49742 + (C8266 + C8265) * C50523) *
                C33658 +
            (C14691 * C49749 + C14692 * C50792 + (C9009 + C9010) * C49742 +
             (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C279 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C50581 * C278 -
           (((C8030 * C3270 + C50714 * C3274 + C8029 * C1568 + C50820 * C1575) *
                 C50523 +
             (C8030 * C3265 + C50714 * C3271 + C8029 * C1563 + C50820 * C1569) *
                 C49742 +
             (C13796 + C13795) * C50792 + (C13794 + C13793) * C49749) *
                C50742 +
            ((C8280 + C8279) * C50523 + (C8278 + C8277) * C49742 +
             (C8276 + C8275) * C50792 + (C8274 + C8273) * C49749) *
                C33658) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C49749 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50792 +
            (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
               C33658 +
           ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
            C13999 * C49742 + C14000 * C50523) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
            C14012 * C49749) *
               C50742 +
           ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
            (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
               C33658) *
              C50581 * C50565 * C114 +
          ((C8083 * C49749 + C8084 * C50792 + (C8078 + C8077) * C49742 +
            (C8076 + C8075) * C50523) *
               C33658 +
           (C14423 * C49749 + C14424 * C50792 + (C8791 + C8792) * C49742 +
            (C8793 + C8794) * C50523) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C8030 * C902 + C50714 * C908 + C8029 * C487 + C50820 * C498) *
                C50523 +
            (C8030 * C893 + C50714 * C903 + C8029 * C468 + C50820 * C486) *
                C49742 +
            (C8794 + C8793) * C50792 + (C8792 + C8791) * C49749) *
               C50742 +
           ((C8082 + C8081) * C50523 + (C8080 + C8079) * C49742 +
            C8085 * C50792 + C8086 * C49749) *
               C33658) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C457 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C458 +
           (((C14030 + C14029) * C49749 + (C14028 + C14027) * C50792 +
             C14013 * C49742 + C14014 * C50523) *
                C33658 +
            ((C16425 + C16426) * C49749 + (C16427 + C16428) * C50792 +
             (C14031 + C14032) * C49742 + (C14033 + C14034) * C50523) *
                C50742) *
               C459) *
              C50565 * C281 +
          (((C13999 * C49749 + C14000 * C50792 + C14423 * C49742 +
             C14424 * C50523) *
                C33658 +
            (C14013 * C49749 + C14014 * C50792 + (C8471 + C8472) * C49742 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C458 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C457 -
           (((C8030 * C6075 + C50714 * C6077 + C8029 * C1852 + C50820 * C1859) *
                 C50523 +
             (C8030 * C6074 + C50714 * C6076 + C8029 * C1847 + C50820 * C1853) *
                 C49742 +
             (C14034 + C14033) * C50792 + (C14032 + C14031) * C49749) *
                C50742 +
            ((C8474 + C8473) * C50523 + (C8472 + C8471) * C49742 +
             C14001 * C50792 + C14002 * C49749) *
                C33658) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50808 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C50645) *
              C50565 * C50850 +
          (((C13999 * C49749 + C14000 * C50792 + C14423 * C49742 +
             C14424 * C50523) *
                C33658 +
            (C14013 * C49749 + C14014 * C50792 + (C8471 + C8472) * C49742 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C50645 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C50808) *
              C50565 * C50851 +
          (((C8083 * C49749 + C8084 * C50792 + (C8078 + C8077) * C49742 +
             (C8076 + C8075) * C50523) *
                C33658 +
            (C14423 * C49749 + C14424 * C50792 + (C8791 + C8792) * C49742 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C50808 -
           (((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                 C50523 +
             (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                 C49742 +
             (C8474 + C8473) * C50792 + (C8472 + C8471) * C49749) *
                C50742 +
            ((C8794 + C8793) * C50523 + (C8792 + C8791) * C49742 +
             C8781 * C50792 + C8782 * C49749) *
                C33658) *
               C50645) *
              C50565 * C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C49749 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50792 +
            (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
               C33658 +
           ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
            C13999 * C49742 + C14000 * C50523) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
            C14012 * C49749) *
               C50742 +
           ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
            (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
               C33658) *
              C50581 * C50565 * C114 +
          ((C8083 * C49749 + C8084 * C50792 + (C8078 + C8077) * C49742 +
            (C8076 + C8075) * C50523) *
               C33658 +
           (C14423 * C49749 + C14424 * C50792 + (C8791 + C8792) * C49742 +
            (C8793 + C8794) * C50523) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C8030 * C902 + C50714 * C908 + C8029 * C487 + C50820 * C498) *
                C50523 +
            (C8030 * C893 + C50714 * C903 + C8029 * C468 + C50820 * C486) *
                C49742 +
            (C8794 + C8793) * C50792 + (C8792 + C8791) * C49749) *
               C50742 +
           ((C8082 + C8081) * C50523 + (C8080 + C8079) * C49742 +
            C8085 * C50792 + C8086 * C49749) *
               C33658) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50581 * C278 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C50581 * C279 +
           (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C49749 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50792 +
             (C8273 + C8274) * C49742 + (C8275 + C8276) * C50523) *
                C33658 +
            ((C15895 + C15896) * C49749 + (C15897 + C15898) * C50792 +
             (C13793 + C13794) * C49742 + (C13795 + C13796) * C50523) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C8272 + C8271) * C49749 + (C8270 + C8269) * C50792 +
             (C8268 + C8267) * C49742 + (C8266 + C8265) * C50523) *
                C33658 +
            (C14691 * C49749 + C14692 * C50792 + (C9009 + C9010) * C49742 +
             (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C279 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C50581 * C278 -
           (((C8030 * C3270 + C50714 * C3274 + C8029 * C1568 + C50820 * C1575) *
                 C50523 +
             (C8030 * C3265 + C50714 * C3271 + C8029 * C1563 + C50820 * C1569) *
                 C49742 +
             (C13796 + C13795) * C50792 + (C13794 + C13793) * C49749) *
                C50742 +
            ((C8280 + C8279) * C50523 + (C8278 + C8277) * C49742 +
             (C8276 + C8275) * C50792 + (C8274 + C8273) * C49749) *
                C33658) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50581 * C50852 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C50581 * C50853 +
           (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C49749 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50792 +
             (C8273 + C8274) * C49742 + (C8275 + C8276) * C50523) *
                C33658 +
            ((C15895 + C15896) * C49749 + (C15897 + C15898) * C50792 +
             (C13793 + C13794) * C49742 + (C13795 + C13796) * C50523) *
                C50742) *
               C50581 * C1331) *
              C50799 +
          ((((C8272 + C8271) * C49749 + (C8270 + C8269) * C50792 +
             (C8268 + C8267) * C49742 + (C8266 + C8265) * C50523) *
                C33658 +
            (C14691 * C49749 + C14692 * C50792 + (C9009 + C9010) * C49742 +
             (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C50853 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C50581 * C50852 -
           (((C8030 * C3270 + C50714 * C3274 + C8029 * C1568 + C50820 * C1575) *
                 C50523 +
             (C8030 * C3265 + C50714 * C3271 + C8029 * C1563 + C50820 * C1569) *
                 C49742 +
             (C13796 + C13795) * C50792 + (C13794 + C13793) * C49749) *
                C50742 +
            ((C8280 + C8279) * C50523 + (C8278 + C8277) * C49742 +
             (C8276 + C8275) * C50792 + (C8274 + C8273) * C49749) *
                C33658) *
               C50581 * C1331) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50808 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C50645) *
              C50852 +
          ((((C14703 + C14704) * C49749 + (C14705 + C14706) * C50792 +
             C14691 * C49742 + C14692 * C50523) *
                C33658 +
            ((C15237 + C15238) * C49749 + (C15239 + C15240) * C50792 +
             (C14707 + C14708) * C49742 + (C14709 + C14710) * C50523) *
                C50742) *
               C50645 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C50808) *
              C50853 +
          ((((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C49749 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50792 +
             (C8273 + C8274) * C49742 + (C8275 + C8276) * C50523) *
                C33658 +
            ((C15895 + C15896) * C49749 + (C15897 + C15898) * C50792 +
             (C13793 + C13794) * C49742 + (C13795 + C13796) * C50523) *
                C50742) *
               C50808 -
           (((C8030 * C3693 + C50714 * C3697 + C8029 * C2699 + C50820 * C2703) *
                 C50523 +
             (C8030 * C3691 + C50714 * C3694 + C8029 * C2694 + C50820 * C2698) *
                 C49742 +
             (C8030 * C3695 + C50714 * C3698 + C8029 * C2697 + C50820 * C2702) *
                 C50792 +
             (C8030 * C3692 + C50714 * C3696 + C8029 * C2693 + C50820 * C2696) *
                 C49749) *
                C50742 +
            ((C13796 + C13795) * C50523 + (C13794 + C13793) * C49742 +
             (C15898 + C15897) * C50792 + (C15896 + C15895) * C49749) *
                C33658) *
               C50645) *
              C1331) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C49749 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50792 +
            (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
               C33658 +
           ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
            C13999 * C49742 + C14000 * C50523) *
               C50742) *
              C50581 * C1096 -
          ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
            (C14704 + C14703) * C49749) *
               C50742 +
           ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50792 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C49749) *
               C33658) *
              C50581 * C1097 +
          (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C49749 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50792 +
            (C8273 + C8274) * C49742 + (C8275 + C8276) * C50523) *
               C33658 +
           ((C15895 + C15896) * C49749 + (C15897 + C15898) * C50792 +
            (C13793 + C13794) * C49742 + (C13795 + C13796) * C50523) *
               C50742) *
              C50581 * C1098 -
          (((C8030 * C4187 + C50714 * C4191 + C8029 * C3269 + C50820 * C3273) *
                C50523 +
            (C8030 * C4185 + C50714 * C4188 + C8029 * C3264 + C50820 * C3268) *
                C49742 +
            (C8030 * C4189 + C50714 * C4192 + C8029 * C3267 + C50820 * C3272) *
                C50792 +
            (C8030 * C4186 + C50714 * C4190 + C8029 * C3263 + C50820 * C3266) *
                C49749) *
               C50742 +
           ((C8030 * C2505 + C50714 * C2509 + C8029 * C1109 + C50820 * C1115) *
                C50523 +
            (C8030 * C2500 + C50714 * C2504 + C8029 * C1103 + C50820 * C1110) *
                C49742 +
            (C8030 * C2503 + C50714 * C2508 + C8029 * C1111 + C50820 * C1116) *
                C50792 +
            (C8030 * C2499 + C50714 * C2502 + C8029 * C1104 + C50820 * C1112) *
                C49749) *
               C33658) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50581 * C1025 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C50581 * C50617) *
              C1027 +
          ((((C8272 + C8271) * C49749 + (C8270 + C8269) * C50792 +
             (C8268 + C8267) * C49742 + (C8266 + C8265) * C50523) *
                C33658 +
            (C14691 * C49749 + C14692 * C50792 + (C9009 + C9010) * C49742 +
             (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C50617 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C50581 * C1025) *
              C1028 +
          (((C8083 * C49749 + C8084 * C50792 + (C8078 + C8077) * C49742 +
             (C8076 + C8075) * C50523) *
                C33658 +
            (C14423 * C49749 + C14424 * C50792 + (C8791 + C8792) * C49742 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C50581 * C1025 -
           (((C8030 * C1566 + C50714 * C1574 + C8029 * C901 + C50820 * C907) *
                 C50523 +
             (C8030 * C1562 + C50714 * C1567 + C8029 * C892 + C50820 * C900) *
                 C49742 +
             (C9012 + C9011) * C50792 + (C9010 + C9009) * C49749) *
                C50742 +
            ((C8634 + C8633) * C50523 + (C8632 + C8631) * C49742 +
             C8621 * C50792 + C8622 * C49749) *
                C33658) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C457 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C458 +
           (((C14030 + C14029) * C49749 + (C14028 + C14027) * C50792 +
             C14013 * C49742 + C14014 * C50523) *
                C33658 +
            ((C16425 + C16426) * C49749 + (C16427 + C16428) * C50792 +
             (C14031 + C14032) * C49742 + (C14033 + C14034) * C50523) *
                C50742) *
               C459) *
              C1025 +
          ((((C14703 + C14704) * C49749 + (C14705 + C14706) * C50792 +
             C14691 * C49742 + C14692 * C50523) *
                C33658 +
            ((C15237 + C15238) * C49749 + (C15239 + C15240) * C50792 +
             (C14707 + C14708) * C49742 + (C14709 + C14710) * C50523) *
                C50742) *
               C458 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C457 -
           (((C8030 * C4587 + C50714 * C4595 + C8029 * C4588 + C50820 * C4596) *
                 C50523 +
             (C8030 * C4583 + C50714 * C4589 + C8029 * C4584 + C50820 * C4590) *
                 C49742 +
             (C8030 * C4591 + C50714 * C4597 + C8029 * C4592 + C50820 * C4598) *
                 C50792 +
             (C8030 * C4585 + C50714 * C4593 + C8029 * C4586 + C50820 * C4594) *
                 C49749) *
                C50742 +
            ((C14710 + C14709) * C50523 + (C14708 + C14707) * C49742 +
             (C15240 + C15239) * C50792 + (C15238 + C15237) * C49749) *
                C33658) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                  C49749 +
              (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                  C50792 +
              (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                 C33658 +
             ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
              C13999 * C49742 + C14000 * C50523) *
                 C50742) *
                C50808 -
            ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
              (C14029 + C14030) * C49749) *
                 C50742 +
             (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
              (C14024 + C14023) * C49749) *
                 C33658) *
                C50645) *
               C1025 +
           ((((C14703 + C14704) * C49749 + (C14705 + C14706) * C50792 +
              C14691 * C49742 + C14692 * C50523) *
                 C33658 +
             ((C15237 + C15238) * C49749 + (C15239 + C15240) * C50792 +
              (C14707 + C14708) * C49742 + (C14709 + C14710) * C50523) *
                 C50742) *
                C50645 -
            ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
              (C14704 + C14703) * C49749) *
                 C50742 +
             ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
              (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                  C50792 +
              (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                  C49749) *
                 C33658) *
                C50808) *
               C50617) *
              C50799 +
          ((((C13999 * C49749 + C14000 * C50792 + C14423 * C49742 +
              C14424 * C50523) *
                 C33658 +
             (C14013 * C49749 + C14014 * C50792 + (C8471 + C8472) * C49742 +
              (C8473 + C8474) * C50523) *
                 C50742) *
                C50645 -
            ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
              C14012 * C49749) *
                 C50742 +
             ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
              (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                 C33658) *
                C50808) *
               C1025 +
           ((((C8272 + C8271) * C49749 + (C8270 + C8269) * C50792 +
              (C8268 + C8267) * C49742 + (C8266 + C8265) * C50523) *
                 C33658 +
             (C14691 * C49749 + C14692 * C50792 + (C9009 + C9010) * C49742 +
              (C9011 + C9012) * C50523) *
                 C50742) *
                C50808 -
            (((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 +
               C50820 * C1228) *
                  C50523 +
              (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 +
               C50820 * C1222) *
                  C49742 +
              (C14710 + C14709) * C50792 + (C14708 + C14707) * C49749) *
                 C50742 +
             ((C9012 + C9011) * C50523 + (C9010 + C9009) * C49742 +
              C14701 * C50792 + C14702 * C49749) *
                 C33658) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50581 * C1025 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C50581 * C50617) *
              C1027 +
          ((((C8272 + C8271) * C49749 + (C8270 + C8269) * C50792 +
             (C8268 + C8267) * C49742 + (C8266 + C8265) * C50523) *
                C33658 +
            (C14691 * C49749 + C14692 * C50792 + (C9009 + C9010) * C49742 +
             (C9011 + C9012) * C50523) *
                C50742) *
               C50581 * C50617 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C50581 * C1025) *
              C1028 +
          (((C8083 * C49749 + C8084 * C50792 + (C8078 + C8077) * C49742 +
             (C8076 + C8075) * C50523) *
                C33658 +
            (C14423 * C49749 + C14424 * C50792 + (C8791 + C8792) * C49742 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C50581 * C1025 -
           (((C8030 * C1566 + C50714 * C1574 + C8029 * C901 + C50820 * C907) *
                 C50523 +
             (C8030 * C1562 + C50714 * C1567 + C8029 * C892 + C50820 * C900) *
                 C49742 +
             (C9012 + C9011) * C50792 + (C9010 + C9009) * C49749) *
                C50742 +
            ((C8634 + C8633) * C50523 + (C8632 + C8631) * C49742 +
             C8621 * C50792 + C8622 * C49749) *
                C33658) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C49749 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50792 +
            (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
               C33658 +
           ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
            C13999 * C49742 + C14000 * C50523) *
               C50742) *
              C50581 * C1096 -
          ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
            (C14704 + C14703) * C49749) *
               C50742 +
           ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
            (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50792 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C49749) *
               C33658) *
              C50581 * C1097 +
          (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C49749 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50792 +
            (C8273 + C8274) * C49742 + (C8275 + C8276) * C50523) *
               C33658 +
           ((C15895 + C15896) * C49749 + (C15897 + C15898) * C50792 +
            (C13793 + C13794) * C49742 + (C13795 + C13796) * C50523) *
               C50742) *
              C50581 * C1098 -
          (((C8030 * C4187 + C50714 * C4191 + C8029 * C3269 + C50820 * C3273) *
                C50523 +
            (C8030 * C4185 + C50714 * C4188 + C8029 * C3264 + C50820 * C3268) *
                C49742 +
            (C8030 * C4189 + C50714 * C4192 + C8029 * C3267 + C50820 * C3272) *
                C50792 +
            (C8030 * C4186 + C50714 * C4190 + C8029 * C3263 + C50820 * C3266) *
                C49749) *
               C50742 +
           ((C8030 * C2505 + C50714 * C2509 + C8029 * C1109 + C50820 * C1115) *
                C50523 +
            (C8030 * C2500 + C50714 * C2504 + C8029 * C1103 + C50820 * C1110) *
                C49742 +
            (C8030 * C2503 + C50714 * C2508 + C8029 * C1111 + C50820 * C1116) *
                C50792 +
            (C8030 * C2499 + C50714 * C2502 + C8029 * C1104 + C50820 * C1112) *
                C49749) *
               C33658) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                  C49749 +
              (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                  C50792 +
              (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                 C33658 +
             ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
              C13999 * C49742 + C14000 * C50523) *
                 C50742) *
                C1676 -
            ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
              (C14029 + C14030) * C49749) *
                 C50742 +
             (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
              (C14024 + C14023) * C49749) *
                 C33658) *
                C50645) *
               C50807 +
           ((((C14703 + C14704) * C49749 + (C14705 + C14706) * C50792 +
              C14691 * C49742 + C14692 * C50523) *
                 C33658 +
             ((C15237 + C15238) * C49749 + (C15239 + C15240) * C50792 +
              (C14707 + C14708) * C49742 + (C14709 + C14710) * C50523) *
                 C50742) *
                C50645 -
            ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
              (C14704 + C14703) * C49749) *
                 C50742 +
             ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
              (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                  C50792 +
              (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                  C49749) *
                 C33658) *
                C1676) *
               C50617) *
              C50799 +
          ((((C13999 * C49749 + C14000 * C50792 + C14423 * C49742 +
              C14424 * C50523) *
                 C33658 +
             (C14013 * C49749 + C14014 * C50792 + (C8471 + C8472) * C49742 +
              (C8473 + C8474) * C50523) *
                 C50742) *
                C50645 -
            ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
              C14012 * C49749) *
                 C50742 +
             ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
              (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                 C33658) *
                C1676) *
               C50807 +
           ((((C8272 + C8271) * C49749 + (C8270 + C8269) * C50792 +
              (C8268 + C8267) * C49742 + (C8266 + C8265) * C50523) *
                 C33658 +
             (C14691 * C49749 + C14692 * C50792 + (C9009 + C9010) * C49742 +
              (C9011 + C9012) * C50523) *
                 C50742) *
                C1676 -
            (((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 +
               C50820 * C1228) *
                  C50523 +
              (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 +
               C50820 * C1222) *
                  C49742 +
              (C14710 + C14709) * C50792 + (C14708 + C14707) * C49749) *
                 C50742 +
             ((C9012 + C9011) * C50523 + (C9010 + C9009) * C49742 +
              C14701 * C50792 + C14702 * C49749) *
                 C33658) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50854 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C50855 +
           (((C14030 + C14029) * C49749 + (C14028 + C14027) * C50792 +
             C14013 * C49742 + C14014 * C50523) *
                C33658 +
            ((C16425 + C16426) * C49749 + (C16427 + C16428) * C50792 +
             (C14031 + C14032) * C49742 + (C14033 + C14034) * C50523) *
                C50742) *
               C2092) *
              C50807 +
          ((((C14703 + C14704) * C49749 + (C14705 + C14706) * C50792 +
             C14691 * C49742 + C14692 * C50523) *
                C33658 +
            ((C15237 + C15238) * C49749 + (C15239 + C15240) * C50792 +
             (C14707 + C14708) * C49742 + (C14709 + C14710) * C50523) *
                C50742) *
               C50855 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C50854 -
           (((C8030 * C4587 + C50714 * C4595 + C8029 * C4588 + C50820 * C4596) *
                 C50523 +
             (C8030 * C4583 + C50714 * C4589 + C8029 * C4584 + C50820 * C4590) *
                 C49742 +
             (C8030 * C4591 + C50714 * C4597 + C8029 * C4592 + C50820 * C4598) *
                 C50792 +
             (C8030 * C4585 + C50714 * C4593 + C8029 * C4586 + C50820 * C4594) *
                 C49749) *
                C50742 +
            ((C14710 + C14709) * C50523 + (C14708 + C14707) * C49742 +
             (C15240 + C15239) * C50792 + (C15238 + C15237) * C49749) *
                C33658) *
               C2092) *
              C50617) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C1676 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C50645) *
              C278 +
          ((((C14703 + C14704) * C49749 + (C14705 + C14706) * C50792 +
             C14691 * C49742 + C14692 * C50523) *
                C33658 +
            ((C15237 + C15238) * C49749 + (C15239 + C15240) * C50792 +
             (C14707 + C14708) * C49742 + (C14709 + C14710) * C50523) *
                C50742) *
               C50645 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C1676) *
              C279 +
          ((((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C49749 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50792 +
             (C8273 + C8274) * C49742 + (C8275 + C8276) * C50523) *
                C33658 +
            ((C15895 + C15896) * C49749 + (C15897 + C15898) * C50792 +
             (C13793 + C13794) * C49742 + (C13795 + C13796) * C50523) *
                C50742) *
               C1676 -
           (((C8030 * C3693 + C50714 * C3697 + C8029 * C2699 + C50820 * C2703) *
                 C50523 +
             (C8030 * C3691 + C50714 * C3694 + C8029 * C2694 + C50820 * C2698) *
                 C49742 +
             (C8030 * C3695 + C50714 * C3698 + C8029 * C2697 + C50820 * C2702) *
                 C50792 +
             (C8030 * C3692 + C50714 * C3696 + C8029 * C2693 + C50820 * C2696) *
                 C49749) *
                C50742 +
            ((C13796 + C13795) * C50523 + (C13794 + C13793) * C49742 +
             (C15898 + C15897) * C50792 + (C15896 + C15895) * C49749) *
                C33658) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C1676 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C50645) *
              C50565 * C1027 +
          (((C13999 * C49749 + C14000 * C50792 + C14423 * C49742 +
             C14424 * C50523) *
                C33658 +
            (C14013 * C49749 + C14014 * C50792 + (C8471 + C8472) * C49742 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C50645 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C1676) *
              C50565 * C1028 +
          (((C8083 * C49749 + C8084 * C50792 + (C8078 + C8077) * C49742 +
             (C8076 + C8075) * C50523) *
                C33658 +
            (C14423 * C49749 + C14424 * C50792 + (C8791 + C8792) * C49742 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C1676 -
           (((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                 C50523 +
             (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                 C49742 +
             (C8474 + C8473) * C50792 + (C8472 + C8471) * C49749) *
                C50742 +
            ((C8794 + C8793) * C50523 + (C8792 + C8791) * C49742 +
             C8781 * C50792 + C8782 * C49749) *
                C33658) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C49749 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50792 +
            (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
               C33658 +
           ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
            C13999 * C49742 + C14000 * C50523) *
               C50742) *
              C1842 -
          ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
            (C14029 + C14030) * C49749) *
               C50742 +
           (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
            (C14024 + C14023) * C49749) *
               C33658) *
              C1843 +
          (((C14030 + C14029) * C49749 + (C14028 + C14027) * C50792 +
            C14013 * C49742 + C14014 * C50523) *
               C33658 +
           ((C16425 + C16426) * C49749 + (C16427 + C16428) * C50792 +
            (C14031 + C14032) * C49742 + (C14033 + C14034) * C50523) *
               C50742) *
              C1844 -
          (((C8030 * C6504 + C50714 * C6508 + C8029 * C5502 + C50820 * C5506) *
                C50523 +
            (C8030 * C6502 + C50714 * C6505 + C8029 * C5497 + C50820 * C5501) *
                C49742 +
            (C8030 * C6506 + C50714 * C6509 + C8029 * C5500 + C50820 * C5505) *
                C50792 +
            (C8030 * C6503 + C50714 * C6507 + C8029 * C5496 + C50820 * C5499) *
                C49749) *
               C50742 +
           ((C14034 + C14033) * C50523 + (C14032 + C14031) * C49742 +
            (C16428 + C16427) * C50792 + (C16426 + C16425) * C49749) *
               C33658) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C50854 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C50855 +
           (((C14030 + C14029) * C49749 + (C14028 + C14027) * C50792 +
             C14013 * C49742 + C14014 * C50523) *
                C33658 +
            ((C16425 + C16426) * C49749 + (C16427 + C16428) * C50792 +
             (C14031 + C14032) * C49742 + (C14033 + C14034) * C50523) *
                C50742) *
               C2092) *
              C50565 * C50799 +
          (((C13999 * C49749 + C14000 * C50792 + C14423 * C49742 +
             C14424 * C50523) *
                C33658 +
            (C14013 * C49749 + C14014 * C50792 + (C8471 + C8472) * C49742 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C50855 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C50854 -
           (((C8030 * C6075 + C50714 * C6077 + C8029 * C1852 + C50820 * C1859) *
                 C50523 +
             (C8030 * C6074 + C50714 * C6076 + C8029 * C1847 + C50820 * C1853) *
                 C49742 +
             (C14034 + C14033) * C50792 + (C14032 + C14031) * C49749) *
                C50742 +
            ((C8474 + C8473) * C50523 + (C8472 + C8471) * C49742 +
             C14001 * C50792 + C14002 * C49749) *
                C33658) *
               C2092) *
              C50565 * C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C1676 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C50645) *
              C50565 * C1027 +
          (((C13999 * C49749 + C14000 * C50792 + C14423 * C49742 +
             C14424 * C50523) *
                C33658 +
            (C14013 * C49749 + C14014 * C50792 + (C8471 + C8472) * C49742 +
             (C8473 + C8474) * C50523) *
                C50742) *
               C50645 -
           ((C8781 * C50523 + C8782 * C49742 + C14011 * C50792 +
             C14012 * C49749) *
                C50742 +
            ((C8074 + C8073) * C50523 + (C8072 + C8071) * C49742 +
             (C8070 + C8069) * C50792 + (C8068 + C8067) * C49749) *
                C33658) *
               C1676) *
              C50565 * C1028 +
          (((C8083 * C49749 + C8084 * C50792 + (C8078 + C8077) * C49742 +
             (C8076 + C8075) * C50523) *
                C33658 +
            (C14423 * C49749 + C14424 * C50792 + (C8791 + C8792) * C49742 +
             (C8793 + C8794) * C50523) *
                C50742) *
               C1676 -
           (((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                 C50523 +
             (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                 C49742 +
             (C8474 + C8473) * C50792 + (C8472 + C8471) * C49749) *
                C50742 +
            ((C8794 + C8793) * C50523 + (C8792 + C8791) * C49742 +
             C8781 * C50792 + C8782 * C49749) *
                C33658) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C49749 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50792 +
             (C8067 + C8068) * C49742 + (C8069 + C8070) * C50523) *
                C33658 +
            ((C14023 + C14024) * C49749 + (C14025 + C14026) * C50792 +
             C13999 * C49742 + C14000 * C50523) *
                C50742) *
               C1676 -
           ((C14001 * C50523 + C14002 * C49742 + (C14027 + C14028) * C50792 +
             (C14029 + C14030) * C49749) *
                C50742 +
            (C14011 * C50523 + C14012 * C49742 + (C14026 + C14025) * C50792 +
             (C14024 + C14023) * C49749) *
                C33658) *
               C50645) *
              C278 +
          ((((C14703 + C14704) * C49749 + (C14705 + C14706) * C50792 +
             C14691 * C49742 + C14692 * C50523) *
                C33658 +
            ((C15237 + C15238) * C49749 + (C15239 + C15240) * C50792 +
             (C14707 + C14708) * C49742 + (C14709 + C14710) * C50523) *
                C50742) *
               C50645 -
           ((C14701 * C50523 + C14702 * C49742 + (C14706 + C14705) * C50792 +
             (C14704 + C14703) * C49749) *
                C50742 +
            ((C8269 + C8270) * C50523 + (C8271 + C8272) * C49742 +
             (C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50792 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C49749) *
                C33658) *
               C1676) *
              C279 +
          ((((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C49749 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50792 +
             (C8273 + C8274) * C49742 + (C8275 + C8276) * C50523) *
                C33658 +
            ((C15895 + C15896) * C49749 + (C15897 + C15898) * C50792 +
             (C13793 + C13794) * C49742 + (C13795 + C13796) * C50523) *
                C50742) *
               C1676 -
           (((C8030 * C3693 + C50714 * C3697 + C8029 * C2699 + C50820 * C2703) *
                 C50523 +
             (C8030 * C3691 + C50714 * C3694 + C8029 * C2694 + C50820 * C2698) *
                 C49742 +
             (C8030 * C3695 + C50714 * C3698 + C8029 * C2697 + C50820 * C2702) *
                 C50792 +
             (C8030 * C3692 + C50714 * C3696 + C8029 * C2693 + C50820 * C2696) *
                 C49749) *
                C50742 +
            ((C13796 + C13795) * C50523 + (C13794 + C13793) * C49742 +
             (C15898 + C15897) * C50792 + (C15896 + C15895) * C49749) *
                C33658) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C50581 * C50807 -
           (((C15240 + C15239) * C50518 + (C15238 + C15237) * C19987) * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C50581 * C50617) *
              C50850 +
          ((((C8272 + C8271) * C19987 + (C8270 + C8269) * C50518) * C50858 +
            (C14691 * C19987 + C14692 * C50518) * C50859 +
            ((C14707 + C14708) * C19987 + (C14709 + C14710) * C50518) *
                C44420) *
               C50581 * C50617 -
           (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C50581 * C50807) *
              C50851 +
          (((C8083 * C19987 + C8084 * C50518) * C50858 +
            (C14423 * C19987 + C14424 * C50518) * C50859 +
            ((C8471 + C8472) * C19987 + (C8473 + C8474) * C50518) * C44420) *
               C50581 * C50807 -
           (((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 + C50820 * C1228) *
                 C50518 +
             (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 + C50820 * C1222) *
                 C19987) *
                C44420 +
            ((C9012 + C9011) * C50518 + (C9010 + C9009) * C19987) * C50859 +
            (C8621 * C50518 + C8622 * C19987) * C50858) *
               C50581 * C50617) *
              C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                  C19987 +
              (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                  C50518) *
                 C50858 +
             ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) *
                 C50859 +
             C47425 * C44420) *
                C50808 -
            (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) *
                 C44420 +
             ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) *
                 C50859 +
             ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                 C50858) *
                C50645) *
               C50807 +
           ((((C14703 + C14704) * C19987 + (C14705 + C14706) * C50518) *
                 C50858 +
             ((C15237 + C15238) * C19987 + (C15239 + C15240) * C50518) *
                 C50859 +
             ((C8029 * C4586 + C50820 * C4594 + C8030 * C4585 +
               C50714 * C4593) *
                  C19987 +
              (C8029 * C4592 + C50820 * C4598 + C8030 * C4591 +
               C50714 * C4597) *
                  C50518) *
                 C44420) *
                C50645 -
            (((C15240 + C15239) * C50518 + (C15238 + C15237) * C19987) *
                 C44420 +
             ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) *
                 C50859 +
             ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                  C50518 +
              (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                  C19987) *
                 C50858) *
                C50808) *
               C50617) *
              C281 +
          ((((C13999 * C19987 + C14000 * C50518) * C50858 +
             (C14013 * C19987 + C14014 * C50518) * C50859 +
             ((C14031 + C14032) * C19987 + (C14033 + C14034) * C50518) *
                 C44420) *
                C50645 -
            (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
             ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
                C50808) *
               C50807 +
           ((((C8272 + C8271) * C19987 + (C8270 + C8269) * C50518) * C50858 +
             (C14691 * C19987 + C14692 * C50518) * C50859 +
             ((C14707 + C14708) * C19987 + (C14709 + C14710) * C50518) *
                 C44420) *
                C50808 -
            (((C8030 * C4587 + C50714 * C4595 + C8029 * C4588 +
               C50820 * C4596) *
                  C50518 +
              (C8030 * C4583 + C50714 * C4589 + C8029 * C4584 +
               C50820 * C4590) *
                  C19987) *
                 C44420 +
             ((C14710 + C14709) * C50518 + (C14708 + C14707) * C19987) *
                 C50859 +
             (C14701 * C50518 + C14702 * C19987) * C50858) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            ((C14030 + C14029) * C19987 + (C14028 + C14027) * C50518) *
                C44420) *
               C50581 * C278 -
           (((C15240 + C15239) * C50518 + (C15238 + C15237) * C19987) * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C50581 * C279 +
           (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C19987 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50518) *
                C50858 +
            ((C15895 + C15896) * C19987 + (C15897 + C15898) * C50518) * C50859 +
            ((C8029 * C2693 + C50820 * C2696 + C8030 * C3692 + C50714 * C3696) *
                 C19987 +
             (C8029 * C2697 + C50820 * C2702 + C8030 * C3695 + C50714 * C3698) *
                 C50518) *
                C44420) *
               C50581 * C280) *
              C281 +
          ((((C8272 + C8271) * C19987 + (C8270 + C8269) * C50518) * C50858 +
            (C14691 * C19987 + C14692 * C50518) * C50859 +
            ((C14707 + C14708) * C19987 + (C14709 + C14710) * C50518) *
                C44420) *
               C50581 * C279 -
           ((C14001 * C50518 + C14002 * C19987) * C44420 +
            (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C50581 * C278 -
           (((C8030 * C3693 + C50714 * C3697 + C8029 * C2699 + C50820 * C2703) *
                 C50518 +
             (C8030 * C3691 + C50714 * C3694 + C8029 * C2694 + C50820 * C2698) *
                 C19987) *
                C44420 +
            ((C13796 + C13795) * C50518 + (C13794 + C13793) * C19987) * C50859 +
            ((C8276 + C8275) * C50518 + (C8274 + C8273) * C19987) * C50858) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C19987 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50518) *
               C50858 +
           ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
           ((C14030 + C14029) * C19987 + (C14028 + C14027) * C50518) * C44420) *
              C50581 * C50565 * C113 -
          ((C14001 * C50518 + C14002 * C19987) * C44420 +
           (C14011 * C50518 + C14012 * C19987) * C50859 +
           ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
              C50581 * C50565 * C114 +
          ((C8083 * C19987 + C8084 * C50518) * C50858 +
           (C14423 * C19987 + C14424 * C50518) * C50859 +
           ((C8471 + C8472) * C19987 + (C8473 + C8474) * C50518) * C44420) *
              C50581 * C50565 * C115 -
          (((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                C50518 +
            (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                C19987) *
               C44420 +
           ((C8794 + C8793) * C50518 + (C8792 + C8791) * C19987) * C50859 +
           (C8085 * C50518 + C8086 * C19987) * C50858) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C457 -
           (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C458 +
           (C47425 * C50858 +
            ((C16425 + C16426) * C19987 + (C16427 + C16428) * C50518) * C50859 +
            ((C8029 * C5496 + C50820 * C5499 + C8030 * C6503 + C50714 * C6507) *
                 C19987 +
             (C8029 * C5500 + C50820 * C5505 + C8030 * C6506 + C50714 * C6509) *
                 C50518) *
                C44420) *
               C459) *
              C50565 * C281 +
          (((C13999 * C19987 + C14000 * C50518) * C50858 +
            (C14013 * C19987 + C14014 * C50518) * C50859 +
            ((C14031 + C14032) * C19987 + (C14033 + C14034) * C50518) *
                C44420) *
               C458 -
           (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C457 -
           (((C8030 * C6504 + C50714 * C6508 + C8029 * C5502 + C50820 * C5506) *
                 C50518 +
             (C8030 * C6502 + C50714 * C6505 + C8029 * C5497 + C50820 * C5501) *
                 C19987) *
                C44420 +
            ((C14034 + C14033) * C50518 + (C14032 + C14031) * C19987) * C50859 +
            C47424 * C50858) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C50808 -
           (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C50645) *
              C50565 * C50850 +
          (((C13999 * C19987 + C14000 * C50518) * C50858 +
            (C14013 * C19987 + C14014 * C50518) * C50859 +
            ((C14031 + C14032) * C19987 + (C14033 + C14034) * C50518) *
                C44420) *
               C50645 -
           (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C50808) *
              C50565 * C50851 +
          (((C8083 * C19987 + C8084 * C50518) * C50858 +
            (C14423 * C19987 + C14424 * C50518) * C50859 +
            ((C8471 + C8472) * C19987 + (C8473 + C8474) * C50518) * C44420) *
               C50808 -
           (((C8030 * C6075 + C50714 * C6077 + C8029 * C1852 + C50820 * C1859) *
                 C50518 +
             (C8030 * C6074 + C50714 * C6076 + C8029 * C1847 + C50820 * C1853) *
                 C19987) *
                C44420 +
            ((C8474 + C8473) * C50518 + (C8472 + C8471) * C19987) * C50859 +
            (C8781 * C50518 + C8782 * C19987) * C50858) *
               C50645) *
              C50565 * C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C19987 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50518) *
               C50858 +
           ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
           ((C14030 + C14029) * C19987 + (C14028 + C14027) * C50518) * C44420) *
              C50581 * C50565 * C113 -
          ((C14001 * C50518 + C14002 * C19987) * C44420 +
           (C14011 * C50518 + C14012 * C19987) * C50859 +
           ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
              C50581 * C50565 * C114 +
          ((C8083 * C19987 + C8084 * C50518) * C50858 +
           (C14423 * C19987 + C14424 * C50518) * C50859 +
           ((C8471 + C8472) * C19987 + (C8473 + C8474) * C50518) * C44420) *
              C50581 * C50565 * C115 -
          (((C8030 * C1219 + C50714 * C1227 + C8029 * C485 + C50820 * C497) *
                C50518 +
            (C8030 * C1215 + C50714 * C1220 + C8029 * C467 + C50820 * C484) *
                C19987) *
               C44420 +
           ((C8794 + C8793) * C50518 + (C8792 + C8791) * C19987) * C50859 +
           (C8085 * C50518 + C8086 * C19987) * C50858) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            ((C14030 + C14029) * C19987 + (C14028 + C14027) * C50518) *
                C44420) *
               C50581 * C278 -
           (((C15240 + C15239) * C50518 + (C15238 + C15237) * C19987) * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C50581 * C279 +
           (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C19987 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50518) *
                C50858 +
            ((C15895 + C15896) * C19987 + (C15897 + C15898) * C50518) * C50859 +
            ((C8029 * C2693 + C50820 * C2696 + C8030 * C3692 + C50714 * C3696) *
                 C19987 +
             (C8029 * C2697 + C50820 * C2702 + C8030 * C3695 + C50714 * C3698) *
                 C50518) *
                C44420) *
               C50581 * C280) *
              C281 +
          ((((C8272 + C8271) * C19987 + (C8270 + C8269) * C50518) * C50858 +
            (C14691 * C19987 + C14692 * C50518) * C50859 +
            ((C14707 + C14708) * C19987 + (C14709 + C14710) * C50518) *
                C44420) *
               C50581 * C279 -
           ((C14001 * C50518 + C14002 * C19987) * C44420 +
            (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C50581 * C278 -
           (((C8030 * C3693 + C50714 * C3697 + C8029 * C2699 + C50820 * C2703) *
                 C50518 +
             (C8030 * C3691 + C50714 * C3694 + C8029 * C2694 + C50820 * C2698) *
                 C19987) *
                C44420 +
            ((C13796 + C13795) * C50518 + (C13794 + C13793) * C19987) * C50859 +
            ((C8276 + C8275) * C50518 + (C8274 + C8273) * C19987) * C50858) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C50581 * C50852 -
           (C48318 * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C50581 * C50853 +
           (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C19987 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50518) *
                C50858 +
            ((C15895 + C15896) * C19987 + (C15897 + C15898) * C50518) * C50859 +
            ((C8029 * C2693 + C50820 * C2696 + C8030 * C3692 + C50714 * C3696) *
                 C19987 +
             (C8029 * C2697 + C50820 * C2702 + C8030 * C3695 + C50714 * C3698) *
                 C50518) *
                C44420) *
               C50581 * C1331) *
              C50799 +
          ((((C8272 + C8271) * C19987 + (C8270 + C8269) * C50518) * C50858 +
            (C14691 * C19987 + C14692 * C50518) * C50859 +
            ((C14707 + C14708) * C19987 + (C14709 + C14710) * C50518) *
                C44420) *
               C50581 * C50853 -
           (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C50581 * C50852 -
           (((C8030 * C3693 + C50714 * C3697 + C8029 * C2699 + C50820 * C2703) *
                 C50518 +
             (C8030 * C3691 + C50714 * C3694 + C8029 * C2694 + C50820 * C2698) *
                 C19987) *
                C44420 +
            ((C13796 + C13795) * C50518 + (C13794 + C13793) * C19987) * C50859 +
            ((C8276 + C8275) * C50518 + (C8274 + C8273) * C19987) * C50858) *
               C50581 * C1331) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C50808 -
           (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C50645) *
              C50852 +
          ((((C14703 + C14704) * C19987 + (C14705 + C14706) * C50518) * C50858 +
            ((C15237 + C15238) * C19987 + (C15239 + C15240) * C50518) * C50859 +
            ((C48312 + C48313) * C19987 + (C48314 + C48315) * C50518) *
                C44420) *
               C50645 -
           (C48318 * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C50808) *
              C50853 +
          ((((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C19987 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50518) *
                C50858 +
            ((C15895 + C15896) * C19987 + (C15897 + C15898) * C50518) * C50859 +
            ((C48813 + C48814) * C19987 + (C48815 + C48816) * C50518) *
                C44420) *
               C50808 -
           (((C8030 * C21373 + C50714 * C21375 + C8029 * C4591 +
              C50820 * C4597) *
                 C50518 +
             (C8030 * C21372 + C50714 * C21374 + C8029 * C4585 +
              C50820 * C4593) *
                 C19987) *
                C44420 +
            ((C48816 + C48815) * C50518 + (C48814 + C48813) * C19987) * C50859 +
            ((C15898 + C15897) * C50518 + (C15896 + C15895) * C19987) *
                C50858) *
               C50645) *
              C1331) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C19987 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50518) *
               C50858 +
           ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
           C47425 * C44420) *
              C50581 * C1096 -
          (((C15240 + C15239) * C50518 + (C15238 + C15237) * C19987) * C44420 +
           ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
           ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50518 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C19987) *
               C50858) *
              C50581 * C1097 +
          (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C19987 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50518) *
               C50858 +
           ((C15895 + C15896) * C19987 + (C15897 + C15898) * C50518) * C50859 +
           ((C8029 * C2693 + C50820 * C2696 + C8030 * C3692 + C50714 * C3696) *
                C19987 +
            (C8029 * C2697 + C50820 * C2702 + C8030 * C3695 + C50714 * C3698) *
                C50518) *
               C44420) *
              C50581 * C1098 -
          (((C8030 * C20777 + C50714 * C20779 + C8029 * C3695 +
             C50820 * C3698) *
                C50518 +
            (C8030 * C20776 + C50714 * C20778 + C8029 * C3692 +
             C50820 * C3696) *
                C19987) *
               C44420 +
           ((C8030 * C4189 + C50714 * C4192 + C8029 * C3267 + C50820 * C3272) *
                C50518 +
            (C8030 * C4186 + C50714 * C4190 + C8029 * C3263 + C50820 * C3266) *
                C19987) *
               C50859 +
           ((C8030 * C2503 + C50714 * C2508 + C8029 * C1111 + C50820 * C1116) *
                C50518 +
            (C8030 * C2499 + C50714 * C2502 + C8029 * C1104 + C50820 * C1112) *
                C19987) *
               C50858) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C50581 * C1025 -
           (((C15240 + C15239) * C50518 + (C15238 + C15237) * C19987) * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C50581 * C50617) *
              C1027 +
          ((((C8272 + C8271) * C19987 + (C8270 + C8269) * C50518) * C50858 +
            (C14691 * C19987 + C14692 * C50518) * C50859 +
            ((C14707 + C14708) * C19987 + (C14709 + C14710) * C50518) *
                C44420) *
               C50581 * C50617 -
           (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C50581 * C1025) *
              C1028 +
          (((C8083 * C19987 + C8084 * C50518) * C50858 +
            (C14423 * C19987 + C14424 * C50518) * C50859 +
            ((C8471 + C8472) * C19987 + (C8473 + C8474) * C50518) * C44420) *
               C50581 * C1025 -
           (((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 + C50820 * C1228) *
                 C50518 +
             (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 + C50820 * C1222) *
                 C19987) *
                C44420 +
            ((C9012 + C9011) * C50518 + (C9010 + C9009) * C19987) * C50859 +
            (C8621 * C50518 + C8622 * C19987) * C50858) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C457 -
           (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C458 +
           (C47425 * C50858 +
            ((C16425 + C16426) * C19987 + (C16427 + C16428) * C50518) * C50859 +
            ((C8029 * C5496 + C50820 * C5499 + C8030 * C6503 + C50714 * C6507) *
                 C19987 +
             (C8029 * C5500 + C50820 * C5505 + C8030 * C6506 + C50714 * C6509) *
                 C50518) *
                C44420) *
               C459) *
              C1025 +
          ((((C14703 + C14704) * C19987 + (C14705 + C14706) * C50518) * C50858 +
            ((C15237 + C15238) * C19987 + (C15239 + C15240) * C50518) * C50859 +
            ((C48312 + C48313) * C19987 + (C48314 + C48315) * C50518) *
                C44420) *
               C458 -
           (C48318 * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C457 -
           (((C8030 * C23063 + C50714 * C23065 + C8029 * C6506 +
              C50820 * C6509) *
                 C50518 +
             (C8030 * C23062 + C50714 * C23064 + C8029 * C6503 +
              C50820 * C6507) *
                 C19987) *
                C44420 +
            ((C48315 + C48314) * C50518 + (C48313 + C48312) * C19987) * C50859 +
            C48318 * C50858) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                  C19987 +
              (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                  C50518) *
                 C50858 +
             ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) *
                 C50859 +
             C47425 * C44420) *
                C50808 -
            (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) *
                 C44420 +
             ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) *
                 C50859 +
             ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                 C50858) *
                C50645) *
               C1025 +
           ((((C14703 + C14704) * C19987 + (C14705 + C14706) * C50518) *
                 C50858 +
             ((C15237 + C15238) * C19987 + (C15239 + C15240) * C50518) *
                 C50859 +
             ((C48312 + C48313) * C19987 + (C48314 + C48315) * C50518) *
                 C44420) *
                C50645 -
            (C48318 * C44420 +
             ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) *
                 C50859 +
             ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                  C50518 +
              (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                  C19987) *
                 C50858) *
                C50808) *
               C50617) *
              C50799 +
          ((((C13999 * C19987 + C14000 * C50518) * C50858 +
             (C14013 * C19987 + C14014 * C50518) * C50859 +
             ((C14031 + C14032) * C19987 + (C14033 + C14034) * C50518) *
                 C44420) *
                C50645 -
            (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
             ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
                C50808) *
               C1025 +
           ((((C8272 + C8271) * C19987 + (C8270 + C8269) * C50518) * C50858 +
             (C14691 * C19987 + C14692 * C50518) * C50859 +
             ((C14707 + C14708) * C19987 + (C14709 + C14710) * C50518) *
                 C44420) *
                C50808 -
            (((C8030 * C4587 + C50714 * C4595 + C8029 * C4588 +
               C50820 * C4596) *
                  C50518 +
              (C8030 * C4583 + C50714 * C4589 + C8029 * C4584 +
               C50820 * C4590) *
                  C19987) *
                 C44420 +
             ((C14710 + C14709) * C50518 + (C14708 + C14707) * C19987) *
                 C50859 +
             (C14701 * C50518 + C14702 * C19987) * C50858) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C50581 * C1025 -
           (((C15240 + C15239) * C50518 + (C15238 + C15237) * C19987) * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C50581 * C50617) *
              C1027 +
          ((((C8272 + C8271) * C19987 + (C8270 + C8269) * C50518) * C50858 +
            (C14691 * C19987 + C14692 * C50518) * C50859 +
            ((C14707 + C14708) * C19987 + (C14709 + C14710) * C50518) *
                C44420) *
               C50581 * C50617 -
           (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C50581 * C1025) *
              C1028 +
          (((C8083 * C19987 + C8084 * C50518) * C50858 +
            (C14423 * C19987 + C14424 * C50518) * C50859 +
            ((C8471 + C8472) * C19987 + (C8473 + C8474) * C50518) * C44420) *
               C50581 * C1025 -
           (((C8030 * C2700 + C50714 * C2704 + C8029 * C1221 + C50820 * C1228) *
                 C50518 +
             (C8030 * C2695 + C50714 * C2701 + C8029 * C1216 + C50820 * C1222) *
                 C19987) *
                C44420 +
            ((C9012 + C9011) * C50518 + (C9010 + C9009) * C19987) * C50859 +
            (C8621 * C50518 + C8622 * C19987) * C50858) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C19987 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50518) *
               C50858 +
           ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
           C47425 * C44420) *
              C50581 * C1096 -
          (((C15240 + C15239) * C50518 + (C15238 + C15237) * C19987) * C44420 +
           ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
           ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                C50518 +
            (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                C19987) *
               C50858) *
              C50581 * C1097 +
          (((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                C19987 +
            (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                C50518) *
               C50858 +
           ((C15895 + C15896) * C19987 + (C15897 + C15898) * C50518) * C50859 +
           ((C8029 * C2693 + C50820 * C2696 + C8030 * C3692 + C50714 * C3696) *
                C19987 +
            (C8029 * C2697 + C50820 * C2702 + C8030 * C3695 + C50714 * C3698) *
                C50518) *
               C44420) *
              C50581 * C1098 -
          (((C8030 * C20777 + C50714 * C20779 + C8029 * C3695 +
             C50820 * C3698) *
                C50518 +
            (C8030 * C20776 + C50714 * C20778 + C8029 * C3692 +
             C50820 * C3696) *
                C19987) *
               C44420 +
           ((C8030 * C4189 + C50714 * C4192 + C8029 * C3267 + C50820 * C3272) *
                C50518 +
            (C8030 * C4186 + C50714 * C4190 + C8029 * C3263 + C50820 * C3266) *
                C19987) *
               C50859 +
           ((C8030 * C2503 + C50714 * C2508 + C8029 * C1111 + C50820 * C1116) *
                C50518 +
            (C8030 * C2499 + C50714 * C2502 + C8029 * C1104 + C50820 * C1112) *
                C19987) *
               C50858) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                  C19987 +
              (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                  C50518) *
                 C50858 +
             ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) *
                 C50859 +
             C47425 * C44420) *
                C1676 -
            (C49223 * C44420 +
             ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) *
                 C50859 +
             ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                 C50858) *
                C50645) *
               C50807 +
           ((((C14703 + C14704) * C19987 + (C14705 + C14706) * C50518) *
                 C50858 +
             ((C15237 + C15238) * C19987 + (C15239 + C15240) * C50518) *
                 C50859 +
             ((C48312 + C48313) * C19987 + (C48314 + C48315) * C50518) *
                 C44420) *
                C50645 -
            (C48318 * C44420 +
             ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) *
                 C50859 +
             ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                  C50518 +
              (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                  C19987) *
                 C50858) *
                C1676) *
               C50617) *
              C50799 +
          ((((C13999 * C19987 + C14000 * C50518) * C50858 +
             (C14013 * C19987 + C14014 * C50518) * C50859 +
             ((C14031 + C14032) * C19987 + (C14033 + C14034) * C50518) *
                 C44420) *
                C50645 -
            (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
             ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
                C1676) *
               C50807 +
           ((((C8272 + C8271) * C19987 + (C8270 + C8269) * C50518) * C50858 +
             (C14691 * C19987 + C14692 * C50518) * C50859 +
             ((C14707 + C14708) * C19987 + (C14709 + C14710) * C50518) *
                 C44420) *
                C1676 -
            (((C8030 * C4587 + C50714 * C4595 + C8029 * C4588 +
               C50820 * C4596) *
                  C50518 +
              (C8030 * C4583 + C50714 * C4589 + C8029 * C4584 +
               C50820 * C4590) *
                  C19987) *
                 C44420 +
             ((C14710 + C14709) * C50518 + (C14708 + C14707) * C19987) *
                 C50859 +
             (C14701 * C50518 + C14702 * C19987) * C50858) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C50854 -
           (C49223 * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C50855 +
           (C47425 * C50858 +
            ((C16425 + C16426) * C19987 + (C16427 + C16428) * C50518) * C50859 +
            ((C49219 + C49220) * C19987 + (C49221 + C49222) * C50518) *
                C44420) *
               C2092) *
              C50807 +
          ((((C14703 + C14704) * C19987 + (C14705 + C14706) * C50518) * C50858 +
            ((C15237 + C15238) * C19987 + (C15239 + C15240) * C50518) * C50859 +
            ((C48312 + C48313) * C19987 + (C48314 + C48315) * C50518) *
                C44420) *
               C50855 -
           (C48318 * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C50854 -
           (((C8030 * C23063 + C50714 * C23065 + C8029 * C6506 +
              C50820 * C6509) *
                 C50518 +
             (C8030 * C23062 + C50714 * C23064 + C8029 * C6503 +
              C50820 * C6507) *
                 C19987) *
                C44420 +
            ((C48315 + C48314) * C50518 + (C48313 + C48312) * C19987) * C50859 +
            C48318 * C50858) *
               C2092) *
              C50617) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C1676 -
           (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C50645) *
              C278 +
          ((((C14703 + C14704) * C19987 + (C14705 + C14706) * C50518) * C50858 +
            ((C15237 + C15238) * C19987 + (C15239 + C15240) * C50518) * C50859 +
            ((C48312 + C48313) * C19987 + (C48314 + C48315) * C50518) *
                C44420) *
               C50645 -
           (C48318 * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C1676) *
              C279 +
          ((((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C19987 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50518) *
                C50858 +
            ((C15895 + C15896) * C19987 + (C15897 + C15898) * C50518) * C50859 +
            ((C48813 + C48814) * C19987 + (C48815 + C48816) * C50518) *
                C44420) *
               C1676 -
           (((C8030 * C21373 + C50714 * C21375 + C8029 * C4591 +
              C50820 * C4597) *
                 C50518 +
             (C8030 * C21372 + C50714 * C21374 + C8029 * C4585 +
              C50820 * C4593) *
                 C19987) *
                C44420 +
            ((C48816 + C48815) * C50518 + (C48814 + C48813) * C19987) * C50859 +
            ((C15898 + C15897) * C50518 + (C15896 + C15895) * C19987) *
                C50858) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C1676 -
           (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C50645) *
              C50565 * C1027 +
          (((C13999 * C19987 + C14000 * C50518) * C50858 +
            (C14013 * C19987 + C14014 * C50518) * C50859 +
            ((C14031 + C14032) * C19987 + (C14033 + C14034) * C50518) *
                C44420) *
               C50645 -
           (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C1676) *
              C50565 * C1028 +
          (((C8083 * C19987 + C8084 * C50518) * C50858 +
            (C14423 * C19987 + C14424 * C50518) * C50859 +
            ((C8471 + C8472) * C19987 + (C8473 + C8474) * C50518) * C44420) *
               C1676 -
           (((C8030 * C6075 + C50714 * C6077 + C8029 * C1852 + C50820 * C1859) *
                 C50518 +
             (C8030 * C6074 + C50714 * C6076 + C8029 * C1847 + C50820 * C1853) *
                 C19987) *
                C44420 +
            ((C8474 + C8473) * C50518 + (C8472 + C8471) * C19987) * C50859 +
            (C8781 * C50518 + C8782 * C19987) * C50858) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                C19987 +
            (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                C50518) *
               C50858 +
           ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
           C47425 * C44420) *
              C1842 -
          (C49223 * C44420 +
           ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
           ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) * C50858) *
              C1843 +
          (C47425 * C50858 +
           ((C16425 + C16426) * C19987 + (C16427 + C16428) * C50518) * C50859 +
           ((C49219 + C49220) * C19987 + (C49221 + C49222) * C50518) * C44420) *
              C1844 -
          (((C8030 * C23984 + C50714 * C23986 + C8029 * C7423 +
             C50820 * C7426) *
                C50518 +
            (C8030 * C23983 + C50714 * C23985 + C8029 * C7420 +
             C50820 * C7424) *
                C19987) *
               C44420 +
           ((C49222 + C49221) * C50518 + (C49220 + C49219) * C19987) * C50859 +
           C49223 * C50858) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C50854 -
           (C49223 * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C50855 +
           (C47425 * C50858 +
            ((C16425 + C16426) * C19987 + (C16427 + C16428) * C50518) * C50859 +
            ((C49219 + C49220) * C19987 + (C49221 + C49222) * C50518) *
                C44420) *
               C2092) *
              C50565 * C50799 +
          (((C13999 * C19987 + C14000 * C50518) * C50858 +
            (C14013 * C19987 + C14014 * C50518) * C50859 +
            ((C14031 + C14032) * C19987 + (C14033 + C14034) * C50518) *
                C44420) *
               C50855 -
           (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C50854 -
           (((C8030 * C6504 + C50714 * C6508 + C8029 * C5502 + C50820 * C5506) *
                 C50518 +
             (C8030 * C6502 + C50714 * C6505 + C8029 * C5497 + C50820 * C5501) *
                 C19987) *
                C44420 +
            ((C14034 + C14033) * C50518 + (C14032 + C14031) * C19987) * C50859 +
            C47424 * C50858) *
               C2092) *
              C50565 * C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C1676 -
           (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C50645) *
              C50565 * C1027 +
          (((C13999 * C19987 + C14000 * C50518) * C50858 +
            (C14013 * C19987 + C14014 * C50518) * C50859 +
            ((C14031 + C14032) * C19987 + (C14033 + C14034) * C50518) *
                C44420) *
               C50645 -
           (C47424 * C44420 + (C14011 * C50518 + C14012 * C19987) * C50859 +
            ((C8070 + C8069) * C50518 + (C8068 + C8067) * C19987) * C50858) *
               C1676) *
              C50565 * C1028 +
          (((C8083 * C19987 + C8084 * C50518) * C50858 +
            (C14423 * C19987 + C14424 * C50518) * C50859 +
            ((C8471 + C8472) * C19987 + (C8473 + C8474) * C50518) * C44420) *
               C1676 -
           (((C8030 * C6075 + C50714 * C6077 + C8029 * C1852 + C50820 * C1859) *
                 C50518 +
             (C8030 * C6074 + C50714 * C6076 + C8029 * C1847 + C50820 * C1853) *
                 C19987) *
                C44420 +
            ((C8474 + C8473) * C50518 + (C8472 + C8471) * C19987) * C50859 +
            (C8781 * C50518 + C8782 * C19987) * C50858) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8029 * C122 + C50820 * C129 + C8030 * C286 + C50714 * C300) *
                 C19987 +
             (C8029 * C130 + C50820 * C143 + C8030 * C299 + C50714 * C316) *
                 C50518) *
                C50858 +
            ((C14023 + C14024) * C19987 + (C14025 + C14026) * C50518) * C50859 +
            C47425 * C44420) *
               C1676 -
           (((C16428 + C16427) * C50518 + (C16426 + C16425) * C19987) * C44420 +
            ((C14027 + C14028) * C50518 + (C14029 + C14030) * C19987) * C50859 +
            ((C14026 + C14025) * C50518 + (C14024 + C14023) * C19987) *
                C50858) *
               C50645) *
              C278 +
          ((((C14703 + C14704) * C19987 + (C14705 + C14706) * C50518) * C50858 +
            ((C15237 + C15238) * C19987 + (C15239 + C15240) * C50518) * C50859 +
            ((C48312 + C48313) * C19987 + (C48314 + C48315) * C50518) *
                C44420) *
               C50645 -
           (C48318 * C44420 +
            ((C14706 + C14705) * C50518 + (C14704 + C14703) * C19987) * C50859 +
            ((C8030 * C302 + C50714 * C317 + C8029 * C299 + C50820 * C316) *
                 C50518 +
             (C8030 * C287 + C50714 * C301 + C8029 * C286 + C50820 * C300) *
                 C19987) *
                C50858) *
               C1676) *
              C279 +
          ((((C8029 * C287 + C50820 * C301 + C8030 * C1104 + C50714 * C1112) *
                 C19987 +
             (C8029 * C302 + C50820 * C317 + C8030 * C1111 + C50714 * C1116) *
                 C50518) *
                C50858 +
            ((C15895 + C15896) * C19987 + (C15897 + C15898) * C50518) * C50859 +
            ((C48813 + C48814) * C19987 + (C48815 + C48816) * C50518) *
                C44420) *
               C1676 -
           (((C8030 * C21373 + C50714 * C21375 + C8029 * C4591 +
              C50820 * C4597) *
                 C50518 +
             (C8030 * C21372 + C50714 * C21374 + C8029 * C4585 +
              C50820 * C4593) *
                 C19987) *
                C44420 +
            ((C48816 + C48815) * C50518 + (C48814 + C48813) * C19987) * C50859 +
            ((C15898 + C15897) * C50518 + (C15896 + C15895) * C19987) *
                C50858) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50581 * C50807 -
           (((C2296 * C3267 + C2291 * C3272 + C2295 * C1572 + C2290 * C1577 +
              C2294 * C895 + C2289 * C904) *
                 C50518 +
             (C2296 * C3263 + C2291 * C3266 + C2295 * C1565 + C2290 * C1573 +
              C2294 * C889 + C2289 * C894) *
                 C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C50617) *
              C50850 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C50617 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C50807) *
              C50851 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C50581 * C50807 -
           (((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50518 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C19987) *
                C50742 +
            ((C2905 + C2904 + C2903) * C50518 +
             (C2902 + C2901 + C2900) * C19987) *
                C33658) *
               C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50581 * C50807 -
           ((C925 * C17176 + C924 * C17181 + C923 * C17175 + C922 * C17180 +
             C6104 * C17174 + C6103 * C17179) *
                C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C50617) *
              C50850 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C922 * C17179 + C923 * C17174 + C924 * C17180 + C925 * C17175 +
             C926 * C17181 + C927 * C17176) *
                C50742) *
               C50581 * C50617 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C50807) *
              C50851 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C528 * C17179 + C527 * C17174 + C526 * C17180 + C525 * C17175 +
             C758 * C17181 + C759 * C17176) *
                C50742) *
               C50581 * C50807 -
           (((C117 * C902 + C50662 * C908) * C17176 +
             (C117 * C893 + C50662 * C903) * C17181 + C927 * C17175 +
             C926 * C17180 + C925 * C17174 + C924 * C17179) *
                C50742 +
            (C649 * C17176 + C648 * C17181 + C348 * C17175 + C349 * C17180 +
             C350 * C17174 + C351 * C17179) *
                C33658) *
               C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C50581 * C50807 -
           ((C6519 * C50518 + C6518 * C19987) * C39055 +
            (C6106 * C50518 + C6105 * C19987) * C39054 +
            (C6104 * C50518 + C6103 * C19987) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C50581 * C50617) *
              C50850 +
          (((C353 * C19987 + C352 * C50518) * C39052 +
            (C922 * C19987 + C923 * C50518) * C39053 +
            (C5346 * C19987 + C5345 * C50518) * C39054 +
            (C6107 * C19987 + C6108 * C50518) * C39055) *
               C50581 * C50617 -
           (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C50581 * C50807) *
              C50851 +
          (((C173 * C19987 + C174 * C50518) * C39052 +
            (C528 * C19987 + C527 * C50518) * C39053 +
            (C533 * C19987 + C534 * C50518) * C39054 +
            (C5555 * C19987 + C5556 * C50518) * C39055) *
               C50581 * C50807 -
           (((C117 * C6075 + C50662 * C6077) * C50518 +
             (C117 * C6074 + C50662 * C6076) * C19987) *
                C39055 +
            (C5726 * C50518 + C5725 * C19987) * C39054 +
            (C925 * C50518 + C924 * C19987) * C39053 +
            (C350 * C50518 + C351 * C19987) * C39052) *
               C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
               C2296 * C287 + C2291 * C301) *
                  C19987 +
              (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
               C2296 * C302 + C2291 * C317) *
                  C50518) *
                 C33658 +
             ((C36665 + C36666 + C36667) * C19987 +
              (C36668 + C36669 + C36670) * C50518) *
                 C50742) *
                C50808 -
            (((C36671 + C36672 + C36673) * C50518 +
              (C36674 + C36675 + C36676) * C19987) *
                 C50742 +
             ((C36670 + C36669 + C36668) * C50518 +
              (C36667 + C36666 + C36665) * C19987) *
                 C33658) *
                C50645) *
               C50807 +
           ((((C37175 + C37176 + C37177) * C19987 +
              (C37178 + C37179 + C37180) * C50518) *
                 C33658 +
             ((C2294 * C1218 + C2289 * C1226 + C2295 * C2693 + C2290 * C2696 +
               C2296 * C3692 + C2291 * C3696) *
                  C19987 +
              (C2294 * C1225 + C2289 * C1230 + C2295 * C2697 + C2290 * C2702 +
               C2296 * C3695 + C2291 * C3698) *
                  C50518) *
                 C50742) *
                C50645 -
            (((C37180 + C37179 + C37178) * C50518 +
              (C37177 + C37176 + C37175) * C19987) *
                 C50742 +
             ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
               C2294 * C299 + C2289 * C316) *
                  C50518 +
              (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
               C2294 * C286 + C2289 * C300) *
                  C19987) *
                 C33658) *
                C50808) *
               C50617) *
              C281 +
          (((((C2735 + C2734 + C2733) * C19987 +
              (C2732 + C2731 + C2730) * C50518) *
                 C33658 +
             ((C2736 + C2737 + C2738) * C19987 +
              (C2739 + C2740 + C2741) * C50518) *
                 C50742) *
                C50645 -
            (((C2730 + C2731 + C2732) * C50518 +
              (C2733 + C2734 + C2735) * C19987) *
                 C50742 +
             ((C2341 + C2340 + C2339) * C50518 +
              (C2338 + C2337 + C2336) * C19987) *
                 C33658) *
                C50808) *
               C50807 +
           ((((C2541 + C2540 + C2539) * C19987 +
              (C2538 + C2537 + C2536) * C50518) *
                 C33658 +
             ((C3288 + C3289 + C3290) * C19987 +
              (C3291 + C3292 + C3293) * C50518) *
                 C50742) *
                C50808 -
            (((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
               C2294 * C1223 + C2289 * C1229) *
                  C50518 +
              (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
               C2294 * C1217 + C2289 * C1224) *
                  C19987) *
                 C50742 +
             ((C3293 + C3292 + C3291) * C50518 +
              (C3290 + C3289 + C3288) * C19987) *
                 C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C17179 +
              (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
              C172 * C17175 + C173 * C17181 + C174 * C17176) *
                 C33658 +
             (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
                C50808 -
            ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
             (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
                C50645) *
               C50807 +
           (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
             (C6105 * C17179 + C6106 * C17174 + C5346 * C17180 +
              C5345 * C17175 + C5725 * C17181 + C5726 * C17176) *
                 C50742) *
                C50645 -
            ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
             (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
              (C117 * C299 + C50662 * C316) * C17174 +
              (C117 * C286 + C50662 * C300) * C17179) *
                 C33658) *
                C50808) *
               C50617) *
              C281 +
          ((((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
             (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
                C50645 -
            ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
             (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
              C172 * C17174 + C171 * C17179) *
                 C33658) *
                C50808) *
               C50807 +
           (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
              C349 * C17181 + C348 * C17176) *
                 C33658 +
             (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
                C50808 -
            (((C117 * C1219 + C50662 * C1227) * C17176 +
              (C117 * C1215 + C50662 * C1220) * C17181 + C5726 * C17175 +
              C5725 * C17180 + C5345 * C17174 + C5346 * C17179) *
                 C50742 +
             (C34480 + C34479 + C34478 + C34477 + C34476 + C34475) * C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C19987 +
              (C117 * C130 + C50662 * C143) * C50518) *
                 C39052 +
             (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
                C50808 -
            ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
             (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
                C50645) *
               C50807 +
           (((C39605 + C39606) * C39052 + (C39607 + C39608) * C39053 +
             (C39609 + C39610) * C39054 +
             ((C117 * C6503 + C50662 * C6507) * C19987 +
              (C117 * C6506 + C50662 * C6509) * C50518) *
                 C39055) *
                C50645 -
            ((C39610 + C39609) * C39055 + (C39608 + C39607) * C39054 +
             (C39606 + C39605) * C39053 +
             ((C117 * C299 + C50662 * C316) * C50518 +
              (C117 * C286 + C50662 * C300) * C19987) *
                 C39052) *
                C50808) *
               C50617) *
              C281 +
          ((((C39261 + C39262) * C39052 + (C39263 + C39264) * C39053 +
             (C39265 + C39266) * C39054 + (C39267 + C39268) * C39055) *
                C50645 -
            (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
             (C172 * C50518 + C171 * C19987) * C39052) *
                C50808) *
               C50807 +
           (((C353 * C19987 + C352 * C50518) * C39052 +
             (C39611 + C39612) * C39053 + (C39613 + C39614) * C39054 +
             (C39615 + C39616) * C39055) *
                C50808 -
            (((C117 * C6504 + C50662 * C6508) * C50518 +
              (C117 * C6502 + C50662 * C6505) * C19987) *
                 C39055 +
             (C39616 + C39615) * C39054 + (C39614 + C39613) * C39053 +
             (C39612 + C39611) * C39052) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50662 * C129) * C17179 +
                (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
                C172 * C17175 + C173 * C17181 + C174 * C17176) *
                   C33658 +
               (C5545 * C17179 + C5546 * C17174 + C530 * C17180 +
                C529 * C17175 + C528 * C17181 + C527 * C17176) *
                   C50742) *
                  C50581 * C50565 * C113 -
              ((C525 * C17176 + C526 * C17181 + C527 * C17175 + C528 * C17180 +
                C529 * C17174 + C530 * C17179) *
                   C50742 +
               (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
                C172 * C17174 + C171 * C17179) *
                   C33658) *
                  C50581 * C50565 * C114 +
              ((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
                C178 * C17181 + C177 * C17176) *
                   C33658 +
               (C528 * C17179 + C527 * C17174 + C526 * C17180 + C525 * C17175 +
                C758 * C17181 + C759 * C17176) *
                   C50742) *
                  C50581 * C50565 * C115 -
              (((C117 * C750 + C50662 * C752) * C17176 +
                (C117 * C749 + C50662 * C751) * C17181 + C759 * C17175 +
                C758 * C17180 + C525 * C17174 + C526 * C17179) *
                   C50742 +
               (C180 * C17176 + C179 * C17181 + C177 * C17175 + C178 * C17180 +
                C176 * C17174 + C175 * C17179) *
                   C33658) *
                  C50581 * C50565 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50662 * C129) * C17179 +
                 (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
                 C172 * C17175 + C173 * C17181 + C174 * C17176) *
                    C33658 +
                (C5545 * C17179 + C5546 * C17174 + C530 * C17180 +
                 C529 * C17175 + C528 * C17181 + C527 * C17176) *
                    C50742) *
                   C50581 * C278 -
               ((C925 * C17176 + C924 * C17181 + C923 * C17175 + C922 * C17180 +
                 C6104 * C17174 + C6103 * C17179) *
                    C50742 +
                (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
                 (C117 * C299 + C50662 * C316) * C17174 +
                 (C117 * C286 + C50662 * C300) * C17179) *
                    C33658) *
                   C50581 * C279 +
               (((C117 * C287 + C50662 * C301) * C17179 +
                 (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
                 C355 * C17175 + C356 * C17181 + C357 * C17176) *
                    C33658 +
                (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 +
                 C5348 * C17175 + C11015 * C17181 + C11016 * C17176) *
                    C50742) *
                   C50581 * C280) *
                  C281 +
              (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
                 C349 * C17181 + C348 * C17176) *
                    C33658 +
                (C922 * C17179 + C923 * C17174 + C924 * C17180 + C925 * C17175 +
                 C926 * C17181 + C927 * C17176) *
                    C50742) *
                   C50581 * C279 -
               ((C525 * C17176 + C526 * C17181 + C527 * C17175 + C528 * C17180 +
                 C529 * C17174 + C530 * C17179) *
                    C50742 +
                (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
                 C172 * C17174 + C171 * C17179) *
                    C33658) *
                   C50581 * C278 -
               (((C117 * C1566 + C50662 * C1574) * C17176 +
                 (C117 * C1562 + C50662 * C1567) * C17181 + C11016 * C17175 +
                 C11015 * C17180 + C5348 * C17174 + C5347 * C17179) *
                    C50742 +
                (C359 * C17176 + C358 * C17181 + C357 * C17175 + C356 * C17180 +
                 C355 * C17174 + C354 * C17179) *
                    C33658) *
                   C50581 * C280) *
                  C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C457 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C458 +
           ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
            (C5552 * C17179 + C5551 * C17174 + C5550 * C17180 + C5549 * C17175 +
             C5555 * C17181 + C5556 * C17176) *
                C50742) *
               C459) *
              C50565 * C281 +
          (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
            (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
               C458 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C457 -
           (((C117 * C1850 + C50662 * C1858) * C17176 +
             (C117 * C1846 + C50662 * C1851) * C17181 + C5556 * C17175 +
             C5555 * C17180 + C5549 * C17174 + C5550 * C17179) *
                C50742 +
            (C33976 + C33975 + C33974 + C33973 + C33972 + C33971) * C33658) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C2294 * C463 + C2289 * C477 + C2295 * C889 + C2290 * C894 +
             C2296 * C1565 + C2291 * C1573) *
                C19987 +
            (C2294 * C476 + C2289 * C493 + C2295 * C895 + C2290 * C904 +
             C2296 * C1572 + C2291 * C1577) *
                C50518) *
               C50742) *
              C50581 * C50565 * C113 -
          (((C2730 + C2731 + C2732) * C50518 +
            (C2733 + C2734 + C2735) * C19987) *
               C50742 +
           ((C2341 + C2340 + C2339) * C50518 +
            (C2338 + C2337 + C2336) * C19987) *
               C33658) *
              C50581 * C50565 * C114 +
          (((C2347 + C2346 + C2345) * C19987 +
            (C2344 + C2343 + C2342) * C50518) *
               C33658 +
           ((C3064 + C3065 + C3066) * C19987 +
            (C3067 + C3068 + C3069) * C50518) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50518 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C19987) *
               C50742 +
           ((C2353 + C2352 + C2351) * C50518 +
            (C2350 + C2349 + C2348) * C19987) *
               C33658) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C2294 * C463 + C2289 * C477 + C2295 * C889 + C2290 * C894 +
              C2296 * C1565 + C2291 * C1573) *
                 C19987 +
             (C2294 * C476 + C2289 * C493 + C2295 * C895 + C2290 * C904 +
              C2296 * C1572 + C2291 * C1577) *
                 C50518) *
                C50742) *
               C50581 * C278 -
           (((C2296 * C3267 + C2291 * C3272 + C2295 * C1572 + C2290 * C1577 +
              C2294 * C895 + C2289 * C904) *
                 C50518 +
             (C2296 * C3263 + C2291 * C3266 + C2295 * C1565 + C2290 * C1573 +
              C2294 * C889 + C2289 * C894) *
                 C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C279 +
           (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
              C2296 * C4186 + C2291 * C4190) *
                 C19987 +
             (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
              C2296 * C4189 + C2291 * C4192) *
                 C50518) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C279 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C278 -
           (((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
              C2294 * C1570 + C2289 * C1576) *
                 C50518 +
             (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
              C2294 * C1564 + C2289 * C1571) *
                 C19987) *
                C50742 +
            ((C2547 + C2546 + C2545) * C50518 +
             (C2544 + C2543 + C2542) * C19987) *
                C33658) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C457 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C458 +
           (((C36676 + C36675 + C36674) * C19987 +
             (C36673 + C36672 + C36671) * C50518) *
                C33658 +
            ((C2294 * C1849 + C2289 * C1857 + C2295 * C4586 + C2290 * C4594 +
              C2296 * C4585 + C2291 * C4593) *
                 C19987 +
             (C2294 * C1856 + C2289 * C1861 + C2295 * C4592 + C2290 * C4598 +
              C2296 * C4591 + C2291 * C4597) *
                 C50518) *
                C50742) *
               C459) *
              C50565 * C281 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C458 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C457 -
           (((C2296 * C4587 + C2291 * C4595 + C2295 * C4588 + C2290 * C4596 +
              C2294 * C1854 + C2289 * C1860) *
                 C50518 +
             (C2296 * C4583 + C2291 * C4589 + C2295 * C4584 + C2290 * C4590 +
              C2294 * C1848 + C2289 * C1855) *
                 C19987) *
                C50742 +
            ((C2741 + C2740 + C2739) * C50518 +
             (C2738 + C2737 + C2736) * C19987) *
                C33658) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C117 * C122 + C50662 * C129) * C19987 +
                                (C117 * C130 + C50662 * C143) * C50518) *
                                   C39052 +
                               (C5545 * C19987 + C5546 * C50518) * C39053 +
                               (C5547 * C19987 + C5548 * C50518) * C39054 +
                               (C5552 * C19987 + C5551 * C50518) * C39055) *
                                  C50581 * C50565 * C113 -
                              ((C5549 * C50518 + C5550 * C19987) * C39055 +
                               (C532 * C50518 + C531 * C19987) * C39054 +
                               (C529 * C50518 + C530 * C19987) * C39053 +
                               (C172 * C50518 + C171 * C19987) * C39052) *
                                  C50581 * C50565 * C114 +
                              ((C173 * C19987 + C174 * C50518) * C39052 +
                               (C528 * C19987 + C527 * C50518) * C39053 +
                               (C533 * C19987 + C534 * C50518) * C39054 +
                               (C5555 * C19987 + C5556 * C50518) * C39055) *
                                  C50581 * C50565 * C115 -
                              (((C117 * C1850 + C50662 * C1858) * C50518 +
                                (C117 * C1846 + C50662 * C1851) * C19987) *
                                   C39055 +
                               (C536 * C50518 + C535 * C19987) * C39054 +
                               (C525 * C50518 + C526 * C19987) * C39053 +
                               (C176 * C50518 + C175 * C19987) * C39052) *
                                  C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C117 * C122 + C50662 * C129) * C19987 +
                                 (C117 * C130 + C50662 * C143) * C50518) *
                                    C39052 +
                                (C5545 * C19987 + C5546 * C50518) * C39053 +
                                (C5547 * C19987 + C5548 * C50518) * C39054 +
                                (C5552 * C19987 + C5551 * C50518) * C39055) *
                                   C50581 * C278 -
                               ((C6519 * C50518 + C6518 * C19987) * C39055 +
                                (C6106 * C50518 + C6105 * C19987) * C39054 +
                                (C6104 * C50518 + C6103 * C19987) * C39053 +
                                ((C117 * C299 + C50662 * C316) * C50518 +
                                 (C117 * C286 + C50662 * C300) * C19987) *
                                    C39052) *
                                   C50581 * C279 +
                               (((C117 * C287 + C50662 * C301) * C19987 +
                                 (C117 * C302 + C50662 * C317) * C50518) *
                                    C39052 +
                                (C7022 * C19987 + C7023 * C50518) * C39053 +
                                (C7024 * C19987 + C7025 * C50518) * C39054 +
                                ((C117 * C4585 + C50662 * C4593) * C19987 +
                                 (C117 * C4591 + C50662 * C4597) * C50518) *
                                    C39055) *
                                   C50581 * C280) *
                                  C281 +
                              (((C353 * C19987 + C352 * C50518) * C39052 +
                                (C922 * C19987 + C923 * C50518) * C39053 +
                                (C5346 * C19987 + C5345 * C50518) * C39054 +
                                (C6107 * C19987 + C6108 * C50518) * C39055) *
                                   C50581 * C279 -
                               ((C5549 * C50518 + C5550 * C19987) * C39055 +
                                (C532 * C50518 + C531 * C19987) * C39054 +
                                (C529 * C50518 + C530 * C19987) * C39053 +
                                (C172 * C50518 + C171 * C19987) * C39052) *
                                   C50581 * C278 -
                               (((C117 * C4587 + C50662 * C4595) * C50518 +
                                 (C117 * C4583 + C50662 * C4589) * C19987) *
                                    C39055 +
                                (C5350 * C50518 + C5349 * C19987) * C39054 +
                                (C5348 * C50518 + C5347 * C19987) * C39053 +
                                (C355 * C50518 + C354 * C19987) * C39052) *
                                   C50581 * C280) *
                                  C50552)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C457 -
           ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
            (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
               C458 +
           (C39269 * C39052 + C39270 * C39053 + (C39260 + C39259) * C39054 +
            ((C117 * C7420 + C50662 * C7424) * C19987 +
             (C117 * C7423 + C50662 * C7426) * C50518) *
                C39055) *
               C459) *
              C50565 * C281 +
          (((C39261 + C39262) * C39052 + (C39263 + C39264) * C39053 +
            (C39265 + C39266) * C39054 + (C39267 + C39268) * C39055) *
               C458 -
           (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C457 -
           (((C117 * C7421 + C50662 * C7425) * C50518 +
             (C117 * C7419 + C50662 * C7422) * C19987) *
                C39055 +
            (C39268 + C39267) * C39054 + C39271 * C39053 + C39272 * C39052) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50808 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C50565 * C50850 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C50645 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50808) *
              C50565 * C50851 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C50808 -
           (((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
              C2294 * C483 + C2289 * C496) *
                 C50518 +
             (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
              C2294 * C466 + C2289 * C482) *
                 C19987) *
                C50742 +
            ((C3069 + C3068 + C3067) * C50518 +
             (C3066 + C3065 + C3064) * C19987) *
                C33658) *
               C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50808 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C50565 * C50850 +
          (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
            (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
               C50645 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50808) *
              C50565 * C50851 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) * C50742) *
               C50808 -
           (((C117 * C488 + C50662 * C499) * C17176 +
             (C117 * C469 + C50662 * C489) * C17181 + C536 * C17175 +
             C535 * C17180 + C534 * C17174 + C533 * C17179) *
                C50742 +
            (C34274 + C34273 + C34272 + C34271 + C34270 + C34269) * C33658) *
               C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C50808 -
           ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
            (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
               C50645) *
              C50565 * C50850 +
          (((C39261 + C39262) * C39052 + (C39263 + C39264) * C39053 +
            (C39265 + C39266) * C39054 + (C39267 + C39268) * C39055) *
               C50645 -
           (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C50808) *
              C50565 * C50851 +
          (((C173 * C19987 + C174 * C50518) * C39052 +
            (C39469 + C39470) * C39053 + (C39471 + C39472) * C39054 +
            (C39473 + C39474) * C39055) *
               C50808 -
           (((C117 * C5503 + C50662 * C5507) * C50518 +
             (C117 * C5498 + C50662 * C5504) * C19987) *
                C39055 +
            (C39474 + C39473) * C39054 + (C39472 + C39471) * C39053 +
            (C39470 + C39469) * C39052) *
               C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C5545 * C17179 + C5546 * C17174 + C530 * C17180 + C529 * C17175 +
             C528 * C17181 + C527 * C17176) *
                C50742) *
               C50581 * C278 -
           ((C925 * C17176 + C924 * C17181 + C923 * C17175 + C922 * C17180 +
             C6104 * C17174 + C6103 * C17179) *
                C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C279 +
           (((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 + C5348 * C17175 +
             C11015 * C17181 + C11016 * C17176) *
                C50742) *
               C50581 * C280) *
              C281 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C922 * C17179 + C923 * C17174 + C924 * C17180 + C925 * C17175 +
             C926 * C17181 + C927 * C17176) *
                C50742) *
               C50581 * C279 -
           ((C525 * C17176 + C526 * C17181 + C527 * C17175 + C528 * C17180 +
             C529 * C17174 + C530 * C17179) *
                C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C278 -
           (((C117 * C1566 + C50662 * C1574) * C17176 +
             (C117 * C1562 + C50662 * C1567) * C17181 + C11016 * C17175 +
             C11015 * C17180 + C5348 * C17174 + C5347 * C17179) *
                C50742 +
            (C359 * C17176 + C358 * C17181 + C357 * C17175 + C356 * C17180 +
             C355 * C17174 + C354 * C17179) *
                C33658) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C17179 +
            (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
            C172 * C17175 + C173 * C17181 + C174 * C17176) *
               C33658 +
           (C5545 * C17179 + C5546 * C17174 + C530 * C17180 + C529 * C17175 +
            C528 * C17181 + C527 * C17176) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C525 * C17176 + C526 * C17181 + C527 * C17175 + C528 * C17180 +
            C529 * C17174 + C530 * C17179) *
               C50742 +
           (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
            C172 * C17174 + C171 * C17179) *
               C33658) *
              C50581 * C50565 * C114 +
          ((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
            C178 * C17181 + C177 * C17176) *
               C33658 +
           (C528 * C17179 + C527 * C17174 + C526 * C17180 + C525 * C17175 +
            C758 * C17181 + C759 * C17176) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C117 * C750 + C50662 * C752) * C17176 +
            (C117 * C749 + C50662 * C751) * C17181 + C759 * C17175 +
            C758 * C17180 + C525 * C17174 + C526 * C17179) *
               C50742 +
           (C180 * C17176 + C179 * C17181 + C177 * C17175 + C178 * C17180 +
            C176 * C17174 + C175 * C17179) *
               C33658) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C2294 * C463 + C2289 * C477 + C2295 * C889 + C2290 * C894 +
             C2296 * C1565 + C2291 * C1573) *
                C19987 +
            (C2294 * C476 + C2289 * C493 + C2295 * C895 + C2290 * C904 +
             C2296 * C1572 + C2291 * C1577) *
                C50518) *
               C50742) *
              C50581 * C50565 * C113 -
          (((C2730 + C2731 + C2732) * C50518 +
            (C2733 + C2734 + C2735) * C19987) *
               C50742 +
           ((C2341 + C2340 + C2339) * C50518 +
            (C2338 + C2337 + C2336) * C19987) *
               C33658) *
              C50581 * C50565 * C114 +
          (((C2347 + C2346 + C2345) * C19987 +
            (C2344 + C2343 + C2342) * C50518) *
               C33658 +
           ((C3064 + C3065 + C3066) * C19987 +
            (C3067 + C3068 + C3069) * C50518) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50518 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C19987) *
               C50742 +
           ((C2353 + C2352 + C2351) * C50518 +
            (C2350 + C2349 + C2348) * C19987) *
               C33658) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C2294 * C463 + C2289 * C477 + C2295 * C889 + C2290 * C894 +
              C2296 * C1565 + C2291 * C1573) *
                 C19987 +
             (C2294 * C476 + C2289 * C493 + C2295 * C895 + C2290 * C904 +
              C2296 * C1572 + C2291 * C1577) *
                 C50518) *
                C50742) *
               C50581 * C278 -
           (((C2296 * C3267 + C2291 * C3272 + C2295 * C1572 + C2290 * C1577 +
              C2294 * C895 + C2289 * C904) *
                 C50518 +
             (C2296 * C3263 + C2291 * C3266 + C2295 * C1565 + C2290 * C1573 +
              C2294 * C889 + C2289 * C894) *
                 C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C279 +
           (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
              C2296 * C4186 + C2291 * C4190) *
                 C19987 +
             (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
              C2296 * C4189 + C2291 * C4192) *
                 C50518) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C279 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C278 -
           (((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
              C2294 * C1570 + C2289 * C1576) *
                 C50518 +
             (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
              C2294 * C1564 + C2289 * C1571) *
                 C19987) *
                C50742 +
            ((C2547 + C2546 + C2545) * C50518 +
             (C2544 + C2543 + C2542) * C19987) *
                C33658) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C19987 +
            (C117 * C130 + C50662 * C143) * C50518) *
               C39052 +
           (C5545 * C19987 + C5546 * C50518) * C39053 +
           (C5547 * C19987 + C5548 * C50518) * C39054 +
           (C5552 * C19987 + C5551 * C50518) * C39055) *
              C50581 * C50565 * C113 -
          ((C5549 * C50518 + C5550 * C19987) * C39055 +
           (C532 * C50518 + C531 * C19987) * C39054 +
           (C529 * C50518 + C530 * C19987) * C39053 +
           (C172 * C50518 + C171 * C19987) * C39052) *
              C50581 * C50565 * C114 +
          ((C173 * C19987 + C174 * C50518) * C39052 +
           (C528 * C19987 + C527 * C50518) * C39053 +
           (C533 * C19987 + C534 * C50518) * C39054 +
           (C5555 * C19987 + C5556 * C50518) * C39055) *
              C50581 * C50565 * C115 -
          (((C117 * C1850 + C50662 * C1858) * C50518 +
            (C117 * C1846 + C50662 * C1851) * C19987) *
               C39055 +
           (C536 * C50518 + C535 * C19987) * C39054 +
           (C525 * C50518 + C526 * C19987) * C39053 +
           (C176 * C50518 + C175 * C19987) * C39052) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C5545 * C19987 + C5546 * C50518) * C39053 +
            (C5547 * C19987 + C5548 * C50518) * C39054 +
            (C5552 * C19987 + C5551 * C50518) * C39055) *
               C50581 * C278 -
           ((C6519 * C50518 + C6518 * C19987) * C39055 +
            (C6106 * C50518 + C6105 * C19987) * C39054 +
            (C6104 * C50518 + C6103 * C19987) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C50581 * C279 +
           (((C117 * C287 + C50662 * C301) * C19987 +
             (C117 * C302 + C50662 * C317) * C50518) *
                C39052 +
            (C7022 * C19987 + C7023 * C50518) * C39053 +
            (C7024 * C19987 + C7025 * C50518) * C39054 +
            ((C117 * C4585 + C50662 * C4593) * C19987 +
             (C117 * C4591 + C50662 * C4597) * C50518) *
                C39055) *
               C50581 * C280) *
              C281 +
          (((C353 * C19987 + C352 * C50518) * C39052 +
            (C922 * C19987 + C923 * C50518) * C39053 +
            (C5346 * C19987 + C5345 * C50518) * C39054 +
            (C6107 * C19987 + C6108 * C50518) * C39055) *
               C50581 * C279 -
           ((C5549 * C50518 + C5550 * C19987) * C39055 +
            (C532 * C50518 + C531 * C19987) * C39054 +
            (C529 * C50518 + C530 * C19987) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C50581 * C278 -
           (((C117 * C4587 + C50662 * C4595) * C50518 +
             (C117 * C4583 + C50662 * C4589) * C19987) *
                C39055 +
            (C5350 * C50518 + C5349 * C19987) * C39054 +
            (C5348 * C50518 + C5347 * C19987) * C39053 +
            (C355 * C50518 + C354 * C19987) * C39052) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50581 * C50852 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C50853 +
           (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
              C2296 * C4186 + C2291 * C4190) *
                 C19987 +
             (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
              C2296 * C4189 + C2291 * C4192) *
                 C50518) *
                C50742) *
               C50581 * C1331) *
              C50799 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C50853 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C50852 -
           (((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
              C2294 * C1570 + C2289 * C1576) *
                 C50518 +
             (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
              C2294 * C1564 + C2289 * C1571) *
                 C19987) *
                C50742 +
            ((C2547 + C2546 + C2545) * C50518 +
             (C2544 + C2543 + C2542) * C19987) *
                C33658) *
               C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50581 * C50852 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C50853 +
           (((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 + C5348 * C17175 +
             C11015 * C17181 + C11016 * C17176) *
                C50742) *
               C50581 * C1331) *
              C50799 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
               C50581 * C50853 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C50852 -
           (((C117 * C1566 + C50662 * C1574) * C17176 +
             (C117 * C1562 + C50662 * C1567) * C17181 + C11016 * C17175 +
             C11015 * C17180 + C5348 * C17174 + C5347 * C17179) *
                C50742 +
            (C359 * C17176 + C358 * C17181 + C357 * C17175 + C356 * C17180 +
             C355 * C17174 + C354 * C17179) *
                C33658) *
               C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C50581 * C50852 -
           (C39883 * C39055 + C39884 * C39054 + (C39606 + C39605) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C50581 * C50853 +
           (((C117 * C287 + C50662 * C301) * C19987 +
             (C117 * C302 + C50662 * C317) * C50518) *
                C39052 +
            (C7022 * C19987 + C7023 * C50518) * C39053 +
            (C7024 * C19987 + C7025 * C50518) * C39054 +
            ((C117 * C4585 + C50662 * C4593) * C19987 +
             (C117 * C4591 + C50662 * C4597) * C50518) *
                C39055) *
               C50581 * C1331) *
              C50799 +
          (((C353 * C19987 + C352 * C50518) * C39052 +
            (C39611 + C39612) * C39053 + (C39613 + C39614) * C39054 +
            (C39615 + C39616) * C39055) *
               C50581 * C50853 -
           (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C50581 * C50852 -
           (((C117 * C4587 + C50662 * C4595) * C50518 +
             (C117 * C4583 + C50662 * C4589) * C19987) *
                C39055 +
            (C5350 * C50518 + C5349 * C19987) * C39054 +
            (C5348 * C50518 + C5347 * C19987) * C39053 +
            (C355 * C50518 + C354 * C19987) * C39052) *
               C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50808 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C50852 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C50645 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50808) *
              C50853 +
          ((((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C38087 + C38088 + C38089) * C19987 +
             (C38090 + C38091 + C38092) * C50518) *
                C50742) *
               C50808 -
           (((C2296 * C20777 + C2291 * C20779 + C2295 * C3695 + C2290 * C3698 +
              C2294 * C2697 + C2289 * C2702) *
                 C50518 +
             (C2296 * C20776 + C2291 * C20778 + C2295 * C3692 + C2290 * C3696 +
              C2294 * C2693 + C2289 * C2696) *
                 C19987) *
                C50742 +
            ((C38092 + C38091 + C38090) * C50518 +
             (C38089 + C38088 + C38087) * C19987) *
                C33658) *
               C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50808 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C50852 +
          (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
            (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
               C50645 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50808) *
              C50853 +
          ((((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C35363 + C35364 + C35365 + C35366 + C35367 + C35368) * C50742) *
               C50808 -
           (((C117 * C2700 + C50662 * C2704) * C17176 +
             (C117 * C2695 + C50662 * C2701) * C17181 + C5350 * C17175 +
             C5349 * C17180 + C7025 * C17174 + C7024 * C17179) *
                C50742 +
            (C35368 + C35367 + C35366 + C35365 + C35364 + C35363) * C33658) *
               C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C50808 -
           ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
            (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
               C50645) *
              C50852 +
          (((C39605 + C39606) * C39052 + (C39607 + C39608) * C39053 +
            (C39609 + C39610) * C39054 + (C39887 + C39888) * C39055) *
               C50645 -
           (C39883 * C39055 + C39884 * C39054 + (C39606 + C39605) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C50808) *
              C50853 +
          ((((C117 * C287 + C50662 * C301) * C19987 +
             (C117 * C302 + C50662 * C317) * C50518) *
                C39052 +
            (C40215 + C40216) * C39053 + (C40217 + C40218) * C39054 +
            (C40225 + C40226) * C39055) *
               C50808 -
           (((C117 * C23063 + C50662 * C23065) * C50518 +
             (C117 * C23062 + C50662 * C23064) * C19987) *
                C39055 +
            (C40226 + C40225) * C39054 + (C40218 + C40217) * C39053 +
            (C40216 + C40215) * C39052) *
               C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50662 * C129) * C17179 +
                 (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
                 C172 * C17175 + C173 * C17181 + C174 * C17176) *
                    C33658 +
                (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) *
                    C50742) *
                   C50581 * C1025 -
               ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
                (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
                 (C117 * C299 + C50662 * C316) * C17174 +
                 (C117 * C286 + C50662 * C300) * C17179) *
                    C33658) *
                   C50581 * C50617) *
                  C1027 +
              (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
                 C349 * C17181 + C348 * C17176) *
                    C33658 +
                (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) *
                    C50742) *
                   C50581 * C50617 -
               ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
                (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
                 C172 * C17174 + C171 * C17179) *
                    C33658) *
                   C50581 * C1025) *
                  C1028 +
              (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
                 C178 * C17181 + C177 * C17176) *
                    C33658 +
                (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) *
                    C50742) *
                   C50581 * C1025 -
               (((C117 * C902 + C50662 * C908) * C17176 +
                 (C117 * C893 + C50662 * C903) * C17181 + C927 * C17175 +
                 C926 * C17180 + C925 * C17174 + C924 * C17179) *
                    C50742 +
                (C649 * C17176 + C648 * C17181 + C348 * C17175 + C349 * C17180 +
                 C350 * C17174 + C351 * C17179) *
                    C33658) *
                   C50581 * C50617) *
                  C1029) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C50662 * C129) * C17179 +
                (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
                C172 * C17175 + C173 * C17181 + C174 * C17176) *
                   C33658 +
               (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
                  C50581 * C1096 -
              ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
               (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
                (C117 * C299 + C50662 * C316) * C17174 +
                (C117 * C286 + C50662 * C300) * C17179) *
                   C33658) *
                  C50581 * C1097 +
              (((C117 * C287 + C50662 * C301) * C17179 +
                (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
                C355 * C17175 + C356 * C17181 + C357 * C17176) *
                   C33658 +
               (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 +
                C5348 * C17175 + C11015 * C17181 + C11016 * C17176) *
                   C50742) *
                  C50581 * C1098 -
              (((C117 * C3270 + C50662 * C3274) * C17176 +
                (C117 * C3265 + C50662 * C3271) * C17181 +
                (C117 * C3269 + C50662 * C3273) * C17175 +
                (C117 * C3264 + C50662 * C3268) * C17180 +
                (C117 * C3267 + C50662 * C3272) * C17174 +
                (C117 * C3263 + C50662 * C3266) * C17179) *
                   C50742 +
               ((C117 * C1107 + C50662 * C1114) * C17176 +
                (C117 * C1102 + C50662 * C1108) * C17181 +
                (C117 * C1109 + C50662 * C1115) * C17175 +
                (C117 * C1103 + C50662 * C1110) * C17180 +
                (C117 * C1111 + C50662 * C1116) * C17174 +
                (C117 * C1104 + C50662 * C1112) * C17179) *
                   C33658) *
                  C50581 * C1099) *
             C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C457 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C458 +
           ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
            (C5552 * C17179 + C5551 * C17174 + C5550 * C17180 + C5549 * C17175 +
             C5555 * C17181 + C5556 * C17176) *
                C50742) *
               C459) *
              C1025 +
          (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
            (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
               C458 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C457 -
           (((C117 * C6075 + C50662 * C6077) * C17176 +
             (C117 * C6074 + C50662 * C6076) * C17181 + C6108 * C17175 +
             C6107 * C17180 + C6519 * C17174 + C6518 * C17179) *
                C50742 +
            (C34876 + C34875 + C34874 + C34873 + C34872 + C34871) * C33658) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50581 * C1025 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C50617) *
              C1027 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C50617 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C1025) *
              C1028 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C50581 * C1025 -
           (((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50518 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C19987) *
                C50742 +
            ((C2905 + C2904 + C2903) * C50518 +
             (C2902 + C2901 + C2900) * C19987) *
                C33658) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C36665 + C36666 + C36667) * C19987 +
            (C36668 + C36669 + C36670) * C50518) *
               C50742) *
              C50581 * C1096 -
          (((C37180 + C37179 + C37178) * C50518 +
            (C37177 + C37176 + C37175) * C19987) *
               C50742 +
           ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C50518 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C19987) *
               C33658) *
              C50581 * C1097 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C19987 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C50518) *
               C33658 +
           ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
             C2296 * C4186 + C2291 * C4190) *
                C19987 +
            (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
             C2296 * C4189 + C2291 * C4192) *
                C50518) *
               C50742) *
              C50581 * C1098 -
          (((C2296 * C21107 + C2291 * C21109 + C2295 * C4189 + C2290 * C4192 +
             C2294 * C3267 + C2289 * C3272) *
                C50518 +
            (C2296 * C21106 + C2291 * C21108 + C2295 * C4186 + C2290 * C4190 +
             C2294 * C3263 + C2289 * C3266) *
                C19987) *
               C50742 +
           ((C2296 * C3541 + C2291 * C3544 + C2295 * C2503 + C2290 * C2508 +
             C2294 * C1111 + C2289 * C1116) *
                C50518 +
            (C2296 * C3538 + C2291 * C3542 + C2295 * C2499 + C2290 * C2502 +
             C2294 * C1104 + C2289 * C1112) *
                C19987) *
               C33658) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C457 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C458 +
           (((C36676 + C36675 + C36674) * C19987 +
             (C36673 + C36672 + C36671) * C50518) *
                C33658 +
            ((C2294 * C1849 + C2289 * C1857 + C2295 * C4586 + C2290 * C4594 +
              C2296 * C4585 + C2291 * C4593) *
                 C19987 +
             (C2294 * C1856 + C2289 * C1861 + C2295 * C4592 + C2290 * C4598 +
              C2296 * C4591 + C2291 * C4597) *
                 C50518) *
                C50742) *
               C459) *
              C1025 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C458 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C457 -
           (((C2296 * C21373 + C2291 * C21375 + C2295 * C4591 + C2290 * C4597 +
              C2294 * C4592 + C2289 * C4598) *
                 C50518 +
             (C2296 * C21372 + C2291 * C21374 + C2295 * C4585 + C2290 * C4593 +
              C2294 * C4586 + C2289 * C4594) *
                 C19987) *
                C50742 +
            ((C37588 + C37587 + C37586) * C50518 +
             (C37585 + C37584 + C37583) * C19987) *
                C33658) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C50581 * C1025 -
           ((C39610 + C39609) * C39055 + (C39608 + C39607) * C39054 +
            (C39606 + C39605) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C19987 + C352 * C50518) * C39052 +
            (C39611 + C39612) * C39053 + (C39613 + C39614) * C39054 +
            (C39615 + C39616) * C39055) *
               C50581 * C50617 -
           (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C19987 + C174 * C50518) * C39052 +
            (C39469 + C39470) * C39053 + (C39471 + C39472) * C39054 +
            (C39473 + C39474) * C39055) *
               C50581 * C1025 -
           (((C117 * C6075 + C50662 * C6077) * C50518 +
             (C117 * C6074 + C50662 * C6076) * C19987) *
                C39055 +
            (C5726 * C50518 + C5725 * C19987) * C39054 +
            (C925 * C50518 + C924 * C19987) * C39053 +
            (C350 * C50518 + C351 * C19987) * C39052) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C19987 +
            (C117 * C130 + C50662 * C143) * C50518) *
               C39052 +
           (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
              C50581 * C1096 -
          ((C39610 + C39609) * C39055 + (C39608 + C39607) * C39054 +
           (C39606 + C39605) * C39053 +
           ((C117 * C299 + C50662 * C316) * C50518 +
            (C117 * C286 + C50662 * C300) * C19987) *
               C39052) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C19987 +
            (C117 * C302 + C50662 * C317) * C50518) *
               C39052 +
           (C7022 * C19987 + C7023 * C50518) * C39053 +
           (C7024 * C19987 + C7025 * C50518) * C39054 +
           ((C117 * C4585 + C50662 * C4593) * C19987 +
            (C117 * C4591 + C50662 * C4597) * C50518) *
               C39055) *
              C50581 * C1098 -
          (((C117 * C21373 + C50662 * C21375) * C50518 +
            (C117 * C21372 + C50662 * C21374) * C19987) *
               C39055 +
           ((C117 * C3695 + C50662 * C3698) * C50518 +
            (C117 * C3692 + C50662 * C3696) * C19987) *
               C39054 +
           ((C117 * C3267 + C50662 * C3272) * C50518 +
            (C117 * C3263 + C50662 * C3266) * C19987) *
               C39053 +
           ((C117 * C1111 + C50662 * C1116) * C50518 +
            (C117 * C1104 + C50662 * C1112) * C19987) *
               C39052) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C457 -
           ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
            (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
               C458 +
           (C39269 * C39052 + C39270 * C39053 + (C39260 + C39259) * C39054 +
            ((C117 * C7420 + C50662 * C7424) * C19987 +
             (C117 * C7423 + C50662 * C7426) * C50518) *
                C39055) *
               C459) *
              C1025 +
          (((C39605 + C39606) * C39052 + (C39607 + C39608) * C39053 +
            (C39609 + C39610) * C39054 + (C39887 + C39888) * C39055) *
               C458 -
           (C39883 * C39055 + C39884 * C39054 + (C39606 + C39605) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C457 -
           (((C117 * C23984 + C50662 * C23986) * C50518 +
             (C117 * C23983 + C50662 * C23985) * C19987) *
                C39055 +
            (C39888 + C39887) * C39054 + C39883 * C39053 + C39884 * C39052) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
               C2296 * C287 + C2291 * C301) *
                  C19987 +
              (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
               C2296 * C302 + C2291 * C317) *
                  C50518) *
                 C33658 +
             ((C36665 + C36666 + C36667) * C19987 +
              (C36668 + C36669 + C36670) * C50518) *
                 C50742) *
                C50808 -
            (((C36671 + C36672 + C36673) * C50518 +
              (C36674 + C36675 + C36676) * C19987) *
                 C50742 +
             ((C36670 + C36669 + C36668) * C50518 +
              (C36667 + C36666 + C36665) * C19987) *
                 C33658) *
                C50645) *
               C1025 +
           ((((C37175 + C37176 + C37177) * C19987 +
              (C37178 + C37179 + C37180) * C50518) *
                 C33658 +
             ((C37583 + C37584 + C37585) * C19987 +
              (C37586 + C37587 + C37588) * C50518) *
                 C50742) *
                C50645 -
            (((C37180 + C37179 + C37178) * C50518 +
              (C37177 + C37176 + C37175) * C19987) *
                 C50742 +
             ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
               C2294 * C299 + C2289 * C316) *
                  C50518 +
              (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
               C2294 * C286 + C2289 * C300) *
                  C19987) *
                 C33658) *
                C50808) *
               C50617) *
              C50799 +
          (((((C2735 + C2734 + C2733) * C19987 +
              (C2732 + C2731 + C2730) * C50518) *
                 C33658 +
             ((C2736 + C2737 + C2738) * C19987 +
              (C2739 + C2740 + C2741) * C50518) *
                 C50742) *
                C50645 -
            (((C2730 + C2731 + C2732) * C50518 +
              (C2733 + C2734 + C2735) * C19987) *
                 C50742 +
             ((C2341 + C2340 + C2339) * C50518 +
              (C2338 + C2337 + C2336) * C19987) *
                 C33658) *
                C50808) *
               C1025 +
           ((((C2541 + C2540 + C2539) * C19987 +
              (C2538 + C2537 + C2536) * C50518) *
                 C33658 +
             ((C3288 + C3289 + C3290) * C19987 +
              (C3291 + C3292 + C3293) * C50518) *
                 C50742) *
                C50808 -
            (((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
               C2294 * C1223 + C2289 * C1229) *
                  C50518 +
              (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
               C2294 * C1217 + C2289 * C1224) *
                  C19987) *
                 C50742 +
             ((C3293 + C3292 + C3291) * C50518 +
              (C3290 + C3289 + C3288) * C19987) *
                 C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C17179 +
              (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
              C172 * C17175 + C173 * C17181 + C174 * C17176) *
                 C33658 +
             (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
                C50808 -
            ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
             (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
                C50645) *
               C1025 +
           (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
             (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
                C50645 -
            ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
             (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
              (C117 * C299 + C50662 * C316) * C17174 +
              (C117 * C286 + C50662 * C300) * C17179) *
                 C33658) *
                C50808) *
               C50617) *
              C50799 +
          ((((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
             (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
                C50645 -
            ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
             (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
              C172 * C17174 + C171 * C17179) *
                 C33658) *
                C50808) *
               C1025 +
           (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
              C349 * C17181 + C348 * C17176) *
                 C33658 +
             (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
                C50808 -
            (((C117 * C1219 + C50662 * C1227) * C17176 +
              (C117 * C1215 + C50662 * C1220) * C17181 + C5726 * C17175 +
              C5725 * C17180 + C5345 * C17174 + C5346 * C17179) *
                 C50742 +
             (C34480 + C34479 + C34478 + C34477 + C34476 + C34475) * C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C19987 +
              (C117 * C130 + C50662 * C143) * C50518) *
                 C39052 +
             (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
                C50808 -
            ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
             (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
                C50645) *
               C1025 +
           (((C39605 + C39606) * C39052 + (C39607 + C39608) * C39053 +
             (C39609 + C39610) * C39054 + (C39887 + C39888) * C39055) *
                C50645 -
            (C39883 * C39055 + C39884 * C39054 + (C39606 + C39605) * C39053 +
             ((C117 * C299 + C50662 * C316) * C50518 +
              (C117 * C286 + C50662 * C300) * C19987) *
                 C39052) *
                C50808) *
               C50617) *
              C50799 +
          ((((C39261 + C39262) * C39052 + (C39263 + C39264) * C39053 +
             (C39265 + C39266) * C39054 + (C39267 + C39268) * C39055) *
                C50645 -
            (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
             (C172 * C50518 + C171 * C19987) * C39052) *
                C50808) *
               C1025 +
           (((C353 * C19987 + C352 * C50518) * C39052 +
             (C39611 + C39612) * C39053 + (C39613 + C39614) * C39054 +
             (C39615 + C39616) * C39055) *
                C50808 -
            (((C117 * C6504 + C50662 * C6508) * C50518 +
              (C117 * C6502 + C50662 * C6505) * C19987) *
                 C39055 +
             (C39616 + C39615) * C39054 + (C39614 + C39613) * C39053 +
             (C39612 + C39611) * C39052) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C17179 +
            (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
            C172 * C17175 + C173 * C17181 + C174 * C17176) *
               C33658 +
           (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
              C50581 * C1096 -
          ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
           (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
            (C117 * C299 + C50662 * C316) * C17174 +
            (C117 * C286 + C50662 * C300) * C17179) *
               C33658) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C17179 +
            (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
            C355 * C17175 + C356 * C17181 + C357 * C17176) *
               C33658 +
           (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 + C5348 * C17175 +
            C11015 * C17181 + C11016 * C17176) *
               C50742) *
              C50581 * C1098 -
          (((C117 * C3270 + C50662 * C3274) * C17176 +
            (C117 * C3265 + C50662 * C3271) * C17181 +
            (C117 * C3269 + C50662 * C3273) * C17175 +
            (C117 * C3264 + C50662 * C3268) * C17180 +
            (C117 * C3267 + C50662 * C3272) * C17174 +
            (C117 * C3263 + C50662 * C3266) * C17179) *
               C50742 +
           ((C117 * C1107 + C50662 * C1114) * C17176 +
            (C117 * C1102 + C50662 * C1108) * C17181 +
            (C117 * C1109 + C50662 * C1115) * C17175 +
            (C117 * C1103 + C50662 * C1110) * C17180 +
            (C117 * C1111 + C50662 * C1116) * C17174 +
            (C117 * C1104 + C50662 * C1112) * C17179) *
               C33658) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50581 * C1025 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
               C50581 * C50617 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) * C50742) *
               C50581 * C1025 -
           (((C117 * C902 + C50662 * C908) * C17176 +
             (C117 * C893 + C50662 * C903) * C17181 + C927 * C17175 +
             C926 * C17180 + C925 * C17174 + C924 * C17179) *
                C50742 +
            (C649 * C17176 + C648 * C17181 + C348 * C17175 + C349 * C17180 +
             C350 * C17174 + C351 * C17179) *
                C33658) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50581 * C1025 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C50617) *
              C1027 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C50617 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C1025) *
              C1028 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C50581 * C1025 -
           (((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50518 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C19987) *
                C50742 +
            ((C2905 + C2904 + C2903) * C50518 +
             (C2902 + C2901 + C2900) * C19987) *
                C33658) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C36665 + C36666 + C36667) * C19987 +
            (C36668 + C36669 + C36670) * C50518) *
               C50742) *
              C50581 * C1096 -
          (((C37180 + C37179 + C37178) * C50518 +
            (C37177 + C37176 + C37175) * C19987) *
               C50742 +
           ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C50518 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C19987) *
               C33658) *
              C50581 * C1097 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C19987 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C50518) *
               C33658 +
           ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
             C2296 * C4186 + C2291 * C4190) *
                C19987 +
            (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
             C2296 * C4189 + C2291 * C4192) *
                C50518) *
               C50742) *
              C50581 * C1098 -
          (((C2296 * C21107 + C2291 * C21109 + C2295 * C4189 + C2290 * C4192 +
             C2294 * C3267 + C2289 * C3272) *
                C50518 +
            (C2296 * C21106 + C2291 * C21108 + C2295 * C4186 + C2290 * C4190 +
             C2294 * C3263 + C2289 * C3266) *
                C19987) *
               C50742 +
           ((C2296 * C3541 + C2291 * C3544 + C2295 * C2503 + C2290 * C2508 +
             C2294 * C1111 + C2289 * C1116) *
                C50518 +
            (C2296 * C3538 + C2291 * C3542 + C2295 * C2499 + C2290 * C2502 +
             C2294 * C1104 + C2289 * C1112) *
                C19987) *
               C33658) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C50581 * C1025 -
           ((C39610 + C39609) * C39055 + (C39608 + C39607) * C39054 +
            (C39606 + C39605) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C19987 + C352 * C50518) * C39052 +
            (C39611 + C39612) * C39053 + (C39613 + C39614) * C39054 +
            (C39615 + C39616) * C39055) *
               C50581 * C50617 -
           (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C19987 + C174 * C50518) * C39052 +
            (C39469 + C39470) * C39053 + (C39471 + C39472) * C39054 +
            (C39473 + C39474) * C39055) *
               C50581 * C1025 -
           (((C117 * C6075 + C50662 * C6077) * C50518 +
             (C117 * C6074 + C50662 * C6076) * C19987) *
                C39055 +
            (C5726 * C50518 + C5725 * C19987) * C39054 +
            (C925 * C50518 + C924 * C19987) * C39053 +
            (C350 * C50518 + C351 * C19987) * C39052) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C19987 +
            (C117 * C130 + C50662 * C143) * C50518) *
               C39052 +
           (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
              C50581 * C1096 -
          ((C39610 + C39609) * C39055 + (C39608 + C39607) * C39054 +
           (C39606 + C39605) * C39053 +
           ((C117 * C299 + C50662 * C316) * C50518 +
            (C117 * C286 + C50662 * C300) * C19987) *
               C39052) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C19987 +
            (C117 * C302 + C50662 * C317) * C50518) *
               C39052 +
           (C7022 * C19987 + C7023 * C50518) * C39053 +
           (C7024 * C19987 + C7025 * C50518) * C39054 +
           ((C117 * C4585 + C50662 * C4593) * C19987 +
            (C117 * C4591 + C50662 * C4597) * C50518) *
               C39055) *
              C50581 * C1098 -
          (((C117 * C21373 + C50662 * C21375) * C50518 +
            (C117 * C21372 + C50662 * C21374) * C19987) *
               C39055 +
           ((C117 * C3695 + C50662 * C3698) * C50518 +
            (C117 * C3692 + C50662 * C3696) * C19987) *
               C39054 +
           ((C117 * C3267 + C50662 * C3272) * C50518 +
            (C117 * C3263 + C50662 * C3266) * C19987) *
               C39053 +
           ((C117 * C1111 + C50662 * C1116) * C50518 +
            (C117 * C1104 + C50662 * C1112) * C19987) *
               C39052) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
               C2296 * C287 + C2291 * C301) *
                  C19987 +
              (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
               C2296 * C302 + C2291 * C317) *
                  C50518) *
                 C33658 +
             ((C36665 + C36666 + C36667) * C19987 +
              (C36668 + C36669 + C36670) * C50518) *
                 C50742) *
                C1676 -
            (((C36671 + C36672 + C36673) * C50518 +
              (C36674 + C36675 + C36676) * C19987) *
                 C50742 +
             ((C36670 + C36669 + C36668) * C50518 +
              (C36667 + C36666 + C36665) * C19987) *
                 C33658) *
                C50645) *
               C50807 +
           ((((C37175 + C37176 + C37177) * C19987 +
              (C37178 + C37179 + C37180) * C50518) *
                 C33658 +
             ((C37583 + C37584 + C37585) * C19987 +
              (C37586 + C37587 + C37588) * C50518) *
                 C50742) *
                C50645 -
            (((C37180 + C37179 + C37178) * C50518 +
              (C37177 + C37176 + C37175) * C19987) *
                 C50742 +
             ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
               C2294 * C299 + C2289 * C316) *
                  C50518 +
              (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
               C2294 * C286 + C2289 * C300) *
                  C19987) *
                 C33658) *
                C1676) *
               C50617) *
              C50799 +
          (((((C2735 + C2734 + C2733) * C19987 +
              (C2732 + C2731 + C2730) * C50518) *
                 C33658 +
             ((C2736 + C2737 + C2738) * C19987 +
              (C2739 + C2740 + C2741) * C50518) *
                 C50742) *
                C50645 -
            (((C2730 + C2731 + C2732) * C50518 +
              (C2733 + C2734 + C2735) * C19987) *
                 C50742 +
             ((C2341 + C2340 + C2339) * C50518 +
              (C2338 + C2337 + C2336) * C19987) *
                 C33658) *
                C1676) *
               C50807 +
           ((((C2541 + C2540 + C2539) * C19987 +
              (C2538 + C2537 + C2536) * C50518) *
                 C33658 +
             ((C3288 + C3289 + C3290) * C19987 +
              (C3291 + C3292 + C3293) * C50518) *
                 C50742) *
                C1676 -
            (((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
               C2294 * C1223 + C2289 * C1229) *
                  C50518 +
              (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
               C2294 * C1217 + C2289 * C1224) *
                  C19987) *
                 C50742 +
             ((C3293 + C3292 + C3291) * C50518 +
              (C3290 + C3289 + C3288) * C19987) *
                 C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C17179 +
              (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
              C172 * C17175 + C173 * C17181 + C174 * C17176) *
                 C33658 +
             (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
                C1676 -
            ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
             (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
                C50645) *
               C50807 +
           (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
             (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
                C50645 -
            ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
             (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
              (C117 * C299 + C50662 * C316) * C17174 +
              (C117 * C286 + C50662 * C300) * C17179) *
                 C33658) *
                C1676) *
               C50617) *
              C50799 +
          ((((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
             (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
                C50645 -
            ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
             (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
              C172 * C17174 + C171 * C17179) *
                 C33658) *
                C1676) *
               C50807 +
           (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
              C349 * C17181 + C348 * C17176) *
                 C33658 +
             (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
                C1676 -
            (((C117 * C1219 + C50662 * C1227) * C17176 +
              (C117 * C1215 + C50662 * C1220) * C17181 + C5726 * C17175 +
              C5725 * C17180 + C5345 * C17174 + C5346 * C17179) *
                 C50742 +
             (C34480 + C34479 + C34478 + C34477 + C34476 + C34475) * C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C19987 +
              (C117 * C130 + C50662 * C143) * C50518) *
                 C39052 +
             (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
                C1676 -
            (C40493 * C39055 + C40494 * C39054 + (C39256 + C39255) * C39053 +
             (C39254 + C39253) * C39052) *
                C50645) *
               C50807 +
           (((C39605 + C39606) * C39052 + (C39607 + C39608) * C39053 +
             (C39609 + C39610) * C39054 + (C39887 + C39888) * C39055) *
                C50645 -
            (C39883 * C39055 + C39884 * C39054 + (C39606 + C39605) * C39053 +
             ((C117 * C299 + C50662 * C316) * C50518 +
              (C117 * C286 + C50662 * C300) * C19987) *
                 C39052) *
                C1676) *
               C50617) *
              C50799 +
          ((((C39261 + C39262) * C39052 + (C39263 + C39264) * C39053 +
             (C39265 + C39266) * C39054 + (C39267 + C39268) * C39055) *
                C50645 -
            (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
             (C172 * C50518 + C171 * C19987) * C39052) *
                C1676) *
               C50807 +
           (((C353 * C19987 + C352 * C50518) * C39052 +
             (C39611 + C39612) * C39053 + (C39613 + C39614) * C39054 +
             (C39615 + C39616) * C39055) *
                C1676 -
            (((C117 * C6504 + C50662 * C6508) * C50518 +
              (C117 * C6502 + C50662 * C6505) * C19987) *
                 C39055 +
             (C39616 + C39615) * C39054 + (C39614 + C39613) * C39053 +
             (C39612 + C39611) * C39052) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50854 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50855 +
           (((C36676 + C36675 + C36674) * C19987 +
             (C36673 + C36672 + C36671) * C50518) *
                C33658 +
            ((C38495 + C38496 + C38497) * C19987 +
             (C38498 + C38499 + C38500) * C50518) *
                C50742) *
               C2092) *
              C50807 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C50855 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50854 -
           (((C2296 * C21373 + C2291 * C21375 + C2295 * C4591 + C2290 * C4597 +
              C2294 * C4592 + C2289 * C4598) *
                 C50518 +
             (C2296 * C21372 + C2291 * C21374 + C2295 * C4585 + C2290 * C4593 +
              C2294 * C4586 + C2289 * C4594) *
                 C19987) *
                C50742 +
            ((C37588 + C37587 + C37586) * C50518 +
             (C37585 + C37584 + C37583) * C19987) *
                C33658) *
               C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50854 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50855 +
           ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
            (C35759 + C35760 + C35761 + C35762 + C35763 + C35764) * C50742) *
               C2092) *
              C50807 +
          (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
            (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
               C50855 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50854 -
           (((C117 * C6075 + C50662 * C6077) * C17176 +
             (C117 * C6074 + C50662 * C6076) * C17181 + C6108 * C17175 +
             C6107 * C17180 + C6519 * C17174 + C6518 * C17179) *
                C50742 +
            (C34876 + C34875 + C34874 + C34873 + C34872 + C34871) * C33658) *
               C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C50854 -
           (C40493 * C39055 + C40494 * C39054 + (C39256 + C39255) * C39053 +
            (C39254 + C39253) * C39052) *
               C50855 +
           (C39269 * C39052 + C39270 * C39053 + (C39260 + C39259) * C39054 +
            (C40501 + C40502) * C39055) *
               C2092) *
              C50807 +
          (((C39605 + C39606) * C39052 + (C39607 + C39608) * C39053 +
            (C39609 + C39610) * C39054 + (C39887 + C39888) * C39055) *
               C50855 -
           (C39883 * C39055 + C39884 * C39054 + (C39606 + C39605) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C50854 -
           (((C117 * C23984 + C50662 * C23986) * C50518 +
             (C117 * C23983 + C50662 * C23985) * C19987) *
                C39055 +
            (C39888 + C39887) * C39054 + C39883 * C39053 + C39884 * C39052) *
               C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50662 * C129) * C17179 +
                 (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
                 C172 * C17175 + C173 * C17181 + C174 * C17176) *
                    C33658 +
                (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) *
                    C50742) *
                   C1676 -
               ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
                (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) *
                    C33658) *
                   C50645) *
                  C50565 * C1027 +
              (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
                (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) *
                    C50742) *
                   C50645 -
               ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
                (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
                 C172 * C17174 + C171 * C17179) *
                    C33658) *
                   C1676) *
                  C50565 * C1028 +
              (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
                 C178 * C17181 + C177 * C17176) *
                    C33658 +
                (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) *
                    C50742) *
                   C1676 -
               (((C117 * C488 + C50662 * C499) * C17176 +
                 (C117 * C469 + C50662 * C489) * C17181 + C536 * C17175 +
                 C535 * C17180 + C534 * C17174 + C533 * C17179) *
                    C50742 +
                (C34274 + C34273 + C34272 + C34271 + C34270 + C34269) *
                    C33658) *
                   C50645) *
                  C50565 * C1029) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C122 + C50662 * C129) * C17179 +
                 (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
                 C172 * C17175 + C173 * C17181 + C174 * C17176) *
                    C33658 +
                (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) *
                    C50742) *
                   C1676 -
               ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
                (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) *
                    C33658) *
                   C50645) *
                  C278 +
              (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
                (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) *
                    C50742) *
                   C50645 -
               ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
                (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
                 (C117 * C299 + C50662 * C316) * C17174 +
                 (C117 * C286 + C50662 * C300) * C17179) *
                    C33658) *
                   C1676) *
                  C279 +
              ((((C117 * C287 + C50662 * C301) * C17179 +
                 (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
                 C355 * C17175 + C356 * C17181 + C357 * C17176) *
                    C33658 +
                (C35363 + C35364 + C35365 + C35366 + C35367 + C35368) *
                    C50742) *
                   C1676 -
               (((C117 * C2700 + C50662 * C2704) * C17176 +
                 (C117 * C2695 + C50662 * C2701) * C17181 + C5350 * C17175 +
                 C5349 * C17180 + C7025 * C17174 + C7024 * C17179) *
                    C50742 +
                (C35368 + C35367 + C35366 + C35365 + C35364 + C35363) *
                    C33658) *
                   C50645) *
                  C280) *
             C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C17179 +
            (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
            C172 * C17175 + C173 * C17181 + C174 * C17176) *
               C33658 +
           (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
              C1842 -
          ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
           (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
              C1843 +
          ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
           (C35759 + C35760 + C35761 + C35762 + C35763 + C35764) * C50742) *
              C1844 -
          (((C117 * C5503 + C50662 * C5507) * C17176 +
            (C117 * C5498 + C50662 * C5504) * C17181 + C5554 * C17175 +
            C5553 * C17180 + C7437 * C17174 + C7436 * C17179) *
               C50742 +
           (C35764 + C35763 + C35762 + C35761 + C35760 + C35759) * C33658) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C1676 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C50565 * C1027 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C50645 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C1676) *
              C50565 * C1028 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C1676 -
           (((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
              C2294 * C483 + C2289 * C496) *
                 C50518 +
             (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
              C2294 * C466 + C2289 * C482) *
                 C19987) *
                C50742 +
            ((C3069 + C3068 + C3067) * C50518 +
             (C3066 + C3065 + C3064) * C19987) *
                C33658) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C1676 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C278 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C50645 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C1676) *
              C279 +
          ((((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C38087 + C38088 + C38089) * C19987 +
             (C38090 + C38091 + C38092) * C50518) *
                C50742) *
               C1676 -
           (((C2296 * C20777 + C2291 * C20779 + C2295 * C3695 + C2290 * C3698 +
              C2294 * C2697 + C2289 * C2702) *
                 C50518 +
             (C2296 * C20776 + C2291 * C20778 + C2295 * C3692 + C2290 * C3696 +
              C2294 * C2693 + C2289 * C2696) *
                 C19987) *
                C50742 +
            ((C38092 + C38091 + C38090) * C50518 +
             (C38089 + C38088 + C38087) * C19987) *
                C33658) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C36665 + C36666 + C36667) * C19987 +
            (C36668 + C36669 + C36670) * C50518) *
               C50742) *
              C1842 -
          (((C36671 + C36672 + C36673) * C50518 +
            (C36674 + C36675 + C36676) * C19987) *
               C50742 +
           ((C36670 + C36669 + C36668) * C50518 +
            (C36667 + C36666 + C36665) * C19987) *
               C33658) *
              C1843 +
          (((C36676 + C36675 + C36674) * C19987 +
            (C36673 + C36672 + C36671) * C50518) *
               C33658 +
           ((C38495 + C38496 + C38497) * C19987 +
            (C38498 + C38499 + C38500) * C50518) *
               C50742) *
              C1844 -
          (((C2296 * C23063 + C2291 * C23065 + C2295 * C6506 + C2290 * C6509 +
             C2294 * C5500 + C2289 * C5505) *
                C50518 +
            (C2296 * C23062 + C2291 * C23064 + C2295 * C6503 + C2290 * C6507 +
             C2294 * C5496 + C2289 * C5499) *
                C19987) *
               C50742 +
           ((C38500 + C38499 + C38498) * C50518 +
            (C38497 + C38496 + C38495) * C19987) *
               C33658) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C1676 -
           ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
            (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
               C50645) *
              C50565 * C1027 +
          (((C39261 + C39262) * C39052 + (C39263 + C39264) * C39053 +
            (C39265 + C39266) * C39054 + (C39267 + C39268) * C39055) *
               C50645 -
           (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C19987 + C174 * C50518) * C39052 +
            (C39469 + C39470) * C39053 + (C39471 + C39472) * C39054 +
            (C39473 + C39474) * C39055) *
               C1676 -
           (((C117 * C5503 + C50662 * C5507) * C50518 +
             (C117 * C5498 + C50662 * C5504) * C19987) *
                C39055 +
            (C39474 + C39473) * C39054 + (C39472 + C39471) * C39053 +
            (C39470 + C39469) * C39052) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C1676 -
           ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
            (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
               C50645) *
              C278 +
          (((C39605 + C39606) * C39052 + (C39607 + C39608) * C39053 +
            (C39609 + C39610) * C39054 + (C39887 + C39888) * C39055) *
               C50645 -
           (C39883 * C39055 + C39884 * C39054 + (C39606 + C39605) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C19987 +
             (C117 * C302 + C50662 * C317) * C50518) *
                C39052 +
            (C40215 + C40216) * C39053 + (C40217 + C40218) * C39054 +
            (C40225 + C40226) * C39055) *
               C1676 -
           (((C117 * C23063 + C50662 * C23065) * C50518 +
             (C117 * C23062 + C50662 * C23064) * C19987) *
                C39055 +
            (C40226 + C40225) * C39054 + (C40218 + C40217) * C39053 +
            (C40216 + C40215) * C39052) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C19987 +
            (C117 * C130 + C50662 * C143) * C50518) *
               C39052 +
           (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
              C1842 -
          (C40493 * C39055 + C40494 * C39054 + (C39256 + C39255) * C39053 +
           (C39254 + C39253) * C39052) *
              C1843 +
          (C39269 * C39052 + C39270 * C39053 + (C39260 + C39259) * C39054 +
           (C40501 + C40502) * C39055) *
              C1844 -
          (((C117 * C40489 + C50662 * C40491) * C50518 +
            (C117 * C40488 + C50662 * C40490) * C19987) *
               C39055 +
           (C40502 + C40501) * C39054 + C40493 * C39053 + C40494 * C39052) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50854 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50855 +
           (((C36676 + C36675 + C36674) * C19987 +
             (C36673 + C36672 + C36671) * C50518) *
                C33658 +
            ((C38495 + C38496 + C38497) * C19987 +
             (C38498 + C38499 + C38500) * C50518) *
                C50742) *
               C2092) *
              C50565 * C50799 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C50855 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50854 -
           (((C2296 * C4587 + C2291 * C4595 + C2295 * C4588 + C2290 * C4596 +
              C2294 * C1854 + C2289 * C1860) *
                 C50518 +
             (C2296 * C4583 + C2291 * C4589 + C2295 * C4584 + C2290 * C4590 +
              C2294 * C1848 + C2289 * C1855) *
                 C19987) *
                C50742 +
            ((C2741 + C2740 + C2739) * C50518 +
             (C2738 + C2737 + C2736) * C19987) *
                C33658) *
               C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50854 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50855 +
           ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
            (C35759 + C35760 + C35761 + C35762 + C35763 + C35764) * C50742) *
               C2092) *
              C50565 * C50799 +
          (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
            (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
               C50855 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50854 -
           (((C117 * C1850 + C50662 * C1858) * C17176 +
             (C117 * C1846 + C50662 * C1851) * C17181 + C5556 * C17175 +
             C5555 * C17180 + C5549 * C17174 + C5550 * C17179) *
                C50742 +
            (C33976 + C33975 + C33974 + C33973 + C33972 + C33971) * C33658) *
               C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C50854 -
           (C40493 * C39055 + C40494 * C39054 + (C39256 + C39255) * C39053 +
            (C39254 + C39253) * C39052) *
               C50855 +
           (C39269 * C39052 + C39270 * C39053 + (C39260 + C39259) * C39054 +
            (C40501 + C40502) * C39055) *
               C2092) *
              C50565 * C50799 +
          (((C39261 + C39262) * C39052 + (C39263 + C39264) * C39053 +
            (C39265 + C39266) * C39054 + (C39267 + C39268) * C39055) *
               C50855 -
           (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C50854 -
           (((C117 * C7421 + C50662 * C7425) * C50518 +
             (C117 * C7419 + C50662 * C7422) * C19987) *
                C39055 +
            (C39268 + C39267) * C39054 + C39271 * C39053 + C39272 * C39052) *
               C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C1676 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C278 +
          (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
            (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
               C50645 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C35363 + C35364 + C35365 + C35366 + C35367 + C35368) * C50742) *
               C1676 -
           (((C117 * C2700 + C50662 * C2704) * C17176 +
             (C117 * C2695 + C50662 * C2701) * C17181 + C5350 * C17175 +
             C5349 * C17180 + C7025 * C17174 + C7024 * C17179) *
                C50742 +
            (C35368 + C35367 + C35366 + C35365 + C35364 + C35363) * C33658) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C1676 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C50565 * C1027 +
          (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
            (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
               C50645 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) * C50742) *
               C1676 -
           (((C117 * C488 + C50662 * C499) * C17176 +
             (C117 * C469 + C50662 * C489) * C17181 + C536 * C17175 +
             C535 * C17180 + C534 * C17174 + C533 * C17179) *
                C50742 +
            (C34274 + C34273 + C34272 + C34271 + C34270 + C34269) * C33658) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C1676 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C50565 * C1027 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C50645 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C1676) *
              C50565 * C1028 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C1676 -
           (((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
              C2294 * C483 + C2289 * C496) *
                 C50518 +
             (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
              C2294 * C466 + C2289 * C482) *
                 C19987) *
                C50742 +
            ((C3069 + C3068 + C3067) * C50518 +
             (C3066 + C3065 + C3064) * C19987) *
                C33658) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C1676 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C278 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C50645 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C1676) *
              C279 +
          ((((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C38087 + C38088 + C38089) * C19987 +
             (C38090 + C38091 + C38092) * C50518) *
                C50742) *
               C1676 -
           (((C2296 * C20777 + C2291 * C20779 + C2295 * C3695 + C2290 * C3698 +
              C2294 * C2697 + C2289 * C2702) *
                 C50518 +
             (C2296 * C20776 + C2291 * C20778 + C2295 * C3692 + C2290 * C3696 +
              C2294 * C2693 + C2289 * C2696) *
                 C19987) *
                C50742 +
            ((C38092 + C38091 + C38090) * C50518 +
             (C38089 + C38088 + C38087) * C19987) *
                C33658) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C1676 -
           ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
            (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
               C50645) *
              C50565 * C1027 +
          (((C39261 + C39262) * C39052 + (C39263 + C39264) * C39053 +
            (C39265 + C39266) * C39054 + (C39267 + C39268) * C39055) *
               C50645 -
           (C39271 * C39055 + C39272 * C39054 + (C39262 + C39261) * C39053 +
            (C172 * C50518 + C171 * C19987) * C39052) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C19987 + C174 * C50518) * C39052 +
            (C39469 + C39470) * C39053 + (C39471 + C39472) * C39054 +
            (C39473 + C39474) * C39055) *
               C1676 -
           (((C117 * C5503 + C50662 * C5507) * C50518 +
             (C117 * C5498 + C50662 * C5504) * C19987) *
                C39055 +
            (C39474 + C39473) * C39054 + (C39472 + C39471) * C39053 +
            (C39470 + C39469) * C39052) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C19987 +
             (C117 * C130 + C50662 * C143) * C50518) *
                C39052 +
            (C39253 + C39254) * C39053 + C39269 * C39054 + C39270 * C39055) *
               C1676 -
           ((C39259 + C39260) * C39055 + (C39258 + C39257) * C39054 +
            (C39256 + C39255) * C39053 + (C39254 + C39253) * C39052) *
               C50645) *
              C278 +
          (((C39605 + C39606) * C39052 + (C39607 + C39608) * C39053 +
            (C39609 + C39610) * C39054 + (C39887 + C39888) * C39055) *
               C50645 -
           (C39883 * C39055 + C39884 * C39054 + (C39606 + C39605) * C39053 +
            ((C117 * C299 + C50662 * C316) * C50518 +
             (C117 * C286 + C50662 * C300) * C19987) *
                C39052) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C19987 +
             (C117 * C302 + C50662 * C317) * C50518) *
                C39052 +
            (C40215 + C40216) * C39053 + (C40217 + C40218) * C39054 +
            (C40225 + C40226) * C39055) *
               C1676 -
           (((C117 * C23063 + C50662 * C23065) * C50518 +
             (C117 * C23062 + C50662 * C23064) * C19987) *
                C39055 +
            (C40226 + C40225) * C39054 + (C40218 + C40217) * C39053 +
            (C40216 + C40215) * C39052) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C50581 * C50807 -
           ((C5345 * C50523 + C5346 * C49742 + C6106 * C50792 +
             C6105 * C49749) *
                C44420 +
            (C923 * C50523 + C922 * C49742 + C6104 * C50792 + C6103 * C49749) *
                C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C50581 * C50617) *
              C50850 +
          (((C353 * C49749 + C352 * C50792 + C351 * C49742 + C350 * C50523) *
                C50858 +
            (C922 * C49749 + C923 * C50792 + C924 * C49742 + C925 * C50523) *
                C50859 +
            (C5346 * C49749 + C5345 * C50792 + C5725 * C49742 +
             C5726 * C50523) *
                C44420) *
               C50581 * C50617 -
           (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C50581 * C50807) *
              C50851 +
          (((C173 * C49749 + C174 * C50792 + C175 * C49742 + C176 * C50523) *
                C50858 +
            (C528 * C49749 + C527 * C50792 + C526 * C49742 + C525 * C50523) *
                C50859 +
            (C533 * C49749 + C534 * C50792 + C535 * C49742 + C536 * C50523) *
                C44420) *
               C50581 * C50807 -
           (((C117 * C1219 + C50662 * C1227) * C50523 +
             (C117 * C1215 + C50662 * C1220) * C49742 + C5726 * C50792 +
             C5725 * C49749) *
                C44420 +
            (C927 * C50523 + C926 * C49742 + C925 * C50792 + C924 * C49749) *
                C50859 +
            (C348 * C50523 + C349 * C49742 + C350 * C50792 + C351 * C49749) *
                C50858) *
               C50581 * C50617) *
              C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C49749 +
              (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
              C172 * C50523) *
                 C50858 +
             (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
                C50808 -
            ((C44722 + C44723 + C44724 + C44725) * C44420 +
             (C44721 + C44720 + C44719 + C44718) * C50859 +
             (C44717 + C44716 + C44715 + C44714) * C50858) *
                C50645) *
               C50807 +
           (((C45238 + C45239 + C45240 + C45241) * C50858 +
             (C45242 + C45243 + C45244 + C45245) * C50859 +
             (C6518 * C49749 + C6519 * C50792 + C6107 * C49742 +
              C6108 * C50523) *
                 C44420) *
                C50645 -
            ((C45245 + C45244 + C45243 + C45242) * C44420 +
             (C45241 + C45240 + C45239 + C45238) * C50859 +
             (C352 * C50523 + C353 * C49742 +
              (C117 * C299 + C50662 * C316) * C50792 +
              (C117 * C286 + C50662 * C300) * C49749) *
                 C50858) *
                C50808) *
               C50617) *
              C281 +
          ((((C44726 + C44727 + C44728 + C44729) * C50858 +
             (C44730 + C44731 + C44732 + C44733) * C50859 +
             (C44734 + C44735 + C44736 + C44737) * C44420) *
                C50645 -
            (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
             (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                 C50858) *
                C50808) *
               C50807 +
           (((C353 * C49749 + C352 * C50792 + C351 * C49742 + C350 * C50523) *
                 C50858 +
             (C45246 + C45247 + C45248 + C45249) * C50859 +
             (C45250 + C45251 + C45252 + C45253) * C44420) *
                C50808 -
            (((C117 * C6075 + C50662 * C6077) * C50523 +
              (C117 * C6074 + C50662 * C6076) * C49742 + C6108 * C50792 +
              C6107 * C49749) *
                 C44420 +
             (C45253 + C45252 + C45251 + C45250) * C50859 +
             (C45249 + C45248 + C45247 + C45246) * C50858) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C5545 * C49749 + C5546 * C50792 + C530 * C49742 + C529 * C50523) *
                C50859 +
            (C5547 * C49749 + C5548 * C50792 + C531 * C49742 + C532 * C50523) *
                C44420) *
               C50581 * C278 -
           ((C5345 * C50523 + C5346 * C49742 + C6106 * C50792 +
             C6105 * C49749) *
                C44420 +
            (C923 * C50523 + C922 * C49742 + C6104 * C50792 + C6103 * C49749) *
                C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C50581 * C279 +
           (((C117 * C287 + C50662 * C301) * C49749 +
             (C117 * C302 + C50662 * C317) * C50792 + C354 * C49742 +
             C355 * C50523) *
                C50858 +
            (C7022 * C49749 + C7023 * C50792 + C5347 * C49742 +
             C5348 * C50523) *
                C50859 +
            (C7024 * C49749 + C7025 * C50792 + C5349 * C49742 +
             C5350 * C50523) *
                C44420) *
               C50581 * C280) *
              C281 +
          (((C353 * C49749 + C352 * C50792 + C351 * C49742 + C350 * C50523) *
                C50858 +
            (C922 * C49749 + C923 * C50792 + C924 * C49742 + C925 * C50523) *
                C50859 +
            (C5346 * C49749 + C5345 * C50792 + C5725 * C49742 +
             C5726 * C50523) *
                C44420) *
               C50581 * C279 -
           ((C534 * C50523 + C533 * C49742 + C532 * C50792 + C531 * C49749) *
                C44420 +
            (C527 * C50523 + C528 * C49742 + C529 * C50792 + C530 * C49749) *
                C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C50581 * C278 -
           (((C117 * C2700 + C50662 * C2704) * C50523 +
             (C117 * C2695 + C50662 * C2701) * C49742 + C5350 * C50792 +
             C5349 * C49749) *
                C44420 +
            (C11016 * C50523 + C11015 * C49742 + C5348 * C50792 +
             C5347 * C49749) *
                C50859 +
            (C357 * C50523 + C356 * C49742 + C355 * C50792 + C354 * C49749) *
                C50858) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C49749 +
            (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
            C172 * C50523) *
               C50858 +
           (C5545 * C49749 + C5546 * C50792 + C530 * C49742 + C529 * C50523) *
               C50859 +
           (C5547 * C49749 + C5548 * C50792 + C531 * C49742 + C532 * C50523) *
               C44420) *
              C50581 * C50565 * C113 -
          ((C534 * C50523 + C533 * C49742 + C532 * C50792 + C531 * C49749) *
               C44420 +
           (C527 * C50523 + C528 * C49742 + C529 * C50792 + C530 * C49749) *
               C50859 +
           (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
               C50858) *
              C50581 * C50565 * C114 +
          ((C173 * C49749 + C174 * C50792 + C175 * C49742 + C176 * C50523) *
               C50858 +
           (C528 * C49749 + C527 * C50792 + C526 * C49742 + C525 * C50523) *
               C50859 +
           (C533 * C49749 + C534 * C50792 + C535 * C49742 + C536 * C50523) *
               C44420) *
              C50581 * C50565 * C115 -
          (((C117 * C488 + C50662 * C499) * C50523 +
            (C117 * C469 + C50662 * C489) * C49742 + C536 * C50792 +
            C535 * C49749) *
               C44420 +
           (C759 * C50523 + C758 * C49742 + C525 * C50792 + C526 * C49749) *
               C50859 +
           (C177 * C50523 + C178 * C49742 + C176 * C50792 + C175 * C49749) *
               C50858) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C457 -
           ((C44722 + C44723 + C44724 + C44725) * C44420 +
            (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C458 +
           (C44742 * C50858 + (C44725 + C44724 + C44723 + C44722) * C50859 +
            (C7436 * C49749 + C7437 * C50792 + C5553 * C49742 +
             C5554 * C50523) *
                C44420) *
               C459) *
              C50565 * C281 +
          (((C44726 + C44727 + C44728 + C44729) * C50858 +
            (C44730 + C44731 + C44732 + C44733) * C50859 +
            (C44734 + C44735 + C44736 + C44737) * C44420) *
               C458 -
           (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C457 -
           (((C117 * C5503 + C50662 * C5507) * C50523 +
             (C117 * C5498 + C50662 * C5504) * C49742 + C5554 * C50792 +
             C5553 * C49749) *
                C44420 +
            (C44737 + C44736 + C44735 + C44734) * C50859 + C44743 * C50858) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C50808 -
           ((C44722 + C44723 + C44724 + C44725) * C44420 +
            (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C50645) *
              C50565 * C50850 +
          (((C44726 + C44727 + C44728 + C44729) * C50858 +
            (C44730 + C44731 + C44732 + C44733) * C50859 +
            (C44734 + C44735 + C44736 + C44737) * C44420) *
               C50645 -
           (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C50808) *
              C50565 * C50851 +
          (((C173 * C49749 + C174 * C50792 + C175 * C49742 + C176 * C50523) *
                C50858 +
            (C45036 + C45037 + C45038 + C45039) * C50859 +
            (C45040 + C45041 + C45042 + C45043) * C44420) *
               C50808 -
           (((C117 * C1850 + C50662 * C1858) * C50523 +
             (C117 * C1846 + C50662 * C1851) * C49742 + C5556 * C50792 +
             C5555 * C49749) *
                C44420 +
            (C45043 + C45042 + C45041 + C45040) * C50859 +
            (C45039 + C45038 + C45037 + C45036) * C50858) *
               C50645) *
              C50565 * C638)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C49749 +
            (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
            C172 * C50523) *
               C50858 +
           (C5545 * C49749 + C5546 * C50792 + C530 * C49742 + C529 * C50523) *
               C50859 +
           (C5547 * C49749 + C5548 * C50792 + C531 * C49742 + C532 * C50523) *
               C44420) *
              C50581 * C50565 * C113 -
          ((C534 * C50523 + C533 * C49742 + C532 * C50792 + C531 * C49749) *
               C44420 +
           (C527 * C50523 + C528 * C49742 + C529 * C50792 + C530 * C49749) *
               C50859 +
           (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
               C50858) *
              C50581 * C50565 * C114 +
          ((C173 * C49749 + C174 * C50792 + C175 * C49742 + C176 * C50523) *
               C50858 +
           (C528 * C49749 + C527 * C50792 + C526 * C49742 + C525 * C50523) *
               C50859 +
           (C533 * C49749 + C534 * C50792 + C535 * C49742 + C536 * C50523) *
               C44420) *
              C50581 * C50565 * C115 -
          (((C117 * C488 + C50662 * C499) * C50523 +
            (C117 * C469 + C50662 * C489) * C49742 + C536 * C50792 +
            C535 * C49749) *
               C44420 +
           (C759 * C50523 + C758 * C49742 + C525 * C50792 + C526 * C49749) *
               C50859 +
           (C177 * C50523 + C178 * C49742 + C176 * C50792 + C175 * C49749) *
               C50858) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C5545 * C49749 + C5546 * C50792 + C530 * C49742 + C529 * C50523) *
                C50859 +
            (C5547 * C49749 + C5548 * C50792 + C531 * C49742 + C532 * C50523) *
                C44420) *
               C50581 * C278 -
           ((C5345 * C50523 + C5346 * C49742 + C6106 * C50792 +
             C6105 * C49749) *
                C44420 +
            (C923 * C50523 + C922 * C49742 + C6104 * C50792 + C6103 * C49749) *
                C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C50581 * C279 +
           (((C117 * C287 + C50662 * C301) * C49749 +
             (C117 * C302 + C50662 * C317) * C50792 + C354 * C49742 +
             C355 * C50523) *
                C50858 +
            (C7022 * C49749 + C7023 * C50792 + C5347 * C49742 +
             C5348 * C50523) *
                C50859 +
            (C7024 * C49749 + C7025 * C50792 + C5349 * C49742 +
             C5350 * C50523) *
                C44420) *
               C50581 * C280) *
              C281 +
          (((C353 * C49749 + C352 * C50792 + C351 * C49742 + C350 * C50523) *
                C50858 +
            (C922 * C49749 + C923 * C50792 + C924 * C49742 + C925 * C50523) *
                C50859 +
            (C5346 * C49749 + C5345 * C50792 + C5725 * C49742 +
             C5726 * C50523) *
                C44420) *
               C50581 * C279 -
           ((C534 * C50523 + C533 * C49742 + C532 * C50792 + C531 * C49749) *
                C44420 +
            (C527 * C50523 + C528 * C49742 + C529 * C50792 + C530 * C49749) *
                C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C50581 * C278 -
           (((C117 * C2700 + C50662 * C2704) * C50523 +
             (C117 * C2695 + C50662 * C2701) * C49742 + C5350 * C50792 +
             C5349 * C49749) *
                C44420 +
            (C11016 * C50523 + C11015 * C49742 + C5348 * C50792 +
             C5347 * C49749) *
                C50859 +
            (C357 * C50523 + C356 * C49742 + C355 * C50792 + C354 * C49749) *
                C50858) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C50581 * C50852 -
           (C45650 * C44420 + (C45241 + C45240 + C45239 + C45238) * C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C50581 * C50853 +
           (((C117 * C287 + C50662 * C301) * C49749 +
             (C117 * C302 + C50662 * C317) * C50792 + C354 * C49742 +
             C355 * C50523) *
                C50858 +
            (C7022 * C49749 + C7023 * C50792 + C5347 * C49742 +
             C5348 * C50523) *
                C50859 +
            (C7024 * C49749 + C7025 * C50792 + C5349 * C49742 +
             C5350 * C50523) *
                C44420) *
               C50581 * C1331) *
              C50799 +
          (((C353 * C49749 + C352 * C50792 + C351 * C49742 + C350 * C50523) *
                C50858 +
            (C45246 + C45247 + C45248 + C45249) * C50859 +
            (C45250 + C45251 + C45252 + C45253) * C44420) *
               C50581 * C50853 -
           (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C50581 * C50852 -
           (((C117 * C2700 + C50662 * C2704) * C50523 +
             (C117 * C2695 + C50662 * C2701) * C49742 + C5350 * C50792 +
             C5349 * C49749) *
                C44420 +
            (C11016 * C50523 + C11015 * C49742 + C5348 * C50792 +
             C5347 * C49749) *
                C50859 +
            (C357 * C50523 + C356 * C49742 + C355 * C50792 + C354 * C49749) *
                C50858) *
               C50581 * C1331) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C50808 -
           ((C44722 + C44723 + C44724 + C44725) * C44420 +
            (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C50645) *
              C50852 +
          (((C45238 + C45239 + C45240 + C45241) * C50858 +
            (C45242 + C45243 + C45244 + C45245) * C50859 +
            (C45644 + C45645 + C45646 + C45647) * C44420) *
               C50645 -
           (C45650 * C44420 + (C45241 + C45240 + C45239 + C45238) * C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C50808) *
              C50853 +
          ((((C117 * C287 + C50662 * C301) * C49749 +
             (C117 * C302 + C50662 * C317) * C50792 + C354 * C49742 +
             C355 * C50523) *
                C50858 +
            (C46137 + C46138 + C46139 + C46140) * C50859 +
            (C46141 + C46142 + C46143 + C46144) * C44420) *
               C50808 -
           (((C117 * C4587 + C50662 * C4595) * C50523 +
             (C117 * C4583 + C50662 * C4589) * C49742 + C40224 * C50792 +
             C40223 * C49749) *
                C44420 +
            (C46144 + C46143 + C46142 + C46141) * C50859 +
            (C46140 + C46139 + C46138 + C46137) * C50858) *
               C50645) *
              C1331) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C49749 +
            (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
            C172 * C50523) *
               C50858 +
           (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
              C50581 * C1096 -
          ((C45245 + C45244 + C45243 + C45242) * C44420 +
           (C45241 + C45240 + C45239 + C45238) * C50859 +
           (C352 * C50523 + C353 * C49742 +
            (C117 * C299 + C50662 * C316) * C50792 +
            (C117 * C286 + C50662 * C300) * C49749) *
               C50858) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C49749 +
            (C117 * C302 + C50662 * C317) * C50792 + C354 * C49742 +
            C355 * C50523) *
               C50858 +
           (C7022 * C49749 + C7023 * C50792 + C5347 * C49742 + C5348 * C50523) *
               C50859 +
           (C7024 * C49749 + C7025 * C50792 + C5349 * C49742 + C5350 * C50523) *
               C44420) *
              C50581 * C1098 -
          (((C117 * C3693 + C50662 * C3697) * C50523 +
            (C117 * C3691 + C50662 * C3694) * C49742 +
            (C117 * C3695 + C50662 * C3698) * C50792 +
            (C117 * C3692 + C50662 * C3696) * C49749) *
               C44420 +
           ((C117 * C3269 + C50662 * C3273) * C50523 +
            (C117 * C3264 + C50662 * C3268) * C49742 +
            (C117 * C3267 + C50662 * C3272) * C50792 +
            (C117 * C3263 + C50662 * C3266) * C49749) *
               C50859 +
           ((C117 * C1109 + C50662 * C1115) * C50523 +
            (C117 * C1103 + C50662 * C1110) * C49742 +
            (C117 * C1111 + C50662 * C1116) * C50792 +
            (C117 * C1104 + C50662 * C1112) * C49749) *
               C50858) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C50581 * C1025 -
           ((C45245 + C45244 + C45243 + C45242) * C44420 +
            (C45241 + C45240 + C45239 + C45238) * C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C49749 + C352 * C50792 + C351 * C49742 + C350 * C50523) *
                C50858 +
            (C45246 + C45247 + C45248 + C45249) * C50859 +
            (C45250 + C45251 + C45252 + C45253) * C44420) *
               C50581 * C50617 -
           (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C49749 + C174 * C50792 + C175 * C49742 + C176 * C50523) *
                C50858 +
            (C45036 + C45037 + C45038 + C45039) * C50859 +
            (C45040 + C45041 + C45042 + C45043) * C44420) *
               C50581 * C1025 -
           (((C117 * C1219 + C50662 * C1227) * C50523 +
             (C117 * C1215 + C50662 * C1220) * C49742 + C5726 * C50792 +
             C5725 * C49749) *
                C44420 +
            (C927 * C50523 + C926 * C49742 + C925 * C50792 + C924 * C49749) *
                C50859 +
            (C348 * C50523 + C349 * C49742 + C350 * C50792 + C351 * C49749) *
                C50858) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C457 -
           ((C44722 + C44723 + C44724 + C44725) * C44420 +
            (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C458 +
           (C44742 * C50858 + (C44725 + C44724 + C44723 + C44722) * C50859 +
            (C7436 * C49749 + C7437 * C50792 + C5553 * C49742 +
             C5554 * C50523) *
                C44420) *
               C459) *
              C1025 +
          (((C45238 + C45239 + C45240 + C45241) * C50858 +
            (C45242 + C45243 + C45244 + C45245) * C50859 +
            (C45644 + C45645 + C45646 + C45647) * C44420) *
               C458 -
           (C45650 * C44420 + (C45241 + C45240 + C45239 + C45238) * C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C457 -
           (((C117 * C6504 + C50662 * C6508) * C50523 +
             (C117 * C6502 + C50662 * C6505) * C49742 + C39886 * C50792 +
             C39885 * C49749) *
                C44420 +
            (C45647 + C45646 + C45645 + C45644) * C50859 + C45650 * C50858) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C49749 +
              (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
              C172 * C50523) *
                 C50858 +
             (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
                C50808 -
            ((C44722 + C44723 + C44724 + C44725) * C44420 +
             (C44721 + C44720 + C44719 + C44718) * C50859 +
             (C44717 + C44716 + C44715 + C44714) * C50858) *
                C50645) *
               C1025 +
           (((C45238 + C45239 + C45240 + C45241) * C50858 +
             (C45242 + C45243 + C45244 + C45245) * C50859 +
             (C45644 + C45645 + C45646 + C45647) * C44420) *
                C50645 -
            (C45650 * C44420 + (C45241 + C45240 + C45239 + C45238) * C50859 +
             (C352 * C50523 + C353 * C49742 +
              (C117 * C299 + C50662 * C316) * C50792 +
              (C117 * C286 + C50662 * C300) * C49749) *
                 C50858) *
                C50808) *
               C50617) *
              C50799 +
          ((((C44726 + C44727 + C44728 + C44729) * C50858 +
             (C44730 + C44731 + C44732 + C44733) * C50859 +
             (C44734 + C44735 + C44736 + C44737) * C44420) *
                C50645 -
            (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
             (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                 C50858) *
                C50808) *
               C1025 +
           (((C353 * C49749 + C352 * C50792 + C351 * C49742 + C350 * C50523) *
                 C50858 +
             (C45246 + C45247 + C45248 + C45249) * C50859 +
             (C45250 + C45251 + C45252 + C45253) * C44420) *
                C50808 -
            (((C117 * C6075 + C50662 * C6077) * C50523 +
              (C117 * C6074 + C50662 * C6076) * C49742 + C6108 * C50792 +
              C6107 * C49749) *
                 C44420 +
             (C45253 + C45252 + C45251 + C45250) * C50859 +
             (C45249 + C45248 + C45247 + C45246) * C50858) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C50581 * C1025 -
           ((C45245 + C45244 + C45243 + C45242) * C44420 +
            (C45241 + C45240 + C45239 + C45238) * C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C49749 + C352 * C50792 + C351 * C49742 + C350 * C50523) *
                C50858 +
            (C45246 + C45247 + C45248 + C45249) * C50859 +
            (C45250 + C45251 + C45252 + C45253) * C44420) *
               C50581 * C50617 -
           (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C49749 + C174 * C50792 + C175 * C49742 + C176 * C50523) *
                C50858 +
            (C45036 + C45037 + C45038 + C45039) * C50859 +
            (C45040 + C45041 + C45042 + C45043) * C44420) *
               C50581 * C1025 -
           (((C117 * C1219 + C50662 * C1227) * C50523 +
             (C117 * C1215 + C50662 * C1220) * C49742 + C5726 * C50792 +
             C5725 * C49749) *
                C44420 +
            (C927 * C50523 + C926 * C49742 + C925 * C50792 + C924 * C49749) *
                C50859 +
            (C348 * C50523 + C349 * C49742 + C350 * C50792 + C351 * C49749) *
                C50858) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C49749 +
            (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
            C172 * C50523) *
               C50858 +
           (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
              C50581 * C1096 -
          ((C45245 + C45244 + C45243 + C45242) * C44420 +
           (C45241 + C45240 + C45239 + C45238) * C50859 +
           (C352 * C50523 + C353 * C49742 +
            (C117 * C299 + C50662 * C316) * C50792 +
            (C117 * C286 + C50662 * C300) * C49749) *
               C50858) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C49749 +
            (C117 * C302 + C50662 * C317) * C50792 + C354 * C49742 +
            C355 * C50523) *
               C50858 +
           (C7022 * C49749 + C7023 * C50792 + C5347 * C49742 + C5348 * C50523) *
               C50859 +
           (C7024 * C49749 + C7025 * C50792 + C5349 * C49742 + C5350 * C50523) *
               C44420) *
              C50581 * C1098 -
          (((C117 * C3693 + C50662 * C3697) * C50523 +
            (C117 * C3691 + C50662 * C3694) * C49742 +
            (C117 * C3695 + C50662 * C3698) * C50792 +
            (C117 * C3692 + C50662 * C3696) * C49749) *
               C44420 +
           ((C117 * C3269 + C50662 * C3273) * C50523 +
            (C117 * C3264 + C50662 * C3268) * C49742 +
            (C117 * C3267 + C50662 * C3272) * C50792 +
            (C117 * C3263 + C50662 * C3266) * C49749) *
               C50859 +
           ((C117 * C1109 + C50662 * C1115) * C50523 +
            (C117 * C1103 + C50662 * C1110) * C49742 +
            (C117 * C1111 + C50662 * C1116) * C50792 +
            (C117 * C1104 + C50662 * C1112) * C49749) *
               C50858) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C49749 +
              (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
              C172 * C50523) *
                 C50858 +
             (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
                C1676 -
            (C46541 * C44420 + (C44721 + C44720 + C44719 + C44718) * C50859 +
             (C44717 + C44716 + C44715 + C44714) * C50858) *
                C50645) *
               C50807 +
           (((C45238 + C45239 + C45240 + C45241) * C50858 +
             (C45242 + C45243 + C45244 + C45245) * C50859 +
             (C45644 + C45645 + C45646 + C45647) * C44420) *
                C50645 -
            (C45650 * C44420 + (C45241 + C45240 + C45239 + C45238) * C50859 +
             (C352 * C50523 + C353 * C49742 +
              (C117 * C299 + C50662 * C316) * C50792 +
              (C117 * C286 + C50662 * C300) * C49749) *
                 C50858) *
                C1676) *
               C50617) *
              C50799 +
          ((((C44726 + C44727 + C44728 + C44729) * C50858 +
             (C44730 + C44731 + C44732 + C44733) * C50859 +
             (C44734 + C44735 + C44736 + C44737) * C44420) *
                C50645 -
            (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
             (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                 C50858) *
                C1676) *
               C50807 +
           (((C353 * C49749 + C352 * C50792 + C351 * C49742 + C350 * C50523) *
                 C50858 +
             (C45246 + C45247 + C45248 + C45249) * C50859 +
             (C45250 + C45251 + C45252 + C45253) * C44420) *
                C1676 -
            (((C117 * C6075 + C50662 * C6077) * C50523 +
              (C117 * C6074 + C50662 * C6076) * C49742 + C6108 * C50792 +
              C6107 * C49749) *
                 C44420 +
             (C45253 + C45252 + C45251 + C45250) * C50859 +
             (C45249 + C45248 + C45247 + C45246) * C50858) *
                C50645) *
               C50617) *
              C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C50854 -
           (C46541 * C44420 + (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C50855 +
           (C44742 * C50858 + (C44725 + C44724 + C44723 + C44722) * C50859 +
            (C46536 + C46537 + C46538 + C46539) * C44420) *
               C2092) *
              C50807 +
          (((C45238 + C45239 + C45240 + C45241) * C50858 +
            (C45242 + C45243 + C45244 + C45245) * C50859 +
            (C45644 + C45645 + C45646 + C45647) * C44420) *
               C50855 -
           (C45650 * C44420 + (C45241 + C45240 + C45239 + C45238) * C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C50854 -
           (((C117 * C6504 + C50662 * C6508) * C50523 +
             (C117 * C6502 + C50662 * C6505) * C49742 + C39886 * C50792 +
             C39885 * C49749) *
                C44420 +
            (C45647 + C45646 + C45645 + C45644) * C50859 + C45650 * C50858) *
               C2092) *
              C50617) *
         C50546) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C1676 -
           ((C44722 + C44723 + C44724 + C44725) * C44420 +
            (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C50645) *
              C278 +
          (((C45238 + C45239 + C45240 + C45241) * C50858 +
            (C45242 + C45243 + C45244 + C45245) * C50859 +
            (C45644 + C45645 + C45646 + C45647) * C44420) *
               C50645 -
           (C45650 * C44420 + (C45241 + C45240 + C45239 + C45238) * C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C49749 +
             (C117 * C302 + C50662 * C317) * C50792 + C354 * C49742 +
             C355 * C50523) *
                C50858 +
            (C46137 + C46138 + C46139 + C46140) * C50859 +
            (C46141 + C46142 + C46143 + C46144) * C44420) *
               C1676 -
           (((C117 * C4587 + C50662 * C4595) * C50523 +
             (C117 * C4583 + C50662 * C4589) * C49742 + C40224 * C50792 +
             C40223 * C49749) *
                C44420 +
            (C46144 + C46143 + C46142 + C46141) * C50859 +
            (C46140 + C46139 + C46138 + C46137) * C50858) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C1676 -
           ((C44722 + C44723 + C44724 + C44725) * C44420 +
            (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C50645) *
              C50565 * C1027 +
          (((C44726 + C44727 + C44728 + C44729) * C50858 +
            (C44730 + C44731 + C44732 + C44733) * C50859 +
            (C44734 + C44735 + C44736 + C44737) * C44420) *
               C50645 -
           (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C49749 + C174 * C50792 + C175 * C49742 + C176 * C50523) *
                C50858 +
            (C45036 + C45037 + C45038 + C45039) * C50859 +
            (C45040 + C45041 + C45042 + C45043) * C44420) *
               C1676 -
           (((C117 * C1850 + C50662 * C1858) * C50523 +
             (C117 * C1846 + C50662 * C1851) * C49742 + C5556 * C50792 +
             C5555 * C49749) *
                C44420 +
            (C45043 + C45042 + C45041 + C45040) * C50859 +
            (C45039 + C45038 + C45037 + C45036) * C50858) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C49749 +
            (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
            C172 * C50523) *
               C50858 +
           (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
              C1842 -
          (C46541 * C44420 + (C44721 + C44720 + C44719 + C44718) * C50859 +
           (C44717 + C44716 + C44715 + C44714) * C50858) *
              C1843 +
          (C44742 * C50858 + (C44725 + C44724 + C44723 + C44722) * C50859 +
           (C46536 + C46537 + C46538 + C46539) * C44420) *
              C1844 -
          (((C117 * C7421 + C50662 * C7425) * C50523 +
            (C117 * C7419 + C50662 * C7422) * C49742 + C40500 * C50792 +
            C40499 * C49749) *
               C44420 +
           (C46539 + C46538 + C46537 + C46536) * C50859 + C46541 * C50858) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C50854 -
           (C46541 * C44420 + (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C50855 +
           (C44742 * C50858 + (C44725 + C44724 + C44723 + C44722) * C50859 +
            (C46536 + C46537 + C46538 + C46539) * C44420) *
               C2092) *
              C50565 * C50799 +
          (((C44726 + C44727 + C44728 + C44729) * C50858 +
            (C44730 + C44731 + C44732 + C44733) * C50859 +
            (C44734 + C44735 + C44736 + C44737) * C44420) *
               C50855 -
           (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C50854 -
           (((C117 * C5503 + C50662 * C5507) * C50523 +
             (C117 * C5498 + C50662 * C5504) * C49742 + C5554 * C50792 +
             C5553 * C49749) *
                C44420 +
            (C44737 + C44736 + C44735 + C44734) * C50859 + C44743 * C50858) *
               C2092) *
              C50565 * C50552)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C1676 -
           ((C44722 + C44723 + C44724 + C44725) * C44420 +
            (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C50645) *
              C50565 * C1027 +
          (((C44726 + C44727 + C44728 + C44729) * C50858 +
            (C44730 + C44731 + C44732 + C44733) * C50859 +
            (C44734 + C44735 + C44736 + C44737) * C44420) *
               C50645 -
           (C44743 * C44420 + (C44729 + C44728 + C44727 + C44726) * C50859 +
            (C174 * C50523 + C173 * C49742 + C172 * C50792 + C171 * C49749) *
                C50858) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C49749 + C174 * C50792 + C175 * C49742 + C176 * C50523) *
                C50858 +
            (C45036 + C45037 + C45038 + C45039) * C50859 +
            (C45040 + C45041 + C45042 + C45043) * C44420) *
               C1676 -
           (((C117 * C1850 + C50662 * C1858) * C50523 +
             (C117 * C1846 + C50662 * C1851) * C49742 + C5556 * C50792 +
             C5555 * C49749) *
                C44420 +
            (C45043 + C45042 + C45041 + C45040) * C50859 +
            (C45039 + C45038 + C45037 + C45036) * C50858) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C49749 +
             (C117 * C130 + C50662 * C143) * C50792 + C171 * C49742 +
             C172 * C50523) *
                C50858 +
            (C44714 + C44715 + C44716 + C44717) * C50859 + C44742 * C44420) *
               C1676 -
           ((C44722 + C44723 + C44724 + C44725) * C44420 +
            (C44721 + C44720 + C44719 + C44718) * C50859 +
            (C44717 + C44716 + C44715 + C44714) * C50858) *
               C50645) *
              C278 +
          (((C45238 + C45239 + C45240 + C45241) * C50858 +
            (C45242 + C45243 + C45244 + C45245) * C50859 +
            (C45644 + C45645 + C45646 + C45647) * C44420) *
               C50645 -
           (C45650 * C44420 + (C45241 + C45240 + C45239 + C45238) * C50859 +
            (C352 * C50523 + C353 * C49742 +
             (C117 * C299 + C50662 * C316) * C50792 +
             (C117 * C286 + C50662 * C300) * C49749) *
                C50858) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C49749 +
             (C117 * C302 + C50662 * C317) * C50792 + C354 * C49742 +
             C355 * C50523) *
                C50858 +
            (C46137 + C46138 + C46139 + C46140) * C50859 +
            (C46141 + C46142 + C46143 + C46144) * C44420) *
               C1676 -
           (((C117 * C4587 + C50662 * C4595) * C50523 +
             (C117 * C4583 + C50662 * C4589) * C49742 + C40224 * C50792 +
             C40223 * C49749) *
                C44420 +
            (C46144 + C46143 + C46142 + C46141) * C50859 +
            (C46140 + C46139 + C46138 + C46137) * C50858) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50581 * C50807 -
           ((C925 * C17176 + C924 * C17181 + C923 * C17175 + C922 * C17180 +
             C6104 * C17174 + C6103 * C17179) *
                C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C50617) *
              C50850 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C922 * C17179 + C923 * C17174 + C924 * C17180 + C925 * C17175 +
             C926 * C17181 + C927 * C17176) *
                C50742) *
               C50581 * C50617 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C50807) *
              C50851 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C528 * C17179 + C527 * C17174 + C526 * C17180 + C525 * C17175 +
             C758 * C17181 + C759 * C17176) *
                C50742) *
               C50581 * C50807 -
           (((C117 * C902 + C50662 * C908) * C17176 +
             (C117 * C893 + C50662 * C903) * C17181 + C927 * C17175 +
             C926 * C17180 + C925 * C17174 + C924 * C17179) *
                C50742 +
            (C649 * C17176 + C648 * C17181 + C348 * C17175 + C349 * C17180 +
             C350 * C17174 + C351 * C17179) *
                C33658) *
               C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50581 * C50807 -
           (((C2296 * C3267 + C2291 * C3272 + C2295 * C1572 + C2290 * C1577 +
              C2294 * C895 + C2289 * C904) *
                 C50518 +
             (C2296 * C3263 + C2291 * C3266 + C2295 * C1565 + C2290 * C1573 +
              C2294 * C889 + C2289 * C894) *
                 C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C50617) *
              C50850 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C50617 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C50807) *
              C50851 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C50581 * C50807 -
           (((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50518 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C19987) *
                C50742 +
            ((C2905 + C2904 + C2903) * C50518 +
             (C2902 + C2901 + C2900) * C19987) *
                C33658) *
               C50581 * C50617) *
              C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C17179 +
              (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
              C172 * C17175 + C173 * C17181 + C174 * C17176) *
                 C33658 +
             (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
                C50808 -
            ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
             (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
                C50645) *
               C50807 +
           (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
             (C6105 * C17179 + C6106 * C17174 + C5346 * C17180 +
              C5345 * C17175 + C5725 * C17181 + C5726 * C17176) *
                 C50742) *
                C50645 -
            ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
             (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
              (C117 * C299 + C50662 * C316) * C17174 +
              (C117 * C286 + C50662 * C300) * C17179) *
                 C33658) *
                C50808) *
               C50617) *
              C281 +
          ((((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
             (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
                C50645 -
            ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
             (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
              C172 * C17174 + C171 * C17179) *
                 C33658) *
                C50808) *
               C50807 +
           (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
              C349 * C17181 + C348 * C17176) *
                 C33658 +
             (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
                C50808 -
            (((C117 * C1219 + C50662 * C1227) * C17176 +
              (C117 * C1215 + C50662 * C1220) * C17181 + C5726 * C17175 +
              C5725 * C17180 + C5345 * C17174 + C5346 * C17179) *
                 C50742 +
             (C34480 + C34479 + C34478 + C34477 + C34476 + C34475) * C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
               C2296 * C287 + C2291 * C301) *
                  C19987 +
              (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
               C2296 * C302 + C2291 * C317) *
                  C50518) *
                 C33658 +
             ((C36665 + C36666 + C36667) * C19987 +
              (C36668 + C36669 + C36670) * C50518) *
                 C50742) *
                C50808 -
            (((C36671 + C36672 + C36673) * C50518 +
              (C36674 + C36675 + C36676) * C19987) *
                 C50742 +
             ((C36670 + C36669 + C36668) * C50518 +
              (C36667 + C36666 + C36665) * C19987) *
                 C33658) *
                C50645) *
               C50807 +
           ((((C37175 + C37176 + C37177) * C19987 +
              (C37178 + C37179 + C37180) * C50518) *
                 C33658 +
             ((C2294 * C1218 + C2289 * C1226 + C2295 * C2693 + C2290 * C2696 +
               C2296 * C3692 + C2291 * C3696) *
                  C19987 +
              (C2294 * C1225 + C2289 * C1230 + C2295 * C2697 + C2290 * C2702 +
               C2296 * C3695 + C2291 * C3698) *
                  C50518) *
                 C50742) *
                C50645 -
            (((C37180 + C37179 + C37178) * C50518 +
              (C37177 + C37176 + C37175) * C19987) *
                 C50742 +
             ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
               C2294 * C299 + C2289 * C316) *
                  C50518 +
              (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
               C2294 * C286 + C2289 * C300) *
                  C19987) *
                 C33658) *
                C50808) *
               C50617) *
              C281 +
          (((((C2735 + C2734 + C2733) * C19987 +
              (C2732 + C2731 + C2730) * C50518) *
                 C33658 +
             ((C2736 + C2737 + C2738) * C19987 +
              (C2739 + C2740 + C2741) * C50518) *
                 C50742) *
                C50645 -
            (((C2730 + C2731 + C2732) * C50518 +
              (C2733 + C2734 + C2735) * C19987) *
                 C50742 +
             ((C2341 + C2340 + C2339) * C50518 +
              (C2338 + C2337 + C2336) * C19987) *
                 C33658) *
                C50808) *
               C50807 +
           ((((C2541 + C2540 + C2539) * C19987 +
              (C2538 + C2537 + C2536) * C50518) *
                 C33658 +
             ((C3288 + C3289 + C3290) * C19987 +
              (C3291 + C3292 + C3293) * C50518) *
                 C50742) *
                C50808 -
            (((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
               C2294 * C1223 + C2289 * C1229) *
                  C50518 +
              (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
               C2294 * C1217 + C2289 * C1224) *
                  C19987) *
                 C50742 +
             ((C3293 + C3292 + C3291) * C50518 +
              (C3290 + C3289 + C3288) * C19987) *
                 C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C5545 * C17179 + C5546 * C17174 + C530 * C17180 + C529 * C17175 +
             C528 * C17181 + C527 * C17176) *
                C50742) *
               C50581 * C278 -
           ((C925 * C17176 + C924 * C17181 + C923 * C17175 + C922 * C17180 +
             C6104 * C17174 + C6103 * C17179) *
                C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C279 +
           (((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 + C5348 * C17175 +
             C11015 * C17181 + C11016 * C17176) *
                C50742) *
               C50581 * C280) *
              C281 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C922 * C17179 + C923 * C17174 + C924 * C17180 + C925 * C17175 +
             C926 * C17181 + C927 * C17176) *
                C50742) *
               C50581 * C279 -
           ((C525 * C17176 + C526 * C17181 + C527 * C17175 + C528 * C17180 +
             C529 * C17174 + C530 * C17179) *
                C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C278 -
           (((C117 * C1566 + C50662 * C1574) * C17176 +
             (C117 * C1562 + C50662 * C1567) * C17181 + C11016 * C17175 +
             C11015 * C17180 + C5348 * C17174 + C5347 * C17179) *
                C50742 +
            (C359 * C17176 + C358 * C17181 + C357 * C17175 + C356 * C17180 +
             C355 * C17174 + C354 * C17179) *
                C33658) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C17179 +
            (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
            C172 * C17175 + C173 * C17181 + C174 * C17176) *
               C33658 +
           (C5545 * C17179 + C5546 * C17174 + C530 * C17180 + C529 * C17175 +
            C528 * C17181 + C527 * C17176) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C525 * C17176 + C526 * C17181 + C527 * C17175 + C528 * C17180 +
            C529 * C17174 + C530 * C17179) *
               C50742 +
           (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
            C172 * C17174 + C171 * C17179) *
               C33658) *
              C50581 * C50565 * C114 +
          ((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
            C178 * C17181 + C177 * C17176) *
               C33658 +
           (C528 * C17179 + C527 * C17174 + C526 * C17180 + C525 * C17175 +
            C758 * C17181 + C759 * C17176) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C117 * C750 + C50662 * C752) * C17176 +
            (C117 * C749 + C50662 * C751) * C17181 + C759 * C17175 +
            C758 * C17180 + C525 * C17174 + C526 * C17179) *
               C50742 +
           (C180 * C17176 + C179 * C17181 + C177 * C17175 + C178 * C17180 +
            C176 * C17174 + C175 * C17179) *
               C33658) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C457 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C458 +
           ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
            (C5552 * C17179 + C5551 * C17174 + C5550 * C17180 + C5549 * C17175 +
             C5555 * C17181 + C5556 * C17176) *
                C50742) *
               C459) *
              C50565 * C281 +
          (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
            (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
               C458 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C457 -
           (((C117 * C1850 + C50662 * C1858) * C17176 +
             (C117 * C1846 + C50662 * C1851) * C17181 + C5556 * C17175 +
             C5555 * C17180 + C5549 * C17174 + C5550 * C17179) *
                C50742 +
            (C33976 + C33975 + C33974 + C33973 + C33972 + C33971) * C33658) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C2294 * C463 + C2289 * C477 + C2295 * C889 + C2290 * C894 +
             C2296 * C1565 + C2291 * C1573) *
                C19987 +
            (C2294 * C476 + C2289 * C493 + C2295 * C895 + C2290 * C904 +
             C2296 * C1572 + C2291 * C1577) *
                C50518) *
               C50742) *
              C50581 * C50565 * C113 -
          (((C2730 + C2731 + C2732) * C50518 +
            (C2733 + C2734 + C2735) * C19987) *
               C50742 +
           ((C2341 + C2340 + C2339) * C50518 +
            (C2338 + C2337 + C2336) * C19987) *
               C33658) *
              C50581 * C50565 * C114 +
          (((C2347 + C2346 + C2345) * C19987 +
            (C2344 + C2343 + C2342) * C50518) *
               C33658 +
           ((C3064 + C3065 + C3066) * C19987 +
            (C3067 + C3068 + C3069) * C50518) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50518 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C19987) *
               C50742 +
           ((C2353 + C2352 + C2351) * C50518 +
            (C2350 + C2349 + C2348) * C19987) *
               C33658) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C2294 * C463 + C2289 * C477 + C2295 * C889 + C2290 * C894 +
              C2296 * C1565 + C2291 * C1573) *
                 C19987 +
             (C2294 * C476 + C2289 * C493 + C2295 * C895 + C2290 * C904 +
              C2296 * C1572 + C2291 * C1577) *
                 C50518) *
                C50742) *
               C50581 * C278 -
           (((C2296 * C3267 + C2291 * C3272 + C2295 * C1572 + C2290 * C1577 +
              C2294 * C895 + C2289 * C904) *
                 C50518 +
             (C2296 * C3263 + C2291 * C3266 + C2295 * C1565 + C2290 * C1573 +
              C2294 * C889 + C2289 * C894) *
                 C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C279 +
           (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
              C2296 * C4186 + C2291 * C4190) *
                 C19987 +
             (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
              C2296 * C4189 + C2291 * C4192) *
                 C50518) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C279 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C278 -
           (((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
              C2294 * C1570 + C2289 * C1576) *
                 C50518 +
             (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
              C2294 * C1564 + C2289 * C1571) *
                 C19987) *
                C50742 +
            ((C2547 + C2546 + C2545) * C50518 +
             (C2544 + C2543 + C2542) * C19987) *
                C33658) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C457 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C458 +
           (((C36676 + C36675 + C36674) * C19987 +
             (C36673 + C36672 + C36671) * C50518) *
                C33658 +
            ((C2294 * C1849 + C2289 * C1857 + C2295 * C4586 + C2290 * C4594 +
              C2296 * C4585 + C2291 * C4593) *
                 C19987 +
             (C2294 * C1856 + C2289 * C1861 + C2295 * C4592 + C2290 * C4598 +
              C2296 * C4591 + C2291 * C4597) *
                 C50518) *
                C50742) *
               C459) *
              C50565 * C281 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C458 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C457 -
           (((C2296 * C4587 + C2291 * C4595 + C2295 * C4588 + C2290 * C4596 +
              C2294 * C1854 + C2289 * C1860) *
                 C50518 +
             (C2296 * C4583 + C2291 * C4589 + C2295 * C4584 + C2290 * C4590 +
              C2294 * C1848 + C2289 * C1855) *
                 C19987) *
                C50742 +
            ((C2741 + C2740 + C2739) * C50518 +
             (C2738 + C2737 + C2736) * C19987) *
                C33658) *
               C459) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50808 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C50565 * C50850 +
          (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
            (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
               C50645 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50808) *
              C50565 * C50851 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) * C50742) *
               C50808 -
           (((C117 * C488 + C50662 * C499) * C17176 +
             (C117 * C469 + C50662 * C489) * C17181 + C536 * C17175 +
             C535 * C17180 + C534 * C17174 + C533 * C17179) *
                C50742 +
            (C34274 + C34273 + C34272 + C34271 + C34270 + C34269) * C33658) *
               C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50808 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C50565 * C50850 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C50645 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50808) *
              C50565 * C50851 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C50808 -
           (((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
              C2294 * C483 + C2289 * C496) *
                 C50518 +
             (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
              C2294 * C466 + C2289 * C482) *
                 C19987) *
                C50742 +
            ((C3069 + C3068 + C3067) * C50518 +
             (C3066 + C3065 + C3064) * C19987) *
                C33658) *
               C50645) *
              C50565 * C638)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C17179 +
            (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
            C172 * C17175 + C173 * C17181 + C174 * C17176) *
               C33658 +
           (C5545 * C17179 + C5546 * C17174 + C530 * C17180 + C529 * C17175 +
            C528 * C17181 + C527 * C17176) *
               C50742) *
              C50581 * C50565 * C113 -
          ((C525 * C17176 + C526 * C17181 + C527 * C17175 + C528 * C17180 +
            C529 * C17174 + C530 * C17179) *
               C50742 +
           (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
            C172 * C17174 + C171 * C17179) *
               C33658) *
              C50581 * C50565 * C114 +
          ((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
            C178 * C17181 + C177 * C17176) *
               C33658 +
           (C528 * C17179 + C527 * C17174 + C526 * C17180 + C525 * C17175 +
            C758 * C17181 + C759 * C17176) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C117 * C750 + C50662 * C752) * C17176 +
            (C117 * C749 + C50662 * C751) * C17181 + C759 * C17175 +
            C758 * C17180 + C525 * C17174 + C526 * C17179) *
               C50742 +
           (C180 * C17176 + C179 * C17181 + C177 * C17175 + C178 * C17180 +
            C176 * C17174 + C175 * C17179) *
               C33658) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C5545 * C17179 + C5546 * C17174 + C530 * C17180 + C529 * C17175 +
             C528 * C17181 + C527 * C17176) *
                C50742) *
               C50581 * C278 -
           ((C925 * C17176 + C924 * C17181 + C923 * C17175 + C922 * C17180 +
             C6104 * C17174 + C6103 * C17179) *
                C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C279 +
           (((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 + C5348 * C17175 +
             C11015 * C17181 + C11016 * C17176) *
                C50742) *
               C50581 * C280) *
              C281 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C922 * C17179 + C923 * C17174 + C924 * C17180 + C925 * C17175 +
             C926 * C17181 + C927 * C17176) *
                C50742) *
               C50581 * C279 -
           ((C525 * C17176 + C526 * C17181 + C527 * C17175 + C528 * C17180 +
             C529 * C17174 + C530 * C17179) *
                C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C278 -
           (((C117 * C1566 + C50662 * C1574) * C17176 +
             (C117 * C1562 + C50662 * C1567) * C17181 + C11016 * C17175 +
             C11015 * C17180 + C5348 * C17174 + C5347 * C17179) *
                C50742 +
            (C359 * C17176 + C358 * C17181 + C357 * C17175 + C356 * C17180 +
             C355 * C17174 + C354 * C17179) *
                C33658) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C2294 * C463 + C2289 * C477 + C2295 * C889 + C2290 * C894 +
             C2296 * C1565 + C2291 * C1573) *
                C19987 +
            (C2294 * C476 + C2289 * C493 + C2295 * C895 + C2290 * C904 +
             C2296 * C1572 + C2291 * C1577) *
                C50518) *
               C50742) *
              C50581 * C50565 * C113 -
          (((C2730 + C2731 + C2732) * C50518 +
            (C2733 + C2734 + C2735) * C19987) *
               C50742 +
           ((C2341 + C2340 + C2339) * C50518 +
            (C2338 + C2337 + C2336) * C19987) *
               C33658) *
              C50581 * C50565 * C114 +
          (((C2347 + C2346 + C2345) * C19987 +
            (C2344 + C2343 + C2342) * C50518) *
               C33658 +
           ((C3064 + C3065 + C3066) * C19987 +
            (C3067 + C3068 + C3069) * C50518) *
               C50742) *
              C50581 * C50565 * C115 -
          (((C2296 * C1566 + C2291 * C1574 + C2295 * C901 + C2290 * C907 +
             C2294 * C470 + C2289 * C490) *
                C50518 +
            (C2296 * C1562 + C2291 * C1567 + C2295 * C892 + C2290 * C900 +
             C2294 * C460 + C2289 * C471) *
                C19987) *
               C50742 +
           ((C2353 + C2352 + C2351) * C50518 +
            (C2350 + C2349 + C2348) * C19987) *
               C33658) *
              C50581 * C50565 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C2294 * C463 + C2289 * C477 + C2295 * C889 + C2290 * C894 +
              C2296 * C1565 + C2291 * C1573) *
                 C19987 +
             (C2294 * C476 + C2289 * C493 + C2295 * C895 + C2290 * C904 +
              C2296 * C1572 + C2291 * C1577) *
                 C50518) *
                C50742) *
               C50581 * C278 -
           (((C2296 * C3267 + C2291 * C3272 + C2295 * C1572 + C2290 * C1577 +
              C2294 * C895 + C2289 * C904) *
                 C50518 +
             (C2296 * C3263 + C2291 * C3266 + C2295 * C1565 + C2290 * C1573 +
              C2294 * C889 + C2289 * C894) *
                 C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C279 +
           (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
              C2296 * C4186 + C2291 * C4190) *
                 C19987 +
             (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
              C2296 * C4189 + C2291 * C4192) *
                 C50518) *
                C50742) *
               C50581 * C280) *
              C281 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C279 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C278 -
           (((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
              C2294 * C1570 + C2289 * C1576) *
                 C50518 +
             (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
              C2294 * C1564 + C2289 * C1571) *
                 C19987) *
                C50742 +
            ((C2547 + C2546 + C2545) * C50518 +
             (C2544 + C2543 + C2542) * C19987) *
                C33658) *
               C50581 * C280) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50581 * C50852 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C50853 +
           (((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 + C5348 * C17175 +
             C11015 * C17181 + C11016 * C17176) *
                C50742) *
               C50581 * C1331) *
              C50799 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
               C50581 * C50853 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C50852 -
           (((C117 * C1566 + C50662 * C1574) * C17176 +
             (C117 * C1562 + C50662 * C1567) * C17181 + C11016 * C17175 +
             C11015 * C17180 + C5348 * C17174 + C5347 * C17179) *
                C50742 +
            (C359 * C17176 + C358 * C17181 + C357 * C17175 + C356 * C17180 +
             C355 * C17174 + C354 * C17179) *
                C33658) *
               C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50581 * C50852 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C50853 +
           (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
              C2296 * C4186 + C2291 * C4190) *
                 C19987 +
             (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
              C2296 * C4189 + C2291 * C4192) *
                 C50518) *
                C50742) *
               C50581 * C1331) *
              C50799 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C50853 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C50852 -
           (((C2296 * C4187 + C2291 * C4191 + C2295 * C3269 + C2290 * C3273 +
              C2294 * C1570 + C2289 * C1576) *
                 C50518 +
             (C2296 * C4185 + C2291 * C4188 + C2295 * C3264 + C2290 * C3268 +
              C2294 * C1564 + C2289 * C1571) *
                 C19987) *
                C50742 +
            ((C2547 + C2546 + C2545) * C50518 +
             (C2544 + C2543 + C2542) * C19987) *
                C33658) *
               C50581 * C1331) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50808 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C50852 +
          (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
            (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
               C50645 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50808) *
              C50853 +
          ((((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C35363 + C35364 + C35365 + C35366 + C35367 + C35368) * C50742) *
               C50808 -
           (((C117 * C2700 + C50662 * C2704) * C17176 +
             (C117 * C2695 + C50662 * C2701) * C17181 + C5350 * C17175 +
             C5349 * C17180 + C7025 * C17174 + C7024 * C17179) *
                C50742 +
            (C35368 + C35367 + C35366 + C35365 + C35364 + C35363) * C33658) *
               C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50808 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C50852 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C50645 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50808) *
              C50853 +
          ((((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C38087 + C38088 + C38089) * C19987 +
             (C38090 + C38091 + C38092) * C50518) *
                C50742) *
               C50808 -
           (((C2296 * C20777 + C2291 * C20779 + C2295 * C3695 + C2290 * C3698 +
              C2294 * C2697 + C2289 * C2702) *
                 C50518 +
             (C2296 * C20776 + C2291 * C20778 + C2295 * C3692 + C2290 * C3696 +
              C2294 * C2693 + C2289 * C2696) *
                 C19987) *
                C50742 +
            ((C38092 + C38091 + C38090) * C50518 +
             (C38089 + C38088 + C38087) * C19987) *
                C33658) *
               C50645) *
              C1331) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C17179 +
            (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
            C172 * C17175 + C173 * C17181 + C174 * C17176) *
               C33658 +
           (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
              C50581 * C1096 -
          ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
           (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
            (C117 * C299 + C50662 * C316) * C17174 +
            (C117 * C286 + C50662 * C300) * C17179) *
               C33658) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C17179 +
            (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
            C355 * C17175 + C356 * C17181 + C357 * C17176) *
               C33658 +
           (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 + C5348 * C17175 +
            C11015 * C17181 + C11016 * C17176) *
               C50742) *
              C50581 * C1098 -
          (((C117 * C3270 + C50662 * C3274) * C17176 +
            (C117 * C3265 + C50662 * C3271) * C17181 +
            (C117 * C3269 + C50662 * C3273) * C17175 +
            (C117 * C3264 + C50662 * C3268) * C17180 +
            (C117 * C3267 + C50662 * C3272) * C17174 +
            (C117 * C3263 + C50662 * C3266) * C17179) *
               C50742 +
           ((C117 * C1107 + C50662 * C1114) * C17176 +
            (C117 * C1102 + C50662 * C1108) * C17181 +
            (C117 * C1109 + C50662 * C1115) * C17175 +
            (C117 * C1103 + C50662 * C1110) * C17180 +
            (C117 * C1111 + C50662 * C1116) * C17174 +
            (C117 * C1104 + C50662 * C1112) * C17179) *
               C33658) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50581 * C1025 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
               C50581 * C50617 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) * C50742) *
               C50581 * C1025 -
           (((C117 * C902 + C50662 * C908) * C17176 +
             (C117 * C893 + C50662 * C903) * C17181 + C927 * C17175 +
             C926 * C17180 + C925 * C17174 + C924 * C17179) *
                C50742 +
            (C649 * C17176 + C648 * C17181 + C348 * C17175 + C349 * C17180 +
             C350 * C17174 + C351 * C17179) *
                C33658) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C457 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C458 +
           ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
            (C5552 * C17179 + C5551 * C17174 + C5550 * C17180 + C5549 * C17175 +
             C5555 * C17181 + C5556 * C17176) *
                C50742) *
               C459) *
              C1025 +
          (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
            (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
               C458 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C457 -
           (((C117 * C6075 + C50662 * C6077) * C17176 +
             (C117 * C6074 + C50662 * C6076) * C17181 + C6108 * C17175 +
             C6107 * C17180 + C6519 * C17174 + C6518 * C17179) *
                C50742 +
            (C34876 + C34875 + C34874 + C34873 + C34872 + C34871) * C33658) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50581 * C1025 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C50617) *
              C1027 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C50617 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C1025) *
              C1028 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C50581 * C1025 -
           (((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50518 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C19987) *
                C50742 +
            ((C2905 + C2904 + C2903) * C50518 +
             (C2902 + C2901 + C2900) * C19987) *
                C33658) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C36665 + C36666 + C36667) * C19987 +
            (C36668 + C36669 + C36670) * C50518) *
               C50742) *
              C50581 * C1096 -
          (((C37180 + C37179 + C37178) * C50518 +
            (C37177 + C37176 + C37175) * C19987) *
               C50742 +
           ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C50518 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C19987) *
               C33658) *
              C50581 * C1097 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C19987 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C50518) *
               C33658 +
           ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
             C2296 * C4186 + C2291 * C4190) *
                C19987 +
            (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
             C2296 * C4189 + C2291 * C4192) *
                C50518) *
               C50742) *
              C50581 * C1098 -
          (((C2296 * C21107 + C2291 * C21109 + C2295 * C4189 + C2290 * C4192 +
             C2294 * C3267 + C2289 * C3272) *
                C50518 +
            (C2296 * C21106 + C2291 * C21108 + C2295 * C4186 + C2290 * C4190 +
             C2294 * C3263 + C2289 * C3266) *
                C19987) *
               C50742 +
           ((C2296 * C3541 + C2291 * C3544 + C2295 * C2503 + C2290 * C2508 +
             C2294 * C1111 + C2289 * C1116) *
                C50518 +
            (C2296 * C3538 + C2291 * C3542 + C2295 * C2499 + C2290 * C2502 +
             C2294 * C1104 + C2289 * C1112) *
                C19987) *
               C33658) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C457 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C458 +
           (((C36676 + C36675 + C36674) * C19987 +
             (C36673 + C36672 + C36671) * C50518) *
                C33658 +
            ((C2294 * C1849 + C2289 * C1857 + C2295 * C4586 + C2290 * C4594 +
              C2296 * C4585 + C2291 * C4593) *
                 C19987 +
             (C2294 * C1856 + C2289 * C1861 + C2295 * C4592 + C2290 * C4598 +
              C2296 * C4591 + C2291 * C4597) *
                 C50518) *
                C50742) *
               C459) *
              C1025 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C458 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C457 -
           (((C2296 * C21373 + C2291 * C21375 + C2295 * C4591 + C2290 * C4597 +
              C2294 * C4592 + C2289 * C4598) *
                 C50518 +
             (C2296 * C21372 + C2291 * C21374 + C2295 * C4585 + C2290 * C4593 +
              C2294 * C4586 + C2289 * C4594) *
                 C19987) *
                C50742 +
            ((C37588 + C37587 + C37586) * C50518 +
             (C37585 + C37584 + C37583) * C19987) *
                C33658) *
               C459) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C17179 +
              (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
              C172 * C17175 + C173 * C17181 + C174 * C17176) *
                 C33658 +
             (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
                C50808 -
            ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
             (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
                C50645) *
               C1025 +
           (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
             (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
                C50645 -
            ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
             (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
              (C117 * C299 + C50662 * C316) * C17174 +
              (C117 * C286 + C50662 * C300) * C17179) *
                 C33658) *
                C50808) *
               C50617) *
              C50799 +
          ((((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
             (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
                C50645 -
            ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
             (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
              C172 * C17174 + C171 * C17179) *
                 C33658) *
                C50808) *
               C1025 +
           (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
              C349 * C17181 + C348 * C17176) *
                 C33658 +
             (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
                C50808 -
            (((C117 * C1219 + C50662 * C1227) * C17176 +
              (C117 * C1215 + C50662 * C1220) * C17181 + C5726 * C17175 +
              C5725 * C17180 + C5345 * C17174 + C5346 * C17179) *
                 C50742 +
             (C34480 + C34479 + C34478 + C34477 + C34476 + C34475) * C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
               C2296 * C287 + C2291 * C301) *
                  C19987 +
              (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
               C2296 * C302 + C2291 * C317) *
                  C50518) *
                 C33658 +
             ((C36665 + C36666 + C36667) * C19987 +
              (C36668 + C36669 + C36670) * C50518) *
                 C50742) *
                C50808 -
            (((C36671 + C36672 + C36673) * C50518 +
              (C36674 + C36675 + C36676) * C19987) *
                 C50742 +
             ((C36670 + C36669 + C36668) * C50518 +
              (C36667 + C36666 + C36665) * C19987) *
                 C33658) *
                C50645) *
               C1025 +
           ((((C37175 + C37176 + C37177) * C19987 +
              (C37178 + C37179 + C37180) * C50518) *
                 C33658 +
             ((C37583 + C37584 + C37585) * C19987 +
              (C37586 + C37587 + C37588) * C50518) *
                 C50742) *
                C50645 -
            (((C37180 + C37179 + C37178) * C50518 +
              (C37177 + C37176 + C37175) * C19987) *
                 C50742 +
             ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
               C2294 * C299 + C2289 * C316) *
                  C50518 +
              (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
               C2294 * C286 + C2289 * C300) *
                  C19987) *
                 C33658) *
                C50808) *
               C50617) *
              C50799 +
          (((((C2735 + C2734 + C2733) * C19987 +
              (C2732 + C2731 + C2730) * C50518) *
                 C33658 +
             ((C2736 + C2737 + C2738) * C19987 +
              (C2739 + C2740 + C2741) * C50518) *
                 C50742) *
                C50645 -
            (((C2730 + C2731 + C2732) * C50518 +
              (C2733 + C2734 + C2735) * C19987) *
                 C50742 +
             ((C2341 + C2340 + C2339) * C50518 +
              (C2338 + C2337 + C2336) * C19987) *
                 C33658) *
                C50808) *
               C1025 +
           ((((C2541 + C2540 + C2539) * C19987 +
              (C2538 + C2537 + C2536) * C50518) *
                 C33658 +
             ((C3288 + C3289 + C3290) * C19987 +
              (C3291 + C3292 + C3293) * C50518) *
                 C50742) *
                C50808 -
            (((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
               C2294 * C1223 + C2289 * C1229) *
                  C50518 +
              (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
               C2294 * C1217 + C2289 * C1224) *
                  C19987) *
                 C50742 +
             ((C3293 + C3292 + C3291) * C50518 +
              (C3290 + C3289 + C3288) * C19987) *
                 C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50581 * C1025 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50581 * C50617) *
              C1027 +
          (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
             C349 * C17181 + C348 * C17176) *
                C33658 +
            (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
               C50581 * C50617 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50581 * C1025) *
              C1028 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) * C50742) *
               C50581 * C1025 -
           (((C117 * C902 + C50662 * C908) * C17176 +
             (C117 * C893 + C50662 * C903) * C17181 + C927 * C17175 +
             C926 * C17180 + C925 * C17174 + C924 * C17179) *
                C50742 +
            (C649 * C17176 + C648 * C17181 + C348 * C17175 + C349 * C17180 +
             C350 * C17174 + C351 * C17179) *
                C33658) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C17179 +
            (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
            C172 * C17175 + C173 * C17181 + C174 * C17176) *
               C33658 +
           (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
              C50581 * C1096 -
          ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
           (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
            (C117 * C299 + C50662 * C316) * C17174 +
            (C117 * C286 + C50662 * C300) * C17179) *
               C33658) *
              C50581 * C1097 +
          (((C117 * C287 + C50662 * C301) * C17179 +
            (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
            C355 * C17175 + C356 * C17181 + C357 * C17176) *
               C33658 +
           (C7022 * C17179 + C7023 * C17174 + C5347 * C17180 + C5348 * C17175 +
            C11015 * C17181 + C11016 * C17176) *
               C50742) *
              C50581 * C1098 -
          (((C117 * C3270 + C50662 * C3274) * C17176 +
            (C117 * C3265 + C50662 * C3271) * C17181 +
            (C117 * C3269 + C50662 * C3273) * C17175 +
            (C117 * C3264 + C50662 * C3268) * C17180 +
            (C117 * C3267 + C50662 * C3272) * C17174 +
            (C117 * C3263 + C50662 * C3266) * C17179) *
               C50742 +
           ((C117 * C1107 + C50662 * C1114) * C17176 +
            (C117 * C1102 + C50662 * C1108) * C17181 +
            (C117 * C1109 + C50662 * C1115) * C17175 +
            (C117 * C1103 + C50662 * C1110) * C17180 +
            (C117 * C1111 + C50662 * C1116) * C17174 +
            (C117 * C1104 + C50662 * C1112) * C17179) *
               C33658) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50581 * C1025 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50581 * C50617) *
              C1027 +
          ((((C2541 + C2540 + C2539) * C19987 +
             (C2538 + C2537 + C2536) * C50518) *
                C33658 +
            ((C3288 + C3289 + C3290) * C19987 +
             (C3291 + C3292 + C3293) * C50518) *
                C50742) *
               C50581 * C50617 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50581 * C1025) *
              C1028 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C50581 * C1025 -
           (((C2296 * C3270 + C2291 * C3274 + C2295 * C1568 + C2290 * C1575 +
              C2294 * C899 + C2289 * C906) *
                 C50518 +
             (C2296 * C3265 + C2291 * C3271 + C2295 * C1563 + C2290 * C1569 +
              C2294 * C891 + C2289 * C898) *
                 C19987) *
                C50742 +
            ((C2905 + C2904 + C2903) * C50518 +
             (C2902 + C2901 + C2900) * C19987) *
                C33658) *
               C50581 * C50617) *
              C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C36665 + C36666 + C36667) * C19987 +
            (C36668 + C36669 + C36670) * C50518) *
               C50742) *
              C50581 * C1096 -
          (((C37180 + C37179 + C37178) * C50518 +
            (C37177 + C37176 + C37175) * C19987) *
               C50742 +
           ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
             C2294 * C299 + C2289 * C316) *
                C50518 +
            (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
             C2294 * C286 + C2289 * C300) *
                C19987) *
               C33658) *
              C50581 * C1097 +
          (((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
             C2296 * C2499 + C2291 * C2502) *
                C19987 +
            (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
             C2296 * C2503 + C2291 * C2508) *
                C50518) *
               C33658 +
           ((C2294 * C1565 + C2289 * C1573 + C2295 * C3263 + C2290 * C3266 +
             C2296 * C4186 + C2291 * C4190) *
                C19987 +
            (C2294 * C1572 + C2289 * C1577 + C2295 * C3267 + C2290 * C3272 +
             C2296 * C4189 + C2291 * C4192) *
                C50518) *
               C50742) *
              C50581 * C1098 -
          (((C2296 * C21107 + C2291 * C21109 + C2295 * C4189 + C2290 * C4192 +
             C2294 * C3267 + C2289 * C3272) *
                C50518 +
            (C2296 * C21106 + C2291 * C21108 + C2295 * C4186 + C2290 * C4190 +
             C2294 * C3263 + C2289 * C3266) *
                C19987) *
               C50742 +
           ((C2296 * C3541 + C2291 * C3544 + C2295 * C2503 + C2290 * C2508 +
             C2294 * C1111 + C2289 * C1116) *
                C50518 +
            (C2296 * C3538 + C2291 * C3542 + C2295 * C2499 + C2290 * C2502 +
             C2294 * C1104 + C2289 * C1112) *
                C19987) *
               C33658) *
              C50581 * C1099) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C122 + C50662 * C129) * C17179 +
              (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
              C172 * C17175 + C173 * C17181 + C174 * C17176) *
                 C33658 +
             (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
                C1676 -
            ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
             (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
                C50645) *
               C50807 +
           (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
             (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
                C50645 -
            ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
             (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
              (C117 * C299 + C50662 * C316) * C17174 +
              (C117 * C286 + C50662 * C300) * C17179) *
                 C33658) *
                C1676) *
               C50617) *
              C50799 +
          ((((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
             (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
                C50645 -
            ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
             (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
              C172 * C17174 + C171 * C17179) *
                 C33658) *
                C1676) *
               C50807 +
           (((C353 * C17179 + C352 * C17174 + C351 * C17180 + C350 * C17175 +
              C349 * C17181 + C348 * C17176) *
                 C33658 +
             (C34475 + C34476 + C34477 + C34478 + C34479 + C34480) * C50742) *
                C1676 -
            (((C117 * C1219 + C50662 * C1227) * C17176 +
              (C117 * C1215 + C50662 * C1220) * C17181 + C5726 * C17175 +
              C5725 * C17180 + C5345 * C17174 + C5346 * C17179) *
                 C50742 +
             (C34480 + C34479 + C34478 + C34477 + C34476 + C34475) * C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
               C2296 * C287 + C2291 * C301) *
                  C19987 +
              (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
               C2296 * C302 + C2291 * C317) *
                  C50518) *
                 C33658 +
             ((C36665 + C36666 + C36667) * C19987 +
              (C36668 + C36669 + C36670) * C50518) *
                 C50742) *
                C1676 -
            (((C36671 + C36672 + C36673) * C50518 +
              (C36674 + C36675 + C36676) * C19987) *
                 C50742 +
             ((C36670 + C36669 + C36668) * C50518 +
              (C36667 + C36666 + C36665) * C19987) *
                 C33658) *
                C50645) *
               C50807 +
           ((((C37175 + C37176 + C37177) * C19987 +
              (C37178 + C37179 + C37180) * C50518) *
                 C33658 +
             ((C37583 + C37584 + C37585) * C19987 +
              (C37586 + C37587 + C37588) * C50518) *
                 C50742) *
                C50645 -
            (((C37180 + C37179 + C37178) * C50518 +
              (C37177 + C37176 + C37175) * C19987) *
                 C50742 +
             ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
               C2294 * C299 + C2289 * C316) *
                  C50518 +
              (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
               C2294 * C286 + C2289 * C300) *
                  C19987) *
                 C33658) *
                C1676) *
               C50617) *
              C50799 +
          (((((C2735 + C2734 + C2733) * C19987 +
              (C2732 + C2731 + C2730) * C50518) *
                 C33658 +
             ((C2736 + C2737 + C2738) * C19987 +
              (C2739 + C2740 + C2741) * C50518) *
                 C50742) *
                C50645 -
            (((C2730 + C2731 + C2732) * C50518 +
              (C2733 + C2734 + C2735) * C19987) *
                 C50742 +
             ((C2341 + C2340 + C2339) * C50518 +
              (C2338 + C2337 + C2336) * C19987) *
                 C33658) *
                C1676) *
               C50807 +
           ((((C2541 + C2540 + C2539) * C19987 +
              (C2538 + C2537 + C2536) * C50518) *
                 C33658 +
             ((C3288 + C3289 + C3290) * C19987 +
              (C3291 + C3292 + C3293) * C50518) *
                 C50742) *
                C1676 -
            (((C2296 * C3693 + C2291 * C3697 + C2295 * C2699 + C2290 * C2703 +
               C2294 * C1223 + C2289 * C1229) *
                  C50518 +
              (C2296 * C3691 + C2291 * C3694 + C2295 * C2694 + C2290 * C2698 +
               C2294 * C1217 + C2289 * C1224) *
                  C19987) *
                 C50742 +
             ((C3293 + C3292 + C3291) * C50518 +
              (C3290 + C3289 + C3288) * C19987) *
                 C33658) *
                C50645) *
               C50617) *
              C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50854 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50855 +
           ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
            (C35759 + C35760 + C35761 + C35762 + C35763 + C35764) * C50742) *
               C2092) *
              C50807 +
          (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
            (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
               C50855 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C50854 -
           (((C117 * C6075 + C50662 * C6077) * C17176 +
             (C117 * C6074 + C50662 * C6076) * C17181 + C6108 * C17175 +
             C6107 * C17180 + C6519 * C17174 + C6518 * C17179) *
                C50742 +
            (C34876 + C34875 + C34874 + C34873 + C34872 + C34871) * C33658) *
               C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50854 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50855 +
           (((C36676 + C36675 + C36674) * C19987 +
             (C36673 + C36672 + C36671) * C50518) *
                C33658 +
            ((C38495 + C38496 + C38497) * C19987 +
             (C38498 + C38499 + C38500) * C50518) *
                C50742) *
               C2092) *
              C50807 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C50855 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C50854 -
           (((C2296 * C21373 + C2291 * C21375 + C2295 * C4591 + C2290 * C4597 +
              C2294 * C4592 + C2289 * C4598) *
                 C50518 +
             (C2296 * C21372 + C2291 * C21374 + C2295 * C4585 + C2290 * C4593 +
              C2294 * C4586 + C2289 * C4594) *
                 C19987) *
                C50742 +
            ((C37588 + C37587 + C37586) * C50518 +
             (C37585 + C37584 + C37583) * C19987) *
                C33658) *
               C2092) *
              C50617) *
         C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C1676 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C278 +
          (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
            (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
               C50645 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C35363 + C35364 + C35365 + C35366 + C35367 + C35368) * C50742) *
               C1676 -
           (((C117 * C2700 + C50662 * C2704) * C17176 +
             (C117 * C2695 + C50662 * C2701) * C17181 + C5350 * C17175 +
             C5349 * C17180 + C7025 * C17174 + C7024 * C17179) *
                C50742 +
            (C35368 + C35367 + C35366 + C35365 + C35364 + C35363) * C33658) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C1676 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C50565 * C1027 +
          (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
            (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
               C50645 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) * C50742) *
               C1676 -
           (((C117 * C488 + C50662 * C499) * C17176 +
             (C117 * C469 + C50662 * C489) * C17181 + C536 * C17175 +
             C535 * C17180 + C534 * C17174 + C533 * C17179) *
                C50742 +
            (C34274 + C34273 + C34272 + C34271 + C34270 + C34269) * C33658) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C50662 * C129) * C17179 +
            (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
            C172 * C17175 + C173 * C17181 + C174 * C17176) *
               C33658 +
           (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
              C1842 -
          ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
           (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
              C1843 +
          ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
           (C35759 + C35760 + C35761 + C35762 + C35763 + C35764) * C50742) *
              C1844 -
          (((C117 * C5503 + C50662 * C5507) * C17176 +
            (C117 * C5498 + C50662 * C5504) * C17181 + C5554 * C17175 +
            C5553 * C17180 + C7437 * C17174 + C7436 * C17179) *
               C50742 +
           (C35764 + C35763 + C35762 + C35761 + C35760 + C35759) * C33658) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C1676 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C50565 * C1027 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C50645 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C1676) *
              C50565 * C1028 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C1676 -
           (((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
              C2294 * C483 + C2289 * C496) *
                 C50518 +
             (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
              C2294 * C466 + C2289 * C482) *
                 C19987) *
                C50742 +
            ((C3069 + C3068 + C3067) * C50518 +
             (C3066 + C3065 + C3064) * C19987) *
                C33658) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C1676 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C278 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C50645 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C1676) *
              C279 +
          ((((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C38087 + C38088 + C38089) * C19987 +
             (C38090 + C38091 + C38092) * C50518) *
                C50742) *
               C1676 -
           (((C2296 * C20777 + C2291 * C20779 + C2295 * C3695 + C2290 * C3698 +
              C2294 * C2697 + C2289 * C2702) *
                 C50518 +
             (C2296 * C20776 + C2291 * C20778 + C2295 * C3692 + C2290 * C3696 +
              C2294 * C2693 + C2289 * C2696) *
                 C19987) *
                C50742 +
            ((C38092 + C38091 + C38090) * C50518 +
             (C38089 + C38088 + C38087) * C19987) *
                C33658) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
             C2296 * C287 + C2291 * C301) *
                C19987 +
            (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
             C2296 * C302 + C2291 * C317) *
                C50518) *
               C33658 +
           ((C36665 + C36666 + C36667) * C19987 +
            (C36668 + C36669 + C36670) * C50518) *
               C50742) *
              C1842 -
          (((C36671 + C36672 + C36673) * C50518 +
            (C36674 + C36675 + C36676) * C19987) *
               C50742 +
           ((C36670 + C36669 + C36668) * C50518 +
            (C36667 + C36666 + C36665) * C19987) *
               C33658) *
              C1843 +
          (((C36676 + C36675 + C36674) * C19987 +
            (C36673 + C36672 + C36671) * C50518) *
               C33658 +
           ((C38495 + C38496 + C38497) * C19987 +
            (C38498 + C38499 + C38500) * C50518) *
               C50742) *
              C1844 -
          (((C2296 * C23063 + C2291 * C23065 + C2295 * C6506 + C2290 * C6509 +
             C2294 * C5500 + C2289 * C5505) *
                C50518 +
            (C2296 * C23062 + C2291 * C23064 + C2295 * C6503 + C2290 * C6507 +
             C2294 * C5496 + C2289 * C5499) *
                C19987) *
               C50742 +
           ((C38500 + C38499 + C38498) * C50518 +
            (C38497 + C38496 + C38495) * C19987) *
               C33658) *
              C1845) *
         C50565 * C50546) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C50854 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50855 +
           ((C33964 + C33963 + C33962 + C33961 + C33960 + C33959) * C33658 +
            (C35759 + C35760 + C35761 + C35762 + C35763 + C35764) * C50742) *
               C2092) *
              C50565 * C50799 +
          (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
            (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
               C50855 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C50854 -
           (((C117 * C1850 + C50662 * C1858) * C17176 +
             (C117 * C1846 + C50662 * C1851) * C17181 + C5556 * C17175 +
             C5555 * C17180 + C5549 * C17174 + C5550 * C17179) *
                C50742 +
            (C33976 + C33975 + C33974 + C33973 + C33972 + C33971) * C33658) *
               C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C50854 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50855 +
           (((C36676 + C36675 + C36674) * C19987 +
             (C36673 + C36672 + C36671) * C50518) *
                C33658 +
            ((C38495 + C38496 + C38497) * C19987 +
             (C38498 + C38499 + C38500) * C50518) *
                C50742) *
               C2092) *
              C50565 * C50799 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C50855 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C50854 -
           (((C2296 * C4587 + C2291 * C4595 + C2295 * C4588 + C2290 * C4596 +
              C2294 * C1854 + C2289 * C1860) *
                 C50518 +
             (C2296 * C4583 + C2291 * C4589 + C2295 * C4584 + C2290 * C4590 +
              C2294 * C1848 + C2289 * C1855) *
                 C19987) *
                C50742 +
            ((C2741 + C2740 + C2739) * C50518 +
             (C2738 + C2737 + C2736) * C19987) *
                C33658) *
               C2092) *
              C50565 * C50552)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C1676 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C50565 * C1027 +
          (((C33965 + C33966 + C33967 + C33968 + C33969 + C33970) * C33658 +
            (C33971 + C33972 + C33973 + C33974 + C33975 + C33976) * C50742) *
               C50645 -
           ((C33970 + C33969 + C33968 + C33967 + C33966 + C33965) * C50742 +
            (C176 * C17176 + C175 * C17181 + C174 * C17175 + C173 * C17180 +
             C172 * C17174 + C171 * C17179) *
                C33658) *
               C1676) *
              C50565 * C1028 +
          (((C173 * C17179 + C174 * C17174 + C175 * C17180 + C176 * C17175 +
             C178 * C17181 + C177 * C17176) *
                C33658 +
            (C34269 + C34270 + C34271 + C34272 + C34273 + C34274) * C50742) *
               C1676 -
           (((C117 * C488 + C50662 * C499) * C17176 +
             (C117 * C469 + C50662 * C489) * C17181 + C536 * C17175 +
             C535 * C17180 + C534 * C17174 + C533 * C17179) *
                C50742 +
            (C34274 + C34273 + C34272 + C34271 + C34270 + C34269) * C33658) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C50662 * C129) * C17179 +
             (C117 * C130 + C50662 * C143) * C17174 + C171 * C17180 +
             C172 * C17175 + C173 * C17181 + C174 * C17176) *
                C33658 +
            (C33953 + C33954 + C33955 + C33956 + C33957 + C33958) * C50742) *
               C1676 -
           ((C33959 + C33960 + C33961 + C33962 + C33963 + C33964) * C50742 +
            (C33958 + C33957 + C33956 + C33955 + C33954 + C33953) * C33658) *
               C50645) *
              C278 +
          (((C34469 + C34470 + C34471 + C34472 + C34473 + C34474) * C33658 +
            (C34871 + C34872 + C34873 + C34874 + C34875 + C34876) * C50742) *
               C50645 -
           ((C34474 + C34473 + C34472 + C34471 + C34470 + C34469) * C50742 +
            (C350 * C17176 + C351 * C17181 + C352 * C17175 + C353 * C17180 +
             (C117 * C299 + C50662 * C316) * C17174 +
             (C117 * C286 + C50662 * C300) * C17179) *
                C33658) *
               C1676) *
              C279 +
          ((((C117 * C287 + C50662 * C301) * C17179 +
             (C117 * C302 + C50662 * C317) * C17174 + C354 * C17180 +
             C355 * C17175 + C356 * C17181 + C357 * C17176) *
                C33658 +
            (C35363 + C35364 + C35365 + C35366 + C35367 + C35368) * C50742) *
               C1676 -
           (((C117 * C2700 + C50662 * C2704) * C17176 +
             (C117 * C2695 + C50662 * C2701) * C17181 + C5350 * C17175 +
             C5349 * C17180 + C7025 * C17174 + C7024 * C17179) *
                C50742 +
            (C35368 + C35367 + C35366 + C35365 + C35364 + C35363) * C33658) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C1676 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C50565 * C1027 +
          ((((C2735 + C2734 + C2733) * C19987 +
             (C2732 + C2731 + C2730) * C50518) *
                C33658 +
            ((C2736 + C2737 + C2738) * C19987 +
             (C2739 + C2740 + C2741) * C50518) *
                C50742) *
               C50645 -
           (((C2730 + C2731 + C2732) * C50518 +
             (C2733 + C2734 + C2735) * C19987) *
                C50742 +
            ((C2341 + C2340 + C2339) * C50518 +
             (C2338 + C2337 + C2336) * C19987) *
                C33658) *
               C1676) *
              C50565 * C1028 +
          ((((C2347 + C2346 + C2345) * C19987 +
             (C2344 + C2343 + C2342) * C50518) *
                C33658 +
            ((C3064 + C3065 + C3066) * C19987 +
             (C3067 + C3068 + C3069) * C50518) *
                C50742) *
               C1676 -
           (((C2296 * C2700 + C2291 * C2704 + C2295 * C1221 + C2290 * C1228 +
              C2294 * C483 + C2289 * C496) *
                 C50518 +
             (C2296 * C2695 + C2291 * C2701 + C2295 * C1216 + C2290 * C1222 +
              C2294 * C466 + C2289 * C482) *
                 C19987) *
                C50742 +
            ((C3069 + C3068 + C3067) * C50518 +
             (C3066 + C3065 + C3064) * C19987) *
                C33658) *
               C50645) *
              C50565 * C1029)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2294 * C122 + C2289 * C129 + C2295 * C286 + C2290 * C300 +
              C2296 * C287 + C2291 * C301) *
                 C19987 +
             (C2294 * C130 + C2289 * C143 + C2295 * C299 + C2290 * C316 +
              C2296 * C302 + C2291 * C317) *
                 C50518) *
                C33658 +
            ((C36665 + C36666 + C36667) * C19987 +
             (C36668 + C36669 + C36670) * C50518) *
                C50742) *
               C1676 -
           (((C36671 + C36672 + C36673) * C50518 +
             (C36674 + C36675 + C36676) * C19987) *
                C50742 +
            ((C36670 + C36669 + C36668) * C50518 +
             (C36667 + C36666 + C36665) * C19987) *
                C33658) *
               C50645) *
              C278 +
          ((((C37175 + C37176 + C37177) * C19987 +
             (C37178 + C37179 + C37180) * C50518) *
                C33658 +
            ((C37583 + C37584 + C37585) * C19987 +
             (C37586 + C37587 + C37588) * C50518) *
                C50742) *
               C50645 -
           (((C37180 + C37179 + C37178) * C50518 +
             (C37177 + C37176 + C37175) * C19987) *
                C50742 +
            ((C2296 * C1111 + C2291 * C1116 + C2295 * C302 + C2290 * C317 +
              C2294 * C299 + C2289 * C316) *
                 C50518 +
             (C2296 * C1104 + C2291 * C1112 + C2295 * C287 + C2290 * C301 +
              C2294 * C286 + C2289 * C300) *
                 C19987) *
                C33658) *
               C1676) *
              C279 +
          ((((C2294 * C287 + C2289 * C301 + C2295 * C1104 + C2290 * C1112 +
              C2296 * C2499 + C2291 * C2502) *
                 C19987 +
             (C2294 * C302 + C2289 * C317 + C2295 * C1111 + C2290 * C1116 +
              C2296 * C2503 + C2291 * C2508) *
                 C50518) *
                C33658 +
            ((C38087 + C38088 + C38089) * C19987 +
             (C38090 + C38091 + C38092) * C50518) *
                C50742) *
               C1676 -
           (((C2296 * C20777 + C2291 * C20779 + C2295 * C3695 + C2290 * C3698 +
              C2294 * C2697 + C2289 * C2702) *
                 C50518 +
             (C2296 * C20776 + C2291 * C20778 + C2295 * C3692 + C2290 * C3696 +
              C2294 * C2693 + C2289 * C2696) *
                 C19987) *
                C50742 +
            ((C38092 + C38091 + C38090) * C50518 +
             (C38089 + C38088 + C38087) * C19987) *
                C33658) *
               C50645) *
              C280) *
         C50546) /
            (p * q * std::sqrt(p + q));
}
