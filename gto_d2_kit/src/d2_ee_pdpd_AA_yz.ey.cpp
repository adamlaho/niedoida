/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AA_yz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_11_23(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49723 = ae * be;
    const double C49722 = ae + be;
    const double C49721 = 0 * be;
    const double C49720 = yA - yB;
    const double C49740 = 0 * be;
    const double C49739 = zA - zB;
    const double C49770 = 0 * ae;
    const double C49765 = 0 * be;
    const double C49812 = 0 * ae;
    const double C49808 = 0 * be;
    const double C49848 = std::pow(ae, 2);
    const double C49847 = zP - zQ;
    const double C49846 = yP - yQ;
    const double C49845 = p + q;
    const double C49844 = p * q;
    const double C49856 = bs[4];
    const double C49854 = xP - xQ;
    const double C49861 = bs[5];
    const double C49868 = bs[6];
    const double C49876 = bs[7];
    const double C49893 = bs[3];
    const double C50258 = bs[2];
    const double C119 = bs[0];
    const double C50614 = xA - xB;
    const double C50639 = ce + de;
    const double C50638 = ce * de;
    const double C50637 = xC - xD;
    const double C50661 = yC - yD;
    const double C50677 = zC - zD;
    const double C49724 = std::pow(C49722, 2);
    const double C49766 = 2 * C49722;
    const double C49725 = C49723 * C49720;
    const double C49767 = C49720 * C49721;
    const double C50759 = std::pow(C49720, 2);
    const double C50810 = C49720 * be;
    const double C50809 = C49720 * ae;
    const double C49741 = C49723 * C49739;
    const double C49809 = C49739 * C49740;
    const double C50774 = std::pow(C49739, 2);
    const double C50838 = C49739 * be;
    const double C50837 = C49739 * ae;
    const double C49775 = C49770 / C49722;
    const double C49817 = C49812 / C49722;
    const double C49885 = C49847 * ae;
    const double C50112 = std::pow(C49847, 2);
    const double C49850 = C49846 * C49847;
    const double C49926 = C49846 * ae;
    const double C50005 = std::pow(C49846, 2);
    const double C49849 = 2 * C49844;
    const double C49862 = std::pow(C49854, 2);
    const double C50617 = C50614 * be;
    const double C50616 = C50614 * ae;
    const double C50615 = std::pow(C50614, 2);
    const double C50641 = 2 * C50639;
    const double C50651 = std::pow(C50639, 2);
    const double C50643 = C50637 * de;
    const double C50642 = C50637 * ce;
    const double C50640 = std::pow(C50637, 2);
    const double C50662 = std::pow(C50661, 2);
    const double C50714 = C50661 * de;
    const double C50713 = C50661 * ce;
    const double C50678 = std::pow(C50677, 2);
    const double C50742 = C50677 * de;
    const double C50741 = C50677 * ce;
    const double C49726 = 2 * C49724;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (zP - zQ) * std::pow(ae, 2)) /
                        C49724;
    const double C141 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (yP - yQ) * (zP - zQ) * std::pow(ae, 2)) /
                        C49724;
    const double C50896 = 4 * C49724;
    const double C50625 = std::pow(C49766, -1);
    const double C50918 = std::pow(C49766, -2);
    const double C49772 = C49767 / C49722;
    const double C50760 = C50759 * C49723;
    const double C49814 = C49809 / C49722;
    const double C50775 = C50774 * C49723;
    const double C49886 = C49856 * C49885;
    const double C49894 = C49893 * C49885;
    const double C49899 = C49861 * C49885;
    const double C49905 = C49868 * C49885;
    const double C49916 = C49876 * C49885;
    const double C49852 = C49850 * C49848;
    const double C49927 = C49856 * C49926;
    const double C49933 = C49893 * C49926;
    const double C49938 = C49861 * C49926;
    const double C49944 = C49868 * C49926;
    const double C49955 = C49876 * C49926;
    const double C49851 = C49849 / C49845;
    const double C126 = (-(bs[1] * C49885 * C49849) / C49845) / C49722;
    const double C127 = (-(bs[1] * C49926 * C49849) / C49845) / C49722;
    const double C120 = -(C49854 * bs[1] * C49849) / C49845;
    const double C297 = -(C49846 * bs[1] * C49849) / C49845;
    const double C486 = -(C49847 * bs[1] * C49849) / C49845;
    const double C50618 = C50615 * C49723;
    const double C50652 = std::pow(C50641, -1);
    const double C50905 = std::pow(C50641, -2);
    const double C50656 = 2 * C50651;
    const double C50903 = 4 * C50651;
    const double C50644 = C50640 * C50638;
    const double C50663 = C50662 * C50638;
    const double C50679 = C50678 * C50638;
    const double C49769 = C49721 / C49726;
    const double C49773 = C49765 / C49726;
    const double C49811 = C49740 / C49726;
    const double C49815 = C49808 / C49726;
    const double C49776 = 0 - C49772;
    const double C50761 = C50760 / C49722;
    const double C49818 = 0 - C49814;
    const double C50776 = C50775 / C49722;
    const double C49857 = C49856 * C49852;
    const double C49864 = C49861 * C49852;
    const double C49869 = C49868 * C49852;
    const double C49878 = C49876 * C49852;
    const double C49855 = std::pow(C49851, 4);
    const double C49860 = -C49851;
    const double C49867 = std::pow(C49851, 6);
    const double C142 =
        (std::pow(-C49851, 3) * bs[3] * C49852 +
         std::pow(C49851, 4) * bs[4] * C49852 * std::pow(xP - xQ, 2)) /
        C49724;
    const double C50257 = std::pow(C49851, 2);
    const double C128 =
        (C49854 * std::pow(C49851, 2) * bs[2] * C49885) / C49722;
    const double C129 =
        (C49854 * std::pow(C49851, 2) * bs[2] * C49926) / C49722;
    const double C310 =
        (C49846 * std::pow(C49851, 2) * bs[2] * C49926) / C49722 -
        (ae * bs[1] * C49849) / (C49845 * C49722);
    const double C311 =
        (C49846 * std::pow(C49851, 2) * bs[2] * C49885) / C49722;
    const double C50619 = C50618 / C49722;
    const double C50645 = C50644 / C50639;
    const double C50664 = C50663 / C50639;
    const double C50680 = C50679 / C50639;
    const double C49779 = C49776 * ae;
    const double C50762 = -C50761;
    const double C49821 = C49818 * ae;
    const double C50777 = -C50776;
    const double C49858 = C49855 * C49857;
    const double C49887 = C49855 * C49886;
    const double C49928 = C49855 * C49927;
    const double C49970 = C49856 * C49855;
    const double C49863 = std::pow(C49860, 5);
    const double C49875 = std::pow(C49860, 7);
    const double C49892 = std::pow(C49860, 3);
    const double C327 = (ae * std::pow(C49851, 2) * bs[2] * C49885 +
                         C49846 * std::pow(C49860, 3) * bs[3] * C49852) /
                        C49724;
    const double C49870 = C49867 * C49869;
    const double C49907 = C49867 * C49905;
    const double C49946 = C49867 * C49944;
    const double C49980 = C49868 * C49867;
    const double C50259 = C50258 * C50257;
    const double C499 = (C49847 * C50257 * C50258 * C49926) / C49722;
    const double C500 = (C49847 * C50257 * C50258 * C49885) / C49722 -
                        (ae * bs[1] * C49849) / (C49845 * C49722);
    const double C50620 = -C50619;
    const double C50646 = -C50645;
    const double C50665 = -C50664;
    const double C50681 = -C50680;
    const double C49781 = C49779 / C49722;
    const double C50763 = std::exp(C50762);
    const double C49823 = C49821 / C49722;
    const double C50778 = std::exp(C50777);
    const double C143 = (2 * C49854 * C49858 +
                         C49854 * (C49858 + std::pow(-C49851, 5) * bs[5] *
                                                C49852 * std::pow(C49854, 2))) /
                        C49724;
    const double C326 = (ae * C49854 * std::pow(C49860, 3) * bs[3] * C49885 +
                         C49846 * C49854 * C49858) /
                        C49724;
    const double C49897 = C49854 * C49887;
    const double C50003 = ae * C49887;
    const double C50002 = C49846 * C49887;
    const double C50421 = C49847 * C49887;
    const double C49936 = C49854 * C49928;
    const double C50030 = ae * C49928;
    const double C50117 = C49847 * C49928;
    const double C50351 = C49846 * C49928;
    const double C49990 = C49854 * C49970;
    const double C50024 = C49846 * C49970;
    const double C50106 = C49970 * ae;
    const double C50136 = C49847 * C49970;
    const double C50265 = C49970 * C49862;
    const double C50353 = C49970 * C50005;
    const double C50423 = C49970 * C50112;
    const double C49865 = C49863 * C49864;
    const double C49900 = C49863 * C49899;
    const double C49939 = C49863 * C49938;
    const double C49972 = C49861 * C49863;
    const double C49879 = C49875 * C49878;
    const double C49918 = C49875 * C49916;
    const double C49957 = C49875 * C49955;
    const double C49895 = C49892 * C49894;
    const double C49934 = C49892 * C49933;
    const double C49992 = C49893 * C49892;
    const double C515 =
        (ae * C49854 * C49892 * C49893 * C49926 + C49847 * C49854 * C49858) /
        C49724;
    const double C516 = (ae * std::pow(C49851, 2) * bs[2] * C49926 +
                         C49847 * C49892 * C49893 * C49852) /
                        C49724;
    const double C49871 = C49870 * C49862;
    const double C49874 = C49854 * C49870;
    const double C50060 = C49846 * C49870;
    const double C50088 = C49847 * C49870;
    const double C49908 = C49907 * C49862;
    const double C49915 = C49854 * C49907;
    const double C50061 = C49907 * C50005;
    const double C50153 = ae * C49907;
    const double C50152 = C49846 * C49907;
    const double C50172 = C49847 * C49907;
    const double C49947 = C49946 * C49862;
    const double C49954 = C49854 * C49946;
    const double C50138 = C49946 * C50112;
    const double C50176 = ae * C49946;
    const double C50175 = C49847 * C49946;
    const double C50477 = C49846 * C49946;
    const double C49982 = C49980 * C49862;
    const double C50075 = C49854 * C49980;
    const double C50180 = C49846 * C49980;
    const double C50179 = C49980 * C50005;
    const double C50217 = C49980 * C50112;
    const double C121 = C50259 * C49862 - (bs[1] * C49849) / C49845;
    const double C296 = C49846 * C49854 * C50259;
    const double C298 = C50259 * C50005 - (bs[1] * C49849) / C49845;
    const double C485 = C49847 * C49854 * C50259;
    const double C487 = C50259 * C50112 - (bs[1] * C49849) / C49845;
    const double C932 = C49847 * C49846 * C50259;
    const double C50621 = std::exp(C50620);
    const double C50647 = std::exp(C50646);
    const double C50666 = std::exp(C50665);
    const double C50682 = std::exp(C50681);
    const double C49783 = C49781 - C49773;
    const double C49727 = C49725 * C50763;
    const double C118 = -(2 * ae * be * (yA - yB) * C50763) / (ae + be);
    const double C50811 = C50763 * C50809;
    const double C50814 = C50625 * C50763;
    const double C50922 = C50763 * C50810;
    const double C50917 = C50763 / C49766;
    const double C2340 = C50918 * C50763;
    const double C49825 = C49823 - C49815;
    const double C155 = C50778 * C142;
    const double C151 = C50778 * C141;
    const double C149 = C50778 * C128;
    const double C2526 = C50778 * C327;
    const double C2524 = C50778 * C311;
    const double C49742 = C49741 * C50778;
    const double C117 = -(2 * ae * be * (zA - zB) * C50778) / (ae + be);
    const double C50839 = C50778 * C50837;
    const double C50842 = C50625 * C50778;
    const double C50926 = C50778 * C50838;
    const double C50919 = C50778 / C49766;
    const double C5214 = C50918 * C50778;
    const double C159 = C50778 * C143;
    const double C344 = C50778 * C326;
    const double C50269 = 2 * C49990;
    const double C50329 = C49846 * C49990;
    const double C50359 = C49990 * ae;
    const double C50429 = C49847 * C49990;
    const double C50396 = 2 * C50024;
    const double C50395 = C50024 * ae;
    const double C50453 = C49847 * C50024;
    const double C50470 = 2 * C50136;
    const double C50469 = C50136 * ae;
    const double C49976 = C49854 * C49865;
    const double C50004 = C49846 * C49865;
    const double C50031 = C49847 * C49865;
    const double C144 =
        (3 * (C49858 + C49865 * C49862) +
         C49854 * (2 * C49854 * C49865 +
                   C49854 * (C49865 +
                             std::pow(C49851, 6) * bs[6] * C49852 * C49862))) /
        C49724;
    const double C325 =
        (ae * (std::pow(C49860, 3) * bs[3] * C49885 + C49887 * C49862) +
         C49846 * (C49858 + C49865 * C49862)) /
        C49724;
    const double C329 = (C49854 * C49858 + ae * C49846 * C49897 +
                         C49846 * (ae * C49897 + C49846 * C49854 * C49865)) /
                        C49724;
    const double C514 = (ae * (C49892 * C49893 * C49926 + C49928 * C49862) +
                         C49847 * (C49858 + C49865 * C49862)) /
                        C49724;
    const double C518 = (C49854 * C49858 + ae * C49847 * C49936 +
                         C49847 * (ae * C49936 + C49847 * C49854 * C49865)) /
                        C49724;
    const double C948 =
        (ae * (C49847 * C49897 + C49854 * C49893 * C49892 * ae) +
         C49846 * (ae * C49936 + C49847 * C49854 * C49865)) /
        C49724;
    const double C49901 = C49900 * C49862;
    const double C49904 = C49854 * C49900;
    const double C50007 = C49900 * C50005;
    const double C50059 = ae * C49900;
    const double C50058 = C49846 * C49900;
    const double C50105 = C49847 * C49900;
    const double C49940 = C49939 * C49862;
    const double C49943 = C49854 * C49939;
    const double C50087 = ae * C49939;
    const double C50086 = C49847 * C49939;
    const double C50118 = C49939 * C50112;
    const double C2725 =
        (C49858 + ae * C49847 * C49928 +
         C49847 * (ae * C49928 + C49847 * C49865) +
         ae * (C50002 + C49847 * (C49847 * C49846 * C49900 + C50024 * ae) +
               C49847 * C50024 * ae) +
         C49846 * (ae * (C49887 + C49847 * (C49847 * C49900 + C49970 * ae) +
                         C49847 * C49970 * ae) +
                   C49846 * (C49865 + ae * C49847 * C49939 +
                             C49847 * (ae * C49939 + C49847 * C49870)))) /
        C49724;
    const double C50394 = C49846 * C49939;
    const double C49979 = C49854 * C49972;
    const double C49987 = C49972 * C49862;
    const double C50090 = C49846 * C49972;
    const double C50089 = C49972 * C50005;
    const double C50137 = C49972 * C50112;
    const double C50174 = C49847 * C49972;
    const double C50173 = C49972 * ae;
    const double C49880 = C49879 * C49862;
    const double C50044 = C49854 * C49879;
    const double C50154 = C49846 * C49879;
    const double C50177 = C49847 * C49879;
    const double C49919 = C49918 * C49862;
    const double C50045 = C49854 * C49918;
    const double C50156 = C49918 * C50005;
    const double C49958 = C49957 * C49862;
    const double C50076 = C49854 * C49957;
    const double C50218 = C49957 * C50112;
    const double C328 = (C49892 * C49893 * C49852 + ae * C49846 * C49895 +
                         C49846 * (ae * C49895 + C49846 * C49858)) /
                        C49724;
    const double C1165 = (2 * (ae * C49895 + C49846 * C49858) +
                          ae * (C49895 + C49887 * std::pow(C49846, 2)) +
                          C49846 * (C49858 + ae * C49846 * C49887 +
                                    C49846 * (ae * C49887 + C49846 * C49865))) /
                         C49724;
    const double C130 =
        (std::pow(C49851, 2) * bs[2] * C49885 + C49895 * C49862) / C49722;
    const double C132 =
        (2 * C49854 * C49895 + C49854 * (C49895 + C49887 * C49862)) / C49722;
    const double C307 = (C49846 * (C49895 + C49887 * C49862)) / C49722;
    const double C309 = (C49846 * C49854 * C49895) / C49722;
    const double C312 =
        (std::pow(C49851, 2) * bs[2] * C49885 + C49895 * C50005) / C49722;
    const double C314 = (C49854 * C49895 + C49897 * C50005) / C49722;
    const double C498 =
        (C49847 * C49854 * C49895 + C49854 * C50259 * ae) / C49722;
    const double C501 =
        (C50257 * C50258 * C49885 + C49847 * (C49847 * C49895 + C50259 * ae) +
         C49847 * C50259 * ae) /
        C49722;
    const double C937 =
        (C49847 * C49846 * C49895 + C49846 * C50259 * ae) / C49722;
    const double C1161 =
        (2 * C49846 * C49895 + C49846 * (C49895 + C49887 * C50005)) / C49722;
    const double C517 = (C49892 * C49893 * C49852 + ae * C49847 * C49934 +
                         C49847 * (ae * C49934 + C49847 * C49858)) /
                        C49724;
    const double C947 =
        (ae * (C49847 * C49895 + bs[2] * std::pow(C49851, 2) * ae) +
         C49846 * (ae * C49934 + C49847 * C49858)) /
        C49724;
    const double C1910 = (2 * (ae * C49934 + C49847 * C49858) +
                          ae * (C49934 + C49928 * std::pow(C49847, 2)) +
                          C49847 * (C49858 + ae * C49847 * C49928 +
                                    C49847 * (ae * C49928 + C49847 * C49865))) /
                         C49724;
    const double C131 =
        (std::pow(C49851, 2) * bs[2] * C49926 + C49934 * C49862) / C49722;
    const double C133 =
        (2 * C49854 * C49934 + C49854 * (C49934 + C49928 * C49862)) / C49722;
    const double C308 =
        (C49846 * C49854 * C49934 + C49854 * bs[2] * std::pow(C49851, 2) * ae) /
        C49722;
    const double C313 =
        (C50257 * C50258 * C49926 + C49846 * (C49846 * C49934 + C50259 * ae) +
         C49846 * C50259 * ae) /
        C49722;
    const double C495 = (C49847 * (C49934 + C49928 * C49862)) / C49722;
    const double C497 = (C49847 * C49854 * C49934) / C49722;
    const double C502 = (C50257 * C50258 * C49926 + C49934 * C50112) / C49722;
    const double C504 = (C49854 * C49934 + C49936 * C50112) / C49722;
    const double C938 = (C49847 * (C49846 * C49934 + C50259 * ae)) / C49722;
    const double C1905 =
        (2 * C49847 * C49934 + C49847 * (C49934 + C49928 * C50112)) / C49722;
    const double C1279 =
        (ae * (C49895 + C49847 * (C49847 * C49887 + C49992 * ae) +
               C49847 * C49992 * ae) +
         C49846 * (C49858 + ae * C49847 * C49928 +
                   C49847 * (ae * C49928 + C49847 * C49865))) /
        C49724;
    const double C1626 =
        (ae * C49934 + C49847 * C49858 +
         ae * (C49847 * C49846 * C49887 + C49846 * C49992 * ae) +
         C49846 * (ae * (C49847 * C49887 + C49992 * ae) +
                   C49846 * (ae * C49928 + C49847 * C49865))) /
        C49724;
    const double C50262 = C49854 * C49992;
    const double C50266 = C49992 + C50265;
    const double C50332 = C49846 * C49992;
    const double C50352 = C49992 * ae;
    const double C50355 = C49992 + C50353;
    const double C50422 = C49847 * C49992;
    const double C50425 = C49992 + C50423;
    const double C306 = (C49846 * (C49934 + C49928 * C49862) +
                         (bs[2] * std::pow(C49851, 2) + C49992 * C49862) * ae) /
                        C49722;
    const double C496 = (C49847 * (C49895 + C49887 * C49862) +
                         (C50259 + C49992 * C49862) * ae) /
                        C49722;
    const double C1160 =
        (2 * (C49846 * C49934 + C50259 * ae) +
         C49846 * (C49934 + C49846 * (C49846 * C49928 + C49992 * ae) +
                   C49846 * C49992 * ae) +
         (C50259 + C49992 * C50005) * ae) /
        C49722;
    const double C1274 = (C49846 * C49934 + C50259 * ae +
                          (C49846 * C49928 + C49992 * ae) * C50112) /
                         C49722;
    const double C1622 = (C49847 * (C49895 + C49887 * C50005) +
                          (C50259 + C49992 * C50005) * ae) /
                         C49722;
    const double C1906 =
        (2 * (C49847 * C49895 + C50259 * ae) +
         C49847 * (C49895 + C49847 * (C49847 * C49887 + C49992 * ae) +
                   C49847 * C49992 * ae) +
         (C50259 + C49992 * C50112) * ae) /
        C49722;
    const double C122 =
        2 * C49854 * C50259 + C49854 * (C50259 + C49992 * C49862);
    const double C295 = C49846 * (C50259 + C49992 * C49862);
    const double C484 = C49847 * (C50259 + C49992 * C49862);
    const double C1153 =
        2 * C49846 * C50259 + C49846 * (C50259 + C49992 * C50005);
    const double C1614 = C49847 * (C50259 + C49992 * C50005);
    const double C1898 =
        2 * C49847 * C50259 + C49847 * (C50259 + C49992 * C50112);
    const double C533 = C50778 * C515;
    const double C49872 = C49865 + C49871;
    const double C49877 = 2 * C49874;
    const double C50012 = C49846 * C49874;
    const double C50035 = C49847 * C49874;
    const double C49909 = C49900 + C49908;
    const double C49917 = 2 * C49915;
    const double C50013 = C49915 * C50005;
    const double C50043 = ae * C49915;
    const double C50042 = C49846 * C49915;
    const double C50098 = C49847 * C49915;
    const double C50065 = C49900 + C50061;
    const double C50160 = 2 * C50152;
    const double C50158 = ae * C50152;
    const double C50198 = C49847 * C50152;
    const double C49948 = C49939 + C49947;
    const double C49956 = 2 * C49954;
    const double C50073 = ae * C49954;
    const double C50072 = C49847 * C49954;
    const double C50122 = C49954 * C50112;
    const double C50383 = C49846 * C49954;
    const double C50140 = C49939 + C50138;
    const double C50183 = ae * C50175;
    const double C50225 = 2 * C50175;
    const double C49983 = C49972 + C49982;
    const double C50080 = C49846 * C50075;
    const double C50079 = C50075 * C50005;
    const double C50131 = C50075 * C50112;
    const double C50216 = C50180 * C50112;
    const double C50185 = C49972 + C50179;
    const double C50220 = C49972 + C50217;
    const double C50622 = C50621 * C50616;
    const double C50626 = C50625 * C50621;
    const double C50893 = C50621 * C50617;
    const double C50890 = C50621 / C49766;
    const double C17237 = C50918 * C50621;
    const double C50648 = C50647 * C50642;
    const double C50653 = C50652 * C50647;
    const double C50900 = C50647 * C50643;
    const double C50897 = C50647 / C50641;
    const double C1078 = C50905 * C50647;
    const double C50715 = C50666 * C50713;
    const double C50718 = C50652 * C50666;
    const double C50909 = C50666 * C50714;
    const double C50904 = C50666 / C50641;
    const double C291 = C50905 * C50666;
    const double C50743 = C50682 * C50741;
    const double C50746 = C50652 * C50682;
    const double C50913 = C50682 * C50742;
    const double C50906 = C50682 / C50641;
    const double C482 = C50905 * C50682;
    const double C49771 = C49727 / C49724;
    const double C49768 = 2 * C49727;
    const double C2345 = ((0 * ae) / C49722 - C49727 / C49724) / (2 * C49722) +
                         (0 * ae) / C49722;
    const double C8063 =
        ((C50763 - (C49720 * 2 * C49727) / C49722) * ae) / C49722 -
        C49721 / C49726;
    const double C8064 = (0 * ae) / C49722 - C49727 / C49724;
    const double C17238 =
        (-C49721 / C49722) / (2 * C49722) -
        ((C50763 - (C49720 * 2 * C49727) / C49722) * be) / C49722;
    const double C17239 =
        (-(2 * C49727) / C49722) / (2 * C49722) - (0 * be) / C49722;
    const double C50924 = C50811 / C49726;
    const double C50923 = C50811 * C50810;
    const double C50920 = C50811 / C49722;
    const double C2339 = (2 * C50625 * C50811) / C49722;
    const double C2344 =
        (((C50763 - (C49720 * 2 * C49727) / C49722) * ae) / C49722 -
         C49721 / C49726) /
            (2 * C49722) +
        ((C49720 * ((0 * ae) / C49722 - C49727 / C49724) + C50814) * ae) /
            C49722;
    const double C50925 = C50814 * C50810;
    const double C19915 = C50814 / C50896;
    const double C24497 = C50814 / C49766;
    const double C50942 = C50922 / C49722;
    const double C2338 = (C50763 * std::pow(C50809, 2)) / C49724 + C50917;
    const double C49813 = C49742 / C49724;
    const double C49810 = 2 * C49742;
    const double C5217 = ((0 * ae) / C49722 - C49742 / C49724) / (2 * C49722) +
                         (0 * ae) / C49722;
    const double C10777 =
        ((C50778 - (C49739 * 2 * C49742) / C49722) * ae) / C49722 -
        C49740 / C49726;
    const double C10778 = (0 * ae) / C49722 - C49742 / C49724;
    const double C33355 =
        (-C49740 / C49722) / C49766 -
        ((C50778 - (C49739 * 2 * C49742) / C49722) * be) / C49722;
    const double C33356 = (-(2 * C49742) / C49722) / C49766 - (0 * be) / C49722;
    const double C152 = C117 * C121;
    const double C150 = C117 * C129;
    const double C148 = C117 * C120;
    const double C345 = C117 * C296;
    const double C534 = C117 * C485;
    const double C2527 = C117 * C298;
    const double C2525 = C117 * C310;
    const double C2523 = C117 * C297;
    const double C3281 = C117 * C932;
    const double C50928 = C50839 / C49726;
    const double C50927 = C50839 * C50838;
    const double C50921 = C50839 / C49722;
    const double C5213 = (2 * C50625 * C50839) / C49722;
    const double C10787 = C50842 * C515;
    const double C33365 = C50842 * C515;
    const double C5216 =
        (((C50778 - (C49739 * 2 * C49742) / C49722) * ae) / C49722 -
         C49740 / C49726) /
            (2 * C49722) +
        ((C49739 * ((0 * ae) / C49722 - C49742 / C49724) + C50842) * ae) /
            C49722;
    const double C50929 = C50842 * C50838;
    const double C38936 = C50842 / C50896;
    const double C44259 = C50842 / C49766;
    const double C50945 = C50926 / C49722;
    const double C5212 = (C50778 * std::pow(C50837, 2)) / C49724 + C50919;
    const double C50006 = C50003 + C50004;
    const double C50032 = C50030 + C50031;
    const double C161 = C50778 * C144;
    const double C340 = C50778 * C325;
    const double C350 = C50778 * C329;
    const double C529 = C50778 * C514;
    const double C10795 = C50842 * C514;
    const double C33373 = C50842 * C514;
    const double C539 = C50778 * C518;
    const double C5230 = C5214 * C518;
    const double C11187 = C50842 * C518;
    const double C33765 = C50842 * C518;
    const double C956 = C50778 * C948;
    const double C10993 = C50842 * C948;
    const double C33571 = C50842 * C948;
    const double C49902 = C49887 + C49901;
    const double C49906 = 2 * C49904;
    const double C50011 = ae * C49904;
    const double C50010 = C49846 * C49904;
    const double C1164 = (2 * (ae * C49897 + C49846 * C49976) +
                          ae * (C49897 + C49904 * std::pow(C49846, 2)) +
                          C49846 * (C49976 + ae * C49846 * C49904 +
                                    C49846 * (ae * C49904 + C49846 * C49874))) /
                         C49724;
    const double C50428 = C49847 * C49904;
    const double C1159 =
        (2 * C49846 * C49897 + C49846 * (C49897 + C49904 * C50005)) / C49722;
    const double C50008 = C49887 + C50007;
    const double C50063 = C50059 + C50060;
    const double C50064 = 2 * C50058;
    const double C50062 = ae * C50058;
    const double C50452 = C49847 * C50058;
    const double C50108 = C50105 + C50106;
    const double C49941 = C49928 + C49940;
    const double C49945 = 2 * C49943;
    const double C50034 = ae * C49943;
    const double C50121 = C49847 * C49943;
    const double C1278 =
        (ae * (C49897 + C49847 * (C49847 * C49904 + C49990 * ae) +
               C49847 * C49990 * ae) +
         C49846 * (C49976 + ae * C49847 * C49943 +
                   C49847 * (ae * C49943 + C49847 * C49874))) /
        C49724;
    const double C1625 =
        (ae * C49936 + C49847 * C49976 +
         ae * (C49847 * C49846 * C49904 + C49846 * C49990 * ae) +
         C49846 * (ae * (C49847 * C49904 + C49990 * ae) +
                   C49846 * (ae * C49943 + C49847 * C49874))) /
        C49724;
    const double C1909 = (2 * (ae * C49936 + C49847 * C49976) +
                          ae * (C49936 + C49943 * std::pow(C49847, 2)) +
                          C49847 * (C49976 + ae * C49847 * C49943 +
                                    C49847 * (ae * C49943 + C49847 * C49874))) /
                         C49724;
    const double C50358 = C49846 * C49943;
    const double C1619 =
        (C49847 *
         (C49936 + C49846 * (C49846 * C49943 + C49990 * ae) + C50329 * ae)) /
        C49722;
    const double C1903 =
        (2 * C49847 * C49936 + C49847 * (C49936 + C49943 * C50112)) / C49722;
    const double C50092 = C50087 + C50088;
    const double C50091 = ae * C50086;
    const double C50146 = 2 * C50086;
    const double C50119 = C49928 + C50118;
    const double C3718 = C50778 * C2725;
    const double C15967 = C50842 * C2725;
    const double C21911 = C5214 * C2725;
    const double C37029 = C50842 * C2725;
    const double C50398 = C50394 + C50106;
    const double C49981 = 2 * C49979;
    const double C50026 = C49846 * C49979;
    const double C50099 = C49979 * ae;
    const double C50130 = C49847 * C49979;
    const double C50360 = C49979 * C50005;
    const double C50430 = C49979 * C50112;
    const double C49988 = C49970 + C49987;
    const double C50178 = 2 * C50090;
    const double C50199 = C50090 * ae;
    const double C50215 = C49847 * C50090;
    const double C50454 = C50090 * C50112;
    const double C50093 = C49970 + C50089;
    const double C50139 = C49970 + C50137;
    const double C50182 = C50174 * ae;
    const double C50223 = 2 * C50174;
    const double C50181 = C50172 + C50173;
    const double C50481 = C50477 + C50173;
    const double C49881 = C49870 + C49880;
    const double C50047 = C49846 * C50044;
    const double C50074 = C49847 * C50044;
    const double C50159 = C50153 + C50154;
    const double C50184 = C50176 + C50177;
    const double C49920 = C49907 + C49919;
    const double C50049 = C50045 * C50005;
    const double C50161 = C49907 + C50156;
    const double C49959 = C49946 + C49958;
    const double C50132 = C50076 * C50112;
    const double C50221 = C49946 + C50218;
    const double C2530 = C50778 * C328;
    const double C2540 = C50778 * C1165;
    const double C153 = C50778 * C130;
    const double C157 = C50778 * C132;
    const double C342 = C50778 * C307;
    const double C346 = C50778 * C309;
    const double C2528 = C50778 * C312;
    const double C348 = C50778 * C314;
    const double C535 = C50778 * C498;
    const double C10783 = C50842 * C498;
    const double C33361 = C50842 * C498;
    const double C3282 = C50778 * C937;
    const double C13849 = C50842 * C937;
    const double C36347 = C50842 * C937;
    const double C2542 = C50778 * C1161;
    const double C3280 = C50778 * C947;
    const double C13853 = C50842 * C947;
    const double C36351 = C50842 * C947;
    const double C154 = C117 * C131;
    const double C158 = C117 * C133;
    const double C343 = C117 * C308;
    const double C2529 = C117 * C313;
    const double C528 = C117 * C495;
    const double C532 = C117 * C497;
    const double C538 = C117 * C504;
    const double C3279 = C117 * C938;
    const double C3714 = C50778 * C1279;
    const double C14747 = C50842 * C1279;
    const double C21909 = C5214 * C1279;
    const double C37037 = C50842 * C1279;
    const double C3276 = C50778 * C1626;
    const double C13861 = C50842 * C1626;
    const double C36359 = C50842 * C1626;
    const double C315 =
        (C49854 * C49934 + C49846 * (C49846 * C49936 + C50262 * ae) +
         C49846 * C50262 * ae) /
        C49722;
    const double C503 =
        (C49854 * C49895 + C49847 * (C49847 * C49897 + C50262 * ae) +
         C49847 * C50262 * ae) /
        C49722;
    const double C939 =
        (C49847 * C49846 * C49897 + C49846 * C50262 * ae) / C49722;
    const double C940 = (C49847 * (C49846 * C49936 + C50262 * ae)) / C49722;
    const double C1158 =
        (2 * (C49846 * C49936 + C50262 * ae) +
         C49846 * (C49936 + C49846 * (C49846 * C49943 + C49990 * ae) +
                   C49846 * C49990 * ae) +
         (C50262 + C49990 * C50005) * ae) /
        C49722;
    const double C1272 = (C49846 * C49936 + C50262 * ae +
                          (C49846 * C49943 + C49990 * ae) * C50112) /
                         C49722;
    const double C1620 = (C49847 * (C49897 + C49904 * C50005) +
                          (C50262 + C49990 * C50005) * ae) /
                         C49722;
    const double C1904 =
        (2 * (C49847 * C49897 + C50262 * ae) +
         C49847 * (C49897 + C49847 * (C49847 * C49904 + C49990 * ae) +
                   C49847 * C49990 * ae) +
         (C50262 + C49990 * C50112) * ae) /
        C49722;
    const double C299 = C49854 * C50259 + C50262 * C50005;
    const double C488 = C49854 * C50259 + C50262 * C50112;
    const double C933 = C49847 * C49846 * C50262;
    const double C1152 =
        2 * C49846 * C50262 + C49846 * (C50262 + C49990 * C50005);
    const double C1266 = C49846 * C50262 + C50329 * C50112;
    const double C1613 = C49847 * (C50262 + C49990 * C50005);
    const double C1897 =
        2 * C49847 * C50262 + C49847 * (C50262 + C49990 * C50112);
    const double C123 = 3 * (C50259 + C49992 * C49862) +
                        C49854 * (2 * C50262 + C49854 * C50266);
    const double C294 = C49846 * (2 * C50262 + C49854 * C50266);
    const double C300 = C50259 + C49992 * C49862 + C50266 * C50005;
    const double C483 = C49847 * (2 * C50262 + C49854 * C50266);
    const double C489 = C50259 + C49992 * C49862 + C50266 * C50112;
    const double C934 = C49847 * C49846 * C50266;
    const double C1275 =
        (C49846 * C49895 + C49847 * (C49847 * C50002 + C50332 * ae) +
         C49847 * C50332 * ae) /
        C49722;
    const double C1621 =
        (C49847 *
         (C49934 + C49846 * (C49846 * C49928 + C49992 * ae) + C50332 * ae)) /
        C49722;
    const double C4623 =
        (2 * (C49847 * C50002 + C50332 * ae) +
         C49847 * (C50002 + C49847 * (C49847 * C50058 + C50395) +
                   C49847 * C50024 * ae) +
         (C50332 + C50024 * C50112) * ae) /
        C49722;
    const double C1267 = C49846 * C50259 + C50332 * C50112;
    const double C4615 =
        2 * C49847 * C50332 + C49847 * (C50332 + C50024 * C50112);
    const double C50354 = C50351 + C50352;
    const double C50424 = C50421 + C50352;
    const double C2510 = 3 * (C50259 + C49992 * C50005) +
                         C49846 * (2 * C50332 + C49846 * C50355);
    const double C2716 = C50259 + C49992 * C50005 + C50355 * C50112;
    const double C3262 = C49847 * (2 * C50332 + C49846 * C50355);
    const double C5600 = 3 * (C50259 + C49992 * C50112) +
                         C49847 * (2 * C50422 + C49847 * C50425);
    const double C339 = C117 * C306;
    const double C531 = C50778 * C496;
    const double C10791 = C50842 * C496;
    const double C33369 = C50842 * C496;
    const double C2539 = C117 * C1160;
    const double C3713 = C117 * C1274;
    const double C3278 = C50778 * C1622;
    const double C13865 = C50842 * C1622;
    const double C36355 = C50842 * C1622;
    const double C156 = C117 * C122;
    const double C341 = C117 * C295;
    const double C530 = C117 * C484;
    const double C2541 = C117 * C1153;
    const double C3277 = C117 * C1614;
    const double C145 =
        (4 * (2 * C49854 * C49865 + C49854 * C49872) +
         C49854 * (3 * C49872 +
                   C49854 * (2 * C49854 * C49870 +
                             C49854 * (C49870 + std::pow(C49860, 7) * bs[7] *
                                                    C49852 * C49862)))) /
        C49724;
    const double C324 =
        (ae * (2 * C49854 * C49887 +
               C49854 * (C49887 + C49863 * C49861 * C49885 * C49862)) +
         C49846 * (2 * C49854 * C49865 + C49854 * C49872)) /
        C49724;
    const double C513 =
        (ae * (2 * C49854 * C49928 +
               C49854 * (C49928 + C49863 * C49861 * C49926 * C49862)) +
         C49847 * (2 * C49854 * C49865 + C49854 * C49872)) /
        C49724;
    const double C49910 = C49854 * C49909;
    const double C49914 = 3 * C49909;
    const double C50018 = ae * C49909;
    const double C50017 = C49846 * C49909;
    const double C50436 = C49847 * C49909;
    const double C50015 = C49904 + C50013;
    const double C50048 = 2 * C50042;
    const double C50046 = ae * C50042;
    const double C50445 = C49847 * C50042;
    const double C50068 = C49846 * C50065;
    const double C50155 = 3 * C50065;
    const double C50151 = ae * C50065;
    const double C50498 = C49847 * C50065;
    const double C50162 = C49870 + C50158;
    const double C49949 = C49854 * C49948;
    const double C49953 = 3 * C49948;
    const double C50038 = ae * C49948;
    const double C50125 = C49847 * C49948;
    const double C50364 = C49846 * C49948;
    const double C50077 = ae * C50072;
    const double C50142 = 2 * C50072;
    const double C50123 = C49943 + C50122;
    const double C50147 = C49847 * C50140;
    const double C50210 = ae * C50140;
    const double C50230 = 3 * C50140;
    const double C50187 = C49870 + C50183;
    const double C49984 = C49854 * C49983;
    const double C50028 = C49846 * C49983;
    const double C50366 = C49983 * C50005;
    const double C50438 = C49983 * C50112;
    const double C50447 = C50080 * C50112;
    const double C50083 = C49979 + C50079;
    const double C50133 = C49979 + C50131;
    const double C50219 = C50090 + C50216;
    const double C50189 = C49846 * C50185;
    const double C50500 = C50185 * C50112;
    const double C50224 = C49847 * C50220;
    const double C50894 = C50622 / C49726;
    const double C50892 = C50622 / C49722;
    const double C50891 = C50622 * C50617;
    const double C17236 = (2 * C50625 * C50622) / C49722;
    const double C50895 = C50626 * C50617;
    const double C110 = C50626 / C50896;
    const double C8062 = C50626 / C49766;
    const double C50931 = C50893 / C49722;
    const double C17235 = (C50621 * std::pow(C50616, 2)) / C49724 + C50890;
    const double C50901 = C50648 / C50656;
    const double C50899 = C50648 / C50639;
    const double C50898 = C50648 * C50643;
    const double C1077 = (2 * C50652 * C50648) / C50639;
    const double C50902 = C50653 * C50643;
    const double C116 = C50653 / C50903;
    const double C673 = C50653 / C50641;
    const double C50934 = C50900 / C50639;
    const double C1076 = (C50647 * std::pow(C50642, 2)) / C50651 + C50897;
    const double C50911 = C50715 / C50656;
    const double C50910 = C50715 * C50714;
    const double C50907 = C50715 / C50639;
    const double C290 = (2 * C50652 * C50715) / C50639;
    const double C50912 = C50718 * C50714;
    const double C1148 = C50718 / C50903;
    const double C1380 = C50718 / C50641;
    const double C50936 = C50909 / C50639;
    const double C289 = (C50666 * std::pow(C50713, 2)) / C50651 + C50904;
    const double C50915 = C50743 / C50656;
    const double C50914 = C50743 * C50742;
    const double C50908 = C50743 / C50639;
    const double C481 = (2 * C50652 * C50743) / C50639;
    const double C50916 = C50746 * C50742;
    const double C1894 = C50746 / C50903;
    const double C2141 = C50746 / C50641;
    const double C50939 = C50913 / C50639;
    const double C480 = (C50682 * std::pow(C50741, 2)) / C50651 + C50906;
    const double C49778 = C49775 - C49771;
    const double C49774 = C49720 * C49768;
    const double C50943 = C50923 / C49724;
    const double C2343 =
        (((0 - (C49720 * C49721) / C49722) * ae) / C49722 - (0 * be) / C49726) /
            (2 * C49722) +
        ((C49720 * (((C50763 - (C49720 * 2 * C49727) / C49722) * ae) / C49722 -
                    C49721 / C49726) +
          C50920) *
         ae) /
            C49722 +
        (0 * ae) / C49722 - C49727 / C49724;
    const double C50944 = C50925 / C49722;
    const double C17233 = -C50942;
    const double C49820 = C49817 - C49813;
    const double C49816 = C49739 * C49810;
    const double C5229 = C5217 * C504;
    const double C21908 = C5217 * C1274;
    const double C10802 = C10777 * C122;
    const double C10798 = C10777 * C133;
    const double C10792 = C10777 * C131;
    const double C10788 = C10777 * C121;
    const double C10784 = C10777 * C129;
    const double C10780 = C10777 * C120;
    const double C10998 = C10777 * C296;
    const double C10994 = C10777 * C308;
    const double C10990 = C10777 * C295;
    const double C10986 = C10777 * C306;
    const double C11198 = C10777 * C504;
    const double C11192 = C10777 * C485;
    const double C11188 = C10777 * C497;
    const double C11184 = C10777 * C484;
    const double C11180 = C10777 * C495;
    const double C13866 = C10777 * C298;
    const double C13862 = C10777 * C313;
    const double C13850 = C10777 * C310;
    const double C13846 = C10777 * C297;
    const double C14752 = C10777 * C932;
    const double C14748 = C10777 * C938;
    const double C15100 = C10777 * C1160;
    const double C15096 = C10777 * C1153;
    const double C15306 = C10777 * C1274;
    const double C15960 = C10777 * C1614;
    const double C10794 = C10778 * C495;
    const double C10790 = C10778 * C484;
    const double C10786 = C10778 * C497;
    const double C10782 = C10778 * C485;
    const double C11186 = C10778 * C504;
    const double C13864 = C10778 * C1614;
    const double C13852 = C10778 * C938;
    const double C13848 = C10778 * C932;
    const double C14746 = C10778 * C1274;
    const double C33380 = C33355 * C122;
    const double C33376 = C33355 * C133;
    const double C33370 = C33355 * C131;
    const double C33366 = C33355 * C121;
    const double C33362 = C33355 * C129;
    const double C33358 = C33355 * C120;
    const double C33576 = C33355 * C296;
    const double C33572 = C33355 * C308;
    const double C33568 = C33355 * C295;
    const double C33564 = C33355 * C306;
    const double C33776 = C33355 * C504;
    const double C33770 = C33355 * C485;
    const double C33766 = C33355 * C497;
    const double C33762 = C33355 * C484;
    const double C33758 = C33355 * C495;
    const double C36366 = C33355 * C1153;
    const double C36362 = C33355 * C1160;
    const double C36356 = C33355 * C313;
    const double C36352 = C33355 * C298;
    const double C36348 = C33355 * C310;
    const double C36344 = C33355 * C297;
    const double C37042 = C33355 * C932;
    const double C37038 = C33355 * C938;
    const double C37034 = C33355 * C1614;
    const double C37472 = C33355 * C1274;
    const double C33372 = C33356 * C495;
    const double C33368 = C33356 * C484;
    const double C33364 = C33356 * C497;
    const double C33360 = C33356 * C485;
    const double C33764 = C33356 * C504;
    const double C36354 = C33356 * C1614;
    const double C36350 = C33356 * C938;
    const double C36346 = C33356 * C932;
    const double C37036 = C33356 * C1274;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C2554 = C2525 + C2526;
    const double C2553 = C2523 + C2524;
    const double C50946 = C50927 / C49724;
    const double C10809 = C50921 * C144;
    const double C10803 = C50921 * C132;
    const double C10799 = C50921 * C143;
    const double C10793 = C50921 * C142;
    const double C10789 = C50921 * C130;
    const double C10785 = C50921 * C141;
    const double C10781 = C50921 * C128;
    const double C11005 = C50921 * C329;
    const double C11001 = C50921 * C314;
    const double C10999 = C50921 * C309;
    const double C10995 = C50921 * C326;
    const double C10991 = C50921 * C307;
    const double C10987 = C50921 * C325;
    const double C11199 = C50921 * C518;
    const double C11193 = C50921 * C498;
    const double C11189 = C50921 * C515;
    const double C11185 = C50921 * C496;
    const double C11181 = C50921 * C514;
    const double C11751 = C50921 * C948;
    const double C13867 = C50921 * C312;
    const double C13863 = C50921 * C328;
    const double C13851 = C50921 * C327;
    const double C13847 = C50921 * C311;
    const double C14753 = C50921 * C937;
    const double C14749 = C50921 * C947;
    const double C15101 = C50921 * C1165;
    const double C15097 = C50921 * C1161;
    const double C15307 = C50921 * C1279;
    const double C15965 = C50921 * C1626;
    const double C15961 = C50921 * C1622;
    const double C31873 = C50921 * C2725;
    const double C5215 =
        (((0 - (C49739 * C49740) / C49722) * ae) / C49722 - (0 * be) / C49726) /
            (2 * C49722) +
        ((C49739 * (((C50778 - (C49739 * 2 * C49742) / C49722) * ae) / C49722 -
                    C49740 / C49726) +
          C50921) *
         ae) /
            C49722 +
        (0 * ae) / C49722 - C49742 / C49724;
    const double C5240 = C5213 * C496;
    const double C5234 = C5213 * C514;
    const double C5228 = C5213 * C515;
    const double C5222 = C5213 * C498;
    const double C5422 = C5213 * C948;
    const double C5616 = C5213 * C518;
    const double C21919 = C5213 * C1622;
    const double C21913 = C5213 * C1626;
    const double C21907 = C5213 * C947;
    const double C21901 = C5213 * C937;
    const double C22569 = C5213 * C1279;
    const double C23509 = C5213 * C2725;
    const double C5239 = C5216 * C484;
    const double C5233 = C5216 * C495;
    const double C5227 = C5216 * C497;
    const double C5221 = C5216 * C485;
    const double C5615 = C5216 * C504;
    const double C21918 = C5216 * C1614;
    const double C21906 = C5216 * C938;
    const double C21900 = C5216 * C932;
    const double C22568 = C5216 * C1274;
    const double C50947 = C50929 / C49722;
    const double C44275 = C44259 * C518;
    const double C47231 = C44259 * C2725;
    const double C47229 = C44259 * C1279;
    const double C33353 = -C50945;
    const double C5250 = C5212 * C143;
    const double C5244 = C5212 * C132;
    const double C5242 = C5212 * C130;
    const double C5236 = C5212 * C142;
    const double C5226 = C5212 * C141;
    const double C5220 = C5212 * C128;
    const double C5438 = C5212 * C329;
    const double C5432 = C5212 * C314;
    const double C5430 = C5212 * C309;
    const double C5424 = C5212 * C326;
    const double C5632 = C5212 * C518;
    const double C5624 = C5212 * C498;
    const double C5618 = C5212 * C515;
    const double C5802 = C5212 * C325;
    const double C5796 = C5212 * C307;
    const double C5966 = C5212 * C514;
    const double C5960 = C5212 * C496;
    const double C6182 = C5212 * C948;
    const double C21921 = C5212 * C312;
    const double C21915 = C5212 * C328;
    const double C21905 = C5212 * C327;
    const double C21899 = C5212 * C311;
    const double C22577 = C5212 * C937;
    const double C22571 = C5212 * C947;
    const double C22835 = C5212 * C1165;
    const double C22829 = C5212 * C1161;
    const double C23003 = C5212 * C1279;
    const double C23507 = C5212 * C1626;
    const double C23501 = C5212 * C1622;
    const double C330 = (C49858 + C49865 * C49862 + ae * C49846 * C49902 +
                         C49846 * (ae * C49902 + C49846 * C49872)) /
                        C49724;
    const double C135 = (3 * (C49895 + C49887 * C49862) +
                         C49854 * (2 * C49897 + C49854 * C49902)) /
                        C49722;
    const double C305 = (C49846 * (2 * C49897 + C49854 * C49902)) / C49722;
    const double C316 = (C49895 + C49887 * C49862 + C49902 * C50005) / C49722;
    const double C494 = (C49847 * (2 * C49897 + C49854 * C49902) +
                         (2 * C50262 + C49854 * C50266) * ae) /
                        C49722;
    const double C505 =
        (C49895 + C49887 * C49862 + C49847 * (C49847 * C49902 + C50266 * ae) +
         C49847 * C50266 * ae) /
        C49722;
    const double C941 =
        (C49847 * C49846 * C49902 + C49846 * C50266 * ae) / C49722;
    const double C1157 =
        (2 * C49846 * C49902 + C49846 * (C49902 + C49909 * C50005)) / C49722;
    const double C50014 = C50011 + C50012;
    const double C1273 =
        (C49846 * C49897 + C49847 * (C49847 * C50010 + C50329 * ae) +
         C49847 * C50329 * ae) /
        C49722;
    const double C2532 = C50778 * C1164;
    const double C13875 = C50921 * C1164;
    const double C50431 = C50428 + C50359;
    const double C2534 = C50778 * C1159;
    const double C13871 = C50921 * C1159;
    const double C2519 =
        (3 * (C49858 + ae * C50002 + C49846 * C50006) +
         ae * (2 * C50002 + C49846 * C50008) +
         C49846 * (2 * C50006 + ae * C50008 +
                   C49846 * (C49865 + ae * C49846 * C49900 +
                             C49846 * (ae * C49900 + C49846 * C49870)))) /
        C49724;
    const double C3271 =
        (2 * (ae * (C49847 * C49887 + C49992 * ae) + C49846 * C50032) +
         ae * (C49847 * C50008 + (C49992 + C49970 * C50005) * ae) +
         C49846 * (C50032 + ae * (C49847 * C49846 * C49900 + C50024 * ae) +
                   C49846 * (ae * (C49847 * C49900 + C49970 * ae) +
                             C49846 * (ae * C49939 + C49847 * C49870)))) /
        C49724;
    const double C2513 = (3 * (C49895 + C49887 * C50005) +
                          C49846 * (2 * C50002 + C49846 * C50008)) /
                         C49722;
    const double C2719 =
        (C49895 + C49887 * C50005 + C49847 * (C49847 * C50008 + C50355 * ae) +
         C49847 * C50355 * ae) /
        C49722;
    const double C3265 = (C49847 * (2 * C50002 + C49846 * C50008) +
                          (2 * C50332 + C49846 * C50355) * ae) /
                         C49722;
    const double C50067 = C49846 * C50063;
    const double C50150 = 2 * C50063;
    const double C50066 = C49865 + C50062;
    const double C50455 = C50452 + C50395;
    const double C50109 = ae * C50108;
    const double C50468 = C49847 * C50108;
    const double C50516 = 2 * C50108;
    const double C519 = (C49858 + C49865 * C49862 + ae * C49847 * C49941 +
                         C49847 * (ae * C49941 + C49847 * C49872)) /
                        C49724;
    const double C949 =
        (ae * (C49847 * C49902 +
               (C49893 * C49892 + C49856 * C49855 * C49862) * ae) +
         C49846 * (ae * C49941 + C49847 * C49872)) /
        C49724;
    const double C134 = (3 * (C49934 + C49928 * C49862) +
                         C49854 * (2 * C49936 + C49854 * C49941)) /
                        C49722;
    const double C304 =
        (C49846 * (2 * C49936 + C49854 * C49941) +
         (2 * C49854 * C49992 + C49854 * (C49992 + C49970 * C49862)) * ae) /
        C49722;
    const double C317 =
        (C49934 + C49928 * C49862 + C49846 * (C49846 * C49941 + C50266 * ae) +
         C49846 * C50266 * ae) /
        C49722;
    const double C493 = (C49847 * (2 * C49936 + C49854 * C49941)) / C49722;
    const double C506 = (C49934 + C49928 * C49862 + C49941 * C50112) / C49722;
    const double C942 = (C49847 * (C49846 * C49941 + C50266 * ae)) / C49722;
    const double C1901 =
        (2 * C49847 * C49941 + C49847 * (C49941 + C49948 * C50112)) / C49722;
    const double C50036 = C50034 + C50035;
    const double C2742 = C50778 * C1278;
    const double C5420 = C5214 * C1278;
    const double C6184 = C5213 * C1278;
    const double C11753 = C50842 * C1278;
    const double C14089 = C50921 * C1278;
    const double C34331 = C50842 * C1278;
    const double C44465 = C44259 * C1278;
    const double C2730 = C50778 * C1625;
    const double C5440 = C5213 * C1625;
    const double C11007 = C50842 * C1625;
    const double C14761 = C50921 * C1625;
    const double C33585 = C50842 * C1625;
    const double C5634 = C5213 * C1909;
    const double C5614 = C5214 * C1909;
    const double C11201 = C50842 * C1909;
    const double C33779 = C50842 * C1909;
    const double C44647 = C44259 * C1909;
    const double C50361 = C50358 + C50359;
    const double C2729 = C117 * C1619;
    const double C5439 = C5216 * C1619;
    const double C11006 = C10778 * C1619;
    const double C14760 = C10777 * C1619;
    const double C33584 = C33356 * C1619;
    const double C37048 = C33355 * C1619;
    const double C5633 = C5216 * C1903;
    const double C5613 = C5217 * C1903;
    const double C11200 = C10778 * C1903;
    const double C33778 = C33356 * C1903;
    const double C50095 = C49847 * C50092;
    const double C50107 = C49846 * C50092;
    const double C50209 = 2 * C50092;
    const double C50094 = C49865 + C50091;
    const double C5604 = (3 * (C49934 + C49928 * C50112) +
                          C49847 * (2 * C50117 + C49847 * C50119)) /
                         C49722;
    const double C50400 = C49846 * C50398;
    const double C50476 = 2 * C50398;
    const double C2726 =
        (C49976 + ae * C49847 * C49943 +
         C49847 * (ae * C49943 + C49847 * C49874) +
         ae * (C50010 + C49847 * (C49847 * C49846 * C49915 + C50026 * ae) +
               C49847 * C50026 * ae) +
         C49846 *
             (ae * (C49904 + C49847 * (C49847 * C49915 + C49979 * ae) +
                    C49847 * C49979 * ae) +
              C49846 * (C49874 + ae * C49847 * C49954 +
                        C49847 * (ae * C49954 + C49847 * C49854 * C49879)))) /
        C49724;
    const double C50385 = 2 * C50026;
    const double C50384 = C50026 * ae;
    const double C50446 = C49847 * C50026;
    const double C4613 =
        2 * C49847 * C50329 + C49847 * (C50329 + C50026 * C50112);
    const double C50101 = C50098 + C50099;
    const double C50387 = C50383 + C50099;
    const double C50461 = 2 * C50130;
    const double C50460 = C50130 * ae;
    const double C50362 = C49990 + C50360;
    const double C50432 = C49990 + C50430;
    const double C50270 = C49854 * C49988;
    const double C50275 = 3 * C49988;
    const double C50326 = C49846 * C49988;
    const double C50365 = C49988 * ae;
    const double C50437 = C49847 * C49988;
    const double C1156 =
        (2 * (C49846 * C49941 + C50266 * ae) +
         C49846 * (C49941 + C49846 * (C49846 * C49948 + C49988 * ae) +
                   C49846 * C49988 * ae) +
         (C50266 + C49988 * C50005) * ae) /
        C49722;
    const double C1270 = (C49846 * C49941 + C50266 * ae +
                          (C49846 * C49948 + C49988 * ae) * C50112) /
                         C49722;
    const double C1618 = (C49847 * (C49902 + C49909 * C50005) +
                          (C50266 + C49988 * C50005) * ae) /
                         C49722;
    const double C1902 =
        (2 * (C49847 * C49902 + C50266 * ae) +
         C49847 * (C49902 + C49847 * (C49847 * C49909 + C49988 * ae) +
                   C49847 * C49988 * ae) +
         (C50266 + C49988 * C50112) * ae) /
        C49722;
    const double C1151 =
        2 * C49846 * C50266 + C49846 * (C50266 + C49988 * C50005);
    const double C1612 = C49847 * (C50266 + C49988 * C50005);
    const double C1896 =
        2 * C49847 * C50266 + C49847 * (C50266 + C49988 * C50112);
    const double C50202 = C50198 + C50199;
    const double C50509 = 2 * C50215;
    const double C50508 = C50215 * ae;
    const double C50456 = C50024 + C50454;
    const double C50397 = C49846 * C50093;
    const double C50479 = 3 * C50093;
    const double C50478 = C50093 * ae;
    const double C50499 = C49847 * C50093;
    const double C4621 =
        (2 * (C49847 * C50008 + C50355 * ae) +
         C49847 * (C50008 + C49847 * (C49847 * C50065 + C50093 * ae) +
                   C49847 * C50093 * ae) +
         (C50355 + C50093 * C50112) * ae) /
        C49722;
    const double C4614 =
        2 * C49847 * C50355 + C49847 * (C50355 + C50093 * C50112);
    const double C50471 = C49847 * C50139;
    const double C50519 = 3 * C50139;
    const double C50518 = C50139 * ae;
    const double C50186 = C49847 * C50181;
    const double C50200 = ae * C50181;
    const double C50483 = C49846 * C50481;
    const double C50504 = C50481 * C50112;
    const double C49882 = C49854 * C49881;
    const double C50019 = C49846 * C49881;
    const double C50039 = C49847 * C49881;
    const double C1163 = (2 * (ae * C49902 + C49846 * C49872) +
                          ae * (C49902 + C49909 * std::pow(C49846, 2)) +
                          C49846 * (C49872 + ae * C49846 * C49909 +
                                    C49846 * (ae * C49909 + C49846 * C49881))) /
                         C49724;
    const double C1277 =
        (ae * (C49902 + C49847 * (C49847 * C49909 + C49988 * ae) +
               C49847 * C49988 * ae) +
         C49846 * (C49872 + ae * C49847 * C49948 +
                   C49847 * (ae * C49948 + C49847 * C49881))) /
        C49724;
    const double C1624 =
        (ae * C49941 + C49847 * C49872 +
         ae * (C49847 * C49846 * C49909 + C49846 * C49988 * ae) +
         C49846 * (ae * (C49847 * C49909 + C49988 * ae) +
                   C49846 * (ae * C49948 + C49847 * C49881))) /
        C49724;
    const double C1908 = (2 * (ae * C49941 + C49847 * C49872) +
                          ae * (C49941 + C49948 * std::pow(C49847, 2)) +
                          C49847 * (C49872 + ae * C49847 * C49948 +
                                    C49847 * (ae * C49948 + C49847 * C49881))) /
                         C49724;
    const double C50051 = C50043 + C50047;
    const double C50078 = C50073 + C50074;
    const double C50163 = C49846 * C50159;
    const double C50188 = C49847 * C50184;
    const double C50201 = C49846 * C50184;
    const double C49921 = C49854 * C49920;
    const double C50020 = C49920 * C50005;
    const double C50052 = C49915 + C50049;
    const double C50164 = C49846 * C50161;
    const double C49960 = C49854 * C49959;
    const double C50126 = C49959 * C50112;
    const double C50134 = C49954 + C50132;
    const double C50226 = C49847 * C50221;
    const double C170 = C152 + C153;
    const double C364 = C345 + C346;
    const double C2555 = C2527 + C2528;
    const double C553 = C534 + C535;
    const double C3294 = C3281 + C3282;
    const double C171 = C154 + C155;
    const double C173 = C158 + C159;
    const double C363 = C343 + C344;
    const double C2556 = C2529 + C2530;
    const double C550 = C528 + C529;
    const double C552 = C532 + C533;
    const double C555 = C538 + C539;
    const double C3293 = C3279 + C3280;
    const double C349 = C117 * C315;
    const double C11004 = C10777 * C315;
    const double C33582 = C33355 * C315;
    const double C537 = C50778 * C503;
    const double C5224 = C5214 * C503;
    const double C5626 = C5212 * C503;
    const double C5622 = C5213 * C503;
    const double C11195 = C50921 * C503;
    const double C11191 = C50842 * C503;
    const double C33769 = C50842 * C503;
    const double C44269 = C44259 * C503;
    const double C954 = C50778 * C939;
    const double C5428 = C5213 * C939;
    const double C6176 = C5212 * C939;
    const double C10997 = C50842 * C939;
    const double C11747 = C50921 * C939;
    const double C33575 = C50842 * C939;
    const double C955 = C117 * C940;
    const double C5421 = C5216 * C940;
    const double C10992 = C10778 * C940;
    const double C11750 = C10777 * C940;
    const double C33570 = C33356 * C940;
    const double C34328 = C33355 * C940;
    const double C2531 = C117 * C1158;
    const double C13874 = C10777 * C1158;
    const double C36372 = C33355 * C1158;
    const double C2741 = C117 * C1272;
    const double C5419 = C5217 * C1272;
    const double C6183 = C5216 * C1272;
    const double C11752 = C10778 * C1272;
    const double C14088 = C10777 * C1272;
    const double C34330 = C33356 * C1272;
    const double C41172 = C33355 * C1272;
    const double C2732 = C50778 * C1620;
    const double C5434 = C5213 * C1620;
    const double C11003 = C50842 * C1620;
    const double C14757 = C50921 * C1620;
    const double C33581 = C50842 * C1620;
    const double C5628 = C5213 * C1904;
    const double C5620 = C5214 * C1904;
    const double C11197 = C50842 * C1904;
    const double C33775 = C50842 * C1904;
    const double C44653 = C44259 * C1904;
    const double C347 = C117 * C299;
    const double C11000 = C10777 * C299;
    const double C33578 = C33355 * C299;
    const double C536 = C117 * C488;
    const double C5223 = C5217 * C488;
    const double C5621 = C5216 * C488;
    const double C11194 = C10777 * C488;
    const double C11190 = C10778 * C488;
    const double C33772 = C33355 * C488;
    const double C33768 = C33356 * C488;
    const double C953 = C117 * C933;
    const double C5427 = C5216 * C933;
    const double C10996 = C10778 * C933;
    const double C11746 = C10777 * C933;
    const double C33574 = C33356 * C933;
    const double C34324 = C33355 * C933;
    const double C2533 = C117 * C1152;
    const double C13870 = C10777 * C1152;
    const double C36368 = C33355 * C1152;
    const double C2739 = C117 * C1266;
    const double C5425 = C5217 * C1266;
    const double C6177 = C5216 * C1266;
    const double C11748 = C10778 * C1266;
    const double C14084 = C10777 * C1266;
    const double C34326 = C33356 * C1266;
    const double C41168 = C33355 * C1266;
    const double C2731 = C117 * C1613;
    const double C5433 = C5216 * C1613;
    const double C11002 = C10778 * C1613;
    const double C14756 = C10777 * C1613;
    const double C33580 = C33356 * C1613;
    const double C37044 = C33355 * C1613;
    const double C5627 = C5216 * C1897;
    const double C5619 = C5217 * C1897;
    const double C11196 = C10778 * C1897;
    const double C33774 = C33356 * C1897;
    const double C162 = C117 * C123;
    const double C10804 = C10777 * C123;
    const double C33382 = C33355 * C123;
    const double C337 = C117 * C294;
    const double C11374 = C10777 * C294;
    const double C33952 = C33355 * C294;
    const double C351 = C117 * C300;
    const double C11008 = C10777 * C300;
    const double C33586 = C33355 * C300;
    const double C526 = C117 * C483;
    const double C5245 = C5216 * C483;
    const double C10800 = C10778 * C483;
    const double C11537 = C10777 * C483;
    const double C33378 = C33356 * C483;
    const double C34115 = C33355 * C483;
    const double C540 = C117 * C489;
    const double C5237 = C5217 * C489;
    const double C5961 = C5216 * C489;
    const double C11202 = C10777 * C489;
    const double C11182 = C10778 * C489;
    const double C33780 = C33355 * C489;
    const double C33760 = C33356 * C489;
    const double C957 = C117 * C934;
    const double C5797 = C5216 * C934;
    const double C10988 = C10778 * C934;
    const double C11754 = C10777 * C934;
    const double C33566 = C33356 * C934;
    const double C34332 = C33355 * C934;
    const double C3712 = C50778 * C1275;
    const double C14751 = C50842 * C1275;
    const double C15303 = C50921 * C1275;
    const double C21903 = C5214 * C1275;
    const double C22575 = C5213 * C1275;
    const double C22997 = C5212 * C1275;
    const double C37041 = C50842 * C1275;
    const double C47223 = C44259 * C1275;
    const double C3275 = C117 * C1621;
    const double C13860 = C10778 * C1621;
    const double C15964 = C10777 * C1621;
    const double C21912 = C5216 * C1621;
    const double C36358 = C33356 * C1621;
    const double C37030 = C33355 * C1621;
    const double C15305 = C50842 * C4623;
    const double C22573 = C5214 * C4623;
    const double C22999 = C5213 * C4623;
    const double C37471 = C50842 * C4623;
    const double C47893 = C44259 * C4623;
    const double C3711 = C117 * C1267;
    const double C14750 = C10778 * C1267;
    const double C15302 = C10777 * C1267;
    const double C21902 = C5217 * C1267;
    const double C22574 = C5216 * C1267;
    const double C37040 = C33356 * C1267;
    const double C37468 = C33355 * C1267;
    const double C15304 = C10778 * C4615;
    const double C22572 = C5217 * C4615;
    const double C22998 = C5216 * C4615;
    const double C37470 = C33356 * C4615;
    const double C2514 =
        (3 * (C49934 + C49846 * C50354 + C50332 * ae) +
         C49846 * (2 * C50354 +
                   C49846 * (C49928 + C49846 * (C49846 * C49939 + C50106) +
                             C50024 * ae) +
                   C50355 * ae) +
         (2 * C50332 + C49846 * C50355) * ae) /
        C49722;
    const double C2720 =
        (C49934 + C49846 * C50354 + C50332 * ae +
         (C49928 + C49846 * (C49846 * C49939 + C50106) + C50024 * ae) *
             C50112) /
        C49722;
    const double C3266 =
        (C49847 * (2 * C50354 +
                   C49846 * (C49928 + C49846 * (C49846 * C49939 + C50106) +
                             C50024 * ae) +
                   C50355 * ae)) /
        C49722;
    const double C4622 =
        (2 * C49847 * C50354 + C49847 * (C50354 + C50398 * C50112)) / C49722;
    const double C6586 =
        (3 * (C50354 + C50398 * C50112) +
         C49847 * (2 * C49847 * C50398 +
                   C49847 * (C50398 + (C49846 * C49946 + C50173) * C50112))) /
        C49722;
    const double C5603 =
        (3 * (C49895 + C49847 * C50424 + C50422 * ae) +
         C49847 *
             (2 * C50424 + C49847 * (C49887 + C49847 * C50108 + C50136 * ae) +
              C50425 * ae) +
         (2 * C50422 + C49847 * C50425) * ae) /
        C49722;
    const double C3551 = C117 * C2510;
    const double C31710 = C10777 * C2510;
    const double C37310 = C33355 * C2510;
    const double C3715 = C117 * C2716;
    const double C15962 = C10778 * C2716;
    const double C21916 = C5217 * C2716;
    const double C23502 = C5216 * C2716;
    const double C31868 = C10777 * C2716;
    const double C37032 = C33356 * C2716;
    const double C37476 = C33355 * C2716;
    const double C4217 = C117 * C3262;
    const double C15098 = C10778 * C3262;
    const double C22830 = C5216 * C3262;
    const double C32368 = C10777 * C3262;
    const double C36364 = C33356 * C3262;
    const double C37980 = C33355 * C3262;
    const double C361 = C339 + C340;
    const double C2559 = C2539 + C2540;
    const double C3720 = C3713 + C3714;
    const double C172 = C156 + C157;
    const double C362 = C341 + C342;
    const double C551 = C530 + C531;
    const double C2560 = C2541 + C2542;
    const double C3292 = C3277 + C3278;
    const double C167 = C50778 * C145;
    const double C336 = C50778 * C324;
    const double C11379 = C50921 * C324;
    const double C525 = C50778 * C513;
    const double C5252 = C5213 * C513;
    const double C10797 = C50842 * C513;
    const double C11542 = C50921 * C513;
    const double C33375 = C50842 * C513;
    const double C49911 = C49906 + C49910;
    const double C2515 = (3 * (C49897 + C49904 * C50005) +
                          C49846 * (2 * C50010 + C49846 * C50015)) /
                         C49722;
    const double C50050 = C49874 + C50046;
    const double C50070 = C50064 + C50068;
    const double C49950 = C49945 + C49949;
    const double C50081 = C49874 + C50077;
    const double C5606 = (3 * (C49936 + C49943 * C50112) +
                          C49847 * (2 * C50121 + C49847 * C50123)) /
                         C49722;
    const double C50148 = C50146 + C50147;
    const double C49985 = C49981 + C49984;
    const double C2727 =
        (C49872 + ae * C49847 * C49948 +
         C49847 * (ae * C49948 + C49847 * C49881) +
         ae * (C50017 + C49847 * (C49847 * C49846 * C49920 + C50028 * ae) +
               C49847 * C50028 * ae) +
         C49846 * (ae * (C49909 + C49847 * (C49847 * C49920 + C49983 * ae) +
                         C49847 * C49983 * ae) +
                   C49846 * (C49881 + ae * C49847 * C49959 +
                             C49847 * (ae * C49959 +
                                       C49847 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C50368 = C49988 + C50366;
    const double C50440 = C49988 + C50438;
    const double C50449 = C50026 + C50447;
    const double C50386 = C49846 * C50083;
    const double C50462 = C49847 * C50133;
    const double C50510 = C49847 * C50219;
    const double C50192 = C50178 + C50189;
    const double C50502 = C50093 + C50500;
    const double C50227 = C50223 + C50224;
    const double C50930 = C50891 / C49724;
    const double C50932 = C50895 / C49722;
    const double C2341 = -C50931;
    const double C50933 = C50898 / C50651;
    const double C50935 = C50902 / C50639;
    const double C292 = -C50934;
    const double C50937 = C50910 / C50651;
    const double C50938 = C50912 / C50639;
    const double C1074 = -C50936;
    const double C50940 = C50914 / C50651;
    const double C50941 = C50916 / C50639;
    const double C1725 = -C50939;
    const double C19920 =
        (C49778 / C49766 - (0 * be) / C49722) / C49766 + (0 * ae) / C49722;
    const double C24502 = C49778 / C49766 - (0 * be) / C49722;
    const double C49777 = C49774 / C49722;
    const double C50956 = C50917 - C50943;
    const double C50957 = C50924 - C50944;
    const double C38940 =
        (C49820 / C49766 - (0 * be) / C49722) / C49766 + (0 * ae) / C49722;
    const double C44262 = C49820 / C49766 - (0 * be) / C49722;
    const double C49819 = C49816 / C49722;
    const double C5260 = C5229 + C5230;
    const double C21927 = C21908 + C21909;
    const double C10819 = C10794 + C10795;
    const double C10817 = C10790 + C10791;
    const double C10815 = C10786 + C10787;
    const double C10813 = C10782 + C10783;
    const double C11214 = C11186 + C11187;
    const double C13884 = C13864 + C13865;
    const double C13881 = C13852 + C13853;
    const double C13879 = C13848 + C13849;
    const double C14764 = C14746 + C14747;
    const double C33397 = C33372 + C33373;
    const double C33395 = C33368 + C33369;
    const double C33393 = C33364 + C33365;
    const double C33391 = C33360 + C33361;
    const double C33792 = C33764 + C33765;
    const double C36383 = C36354 + C36355;
    const double C36381 = C36350 + C36351;
    const double C36379 = C36346 + C36347;
    const double C37056 = C37036 + C37037;
    const double C179 = C169 * C50763;
    const double C2348 = C169 * C2338;
    const double C8067 = C169 * C50920;
    const double C17242 = C169 * C17233;
    const double C178 = C168 * C118;
    const double C2347 = C168 * C2343;
    const double C8066 = C168 * C8063;
    const double C17241 = C168 * C17238;
    const double C50958 = C50919 - C50946;
    const double C10823 = C10802 + C10803;
    const double C10821 = C10798 + C10799;
    const double C10818 = C10792 + C10793;
    const double C10816 = C10788 + C10789;
    const double C10814 = C10784 + C10785;
    const double C10812 = C10780 + C10781;
    const double C11023 = C10998 + C10999;
    const double C11021 = C10994 + C10995;
    const double C11019 = C10990 + C10991;
    const double C11017 = C10986 + C10987;
    const double C11220 = C11198 + C11199;
    const double C11217 = C11192 + C11193;
    const double C11215 = C11188 + C11189;
    const double C11213 = C11184 + C11185;
    const double C11211 = C11180 + C11181;
    const double C13885 = C13866 + C13867;
    const double C13883 = C13862 + C13863;
    const double C13880 = C13850 + C13851;
    const double C13878 = C13846 + C13847;
    const double C14767 = C14752 + C14753;
    const double C14765 = C14748 + C14749;
    const double C15106 = C15100 + C15101;
    const double C15104 = C15096 + C15097;
    const double C15312 = C15306 + C15307;
    const double C15968 = C15960 + C15961;
    const double C5249 = C5215 * C133;
    const double C5243 = C5215 * C122;
    const double C5241 = C5215 * C121;
    const double C5235 = C5215 * C131;
    const double C5225 = C5215 * C129;
    const double C5219 = C5215 * C120;
    const double C5437 = C5215 * C315;
    const double C5431 = C5215 * C299;
    const double C5429 = C5215 * C296;
    const double C5423 = C5215 * C308;
    const double C5631 = C5215 * C504;
    const double C5625 = C5215 * C488;
    const double C5623 = C5215 * C485;
    const double C5617 = C5215 * C497;
    const double C5801 = C5215 * C306;
    const double C5795 = C5215 * C295;
    const double C5965 = C5215 * C495;
    const double C5959 = C5215 * C484;
    const double C6181 = C5215 * C940;
    const double C6175 = C5215 * C933;
    const double C21920 = C5215 * C298;
    const double C21914 = C5215 * C313;
    const double C21904 = C5215 * C310;
    const double C21898 = C5215 * C297;
    const double C22576 = C5215 * C932;
    const double C22570 = C5215 * C938;
    const double C22834 = C5215 * C1160;
    const double C22828 = C5215 * C1153;
    const double C23002 = C5215 * C1274;
    const double C22996 = C5215 * C1267;
    const double C23506 = C5215 * C1621;
    const double C23500 = C5215 * C1614;
    const double C5265 = C5239 + C5240;
    const double C5262 = C5233 + C5234;
    const double C5259 = C5227 + C5228;
    const double C5256 = C5221 + C5222;
    const double C5638 = C5615 + C5616;
    const double C21932 = C21918 + C21919;
    const double C21926 = C21906 + C21907;
    const double C21923 = C21900 + C21901;
    const double C22579 = C22568 + C22569;
    const double C50959 = C50928 - C50947;
    const double C33387 = C33353 * C144;
    const double C33381 = C33353 * C132;
    const double C33377 = C33353 * C143;
    const double C33371 = C33353 * C142;
    const double C33367 = C33353 * C130;
    const double C33363 = C33353 * C141;
    const double C33359 = C33353 * C128;
    const double C33583 = C33353 * C329;
    const double C33579 = C33353 * C314;
    const double C33577 = C33353 * C309;
    const double C33573 = C33353 * C326;
    const double C33569 = C33353 * C307;
    const double C33565 = C33353 * C325;
    const double C33777 = C33353 * C518;
    const double C33773 = C33353 * C503;
    const double C33771 = C33353 * C498;
    const double C33767 = C33353 * C515;
    const double C33763 = C33353 * C496;
    const double C33759 = C33353 * C514;
    const double C33957 = C33353 * C324;
    const double C34120 = C33353 * C513;
    const double C34329 = C33353 * C948;
    const double C34325 = C33353 * C939;
    const double C36373 = C33353 * C1164;
    const double C36369 = C33353 * C1159;
    const double C36367 = C33353 * C1161;
    const double C36363 = C33353 * C1165;
    const double C36357 = C33353 * C328;
    const double C36353 = C33353 * C312;
    const double C36349 = C33353 * C327;
    const double C36345 = C33353 * C311;
    const double C37049 = C33353 * C1625;
    const double C37045 = C33353 * C1620;
    const double C37043 = C33353 * C937;
    const double C37039 = C33353 * C947;
    const double C37035 = C33353 * C1622;
    const double C37031 = C33353 * C1626;
    const double C37481 = C33353 * C2725;
    const double C37473 = C33353 * C1279;
    const double C37469 = C33353 * C1275;
    const double C41173 = C33353 * C1278;
    const double C354 = C50778 * C330;
    const double C11013 = C50921 * C330;
    const double C33591 = C33353 * C330;
    const double C163 = C50778 * C135;
    const double C10805 = C50921 * C135;
    const double C33383 = C33353 * C135;
    const double C338 = C50778 * C305;
    const double C11375 = C50921 * C305;
    const double C33953 = C33353 * C305;
    const double C352 = C50778 * C316;
    const double C11009 = C50921 * C316;
    const double C33587 = C33353 * C316;
    const double C527 = C50778 * C494;
    const double C5246 = C5213 * C494;
    const double C10801 = C50842 * C494;
    const double C11538 = C50921 * C494;
    const double C33379 = C50842 * C494;
    const double C34116 = C33353 * C494;
    const double C541 = C50778 * C505;
    const double C5238 = C5214 * C505;
    const double C5962 = C5213 * C505;
    const double C11203 = C50921 * C505;
    const double C11183 = C50842 * C505;
    const double C33781 = C33353 * C505;
    const double C33761 = C50842 * C505;
    const double C44283 = C44259 * C505;
    const double C958 = C50778 * C941;
    const double C5798 = C5213 * C941;
    const double C10989 = C50842 * C941;
    const double C11755 = C50921 * C941;
    const double C33567 = C50842 * C941;
    const double C34333 = C33353 * C941;
    const double C2550 = C50778 * C1157;
    const double C2520 =
        (3 * (C49976 + ae * C50010 + C49846 * C50014) +
         ae * (2 * C50010 + C49846 * C50015) +
         C49846 *
             (2 * C50014 + ae * C50015 +
              C49846 * (C49874 + ae * C49846 * C49915 +
                        C49846 * (ae * C49915 + C49846 * C49854 * C49879)))) /
        C49724;
    const double C2740 = C50778 * C1273;
    const double C5426 = C5214 * C1273;
    const double C6178 = C5213 * C1273;
    const double C11749 = C50842 * C1273;
    const double C14085 = C50921 * C1273;
    const double C34327 = C50842 * C1273;
    const double C41169 = C33353 * C1273;
    const double C44471 = C44259 * C1273;
    const double C3554 = C50778 * C2519;
    const double C31715 = C50921 * C2519;
    const double C37315 = C33353 * C2519;
    const double C4220 = C50778 * C3271;
    const double C15103 = C50842 * C3271;
    const double C22837 = C5213 * C3271;
    const double C32373 = C50921 * C3271;
    const double C36361 = C50842 * C3271;
    const double C37985 = C33353 * C3271;
    const double C3552 = C50778 * C2513;
    const double C31711 = C50921 * C2513;
    const double C37311 = C33353 * C2513;
    const double C3716 = C50778 * C2719;
    const double C15963 = C50842 * C2719;
    const double C21917 = C5214 * C2719;
    const double C23503 = C5213 * C2719;
    const double C31869 = C50921 * C2719;
    const double C37033 = C50842 * C2719;
    const double C37477 = C33353 * C2719;
    const double C47237 = C44259 * C2719;
    const double C4218 = C50778 * C3265;
    const double C15099 = C50842 * C3265;
    const double C22831 = C5213 * C3265;
    const double C32369 = C50921 * C3265;
    const double C36365 = C50842 * C3265;
    const double C37981 = C33353 * C3265;
    const double C50157 = C50150 + C50151;
    const double C50069 = C50066 + C50067;
    const double C50472 = C49887 + C50468;
    const double C543 = C50778 * C519;
    const double C5232 = C5214 * C519;
    const double C5968 = C5213 * C519;
    const double C11207 = C50921 * C519;
    const double C11179 = C50842 * C519;
    const double C33785 = C33353 * C519;
    const double C33757 = C50842 * C519;
    const double C44277 = C44259 * C519;
    const double C960 = C50778 * C949;
    const double C5804 = C5213 * C949;
    const double C10985 = C50842 * C949;
    const double C11759 = C50921 * C949;
    const double C33563 = C50842 * C949;
    const double C34337 = C33353 * C949;
    const double C160 = C117 * C134;
    const double C10808 = C10777 * C134;
    const double C33386 = C33355 * C134;
    const double C335 = C117 * C304;
    const double C11378 = C10777 * C304;
    const double C33956 = C33355 * C304;
    const double C353 = C117 * C317;
    const double C11012 = C10777 * C317;
    const double C33590 = C33355 * C317;
    const double C524 = C117 * C493;
    const double C5251 = C5216 * C493;
    const double C10796 = C10778 * C493;
    const double C11541 = C10777 * C493;
    const double C33374 = C33356 * C493;
    const double C34119 = C33355 * C493;
    const double C542 = C117 * C506;
    const double C5231 = C5217 * C506;
    const double C5967 = C5216 * C506;
    const double C11206 = C10777 * C506;
    const double C11178 = C10778 * C506;
    const double C33784 = C33355 * C506;
    const double C33756 = C33356 * C506;
    const double C959 = C117 * C942;
    const double C5803 = C5216 * C942;
    const double C10984 = C10778 * C942;
    const double C11758 = C10777 * C942;
    const double C33562 = C33356 * C942;
    const double C34336 = C33355 * C942;
    const double C5969 = C5217 * C1901;
    const double C11208 = C10778 * C1901;
    const double C33786 = C33356 * C1901;
    const double C3272 =
        (2 * (ae * (C49847 * C49904 + C49990 * ae) + C49846 * C50036) +
         ae * (C49847 * C50015 + (C49990 + C49979 * C50005) * ae) +
         C49846 *
             (C50036 + ae * (C49847 * C49846 * C49915 + C50026 * ae) +
              C49846 * (ae * (C49847 * C49915 + C49979 * ae) +
                        C49846 * (ae * C49954 + C49847 * C49854 * C49879)))) /
        C49724;
    const double C2722 =
        (C49936 + C49846 * C50361 + C50329 * ae +
         (C49943 + C49846 * (C49846 * C49954 + C50099) + C50026 * ae) *
             C50112) /
        C49722;
    const double C2747 = C2729 + C2730;
    const double C5453 = C5439 + C5440;
    const double C11027 = C11006 + C11007;
    const double C14770 = C14760 + C14761;
    const double C33605 = C33584 + C33585;
    const double C5647 = C5633 + C5634;
    const double C5637 = C5613 + C5614;
    const double C11221 = C11200 + C11201;
    const double C33799 = C33778 + C33779;
    const double C50110 = C50109 + C50107;
    const double C50212 = C50209 + C50210;
    const double C50096 = C50094 + C50095;
    const double C50401 = C49928 + C50400;
    const double C2746 = C50778 * C2726;
    const double C5442 = C5214 * C2726;
    const double C14763 = C50842 * C2726;
    const double C37051 = C50842 * C2726;
    const double C44487 = C44259 * C2726;
    const double C50448 = C50445 + C50384;
    const double C4619 =
        (2 * (C49847 * C50010 + C50329 * ae) +
         C49847 * (C50010 + C49847 * (C49847 * C50042 + C50384) +
                   C49847 * C50026 * ae) +
         (C50329 + C50026 * C50112) * ae) /
        C49722;
    const double C6179 = C5217 * C4613;
    const double C14086 = C10778 * C4613;
    const double C41170 = C33356 * C4613;
    const double C50102 = ae * C50101;
    const double C50459 = C49847 * C50101;
    const double C50389 = C49846 * C50387;
    const double C4618 =
        (2 * C49847 * C50361 + C49847 * (C50361 + C50387 * C50112)) / C49722;
    const double C6584 =
        (3 * (C50361 + C50387 * C50112) +
         C49847 *
             (2 * C49847 * C50387 +
              C49847 * (C50387 + (C49846 * C50076 + C50075 * ae) * C50112))) /
        C49722;
    const double C2516 =
        (3 * (C49936 + C49846 * C50361 + C50329 * ae) +
         C49846 * (2 * C50361 +
                   C49846 * (C49943 + C49846 * (C49846 * C49954 + C50099) +
                             C50026 * ae) +
                   C50362 * ae) +
         (2 * C50329 + C49846 * C50362) * ae) /
        C49722;
    const double C2721 =
        (C49897 + C49904 * C50005 + C49847 * (C49847 * C50015 + C50362 * ae) +
         C49847 * C50362 * ae) /
        C49722;
    const double C3267 = (C49847 * (2 * C50010 + C49846 * C50015) +
                          (2 * C50329 + C49846 * C50362) * ae) /
                         C49722;
    const double C3268 =
        (C49847 * (2 * C50361 +
                   C49846 * (C49943 + C49846 * (C49846 * C49954 + C50099) +
                             C50026 * ae) +
                   C50362 * ae)) /
        C49722;
    const double C2511 = 3 * (C50262 + C49990 * C50005) +
                         C49846 * (2 * C50329 + C49846 * C50362);
    const double C2717 = C50262 + C49990 * C50005 + C50362 * C50112;
    const double C3263 = C49847 * (2 * C50329 + C49846 * C50362);
    const double C4612 =
        2 * C49847 * C50362 + C49847 * (C50362 + C50083 * C50112);
    const double C5605 =
        (3 * (C49897 + C49847 * C50431 + C50429 * ae) +
         C49847 *
             (2 * C50431 + C49847 * (C49904 + C49847 * C50101 + C50130 * ae) +
              C50432 * ae) +
         (2 * C50429 + C49847 * C50432) * ae) /
        C49722;
    const double C5601 = 3 * (C50262 + C49990 * C50112) +
                         C49847 * (2 * C50429 + C49847 * C50432);
    const double C50271 = C50269 + C50270;
    const double C1271 =
        (C49846 * C49902 + C49847 * (C49847 * C50017 + C50326 * ae) +
         C49847 * C50326 * ae) /
        C49722;
    const double C1617 =
        (C49847 *
         (C49941 + C49846 * (C49846 * C49948 + C49988 * ae) + C50326 * ae)) /
        C49722;
    const double C6172 =
        (2 * (C49847 * C50017 + C50326 * ae) +
         C49847 * (C50017 + C49847 * (C49847 * C49846 * C49920 + C50028 * ae) +
                   C49847 * C50028 * ae) +
         (C50326 + C50028 * C50112) * ae) /
        C49722;
    const double C1265 = C49846 * C50266 + C50326 * C50112;
    const double C6170 =
        2 * C49847 * C50326 + C49847 * (C50326 + C50028 * C50112);
    const double C50367 = C50364 + C50365;
    const double C50439 = C50436 + C50365;
    const double C2551 = C117 * C1156;
    const double C5805 = C5217 * C1270;
    const double C8412 = C117 * C1270;
    const double C11760 = C10778 * C1270;
    const double C34338 = C33356 * C1270;
    const double C3062 = C50778 * C1618;
    const double C11011 = C50842 * C1618;
    const double C33589 = C50842 * C1618;
    const double C5964 = C5214 * C1902;
    const double C11205 = C50842 * C1902;
    const double C33783 = C50842 * C1902;
    const double C44997 = C44259 * C1902;
    const double C2549 = C117 * C1151;
    const double C3061 = C117 * C1612;
    const double C11010 = C10778 * C1612;
    const double C33588 = C33356 * C1612;
    const double C5963 = C5217 * C1896;
    const double C11204 = C10778 * C1896;
    const double C33782 = C33356 * C1896;
    const double C50204 = ae * C50202;
    const double C50507 = C49847 * C50202;
    const double C6587 =
        (3 * (C50002 + C49847 * C50455 + C50453 * ae) +
         C49847 *
             (2 * C50455 + C49847 * (C50058 + C49847 * C50202 + C50215 * ae) +
              C50456 * ae) +
         (2 * C50453 + C49847 * C50456) * ae) /
        C49722;
    const double C6583 = 3 * (C50332 + C50024 * C50112) +
                         C49847 * (2 * C50453 + C49847 * C50456);
    const double C50399 = C50396 + C50397;
    const double C50501 = C50498 + C50478;
    const double C23505 = C5214 * C4621;
    const double C31871 = C50842 * C4621;
    const double C37479 = C50842 * C4621;
    const double C48821 = C44259 * C4621;
    const double C23504 = C5217 * C4614;
    const double C31870 = C10778 * C4614;
    const double C37478 = C33356 * C4614;
    const double C50473 = C50470 + C50471;
    const double C50190 = C49900 + C50186;
    const double C50484 = C49939 + C50483;
    const double C50505 = C50398 + C50504;
    const double C49883 = C49877 + C49882;
    const double C50021 = C50018 + C50019;
    const double C50040 = C50038 + C50039;
    const double C2552 = C50778 * C1163;
    const double C5806 = C5214 * C1277;
    const double C8413 = C50778 * C1277;
    const double C11761 = C50842 * C1277;
    const double C34339 = C50842 * C1277;
    const double C44839 = C44259 * C1277;
    const double C3064 = C50778 * C1624;
    const double C11015 = C50842 * C1624;
    const double C33593 = C50842 * C1624;
    const double C5970 = C5214 * C1908;
    const double C11209 = C50842 * C1908;
    const double C33787 = C50842 * C1908;
    const double C45003 = C44259 * C1908;
    const double C50053 = C49846 * C50051;
    const double C50082 = C49847 * C50078;
    const double C50100 = C49846 * C50078;
    const double C50165 = C50162 + C50163;
    const double C50191 = C50187 + C50188;
    const double C50203 = C50200 + C50201;
    const double C49922 = C49917 + C49921;
    const double C50022 = C49909 + C50020;
    const double C50054 = C49846 * C50052;
    const double C4617 =
        (2 * (C49847 * C50015 + C50362 * ae) +
         C49847 * (C50015 + C49847 * (C49847 * C50052 + C50083 * ae) +
                   C49847 * C50083 * ae) +
         (C50362 + C50083 * C50112) * ae) /
        C49722;
    const double C50166 = C50160 + C50164;
    const double C49961 = C49956 + C49960;
    const double C50127 = C49948 + C50126;
    const double C50143 = C49847 * C50134;
    const double C50228 = C50225 + C50226;
    const double C180 = C170 * C118;
    const double C2358 = C170 * C2343;
    const double C8070 = C170 * C8063;
    const double C17245 = C170 * C17238;
    const double C376 = C364 * C118;
    const double C2349 = C364 * C2344;
    const double C2538 = C364 * C2343;
    const double C8068 = C364 * C8064;
    const double C8241 = C364 * C8063;
    const double C17243 = C364 * C17239;
    const double C17416 = C364 * C17238;
    const double C565 = C553 * C118;
    const double C2736 = C553 * C2343;
    const double C8403 = C553 * C8063;
    const double C17578 = C553 * C17238;
    const double C181 = C171 * C50763;
    const double C2357 = C171 * C2338;
    const double C8071 = C171 * C50920;
    const double C17246 = C171 * C17233;
    const double C183 = C173 * C50763;
    const double C2360 = C173 * C2338;
    const double C8076 = C173 * C50920;
    const double C17251 = C173 * C17233;
    const double C375 = C363 * C50763;
    const double C2350 = C363 * C2339;
    const double C2537 = C363 * C2338;
    const double C8069 = C363 * C50814;
    const double C8240 = C363 * C50920;
    const double C17244 = C363 * C50814;
    const double C17415 = C363 * C17233;
    const double C562 = C550 * C50763;
    const double C3058 = C550 * C2338;
    const double C8398 = C550 * C50920;
    const double C17573 = C550 * C17233;
    const double C564 = C552 * C50763;
    const double C2735 = C552 * C2338;
    const double C8402 = C552 * C50920;
    const double C17577 = C552 * C17233;
    const double C567 = C555 * C50763;
    const double C2738 = C555 * C2338;
    const double C8405 = C555 * C50920;
    const double C17580 = C555 * C17233;
    const double C366 = C349 + C350;
    const double C11026 = C11004 + C11005;
    const double C966 = C955 + C956;
    const double C5444 = C5421 + C5422;
    const double C11020 = C10992 + C10993;
    const double C11764 = C11750 + C11751;
    const double C33598 = C33570 + C33571;
    const double C2557 = C2531 + C2532;
    const double C13888 = C13874 + C13875;
    const double C2750 = C2741 + C2742;
    const double C5443 = C5419 + C5420;
    const double C6191 = C6183 + C6184;
    const double C11765 = C11752 + C11753;
    const double C14094 = C14088 + C14089;
    const double C34343 = C34330 + C34331;
    const double C365 = C347 + C348;
    const double C11024 = C11000 + C11001;
    const double C554 = C536 + C537;
    const double C5257 = C5223 + C5224;
    const double C5641 = C5621 + C5622;
    const double C11218 = C11194 + C11195;
    const double C11216 = C11190 + C11191;
    const double C33794 = C33768 + C33769;
    const double C965 = C953 + C954;
    const double C5447 = C5427 + C5428;
    const double C11022 = C10996 + C10997;
    const double C11762 = C11746 + C11747;
    const double C33600 = C33574 + C33575;
    const double C2558 = C2533 + C2534;
    const double C13886 = C13870 + C13871;
    const double C2748 = C2731 + C2732;
    const double C5450 = C5433 + C5434;
    const double C11025 = C11002 + C11003;
    const double C14768 = C14756 + C14757;
    const double C33603 = C33580 + C33581;
    const double C5644 = C5627 + C5628;
    const double C5640 = C5619 + C5620;
    const double C11219 = C11196 + C11197;
    const double C33797 = C33774 + C33775;
    const double C3291 = C3275 + C3276;
    const double C13882 = C13860 + C13861;
    const double C15970 = C15964 + C15965;
    const double C21929 = C21912 + C21913;
    const double C36385 = C36358 + C36359;
    const double C3719 = C3711 + C3712;
    const double C14766 = C14750 + C14751;
    const double C15310 = C15302 + C15303;
    const double C21924 = C21902 + C21903;
    const double C22582 = C22574 + C22575;
    const double C37058 = C37040 + C37041;
    const double C15311 = C15304 + C15305;
    const double C22581 = C22572 + C22573;
    const double C23009 = C22998 + C22999;
    const double C37485 = C37470 + C37471;
    const double C3553 = C117 * C2514;
    const double C31714 = C10777 * C2514;
    const double C37314 = C33355 * C2514;
    const double C3717 = C117 * C2720;
    const double C15966 = C10778 * C2720;
    const double C21910 = C5217 * C2720;
    const double C23508 = C5216 * C2720;
    const double C31872 = C10777 * C2720;
    const double C37028 = C33356 * C2720;
    const double C37480 = C33355 * C2720;
    const double C4219 = C117 * C3266;
    const double C15102 = C10778 * C3266;
    const double C22836 = C5216 * C3266;
    const double C32372 = C10777 * C3266;
    const double C36360 = C33356 * C3266;
    const double C37984 = C33355 * C3266;
    const double C15308 = C10778 * C4622;
    const double C22566 = C5217 * C4622;
    const double C23004 = C5216 * C4622;
    const double C37474 = C33356 * C4622;
    const double C23006 = C5217 * C6586;
    const double C373 = C361 * C50763;
    const double C2355 = C361 * C2339;
    const double C2906 = C361 * C2338;
    const double C8073 = C361 * C50814;
    const double C8236 = C361 * C50920;
    const double C17248 = C361 * C50814;
    const double C17411 = C361 * C17233;
    const double C182 = C172 * C118;
    const double C2359 = C172 * C2343;
    const double C8077 = C172 * C8063;
    const double C17252 = C172 * C17238;
    const double C374 = C362 * C118;
    const double C2356 = C362 * C2344;
    const double C2905 = C362 * C2343;
    const double C8072 = C362 * C8064;
    const double C8237 = C362 * C8063;
    const double C17247 = C362 * C17239;
    const double C17412 = C362 * C17238;
    const double C563 = C551 * C118;
    const double C3057 = C551 * C2343;
    const double C8399 = C551 * C8063;
    const double C17574 = C551 * C17238;
    const double C136 = (4 * (2 * C49897 + C49854 * C49902) +
                         C49854 * (3 * C49902 + C49854 * C49911)) /
                        C49722;
    const double C318 =
        (2 * C49897 + C49854 * C49902 + C49911 * C50005) / C49722;
    const double C320 = (C49846 * (3 * C49902 + C49854 * C49911)) / C49722;
    const double C2546 = C50778 * C2515;
    const double C3547 = (4 * (2 * C50002 + C49846 * C50008) +
                          C49846 * (3 * C50008 + C49846 * C50070)) /
                         C49722;
    const double C137 = (4 * (2 * C49936 + C49854 * C49941) +
                         C49854 * (3 * C49941 + C49854 * C49950)) /
                        C49722;
    const double C508 =
        (2 * C49936 + C49854 * C49941 + C49950 * C50112) / C49722;
    const double C510 = (C49847 * (3 * C49941 + C49854 * C49950)) / C49722;
    const double C5635 = C5217 * C5606;
    const double C7470 = (4 * (2 * C50117 + C49847 * C50119) +
                          C49847 * (3 * C50119 + C49847 * C50148)) /
                         C49722;
    const double C50276 = C49854 * C49985;
    const double C50323 = C49846 * C49985;
    const double C2512 = 3 * (C50266 + C49988 * C50005) +
                         C49846 * (2 * C50326 + C49846 * C50368);
    const double C2718 = C50266 + C49988 * C50005 + C50368 * C50112;
    const double C3264 = C49847 * (2 * C50326 + C49846 * C50368);
    const double C5602 = 3 * (C50266 + C49988 * C50112) +
                         C49847 * (2 * C50437 + C49847 * C50440);
    const double C6582 = 3 * (C50329 + C50026 * C50112) +
                         C49847 * (2 * C50446 + C49847 * C50449);
    const double C50388 = C50385 + C50386;
    const double C50464 = C50461 + C50462;
    const double C50512 = C50509 + C50510;
    const double C50480 = C49846 * C50192;
    const double C22991 = 3 * (C50355 + C50093 * C50112) +
                          C49847 * (2 * C50499 + C49847 * C50502);
    const double C50520 = C49847 * C50227;
    const double C50948 = C50890 - C50930;
    const double C50949 = C50894 - C50932;
    const double C50950 = C50897 - C50933;
    const double C50951 = C50901 - C50935;
    const double C50952 = C50904 - C50937;
    const double C50953 = C50911 - C50938;
    const double C50954 = C50906 - C50940;
    const double C50955 = C50915 - C50941;
    const double C49780 = C50763 - C49777;
    const double C24517 = C173 * C50956;
    const double C24514 = C171 * C50956;
    const double C24505 = C169 * C50956;
    const double C24672 = C363 * C50956;
    const double C24833 = C555 * C50956;
    const double C24830 = C552 * C50956;
    const double C24985 = C361 * C50956;
    const double C25137 = C550 * C50956;
    const double C19912 =
        (C50956 * C50809) / C49722 + (C50920 - C50942) / C49766;
    const double C24512 = C361 * C50957;
    const double C24507 = C363 * C50957;
    const double C19913 =
        (C50957 * C50809) / C49722 + (2 * C50814 + C50956) / C49766;
    const double C19914 = (C50809 * C50814) / C49726 + C50957 / C49766;
    const double C44282 = C44262 * C489;
    const double C44276 = C44262 * C506;
    const double C44274 = C44262 * C504;
    const double C44268 = C44262 * C488;
    const double C44470 = C44262 * C1266;
    const double C44464 = C44262 * C1272;
    const double C44668 = C44262 * C5606;
    const double C44652 = C44262 * C1897;
    const double C44646 = C44262 * C1903;
    const double C44838 = C44262 * C1270;
    const double C45002 = C44262 * C1901;
    const double C44996 = C44262 * C1896;
    const double C45208 = C44262 * C4613;
    const double C47236 = C44262 * C2716;
    const double C47230 = C44262 * C2720;
    const double C47228 = C44262 * C1274;
    const double C47222 = C44262 * C1267;
    const double C47892 = C44262 * C4615;
    const double C47886 = C44262 * C4622;
    const double C48322 = C44262 * C6586;
    const double C48820 = C44262 * C4614;
    const double C49822 = C50778 - C49819;
    const double C44295 = C50958 * C143;
    const double C44289 = C50958 * C132;
    const double C44287 = C50958 * C130;
    const double C44281 = C50958 * C142;
    const double C44271 = C50958 * C141;
    const double C44265 = C50958 * C128;
    const double C44483 = C50958 * C329;
    const double C44477 = C50958 * C314;
    const double C44475 = C50958 * C309;
    const double C44469 = C50958 * C326;
    const double C44665 = C50958 * C518;
    const double C44659 = C50958 * C503;
    const double C44657 = C50958 * C498;
    const double C44651 = C50958 * C515;
    const double C44835 = C50958 * C325;
    const double C44829 = C50958 * C307;
    const double C44999 = C50958 * C514;
    const double C44993 = C50958 * C496;
    const double C45211 = C50958 * C948;
    const double C45205 = C50958 * C939;
    const double C47241 = C50958 * C312;
    const double C47235 = C50958 * C328;
    const double C47225 = C50958 * C327;
    const double C47219 = C50958 * C311;
    const double C47897 = C50958 * C937;
    const double C47891 = C50958 * C947;
    const double C48155 = C50958 * C1165;
    const double C48149 = C50958 * C1161;
    const double C48319 = C50958 * C1279;
    const double C48313 = C50958 * C1275;
    const double C48823 = C50958 * C1626;
    const double C48817 = C50958 * C1622;
    const double C38933 =
        (C50958 * C50837) / C49722 + (C50921 - C50945) / C49766;
    const double C10829 = C10818 + C10819;
    const double C10828 = C10816 + C10817;
    const double C30830 = C13885 + C13884;
    const double C5270 = C5249 + C5250;
    const double C5267 = C5243 + C5244;
    const double C5266 = C5241 + C5242;
    const double C5263 = C5235 + C5236;
    const double C5258 = C5225 + C5226;
    const double C5255 = C5219 + C5220;
    const double C5452 = C5437 + C5438;
    const double C5449 = C5431 + C5432;
    const double C5448 = C5429 + C5430;
    const double C5445 = C5423 + C5424;
    const double C5646 = C5631 + C5632;
    const double C5643 = C5625 + C5626;
    const double C5642 = C5623 + C5624;
    const double C5639 = C5617 + C5618;
    const double C5810 = C5801 + C5802;
    const double C5807 = C5795 + C5796;
    const double C5974 = C5965 + C5966;
    const double C5971 = C5959 + C5960;
    const double C6190 = C6181 + C6182;
    const double C6187 = C6175 + C6176;
    const double C21933 = C21920 + C21921;
    const double C21930 = C21914 + C21915;
    const double C21925 = C21904 + C21905;
    const double C21922 = C21898 + C21899;
    const double C22583 = C22576 + C22577;
    const double C22580 = C22570 + C22571;
    const double C22843 = C22834 + C22835;
    const double C22840 = C22828 + C22829;
    const double C23011 = C23002 + C23003;
    const double C23008 = C22996 + C22997;
    const double C23515 = C23506 + C23507;
    const double C23512 = C23500 + C23501;
    const double C44297 = C50959 * C513;
    const double C44291 = C50959 * C494;
    const double C44285 = C50959 * C496;
    const double C44279 = C50959 * C514;
    const double C44273 = C50959 * C515;
    const double C44267 = C50959 * C498;
    const double C44485 = C50959 * C1625;
    const double C44479 = C50959 * C1620;
    const double C44473 = C50959 * C939;
    const double C44467 = C50959 * C948;
    const double C44667 = C50959 * C1909;
    const double C44661 = C50959 * C1904;
    const double C44655 = C50959 * C503;
    const double C44649 = C50959 * C518;
    const double C44837 = C50959 * C949;
    const double C44831 = C50959 * C941;
    const double C45001 = C50959 * C519;
    const double C44995 = C50959 * C505;
    const double C45213 = C50959 * C1278;
    const double C45207 = C50959 * C1273;
    const double C47239 = C50959 * C1622;
    const double C47233 = C50959 * C1626;
    const double C47227 = C50959 * C947;
    const double C47221 = C50959 * C937;
    const double C47895 = C50959 * C1275;
    const double C47889 = C50959 * C1279;
    const double C48157 = C50959 * C3271;
    const double C48151 = C50959 * C3265;
    const double C48315 = C50959 * C4623;
    const double C48825 = C50959 * C2725;
    const double C48819 = C50959 * C2719;
    const double C38934 =
        (C50959 * C50837) / C49722 + (2 * C50842 + C50958) / C49766;
    const double C38935 = (C50837 * C50842) / C49726 + C50959 / C49766;
    const double C33401 = C33380 + C33381;
    const double C33399 = C33376 + C33377;
    const double C33396 = C33370 + C33371;
    const double C33394 = C33366 + C33367;
    const double C33392 = C33362 + C33363;
    const double C33390 = C33358 + C33359;
    const double C33604 = C33582 + C33583;
    const double C33602 = C33578 + C33579;
    const double C33601 = C33576 + C33577;
    const double C33599 = C33572 + C33573;
    const double C33597 = C33568 + C33569;
    const double C33595 = C33564 + C33565;
    const double C33798 = C33776 + C33777;
    const double C33796 = C33772 + C33773;
    const double C33795 = C33770 + C33771;
    const double C33793 = C33766 + C33767;
    const double C33791 = C33762 + C33763;
    const double C33789 = C33758 + C33759;
    const double C34342 = C34328 + C34329;
    const double C34340 = C34324 + C34325;
    const double C36392 = C36372 + C36373;
    const double C36390 = C36368 + C36369;
    const double C36389 = C36366 + C36367;
    const double C36387 = C36362 + C36363;
    const double C36384 = C36356 + C36357;
    const double C36382 = C36352 + C36353;
    const double C36380 = C36348 + C36349;
    const double C36378 = C36344 + C36345;
    const double C37062 = C37048 + C37049;
    const double C37060 = C37044 + C37045;
    const double C37059 = C37042 + C37043;
    const double C37057 = C37038 + C37039;
    const double C37055 = C37034 + C37035;
    const double C37053 = C37030 + C37031;
    const double C37486 = C37472 + C37473;
    const double C37484 = C37468 + C37469;
    const double C41178 = C41172 + C41173;
    const double C175 = C162 + C163;
    const double C10824 = C10804 + C10805;
    const double C33402 = C33382 + C33383;
    const double C360 = C337 + C338;
    const double C11384 = C11374 + C11375;
    const double C33962 = C33952 + C33953;
    const double C367 = C351 + C352;
    const double C11028 = C11008 + C11009;
    const double C33606 = C33586 + C33587;
    const double C549 = C526 + C527;
    const double C5268 = C5245 + C5246;
    const double C10822 = C10800 + C10801;
    const double C11547 = C11537 + C11538;
    const double C33400 = C33378 + C33379;
    const double C34125 = C34115 + C34116;
    const double C556 = C540 + C541;
    const double C5264 = C5237 + C5238;
    const double C5972 = C5961 + C5962;
    const double C11222 = C11202 + C11203;
    const double C11212 = C11182 + C11183;
    const double C33800 = C33780 + C33781;
    const double C33790 = C33760 + C33761;
    const double C967 = C957 + C958;
    const double C5808 = C5797 + C5798;
    const double C11018 = C10988 + C10989;
    const double C11766 = C11754 + C11755;
    const double C33596 = C33566 + C33567;
    const double C34344 = C34332 + C34333;
    const double C2548 = C50778 * C2520;
    const double C2749 = C2739 + C2740;
    const double C5446 = C5425 + C5426;
    const double C6188 = C6177 + C6178;
    const double C11763 = C11748 + C11749;
    const double C14092 = C14084 + C14085;
    const double C34341 = C34326 + C34327;
    const double C41176 = C41168 + C41169;
    const double C3555 = C3551 + C3552;
    const double C31718 = C31710 + C31711;
    const double C37318 = C37310 + C37311;
    const double C3721 = C3715 + C3716;
    const double C15969 = C15962 + C15963;
    const double C21931 = C21916 + C21917;
    const double C23513 = C23502 + C23503;
    const double C31876 = C31868 + C31869;
    const double C37054 = C37032 + C37033;
    const double C37488 = C37476 + C37477;
    const double C4221 = C4217 + C4218;
    const double C15105 = C15098 + C15099;
    const double C22841 = C22830 + C22831;
    const double C32376 = C32368 + C32369;
    const double C36388 = C36364 + C36365;
    const double C37988 = C37980 + C37981;
    const double C3549 =
        (4 * (2 * C50006 + ae * C50008 + C49846 * C50069) +
         ae * (3 * C50008 + C49846 * C50070) +
         C49846 *
             (3 * C50069 + ae * C50070 +
              C49846 * (2 * C50063 + ae * C50065 +
                        C49846 * (C49870 + ae * C49846 * C49907 +
                                  C49846 * (ae * C49907 + C49846 * C49879))))) /
        C49724;
    const double C50474 = C50472 + C50469;
    const double C174 = C160 + C161;
    const double C10826 = C10808 + C10809;
    const double C33404 = C33386 + C33387;
    const double C359 = C335 + C336;
    const double C11386 = C11378 + C11379;
    const double C33964 = C33956 + C33957;
    const double C368 = C353 + C354;
    const double C11030 = C11012 + C11013;
    const double C33608 = C33590 + C33591;
    const double C548 = C524 + C525;
    const double C5271 = C5251 + C5252;
    const double C10820 = C10796 + C10797;
    const double C11549 = C11541 + C11542;
    const double C33398 = C33374 + C33375;
    const double C34127 = C34119 + C34120;
    const double C557 = C542 + C543;
    const double C5261 = C5231 + C5232;
    const double C5975 = C5967 + C5968;
    const double C11224 = C11206 + C11207;
    const double C11210 = C11178 + C11179;
    const double C33802 = C33784 + C33785;
    const double C33788 = C33756 + C33757;
    const double C968 = C959 + C960;
    const double C5811 = C5803 + C5804;
    const double C11016 = C10984 + C10985;
    const double C11768 = C11758 + C11759;
    const double C33594 = C33562 + C33563;
    const double C34346 = C34336 + C34337;
    const double C3290 = C50778 * C3272;
    const double C13877 = C50842 * C3272;
    const double C36375 = C50842 * C3272;
    const double C2745 = C117 * C2722;
    const double C5441 = C5217 * C2722;
    const double C14762 = C10778 * C2722;
    const double C37050 = C33356 * C2722;
    const double C44486 = C44262 * C2722;
    const double C2753 = C2747 * C2340;
    const double C3286 = C2747 * C2339;
    const double C8921 = C2747 * C50814;
    const double C18090 = C2747 * C50814;
    const double C24826 = C2747 * C24497;
    const double C25339 = C2747 * C50957;
    const double C4215 =
        (3 * (C50032 + ae * (C49847 * C50058 + C50024 * ae) + C49846 * C50110) +
         ae * (C49847 * C50070 + (2 * C50024 + C49846 * C50093) * ae) +
         C49846 *
             (2 * C50110 + ae * (C49847 * C50065 + C50093 * ae) +
              C49846 * (C50092 + ae * (C49847 * C49846 * C49907 + C50090 * ae) +
                        C49846 * (ae * (C49847 * C49907 + C49972 * ae) +
                                  C49846 * (ae * C49946 + C49847 * C49879))))) /
        C49724;
    const double C3709 =
        (2 * (ae * (C49887 + C49847 * (C49847 * C49900 + C49970 * ae) +
                    C49847 * C49970 * ae) +
              C49846 * C50096) +
         ae * (C50008 + C49847 * (C49847 * C50065 + C50093 * ae) +
               C49847 * C50093 * ae) +
         C49846 *
             (C50096 +
              ae * (C50058 + C49847 * (C49847 * C49846 * C49907 + C50090 * ae) +
                    C49847 * C50090 * ae) +
              C49846 *
                  (ae * (C49900 + C49847 * (C49847 * C49907 + C49972 * ae) +
                         C49847 * C49972 * ae) +
                   C49846 * (C49870 + ae * C49847 * C49946 +
                             C49847 * (ae * C49946 + C49847 * C49879))))) /
        C49724;
    const double C4626 =
        (2 * C50032 + ae * (C49928 + C49939 * C50112) + C49847 * C50096 +
         ae * (2 * (C49847 * C50058 + C50024 * ae) +
               C49847 *
                   (C50058 + C49847 * (C49847 * C49846 * C49907 + C50090 * ae) +
                    C49847 * C50090 * ae) +
               (C50024 + C50090 * C50112) * ae) +
         C49846 *
             (ae *
                  (2 * C50108 +
                   C49847 * (C49900 + C49847 * (C49847 * C49907 + C49972 * ae) +
                             C49847 * C49972 * ae) +
                   (C49970 + C49972 * C50112) * ae) +
              C49846 * (2 * C50092 + ae * (C49939 + C49946 * C50112) +
                        C49847 * (C49870 + ae * C49847 * C49946 +
                                  C49847 * (ae * C49946 + C49847 * C49879))))) /
        C49724;
    const double C4627 =
        (ae * (2 * (C49847 * C49887 + C49992 * ae) +
               C49847 * (C49887 + C49847 * C50108 + C49847 * C49970 * ae) +
               (C49992 + C49970 * C50112) * ae) +
         C49846 *
             (2 * C50032 + ae * (C49928 + C49939 * C50112) + C49847 * C50096)) /
        C49724;
    const double C5609 =
        (3 * (C49858 + ae * C50117 + C49847 * C50032) +
         ae * (2 * C50117 + C49847 * C50119) +
         C49847 * (2 * C50032 + ae * C50119 + C49847 * C50096)) /
        C49724;
    const double C6589 =
        (ae * (3 * (C49887 + C49847 * C50108 + C50136 * ae) +
               C49847 * (2 * C50108 +
                         C49847 * (C49900 +
                                   C49847 * (C49847 * C49907 + C49972 * ae) +
                                   C49847 * C49972 * ae) +
                         C50139 * ae) +
               (2 * C50136 + C49847 * C50139) * ae) +
         C49846 *
             (3 * C50096 + ae * (2 * C50086 + C49847 * C50140) +
              C49847 * (2 * C50092 + ae * C50140 +
                        C49847 * (C49870 + ae * C49847 * C49946 +
                                  C49847 * (ae * C49946 + C49847 * C49879))))) /
        C49724;
    const double C7473 =
        (4 * (2 * C50032 + ae * C50119 + C49847 * C50096) +
         ae * (3 * C50119 + C49847 * C50148) +
         C49847 *
             (3 * C50096 + ae * C50148 +
              C49847 * (2 * C50092 + ae * C50140 +
                        C49847 * (C49870 + ae * C49847 * C49946 +
                                  C49847 * (ae * C49946 + C49847 * C49879))))) /
        C49724;
    const double C50402 = C50401 + C50395;
    const double C6585 =
        (3 * (C50010 + C49847 * C50448 + C50446 * ae) +
         C49847 * (2 * C50448 +
                   C49847 * (C50042 +
                             C49847 * (C49847 * C49846 * C50045 + C50080 * ae) +
                             C49847 * C50080 * ae) +
                   C50449 * ae) +
         (2 * C50446 + C49847 * C50449) * ae) /
        C49722;
    const double C6180 = C5214 * C4619;
    const double C14087 = C50842 * C4619;
    const double C41171 = C50842 * C4619;
    const double C45209 = C44259 * C4619;
    const double C50463 = C49904 + C50459;
    const double C50390 = C49943 + C50389;
    const double C6185 = C5217 * C4618;
    const double C14090 = C10778 * C4618;
    const double C41174 = C33356 * C4618;
    const double C45214 = C44262 * C4618;
    const double C2547 = C117 * C2516;
    const double C2744 = C50778 * C2721;
    const double C5436 = C5214 * C2721;
    const double C14759 = C50842 * C2721;
    const double C37047 = C50842 * C2721;
    const double C44481 = C44259 * C2721;
    const double C3288 = C50778 * C3267;
    const double C13873 = C50842 * C3267;
    const double C36371 = C50842 * C3267;
    const double C3289 = C117 * C3268;
    const double C13876 = C10778 * C3268;
    const double C36374 = C33356 * C3268;
    const double C2545 = C117 * C2511;
    const double C2743 = C117 * C2717;
    const double C5435 = C5217 * C2717;
    const double C14758 = C10778 * C2717;
    const double C37046 = C33356 * C2717;
    const double C44480 = C44262 * C2717;
    const double C3287 = C117 * C3263;
    const double C13872 = C10778 * C3263;
    const double C36370 = C33356 * C3263;
    const double C5630 = C5214 * C5605;
    const double C44663 = C44259 * C5605;
    const double C5629 = C5217 * C5601;
    const double C44662 = C44262 * C5601;
    const double C319 =
        (2 * C49936 + C49854 * C49941 +
         C49846 * (C49846 * C49950 + C50271 * ae) + C49846 * C50271 * ae) /
        C49722;
    const double C321 = (C49846 * (3 * C49941 + C49854 * C49950) +
                         (3 * C50266 + C49854 * C50271) * ae) /
                        C49722;
    const double C507 =
        (2 * C49897 + C49854 * C49902 +
         C49847 * (C49847 * C49911 + C50271 * ae) + C49847 * C50271 * ae) /
        C49722;
    const double C509 = (C49847 * (3 * C49902 + C49854 * C49911) +
                         (3 * C50266 + C49854 * C50271) * ae) /
                        C49722;
    const double C943 =
        (C49847 * C49846 * C49911 + C49846 * C50271 * ae) / C49722;
    const double C944 = (C49847 * (C49846 * C49950 + C50271 * ae)) / C49722;
    const double C124 = 4 * (2 * C50262 + C49854 * C50266) +
                        C49854 * (3 * C50266 + C49854 * C50271);
    const double C301 = 2 * C50262 + C49854 * C50266 + C50271 * C50005;
    const double C302 = C49846 * (3 * C50266 + C49854 * C50271);
    const double C490 = 2 * C50262 + C49854 * C50266 + C50271 * C50112;
    const double C491 = C49847 * (3 * C50266 + C49854 * C50271);
    const double C935 = C49847 * C49846 * C50271;
    const double C1150 =
        2 * C49846 * C50271 + C49846 * (C50271 + C49985 * C50005);
    const double C1611 = C49847 * (C50271 + C49985 * C50005);
    const double C1895 =
        2 * C49847 * C50271 + C49847 * (C50271 + C49985 * C50112);
    const double C5800 = C5214 * C1271;
    const double C8411 = C50778 * C1271;
    const double C11757 = C50842 * C1271;
    const double C34335 = C50842 * C1271;
    const double C44833 = C44259 * C1271;
    const double C3063 = C117 * C1617;
    const double C11014 = C10778 * C1617;
    const double C33592 = C33356 * C1617;
    const double C5799 = C5217 * C1265;
    const double C8410 = C117 * C1265;
    const double C11756 = C10778 * C1265;
    const double C34334 = C33356 * C1265;
    const double C44832 = C44262 * C1265;
    const double C2517 =
        (3 * (C49941 + C49846 * C50367 + C50326 * ae) +
         C49846 * (2 * C50367 +
                   C49846 * (C49948 + C49846 * (C49846 * C49959 + C49983 * ae) +
                             C50028 * ae) +
                   C50368 * ae) +
         (2 * C50326 + C49846 * C50368) * ae) /
        C49722;
    const double C2723 =
        (C49941 + C49846 * C50367 + C50326 * ae +
         (C49948 + C49846 * (C49846 * C49959 + C49983 * ae) + C50028 * ae) *
             C50112) /
        C49722;
    const double C3269 =
        (C49847 * (2 * C50367 +
                   C49846 * (C49948 + C49846 * (C49846 * C49959 + C49983 * ae) +
                             C50028 * ae) +
                   C50368 * ae)) /
        C49722;
    const double C6171 =
        (2 * C49847 * C50367 +
         C49847 * (C50367 + (C49846 * C49959 + C49983 * ae) * C50112)) /
        C49722;
    const double C5608 =
        (3 * (C49902 + C49847 * C50439 + C50437 * ae) +
         C49847 * (2 * C50439 +
                   C49847 * (C49909 + C49847 * (C49847 * C49920 + C49983 * ae) +
                             C49847 * C49983 * ae) +
                   C50440 * ae) +
         (2 * C50437 + C49847 * C50440) * ae) /
        C49722;
    const double C2563 = C2549 + C2550;
    const double C3065 = C3061 + C3062;
    const double C11029 = C11010 + C11011;
    const double C33607 = C33588 + C33589;
    const double C5973 = C5963 + C5964;
    const double C11223 = C11204 + C11205;
    const double C33801 = C33782 + C33783;
    const double C50206 = C50092 + C50204;
    const double C50511 = C50058 + C50507;
    const double C23001 = C5214 * C6587;
    const double C48317 = C44259 * C6587;
    const double C23000 = C5217 * C6583;
    const double C48316 = C44262 * C6583;
    const double C3707 =
        (2 * C50002 + C49846 * C50008 +
         C49847 * (C49847 * C50070 + C50399 * ae) + C49847 * C50399 * ae) /
        C49722;
    const double C4213 = (C49847 * (3 * C50008 + C49846 * C50070) +
                          (3 * C50355 + C49846 * C50399) * ae) /
                         C49722;
    const double C3543 = 4 * (2 * C50332 + C49846 * C50355) +
                         C49846 * (3 * C50355 + C49846 * C50399);
    const double C3703 = 2 * C50332 + C49846 * C50355 + C50399 * C50112;
    const double C4209 = C49847 * (3 * C50355 + C49846 * C50399);
    const double C21323 =
        2 * C49847 * C50399 + C49847 * (C50399 + C50192 * C50112);
    const double C22993 =
        (3 * (C50008 + C49847 * C50501 + C50499 * ae) +
         C49847 * (2 * C50501 +
                   C49847 * (C50065 + C49847 * (C49847 * C50161 + C50185 * ae) +
                             C49847 * C50185 * ae) +
                   C50502 * ae) +
         (2 * C50499 + C49847 * C50502) * ae) /
        C49722;
    const double C23514 = C23504 + C23505;
    const double C31877 = C31870 + C31871;
    const double C37489 = C37478 + C37479;
    const double C7467 = 4 * (2 * C50422 + C49847 * C50425) +
                         C49847 * (3 * C50425 + C49847 * C50473);
    const double C50193 = C50190 + C50182;
    const double C50485 = C50484 + C50199;
    const double C23908 =
        (4 * (2 * C49847 * C50398 + C49847 * C50505) +
         C49847 * (3 * C50505 + C49847 * (2 * C49847 * C50481 +
                                          C49847 * (C50481 + (C49846 * C49957 +
                                                              C49980 * ae) *
                                                                 C50112)))) /
        C49722;
    const double C146 =
        (5 * (3 * C49872 + C49854 * C49883) +
         C49854 * (4 * C49883 +
                   C49854 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C331 =
        (2 * C49854 * C49865 + C49854 * C49872 + ae * C49846 * C49911 +
         C49846 * (ae * C49911 + C49846 * C49883)) /
        C49724;
    const double C332 = (ae * (3 * C49902 + C49854 * C49911) +
                         C49846 * (3 * C49872 + C49854 * C49883)) /
                        C49724;
    const double C520 =
        (2 * C49854 * C49865 + C49854 * C49872 + ae * C49847 * C49950 +
         C49847 * (ae * C49950 + C49847 * C49883)) /
        C49724;
    const double C521 = (ae * (3 * C49941 + C49854 * C49950) +
                         C49847 * (3 * C49872 + C49854 * C49883)) /
                        C49724;
    const double C950 = (ae * (C49847 * C49911 +
                               (2 * C49854 * C49970 +
                                C49854 * (C49970 + C49861 * C49863 * C49862)) *
                                   ae) +
                         C49846 * (ae * C49950 + C49847 * C49883)) /
                        C49724;
    const double C2564 = C2551 + C2552;
    const double C5812 = C5805 + C5806;
    const double C8415 = C8412 + C8413;
    const double C11769 = C11760 + C11761;
    const double C34347 = C34338 + C34339;
    const double C5976 = C5969 + C5970;
    const double C11225 = C11208 + C11209;
    const double C33803 = C33786 + C33787;
    const double C50055 = C50050 + C50053;
    const double C50084 = C50081 + C50082;
    const double C50103 = C50102 + C50100;
    const double C50167 = C49846 * C50165;
    const double C50194 = C49846 * C50191;
    const double C50211 = C49847 * C50191;
    const double C50205 = C49846 * C50203;
    const double C49923 = C49854 * C49922;
    const double C1162 =
        (2 * (ae * C49911 + C49846 * C49883) +
         ae * (C49911 + C49922 * std::pow(C49846, 2)) +
         C49846 * (C49883 + ae * C49846 * C49922 +
                   C49846 * (ae * C49922 +
                             C49846 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C1155 =
        (2 * C49846 * C49911 + C49846 * (C49911 + C49922 * C50005)) / C49722;
    const double C1616 = (C49847 * (C49911 + C49922 * C50005) +
                          (C50271 + C49985 * C50005) * ae) /
                         C49722;
    const double C1900 =
        (2 * (C49847 * C49911 + C50271 * ae) +
         C49847 * (C49911 + C49847 * (C49847 * C49922 + C49985 * ae) +
                   C49847 * C49985 * ae) +
         (C50271 + C49985 * C50112) * ae) /
        C49722;
    const double C2521 =
        (3 * (C49872 + ae * C50017 + C49846 * C50021) +
         ae * (2 * C50017 + C49846 * C50022) +
         C49846 * (2 * C50021 + ae * C50022 +
                   C49846 * (C49881 + ae * C49846 * C49920 +
                             C49846 * (ae * C49920 +
                                       C49846 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C3273 =
        (2 * (ae * (C49847 * C49909 + C49988 * ae) + C49846 * C50040) +
         ae * (C49847 * C50022 + (C49988 + C49983 * C50005) * ae) +
         C49846 * (C50040 + ae * (C49847 * C49846 * C49920 + C50028 * ae) +
                   C49846 * (ae * (C49847 * C49920 + C49983 * ae) +
                             C49846 * (ae * C49959 +
                                       C49847 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C2518 = (3 * (C49902 + C49909 * C50005) +
                          C49846 * (2 * C50017 + C49846 * C50022)) /
                         C49722;
    const double C2724 =
        (C49902 + C49909 * C50005 + C49847 * (C49847 * C50022 + C50368 * ae) +
         C49847 * C50368 * ae) /
        C49722;
    const double C3270 = (C49847 * (2 * C50017 + C49846 * C50022) +
                          (2 * C50326 + C49846 * C50368) * ae) /
                         C49722;
    const double C50056 = C50048 + C50054;
    const double C50168 = C49846 * C50166;
    const double C21325 =
        (2 * (C49847 * C50070 + C50399 * ae) +
         C49847 * (C50070 + C49847 * (C49847 * C50166 + C50192 * ae) +
                   C49847 * C50192 * ae) +
         (C50399 + C50192 * C50112) * ae) /
        C49722;
    const double C49962 = C49854 * C49961;
    const double C1276 =
        (ae * (C49911 + C49847 * (C49847 * C49922 + C49985 * ae) +
               C49847 * C49985 * ae) +
         C49846 * (C49883 + ae * C49847 * C49961 +
                   C49847 * (ae * C49961 +
                             C49847 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C1623 =
        (ae * C49950 + C49847 * C49883 +
         ae * (C49847 * C49846 * C49922 + C49846 * C49985 * ae) +
         C49846 * (ae * (C49847 * C49922 + C49985 * ae) +
                   C49846 * (ae * C49961 +
                             C49847 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C1907 =
        (2 * (ae * C49950 + C49847 * C49883) +
         ae * (C49950 + C49961 * std::pow(C49847, 2)) +
         C49847 * (C49883 + ae * C49847 * C49961 +
                   C49847 * (ae * C49961 +
                             C49847 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C1154 =
        (2 * (C49846 * C49950 + C50271 * ae) +
         C49846 * (C49950 + C49846 * (C49846 * C49961 + C49985 * ae) +
                   C49846 * C49985 * ae) +
         (C50271 + C49985 * C50005) * ae) /
        C49722;
    const double C1268 = (C49846 * C49950 + C50271 * ae +
                          (C49846 * C49961 + C49985 * ae) * C50112) /
                         C49722;
    const double C1899 =
        (2 * C49847 * C49950 + C49847 * (C49950 + C49961 * C50112)) / C49722;
    const double C5611 =
        (3 * (C49872 + ae * C50125 + C49847 * C50040) +
         ae * (2 * C50125 + C49847 * C50127) +
         C49847 * (2 * C50040 + ae * C50127 +
                   C49847 * (C49881 + ae * C49847 * C49959 +
                             C49847 * (ae * C49959 +
                                       C49847 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C6173 =
        (ae * (2 * (C49847 * C49909 + C49988 * ae) +
               C49847 * (C49909 + C49847 * (C49847 * C49920 + C49983 * ae) +
                         C49847 * C49983 * ae) +
               (C49988 + C49983 * C50112) * ae) +
         C49846 * (2 * C50040 + ae * C50127 +
                   C49847 * (C49881 + ae * C49847 * C49959 +
                             C49847 * (ae * C49959 +
                                       C49847 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C5607 = (3 * (C49941 + C49948 * C50112) +
                          C49847 * (2 * C50125 + C49847 * C50127)) /
                         C49722;
    const double C50144 = C50142 + C50143;
    const double C50231 = C49847 * C50228;
    const double C188 = C180 + C181;
    const double C8082 = C8070 + C8071;
    const double C17257 = C17245 + C17246;
    const double C378 = C366 * C50763;
    const double C2352 = C366 * C2340;
    const double C2544 = C366 * C2338;
    const double C2535 = C366 * C2339;
    const double C8243 = C366 * C50920;
    const double C8238 = C366 * C50814;
    const double C17418 = C366 * C17233;
    const double C17413 = C366 * C50814;
    const double C24509 = C366 * C24497;
    const double C24675 = C366 * C50956;
    const double C24670 = C366 * C50957;
    const double C13869 = C11026 + C11027;
    const double C13856 = C11027 + C11026;
    const double C972 = C966 * C50763;
    const double C2733 = C966 * C2339;
    const double C3284 = C966 * C2338;
    const double C8400 = C966 * C50814;
    const double C8919 = C966 * C50920;
    const double C17575 = C966 * C50814;
    const double C18088 = C966 * C17233;
    const double C24828 = C966 * C50957;
    const double C25337 = C966 * C50956;
    const double C13858 = C11020 + C11021;
    const double C13855 = C11021 + C11020;
    const double C2568 = C2557 * C2339;
    const double C2565 = C2557 * C2340;
    const double C8245 = C2557 * C50814;
    const double C17420 = C2557 * C50814;
    const double C24677 = C2557 * C50957;
    const double C24668 = C2557 * C24497;
    const double C2756 = C2750 * C2339;
    const double C8407 = C2750 * C50814;
    const double C17582 = C2750 * C50814;
    const double C24835 = C2750 * C50957;
    const double C14755 = C11764 + C11765;
    const double C14744 = C11765 + C11764;
    const double C377 = C365 * C118;
    const double C2351 = C365 * C2345;
    const double C2543 = C365 * C2343;
    const double C2536 = C365 * C2344;
    const double C8242 = C365 * C8063;
    const double C8239 = C365 * C8064;
    const double C17417 = C365 * C17238;
    const double C17414 = C365 * C17239;
    const double C24508 = C365 * C24502;
    const double C566 = C554 * C118;
    const double C2737 = C554 * C2343;
    const double C8404 = C554 * C8063;
    const double C17579 = C554 * C17238;
    const double C971 = C965 * C118;
    const double C2734 = C965 * C2344;
    const double C3283 = C965 * C2343;
    const double C8401 = C965 * C8064;
    const double C8918 = C965 * C8063;
    const double C17576 = C965 * C17239;
    const double C18087 = C965 * C17238;
    const double C13859 = C11022 + C11023;
    const double C13854 = C11023 + C11022;
    const double C2567 = C2558 * C2344;
    const double C2566 = C2558 * C2345;
    const double C8244 = C2558 * C8064;
    const double C17419 = C2558 * C17239;
    const double C24669 = C2558 * C24502;
    const double C2754 = C2748 * C2345;
    const double C3285 = C2748 * C2344;
    const double C8920 = C2748 * C8064;
    const double C18089 = C2748 * C17239;
    const double C24827 = C2748 * C24502;
    const double C13868 = C11024 + C11025;
    const double C13857 = C11025 + C11024;
    const double C30831 = C13883 + C13882;
    const double C3556 = C3553 + C3554;
    const double C31720 = C31714 + C31715;
    const double C37320 = C37314 + C37315;
    const double C3722 = C3717 + C3718;
    const double C15971 = C15966 + C15967;
    const double C21928 = C21910 + C21911;
    const double C23516 = C23508 + C23509;
    const double C31878 = C31872 + C31873;
    const double C37052 = C37028 + C37029;
    const double C37490 = C37480 + C37481;
    const double C4222 = C4219 + C4220;
    const double C15107 = C15102 + C15103;
    const double C22844 = C22836 + C22837;
    const double C32378 = C32372 + C32373;
    const double C36386 = C36360 + C36361;
    const double C37990 = C37984 + C37985;
    const double C191 = C183 + C182;
    const double C189 = C182 + C183;
    const double C8083 = C8076 + C8077;
    const double C17258 = C17251 + C17252;
    const double C680 = C373 + C374;
    const double C8564 = C8236 + C8237;
    const double C17733 = C17411 + C17412;
    const double C794 = C562 + C563;
    const double C8717 = C8398 + C8399;
    const double C17886 = C17573 + C17574;
    const double C165 = C50778 * C136;
    const double C356 = C50778 * C318;
    const double C682 = C50778 * C320;
    const double C20613 = C50778 * C3547;
    const double C166 = C117 * C137;
    const double C546 = C117 * C508;
    const double C5253 = C5217 * C508;
    const double C11543 = C10778 * C508;
    const double C34121 = C33356 * C508;
    const double C44298 = C44262 * C508;
    const double C797 = C117 * C510;
    const double C10810 = C10778 * C510;
    const double C33388 = C33356 * C510;
    const double C50277 = C50275 + C50276;
    const double C1269 =
        (C49846 * C49911 + C49847 * (C49847 * C49846 * C49922 + C50323 * ae) +
         C49847 * C50323 * ae) /
        C49722;
    const double C1615 =
        (C49847 *
         (C49950 + C49846 * (C49846 * C49961 + C49985 * ae) + C50323 * ae)) /
        C49722;
    const double C1264 = C49846 * C50271 + C50323 * C50112;
    const double C3542 = 4 * (2 * C50329 + C49846 * C50362) +
                         C49846 * (3 * C50362 + C49846 * C50388);
    const double C3702 = 2 * C50329 + C49846 * C50362 + C50388 * C50112;
    const double C4208 = C49847 * (3 * C50362 + C49846 * C50388);
    const double C7466 = 4 * (2 * C50429 + C49847 * C50432) +
                         C49847 * (3 * C50432 + C49847 * C50464);
    const double C23907 = 4 * (2 * C50453 + C49847 * C50456) +
                          C49847 * (3 * C50456 + C49847 * C50512);
    const double C50482 = C50479 + C50480;
    const double C50522 = C50519 + C50520;
    const double C107 = (C50948 * C50616) / C49722 + (C50892 - C50931) / C49766;
    const double C108 =
        (C50949 * C50616) / C49722 + (2 * C50626 + C50948) / C49766;
    const double C109 = (C50616 * C50626) / C49726 + C50949 / C49766;
    const double C113 = (C50950 * C50642) / C50639 + (C50899 - C50934) / C50641;
    const double C114 =
        (C50951 * C50642) / C50639 + (2 * C50653 + C50950) / C50641;
    const double C115 = (C50642 * C50653) / C50656 + C50951 / C50641;
    const double C1145 =
        (C50952 * C50713) / C50639 + (C50907 - C50936) / C50641;
    const double C1146 =
        (C50953 * C50713) / C50639 + (2 * C50718 + C50952) / C50641;
    const double C1147 = (C50713 * C50718) / C50656 + C50953 / C50641;
    const double C1891 =
        (C50954 * C50741) / C50639 + (C50908 - C50939) / C50641;
    const double C1892 =
        (C50955 * C50741) / C50639 + (2 * C50746 + C50954) / C50641;
    const double C1893 = (C50741 * C50746) / C50656 + C50955 / C50641;
    const double C49782 = C49780 * ae;
    const double C44309 = C44282 + C44283;
    const double C44306 = C44276 + C44277;
    const double C44305 = C44274 + C44275;
    const double C44302 = C44268 + C44269;
    const double C44491 = C44470 + C44471;
    const double C44488 = C44464 + C44465;
    const double C44673 = C44652 + C44653;
    const double C44670 = C44646 + C44647;
    const double C44845 = C44838 + C44839;
    const double C45009 = C45002 + C45003;
    const double C45006 = C44996 + C44997;
    const double C47251 = C47236 + C47237;
    const double C47248 = C47230 + C47231;
    const double C47247 = C47228 + C47229;
    const double C47244 = C47222 + C47223;
    const double C47901 = C47892 + C47893;
    const double C48830 = C48820 + C48821;
    const double C49824 = C49822 * ae;
    const double C10833 = C10829 * C50763;
    const double C10832 = C10828 * C118;
    const double C33407 = C33396 + C33397;
    const double C33406 = C33394 + C33395;
    const double C36376 = C33605 + C33604;
    const double C40973 = C33604 + C33605;
    const double C36377 = C33603 + C33602;
    const double C40972 = C33602 + C33603;
    const double C40971 = C33600 + C33601;
    const double C40968 = C33601 + C33600;
    const double C40970 = C33598 + C33599;
    const double C40969 = C33599 + C33598;
    const double C41831 = C34342 + C34343;
    const double C41828 = C34343 + C34342;
    const double C36395 = C36384 + C36385;
    const double C36394 = C36382 + C36383;
    const double C185 = C175 * C118;
    const double C8078 = C175 * C8063;
    const double C17253 = C175 * C17238;
    const double C372 = C360 * C118;
    const double C2361 = C360 * C2344;
    const double C8075 = C360 * C8064;
    const double C8565 = C360 * C8063;
    const double C17250 = C360 * C17239;
    const double C17734 = C360 * C17238;
    const double C379 = C367 * C118;
    const double C2354 = C367 * C2345;
    const double C2907 = C367 * C2344;
    const double C8246 = C367 * C8063;
    const double C8235 = C367 * C8064;
    const double C17421 = C367 * C17238;
    const double C17410 = C367 * C17239;
    const double C24511 = C367 * C24502;
    const double C561 = C549 * C118;
    const double C8718 = C549 * C8063;
    const double C17887 = C549 * C17238;
    const double C10831 = C10822 + C10823;
    const double C33409 = C33400 + C33401;
    const double C568 = C556 * C118;
    const double C8408 = C556 * C8063;
    const double C17583 = C556 * C17238;
    const double C11536 = C11212 + C11213;
    const double C34114 = C33790 + C33791;
    const double C973 = C967 * C118;
    const double C3059 = C967 * C2344;
    const double C8397 = C967 * C8064;
    const double C8922 = C967 * C8063;
    const double C17572 = C967 * C17239;
    const double C18091 = C967 * C17238;
    const double C11373 = C11018 + C11019;
    const double C14290 = C11019 + C11018;
    const double C33951 = C33596 + C33597;
    const double C41374 = C33597 + C33596;
    const double C2755 = C2749 * C2344;
    const double C8406 = C2749 * C8064;
    const double C17581 = C2749 * C17239;
    const double C14754 = C11762 + C11763;
    const double C14745 = C11763 + C11762;
    const double C41830 = C34340 + C34341;
    const double C41829 = C34341 + C34340;
    const double C32367 = C15969 + C15968;
    const double C37979 = C37054 + C37055;
    const double C31709 = C15105 + C15104;
    const double C37309 = C36388 + C36389;
    const double C20615 = C50778 * C3549;
    const double C184 = C174 * C50763;
    const double C8079 = C174 * C50920;
    const double C17254 = C174 * C17233;
    const double C371 = C359 * C50763;
    const double C2362 = C359 * C2339;
    const double C8074 = C359 * C50814;
    const double C8566 = C359 * C50920;
    const double C17249 = C359 * C50814;
    const double C17735 = C359 * C17233;
    const double C24519 = C359 * C50957;
    const double C380 = C368 * C50763;
    const double C2353 = C368 * C2340;
    const double C2908 = C368 * C2339;
    const double C8247 = C368 * C50920;
    const double C8234 = C368 * C50814;
    const double C17422 = C368 * C17233;
    const double C17409 = C368 * C50814;
    const double C24510 = C368 * C24497;
    const double C24987 = C368 * C50957;
    const double C560 = C548 * C50763;
    const double C8719 = C548 * C50920;
    const double C17888 = C548 * C17233;
    const double C10830 = C10820 + C10821;
    const double C33408 = C33398 + C33399;
    const double C569 = C557 * C50763;
    const double C8409 = C557 * C50920;
    const double C17584 = C557 * C17233;
    const double C11535 = C11210 + C11211;
    const double C34113 = C33788 + C33789;
    const double C974 = C968 * C50763;
    const double C3060 = C968 * C2339;
    const double C8396 = C968 * C50814;
    const double C8923 = C968 * C50920;
    const double C17571 = C968 * C50814;
    const double C18092 = C968 * C17233;
    const double C25139 = C968 * C50957;
    const double C11372 = C11016 + C11017;
    const double C14291 = C11017 + C11016;
    const double C33950 = C33594 + C33595;
    const double C41375 = C33595 + C33594;
    const double C2752 = C2745 + C2746;
    const double C5454 = C5441 + C5442;
    const double C14771 = C14762 + C14763;
    const double C37063 = C37050 + C37051;
    const double C44499 = C44486 + C44487;
    const double C21059 = C50778 * C4215;
    const double C31717 = C50842 * C4215;
    const double C37317 = C50842 * C4215;
    const double C20723 = C50778 * C3709;
    const double C22839 = C5214 * C3709;
    const double C32375 = C50842 * C3709;
    const double C37987 = C50842 * C3709;
    const double C48159 = C44259 * C3709;
    const double C23511 = C5214 * C4626;
    const double C31875 = C50842 * C4626;
    const double C37483 = C50842 * C4626;
    const double C48827 = C44259 * C4626;
    const double C15309 = C50842 * C4627;
    const double C22567 = C5214 * C4627;
    const double C23005 = C5213 * C4627;
    const double C37475 = C50842 * C4627;
    const double C47887 = C44259 * C4627;
    const double C48321 = C50959 * C4627;
    const double C23007 = C5214 * C6589;
    const double C48323 = C44259 * C6589;
    const double C3546 =
        (4 * (2 * C50354 + C49846 * C50402 + C50355 * ae) +
         C49846 *
             (3 * C50402 +
              C49846 * (2 * C50398 +
                        C49846 * (C49939 + C49846 * (C49846 * C49946 + C50173) +
                                  C50199) +
                        C50093 * ae) +
              C50399 * ae) +
         (3 * C50355 + C49846 * C50399) * ae) /
        C49722;
    const double C3706 =
        (2 * C50354 + C49846 * C50402 + C50355 * ae +
         (2 * C50398 +
          C49846 * (C49939 + C49846 * (C49846 * C49946 + C50173) + C50199) +
          C50093 * ae) *
             C50112) /
        C49722;
    const double C4212 =
        (C49847 *
         (3 * C50402 +
          C49846 * (2 * C50398 +
                    C49846 * (C49939 + C49846 * (C49846 * C49946 + C50173) +
                              C50199) +
                    C50093 * ae) +
          C50399 * ae)) /
        C49722;
    const double C4620 =
        (2 * C49847 * C50402 +
         C49847 *
             (C50402 + (C49939 + C49846 * (C49846 * C49946 + C50173) + C50199) *
                           C50112)) /
        C49722;
    const double C6189 = C6179 + C6180;
    const double C14093 = C14086 + C14087;
    const double C41177 = C41170 + C41171;
    const double C45218 = C45208 + C45209;
    const double C50465 = C50463 + C50460;
    const double C50391 = C50390 + C50384;
    const double C2562 = C2547 + C2548;
    const double C3296 = C3289 + C3290;
    const double C13889 = C13876 + C13877;
    const double C36393 = C36374 + C36375;
    const double C2561 = C2545 + C2546;
    const double C2751 = C2743 + C2744;
    const double C5451 = C5435 + C5436;
    const double C14769 = C14758 + C14759;
    const double C37061 = C37046 + C37047;
    const double C44496 = C44480 + C44481;
    const double C3295 = C3287 + C3288;
    const double C13887 = C13872 + C13873;
    const double C36391 = C36370 + C36371;
    const double C5645 = C5629 + C5630;
    const double C44678 = C44662 + C44663;
    const double C357 = C117 * C319;
    const double C683 = C117 * C321;
    const double C545 = C50778 * C507;
    const double C5248 = C5214 * C507;
    const double C11540 = C50842 * C507;
    const double C34118 = C50842 * C507;
    const double C44293 = C44259 * C507;
    const double C796 = C50778 * C509;
    const double C10807 = C50842 * C509;
    const double C33385 = C50842 * C509;
    const double C962 = C50778 * C943;
    const double C11377 = C50842 * C943;
    const double C33955 = C50842 * C943;
    const double C963 = C117 * C944;
    const double C11380 = C10778 * C944;
    const double C33958 = C33356 * C944;
    const double C164 = C117 * C124;
    const double C355 = C117 * C301;
    const double C681 = C117 * C302;
    const double C544 = C117 * C490;
    const double C5247 = C5217 * C490;
    const double C11539 = C10778 * C490;
    const double C34117 = C33356 * C490;
    const double C44292 = C44262 * C490;
    const double C795 = C117 * C491;
    const double C10806 = C10778 * C491;
    const double C33384 = C33356 * C491;
    const double C961 = C117 * C935;
    const double C11376 = C10778 * C935;
    const double C33954 = C33356 * C935;
    const double C3066 = C3063 + C3064;
    const double C11031 = C11014 + C11015;
    const double C33609 = C33592 + C33593;
    const double C5809 = C5799 + C5800;
    const double C8414 = C8410 + C8411;
    const double C11767 = C11756 + C11757;
    const double C34345 = C34334 + C34335;
    const double C44842 = C44832 + C44833;
    const double C2909 = C2563 * C2345;
    const double C8248 = C2563 * C8064;
    const double C17423 = C2563 * C17239;
    const double C24988 = C2563 * C24502;
    const double C3067 = C3065 * C2345;
    const double C8924 = C3065 * C8064;
    const double C18093 = C3065 * C17239;
    const double C25140 = C3065 * C24502;
    const double C50513 = C50511 + C50508;
    const double C23010 = C23000 + C23001;
    const double C48326 = C48316 + C48317;
    const double C20721 = C50778 * C3707;
    const double C22833 = C5214 * C3707;
    const double C32371 = C50842 * C3707;
    const double C37983 = C50842 * C3707;
    const double C48153 = C44259 * C3707;
    const double C21057 = C50778 * C4213;
    const double C31713 = C50842 * C4213;
    const double C37313 = C50842 * C4213;
    const double C20612 = C117 * C3543;
    const double C20720 = C117 * C3703;
    const double C22832 = C5217 * C3703;
    const double C32370 = C10778 * C3703;
    const double C37982 = C33356 * C3703;
    const double C48152 = C44262 * C3703;
    const double C21056 = C117 * C4209;
    const double C31712 = C10778 * C4209;
    const double C37312 = C33356 * C4209;
    const double C50195 = ae * C50193;
    const double C50517 = C49847 * C50193;
    const double C7471 =
        (4 * (2 * C50424 + C49847 * C50474 + C50425 * ae) +
         C49847 * (3 * C50474 +
                   C49847 * (2 * C50108 + C49847 * C50193 + C50139 * ae) +
                   C50473 * ae) +
         (3 * C50425 + C49847 * C50473) * ae) /
        C49722;
    const double C50486 = C49846 * C50485;
    const double C22992 =
        (3 * (C50402 + C50485 * C50112) +
         C49847 *
             (2 * C49847 * C50485 +
              C49847 *
                  (C50485 + (C49946 + C49846 * (C49846 * C49957 + C49980 * ae) +
                             C50180 * ae) *
                                C50112))) /
        C49722;
    const double C358 = C50778 * C331;
    const double C684 = C50778 * C332;
    const double C547 = C50778 * C520;
    const double C5254 = C5214 * C520;
    const double C11544 = C50842 * C520;
    const double C34122 = C50842 * C520;
    const double C44299 = C44259 * C520;
    const double C798 = C50778 * C521;
    const double C10811 = C50842 * C521;
    const double C33389 = C50842 * C521;
    const double C964 = C50778 * C950;
    const double C11381 = C50842 * C950;
    const double C33959 = C50842 * C950;
    const double C2910 = C2564 * C2340;
    const double C8249 = C2564 * C50814;
    const double C17424 = C2564 * C50814;
    const double C24989 = C2564 * C24497;
    const double C8417 = C8415 * C50814;
    const double C17586 = C8415 * C50814;
    const double C3708 =
        (2 * (ae * (C49904 + C49847 * (C49847 * C49915 + C49979 * ae) +
                    C49847 * C49979 * ae) +
              C49846 * C50084) +
         ae * (C50015 + C49847 * (C49847 * C50052 + C50083 * ae) +
               C49847 * C50083 * ae) +
         C49846 *
             (C50084 +
              ae * (C50042 + C49847 * (C49847 * C49846 * C50045 + C50080 * ae) +
                    C49847 * C50080 * ae) +
              C49846 *
                  (ae * (C49915 + C49847 * (C49847 * C50045 + C50075 * ae) +
                         C49847 * C50075 * ae) +
                   C49846 * (C50044 + ae * C49847 * C50076 +
                             C49847 * (ae * C50076 + C49847 * C49854 *
                                                         std::pow(C49851, 8) *
                                                         bs[8] * C49852))))) /
        C49724;
    const double C4624 =
        (2 * C50036 + ae * (C49943 + C49954 * C50112) + C49847 * C50084 +
         ae * (2 * (C49847 * C50042 + C50026 * ae) +
               C49847 *
                   (C50042 + C49847 * (C49847 * C49846 * C50045 + C50080 * ae) +
                    C49847 * C50080 * ae) +
               (C50026 + C50080 * C50112) * ae) +
         C49846 *
             (ae *
                  (2 * C50101 +
                   C49847 * (C49915 + C49847 * (C49847 * C50045 + C50075 * ae) +
                             C49847 * C50075 * ae) +
                   (C49979 + C50075 * C50112) * ae) +
              C49846 *
                  (2 * C50078 + ae * (C49954 + C50076 * C50112) +
                   C49847 * (C50044 + ae * C49847 * C50076 +
                             C49847 * (ae * C50076 + C49847 * C49854 *
                                                         std::pow(C49851, 8) *
                                                         bs[8] * C49852))))) /
        C49724;
    const double C4625 =
        (ae * (2 * (C49847 * C49904 + C49990 * ae) +
               C49847 * (C49904 + C49847 * C50101 + C49847 * C49979 * ae) +
               (C49990 + C49979 * C50112) * ae) +
         C49846 *
             (2 * C50036 + ae * (C49943 + C49954 * C50112) + C49847 * C50084)) /
        C49724;
    const double C5610 =
        (3 * (C49976 + ae * C50121 + C49847 * C50036) +
         ae * (2 * C50121 + C49847 * C50123) +
         C49847 * (2 * C50036 + ae * C50123 + C49847 * C50084)) /
        C49724;
    const double C6588 =
        (ae * (3 * (C49904 + C49847 * C50101 + C50130 * ae) +
               C49847 * (2 * C50101 +
                         C49847 * (C49915 +
                                   C49847 * (C49847 * C50045 + C50075 * ae) +
                                   C49847 * C50075 * ae) +
                         C50133 * ae) +
               (2 * C50130 + C49847 * C50133) * ae) +
         C49846 * (3 * C50084 + ae * (2 * C50072 + C49847 * C50134) +
                   C49847 * (2 * C50078 + ae * C50134 +
                             C49847 * (C50044 + ae * C49847 * C50076 +
                                       C49847 * (ae * C50076 +
                                                 C49847 * C49854 *
                                                     std::pow(C49851, 8) *
                                                     bs[8] * C49852))))) /
        C49724;
    const double C50169 = C50157 + C50167;
    const double C50213 = C50212 + C50211;
    const double C50207 = C50206 + C50205;
    const double C49924 = C49914 + C49923;
    const double C3548 =
        (4 * (2 * C50014 + ae * C50015 + C49846 * C50055) +
         ae * (3 * C50015 + C49846 * C50056) +
         C49846 * (3 * C50055 + ae * C50056 +
                   C49846 * (2 * C50051 + ae * C50052 +
                             C49846 * (C50044 + ae * C49846 * C50045 +
                                       C49846 * (ae * C50045 +
                                                 C49846 * C49854 *
                                                     std::pow(C49851, 8) *
                                                     bs[8] * C49852))))) /
        C49724;
    const double C4214 =
        (3 * (C50036 + ae * (C49847 * C50042 + C50026 * ae) + C49846 * C50103) +
         ae * (C49847 * C50056 + (2 * C50026 + C49846 * C50083) * ae) +
         C49846 *
             (2 * C50103 + ae * (C49847 * C50052 + C50083 * ae) +
              C49846 *
                  (C50078 + ae * (C49847 * C49846 * C50045 + C50080 * ae) +
                   C49846 * (ae * (C49847 * C50045 + C50075 * ae) +
                             C49846 * (ae * C50076 + C49847 * C49854 *
                                                         std::pow(C49851, 8) *
                                                         bs[8] * C49852))))) /
        C49724;
    const double C3545 = (4 * (2 * C50010 + C49846 * C50015) +
                          C49846 * (3 * C50015 + C49846 * C50056)) /
                         C49722;
    const double C3705 =
        (2 * C50010 + C49846 * C50015 +
         C49847 * (C49847 * C50056 + C50388 * ae) + C49847 * C50388 * ae) /
        C49722;
    const double C4211 = (C49847 * (3 * C50015 + C49846 * C50056) +
                          (3 * C50362 + C49846 * C50388) * ae) /
                         C49722;
    const double C50170 = C50155 + C50168;
    const double C49963 = C49953 + C49962;
    const double C7472 =
        (4 * (2 * C50036 + ae * C50123 + C49847 * C50084) +
         ae * (3 * C50123 + C49847 * C50144) +
         C49847 * (3 * C50084 + ae * C50144 +
                   C49847 * (2 * C50078 + ae * C50134 +
                             C49847 * (C50044 + ae * C49847 * C50076 +
                                       C49847 * (ae * C50076 +
                                                 C49847 * C49854 *
                                                     std::pow(C49851, 8) *
                                                     bs[8] * C49852))))) /
        C49724;
    const double C7468 = (4 * (2 * C50121 + C49847 * C50123) +
                          C49847 * (3 * C50123 + C49847 * C50144)) /
                         C49722;
    const double C50232 = C50230 + C50231;
    const double C8084 = C8082 + C8072;
    const double C17259 = C17257 + C17247;
    const double C32366 = C15971 + C15970;
    const double C37978 = C37052 + C37053;
    const double C31708 = C15107 + C15106;
    const double C37308 = C36386 + C36387;
    const double C177 = C166 + C167;
    const double C125 = 5 * (3 * C50266 + C49854 * C50271) +
                        C49854 * (4 * C50271 + C49854 * C50277);
    const double C303 = 3 * C50266 + C49854 * C50271 + C50277 * C50005;
    const double C492 = 3 * C50266 + C49854 * C50271 + C50277 * C50112;
    const double C674 = C49846 * (4 * C50271 + C49854 * C50277);
    const double C788 = C49847 * (4 * C50271 + C49854 * C50277);
    const double C936 = C49847 * C49846 * C50277;
    const double C20607 = 5 * (3 * C50355 + C49846 * C50399) +
                          C49846 * (4 * C50399 + C49846 * C50482);
    const double C20715 = 3 * C50355 + C49846 * C50399 + C50482 * C50112;
    const double C21051 = C49847 * (4 * C50399 + C49846 * C50482);
    const double C40313 = 5 * (3 * C50425 + C49847 * C50473) +
                          C49847 * (4 * C50473 + C49847 * C50522);
    const double C49784 = C49782 / C49722;
    const double C49826 = C49824 / C49722;
    const double C10836 = C10832 + C10833;
    const double C33411 = C33407 * C50763;
    const double C33410 = C33406 * C118;
    const double C8085 = C8075 + C8083;
    const double C17260 = C17250 + C17258;
    const double C8569 = C8235 + C8564;
    const double C17738 = C17410 + C17733;
    const double C10835 = C10831 * C118;
    const double C33413 = C33409 * C118;
    const double C11546 = C11536 * C118;
    const double C34124 = C34114 * C118;
    const double C8722 = C8397 + C8717;
    const double C17891 = C17572 + C17886;
    const double C11383 = C11373 * C118;
    const double C33961 = C33951 * C118;
    const double C190 = C184 + C185;
    const double C679 = C371 + C372;
    const double C793 = C560 + C561;
    const double C10834 = C10830 * C50763;
    const double C33412 = C33408 * C50763;
    const double C11545 = C11535 * C50763;
    const double C34123 = C34113 * C50763;
    const double C11382 = C11372 * C50763;
    const double C33960 = C33950 * C50763;
    const double C2758 = C2752 * C2340;
    const double C24837 = C2752 * C24497;
    const double C15313 = C15308 + C15309;
    const double C22578 = C22566 + C22567;
    const double C23012 = C23004 + C23005;
    const double C37487 = C37474 + C37475;
    const double C47898 = C47886 + C47887;
    const double C23013 = C23006 + C23007;
    const double C48329 = C48322 + C48323;
    const double C20614 = C117 * C3546;
    const double C20722 = C117 * C3706;
    const double C22838 = C5217 * C3706;
    const double C32374 = C10778 * C3706;
    const double C37986 = C33356 * C3706;
    const double C48158 = C44262 * C3706;
    const double C21058 = C117 * C4212;
    const double C31716 = C10778 * C4212;
    const double C37316 = C33356 * C4212;
    const double C23510 = C5217 * C4620;
    const double C31874 = C10778 * C4620;
    const double C37482 = C33356 * C4620;
    const double C48826 = C44262 * C4620;
    const double C7469 =
        (4 * (2 * C50431 + C49847 * C50465 + C50432 * ae) +
         C49847 *
             (3 * C50465 +
              C49847 *
                  (2 * C50101 +
                   C49847 * (C49915 + C49847 * (C49847 * C50045 + C50075 * ae) +
                             C49847 * C50075 * ae) +
                   C50133 * ae) +
              C50464 * ae) +
         (3 * C50432 + C49847 * C50464) * ae) /
        C49722;
    const double C3544 =
        (4 * (2 * C50361 + C49846 * C50391 + C50362 * ae) +
         C49846 *
             (3 * C50391 +
              C49846 *
                  (2 * C50387 +
                   C49846 * (C49954 + C49846 * (C49846 * C50076 + C50075 * ae) +
                             C50080 * ae) +
                   C50083 * ae) +
              C50388 * ae) +
         (3 * C50362 + C49846 * C50388) * ae) /
        C49722;
    const double C3704 =
        (2 * C50361 + C49846 * C50391 + C50362 * ae +
         (2 * C50387 +
          C49846 * (C49954 + C49846 * (C49846 * C50076 + C50075 * ae) +
                    C50080 * ae) +
          C50083 * ae) *
             C50112) /
        C49722;
    const double C4210 =
        (C49847 *
         (3 * C50391 +
          C49846 *
              (2 * C50387 +
               C49846 * (C49954 + C49846 * (C49846 * C50076 + C50075 * ae) +
                         C50080 * ae) +
               C50083 * ae) +
          C50388 * ae)) /
        C49722;
    const double C4616 =
        (2 * C49847 * C50391 +
         C49847 * (C50391 + (C49954 + C49846 * (C49846 * C50076 + C50075 * ae) +
                             C50080 * ae) *
                                C50112)) /
        C49722;
    const double C2570 = C2562 * C2340;
    const double C24679 = C2562 * C24497;
    const double C3298 = C3296 * C2340;
    const double C25341 = C3296 * C24497;
    const double C2569 = C2561 * C2345;
    const double C24678 = C2561 * C24502;
    const double C2757 = C2751 * C2345;
    const double C24836 = C2751 * C24502;
    const double C3297 = C3295 * C2345;
    const double C25340 = C3295 * C24502;
    const double C176 = C164 + C165;
    const double C369 = C355 + C356;
    const double C685 = C681 + C682;
    const double C558 = C544 + C545;
    const double C5269 = C5247 + C5248;
    const double C11548 = C11539 + C11540;
    const double C34126 = C34117 + C34118;
    const double C44314 = C44292 + C44293;
    const double C799 = C795 + C796;
    const double C10825 = C10806 + C10807;
    const double C33403 = C33384 + C33385;
    const double C969 = C961 + C962;
    const double C11385 = C11376 + C11377;
    const double C33963 = C33954 + C33955;
    const double C3068 = C3066 * C2340;
    const double C8925 = C3066 * C50814;
    const double C18094 = C3066 * C50814;
    const double C25141 = C3066 * C24497;
    const double C8416 = C8414 * C8064;
    const double C17585 = C8414 * C17239;
    const double C23909 =
        (4 * (2 * C50455 + C49847 * C50513 + C50456 * ae) +
         C49847 * (3 * C50513 +
                   C49847 * (2 * C50202 +
                             C49847 * (C50152 +
                                       C49847 * (C49847 * C49846 * C49918 +
                                                 C50180 * ae) +
                                       C49847 * C50180 * ae) +
                             C50219 * ae) +
                   C50512 * ae) +
         (3 * C50456 + C49847 * C50512) * ae) /
        C49722;
    const double C20616 = C20612 + C20613;
    const double C20724 = C20720 + C20721;
    const double C22842 = C22832 + C22833;
    const double C32377 = C32370 + C32371;
    const double C37989 = C37982 + C37983;
    const double C48162 = C48152 + C48153;
    const double C21060 = C21056 + C21057;
    const double C31719 = C31712 + C31713;
    const double C37319 = C37312 + C37313;
    const double C50196 = C50195 + C50194;
    const double C50521 = C50516 + C50517;
    const double C50487 = C50476 + C50486;
    const double C370 = C357 + C358;
    const double C686 = C683 + C684;
    const double C559 = C546 + C547;
    const double C5272 = C5253 + C5254;
    const double C11550 = C11543 + C11544;
    const double C34128 = C34121 + C34122;
    const double C44317 = C44298 + C44299;
    const double C800 = C797 + C798;
    const double C10827 = C10810 + C10811;
    const double C33405 = C33388 + C33389;
    const double C970 = C963 + C964;
    const double C11387 = C11380 + C11381;
    const double C33965 = C33958 + C33959;
    const double C6186 = C5214 * C4625;
    const double C14091 = C50842 * C4625;
    const double C41175 = C50842 * C4625;
    const double C45215 = C44259 * C4625;
    const double C5636 = C5214 * C5610;
    const double C44669 = C44259 * C5610;
    const double C21326 =
        (2 * (ae * (2 * C50108 + C49847 * C50193 + C50139 * ae) +
              C49846 * C50213) +
         ae * (2 * (C49847 * C50065 + C50093 * ae) +
               C49847 * (C50065 + C49847 * (C49847 * C50161 + C50185 * ae) +
                         C49847 * C50185 * ae) +
               (C50093 + C50185 * C50112) * ae) +
         C49846 *
             (C50213 +
              ae *
                  (2 * C50202 +
                   C49847 * (C50152 +
                             C49847 * (C49847 * C49846 * C49918 + C50180 * ae) +
                             C49847 * C50180 * ae) +
                   (C50090 + C50180 * C50112) * ae) +
              C49846 *
                  (ae * (2 * C50181 +
                         C49847 * (C49907 +
                                   C49847 * (C49847 * C49918 + C49980 * ae) +
                                   C49847 * C49980 * ae) +
                         (C49972 + C49980 * C50112) * ae) +
                   C49846 * (2 * C50184 + ae * (C49946 + C49957 * C50112) +
                             C49847 * (C49879 + ae * C49847 * C49957 +
                                       C49847 * (ae * C49957 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C22994 =
        (3 * C50096 + ae * C50148 + C49847 * C50213 +
         ae * (3 * (C50058 + C49847 * C50202 + C50215 * ae) +
               C49847 * (2 * C50202 +
                         C49847 * (C50152 +
                                   C49847 * (C49847 * C49846 * C49918 +
                                             C50180 * ae) +
                                   C49847 * C50180 * ae) +
                         C50219 * ae) +
               (2 * C50215 + C49847 * C50219) * ae) +
         C49846 *
             (ae * (3 * C50193 +
                    C49847 *
                        (2 * C50181 +
                         C49847 * (C49907 +
                                   C49847 * (C49847 * C49918 + C49980 * ae) +
                                   C49847 * C49980 * ae) +
                         C50220 * ae) +
                    (2 * C50174 + C49847 * C50220) * ae) +
              C49846 *
                  (3 * C50191 + ae * (2 * C50175 + C49847 * C50221) +
                   C49847 * (2 * C50184 + ae * C50221 +
                             C49847 * (C49879 + ae * C49847 * C49957 +
                                       C49847 * (ae * C49957 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C23910 =
        (ae * (4 * (2 * C50108 + C49847 * C50193 + C50139 * ae) +
               C49847 * (3 * C50193 +
                         C49847 * (2 * C50181 +
                                   C49847 * (C49907 +
                                             C49847 * (C49847 * C49918 +
                                                       C49980 * ae) +
                                             C49847 * C49980 * ae) +
                                   C50220 * ae) +
                         C50227 * ae) +
               (3 * C50139 + C49847 * C50227) * ae) +
         C49846 *
             (4 * C50213 + ae * (3 * C50140 + C49847 * C50228) +
              C49847 *
                  (3 * C50191 + ae * C50228 +
                   C49847 * (2 * C50184 + ae * C50221 +
                             C49847 * (C49879 + ae * C49847 * C49957 +
                                       C49847 * (ae * C49957 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C333 =
        (3 * C49872 + C49854 * C49883 + ae * C49846 * C49924 +
         C49846 * (ae * C49924 +
                   C49846 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C677 =
        (ae * (4 * C49911 + C49854 * C49924) +
         C49846 * (4 * C49883 +
                   C49854 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C139 = (5 * (3 * C49902 + C49854 * C49911) +
                         C49854 * (4 * C49911 + C49854 * C49924)) /
                        C49722;
    const double C323 =
        (3 * C49902 + C49854 * C49911 + C49924 * C50005) / C49722;
    const double C512 =
        (3 * C49902 + C49854 * C49911 +
         C49847 * (C49847 * C49924 + C50277 * ae) + C49847 * C50277 * ae) /
        C49722;
    const double C676 = (C49846 * (4 * C49911 + C49854 * C49924)) / C49722;
    const double C790 = (C49847 * (4 * C49911 + C49854 * C49924) +
                         (4 * C50271 + C49854 * C50277) * ae) /
                        C49722;
    const double C946 =
        (C49847 * C49846 * C49924 + C49846 * C50277 * ae) / C49722;
    const double C20610 =
        (5 * (3 * C50069 + ae * C50070 + C49846 * C50169) +
         ae * (4 * C50070 + C49846 * C50170) +
         C49846 *
             (4 * C50169 + ae * C50170 +
              C49846 *
                  (3 * C50165 + ae * C50166 +
                   C49846 * (2 * C50159 + ae * C50161 +
                             C49846 * (C49879 + ae * C49846 * C49918 +
                                       C49846 * (ae * C49918 +
                                                 C49846 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C21054 =
        (4 * (2 * C50110 + ae * (C49847 * C50065 + C50093 * ae) +
              C49846 * C50207) +
         ae * (C49847 * C50170 + (3 * C50093 + C49846 * C50192) * ae) +
         C49846 *
             (3 * C50207 + ae * (C49847 * C50166 + C50192 * ae) +
              C49846 *
                  (2 * C50203 + ae * (C49847 * C50161 + C50185 * ae) +
                   C49846 *
                       (C50184 + ae * (C49847 * C49846 * C49918 + C50180 * ae) +
                        C49846 * (ae * (C49847 * C49918 + C49980 * ae) +
                                  C49846 * (ae * C49957 +
                                            C49847 * std::pow(C49851, 8) *
                                                bs[8] * C49852)))))) /
        C49724;
    const double C20609 = (5 * (3 * C50008 + C49846 * C50070) +
                           C49846 * (4 * C50070 + C49846 * C50170)) /
                          C49722;
    const double C20717 =
        (3 * C50008 + C49846 * C50070 +
         C49847 * (C49847 * C50170 + C50482 * ae) + C49847 * C50482 * ae) /
        C49722;
    const double C21053 = (C49847 * (4 * C50070 + C49846 * C50170) +
                           (4 * C50399 + C49846 * C50482) * ae) /
                          C49722;
    const double C522 =
        (3 * C49872 + C49854 * C49883 + ae * C49847 * C49963 +
         C49847 * (ae * C49963 +
                   C49847 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C791 =
        (ae * (4 * C49950 + C49854 * C49963) +
         C49847 * (4 * C49883 +
                   C49854 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C951 =
        (ae * (C49847 * C49924 +
               (3 * (C49970 + C49972 * C49862) +
                C49854 * (2 * C49854 * C49972 +
                          C49854 * (C49972 + C49868 * C49867 * C49862))) *
                   ae) +
         C49846 * (ae * C49963 +
                   C49847 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C138 = (5 * (3 * C49941 + C49854 * C49950) +
                         C49854 * (4 * C49950 + C49854 * C49963)) /
                        C49722;
    const double C322 =
        (3 * C49941 + C49854 * C49950 +
         C49846 * (C49846 * C49963 + C50277 * ae) + C49846 * C50277 * ae) /
        C49722;
    const double C511 =
        (3 * C49941 + C49854 * C49950 + C49963 * C50112) / C49722;
    const double C675 = (C49846 * (4 * C49950 + C49854 * C49963) +
                         (4 * C50271 + C49854 * C50277) * ae) /
                        C49722;
    const double C789 = (C49847 * (4 * C49950 + C49854 * C49963)) / C49722;
    const double C945 = (C49847 * (C49846 * C49963 + C50277 * ae)) / C49722;
    const double C40316 =
        (5 * (3 * C50096 + ae * C50148 + C49847 * C50213) +
         ae * (4 * C50148 + C49847 * C50232) +
         C49847 *
             (4 * C50213 + ae * C50232 +
              C49847 *
                  (3 * C50191 + ae * C50228 +
                   C49847 * (2 * C50184 + ae * C50221 +
                             C49847 * (C49879 + ae * C49847 * C49957 +
                                       C49847 * (ae * C49957 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C40314 = (5 * (3 * C50119 + C49847 * C50148) +
                           C49847 * (4 * C50148 + C49847 * C50232)) /
                          C49722;
    const double C8086 = C8084 + C8073;
    const double C17261 = C17259 + C17248;
    const double C187 = C177 * C50763;
    const double C49785 = C49784 - C49769;
    const double C49827 = C49826 - C49811;
    const double C33414 = C33410 + C33411;
    const double C8087 = C8074 + C8085;
    const double C17262 = C17249 + C17260;
    const double C8570 = C8234 + C8569;
    const double C17739 = C17409 + C17738;
    const double C8723 = C8396 + C8722;
    const double C17892 = C17571 + C17891;
    const double C10837 = C10834 + C10835;
    const double C33415 = C33412 + C33413;
    const double C11551 = C11545 + C11546;
    const double C34129 = C34123 + C34124;
    const double C11388 = C11382 + C11383;
    const double C33966 = C33960 + C33961;
    const double C20617 = C20614 + C20615;
    const double C20725 = C20722 + C20723;
    const double C22845 = C22838 + C22839;
    const double C32379 = C32374 + C32375;
    const double C37991 = C37986 + C37987;
    const double C48165 = C48158 + C48159;
    const double C21061 = C21058 + C21059;
    const double C31721 = C31716 + C31717;
    const double C37321 = C37316 + C37317;
    const double C23517 = C23510 + C23511;
    const double C31879 = C31874 + C31875;
    const double C37491 = C37482 + C37483;
    const double C48833 = C48826 + C48827;
    const double C186 = C176 * C118;
    const double C381 = C369 * C118;
    const double C2363 = C369 * C2345;
    const double C8567 = C369 * C8064;
    const double C17736 = C369 * C17239;
    const double C24520 = C369 * C24502;
    const double C687 = C685 * C118;
    const double C8080 = C685 * C8064;
    const double C17255 = C685 * C17239;
    const double C570 = C558 * C118;
    const double C801 = C799 * C118;
    const double C975 = C969 * C118;
    const double C8720 = C969 * C8064;
    const double C17889 = C969 * C17239;
    const double C20718 =
        (3 * (C50096 +
              ae * (C50058 + C49847 * (C49847 * C50152 + C50090 * ae) +
                    C49847 * C50090 * ae) +
              C49846 * C50196) +
         ae * (C50070 + C49847 * (C49847 * C50166 + C50192 * ae) +
               C49847 * C50192 * ae) +
         C49846 *
             (2 * C50196 +
              ae * (C50065 + C49847 * (C49847 * C50161 + C50185 * ae) +
                    C49847 * C50185 * ae) +
              C49846 *
                  (C50191 +
                   ae * (C50152 +
                         C49847 * (C49847 * C49846 * C49918 + C50180 * ae) +
                         C49847 * C50180 * ae) +
                   C49846 * (ae * (C49907 +
                                   C49847 * (C49847 * C49918 + C49980 * ae) +
                                   C49847 * C49980 * ae) +
                             C49846 * (C49879 + ae * C49847 * C49957 +
                                       C49847 * (ae * C49957 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C50523 = C50521 + C50518;
    const double C50488 = C50487 + C50478;
    const double C382 = C370 * C50763;
    const double C2364 = C370 * C2340;
    const double C8568 = C370 * C50814;
    const double C17737 = C370 * C50814;
    const double C24521 = C370 * C24497;
    const double C688 = C686 * C50763;
    const double C8081 = C686 * C50814;
    const double C17256 = C686 * C50814;
    const double C571 = C559 * C50763;
    const double C802 = C800 * C50763;
    const double C976 = C970 * C50763;
    const double C8721 = C970 * C50814;
    const double C17890 = C970 * C50814;
    const double C6192 = C6185 + C6186;
    const double C14095 = C14090 + C14091;
    const double C41179 = C41174 + C41175;
    const double C45221 = C45214 + C45215;
    const double C5648 = C5635 + C5636;
    const double C44681 = C44668 + C44669;
    const double C19917 =
        ((((0 - (C49720 * C49765) / C49722) * ae) / C49722 - (0 * be) / C49726 +
          C49721 / C49722) /
             C49766 -
         ((C49720 * C49783 + 0) * be) / C49722) /
            C49766 +
        ((C49720 * (C49783 / C49766 -
                    ((C49720 * C49785 + C50920) * be) / C49722 + C49778) +
          C50956) *
         ae) /
            C49722 +
        C49785 / C49766 - ((C49720 * C49778 + C50814) * be) / C49722;
    const double C19918 =
        (C49783 / C49766 - ((C49720 * C49785 + C50920) * be) / C49722 +
         C49778) /
            C49766 +
        ((C49720 *
              (C49785 / C49766 - ((C49720 * C49778 + C50814) * be) / C49722) +
          C50957) *
         ae) /
            C49722 +
        2 * (C49778 / C49766 - (0 * be) / C49722);
    const double C19919 =
        (C49785 / C49766 - ((C49720 * C49778 + C50814) * be) / C49722) /
            C49766 +
        ((C49720 * (C49778 / C49766 - (0 * be) / C49722) + C24497) * ae) /
            C49722;
    const double C24500 =
        C49783 / C49766 - ((C49720 * C49785 + C50920) * be) / C49722 + C49778;
    const double C24501 =
        C49785 / C49766 - ((C49720 * C49778 + C50814) * be) / C49722;
    const double C38937 =
        ((((0 - (C49739 * C49808) / C49722) * ae) / C49722 - (0 * be) / C49726 +
          C49740 / C49722) /
             C49766 -
         ((C49739 * C49825 + 0) * be) / C49722) /
            C49766 +
        ((C49739 * (C49825 / C49766 -
                    ((C49739 * C49827 + C50921) * be) / C49722 + C49820) +
          C50958) *
         ae) /
            C49722 +
        C49827 / C49766 - ((C49739 * C49820 + C50842) * be) / C49722;
    const double C38938 =
        (C49825 / C49766 - ((C49739 * C49827 + C50921) * be) / C49722 +
         C49820) /
            C49766 +
        ((C49739 *
              (C49827 / C49766 - ((C49739 * C49820 + C50842) * be) / C49722) +
          C50959) *
         ae) /
            C49722 +
        2 * (C49820 / C49766 - (0 * be) / C49722);
    const double C38939 =
        (C49827 / C49766 - ((C49739 * C49820 + C50842) * be) / C49722) /
            C49766 +
        ((C49739 * (C49820 / C49766 - (0 * be) / C49722) + C44259) * ae) /
            C49722;
    const double C44260 =
        C49825 / C49766 - ((C49739 * C49827 + C50921) * be) / C49722 + C49820;
    const double C44261 =
        C49827 / C49766 - ((C49739 * C49820 + C50842) * be) / C49722;
    const double C40315 =
        (5 * (3 * C50474 + C49847 * C50523 + C50473 * ae) +
         C49847 * (4 * C50523 +
                   C49847 * (3 * C50193 +
                             C49847 * (2 * C50181 +
                                       C49847 * (C49907 +
                                                 C49847 * (C49847 * C49918 +
                                                           C49980 * ae) +
                                                 C49847 * C49980 * ae) +
                                       C50220 * ae) +
                             C50227 * ae) +
                   C50522 * ae) +
         (4 * C50473 + C49847 * C50522) * ae) /
        C49722;
    const double C20608 =
        (5 * (3 * C50402 + C49846 * C50488 + C50399 * ae) +
         C49846 * (4 * C50488 +
                   C49846 * (3 * C50485 +
                             C49846 * (2 * C50481 +
                                       C49846 * (C49946 +
                                                 C49846 * (C49846 * C49957 +
                                                           C49980 * ae) +
                                                 C50180 * ae) +
                                       C50185 * ae) +
                             C50192 * ae) +
                   C50482 * ae) +
         (4 * C50399 + C49846 * C50482) * ae) /
        C49722;
    const double C20716 =
        (3 * C50402 + C49846 * C50488 + C50399 * ae +
         (3 * C50485 +
          C49846 *
              (2 * C50481 +
               C49846 * (C49946 + C49846 * (C49846 * C49957 + C49980 * ae) +
                         C50180 * ae) +
               C50185 * ae) +
          C50192 * ae) *
             C50112) /
        C49722;
    const double C21052 =
        (C49847 *
         (4 * C50488 +
          C49846 *
              (3 * C50485 +
               C49846 * (2 * C50481 +
                         C49846 * (C49946 +
                                   C49846 * (C49846 * C49957 + C49980 * ae) +
                                   C50180 * ae) +
                         C50185 * ae) +
               C50192 * ae) +
          C50482 * ae)) /
        C49722;
    const double C21324 =
        (2 * C49847 * C50488 +
         C49847 *
             (C50488 +
              (2 * C50481 +
               C49846 * (C49946 + C49846 * (C49846 * C49957 + C49980 * ae) +
                         C50180 * ae) +
               C50185 * ae) *
                  C50112)) /
        C49722;
    const double C24516 = C172 * C24500;
    const double C24515 = C170 * C24500;
    const double C24504 = C168 * C24500;
    const double C24674 = C365 * C24500;
    const double C24673 = C364 * C24500;
    const double C24832 = C554 * C24500;
    const double C24831 = C553 * C24500;
    const double C24984 = C362 * C24500;
    const double C25136 = C551 * C24500;
    const double C25336 = C965 * C24500;
    const double C24518 = C360 * C24501;
    const double C24513 = C362 * C24501;
    const double C24506 = C364 * C24501;
    const double C24676 = C2558 * C24501;
    const double C24671 = C365 * C24501;
    const double C24834 = C2749 * C24501;
    const double C24829 = C965 * C24501;
    const double C24986 = C367 * C24501;
    const double C25138 = C967 * C24501;
    const double C25338 = C2748 * C24501;
    const double C44294 = C44260 * C133;
    const double C44288 = C44260 * C122;
    const double C44286 = C44260 * C121;
    const double C44280 = C44260 * C131;
    const double C44270 = C44260 * C129;
    const double C44264 = C44260 * C120;
    const double C44482 = C44260 * C315;
    const double C44476 = C44260 * C299;
    const double C44474 = C44260 * C296;
    const double C44468 = C44260 * C308;
    const double C44664 = C44260 * C504;
    const double C44658 = C44260 * C488;
    const double C44656 = C44260 * C485;
    const double C44650 = C44260 * C497;
    const double C44834 = C44260 * C306;
    const double C44828 = C44260 * C295;
    const double C44998 = C44260 * C495;
    const double C44992 = C44260 * C484;
    const double C45210 = C44260 * C940;
    const double C45204 = C44260 * C933;
    const double C47240 = C44260 * C298;
    const double C47234 = C44260 * C313;
    const double C47224 = C44260 * C310;
    const double C47218 = C44260 * C297;
    const double C47896 = C44260 * C932;
    const double C47890 = C44260 * C938;
    const double C48154 = C44260 * C1160;
    const double C48148 = C44260 * C1153;
    const double C48318 = C44260 * C1274;
    const double C48312 = C44260 * C1267;
    const double C48822 = C44260 * C1621;
    const double C48816 = C44260 * C1614;
    const double C44296 = C44261 * C493;
    const double C44290 = C44261 * C483;
    const double C44284 = C44261 * C484;
    const double C44278 = C44261 * C495;
    const double C44272 = C44261 * C497;
    const double C44266 = C44261 * C485;
    const double C44484 = C44261 * C1619;
    const double C44478 = C44261 * C1613;
    const double C44472 = C44261 * C933;
    const double C44466 = C44261 * C940;
    const double C44666 = C44261 * C1903;
    const double C44660 = C44261 * C1897;
    const double C44654 = C44261 * C488;
    const double C44648 = C44261 * C504;
    const double C44836 = C44261 * C942;
    const double C44830 = C44261 * C934;
    const double C45000 = C44261 * C506;
    const double C44994 = C44261 * C489;
    const double C45212 = C44261 * C1272;
    const double C45206 = C44261 * C1266;
    const double C47238 = C44261 * C1614;
    const double C47232 = C44261 * C1621;
    const double C47226 = C44261 * C938;
    const double C47220 = C44261 * C932;
    const double C47894 = C44261 * C1267;
    const double C47888 = C44261 * C1274;
    const double C48156 = C44261 * C3266;
    const double C48150 = C44261 * C3262;
    const double C48320 = C44261 * C4622;
    const double C48314 = C44261 * C4615;
    const double C48824 = C44261 * C2720;
    const double C48818 = C44261 * C2716;
    const double C44315 = C44294 + C44295;
    const double C44312 = C44288 + C44289;
    const double C44311 = C44286 + C44287;
    const double C44308 = C44280 + C44281;
    const double C44303 = C44270 + C44271;
    const double C44300 = C44264 + C44265;
    const double C44497 = C44482 + C44483;
    const double C44494 = C44476 + C44477;
    const double C44493 = C44474 + C44475;
    const double C44490 = C44468 + C44469;
    const double C44679 = C44664 + C44665;
    const double C44676 = C44658 + C44659;
    const double C44675 = C44656 + C44657;
    const double C44672 = C44650 + C44651;
    const double C44843 = C44834 + C44835;
    const double C44840 = C44828 + C44829;
    const double C45007 = C44998 + C44999;
    const double C45004 = C44992 + C44993;
    const double C45219 = C45210 + C45211;
    const double C45216 = C45204 + C45205;
    const double C47253 = C47240 + C47241;
    const double C47250 = C47234 + C47235;
    const double C47245 = C47224 + C47225;
    const double C47242 = C47218 + C47219;
    const double C47903 = C47896 + C47897;
    const double C47900 = C47890 + C47891;
    const double C48163 = C48154 + C48155;
    const double C48160 = C48148 + C48149;
    const double C48327 = C48318 + C48319;
    const double C48324 = C48312 + C48313;
    const double C48831 = C48822 + C48823;
    const double C48828 = C48816 + C48817;
    const double C44316 = C44296 + C44297;
    const double C44313 = C44290 + C44291;
    const double C44310 = C44284 + C44285;
    const double C44307 = C44278 + C44279;
    const double C44304 = C44272 + C44273;
    const double C44301 = C44266 + C44267;
    const double C44498 = C44484 + C44485;
    const double C44495 = C44478 + C44479;
    const double C44492 = C44472 + C44473;
    const double C44489 = C44466 + C44467;
    const double C44680 = C44666 + C44667;
    const double C44677 = C44660 + C44661;
    const double C44674 = C44654 + C44655;
    const double C44671 = C44648 + C44649;
    const double C44844 = C44836 + C44837;
    const double C44841 = C44830 + C44831;
    const double C45008 = C45000 + C45001;
    const double C45005 = C44994 + C44995;
    const double C45220 = C45212 + C45213;
    const double C45217 = C45206 + C45207;
    const double C47252 = C47238 + C47239;
    const double C47249 = C47232 + C47233;
    const double C47246 = C47226 + C47227;
    const double C47243 = C47220 + C47221;
    const double C47902 = C47894 + C47895;
    const double C47899 = C47888 + C47889;
    const double C48164 = C48156 + C48157;
    const double C48161 = C48150 + C48151;
    const double C48328 = C48320 + C48321;
    const double C48325 = C48314 + C48315;
    const double C48832 = C48824 + C48825;
    const double C48829 = C48818 + C48819;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C50682 * C50907 -
           (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C50682 * C50718) *
              C50950 +
          (((C8241 + C8240 + C8239 + C8238) * C50948 +
            (C8237 + C8236 + C8235 + C8234) * C50949 +
            (C8565 + C8566 + C8567 + C8568) * C8062) *
               C50682 * C50718 -
           (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
            (C8069 + C8068 + C8067 + C8066) * C50948) *
               C50682 * C50907) *
              C50951 +
          ((C8086 * C50948 + (C8077 + C8076 + C8075 + C8074) * C50949 +
            (C8078 + C8079 + C8080 + C8081) * C8062) *
               C50682 * C50907 -
           (((C117 * C322 + C50778 * C333) * C50814 +
             (C117 * C303 + C50778 * C323) * C8064 + C686 * C50920 +
             C685 * C8063) *
                C8062 +
            (C8568 + C8567 + C8566 + C8565) * C50949 + C8570 * C50948) *
               C50682 * C50718) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C8063 +
              (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
              C2554 * C50814) *
                 C50948 +
             (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
                C50908 -
            (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
             (C3293 * C50814 + C3294 * C8064 +
              (C117 * C499 + C50778 * C516) * C50920 +
              (C117 * C486 + C50778 * C500) * C8063) *
                 C50948) *
                C50746) *
               C50907 +
           (((C3294 * C8063 + C3293 * C50920 + C3292 * C8064 + C3291 * C50814) *
                 C50948 +
             (C8918 + C8919 + C8920 + C8921) * C50949 +
             (C8922 + C8923 + C8924 + C8925) * C8062) *
                C50746 -
            (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
             (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                 C50948) *
                C50908) *
               C50718) *
              C292 +
          ((((C8403 + C8402 + C8401 + C8400) * C50948 +
             (C8399 + C8398 + C8397 + C8396) * C50949 +
             (C8718 + C8719 + C8720 + C8721) * C8062) *
                C50746 -
            (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
             (C8069 + C8068 + C8067 + C8066) * C50948) *
                C50908) *
               C50907 +
           (((C8241 + C8240 + C8239 + C8238) * C50948 +
             (C8237 + C8236 + C8235 + C8234) * C50949 +
             (C8565 + C8566 + C8567 + C8568) * C8062) *
                C50908 -
            (((C117 * C1615 + C50778 * C1623) * C50814 +
              (C117 * C1611 + C50778 * C1616) * C8064 + C970 * C50920 +
              C969 * C8063) *
                 C8062 +
             (C8925 + C8924 + C8923 + C8922) * C50949 +
             (C8921 + C8920 + C8919 + C8918) * C50948) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C50682 * C289 -
           ((C8234 + C8235 + C8236 + C8237) * C8062 +
            (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C50682 * C290 +
           ((C2555 * C8063 + C2556 * C50920 + C2560 * C8064 + C2559 * C50814) *
                C50948 +
            (C8242 + C8243 + C8244 + C8245) * C50949 +
            (C8246 + C8247 + C8248 + C8249) * C8062) *
               C50682 * C291) *
              C292 +
          (((C8241 + C8240 + C8239 + C8238) * C50948 +
            (C8237 + C8236 + C8235 + C8234) * C50949 +
            (C360 * C8063 + C359 * C50920 + C369 * C8064 + C370 * C50814) *
                C8062) *
               C50682 * C290 -
           (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
            (C8069 + C8068 + C8067 + C8066) * C50948) *
               C50682 * C289 -
           (((C117 * C1154 + C50778 * C1162) * C50814 +
             (C117 * C1150 + C50778 * C1155) * C8064 + C370 * C50920 +
             C369 * C8063) *
                C8062 +
            (C8249 + C8248 + C8247 + C8246) * C50949 +
            (C8245 + C8244 + C8243 + C8242) * C50948) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C8063 +
            (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
            C2554 * C50814) *
               C50948 +
           (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
              C50682 * C50666 * C113 -
          (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
           (C8069 + C8068 + C8067 + C8066) * C50948) *
              C50682 * C50666 * C114 +
          (C8086 * C50948 + (C8077 + C8076 + C8075 + C8074) * C50949 +
           (C8078 + C8079 + C8080 + C8081) * C8062) *
              C50682 * C50666 * C115 -
          (((C117 * C675 + C50778 * C677) * C50814 +
            (C117 * C674 + C50778 * C676) * C8064 + C177 * C50920 +
            C176 * C8063) *
               C8062 +
           (C8081 + C8080 + C8079 + C8078) * C50949 + C8087 * C50948) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C480 -
           ((C8396 + C8397 + C8398 + C8399) * C8062 +
            (C8400 + C8401 + C8402 + C8403) * C50949 +
            (C3293 * C50814 + C3294 * C8064 +
             (C117 * C499 + C50778 * C516) * C50920 +
             (C117 * C486 + C50778 * C500) * C8063) *
                C50948) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C8063 +
             (C117 * C502 + C50778 * C517) * C50920 + C3719 * C8064 +
             C3720 * C50814) *
                C50948 +
            (C8404 + C8405 + C8406 + C8407) * C50949 +
            (C8408 + C8409 + C8416 + C8417) * C8062) *
               C482) *
              C50666 * C292 +
          (((C8403 + C8402 + C8401 + C8400) * C50948 +
            (C8399 + C8398 + C8397 + C8396) * C50949 +
            (C549 * C8063 + C548 * C50920 + C969 * C8064 + C970 * C50814) *
                C8062) *
               C481 -
           (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
            (C8069 + C8068 + C8067 + C8066) * C50948) *
               C480 -
           (((C117 * C1268 + C50778 * C1276) * C50814 +
             (C117 * C1264 + C50778 * C1269) * C8064 + C559 * C50920 +
             C558 * C8063) *
                C8062 +
            (C8417 + C8416 + C8409 + C8408) * C50949 +
            (C8407 + C8406 + C8405 + C8404) * C50948) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C117 * C119 + C50778 * C126) * C8063 +
                    (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
                    C2554 * C50814) *
                       C50948 +
                   (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
                      C50908 -
                  (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
                   (C3293 * C50814 + C3294 * C8064 +
                    (C117 * C499 + C50778 * C516) * C50920 +
                    (C117 * C486 + C50778 * C500) * C8063) *
                       C50948) *
                      C50746) *
                     C50666 * C50950 +
                 (((C8403 + C8402 + C8401 + C8400) * C50948 +
                   (C8399 + C8398 + C8397 + C8396) * C50949 +
                   (C8718 + C8719 + C8720 + C8721) * C8062) *
                      C50746 -
                  (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
                   (C8069 + C8068 + C8067 + C8066) * C50948) *
                      C50908) *
                     C50666 * C50951 +
                 ((C8086 * C50948 + (C8077 + C8076 + C8075 + C8074) * C50949 +
                   (C8078 + C8079 + C8080 + C8081) * C8062) *
                      C50908 -
                  (((C117 * C945 + C50778 * C951) * C50814 +
                    (C117 * C936 + C50778 * C946) * C8064 + C800 * C50920 +
                    C799 * C8063) *
                       C8062 +
                   (C8721 + C8720 + C8719 + C8718) * C50949 + C8723 * C50948) *
                      C50746) *
                     C50666 * C673)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C8063 +
            (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
            C2554 * C50814) *
               C50948 +
           (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
              C50682 * C50666 * C113 -
          (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
           (C8069 + C8068 + C8067 + C8066) * C50948) *
              C50682 * C50666 * C114 +
          (C8086 * C50948 + (C8077 + C8076 + C8075 + C8074) * C50949 +
           (C8078 + C8079 + C8080 + C8081) * C8062) *
              C50682 * C50666 * C115 -
          (((C117 * C675 + C50778 * C677) * C50814 +
            (C117 * C674 + C50778 * C676) * C8064 + C177 * C50920 +
            C176 * C8063) *
               C8062 +
           (C8081 + C8080 + C8079 + C8078) * C50949 + C8087 * C50948) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C50682 * C289 -
           ((C8234 + C8235 + C8236 + C8237) * C8062 +
            (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C50682 * C290 +
           ((C2555 * C8063 + C2556 * C50920 + C2560 * C8064 + C2559 * C50814) *
                C50948 +
            (C8242 + C8243 + C8244 + C8245) * C50949 +
            (C8246 + C8247 + C8248 + C8249) * C8062) *
               C50682 * C291) *
              C292 +
          (((C8241 + C8240 + C8239 + C8238) * C50948 +
            (C8237 + C8236 + C8235 + C8234) * C50949 +
            (C360 * C8063 + C359 * C50920 + C369 * C8064 + C370 * C50814) *
                C8062) *
               C50682 * C290 -
           (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
            (C8069 + C8068 + C8067 + C8066) * C50948) *
               C50682 * C289 -
           (((C117 * C1154 + C50778 * C1162) * C50814 +
             (C117 * C1150 + C50778 * C1155) * C8064 + C370 * C50920 +
             C369 * C8063) *
                C8062 +
            (C8249 + C8248 + C8247 + C8246) * C50949 +
            (C8245 + C8244 + C8243 + C8242) * C50948) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C50682 * C50952 -
           (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C50682 * C50953 +
           ((C2555 * C8063 + C2556 * C50920 + C2560 * C8064 + C2559 * C50814) *
                C50948 +
            (C8242 + C8243 + C8244 + C8245) * C50949 +
            (C8246 + C8247 + C8248 + C8249) * C8062) *
               C50682 * C1380) *
              C50899 +
          (((C8241 + C8240 + C8239 + C8238) * C50948 +
            (C8237 + C8236 + C8235 + C8234) * C50949 +
            (C8565 + C8566 + C8567 + C8568) * C8062) *
               C50682 * C50953 -
           (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
            (C8069 + C8068 + C8067 + C8066) * C50948) *
               C50682 * C50952 -
           (((C117 * C1154 + C50778 * C1162) * C50814 +
             (C117 * C1150 + C50778 * C1155) * C8064 + C370 * C50920 +
             C369 * C8063) *
                C8062 +
            (C8249 + C8248 + C8247 + C8246) * C50949 +
            (C8245 + C8244 + C8243 + C8242) * C50948) *
               C50682 * C1380) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C50908 -
           (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
            (C3293 * C50814 + C3294 * C8064 +
             (C117 * C499 + C50778 * C516) * C50920 +
             (C117 * C486 + C50778 * C500) * C8063) *
                C50948) *
               C50746) *
              C50952 +
          (((C3294 * C8063 + C3293 * C50920 + C3292 * C8064 + C3291 * C50814) *
                C50948 +
            (C8918 + C8919 + C8920 + C8921) * C50949 +
            (C8922 + C8923 + C8924 + C8925) * C8062) *
               C50746 -
           (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C50908) *
              C50953 +
          (((C2555 * C8063 + C2556 * C50920 + C2560 * C8064 + C2559 * C50814) *
                C50948 +
            (C8242 + C8243 + C8244 + C8245) * C50949 +
            (C8246 + C8247 + C8248 + C8249) * C8062) *
               C50908 -
           (((C117 * C3269 + C50778 * C3273) * C50814 +
             (C117 * C3264 + C50778 * C3270) * C8064 + C3066 * C50920 +
             C3065 * C8063) *
                C8062 +
            (C3296 * C50814 + C3295 * C8064 + C2747 * C50920 + C2748 * C8063) *
                C50949 +
            (C4222 * C50814 + C4221 * C8064 + C3291 * C50920 + C3292 * C8063) *
                C50948) *
               C50746) *
              C1380) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C8063 +
            (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
            C2554 * C50814) *
               C50948 +
           (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
              C50682 * C1145 -
          (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
           (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
               C50948) *
              C50682 * C1146 +
          ((C2555 * C8063 + C2556 * C50920 + C2560 * C8064 + C2559 * C50814) *
               C50948 +
           (C8242 + C8243 + C8244 + C8245) * C50949 +
           (C8246 + C8247 + C8248 + C8249) * C8062) *
              C50682 * C1147 -
          (((C117 * C2517 + C50778 * C2521) * C50814 +
            (C117 * C2512 + C50778 * C2518) * C8064 + C2564 * C50920 +
            C2563 * C8063) *
               C8062 +
           (C2562 * C50814 + C2561 * C8064 + C2557 * C50920 + C2558 * C8063) *
               C50949 +
           (C3556 * C50814 + C3555 * C8064 + C2559 * C50920 + C2560 * C8063) *
               C50948) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C50682 * C1074 -
           (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C50682 * C50718) *
              C1076 +
          (((C8241 + C8240 + C8239 + C8238) * C50948 +
            (C8237 + C8236 + C8235 + C8234) * C50949 +
            (C8565 + C8566 + C8567 + C8568) * C8062) *
               C50682 * C50718 -
           (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
            (C8069 + C8068 + C8067 + C8066) * C50948) *
               C50682 * C1074) *
              C1077 +
          ((C8086 * C50948 + (C8077 + C8076 + C8075 + C8074) * C50949 +
            (C8078 + C8079 + C8080 + C8081) * C8062) *
               C50682 * C1074 -
           (((C117 * C322 + C50778 * C333) * C50814 +
             (C117 * C303 + C50778 * C323) * C8064 + C686 * C50920 +
             C685 * C8063) *
                C8062 +
            (C8568 + C8567 + C8566 + C8565) * C50949 + C8570 * C50948) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C480 -
           (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
            (C3293 * C50814 + C3294 * C8064 +
             (C117 * C499 + C50778 * C516) * C50920 +
             (C117 * C486 + C50778 * C500) * C8063) *
                C50948) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C8063 +
             (C117 * C502 + C50778 * C517) * C50920 + C3719 * C8064 +
             C3720 * C50814) *
                C50948 +
            (C8404 + C8405 + C8406 + C8407) * C50949 +
            (C8408 + C8409 + C8416 + C8417) * C8062) *
               C482) *
              C1074 +
          (((C3294 * C8063 + C3293 * C50920 + C3292 * C8064 + C3291 * C50814) *
                C50948 +
            (C8918 + C8919 + C8920 + C8921) * C50949 +
            (C8922 + C8923 + C8924 + C8925) * C8062) *
               C481 -
           (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C480 -
           (((C117 * C2723 + C50778 * C2727) * C50814 +
             (C117 * C2718 + C50778 * C2724) * C8064 + C8415 * C50920 +
             C8414 * C8063) *
                C8062 +
            (C2752 * C50814 + C2751 * C8064 + C2750 * C50920 + C2749 * C8063) *
                C50949 +
            (C3722 * C50814 + C3721 * C8064 + C3720 * C50920 + C3719 * C8063) *
                C50948) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C8063 +
              (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
              C2554 * C50814) *
                 C50948 +
             (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
                C50908 -
            (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
             (C3293 * C50814 + C3294 * C8064 +
              (C117 * C499 + C50778 * C516) * C50920 +
              (C117 * C486 + C50778 * C500) * C8063) *
                 C50948) *
                C50746) *
               C1074 +
           (((C3294 * C8063 + C3293 * C50920 + C3292 * C8064 + C3291 * C50814) *
                 C50948 +
             (C8918 + C8919 + C8920 + C8921) * C50949 +
             (C8922 + C8923 + C8924 + C8925) * C8062) *
                C50746 -
            (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
             (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                 C50948) *
                C50908) *
               C50718) *
              C50899 +
          ((((C8403 + C8402 + C8401 + C8400) * C50948 +
             (C8399 + C8398 + C8397 + C8396) * C50949 +
             (C8718 + C8719 + C8720 + C8721) * C8062) *
                C50746 -
            (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
             (C8069 + C8068 + C8067 + C8066) * C50948) *
                C50908) *
               C1074 +
           (((C8241 + C8240 + C8239 + C8238) * C50948 +
             (C8237 + C8236 + C8235 + C8234) * C50949 +
             (C8565 + C8566 + C8567 + C8568) * C8062) *
                C50908 -
            (((C117 * C1615 + C50778 * C1623) * C50814 +
              (C117 * C1611 + C50778 * C1616) * C8064 + C970 * C50920 +
              C969 * C8063) *
                 C8062 +
             (C8925 + C8924 + C8923 + C8922) * C50949 +
             (C8921 + C8920 + C8919 + C8918) * C50948) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C50682 * C1074 -
           (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C50682 * C50718) *
              C1076 +
          (((C8241 + C8240 + C8239 + C8238) * C50948 +
            (C8237 + C8236 + C8235 + C8234) * C50949 +
            (C8565 + C8566 + C8567 + C8568) * C8062) *
               C50682 * C50718 -
           (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
            (C8069 + C8068 + C8067 + C8066) * C50948) *
               C50682 * C1074) *
              C1077 +
          ((C8086 * C50948 + (C8077 + C8076 + C8075 + C8074) * C50949 +
            (C8078 + C8079 + C8080 + C8081) * C8062) *
               C50682 * C1074 -
           (((C117 * C322 + C50778 * C333) * C50814 +
             (C117 * C303 + C50778 * C323) * C8064 + C686 * C50920 +
             C685 * C8063) *
                C8062 +
            (C8568 + C8567 + C8566 + C8565) * C50949 + C8570 * C50948) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C8063 +
            (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
            C2554 * C50814) *
               C50948 +
           (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
              C50682 * C1145 -
          (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
           (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
               C50948) *
              C50682 * C1146 +
          ((C2555 * C8063 + C2556 * C50920 + C2560 * C8064 + C2559 * C50814) *
               C50948 +
           (C8242 + C8243 + C8244 + C8245) * C50949 +
           (C8246 + C8247 + C8248 + C8249) * C8062) *
              C50682 * C1147 -
          (((C117 * C2517 + C50778 * C2521) * C50814 +
            (C117 * C2512 + C50778 * C2518) * C8064 + C2564 * C50920 +
            C2563 * C8063) *
               C8062 +
           (C2562 * C50814 + C2561 * C8064 + C2557 * C50920 + C2558 * C8063) *
               C50949 +
           (C3556 * C50814 + C3555 * C8064 + C2559 * C50920 + C2560 * C8063) *
               C50948) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C8063 +
              (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
              C2554 * C50814) *
                 C50948 +
             (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
                C1725 -
            (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
             (C3293 * C50814 + C3294 * C8064 +
              (C117 * C499 + C50778 * C516) * C50920 +
              (C117 * C486 + C50778 * C500) * C8063) *
                 C50948) *
                C50746) *
               C50907 +
           (((C3294 * C8063 + C3293 * C50920 + C3292 * C8064 + C3291 * C50814) *
                 C50948 +
             (C8918 + C8919 + C8920 + C8921) * C50949 +
             (C8922 + C8923 + C8924 + C8925) * C8062) *
                C50746 -
            (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
             (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                 C50948) *
                C1725) *
               C50718) *
              C50899 +
          ((((C8403 + C8402 + C8401 + C8400) * C50948 +
             (C8399 + C8398 + C8397 + C8396) * C50949 +
             (C8718 + C8719 + C8720 + C8721) * C8062) *
                C50746 -
            (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
             (C8069 + C8068 + C8067 + C8066) * C50948) *
                C1725) *
               C50907 +
           (((C8241 + C8240 + C8239 + C8238) * C50948 +
             (C8237 + C8236 + C8235 + C8234) * C50949 +
             (C8565 + C8566 + C8567 + C8568) * C8062) *
                C1725 -
            (((C117 * C1615 + C50778 * C1623) * C50814 +
              (C117 * C1611 + C50778 * C1616) * C8064 + C970 * C50920 +
              C969 * C8063) *
                 C8062 +
             (C8925 + C8924 + C8923 + C8922) * C50949 +
             (C8921 + C8920 + C8919 + C8918) * C50948) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C50954 -
           (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
            (C3293 * C50814 + C3294 * C8064 +
             (C117 * C499 + C50778 * C516) * C50920 +
             (C117 * C486 + C50778 * C500) * C8063) *
                C50948) *
               C50955 +
           (((C117 * C487 + C50778 * C501) * C8063 +
             (C117 * C502 + C50778 * C517) * C50920 + C3719 * C8064 +
             C3720 * C50814) *
                C50948 +
            (C8404 + C8405 + C8406 + C8407) * C50949 +
            (C8408 + C8409 + C8416 + C8417) * C8062) *
               C2141) *
              C50907 +
          (((C3294 * C8063 + C3293 * C50920 + C3292 * C8064 + C3291 * C50814) *
                C50948 +
            (C8918 + C8919 + C8920 + C8921) * C50949 +
            (C8922 + C8923 + C8924 + C8925) * C8062) *
               C50955 -
           (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C50954 -
           (((C117 * C2723 + C50778 * C2727) * C50814 +
             (C117 * C2718 + C50778 * C2724) * C8064 + C8415 * C50920 +
             C8414 * C8063) *
                C8062 +
            (C2752 * C50814 + C2751 * C8064 + C2750 * C50920 + C2749 * C8063) *
                C50949 +
            (C3722 * C50814 + C3721 * C8064 + C3720 * C50920 + C3719 * C8063) *
                C50948) *
               C2141) *
              C50718) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C1725 -
           (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
            (C3293 * C50814 + C3294 * C8064 +
             (C117 * C499 + C50778 * C516) * C50920 +
             (C117 * C486 + C50778 * C500) * C8063) *
                C50948) *
               C50746) *
              C289 +
          (((C3294 * C8063 + C3293 * C50920 + C3292 * C8064 + C3291 * C50814) *
                C50948 +
            (C8918 + C8919 + C8920 + C8921) * C50949 +
            (C8922 + C8923 + C8924 + C8925) * C8062) *
               C50746 -
           (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C1725) *
              C290 +
          (((C2555 * C8063 + C2556 * C50920 + C2560 * C8064 + C2559 * C50814) *
                C50948 +
            (C8242 + C8243 + C8244 + C8245) * C50949 +
            (C8246 + C8247 + C8248 + C8249) * C8062) *
               C1725 -
           (((C117 * C3269 + C50778 * C3273) * C50814 +
             (C117 * C3264 + C50778 * C3270) * C8064 + C3066 * C50920 +
             C3065 * C8063) *
                C8062 +
            (C3296 * C50814 + C3295 * C8064 + C2747 * C50920 + C2748 * C8063) *
                C50949 +
            (C4222 * C50814 + C4221 * C8064 + C3291 * C50920 + C3292 * C8063) *
                C50948) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C1725 -
           (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
            (C3293 * C50814 + C3294 * C8064 +
             (C117 * C499 + C50778 * C516) * C50920 +
             (C117 * C486 + C50778 * C500) * C8063) *
                C50948) *
               C50746) *
              C50666 * C1076 +
          (((C8403 + C8402 + C8401 + C8400) * C50948 +
            (C8399 + C8398 + C8397 + C8396) * C50949 +
            (C8718 + C8719 + C8720 + C8721) * C8062) *
               C50746 -
           (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
            (C8069 + C8068 + C8067 + C8066) * C50948) *
               C1725) *
              C50666 * C1077 +
          ((C8086 * C50948 + (C8077 + C8076 + C8075 + C8074) * C50949 +
            (C8078 + C8079 + C8080 + C8081) * C8062) *
               C1725 -
           (((C117 * C945 + C50778 * C951) * C50814 +
             (C117 * C936 + C50778 * C946) * C8064 + C800 * C50920 +
             C799 * C8063) *
                C8062 +
            (C8721 + C8720 + C8719 + C8718) * C50949 + C8723 * C50948) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C8063 +
            (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
            C2554 * C50814) *
               C50948 +
           (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
              C1891 -
          (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
           (C3293 * C50814 + C3294 * C8064 +
            (C117 * C499 + C50778 * C516) * C50920 +
            (C117 * C486 + C50778 * C500) * C8063) *
               C50948) *
              C1892 +
          (((C117 * C487 + C50778 * C501) * C8063 +
            (C117 * C502 + C50778 * C517) * C50920 + C3719 * C8064 +
            C3720 * C50814) *
               C50948 +
           (C8404 + C8405 + C8406 + C8407) * C50949 +
           (C8408 + C8409 + C8416 + C8417) * C8062) *
              C1893 -
          (((C117 * C6171 + C50778 * C6173) * C50814 +
            (C117 * C6170 + C50778 * C6172) * C8064 +
            (C117 * C1901 + C50778 * C1908) * C50920 +
            (C117 * C1896 + C50778 * C1902) * C8063) *
               C8062 +
           ((C117 * C4618 + C50778 * C4625) * C50814 +
            (C117 * C4613 + C50778 * C4619) * C8064 +
            (C117 * C1903 + C50778 * C1909) * C50920 +
            (C117 * C1897 + C50778 * C1904) * C8063) *
               C50949 +
           ((C117 * C4622 + C50778 * C4627) * C50814 +
            (C117 * C4615 + C50778 * C4623) * C8064 +
            (C117 * C1905 + C50778 * C1910) * C50920 +
            (C117 * C1898 + C50778 * C1906) * C8063) *
               C50948) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C8063 +
                     (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
                     C2554 * C50814) *
                        C50948 +
                    (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
                       C50954 -
                   (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
                    (C3293 * C50814 + C3294 * C8064 +
                     (C117 * C499 + C50778 * C516) * C50920 +
                     (C117 * C486 + C50778 * C500) * C8063) *
                        C50948) *
                       C50955 +
                   (((C117 * C487 + C50778 * C501) * C8063 +
                     (C117 * C502 + C50778 * C517) * C50920 + C3719 * C8064 +
                     C3720 * C50814) *
                        C50948 +
                    (C8404 + C8405 + C8406 + C8407) * C50949 +
                    (C8408 + C8409 + C8416 + C8417) * C8062) *
                       C2141) *
                      C50666 * C50899 +
                  (((C8403 + C8402 + C8401 + C8400) * C50948 +
                    (C8399 + C8398 + C8397 + C8396) * C50949 +
                    (C8718 + C8719 + C8720 + C8721) * C8062) *
                       C50955 -
                   (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
                    (C8069 + C8068 + C8067 + C8066) * C50948) *
                       C50954 -
                   (((C117 * C1268 + C50778 * C1276) * C50814 +
                     (C117 * C1264 + C50778 * C1269) * C8064 + C559 * C50920 +
                     C558 * C8063) *
                        C8062 +
                    (C8417 + C8416 + C8409 + C8408) * C50949 +
                    (C8407 + C8406 + C8405 + C8404) * C50948) *
                       C2141) *
                      C50666 * C50653)) /
                (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C1725 -
           (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
            (C3293 * C50814 + C3294 * C8064 +
             (C117 * C499 + C50778 * C516) * C50920 +
             (C117 * C486 + C50778 * C500) * C8063) *
                C50948) *
               C50746) *
              C50666 * C1076 +
          (((C8403 + C8402 + C8401 + C8400) * C50948 +
            (C8399 + C8398 + C8397 + C8396) * C50949 +
            (C8718 + C8719 + C8720 + C8721) * C8062) *
               C50746 -
           (C8087 * C8062 + (C8073 + C8072 + C8071 + C8070) * C50949 +
            (C8069 + C8068 + C8067 + C8066) * C50948) *
               C1725) *
              C50666 * C1077 +
          ((C8086 * C50948 + (C8077 + C8076 + C8075 + C8074) * C50949 +
            (C8078 + C8079 + C8080 + C8081) * C8062) *
               C1725 -
           (((C117 * C945 + C50778 * C951) * C50814 +
             (C117 * C936 + C50778 * C946) * C8064 + C800 * C50920 +
             C799 * C8063) *
                C8062 +
            (C8721 + C8720 + C8719 + C8718) * C50949 + C8723 * C50948) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C8063 +
             (C117 * C127 + C50778 * C140) * C50920 + C2553 * C8064 +
             C2554 * C50814) *
                C50948 +
            (C8066 + C8067 + C8068 + C8069) * C50949 + C8086 * C8062) *
               C1725 -
           (C8723 * C8062 + (C8400 + C8401 + C8402 + C8403) * C50949 +
            (C3293 * C50814 + C3294 * C8064 +
             (C117 * C499 + C50778 * C516) * C50920 +
             (C117 * C486 + C50778 * C500) * C8063) *
                C50948) *
               C50746) *
              C289 +
          (((C3294 * C8063 + C3293 * C50920 + C3292 * C8064 + C3291 * C50814) *
                C50948 +
            (C8918 + C8919 + C8920 + C8921) * C50949 +
            (C8922 + C8923 + C8924 + C8925) * C8062) *
               C50746 -
           (C8570 * C8062 + (C8238 + C8239 + C8240 + C8241) * C50949 +
            (C2556 * C50814 + C2555 * C8064 + C2554 * C50920 + C2553 * C8063) *
                C50948) *
               C1725) *
              C290 +
          (((C2555 * C8063 + C2556 * C50920 + C2560 * C8064 + C2559 * C50814) *
                C50948 +
            (C8242 + C8243 + C8244 + C8245) * C50949 +
            (C8246 + C8247 + C8248 + C8249) * C8062) *
               C1725 -
           (((C117 * C3269 + C50778 * C3273) * C50814 +
             (C117 * C3264 + C50778 * C3270) * C8064 + C3066 * C50920 +
             C3065 * C8063) *
                C8062 +
            (C3296 * C50814 + C3295 * C8064 + C2747 * C50920 + C2748 * C8063) *
                C50949 +
            (C4222 * C50814 + C4221 * C8064 + C3291 * C50920 + C3292 * C8063) *
                C50948) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50682 * C50907 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C50682 * C50718) *
              C50950 +
          (((C13854 * C8063 + C13855 * C50920 + C13868 * C8064 +
             C13869 * C50814) *
                C2341 +
            (C14290 * C8063 + C14291 * C50920 + (C11028 + C11029) * C8064 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C50718 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C50682 * C50907) *
              C50951 +
          (((C10828 * C8063 + C10829 * C50920 + C14290 * C8064 +
             C14291 * C50814) *
                C2341 +
            ((C10823 + C10822) * C8063 + (C10821 + C10820) * C50920 +
             (C11384 + C11385) * C8064 + (C11386 + C11387) * C50814) *
                C50626) *
               C50682 * C50907 -
           (((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
                 C50814 +
             (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
                 C8064 +
             (C11387 + C11386) * C50920 + (C11385 + C11384) * C8063) *
                C50626 +
            ((C11031 + C11030) * C50814 + (C11029 + C11028) * C8064 +
             C11372 * C50920 + C11373 * C8063) *
                C2341) *
               C50682 * C50718) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                  C8063 +
              (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                  C50920 +
              (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                 C2341 +
             ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
              C13854 * C8064 + C13855 * C50814) *
                 C50626) *
                C50908 -
            ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
              (C11216 + C11217) * C8063) *
                 C50626 +
             ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
              (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                  C50920 +
              (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                  C8063) *
                 C2341) *
                C50746) *
               C50907 +
           ((((C14767 + C14766) * C8063 + (C14765 + C14764) * C50920 +
              (C10777 * C1614 + C50921 * C1622 + C10778 * C2716 +
               C50842 * C2719) *
                  C8064 +
              (C10777 * C1621 + C50921 * C1626 + C10778 * C2720 +
               C50842 * C2725) *
                  C50814) *
                 C2341 +
             (C14754 * C8063 + C14755 * C50920 + (C14768 + C14769) * C8064 +
              (C14770 + C14771) * C50814) *
                 C50626) *
                C50746 -
            ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
              C13859 * C8063) *
                 C50626 +
             ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
              (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                 C2341) *
                C50908) *
               C50718) *
              C292 +
          (((((C11217 + C11216) * C8063 + (C11215 + C11214) * C50920 +
              C14754 * C8064 + C14755 * C50814) *
                 C2341 +
             ((C11213 + C11212) * C8063 + (C11211 + C11210) * C50920 +
              (C11766 + C11767) * C8064 + (C11768 + C11769) * C50814) *
                 C50626) *
                C50746 -
            ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
              (C10817 + C10816) * C8063) *
                 C50626 +
             (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
              (C10813 + C10812) * C8063) *
                 C2341) *
                C50908) *
               C50907 +
           (((C13854 * C8063 + C13855 * C50920 + C13868 * C8064 +
              C13869 * C50814) *
                 C2341 +
             (C14290 * C8063 + C14291 * C50920 + (C11028 + C11029) * C8064 +
              (C11030 + C11031) * C50814) *
                 C50626) *
                C50908 -
            (((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
               C50921 * C1624) *
                  C50814 +
              (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
               C50921 * C1618) *
                  C8064 +
              (C11769 + C11768) * C50920 + (C11767 + C11766) * C8063) *
                 C50626 +
             ((C14771 + C14770) * C50814 + (C14769 + C14768) * C8064 +
              C14744 * C50920 + C14745 * C8063) *
                 C2341) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50682 * C289 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C50682 * C290 +
           (((C13885 + C13884) * C8063 + (C13883 + C13882) * C50920 +
             (C10777 * C1153 + C50921 * C1161 + C10778 * C3262 +
              C50842 * C3265) *
                 C8064 +
             (C10777 * C1160 + C50921 * C1165 + C10778 * C3266 +
              C50842 * C3271) *
                 C50814) *
                C2341 +
            (C13868 * C8063 + C13869 * C50920 + (C13886 + C13887) * C8064 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C50682 * C291) *
              C292 +
          (((C13854 * C8063 + C13855 * C50920 + C13868 * C8064 +
             C13869 * C50814) *
                C2341 +
            ((C11019 + C11018) * C8063 + (C11017 + C11016) * C50920 +
             (C11028 + C11029) * C8064 + (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C290 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C50682 * C289 -
           (((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
              C50921 * C1163) *
                 C50814 +
             (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
              C50921 * C1157) *
                 C8064 +
             (C11031 + C11030) * C50920 + (C11029 + C11028) * C8063) *
                C50626 +
            ((C13889 + C13888) * C50814 + (C13887 + C13886) * C8064 +
             C13856 * C50920 + C13857 * C8063) *
                C2341) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C8063 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50920 +
            (C10777 * C297 + C50921 * C311 + C10778 * C932 + C50842 * C937) *
                C8064 +
            (C10777 * C310 + C50921 * C327 + C10778 * C938 + C50842 * C947) *
                C50814) *
               C2341 +
           ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
            (C11023 + C11022) * C8064 + (C11021 + C11020) * C50814) *
               C50626) *
              C50682 * C50666 * C113 -
          ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
            (C10817 + C10816) * C8063) *
               C50626 +
           ((C11020 + C11021) * C50814 + (C11022 + C11023) * C8064 +
            (C10815 + C10814) * C50920 + (C10813 + C10812) * C8063) *
               C2341) *
              C50682 * C50666 * C114 +
          ((C10828 * C8063 + C10829 * C50920 + (C11019 + C11018) * C8064 +
            (C11017 + C11016) * C50814) *
               C2341 +
           ((C10823 + C10822) * C8063 + (C10821 + C10820) * C50920 +
            (C11384 + C11385) * C8064 + (C11386 + C11387) * C50814) *
               C50626) *
              C50682 * C50666 * C115 -
          (((C10778 * C945 + C50842 * C951 + C10777 * C321 + C50921 * C332) *
                C50814 +
            (C10778 * C936 + C50842 * C946 + C10777 * C302 + C50921 * C320) *
                C8064 +
            (C10827 + C10826) * C50920 + (C10825 + C10824) * C8063) *
               C50626 +
           ((C11387 + C11386) * C50814 + (C11385 + C11384) * C8064 +
            C10830 * C50920 + C10831 * C8063) *
               C2341) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C480 -
           (((C11765 + C11764) * C50814 + (C11763 + C11762) * C8064 +
             (C11214 + C11215) * C50920 + (C11216 + C11217) * C8063) *
                C50626 +
            ((C10778 * C1274 + C50842 * C1279 + C10777 * C938 + C50921 * C947) *
                 C50814 +
             (C10778 * C1267 + C50842 * C1275 + C10777 * C932 + C50921 * C937) *
                 C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C481 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C8063 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C50920 +
             (C10777 * C1267 + C50921 * C1275 + C10778 * C4615 +
              C50842 * C4623) *
                 C8064 +
             (C10777 * C1274 + C50921 * C1279 + C10778 * C4622 +
              C50842 * C4627) *
                 C50814) *
                C2341 +
            ((C11218 + C11219) * C8063 + (C11220 + C11221) * C50920 +
             (C14092 + C14093) * C8064 + (C14094 + C14095) * C50814) *
                C50626) *
               C482) *
              C50666 * C292 +
          ((((C11217 + C11216) * C8063 + (C11215 + C11214) * C50920 +
             (C11762 + C11763) * C8064 + (C11764 + C11765) * C50814) *
                C2341 +
            ((C11213 + C11212) * C8063 + (C11211 + C11210) * C50920 +
             (C11766 + C11767) * C8064 + (C11768 + C11769) * C50814) *
                C50626) *
               C481 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C480 -
           (((C10778 * C6171 + C50842 * C6173 + C10777 * C1270 +
              C50921 * C1277) *
                 C50814 +
             (C10778 * C6170 + C50842 * C6172 + C10777 * C1265 +
              C50921 * C1271) *
                 C8064 +
             (C11225 + C11224) * C50920 + (C11223 + C11222) * C8063) *
                C50626 +
            ((C14095 + C14094) * C50814 + (C14093 + C14092) * C8064 +
             (C11221 + C11220) * C50920 + (C11219 + C11218) * C8063) *
                C2341) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50908 -
           (((C11765 + C11764) * C50814 + (C11763 + C11762) * C8064 +
             (C11214 + C11215) * C50920 + (C11216 + C11217) * C8063) *
                C50626 +
            ((C10778 * C1274 + C50842 * C1279 + C10777 * C938 + C50921 * C947) *
                 C50814 +
             (C10778 * C1267 + C50842 * C1275 + C10777 * C932 + C50921 * C937) *
                 C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C50746) *
              C50666 * C50950 +
          ((((C11217 + C11216) * C8063 + (C11215 + C11214) * C50920 +
             (C11762 + C11763) * C8064 + (C11764 + C11765) * C50814) *
                C2341 +
            ((C11213 + C11212) * C8063 + (C11211 + C11210) * C50920 +
             (C11766 + C11767) * C8064 + (C11768 + C11769) * C50814) *
                C50626) *
               C50746 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C50908) *
              C50666 * C50951 +
          (((C10828 * C8063 + C10829 * C50920 + C14290 * C8064 +
             C14291 * C50814) *
                C2341 +
            ((C10823 + C10822) * C8063 + (C10821 + C10820) * C50920 +
             (C11384 + C11385) * C8064 + (C11386 + C11387) * C50814) *
                C50626) *
               C50908 -
           (((C10778 * C1268 + C50842 * C1276 + C10777 * C944 + C50921 * C950) *
                 C50814 +
             (C10778 * C1264 + C50842 * C1269 + C10777 * C935 + C50921 * C943) *
                 C8064 +
             (C11550 + C11549) * C50920 + (C11548 + C11547) * C8063) *
                C50626 +
            ((C11769 + C11768) * C50814 + (C11767 + C11766) * C8064 +
             C11535 * C50920 + C11536 * C8063) *
                C2341) *
               C50746) *
              C50666 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C8063 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50920 +
            (C10777 * C297 + C50921 * C311 + C10778 * C932 + C50842 * C937) *
                C8064 +
            (C10777 * C310 + C50921 * C327 + C10778 * C938 + C50842 * C947) *
                C50814) *
               C2341 +
           ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
            (C11023 + C11022) * C8064 + (C11021 + C11020) * C50814) *
               C50626) *
              C50682 * C50666 * C113 -
          ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
            (C10817 + C10816) * C8063) *
               C50626 +
           ((C11020 + C11021) * C50814 + (C11022 + C11023) * C8064 +
            (C10815 + C10814) * C50920 + (C10813 + C10812) * C8063) *
               C2341) *
              C50682 * C50666 * C114 +
          ((C10828 * C8063 + C10829 * C50920 + (C11019 + C11018) * C8064 +
            (C11017 + C11016) * C50814) *
               C2341 +
           ((C10823 + C10822) * C8063 + (C10821 + C10820) * C50920 +
            (C11384 + C11385) * C8064 + (C11386 + C11387) * C50814) *
               C50626) *
              C50682 * C50666 * C115 -
          (((C10778 * C945 + C50842 * C951 + C10777 * C321 + C50921 * C332) *
                C50814 +
            (C10778 * C936 + C50842 * C946 + C10777 * C302 + C50921 * C320) *
                C8064 +
            (C10827 + C10826) * C50920 + (C10825 + C10824) * C8063) *
               C50626 +
           ((C11387 + C11386) * C50814 + (C11385 + C11384) * C8064 +
            C10830 * C50920 + C10831 * C8063) *
               C2341) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50682 * C289 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C50682 * C290 +
           (((C13885 + C13884) * C8063 + (C13883 + C13882) * C50920 +
             (C10777 * C1153 + C50921 * C1161 + C10778 * C3262 +
              C50842 * C3265) *
                 C8064 +
             (C10777 * C1160 + C50921 * C1165 + C10778 * C3266 +
              C50842 * C3271) *
                 C50814) *
                C2341 +
            (C13868 * C8063 + C13869 * C50920 + (C13886 + C13887) * C8064 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C50682 * C291) *
              C292 +
          (((C13854 * C8063 + C13855 * C50920 + C13868 * C8064 +
             C13869 * C50814) *
                C2341 +
            ((C11019 + C11018) * C8063 + (C11017 + C11016) * C50920 +
             (C11028 + C11029) * C8064 + (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C290 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C50682 * C289 -
           (((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
              C50921 * C1163) *
                 C50814 +
             (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
              C50921 * C1157) *
                 C8064 +
             (C11031 + C11030) * C50920 + (C11029 + C11028) * C8063) *
                C50626 +
            ((C13889 + C13888) * C50814 + (C13887 + C13886) * C8064 +
             C13856 * C50920 + C13857 * C8063) *
                C2341) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50682 * C50952 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C50682 * C50953 +
           (((C13885 + C13884) * C8063 + (C13883 + C13882) * C50920 +
             (C15104 + C15105) * C8064 + (C15106 + C15107) * C50814) *
                C2341 +
            (C13868 * C8063 + C13869 * C50920 + (C13886 + C13887) * C8064 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C50682 * C1380) *
              C50899 +
          (((C13854 * C8063 + C13855 * C50920 + C13868 * C8064 +
             C13869 * C50814) *
                C2341 +
            (C14290 * C8063 + C14291 * C50920 + (C11028 + C11029) * C8064 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C50953 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C50682 * C50952 -
           (((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
              C50921 * C1163) *
                 C50814 +
             (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
              C50921 * C1157) *
                 C8064 +
             (C11031 + C11030) * C50920 + (C11029 + C11028) * C8063) *
                C50626 +
            ((C13889 + C13888) * C50814 + (C13887 + C13886) * C8064 +
             C13856 * C50920 + C13857 * C8063) *
                C2341) *
               C50682 * C1380) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50908 -
           ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
             (C11216 + C11217) * C8063) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C50746) *
              C50952 +
          ((((C14767 + C14766) * C8063 + (C14765 + C14764) * C50920 +
             (C15968 + C15969) * C8064 + (C15970 + C15971) * C50814) *
                C2341 +
            (C14754 * C8063 + C14755 * C50920 + (C14768 + C14769) * C8064 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C50746 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C50908) *
              C50953 +
          ((((C13885 + C13884) * C8063 + (C13883 + C13882) * C50920 +
             (C15104 + C15105) * C8064 + (C15106 + C15107) * C50814) *
                C2341 +
            (C13868 * C8063 + C13869 * C50920 + (C13886 + C13887) * C8064 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C50908 -
           (((C10778 * C3704 + C50842 * C3708 + C10777 * C3268 +
              C50921 * C3272) *
                 C50814 +
             (C10778 * C3702 + C50842 * C3705 + C10777 * C3263 +
              C50921 * C3267) *
                 C8064 +
             (C14771 + C14770) * C50920 + (C14769 + C14768) * C8063) *
                C50626 +
            ((C10778 * C3706 + C50842 * C3709 + C10777 * C3266 +
              C50921 * C3271) *
                 C50814 +
             (C10778 * C3703 + C50842 * C3707 + C10777 * C3262 +
              C50921 * C3265) *
                 C8064 +
             (C15971 + C15970) * C50920 + (C15969 + C15968) * C8063) *
                C2341) *
               C50746) *
              C1380) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C8063 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50920 +
            (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
               C2341 +
           ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
            C13854 * C8064 + C13855 * C50814) *
               C50626) *
              C50682 * C1145 -
          ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
            C13859 * C8063) *
               C50626 +
           ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
            (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
               C2341) *
              C50682 * C1146 +
          (((C13885 + C13884) * C8063 + (C13883 + C13882) * C50920 +
            (C15104 + C15105) * C8064 + (C15106 + C15107) * C50814) *
               C2341 +
           (C13868 * C8063 + C13869 * C50920 + (C13886 + C13887) * C8064 +
            (C13888 + C13889) * C50814) *
               C50626) *
              C50682 * C1147 -
          (((C10778 * C4210 + C50842 * C4214 + C10777 * C2516 +
             C50921 * C2520) *
                C50814 +
            (C10778 * C4208 + C50842 * C4211 + C10777 * C2511 +
             C50921 * C2515) *
                C8064 +
            (C13889 + C13888) * C50920 + (C13887 + C13886) * C8063) *
               C50626 +
           ((C10778 * C4212 + C50842 * C4215 + C10777 * C2514 +
             C50921 * C2519) *
                C50814 +
            (C10778 * C4209 + C50842 * C4213 + C10777 * C2510 +
             C50921 * C2513) *
                C8064 +
            (C15107 + C15106) * C50920 + (C15105 + C15104) * C8063) *
               C2341) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50682 * C1074 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C50682 * C50718) *
              C1076 +
          (((C13854 * C8063 + C13855 * C50920 + C13868 * C8064 +
             C13869 * C50814) *
                C2341 +
            (C14290 * C8063 + C14291 * C50920 + (C11028 + C11029) * C8064 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C50718 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C50682 * C1074) *
              C1077 +
          (((C10828 * C8063 + C10829 * C50920 + C14290 * C8064 +
             C14291 * C50814) *
                C2341 +
            ((C10823 + C10822) * C8063 + (C10821 + C10820) * C50920 +
             (C11384 + C11385) * C8064 + (C11386 + C11387) * C50814) *
                C50626) *
               C50682 * C1074 -
           (((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
                 C50814 +
             (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
                 C8064 +
             (C11387 + C11386) * C50920 + (C11385 + C11384) * C8063) *
                C50626 +
            ((C11031 + C11030) * C50814 + (C11029 + C11028) * C8064 +
             C11372 * C50920 + C11373 * C8063) *
                C2341) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C480 -
           ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
             (C11216 + C11217) * C8063) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C481 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C8063 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C50920 +
             (C15310 + C15311) * C8064 + (C15312 + C15313) * C50814) *
                C2341 +
            ((C11218 + C11219) * C8063 + (C11220 + C11221) * C50920 +
             (C14092 + C14093) * C8064 + (C14094 + C14095) * C50814) *
                C50626) *
               C482) *
              C1074 +
          ((((C14767 + C14766) * C8063 + (C14765 + C14764) * C50920 +
             (C10777 * C1614 + C50921 * C1622 + C10778 * C2716 +
              C50842 * C2719) *
                 C8064 +
             (C10777 * C1621 + C50921 * C1626 + C10778 * C2720 +
              C50842 * C2725) *
                 C50814) *
                C2341 +
            (C14754 * C8063 + C14755 * C50920 + (C14768 + C14769) * C8064 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C481 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C480 -
           (((C10778 * C4616 + C50842 * C4624 + C10777 * C2722 +
              C50921 * C2726) *
                 C50814 +
             (C10778 * C4612 + C50842 * C4617 + C10777 * C2717 +
              C50921 * C2721) *
                 C8064 +
             (C14095 + C14094) * C50920 + (C14093 + C14092) * C8063) *
                C50626 +
            ((C10778 * C4620 + C50842 * C4626 + C10777 * C2720 +
              C50921 * C2725) *
                 C50814 +
             (C10778 * C4614 + C50842 * C4621 + C10777 * C2716 +
              C50921 * C2719) *
                 C8064 +
             (C15313 + C15312) * C50920 + (C15311 + C15310) * C8063) *
                C2341) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                  C8063 +
              (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                  C50920 +
              (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                 C2341 +
             ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
              C13854 * C8064 + C13855 * C50814) *
                 C50626) *
                C50908 -
            ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
              (C11216 + C11217) * C8063) *
                 C50626 +
             ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
              (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                  C50920 +
              (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                  C8063) *
                 C2341) *
                C50746) *
               C1074 +
           ((((C14767 + C14766) * C8063 + (C14765 + C14764) * C50920 +
              (C10777 * C1614 + C50921 * C1622 + C10778 * C2716 +
               C50842 * C2719) *
                  C8064 +
              (C10777 * C1621 + C50921 * C1626 + C10778 * C2720 +
               C50842 * C2725) *
                  C50814) *
                 C2341 +
             (C14754 * C8063 + C14755 * C50920 + (C14768 + C14769) * C8064 +
              (C14770 + C14771) * C50814) *
                 C50626) *
                C50746 -
            ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
              C13859 * C8063) *
                 C50626 +
             ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
              (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                 C2341) *
                C50908) *
               C50718) *
              C50899 +
          (((((C11217 + C11216) * C8063 + (C11215 + C11214) * C50920 +
              C14754 * C8064 + C14755 * C50814) *
                 C2341 +
             ((C11213 + C11212) * C8063 + (C11211 + C11210) * C50920 +
              (C11766 + C11767) * C8064 + (C11768 + C11769) * C50814) *
                 C50626) *
                C50746 -
            ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
              (C10817 + C10816) * C8063) *
                 C50626 +
             (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
              (C10813 + C10812) * C8063) *
                 C2341) *
                C50908) *
               C1074 +
           (((C13854 * C8063 + C13855 * C50920 + C13868 * C8064 +
              C13869 * C50814) *
                 C2341 +
             (C14290 * C8063 + C14291 * C50920 + (C11028 + C11029) * C8064 +
              (C11030 + C11031) * C50814) *
                 C50626) *
                C50908 -
            (((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
               C50921 * C1624) *
                  C50814 +
              (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
               C50921 * C1618) *
                  C8064 +
              (C11769 + C11768) * C50920 + (C11767 + C11766) * C8063) *
                 C50626 +
             ((C14771 + C14770) * C50814 + (C14769 + C14768) * C8064 +
              C14744 * C50920 + C14745 * C8063) *
                 C2341) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50682 * C1074 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C50682 * C50718) *
              C1076 +
          (((C13854 * C8063 + C13855 * C50920 + C13868 * C8064 +
             C13869 * C50814) *
                C2341 +
            (C14290 * C8063 + C14291 * C50920 + (C11028 + C11029) * C8064 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C50718 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C50682 * C1074) *
              C1077 +
          (((C10828 * C8063 + C10829 * C50920 + C14290 * C8064 +
             C14291 * C50814) *
                C2341 +
            ((C10823 + C10822) * C8063 + (C10821 + C10820) * C50920 +
             (C11384 + C11385) * C8064 + (C11386 + C11387) * C50814) *
                C50626) *
               C50682 * C1074 -
           (((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
                 C50814 +
             (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
                 C8064 +
             (C11387 + C11386) * C50920 + (C11385 + C11384) * C8063) *
                C50626 +
            ((C11031 + C11030) * C50814 + (C11029 + C11028) * C8064 +
             C11372 * C50920 + C11373 * C8063) *
                C2341) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C8063 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50920 +
            (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
               C2341 +
           ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
            C13854 * C8064 + C13855 * C50814) *
               C50626) *
              C50682 * C1145 -
          ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
            C13859 * C8063) *
               C50626 +
           ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
            (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
               C2341) *
              C50682 * C1146 +
          (((C13885 + C13884) * C8063 + (C13883 + C13882) * C50920 +
            (C15104 + C15105) * C8064 + (C15106 + C15107) * C50814) *
               C2341 +
           (C13868 * C8063 + C13869 * C50920 + (C13886 + C13887) * C8064 +
            (C13888 + C13889) * C50814) *
               C50626) *
              C50682 * C1147 -
          (((C10778 * C4210 + C50842 * C4214 + C10777 * C2516 +
             C50921 * C2520) *
                C50814 +
            (C10778 * C4208 + C50842 * C4211 + C10777 * C2511 +
             C50921 * C2515) *
                C8064 +
            (C13889 + C13888) * C50920 + (C13887 + C13886) * C8063) *
               C50626 +
           ((C10778 * C4212 + C50842 * C4215 + C10777 * C2514 +
             C50921 * C2519) *
                C50814 +
            (C10778 * C4209 + C50842 * C4213 + C10777 * C2510 +
             C50921 * C2513) *
                C8064 +
            (C15107 + C15106) * C50920 + (C15105 + C15104) * C8063) *
               C2341) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                  C8063 +
              (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                  C50920 +
              (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                 C2341 +
             ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
              C13854 * C8064 + C13855 * C50814) *
                 C50626) *
                C1725 -
            ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
              (C11216 + C11217) * C8063) *
                 C50626 +
             ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
              (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                  C50920 +
              (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                  C8063) *
                 C2341) *
                C50746) *
               C50907 +
           ((((C14767 + C14766) * C8063 + (C14765 + C14764) * C50920 +
              (C15968 + C15969) * C8064 + (C15970 + C15971) * C50814) *
                 C2341 +
             (C14754 * C8063 + C14755 * C50920 + (C14768 + C14769) * C8064 +
              (C14770 + C14771) * C50814) *
                 C50626) *
                C50746 -
            ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
              C13859 * C8063) *
                 C50626 +
             ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
              (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                 C2341) *
                C1725) *
               C50718) *
              C50899 +
          (((((C11217 + C11216) * C8063 + (C11215 + C11214) * C50920 +
              C14754 * C8064 + C14755 * C50814) *
                 C2341 +
             ((C11213 + C11212) * C8063 + (C11211 + C11210) * C50920 +
              (C11766 + C11767) * C8064 + (C11768 + C11769) * C50814) *
                 C50626) *
                C50746 -
            ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
              (C10817 + C10816) * C8063) *
                 C50626 +
             (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
              (C10813 + C10812) * C8063) *
                 C2341) *
                C1725) *
               C50907 +
           (((C13854 * C8063 + C13855 * C50920 + C13868 * C8064 +
              C13869 * C50814) *
                 C2341 +
             (C14290 * C8063 + C14291 * C50920 + (C11028 + C11029) * C8064 +
              (C11030 + C11031) * C50814) *
                 C50626) *
                C1725 -
            (((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
               C50921 * C1624) *
                  C50814 +
              (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
               C50921 * C1618) *
                  C8064 +
              (C11769 + C11768) * C50920 + (C11767 + C11766) * C8063) *
                 C50626 +
             ((C14771 + C14770) * C50814 + (C14769 + C14768) * C8064 +
              C14744 * C50920 + C14745 * C8063) *
                 C2341) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50954 -
           ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
             (C11216 + C11217) * C8063) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C50955 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C8063 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C50920 +
             (C15310 + C15311) * C8064 + (C15312 + C15313) * C50814) *
                C2341 +
            ((C11218 + C11219) * C8063 + (C11220 + C11221) * C50920 +
             (C14092 + C14093) * C8064 + (C14094 + C14095) * C50814) *
                C50626) *
               C2141) *
              C50907 +
          ((((C14767 + C14766) * C8063 + (C14765 + C14764) * C50920 +
             (C15968 + C15969) * C8064 + (C15970 + C15971) * C50814) *
                C2341 +
            (C14754 * C8063 + C14755 * C50920 + (C14768 + C14769) * C8064 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C50955 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C50954 -
           (((C10778 * C4616 + C50842 * C4624 + C10777 * C2722 +
              C50921 * C2726) *
                 C50814 +
             (C10778 * C4612 + C50842 * C4617 + C10777 * C2717 +
              C50921 * C2721) *
                 C8064 +
             (C14095 + C14094) * C50920 + (C14093 + C14092) * C8063) *
                C50626 +
            ((C10778 * C4620 + C50842 * C4626 + C10777 * C2720 +
              C50921 * C2725) *
                 C50814 +
             (C10778 * C4614 + C50842 * C4621 + C10777 * C2716 +
              C50921 * C2719) *
                 C8064 +
             (C15313 + C15312) * C50920 + (C15311 + C15310) * C8063) *
                C2341) *
               C2141) *
              C50718) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C1725 -
           ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
             (C11216 + C11217) * C8063) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C50746) *
              C289 +
          ((((C14767 + C14766) * C8063 + (C14765 + C14764) * C50920 +
             (C15968 + C15969) * C8064 + (C15970 + C15971) * C50814) *
                C2341 +
            (C14754 * C8063 + C14755 * C50920 + (C14768 + C14769) * C8064 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C50746 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C1725) *
              C290 +
          ((((C13885 + C13884) * C8063 + (C13883 + C13882) * C50920 +
             (C15104 + C15105) * C8064 + (C15106 + C15107) * C50814) *
                C2341 +
            (C13868 * C8063 + C13869 * C50920 + (C13886 + C13887) * C8064 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C1725 -
           (((C10778 * C3704 + C50842 * C3708 + C10777 * C3268 +
              C50921 * C3272) *
                 C50814 +
             (C10778 * C3702 + C50842 * C3705 + C10777 * C3263 +
              C50921 * C3267) *
                 C8064 +
             (C14771 + C14770) * C50920 + (C14769 + C14768) * C8063) *
                C50626 +
            ((C10778 * C3706 + C50842 * C3709 + C10777 * C3266 +
              C50921 * C3271) *
                 C50814 +
             (C10778 * C3703 + C50842 * C3707 + C10777 * C3262 +
              C50921 * C3265) *
                 C8064 +
             (C15971 + C15970) * C50920 + (C15969 + C15968) * C8063) *
                C2341) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C1725 -
           ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
             (C11216 + C11217) * C8063) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C50746) *
              C50666 * C1076 +
          ((((C11217 + C11216) * C8063 + (C11215 + C11214) * C50920 +
             C14754 * C8064 + C14755 * C50814) *
                C2341 +
            ((C11213 + C11212) * C8063 + (C11211 + C11210) * C50920 +
             (C11766 + C11767) * C8064 + (C11768 + C11769) * C50814) *
                C50626) *
               C50746 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C1725) *
              C50666 * C1077 +
          (((C10828 * C8063 + C10829 * C50920 + C14290 * C8064 +
             C14291 * C50814) *
                C2341 +
            ((C10823 + C10822) * C8063 + (C10821 + C10820) * C50920 +
             (C11384 + C11385) * C8064 + (C11386 + C11387) * C50814) *
                C50626) *
               C1725 -
           (((C10778 * C1268 + C50842 * C1276 + C10777 * C944 + C50921 * C950) *
                 C50814 +
             (C10778 * C1264 + C50842 * C1269 + C10777 * C935 + C50921 * C943) *
                 C8064 +
             (C11550 + C11549) * C50920 + (C11548 + C11547) * C8063) *
                C50626 +
            ((C11769 + C11768) * C50814 + (C11767 + C11766) * C8064 +
             C11535 * C50920 + C11536 * C8063) *
                C2341) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C8063 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50920 +
            (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
               C2341 +
           ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
            C13854 * C8064 + C13855 * C50814) *
               C50626) *
              C1891 -
          ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
            (C11216 + C11217) * C8063) *
               C50626 +
           ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50920 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C8063) *
               C2341) *
              C1892 +
          (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                C8063 +
            (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                C50920 +
            (C15310 + C15311) * C8064 + (C15312 + C15313) * C50814) *
               C2341 +
           ((C11218 + C11219) * C8063 + (C11220 + C11221) * C50920 +
            (C14092 + C14093) * C8064 + (C14094 + C14095) * C50814) *
               C50626) *
              C1893 -
          (((C10778 * C6584 + C50842 * C6588 + C10777 * C4618 +
             C50921 * C4625) *
                C50814 +
            (C10778 * C6582 + C50842 * C6585 + C10777 * C4613 +
             C50921 * C4619) *
                C8064 +
            (C10778 * C5606 + C50842 * C5610 + C10777 * C1903 +
             C50921 * C1909) *
                C50920 +
            (C10778 * C5601 + C50842 * C5605 + C10777 * C1897 +
             C50921 * C1904) *
                C8063) *
               C50626 +
           ((C10778 * C6586 + C50842 * C6589 + C10777 * C4622 +
             C50921 * C4627) *
                C50814 +
            (C10778 * C6583 + C50842 * C6587 + C10777 * C4615 +
             C50921 * C4623) *
                C8064 +
            (C10778 * C5604 + C50842 * C5609 + C10777 * C1905 +
             C50921 * C1910) *
                C50920 +
            (C10778 * C5600 + C50842 * C5603 + C10777 * C1898 +
             C50921 * C1906) *
                C8063) *
               C2341) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C50954 -
           ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
             (C11216 + C11217) * C8063) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C50955 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C8063 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C50920 +
             (C15310 + C15311) * C8064 + (C15312 + C15313) * C50814) *
                C2341 +
            ((C11218 + C11219) * C8063 + (C11220 + C11221) * C50920 +
             (C14092 + C14093) * C8064 + (C14094 + C14095) * C50814) *
                C50626) *
               C2141) *
              C50666 * C50899 +
          ((((C11217 + C11216) * C8063 + (C11215 + C11214) * C50920 +
             C14754 * C8064 + C14755 * C50814) *
                C2341 +
            ((C11213 + C11212) * C8063 + (C11211 + C11210) * C50920 +
             (C11766 + C11767) * C8064 + (C11768 + C11769) * C50814) *
                C50626) *
               C50955 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C50954 -
           (((C10778 * C6171 + C50842 * C6173 + C10777 * C1270 +
              C50921 * C1277) *
                 C50814 +
             (C10778 * C6170 + C50842 * C6172 + C10777 * C1265 +
              C50921 * C1271) *
                 C8064 +
             (C11225 + C11224) * C50920 + (C11223 + C11222) * C8063) *
                C50626 +
            ((C14095 + C14094) * C50814 + (C14093 + C14092) * C8064 +
             (C11221 + C11220) * C50920 + (C11219 + C11218) * C8063) *
                C2341) *
               C2141) *
              C50666 * C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C1725 -
           ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
             (C11216 + C11217) * C8063) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C50746) *
              C50666 * C1076 +
          ((((C11217 + C11216) * C8063 + (C11215 + C11214) * C50920 +
             C14754 * C8064 + C14755 * C50814) *
                C2341 +
            ((C11213 + C11212) * C8063 + (C11211 + C11210) * C50920 +
             (C11766 + C11767) * C8064 + (C11768 + C11769) * C50814) *
                C50626) *
               C50746 -
           ((C11372 * C50814 + C11373 * C8064 + (C10819 + C10818) * C50920 +
             (C10817 + C10816) * C8063) *
                C50626 +
            (C13858 * C50814 + C13859 * C8064 + (C10815 + C10814) * C50920 +
             (C10813 + C10812) * C8063) *
                C2341) *
               C1725) *
              C50666 * C1077 +
          (((C10828 * C8063 + C10829 * C50920 + C14290 * C8064 +
             C14291 * C50814) *
                C2341 +
            ((C10823 + C10822) * C8063 + (C10821 + C10820) * C50920 +
             (C11384 + C11385) * C8064 + (C11386 + C11387) * C50814) *
                C50626) *
               C1725 -
           (((C10778 * C1268 + C50842 * C1276 + C10777 * C944 + C50921 * C950) *
                 C50814 +
             (C10778 * C1264 + C50842 * C1269 + C10777 * C935 + C50921 * C943) *
                 C8064 +
             (C11550 + C11549) * C50920 + (C11548 + C11547) * C8063) *
                C50626 +
            ((C11769 + C11768) * C50814 + (C11767 + C11766) * C8064 +
             C11535 * C50920 + C11536 * C8063) *
                C2341) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C8063 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50920 +
             (C13878 + C13879) * C8064 + (C13880 + C13881) * C50814) *
                C2341 +
            ((C10812 + C10813) * C8063 + (C10814 + C10815) * C50920 +
             C13854 * C8064 + C13855 * C50814) *
                C50626) *
               C1725 -
           ((C14744 * C50814 + C14745 * C8064 + (C11214 + C11215) * C50920 +
             (C11216 + C11217) * C8063) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C8064 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50920 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C8063) *
                C2341) *
               C50746) *
              C289 +
          ((((C14767 + C14766) * C8063 + (C14765 + C14764) * C50920 +
             (C15968 + C15969) * C8064 + (C15970 + C15971) * C50814) *
                C2341 +
            (C14754 * C8063 + C14755 * C50920 + (C14768 + C14769) * C8064 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C50746 -
           ((C13856 * C50814 + C13857 * C8064 + C13858 * C50920 +
             C13859 * C8063) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C8064 +
             (C13881 + C13880) * C50920 + (C13879 + C13878) * C8063) *
                C2341) *
               C1725) *
              C290 +
          ((((C13885 + C13884) * C8063 + (C13883 + C13882) * C50920 +
             (C15104 + C15105) * C8064 + (C15106 + C15107) * C50814) *
                C2341 +
            (C13868 * C8063 + C13869 * C50920 + (C13886 + C13887) * C8064 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C1725 -
           (((C10778 * C3704 + C50842 * C3708 + C10777 * C3268 +
              C50921 * C3272) *
                 C50814 +
             (C10778 * C3702 + C50842 * C3705 + C10777 * C3263 +
              C50921 * C3267) *
                 C8064 +
             (C14771 + C14770) * C50920 + (C14769 + C14768) * C8063) *
                C50626 +
            ((C10778 * C3706 + C50842 * C3709 + C10777 * C3266 +
              C50921 * C3271) *
                 C50814 +
             (C10778 * C3703 + C50842 * C3707 + C10777 * C3262 +
              C50921 * C3265) *
                 C8064 +
             (C15971 + C15970) * C50920 + (C15969 + C15968) * C8063) *
                C2341) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[30] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50682 * C50907 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C50682 * C50718) *
                      C50950 +
                  (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                    (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                       C50682 * C50718 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C50682 * C50907) *
                      C50951 +
                  (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
                    (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
                       C50682 * C50907 -
                   (((C117 * C1154 + C50778 * C1162) * C2340 +
                     (C117 * C1150 + C50778 * C1155) * C2345 + C370 * C2339 +
                     C369 * C2344 + C359 * C2338 + C360 * C2343) *
                        C50626 +
                    (C2910 + C2909 + C2908 + C2907 + C2906 + C2905) * C2341) *
                       C50682 * C50718) *
                      C673)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50682 * C50907 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C50682 * C50718) *
                      C50950 +
                  (((C376 + C375) * C107 + (C374 + C373) * C108 +
                    (C372 + C371) * C109 + (C687 + C688) * C110) *
                       C50682 * C50718 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50682 * C50907) *
                      C50951 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C50682 * C50907 -
                   (((C117 * C675 + C50778 * C677) * C50763 +
                     (C117 * C674 + C50778 * C676) * C118) *
                        C110 +
                    (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
                       C50682 * C50718) *
                      C673)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                      C5213 * C500 + C5217 * C487 + C5214 * C501) *
                         C118 +
                     (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                      C5213 * C516 + C5217 * C502 + C5214 * C517) *
                         C50763) *
                        C2341 +
                    ((C5255 + C5256 + C5257) * C118 +
                     (C5258 + C5259 + C5260) * C50763) *
                        C50626) *
                       C50682 * C50907 -
                   (((C5443 + C5444 + C5445) * C50763 +
                     (C5446 + C5447 + C5448) * C118) *
                        C50626 +
                    ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 +
                      C5213 * C947 + C5215 * C310 + C5212 * C327) *
                         C50763 +
                     (C5217 * C1267 + C5214 * C1275 + C5216 * C932 +
                      C5213 * C937 + C5215 * C297 + C5212 * C311) *
                         C118) *
                        C2341) *
                       C50682 * C50718) *
                      C50950 +
                  ((((C5448 + C5447 + C5446) * C118 +
                     (C5445 + C5444 + C5443) * C50763) *
                        C2341 +
                    ((C5807 + C5808 + C5809) * C118 +
                     (C5810 + C5811 + C5812) * C50763) *
                        C50626) *
                       C50682 * C50718 -
                   (((C5261 + C5262 + C5263) * C50763 +
                     (C5264 + C5265 + C5266) * C118) *
                        C50626 +
                    ((C5260 + C5259 + C5258) * C50763 +
                     (C5257 + C5256 + C5255) * C118) *
                        C2341) *
                       C50682 * C50907) *
                      C50951 +
                  ((((C5266 + C5265 + C5264) * C118 +
                     (C5263 + C5262 + C5261) * C50763) *
                        C2341 +
                    ((C5267 + C5268 + C5269) * C118 +
                     (C5270 + C5271 + C5272) * C50763) *
                        C50626) *
                       C50682 * C50907 -
                   (((C5217 * C1268 + C5214 * C1276 + C5216 * C944 +
                      C5213 * C950 + C5215 * C304 + C5212 * C324) *
                         C50763 +
                     (C5217 * C1264 + C5214 * C1269 + C5216 * C935 +
                      C5213 * C943 + C5215 * C294 + C5212 * C305) *
                         C118) *
                        C50626 +
                    ((C5812 + C5811 + C5810) * C50763 +
                     (C5809 + C5808 + C5807) * C118) *
                        C2341) *
                       C50682 * C50718) *
                      C673)) /
                    (p * q * std::sqrt(p + q));
    d2ee[31] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C2343 +
                      (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                      C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                         C2341 +
                     (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                        C50908 -
                    ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                     (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                      C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                      (C117 * C486 + C50778 * C500) * C2343) *
                         C2341) *
                        C50746) *
                       C50907 +
                   (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                      C3291 * C2339 + (C117 * C3262 + C50778 * C3265) * C2345 +
                      (C117 * C3266 + C50778 * C3271) * C2340) *
                         C2341 +
                     (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                        C50746 -
                    ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                     (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                      C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                         C2341) *
                        C50908) *
                       C50718) *
                      C292 +
                  ((((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                     (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                        C50746 -
                    ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                     (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                        C50908) *
                       C50907 +
                   (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                     (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                        C50908 -
                    (((C117 * C3269 + C50778 * C3273) * C2340 +
                      (C117 * C3264 + C50778 * C3270) * C2345 + C3066 * C2339 +
                      C3065 * C2344 + C968 * C2338 + C967 * C2343) *
                         C50626 +
                     (C3298 + C3297 + C3286 + C3285 + C3284 + C3283) * C2341) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C118 +
                      (C117 * C127 + C50778 * C140) * C50763) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C50908 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50778 * C516) * C50763 +
                      (C117 * C486 + C50778 * C500) * C118) *
                         C107) *
                        C50746) *
                       C50907 +
                   ((((C117 * C932 + C50778 * C937) * C118 +
                      (C117 * C938 + C50778 * C947) * C50763) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50746 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50778 * C327) * C50763 +
                      (C117 * C297 + C50778 * C311) * C118) *
                         C107) *
                        C50908) *
                       C50718) *
                      C292 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50746 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C50908) *
                       C50907 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C50908 -
                    (((C117 * C945 + C50778 * C951) * C50763 +
                      (C117 * C936 + C50778 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                       C5213 * C500 + C5217 * C487 + C5214 * C501) *
                          C118 +
                      (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                       C5213 * C516 + C5217 * C502 + C5214 * C517) *
                          C50763) *
                         C2341 +
                     ((C5255 + C5256 + C5257) * C118 +
                      (C5258 + C5259 + C5260) * C50763) *
                         C50626) *
                        C50908 -
                    (((C5637 + C5638 + C5639) * C50763 +
                      (C5640 + C5641 + C5642) * C118) *
                         C50626 +
                     ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                       C5213 * C517 + C5215 * C499 + C5212 * C516) *
                          C50763 +
                      (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                       C5213 * C501 + C5215 * C486 + C5212 * C500) *
                          C118) *
                         C2341) *
                        C50746) *
                       C50907 +
                   ((((C5215 * C932 + C5212 * C937 + C5216 * C1267 +
                       C5213 * C1275 + C5217 * C4615 + C5214 * C4623) *
                          C118 +
                      (C5215 * C938 + C5212 * C947 + C5216 * C1274 +
                       C5213 * C1279 + C5217 * C4622 + C5214 * C4627) *
                          C50763) *
                         C2341 +
                     ((C6187 + C6188 + C6189) * C118 +
                      (C6190 + C6191 + C6192) * C50763) *
                         C50626) *
                        C50746 -
                    (((C5443 + C5444 + C5445) * C50763 +
                      (C5446 + C5447 + C5448) * C118) *
                         C50626 +
                     ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 +
                       C5213 * C947 + C5215 * C310 + C5212 * C327) *
                          C50763 +
                      (C5217 * C1267 + C5214 * C1275 + C5216 * C932 +
                       C5213 * C937 + C5215 * C297 + C5212 * C311) *
                          C118) *
                         C2341) *
                        C50908) *
                       C50718) *
                      C292 +
                  (((((C5642 + C5641 + C5640) * C118 +
                      (C5639 + C5638 + C5637) * C50763) *
                         C2341 +
                     ((C5971 + C5972 + C5973) * C118 +
                      (C5974 + C5975 + C5976) * C50763) *
                         C50626) *
                        C50746 -
                    (((C5261 + C5262 + C5263) * C50763 +
                      (C5264 + C5265 + C5266) * C118) *
                         C50626 +
                     ((C5260 + C5259 + C5258) * C50763 +
                      (C5257 + C5256 + C5255) * C118) *
                         C2341) *
                        C50908) *
                       C50907 +
                   ((((C5448 + C5447 + C5446) * C118 +
                      (C5445 + C5444 + C5443) * C50763) *
                         C2341 +
                     ((C5807 + C5808 + C5809) * C118 +
                      (C5810 + C5811 + C5812) * C50763) *
                         C50626) *
                        C50908 -
                    (((C5217 * C6171 + C5214 * C6173 + C5216 * C1270 +
                       C5213 * C1277 + C5215 * C942 + C5212 * C949) *
                          C50763 +
                      (C5217 * C6170 + C5214 * C6172 + C5216 * C1265 +
                       C5213 * C1271 + C5215 * C934 + C5212 * C941) *
                          C118) *
                         C50626 +
                     ((C6192 + C6191 + C6190) * C50763 +
                      (C6189 + C6188 + C6187) * C118) *
                         C2341) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50778 * C126) * C118 +
                (C117 * C127 + C50778 * C140) * C50763) *
                   C107 +
               (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                  C50682 * C50666 * C113 -
              (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
               (C179 + C178) * C107) *
                  C50682 * C50666 * C114 +
              (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
               (C186 + C187) * C110) *
                  C50682 * C50666 * C115 -
              (((C117 * C138 + C50778 * C146) * C50763 +
                (C117 * C125 + C50778 * C139) * C118) *
                   C110 +
               (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
                  C50682 * C50666 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50778 * C126) * C118 +
                 (C117 * C127 + C50778 * C140) * C50763) *
                    C107 +
                (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                   C50682 * C289 -
               ((C371 + C372) * C110 + (C373 + C374) * C109 +
                (C375 + C376) * C108 +
                ((C117 * C310 + C50778 * C327) * C50763 +
                 (C117 * C297 + C50778 * C311) * C118) *
                    C107) *
                   C50682 * C290 +
               (((C117 * C298 + C50778 * C312) * C118 +
                 (C117 * C313 + C50778 * C328) * C50763) *
                    C107 +
                (C377 + C378) * C108 + (C379 + C380) * C109 +
                (C381 + C382) * C110) *
                   C50682 * C291) *
                  C292 +
              (((C376 + C375) * C107 + (C374 + C373) * C108 +
                (C372 + C371) * C109 +
                ((C117 * C302 + C50778 * C320) * C118 +
                 (C117 * C321 + C50778 * C332) * C50763) *
                    C110) *
                   C50682 * C290 -
               (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                (C179 + C178) * C107) *
                   C50682 * C289 -
               (((C117 * C322 + C50778 * C333) * C50763 +
                 (C117 * C303 + C50778 * C323) * C118) *
                    C110 +
                (C382 + C381) * C109 + (C380 + C379) * C108 +
                (C378 + C377) * C107) *
                   C50682 * C291) *
                  C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C480 -
           ((C560 + C561) * C110 + (C562 + C563) * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50778 * C516) * C50763 +
             (C117 * C486 + C50778 * C500) * C118) *
                C107) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C118 +
             (C117 * C502 + C50778 * C517) * C50763) *
                C107 +
            (C566 + C567) * C108 + (C568 + C569) * C109 +
            (C570 + C571) * C110) *
               C482) *
              C50666 * C292 +
          (((C565 + C564) * C107 + (C563 + C562) * C108 + (C561 + C560) * C109 +
            ((C117 * C491 + C50778 * C509) * C118 +
             (C117 * C510 + C50778 * C521) * C50763) *
                C110) *
               C481 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C480 -
           (((C117 * C511 + C50778 * C522) * C50763 +
             (C117 * C492 + C50778 * C512) * C118) *
                C110 +
            (C571 + C570) * C109 + (C569 + C568) * C108 +
            (C567 + C566) * C107) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 +
            (C117 * C297 + C50778 * C311) * C2344 +
            (C117 * C310 + C50778 * C327) * C2339 +
            (C117 * C298 + C50778 * C312) * C2345 +
            (C117 * C313 + C50778 * C328) * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C50682 * C50666 * C113 -
          ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
           (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
              C50682 * C50666 * C114 +
          ((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
           (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
              C50682 * C50666 * C115 -
          (((C117 * C322 + C50778 * C333) * C2340 +
            (C117 * C303 + C50778 * C323) * C2345 + C686 * C2339 +
            C685 * C2344 + C174 * C2338 + C175 * C2343) *
               C50626 +
           (C2364 + C2363 + C2362 + C2361 + C2360 + C2359) * C2341) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C50682 * C289 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C50682 * C290 +
           ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
             (C117 * C2510 + C50778 * C2513) * C2345 +
             (C117 * C2514 + C50778 * C2519) * C2340) *
                C2341 +
            (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
               C50682 * C291) *
              C292 +
          (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
            (C362 * C2343 + C361 * C2338 + C367 * C2344 + C368 * C2339 +
             C2563 * C2345 + C2564 * C2340) *
                C50626) *
               C50682 * C290 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C50682 * C289 -
           (((C117 * C2517 + C50778 * C2521) * C2340 +
             (C117 * C2512 + C50778 * C2518) * C2345 + C2564 * C2339 +
             C2563 * C2344 + C368 * C2338 + C367 * C2343) *
                C50626 +
            (C2570 + C2569 + C2568 + C2567 + C2544 + C2543) * C2341) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C480 -
           ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
            ((C117 * C1621 + C50778 * C1626) * C2340 +
             (C117 * C1614 + C50778 * C1622) * C2345 +
             (C117 * C938 + C50778 * C947) * C2339 +
             (C117 * C932 + C50778 * C937) * C2344 +
             (C117 * C499 + C50778 * C516) * C2338 +
             (C117 * C486 + C50778 * C500) * C2343) *
                C2341) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C2343 +
             (C117 * C502 + C50778 * C517) * C2338 +
             (C117 * C1267 + C50778 * C1275) * C2344 +
             (C117 * C1274 + C50778 * C1279) * C2339 +
             (C117 * C2716 + C50778 * C2719) * C2345 +
             (C117 * C2720 + C50778 * C2725) * C2340) *
                C2341 +
            (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
               C482) *
              C50666 * C292 +
          (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
            (C551 * C2343 + C550 * C2338 + C967 * C2344 + C968 * C2339 +
             (C117 * C1612 + C50778 * C1618) * C2345 +
             (C117 * C1617 + C50778 * C1624) * C2340) *
                C50626) *
               C481 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C480 -
           (((C117 * C2723 + C50778 * C2727) * C2340 +
             (C117 * C2718 + C50778 * C2724) * C2345 +
             (C117 * C1270 + C50778 * C1277) * C2339 +
             (C117 * C1265 + C50778 * C1271) * C2344 + C557 * C2338 +
             C556 * C2343) *
                C50626 +
            (C2758 + C2757 + C2756 + C2755 + C2738 + C2737) * C2341) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C118 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C50763) *
               C2341 +
           ((C5255 + C5256 + C5257) * C118 + (C5258 + C5259 + C5260) * C50763) *
               C50626) *
              C50682 * C50666 * C113 -
          (((C5261 + C5262 + C5263) * C50763 + (C5264 + C5265 + C5266) * C118) *
               C50626 +
           ((C5260 + C5259 + C5258) * C50763 + (C5257 + C5256 + C5255) * C118) *
               C2341) *
              C50682 * C50666 * C114 +
          (((C5266 + C5265 + C5264) * C118 + (C5263 + C5262 + C5261) * C50763) *
               C2341 +
           ((C5267 + C5268 + C5269) * C118 + (C5270 + C5271 + C5272) * C50763) *
               C50626) *
              C50682 * C50666 * C115 -
          (((C5217 * C511 + C5214 * C522 + C5216 * C510 + C5213 * C521 +
             C5215 * C134 + C5212 * C144) *
                C50763 +
            (C5217 * C492 + C5214 * C512 + C5216 * C491 + C5213 * C509 +
             C5215 * C123 + C5212 * C135) *
                C118) *
               C50626 +
           ((C5272 + C5271 + C5270) * C50763 + (C5269 + C5268 + C5267) * C118) *
               C2341) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
              C5217 * C487 + C5214 * C501) *
                 C118 +
             (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
              C5217 * C502 + C5214 * C517) *
                 C50763) *
                C2341 +
            ((C5255 + C5256 + C5257) * C118 +
             (C5258 + C5259 + C5260) * C50763) *
                C50626) *
               C50682 * C289 -
           (((C5443 + C5444 + C5445) * C50763 +
             (C5446 + C5447 + C5448) * C118) *
                C50626 +
            ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 + C5213 * C947 +
              C5215 * C310 + C5212 * C327) *
                 C50763 +
             (C5217 * C1267 + C5214 * C1275 + C5216 * C932 + C5213 * C937 +
              C5215 * C297 + C5212 * C311) *
                 C118) *
                C2341) *
               C50682 * C290 +
           (((C5215 * C298 + C5212 * C312 + C5216 * C1614 + C5213 * C1622 +
              C5217 * C2716 + C5214 * C2719) *
                 C118 +
             (C5215 * C313 + C5212 * C328 + C5216 * C1621 + C5213 * C1626 +
              C5217 * C2720 + C5214 * C2725) *
                 C50763) *
                C2341 +
            ((C5449 + C5450 + C5451) * C118 +
             (C5452 + C5453 + C5454) * C50763) *
                C50626) *
               C50682 * C291) *
              C292 +
          ((((C5448 + C5447 + C5446) * C118 +
             (C5445 + C5444 + C5443) * C50763) *
                C2341 +
            ((C5215 * C295 + C5212 * C307 + C5216 * C934 + C5213 * C941 +
              C5217 * C1265 + C5214 * C1271) *
                 C118 +
             (C5215 * C306 + C5212 * C325 + C5216 * C942 + C5213 * C949 +
              C5217 * C1270 + C5214 * C1277) *
                 C50763) *
                C50626) *
               C50682 * C290 -
           (((C5261 + C5262 + C5263) * C50763 +
             (C5264 + C5265 + C5266) * C118) *
                C50626 +
            ((C5260 + C5259 + C5258) * C50763 +
             (C5257 + C5256 + C5255) * C118) *
                C2341) *
               C50682 * C289 -
           (((C5217 * C2723 + C5214 * C2727 + C5216 * C1617 + C5213 * C1624 +
              C5215 * C317 + C5212 * C330) *
                 C50763 +
             (C5217 * C2718 + C5214 * C2724 + C5216 * C1612 + C5213 * C1618 +
              C5215 * C300 + C5212 * C316) *
                 C118) *
                C50626 +
            ((C5454 + C5453 + C5452) * C50763 +
             (C5451 + C5450 + C5449) * C118) *
                C2341) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
              C5217 * C487 + C5214 * C501) *
                 C118 +
             (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
              C5217 * C502 + C5214 * C517) *
                 C50763) *
                C2341 +
            ((C5255 + C5256 + C5257) * C118 +
             (C5258 + C5259 + C5260) * C50763) *
                C50626) *
               C480 -
           (((C5637 + C5638 + C5639) * C50763 +
             (C5640 + C5641 + C5642) * C118) *
                C50626 +
            ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
              C5215 * C499 + C5212 * C516) *
                 C50763 +
             (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
              C5215 * C486 + C5212 * C500) *
                 C118) *
                C2341) *
               C481 +
           (((C5215 * C487 + C5212 * C501 + C5216 * C1898 + C5213 * C1906 +
              C5217 * C5600 + C5214 * C5603) *
                 C118 +
             (C5215 * C502 + C5212 * C517 + C5216 * C1905 + C5213 * C1910 +
              C5217 * C5604 + C5214 * C5609) *
                 C50763) *
                C2341 +
            ((C5643 + C5644 + C5645) * C118 +
             (C5646 + C5647 + C5648) * C50763) *
                C50626) *
               C482) *
              C50666 * C292 +
          ((((C5642 + C5641 + C5640) * C118 +
             (C5639 + C5638 + C5637) * C50763) *
                C2341 +
            ((C5215 * C484 + C5212 * C496 + C5216 * C489 + C5213 * C505 +
              C5217 * C1896 + C5214 * C1902) *
                 C118 +
             (C5215 * C495 + C5212 * C514 + C5216 * C506 + C5213 * C519 +
              C5217 * C1901 + C5214 * C1908) *
                 C50763) *
                C50626) *
               C481 -
           (((C5261 + C5262 + C5263) * C50763 +
             (C5264 + C5265 + C5266) * C118) *
                C50626 +
            ((C5260 + C5259 + C5258) * C50763 +
             (C5257 + C5256 + C5255) * C118) *
                C2341) *
               C480 -
           (((C5217 * C5607 + C5214 * C5611 + C5216 * C1901 + C5213 * C1908 +
              C5215 * C506 + C5212 * C519) *
                 C50763 +
             (C5217 * C5602 + C5214 * C5608 + C5216 * C1896 + C5213 * C1902 +
              C5215 * C489 + C5212 * C505) *
                 C118) *
                C50626 +
            ((C5648 + C5647 + C5646) * C50763 +
             (C5645 + C5644 + C5643) * C118) *
                C2341) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50908 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    ((C117 * C1621 + C50778 * C1626) * C2340 +
                     (C117 * C1614 + C50778 * C1622) * C2345 +
                     (C117 * C938 + C50778 * C947) * C2339 +
                     (C117 * C932 + C50778 * C937) * C2344 +
                     (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50746) *
                      C50666 * C50950 +
                  (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                    (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                       C50746 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C50908) *
                      C50666 * C50951 +
                  (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
                    (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
                       C50908 -
                   (((C117 * C1615 + C50778 * C1623) * C2340 +
                     (C117 * C1611 + C50778 * C1616) * C2345 + C970 * C2339 +
                     C969 * C2344 + C548 * C2338 + C549 * C2343) *
                        C50626 +
                    (C3068 + C3067 + C3060 + C3059 + C3058 + C3057) * C2341) *
                       C50746) *
                      C50666 * C673)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50908 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50746) *
                      C50666 * C50950 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50746 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50908) *
                      C50666 * C50951 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C50908 -
                   (((C117 * C789 + C50778 * C791) * C50763 +
                     (C117 * C788 + C50778 * C790) * C118) *
                        C110 +
                    (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                       C50746) *
                      C50666 * C673)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                      C5213 * C500 + C5217 * C487 + C5214 * C501) *
                         C118 +
                     (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                      C5213 * C516 + C5217 * C502 + C5214 * C517) *
                         C50763) *
                        C2341 +
                    ((C5255 + C5256 + C5257) * C118 +
                     (C5258 + C5259 + C5260) * C50763) *
                        C50626) *
                       C50908 -
                   (((C5637 + C5638 + C5639) * C50763 +
                     (C5640 + C5641 + C5642) * C118) *
                        C50626 +
                    ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                      C5213 * C517 + C5215 * C499 + C5212 * C516) *
                         C50763 +
                     (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                      C5213 * C501 + C5215 * C486 + C5212 * C500) *
                         C118) *
                        C2341) *
                       C50746) *
                      C50666 * C50950 +
                  ((((C5642 + C5641 + C5640) * C118 +
                     (C5639 + C5638 + C5637) * C50763) *
                        C2341 +
                    ((C5971 + C5972 + C5973) * C118 +
                     (C5974 + C5975 + C5976) * C50763) *
                        C50626) *
                       C50746 -
                   (((C5261 + C5262 + C5263) * C50763 +
                     (C5264 + C5265 + C5266) * C118) *
                        C50626 +
                    ((C5260 + C5259 + C5258) * C50763 +
                     (C5257 + C5256 + C5255) * C118) *
                        C2341) *
                       C50908) *
                      C50666 * C50951 +
                  ((((C5266 + C5265 + C5264) * C118 +
                     (C5263 + C5262 + C5261) * C50763) *
                        C2341 +
                    ((C5267 + C5268 + C5269) * C118 +
                     (C5270 + C5271 + C5272) * C50763) *
                        C50626) *
                       C50908 -
                   (((C5217 * C1899 + C5214 * C1907 + C5216 * C508 +
                      C5213 * C520 + C5215 * C493 + C5212 * C513) *
                         C50763 +
                     (C5217 * C1895 + C5214 * C1900 + C5216 * C490 +
                      C5213 * C507 + C5215 * C483 + C5212 * C494) *
                         C118) *
                        C50626 +
                    ((C5976 + C5975 + C5974) * C50763 +
                     (C5973 + C5972 + C5971) * C118) *
                        C2341) *
                       C50746) *
                      C50666 * C673)) /
                    (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50682 * C289 -
           ((C371 + C372) * C110 + (C373 + C374) * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50778 * C327) * C50763 +
             (C117 * C297 + C50778 * C311) * C118) *
                C107) *
               C50682 * C290 +
           (((C117 * C298 + C50778 * C312) * C118 +
             (C117 * C313 + C50778 * C328) * C50763) *
                C107 +
            (C377 + C378) * C108 + (C379 + C380) * C109 +
            (C381 + C382) * C110) *
               C50682 * C291) *
              C292 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            ((C117 * C302 + C50778 * C320) * C118 +
             (C117 * C321 + C50778 * C332) * C50763) *
                C110) *
               C50682 * C290 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50682 * C289 -
           (((C117 * C322 + C50778 * C333) * C50763 +
             (C117 * C303 + C50778 * C323) * C118) *
                C110 +
            (C382 + C381) * C109 + (C380 + C379) * C108 +
            (C378 + C377) * C107) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C118 +
            (C117 * C127 + C50778 * C140) * C50763) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50682 * C50666 * C113 -
          (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
           (C179 + C178) * C107) *
              C50682 * C50666 * C114 +
          (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
           (C186 + C187) * C110) *
              C50682 * C50666 * C115 -
          (((C117 * C138 + C50778 * C146) * C50763 +
            (C117 * C125 + C50778 * C139) * C118) *
               C110 +
           (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 +
            (C117 * C297 + C50778 * C311) * C2344 +
            (C117 * C310 + C50778 * C327) * C2339 +
            (C117 * C298 + C50778 * C312) * C2345 +
            (C117 * C313 + C50778 * C328) * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C50682 * C50666 * C113 -
          ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
           (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
              C50682 * C50666 * C114 +
          ((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
           (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
              C50682 * C50666 * C115 -
          (((C117 * C322 + C50778 * C333) * C2340 +
            (C117 * C303 + C50778 * C323) * C2345 + C686 * C2339 +
            C685 * C2344 + C174 * C2338 + C175 * C2343) *
               C50626 +
           (C2364 + C2363 + C2362 + C2361 + C2360 + C2359) * C2341) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C50682 * C289 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C50682 * C290 +
           ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
             (C117 * C2510 + C50778 * C2513) * C2345 +
             (C117 * C2514 + C50778 * C2519) * C2340) *
                C2341 +
            (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
               C50682 * C291) *
              C292 +
          (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
            (C362 * C2343 + C361 * C2338 + C367 * C2344 + C368 * C2339 +
             C2563 * C2345 + C2564 * C2340) *
                C50626) *
               C50682 * C290 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C50682 * C289 -
           (((C117 * C2517 + C50778 * C2521) * C2340 +
             (C117 * C2512 + C50778 * C2518) * C2345 + C2564 * C2339 +
             C2563 * C2344 + C368 * C2338 + C367 * C2343) *
                C50626 +
            (C2570 + C2569 + C2568 + C2567 + C2544 + C2543) * C2341) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C118 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C50763) *
               C2341 +
           ((C5255 + C5256 + C5257) * C118 + (C5258 + C5259 + C5260) * C50763) *
               C50626) *
              C50682 * C50666 * C113 -
          (((C5261 + C5262 + C5263) * C50763 + (C5264 + C5265 + C5266) * C118) *
               C50626 +
           ((C5260 + C5259 + C5258) * C50763 + (C5257 + C5256 + C5255) * C118) *
               C2341) *
              C50682 * C50666 * C114 +
          (((C5266 + C5265 + C5264) * C118 + (C5263 + C5262 + C5261) * C50763) *
               C2341 +
           ((C5267 + C5268 + C5269) * C118 + (C5270 + C5271 + C5272) * C50763) *
               C50626) *
              C50682 * C50666 * C115 -
          (((C5217 * C511 + C5214 * C522 + C5216 * C510 + C5213 * C521 +
             C5215 * C134 + C5212 * C144) *
                C50763 +
            (C5217 * C492 + C5214 * C512 + C5216 * C491 + C5213 * C509 +
             C5215 * C123 + C5212 * C135) *
                C118) *
               C50626 +
           ((C5272 + C5271 + C5270) * C50763 + (C5269 + C5268 + C5267) * C118) *
               C2341) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
              C5217 * C487 + C5214 * C501) *
                 C118 +
             (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
              C5217 * C502 + C5214 * C517) *
                 C50763) *
                C2341 +
            ((C5255 + C5256 + C5257) * C118 +
             (C5258 + C5259 + C5260) * C50763) *
                C50626) *
               C50682 * C289 -
           (((C5443 + C5444 + C5445) * C50763 +
             (C5446 + C5447 + C5448) * C118) *
                C50626 +
            ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 + C5213 * C947 +
              C5215 * C310 + C5212 * C327) *
                 C50763 +
             (C5217 * C1267 + C5214 * C1275 + C5216 * C932 + C5213 * C937 +
              C5215 * C297 + C5212 * C311) *
                 C118) *
                C2341) *
               C50682 * C290 +
           (((C5215 * C298 + C5212 * C312 + C5216 * C1614 + C5213 * C1622 +
              C5217 * C2716 + C5214 * C2719) *
                 C118 +
             (C5215 * C313 + C5212 * C328 + C5216 * C1621 + C5213 * C1626 +
              C5217 * C2720 + C5214 * C2725) *
                 C50763) *
                C2341 +
            ((C5449 + C5450 + C5451) * C118 +
             (C5452 + C5453 + C5454) * C50763) *
                C50626) *
               C50682 * C291) *
              C292 +
          ((((C5448 + C5447 + C5446) * C118 +
             (C5445 + C5444 + C5443) * C50763) *
                C2341 +
            ((C5215 * C295 + C5212 * C307 + C5216 * C934 + C5213 * C941 +
              C5217 * C1265 + C5214 * C1271) *
                 C118 +
             (C5215 * C306 + C5212 * C325 + C5216 * C942 + C5213 * C949 +
              C5217 * C1270 + C5214 * C1277) *
                 C50763) *
                C50626) *
               C50682 * C290 -
           (((C5261 + C5262 + C5263) * C50763 +
             (C5264 + C5265 + C5266) * C118) *
                C50626 +
            ((C5260 + C5259 + C5258) * C50763 +
             (C5257 + C5256 + C5255) * C118) *
                C2341) *
               C50682 * C289 -
           (((C5217 * C2723 + C5214 * C2727 + C5216 * C1617 + C5213 * C1624 +
              C5215 * C317 + C5212 * C330) *
                 C50763 +
             (C5217 * C2718 + C5214 * C2724 + C5216 * C1612 + C5213 * C1618 +
              C5215 * C300 + C5212 * C316) *
                 C118) *
                C50626 +
            ((C5454 + C5453 + C5452) * C50763 +
             (C5451 + C5450 + C5449) * C118) *
                C2341) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50682 * C50952 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C50682 * C50953 +
                   ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 +
                     C2559 * C2339 + C3555 * C2345 + C3556 * C2340) *
                        C2341 +
                    (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
                       C50682 * C1380) *
                      C50899 +
                  (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                    (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                       C50682 * C50953 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C50682 * C50952 -
                   (((C117 * C2517 + C50778 * C2521) * C2340 +
                     (C117 * C2512 + C50778 * C2518) * C2345 + C2564 * C2339 +
                     C2563 * C2344 + C368 * C2338 + C367 * C2343) *
                        C50626 +
                    (C2570 + C2569 + C2568 + C2567 + C2544 + C2543) * C2341) *
                       C50682 * C1380) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50682 * C50952 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C50682 * C50953 +
                   (((C117 * C298 + C50778 * C312) * C118 +
                     (C117 * C313 + C50778 * C328) * C50763) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C50682 * C1380) *
                      C50899 +
                  (((C376 + C375) * C107 + (C374 + C373) * C108 +
                    (C372 + C371) * C109 + (C687 + C688) * C110) *
                       C50682 * C50953 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50682 * C50952 -
                   (((C117 * C322 + C50778 * C333) * C50763 +
                     (C117 * C303 + C50778 * C323) * C118) *
                        C110 +
                    (C382 + C381) * C109 + (C380 + C379) * C108 +
                    (C378 + C377) * C107) *
                       C50682 * C1380) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                      C5213 * C500 + C5217 * C487 + C5214 * C501) *
                         C118 +
                     (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                      C5213 * C516 + C5217 * C502 + C5214 * C517) *
                         C50763) *
                        C2341 +
                    ((C5255 + C5256 + C5257) * C118 +
                     (C5258 + C5259 + C5260) * C50763) *
                        C50626) *
                       C50682 * C50952 -
                   (((C5443 + C5444 + C5445) * C50763 +
                     (C5446 + C5447 + C5448) * C118) *
                        C50626 +
                    ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 +
                      C5213 * C947 + C5215 * C310 + C5212 * C327) *
                         C50763 +
                     (C5217 * C1267 + C5214 * C1275 + C5216 * C932 +
                      C5213 * C937 + C5215 * C297 + C5212 * C311) *
                         C118) *
                        C2341) *
                       C50682 * C50953 +
                   (((C5215 * C298 + C5212 * C312 + C5216 * C1614 +
                      C5213 * C1622 + C5217 * C2716 + C5214 * C2719) *
                         C118 +
                     (C5215 * C313 + C5212 * C328 + C5216 * C1621 +
                      C5213 * C1626 + C5217 * C2720 + C5214 * C2725) *
                         C50763) *
                        C2341 +
                    ((C5449 + C5450 + C5451) * C118 +
                     (C5452 + C5453 + C5454) * C50763) *
                        C50626) *
                       C50682 * C1380) *
                      C50899 +
                  ((((C5448 + C5447 + C5446) * C118 +
                     (C5445 + C5444 + C5443) * C50763) *
                        C2341 +
                    ((C5807 + C5808 + C5809) * C118 +
                     (C5810 + C5811 + C5812) * C50763) *
                        C50626) *
                       C50682 * C50953 -
                   (((C5261 + C5262 + C5263) * C50763 +
                     (C5264 + C5265 + C5266) * C118) *
                        C50626 +
                    ((C5260 + C5259 + C5258) * C50763 +
                     (C5257 + C5256 + C5255) * C118) *
                        C2341) *
                       C50682 * C50952 -
                   (((C5217 * C2723 + C5214 * C2727 + C5216 * C1617 +
                      C5213 * C1624 + C5215 * C317 + C5212 * C330) *
                         C50763 +
                     (C5217 * C2718 + C5214 * C2724 + C5216 * C1612 +
                      C5213 * C1618 + C5215 * C300 + C5212 * C316) *
                         C118) *
                        C50626 +
                    ((C5454 + C5453 + C5452) * C50763 +
                     (C5451 + C5450 + C5449) * C118) *
                        C2341) *
                       C50682 * C1380) *
                      C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[36] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50908 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50746) *
                      C50952 +
                  (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                     C3291 * C2339 + C4221 * C2345 + C4222 * C2340) *
                        C2341 +
                    (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                       C50746 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C50908) *
                      C50953 +
                  (((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 +
                     C2559 * C2339 + C3555 * C2345 + C3556 * C2340) *
                        C2341 +
                    (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
                       C50908 -
                   (((C117 * C4210 + C50778 * C4214) * C2340 +
                     (C117 * C4208 + C50778 * C4211) * C2345 + C3296 * C2339 +
                     C3295 * C2344 + C2747 * C2338 + C2748 * C2343) *
                        C50626 +
                    ((C117 * C4212 + C50778 * C4215) * C2340 +
                     (C117 * C4209 + C50778 * C4213) * C2345 + C4222 * C2339 +
                     C4221 * C2344 + C3291 * C2338 + C3292 * C2343) *
                        C2341) *
                       C50746) *
                      C1380) *
                 C50647) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50908 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50746) *
                      C50952 +
                  ((((C117 * C932 + C50778 * C937) * C118 +
                     (C117 * C938 + C50778 * C947) * C50763) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50746 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C50908) *
                      C50953 +
                  ((((C117 * C298 + C50778 * C312) * C118 +
                     (C117 * C313 + C50778 * C328) * C50763) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C50908 -
                   (((C117 * C1615 + C50778 * C1623) * C50763 +
                     (C117 * C1611 + C50778 * C1616) * C118) *
                        C110 +
                    ((C117 * C1617 + C50778 * C1624) * C50763 +
                     (C117 * C1612 + C50778 * C1618) * C118) *
                        C109 +
                    ((C117 * C1619 + C50778 * C1625) * C50763 +
                     (C117 * C1613 + C50778 * C1620) * C118) *
                        C108 +
                    ((C117 * C1621 + C50778 * C1626) * C50763 +
                     (C117 * C1614 + C50778 * C1622) * C118) *
                        C107) *
                       C50746) *
                      C1380) *
                 C50647) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                      C5213 * C500 + C5217 * C487 + C5214 * C501) *
                         C118 +
                     (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                      C5213 * C516 + C5217 * C502 + C5214 * C517) *
                         C50763) *
                        C2341 +
                    ((C5255 + C5256 + C5257) * C118 +
                     (C5258 + C5259 + C5260) * C50763) *
                        C50626) *
                       C50908 -
                   (((C5637 + C5638 + C5639) * C50763 +
                     (C5640 + C5641 + C5642) * C118) *
                        C50626 +
                    ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                      C5213 * C517 + C5215 * C499 + C5212 * C516) *
                         C50763 +
                     (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                      C5213 * C501 + C5215 * C486 + C5212 * C500) *
                         C118) *
                        C2341) *
                       C50746) *
                      C50952 +
                  ((((C5215 * C932 + C5212 * C937 + C5216 * C1267 +
                      C5213 * C1275 + C5217 * C4615 + C5214 * C4623) *
                         C118 +
                     (C5215 * C938 + C5212 * C947 + C5216 * C1274 +
                      C5213 * C1279 + C5217 * C4622 + C5214 * C4627) *
                         C50763) *
                        C2341 +
                    ((C6187 + C6188 + C6189) * C118 +
                     (C6190 + C6191 + C6192) * C50763) *
                        C50626) *
                       C50746 -
                   (((C5443 + C5444 + C5445) * C50763 +
                     (C5446 + C5447 + C5448) * C118) *
                        C50626 +
                    ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 +
                      C5213 * C947 + C5215 * C310 + C5212 * C327) *
                         C50763 +
                     (C5217 * C1267 + C5214 * C1275 + C5216 * C932 +
                      C5213 * C937 + C5215 * C297 + C5212 * C311) *
                         C118) *
                        C2341) *
                       C50908) *
                      C50953 +
                  ((((C5215 * C298 + C5212 * C312 + C5216 * C1614 +
                      C5213 * C1622 + C5217 * C2716 + C5214 * C2719) *
                         C118 +
                     (C5215 * C313 + C5212 * C328 + C5216 * C1621 +
                      C5213 * C1626 + C5217 * C2720 + C5214 * C2725) *
                         C50763) *
                        C2341 +
                    ((C5449 + C5450 + C5451) * C118 +
                     (C5452 + C5453 + C5454) * C50763) *
                        C50626) *
                       C50908 -
                   (((C5217 * C4616 + C5214 * C4624 + C5216 * C2722 +
                      C5213 * C2726 + C5215 * C1619 + C5212 * C1625) *
                         C50763 +
                     (C5217 * C4612 + C5214 * C4617 + C5216 * C2717 +
                      C5213 * C2721 + C5215 * C1613 + C5212 * C1620) *
                         C118) *
                        C50626 +
                    ((C5217 * C4620 + C5214 * C4626 + C5216 * C2720 +
                      C5213 * C2725 + C5215 * C1621 + C5212 * C1626) *
                         C50763 +
                     (C5217 * C4614 + C5214 * C4621 + C5216 * C2716 +
                      C5213 * C2719 + C5215 * C1614 + C5212 * C1622) *
                         C118) *
                        C2341) *
                       C50746) *
                      C1380) *
                 C50647) /
                    (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50778 * C126) * C118 +
                 (C117 * C127 + C50778 * C140) * C50763) *
                    C107 +
                (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                   C50682 * C1074 -
               (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                ((C117 * C310 + C50778 * C327) * C50763 +
                 (C117 * C297 + C50778 * C311) * C118) *
                    C107) *
                   C50682 * C50718) *
                  C1076 +
              (((C376 + C375) * C107 + (C374 + C373) * C108 +
                (C372 + C371) * C109 + (C687 + C688) * C110) *
                   C50682 * C50718 -
               (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                (C179 + C178) * C107) *
                   C50682 * C1074) *
                  C1077 +
              ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                (C186 + C187) * C110) *
                   C50682 * C1074 -
               (((C117 * C675 + C50778 * C677) * C50763 +
                 (C117 * C674 + C50778 * C676) * C118) *
                    C110 +
                (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
                   C50682 * C50718) *
                  C1078) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50778 * C126) * C118 +
                (C117 * C127 + C50778 * C140) * C50763) *
                   C107 +
               (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                  C50682 * C1145 -
              (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
               ((C117 * C310 + C50778 * C327) * C50763 +
                (C117 * C297 + C50778 * C311) * C118) *
                   C107) *
                  C50682 * C1146 +
              (((C117 * C298 + C50778 * C312) * C118 +
                (C117 * C313 + C50778 * C328) * C50763) *
                   C107 +
               (C377 + C378) * C108 + (C379 + C380) * C109 +
               (C381 + C382) * C110) *
                  C50682 * C1147 -
              (((C117 * C1154 + C50778 * C1162) * C50763 +
                (C117 * C1150 + C50778 * C1155) * C118) *
                   C110 +
               ((C117 * C1156 + C50778 * C1163) * C50763 +
                (C117 * C1151 + C50778 * C1157) * C118) *
                   C109 +
               ((C117 * C1158 + C50778 * C1164) * C50763 +
                (C117 * C1152 + C50778 * C1159) * C118) *
                   C108 +
               ((C117 * C1160 + C50778 * C1165) * C50763 +
                (C117 * C1153 + C50778 * C1161) * C118) *
                   C107) *
                  C50682 * C1148) *
             C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C480 -
           (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50778 * C516) * C50763 +
             (C117 * C486 + C50778 * C500) * C118) *
                C107) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C118 +
             (C117 * C502 + C50778 * C517) * C50763) *
                C107 +
            (C566 + C567) * C108 + (C568 + C569) * C109 +
            (C570 + C571) * C110) *
               C482) *
              C1074 +
          ((((C117 * C932 + C50778 * C937) * C118 +
             (C117 * C938 + C50778 * C947) * C50763) *
                C107 +
            (C971 + C972) * C108 + (C973 + C974) * C109 +
            (C975 + C976) * C110) *
               C481 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50778 * C327) * C50763 +
             (C117 * C297 + C50778 * C311) * C118) *
                C107) *
               C480 -
           (((C117 * C1268 + C50778 * C1276) * C50763 +
             (C117 * C1264 + C50778 * C1269) * C118) *
                C110 +
            ((C117 * C1270 + C50778 * C1277) * C50763 +
             (C117 * C1265 + C50778 * C1271) * C118) *
                C109 +
            ((C117 * C1272 + C50778 * C1278) * C50763 +
             (C117 * C1266 + C50778 * C1273) * C118) *
                C108 +
            ((C117 * C1274 + C50778 * C1279) * C50763 +
             (C117 * C1267 + C50778 * C1275) * C118) *
                C107) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C50682 * C1074 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C50682 * C50718) *
              C1076 +
          (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
            (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
               C50682 * C50718 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C50682 * C1074) *
              C1077 +
          (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
            (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
               C50682 * C1074 -
           (((C117 * C1154 + C50778 * C1162) * C2340 +
             (C117 * C1150 + C50778 * C1155) * C2345 + C370 * C2339 +
             C369 * C2344 + C359 * C2338 + C360 * C2343) *
                C50626 +
            (C2910 + C2909 + C2908 + C2907 + C2906 + C2905) * C2341) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
            C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C50682 * C1145 -
          ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
           (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
            C2554 * C2338 + C2553 * C2343) *
               C2341) *
              C50682 * C1146 +
          ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
            C3555 * C2345 + C3556 * C2340) *
               C2341 +
           (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
              C50682 * C1147 -
          (((C117 * C3544 + C50778 * C3548) * C2340 +
            (C117 * C3542 + C50778 * C3545) * C2345 + C2562 * C2339 +
            C2561 * C2344 + C2557 * C2338 + C2558 * C2343) *
               C50626 +
           ((C117 * C3546 + C50778 * C3549) * C2340 +
            (C117 * C3543 + C50778 * C3547) * C2345 + C3556 * C2339 +
            C3555 * C2344 + C2559 * C2338 + C2560 * C2343) *
               C2341) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C480 -
           ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
            (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 + C3294 * C2344 +
             (C117 * C499 + C50778 * C516) * C2338 +
             (C117 * C486 + C50778 * C500) * C2343) *
                C2341) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C2343 +
             (C117 * C502 + C50778 * C517) * C2338 + C3719 * C2344 +
             C3720 * C2339 + C3721 * C2345 + C3722 * C2340) *
                C2341 +
            (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
               C482) *
              C1074 +
          (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 + C3291 * C2339 +
             (C117 * C3262 + C50778 * C3265) * C2345 +
             (C117 * C3266 + C50778 * C3271) * C2340) *
                C2341 +
            (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
               C481 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C480 -
           (((C117 * C3704 + C50778 * C3708) * C2340 +
             (C117 * C3702 + C50778 * C3705) * C2345 + C2752 * C2339 +
             C2751 * C2344 + C2750 * C2338 + C2749 * C2343) *
                C50626 +
            ((C117 * C3706 + C50778 * C3709) * C2340 +
             (C117 * C3703 + C50778 * C3707) * C2345 + C3722 * C2339 +
             C3721 * C2344 + C3720 * C2338 + C3719 * C2343) *
                C2341) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                                  C5213 * C500 + C5217 * C487 + C5214 * C501) *
                                     C118 +
                                 (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                                  C5213 * C516 + C5217 * C502 + C5214 * C517) *
                                     C50763) *
                                    C2341 +
                                ((C5255 + C5256 + C5257) * C118 +
                                 (C5258 + C5259 + C5260) * C50763) *
                                    C50626) *
                                   C50682 * C1074 -
                               (((C5443 + C5444 + C5445) * C50763 +
                                 (C5446 + C5447 + C5448) * C118) *
                                    C50626 +
                                ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 +
                                  C5213 * C947 + C5215 * C310 + C5212 * C327) *
                                     C50763 +
                                 (C5217 * C1267 + C5214 * C1275 + C5216 * C932 +
                                  C5213 * C937 + C5215 * C297 + C5212 * C311) *
                                     C118) *
                                    C2341) *
                                   C50682 * C50718) *
                                  C1076 +
                              ((((C5448 + C5447 + C5446) * C118 +
                                 (C5445 + C5444 + C5443) * C50763) *
                                    C2341 +
                                ((C5807 + C5808 + C5809) * C118 +
                                 (C5810 + C5811 + C5812) * C50763) *
                                    C50626) *
                                   C50682 * C50718 -
                               (((C5261 + C5262 + C5263) * C50763 +
                                 (C5264 + C5265 + C5266) * C118) *
                                    C50626 +
                                ((C5260 + C5259 + C5258) * C50763 +
                                 (C5257 + C5256 + C5255) * C118) *
                                    C2341) *
                                   C50682 * C1074) *
                                  C1077 +
                              ((((C5266 + C5265 + C5264) * C118 +
                                 (C5263 + C5262 + C5261) * C50763) *
                                    C2341 +
                                ((C5267 + C5268 + C5269) * C118 +
                                 (C5270 + C5271 + C5272) * C50763) *
                                    C50626) *
                                   C50682 * C1074 -
                               (((C5217 * C1268 + C5214 * C1276 + C5216 * C944 +
                                  C5213 * C950 + C5215 * C304 + C5212 * C324) *
                                     C50763 +
                                 (C5217 * C1264 + C5214 * C1269 + C5216 * C935 +
                                  C5213 * C943 + C5215 * C294 + C5212 * C305) *
                                     C118) *
                                    C50626 +
                                ((C5812 + C5811 + C5810) * C50763 +
                                 (C5809 + C5808 + C5807) * C118) *
                                    C2341) *
                                   C50682 * C50718) *
                                  C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C118 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C50763) *
               C2341 +
           ((C5255 + C5256 + C5257) * C118 + (C5258 + C5259 + C5260) * C50763) *
               C50626) *
              C50682 * C1145 -
          (((C5443 + C5444 + C5445) * C50763 + (C5446 + C5447 + C5448) * C118) *
               C50626 +
           ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 + C5213 * C947 +
             C5215 * C310 + C5212 * C327) *
                C50763 +
            (C5217 * C1267 + C5214 * C1275 + C5216 * C932 + C5213 * C937 +
             C5215 * C297 + C5212 * C311) *
                C118) *
               C2341) *
              C50682 * C1146 +
          (((C5215 * C298 + C5212 * C312 + C5216 * C1614 + C5213 * C1622 +
             C5217 * C2716 + C5214 * C2719) *
                C118 +
            (C5215 * C313 + C5212 * C328 + C5216 * C1621 + C5213 * C1626 +
             C5217 * C2720 + C5214 * C2725) *
                C50763) *
               C2341 +
           ((C5449 + C5450 + C5451) * C118 + (C5452 + C5453 + C5454) * C50763) *
               C50626) *
              C50682 * C1147 -
          (((C5217 * C3704 + C5214 * C3708 + C5216 * C3268 + C5213 * C3272 +
             C5215 * C1158 + C5212 * C1164) *
                C50763 +
            (C5217 * C3702 + C5214 * C3705 + C5216 * C3263 + C5213 * C3267 +
             C5215 * C1152 + C5212 * C1159) *
                C118) *
               C50626 +
           ((C5217 * C3706 + C5214 * C3709 + C5216 * C3266 + C5213 * C3271 +
             C5215 * C1160 + C5212 * C1165) *
                C50763 +
            (C5217 * C3703 + C5214 * C3707 + C5216 * C3262 + C5213 * C3265 +
             C5215 * C1153 + C5212 * C1161) *
                C118) *
               C2341) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
              C5217 * C487 + C5214 * C501) *
                 C118 +
             (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
              C5217 * C502 + C5214 * C517) *
                 C50763) *
                C2341 +
            ((C5255 + C5256 + C5257) * C118 +
             (C5258 + C5259 + C5260) * C50763) *
                C50626) *
               C480 -
           (((C5637 + C5638 + C5639) * C50763 +
             (C5640 + C5641 + C5642) * C118) *
                C50626 +
            ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
              C5215 * C499 + C5212 * C516) *
                 C50763 +
             (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
              C5215 * C486 + C5212 * C500) *
                 C118) *
                C2341) *
               C481 +
           (((C5215 * C487 + C5212 * C501 + C5216 * C1898 + C5213 * C1906 +
              C5217 * C5600 + C5214 * C5603) *
                 C118 +
             (C5215 * C502 + C5212 * C517 + C5216 * C1905 + C5213 * C1910 +
              C5217 * C5604 + C5214 * C5609) *
                 C50763) *
                C2341 +
            ((C5643 + C5644 + C5645) * C118 +
             (C5646 + C5647 + C5648) * C50763) *
                C50626) *
               C482) *
              C1074 +
          ((((C5215 * C932 + C5212 * C937 + C5216 * C1267 + C5213 * C1275 +
              C5217 * C4615 + C5214 * C4623) *
                 C118 +
             (C5215 * C938 + C5212 * C947 + C5216 * C1274 + C5213 * C1279 +
              C5217 * C4622 + C5214 * C4627) *
                 C50763) *
                C2341 +
            ((C6187 + C6188 + C6189) * C118 +
             (C6190 + C6191 + C6192) * C50763) *
                C50626) *
               C481 -
           (((C5443 + C5444 + C5445) * C50763 +
             (C5446 + C5447 + C5448) * C118) *
                C50626 +
            ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 + C5213 * C947 +
              C5215 * C310 + C5212 * C327) *
                 C50763 +
             (C5217 * C1267 + C5214 * C1275 + C5216 * C932 + C5213 * C937 +
              C5215 * C297 + C5212 * C311) *
                 C118) *
                C2341) *
               C480 -
           (((C5217 * C6584 + C5214 * C6588 + C5216 * C4618 + C5213 * C4625 +
              C5215 * C1272 + C5212 * C1278) *
                 C50763 +
             (C5217 * C6582 + C5214 * C6585 + C5216 * C4613 + C5213 * C4619 +
              C5215 * C1266 + C5212 * C1273) *
                 C118) *
                C50626 +
            ((C5217 * C6586 + C5214 * C6589 + C5216 * C4622 + C5213 * C4627 +
              C5215 * C1274 + C5212 * C1279) *
                 C50763 +
             (C5217 * C6583 + C5214 * C6587 + C5216 * C4615 + C5213 * C4623 +
              C5215 * C1267 + C5212 * C1275) *
                 C118) *
                C2341) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[38] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C2343 +
                      (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                      C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                         C2341 +
                     (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                        C50908 -
                    ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                     (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                      C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                      (C117 * C486 + C50778 * C500) * C2343) *
                         C2341) *
                        C50746) *
                       C1074 +
                   (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                      C3291 * C2339 + (C117 * C3262 + C50778 * C3265) * C2345 +
                      (C117 * C3266 + C50778 * C3271) * C2340) *
                         C2341 +
                     (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                        C50746 -
                    ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                     (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                      C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                         C2341) *
                        C50908) *
                       C50718) *
                      C50899 +
                  ((((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                     (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                        C50746 -
                    ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                     (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                        C50908) *
                       C1074 +
                   (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                     (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                        C50908 -
                    (((C117 * C3269 + C50778 * C3273) * C2340 +
                      (C117 * C3264 + C50778 * C3270) * C2345 + C3066 * C2339 +
                      C3065 * C2344 + C968 * C2338 + C967 * C2343) *
                         C50626 +
                     (C3298 + C3297 + C3286 + C3285 + C3284 + C3283) * C2341) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C118 +
                      (C117 * C127 + C50778 * C140) * C50763) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C50908 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50778 * C516) * C50763 +
                      (C117 * C486 + C50778 * C500) * C118) *
                         C107) *
                        C50746) *
                       C1074 +
                   ((((C117 * C932 + C50778 * C937) * C118 +
                      (C117 * C938 + C50778 * C947) * C50763) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50746 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50778 * C327) * C50763 +
                      (C117 * C297 + C50778 * C311) * C118) *
                         C107) *
                        C50908) *
                       C50718) *
                      C50899 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50746 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C50908) *
                       C1074 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C50908 -
                    (((C117 * C945 + C50778 * C951) * C50763 +
                      (C117 * C936 + C50778 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                       C5213 * C500 + C5217 * C487 + C5214 * C501) *
                          C118 +
                      (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                       C5213 * C516 + C5217 * C502 + C5214 * C517) *
                          C50763) *
                         C2341 +
                     ((C5255 + C5256 + C5257) * C118 +
                      (C5258 + C5259 + C5260) * C50763) *
                         C50626) *
                        C50908 -
                    (((C5637 + C5638 + C5639) * C50763 +
                      (C5640 + C5641 + C5642) * C118) *
                         C50626 +
                     ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                       C5213 * C517 + C5215 * C499 + C5212 * C516) *
                          C50763 +
                      (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                       C5213 * C501 + C5215 * C486 + C5212 * C500) *
                          C118) *
                         C2341) *
                        C50746) *
                       C1074 +
                   ((((C5215 * C932 + C5212 * C937 + C5216 * C1267 +
                       C5213 * C1275 + C5217 * C4615 + C5214 * C4623) *
                          C118 +
                      (C5215 * C938 + C5212 * C947 + C5216 * C1274 +
                       C5213 * C1279 + C5217 * C4622 + C5214 * C4627) *
                          C50763) *
                         C2341 +
                     ((C6187 + C6188 + C6189) * C118 +
                      (C6190 + C6191 + C6192) * C50763) *
                         C50626) *
                        C50746 -
                    (((C5443 + C5444 + C5445) * C50763 +
                      (C5446 + C5447 + C5448) * C118) *
                         C50626 +
                     ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 +
                       C5213 * C947 + C5215 * C310 + C5212 * C327) *
                          C50763 +
                      (C5217 * C1267 + C5214 * C1275 + C5216 * C932 +
                       C5213 * C937 + C5215 * C297 + C5212 * C311) *
                          C118) *
                         C2341) *
                        C50908) *
                       C50718) *
                      C50899 +
                  (((((C5642 + C5641 + C5640) * C118 +
                      (C5639 + C5638 + C5637) * C50763) *
                         C2341 +
                     ((C5971 + C5972 + C5973) * C118 +
                      (C5974 + C5975 + C5976) * C50763) *
                         C50626) *
                        C50746 -
                    (((C5261 + C5262 + C5263) * C50763 +
                      (C5264 + C5265 + C5266) * C118) *
                         C50626 +
                     ((C5260 + C5259 + C5258) * C50763 +
                      (C5257 + C5256 + C5255) * C118) *
                         C2341) *
                        C50908) *
                       C1074 +
                   ((((C5448 + C5447 + C5446) * C118 +
                      (C5445 + C5444 + C5443) * C50763) *
                         C2341 +
                     ((C5807 + C5808 + C5809) * C118 +
                      (C5810 + C5811 + C5812) * C50763) *
                         C50626) *
                        C50908 -
                    (((C5217 * C6171 + C5214 * C6173 + C5216 * C1270 +
                       C5213 * C1277 + C5215 * C942 + C5212 * C949) *
                          C50763 +
                      (C5217 * C6170 + C5214 * C6172 + C5216 * C1265 +
                       C5213 * C1271 + C5215 * C934 + C5212 * C941) *
                          C118) *
                         C50626 +
                     ((C6192 + C6191 + C6190) * C50763 +
                      (C6189 + C6188 + C6187) * C118) *
                         C2341) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C118 +
            (C117 * C127 + C50778 * C140) * C50763) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50682 * C1145 -
          (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
           ((C117 * C310 + C50778 * C327) * C50763 +
            (C117 * C297 + C50778 * C311) * C118) *
               C107) *
              C50682 * C1146 +
          (((C117 * C298 + C50778 * C312) * C118 +
            (C117 * C313 + C50778 * C328) * C50763) *
               C107 +
           (C377 + C378) * C108 + (C379 + C380) * C109 + (C381 + C382) * C110) *
              C50682 * C1147 -
          (((C117 * C1154 + C50778 * C1162) * C50763 +
            (C117 * C1150 + C50778 * C1155) * C118) *
               C110 +
           ((C117 * C1156 + C50778 * C1163) * C50763 +
            (C117 * C1151 + C50778 * C1157) * C118) *
               C109 +
           ((C117 * C1158 + C50778 * C1164) * C50763 +
            (C117 * C1152 + C50778 * C1159) * C118) *
               C108 +
           ((C117 * C1160 + C50778 * C1165) * C50763 +
            (C117 * C1153 + C50778 * C1161) * C118) *
               C107) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50682 * C1074 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50778 * C327) * C50763 +
             (C117 * C297 + C50778 * C311) * C118) *
                C107) *
               C50682 * C50718) *
              C1076 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            (C687 + C688) * C110) *
               C50682 * C50718 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50682 * C1074) *
              C1077 +
          ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50682 * C1074 -
           (((C117 * C675 + C50778 * C677) * C50763 +
             (C117 * C674 + C50778 * C676) * C118) *
                C110 +
            (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C50682 * C1074 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C50682 * C50718) *
              C1076 +
          (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
            (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
               C50682 * C50718 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C50682 * C1074) *
              C1077 +
          (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
            (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
               C50682 * C1074 -
           (((C117 * C1154 + C50778 * C1162) * C2340 +
             (C117 * C1150 + C50778 * C1155) * C2345 + C370 * C2339 +
             C369 * C2344 + C359 * C2338 + C360 * C2343) *
                C50626 +
            (C2910 + C2909 + C2908 + C2907 + C2906 + C2905) * C2341) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
            C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C50682 * C1145 -
          ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
           (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
            C2554 * C2338 + C2553 * C2343) *
               C2341) *
              C50682 * C1146 +
          ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
            C3555 * C2345 + C3556 * C2340) *
               C2341 +
           (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
              C50682 * C1147 -
          (((C117 * C3544 + C50778 * C3548) * C2340 +
            (C117 * C3542 + C50778 * C3545) * C2345 + C2562 * C2339 +
            C2561 * C2344 + C2557 * C2338 + C2558 * C2343) *
               C50626 +
           ((C117 * C3546 + C50778 * C3549) * C2340 +
            (C117 * C3543 + C50778 * C3547) * C2345 + C3556 * C2339 +
            C3555 * C2344 + C2559 * C2338 + C2560 * C2343) *
               C2341) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
              C5217 * C487 + C5214 * C501) *
                 C118 +
             (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
              C5217 * C502 + C5214 * C517) *
                 C50763) *
                C2341 +
            ((C5255 + C5256 + C5257) * C118 +
             (C5258 + C5259 + C5260) * C50763) *
                C50626) *
               C50682 * C1074 -
           (((C5443 + C5444 + C5445) * C50763 +
             (C5446 + C5447 + C5448) * C118) *
                C50626 +
            ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 + C5213 * C947 +
              C5215 * C310 + C5212 * C327) *
                 C50763 +
             (C5217 * C1267 + C5214 * C1275 + C5216 * C932 + C5213 * C937 +
              C5215 * C297 + C5212 * C311) *
                 C118) *
                C2341) *
               C50682 * C50718) *
              C1076 +
          ((((C5448 + C5447 + C5446) * C118 +
             (C5445 + C5444 + C5443) * C50763) *
                C2341 +
            ((C5807 + C5808 + C5809) * C118 +
             (C5810 + C5811 + C5812) * C50763) *
                C50626) *
               C50682 * C50718 -
           (((C5261 + C5262 + C5263) * C50763 +
             (C5264 + C5265 + C5266) * C118) *
                C50626 +
            ((C5260 + C5259 + C5258) * C50763 +
             (C5257 + C5256 + C5255) * C118) *
                C2341) *
               C50682 * C1074) *
              C1077 +
          ((((C5266 + C5265 + C5264) * C118 +
             (C5263 + C5262 + C5261) * C50763) *
                C2341 +
            ((C5267 + C5268 + C5269) * C118 +
             (C5270 + C5271 + C5272) * C50763) *
                C50626) *
               C50682 * C1074 -
           (((C5217 * C1268 + C5214 * C1276 + C5216 * C944 + C5213 * C950 +
              C5215 * C304 + C5212 * C324) *
                 C50763 +
             (C5217 * C1264 + C5214 * C1269 + C5216 * C935 + C5213 * C943 +
              C5215 * C294 + C5212 * C305) *
                 C118) *
                C50626 +
            ((C5812 + C5811 + C5810) * C50763 +
             (C5809 + C5808 + C5807) * C118) *
                C2341) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C118 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C50763) *
               C2341 +
           ((C5255 + C5256 + C5257) * C118 + (C5258 + C5259 + C5260) * C50763) *
               C50626) *
              C50682 * C1145 -
          (((C5443 + C5444 + C5445) * C50763 + (C5446 + C5447 + C5448) * C118) *
               C50626 +
           ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 + C5213 * C947 +
             C5215 * C310 + C5212 * C327) *
                C50763 +
            (C5217 * C1267 + C5214 * C1275 + C5216 * C932 + C5213 * C937 +
             C5215 * C297 + C5212 * C311) *
                C118) *
               C2341) *
              C50682 * C1146 +
          (((C5215 * C298 + C5212 * C312 + C5216 * C1614 + C5213 * C1622 +
             C5217 * C2716 + C5214 * C2719) *
                C118 +
            (C5215 * C313 + C5212 * C328 + C5216 * C1621 + C5213 * C1626 +
             C5217 * C2720 + C5214 * C2725) *
                C50763) *
               C2341 +
           ((C5449 + C5450 + C5451) * C118 + (C5452 + C5453 + C5454) * C50763) *
               C50626) *
              C50682 * C1147 -
          (((C5217 * C3704 + C5214 * C3708 + C5216 * C3268 + C5213 * C3272 +
             C5215 * C1158 + C5212 * C1164) *
                C50763 +
            (C5217 * C3702 + C5214 * C3705 + C5216 * C3263 + C5213 * C3267 +
             C5215 * C1152 + C5212 * C1159) *
                C118) *
               C50626 +
           ((C5217 * C3706 + C5214 * C3709 + C5216 * C3266 + C5213 * C3271 +
             C5215 * C1160 + C5212 * C1165) *
                C50763 +
            (C5217 * C3703 + C5214 * C3707 + C5216 * C3262 + C5213 * C3265 +
             C5215 * C1153 + C5212 * C1161) *
                C118) *
               C2341) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[40] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C2343 +
                      (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                      C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                         C2341 +
                     (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                        C1725 -
                    ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                     (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                      C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                      (C117 * C486 + C50778 * C500) * C2343) *
                         C2341) *
                        C50746) *
                       C50907 +
                   (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                      C3291 * C2339 + C4221 * C2345 + C4222 * C2340) *
                         C2341 +
                     (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                        C50746 -
                    ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                     (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                      C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                         C2341) *
                        C1725) *
                       C50718) *
                      C50899 +
                  ((((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                     (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                        C50746 -
                    ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                     (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                        C1725) *
                       C50907 +
                   (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                     (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                        C1725 -
                    (((C117 * C3269 + C50778 * C3273) * C2340 +
                      (C117 * C3264 + C50778 * C3270) * C2345 + C3066 * C2339 +
                      C3065 * C2344 + C968 * C2338 + C967 * C2343) *
                         C50626 +
                     (C3298 + C3297 + C3286 + C3285 + C3284 + C3283) * C2341) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C118 +
                      (C117 * C127 + C50778 * C140) * C50763) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C1725 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50778 * C516) * C50763 +
                      (C117 * C486 + C50778 * C500) * C118) *
                         C107) *
                        C50746) *
                       C50907 +
                   ((((C117 * C932 + C50778 * C937) * C118 +
                      (C117 * C938 + C50778 * C947) * C50763) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50746 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50778 * C327) * C50763 +
                      (C117 * C297 + C50778 * C311) * C118) *
                         C107) *
                        C1725) *
                       C50718) *
                      C50899 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50746 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C1725) *
                       C50907 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C1725 -
                    (((C117 * C945 + C50778 * C951) * C50763 +
                      (C117 * C936 + C50778 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                       C5213 * C500 + C5217 * C487 + C5214 * C501) *
                          C118 +
                      (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                       C5213 * C516 + C5217 * C502 + C5214 * C517) *
                          C50763) *
                         C2341 +
                     ((C5255 + C5256 + C5257) * C118 +
                      (C5258 + C5259 + C5260) * C50763) *
                         C50626) *
                        C1725 -
                    (((C5637 + C5638 + C5639) * C50763 +
                      (C5640 + C5641 + C5642) * C118) *
                         C50626 +
                     ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                       C5213 * C517 + C5215 * C499 + C5212 * C516) *
                          C50763 +
                      (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                       C5213 * C501 + C5215 * C486 + C5212 * C500) *
                          C118) *
                         C2341) *
                        C50746) *
                       C50907 +
                   ((((C5215 * C932 + C5212 * C937 + C5216 * C1267 +
                       C5213 * C1275 + C5217 * C4615 + C5214 * C4623) *
                          C118 +
                      (C5215 * C938 + C5212 * C947 + C5216 * C1274 +
                       C5213 * C1279 + C5217 * C4622 + C5214 * C4627) *
                          C50763) *
                         C2341 +
                     ((C6187 + C6188 + C6189) * C118 +
                      (C6190 + C6191 + C6192) * C50763) *
                         C50626) *
                        C50746 -
                    (((C5443 + C5444 + C5445) * C50763 +
                      (C5446 + C5447 + C5448) * C118) *
                         C50626 +
                     ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 +
                       C5213 * C947 + C5215 * C310 + C5212 * C327) *
                          C50763 +
                      (C5217 * C1267 + C5214 * C1275 + C5216 * C932 +
                       C5213 * C937 + C5215 * C297 + C5212 * C311) *
                          C118) *
                         C2341) *
                        C1725) *
                       C50718) *
                      C50899 +
                  (((((C5642 + C5641 + C5640) * C118 +
                      (C5639 + C5638 + C5637) * C50763) *
                         C2341 +
                     ((C5971 + C5972 + C5973) * C118 +
                      (C5974 + C5975 + C5976) * C50763) *
                         C50626) *
                        C50746 -
                    (((C5261 + C5262 + C5263) * C50763 +
                      (C5264 + C5265 + C5266) * C118) *
                         C50626 +
                     ((C5260 + C5259 + C5258) * C50763 +
                      (C5257 + C5256 + C5255) * C118) *
                         C2341) *
                        C1725) *
                       C50907 +
                   ((((C5448 + C5447 + C5446) * C118 +
                      (C5445 + C5444 + C5443) * C50763) *
                         C2341 +
                     ((C5807 + C5808 + C5809) * C118 +
                      (C5810 + C5811 + C5812) * C50763) *
                         C50626) *
                        C1725 -
                    (((C5217 * C6171 + C5214 * C6173 + C5216 * C1270 +
                       C5213 * C1277 + C5215 * C942 + C5212 * C949) *
                          C50763 +
                      (C5217 * C6170 + C5214 * C6172 + C5216 * C1265 +
                       C5213 * C1271 + C5215 * C934 + C5212 * C941) *
                          C118) *
                         C50626 +
                     ((C6192 + C6191 + C6190) * C50763 +
                      (C6189 + C6188 + C6187) * C118) *
                         C2341) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[41] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50954 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50955 +
                   (((C117 * C487 + C50778 * C501) * C2343 +
                     (C117 * C502 + C50778 * C517) * C2338 + C3719 * C2344 +
                     C3720 * C2339 + C3721 * C2345 + C3722 * C2340) *
                        C2341 +
                    (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
                       C2141) *
                      C50907 +
                  (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                     C3291 * C2339 + C4221 * C2345 + C4222 * C2340) *
                        C2341 +
                    (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                       C50955 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C50954 -
                   (((C117 * C3704 + C50778 * C3708) * C2340 +
                     (C117 * C3702 + C50778 * C3705) * C2345 + C2752 * C2339 +
                     C2751 * C2344 + C2750 * C2338 + C2749 * C2343) *
                        C50626 +
                    ((C117 * C3706 + C50778 * C3709) * C2340 +
                     (C117 * C3703 + C50778 * C3707) * C2345 + C3722 * C2339 +
                     C3721 * C2344 + C3720 * C2338 + C3719 * C2343) *
                        C2341) *
                       C2141) *
                      C50718) *
                 C50647) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50954 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50955 +
                   (((C117 * C487 + C50778 * C501) * C118 +
                     (C117 * C502 + C50778 * C517) * C50763) *
                        C107 +
                    (C566 + C567) * C108 + (C568 + C569) * C109 +
                    (C570 + C571) * C110) *
                       C2141) *
                      C50907 +
                  ((((C117 * C932 + C50778 * C937) * C118 +
                     (C117 * C938 + C50778 * C947) * C50763) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50955 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C50954 -
                   (((C117 * C1268 + C50778 * C1276) * C50763 +
                     (C117 * C1264 + C50778 * C1269) * C118) *
                        C110 +
                    ((C117 * C1270 + C50778 * C1277) * C50763 +
                     (C117 * C1265 + C50778 * C1271) * C118) *
                        C109 +
                    ((C117 * C1272 + C50778 * C1278) * C50763 +
                     (C117 * C1266 + C50778 * C1273) * C118) *
                        C108 +
                    ((C117 * C1274 + C50778 * C1279) * C50763 +
                     (C117 * C1267 + C50778 * C1275) * C118) *
                        C107) *
                       C2141) *
                      C50718) *
                 C50647) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                      C5213 * C500 + C5217 * C487 + C5214 * C501) *
                         C118 +
                     (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                      C5213 * C516 + C5217 * C502 + C5214 * C517) *
                         C50763) *
                        C2341 +
                    ((C5255 + C5256 + C5257) * C118 +
                     (C5258 + C5259 + C5260) * C50763) *
                        C50626) *
                       C50954 -
                   (((C5637 + C5638 + C5639) * C50763 +
                     (C5640 + C5641 + C5642) * C118) *
                        C50626 +
                    ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                      C5213 * C517 + C5215 * C499 + C5212 * C516) *
                         C50763 +
                     (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                      C5213 * C501 + C5215 * C486 + C5212 * C500) *
                         C118) *
                        C2341) *
                       C50955 +
                   (((C5215 * C487 + C5212 * C501 + C5216 * C1898 +
                      C5213 * C1906 + C5217 * C5600 + C5214 * C5603) *
                         C118 +
                     (C5215 * C502 + C5212 * C517 + C5216 * C1905 +
                      C5213 * C1910 + C5217 * C5604 + C5214 * C5609) *
                         C50763) *
                        C2341 +
                    ((C5643 + C5644 + C5645) * C118 +
                     (C5646 + C5647 + C5648) * C50763) *
                        C50626) *
                       C2141) *
                      C50907 +
                  ((((C5215 * C932 + C5212 * C937 + C5216 * C1267 +
                      C5213 * C1275 + C5217 * C4615 + C5214 * C4623) *
                         C118 +
                     (C5215 * C938 + C5212 * C947 + C5216 * C1274 +
                      C5213 * C1279 + C5217 * C4622 + C5214 * C4627) *
                         C50763) *
                        C2341 +
                    ((C6187 + C6188 + C6189) * C118 +
                     (C6190 + C6191 + C6192) * C50763) *
                        C50626) *
                       C50955 -
                   (((C5443 + C5444 + C5445) * C50763 +
                     (C5446 + C5447 + C5448) * C118) *
                        C50626 +
                    ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 +
                      C5213 * C947 + C5215 * C310 + C5212 * C327) *
                         C50763 +
                     (C5217 * C1267 + C5214 * C1275 + C5216 * C932 +
                      C5213 * C937 + C5215 * C297 + C5212 * C311) *
                         C118) *
                        C2341) *
                       C50954 -
                   (((C5217 * C6584 + C5214 * C6588 + C5216 * C4618 +
                      C5213 * C4625 + C5215 * C1272 + C5212 * C1278) *
                         C50763 +
                     (C5217 * C6582 + C5214 * C6585 + C5216 * C4613 +
                      C5213 * C4619 + C5215 * C1266 + C5212 * C1273) *
                         C118) *
                        C50626 +
                    ((C5217 * C6586 + C5214 * C6589 + C5216 * C4622 +
                      C5213 * C4627 + C5215 * C1274 + C5212 * C1279) *
                         C50763 +
                     (C5217 * C6583 + C5214 * C6587 + C5216 * C4615 +
                      C5213 * C4623 + C5215 * C1267 + C5212 * C1275) *
                         C118) *
                        C2341) *
                       C2141) *
                      C50718) *
                 C50647) /
                    (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50778 * C126) * C118 +
                 (C117 * C127 + C50778 * C140) * C50763) *
                    C107 +
                (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                   C1725 -
               (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                ((C117 * C499 + C50778 * C516) * C50763 +
                 (C117 * C486 + C50778 * C500) * C118) *
                    C107) *
                   C50746) *
                  C50666 * C1076 +
              (((C565 + C564) * C107 + (C563 + C562) * C108 +
                (C561 + C560) * C109 + (C801 + C802) * C110) *
                   C50746 -
               (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                (C179 + C178) * C107) *
                   C1725) *
                  C50666 * C1077 +
              ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                (C186 + C187) * C110) *
                   C1725 -
               (((C117 * C789 + C50778 * C791) * C50763 +
                 (C117 * C788 + C50778 * C790) * C118) *
                    C110 +
                (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                   C50746) *
                  C50666 * C1078) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50778 * C126) * C118 +
                 (C117 * C127 + C50778 * C140) * C50763) *
                    C107 +
                (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                   C1725 -
               (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                ((C117 * C499 + C50778 * C516) * C50763 +
                 (C117 * C486 + C50778 * C500) * C118) *
                    C107) *
                   C50746) *
                  C289 +
              ((((C117 * C932 + C50778 * C937) * C118 +
                 (C117 * C938 + C50778 * C947) * C50763) *
                    C107 +
                (C971 + C972) * C108 + (C973 + C974) * C109 +
                (C975 + C976) * C110) *
                   C50746 -
               (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                ((C117 * C310 + C50778 * C327) * C50763 +
                 (C117 * C297 + C50778 * C311) * C118) *
                    C107) *
                   C1725) *
                  C290 +
              ((((C117 * C298 + C50778 * C312) * C118 +
                 (C117 * C313 + C50778 * C328) * C50763) *
                    C107 +
                (C377 + C378) * C108 + (C379 + C380) * C109 +
                (C381 + C382) * C110) *
                   C1725 -
               (((C117 * C1615 + C50778 * C1623) * C50763 +
                 (C117 * C1611 + C50778 * C1616) * C118) *
                    C110 +
                ((C117 * C1617 + C50778 * C1624) * C50763 +
                 (C117 * C1612 + C50778 * C1618) * C118) *
                    C109 +
                ((C117 * C1619 + C50778 * C1625) * C50763 +
                 (C117 * C1613 + C50778 * C1620) * C118) *
                    C108 +
                ((C117 * C1621 + C50778 * C1626) * C50763 +
                 (C117 * C1614 + C50778 * C1622) * C118) *
                    C107) *
                   C50746) *
                  C291) *
             C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C118 +
            (C117 * C127 + C50778 * C140) * C50763) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C1891 -
          (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
           ((C117 * C499 + C50778 * C516) * C50763 +
            (C117 * C486 + C50778 * C500) * C118) *
               C107) *
              C1892 +
          (((C117 * C487 + C50778 * C501) * C118 +
            (C117 * C502 + C50778 * C517) * C50763) *
               C107 +
           (C566 + C567) * C108 + (C568 + C569) * C109 + (C570 + C571) * C110) *
              C1893 -
          (((C117 * C1899 + C50778 * C1907) * C50763 +
            (C117 * C1895 + C50778 * C1900) * C118) *
               C110 +
           ((C117 * C1901 + C50778 * C1908) * C50763 +
            (C117 * C1896 + C50778 * C1902) * C118) *
               C109 +
           ((C117 * C1903 + C50778 * C1909) * C50763 +
            (C117 * C1897 + C50778 * C1904) * C118) *
               C108 +
           ((C117 * C1905 + C50778 * C1910) * C50763 +
            (C117 * C1898 + C50778 * C1906) * C118) *
               C107) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C1725 -
           ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
            (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 + C3294 * C2344 +
             (C117 * C499 + C50778 * C516) * C2338 +
             (C117 * C486 + C50778 * C500) * C2343) *
                C2341) *
               C50746) *
              C50666 * C1076 +
          (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
            (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
               C50746 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C1725) *
              C50666 * C1077 +
          (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
            (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
               C1725 -
           (((C117 * C1615 + C50778 * C1623) * C2340 +
             (C117 * C1611 + C50778 * C1616) * C2345 + C970 * C2339 +
             C969 * C2344 + C548 * C2338 + C549 * C2343) *
                C50626 +
            (C3068 + C3067 + C3060 + C3059 + C3058 + C3057) * C2341) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C1725 -
           ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
            (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 + C3294 * C2344 +
             (C117 * C499 + C50778 * C516) * C2338 +
             (C117 * C486 + C50778 * C500) * C2343) *
                C2341) *
               C50746) *
              C289 +
          (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 + C3291 * C2339 +
             C4221 * C2345 + C4222 * C2340) *
                C2341 +
            (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
               C50746 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C1725) *
              C290 +
          (((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
             C3555 * C2345 + C3556 * C2340) *
                C2341 +
            (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
               C1725 -
           (((C117 * C4210 + C50778 * C4214) * C2340 +
             (C117 * C4208 + C50778 * C4211) * C2345 + C3296 * C2339 +
             C3295 * C2344 + C2747 * C2338 + C2748 * C2343) *
                C50626 +
            ((C117 * C4212 + C50778 * C4215) * C2340 +
             (C117 * C4209 + C50778 * C4213) * C2345 + C4222 * C2339 +
             C4221 * C2344 + C3291 * C2338 + C3292 * C2343) *
                C2341) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
            C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C1891 -
          ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
           (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 + C3294 * C2344 +
            (C117 * C499 + C50778 * C516) * C2338 +
            (C117 * C486 + C50778 * C500) * C2343) *
               C2341) *
              C1892 +
          (((C117 * C487 + C50778 * C501) * C2343 +
            (C117 * C502 + C50778 * C517) * C2338 + C3719 * C2344 +
            C3720 * C2339 + C3721 * C2345 + C3722 * C2340) *
               C2341 +
           (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
              C1893 -
          (((C117 * C4616 + C50778 * C4624) * C2340 +
            (C117 * C4612 + C50778 * C4617) * C2345 +
            (C117 * C4618 + C50778 * C4625) * C2339 +
            (C117 * C4613 + C50778 * C4619) * C2344 +
            (C117 * C1903 + C50778 * C1909) * C2338 +
            (C117 * C1897 + C50778 * C1904) * C2343) *
               C50626 +
           ((C117 * C4620 + C50778 * C4626) * C2340 +
            (C117 * C4614 + C50778 * C4621) * C2345 +
            (C117 * C4622 + C50778 * C4627) * C2339 +
            (C117 * C4615 + C50778 * C4623) * C2344 +
            (C117 * C1905 + C50778 * C1910) * C2338 +
            (C117 * C1898 + C50778 * C1906) * C2343) *
               C2341) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                                  C5213 * C500 + C5217 * C487 + C5214 * C501) *
                                     C118 +
                                 (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                                  C5213 * C516 + C5217 * C502 + C5214 * C517) *
                                     C50763) *
                                    C2341 +
                                ((C5255 + C5256 + C5257) * C118 +
                                 (C5258 + C5259 + C5260) * C50763) *
                                    C50626) *
                                   C1725 -
                               (((C5637 + C5638 + C5639) * C50763 +
                                 (C5640 + C5641 + C5642) * C118) *
                                    C50626 +
                                ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                                  C5213 * C517 + C5215 * C499 + C5212 * C516) *
                                     C50763 +
                                 (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                                  C5213 * C501 + C5215 * C486 + C5212 * C500) *
                                     C118) *
                                    C2341) *
                                   C50746) *
                                  C50666 * C1076 +
                              ((((C5642 + C5641 + C5640) * C118 +
                                 (C5639 + C5638 + C5637) * C50763) *
                                    C2341 +
                                ((C5971 + C5972 + C5973) * C118 +
                                 (C5974 + C5975 + C5976) * C50763) *
                                    C50626) *
                                   C50746 -
                               (((C5261 + C5262 + C5263) * C50763 +
                                 (C5264 + C5265 + C5266) * C118) *
                                    C50626 +
                                ((C5260 + C5259 + C5258) * C50763 +
                                 (C5257 + C5256 + C5255) * C118) *
                                    C2341) *
                                   C1725) *
                                  C50666 * C1077 +
                              ((((C5266 + C5265 + C5264) * C118 +
                                 (C5263 + C5262 + C5261) * C50763) *
                                    C2341 +
                                ((C5267 + C5268 + C5269) * C118 +
                                 (C5270 + C5271 + C5272) * C50763) *
                                    C50626) *
                                   C1725 -
                               (((C5217 * C1899 + C5214 * C1907 + C5216 * C508 +
                                  C5213 * C520 + C5215 * C493 + C5212 * C513) *
                                     C50763 +
                                 (C5217 * C1895 + C5214 * C1900 + C5216 * C490 +
                                  C5213 * C507 + C5215 * C483 + C5212 * C494) *
                                     C118) *
                                    C50626 +
                                ((C5976 + C5975 + C5974) * C50763 +
                                 (C5973 + C5972 + C5971) * C118) *
                                    C2341) *
                                   C50746) *
                                  C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
              C5217 * C487 + C5214 * C501) *
                 C118 +
             (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
              C5217 * C502 + C5214 * C517) *
                 C50763) *
                C2341 +
            ((C5255 + C5256 + C5257) * C118 +
             (C5258 + C5259 + C5260) * C50763) *
                C50626) *
               C1725 -
           (((C5637 + C5638 + C5639) * C50763 +
             (C5640 + C5641 + C5642) * C118) *
                C50626 +
            ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
              C5215 * C499 + C5212 * C516) *
                 C50763 +
             (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
              C5215 * C486 + C5212 * C500) *
                 C118) *
                C2341) *
               C50746) *
              C289 +
          ((((C5215 * C932 + C5212 * C937 + C5216 * C1267 + C5213 * C1275 +
              C5217 * C4615 + C5214 * C4623) *
                 C118 +
             (C5215 * C938 + C5212 * C947 + C5216 * C1274 + C5213 * C1279 +
              C5217 * C4622 + C5214 * C4627) *
                 C50763) *
                C2341 +
            ((C6187 + C6188 + C6189) * C118 +
             (C6190 + C6191 + C6192) * C50763) *
                C50626) *
               C50746 -
           (((C5443 + C5444 + C5445) * C50763 +
             (C5446 + C5447 + C5448) * C118) *
                C50626 +
            ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 + C5213 * C947 +
              C5215 * C310 + C5212 * C327) *
                 C50763 +
             (C5217 * C1267 + C5214 * C1275 + C5216 * C932 + C5213 * C937 +
              C5215 * C297 + C5212 * C311) *
                 C118) *
                C2341) *
               C1725) *
              C290 +
          ((((C5215 * C298 + C5212 * C312 + C5216 * C1614 + C5213 * C1622 +
              C5217 * C2716 + C5214 * C2719) *
                 C118 +
             (C5215 * C313 + C5212 * C328 + C5216 * C1621 + C5213 * C1626 +
              C5217 * C2720 + C5214 * C2725) *
                 C50763) *
                C2341 +
            ((C5449 + C5450 + C5451) * C118 +
             (C5452 + C5453 + C5454) * C50763) *
                C50626) *
               C1725 -
           (((C5217 * C4616 + C5214 * C4624 + C5216 * C2722 + C5213 * C2726 +
              C5215 * C1619 + C5212 * C1625) *
                 C50763 +
             (C5217 * C4612 + C5214 * C4617 + C5216 * C2717 + C5213 * C2721 +
              C5215 * C1613 + C5212 * C1620) *
                 C118) *
                C50626 +
            ((C5217 * C4620 + C5214 * C4626 + C5216 * C2720 + C5213 * C2725 +
              C5215 * C1621 + C5212 * C1626) *
                 C50763 +
             (C5217 * C4614 + C5214 * C4621 + C5216 * C2716 + C5213 * C2719 +
              C5215 * C1614 + C5212 * C1622) *
                 C118) *
                C2341) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C118 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C50763) *
               C2341 +
           ((C5255 + C5256 + C5257) * C118 + (C5258 + C5259 + C5260) * C50763) *
               C50626) *
              C1891 -
          (((C5637 + C5638 + C5639) * C50763 + (C5640 + C5641 + C5642) * C118) *
               C50626 +
           ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C50763 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C118) *
               C2341) *
              C1892 +
          (((C5215 * C487 + C5212 * C501 + C5216 * C1898 + C5213 * C1906 +
             C5217 * C5600 + C5214 * C5603) *
                C118 +
            (C5215 * C502 + C5212 * C517 + C5216 * C1905 + C5213 * C1910 +
             C5217 * C5604 + C5214 * C5609) *
                C50763) *
               C2341 +
           ((C5643 + C5644 + C5645) * C118 + (C5646 + C5647 + C5648) * C50763) *
               C50626) *
              C1893 -
          (((C5217 * C7468 + C5214 * C7472 + C5216 * C5606 + C5213 * C5610 +
             C5215 * C1903 + C5212 * C1909) *
                C50763 +
            (C5217 * C7466 + C5214 * C7469 + C5216 * C5601 + C5213 * C5605 +
             C5215 * C1897 + C5212 * C1904) *
                C118) *
               C50626 +
           ((C5217 * C7470 + C5214 * C7473 + C5216 * C5604 + C5213 * C5609 +
             C5215 * C1905 + C5212 * C1910) *
                C50763 +
            (C5217 * C7467 + C5214 * C7471 + C5216 * C5600 + C5213 * C5603 +
             C5215 * C1898 + C5212 * C1906) *
                C118) *
               C2341) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[43] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50954 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50955 +
                   (((C117 * C487 + C50778 * C501) * C2343 +
                     (C117 * C502 + C50778 * C517) * C2338 + C3719 * C2344 +
                     C3720 * C2339 + C3721 * C2345 + C3722 * C2340) *
                        C2341 +
                    (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
                       C2141) *
                      C50666 * C50899 +
                  (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                    (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                       C50955 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C50954 -
                   (((C117 * C2723 + C50778 * C2727) * C2340 +
                     (C117 * C2718 + C50778 * C2724) * C2345 +
                     (C117 * C1270 + C50778 * C1277) * C2339 +
                     (C117 * C1265 + C50778 * C1271) * C2344 + C557 * C2338 +
                     C556 * C2343) *
                        C50626 +
                    (C2758 + C2757 + C2756 + C2755 + C2738 + C2737) * C2341) *
                       C2141) *
                      C50666 * C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50954 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50955 +
                   (((C117 * C487 + C50778 * C501) * C118 +
                     (C117 * C502 + C50778 * C517) * C50763) *
                        C107 +
                    (C566 + C567) * C108 + (C568 + C569) * C109 +
                    (C570 + C571) * C110) *
                       C2141) *
                      C50666 * C50899 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50955 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50954 -
                   (((C117 * C511 + C50778 * C522) * C50763 +
                     (C117 * C492 + C50778 * C512) * C118) *
                        C110 +
                    (C571 + C570) * C109 + (C569 + C568) * C108 +
                    (C567 + C566) * C107) *
                       C2141) *
                      C50666 * C50653)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                      C5213 * C500 + C5217 * C487 + C5214 * C501) *
                         C118 +
                     (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                      C5213 * C516 + C5217 * C502 + C5214 * C517) *
                         C50763) *
                        C2341 +
                    ((C5255 + C5256 + C5257) * C118 +
                     (C5258 + C5259 + C5260) * C50763) *
                        C50626) *
                       C50954 -
                   (((C5637 + C5638 + C5639) * C50763 +
                     (C5640 + C5641 + C5642) * C118) *
                        C50626 +
                    ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                      C5213 * C517 + C5215 * C499 + C5212 * C516) *
                         C50763 +
                     (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                      C5213 * C501 + C5215 * C486 + C5212 * C500) *
                         C118) *
                        C2341) *
                       C50955 +
                   (((C5215 * C487 + C5212 * C501 + C5216 * C1898 +
                      C5213 * C1906 + C5217 * C5600 + C5214 * C5603) *
                         C118 +
                     (C5215 * C502 + C5212 * C517 + C5216 * C1905 +
                      C5213 * C1910 + C5217 * C5604 + C5214 * C5609) *
                         C50763) *
                        C2341 +
                    ((C5643 + C5644 + C5645) * C118 +
                     (C5646 + C5647 + C5648) * C50763) *
                        C50626) *
                       C2141) *
                      C50666 * C50899 +
                  ((((C5642 + C5641 + C5640) * C118 +
                     (C5639 + C5638 + C5637) * C50763) *
                        C2341 +
                    ((C5971 + C5972 + C5973) * C118 +
                     (C5974 + C5975 + C5976) * C50763) *
                        C50626) *
                       C50955 -
                   (((C5261 + C5262 + C5263) * C50763 +
                     (C5264 + C5265 + C5266) * C118) *
                        C50626 +
                    ((C5260 + C5259 + C5258) * C50763 +
                     (C5257 + C5256 + C5255) * C118) *
                        C2341) *
                       C50954 -
                   (((C5217 * C5607 + C5214 * C5611 + C5216 * C1901 +
                      C5213 * C1908 + C5215 * C506 + C5212 * C519) *
                         C50763 +
                     (C5217 * C5602 + C5214 * C5608 + C5216 * C1896 +
                      C5213 * C1902 + C5215 * C489 + C5212 * C505) *
                         C118) *
                        C50626 +
                    ((C5648 + C5647 + C5646) * C50763 +
                     (C5645 + C5644 + C5643) * C118) *
                        C2341) *
                       C2141) *
                      C50666 * C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[44] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C1725 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50746) *
                      C289 +
                  ((((C117 * C932 + C50778 * C937) * C118 +
                     (C117 * C938 + C50778 * C947) * C50763) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50746 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C1725) *
                      C290 +
                  ((((C117 * C298 + C50778 * C312) * C118 +
                     (C117 * C313 + C50778 * C328) * C50763) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C1725 -
                   (((C117 * C1615 + C50778 * C1623) * C50763 +
                     (C117 * C1611 + C50778 * C1616) * C118) *
                        C110 +
                    ((C117 * C1617 + C50778 * C1624) * C50763 +
                     (C117 * C1612 + C50778 * C1618) * C118) *
                        C109 +
                    ((C117 * C1619 + C50778 * C1625) * C50763 +
                     (C117 * C1613 + C50778 * C1620) * C118) *
                        C108 +
                    ((C117 * C1621 + C50778 * C1626) * C50763 +
                     (C117 * C1614 + C50778 * C1622) * C118) *
                        C107) *
                       C50746) *
                      C291) *
                 C50647) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C1725 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50746) *
                      C50666 * C1076 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50746 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C1725) *
                      C50666 * C1077 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C1725 -
                   (((C117 * C789 + C50778 * C791) * C50763 +
                     (C117 * C788 + C50778 * C790) * C118) *
                        C110 +
                    (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                       C50746) *
                      C50666 * C1078)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C1725 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50746) *
                      C50666 * C1076 +
                  (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                    (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                       C50746 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C1725) *
                      C50666 * C1077 +
                  (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
                    (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
                       C1725 -
                   (((C117 * C1615 + C50778 * C1623) * C2340 +
                     (C117 * C1611 + C50778 * C1616) * C2345 + C970 * C2339 +
                     C969 * C2344 + C548 * C2338 + C549 * C2343) *
                        C50626 +
                    (C3068 + C3067 + C3060 + C3059 + C3058 + C3057) * C2341) *
                       C50746) *
                      C50666 * C1078)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C1725 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50746) *
                      C289 +
                  (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                     C3291 * C2339 + C4221 * C2345 + C4222 * C2340) *
                        C2341 +
                    (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                       C50746 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C1725) *
                      C290 +
                  (((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 +
                     C2559 * C2339 + C3555 * C2345 + C3556 * C2340) *
                        C2341 +
                    (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
                       C1725 -
                   (((C117 * C4210 + C50778 * C4214) * C2340 +
                     (C117 * C4208 + C50778 * C4211) * C2345 + C3296 * C2339 +
                     C3295 * C2344 + C2747 * C2338 + C2748 * C2343) *
                        C50626 +
                    ((C117 * C4212 + C50778 * C4215) * C2340 +
                     (C117 * C4209 + C50778 * C4213) * C2345 + C4222 * C2339 +
                     C4221 * C2344 + C3291 * C2338 + C3292 * C2343) *
                        C2341) *
                       C50746) *
                      C291) *
                 C50647) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                      C5213 * C500 + C5217 * C487 + C5214 * C501) *
                         C118 +
                     (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                      C5213 * C516 + C5217 * C502 + C5214 * C517) *
                         C50763) *
                        C2341 +
                    ((C5255 + C5256 + C5257) * C118 +
                     (C5258 + C5259 + C5260) * C50763) *
                        C50626) *
                       C1725 -
                   (((C5637 + C5638 + C5639) * C50763 +
                     (C5640 + C5641 + C5642) * C118) *
                        C50626 +
                    ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                      C5213 * C517 + C5215 * C499 + C5212 * C516) *
                         C50763 +
                     (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                      C5213 * C501 + C5215 * C486 + C5212 * C500) *
                         C118) *
                        C2341) *
                       C50746) *
                      C50666 * C1076 +
                  ((((C5642 + C5641 + C5640) * C118 +
                     (C5639 + C5638 + C5637) * C50763) *
                        C2341 +
                    ((C5971 + C5972 + C5973) * C118 +
                     (C5974 + C5975 + C5976) * C50763) *
                        C50626) *
                       C50746 -
                   (((C5261 + C5262 + C5263) * C50763 +
                     (C5264 + C5265 + C5266) * C118) *
                        C50626 +
                    ((C5260 + C5259 + C5258) * C50763 +
                     (C5257 + C5256 + C5255) * C118) *
                        C2341) *
                       C1725) *
                      C50666 * C1077 +
                  ((((C5266 + C5265 + C5264) * C118 +
                     (C5263 + C5262 + C5261) * C50763) *
                        C2341 +
                    ((C5267 + C5268 + C5269) * C118 +
                     (C5270 + C5271 + C5272) * C50763) *
                        C50626) *
                       C1725 -
                   (((C5217 * C1899 + C5214 * C1907 + C5216 * C508 +
                      C5213 * C520 + C5215 * C493 + C5212 * C513) *
                         C50763 +
                     (C5217 * C1895 + C5214 * C1900 + C5216 * C490 +
                      C5213 * C507 + C5215 * C483 + C5212 * C494) *
                         C118) *
                        C50626 +
                    ((C5976 + C5975 + C5974) * C50763 +
                     (C5973 + C5972 + C5971) * C118) *
                        C2341) *
                       C50746) *
                      C50666 * C1078)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                      C5213 * C500 + C5217 * C487 + C5214 * C501) *
                         C118 +
                     (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                      C5213 * C516 + C5217 * C502 + C5214 * C517) *
                         C50763) *
                        C2341 +
                    ((C5255 + C5256 + C5257) * C118 +
                     (C5258 + C5259 + C5260) * C50763) *
                        C50626) *
                       C1725 -
                   (((C5637 + C5638 + C5639) * C50763 +
                     (C5640 + C5641 + C5642) * C118) *
                        C50626 +
                    ((C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                      C5213 * C517 + C5215 * C499 + C5212 * C516) *
                         C50763 +
                     (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                      C5213 * C501 + C5215 * C486 + C5212 * C500) *
                         C118) *
                        C2341) *
                       C50746) *
                      C289 +
                  ((((C5215 * C932 + C5212 * C937 + C5216 * C1267 +
                      C5213 * C1275 + C5217 * C4615 + C5214 * C4623) *
                         C118 +
                     (C5215 * C938 + C5212 * C947 + C5216 * C1274 +
                      C5213 * C1279 + C5217 * C4622 + C5214 * C4627) *
                         C50763) *
                        C2341 +
                    ((C6187 + C6188 + C6189) * C118 +
                     (C6190 + C6191 + C6192) * C50763) *
                        C50626) *
                       C50746 -
                   (((C5443 + C5444 + C5445) * C50763 +
                     (C5446 + C5447 + C5448) * C118) *
                        C50626 +
                    ((C5217 * C1274 + C5214 * C1279 + C5216 * C938 +
                      C5213 * C947 + C5215 * C310 + C5212 * C327) *
                         C50763 +
                     (C5217 * C1267 + C5214 * C1275 + C5216 * C932 +
                      C5213 * C937 + C5215 * C297 + C5212 * C311) *
                         C118) *
                        C2341) *
                       C1725) *
                      C290 +
                  ((((C5215 * C298 + C5212 * C312 + C5216 * C1614 +
                      C5213 * C1622 + C5217 * C2716 + C5214 * C2719) *
                         C118 +
                     (C5215 * C313 + C5212 * C328 + C5216 * C1621 +
                      C5213 * C1626 + C5217 * C2720 + C5214 * C2725) *
                         C50763) *
                        C2341 +
                    ((C5449 + C5450 + C5451) * C118 +
                     (C5452 + C5453 + C5454) * C50763) *
                        C50626) *
                       C1725 -
                   (((C5217 * C4616 + C5214 * C4624 + C5216 * C2722 +
                      C5213 * C2726 + C5215 * C1619 + C5212 * C1625) *
                         C50763 +
                     (C5217 * C4612 + C5214 * C4617 + C5216 * C2717 +
                      C5213 * C2721 + C5215 * C1613 + C5212 * C1620) *
                         C118) *
                        C50626 +
                    ((C5217 * C4620 + C5214 * C4626 + C5216 * C2720 +
                      C5213 * C2725 + C5215 * C1621 + C5212 * C1626) *
                         C50763 +
                     (C5217 * C4614 + C5214 * C4621 + C5216 * C2716 +
                      C5213 * C2719 + C5215 * C1614 + C5212 * C1622) *
                         C118) *
                        C2341) *
                       C50746) *
                      C291) *
                 C50647) /
                    (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50682 * C50907 -
           (C11388 * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C50682 * C50718) *
              C50950 +
          ((((C11023 + C11022) * C118 + (C11021 + C11020) * C50763) * C50948 +
            ((C11019 + C11018) * C118 + (C11017 + C11016) * C50763) * C50949 +
            ((C11384 + C11385) * C118 + (C11386 + C11387) * C50763) * C8062) *
               C50682 * C50718 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C50682 * C50907) *
              C50951 +
          ((C10836 * C50948 +
            ((C10823 + C10822) * C118 + (C10821 + C10820) * C50763) * C50949 +
            ((C10824 + C10825) * C118 + (C10826 + C10827) * C50763) * C8062) *
               C50682 * C50907 -
           (((C10778 * C945 + C50842 * C951 + C10777 * C321 + C50921 * C332) *
                 C50763 +
             (C10778 * C936 + C50842 * C946 + C10777 * C302 + C50921 * C320) *
                 C118) *
                C8062 +
            ((C11387 + C11386) * C50763 + (C11385 + C11384) * C118) * C50949 +
            C11388 * C50948) *
               C50682 * C50718) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                  C118 +
              (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                  C50763) *
                 C50948 +
             ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
             C10836 * C8062) *
                C50908 -
            (C11551 * C8062 +
             ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
             ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                  C50763 +
              (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                  C118) *
                 C50948) *
                C50746) *
               C50907 +
           ((((C10777 * C932 + C50921 * C937 + C10778 * C1267 +
               C50842 * C1275) *
                  C118 +
              (C10777 * C938 + C50921 * C947 + C10778 * C1274 +
               C50842 * C1279) *
                  C50763) *
                 C50948 +
             ((C11762 + C11763) * C118 + (C11764 + C11765) * C50763) * C50949 +
             ((C11766 + C11767) * C118 + (C11768 + C11769) * C50763) * C8062) *
                C50746 -
            (C11388 * C8062 +
             ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
             ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                  C50763 +
              (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                  C118) *
                 C50948) *
                C50908) *
               C50718) *
              C292 +
          (((((C11217 + C11216) * C118 + (C11215 + C11214) * C50763) * C50948 +
             ((C11213 + C11212) * C118 + (C11211 + C11210) * C50763) * C50949 +
             ((C11547 + C11548) * C118 + (C11549 + C11550) * C50763) * C8062) *
                C50746 -
            (C10837 * C8062 +
             ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
             ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
                C50908) *
               C50907 +
           ((((C11023 + C11022) * C118 + (C11021 + C11020) * C50763) * C50948 +
             ((C11019 + C11018) * C118 + (C11017 + C11016) * C50763) * C50949 +
             ((C11384 + C11385) * C118 + (C11386 + C11387) * C50763) * C8062) *
                C50908 -
            (((C10778 * C1268 + C50842 * C1276 + C10777 * C944 +
               C50921 * C950) *
                  C50763 +
              (C10778 * C1264 + C50842 * C1269 + C10777 * C935 +
               C50921 * C943) *
                  C118) *
                 C8062 +
             ((C11769 + C11768) * C50763 + (C11767 + C11766) * C118) * C50949 +
             ((C11765 + C11764) * C50763 + (C11763 + C11762) * C118) * C50948) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50682 * C289 -
           (((C11016 + C11017) * C50763 + (C11018 + C11019) * C118) * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C50682 * C290 +
           (((C10777 * C298 + C50921 * C312 + C10778 * C1614 + C50842 * C1622) *
                 C118 +
             (C10777 * C313 + C50921 * C328 + C10778 * C1621 + C50842 * C1626) *
                 C50763) *
                C50948 +
            ((C11024 + C11025) * C118 + (C11026 + C11027) * C50763) * C50949 +
            ((C11028 + C11029) * C118 + (C11030 + C11031) * C50763) * C8062) *
               C50682 * C291) *
              C292 +
          ((((C11023 + C11022) * C118 + (C11021 + C11020) * C50763) * C50948 +
            ((C11019 + C11018) * C118 + (C11017 + C11016) * C50763) * C50949 +
            ((C10777 * C294 + C50921 * C305 + C10778 * C935 + C50842 * C943) *
                 C118 +
             (C10777 * C304 + C50921 * C324 + C10778 * C944 + C50842 * C950) *
                 C50763) *
                C8062) *
               C50682 * C290 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C50682 * C289 -
           (((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
                 C50763 +
             (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
                 C118) *
                C8062 +
            ((C11031 + C11030) * C50763 + (C11029 + C11028) * C118) * C50949 +
            ((C11027 + C11026) * C50763 + (C11025 + C11024) * C118) * C50948) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C118 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50763) *
               C50948 +
           ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
           C10836 * C8062) *
              C50682 * C50666 * C113 -
          (C10837 * C8062 +
           ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
           ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
              C50682 * C50666 * C114 +
          (C10836 * C50948 +
           ((C10823 + C10822) * C118 + (C10821 + C10820) * C50763) * C50949 +
           ((C10824 + C10825) * C118 + (C10826 + C10827) * C50763) * C8062) *
              C50682 * C50666 * C115 -
          (((C10778 * C789 + C50842 * C791 + C10777 * C137 + C50921 * C145) *
                C50763 +
            (C10778 * C788 + C50842 * C790 + C10777 * C124 + C50921 * C136) *
                C118) *
               C8062 +
           ((C10827 + C10826) * C50763 + (C10825 + C10824) * C118) * C50949 +
           C10837 * C50948) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C480 -
           (((C11210 + C11211) * C50763 + (C11212 + C11213) * C118) * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C481 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C118 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C50763) *
                C50948 +
            ((C11218 + C11219) * C118 + (C11220 + C11221) * C50763) * C50949 +
            ((C11222 + C11223) * C118 + (C11224 + C11225) * C50763) * C8062) *
               C482) *
              C50666 * C292 +
          ((((C11217 + C11216) * C118 + (C11215 + C11214) * C50763) * C50948 +
            ((C11213 + C11212) * C118 + (C11211 + C11210) * C50763) * C50949 +
            ((C10777 * C483 + C50921 * C494 + C10778 * C490 + C50842 * C507) *
                 C118 +
             (C10777 * C493 + C50921 * C513 + C10778 * C508 + C50842 * C520) *
                 C50763) *
                C8062) *
               C481 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C480 -
           (((C10778 * C1899 + C50842 * C1907 + C10777 * C508 + C50921 * C520) *
                 C50763 +
             (C10778 * C1895 + C50842 * C1900 + C10777 * C490 + C50921 * C507) *
                 C118) *
                C8062 +
            ((C11225 + C11224) * C50763 + (C11223 + C11222) * C118) * C50949 +
            ((C11221 + C11220) * C50763 + (C11219 + C11218) * C118) * C50948) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50908 -
           (C11551 * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C50746) *
              C50666 * C50950 +
          ((((C11217 + C11216) * C118 + (C11215 + C11214) * C50763) * C50948 +
            ((C11213 + C11212) * C118 + (C11211 + C11210) * C50763) * C50949 +
            ((C11547 + C11548) * C118 + (C11549 + C11550) * C50763) * C8062) *
               C50746 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C50908) *
              C50666 * C50951 +
          ((C10836 * C50948 +
            ((C10823 + C10822) * C118 + (C10821 + C10820) * C50763) * C50949 +
            ((C10824 + C10825) * C118 + (C10826 + C10827) * C50763) * C8062) *
               C50908 -
           (((C10778 * C511 + C50842 * C522 + C10777 * C510 + C50921 * C521) *
                 C50763 +
             (C10778 * C492 + C50842 * C512 + C10777 * C491 + C50921 * C509) *
                 C118) *
                C8062 +
            ((C11550 + C11549) * C50763 + (C11548 + C11547) * C118) * C50949 +
            C11551 * C50948) *
               C50746) *
              C50666 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C118 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50763) *
               C50948 +
           ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
           C10836 * C8062) *
              C50682 * C50666 * C113 -
          (C10837 * C8062 +
           ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
           ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
              C50682 * C50666 * C114 +
          (C10836 * C50948 +
           ((C10823 + C10822) * C118 + (C10821 + C10820) * C50763) * C50949 +
           ((C10824 + C10825) * C118 + (C10826 + C10827) * C50763) * C8062) *
              C50682 * C50666 * C115 -
          (((C10778 * C789 + C50842 * C791 + C10777 * C137 + C50921 * C145) *
                C50763 +
            (C10778 * C788 + C50842 * C790 + C10777 * C124 + C50921 * C136) *
                C118) *
               C8062 +
           ((C10827 + C10826) * C50763 + (C10825 + C10824) * C118) * C50949 +
           C10837 * C50948) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50682 * C289 -
           (((C11016 + C11017) * C50763 + (C11018 + C11019) * C118) * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C50682 * C290 +
           (((C10777 * C298 + C50921 * C312 + C10778 * C1614 + C50842 * C1622) *
                 C118 +
             (C10777 * C313 + C50921 * C328 + C10778 * C1621 + C50842 * C1626) *
                 C50763) *
                C50948 +
            ((C11024 + C11025) * C118 + (C11026 + C11027) * C50763) * C50949 +
            ((C11028 + C11029) * C118 + (C11030 + C11031) * C50763) * C8062) *
               C50682 * C291) *
              C292 +
          ((((C11023 + C11022) * C118 + (C11021 + C11020) * C50763) * C50948 +
            ((C11019 + C11018) * C118 + (C11017 + C11016) * C50763) * C50949 +
            ((C10777 * C294 + C50921 * C305 + C10778 * C935 + C50842 * C943) *
                 C118 +
             (C10777 * C304 + C50921 * C324 + C10778 * C944 + C50842 * C950) *
                 C50763) *
                C8062) *
               C50682 * C290 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C50682 * C289 -
           (((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
                 C50763 +
             (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
                 C118) *
                C8062 +
            ((C11031 + C11030) * C50763 + (C11029 + C11028) * C118) * C50949 +
            ((C11027 + C11026) * C50763 + (C11025 + C11024) * C118) * C50948) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50682 * C50952 -
           (C11388 * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C50682 * C50953 +
           (((C10777 * C298 + C50921 * C312 + C10778 * C1614 + C50842 * C1622) *
                 C118 +
             (C10777 * C313 + C50921 * C328 + C10778 * C1621 + C50842 * C1626) *
                 C50763) *
                C50948 +
            ((C11024 + C11025) * C118 + (C11026 + C11027) * C50763) * C50949 +
            ((C11028 + C11029) * C118 + (C11030 + C11031) * C50763) * C8062) *
               C50682 * C1380) *
              C50899 +
          ((((C11023 + C11022) * C118 + (C11021 + C11020) * C50763) * C50948 +
            ((C11019 + C11018) * C118 + (C11017 + C11016) * C50763) * C50949 +
            ((C11384 + C11385) * C118 + (C11386 + C11387) * C50763) * C8062) *
               C50682 * C50953 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C50682 * C50952 -
           (((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
                 C50763 +
             (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
                 C118) *
                C8062 +
            ((C11031 + C11030) * C50763 + (C11029 + C11028) * C118) * C50949 +
            ((C11027 + C11026) * C50763 + (C11025 + C11024) * C118) * C50948) *
               C50682 * C1380) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50908 -
           (C11551 * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C50746) *
              C50952 +
          ((((C10777 * C932 + C50921 * C937 + C10778 * C1267 + C50842 * C1275) *
                 C118 +
             (C10777 * C938 + C50921 * C947 + C10778 * C1274 + C50842 * C1279) *
                 C50763) *
                C50948 +
            ((C11762 + C11763) * C118 + (C11764 + C11765) * C50763) * C50949 +
            ((C11766 + C11767) * C118 + (C11768 + C11769) * C50763) * C8062) *
               C50746 -
           (C11388 * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C50908) *
              C50953 +
          ((((C10777 * C298 + C50921 * C312 + C10778 * C1614 + C50842 * C1622) *
                 C118 +
             (C10777 * C313 + C50921 * C328 + C10778 * C1621 + C50842 * C1626) *
                 C50763) *
                C50948 +
            ((C11024 + C11025) * C118 + (C11026 + C11027) * C50763) * C50949 +
            ((C11028 + C11029) * C118 + (C11030 + C11031) * C50763) * C8062) *
               C50908 -
           (((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
              C50921 * C1624) *
                 C50763 +
             (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
              C50921 * C1618) *
                 C118) *
                C8062 +
            ((C10778 * C2722 + C50842 * C2726 + C10777 * C1619 +
              C50921 * C1625) *
                 C50763 +
             (C10778 * C2717 + C50842 * C2721 + C10777 * C1613 +
              C50921 * C1620) *
                 C118) *
                C50949 +
            ((C10778 * C2720 + C50842 * C2725 + C10777 * C1621 +
              C50921 * C1626) *
                 C50763 +
             (C10778 * C2716 + C50842 * C2719 + C10777 * C1614 +
              C50921 * C1622) *
                 C118) *
                C50948) *
               C50746) *
              C1380) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C118 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50763) *
               C50948 +
           ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
           C10836 * C8062) *
              C50682 * C1145 -
          (C11388 * C8062 +
           ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
           ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                C50763 +
            (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                C118) *
               C50948) *
              C50682 * C1146 +
          (((C10777 * C298 + C50921 * C312 + C10778 * C1614 + C50842 * C1622) *
                C118 +
            (C10777 * C313 + C50921 * C328 + C10778 * C1621 + C50842 * C1626) *
                C50763) *
               C50948 +
           ((C11024 + C11025) * C118 + (C11026 + C11027) * C50763) * C50949 +
           ((C11028 + C11029) * C118 + (C11030 + C11031) * C50763) * C8062) *
              C50682 * C1147 -
          (((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
             C50921 * C1163) *
                C50763 +
            (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
             C50921 * C1157) *
                C118) *
               C8062 +
           ((C10778 * C3268 + C50842 * C3272 + C10777 * C1158 +
             C50921 * C1164) *
                C50763 +
            (C10778 * C3263 + C50842 * C3267 + C10777 * C1152 +
             C50921 * C1159) *
                C118) *
               C50949 +
           ((C10778 * C3266 + C50842 * C3271 + C10777 * C1160 +
             C50921 * C1165) *
                C50763 +
            (C10778 * C3262 + C50842 * C3265 + C10777 * C1153 +
             C50921 * C1161) *
                C118) *
               C50948) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50682 * C1074 -
           (C11388 * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C50682 * C50718) *
              C1076 +
          ((((C11023 + C11022) * C118 + (C11021 + C11020) * C50763) * C50948 +
            ((C11019 + C11018) * C118 + (C11017 + C11016) * C50763) * C50949 +
            ((C11384 + C11385) * C118 + (C11386 + C11387) * C50763) * C8062) *
               C50682 * C50718 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C50682 * C1074) *
              C1077 +
          ((C10836 * C50948 +
            ((C10823 + C10822) * C118 + (C10821 + C10820) * C50763) * C50949 +
            ((C10824 + C10825) * C118 + (C10826 + C10827) * C50763) * C8062) *
               C50682 * C1074 -
           (((C10778 * C945 + C50842 * C951 + C10777 * C321 + C50921 * C332) *
                 C50763 +
             (C10778 * C936 + C50842 * C946 + C10777 * C302 + C50921 * C320) *
                 C118) *
                C8062 +
            ((C11387 + C11386) * C50763 + (C11385 + C11384) * C118) * C50949 +
            C11388 * C50948) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C480 -
           (C11551 * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C481 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C118 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C50763) *
                C50948 +
            ((C11218 + C11219) * C118 + (C11220 + C11221) * C50763) * C50949 +
            ((C11222 + C11223) * C118 + (C11224 + C11225) * C50763) * C8062) *
               C482) *
              C1074 +
          ((((C10777 * C932 + C50921 * C937 + C10778 * C1267 + C50842 * C1275) *
                 C118 +
             (C10777 * C938 + C50921 * C947 + C10778 * C1274 + C50842 * C1279) *
                 C50763) *
                C50948 +
            ((C11762 + C11763) * C118 + (C11764 + C11765) * C50763) * C50949 +
            ((C11766 + C11767) * C118 + (C11768 + C11769) * C50763) * C8062) *
               C481 -
           (C11388 * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C480 -
           (((C10778 * C6171 + C50842 * C6173 + C10777 * C1270 +
              C50921 * C1277) *
                 C50763 +
             (C10778 * C6170 + C50842 * C6172 + C10777 * C1265 +
              C50921 * C1271) *
                 C118) *
                C8062 +
            ((C10778 * C4618 + C50842 * C4625 + C10777 * C1272 +
              C50921 * C1278) *
                 C50763 +
             (C10778 * C4613 + C50842 * C4619 + C10777 * C1266 +
              C50921 * C1273) *
                 C118) *
                C50949 +
            ((C10778 * C4622 + C50842 * C4627 + C10777 * C1274 +
              C50921 * C1279) *
                 C50763 +
             (C10778 * C4615 + C50842 * C4623 + C10777 * C1267 +
              C50921 * C1275) *
                 C118) *
                C50948) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                  C118 +
              (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                  C50763) *
                 C50948 +
             ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
             C10836 * C8062) *
                C50908 -
            (C11551 * C8062 +
             ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
             ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                  C50763 +
              (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                  C118) *
                 C50948) *
                C50746) *
               C1074 +
           ((((C10777 * C932 + C50921 * C937 + C10778 * C1267 +
               C50842 * C1275) *
                  C118 +
              (C10777 * C938 + C50921 * C947 + C10778 * C1274 +
               C50842 * C1279) *
                  C50763) *
                 C50948 +
             ((C11762 + C11763) * C118 + (C11764 + C11765) * C50763) * C50949 +
             ((C11766 + C11767) * C118 + (C11768 + C11769) * C50763) * C8062) *
                C50746 -
            (C11388 * C8062 +
             ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
             ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                  C50763 +
              (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                  C118) *
                 C50948) *
                C50908) *
               C50718) *
              C50899 +
          (((((C11217 + C11216) * C118 + (C11215 + C11214) * C50763) * C50948 +
             ((C11213 + C11212) * C118 + (C11211 + C11210) * C50763) * C50949 +
             ((C11547 + C11548) * C118 + (C11549 + C11550) * C50763) * C8062) *
                C50746 -
            (C10837 * C8062 +
             ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
             ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
                C50908) *
               C1074 +
           ((((C11023 + C11022) * C118 + (C11021 + C11020) * C50763) * C50948 +
             ((C11019 + C11018) * C118 + (C11017 + C11016) * C50763) * C50949 +
             ((C11384 + C11385) * C118 + (C11386 + C11387) * C50763) * C8062) *
                C50908 -
            (((C10778 * C1268 + C50842 * C1276 + C10777 * C944 +
               C50921 * C950) *
                  C50763 +
              (C10778 * C1264 + C50842 * C1269 + C10777 * C935 +
               C50921 * C943) *
                  C118) *
                 C8062 +
             ((C11769 + C11768) * C50763 + (C11767 + C11766) * C118) * C50949 +
             ((C11765 + C11764) * C50763 + (C11763 + C11762) * C118) * C50948) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50682 * C1074 -
           (C11388 * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C50682 * C50718) *
              C1076 +
          ((((C11023 + C11022) * C118 + (C11021 + C11020) * C50763) * C50948 +
            ((C11019 + C11018) * C118 + (C11017 + C11016) * C50763) * C50949 +
            ((C11384 + C11385) * C118 + (C11386 + C11387) * C50763) * C8062) *
               C50682 * C50718 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C50682 * C1074) *
              C1077 +
          ((C10836 * C50948 +
            ((C10823 + C10822) * C118 + (C10821 + C10820) * C50763) * C50949 +
            ((C10824 + C10825) * C118 + (C10826 + C10827) * C50763) * C8062) *
               C50682 * C1074 -
           (((C10778 * C945 + C50842 * C951 + C10777 * C321 + C50921 * C332) *
                 C50763 +
             (C10778 * C936 + C50842 * C946 + C10777 * C302 + C50921 * C320) *
                 C118) *
                C8062 +
            ((C11387 + C11386) * C50763 + (C11385 + C11384) * C118) * C50949 +
            C11388 * C50948) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C118 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50763) *
               C50948 +
           ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
           C10836 * C8062) *
              C50682 * C1145 -
          (C11388 * C8062 +
           ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
           ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                C50763 +
            (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                C118) *
               C50948) *
              C50682 * C1146 +
          (((C10777 * C298 + C50921 * C312 + C10778 * C1614 + C50842 * C1622) *
                C118 +
            (C10777 * C313 + C50921 * C328 + C10778 * C1621 + C50842 * C1626) *
                C50763) *
               C50948 +
           ((C11024 + C11025) * C118 + (C11026 + C11027) * C50763) * C50949 +
           ((C11028 + C11029) * C118 + (C11030 + C11031) * C50763) * C8062) *
              C50682 * C1147 -
          (((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
             C50921 * C1163) *
                C50763 +
            (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
             C50921 * C1157) *
                C118) *
               C8062 +
           ((C10778 * C3268 + C50842 * C3272 + C10777 * C1158 +
             C50921 * C1164) *
                C50763 +
            (C10778 * C3263 + C50842 * C3267 + C10777 * C1152 +
             C50921 * C1159) *
                C118) *
               C50949 +
           ((C10778 * C3266 + C50842 * C3271 + C10777 * C1160 +
             C50921 * C1165) *
                C50763 +
            (C10778 * C3262 + C50842 * C3265 + C10777 * C1153 +
             C50921 * C1161) *
                C118) *
               C50948) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                  C118 +
              (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                  C50763) *
                 C50948 +
             ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
             C10836 * C8062) *
                C1725 -
            (C11551 * C8062 +
             ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
             ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                  C50763 +
              (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                  C118) *
                 C50948) *
                C50746) *
               C50907 +
           ((((C10777 * C932 + C50921 * C937 + C10778 * C1267 +
               C50842 * C1275) *
                  C118 +
              (C10777 * C938 + C50921 * C947 + C10778 * C1274 +
               C50842 * C1279) *
                  C50763) *
                 C50948 +
             ((C11762 + C11763) * C118 + (C11764 + C11765) * C50763) * C50949 +
             ((C11766 + C11767) * C118 + (C11768 + C11769) * C50763) * C8062) *
                C50746 -
            (C11388 * C8062 +
             ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
             ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                  C50763 +
              (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                  C118) *
                 C50948) *
                C1725) *
               C50718) *
              C50899 +
          (((((C11217 + C11216) * C118 + (C11215 + C11214) * C50763) * C50948 +
             ((C11213 + C11212) * C118 + (C11211 + C11210) * C50763) * C50949 +
             ((C11547 + C11548) * C118 + (C11549 + C11550) * C50763) * C8062) *
                C50746 -
            (C10837 * C8062 +
             ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
             ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
                C1725) *
               C50907 +
           ((((C11023 + C11022) * C118 + (C11021 + C11020) * C50763) * C50948 +
             ((C11019 + C11018) * C118 + (C11017 + C11016) * C50763) * C50949 +
             ((C11384 + C11385) * C118 + (C11386 + C11387) * C50763) * C8062) *
                C1725 -
            (((C10778 * C1268 + C50842 * C1276 + C10777 * C944 +
               C50921 * C950) *
                  C50763 +
              (C10778 * C1264 + C50842 * C1269 + C10777 * C935 +
               C50921 * C943) *
                  C118) *
                 C8062 +
             ((C11769 + C11768) * C50763 + (C11767 + C11766) * C118) * C50949 +
             ((C11765 + C11764) * C50763 + (C11763 + C11762) * C118) * C50948) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50954 -
           (C11551 * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C50955 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C118 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C50763) *
                C50948 +
            ((C11218 + C11219) * C118 + (C11220 + C11221) * C50763) * C50949 +
            ((C11222 + C11223) * C118 + (C11224 + C11225) * C50763) * C8062) *
               C2141) *
              C50907 +
          ((((C10777 * C932 + C50921 * C937 + C10778 * C1267 + C50842 * C1275) *
                 C118 +
             (C10777 * C938 + C50921 * C947 + C10778 * C1274 + C50842 * C1279) *
                 C50763) *
                C50948 +
            ((C11762 + C11763) * C118 + (C11764 + C11765) * C50763) * C50949 +
            ((C11766 + C11767) * C118 + (C11768 + C11769) * C50763) * C8062) *
               C50955 -
           (C11388 * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C50954 -
           (((C10778 * C6171 + C50842 * C6173 + C10777 * C1270 +
              C50921 * C1277) *
                 C50763 +
             (C10778 * C6170 + C50842 * C6172 + C10777 * C1265 +
              C50921 * C1271) *
                 C118) *
                C8062 +
            ((C10778 * C4618 + C50842 * C4625 + C10777 * C1272 +
              C50921 * C1278) *
                 C50763 +
             (C10778 * C4613 + C50842 * C4619 + C10777 * C1266 +
              C50921 * C1273) *
                 C118) *
                C50949 +
            ((C10778 * C4622 + C50842 * C4627 + C10777 * C1274 +
              C50921 * C1279) *
                 C50763 +
             (C10778 * C4615 + C50842 * C4623 + C10777 * C1267 +
              C50921 * C1275) *
                 C118) *
                C50948) *
               C2141) *
              C50718) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C1725 -
           (C11551 * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C50746) *
              C289 +
          ((((C10777 * C932 + C50921 * C937 + C10778 * C1267 + C50842 * C1275) *
                 C118 +
             (C10777 * C938 + C50921 * C947 + C10778 * C1274 + C50842 * C1279) *
                 C50763) *
                C50948 +
            ((C11762 + C11763) * C118 + (C11764 + C11765) * C50763) * C50949 +
            ((C11766 + C11767) * C118 + (C11768 + C11769) * C50763) * C8062) *
               C50746 -
           (C11388 * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C1725) *
              C290 +
          ((((C10777 * C298 + C50921 * C312 + C10778 * C1614 + C50842 * C1622) *
                 C118 +
             (C10777 * C313 + C50921 * C328 + C10778 * C1621 + C50842 * C1626) *
                 C50763) *
                C50948 +
            ((C11024 + C11025) * C118 + (C11026 + C11027) * C50763) * C50949 +
            ((C11028 + C11029) * C118 + (C11030 + C11031) * C50763) * C8062) *
               C1725 -
           (((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
              C50921 * C1624) *
                 C50763 +
             (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
              C50921 * C1618) *
                 C118) *
                C8062 +
            ((C10778 * C2722 + C50842 * C2726 + C10777 * C1619 +
              C50921 * C1625) *
                 C50763 +
             (C10778 * C2717 + C50842 * C2721 + C10777 * C1613 +
              C50921 * C1620) *
                 C118) *
                C50949 +
            ((C10778 * C2720 + C50842 * C2725 + C10777 * C1621 +
              C50921 * C1626) *
                 C50763 +
             (C10778 * C2716 + C50842 * C2719 + C10777 * C1614 +
              C50921 * C1622) *
                 C118) *
                C50948) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C1725 -
           (C11551 * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C50746) *
              C50666 * C1076 +
          ((((C11217 + C11216) * C118 + (C11215 + C11214) * C50763) * C50948 +
            ((C11213 + C11212) * C118 + (C11211 + C11210) * C50763) * C50949 +
            ((C11547 + C11548) * C118 + (C11549 + C11550) * C50763) * C8062) *
               C50746 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C1725) *
              C50666 * C1077 +
          ((C10836 * C50948 +
            ((C10823 + C10822) * C118 + (C10821 + C10820) * C50763) * C50949 +
            ((C10824 + C10825) * C118 + (C10826 + C10827) * C50763) * C8062) *
               C1725 -
           (((C10778 * C511 + C50842 * C522 + C10777 * C510 + C50921 * C521) *
                 C50763 +
             (C10778 * C492 + C50842 * C512 + C10777 * C491 + C50921 * C509) *
                 C118) *
                C8062 +
            ((C11550 + C11549) * C50763 + (C11548 + C11547) * C118) * C50949 +
            C11551 * C50948) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C118 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50763) *
               C50948 +
           ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
           C10836 * C8062) *
              C1891 -
          (C11551 * C8062 +
           ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
           ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50763 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C118) *
               C50948) *
              C1892 +
          (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                C118 +
            (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                C50763) *
               C50948 +
           ((C11218 + C11219) * C118 + (C11220 + C11221) * C50763) * C50949 +
           ((C11222 + C11223) * C118 + (C11224 + C11225) * C50763) * C8062) *
              C1893 -
          (((C10778 * C5607 + C50842 * C5611 + C10777 * C1901 +
             C50921 * C1908) *
                C50763 +
            (C10778 * C5602 + C50842 * C5608 + C10777 * C1896 +
             C50921 * C1902) *
                C118) *
               C8062 +
           ((C10778 * C5606 + C50842 * C5610 + C10777 * C1903 +
             C50921 * C1909) *
                C50763 +
            (C10778 * C5601 + C50842 * C5605 + C10777 * C1897 +
             C50921 * C1904) *
                C118) *
               C50949 +
           ((C10778 * C5604 + C50842 * C5609 + C10777 * C1905 +
             C50921 * C1910) *
                C50763 +
            (C10778 * C5600 + C50842 * C5603 + C10777 * C1898 +
             C50921 * C1906) *
                C118) *
               C50948) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C50954 -
           (C11551 * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C50955 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C118 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C50763) *
                C50948 +
            ((C11218 + C11219) * C118 + (C11220 + C11221) * C50763) * C50949 +
            ((C11222 + C11223) * C118 + (C11224 + C11225) * C50763) * C8062) *
               C2141) *
              C50666 * C50899 +
          ((((C11217 + C11216) * C118 + (C11215 + C11214) * C50763) * C50948 +
            ((C11213 + C11212) * C118 + (C11211 + C11210) * C50763) * C50949 +
            ((C11547 + C11548) * C118 + (C11549 + C11550) * C50763) * C8062) *
               C50955 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C50954 -
           (((C10778 * C1899 + C50842 * C1907 + C10777 * C508 + C50921 * C520) *
                 C50763 +
             (C10778 * C1895 + C50842 * C1900 + C10777 * C490 + C50921 * C507) *
                 C118) *
                C8062 +
            ((C11225 + C11224) * C50763 + (C11223 + C11222) * C118) * C50949 +
            ((C11221 + C11220) * C50763 + (C11219 + C11218) * C118) * C50948) *
               C2141) *
              C50666 * C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C1725 -
           (C11551 * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C50746) *
              C50666 * C1076 +
          ((((C11217 + C11216) * C118 + (C11215 + C11214) * C50763) * C50948 +
            ((C11213 + C11212) * C118 + (C11211 + C11210) * C50763) * C50949 +
            ((C11547 + C11548) * C118 + (C11549 + C11550) * C50763) * C8062) *
               C50746 -
           (C10837 * C8062 +
            ((C10819 + C10818) * C50763 + (C10817 + C10816) * C118) * C50949 +
            ((C10815 + C10814) * C50763 + (C10813 + C10812) * C118) * C50948) *
               C1725) *
              C50666 * C1077 +
          ((C10836 * C50948 +
            ((C10823 + C10822) * C118 + (C10821 + C10820) * C50763) * C50949 +
            ((C10824 + C10825) * C118 + (C10826 + C10827) * C50763) * C8062) *
               C1725 -
           (((C10778 * C511 + C50842 * C522 + C10777 * C510 + C50921 * C521) *
                 C50763 +
             (C10778 * C492 + C50842 * C512 + C10777 * C491 + C50921 * C509) *
                 C118) *
                C8062 +
            ((C11550 + C11549) * C50763 + (C11548 + C11547) * C118) * C50949 +
            C11551 * C50948) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C118 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50763) *
                C50948 +
            ((C10812 + C10813) * C118 + (C10814 + C10815) * C50763) * C50949 +
            C10836 * C8062) *
               C1725 -
           (C11551 * C8062 +
            ((C11214 + C11215) * C50763 + (C11216 + C11217) * C118) * C50949 +
            ((C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50763 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C118) *
                C50948) *
               C50746) *
              C289 +
          ((((C10777 * C932 + C50921 * C937 + C10778 * C1267 + C50842 * C1275) *
                 C118 +
             (C10777 * C938 + C50921 * C947 + C10778 * C1274 + C50842 * C1279) *
                 C50763) *
                C50948 +
            ((C11762 + C11763) * C118 + (C11764 + C11765) * C50763) * C50949 +
            ((C11766 + C11767) * C118 + (C11768 + C11769) * C50763) * C8062) *
               C50746 -
           (C11388 * C8062 +
            ((C11020 + C11021) * C50763 + (C11022 + C11023) * C118) * C50949 +
            ((C10778 * C938 + C50842 * C947 + C10777 * C310 + C50921 * C327) *
                 C50763 +
             (C10778 * C932 + C50842 * C937 + C10777 * C297 + C50921 * C311) *
                 C118) *
                C50948) *
               C1725) *
              C290 +
          ((((C10777 * C298 + C50921 * C312 + C10778 * C1614 + C50842 * C1622) *
                 C118 +
             (C10777 * C313 + C50921 * C328 + C10778 * C1621 + C50842 * C1626) *
                 C50763) *
                C50948 +
            ((C11024 + C11025) * C118 + (C11026 + C11027) * C50763) * C50949 +
            ((C11028 + C11029) * C118 + (C11030 + C11031) * C50763) * C8062) *
               C1725 -
           (((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
              C50921 * C1624) *
                 C50763 +
             (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
              C50921 * C1618) *
                 C118) *
                C8062 +
            ((C10778 * C2722 + C50842 * C2726 + C10777 * C1619 +
              C50921 * C1625) *
                 C50763 +
             (C10778 * C2717 + C50842 * C2721 + C10777 * C1613 +
              C50921 * C1620) *
                 C118) *
                C50949 +
            ((C10778 * C2720 + C50842 * C2725 + C10777 * C1621 +
              C50921 * C1626) *
                 C50763 +
             (C10778 * C2716 + C50842 * C2719 + C10777 * C1614 +
              C50921 * C1622) *
                 C118) *
                C50948) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50682 * C50907 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C50682 * C50718) *
                      C50950 +
                  (((C376 + C375) * C107 + (C374 + C373) * C108 +
                    (C372 + C371) * C109 + (C687 + C688) * C110) *
                       C50682 * C50718 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50682 * C50907) *
                      C50951 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C50682 * C50907 -
                   (((C117 * C675 + C50778 * C677) * C50763 +
                     (C117 * C674 + C50778 * C676) * C118) *
                        C110 +
                    (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
                       C50682 * C50718) *
                      C673)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50682 * C50907 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C50682 * C50718) *
                      C50950 +
                  (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                    (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                       C50682 * C50718 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C50682 * C50907) *
                      C50951 +
                  (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
                    (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
                       C50682 * C50907 -
                   (((C117 * C1154 + C50778 * C1162) * C2340 +
                     (C117 * C1150 + C50778 * C1155) * C2345 + C370 * C2339 +
                     C369 * C2344 + C359 * C2338 + C360 * C2343) *
                        C50626 +
                    (C2910 + C2909 + C2908 + C2907 + C2906 + C2905) * C2341) *
                       C50682 * C50718) *
                      C673)) /
                    (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C118 +
                      (C117 * C127 + C50778 * C140) * C50763) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C50908 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50778 * C516) * C50763 +
                      (C117 * C486 + C50778 * C500) * C118) *
                         C107) *
                        C50746) *
                       C50907 +
                   ((((C117 * C932 + C50778 * C937) * C118 +
                      (C117 * C938 + C50778 * C947) * C50763) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50746 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50778 * C327) * C50763 +
                      (C117 * C297 + C50778 * C311) * C118) *
                         C107) *
                        C50908) *
                       C50718) *
                      C292 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50746 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C50908) *
                       C50907 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C50908 -
                    (((C117 * C945 + C50778 * C951) * C50763 +
                      (C117 * C936 + C50778 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C2343 +
                      (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                      C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                         C2341 +
                     (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                        C50908 -
                    ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                     (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                      C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                      (C117 * C486 + C50778 * C500) * C2343) *
                         C2341) *
                        C50746) *
                       C50907 +
                   (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                      C3291 * C2339 + (C117 * C3262 + C50778 * C3265) * C2345 +
                      (C117 * C3266 + C50778 * C3271) * C2340) *
                         C2341 +
                     (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                        C50746 -
                    ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                     (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                      C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                         C2341) *
                        C50908) *
                       C50718) *
                      C292 +
                  ((((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                     (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                        C50746 -
                    ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                     (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                        C50908) *
                       C50907 +
                   (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                     (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                        C50908 -
                    (((C117 * C3269 + C50778 * C3273) * C2340 +
                      (C117 * C3264 + C50778 * C3270) * C2345 + C3066 * C2339 +
                      C3065 * C2344 + C968 * C2338 + C967 * C2343) *
                         C50626 +
                     (C3298 + C3297 + C3286 + C3285 + C3284 + C3283) * C2341) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50682 * C289 -
           ((C371 + C372) * C110 + (C373 + C374) * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50778 * C327) * C50763 +
             (C117 * C297 + C50778 * C311) * C118) *
                C107) *
               C50682 * C290 +
           (((C117 * C298 + C50778 * C312) * C118 +
             (C117 * C313 + C50778 * C328) * C50763) *
                C107 +
            (C377 + C378) * C108 + (C379 + C380) * C109 +
            (C381 + C382) * C110) *
               C50682 * C291) *
              C292 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            ((C117 * C302 + C50778 * C320) * C118 +
             (C117 * C321 + C50778 * C332) * C50763) *
                C110) *
               C50682 * C290 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50682 * C289 -
           (((C117 * C322 + C50778 * C333) * C50763 +
             (C117 * C303 + C50778 * C323) * C118) *
                C110 +
            (C382 + C381) * C109 + (C380 + C379) * C108 +
            (C378 + C377) * C107) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C118 +
            (C117 * C127 + C50778 * C140) * C50763) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50682 * C50666 * C113 -
          (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
           (C179 + C178) * C107) *
              C50682 * C50666 * C114 +
          (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
           (C186 + C187) * C110) *
              C50682 * C50666 * C115 -
          (((C117 * C138 + C50778 * C146) * C50763 +
            (C117 * C125 + C50778 * C139) * C118) *
               C110 +
           (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C480 -
           ((C560 + C561) * C110 + (C562 + C563) * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50778 * C516) * C50763 +
             (C117 * C486 + C50778 * C500) * C118) *
                C107) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C118 +
             (C117 * C502 + C50778 * C517) * C50763) *
                C107 +
            (C566 + C567) * C108 + (C568 + C569) * C109 +
            (C570 + C571) * C110) *
               C482) *
              C50666 * C292 +
          (((C565 + C564) * C107 + (C563 + C562) * C108 + (C561 + C560) * C109 +
            ((C117 * C491 + C50778 * C509) * C118 +
             (C117 * C510 + C50778 * C521) * C50763) *
                C110) *
               C481 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C480 -
           (((C117 * C511 + C50778 * C522) * C50763 +
             (C117 * C492 + C50778 * C512) * C118) *
                C110 +
            (C571 + C570) * C109 + (C569 + C568) * C108 +
            (C567 + C566) * C107) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 +
            (C117 * C297 + C50778 * C311) * C2344 +
            (C117 * C310 + C50778 * C327) * C2339 +
            (C117 * C298 + C50778 * C312) * C2345 +
            (C117 * C313 + C50778 * C328) * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C50682 * C50666 * C113 -
          ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
           (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
              C50682 * C50666 * C114 +
          ((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
           (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
              C50682 * C50666 * C115 -
          (((C117 * C322 + C50778 * C333) * C2340 +
            (C117 * C303 + C50778 * C323) * C2345 + C686 * C2339 +
            C685 * C2344 + C174 * C2338 + C175 * C2343) *
               C50626 +
           (C2364 + C2363 + C2362 + C2361 + C2360 + C2359) * C2341) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C50682 * C289 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C50682 * C290 +
           ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
             (C117 * C2510 + C50778 * C2513) * C2345 +
             (C117 * C2514 + C50778 * C2519) * C2340) *
                C2341 +
            (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
               C50682 * C291) *
              C292 +
          (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
            (C362 * C2343 + C361 * C2338 + C367 * C2344 + C368 * C2339 +
             C2563 * C2345 + C2564 * C2340) *
                C50626) *
               C50682 * C290 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C50682 * C289 -
           (((C117 * C2517 + C50778 * C2521) * C2340 +
             (C117 * C2512 + C50778 * C2518) * C2345 + C2564 * C2339 +
             C2563 * C2344 + C368 * C2338 + C367 * C2343) *
                C50626 +
            (C2570 + C2569 + C2568 + C2567 + C2544 + C2543) * C2341) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C480 -
           ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
            ((C117 * C1621 + C50778 * C1626) * C2340 +
             (C117 * C1614 + C50778 * C1622) * C2345 +
             (C117 * C938 + C50778 * C947) * C2339 +
             (C117 * C932 + C50778 * C937) * C2344 +
             (C117 * C499 + C50778 * C516) * C2338 +
             (C117 * C486 + C50778 * C500) * C2343) *
                C2341) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C2343 +
             (C117 * C502 + C50778 * C517) * C2338 +
             (C117 * C1267 + C50778 * C1275) * C2344 +
             (C117 * C1274 + C50778 * C1279) * C2339 +
             (C117 * C2716 + C50778 * C2719) * C2345 +
             (C117 * C2720 + C50778 * C2725) * C2340) *
                C2341 +
            (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
               C482) *
              C50666 * C292 +
          (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
            (C551 * C2343 + C550 * C2338 + C967 * C2344 + C968 * C2339 +
             (C117 * C1612 + C50778 * C1618) * C2345 +
             (C117 * C1617 + C50778 * C1624) * C2340) *
                C50626) *
               C481 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C480 -
           (((C117 * C2723 + C50778 * C2727) * C2340 +
             (C117 * C2718 + C50778 * C2724) * C2345 +
             (C117 * C1270 + C50778 * C1277) * C2339 +
             (C117 * C1265 + C50778 * C1271) * C2344 + C557 * C2338 +
             C556 * C2343) *
                C50626 +
            (C2758 + C2757 + C2756 + C2755 + C2738 + C2737) * C2341) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50908 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50746) *
                      C50666 * C50950 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50746 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50908) *
                      C50666 * C50951 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C50908 -
                   (((C117 * C789 + C50778 * C791) * C50763 +
                     (C117 * C788 + C50778 * C790) * C118) *
                        C110 +
                    (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                       C50746) *
                      C50666 * C673)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50908 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    ((C117 * C1621 + C50778 * C1626) * C2340 +
                     (C117 * C1614 + C50778 * C1622) * C2345 +
                     (C117 * C938 + C50778 * C947) * C2339 +
                     (C117 * C932 + C50778 * C937) * C2344 +
                     (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50746) *
                      C50666 * C50950 +
                  (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                    (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                       C50746 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C50908) *
                      C50666 * C50951 +
                  (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
                    (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
                       C50908 -
                   (((C117 * C1615 + C50778 * C1623) * C2340 +
                     (C117 * C1611 + C50778 * C1616) * C2345 + C970 * C2339 +
                     C969 * C2344 + C548 * C2338 + C549 * C2343) *
                        C50626 +
                    (C3068 + C3067 + C3060 + C3059 + C3058 + C3057) * C2341) *
                       C50746) *
                      C50666 * C673)) /
                    (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C118 +
            (C117 * C127 + C50778 * C140) * C50763) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50682 * C50666 * C113 -
          (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
           (C179 + C178) * C107) *
              C50682 * C50666 * C114 +
          (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
           (C186 + C187) * C110) *
              C50682 * C50666 * C115 -
          (((C117 * C138 + C50778 * C146) * C50763 +
            (C117 * C125 + C50778 * C139) * C118) *
               C110 +
           (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50682 * C289 -
           ((C371 + C372) * C110 + (C373 + C374) * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50778 * C327) * C50763 +
             (C117 * C297 + C50778 * C311) * C118) *
                C107) *
               C50682 * C290 +
           (((C117 * C298 + C50778 * C312) * C118 +
             (C117 * C313 + C50778 * C328) * C50763) *
                C107 +
            (C377 + C378) * C108 + (C379 + C380) * C109 +
            (C381 + C382) * C110) *
               C50682 * C291) *
              C292 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            ((C117 * C302 + C50778 * C320) * C118 +
             (C117 * C321 + C50778 * C332) * C50763) *
                C110) *
               C50682 * C290 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50682 * C289 -
           (((C117 * C322 + C50778 * C333) * C50763 +
             (C117 * C303 + C50778 * C323) * C118) *
                C110 +
            (C382 + C381) * C109 + (C380 + C379) * C108 +
            (C378 + C377) * C107) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 +
            (C117 * C297 + C50778 * C311) * C2344 +
            (C117 * C310 + C50778 * C327) * C2339 +
            (C117 * C298 + C50778 * C312) * C2345 +
            (C117 * C313 + C50778 * C328) * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C50682 * C50666 * C113 -
          ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
           (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
              C50682 * C50666 * C114 +
          ((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
           (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
              C50682 * C50666 * C115 -
          (((C117 * C322 + C50778 * C333) * C2340 +
            (C117 * C303 + C50778 * C323) * C2345 + C686 * C2339 +
            C685 * C2344 + C174 * C2338 + C175 * C2343) *
               C50626 +
           (C2364 + C2363 + C2362 + C2361 + C2360 + C2359) * C2341) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C50682 * C289 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C50682 * C290 +
           ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
             (C117 * C2510 + C50778 * C2513) * C2345 +
             (C117 * C2514 + C50778 * C2519) * C2340) *
                C2341 +
            (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
               C50682 * C291) *
              C292 +
          (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
            (C362 * C2343 + C361 * C2338 + C367 * C2344 + C368 * C2339 +
             C2563 * C2345 + C2564 * C2340) *
                C50626) *
               C50682 * C290 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C50682 * C289 -
           (((C117 * C2517 + C50778 * C2521) * C2340 +
             (C117 * C2512 + C50778 * C2518) * C2345 + C2564 * C2339 +
             C2563 * C2344 + C368 * C2338 + C367 * C2343) *
                C50626 +
            (C2570 + C2569 + C2568 + C2567 + C2544 + C2543) * C2341) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50682 * C50952 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C50682 * C50953 +
                   (((C117 * C298 + C50778 * C312) * C118 +
                     (C117 * C313 + C50778 * C328) * C50763) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C50682 * C1380) *
                      C50899 +
                  (((C376 + C375) * C107 + (C374 + C373) * C108 +
                    (C372 + C371) * C109 + (C687 + C688) * C110) *
                       C50682 * C50953 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50682 * C50952 -
                   (((C117 * C322 + C50778 * C333) * C50763 +
                     (C117 * C303 + C50778 * C323) * C118) *
                        C110 +
                    (C382 + C381) * C109 + (C380 + C379) * C108 +
                    (C378 + C377) * C107) *
                       C50682 * C1380) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50682 * C50952 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C50682 * C50953 +
                   ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 +
                     C2559 * C2339 + C3555 * C2345 + C3556 * C2340) *
                        C2341 +
                    (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
                       C50682 * C1380) *
                      C50899 +
                  (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                    (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                       C50682 * C50953 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C50682 * C50952 -
                   (((C117 * C2517 + C50778 * C2521) * C2340 +
                     (C117 * C2512 + C50778 * C2518) * C2345 + C2564 * C2339 +
                     C2563 * C2344 + C368 * C2338 + C367 * C2343) *
                        C50626 +
                    (C2570 + C2569 + C2568 + C2567 + C2544 + C2543) * C2341) *
                       C50682 * C1380) *
                      C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[66] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50908 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50746) *
                      C50952 +
                  ((((C117 * C932 + C50778 * C937) * C118 +
                     (C117 * C938 + C50778 * C947) * C50763) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50746 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C50908) *
                      C50953 +
                  ((((C117 * C298 + C50778 * C312) * C118 +
                     (C117 * C313 + C50778 * C328) * C50763) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C50908 -
                   (((C117 * C1615 + C50778 * C1623) * C50763 +
                     (C117 * C1611 + C50778 * C1616) * C118) *
                        C110 +
                    ((C117 * C1617 + C50778 * C1624) * C50763 +
                     (C117 * C1612 + C50778 * C1618) * C118) *
                        C109 +
                    ((C117 * C1619 + C50778 * C1625) * C50763 +
                     (C117 * C1613 + C50778 * C1620) * C118) *
                        C108 +
                    ((C117 * C1621 + C50778 * C1626) * C50763 +
                     (C117 * C1614 + C50778 * C1622) * C118) *
                        C107) *
                       C50746) *
                      C1380) *
                 C50647) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50908 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50746) *
                      C50952 +
                  (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                     C3291 * C2339 + C4221 * C2345 + C4222 * C2340) *
                        C2341 +
                    (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                       C50746 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C50908) *
                      C50953 +
                  (((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 +
                     C2559 * C2339 + C3555 * C2345 + C3556 * C2340) *
                        C2341 +
                    (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
                       C50908 -
                   (((C117 * C4210 + C50778 * C4214) * C2340 +
                     (C117 * C4208 + C50778 * C4211) * C2345 + C3296 * C2339 +
                     C3295 * C2344 + C2747 * C2338 + C2748 * C2343) *
                        C50626 +
                    ((C117 * C4212 + C50778 * C4215) * C2340 +
                     (C117 * C4209 + C50778 * C4213) * C2345 + C4222 * C2339 +
                     C4221 * C2344 + C3291 * C2338 + C3292 * C2343) *
                        C2341) *
                       C50746) *
                      C1380) *
                 C50647) /
                    (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C118 +
            (C117 * C127 + C50778 * C140) * C50763) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50682 * C1145 -
          (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
           ((C117 * C310 + C50778 * C327) * C50763 +
            (C117 * C297 + C50778 * C311) * C118) *
               C107) *
              C50682 * C1146 +
          (((C117 * C298 + C50778 * C312) * C118 +
            (C117 * C313 + C50778 * C328) * C50763) *
               C107 +
           (C377 + C378) * C108 + (C379 + C380) * C109 + (C381 + C382) * C110) *
              C50682 * C1147 -
          (((C117 * C1154 + C50778 * C1162) * C50763 +
            (C117 * C1150 + C50778 * C1155) * C118) *
               C110 +
           ((C117 * C1156 + C50778 * C1163) * C50763 +
            (C117 * C1151 + C50778 * C1157) * C118) *
               C109 +
           ((C117 * C1158 + C50778 * C1164) * C50763 +
            (C117 * C1152 + C50778 * C1159) * C118) *
               C108 +
           ((C117 * C1160 + C50778 * C1165) * C50763 +
            (C117 * C1153 + C50778 * C1161) * C118) *
               C107) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50682 * C1074 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50778 * C327) * C50763 +
             (C117 * C297 + C50778 * C311) * C118) *
                C107) *
               C50682 * C50718) *
              C1076 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            (C687 + C688) * C110) *
               C50682 * C50718 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50682 * C1074) *
              C1077 +
          ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50682 * C1074 -
           (((C117 * C675 + C50778 * C677) * C50763 +
             (C117 * C674 + C50778 * C676) * C118) *
                C110 +
            (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C480 -
           (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50778 * C516) * C50763 +
             (C117 * C486 + C50778 * C500) * C118) *
                C107) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C118 +
             (C117 * C502 + C50778 * C517) * C50763) *
                C107 +
            (C566 + C567) * C108 + (C568 + C569) * C109 +
            (C570 + C571) * C110) *
               C482) *
              C1074 +
          ((((C117 * C932 + C50778 * C937) * C118 +
             (C117 * C938 + C50778 * C947) * C50763) *
                C107 +
            (C971 + C972) * C108 + (C973 + C974) * C109 +
            (C975 + C976) * C110) *
               C481 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50778 * C327) * C50763 +
             (C117 * C297 + C50778 * C311) * C118) *
                C107) *
               C480 -
           (((C117 * C1268 + C50778 * C1276) * C50763 +
             (C117 * C1264 + C50778 * C1269) * C118) *
                C110 +
            ((C117 * C1270 + C50778 * C1277) * C50763 +
             (C117 * C1265 + C50778 * C1271) * C118) *
                C109 +
            ((C117 * C1272 + C50778 * C1278) * C50763 +
             (C117 * C1266 + C50778 * C1273) * C118) *
                C108 +
            ((C117 * C1274 + C50778 * C1279) * C50763 +
             (C117 * C1267 + C50778 * C1275) * C118) *
                C107) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C50682 * C1074 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C50682 * C50718) *
              C1076 +
          (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
            (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
               C50682 * C50718 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C50682 * C1074) *
              C1077 +
          (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
            (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
               C50682 * C1074 -
           (((C117 * C1154 + C50778 * C1162) * C2340 +
             (C117 * C1150 + C50778 * C1155) * C2345 + C370 * C2339 +
             C369 * C2344 + C359 * C2338 + C360 * C2343) *
                C50626 +
            (C2910 + C2909 + C2908 + C2907 + C2906 + C2905) * C2341) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
            C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C50682 * C1145 -
          ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
           (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
            C2554 * C2338 + C2553 * C2343) *
               C2341) *
              C50682 * C1146 +
          ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
            C3555 * C2345 + C3556 * C2340) *
               C2341 +
           (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
              C50682 * C1147 -
          (((C117 * C3544 + C50778 * C3548) * C2340 +
            (C117 * C3542 + C50778 * C3545) * C2345 + C2562 * C2339 +
            C2561 * C2344 + C2557 * C2338 + C2558 * C2343) *
               C50626 +
           ((C117 * C3546 + C50778 * C3549) * C2340 +
            (C117 * C3543 + C50778 * C3547) * C2345 + C3556 * C2339 +
            C3555 * C2344 + C2559 * C2338 + C2560 * C2343) *
               C2341) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C480 -
           ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
            (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 + C3294 * C2344 +
             (C117 * C499 + C50778 * C516) * C2338 +
             (C117 * C486 + C50778 * C500) * C2343) *
                C2341) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C2343 +
             (C117 * C502 + C50778 * C517) * C2338 + C3719 * C2344 +
             C3720 * C2339 + C3721 * C2345 + C3722 * C2340) *
                C2341 +
            (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
               C482) *
              C1074 +
          (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 + C3291 * C2339 +
             (C117 * C3262 + C50778 * C3265) * C2345 +
             (C117 * C3266 + C50778 * C3271) * C2340) *
                C2341 +
            (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
               C481 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C480 -
           (((C117 * C3704 + C50778 * C3708) * C2340 +
             (C117 * C3702 + C50778 * C3705) * C2345 + C2752 * C2339 +
             C2751 * C2344 + C2750 * C2338 + C2749 * C2343) *
                C50626 +
            ((C117 * C3706 + C50778 * C3709) * C2340 +
             (C117 * C3703 + C50778 * C3707) * C2345 + C3722 * C2339 +
             C3721 * C2344 + C3720 * C2338 + C3719 * C2343) *
                C2341) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[68] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C118 +
                      (C117 * C127 + C50778 * C140) * C50763) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C50908 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50778 * C516) * C50763 +
                      (C117 * C486 + C50778 * C500) * C118) *
                         C107) *
                        C50746) *
                       C1074 +
                   ((((C117 * C932 + C50778 * C937) * C118 +
                      (C117 * C938 + C50778 * C947) * C50763) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50746 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50778 * C327) * C50763 +
                      (C117 * C297 + C50778 * C311) * C118) *
                         C107) *
                        C50908) *
                       C50718) *
                      C50899 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50746 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C50908) *
                       C1074 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C50908 -
                    (((C117 * C945 + C50778 * C951) * C50763 +
                      (C117 * C936 + C50778 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C2343 +
                      (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                      C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                         C2341 +
                     (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                        C50908 -
                    ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                     (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                      C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                      (C117 * C486 + C50778 * C500) * C2343) *
                         C2341) *
                        C50746) *
                       C1074 +
                   (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                      C3291 * C2339 + (C117 * C3262 + C50778 * C3265) * C2345 +
                      (C117 * C3266 + C50778 * C3271) * C2340) *
                         C2341 +
                     (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                        C50746 -
                    ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                     (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                      C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                         C2341) *
                        C50908) *
                       C50718) *
                      C50899 +
                  ((((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                     (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                        C50746 -
                    ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                     (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                        C50908) *
                       C1074 +
                   (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                     (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                        C50908 -
                    (((C117 * C3269 + C50778 * C3273) * C2340 +
                      (C117 * C3264 + C50778 * C3270) * C2345 + C3066 * C2339 +
                      C3065 * C2344 + C968 * C2338 + C967 * C2343) *
                         C50626 +
                     (C3298 + C3297 + C3286 + C3285 + C3284 + C3283) * C2341) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50682 * C1074 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50778 * C327) * C50763 +
             (C117 * C297 + C50778 * C311) * C118) *
                C107) *
               C50682 * C50718) *
              C1076 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            (C687 + C688) * C110) *
               C50682 * C50718 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50682 * C1074) *
              C1077 +
          ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50682 * C1074 -
           (((C117 * C675 + C50778 * C677) * C50763 +
             (C117 * C674 + C50778 * C676) * C118) *
                C110 +
            (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C118 +
            (C117 * C127 + C50778 * C140) * C50763) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50682 * C1145 -
          (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
           ((C117 * C310 + C50778 * C327) * C50763 +
            (C117 * C297 + C50778 * C311) * C118) *
               C107) *
              C50682 * C1146 +
          (((C117 * C298 + C50778 * C312) * C118 +
            (C117 * C313 + C50778 * C328) * C50763) *
               C107 +
           (C377 + C378) * C108 + (C379 + C380) * C109 + (C381 + C382) * C110) *
              C50682 * C1147 -
          (((C117 * C1154 + C50778 * C1162) * C50763 +
            (C117 * C1150 + C50778 * C1155) * C118) *
               C110 +
           ((C117 * C1156 + C50778 * C1163) * C50763 +
            (C117 * C1151 + C50778 * C1157) * C118) *
               C109 +
           ((C117 * C1158 + C50778 * C1164) * C50763 +
            (C117 * C1152 + C50778 * C1159) * C118) *
               C108 +
           ((C117 * C1160 + C50778 * C1165) * C50763 +
            (C117 * C1153 + C50778 * C1161) * C118) *
               C107) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C50682 * C1074 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C50682 * C50718) *
              C1076 +
          (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
            (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
               C50682 * C50718 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C50682 * C1074) *
              C1077 +
          (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
            (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
               C50682 * C1074 -
           (((C117 * C1154 + C50778 * C1162) * C2340 +
             (C117 * C1150 + C50778 * C1155) * C2345 + C370 * C2339 +
             C369 * C2344 + C359 * C2338 + C360 * C2343) *
                C50626 +
            (C2910 + C2909 + C2908 + C2907 + C2906 + C2905) * C2341) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
            C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C50682 * C1145 -
          ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
           (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
            C2554 * C2338 + C2553 * C2343) *
               C2341) *
              C50682 * C1146 +
          ((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
            C3555 * C2345 + C3556 * C2340) *
               C2341 +
           (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
              C50682 * C1147 -
          (((C117 * C3544 + C50778 * C3548) * C2340 +
            (C117 * C3542 + C50778 * C3545) * C2345 + C2562 * C2339 +
            C2561 * C2344 + C2557 * C2338 + C2558 * C2343) *
               C50626 +
           ((C117 * C3546 + C50778 * C3549) * C2340 +
            (C117 * C3543 + C50778 * C3547) * C2345 + C3556 * C2339 +
            C3555 * C2344 + C2559 * C2338 + C2560 * C2343) *
               C2341) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C118 +
                      (C117 * C127 + C50778 * C140) * C50763) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C1725 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50778 * C516) * C50763 +
                      (C117 * C486 + C50778 * C500) * C118) *
                         C107) *
                        C50746) *
                       C50907 +
                   ((((C117 * C932 + C50778 * C937) * C118 +
                      (C117 * C938 + C50778 * C947) * C50763) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50746 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50778 * C327) * C50763 +
                      (C117 * C297 + C50778 * C311) * C118) *
                         C107) *
                        C1725) *
                       C50718) *
                      C50899 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50746 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C1725) *
                       C50907 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C1725 -
                    (((C117 * C945 + C50778 * C951) * C50763 +
                      (C117 * C936 + C50778 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50778 * C126) * C2343 +
                      (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                      C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                         C2341 +
                     (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                        C1725 -
                    ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                     (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                      C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                      (C117 * C486 + C50778 * C500) * C2343) *
                         C2341) *
                        C50746) *
                       C50907 +
                   (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                      C3291 * C2339 + C4221 * C2345 + C4222 * C2340) *
                         C2341 +
                     (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                        C50746 -
                    ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                     (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                      C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                         C2341) *
                        C1725) *
                       C50718) *
                      C50899 +
                  ((((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                     (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                        C50746 -
                    ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                     (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                        C1725) *
                       C50907 +
                   (((C2538 + C2537 + C2536 + C2535 + C2566 + C2565) * C2341 +
                     (C2905 + C2906 + C2907 + C2908 + C2909 + C2910) * C50626) *
                        C1725 -
                    (((C117 * C3269 + C50778 * C3273) * C2340 +
                      (C117 * C3264 + C50778 * C3270) * C2345 + C3066 * C2339 +
                      C3065 * C2344 + C968 * C2338 + C967 * C2343) *
                         C50626 +
                     (C3298 + C3297 + C3286 + C3285 + C3284 + C3283) * C2341) *
                        C50746) *
                       C50718) *
                      C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50954 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50955 +
                   (((C117 * C487 + C50778 * C501) * C118 +
                     (C117 * C502 + C50778 * C517) * C50763) *
                        C107 +
                    (C566 + C567) * C108 + (C568 + C569) * C109 +
                    (C570 + C571) * C110) *
                       C2141) *
                      C50907 +
                  ((((C117 * C932 + C50778 * C937) * C118 +
                     (C117 * C938 + C50778 * C947) * C50763) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50955 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C50954 -
                   (((C117 * C1268 + C50778 * C1276) * C50763 +
                     (C117 * C1264 + C50778 * C1269) * C118) *
                        C110 +
                    ((C117 * C1270 + C50778 * C1277) * C50763 +
                     (C117 * C1265 + C50778 * C1271) * C118) *
                        C109 +
                    ((C117 * C1272 + C50778 * C1278) * C50763 +
                     (C117 * C1266 + C50778 * C1273) * C118) *
                        C108 +
                    ((C117 * C1274 + C50778 * C1279) * C50763 +
                     (C117 * C1267 + C50778 * C1275) * C118) *
                        C107) *
                       C2141) *
                      C50718) *
                 C50647) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50954 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50955 +
                   (((C117 * C487 + C50778 * C501) * C2343 +
                     (C117 * C502 + C50778 * C517) * C2338 + C3719 * C2344 +
                     C3720 * C2339 + C3721 * C2345 + C3722 * C2340) *
                        C2341 +
                    (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
                       C2141) *
                      C50907 +
                  (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                     C3291 * C2339 + C4221 * C2345 + C4222 * C2340) *
                        C2341 +
                    (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                       C50955 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C50954 -
                   (((C117 * C3704 + C50778 * C3708) * C2340 +
                     (C117 * C3702 + C50778 * C3705) * C2345 + C2752 * C2339 +
                     C2751 * C2344 + C2750 * C2338 + C2749 * C2343) *
                        C50626 +
                    ((C117 * C3706 + C50778 * C3709) * C2340 +
                     (C117 * C3703 + C50778 * C3707) * C2345 + C3722 * C2339 +
                     C3721 * C2344 + C3720 * C2338 + C3719 * C2343) *
                        C2341) *
                       C2141) *
                      C50718) *
                 C50647) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C1725 -
           (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50778 * C516) * C50763 +
             (C117 * C486 + C50778 * C500) * C118) *
                C107) *
               C50746) *
              C289 +
          ((((C117 * C932 + C50778 * C937) * C118 +
             (C117 * C938 + C50778 * C947) * C50763) *
                C107 +
            (C971 + C972) * C108 + (C973 + C974) * C109 +
            (C975 + C976) * C110) *
               C50746 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50778 * C327) * C50763 +
             (C117 * C297 + C50778 * C311) * C118) *
                C107) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50778 * C312) * C118 +
             (C117 * C313 + C50778 * C328) * C50763) *
                C107 +
            (C377 + C378) * C108 + (C379 + C380) * C109 +
            (C381 + C382) * C110) *
               C1725 -
           (((C117 * C1615 + C50778 * C1623) * C50763 +
             (C117 * C1611 + C50778 * C1616) * C118) *
                C110 +
            ((C117 * C1617 + C50778 * C1624) * C50763 +
             (C117 * C1612 + C50778 * C1618) * C118) *
                C109 +
            ((C117 * C1619 + C50778 * C1625) * C50763 +
             (C117 * C1613 + C50778 * C1620) * C118) *
                C108 +
            ((C117 * C1621 + C50778 * C1626) * C50763 +
             (C117 * C1614 + C50778 * C1622) * C118) *
                C107) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C118 +
             (C117 * C127 + C50778 * C140) * C50763) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C1725 -
           (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50778 * C516) * C50763 +
             (C117 * C486 + C50778 * C500) * C118) *
                C107) *
               C50746) *
              C50666 * C1076 +
          (((C565 + C564) * C107 + (C563 + C562) * C108 + (C561 + C560) * C109 +
            (C801 + C802) * C110) *
               C50746 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C1725) *
              C50666 * C1077 +
          ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C1725 -
           (((C117 * C789 + C50778 * C791) * C50763 +
             (C117 * C788 + C50778 * C790) * C118) *
                C110 +
            (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C118 +
            (C117 * C127 + C50778 * C140) * C50763) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C1891 -
          (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
           ((C117 * C499 + C50778 * C516) * C50763 +
            (C117 * C486 + C50778 * C500) * C118) *
               C107) *
              C1892 +
          (((C117 * C487 + C50778 * C501) * C118 +
            (C117 * C502 + C50778 * C517) * C50763) *
               C107 +
           (C566 + C567) * C108 + (C568 + C569) * C109 + (C570 + C571) * C110) *
              C1893 -
          (((C117 * C1899 + C50778 * C1907) * C50763 +
            (C117 * C1895 + C50778 * C1900) * C118) *
               C110 +
           ((C117 * C1901 + C50778 * C1908) * C50763 +
            (C117 * C1896 + C50778 * C1902) * C118) *
               C109 +
           ((C117 * C1903 + C50778 * C1909) * C50763 +
            (C117 * C1897 + C50778 * C1904) * C118) *
               C108 +
           ((C117 * C1905 + C50778 * C1910) * C50763 +
            (C117 * C1898 + C50778 * C1906) * C118) *
               C107) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C1725 -
           ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
            (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 + C3294 * C2344 +
             (C117 * C499 + C50778 * C516) * C2338 +
             (C117 * C486 + C50778 * C500) * C2343) *
                C2341) *
               C50746) *
              C50666 * C1076 +
          (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
            (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
               C50746 -
           ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
            (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
               C1725) *
              C50666 * C1077 +
          (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
            (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
               C1725 -
           (((C117 * C1615 + C50778 * C1623) * C2340 +
             (C117 * C1611 + C50778 * C1616) * C2345 + C970 * C2339 +
             C969 * C2344 + C548 * C2338 + C549 * C2343) *
                C50626 +
            (C3068 + C3067 + C3060 + C3059 + C3058 + C3057) * C2341) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C2343 +
             (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
             C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                C2341 +
            (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
               C1725 -
           ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
            (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 + C3294 * C2344 +
             (C117 * C499 + C50778 * C516) * C2338 +
             (C117 * C486 + C50778 * C500) * C2343) *
                C2341) *
               C50746) *
              C289 +
          (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 + C3291 * C2339 +
             C4221 * C2345 + C4222 * C2340) *
                C2341 +
            (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
               C50746 -
           ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
            (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 + C2555 * C2344 +
             C2554 * C2338 + C2553 * C2343) *
                C2341) *
               C1725) *
              C290 +
          (((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 + C2559 * C2339 +
             C3555 * C2345 + C3556 * C2340) *
                C2341 +
            (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
               C1725 -
           (((C117 * C4210 + C50778 * C4214) * C2340 +
             (C117 * C4208 + C50778 * C4211) * C2345 + C3296 * C2339 +
             C3295 * C2344 + C2747 * C2338 + C2748 * C2343) *
                C50626 +
            ((C117 * C4212 + C50778 * C4215) * C2340 +
             (C117 * C4209 + C50778 * C4213) * C2345 + C4222 * C2339 +
             C4221 * C2344 + C3291 * C2338 + C3292 * C2343) *
                C2341) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C2343 +
            (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
            C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
               C2341 +
           (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
              C1891 -
          ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
           (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 + C3294 * C2344 +
            (C117 * C499 + C50778 * C516) * C2338 +
            (C117 * C486 + C50778 * C500) * C2343) *
               C2341) *
              C1892 +
          (((C117 * C487 + C50778 * C501) * C2343 +
            (C117 * C502 + C50778 * C517) * C2338 + C3719 * C2344 +
            C3720 * C2339 + C3721 * C2345 + C3722 * C2340) *
               C2341 +
           (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
              C1893 -
          (((C117 * C4616 + C50778 * C4624) * C2340 +
            (C117 * C4612 + C50778 * C4617) * C2345 +
            (C117 * C4618 + C50778 * C4625) * C2339 +
            (C117 * C4613 + C50778 * C4619) * C2344 +
            (C117 * C1903 + C50778 * C1909) * C2338 +
            (C117 * C1897 + C50778 * C1904) * C2343) *
               C50626 +
           ((C117 * C4620 + C50778 * C4626) * C2340 +
            (C117 * C4614 + C50778 * C4621) * C2345 +
            (C117 * C4622 + C50778 * C4627) * C2339 +
            (C117 * C4615 + C50778 * C4623) * C2344 +
            (C117 * C1905 + C50778 * C1910) * C2338 +
            (C117 * C1898 + C50778 * C1906) * C2343) *
               C2341) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50954 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50955 +
                   (((C117 * C487 + C50778 * C501) * C118 +
                     (C117 * C502 + C50778 * C517) * C50763) *
                        C107 +
                    (C566 + C567) * C108 + (C568 + C569) * C109 +
                    (C570 + C571) * C110) *
                       C2141) *
                      C50666 * C50899 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50955 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50954 -
                   (((C117 * C511 + C50778 * C522) * C50763 +
                     (C117 * C492 + C50778 * C512) * C118) *
                        C110 +
                    (C571 + C570) * C109 + (C569 + C568) * C108 +
                    (C567 + C566) * C107) *
                       C2141) *
                      C50666 * C50653)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C50954 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50955 +
                   (((C117 * C487 + C50778 * C501) * C2343 +
                     (C117 * C502 + C50778 * C517) * C2338 + C3719 * C2344 +
                     C3720 * C2339 + C3721 * C2345 + C3722 * C2340) *
                        C2341 +
                    (C2737 + C2738 + C2755 + C2756 + C2757 + C2758) * C50626) *
                       C2141) *
                      C50666 * C50899 +
                  (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                    (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                       C50955 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C50954 -
                   (((C117 * C2723 + C50778 * C2727) * C2340 +
                     (C117 * C2718 + C50778 * C2724) * C2345 +
                     (C117 * C1270 + C50778 * C1277) * C2339 +
                     (C117 * C1265 + C50778 * C1271) * C2344 + C557 * C2338 +
                     C556 * C2343) *
                        C50626 +
                    (C2758 + C2757 + C2756 + C2755 + C2738 + C2737) * C2341) *
                       C2141) *
                      C50666 * C50653)) /
                    (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C1725 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50746) *
                      C50666 * C1076 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50746 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C1725) *
                      C50666 * C1077 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C1725 -
                   (((C117 * C789 + C50778 * C791) * C50763 +
                     (C117 * C788 + C50778 * C790) * C118) *
                        C110 +
                    (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                       C50746) *
                      C50666 * C1078)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C118 +
                     (C117 * C127 + C50778 * C140) * C50763) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C1725 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50778 * C516) * C50763 +
                     (C117 * C486 + C50778 * C500) * C118) *
                        C107) *
                       C50746) *
                      C289 +
                  ((((C117 * C932 + C50778 * C937) * C118 +
                     (C117 * C938 + C50778 * C947) * C50763) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50746 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50778 * C327) * C50763 +
                     (C117 * C297 + C50778 * C311) * C118) *
                        C107) *
                       C1725) *
                      C290 +
                  ((((C117 * C298 + C50778 * C312) * C118 +
                     (C117 * C313 + C50778 * C328) * C50763) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C1725 -
                   (((C117 * C1615 + C50778 * C1623) * C50763 +
                     (C117 * C1611 + C50778 * C1616) * C118) *
                        C110 +
                    ((C117 * C1617 + C50778 * C1624) * C50763 +
                     (C117 * C1612 + C50778 * C1618) * C118) *
                        C109 +
                    ((C117 * C1619 + C50778 * C1625) * C50763 +
                     (C117 * C1613 + C50778 * C1620) * C118) *
                        C108 +
                    ((C117 * C1621 + C50778 * C1626) * C50763 +
                     (C117 * C1614 + C50778 * C1622) * C118) *
                        C107) *
                       C50746) *
                      C291) *
                 C50647) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C1725 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50746) *
                      C50666 * C1076 +
                  (((C2736 + C2735 + C2734 + C2733 + C2754 + C2753) * C2341 +
                    (C3057 + C3058 + C3059 + C3060 + C3067 + C3068) * C50626) *
                       C50746 -
                   ((C2353 + C2354 + C2355 + C2356 + C2357 + C2358) * C50626 +
                    (C2352 + C2351 + C2350 + C2349 + C2348 + C2347) * C2341) *
                       C1725) *
                      C50666 * C1077 +
                  (((C2358 + C2357 + C2356 + C2355 + C2354 + C2353) * C2341 +
                    (C2359 + C2360 + C2361 + C2362 + C2363 + C2364) * C50626) *
                       C1725 -
                   (((C117 * C1615 + C50778 * C1623) * C2340 +
                     (C117 * C1611 + C50778 * C1616) * C2345 + C970 * C2339 +
                     C969 * C2344 + C548 * C2338 + C549 * C2343) *
                        C50626 +
                    (C3068 + C3067 + C3060 + C3059 + C3058 + C3057) * C2341) *
                       C50746) *
                      C50666 * C1078)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50778 * C126) * C2343 +
                     (C117 * C127 + C50778 * C140) * C2338 + C2553 * C2344 +
                     C2554 * C2339 + C2555 * C2345 + C2556 * C2340) *
                        C2341 +
                    (C2347 + C2348 + C2349 + C2350 + C2351 + C2352) * C50626) *
                       C1725 -
                   ((C2753 + C2754 + C2733 + C2734 + C2735 + C2736) * C50626 +
                    (C3291 * C2340 + C3292 * C2345 + C3293 * C2339 +
                     C3294 * C2344 + (C117 * C499 + C50778 * C516) * C2338 +
                     (C117 * C486 + C50778 * C500) * C2343) *
                        C2341) *
                       C50746) *
                      C289 +
                  (((C3294 * C2343 + C3293 * C2338 + C3292 * C2344 +
                     C3291 * C2339 + C4221 * C2345 + C4222 * C2340) *
                        C2341 +
                    (C3283 + C3284 + C3285 + C3286 + C3297 + C3298) * C50626) *
                       C50746 -
                   ((C2565 + C2566 + C2535 + C2536 + C2537 + C2538) * C50626 +
                    (C2559 * C2340 + C2560 * C2345 + C2556 * C2339 +
                     C2555 * C2344 + C2554 * C2338 + C2553 * C2343) *
                        C2341) *
                       C1725) *
                      C290 +
                  (((C2555 * C2343 + C2556 * C2338 + C2560 * C2344 +
                     C2559 * C2339 + C3555 * C2345 + C3556 * C2340) *
                        C2341 +
                    (C2543 + C2544 + C2567 + C2568 + C2569 + C2570) * C50626) *
                       C1725 -
                   (((C117 * C4210 + C50778 * C4214) * C2340 +
                     (C117 * C4208 + C50778 * C4211) * C2345 + C3296 * C2339 +
                     C3295 * C2344 + C2747 * C2338 + C2748 * C2343) *
                        C50626 +
                    ((C117 * C4212 + C50778 * C4215) * C2340 +
                     (C117 * C4209 + C50778 * C4213) * C2345 + C4222 * C2339 +
                     C4221 * C2344 + C3291 * C2338 + C3292 * C2343) *
                        C2341) *
                       C50746) *
                      C291) *
                 C50647) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50682 * C50907 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C50682 * C50718) *
              C50950 +
          (((C24673 + C24672 + C24671 + C24670 + C24669 + C24668) * C50892 +
            (C24984 + C24985 + C24986 + C24987 + C24988 + C24989) * C50626) *
               C50682 * C50718 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C50682 * C50907) *
              C50951 +
          (((C24515 + C24514 + C24513 + C24512 + C24511 + C24510) * C50892 +
            (C24516 + C24517 + C24518 + C24519 + C24520 + C24521) * C50626) *
               C50682 * C50907 -
           (((C117 * C1154 + C50778 * C1162) * C24497 +
             (C117 * C1150 + C50778 * C1155) * C24502 + C370 * C50957 +
             C369 * C24501 + C359 * C50956 + C360 * C24500) *
                C50626 +
            (C24989 + C24988 + C24987 + C24986 + C24985 + C24984) * C50892) *
               C50682 * C50718) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C24500 +
              (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
              C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                 C50892 +
             (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
                C50908 -
            ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
             (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 +
              C3294 * C24501 + (C117 * C499 + C50778 * C516) * C50956 +
              (C117 * C486 + C50778 * C500) * C24500) *
                 C50892) *
                C50746) *
               C50907 +
           (((C3294 * C24500 + C3293 * C50956 + C3292 * C24501 +
              C3291 * C50957 + C4221 * C24502 + C4222 * C24497) *
                 C50892 +
             (C25336 + C25337 + C25338 + C25339 + C25340 + C25341) * C50626) *
                C50746 -
            ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
             (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 +
              C2555 * C24501 + C2554 * C50956 + C2553 * C24500) *
                 C50892) *
                C50908) *
               C50718) *
              C292 +
          ((((C24831 + C24830 + C24829 + C24828 + C24827 + C24826) * C50892 +
             (C25136 + C25137 + C25138 + C25139 + C25140 + C25141) * C50626) *
                C50746 -
            ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
             (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
                C50908) *
               C50907 +
           (((C24673 + C24672 + C24671 + C24670 + C24669 + C24668) * C50892 +
             (C24984 + C24985 + C24986 + C24987 + C24988 + C24989) * C50626) *
                C50908 -
            (((C117 * C3269 + C50778 * C3273) * C24497 +
              (C117 * C3264 + C50778 * C3270) * C24502 + C3066 * C50957 +
              C3065 * C24501 + C968 * C50956 + C967 * C24500) *
                 C50626 +
             (C25341 + C25340 + C25339 + C25338 + C25337 + C25336) * C50892) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50682 * C289 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C50682 * C290 +
           ((C2555 * C24500 + C2556 * C50956 + C2560 * C24501 + C2559 * C50957 +
             C3555 * C24502 + C3556 * C24497) *
                C50892 +
            (C24674 + C24675 + C24676 + C24677 + C24678 + C24679) * C50626) *
               C50682 * C291) *
              C292 +
          (((C24673 + C24672 + C24671 + C24670 + C24669 + C24668) * C50892 +
            (C362 * C24500 + C361 * C50956 + C367 * C24501 + C368 * C50957 +
             C2563 * C24502 + C2564 * C24497) *
                C50626) *
               C50682 * C290 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C50682 * C289 -
           (((C117 * C2517 + C50778 * C2521) * C24497 +
             (C117 * C2512 + C50778 * C2518) * C24502 + C2564 * C50957 +
             C2563 * C24501 + C368 * C50956 + C367 * C24500) *
                C50626 +
            (C24679 + C24678 + C24677 + C24676 + C24675 + C24674) * C50892) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C24500 +
            (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
            C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
               C50892 +
           (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
              C50682 * C50666 * C113 -
          ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
           (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
              C50682 * C50666 * C114 +
          ((C24515 + C24514 + C24513 + C24512 + C24511 + C24510) * C50892 +
           (C24516 + C24517 + C24518 + C24519 + C24520 + C24521) * C50626) *
              C50682 * C50666 * C115 -
          (((C117 * C322 + C50778 * C333) * C24497 +
            (C117 * C303 + C50778 * C323) * C24502 + C686 * C50957 +
            C685 * C24501 + C174 * C50956 + C175 * C24500) *
               C50626 +
           (C24521 + C24520 + C24519 + C24518 + C24517 + C24516) * C50892) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C480 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C24500 +
             (C117 * C502 + C50778 * C517) * C50956 + C3719 * C24501 +
             C3720 * C50957 + C3721 * C24502 + C3722 * C24497) *
                C50892 +
            (C24832 + C24833 + C24834 + C24835 + C24836 + C24837) * C50626) *
               C482) *
              C50666 * C292 +
          (((C24831 + C24830 + C24829 + C24828 + C24827 + C24826) * C50892 +
            (C551 * C24500 + C550 * C50956 + C967 * C24501 + C968 * C50957 +
             C3065 * C24502 + C3066 * C24497) *
                C50626) *
               C481 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C480 -
           (((C117 * C2723 + C50778 * C2727) * C24497 +
             (C117 * C2718 + C50778 * C2724) * C24502 + C8415 * C50957 +
             C8414 * C24501 + C557 * C50956 + C556 * C24500) *
                C50626 +
            (C24837 + C24836 + C24835 + C24834 + C24833 + C24832) * C50892) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50908 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C50746) *
              C50666 * C50950 +
          (((C24831 + C24830 + C24829 + C24828 + C24827 + C24826) * C50892 +
            (C25136 + C25137 + C25138 + C25139 + C25140 + C25141) * C50626) *
               C50746 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C50908) *
              C50666 * C50951 +
          (((C24515 + C24514 + C24513 + C24512 + C24511 + C24510) * C50892 +
            (C24516 + C24517 + C24518 + C24519 + C24520 + C24521) * C50626) *
               C50908 -
           (((C117 * C1615 + C50778 * C1623) * C24497 +
             (C117 * C1611 + C50778 * C1616) * C24502 + C970 * C50957 +
             C969 * C24501 + C548 * C50956 + C549 * C24500) *
                C50626 +
            (C25141 + C25140 + C25139 + C25138 + C25137 + C25136) * C50892) *
               C50746) *
              C50666 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C24500 +
            (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
            C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
               C50892 +
           (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
              C50682 * C50666 * C113 -
          ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
           (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
              C50682 * C50666 * C114 +
          ((C24515 + C24514 + C24513 + C24512 + C24511 + C24510) * C50892 +
           (C24516 + C24517 + C24518 + C24519 + C24520 + C24521) * C50626) *
              C50682 * C50666 * C115 -
          (((C117 * C322 + C50778 * C333) * C24497 +
            (C117 * C303 + C50778 * C323) * C24502 + C686 * C50957 +
            C685 * C24501 + C174 * C50956 + C175 * C24500) *
               C50626 +
           (C24521 + C24520 + C24519 + C24518 + C24517 + C24516) * C50892) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50682 * C289 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C50682 * C290 +
           ((C2555 * C24500 + C2556 * C50956 + C2560 * C24501 + C2559 * C50957 +
             C3555 * C24502 + C3556 * C24497) *
                C50892 +
            (C24674 + C24675 + C24676 + C24677 + C24678 + C24679) * C50626) *
               C50682 * C291) *
              C292 +
          (((C24673 + C24672 + C24671 + C24670 + C24669 + C24668) * C50892 +
            (C362 * C24500 + C361 * C50956 + C367 * C24501 + C368 * C50957 +
             C2563 * C24502 + C2564 * C24497) *
                C50626) *
               C50682 * C290 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C50682 * C289 -
           (((C117 * C2517 + C50778 * C2521) * C24497 +
             (C117 * C2512 + C50778 * C2518) * C24502 + C2564 * C50957 +
             C2563 * C24501 + C368 * C50956 + C367 * C24500) *
                C50626 +
            (C24679 + C24678 + C24677 + C24676 + C24675 + C24674) * C50892) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50682 * C50952 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C50682 * C50953 +
           ((C2555 * C24500 + C2556 * C50956 + C2560 * C24501 + C2559 * C50957 +
             C3555 * C24502 + C3556 * C24497) *
                C50892 +
            (C24674 + C24675 + C24676 + C24677 + C24678 + C24679) * C50626) *
               C50682 * C1380) *
              C50899 +
          (((C24673 + C24672 + C24671 + C24670 + C24669 + C24668) * C50892 +
            (C24984 + C24985 + C24986 + C24987 + C24988 + C24989) * C50626) *
               C50682 * C50953 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C50682 * C50952 -
           (((C117 * C2517 + C50778 * C2521) * C24497 +
             (C117 * C2512 + C50778 * C2518) * C24502 + C2564 * C50957 +
             C2563 * C24501 + C368 * C50956 + C367 * C24500) *
                C50626 +
            (C24679 + C24678 + C24677 + C24676 + C24675 + C24674) * C50892) *
               C50682 * C1380) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50908 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C50746) *
              C50952 +
          (((C3294 * C24500 + C3293 * C50956 + C3292 * C24501 + C3291 * C50957 +
             C4221 * C24502 + C4222 * C24497) *
                C50892 +
            (C25336 + C25337 + C25338 + C25339 + C25340 + C25341) * C50626) *
               C50746 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C50908) *
              C50953 +
          (((C2555 * C24500 + C2556 * C50956 + C2560 * C24501 + C2559 * C50957 +
             C3555 * C24502 + C3556 * C24497) *
                C50892 +
            (C24674 + C24675 + C24676 + C24677 + C24678 + C24679) * C50626) *
               C50908 -
           (((C117 * C4210 + C50778 * C4214) * C24497 +
             (C117 * C4208 + C50778 * C4211) * C24502 + C3296 * C50957 +
             C3295 * C24501 + C2747 * C50956 + C2748 * C24500) *
                C50626 +
            (C21061 * C24497 + C21060 * C24502 + C4222 * C50957 +
             C4221 * C24501 + C3291 * C50956 + C3292 * C24500) *
                C50892) *
               C50746) *
              C1380) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C24500 +
            (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
            C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
               C50892 +
           (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
              C50682 * C1145 -
          ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
           (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
            C2554 * C50956 + C2553 * C24500) *
               C50892) *
              C50682 * C1146 +
          ((C2555 * C24500 + C2556 * C50956 + C2560 * C24501 + C2559 * C50957 +
            C3555 * C24502 + C3556 * C24497) *
               C50892 +
           (C24674 + C24675 + C24676 + C24677 + C24678 + C24679) * C50626) *
              C50682 * C1147 -
          (((C117 * C3544 + C50778 * C3548) * C24497 +
            (C117 * C3542 + C50778 * C3545) * C24502 + C2562 * C50957 +
            C2561 * C24501 + C2557 * C50956 + C2558 * C24500) *
               C50626 +
           (C20617 * C24497 + C20616 * C24502 + C3556 * C50957 +
            C3555 * C24501 + C2559 * C50956 + C2560 * C24500) *
               C50892) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50682 * C1074 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C50682 * C50718) *
              C1076 +
          (((C24673 + C24672 + C24671 + C24670 + C24669 + C24668) * C50892 +
            (C24984 + C24985 + C24986 + C24987 + C24988 + C24989) * C50626) *
               C50682 * C50718 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C50682 * C1074) *
              C1077 +
          (((C24515 + C24514 + C24513 + C24512 + C24511 + C24510) * C50892 +
            (C24516 + C24517 + C24518 + C24519 + C24520 + C24521) * C50626) *
               C50682 * C1074 -
           (((C117 * C1154 + C50778 * C1162) * C24497 +
             (C117 * C1150 + C50778 * C1155) * C24502 + C370 * C50957 +
             C369 * C24501 + C359 * C50956 + C360 * C24500) *
                C50626 +
            (C24989 + C24988 + C24987 + C24986 + C24985 + C24984) * C50892) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C480 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C24500 +
             (C117 * C502 + C50778 * C517) * C50956 + C3719 * C24501 +
             C3720 * C50957 + C3721 * C24502 + C3722 * C24497) *
                C50892 +
            (C24832 + C24833 + C24834 + C24835 + C24836 + C24837) * C50626) *
               C482) *
              C1074 +
          (((C3294 * C24500 + C3293 * C50956 + C3292 * C24501 + C3291 * C50957 +
             C4221 * C24502 + C4222 * C24497) *
                C50892 +
            (C25336 + C25337 + C25338 + C25339 + C25340 + C25341) * C50626) *
               C481 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C480 -
           (((C117 * C3704 + C50778 * C3708) * C24497 +
             (C117 * C3702 + C50778 * C3705) * C24502 + C2752 * C50957 +
             C2751 * C24501 + C2750 * C50956 + C2749 * C24500) *
                C50626 +
            (C20725 * C24497 + C20724 * C24502 + C3722 * C50957 +
             C3721 * C24501 + C3720 * C50956 + C3719 * C24500) *
                C50892) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C24500 +
              (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
              C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                 C50892 +
             (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
                C50908 -
            ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
             (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 +
              C3294 * C24501 + (C117 * C499 + C50778 * C516) * C50956 +
              (C117 * C486 + C50778 * C500) * C24500) *
                 C50892) *
                C50746) *
               C1074 +
           (((C3294 * C24500 + C3293 * C50956 + C3292 * C24501 +
              C3291 * C50957 + C4221 * C24502 + C4222 * C24497) *
                 C50892 +
             (C25336 + C25337 + C25338 + C25339 + C25340 + C25341) * C50626) *
                C50746 -
            ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
             (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 +
              C2555 * C24501 + C2554 * C50956 + C2553 * C24500) *
                 C50892) *
                C50908) *
               C50718) *
              C50899 +
          ((((C24831 + C24830 + C24829 + C24828 + C24827 + C24826) * C50892 +
             (C25136 + C25137 + C25138 + C25139 + C25140 + C25141) * C50626) *
                C50746 -
            ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
             (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
                C50908) *
               C1074 +
           (((C24673 + C24672 + C24671 + C24670 + C24669 + C24668) * C50892 +
             (C24984 + C24985 + C24986 + C24987 + C24988 + C24989) * C50626) *
                C50908 -
            (((C117 * C3269 + C50778 * C3273) * C24497 +
              (C117 * C3264 + C50778 * C3270) * C24502 + C3066 * C50957 +
              C3065 * C24501 + C968 * C50956 + C967 * C24500) *
                 C50626 +
             (C25341 + C25340 + C25339 + C25338 + C25337 + C25336) * C50892) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50682 * C1074 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C50682 * C50718) *
              C1076 +
          (((C24673 + C24672 + C24671 + C24670 + C24669 + C24668) * C50892 +
            (C24984 + C24985 + C24986 + C24987 + C24988 + C24989) * C50626) *
               C50682 * C50718 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C50682 * C1074) *
              C1077 +
          (((C24515 + C24514 + C24513 + C24512 + C24511 + C24510) * C50892 +
            (C24516 + C24517 + C24518 + C24519 + C24520 + C24521) * C50626) *
               C50682 * C1074 -
           (((C117 * C1154 + C50778 * C1162) * C24497 +
             (C117 * C1150 + C50778 * C1155) * C24502 + C370 * C50957 +
             C369 * C24501 + C359 * C50956 + C360 * C24500) *
                C50626 +
            (C24989 + C24988 + C24987 + C24986 + C24985 + C24984) * C50892) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C24500 +
            (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
            C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
               C50892 +
           (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
              C50682 * C1145 -
          ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
           (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
            C2554 * C50956 + C2553 * C24500) *
               C50892) *
              C50682 * C1146 +
          ((C2555 * C24500 + C2556 * C50956 + C2560 * C24501 + C2559 * C50957 +
            C3555 * C24502 + C3556 * C24497) *
               C50892 +
           (C24674 + C24675 + C24676 + C24677 + C24678 + C24679) * C50626) *
              C50682 * C1147 -
          (((C117 * C3544 + C50778 * C3548) * C24497 +
            (C117 * C3542 + C50778 * C3545) * C24502 + C2562 * C50957 +
            C2561 * C24501 + C2557 * C50956 + C2558 * C24500) *
               C50626 +
           (C20617 * C24497 + C20616 * C24502 + C3556 * C50957 +
            C3555 * C24501 + C2559 * C50956 + C2560 * C24500) *
               C50892) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C24500 +
              (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
              C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                 C50892 +
             (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
                C1725 -
            ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
             (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 +
              C3294 * C24501 + (C117 * C499 + C50778 * C516) * C50956 +
              (C117 * C486 + C50778 * C500) * C24500) *
                 C50892) *
                C50746) *
               C50907 +
           (((C3294 * C24500 + C3293 * C50956 + C3292 * C24501 +
              C3291 * C50957 + C4221 * C24502 + C4222 * C24497) *
                 C50892 +
             (C25336 + C25337 + C25338 + C25339 + C25340 + C25341) * C50626) *
                C50746 -
            ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
             (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 +
              C2555 * C24501 + C2554 * C50956 + C2553 * C24500) *
                 C50892) *
                C1725) *
               C50718) *
              C50899 +
          ((((C24831 + C24830 + C24829 + C24828 + C24827 + C24826) * C50892 +
             (C25136 + C25137 + C25138 + C25139 + C25140 + C25141) * C50626) *
                C50746 -
            ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
             (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
                C1725) *
               C50907 +
           (((C24673 + C24672 + C24671 + C24670 + C24669 + C24668) * C50892 +
             (C24984 + C24985 + C24986 + C24987 + C24988 + C24989) * C50626) *
                C1725 -
            (((C117 * C3269 + C50778 * C3273) * C24497 +
              (C117 * C3264 + C50778 * C3270) * C24502 + C3066 * C50957 +
              C3065 * C24501 + C968 * C50956 + C967 * C24500) *
                 C50626 +
             (C25341 + C25340 + C25339 + C25338 + C25337 + C25336) * C50892) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50954 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C50955 +
           (((C117 * C487 + C50778 * C501) * C24500 +
             (C117 * C502 + C50778 * C517) * C50956 + C3719 * C24501 +
             C3720 * C50957 + C3721 * C24502 + C3722 * C24497) *
                C50892 +
            (C24832 + C24833 + C24834 + C24835 + C24836 + C24837) * C50626) *
               C2141) *
              C50907 +
          (((C3294 * C24500 + C3293 * C50956 + C3292 * C24501 + C3291 * C50957 +
             C4221 * C24502 + C4222 * C24497) *
                C50892 +
            (C25336 + C25337 + C25338 + C25339 + C25340 + C25341) * C50626) *
               C50955 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C50954 -
           (((C117 * C3704 + C50778 * C3708) * C24497 +
             (C117 * C3702 + C50778 * C3705) * C24502 + C2752 * C50957 +
             C2751 * C24501 + C2750 * C50956 + C2749 * C24500) *
                C50626 +
            (C20725 * C24497 + C20724 * C24502 + C3722 * C50957 +
             C3721 * C24501 + C3720 * C50956 + C3719 * C24500) *
                C50892) *
               C2141) *
              C50718) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C1725 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C50746) *
              C289 +
          (((C3294 * C24500 + C3293 * C50956 + C3292 * C24501 + C3291 * C50957 +
             C4221 * C24502 + C4222 * C24497) *
                C50892 +
            (C25336 + C25337 + C25338 + C25339 + C25340 + C25341) * C50626) *
               C50746 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C1725) *
              C290 +
          (((C2555 * C24500 + C2556 * C50956 + C2560 * C24501 + C2559 * C50957 +
             C3555 * C24502 + C3556 * C24497) *
                C50892 +
            (C24674 + C24675 + C24676 + C24677 + C24678 + C24679) * C50626) *
               C1725 -
           (((C117 * C4210 + C50778 * C4214) * C24497 +
             (C117 * C4208 + C50778 * C4211) * C24502 + C3296 * C50957 +
             C3295 * C24501 + C2747 * C50956 + C2748 * C24500) *
                C50626 +
            (C21061 * C24497 + C21060 * C24502 + C4222 * C50957 +
             C4221 * C24501 + C3291 * C50956 + C3292 * C24500) *
                C50892) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C1725 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C50746) *
              C50666 * C1076 +
          (((C24831 + C24830 + C24829 + C24828 + C24827 + C24826) * C50892 +
            (C25136 + C25137 + C25138 + C25139 + C25140 + C25141) * C50626) *
               C50746 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C1725) *
              C50666 * C1077 +
          (((C24515 + C24514 + C24513 + C24512 + C24511 + C24510) * C50892 +
            (C24516 + C24517 + C24518 + C24519 + C24520 + C24521) * C50626) *
               C1725 -
           (((C117 * C1615 + C50778 * C1623) * C24497 +
             (C117 * C1611 + C50778 * C1616) * C24502 + C970 * C50957 +
             C969 * C24501 + C548 * C50956 + C549 * C24500) *
                C50626 +
            (C25141 + C25140 + C25139 + C25138 + C25137 + C25136) * C50892) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C24500 +
            (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
            C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
               C50892 +
           (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
              C1891 -
          ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
           (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
            (C117 * C499 + C50778 * C516) * C50956 +
            (C117 * C486 + C50778 * C500) * C24500) *
               C50892) *
              C1892 +
          (((C117 * C487 + C50778 * C501) * C24500 +
            (C117 * C502 + C50778 * C517) * C50956 + C3719 * C24501 +
            C3720 * C50957 + C3721 * C24502 + C3722 * C24497) *
               C50892 +
           (C24832 + C24833 + C24834 + C24835 + C24836 + C24837) * C50626) *
              C1893 -
          (((C117 * C4616 + C50778 * C4624) * C24497 +
            (C117 * C4612 + C50778 * C4617) * C24502 +
            (C117 * C4618 + C50778 * C4625) * C50957 +
            (C117 * C4613 + C50778 * C4619) * C24501 +
            (C117 * C1903 + C50778 * C1909) * C50956 +
            (C117 * C1897 + C50778 * C1904) * C24500) *
               C50626 +
           ((C117 * C4620 + C50778 * C4626) * C24497 +
            (C117 * C4614 + C50778 * C4621) * C24502 +
            (C117 * C4622 + C50778 * C4627) * C50957 +
            (C117 * C4615 + C50778 * C4623) * C24501 +
            (C117 * C1905 + C50778 * C1910) * C50956 +
            (C117 * C1898 + C50778 * C1906) * C24500) *
               C50892) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C50954 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C50955 +
           (((C117 * C487 + C50778 * C501) * C24500 +
             (C117 * C502 + C50778 * C517) * C50956 + C3719 * C24501 +
             C3720 * C50957 + C3721 * C24502 + C3722 * C24497) *
                C50892 +
            (C24832 + C24833 + C24834 + C24835 + C24836 + C24837) * C50626) *
               C2141) *
              C50666 * C50899 +
          (((C24831 + C24830 + C24829 + C24828 + C24827 + C24826) * C50892 +
            (C25136 + C25137 + C25138 + C25139 + C25140 + C25141) * C50626) *
               C50955 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C50954 -
           (((C117 * C2723 + C50778 * C2727) * C24497 +
             (C117 * C2718 + C50778 * C2724) * C24502 + C8415 * C50957 +
             C8414 * C24501 + C557 * C50956 + C556 * C24500) *
                C50626 +
            (C24837 + C24836 + C24835 + C24834 + C24833 + C24832) * C50892) *
               C2141) *
              C50666 * C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C1725 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C50746) *
              C50666 * C1076 +
          (((C24831 + C24830 + C24829 + C24828 + C24827 + C24826) * C50892 +
            (C25136 + C25137 + C25138 + C25139 + C25140 + C25141) * C50626) *
               C50746 -
           ((C24510 + C24511 + C24512 + C24513 + C24514 + C24515) * C50626 +
            (C24509 + C24508 + C24507 + C24506 + C24505 + C24504) * C50892) *
               C1725) *
              C50666 * C1077 +
          (((C24515 + C24514 + C24513 + C24512 + C24511 + C24510) * C50892 +
            (C24516 + C24517 + C24518 + C24519 + C24520 + C24521) * C50626) *
               C1725 -
           (((C117 * C1615 + C50778 * C1623) * C24497 +
             (C117 * C1611 + C50778 * C1616) * C24502 + C970 * C50957 +
             C969 * C24501 + C548 * C50956 + C549 * C24500) *
                C50626 +
            (C25141 + C25140 + C25139 + C25138 + C25137 + C25136) * C50892) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C24500 +
             (C117 * C127 + C50778 * C140) * C50956 + C2553 * C24501 +
             C2554 * C50957 + C2555 * C24502 + C2556 * C24497) *
                C50892 +
            (C24504 + C24505 + C24506 + C24507 + C24508 + C24509) * C50626) *
               C1725 -
           ((C24826 + C24827 + C24828 + C24829 + C24830 + C24831) * C50626 +
            (C3291 * C24497 + C3292 * C24502 + C3293 * C50957 + C3294 * C24501 +
             (C117 * C499 + C50778 * C516) * C50956 +
             (C117 * C486 + C50778 * C500) * C24500) *
                C50892) *
               C50746) *
              C289 +
          (((C3294 * C24500 + C3293 * C50956 + C3292 * C24501 + C3291 * C50957 +
             C4221 * C24502 + C4222 * C24497) *
                C50892 +
            (C25336 + C25337 + C25338 + C25339 + C25340 + C25341) * C50626) *
               C50746 -
           ((C24668 + C24669 + C24670 + C24671 + C24672 + C24673) * C50626 +
            (C2559 * C24497 + C2560 * C24502 + C2556 * C50957 + C2555 * C24501 +
             C2554 * C50956 + C2553 * C24500) *
                C50892) *
               C1725) *
              C290 +
          (((C2555 * C24500 + C2556 * C50956 + C2560 * C24501 + C2559 * C50957 +
             C3555 * C24502 + C3556 * C24497) *
                C50892 +
            (C24674 + C24675 + C24676 + C24677 + C24678 + C24679) * C50626) *
               C1725 -
           (((C117 * C4210 + C50778 * C4214) * C24497 +
             (C117 * C4208 + C50778 * C4211) * C24502 + C3296 * C50957 +
             C3295 * C24501 + C2747 * C50956 + C2748 * C24500) *
                C50626 +
            (C21061 * C24497 + C21060 * C24502 + C4222 * C50957 +
             C4221 * C24501 + C3291 * C50956 + C3292 * C24500) *
                C50892) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50682 * C50907 -
           ((C15107 + C15106) * C24497 + (C15105 + C15104) * C24502 +
            (C13882 + C13883) * C50957 + (C13884 + C13885) * C24501 +
            (C13881 + C13880) * C50956 + (C13879 + C13878) * C24500) *
               C50621 * C50682 * C50718) *
              C50950 +
          ((C13854 * C24500 + C13855 * C50956 + C13868 * C24501 +
            C13869 * C50957 + (C13886 + C13887) * C24502 +
            (C13888 + C13889) * C24497) *
               C50621 * C50682 * C50718 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C50682 * C50907) *
              C50951 +
          ((C10828 * C24500 + C10829 * C50956 + C14290 * C24501 +
            C14291 * C50957 + (C11028 + C11029) * C24502 +
            (C11030 + C11031) * C24497) *
               C50621 * C50682 * C50907 -
           ((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
             C50921 * C1163) *
                C24497 +
            (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
             C50921 * C1157) *
                C24502 +
            (C11031 + C11030) * C50957 + (C11029 + C11028) * C24501 +
            C11372 * C50956 + C11373 * C24500) *
               C50621 * C50682 * C50718) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C24500 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50956 +
             (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
             C30830 * C24502 + C30831 * C24497) *
                C50621 * C50908 -
            ((C15971 + C15970) * C24497 + (C15969 + C15968) * C24502 +
             (C14764 + C14765) * C50957 + (C14766 + C14767) * C24501 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50956 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C24500) *
                C50621 * C50746) *
               C50907 +
           (((C14767 + C14766) * C24500 + (C14765 + C14764) * C50956 +
             (C15968 + C15969) * C24501 + (C15970 + C15971) * C50957 +
             (C10777 * C3262 + C50921 * C3265 + C10778 * C3703 +
              C50842 * C3707) *
                 C24502 +
             (C10777 * C3266 + C50921 * C3271 + C10778 * C3706 +
              C50842 * C3709) *
                 C24497) *
                C50621 * C50746 -
            ((C15107 + C15106) * C24497 + (C15105 + C15104) * C24502 +
             (C13882 + C13883) * C50957 + (C13884 + C13885) * C24501 +
             (C13881 + C13880) * C50956 + (C13879 + C13878) * C24500) *
                C50621 * C50908) *
               C50718) *
              C292 +
          ((((C11217 + C11216) * C24500 + (C11215 + C11214) * C50956 +
             C14754 * C24501 + C14755 * C50957 + (C14768 + C14769) * C24502 +
             (C14770 + C14771) * C24497) *
                C50621 * C50746 -
            (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
             C13859 * C24501 + (C10815 + C10814) * C50956 +
             (C10813 + C10812) * C24500) *
                C50621 * C50908) *
               C50907 +
           ((C13854 * C24500 + C13855 * C50956 + C13868 * C24501 +
             C13869 * C50957 + (C13886 + C13887) * C24502 +
             (C13888 + C13889) * C24497) *
                C50621 * C50908 -
            ((C10778 * C3704 + C50842 * C3708 + C10777 * C3268 +
              C50921 * C3272) *
                 C24497 +
             (C10778 * C3702 + C50842 * C3705 + C10777 * C3263 +
              C50921 * C3267) *
                 C24502 +
             (C14771 + C14770) * C50957 + (C14769 + C14768) * C24501 +
             C14744 * C50956 + C14745 * C24500) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50682 * C289 -
           ((C15107 + C15106) * C24497 + (C15105 + C15104) * C24502 +
            (C13882 + C13883) * C50957 + (C13884 + C13885) * C24501 +
            (C13881 + C13880) * C50956 + (C13879 + C13878) * C24500) *
               C50621 * C50682 * C290 +
           (C30830 * C24500 + C30831 * C50956 + (C15104 + C15105) * C24501 +
            (C15106 + C15107) * C50957 +
            (C10777 * C2510 + C50921 * C2513 + C10778 * C4209 +
             C50842 * C4213) *
                C24502 +
            (C10777 * C2514 + C50921 * C2519 + C10778 * C4212 +
             C50842 * C4215) *
                C24497) *
               C50621 * C50682 * C291) *
              C292 +
          ((C13854 * C24500 + C13855 * C50956 + C13868 * C24501 +
            C13869 * C50957 + (C13886 + C13887) * C24502 +
            (C13888 + C13889) * C24497) *
               C50621 * C50682 * C290 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C50682 * C289 -
           ((C10778 * C4210 + C50842 * C4214 + C10777 * C2516 +
             C50921 * C2520) *
                C24497 +
            (C10778 * C4208 + C50842 * C4211 + C10777 * C2511 +
             C50921 * C2515) *
                C24502 +
            (C13889 + C13888) * C50957 + (C13887 + C13886) * C24501 +
            C13856 * C50956 + C13857 * C24500) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
               C24500 +
           (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
               C50956 +
           (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
           (C13885 + C13884) * C24502 + (C13883 + C13882) * C24497) *
              C50621 * C50682 * C50666 * C113 -
          (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
           C13859 * C24501 + (C10815 + C10814) * C50956 +
           (C10813 + C10812) * C24500) *
              C50621 * C50682 * C50666 * C114 +
          (C10828 * C24500 + C10829 * C50956 + C14290 * C24501 +
           C14291 * C50957 + (C11028 + C11029) * C24502 +
           (C11030 + C11031) * C24497) *
              C50621 * C50682 * C50666 * C115 -
          ((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
               C24497 +
           (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
               C24502 +
           (C11387 + C11386) * C50957 + (C11385 + C11384) * C24501 +
           C10830 * C50956 + C10831 * C24500) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C480 -
           ((C15971 + C15970) * C24497 + (C15969 + C15968) * C24502 +
            (C14764 + C14765) * C50957 + (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C481 +
           ((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                C24500 +
            (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                C50956 +
            (C15310 + C15311) * C24501 + (C15312 + C15313) * C50957 +
            (C10777 * C2716 + C50921 * C2719 + C10778 * C4614 +
             C50842 * C4621) *
                C24502 +
            (C10777 * C2720 + C50921 * C2725 + C10778 * C4620 +
             C50842 * C4626) *
                C24497) *
               C50621 * C482) *
              C50666 * C292 +
          (((C11217 + C11216) * C24500 + (C11215 + C11214) * C50956 +
            C14754 * C24501 + C14755 * C50957 + (C14768 + C14769) * C24502 +
            (C14770 + C14771) * C24497) *
               C50621 * C481 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C480 -
           ((C10778 * C4616 + C50842 * C4624 + C10777 * C2722 +
             C50921 * C2726) *
                C24497 +
            (C10778 * C4612 + C50842 * C4617 + C10777 * C2717 +
             C50921 * C2721) *
                C24502 +
            (C14095 + C14094) * C50957 + (C14093 + C14092) * C24501 +
            (C11221 + C11220) * C50956 + (C11219 + C11218) * C24500) *
               C50621 * C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50908 -
           ((C15971 + C15970) * C24497 + (C15969 + C15968) * C24502 +
            (C14764 + C14765) * C50957 + (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C50746) *
              C50666 * C50950 +
          (((C11217 + C11216) * C24500 + (C11215 + C11214) * C50956 +
            C14754 * C24501 + C14755 * C50957 + (C14768 + C14769) * C24502 +
            (C14770 + C14771) * C24497) *
               C50621 * C50746 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C50908) *
              C50666 * C50951 +
          ((C10828 * C24500 + C10829 * C50956 + C14290 * C24501 +
            C14291 * C50957 + (C11028 + C11029) * C24502 +
            (C11030 + C11031) * C24497) *
               C50621 * C50908 -
           ((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
             C50921 * C1624) *
                C24497 +
            (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
             C50921 * C1618) *
                C24502 +
            (C11769 + C11768) * C50957 + (C11767 + C11766) * C24501 +
            C11535 * C50956 + C11536 * C24500) *
               C50621 * C50746) *
              C50666 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
               C24500 +
           (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
               C50956 +
           (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
           (C13885 + C13884) * C24502 + (C13883 + C13882) * C24497) *
              C50621 * C50682 * C50666 * C113 -
          (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
           C13859 * C24501 + (C10815 + C10814) * C50956 +
           (C10813 + C10812) * C24500) *
              C50621 * C50682 * C50666 * C114 +
          (C10828 * C24500 + C10829 * C50956 + C14290 * C24501 +
           C14291 * C50957 + (C11028 + C11029) * C24502 +
           (C11030 + C11031) * C24497) *
              C50621 * C50682 * C50666 * C115 -
          ((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
               C24497 +
           (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
               C24502 +
           (C11387 + C11386) * C50957 + (C11385 + C11384) * C24501 +
           C10830 * C50956 + C10831 * C24500) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50682 * C289 -
           ((C15107 + C15106) * C24497 + (C15105 + C15104) * C24502 +
            (C13882 + C13883) * C50957 + (C13884 + C13885) * C24501 +
            (C13881 + C13880) * C50956 + (C13879 + C13878) * C24500) *
               C50621 * C50682 * C290 +
           (C30830 * C24500 + C30831 * C50956 + (C15104 + C15105) * C24501 +
            (C15106 + C15107) * C50957 +
            (C10777 * C2510 + C50921 * C2513 + C10778 * C4209 +
             C50842 * C4213) *
                C24502 +
            (C10777 * C2514 + C50921 * C2519 + C10778 * C4212 +
             C50842 * C4215) *
                C24497) *
               C50621 * C50682 * C291) *
              C292 +
          ((C13854 * C24500 + C13855 * C50956 + C13868 * C24501 +
            C13869 * C50957 + (C13886 + C13887) * C24502 +
            (C13888 + C13889) * C24497) *
               C50621 * C50682 * C290 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C50682 * C289 -
           ((C10778 * C4210 + C50842 * C4214 + C10777 * C2516 +
             C50921 * C2520) *
                C24497 +
            (C10778 * C4208 + C50842 * C4211 + C10777 * C2511 +
             C50921 * C2515) *
                C24502 +
            (C13889 + C13888) * C50957 + (C13887 + C13886) * C24501 +
            C13856 * C50956 + C13857 * C24500) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50682 * C50952 -
           (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
            (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
            (C13879 + C13878) * C24500) *
               C50621 * C50682 * C50953 +
           (C30830 * C24500 + C30831 * C50956 + (C15104 + C15105) * C24501 +
            (C15106 + C15107) * C50957 + (C31718 + C31719) * C24502 +
            (C31720 + C31721) * C24497) *
               C50621 * C50682 * C1380) *
              C50899 +
          ((C13854 * C24500 + C13855 * C50956 + C13868 * C24501 +
            C13869 * C50957 + (C13886 + C13887) * C24502 +
            (C13888 + C13889) * C24497) *
               C50621 * C50682 * C50953 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C50682 * C50952 -
           ((C10778 * C4210 + C50842 * C4214 + C10777 * C2516 +
             C50921 * C2520) *
                C24497 +
            (C10778 * C4208 + C50842 * C4211 + C10777 * C2511 +
             C50921 * C2515) *
                C24502 +
            (C13889 + C13888) * C50957 + (C13887 + C13886) * C24501 +
            C13856 * C50956 + C13857 * C24500) *
               C50621 * C50682 * C1380) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50908 -
           (C32366 * C24497 + C32367 * C24502 + (C14764 + C14765) * C50957 +
            (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C50746) *
              C50952 +
          (((C14767 + C14766) * C24500 + (C14765 + C14764) * C50956 +
            (C15968 + C15969) * C24501 + (C15970 + C15971) * C50957 +
            (C32376 + C32377) * C24502 + (C32378 + C32379) * C24497) *
               C50621 * C50746 -
           (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
            (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
            (C13879 + C13878) * C24500) *
               C50621 * C50908) *
              C50953 +
          ((C30830 * C24500 + C30831 * C50956 + (C15104 + C15105) * C24501 +
            (C15106 + C15107) * C50957 + (C31718 + C31719) * C24502 +
            (C31720 + C31721) * C24497) *
               C50621 * C50908 -
           ((C10778 * C20716 + C50842 * C20718 + C10777 * C4212 +
             C50921 * C4215) *
                C24497 +
            (C10778 * C20715 + C50842 * C20717 + C10777 * C4209 +
             C50921 * C4213) *
                C24502 +
            (C32379 + C32378) * C50957 + (C32377 + C32376) * C24501 +
            C32366 * C50956 + C32367 * C24500) *
               C50621 * C50746) *
              C1380) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
               C24500 +
           (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
               C50956 +
           (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
           C30830 * C24502 + C30831 * C24497) *
              C50621 * C50682 * C1145 -
          (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
           (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
           (C13879 + C13878) * C24500) *
              C50621 * C50682 * C1146 +
          (C30830 * C24500 + C30831 * C50956 + (C15104 + C15105) * C24501 +
           (C15106 + C15107) * C50957 + (C31718 + C31719) * C24502 +
           (C31720 + C31721) * C24497) *
              C50621 * C50682 * C1147 -
          ((C10778 * C21052 + C50842 * C21054 + C10777 * C3546 +
            C50921 * C3549) *
               C24497 +
           (C10778 * C21051 + C50842 * C21053 + C10777 * C3543 +
            C50921 * C3547) *
               C24502 +
           (C31721 + C31720) * C50957 + (C31719 + C31718) * C24501 +
           C31708 * C50956 + C31709 * C24500) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50682 * C1074 -
           ((C15107 + C15106) * C24497 + (C15105 + C15104) * C24502 +
            (C13882 + C13883) * C50957 + (C13884 + C13885) * C24501 +
            (C13881 + C13880) * C50956 + (C13879 + C13878) * C24500) *
               C50621 * C50682 * C50718) *
              C1076 +
          ((C13854 * C24500 + C13855 * C50956 + C13868 * C24501 +
            C13869 * C50957 + (C13886 + C13887) * C24502 +
            (C13888 + C13889) * C24497) *
               C50621 * C50682 * C50718 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C10828 * C24500 + C10829 * C50956 + C14290 * C24501 +
            C14291 * C50957 + (C11028 + C11029) * C24502 +
            (C11030 + C11031) * C24497) *
               C50621 * C50682 * C1074 -
           ((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
             C50921 * C1163) *
                C24497 +
            (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
             C50921 * C1157) *
                C24502 +
            (C11031 + C11030) * C50957 + (C11029 + C11028) * C24501 +
            C11372 * C50956 + C11373 * C24500) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C480 -
           ((C15971 + C15970) * C24497 + (C15969 + C15968) * C24502 +
            (C14764 + C14765) * C50957 + (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C481 +
           ((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                C24500 +
            (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                C50956 +
            (C15310 + C15311) * C24501 + (C15312 + C15313) * C50957 +
            (C31876 + C31877) * C24502 + (C31878 + C31879) * C24497) *
               C50621 * C482) *
              C1074 +
          (((C14767 + C14766) * C24500 + (C14765 + C14764) * C50956 +
            (C15968 + C15969) * C24501 + (C15970 + C15971) * C50957 +
            (C10777 * C3262 + C50921 * C3265 + C10778 * C3703 +
             C50842 * C3707) *
                C24502 +
            (C10777 * C3266 + C50921 * C3271 + C10778 * C3706 +
             C50842 * C3709) *
                C24497) *
               C50621 * C481 -
           (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
            (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
            (C13879 + C13878) * C24500) *
               C50621 * C480 -
           ((C10778 * C21324 + C50842 * C21326 + C10777 * C3706 +
             C50921 * C3709) *
                C24497 +
            (C10778 * C21323 + C50842 * C21325 + C10777 * C3703 +
             C50921 * C3707) *
                C24502 +
            (C31879 + C31878) * C50957 + (C31877 + C31876) * C24501 +
            (C15313 + C15312) * C50956 + (C15311 + C15310) * C24500) *
               C50621 * C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C24500 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50956 +
             (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
             C30830 * C24502 + C30831 * C24497) *
                C50621 * C50908 -
            ((C15971 + C15970) * C24497 + (C15969 + C15968) * C24502 +
             (C14764 + C14765) * C50957 + (C14766 + C14767) * C24501 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50956 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C24500) *
                C50621 * C50746) *
               C1074 +
           (((C14767 + C14766) * C24500 + (C14765 + C14764) * C50956 +
             (C15968 + C15969) * C24501 + (C15970 + C15971) * C50957 +
             (C10777 * C3262 + C50921 * C3265 + C10778 * C3703 +
              C50842 * C3707) *
                 C24502 +
             (C10777 * C3266 + C50921 * C3271 + C10778 * C3706 +
              C50842 * C3709) *
                 C24497) *
                C50621 * C50746 -
            (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
             (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
             (C13879 + C13878) * C24500) *
                C50621 * C50908) *
               C50718) *
              C50899 +
          ((((C11217 + C11216) * C24500 + (C11215 + C11214) * C50956 +
             C14754 * C24501 + C14755 * C50957 + (C14768 + C14769) * C24502 +
             (C14770 + C14771) * C24497) *
                C50621 * C50746 -
            (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
             C13859 * C24501 + (C10815 + C10814) * C50956 +
             (C10813 + C10812) * C24500) *
                C50621 * C50908) *
               C1074 +
           ((C13854 * C24500 + C13855 * C50956 + C13868 * C24501 +
             C13869 * C50957 + (C13886 + C13887) * C24502 +
             (C13888 + C13889) * C24497) *
                C50621 * C50908 -
            ((C10778 * C3704 + C50842 * C3708 + C10777 * C3268 +
              C50921 * C3272) *
                 C24497 +
             (C10778 * C3702 + C50842 * C3705 + C10777 * C3263 +
              C50921 * C3267) *
                 C24502 +
             (C14771 + C14770) * C50957 + (C14769 + C14768) * C24501 +
             C14744 * C50956 + C14745 * C24500) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50682 * C1074 -
           ((C15107 + C15106) * C24497 + (C15105 + C15104) * C24502 +
            (C13882 + C13883) * C50957 + (C13884 + C13885) * C24501 +
            (C13881 + C13880) * C50956 + (C13879 + C13878) * C24500) *
               C50621 * C50682 * C50718) *
              C1076 +
          ((C13854 * C24500 + C13855 * C50956 + C13868 * C24501 +
            C13869 * C50957 + (C13886 + C13887) * C24502 +
            (C13888 + C13889) * C24497) *
               C50621 * C50682 * C50718 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C10828 * C24500 + C10829 * C50956 + C14290 * C24501 +
            C14291 * C50957 + (C11028 + C11029) * C24502 +
            (C11030 + C11031) * C24497) *
               C50621 * C50682 * C1074 -
           ((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
             C50921 * C1163) *
                C24497 +
            (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
             C50921 * C1157) *
                C24502 +
            (C11031 + C11030) * C50957 + (C11029 + C11028) * C24501 +
            C11372 * C50956 + C11373 * C24500) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
               C24500 +
           (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
               C50956 +
           (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
           C30830 * C24502 + C30831 * C24497) *
              C50621 * C50682 * C1145 -
          (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
           (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
           (C13879 + C13878) * C24500) *
              C50621 * C50682 * C1146 +
          (C30830 * C24500 + C30831 * C50956 + (C15104 + C15105) * C24501 +
           (C15106 + C15107) * C50957 + (C31718 + C31719) * C24502 +
           (C31720 + C31721) * C24497) *
              C50621 * C50682 * C1147 -
          ((C10778 * C21052 + C50842 * C21054 + C10777 * C3546 +
            C50921 * C3549) *
               C24497 +
           (C10778 * C21051 + C50842 * C21053 + C10777 * C3543 +
            C50921 * C3547) *
               C24502 +
           (C31721 + C31720) * C50957 + (C31719 + C31718) * C24501 +
           C31708 * C50956 + C31709 * C24500) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C24500 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C50956 +
             (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
             C30830 * C24502 + C30831 * C24497) *
                C50621 * C1725 -
            (C32366 * C24497 + C32367 * C24502 + (C14764 + C14765) * C50957 +
             (C14766 + C14767) * C24501 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C50956 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C24500) *
                C50621 * C50746) *
               C50907 +
           (((C14767 + C14766) * C24500 + (C14765 + C14764) * C50956 +
             (C15968 + C15969) * C24501 + (C15970 + C15971) * C50957 +
             (C32376 + C32377) * C24502 + (C32378 + C32379) * C24497) *
                C50621 * C50746 -
            (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
             (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
             (C13879 + C13878) * C24500) *
                C50621 * C1725) *
               C50718) *
              C50899 +
          ((((C11217 + C11216) * C24500 + (C11215 + C11214) * C50956 +
             C14754 * C24501 + C14755 * C50957 + (C14768 + C14769) * C24502 +
             (C14770 + C14771) * C24497) *
                C50621 * C50746 -
            (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
             C13859 * C24501 + (C10815 + C10814) * C50956 +
             (C10813 + C10812) * C24500) *
                C50621 * C1725) *
               C50907 +
           ((C13854 * C24500 + C13855 * C50956 + C13868 * C24501 +
             C13869 * C50957 + (C13886 + C13887) * C24502 +
             (C13888 + C13889) * C24497) *
                C50621 * C1725 -
            ((C10778 * C3704 + C50842 * C3708 + C10777 * C3268 +
              C50921 * C3272) *
                 C24497 +
             (C10778 * C3702 + C50842 * C3705 + C10777 * C3263 +
              C50921 * C3267) *
                 C24502 +
             (C14771 + C14770) * C50957 + (C14769 + C14768) * C24501 +
             C14744 * C50956 + C14745 * C24500) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50954 -
           (C32366 * C24497 + C32367 * C24502 + (C14764 + C14765) * C50957 +
            (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C50955 +
           ((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                C24500 +
            (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                C50956 +
            (C15310 + C15311) * C24501 + (C15312 + C15313) * C50957 +
            (C31876 + C31877) * C24502 + (C31878 + C31879) * C24497) *
               C50621 * C2141) *
              C50907 +
          (((C14767 + C14766) * C24500 + (C14765 + C14764) * C50956 +
            (C15968 + C15969) * C24501 + (C15970 + C15971) * C50957 +
            (C32376 + C32377) * C24502 + (C32378 + C32379) * C24497) *
               C50621 * C50955 -
           (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
            (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
            (C13879 + C13878) * C24500) *
               C50621 * C50954 -
           ((C10778 * C21324 + C50842 * C21326 + C10777 * C3706 +
             C50921 * C3709) *
                C24497 +
            (C10778 * C21323 + C50842 * C21325 + C10777 * C3703 +
             C50921 * C3707) *
                C24502 +
            (C31879 + C31878) * C50957 + (C31877 + C31876) * C24501 +
            (C15313 + C15312) * C50956 + (C15311 + C15310) * C24500) *
               C50621 * C2141) *
              C50718) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C1725 -
           (C32366 * C24497 + C32367 * C24502 + (C14764 + C14765) * C50957 +
            (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C50746) *
              C289 +
          (((C14767 + C14766) * C24500 + (C14765 + C14764) * C50956 +
            (C15968 + C15969) * C24501 + (C15970 + C15971) * C50957 +
            (C32376 + C32377) * C24502 + (C32378 + C32379) * C24497) *
               C50621 * C50746 -
           (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
            (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
            (C13879 + C13878) * C24500) *
               C50621 * C1725) *
              C290 +
          ((C30830 * C24500 + C30831 * C50956 + (C15104 + C15105) * C24501 +
            (C15106 + C15107) * C50957 + (C31718 + C31719) * C24502 +
            (C31720 + C31721) * C24497) *
               C50621 * C1725 -
           ((C10778 * C20716 + C50842 * C20718 + C10777 * C4212 +
             C50921 * C4215) *
                C24497 +
            (C10778 * C20715 + C50842 * C20717 + C10777 * C4209 +
             C50921 * C4213) *
                C24502 +
            (C32379 + C32378) * C50957 + (C32377 + C32376) * C24501 +
            C32366 * C50956 + C32367 * C24500) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C1725 -
           (C32366 * C24497 + C32367 * C24502 + (C14764 + C14765) * C50957 +
            (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C50746) *
              C50666 * C1076 +
          (((C11217 + C11216) * C24500 + (C11215 + C11214) * C50956 +
            C14754 * C24501 + C14755 * C50957 + (C14768 + C14769) * C24502 +
            (C14770 + C14771) * C24497) *
               C50621 * C50746 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C10828 * C24500 + C10829 * C50956 + C14290 * C24501 +
            C14291 * C50957 + (C11028 + C11029) * C24502 +
            (C11030 + C11031) * C24497) *
               C50621 * C1725 -
           ((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
             C50921 * C1624) *
                C24497 +
            (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
             C50921 * C1618) *
                C24502 +
            (C11769 + C11768) * C50957 + (C11767 + C11766) * C24501 +
            C11535 * C50956 + C11536 * C24500) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
               C24500 +
           (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
               C50956 +
           (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
           C30830 * C24502 + C30831 * C24497) *
              C50621 * C1891 -
          (C32366 * C24497 + C32367 * C24502 + (C14764 + C14765) * C50957 +
           (C14766 + C14767) * C24501 +
           (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
               C50956 +
           (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
               C24500) *
              C50621 * C1892 +
          ((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
               C24500 +
           (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
               C50956 +
           (C15310 + C15311) * C24501 + (C15312 + C15313) * C50957 +
           (C31876 + C31877) * C24502 + (C31878 + C31879) * C24497) *
              C50621 * C1893 -
          ((C10778 * C22992 + C50842 * C22994 + C10777 * C4620 +
            C50921 * C4626) *
               C24497 +
           (C10778 * C22991 + C50842 * C22993 + C10777 * C4614 +
            C50921 * C4621) *
               C24502 +
           (C10778 * C6586 + C50842 * C6589 + C10777 * C4622 + C50921 * C4627) *
               C50957 +
           (C10778 * C6583 + C50842 * C6587 + C10777 * C4615 + C50921 * C4623) *
               C24501 +
           (C10778 * C5604 + C50842 * C5609 + C10777 * C1905 + C50921 * C1910) *
               C50956 +
           (C10778 * C5600 + C50842 * C5603 + C10777 * C1898 + C50921 * C1906) *
               C24500) *
              C50621 * C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C50954 -
           (C32366 * C24497 + C32367 * C24502 + (C14764 + C14765) * C50957 +
            (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C50955 +
           ((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                C24500 +
            (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                C50956 +
            (C15310 + C15311) * C24501 + (C15312 + C15313) * C50957 +
            (C31876 + C31877) * C24502 + (C31878 + C31879) * C24497) *
               C50621 * C2141) *
              C50666 * C50899 +
          (((C11217 + C11216) * C24500 + (C11215 + C11214) * C50956 +
            C14754 * C24501 + C14755 * C50957 + (C14768 + C14769) * C24502 +
            (C14770 + C14771) * C24497) *
               C50621 * C50955 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C50954 -
           ((C10778 * C4616 + C50842 * C4624 + C10777 * C2722 +
             C50921 * C2726) *
                C24497 +
            (C10778 * C4612 + C50842 * C4617 + C10777 * C2717 +
             C50921 * C2721) *
                C24502 +
            (C14095 + C14094) * C50957 + (C14093 + C14092) * C24501 +
            (C11221 + C11220) * C50956 + (C11219 + C11218) * C24500) *
               C50621 * C2141) *
              C50666 * C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C1725 -
           (C32366 * C24497 + C32367 * C24502 + (C14764 + C14765) * C50957 +
            (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C50746) *
              C50666 * C1076 +
          (((C11217 + C11216) * C24500 + (C11215 + C11214) * C50956 +
            C14754 * C24501 + C14755 * C50957 + (C14768 + C14769) * C24502 +
            (C14770 + C14771) * C24497) *
               C50621 * C50746 -
           (C13856 * C24497 + C13857 * C24502 + C13858 * C50957 +
            C13859 * C24501 + (C10815 + C10814) * C50956 +
            (C10813 + C10812) * C24500) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C10828 * C24500 + C10829 * C50956 + C14290 * C24501 +
            C14291 * C50957 + (C11028 + C11029) * C24502 +
            (C11030 + C11031) * C24497) *
               C50621 * C1725 -
           ((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
             C50921 * C1624) *
                C24497 +
            (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
             C50921 * C1618) *
                C24502 +
            (C11769 + C11768) * C50957 + (C11767 + C11766) * C24501 +
            C11535 * C50956 + C11536 * C24500) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C24500 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C50956 +
            (C13878 + C13879) * C24501 + (C13880 + C13881) * C50957 +
            C30830 * C24502 + C30831 * C24497) *
               C50621 * C1725 -
           (C32366 * C24497 + C32367 * C24502 + (C14764 + C14765) * C50957 +
            (C14766 + C14767) * C24501 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C50956 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C24500) *
               C50621 * C50746) *
              C289 +
          (((C14767 + C14766) * C24500 + (C14765 + C14764) * C50956 +
            (C15968 + C15969) * C24501 + (C15970 + C15971) * C50957 +
            (C32376 + C32377) * C24502 + (C32378 + C32379) * C24497) *
               C50621 * C50746 -
           (C31708 * C24497 + C31709 * C24502 + (C13882 + C13883) * C50957 +
            (C13884 + C13885) * C24501 + (C13881 + C13880) * C50956 +
            (C13879 + C13878) * C24500) *
               C50621 * C1725) *
              C290 +
          ((C30830 * C24500 + C30831 * C50956 + (C15104 + C15105) * C24501 +
            (C15106 + C15107) * C50957 + (C31718 + C31719) * C24502 +
            (C31720 + C31721) * C24497) *
               C50621 * C1725 -
           ((C10778 * C20716 + C50842 * C20718 + C10777 * C4212 +
             C50921 * C4215) *
                C24497 +
            (C10778 * C20715 + C50842 * C20717 + C10777 * C4209 +
             C50921 * C4213) *
                C24502 +
            (C32379 + C32378) * C50957 + (C32377 + C32376) * C24501 +
            C32366 * C50956 + C32367 * C24500) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C50907 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C50718) *
              C50950 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C50718 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C50907) *
              C50951 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C50682 * C50907 -
           ((C117 * C2517 + C50778 * C2521) * C19915 +
            (C117 * C2512 + C50778 * C2518) * C19920 + C2564 * C19914 +
            C2563 * C19919 + C368 * C19913 + C367 * C19918 + C361 * C19912 +
            C362 * C19917) *
               C50621 * C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C50907 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C50718) *
              C50950 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C17734 + C17735 + C17736 + C17737) * C17237) *
               C50682 * C50718 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C50907) *
              C50951 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C50682 * C50907 -
           (((C117 * C322 + C50778 * C333) * C50814 +
             (C117 * C303 + C50778 * C323) * C17239 + C686 * C17233 +
             C685 * C17238) *
                C17237 +
            (C17737 + C17736 + C17735 + C17734) * C17236 + C17739 * C17235) *
               C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C50682 * C50907 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C50682 * C50718) *
              C50950 +
          (((C5448 + C5447 + C5446) * C17238 +
            (C5445 + C5444 + C5443) * C17233 +
            (C5449 + C5450 + C5451) * C17239 +
            (C5452 + C5453 + C5454) * C50814) *
               C50621 * C50682 * C50718 -
           ((C5443 + C5444 + C5445) * C50814 +
            (C5446 + C5447 + C5448) * C17239 +
            (C5260 + C5259 + C5258) * C17233 +
            (C5257 + C5256 + C5255) * C17238) *
               C50621 * C50682 * C50907) *
              C50951 +
          (((C5266 + C5265 + C5264) * C17238 +
            (C5263 + C5262 + C5261) * C17233 +
            (C5807 + C5808 + C5809) * C17239 +
            (C5810 + C5811 + C5812) * C50814) *
               C50621 * C50682 * C50907 -
           ((C5217 * C2723 + C5214 * C2727 + C5216 * C1617 + C5213 * C1624 +
             C5215 * C317 + C5212 * C330) *
                C50814 +
            (C5217 * C2718 + C5214 * C2724 + C5216 * C1612 + C5213 * C1618 +
             C5215 * C300 + C5212 * C316) *
                C17239 +
            (C5812 + C5811 + C5810) * C17233 +
            (C5809 + C5808 + C5807) * C17238) *
               C50621 * C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C19917 +
             (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
             C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
             C2559 * C19915) *
                C50621 * C50908 -
            (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
             C3293 * C19913 + C3294 * C19918 +
             (C117 * C499 + C50778 * C516) * C19912 +
             (C117 * C486 + C50778 * C500) * C19917) *
                C50621 * C50746) *
               C50907 +
           ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
             C4221 * C19919 + C4222 * C19914 +
             (C117 * C4209 + C50778 * C4213) * C19920 +
             (C117 * C4212 + C50778 * C4215) * C19915) *
                C50621 * C50746 -
            (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
             C2556 * C19913 + C2555 * C19918 + C2554 * C19912 +
             C2553 * C19917) *
                C50621 * C50908) *
               C50718) *
              C292 +
          (((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
             C2748 * C19919 + C2747 * C19914 + C3295 * C19920 +
             C3296 * C19915) *
                C50621 * C50746 -
            (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
             C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
                C50621 * C50908) *
               C50907 +
           ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
             C2558 * C19919 + C2557 * C19914 + C2561 * C19920 +
             C2562 * C19915) *
                C50621 * C50908 -
            ((C117 * C4210 + C50778 * C4214) * C19915 +
             (C117 * C4208 + C50778 * C4211) * C19920 + C3296 * C19914 +
             C3295 * C19919 + C2747 * C19913 + C2748 * C19918 + C966 * C19912 +
             C965 * C19917) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C17238 +
              (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
              C2554 * C50814) *
                 C17235 +
             (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
                C50908 -
            (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
             (C3293 * C50814 + C3294 * C17239 +
              (C117 * C499 + C50778 * C516) * C17233 +
              (C117 * C486 + C50778 * C500) * C17238) *
                 C17235) *
                C50746) *
               C50907 +
           (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
              C3291 * C50814) *
                 C17235 +
             (C18087 + C18088 + C18089 + C18090) * C17236 +
             (C18091 + C18092 + C18093 + C18094) * C17237) *
                C50746 -
            (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
             (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
              C2553 * C17238) *
                 C17235) *
                C50908) *
               C50718) *
              C292 +
          ((((C17578 + C17577 + C17576 + C17575) * C17235 +
             (C17574 + C17573 + C17572 + C17571) * C17236 +
             (C17887 + C17888 + C17889 + C17890) * C17237) *
                C50746 -
            (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
             (C17244 + C17243 + C17242 + C17241) * C17235) *
                C50908) *
               C50907 +
           (((C17416 + C17415 + C17414 + C17413) * C17235 +
             (C17412 + C17411 + C17410 + C17409) * C17236 +
             (C17734 + C17735 + C17736 + C17737) * C17237) *
                C50908 -
            (((C117 * C1615 + C50778 * C1623) * C50814 +
              (C117 * C1611 + C50778 * C1616) * C17239 + C970 * C17233 +
              C969 * C17238) *
                 C17237 +
             (C18094 + C18093 + C18092 + C18091) * C17236 +
             (C18090 + C18089 + C18088 + C18087) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
              C5217 * C487 + C5214 * C501) *
                 C17238 +
             (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
              C5217 * C502 + C5214 * C517) *
                 C17233 +
             (C21922 + C21923 + C21924) * C17239 +
             (C21925 + C21926 + C21927) * C50814) *
                C50621 * C50908 -
            ((C22578 + C22579 + C22580) * C50814 +
             (C22581 + C22582 + C22583) * C17239 +
             (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
              C5215 * C499 + C5212 * C516) *
                 C17233 +
             (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
              C5215 * C486 + C5212 * C500) *
                 C17238) *
                C50621 * C50746) *
               C50907 +
           (((C22583 + C22582 + C22581) * C17238 +
             (C22580 + C22579 + C22578) * C17233 +
             (C5215 * C1614 + C5212 * C1622 + C5216 * C2716 + C5213 * C2719 +
              C5217 * C4614 + C5214 * C4621) *
                 C17239 +
             (C5215 * C1621 + C5212 * C1626 + C5216 * C2720 + C5213 * C2725 +
              C5217 * C4620 + C5214 * C4626) *
                 C50814) *
                C50621 * C50746 -
            ((C21928 + C21929 + C21930) * C50814 +
             (C21931 + C21932 + C21933) * C17239 +
             (C21927 + C21926 + C21925) * C17233 +
             (C21924 + C21923 + C21922) * C17238) *
                C50621 * C50908) *
               C50718) *
              C292 +
          ((((C5642 + C5641 + C5640) * C17238 +
             (C5639 + C5638 + C5637) * C17233 +
             (C6187 + C6188 + C6189) * C17239 +
             (C6190 + C6191 + C6192) * C50814) *
                C50621 * C50746 -
            ((C5443 + C5444 + C5445) * C50814 +
             (C5446 + C5447 + C5448) * C17239 +
             (C5260 + C5259 + C5258) * C17233 +
             (C5257 + C5256 + C5255) * C17238) *
                C50621 * C50908) *
               C50907 +
           (((C5448 + C5447 + C5446) * C17238 +
             (C5445 + C5444 + C5443) * C17233 +
             (C5449 + C5450 + C5451) * C17239 +
             (C5452 + C5453 + C5454) * C50814) *
                C50621 * C50908 -
            ((C5217 * C4616 + C5214 * C4624 + C5216 * C2722 + C5213 * C2726 +
              C5215 * C1619 + C5212 * C1625) *
                 C50814 +
             (C5217 * C4612 + C5214 * C4617 + C5216 * C2717 + C5213 * C2721 +
              C5215 * C1613 + C5212 * C1620) *
                 C17239 +
             (C6192 + C6191 + C6190) * C17233 +
             (C6189 + C6188 + C6187) * C17238) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50778 * C126) * C17238 +
                (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
                C2554 * C50814) *
                   C17235 +
               (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
                  C50682 * C50666 * C113 -
              (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
               (C17244 + C17243 + C17242 + C17241) * C17235) *
                  C50682 * C50666 * C114 +
              (C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
               (C17253 + C17254 + C17255 + C17256) * C17237) *
                  C50682 * C50666 * C115 -
              (((C117 * C675 + C50778 * C677) * C50814 +
                (C117 * C674 + C50778 * C676) * C17239 + C177 * C17233 +
                C176 * C17238) *
                   C17237 +
               (C17256 + C17255 + C17254 + C17253) * C17236 + C17262 * C17235) *
                  C50682 * C50666 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50778 * C126) * C17238 +
                 (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
                 C2554 * C50814) *
                    C17235 +
                (C17241 + C17242 + C17243 + C17244) * C17236 +
                C17261 * C17237) *
                   C50682 * C289 -
               ((C17409 + C17410 + C17411 + C17412) * C17237 +
                (C17413 + C17414 + C17415 + C17416) * C17236 +
                (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
                 C2553 * C17238) *
                    C17235) *
                   C50682 * C290 +
               ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
                 C2559 * C50814) *
                    C17235 +
                (C17417 + C17418 + C17419 + C17420) * C17236 +
                (C17421 + C17422 + C17423 + C17424) * C17237) *
                   C50682 * C291) *
                  C292 +
              (((C17416 + C17415 + C17414 + C17413) * C17235 +
                (C17412 + C17411 + C17410 + C17409) * C17236 +
                (C360 * C17238 + C359 * C17233 + C369 * C17239 +
                 C370 * C50814) *
                    C17237) *
                   C50682 * C290 -
               (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
                (C17244 + C17243 + C17242 + C17241) * C17235) *
                   C50682 * C289 -
               (((C117 * C1154 + C50778 * C1162) * C50814 +
                 (C117 * C1150 + C50778 * C1155) * C17239 + C370 * C17233 +
                 C369 * C17238) *
                    C17237 +
                (C17424 + C17423 + C17422 + C17421) * C17236 +
                (C17420 + C17419 + C17418 + C17417) * C17235) *
                   C50682 * C291) *
                  C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C480 -
           ((C17571 + C17572 + C17573 + C17574) * C17237 +
            (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C17238 +
             (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
             C3720 * C50814) *
                C17235 +
            (C17579 + C17580 + C17581 + C17582) * C17236 +
            (C17583 + C17584 + C17585 + C17586) * C17237) *
               C482) *
              C50666 * C292 +
          (((C17578 + C17577 + C17576 + C17575) * C17235 +
            (C17574 + C17573 + C17572 + C17571) * C17236 +
            (C549 * C17238 + C548 * C17233 + C969 * C17239 + C970 * C50814) *
                C17237) *
               C481 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C480 -
           (((C117 * C1268 + C50778 * C1276) * C50814 +
             (C117 * C1264 + C50778 * C1269) * C17239 + C559 * C17233 +
             C558 * C17238) *
                C17237 +
            (C17586 + C17585 + C17584 + C17583) * C17236 +
            (C17582 + C17581 + C17580 + C17579) * C17235) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C50682 * C50666 * C113 -
          (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
           C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
              C50621 * C50682 * C50666 * C114 +
          (C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
           C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
              C50621 * C50682 * C50666 * C115 -
          ((C117 * C1154 + C50778 * C1162) * C19915 +
           (C117 * C1150 + C50778 * C1155) * C19920 + C370 * C19914 +
           C369 * C19919 + C359 * C19913 + C360 * C19918 + C173 * C19912 +
           C172 * C19917) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C289 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C290 +
           (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 +
            (C117 * C3543 + C50778 * C3547) * C19920 +
            (C117 * C3546 + C50778 * C3549) * C19915) *
               C50621 * C50682 * C291) *
              C292 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C290 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C289 -
           ((C117 * C3544 + C50778 * C3548) * C19915 +
            (C117 * C3542 + C50778 * C3545) * C19920 + C2562 * C19914 +
            C2561 * C19919 + C2557 * C19913 + C2558 * C19918 + C366 * C19912 +
            C365 * C19917) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C480 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C481 +
           ((C117 * C487 + C50778 * C501) * C19917 +
            (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
            C3720 * C19913 + C3721 * C19919 + C3722 * C19914 +
            (C117 * C3703 + C50778 * C3707) * C19920 +
            (C117 * C3706 + C50778 * C3709) * C19915) *
               C50621 * C482) *
              C50666 * C292 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C481 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C480 -
           ((C117 * C3704 + C50778 * C3708) * C19915 +
            (C117 * C3702 + C50778 * C3705) * C19920 + C2752 * C19914 +
            C2751 * C19919 + C2750 * C19913 + C2749 * C19918 + C555 * C19912 +
            C554 * C19917) *
               C50621 * C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
            C5217 * C487 + C5214 * C501) *
               C17238 +
           (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
            C5217 * C502 + C5214 * C517) *
               C17233 +
           (C5215 * C297 + C5212 * C311 + C5216 * C932 + C5213 * C937 +
            C5217 * C1267 + C5214 * C1275) *
               C17239 +
           (C5215 * C310 + C5212 * C327 + C5216 * C938 + C5213 * C947 +
            C5217 * C1274 + C5214 * C1279) *
               C50814) *
              C50621 * C50682 * C50666 * C113 -
          ((C5443 + C5444 + C5445) * C50814 + (C5446 + C5447 + C5448) * C17239 +
           (C5260 + C5259 + C5258) * C17233 +
           (C5257 + C5256 + C5255) * C17238) *
              C50621 * C50682 * C50666 * C114 +
          ((C5266 + C5265 + C5264) * C17238 + (C5263 + C5262 + C5261) * C17233 +
           (C5807 + C5808 + C5809) * C17239 +
           (C5810 + C5811 + C5812) * C50814) *
              C50621 * C50682 * C50666 * C115 -
          ((C5217 * C1268 + C5214 * C1276 + C5216 * C944 + C5213 * C950 +
            C5215 * C304 + C5212 * C324) *
               C50814 +
           (C5217 * C1264 + C5214 * C1269 + C5216 * C935 + C5213 * C943 +
            C5215 * C294 + C5212 * C305) *
               C17239 +
           (C5272 + C5271 + C5270) * C17233 +
           (C5269 + C5268 + C5267) * C17238) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C50682 * C289 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C50682 * C290 +
           ((C21933 + C21932 + C21931) * C17238 +
            (C21930 + C21929 + C21928) * C17233 +
            (C5215 * C1153 + C5212 * C1161 + C5216 * C3262 + C5213 * C3265 +
             C5217 * C3703 + C5214 * C3707) *
                C17239 +
            (C5215 * C1160 + C5212 * C1165 + C5216 * C3266 + C5213 * C3271 +
             C5217 * C3706 + C5214 * C3709) *
                C50814) *
               C50621 * C50682 * C291) *
              C292 +
          (((C5448 + C5447 + C5446) * C17238 +
            (C5445 + C5444 + C5443) * C17233 +
            (C5449 + C5450 + C5451) * C17239 +
            (C5452 + C5453 + C5454) * C50814) *
               C50621 * C50682 * C290 -
           ((C5443 + C5444 + C5445) * C50814 +
            (C5446 + C5447 + C5448) * C17239 +
            (C5260 + C5259 + C5258) * C17233 +
            (C5257 + C5256 + C5255) * C17238) *
               C50621 * C50682 * C289 -
           ((C5217 * C3704 + C5214 * C3708 + C5216 * C3268 + C5213 * C3272 +
             C5215 * C1158 + C5212 * C1164) *
                C50814 +
            (C5217 * C3702 + C5214 * C3705 + C5216 * C3263 + C5213 * C3267 +
             C5215 * C1152 + C5212 * C1159) *
                C17239 +
            (C5454 + C5453 + C5452) * C17233 +
            (C5451 + C5450 + C5449) * C17238) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C480 -
           ((C5217 * C4622 + C5214 * C4627 + C5216 * C1274 + C5213 * C1279 +
             C5215 * C938 + C5212 * C947) *
                C50814 +
            (C5217 * C4615 + C5214 * C4623 + C5216 * C1267 + C5213 * C1275 +
             C5215 * C932 + C5212 * C937) *
                C17239 +
            (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C17233 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C17238) *
               C50621 * C481 +
           ((C5215 * C487 + C5212 * C501 + C5216 * C1898 + C5213 * C1906 +
             C5217 * C5600 + C5214 * C5603) *
                C17238 +
            (C5215 * C502 + C5212 * C517 + C5216 * C1905 + C5213 * C1910 +
             C5217 * C5604 + C5214 * C5609) *
                C17233 +
            (C5215 * C1267 + C5212 * C1275 + C5216 * C4615 + C5213 * C4623 +
             C5217 * C6583 + C5214 * C6587) *
                C17239 +
            (C5215 * C1274 + C5212 * C1279 + C5216 * C4622 + C5213 * C4627 +
             C5217 * C6586 + C5214 * C6589) *
                C50814) *
               C50621 * C482) *
              C50666 * C292 +
          (((C5642 + C5641 + C5640) * C17238 +
            (C5639 + C5638 + C5637) * C17233 +
            (C6187 + C6188 + C6189) * C17239 +
            (C6190 + C6191 + C6192) * C50814) *
               C50621 * C481 -
           ((C5443 + C5444 + C5445) * C50814 +
            (C5446 + C5447 + C5448) * C17239 +
            (C5260 + C5259 + C5258) * C17233 +
            (C5257 + C5256 + C5255) * C17238) *
               C50621 * C480 -
           ((C5217 * C6584 + C5214 * C6588 + C5216 * C4618 + C5213 * C4625 +
             C5215 * C1272 + C5212 * C1278) *
                C50814 +
            (C5217 * C6582 + C5214 * C6585 + C5216 * C4613 + C5213 * C4619 +
             C5215 * C1266 + C5212 * C1273) *
                C17239 +
            (C5648 + C5647 + C5646) * C17233 +
            (C5645 + C5644 + C5643) * C17238) *
               C50621 * C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50908 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C50666 * C50950 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C50746 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50908) *
              C50666 * C50951 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C50908 -
           ((C117 * C3269 + C50778 * C3273) * C19915 +
            (C117 * C3264 + C50778 * C3270) * C19920 + C3066 * C19914 +
            C3065 * C19919 + C968 * C19913 + C967 * C19918 + C550 * C19912 +
            C551 * C19917) *
               C50621 * C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50908 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C50666 * C50950 +
          (((C17578 + C17577 + C17576 + C17575) * C17235 +
            (C17574 + C17573 + C17572 + C17571) * C17236 +
            (C17887 + C17888 + C17889 + C17890) * C17237) *
               C50746 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50908) *
              C50666 * C50951 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C50908 -
           (((C117 * C945 + C50778 * C951) * C50814 +
             (C117 * C936 + C50778 * C946) * C17239 + C800 * C17233 +
             C799 * C17238) *
                C17237 +
            (C17890 + C17889 + C17888 + C17887) * C17236 + C17892 * C17235) *
               C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C50908 -
           ((C5217 * C4622 + C5214 * C4627 + C5216 * C1274 + C5213 * C1279 +
             C5215 * C938 + C5212 * C947) *
                C50814 +
            (C5217 * C4615 + C5214 * C4623 + C5216 * C1267 + C5213 * C1275 +
             C5215 * C932 + C5212 * C937) *
                C17239 +
            (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C17233 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C17238) *
               C50621 * C50746) *
              C50666 * C50950 +
          (((C5642 + C5641 + C5640) * C17238 +
            (C5639 + C5638 + C5637) * C17233 +
            (C6187 + C6188 + C6189) * C17239 +
            (C6190 + C6191 + C6192) * C50814) *
               C50621 * C50746 -
           ((C5443 + C5444 + C5445) * C50814 +
            (C5446 + C5447 + C5448) * C17239 +
            (C5260 + C5259 + C5258) * C17233 +
            (C5257 + C5256 + C5255) * C17238) *
               C50621 * C50908) *
              C50666 * C50951 +
          (((C5266 + C5265 + C5264) * C17238 +
            (C5263 + C5262 + C5261) * C17233 +
            (C5807 + C5808 + C5809) * C17239 +
            (C5810 + C5811 + C5812) * C50814) *
               C50621 * C50908 -
           ((C5217 * C6171 + C5214 * C6173 + C5216 * C1270 + C5213 * C1277 +
             C5215 * C942 + C5212 * C949) *
                C50814 +
            (C5217 * C6170 + C5214 * C6172 + C5216 * C1265 + C5213 * C1271 +
             C5215 * C934 + C5212 * C941) *
                C17239 +
            (C5976 + C5975 + C5974) * C17233 +
            (C5973 + C5972 + C5971) * C17238) *
               C50621 * C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C289 -
           ((C17409 + C17410 + C17411 + C17412) * C17237 +
            (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C290 +
           ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C50682 * C291) *
              C292 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C360 * C17238 + C359 * C17233 + C369 * C17239 + C370 * C50814) *
                C17237) *
               C50682 * C290 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C289 -
           (((C117 * C1154 + C50778 * C1162) * C50814 +
             (C117 * C1150 + C50778 * C1155) * C17239 + C370 * C17233 +
             C369 * C17238) *
                C17237 +
            (C17424 + C17423 + C17422 + C17421) * C17236 +
            (C17420 + C17419 + C17418 + C17417) * C17235) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C17238 +
            (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
            C2554 * C50814) *
               C17235 +
           (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
              C50682 * C50666 * C113 -
          (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
           (C17244 + C17243 + C17242 + C17241) * C17235) *
              C50682 * C50666 * C114 +
          (C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
           (C17253 + C17254 + C17255 + C17256) * C17237) *
              C50682 * C50666 * C115 -
          (((C117 * C675 + C50778 * C677) * C50814 +
            (C117 * C674 + C50778 * C676) * C17239 + C177 * C17233 +
            C176 * C17238) *
               C17237 +
           (C17256 + C17255 + C17254 + C17253) * C17236 + C17262 * C17235) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C50682 * C50666 * C113 -
          (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
           C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
              C50621 * C50682 * C50666 * C114 +
          (C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
           C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
              C50621 * C50682 * C50666 * C115 -
          ((C117 * C1154 + C50778 * C1162) * C19915 +
           (C117 * C1150 + C50778 * C1155) * C19920 + C370 * C19914 +
           C369 * C19919 + C359 * C19913 + C360 * C19918 + C173 * C19912 +
           C172 * C19917) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C289 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C290 +
           (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 +
            (C117 * C3543 + C50778 * C3547) * C19920 +
            (C117 * C3546 + C50778 * C3549) * C19915) *
               C50621 * C50682 * C291) *
              C292 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C290 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C289 -
           ((C117 * C3544 + C50778 * C3548) * C19915 +
            (C117 * C3542 + C50778 * C3545) * C19920 + C2562 * C19914 +
            C2561 * C19919 + C2557 * C19913 + C2558 * C19918 + C366 * C19912 +
            C365 * C19917) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
            C5217 * C487 + C5214 * C501) *
               C17238 +
           (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
            C5217 * C502 + C5214 * C517) *
               C17233 +
           (C5215 * C297 + C5212 * C311 + C5216 * C932 + C5213 * C937 +
            C5217 * C1267 + C5214 * C1275) *
               C17239 +
           (C5215 * C310 + C5212 * C327 + C5216 * C938 + C5213 * C947 +
            C5217 * C1274 + C5214 * C1279) *
               C50814) *
              C50621 * C50682 * C50666 * C113 -
          ((C5443 + C5444 + C5445) * C50814 + (C5446 + C5447 + C5448) * C17239 +
           (C5260 + C5259 + C5258) * C17233 +
           (C5257 + C5256 + C5255) * C17238) *
              C50621 * C50682 * C50666 * C114 +
          ((C5266 + C5265 + C5264) * C17238 + (C5263 + C5262 + C5261) * C17233 +
           (C5807 + C5808 + C5809) * C17239 +
           (C5810 + C5811 + C5812) * C50814) *
              C50621 * C50682 * C50666 * C115 -
          ((C5217 * C1268 + C5214 * C1276 + C5216 * C944 + C5213 * C950 +
            C5215 * C304 + C5212 * C324) *
               C50814 +
           (C5217 * C1264 + C5214 * C1269 + C5216 * C935 + C5213 * C943 +
            C5215 * C294 + C5212 * C305) *
               C17239 +
           (C5272 + C5271 + C5270) * C17233 +
           (C5269 + C5268 + C5267) * C17238) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C50682 * C289 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C50682 * C290 +
           ((C21933 + C21932 + C21931) * C17238 +
            (C21930 + C21929 + C21928) * C17233 +
            (C5215 * C1153 + C5212 * C1161 + C5216 * C3262 + C5213 * C3265 +
             C5217 * C3703 + C5214 * C3707) *
                C17239 +
            (C5215 * C1160 + C5212 * C1165 + C5216 * C3266 + C5213 * C3271 +
             C5217 * C3706 + C5214 * C3709) *
                C50814) *
               C50621 * C50682 * C291) *
              C292 +
          (((C5448 + C5447 + C5446) * C17238 +
            (C5445 + C5444 + C5443) * C17233 +
            (C5449 + C5450 + C5451) * C17239 +
            (C5452 + C5453 + C5454) * C50814) *
               C50621 * C50682 * C290 -
           ((C5443 + C5444 + C5445) * C50814 +
            (C5446 + C5447 + C5448) * C17239 +
            (C5260 + C5259 + C5258) * C17233 +
            (C5257 + C5256 + C5255) * C17238) *
               C50621 * C50682 * C289 -
           ((C5217 * C3704 + C5214 * C3708 + C5216 * C3268 + C5213 * C3272 +
             C5215 * C1158 + C5212 * C1164) *
                C50814 +
            (C5217 * C3702 + C5214 * C3705 + C5216 * C3263 + C5213 * C3267 +
             C5215 * C1152 + C5212 * C1159) *
                C17239 +
            (C5454 + C5453 + C5452) * C17233 +
            (C5451 + C5450 + C5449) * C17238) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C50952 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C50953 +
           (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
            C20617 * C19915) *
               C50621 * C50682 * C1380) *
              C50899 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C50953 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C50952 -
           ((C117 * C3544 + C50778 * C3548) * C19915 +
            (C117 * C3542 + C50778 * C3545) * C19920 + C2562 * C19914 +
            C2561 * C19919 + C2557 * C19913 + C2558 * C19918 + C366 * C19912 +
            C365 * C19917) *
               C50621 * C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C50952 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C50953 +
           ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C50682 * C1380) *
              C50899 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C17734 + C17735 + C17736 + C17737) * C17237) *
               C50682 * C50953 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C50952 -
           (((C117 * C1154 + C50778 * C1162) * C50814 +
             (C117 * C1150 + C50778 * C1155) * C17239 + C370 * C17233 +
             C369 * C17238) *
                C17237 +
            (C17424 + C17423 + C17422 + C17421) * C17236 +
            (C17420 + C17419 + C17418 + C17417) * C17235) *
               C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C50682 * C50952 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C50682 * C50953 +
           ((C21933 + C21932 + C21931) * C17238 +
            (C21930 + C21929 + C21928) * C17233 +
            (C22840 + C22841 + C22842) * C17239 +
            (C22843 + C22844 + C22845) * C50814) *
               C50621 * C50682 * C1380) *
              C50899 +
          (((C5448 + C5447 + C5446) * C17238 +
            (C5445 + C5444 + C5443) * C17233 +
            (C5449 + C5450 + C5451) * C17239 +
            (C5452 + C5453 + C5454) * C50814) *
               C50621 * C50682 * C50953 -
           ((C5443 + C5444 + C5445) * C50814 +
            (C5446 + C5447 + C5448) * C17239 +
            (C5260 + C5259 + C5258) * C17233 +
            (C5257 + C5256 + C5255) * C17238) *
               C50621 * C50682 * C50952 -
           ((C5217 * C3704 + C5214 * C3708 + C5216 * C3268 + C5213 * C3272 +
             C5215 * C1158 + C5212 * C1164) *
                C50814 +
            (C5217 * C3702 + C5214 * C3705 + C5216 * C3263 + C5213 * C3267 +
             C5215 * C1152 + C5212 * C1159) *
                C17239 +
            (C5454 + C5453 + C5452) * C17233 +
            (C5451 + C5450 + C5449) * C17238) *
               C50621 * C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50908 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C50952 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
            C21061 * C19915) *
               C50621 * C50746 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50908) *
              C50953 +
          ((C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
            C20617 * C19915) *
               C50621 * C50908 -
           ((C117 * C21052 + C50778 * C21054) * C19915 +
            (C117 * C21051 + C50778 * C21053) * C19920 + C21061 * C19914 +
            C21060 * C19919 + C4222 * C19913 + C4221 * C19918 + C3291 * C19912 +
            C3292 * C19917) *
               C50621 * C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50908 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C50952 +
          (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
             C3291 * C50814) *
                C17235 +
            (C18087 + C18088 + C18089 + C18090) * C17236 +
            (C18091 + C18092 + C18093 + C18094) * C17237) *
               C50746 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50908) *
              C50953 +
          (((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C50908 -
           (((C117 * C3269 + C50778 * C3273) * C50814 +
             (C117 * C3264 + C50778 * C3270) * C17239 + C3066 * C17233 +
             C3065 * C17238) *
                C17237 +
            (C3296 * C50814 + C3295 * C17239 + C2747 * C17233 +
             C2748 * C17238) *
                C17236 +
            (C4222 * C50814 + C4221 * C17239 + C3291 * C17233 +
             C3292 * C17238) *
                C17235) *
               C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C50908 -
           ((C22578 + C22579 + C22580) * C50814 +
            (C22581 + C22582 + C22583) * C17239 +
            (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C17233 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C17238) *
               C50621 * C50746) *
              C50952 +
          (((C22583 + C22582 + C22581) * C17238 +
            (C22580 + C22579 + C22578) * C17233 +
            (C23512 + C23513 + C23514) * C17239 +
            (C23515 + C23516 + C23517) * C50814) *
               C50621 * C50746 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C50908) *
              C50953 +
          (((C21933 + C21932 + C21931) * C17238 +
            (C21930 + C21929 + C21928) * C17233 +
            (C22840 + C22841 + C22842) * C17239 +
            (C22843 + C22844 + C22845) * C50814) *
               C50621 * C50908 -
           ((C5217 * C21324 + C5214 * C21326 + C5216 * C3706 + C5213 * C3709 +
             C5215 * C3266 + C5212 * C3271) *
                C50814 +
            (C5217 * C21323 + C5214 * C21325 + C5216 * C3703 + C5213 * C3707 +
             C5215 * C3262 + C5212 * C3265) *
                C17239 +
            (C23517 + C23516 + C23515) * C17233 +
            (C23514 + C23513 + C23512) * C17238) *
               C50621 * C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50778 * C126) * C17238 +
                 (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
                 C2554 * C50814) *
                    C17235 +
                (C17241 + C17242 + C17243 + C17244) * C17236 +
                C17261 * C17237) *
                   C50682 * C1074 -
               (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
                (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
                 C2553 * C17238) *
                    C17235) *
                   C50682 * C50718) *
                  C1076 +
              (((C17416 + C17415 + C17414 + C17413) * C17235 +
                (C17412 + C17411 + C17410 + C17409) * C17236 +
                (C17734 + C17735 + C17736 + C17737) * C17237) *
                   C50682 * C50718 -
               (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
                (C17244 + C17243 + C17242 + C17241) * C17235) *
                   C50682 * C1074) *
                  C1077 +
              ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
                (C17253 + C17254 + C17255 + C17256) * C17237) *
                   C50682 * C1074 -
               (((C117 * C322 + C50778 * C333) * C50814 +
                 (C117 * C303 + C50778 * C323) * C17239 + C686 * C17233 +
                 C685 * C17238) *
                    C17237 +
                (C17737 + C17736 + C17735 + C17734) * C17236 +
                C17739 * C17235) *
                   C50682 * C50718) *
                  C1078) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50778 * C126) * C17238 +
                (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
                C2554 * C50814) *
                   C17235 +
               (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
                  C50682 * C1145 -
              (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
               (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
                C2553 * C17238) *
                   C17235) *
                  C50682 * C1146 +
              ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
                C2559 * C50814) *
                   C17235 +
               (C17417 + C17418 + C17419 + C17420) * C17236 +
               (C17421 + C17422 + C17423 + C17424) * C17237) *
                  C50682 * C1147 -
              (((C117 * C2517 + C50778 * C2521) * C50814 +
                (C117 * C2512 + C50778 * C2518) * C17239 + C2564 * C17233 +
                C2563 * C17238) *
                   C17237 +
               (C2562 * C50814 + C2561 * C17239 + C2557 * C17233 +
                C2558 * C17238) *
                   C17236 +
               (C3556 * C50814 + C3555 * C17239 + C2559 * C17233 +
                C2560 * C17238) *
                   C17235) *
                  C50682 * C1148) *
             C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C480 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C17238 +
             (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
             C3720 * C50814) *
                C17235 +
            (C17579 + C17580 + C17581 + C17582) * C17236 +
            (C17583 + C17584 + C17585 + C17586) * C17237) *
               C482) *
              C1074 +
          (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
             C3291 * C50814) *
                C17235 +
            (C18087 + C18088 + C18089 + C18090) * C17236 +
            (C18091 + C18092 + C18093 + C18094) * C17237) *
               C481 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C480 -
           (((C117 * C2723 + C50778 * C2727) * C50814 +
             (C117 * C2718 + C50778 * C2724) * C17239 + C8415 * C17233 +
             C8414 * C17238) *
                C17237 +
            (C2752 * C50814 + C2751 * C17239 + C2750 * C17233 +
             C2749 * C17238) *
                C17236 +
            (C3722 * C50814 + C3721 * C17239 + C3720 * C17233 +
             C3719 * C17238) *
                C17235) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C1074 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C50718) *
              C1076 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C50718 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C50682 * C1074 -
           ((C117 * C2517 + C50778 * C2521) * C19915 +
            (C117 * C2512 + C50778 * C2518) * C19920 + C2564 * C19914 +
            C2563 * C19919 + C368 * C19913 + C367 * C19918 + C361 * C19912 +
            C362 * C19917) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C50682 * C1145 -
          (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
           C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
              C50621 * C50682 * C1146 +
          (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
           C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
           C20617 * C19915) *
              C50621 * C50682 * C1147 -
          ((C117 * C20608 + C50778 * C20610) * C19915 +
           (C117 * C20607 + C50778 * C20609) * C19920 + C20617 * C19914 +
           C20616 * C19919 + C3556 * C19913 + C3555 * C19918 + C2559 * C19912 +
           C2560 * C19917) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C480 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C481 +
           ((C117 * C487 + C50778 * C501) * C19917 +
            (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
            C3720 * C19913 + C3721 * C19919 + C3722 * C19914 + C20724 * C19920 +
            C20725 * C19915) *
               C50621 * C482) *
              C1074 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 +
            (C117 * C4209 + C50778 * C4213) * C19920 +
            (C117 * C4212 + C50778 * C4215) * C19915) *
               C50621 * C481 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C480 -
           ((C117 * C20716 + C50778 * C20718) * C19915 +
            (C117 * C20715 + C50778 * C20717) * C19920 + C20725 * C19914 +
            C20724 * C19919 + C3722 * C19913 + C3721 * C19918 + C3720 * C19912 +
            C3719 * C19917) *
               C50621 * C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                                 C5213 * C500 + C5217 * C487 + C5214 * C501) *
                                    C17238 +
                                (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                                 C5213 * C516 + C5217 * C502 + C5214 * C517) *
                                    C17233 +
                                (C21922 + C21923 + C21924) * C17239 +
                                (C21925 + C21926 + C21927) * C50814) *
                                   C50621 * C50682 * C1074 -
                               ((C21928 + C21929 + C21930) * C50814 +
                                (C21931 + C21932 + C21933) * C17239 +
                                (C21927 + C21926 + C21925) * C17233 +
                                (C21924 + C21923 + C21922) * C17238) *
                                   C50621 * C50682 * C50718) *
                                  C1076 +
                              (((C5448 + C5447 + C5446) * C17238 +
                                (C5445 + C5444 + C5443) * C17233 +
                                (C5449 + C5450 + C5451) * C17239 +
                                (C5452 + C5453 + C5454) * C50814) *
                                   C50621 * C50682 * C50718 -
                               ((C5443 + C5444 + C5445) * C50814 +
                                (C5446 + C5447 + C5448) * C17239 +
                                (C5260 + C5259 + C5258) * C17233 +
                                (C5257 + C5256 + C5255) * C17238) *
                                   C50621 * C50682 * C1074) *
                                  C1077 +
                              (((C5266 + C5265 + C5264) * C17238 +
                                (C5263 + C5262 + C5261) * C17233 +
                                (C5807 + C5808 + C5809) * C17239 +
                                (C5810 + C5811 + C5812) * C50814) *
                                   C50621 * C50682 * C1074 -
                               ((C5217 * C2723 + C5214 * C2727 + C5216 * C1617 +
                                 C5213 * C1624 + C5215 * C317 + C5212 * C330) *
                                    C50814 +
                                (C5217 * C2718 + C5214 * C2724 + C5216 * C1612 +
                                 C5213 * C1618 + C5215 * C300 + C5212 * C316) *
                                    C17239 +
                                (C5812 + C5811 + C5810) * C17233 +
                                (C5809 + C5808 + C5807) * C17238) *
                                   C50621 * C50682 * C50718) *
                                  C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
            C5217 * C487 + C5214 * C501) *
               C17238 +
           (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
            C5217 * C502 + C5214 * C517) *
               C17233 +
           (C21922 + C21923 + C21924) * C17239 +
           (C21925 + C21926 + C21927) * C50814) *
              C50621 * C50682 * C1145 -
          ((C21928 + C21929 + C21930) * C50814 +
           (C21931 + C21932 + C21933) * C17239 +
           (C21927 + C21926 + C21925) * C17233 +
           (C21924 + C21923 + C21922) * C17238) *
              C50621 * C50682 * C1146 +
          ((C21933 + C21932 + C21931) * C17238 +
           (C21930 + C21929 + C21928) * C17233 +
           (C22840 + C22841 + C22842) * C17239 +
           (C22843 + C22844 + C22845) * C50814) *
              C50621 * C50682 * C1147 -
          ((C5217 * C20716 + C5214 * C20718 + C5216 * C4212 + C5213 * C4215 +
            C5215 * C2514 + C5212 * C2519) *
               C50814 +
           (C5217 * C20715 + C5214 * C20717 + C5216 * C4209 + C5213 * C4213 +
            C5215 * C2510 + C5212 * C2513) *
               C17239 +
           (C22845 + C22844 + C22843) * C17233 +
           (C22842 + C22841 + C22840) * C17238) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C480 -
           ((C22578 + C22579 + C22580) * C50814 +
            (C22581 + C22582 + C22583) * C17239 +
            (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C17233 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C17238) *
               C50621 * C481 +
           ((C5215 * C487 + C5212 * C501 + C5216 * C1898 + C5213 * C1906 +
             C5217 * C5600 + C5214 * C5603) *
                C17238 +
            (C5215 * C502 + C5212 * C517 + C5216 * C1905 + C5213 * C1910 +
             C5217 * C5604 + C5214 * C5609) *
                C17233 +
            (C23008 + C23009 + C23010) * C17239 +
            (C23011 + C23012 + C23013) * C50814) *
               C50621 * C482) *
              C1074 +
          (((C22583 + C22582 + C22581) * C17238 +
            (C22580 + C22579 + C22578) * C17233 +
            (C5215 * C1614 + C5212 * C1622 + C5216 * C2716 + C5213 * C2719 +
             C5217 * C4614 + C5214 * C4621) *
                C17239 +
            (C5215 * C1621 + C5212 * C1626 + C5216 * C2720 + C5213 * C2725 +
             C5217 * C4620 + C5214 * C4626) *
                C50814) *
               C50621 * C481 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C480 -
           ((C5217 * C22992 + C5214 * C22994 + C5216 * C4620 + C5213 * C4626 +
             C5215 * C2720 + C5212 * C2725) *
                C50814 +
            (C5217 * C22991 + C5214 * C22993 + C5216 * C4614 + C5213 * C4621 +
             C5215 * C2716 + C5212 * C2719) *
                C17239 +
            (C23013 + C23012 + C23011) * C17233 +
            (C23010 + C23009 + C23008) * C17238) *
               C50621 * C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C19917 +
             (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
             C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
             C2559 * C19915) *
                C50621 * C50908 -
            (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
             C3293 * C19913 + C3294 * C19918 +
             (C117 * C499 + C50778 * C516) * C19912 +
             (C117 * C486 + C50778 * C500) * C19917) *
                C50621 * C50746) *
               C1074 +
           ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
             C4221 * C19919 + C4222 * C19914 +
             (C117 * C4209 + C50778 * C4213) * C19920 +
             (C117 * C4212 + C50778 * C4215) * C19915) *
                C50621 * C50746 -
            (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
             C2556 * C19913 + C2555 * C19918 + C2554 * C19912 +
             C2553 * C19917) *
                C50621 * C50908) *
               C50718) *
              C50899 +
          (((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
             C2748 * C19919 + C2747 * C19914 + C3295 * C19920 +
             C3296 * C19915) *
                C50621 * C50746 -
            (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
             C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
                C50621 * C50908) *
               C1074 +
           ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
             C2558 * C19919 + C2557 * C19914 + C2561 * C19920 +
             C2562 * C19915) *
                C50621 * C50908 -
            ((C117 * C4210 + C50778 * C4214) * C19915 +
             (C117 * C4208 + C50778 * C4211) * C19920 + C3296 * C19914 +
             C3295 * C19919 + C2747 * C19913 + C2748 * C19918 + C966 * C19912 +
             C965 * C19917) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C17238 +
              (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
              C2554 * C50814) *
                 C17235 +
             (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
                C50908 -
            (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
             (C3293 * C50814 + C3294 * C17239 +
              (C117 * C499 + C50778 * C516) * C17233 +
              (C117 * C486 + C50778 * C500) * C17238) *
                 C17235) *
                C50746) *
               C1074 +
           (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
              C3291 * C50814) *
                 C17235 +
             (C18087 + C18088 + C18089 + C18090) * C17236 +
             (C18091 + C18092 + C18093 + C18094) * C17237) *
                C50746 -
            (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
             (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
              C2553 * C17238) *
                 C17235) *
                C50908) *
               C50718) *
              C50899 +
          ((((C17578 + C17577 + C17576 + C17575) * C17235 +
             (C17574 + C17573 + C17572 + C17571) * C17236 +
             (C17887 + C17888 + C17889 + C17890) * C17237) *
                C50746 -
            (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
             (C17244 + C17243 + C17242 + C17241) * C17235) *
                C50908) *
               C1074 +
           (((C17416 + C17415 + C17414 + C17413) * C17235 +
             (C17412 + C17411 + C17410 + C17409) * C17236 +
             (C17734 + C17735 + C17736 + C17737) * C17237) *
                C50908 -
            (((C117 * C1615 + C50778 * C1623) * C50814 +
              (C117 * C1611 + C50778 * C1616) * C17239 + C970 * C17233 +
              C969 * C17238) *
                 C17237 +
             (C18094 + C18093 + C18092 + C18091) * C17236 +
             (C18090 + C18089 + C18088 + C18087) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
              C5217 * C487 + C5214 * C501) *
                 C17238 +
             (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
              C5217 * C502 + C5214 * C517) *
                 C17233 +
             (C21922 + C21923 + C21924) * C17239 +
             (C21925 + C21926 + C21927) * C50814) *
                C50621 * C50908 -
            ((C22578 + C22579 + C22580) * C50814 +
             (C22581 + C22582 + C22583) * C17239 +
             (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
              C5215 * C499 + C5212 * C516) *
                 C17233 +
             (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
              C5215 * C486 + C5212 * C500) *
                 C17238) *
                C50621 * C50746) *
               C1074 +
           (((C22583 + C22582 + C22581) * C17238 +
             (C22580 + C22579 + C22578) * C17233 +
             (C5215 * C1614 + C5212 * C1622 + C5216 * C2716 + C5213 * C2719 +
              C5217 * C4614 + C5214 * C4621) *
                 C17239 +
             (C5215 * C1621 + C5212 * C1626 + C5216 * C2720 + C5213 * C2725 +
              C5217 * C4620 + C5214 * C4626) *
                 C50814) *
                C50621 * C50746 -
            ((C21928 + C21929 + C21930) * C50814 +
             (C21931 + C21932 + C21933) * C17239 +
             (C21927 + C21926 + C21925) * C17233 +
             (C21924 + C21923 + C21922) * C17238) *
                C50621 * C50908) *
               C50718) *
              C50899 +
          ((((C5642 + C5641 + C5640) * C17238 +
             (C5639 + C5638 + C5637) * C17233 +
             (C6187 + C6188 + C6189) * C17239 +
             (C6190 + C6191 + C6192) * C50814) *
                C50621 * C50746 -
            ((C5443 + C5444 + C5445) * C50814 +
             (C5446 + C5447 + C5448) * C17239 +
             (C5260 + C5259 + C5258) * C17233 +
             (C5257 + C5256 + C5255) * C17238) *
                C50621 * C50908) *
               C1074 +
           (((C5448 + C5447 + C5446) * C17238 +
             (C5445 + C5444 + C5443) * C17233 +
             (C5449 + C5450 + C5451) * C17239 +
             (C5452 + C5453 + C5454) * C50814) *
                C50621 * C50908 -
            ((C5217 * C4616 + C5214 * C4624 + C5216 * C2722 + C5213 * C2726 +
              C5215 * C1619 + C5212 * C1625) *
                 C50814 +
             (C5217 * C4612 + C5214 * C4617 + C5216 * C2717 + C5213 * C2721 +
              C5215 * C1613 + C5212 * C1620) *
                 C17239 +
             (C6192 + C6191 + C6190) * C17233 +
             (C6189 + C6188 + C6187) * C17238) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C17238 +
            (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
            C2554 * C50814) *
               C17235 +
           (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
              C50682 * C1145 -
          (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
           (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 + C2553 * C17238) *
               C17235) *
              C50682 * C1146 +
          ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 + C2559 * C50814) *
               C17235 +
           (C17417 + C17418 + C17419 + C17420) * C17236 +
           (C17421 + C17422 + C17423 + C17424) * C17237) *
              C50682 * C1147 -
          (((C117 * C2517 + C50778 * C2521) * C50814 +
            (C117 * C2512 + C50778 * C2518) * C17239 + C2564 * C17233 +
            C2563 * C17238) *
               C17237 +
           (C2562 * C50814 + C2561 * C17239 + C2557 * C17233 + C2558 * C17238) *
               C17236 +
           (C3556 * C50814 + C3555 * C17239 + C2559 * C17233 + C2560 * C17238) *
               C17235) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C1074 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C50718) *
              C1076 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C17734 + C17735 + C17736 + C17737) * C17237) *
               C50682 * C50718 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C1074) *
              C1077 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C50682 * C1074 -
           (((C117 * C322 + C50778 * C333) * C50814 +
             (C117 * C303 + C50778 * C323) * C17239 + C686 * C17233 +
             C685 * C17238) *
                C17237 +
            (C17737 + C17736 + C17735 + C17734) * C17236 + C17739 * C17235) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C1074 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C50718) *
              C1076 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C50718 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C50682 * C1074 -
           ((C117 * C2517 + C50778 * C2521) * C19915 +
            (C117 * C2512 + C50778 * C2518) * C19920 + C2564 * C19914 +
            C2563 * C19919 + C368 * C19913 + C367 * C19918 + C361 * C19912 +
            C362 * C19917) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C50682 * C1145 -
          (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
           C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
              C50621 * C50682 * C1146 +
          (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
           C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
           C20617 * C19915) *
              C50621 * C50682 * C1147 -
          ((C117 * C20608 + C50778 * C20610) * C19915 +
           (C117 * C20607 + C50778 * C20609) * C19920 + C20617 * C19914 +
           C20616 * C19919 + C3556 * C19913 + C3555 * C19918 + C2559 * C19912 +
           C2560 * C19917) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C50682 * C1074 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C50682 * C50718) *
              C1076 +
          (((C5448 + C5447 + C5446) * C17238 +
            (C5445 + C5444 + C5443) * C17233 +
            (C5449 + C5450 + C5451) * C17239 +
            (C5452 + C5453 + C5454) * C50814) *
               C50621 * C50682 * C50718 -
           ((C5443 + C5444 + C5445) * C50814 +
            (C5446 + C5447 + C5448) * C17239 +
            (C5260 + C5259 + C5258) * C17233 +
            (C5257 + C5256 + C5255) * C17238) *
               C50621 * C50682 * C1074) *
              C1077 +
          (((C5266 + C5265 + C5264) * C17238 +
            (C5263 + C5262 + C5261) * C17233 +
            (C5807 + C5808 + C5809) * C17239 +
            (C5810 + C5811 + C5812) * C50814) *
               C50621 * C50682 * C1074 -
           ((C5217 * C2723 + C5214 * C2727 + C5216 * C1617 + C5213 * C1624 +
             C5215 * C317 + C5212 * C330) *
                C50814 +
            (C5217 * C2718 + C5214 * C2724 + C5216 * C1612 + C5213 * C1618 +
             C5215 * C300 + C5212 * C316) *
                C17239 +
            (C5812 + C5811 + C5810) * C17233 +
            (C5809 + C5808 + C5807) * C17238) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
            C5217 * C487 + C5214 * C501) *
               C17238 +
           (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
            C5217 * C502 + C5214 * C517) *
               C17233 +
           (C21922 + C21923 + C21924) * C17239 +
           (C21925 + C21926 + C21927) * C50814) *
              C50621 * C50682 * C1145 -
          ((C21928 + C21929 + C21930) * C50814 +
           (C21931 + C21932 + C21933) * C17239 +
           (C21927 + C21926 + C21925) * C17233 +
           (C21924 + C21923 + C21922) * C17238) *
              C50621 * C50682 * C1146 +
          ((C21933 + C21932 + C21931) * C17238 +
           (C21930 + C21929 + C21928) * C17233 +
           (C22840 + C22841 + C22842) * C17239 +
           (C22843 + C22844 + C22845) * C50814) *
              C50621 * C50682 * C1147 -
          ((C5217 * C20716 + C5214 * C20718 + C5216 * C4212 + C5213 * C4215 +
            C5215 * C2514 + C5212 * C2519) *
               C50814 +
           (C5217 * C20715 + C5214 * C20717 + C5216 * C4209 + C5213 * C4213 +
            C5215 * C2510 + C5212 * C2513) *
               C17239 +
           (C22845 + C22844 + C22843) * C17233 +
           (C22842 + C22841 + C22840) * C17238) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C19917 +
             (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
             C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
             C2559 * C19915) *
                C50621 * C1725 -
            (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
             C3293 * C19913 + C3294 * C19918 +
             (C117 * C499 + C50778 * C516) * C19912 +
             (C117 * C486 + C50778 * C500) * C19917) *
                C50621 * C50746) *
               C50907 +
           ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
             C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
             C21061 * C19915) *
                C50621 * C50746 -
            (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
             C2556 * C19913 + C2555 * C19918 + C2554 * C19912 +
             C2553 * C19917) *
                C50621 * C1725) *
               C50718) *
              C50899 +
          (((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
             C2748 * C19919 + C2747 * C19914 + C3295 * C19920 +
             C3296 * C19915) *
                C50621 * C50746 -
            (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
             C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
                C50621 * C1725) *
               C50907 +
           ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
             C2558 * C19919 + C2557 * C19914 + C2561 * C19920 +
             C2562 * C19915) *
                C50621 * C1725 -
            ((C117 * C4210 + C50778 * C4214) * C19915 +
             (C117 * C4208 + C50778 * C4211) * C19920 + C3296 * C19914 +
             C3295 * C19919 + C2747 * C19913 + C2748 * C19918 + C966 * C19912 +
             C965 * C19917) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C17238 +
              (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
              C2554 * C50814) *
                 C17235 +
             (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
                C1725 -
            (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
             (C3293 * C50814 + C3294 * C17239 +
              (C117 * C499 + C50778 * C516) * C17233 +
              (C117 * C486 + C50778 * C500) * C17238) *
                 C17235) *
                C50746) *
               C50907 +
           (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
              C3291 * C50814) *
                 C17235 +
             (C18087 + C18088 + C18089 + C18090) * C17236 +
             (C18091 + C18092 + C18093 + C18094) * C17237) *
                C50746 -
            (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
             (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
              C2553 * C17238) *
                 C17235) *
                C1725) *
               C50718) *
              C50899 +
          ((((C17578 + C17577 + C17576 + C17575) * C17235 +
             (C17574 + C17573 + C17572 + C17571) * C17236 +
             (C17887 + C17888 + C17889 + C17890) * C17237) *
                C50746 -
            (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
             (C17244 + C17243 + C17242 + C17241) * C17235) *
                C1725) *
               C50907 +
           (((C17416 + C17415 + C17414 + C17413) * C17235 +
             (C17412 + C17411 + C17410 + C17409) * C17236 +
             (C17734 + C17735 + C17736 + C17737) * C17237) *
                C1725 -
            (((C117 * C1615 + C50778 * C1623) * C50814 +
              (C117 * C1611 + C50778 * C1616) * C17239 + C970 * C17233 +
              C969 * C17238) *
                 C17237 +
             (C18094 + C18093 + C18092 + C18091) * C17236 +
             (C18090 + C18089 + C18088 + C18087) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
              C5217 * C487 + C5214 * C501) *
                 C17238 +
             (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
              C5217 * C502 + C5214 * C517) *
                 C17233 +
             (C21922 + C21923 + C21924) * C17239 +
             (C21925 + C21926 + C21927) * C50814) *
                C50621 * C1725 -
            ((C22578 + C22579 + C22580) * C50814 +
             (C22581 + C22582 + C22583) * C17239 +
             (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
              C5215 * C499 + C5212 * C516) *
                 C17233 +
             (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
              C5215 * C486 + C5212 * C500) *
                 C17238) *
                C50621 * C50746) *
               C50907 +
           (((C22583 + C22582 + C22581) * C17238 +
             (C22580 + C22579 + C22578) * C17233 +
             (C23512 + C23513 + C23514) * C17239 +
             (C23515 + C23516 + C23517) * C50814) *
                C50621 * C50746 -
            ((C21928 + C21929 + C21930) * C50814 +
             (C21931 + C21932 + C21933) * C17239 +
             (C21927 + C21926 + C21925) * C17233 +
             (C21924 + C21923 + C21922) * C17238) *
                C50621 * C1725) *
               C50718) *
              C50899 +
          ((((C5642 + C5641 + C5640) * C17238 +
             (C5639 + C5638 + C5637) * C17233 +
             (C6187 + C6188 + C6189) * C17239 +
             (C6190 + C6191 + C6192) * C50814) *
                C50621 * C50746 -
            ((C5443 + C5444 + C5445) * C50814 +
             (C5446 + C5447 + C5448) * C17239 +
             (C5260 + C5259 + C5258) * C17233 +
             (C5257 + C5256 + C5255) * C17238) *
                C50621 * C1725) *
               C50907 +
           (((C5448 + C5447 + C5446) * C17238 +
             (C5445 + C5444 + C5443) * C17233 +
             (C5449 + C5450 + C5451) * C17239 +
             (C5452 + C5453 + C5454) * C50814) *
                C50621 * C1725 -
            ((C5217 * C4616 + C5214 * C4624 + C5216 * C2722 + C5213 * C2726 +
              C5215 * C1619 + C5212 * C1625) *
                 C50814 +
             (C5217 * C4612 + C5214 * C4617 + C5216 * C2717 + C5213 * C2721 +
              C5215 * C1613 + C5212 * C1620) *
                 C17239 +
             (C6192 + C6191 + C6190) * C17233 +
             (C6189 + C6188 + C6187) * C17238) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50954 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50955 +
           ((C117 * C487 + C50778 * C501) * C19917 +
            (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
            C3720 * C19913 + C3721 * C19919 + C3722 * C19914 + C20724 * C19920 +
            C20725 * C19915) *
               C50621 * C2141) *
              C50907 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
            C21061 * C19915) *
               C50621 * C50955 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50954 -
           ((C117 * C20716 + C50778 * C20718) * C19915 +
            (C117 * C20715 + C50778 * C20717) * C19920 + C20725 * C19914 +
            C20724 * C19919 + C3722 * C19913 + C3721 * C19918 + C3720 * C19912 +
            C3719 * C19917) *
               C50621 * C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50954 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50955 +
           (((C117 * C487 + C50778 * C501) * C17238 +
             (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
             C3720 * C50814) *
                C17235 +
            (C17579 + C17580 + C17581 + C17582) * C17236 +
            (C17583 + C17584 + C17585 + C17586) * C17237) *
               C2141) *
              C50907 +
          (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
             C3291 * C50814) *
                C17235 +
            (C18087 + C18088 + C18089 + C18090) * C17236 +
            (C18091 + C18092 + C18093 + C18094) * C17237) *
               C50955 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50954 -
           (((C117 * C2723 + C50778 * C2727) * C50814 +
             (C117 * C2718 + C50778 * C2724) * C17239 + C8415 * C17233 +
             C8414 * C17238) *
                C17237 +
            (C2752 * C50814 + C2751 * C17239 + C2750 * C17233 +
             C2749 * C17238) *
                C17236 +
            (C3722 * C50814 + C3721 * C17239 + C3720 * C17233 +
             C3719 * C17238) *
                C17235) *
               C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C50954 -
           ((C22578 + C22579 + C22580) * C50814 +
            (C22581 + C22582 + C22583) * C17239 +
            (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C17233 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C17238) *
               C50621 * C50955 +
           ((C5215 * C487 + C5212 * C501 + C5216 * C1898 + C5213 * C1906 +
             C5217 * C5600 + C5214 * C5603) *
                C17238 +
            (C5215 * C502 + C5212 * C517 + C5216 * C1905 + C5213 * C1910 +
             C5217 * C5604 + C5214 * C5609) *
                C17233 +
            (C23008 + C23009 + C23010) * C17239 +
            (C23011 + C23012 + C23013) * C50814) *
               C50621 * C2141) *
              C50907 +
          (((C22583 + C22582 + C22581) * C17238 +
            (C22580 + C22579 + C22578) * C17233 +
            (C23512 + C23513 + C23514) * C17239 +
            (C23515 + C23516 + C23517) * C50814) *
               C50621 * C50955 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C50954 -
           ((C5217 * C22992 + C5214 * C22994 + C5216 * C4620 + C5213 * C4626 +
             C5215 * C2720 + C5212 * C2725) *
                C50814 +
            (C5217 * C22991 + C5214 * C22993 + C5216 * C4614 + C5213 * C4621 +
             C5215 * C2716 + C5212 * C2719) *
                C17239 +
            (C23013 + C23012 + C23011) * C17233 +
            (C23010 + C23009 + C23008) * C17238) *
               C50621 * C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50778 * C126) * C17238 +
                 (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
                 C2554 * C50814) *
                    C17235 +
                (C17241 + C17242 + C17243 + C17244) * C17236 +
                C17261 * C17237) *
                   C1725 -
               (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
                (C3293 * C50814 + C3294 * C17239 +
                 (C117 * C499 + C50778 * C516) * C17233 +
                 (C117 * C486 + C50778 * C500) * C17238) *
                    C17235) *
                   C50746) *
                  C50666 * C1076 +
              (((C17578 + C17577 + C17576 + C17575) * C17235 +
                (C17574 + C17573 + C17572 + C17571) * C17236 +
                (C17887 + C17888 + C17889 + C17890) * C17237) *
                   C50746 -
               (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
                (C17244 + C17243 + C17242 + C17241) * C17235) *
                   C1725) *
                  C50666 * C1077 +
              ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
                (C17253 + C17254 + C17255 + C17256) * C17237) *
                   C1725 -
               (((C117 * C945 + C50778 * C951) * C50814 +
                 (C117 * C936 + C50778 * C946) * C17239 + C800 * C17233 +
                 C799 * C17238) *
                    C17237 +
                (C17890 + C17889 + C17888 + C17887) * C17236 +
                C17892 * C17235) *
                   C50746) *
                  C50666 * C1078) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50778 * C126) * C17238 +
                 (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
                 C2554 * C50814) *
                    C17235 +
                (C17241 + C17242 + C17243 + C17244) * C17236 +
                C17261 * C17237) *
                   C1725 -
               (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
                (C3293 * C50814 + C3294 * C17239 +
                 (C117 * C499 + C50778 * C516) * C17233 +
                 (C117 * C486 + C50778 * C500) * C17238) *
                    C17235) *
                   C50746) *
                  C289 +
              (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
                 C3291 * C50814) *
                    C17235 +
                (C18087 + C18088 + C18089 + C18090) * C17236 +
                (C18091 + C18092 + C18093 + C18094) * C17237) *
                   C50746 -
               (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
                (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
                 C2553 * C17238) *
                    C17235) *
                   C1725) *
                  C290 +
              (((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
                 C2559 * C50814) *
                    C17235 +
                (C17417 + C17418 + C17419 + C17420) * C17236 +
                (C17421 + C17422 + C17423 + C17424) * C17237) *
                   C1725 -
               (((C117 * C3269 + C50778 * C3273) * C50814 +
                 (C117 * C3264 + C50778 * C3270) * C17239 + C3066 * C17233 +
                 C3065 * C17238) *
                    C17237 +
                (C3296 * C50814 + C3295 * C17239 + C2747 * C17233 +
                 C2748 * C17238) *
                    C17236 +
                (C4222 * C50814 + C4221 * C17239 + C3291 * C17233 +
                 C3292 * C17238) *
                    C17235) *
                   C50746) *
                  C291) *
             C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C17238 +
            (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
            C2554 * C50814) *
               C17235 +
           (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
              C1891 -
          (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
           (C3293 * C50814 + C3294 * C17239 +
            (C117 * C499 + C50778 * C516) * C17233 +
            (C117 * C486 + C50778 * C500) * C17238) *
               C17235) *
              C1892 +
          (((C117 * C487 + C50778 * C501) * C17238 +
            (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
            C3720 * C50814) *
               C17235 +
           (C17579 + C17580 + C17581 + C17582) * C17236 +
           (C17583 + C17584 + C17585 + C17586) * C17237) *
              C1893 -
          (((C117 * C6171 + C50778 * C6173) * C50814 +
            (C117 * C6170 + C50778 * C6172) * C17239 +
            (C117 * C1901 + C50778 * C1908) * C17233 +
            (C117 * C1896 + C50778 * C1902) * C17238) *
               C17237 +
           ((C117 * C4618 + C50778 * C4625) * C50814 +
            (C117 * C4613 + C50778 * C4619) * C17239 +
            (C117 * C1903 + C50778 * C1909) * C17233 +
            (C117 * C1897 + C50778 * C1904) * C17238) *
               C17236 +
           ((C117 * C4622 + C50778 * C4627) * C50814 +
            (C117 * C4615 + C50778 * C4623) * C17239 +
            (C117 * C1905 + C50778 * C1910) * C17233 +
            (C117 * C1898 + C50778 * C1906) * C17238) *
               C17235) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C1725 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C50666 * C1076 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C50746 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C1725 -
           ((C117 * C3269 + C50778 * C3273) * C19915 +
            (C117 * C3264 + C50778 * C3270) * C19920 + C3066 * C19914 +
            C3065 * C19919 + C968 * C19913 + C967 * C19918 + C550 * C19912 +
            C551 * C19917) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C1725 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C289 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
            C21061 * C19915) *
               C50621 * C50746 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C1725) *
              C290 +
          ((C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
            C20617 * C19915) *
               C50621 * C1725 -
           ((C117 * C21052 + C50778 * C21054) * C19915 +
            (C117 * C21051 + C50778 * C21053) * C19920 + C21061 * C19914 +
            C21060 * C19919 + C4222 * C19913 + C4221 * C19918 + C3291 * C19912 +
            C3292 * C19917) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C1891 -
          (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
           C3293 * C19913 + C3294 * C19918 +
           (C117 * C499 + C50778 * C516) * C19912 +
           (C117 * C486 + C50778 * C500) * C19917) *
              C50621 * C1892 +
          ((C117 * C487 + C50778 * C501) * C19917 +
           (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
           C3720 * C19913 + C3721 * C19919 + C3722 * C19914 + C20724 * C19920 +
           C20725 * C19915) *
              C50621 * C1893 -
          ((C117 * C21324 + C50778 * C21326) * C19915 +
           (C117 * C21323 + C50778 * C21325) * C19920 +
           (C117 * C4620 + C50778 * C4626) * C19914 +
           (C117 * C4614 + C50778 * C4621) * C19919 +
           (C117 * C4622 + C50778 * C4627) * C19913 +
           (C117 * C4615 + C50778 * C4623) * C19918 +
           (C117 * C1905 + C50778 * C1910) * C19912 +
           (C117 * C1898 + C50778 * C1906) * C19917) *
              C50621 * C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C5215 * C119 + C5212 * C126 + C5216 * C486 +
                                 C5213 * C500 + C5217 * C487 + C5214 * C501) *
                                    C17238 +
                                (C5215 * C127 + C5212 * C140 + C5216 * C499 +
                                 C5213 * C516 + C5217 * C502 + C5214 * C517) *
                                    C17233 +
                                (C21922 + C21923 + C21924) * C17239 +
                                (C21925 + C21926 + C21927) * C50814) *
                                   C50621 * C1725 -
                               ((C22578 + C22579 + C22580) * C50814 +
                                (C22581 + C22582 + C22583) * C17239 +
                                (C5217 * C1905 + C5214 * C1910 + C5216 * C502 +
                                 C5213 * C517 + C5215 * C499 + C5212 * C516) *
                                    C17233 +
                                (C5217 * C1898 + C5214 * C1906 + C5216 * C487 +
                                 C5213 * C501 + C5215 * C486 + C5212 * C500) *
                                    C17238) *
                                   C50621 * C50746) *
                                  C50666 * C1076 +
                              (((C5642 + C5641 + C5640) * C17238 +
                                (C5639 + C5638 + C5637) * C17233 +
                                (C6187 + C6188 + C6189) * C17239 +
                                (C6190 + C6191 + C6192) * C50814) *
                                   C50621 * C50746 -
                               ((C5443 + C5444 + C5445) * C50814 +
                                (C5446 + C5447 + C5448) * C17239 +
                                (C5260 + C5259 + C5258) * C17233 +
                                (C5257 + C5256 + C5255) * C17238) *
                                   C50621 * C1725) *
                                  C50666 * C1077 +
                              (((C5266 + C5265 + C5264) * C17238 +
                                (C5263 + C5262 + C5261) * C17233 +
                                (C5807 + C5808 + C5809) * C17239 +
                                (C5810 + C5811 + C5812) * C50814) *
                                   C50621 * C1725 -
                               ((C5217 * C6171 + C5214 * C6173 + C5216 * C1270 +
                                 C5213 * C1277 + C5215 * C942 + C5212 * C949) *
                                    C50814 +
                                (C5217 * C6170 + C5214 * C6172 + C5216 * C1265 +
                                 C5213 * C1271 + C5215 * C934 + C5212 * C941) *
                                    C17239 +
                                (C5976 + C5975 + C5974) * C17233 +
                                (C5973 + C5972 + C5971) * C17238) *
                                   C50621 * C50746) *
                                  C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C1725 -
           ((C22578 + C22579 + C22580) * C50814 +
            (C22581 + C22582 + C22583) * C17239 +
            (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C17233 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C17238) *
               C50621 * C50746) *
              C289 +
          (((C22583 + C22582 + C22581) * C17238 +
            (C22580 + C22579 + C22578) * C17233 +
            (C23512 + C23513 + C23514) * C17239 +
            (C23515 + C23516 + C23517) * C50814) *
               C50621 * C50746 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C1725) *
              C290 +
          (((C21933 + C21932 + C21931) * C17238 +
            (C21930 + C21929 + C21928) * C17233 +
            (C22840 + C22841 + C22842) * C17239 +
            (C22843 + C22844 + C22845) * C50814) *
               C50621 * C1725 -
           ((C5217 * C21324 + C5214 * C21326 + C5216 * C3706 + C5213 * C3709 +
             C5215 * C3266 + C5212 * C3271) *
                C50814 +
            (C5217 * C21323 + C5214 * C21325 + C5216 * C3703 + C5213 * C3707 +
             C5215 * C3262 + C5212 * C3265) *
                C17239 +
            (C23517 + C23516 + C23515) * C17233 +
            (C23514 + C23513 + C23512) * C17238) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
            C5217 * C487 + C5214 * C501) *
               C17238 +
           (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
            C5217 * C502 + C5214 * C517) *
               C17233 +
           (C21922 + C21923 + C21924) * C17239 +
           (C21925 + C21926 + C21927) * C50814) *
              C50621 * C1891 -
          ((C22578 + C22579 + C22580) * C50814 +
           (C22581 + C22582 + C22583) * C17239 +
           (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
            C5215 * C499 + C5212 * C516) *
               C17233 +
           (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
            C5215 * C486 + C5212 * C500) *
               C17238) *
              C50621 * C1892 +
          ((C5215 * C487 + C5212 * C501 + C5216 * C1898 + C5213 * C1906 +
            C5217 * C5600 + C5214 * C5603) *
               C17238 +
           (C5215 * C502 + C5212 * C517 + C5216 * C1905 + C5213 * C1910 +
            C5217 * C5604 + C5214 * C5609) *
               C17233 +
           (C23008 + C23009 + C23010) * C17239 +
           (C23011 + C23012 + C23013) * C50814) *
              C50621 * C1893 -
          ((C5217 * C23908 + C5214 * C23910 + C5216 * C6586 + C5213 * C6589 +
            C5215 * C4622 + C5212 * C4627) *
               C50814 +
           (C5217 * C23907 + C5214 * C23909 + C5216 * C6583 + C5213 * C6587 +
            C5215 * C4615 + C5212 * C4623) *
               C17239 +
           (C5217 * C7470 + C5214 * C7473 + C5216 * C5604 + C5213 * C5609 +
            C5215 * C1905 + C5212 * C1910) *
               C17233 +
           (C5217 * C7467 + C5214 * C7471 + C5216 * C5600 + C5213 * C5603 +
            C5215 * C1898 + C5212 * C1906) *
               C17238) *
              C50621 * C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50954 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50955 +
           ((C117 * C487 + C50778 * C501) * C19917 +
            (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
            C3720 * C19913 + C3721 * C19919 + C3722 * C19914 + C20724 * C19920 +
            C20725 * C19915) *
               C50621 * C2141) *
              C50666 * C50899 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C50955 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50954 -
           ((C117 * C3704 + C50778 * C3708) * C19915 +
            (C117 * C3702 + C50778 * C3705) * C19920 + C2752 * C19914 +
            C2751 * C19919 + C2750 * C19913 + C2749 * C19918 + C555 * C19912 +
            C554 * C19917) *
               C50621 * C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50954 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50955 +
           (((C117 * C487 + C50778 * C501) * C17238 +
             (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
             C3720 * C50814) *
                C17235 +
            (C17579 + C17580 + C17581 + C17582) * C17236 +
            (C17583 + C17584 + C17585 + C17586) * C17237) *
               C2141) *
              C50666 * C50899 +
          (((C17578 + C17577 + C17576 + C17575) * C17235 +
            (C17574 + C17573 + C17572 + C17571) * C17236 +
            (C17887 + C17888 + C17889 + C17890) * C17237) *
               C50955 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50954 -
           (((C117 * C1268 + C50778 * C1276) * C50814 +
             (C117 * C1264 + C50778 * C1269) * C17239 + C559 * C17233 +
             C558 * C17238) *
                C17237 +
            (C17586 + C17585 + C17584 + C17583) * C17236 +
            (C17582 + C17581 + C17580 + C17579) * C17235) *
               C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C50954 -
           ((C22578 + C22579 + C22580) * C50814 +
            (C22581 + C22582 + C22583) * C17239 +
            (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C17233 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C17238) *
               C50621 * C50955 +
           ((C5215 * C487 + C5212 * C501 + C5216 * C1898 + C5213 * C1906 +
             C5217 * C5600 + C5214 * C5603) *
                C17238 +
            (C5215 * C502 + C5212 * C517 + C5216 * C1905 + C5213 * C1910 +
             C5217 * C5604 + C5214 * C5609) *
                C17233 +
            (C23008 + C23009 + C23010) * C17239 +
            (C23011 + C23012 + C23013) * C50814) *
               C50621 * C2141) *
              C50666 * C50899 +
          (((C5642 + C5641 + C5640) * C17238 +
            (C5639 + C5638 + C5637) * C17233 +
            (C6187 + C6188 + C6189) * C17239 +
            (C6190 + C6191 + C6192) * C50814) *
               C50621 * C50955 -
           ((C5443 + C5444 + C5445) * C50814 +
            (C5446 + C5447 + C5448) * C17239 +
            (C5260 + C5259 + C5258) * C17233 +
            (C5257 + C5256 + C5255) * C17238) *
               C50621 * C50954 -
           ((C5217 * C6584 + C5214 * C6588 + C5216 * C4618 + C5213 * C4625 +
             C5215 * C1272 + C5212 * C1278) *
                C50814 +
            (C5217 * C6582 + C5214 * C6585 + C5216 * C4613 + C5213 * C4619 +
             C5215 * C1266 + C5212 * C1273) *
                C17239 +
            (C5648 + C5647 + C5646) * C17233 +
            (C5645 + C5644 + C5643) * C17238) *
               C50621 * C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C1725 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C289 +
          (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
             C3291 * C50814) *
                C17235 +
            (C18087 + C18088 + C18089 + C18090) * C17236 +
            (C18091 + C18092 + C18093 + C18094) * C17237) *
               C50746 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C1725) *
              C290 +
          (((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C1725 -
           (((C117 * C3269 + C50778 * C3273) * C50814 +
             (C117 * C3264 + C50778 * C3270) * C17239 + C3066 * C17233 +
             C3065 * C17238) *
                C17237 +
            (C3296 * C50814 + C3295 * C17239 + C2747 * C17233 +
             C2748 * C17238) *
                C17236 +
            (C4222 * C50814 + C4221 * C17239 + C3291 * C17233 +
             C3292 * C17238) *
                C17235) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C1725 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C50666 * C1076 +
          (((C17578 + C17577 + C17576 + C17575) * C17235 +
            (C17574 + C17573 + C17572 + C17571) * C17236 +
            (C17887 + C17888 + C17889 + C17890) * C17237) *
               C50746 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C1725) *
              C50666 * C1077 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C1725 -
           (((C117 * C945 + C50778 * C951) * C50814 +
             (C117 * C936 + C50778 * C946) * C17239 + C800 * C17233 +
             C799 * C17238) *
                C17237 +
            (C17890 + C17889 + C17888 + C17887) * C17236 + C17892 * C17235) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C1725 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C50666 * C1076 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C50746 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C1725 -
           ((C117 * C3269 + C50778 * C3273) * C19915 +
            (C117 * C3264 + C50778 * C3270) * C19920 + C3066 * C19914 +
            C3065 * C19919 + C968 * C19913 + C967 * C19918 + C550 * C19912 +
            C551 * C19917) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C1725 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C289 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
            C21061 * C19915) *
               C50621 * C50746 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C1725) *
              C290 +
          ((C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
            C20617 * C19915) *
               C50621 * C1725 -
           ((C117 * C21052 + C50778 * C21054) * C19915 +
            (C117 * C21051 + C50778 * C21053) * C19920 + C21061 * C19914 +
            C21060 * C19919 + C4222 * C19913 + C4221 * C19918 + C3291 * C19912 +
            C3292 * C19917) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C1725 -
           ((C22578 + C22579 + C22580) * C50814 +
            (C22581 + C22582 + C22583) * C17239 +
            (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C17233 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C17238) *
               C50621 * C50746) *
              C50666 * C1076 +
          (((C5642 + C5641 + C5640) * C17238 +
            (C5639 + C5638 + C5637) * C17233 +
            (C6187 + C6188 + C6189) * C17239 +
            (C6190 + C6191 + C6192) * C50814) *
               C50621 * C50746 -
           ((C5443 + C5444 + C5445) * C50814 +
            (C5446 + C5447 + C5448) * C17239 +
            (C5260 + C5259 + C5258) * C17233 +
            (C5257 + C5256 + C5255) * C17238) *
               C50621 * C1725) *
              C50666 * C1077 +
          (((C5266 + C5265 + C5264) * C17238 +
            (C5263 + C5262 + C5261) * C17233 +
            (C5807 + C5808 + C5809) * C17239 +
            (C5810 + C5811 + C5812) * C50814) *
               C50621 * C1725 -
           ((C5217 * C6171 + C5214 * C6173 + C5216 * C1270 + C5213 * C1277 +
             C5215 * C942 + C5212 * C949) *
                C50814 +
            (C5217 * C6170 + C5214 * C6172 + C5216 * C1265 + C5213 * C1271 +
             C5215 * C934 + C5212 * C941) *
                C17239 +
            (C5976 + C5975 + C5974) * C17233 +
            (C5973 + C5972 + C5971) * C17238) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5215 * C119 + C5212 * C126 + C5216 * C486 + C5213 * C500 +
             C5217 * C487 + C5214 * C501) *
                C17238 +
            (C5215 * C127 + C5212 * C140 + C5216 * C499 + C5213 * C516 +
             C5217 * C502 + C5214 * C517) *
                C17233 +
            (C21922 + C21923 + C21924) * C17239 +
            (C21925 + C21926 + C21927) * C50814) *
               C50621 * C1725 -
           ((C22578 + C22579 + C22580) * C50814 +
            (C22581 + C22582 + C22583) * C17239 +
            (C5217 * C1905 + C5214 * C1910 + C5216 * C502 + C5213 * C517 +
             C5215 * C499 + C5212 * C516) *
                C17233 +
            (C5217 * C1898 + C5214 * C1906 + C5216 * C487 + C5213 * C501 +
             C5215 * C486 + C5212 * C500) *
                C17238) *
               C50621 * C50746) *
              C289 +
          (((C22583 + C22582 + C22581) * C17238 +
            (C22580 + C22579 + C22578) * C17233 +
            (C23512 + C23513 + C23514) * C17239 +
            (C23515 + C23516 + C23517) * C50814) *
               C50621 * C50746 -
           ((C21928 + C21929 + C21930) * C50814 +
            (C21931 + C21932 + C21933) * C17239 +
            (C21927 + C21926 + C21925) * C17233 +
            (C21924 + C21923 + C21922) * C17238) *
               C50621 * C1725) *
              C290 +
          (((C21933 + C21932 + C21931) * C17238 +
            (C21930 + C21929 + C21928) * C17233 +
            (C22840 + C22841 + C22842) * C17239 +
            (C22843 + C22844 + C22845) * C50814) *
               C50621 * C1725 -
           ((C5217 * C21324 + C5214 * C21326 + C5216 * C3706 + C5213 * C3709 +
             C5215 * C3266 + C5212 * C3271) *
                C50814 +
            (C5217 * C21323 + C5214 * C21325 + C5216 * C3703 + C5213 * C3707 +
             C5215 * C3262 + C5212 * C3265) *
                C17239 +
            (C23517 + C23516 + C23515) * C17233 +
            (C23514 + C23513 + C23512) * C17238) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50682 * C50907 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C50682 * C50718) *
              C50950 +
          (((C13854 * C17238 + C13855 * C17233 + C13868 * C17239 +
             C13869 * C50814) *
                C50892 +
            (C14290 * C17238 + C14291 * C17233 + (C11028 + C11029) * C17239 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C50718 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C50682 * C50907) *
              C50951 +
          (((C10828 * C17238 + C10829 * C17233 + C14290 * C17239 +
             C14291 * C50814) *
                C50892 +
            ((C10823 + C10822) * C17238 + (C10821 + C10820) * C17233 +
             (C11384 + C11385) * C17239 + (C11386 + C11387) * C50814) *
                C50626) *
               C50682 * C50907 -
           (((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
                 C50814 +
             (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
                 C17239 +
             (C11387 + C11386) * C17233 + (C11385 + C11384) * C17238) *
                C50626 +
            ((C11031 + C11030) * C50814 + (C11029 + C11028) * C17239 +
             C11372 * C17233 + C11373 * C17238) *
                C50892) *
               C50682 * C50718) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                  C17238 +
              (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                  C17233 +
              (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                 C50892 +
             ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
              C13854 * C17239 + C13855 * C50814) *
                 C50626) *
                C50908 -
            ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
              (C11216 + C11217) * C17238) *
                 C50626 +
             ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
              (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                  C17233 +
              (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                  C17238) *
                 C50892) *
                C50746) *
               C50907 +
           ((((C14767 + C14766) * C17238 + (C14765 + C14764) * C17233 +
              (C15968 + C15969) * C17239 + (C15970 + C15971) * C50814) *
                 C50892 +
             (C14754 * C17238 + C14755 * C17233 + (C14768 + C14769) * C17239 +
              (C14770 + C14771) * C50814) *
                 C50626) *
                C50746 -
            ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
              C13859 * C17238) *
                 C50626 +
             ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
              (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                 C50892) *
                C50908) *
               C50718) *
              C292 +
          (((((C11217 + C11216) * C17238 + (C11215 + C11214) * C17233 +
              C14754 * C17239 + C14755 * C50814) *
                 C50892 +
             ((C11213 + C11212) * C17238 + (C11211 + C11210) * C17233 +
              (C11766 + C11767) * C17239 + (C11768 + C11769) * C50814) *
                 C50626) *
                C50746 -
            ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
              (C10817 + C10816) * C17238) *
                 C50626 +
             (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
              (C10813 + C10812) * C17238) *
                 C50892) *
                C50908) *
               C50907 +
           (((C13854 * C17238 + C13855 * C17233 + C13868 * C17239 +
              C13869 * C50814) *
                 C50892 +
             (C14290 * C17238 + C14291 * C17233 + (C11028 + C11029) * C17239 +
              (C11030 + C11031) * C50814) *
                 C50626) *
                C50908 -
            (((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
               C50921 * C1624) *
                  C50814 +
              (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
               C50921 * C1618) *
                  C17239 +
              (C11769 + C11768) * C17233 + (C11767 + C11766) * C17238) *
                 C50626 +
             ((C14771 + C14770) * C50814 + (C14769 + C14768) * C17239 +
              C14744 * C17233 + C14745 * C17238) *
                 C50892) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50682 * C289 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C50682 * C290 +
           (((C13885 + C13884) * C17238 + (C13883 + C13882) * C17233 +
             (C15104 + C15105) * C17239 + (C15106 + C15107) * C50814) *
                C50892 +
            (C13868 * C17238 + C13869 * C17233 + (C13886 + C13887) * C17239 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C50682 * C291) *
              C292 +
          (((C13854 * C17238 + C13855 * C17233 + C13868 * C17239 +
             C13869 * C50814) *
                C50892 +
            (C14290 * C17238 + C14291 * C17233 + (C11028 + C11029) * C17239 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C290 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C50682 * C289 -
           (((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
              C50921 * C1163) *
                 C50814 +
             (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
              C50921 * C1157) *
                 C17239 +
             (C11031 + C11030) * C17233 + (C11029 + C11028) * C17238) *
                C50626 +
            ((C13889 + C13888) * C50814 + (C13887 + C13886) * C17239 +
             C13856 * C17233 + C13857 * C17238) *
                C50892) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C17238 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C17233 +
            (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
               C50892 +
           ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
            C13854 * C17239 + C13855 * C50814) *
               C50626) *
              C50682 * C50666 * C113 -
          ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
            (C10817 + C10816) * C17238) *
               C50626 +
           (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
            (C10813 + C10812) * C17238) *
               C50892) *
              C50682 * C50666 * C114 +
          ((C10828 * C17238 + C10829 * C17233 + C14290 * C17239 +
            C14291 * C50814) *
               C50892 +
           ((C10823 + C10822) * C17238 + (C10821 + C10820) * C17233 +
            (C11384 + C11385) * C17239 + (C11386 + C11387) * C50814) *
               C50626) *
              C50682 * C50666 * C115 -
          (((C10778 * C945 + C50842 * C951 + C10777 * C321 + C50921 * C332) *
                C50814 +
            (C10778 * C936 + C50842 * C946 + C10777 * C302 + C50921 * C320) *
                C17239 +
            (C10827 + C10826) * C17233 + (C10825 + C10824) * C17238) *
               C50626 +
           ((C11387 + C11386) * C50814 + (C11385 + C11384) * C17239 +
            C10830 * C17233 + C10831 * C17238) *
               C50892) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C480 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C481 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C17238 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C17233 +
             (C15310 + C15311) * C17239 + (C15312 + C15313) * C50814) *
                C50892 +
            ((C11218 + C11219) * C17238 + (C11220 + C11221) * C17233 +
             (C14092 + C14093) * C17239 + (C14094 + C14095) * C50814) *
                C50626) *
               C482) *
              C50666 * C292 +
          ((((C11217 + C11216) * C17238 + (C11215 + C11214) * C17233 +
             C14754 * C17239 + C14755 * C50814) *
                C50892 +
            ((C11213 + C11212) * C17238 + (C11211 + C11210) * C17233 +
             (C11766 + C11767) * C17239 + (C11768 + C11769) * C50814) *
                C50626) *
               C481 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C480 -
           (((C10778 * C6171 + C50842 * C6173 + C10777 * C1270 +
              C50921 * C1277) *
                 C50814 +
             (C10778 * C6170 + C50842 * C6172 + C10777 * C1265 +
              C50921 * C1271) *
                 C17239 +
             (C11225 + C11224) * C17233 + (C11223 + C11222) * C17238) *
                C50626 +
            ((C14095 + C14094) * C50814 + (C14093 + C14092) * C17239 +
             (C11221 + C11220) * C17233 + (C11219 + C11218) * C17238) *
                C50892) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50908 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C50746) *
              C50666 * C50950 +
          ((((C11217 + C11216) * C17238 + (C11215 + C11214) * C17233 +
             C14754 * C17239 + C14755 * C50814) *
                C50892 +
            ((C11213 + C11212) * C17238 + (C11211 + C11210) * C17233 +
             (C11766 + C11767) * C17239 + (C11768 + C11769) * C50814) *
                C50626) *
               C50746 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C50908) *
              C50666 * C50951 +
          (((C10828 * C17238 + C10829 * C17233 + C14290 * C17239 +
             C14291 * C50814) *
                C50892 +
            ((C10823 + C10822) * C17238 + (C10821 + C10820) * C17233 +
             (C11384 + C11385) * C17239 + (C11386 + C11387) * C50814) *
                C50626) *
               C50908 -
           (((C10778 * C1268 + C50842 * C1276 + C10777 * C944 + C50921 * C950) *
                 C50814 +
             (C10778 * C1264 + C50842 * C1269 + C10777 * C935 + C50921 * C943) *
                 C17239 +
             (C11550 + C11549) * C17233 + (C11548 + C11547) * C17238) *
                C50626 +
            ((C11769 + C11768) * C50814 + (C11767 + C11766) * C17239 +
             C11535 * C17233 + C11536 * C17238) *
                C50892) *
               C50746) *
              C50666 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C17238 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C17233 +
            (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
               C50892 +
           ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
            C13854 * C17239 + C13855 * C50814) *
               C50626) *
              C50682 * C50666 * C113 -
          ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
            (C10817 + C10816) * C17238) *
               C50626 +
           (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
            (C10813 + C10812) * C17238) *
               C50892) *
              C50682 * C50666 * C114 +
          ((C10828 * C17238 + C10829 * C17233 + C14290 * C17239 +
            C14291 * C50814) *
               C50892 +
           ((C10823 + C10822) * C17238 + (C10821 + C10820) * C17233 +
            (C11384 + C11385) * C17239 + (C11386 + C11387) * C50814) *
               C50626) *
              C50682 * C50666 * C115 -
          (((C10778 * C945 + C50842 * C951 + C10777 * C321 + C50921 * C332) *
                C50814 +
            (C10778 * C936 + C50842 * C946 + C10777 * C302 + C50921 * C320) *
                C17239 +
            (C10827 + C10826) * C17233 + (C10825 + C10824) * C17238) *
               C50626 +
           ((C11387 + C11386) * C50814 + (C11385 + C11384) * C17239 +
            C10830 * C17233 + C10831 * C17238) *
               C50892) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50682 * C289 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C50682 * C290 +
           (((C13885 + C13884) * C17238 + (C13883 + C13882) * C17233 +
             (C15104 + C15105) * C17239 + (C15106 + C15107) * C50814) *
                C50892 +
            (C13868 * C17238 + C13869 * C17233 + (C13886 + C13887) * C17239 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C50682 * C291) *
              C292 +
          (((C13854 * C17238 + C13855 * C17233 + C13868 * C17239 +
             C13869 * C50814) *
                C50892 +
            (C14290 * C17238 + C14291 * C17233 + (C11028 + C11029) * C17239 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C290 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C50682 * C289 -
           (((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
              C50921 * C1163) *
                 C50814 +
             (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
              C50921 * C1157) *
                 C17239 +
             (C11031 + C11030) * C17233 + (C11029 + C11028) * C17238) *
                C50626 +
            ((C13889 + C13888) * C50814 + (C13887 + C13886) * C17239 +
             C13856 * C17233 + C13857 * C17238) *
                C50892) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50682 * C50952 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C50682 * C50953 +
           (((C13885 + C13884) * C17238 + (C13883 + C13882) * C17233 +
             (C15104 + C15105) * C17239 + (C15106 + C15107) * C50814) *
                C50892 +
            (C13868 * C17238 + C13869 * C17233 + (C13886 + C13887) * C17239 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C50682 * C1380) *
              C50899 +
          (((C13854 * C17238 + C13855 * C17233 + C13868 * C17239 +
             C13869 * C50814) *
                C50892 +
            (C14290 * C17238 + C14291 * C17233 + (C11028 + C11029) * C17239 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C50953 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C50682 * C50952 -
           (((C10778 * C3269 + C50842 * C3273 + C10777 * C1156 +
              C50921 * C1163) *
                 C50814 +
             (C10778 * C3264 + C50842 * C3270 + C10777 * C1151 +
              C50921 * C1157) *
                 C17239 +
             (C11031 + C11030) * C17233 + (C11029 + C11028) * C17238) *
                C50626 +
            ((C13889 + C13888) * C50814 + (C13887 + C13886) * C17239 +
             C13856 * C17233 + C13857 * C17238) *
                C50892) *
               C50682 * C1380) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50908 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C50746) *
              C50952 +
          ((((C14767 + C14766) * C17238 + (C14765 + C14764) * C17233 +
             (C15968 + C15969) * C17239 + (C15970 + C15971) * C50814) *
                C50892 +
            (C14754 * C17238 + C14755 * C17233 + (C14768 + C14769) * C17239 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C50746 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C50908) *
              C50953 +
          ((((C13885 + C13884) * C17238 + (C13883 + C13882) * C17233 +
             (C15104 + C15105) * C17239 + (C15106 + C15107) * C50814) *
                C50892 +
            (C13868 * C17238 + C13869 * C17233 + (C13886 + C13887) * C17239 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C50908 -
           (((C10778 * C3704 + C50842 * C3708 + C10777 * C3268 +
              C50921 * C3272) *
                 C50814 +
             (C10778 * C3702 + C50842 * C3705 + C10777 * C3263 +
              C50921 * C3267) *
                 C17239 +
             (C14771 + C14770) * C17233 + (C14769 + C14768) * C17238) *
                C50626 +
            ((C10778 * C3706 + C50842 * C3709 + C10777 * C3266 +
              C50921 * C3271) *
                 C50814 +
             (C10778 * C3703 + C50842 * C3707 + C10777 * C3262 +
              C50921 * C3265) *
                 C17239 +
             (C15971 + C15970) * C17233 + (C15969 + C15968) * C17238) *
                C50892) *
               C50746) *
              C1380) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C17238 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C17233 +
            (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
               C50892 +
           ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
            C13854 * C17239 + C13855 * C50814) *
               C50626) *
              C50682 * C1145 -
          ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
            C13859 * C17238) *
               C50626 +
           ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
            (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
               C50892) *
              C50682 * C1146 +
          (((C13885 + C13884) * C17238 + (C13883 + C13882) * C17233 +
            (C15104 + C15105) * C17239 + (C15106 + C15107) * C50814) *
               C50892 +
           (C13868 * C17238 + C13869 * C17233 + (C13886 + C13887) * C17239 +
            (C13888 + C13889) * C50814) *
               C50626) *
              C50682 * C1147 -
          (((C10778 * C4210 + C50842 * C4214 + C10777 * C2516 +
             C50921 * C2520) *
                C50814 +
            (C10778 * C4208 + C50842 * C4211 + C10777 * C2511 +
             C50921 * C2515) *
                C17239 +
            (C13889 + C13888) * C17233 + (C13887 + C13886) * C17238) *
               C50626 +
           ((C10778 * C4212 + C50842 * C4215 + C10777 * C2514 +
             C50921 * C2519) *
                C50814 +
            (C10778 * C4209 + C50842 * C4213 + C10777 * C2510 +
             C50921 * C2513) *
                C17239 +
            (C15107 + C15106) * C17233 + (C15105 + C15104) * C17238) *
               C50892) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50682 * C1074 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C50682 * C50718) *
              C1076 +
          (((C13854 * C17238 + C13855 * C17233 + C13868 * C17239 +
             C13869 * C50814) *
                C50892 +
            (C14290 * C17238 + C14291 * C17233 + (C11028 + C11029) * C17239 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C50718 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C50682 * C1074) *
              C1077 +
          (((C10828 * C17238 + C10829 * C17233 + C14290 * C17239 +
             C14291 * C50814) *
                C50892 +
            ((C10823 + C10822) * C17238 + (C10821 + C10820) * C17233 +
             (C11384 + C11385) * C17239 + (C11386 + C11387) * C50814) *
                C50626) *
               C50682 * C1074 -
           (((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
                 C50814 +
             (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
                 C17239 +
             (C11387 + C11386) * C17233 + (C11385 + C11384) * C17238) *
                C50626 +
            ((C11031 + C11030) * C50814 + (C11029 + C11028) * C17239 +
             C11372 * C17233 + C11373 * C17238) *
                C50892) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C480 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C481 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C17238 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C17233 +
             (C15310 + C15311) * C17239 + (C15312 + C15313) * C50814) *
                C50892 +
            ((C11218 + C11219) * C17238 + (C11220 + C11221) * C17233 +
             (C14092 + C14093) * C17239 + (C14094 + C14095) * C50814) *
                C50626) *
               C482) *
              C1074 +
          ((((C14767 + C14766) * C17238 + (C14765 + C14764) * C17233 +
             (C15968 + C15969) * C17239 + (C15970 + C15971) * C50814) *
                C50892 +
            (C14754 * C17238 + C14755 * C17233 + (C14768 + C14769) * C17239 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C481 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C480 -
           (((C10778 * C4616 + C50842 * C4624 + C10777 * C2722 +
              C50921 * C2726) *
                 C50814 +
             (C10778 * C4612 + C50842 * C4617 + C10777 * C2717 +
              C50921 * C2721) *
                 C17239 +
             (C14095 + C14094) * C17233 + (C14093 + C14092) * C17238) *
                C50626 +
            ((C10778 * C4620 + C50842 * C4626 + C10777 * C2720 +
              C50921 * C2725) *
                 C50814 +
             (C10778 * C4614 + C50842 * C4621 + C10777 * C2716 +
              C50921 * C2719) *
                 C17239 +
             (C15313 + C15312) * C17233 + (C15311 + C15310) * C17238) *
                C50892) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                  C17238 +
              (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                  C17233 +
              (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                 C50892 +
             ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
              C13854 * C17239 + C13855 * C50814) *
                 C50626) *
                C50908 -
            ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
              (C11216 + C11217) * C17238) *
                 C50626 +
             ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
              (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                  C17233 +
              (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                  C17238) *
                 C50892) *
                C50746) *
               C1074 +
           ((((C14767 + C14766) * C17238 + (C14765 + C14764) * C17233 +
              (C15968 + C15969) * C17239 + (C15970 + C15971) * C50814) *
                 C50892 +
             (C14754 * C17238 + C14755 * C17233 + (C14768 + C14769) * C17239 +
              (C14770 + C14771) * C50814) *
                 C50626) *
                C50746 -
            ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
              C13859 * C17238) *
                 C50626 +
             ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
              (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                 C50892) *
                C50908) *
               C50718) *
              C50899 +
          (((((C11217 + C11216) * C17238 + (C11215 + C11214) * C17233 +
              C14754 * C17239 + C14755 * C50814) *
                 C50892 +
             ((C11213 + C11212) * C17238 + (C11211 + C11210) * C17233 +
              (C11766 + C11767) * C17239 + (C11768 + C11769) * C50814) *
                 C50626) *
                C50746 -
            ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
              (C10817 + C10816) * C17238) *
                 C50626 +
             (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
              (C10813 + C10812) * C17238) *
                 C50892) *
                C50908) *
               C1074 +
           (((C13854 * C17238 + C13855 * C17233 + C13868 * C17239 +
              C13869 * C50814) *
                 C50892 +
             (C14290 * C17238 + C14291 * C17233 + (C11028 + C11029) * C17239 +
              (C11030 + C11031) * C50814) *
                 C50626) *
                C50908 -
            (((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
               C50921 * C1624) *
                  C50814 +
              (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
               C50921 * C1618) *
                  C17239 +
              (C11769 + C11768) * C17233 + (C11767 + C11766) * C17238) *
                 C50626 +
             ((C14771 + C14770) * C50814 + (C14769 + C14768) * C17239 +
              C14744 * C17233 + C14745 * C17238) *
                 C50892) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50682 * C1074 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C50682 * C50718) *
              C1076 +
          (((C13854 * C17238 + C13855 * C17233 + C13868 * C17239 +
             C13869 * C50814) *
                C50892 +
            (C14290 * C17238 + C14291 * C17233 + (C11028 + C11029) * C17239 +
             (C11030 + C11031) * C50814) *
                C50626) *
               C50682 * C50718 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C50682 * C1074) *
              C1077 +
          (((C10828 * C17238 + C10829 * C17233 + C14290 * C17239 +
             C14291 * C50814) *
                C50892 +
            ((C10823 + C10822) * C17238 + (C10821 + C10820) * C17233 +
             (C11384 + C11385) * C17239 + (C11386 + C11387) * C50814) *
                C50626) *
               C50682 * C1074 -
           (((C10778 * C1615 + C50842 * C1623 + C10777 * C319 + C50921 * C331) *
                 C50814 +
             (C10778 * C1611 + C50842 * C1616 + C10777 * C301 + C50921 * C318) *
                 C17239 +
             (C11387 + C11386) * C17233 + (C11385 + C11384) * C17238) *
                C50626 +
            ((C11031 + C11030) * C50814 + (C11029 + C11028) * C17239 +
             C11372 * C17233 + C11373 * C17238) *
                C50892) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C17238 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C17233 +
            (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
               C50892 +
           ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
            C13854 * C17239 + C13855 * C50814) *
               C50626) *
              C50682 * C1145 -
          ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
            C13859 * C17238) *
               C50626 +
           ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
            (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
               C50892) *
              C50682 * C1146 +
          (((C13885 + C13884) * C17238 + (C13883 + C13882) * C17233 +
            (C15104 + C15105) * C17239 + (C15106 + C15107) * C50814) *
               C50892 +
           (C13868 * C17238 + C13869 * C17233 + (C13886 + C13887) * C17239 +
            (C13888 + C13889) * C50814) *
               C50626) *
              C50682 * C1147 -
          (((C10778 * C4210 + C50842 * C4214 + C10777 * C2516 +
             C50921 * C2520) *
                C50814 +
            (C10778 * C4208 + C50842 * C4211 + C10777 * C2511 +
             C50921 * C2515) *
                C17239 +
            (C13889 + C13888) * C17233 + (C13887 + C13886) * C17238) *
               C50626 +
           ((C10778 * C4212 + C50842 * C4215 + C10777 * C2514 +
             C50921 * C2519) *
                C50814 +
            (C10778 * C4209 + C50842 * C4213 + C10777 * C2510 +
             C50921 * C2513) *
                C17239 +
            (C15107 + C15106) * C17233 + (C15105 + C15104) * C17238) *
               C50892) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                  C17238 +
              (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                  C17233 +
              (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                 C50892 +
             ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
              C13854 * C17239 + C13855 * C50814) *
                 C50626) *
                C1725 -
            ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
              (C11216 + C11217) * C17238) *
                 C50626 +
             ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
              (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                  C17233 +
              (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                  C17238) *
                 C50892) *
                C50746) *
               C50907 +
           ((((C14767 + C14766) * C17238 + (C14765 + C14764) * C17233 +
              (C15968 + C15969) * C17239 + (C15970 + C15971) * C50814) *
                 C50892 +
             (C14754 * C17238 + C14755 * C17233 + (C14768 + C14769) * C17239 +
              (C14770 + C14771) * C50814) *
                 C50626) *
                C50746 -
            ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
              C13859 * C17238) *
                 C50626 +
             ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
              (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                 C50892) *
                C1725) *
               C50718) *
              C50899 +
          (((((C11217 + C11216) * C17238 + (C11215 + C11214) * C17233 +
              C14754 * C17239 + C14755 * C50814) *
                 C50892 +
             ((C11213 + C11212) * C17238 + (C11211 + C11210) * C17233 +
              (C11766 + C11767) * C17239 + (C11768 + C11769) * C50814) *
                 C50626) *
                C50746 -
            ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
              (C10817 + C10816) * C17238) *
                 C50626 +
             (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
              (C10813 + C10812) * C17238) *
                 C50892) *
                C1725) *
               C50907 +
           (((C13854 * C17238 + C13855 * C17233 + C13868 * C17239 +
              C13869 * C50814) *
                 C50892 +
             (C14290 * C17238 + C14291 * C17233 + (C11028 + C11029) * C17239 +
              (C11030 + C11031) * C50814) *
                 C50626) *
                C1725 -
            (((C10778 * C2723 + C50842 * C2727 + C10777 * C1617 +
               C50921 * C1624) *
                  C50814 +
              (C10778 * C2718 + C50842 * C2724 + C10777 * C1612 +
               C50921 * C1618) *
                  C17239 +
              (C11769 + C11768) * C17233 + (C11767 + C11766) * C17238) *
                 C50626 +
             ((C14771 + C14770) * C50814 + (C14769 + C14768) * C17239 +
              C14744 * C17233 + C14745 * C17238) *
                 C50892) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50954 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C50955 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C17238 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C17233 +
             (C15310 + C15311) * C17239 + (C15312 + C15313) * C50814) *
                C50892 +
            ((C11218 + C11219) * C17238 + (C11220 + C11221) * C17233 +
             (C14092 + C14093) * C17239 + (C14094 + C14095) * C50814) *
                C50626) *
               C2141) *
              C50907 +
          ((((C14767 + C14766) * C17238 + (C14765 + C14764) * C17233 +
             (C15968 + C15969) * C17239 + (C15970 + C15971) * C50814) *
                C50892 +
            (C14754 * C17238 + C14755 * C17233 + (C14768 + C14769) * C17239 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C50955 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C50954 -
           (((C10778 * C4616 + C50842 * C4624 + C10777 * C2722 +
              C50921 * C2726) *
                 C50814 +
             (C10778 * C4612 + C50842 * C4617 + C10777 * C2717 +
              C50921 * C2721) *
                 C17239 +
             (C14095 + C14094) * C17233 + (C14093 + C14092) * C17238) *
                C50626 +
            ((C10778 * C4620 + C50842 * C4626 + C10777 * C2720 +
              C50921 * C2725) *
                 C50814 +
             (C10778 * C4614 + C50842 * C4621 + C10777 * C2716 +
              C50921 * C2719) *
                 C17239 +
             (C15313 + C15312) * C17233 + (C15311 + C15310) * C17238) *
                C50892) *
               C2141) *
              C50718) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C1725 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C50746) *
              C289 +
          ((((C14767 + C14766) * C17238 + (C14765 + C14764) * C17233 +
             (C15968 + C15969) * C17239 + (C15970 + C15971) * C50814) *
                C50892 +
            (C14754 * C17238 + C14755 * C17233 + (C14768 + C14769) * C17239 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C50746 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C1725) *
              C290 +
          ((((C13885 + C13884) * C17238 + (C13883 + C13882) * C17233 +
             (C15104 + C15105) * C17239 + (C15106 + C15107) * C50814) *
                C50892 +
            (C13868 * C17238 + C13869 * C17233 + (C13886 + C13887) * C17239 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C1725 -
           (((C10778 * C3704 + C50842 * C3708 + C10777 * C3268 +
              C50921 * C3272) *
                 C50814 +
             (C10778 * C3702 + C50842 * C3705 + C10777 * C3263 +
              C50921 * C3267) *
                 C17239 +
             (C14771 + C14770) * C17233 + (C14769 + C14768) * C17238) *
                C50626 +
            ((C10778 * C3706 + C50842 * C3709 + C10777 * C3266 +
              C50921 * C3271) *
                 C50814 +
             (C10778 * C3703 + C50842 * C3707 + C10777 * C3262 +
              C50921 * C3265) *
                 C17239 +
             (C15971 + C15970) * C17233 + (C15969 + C15968) * C17238) *
                C50892) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C1725 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C50746) *
              C50666 * C1076 +
          ((((C11217 + C11216) * C17238 + (C11215 + C11214) * C17233 +
             C14754 * C17239 + C14755 * C50814) *
                C50892 +
            ((C11213 + C11212) * C17238 + (C11211 + C11210) * C17233 +
             (C11766 + C11767) * C17239 + (C11768 + C11769) * C50814) *
                C50626) *
               C50746 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C1725) *
              C50666 * C1077 +
          (((C10828 * C17238 + C10829 * C17233 + C14290 * C17239 +
             C14291 * C50814) *
                C50892 +
            ((C10823 + C10822) * C17238 + (C10821 + C10820) * C17233 +
             (C11384 + C11385) * C17239 + (C11386 + C11387) * C50814) *
                C50626) *
               C1725 -
           (((C10778 * C1268 + C50842 * C1276 + C10777 * C944 + C50921 * C950) *
                 C50814 +
             (C10778 * C1264 + C50842 * C1269 + C10777 * C935 + C50921 * C943) *
                 C17239 +
             (C11550 + C11549) * C17233 + (C11548 + C11547) * C17238) *
                C50626 +
            ((C11769 + C11768) * C50814 + (C11767 + C11766) * C17239 +
             C11535 * C17233 + C11536 * C17238) *
                C50892) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                C17238 +
            (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                C17233 +
            (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
               C50892 +
           ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
            C13854 * C17239 + C13855 * C50814) *
               C50626) *
              C1891 -
          ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
            (C11216 + C11217) * C17238) *
               C50626 +
           ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
            (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                C17233 +
            (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                C17238) *
               C50892) *
              C1892 +
          (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                C17238 +
            (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                C17233 +
            (C15310 + C15311) * C17239 + (C15312 + C15313) * C50814) *
               C50892 +
           ((C11218 + C11219) * C17238 + (C11220 + C11221) * C17233 +
            (C14092 + C14093) * C17239 + (C14094 + C14095) * C50814) *
               C50626) *
              C1893 -
          (((C10778 * C6584 + C50842 * C6588 + C10777 * C4618 +
             C50921 * C4625) *
                C50814 +
            (C10778 * C6582 + C50842 * C6585 + C10777 * C4613 +
             C50921 * C4619) *
                C17239 +
            (C10778 * C5606 + C50842 * C5610 + C10777 * C1903 +
             C50921 * C1909) *
                C17233 +
            (C10778 * C5601 + C50842 * C5605 + C10777 * C1897 +
             C50921 * C1904) *
                C17238) *
               C50626 +
           ((C10778 * C6586 + C50842 * C6589 + C10777 * C4622 +
             C50921 * C4627) *
                C50814 +
            (C10778 * C6583 + C50842 * C6587 + C10777 * C4615 +
             C50921 * C4623) *
                C17239 +
            (C10778 * C5604 + C50842 * C5609 + C10777 * C1905 +
             C50921 * C1910) *
                C17233 +
            (C10778 * C5600 + C50842 * C5603 + C10777 * C1898 +
             C50921 * C1906) *
                C17238) *
               C50892) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C50954 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C50955 +
           (((C10777 * C487 + C50921 * C501 + C10778 * C1898 + C50842 * C1906) *
                 C17238 +
             (C10777 * C502 + C50921 * C517 + C10778 * C1905 + C50842 * C1910) *
                 C17233 +
             (C15310 + C15311) * C17239 + (C15312 + C15313) * C50814) *
                C50892 +
            ((C11218 + C11219) * C17238 + (C11220 + C11221) * C17233 +
             (C14092 + C14093) * C17239 + (C14094 + C14095) * C50814) *
                C50626) *
               C2141) *
              C50666 * C50899 +
          ((((C11217 + C11216) * C17238 + (C11215 + C11214) * C17233 +
             C14754 * C17239 + C14755 * C50814) *
                C50892 +
            ((C11213 + C11212) * C17238 + (C11211 + C11210) * C17233 +
             (C11766 + C11767) * C17239 + (C11768 + C11769) * C50814) *
                C50626) *
               C50955 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C50954 -
           (((C10778 * C6171 + C50842 * C6173 + C10777 * C1270 +
              C50921 * C1277) *
                 C50814 +
             (C10778 * C6170 + C50842 * C6172 + C10777 * C1265 +
              C50921 * C1271) *
                 C17239 +
             (C11225 + C11224) * C17233 + (C11223 + C11222) * C17238) *
                C50626 +
            ((C14095 + C14094) * C50814 + (C14093 + C14092) * C17239 +
             (C11221 + C11220) * C17233 + (C11219 + C11218) * C17238) *
                C50892) *
               C2141) *
              C50666 * C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C1725 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C50746) *
              C50666 * C1076 +
          ((((C11217 + C11216) * C17238 + (C11215 + C11214) * C17233 +
             C14754 * C17239 + C14755 * C50814) *
                C50892 +
            ((C11213 + C11212) * C17238 + (C11211 + C11210) * C17233 +
             (C11766 + C11767) * C17239 + (C11768 + C11769) * C50814) *
                C50626) *
               C50746 -
           ((C11372 * C50814 + C11373 * C17239 + (C10819 + C10818) * C17233 +
             (C10817 + C10816) * C17238) *
                C50626 +
            (C13858 * C50814 + C13859 * C17239 + (C10815 + C10814) * C17233 +
             (C10813 + C10812) * C17238) *
                C50892) *
               C1725) *
              C50666 * C1077 +
          (((C10828 * C17238 + C10829 * C17233 + C14290 * C17239 +
             C14291 * C50814) *
                C50892 +
            ((C10823 + C10822) * C17238 + (C10821 + C10820) * C17233 +
             (C11384 + C11385) * C17239 + (C11386 + C11387) * C50814) *
                C50626) *
               C1725 -
           (((C10778 * C1268 + C50842 * C1276 + C10777 * C944 + C50921 * C950) *
                 C50814 +
             (C10778 * C1264 + C50842 * C1269 + C10777 * C935 + C50921 * C943) *
                 C17239 +
             (C11550 + C11549) * C17233 + (C11548 + C11547) * C17238) *
                C50626 +
            ((C11769 + C11768) * C50814 + (C11767 + C11766) * C17239 +
             C11535 * C17233 + C11536 * C17238) *
                C50892) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10777 * C119 + C50921 * C126 + C10778 * C486 + C50842 * C500) *
                 C17238 +
             (C10777 * C127 + C50921 * C140 + C10778 * C499 + C50842 * C516) *
                 C17233 +
             (C13878 + C13879) * C17239 + (C13880 + C13881) * C50814) *
                C50892 +
            ((C10812 + C10813) * C17238 + (C10814 + C10815) * C17233 +
             C13854 * C17239 + C13855 * C50814) *
                C50626) *
               C1725 -
           ((C14744 * C50814 + C14745 * C17239 + (C11214 + C11215) * C17233 +
             (C11216 + C11217) * C17238) *
                C50626 +
            ((C14764 + C14765) * C50814 + (C14766 + C14767) * C17239 +
             (C10778 * C502 + C50842 * C517 + C10777 * C499 + C50921 * C516) *
                 C17233 +
             (C10778 * C487 + C50842 * C501 + C10777 * C486 + C50921 * C500) *
                 C17238) *
                C50892) *
               C50746) *
              C289 +
          ((((C14767 + C14766) * C17238 + (C14765 + C14764) * C17233 +
             (C15968 + C15969) * C17239 + (C15970 + C15971) * C50814) *
                C50892 +
            (C14754 * C17238 + C14755 * C17233 + (C14768 + C14769) * C17239 +
             (C14770 + C14771) * C50814) *
                C50626) *
               C50746 -
           ((C13856 * C50814 + C13857 * C17239 + C13858 * C17233 +
             C13859 * C17238) *
                C50626 +
            ((C13882 + C13883) * C50814 + (C13884 + C13885) * C17239 +
             (C13881 + C13880) * C17233 + (C13879 + C13878) * C17238) *
                C50892) *
               C1725) *
              C290 +
          ((((C13885 + C13884) * C17238 + (C13883 + C13882) * C17233 +
             (C15104 + C15105) * C17239 + (C15106 + C15107) * C50814) *
                C50892 +
            (C13868 * C17238 + C13869 * C17233 + (C13886 + C13887) * C17239 +
             (C13888 + C13889) * C50814) *
                C50626) *
               C1725 -
           (((C10778 * C3704 + C50842 * C3708 + C10777 * C3268 +
              C50921 * C3272) *
                 C50814 +
             (C10778 * C3702 + C50842 * C3705 + C10777 * C3263 +
              C50921 * C3267) *
                 C17239 +
             (C14771 + C14770) * C17233 + (C14769 + C14768) * C17238) *
                C50626 +
            ((C10778 * C3706 + C50842 * C3709 + C10777 * C3266 +
              C50921 * C3271) *
                 C50814 +
             (C10778 * C3703 + C50842 * C3707 + C10777 * C3262 +
              C50921 * C3265) *
                 C17239 +
             (C15971 + C15970) * C17233 + (C15969 + C15968) * C17238) *
                C50892) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C50907 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C50718) *
              C50950 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C17734 + C17735 + C17736 + C17737) * C17237) *
               C50682 * C50718 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C50907) *
              C50951 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C50682 * C50907 -
           (((C117 * C322 + C50778 * C333) * C50814 +
             (C117 * C303 + C50778 * C323) * C17239 + C686 * C17233 +
             C685 * C17238) *
                C17237 +
            (C17737 + C17736 + C17735 + C17734) * C17236 + C17739 * C17235) *
               C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C50907 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C50718) *
              C50950 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C50718 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C50907) *
              C50951 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C50682 * C50907 -
           ((C117 * C2517 + C50778 * C2521) * C19915 +
            (C117 * C2512 + C50778 * C2518) * C19920 + C2564 * C19914 +
            C2563 * C19919 + C368 * C19913 + C367 * C19918 + C361 * C19912 +
            C362 * C19917) *
               C50621 * C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C17238 +
              (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
              C2554 * C50814) *
                 C17235 +
             (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
                C50908 -
            (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
             (C3293 * C50814 + C3294 * C17239 +
              (C117 * C499 + C50778 * C516) * C17233 +
              (C117 * C486 + C50778 * C500) * C17238) *
                 C17235) *
                C50746) *
               C50907 +
           (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
              C3291 * C50814) *
                 C17235 +
             (C18087 + C18088 + C18089 + C18090) * C17236 +
             (C18091 + C18092 + C18093 + C18094) * C17237) *
                C50746 -
            (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
             (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
              C2553 * C17238) *
                 C17235) *
                C50908) *
               C50718) *
              C292 +
          ((((C17578 + C17577 + C17576 + C17575) * C17235 +
             (C17574 + C17573 + C17572 + C17571) * C17236 +
             (C17887 + C17888 + C17889 + C17890) * C17237) *
                C50746 -
            (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
             (C17244 + C17243 + C17242 + C17241) * C17235) *
                C50908) *
               C50907 +
           (((C17416 + C17415 + C17414 + C17413) * C17235 +
             (C17412 + C17411 + C17410 + C17409) * C17236 +
             (C17734 + C17735 + C17736 + C17737) * C17237) *
                C50908 -
            (((C117 * C1615 + C50778 * C1623) * C50814 +
              (C117 * C1611 + C50778 * C1616) * C17239 + C970 * C17233 +
              C969 * C17238) *
                 C17237 +
             (C18094 + C18093 + C18092 + C18091) * C17236 +
             (C18090 + C18089 + C18088 + C18087) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C19917 +
             (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
             C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
             C2559 * C19915) *
                C50621 * C50908 -
            (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
             C3293 * C19913 + C3294 * C19918 +
             (C117 * C499 + C50778 * C516) * C19912 +
             (C117 * C486 + C50778 * C500) * C19917) *
                C50621 * C50746) *
               C50907 +
           ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
             C4221 * C19919 + C4222 * C19914 +
             (C117 * C4209 + C50778 * C4213) * C19920 +
             (C117 * C4212 + C50778 * C4215) * C19915) *
                C50621 * C50746 -
            (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
             C2556 * C19913 + C2555 * C19918 + C2554 * C19912 +
             C2553 * C19917) *
                C50621 * C50908) *
               C50718) *
              C292 +
          (((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
             C2748 * C19919 + C2747 * C19914 + C3295 * C19920 +
             C3296 * C19915) *
                C50621 * C50746 -
            (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
             C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
                C50621 * C50908) *
               C50907 +
           ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
             C2558 * C19919 + C2557 * C19914 + C2561 * C19920 +
             C2562 * C19915) *
                C50621 * C50908 -
            ((C117 * C4210 + C50778 * C4214) * C19915 +
             (C117 * C4208 + C50778 * C4211) * C19920 + C3296 * C19914 +
             C3295 * C19919 + C2747 * C19913 + C2748 * C19918 + C966 * C19912 +
             C965 * C19917) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C289 -
           ((C17409 + C17410 + C17411 + C17412) * C17237 +
            (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C290 +
           ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C50682 * C291) *
              C292 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C360 * C17238 + C359 * C17233 + C369 * C17239 + C370 * C50814) *
                C17237) *
               C50682 * C290 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C289 -
           (((C117 * C1154 + C50778 * C1162) * C50814 +
             (C117 * C1150 + C50778 * C1155) * C17239 + C370 * C17233 +
             C369 * C17238) *
                C17237 +
            (C17424 + C17423 + C17422 + C17421) * C17236 +
            (C17420 + C17419 + C17418 + C17417) * C17235) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C17238 +
            (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
            C2554 * C50814) *
               C17235 +
           (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
              C50682 * C50666 * C113 -
          (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
           (C17244 + C17243 + C17242 + C17241) * C17235) *
              C50682 * C50666 * C114 +
          (C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
           (C17253 + C17254 + C17255 + C17256) * C17237) *
              C50682 * C50666 * C115 -
          (((C117 * C675 + C50778 * C677) * C50814 +
            (C117 * C674 + C50778 * C676) * C17239 + C177 * C17233 +
            C176 * C17238) *
               C17237 +
           (C17256 + C17255 + C17254 + C17253) * C17236 + C17262 * C17235) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C480 -
           ((C17571 + C17572 + C17573 + C17574) * C17237 +
            (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C17238 +
             (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
             C3720 * C50814) *
                C17235 +
            (C17579 + C17580 + C17581 + C17582) * C17236 +
            (C17583 + C17584 + C17585 + C17586) * C17237) *
               C482) *
              C50666 * C292 +
          (((C17578 + C17577 + C17576 + C17575) * C17235 +
            (C17574 + C17573 + C17572 + C17571) * C17236 +
            (C549 * C17238 + C548 * C17233 + C969 * C17239 + C970 * C50814) *
                C17237) *
               C481 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C480 -
           (((C117 * C1268 + C50778 * C1276) * C50814 +
             (C117 * C1264 + C50778 * C1269) * C17239 + C559 * C17233 +
             C558 * C17238) *
                C17237 +
            (C17586 + C17585 + C17584 + C17583) * C17236 +
            (C17582 + C17581 + C17580 + C17579) * C17235) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C50682 * C50666 * C113 -
          (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
           C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
              C50621 * C50682 * C50666 * C114 +
          (C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
           C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
              C50621 * C50682 * C50666 * C115 -
          ((C117 * C1154 + C50778 * C1162) * C19915 +
           (C117 * C1150 + C50778 * C1155) * C19920 + C370 * C19914 +
           C369 * C19919 + C359 * C19913 + C360 * C19918 + C173 * C19912 +
           C172 * C19917) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C289 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C290 +
           (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 +
            (C117 * C3543 + C50778 * C3547) * C19920 +
            (C117 * C3546 + C50778 * C3549) * C19915) *
               C50621 * C50682 * C291) *
              C292 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C290 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C289 -
           ((C117 * C3544 + C50778 * C3548) * C19915 +
            (C117 * C3542 + C50778 * C3545) * C19920 + C2562 * C19914 +
            C2561 * C19919 + C2557 * C19913 + C2558 * C19918 + C366 * C19912 +
            C365 * C19917) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C480 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C481 +
           ((C117 * C487 + C50778 * C501) * C19917 +
            (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
            C3720 * C19913 + C3721 * C19919 + C3722 * C19914 +
            (C117 * C3703 + C50778 * C3707) * C19920 +
            (C117 * C3706 + C50778 * C3709) * C19915) *
               C50621 * C482) *
              C50666 * C292 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C481 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C480 -
           ((C117 * C3704 + C50778 * C3708) * C19915 +
            (C117 * C3702 + C50778 * C3705) * C19920 + C2752 * C19914 +
            C2751 * C19919 + C2750 * C19913 + C2749 * C19918 + C555 * C19912 +
            C554 * C19917) *
               C50621 * C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50908 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C50666 * C50950 +
          (((C17578 + C17577 + C17576 + C17575) * C17235 +
            (C17574 + C17573 + C17572 + C17571) * C17236 +
            (C17887 + C17888 + C17889 + C17890) * C17237) *
               C50746 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50908) *
              C50666 * C50951 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C50908 -
           (((C117 * C945 + C50778 * C951) * C50814 +
             (C117 * C936 + C50778 * C946) * C17239 + C800 * C17233 +
             C799 * C17238) *
                C17237 +
            (C17890 + C17889 + C17888 + C17887) * C17236 + C17892 * C17235) *
               C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50908 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C50666 * C50950 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C50746 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50908) *
              C50666 * C50951 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C50908 -
           ((C117 * C3269 + C50778 * C3273) * C19915 +
            (C117 * C3264 + C50778 * C3270) * C19920 + C3066 * C19914 +
            C3065 * C19919 + C968 * C19913 + C967 * C19918 + C550 * C19912 +
            C551 * C19917) *
               C50621 * C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C17238 +
            (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
            C2554 * C50814) *
               C17235 +
           (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
              C50682 * C50666 * C113 -
          (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
           (C17244 + C17243 + C17242 + C17241) * C17235) *
              C50682 * C50666 * C114 +
          (C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
           (C17253 + C17254 + C17255 + C17256) * C17237) *
              C50682 * C50666 * C115 -
          (((C117 * C675 + C50778 * C677) * C50814 +
            (C117 * C674 + C50778 * C676) * C17239 + C177 * C17233 +
            C176 * C17238) *
               C17237 +
           (C17256 + C17255 + C17254 + C17253) * C17236 + C17262 * C17235) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C289 -
           ((C17409 + C17410 + C17411 + C17412) * C17237 +
            (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C290 +
           ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C50682 * C291) *
              C292 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C360 * C17238 + C359 * C17233 + C369 * C17239 + C370 * C50814) *
                C17237) *
               C50682 * C290 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C289 -
           (((C117 * C1154 + C50778 * C1162) * C50814 +
             (C117 * C1150 + C50778 * C1155) * C17239 + C370 * C17233 +
             C369 * C17238) *
                C17237 +
            (C17424 + C17423 + C17422 + C17421) * C17236 +
            (C17420 + C17419 + C17418 + C17417) * C17235) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C50682 * C50666 * C113 -
          (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
           C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
              C50621 * C50682 * C50666 * C114 +
          (C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
           C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
              C50621 * C50682 * C50666 * C115 -
          ((C117 * C1154 + C50778 * C1162) * C19915 +
           (C117 * C1150 + C50778 * C1155) * C19920 + C370 * C19914 +
           C369 * C19919 + C359 * C19913 + C360 * C19918 + C173 * C19912 +
           C172 * C19917) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C289 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C290 +
           (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 +
            (C117 * C3543 + C50778 * C3547) * C19920 +
            (C117 * C3546 + C50778 * C3549) * C19915) *
               C50621 * C50682 * C291) *
              C292 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C290 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C289 -
           ((C117 * C3544 + C50778 * C3548) * C19915 +
            (C117 * C3542 + C50778 * C3545) * C19920 + C2562 * C19914 +
            C2561 * C19919 + C2557 * C19913 + C2558 * C19918 + C366 * C19912 +
            C365 * C19917) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C50952 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C50953 +
           ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C50682 * C1380) *
              C50899 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C17734 + C17735 + C17736 + C17737) * C17237) *
               C50682 * C50953 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C50952 -
           (((C117 * C1154 + C50778 * C1162) * C50814 +
             (C117 * C1150 + C50778 * C1155) * C17239 + C370 * C17233 +
             C369 * C17238) *
                C17237 +
            (C17424 + C17423 + C17422 + C17421) * C17236 +
            (C17420 + C17419 + C17418 + C17417) * C17235) *
               C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C50952 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C50953 +
           (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
            C20617 * C19915) *
               C50621 * C50682 * C1380) *
              C50899 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C50953 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C50952 -
           ((C117 * C3544 + C50778 * C3548) * C19915 +
            (C117 * C3542 + C50778 * C3545) * C19920 + C2562 * C19914 +
            C2561 * C19919 + C2557 * C19913 + C2558 * C19918 + C366 * C19912 +
            C365 * C19917) *
               C50621 * C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50908 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C50952 +
          (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
             C3291 * C50814) *
                C17235 +
            (C18087 + C18088 + C18089 + C18090) * C17236 +
            (C18091 + C18092 + C18093 + C18094) * C17237) *
               C50746 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50908) *
              C50953 +
          (((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C50908 -
           (((C117 * C3269 + C50778 * C3273) * C50814 +
             (C117 * C3264 + C50778 * C3270) * C17239 + C3066 * C17233 +
             C3065 * C17238) *
                C17237 +
            (C3296 * C50814 + C3295 * C17239 + C2747 * C17233 +
             C2748 * C17238) *
                C17236 +
            (C4222 * C50814 + C4221 * C17239 + C3291 * C17233 +
             C3292 * C17238) *
                C17235) *
               C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50908 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C50952 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
            C21061 * C19915) *
               C50621 * C50746 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50908) *
              C50953 +
          ((C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
            C20617 * C19915) *
               C50621 * C50908 -
           ((C117 * C21052 + C50778 * C21054) * C19915 +
            (C117 * C21051 + C50778 * C21053) * C19920 + C21061 * C19914 +
            C21060 * C19919 + C4222 * C19913 + C4221 * C19918 + C3291 * C19912 +
            C3292 * C19917) *
               C50621 * C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C17238 +
            (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
            C2554 * C50814) *
               C17235 +
           (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
              C50682 * C1145 -
          (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
           (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 + C2553 * C17238) *
               C17235) *
              C50682 * C1146 +
          ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 + C2559 * C50814) *
               C17235 +
           (C17417 + C17418 + C17419 + C17420) * C17236 +
           (C17421 + C17422 + C17423 + C17424) * C17237) *
              C50682 * C1147 -
          (((C117 * C2517 + C50778 * C2521) * C50814 +
            (C117 * C2512 + C50778 * C2518) * C17239 + C2564 * C17233 +
            C2563 * C17238) *
               C17237 +
           (C2562 * C50814 + C2561 * C17239 + C2557 * C17233 + C2558 * C17238) *
               C17236 +
           (C3556 * C50814 + C3555 * C17239 + C2559 * C17233 + C2560 * C17238) *
               C17235) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C1074 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C50718) *
              C1076 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C17734 + C17735 + C17736 + C17737) * C17237) *
               C50682 * C50718 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C1074) *
              C1077 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C50682 * C1074 -
           (((C117 * C322 + C50778 * C333) * C50814 +
             (C117 * C303 + C50778 * C323) * C17239 + C686 * C17233 +
             C685 * C17238) *
                C17237 +
            (C17737 + C17736 + C17735 + C17734) * C17236 + C17739 * C17235) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C480 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C481 +
           (((C117 * C487 + C50778 * C501) * C17238 +
             (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
             C3720 * C50814) *
                C17235 +
            (C17579 + C17580 + C17581 + C17582) * C17236 +
            (C17583 + C17584 + C17585 + C17586) * C17237) *
               C482) *
              C1074 +
          (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
             C3291 * C50814) *
                C17235 +
            (C18087 + C18088 + C18089 + C18090) * C17236 +
            (C18091 + C18092 + C18093 + C18094) * C17237) *
               C481 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C480 -
           (((C117 * C2723 + C50778 * C2727) * C50814 +
             (C117 * C2718 + C50778 * C2724) * C17239 + C8415 * C17233 +
             C8414 * C17238) *
                C17237 +
            (C2752 * C50814 + C2751 * C17239 + C2750 * C17233 +
             C2749 * C17238) *
                C17236 +
            (C3722 * C50814 + C3721 * C17239 + C3720 * C17233 +
             C3719 * C17238) *
                C17235) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C1074 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C50718) *
              C1076 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C50718 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C50682 * C1074 -
           ((C117 * C2517 + C50778 * C2521) * C19915 +
            (C117 * C2512 + C50778 * C2518) * C19920 + C2564 * C19914 +
            C2563 * C19919 + C368 * C19913 + C367 * C19918 + C361 * C19912 +
            C362 * C19917) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C50682 * C1145 -
          (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
           C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
              C50621 * C50682 * C1146 +
          (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
           C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
           C20617 * C19915) *
              C50621 * C50682 * C1147 -
          ((C117 * C20608 + C50778 * C20610) * C19915 +
           (C117 * C20607 + C50778 * C20609) * C19920 + C20617 * C19914 +
           C20616 * C19919 + C3556 * C19913 + C3555 * C19918 + C2559 * C19912 +
           C2560 * C19917) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C480 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C481 +
           ((C117 * C487 + C50778 * C501) * C19917 +
            (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
            C3720 * C19913 + C3721 * C19919 + C3722 * C19914 + C20724 * C19920 +
            C20725 * C19915) *
               C50621 * C482) *
              C1074 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 +
            (C117 * C4209 + C50778 * C4213) * C19920 +
            (C117 * C4212 + C50778 * C4215) * C19915) *
               C50621 * C481 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C480 -
           ((C117 * C20716 + C50778 * C20718) * C19915 +
            (C117 * C20715 + C50778 * C20717) * C19920 + C20725 * C19914 +
            C20724 * C19919 + C3722 * C19913 + C3721 * C19918 + C3720 * C19912 +
            C3719 * C19917) *
               C50621 * C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C17238 +
              (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
              C2554 * C50814) *
                 C17235 +
             (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
                C50908 -
            (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
             (C3293 * C50814 + C3294 * C17239 +
              (C117 * C499 + C50778 * C516) * C17233 +
              (C117 * C486 + C50778 * C500) * C17238) *
                 C17235) *
                C50746) *
               C1074 +
           (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
              C3291 * C50814) *
                 C17235 +
             (C18087 + C18088 + C18089 + C18090) * C17236 +
             (C18091 + C18092 + C18093 + C18094) * C17237) *
                C50746 -
            (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
             (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
              C2553 * C17238) *
                 C17235) *
                C50908) *
               C50718) *
              C50899 +
          ((((C17578 + C17577 + C17576 + C17575) * C17235 +
             (C17574 + C17573 + C17572 + C17571) * C17236 +
             (C17887 + C17888 + C17889 + C17890) * C17237) *
                C50746 -
            (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
             (C17244 + C17243 + C17242 + C17241) * C17235) *
                C50908) *
               C1074 +
           (((C17416 + C17415 + C17414 + C17413) * C17235 +
             (C17412 + C17411 + C17410 + C17409) * C17236 +
             (C17734 + C17735 + C17736 + C17737) * C17237) *
                C50908 -
            (((C117 * C1615 + C50778 * C1623) * C50814 +
              (C117 * C1611 + C50778 * C1616) * C17239 + C970 * C17233 +
              C969 * C17238) *
                 C17237 +
             (C18094 + C18093 + C18092 + C18091) * C17236 +
             (C18090 + C18089 + C18088 + C18087) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C19917 +
             (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
             C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
             C2559 * C19915) *
                C50621 * C50908 -
            (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
             C3293 * C19913 + C3294 * C19918 +
             (C117 * C499 + C50778 * C516) * C19912 +
             (C117 * C486 + C50778 * C500) * C19917) *
                C50621 * C50746) *
               C1074 +
           ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
             C4221 * C19919 + C4222 * C19914 +
             (C117 * C4209 + C50778 * C4213) * C19920 +
             (C117 * C4212 + C50778 * C4215) * C19915) *
                C50621 * C50746 -
            (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
             C2556 * C19913 + C2555 * C19918 + C2554 * C19912 +
             C2553 * C19917) *
                C50621 * C50908) *
               C50718) *
              C50899 +
          (((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
             C2748 * C19919 + C2747 * C19914 + C3295 * C19920 +
             C3296 * C19915) *
                C50621 * C50746 -
            (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
             C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
                C50621 * C50908) *
               C1074 +
           ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
             C2558 * C19919 + C2557 * C19914 + C2561 * C19920 +
             C2562 * C19915) *
                C50621 * C50908 -
            ((C117 * C4210 + C50778 * C4214) * C19915 +
             (C117 * C4208 + C50778 * C4211) * C19920 + C3296 * C19914 +
             C3295 * C19919 + C2747 * C19913 + C2748 * C19918 + C966 * C19912 +
             C965 * C19917) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50682 * C1074 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50682 * C50718) *
              C1076 +
          (((C17416 + C17415 + C17414 + C17413) * C17235 +
            (C17412 + C17411 + C17410 + C17409) * C17236 +
            (C17734 + C17735 + C17736 + C17737) * C17237) *
               C50682 * C50718 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50682 * C1074) *
              C1077 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C50682 * C1074 -
           (((C117 * C322 + C50778 * C333) * C50814 +
             (C117 * C303 + C50778 * C323) * C17239 + C686 * C17233 +
             C685 * C17238) *
                C17237 +
            (C17737 + C17736 + C17735 + C17734) * C17236 + C17739 * C17235) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C17238 +
            (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
            C2554 * C50814) *
               C17235 +
           (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
              C50682 * C1145 -
          (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
           (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 + C2553 * C17238) *
               C17235) *
              C50682 * C1146 +
          ((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 + C2559 * C50814) *
               C17235 +
           (C17417 + C17418 + C17419 + C17420) * C17236 +
           (C17421 + C17422 + C17423 + C17424) * C17237) *
              C50682 * C1147 -
          (((C117 * C2517 + C50778 * C2521) * C50814 +
            (C117 * C2512 + C50778 * C2518) * C17239 + C2564 * C17233 +
            C2563 * C17238) *
               C17237 +
           (C2562 * C50814 + C2561 * C17239 + C2557 * C17233 + C2558 * C17238) *
               C17236 +
           (C3556 * C50814 + C3555 * C17239 + C2559 * C17233 + C2560 * C17238) *
               C17235) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50682 * C1074 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50682 * C50718) *
              C1076 +
          ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
            C2558 * C19919 + C2557 * C19914 + C2561 * C19920 + C2562 * C19915) *
               C50621 * C50682 * C50718 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C50682 * C1074 -
           ((C117 * C2517 + C50778 * C2521) * C19915 +
            (C117 * C2512 + C50778 * C2518) * C19920 + C2564 * C19914 +
            C2563 * C19919 + C368 * C19913 + C367 * C19918 + C361 * C19912 +
            C362 * C19917) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C50682 * C1145 -
          (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
           C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
              C50621 * C50682 * C1146 +
          (C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
           C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
           C20617 * C19915) *
              C50621 * C50682 * C1147 -
          ((C117 * C20608 + C50778 * C20610) * C19915 +
           (C117 * C20607 + C50778 * C20609) * C19920 + C20617 * C19914 +
           C20616 * C19919 + C3556 * C19913 + C3555 * C19918 + C2559 * C19912 +
           C2560 * C19917) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50778 * C126) * C17238 +
              (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
              C2554 * C50814) *
                 C17235 +
             (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
                C1725 -
            (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
             (C3293 * C50814 + C3294 * C17239 +
              (C117 * C499 + C50778 * C516) * C17233 +
              (C117 * C486 + C50778 * C500) * C17238) *
                 C17235) *
                C50746) *
               C50907 +
           (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
              C3291 * C50814) *
                 C17235 +
             (C18087 + C18088 + C18089 + C18090) * C17236 +
             (C18091 + C18092 + C18093 + C18094) * C17237) *
                C50746 -
            (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
             (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
              C2553 * C17238) *
                 C17235) *
                C1725) *
               C50718) *
              C50899 +
          ((((C17578 + C17577 + C17576 + C17575) * C17235 +
             (C17574 + C17573 + C17572 + C17571) * C17236 +
             (C17887 + C17888 + C17889 + C17890) * C17237) *
                C50746 -
            (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
             (C17244 + C17243 + C17242 + C17241) * C17235) *
                C1725) *
               C50907 +
           (((C17416 + C17415 + C17414 + C17413) * C17235 +
             (C17412 + C17411 + C17410 + C17409) * C17236 +
             (C17734 + C17735 + C17736 + C17737) * C17237) *
                C1725 -
            (((C117 * C1615 + C50778 * C1623) * C50814 +
              (C117 * C1611 + C50778 * C1616) * C17239 + C970 * C17233 +
              C969 * C17238) *
                 C17237 +
             (C18094 + C18093 + C18092 + C18091) * C17236 +
             (C18090 + C18089 + C18088 + C18087) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C19917 +
             (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
             C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
             C2559 * C19915) *
                C50621 * C1725 -
            (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
             C3293 * C19913 + C3294 * C19918 +
             (C117 * C499 + C50778 * C516) * C19912 +
             (C117 * C486 + C50778 * C500) * C19917) *
                C50621 * C50746) *
               C50907 +
           ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
             C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
             C21061 * C19915) *
                C50621 * C50746 -
            (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
             C2556 * C19913 + C2555 * C19918 + C2554 * C19912 +
             C2553 * C19917) *
                C50621 * C1725) *
               C50718) *
              C50899 +
          (((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
             C2748 * C19919 + C2747 * C19914 + C3295 * C19920 +
             C3296 * C19915) *
                C50621 * C50746 -
            (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
             C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
                C50621 * C1725) *
               C50907 +
           ((C364 * C19917 + C363 * C19912 + C365 * C19918 + C366 * C19913 +
             C2558 * C19919 + C2557 * C19914 + C2561 * C19920 +
             C2562 * C19915) *
                C50621 * C1725 -
            ((C117 * C4210 + C50778 * C4214) * C19915 +
             (C117 * C4208 + C50778 * C4211) * C19920 + C3296 * C19914 +
             C3295 * C19919 + C2747 * C19913 + C2748 * C19918 + C966 * C19912 +
             C965 * C19917) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50954 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50955 +
           (((C117 * C487 + C50778 * C501) * C17238 +
             (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
             C3720 * C50814) *
                C17235 +
            (C17579 + C17580 + C17581 + C17582) * C17236 +
            (C17583 + C17584 + C17585 + C17586) * C17237) *
               C2141) *
              C50907 +
          (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
             C3291 * C50814) *
                C17235 +
            (C18087 + C18088 + C18089 + C18090) * C17236 +
            (C18091 + C18092 + C18093 + C18094) * C17237) *
               C50955 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C50954 -
           (((C117 * C2723 + C50778 * C2727) * C50814 +
             (C117 * C2718 + C50778 * C2724) * C17239 + C8415 * C17233 +
             C8414 * C17238) *
                C17237 +
            (C2752 * C50814 + C2751 * C17239 + C2750 * C17233 +
             C2749 * C17238) *
                C17236 +
            (C3722 * C50814 + C3721 * C17239 + C3720 * C17233 +
             C3719 * C17238) *
                C17235) *
               C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50954 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50955 +
           ((C117 * C487 + C50778 * C501) * C19917 +
            (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
            C3720 * C19913 + C3721 * C19919 + C3722 * C19914 + C20724 * C19920 +
            C20725 * C19915) *
               C50621 * C2141) *
              C50907 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
            C21061 * C19915) *
               C50621 * C50955 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C50954 -
           ((C117 * C20716 + C50778 * C20718) * C19915 +
            (C117 * C20715 + C50778 * C20717) * C19920 + C20725 * C19914 +
            C20724 * C19919 + C3722 * C19913 + C3721 * C19918 + C3720 * C19912 +
            C3719 * C19917) *
               C50621 * C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C1725 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C289 +
          (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
             C3291 * C50814) *
                C17235 +
            (C18087 + C18088 + C18089 + C18090) * C17236 +
            (C18091 + C18092 + C18093 + C18094) * C17237) *
               C50746 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C1725) *
              C290 +
          (((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C1725 -
           (((C117 * C3269 + C50778 * C3273) * C50814 +
             (C117 * C3264 + C50778 * C3270) * C17239 + C3066 * C17233 +
             C3065 * C17238) *
                C17237 +
            (C3296 * C50814 + C3295 * C17239 + C2747 * C17233 +
             C2748 * C17238) *
                C17236 +
            (C4222 * C50814 + C4221 * C17239 + C3291 * C17233 +
             C3292 * C17238) *
                C17235) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C1725 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C50666 * C1076 +
          (((C17578 + C17577 + C17576 + C17575) * C17235 +
            (C17574 + C17573 + C17572 + C17571) * C17236 +
            (C17887 + C17888 + C17889 + C17890) * C17237) *
               C50746 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C1725) *
              C50666 * C1077 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C1725 -
           (((C117 * C945 + C50778 * C951) * C50814 +
             (C117 * C936 + C50778 * C946) * C17239 + C800 * C17233 +
             C799 * C17238) *
                C17237 +
            (C17890 + C17889 + C17888 + C17887) * C17236 + C17892 * C17235) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C17238 +
            (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
            C2554 * C50814) *
               C17235 +
           (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
              C1891 -
          (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
           (C3293 * C50814 + C3294 * C17239 +
            (C117 * C499 + C50778 * C516) * C17233 +
            (C117 * C486 + C50778 * C500) * C17238) *
               C17235) *
              C1892 +
          (((C117 * C487 + C50778 * C501) * C17238 +
            (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
            C3720 * C50814) *
               C17235 +
           (C17579 + C17580 + C17581 + C17582) * C17236 +
           (C17583 + C17584 + C17585 + C17586) * C17237) *
              C1893 -
          (((C117 * C6171 + C50778 * C6173) * C50814 +
            (C117 * C6170 + C50778 * C6172) * C17239 +
            (C117 * C1901 + C50778 * C1908) * C17233 +
            (C117 * C1896 + C50778 * C1902) * C17238) *
               C17237 +
           ((C117 * C4618 + C50778 * C4625) * C50814 +
            (C117 * C4613 + C50778 * C4619) * C17239 +
            (C117 * C1903 + C50778 * C1909) * C17233 +
            (C117 * C1897 + C50778 * C1904) * C17238) *
               C17236 +
           ((C117 * C4622 + C50778 * C4627) * C50814 +
            (C117 * C4615 + C50778 * C4623) * C17239 +
            (C117 * C1905 + C50778 * C1910) * C17233 +
            (C117 * C1898 + C50778 * C1906) * C17238) *
               C17235) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C1725 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C50666 * C1076 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C50746 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C1725 -
           ((C117 * C3269 + C50778 * C3273) * C19915 +
            (C117 * C3264 + C50778 * C3270) * C19920 + C3066 * C19914 +
            C3065 * C19919 + C968 * C19913 + C967 * C19918 + C550 * C19912 +
            C551 * C19917) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C1725 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C289 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
            C21061 * C19915) *
               C50621 * C50746 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C1725) *
              C290 +
          ((C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
            C20617 * C19915) *
               C50621 * C1725 -
           ((C117 * C21052 + C50778 * C21054) * C19915 +
            (C117 * C21051 + C50778 * C21053) * C19920 + C21061 * C19914 +
            C21060 * C19919 + C4222 * C19913 + C4221 * C19918 + C3291 * C19912 +
            C3292 * C19917) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50778 * C126) * C19917 +
           (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
           C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
           C2559 * C19915) *
              C50621 * C1891 -
          (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
           C3293 * C19913 + C3294 * C19918 +
           (C117 * C499 + C50778 * C516) * C19912 +
           (C117 * C486 + C50778 * C500) * C19917) *
              C50621 * C1892 +
          ((C117 * C487 + C50778 * C501) * C19917 +
           (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
           C3720 * C19913 + C3721 * C19919 + C3722 * C19914 + C20724 * C19920 +
           C20725 * C19915) *
              C50621 * C1893 -
          ((C117 * C21324 + C50778 * C21326) * C19915 +
           (C117 * C21323 + C50778 * C21325) * C19920 +
           (C117 * C4620 + C50778 * C4626) * C19914 +
           (C117 * C4614 + C50778 * C4621) * C19919 +
           (C117 * C4622 + C50778 * C4627) * C19913 +
           (C117 * C4615 + C50778 * C4623) * C19918 +
           (C117 * C1905 + C50778 * C1910) * C19912 +
           (C117 * C1898 + C50778 * C1906) * C19917) *
              C50621 * C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C50954 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50955 +
           (((C117 * C487 + C50778 * C501) * C17238 +
             (C117 * C502 + C50778 * C517) * C17233 + C3719 * C17239 +
             C3720 * C50814) *
                C17235 +
            (C17579 + C17580 + C17581 + C17582) * C17236 +
            (C17583 + C17584 + C17585 + C17586) * C17237) *
               C2141) *
              C50666 * C50899 +
          (((C17578 + C17577 + C17576 + C17575) * C17235 +
            (C17574 + C17573 + C17572 + C17571) * C17236 +
            (C17887 + C17888 + C17889 + C17890) * C17237) *
               C50955 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C50954 -
           (((C117 * C1268 + C50778 * C1276) * C50814 +
             (C117 * C1264 + C50778 * C1269) * C17239 + C559 * C17233 +
             C558 * C17238) *
                C17237 +
            (C17586 + C17585 + C17584 + C17583) * C17236 +
            (C17582 + C17581 + C17580 + C17579) * C17235) *
               C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C50954 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50955 +
           ((C117 * C487 + C50778 * C501) * C19917 +
            (C117 * C502 + C50778 * C517) * C19912 + C3719 * C19918 +
            C3720 * C19913 + C3721 * C19919 + C3722 * C19914 + C20724 * C19920 +
            C20725 * C19915) *
               C50621 * C2141) *
              C50666 * C50899 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C50955 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C50954 -
           ((C117 * C3704 + C50778 * C3708) * C19915 +
            (C117 * C3702 + C50778 * C3705) * C19920 + C2752 * C19914 +
            C2751 * C19919 + C2750 * C19913 + C2749 * C19918 + C555 * C19912 +
            C554 * C19917) *
               C50621 * C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C1725 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C50666 * C1076 +
          (((C17578 + C17577 + C17576 + C17575) * C17235 +
            (C17574 + C17573 + C17572 + C17571) * C17236 +
            (C17887 + C17888 + C17889 + C17890) * C17237) *
               C50746 -
           (C17262 * C17237 + (C17248 + C17247 + C17246 + C17245) * C17236 +
            (C17244 + C17243 + C17242 + C17241) * C17235) *
               C1725) *
              C50666 * C1077 +
          ((C17261 * C17235 + (C17252 + C17251 + C17250 + C17249) * C17236 +
            (C17253 + C17254 + C17255 + C17256) * C17237) *
               C1725 -
           (((C117 * C945 + C50778 * C951) * C50814 +
             (C117 * C936 + C50778 * C946) * C17239 + C800 * C17233 +
             C799 * C17238) *
                C17237 +
            (C17890 + C17889 + C17888 + C17887) * C17236 + C17892 * C17235) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50778 * C126) * C17238 +
             (C117 * C127 + C50778 * C140) * C17233 + C2553 * C17239 +
             C2554 * C50814) *
                C17235 +
            (C17241 + C17242 + C17243 + C17244) * C17236 + C17261 * C17237) *
               C1725 -
           (C17892 * C17237 + (C17575 + C17576 + C17577 + C17578) * C17236 +
            (C3293 * C50814 + C3294 * C17239 +
             (C117 * C499 + C50778 * C516) * C17233 +
             (C117 * C486 + C50778 * C500) * C17238) *
                C17235) *
               C50746) *
              C289 +
          (((C3294 * C17238 + C3293 * C17233 + C3292 * C17239 +
             C3291 * C50814) *
                C17235 +
            (C18087 + C18088 + C18089 + C18090) * C17236 +
            (C18091 + C18092 + C18093 + C18094) * C17237) *
               C50746 -
           (C17739 * C17237 + (C17413 + C17414 + C17415 + C17416) * C17236 +
            (C2556 * C50814 + C2555 * C17239 + C2554 * C17233 +
             C2553 * C17238) *
                C17235) *
               C1725) *
              C290 +
          (((C2555 * C17238 + C2556 * C17233 + C2560 * C17239 +
             C2559 * C50814) *
                C17235 +
            (C17417 + C17418 + C17419 + C17420) * C17236 +
            (C17421 + C17422 + C17423 + C17424) * C17237) *
               C1725 -
           (((C117 * C3269 + C50778 * C3273) * C50814 +
             (C117 * C3264 + C50778 * C3270) * C17239 + C3066 * C17233 +
             C3065 * C17238) *
                C17237 +
            (C3296 * C50814 + C3295 * C17239 + C2747 * C17233 +
             C2748 * C17238) *
                C17236 +
            (C4222 * C50814 + C4221 * C17239 + C3291 * C17233 +
             C3292 * C17238) *
                C17235) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C1725 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C50666 * C1076 +
          ((C553 * C19917 + C552 * C19912 + C965 * C19918 + C966 * C19913 +
            C2748 * C19919 + C2747 * C19914 + C3295 * C19920 + C3296 * C19915) *
               C50621 * C50746 -
           (C2557 * C19915 + C2558 * C19920 + C366 * C19914 + C365 * C19919 +
            C363 * C19913 + C364 * C19918 + C169 * C19912 + C168 * C19917) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C170 * C19917 + C171 * C19912 + C362 * C19918 + C361 * C19913 +
            C367 * C19919 + C368 * C19914 + C2563 * C19920 + C2564 * C19915) *
               C50621 * C1725 -
           ((C117 * C3269 + C50778 * C3273) * C19915 +
            (C117 * C3264 + C50778 * C3270) * C19920 + C3066 * C19914 +
            C3065 * C19919 + C968 * C19913 + C967 * C19918 + C550 * C19912 +
            C551 * C19917) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50778 * C126) * C19917 +
            (C117 * C127 + C50778 * C140) * C19912 + C2553 * C19918 +
            C2554 * C19913 + C2555 * C19919 + C2556 * C19914 + C2560 * C19920 +
            C2559 * C19915) *
               C50621 * C1725 -
           (C4222 * C19915 + C4221 * C19920 + C3291 * C19914 + C3292 * C19919 +
            C3293 * C19913 + C3294 * C19918 +
            (C117 * C499 + C50778 * C516) * C19912 +
            (C117 * C486 + C50778 * C500) * C19917) *
               C50621 * C50746) *
              C289 +
          ((C3294 * C19917 + C3293 * C19912 + C3292 * C19918 + C3291 * C19913 +
            C4221 * C19919 + C4222 * C19914 + C21060 * C19920 +
            C21061 * C19915) *
               C50621 * C50746 -
           (C3556 * C19915 + C3555 * C19920 + C2559 * C19914 + C2560 * C19919 +
            C2556 * C19913 + C2555 * C19918 + C2554 * C19912 + C2553 * C19917) *
               C50621 * C1725) *
              C290 +
          ((C2555 * C19917 + C2556 * C19912 + C2560 * C19918 + C2559 * C19913 +
            C3555 * C19919 + C3556 * C19914 + C20616 * C19920 +
            C20617 * C19915) *
               C50621 * C1725 -
           ((C117 * C21052 + C50778 * C21054) * C19915 +
            (C117 * C21051 + C50778 * C21053) * C19920 + C21061 * C19914 +
            C21060 * C19919 + C4222 * C19913 + C4221 * C19918 + C3291 * C19912 +
            C3292 * C19917) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50682 * C50907 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C50682 * C50718) *
              C50950 +
          (((C40968 * C8063 + C40969 * C50920 + C40972 * C8064 +
             C40973 * C50814) *
                C50892 +
            (C41374 * C8063 + C41375 * C50920 + (C33606 + C33607) * C8064 +
             (C33608 + C33609) * C50814) *
                C50626) *
               C50682 * C50718 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C50682 * C50907) *
              C50951 +
          (((C33406 * C8063 + C33407 * C50920 + C41374 * C8064 +
             C41375 * C50814) *
                C50892 +
            ((C33401 + C33400) * C8063 + (C33399 + C33398) * C50920 +
             (C33962 + C33963) * C8064 + (C33964 + C33965) * C50814) *
                C50626) *
               C50682 * C50907 -
           (((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
                 C50814 +
             (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
                 C8064 +
             (C33965 + C33964) * C50920 + (C33963 + C33962) * C8063) *
                C50626 +
            ((C33609 + C33608) * C50814 + (C33607 + C33606) * C8064 +
             C33950 * C50920 + C33951 * C8063) *
                C50892) *
               C50682 * C50718) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                  C8063 +
              (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                  C50920 +
              (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                 C50892 +
             ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
              C40968 * C8064 + C40969 * C50814) *
                 C50626) *
                C50908 -
            ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
              (C33794 + C33795) * C8063) *
                 C50626 +
             ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
              (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                  C50920 +
              (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                  C8063) *
                 C50892) *
                C50746) *
               C50907 +
           ((((C37059 + C37058) * C8063 + (C37057 + C37056) * C50920 +
              (C37055 + C37054) * C8064 + (C37053 + C37052) * C50814) *
                 C50892 +
             (C41830 * C8063 + C41831 * C50920 + (C37060 + C37061) * C8064 +
              (C37062 + C37063) * C50814) *
                 C50626) *
                C50746 -
            ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
              C40971 * C8063) *
                 C50626 +
             ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
              (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                 C50892) *
                C50908) *
               C50718) *
              C292 +
          (((((C33795 + C33794) * C8063 + (C33793 + C33792) * C50920 +
              C41830 * C8064 + C41831 * C50814) *
                 C50892 +
             ((C33791 + C33790) * C8063 + (C33789 + C33788) * C50920 +
              (C34344 + C34345) * C8064 + (C34346 + C34347) * C50814) *
                 C50626) *
                C50746 -
            ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
              (C33395 + C33394) * C8063) *
                 C50626 +
             (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
              (C33391 + C33390) * C8063) *
                 C50892) *
                C50908) *
               C50907 +
           (((C40968 * C8063 + C40969 * C50920 + C40972 * C8064 +
              C40973 * C50814) *
                 C50892 +
             (C41374 * C8063 + C41375 * C50920 + (C33606 + C33607) * C8064 +
              (C33608 + C33609) * C50814) *
                 C50626) *
                C50908 -
            (((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
               C33353 * C1624) *
                  C50814 +
              (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
               C33353 * C1618) *
                  C8064 +
              (C34347 + C34346) * C50920 + (C34345 + C34344) * C8063) *
                 C50626 +
             ((C37063 + C37062) * C50814 + (C37061 + C37060) * C8064 +
              C41828 * C50920 + C41829 * C8063) *
                 C50892) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50682 * C289 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C50682 * C290 +
           ((C36394 * C8063 + C36395 * C50920 + (C36389 + C36388) * C8064 +
             (C36387 + C36386) * C50814) *
                C50892 +
            (C40972 * C8063 + C40973 * C50920 + (C36390 + C36391) * C8064 +
             (C36392 + C36393) * C50814) *
                C50626) *
               C50682 * C291) *
              C292 +
          (((C40968 * C8063 + C40969 * C50920 + C40972 * C8064 +
             C40973 * C50814) *
                C50892 +
            ((C33597 + C33596) * C8063 + (C33595 + C33594) * C50920 +
             (C33606 + C33607) * C8064 + (C33608 + C33609) * C50814) *
                C50626) *
               C50682 * C290 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C50682 * C289 -
           (((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
              C33353 * C1163) *
                 C50814 +
             (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
              C33353 * C1157) *
                 C8064 +
             (C33609 + C33608) * C50920 + (C33607 + C33606) * C8063) *
                C50626 +
            ((C36393 + C36392) * C50814 + (C36391 + C36390) * C8064 +
             C36376 * C50920 + C36377 * C8063) *
                C50892) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C8063 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50920 +
            (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
               C50892 +
           ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
            (C33601 + C33600) * C8064 + (C33599 + C33598) * C50814) *
               C50626) *
              C50682 * C50666 * C113 -
          ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
            (C33395 + C33394) * C8063) *
               C50626 +
           ((C33598 + C33599) * C50814 + (C33600 + C33601) * C8064 +
            (C33393 + C33392) * C50920 + (C33391 + C33390) * C8063) *
               C50892) *
              C50682 * C50666 * C114 +
          ((C33406 * C8063 + C33407 * C50920 + (C33597 + C33596) * C8064 +
            (C33595 + C33594) * C50814) *
               C50892 +
           ((C33401 + C33400) * C8063 + (C33399 + C33398) * C50920 +
            (C33962 + C33963) * C8064 + (C33964 + C33965) * C50814) *
               C50626) *
              C50682 * C50666 * C115 -
          (((C33356 * C945 + C50842 * C951 + C33355 * C321 + C33353 * C332) *
                C50814 +
            (C33356 * C936 + C50842 * C946 + C33355 * C302 + C33353 * C320) *
                C8064 +
            (C33405 + C33404) * C50920 + (C33403 + C33402) * C8063) *
               C50626 +
           ((C33965 + C33964) * C50814 + (C33963 + C33962) * C8064 +
            C33408 * C50920 + C33409 * C8063) *
               C50892) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C480 -
           (((C34343 + C34342) * C50814 + (C34341 + C34340) * C8064 +
             (C33792 + C33793) * C50920 + (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C481 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C8063 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50920 +
             (C37484 + C37485) * C8064 + (C37486 + C37487) * C50814) *
                C50892 +
            ((C33796 + C33797) * C8063 + (C33798 + C33799) * C50920 +
             (C41176 + C41177) * C8064 + (C41178 + C41179) * C50814) *
                C50626) *
               C482) *
              C50666 * C292 +
          ((((C33795 + C33794) * C8063 + (C33793 + C33792) * C50920 +
             (C34340 + C34341) * C8064 + (C34342 + C34343) * C50814) *
                C50892 +
            ((C33791 + C33790) * C8063 + (C33789 + C33788) * C50920 +
             (C34344 + C34345) * C8064 + (C34346 + C34347) * C50814) *
                C50626) *
               C481 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C480 -
           (((C33356 * C6171 + C50842 * C6173 + C33355 * C1270 +
              C33353 * C1277) *
                 C50814 +
             (C33356 * C6170 + C50842 * C6172 + C33355 * C1265 +
              C33353 * C1271) *
                 C8064 +
             (C33803 + C33802) * C50920 + (C33801 + C33800) * C8063) *
                C50626 +
            ((C41179 + C41178) * C50814 + (C41177 + C41176) * C8064 +
             (C33799 + C33798) * C50920 + (C33797 + C33796) * C8063) *
                C50892) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50908 -
           (((C34343 + C34342) * C50814 + (C34341 + C34340) * C8064 +
             (C33792 + C33793) * C50920 + (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C50746) *
              C50666 * C50950 +
          ((((C33795 + C33794) * C8063 + (C33793 + C33792) * C50920 +
             (C34340 + C34341) * C8064 + (C34342 + C34343) * C50814) *
                C50892 +
            ((C33791 + C33790) * C8063 + (C33789 + C33788) * C50920 +
             (C34344 + C34345) * C8064 + (C34346 + C34347) * C50814) *
                C50626) *
               C50746 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C50908) *
              C50666 * C50951 +
          (((C33406 * C8063 + C33407 * C50920 + C41374 * C8064 +
             C41375 * C50814) *
                C50892 +
            ((C33401 + C33400) * C8063 + (C33399 + C33398) * C50920 +
             (C33962 + C33963) * C8064 + (C33964 + C33965) * C50814) *
                C50626) *
               C50908 -
           (((C33356 * C1268 + C50842 * C1276 + C33355 * C944 + C33353 * C950) *
                 C50814 +
             (C33356 * C1264 + C50842 * C1269 + C33355 * C935 + C33353 * C943) *
                 C8064 +
             (C34128 + C34127) * C50920 + (C34126 + C34125) * C8063) *
                C50626 +
            ((C34347 + C34346) * C50814 + (C34345 + C34344) * C8064 +
             C34113 * C50920 + C34114 * C8063) *
                C50892) *
               C50746) *
              C50666 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C8063 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50920 +
            (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
               C50892 +
           ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
            (C33601 + C33600) * C8064 + (C33599 + C33598) * C50814) *
               C50626) *
              C50682 * C50666 * C113 -
          ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
            (C33395 + C33394) * C8063) *
               C50626 +
           ((C33598 + C33599) * C50814 + (C33600 + C33601) * C8064 +
            (C33393 + C33392) * C50920 + (C33391 + C33390) * C8063) *
               C50892) *
              C50682 * C50666 * C114 +
          ((C33406 * C8063 + C33407 * C50920 + (C33597 + C33596) * C8064 +
            (C33595 + C33594) * C50814) *
               C50892 +
           ((C33401 + C33400) * C8063 + (C33399 + C33398) * C50920 +
            (C33962 + C33963) * C8064 + (C33964 + C33965) * C50814) *
               C50626) *
              C50682 * C50666 * C115 -
          (((C33356 * C945 + C50842 * C951 + C33355 * C321 + C33353 * C332) *
                C50814 +
            (C33356 * C936 + C50842 * C946 + C33355 * C302 + C33353 * C320) *
                C8064 +
            (C33405 + C33404) * C50920 + (C33403 + C33402) * C8063) *
               C50626 +
           ((C33965 + C33964) * C50814 + (C33963 + C33962) * C8064 +
            C33408 * C50920 + C33409 * C8063) *
               C50892) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50682 * C289 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C50682 * C290 +
           ((C36394 * C8063 + C36395 * C50920 + (C36389 + C36388) * C8064 +
             (C36387 + C36386) * C50814) *
                C50892 +
            (C40972 * C8063 + C40973 * C50920 + (C36390 + C36391) * C8064 +
             (C36392 + C36393) * C50814) *
                C50626) *
               C50682 * C291) *
              C292 +
          (((C40968 * C8063 + C40969 * C50920 + C40972 * C8064 +
             C40973 * C50814) *
                C50892 +
            ((C33597 + C33596) * C8063 + (C33595 + C33594) * C50920 +
             (C33606 + C33607) * C8064 + (C33608 + C33609) * C50814) *
                C50626) *
               C50682 * C290 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C50682 * C289 -
           (((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
              C33353 * C1163) *
                 C50814 +
             (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
              C33353 * C1157) *
                 C8064 +
             (C33609 + C33608) * C50920 + (C33607 + C33606) * C8063) *
                C50626 +
            ((C36393 + C36392) * C50814 + (C36391 + C36390) * C8064 +
             C36376 * C50920 + C36377 * C8063) *
                C50892) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50682 * C50952 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C50682 * C50953 +
           ((C36394 * C8063 + C36395 * C50920 + (C36389 + C36388) * C8064 +
             (C36387 + C36386) * C50814) *
                C50892 +
            (C40972 * C8063 + C40973 * C50920 + (C36390 + C36391) * C8064 +
             (C36392 + C36393) * C50814) *
                C50626) *
               C50682 * C1380) *
              C50899 +
          (((C40968 * C8063 + C40969 * C50920 + C40972 * C8064 +
             C40973 * C50814) *
                C50892 +
            (C41374 * C8063 + C41375 * C50920 + (C33606 + C33607) * C8064 +
             (C33608 + C33609) * C50814) *
                C50626) *
               C50682 * C50953 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C50682 * C50952 -
           (((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
              C33353 * C1163) *
                 C50814 +
             (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
              C33353 * C1157) *
                 C8064 +
             (C33609 + C33608) * C50920 + (C33607 + C33606) * C8063) *
                C50626 +
            ((C36393 + C36392) * C50814 + (C36391 + C36390) * C8064 +
             C36376 * C50920 + C36377 * C8063) *
                C50892) *
               C50682 * C1380) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50908 -
           ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
             (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C50746) *
              C50952 +
          ((((C37059 + C37058) * C8063 + (C37057 + C37056) * C50920 +
             (C37055 + C37054) * C8064 + (C37053 + C37052) * C50814) *
                C50892 +
            (C41830 * C8063 + C41831 * C50920 + (C37060 + C37061) * C8064 +
             (C37062 + C37063) * C50814) *
                C50626) *
               C50746 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C50908) *
              C50953 +
          (((C36394 * C8063 + C36395 * C50920 + (C36389 + C36388) * C8064 +
             (C36387 + C36386) * C50814) *
                C50892 +
            (C40972 * C8063 + C40973 * C50920 + (C36390 + C36391) * C8064 +
             (C36392 + C36393) * C50814) *
                C50626) *
               C50908 -
           (((C33356 * C3704 + C50842 * C3708 + C33355 * C3268 +
              C33353 * C3272) *
                 C50814 +
             (C33356 * C3702 + C50842 * C3705 + C33355 * C3263 +
              C33353 * C3267) *
                 C8064 +
             (C37063 + C37062) * C50920 + (C37061 + C37060) * C8063) *
                C50626 +
            ((C37991 + C37990) * C50814 + (C37989 + C37988) * C8064 +
             C37978 * C50920 + C37979 * C8063) *
                C50892) *
               C50746) *
              C1380) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C8063 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50920 +
            (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
               C50892 +
           ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
            C40968 * C8064 + C40969 * C50814) *
               C50626) *
              C50682 * C1145 -
          ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
            C40971 * C8063) *
               C50626 +
           ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
            (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
               C50892) *
              C50682 * C1146 +
          ((C36394 * C8063 + C36395 * C50920 + (C36389 + C36388) * C8064 +
            (C36387 + C36386) * C50814) *
               C50892 +
           (C40972 * C8063 + C40973 * C50920 + (C36390 + C36391) * C8064 +
            (C36392 + C36393) * C50814) *
               C50626) *
              C50682 * C1147 -
          (((C33356 * C4210 + C50842 * C4214 + C33355 * C2516 +
             C33353 * C2520) *
                C50814 +
            (C33356 * C4208 + C50842 * C4211 + C33355 * C2511 +
             C33353 * C2515) *
                C8064 +
            (C36393 + C36392) * C50920 + (C36391 + C36390) * C8063) *
               C50626 +
           ((C37321 + C37320) * C50814 + (C37319 + C37318) * C8064 +
            C37308 * C50920 + C37309 * C8063) *
               C50892) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50682 * C1074 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C50682 * C50718) *
              C1076 +
          (((C40968 * C8063 + C40969 * C50920 + C40972 * C8064 +
             C40973 * C50814) *
                C50892 +
            (C41374 * C8063 + C41375 * C50920 + (C33606 + C33607) * C8064 +
             (C33608 + C33609) * C50814) *
                C50626) *
               C50682 * C50718 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C50682 * C1074) *
              C1077 +
          (((C33406 * C8063 + C33407 * C50920 + C41374 * C8064 +
             C41375 * C50814) *
                C50892 +
            ((C33401 + C33400) * C8063 + (C33399 + C33398) * C50920 +
             (C33962 + C33963) * C8064 + (C33964 + C33965) * C50814) *
                C50626) *
               C50682 * C1074 -
           (((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
                 C50814 +
             (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
                 C8064 +
             (C33965 + C33964) * C50920 + (C33963 + C33962) * C8063) *
                C50626 +
            ((C33609 + C33608) * C50814 + (C33607 + C33606) * C8064 +
             C33950 * C50920 + C33951 * C8063) *
                C50892) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C480 -
           ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
             (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C481 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C8063 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50920 +
             (C37484 + C37485) * C8064 + (C37486 + C37487) * C50814) *
                C50892 +
            ((C33796 + C33797) * C8063 + (C33798 + C33799) * C50920 +
             (C41176 + C41177) * C8064 + (C41178 + C41179) * C50814) *
                C50626) *
               C482) *
              C1074 +
          ((((C37059 + C37058) * C8063 + (C37057 + C37056) * C50920 +
             (C37055 + C37054) * C8064 + (C37053 + C37052) * C50814) *
                C50892 +
            (C41830 * C8063 + C41831 * C50920 + (C37060 + C37061) * C8064 +
             (C37062 + C37063) * C50814) *
                C50626) *
               C481 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C480 -
           (((C33356 * C4616 + C50842 * C4624 + C33355 * C2722 +
              C33353 * C2726) *
                 C50814 +
             (C33356 * C4612 + C50842 * C4617 + C33355 * C2717 +
              C33353 * C2721) *
                 C8064 +
             (C41179 + C41178) * C50920 + (C41177 + C41176) * C8063) *
                C50626 +
            ((C37491 + C37490) * C50814 + (C37489 + C37488) * C8064 +
             (C37487 + C37486) * C50920 + (C37485 + C37484) * C8063) *
                C50892) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                  C8063 +
              (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                  C50920 +
              (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                 C50892 +
             ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
              C40968 * C8064 + C40969 * C50814) *
                 C50626) *
                C50908 -
            ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
              (C33794 + C33795) * C8063) *
                 C50626 +
             ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
              (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                  C50920 +
              (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                  C8063) *
                 C50892) *
                C50746) *
               C1074 +
           ((((C37059 + C37058) * C8063 + (C37057 + C37056) * C50920 +
              (C37055 + C37054) * C8064 + (C37053 + C37052) * C50814) *
                 C50892 +
             (C41830 * C8063 + C41831 * C50920 + (C37060 + C37061) * C8064 +
              (C37062 + C37063) * C50814) *
                 C50626) *
                C50746 -
            ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
              C40971 * C8063) *
                 C50626 +
             ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
              (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                 C50892) *
                C50908) *
               C50718) *
              C50899 +
          (((((C33795 + C33794) * C8063 + (C33793 + C33792) * C50920 +
              C41830 * C8064 + C41831 * C50814) *
                 C50892 +
             ((C33791 + C33790) * C8063 + (C33789 + C33788) * C50920 +
              (C34344 + C34345) * C8064 + (C34346 + C34347) * C50814) *
                 C50626) *
                C50746 -
            ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
              (C33395 + C33394) * C8063) *
                 C50626 +
             (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
              (C33391 + C33390) * C8063) *
                 C50892) *
                C50908) *
               C1074 +
           (((C40968 * C8063 + C40969 * C50920 + C40972 * C8064 +
              C40973 * C50814) *
                 C50892 +
             (C41374 * C8063 + C41375 * C50920 + (C33606 + C33607) * C8064 +
              (C33608 + C33609) * C50814) *
                 C50626) *
                C50908 -
            (((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
               C33353 * C1624) *
                  C50814 +
              (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
               C33353 * C1618) *
                  C8064 +
              (C34347 + C34346) * C50920 + (C34345 + C34344) * C8063) *
                 C50626 +
             ((C37063 + C37062) * C50814 + (C37061 + C37060) * C8064 +
              C41828 * C50920 + C41829 * C8063) *
                 C50892) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50682 * C1074 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C50682 * C50718) *
              C1076 +
          (((C40968 * C8063 + C40969 * C50920 + C40972 * C8064 +
             C40973 * C50814) *
                C50892 +
            (C41374 * C8063 + C41375 * C50920 + (C33606 + C33607) * C8064 +
             (C33608 + C33609) * C50814) *
                C50626) *
               C50682 * C50718 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C50682 * C1074) *
              C1077 +
          (((C33406 * C8063 + C33407 * C50920 + C41374 * C8064 +
             C41375 * C50814) *
                C50892 +
            ((C33401 + C33400) * C8063 + (C33399 + C33398) * C50920 +
             (C33962 + C33963) * C8064 + (C33964 + C33965) * C50814) *
                C50626) *
               C50682 * C1074 -
           (((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
                 C50814 +
             (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
                 C8064 +
             (C33965 + C33964) * C50920 + (C33963 + C33962) * C8063) *
                C50626 +
            ((C33609 + C33608) * C50814 + (C33607 + C33606) * C8064 +
             C33950 * C50920 + C33951 * C8063) *
                C50892) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C8063 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50920 +
            (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
               C50892 +
           ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
            C40968 * C8064 + C40969 * C50814) *
               C50626) *
              C50682 * C1145 -
          ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
            C40971 * C8063) *
               C50626 +
           ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
            (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
               C50892) *
              C50682 * C1146 +
          ((C36394 * C8063 + C36395 * C50920 + (C36389 + C36388) * C8064 +
            (C36387 + C36386) * C50814) *
               C50892 +
           (C40972 * C8063 + C40973 * C50920 + (C36390 + C36391) * C8064 +
            (C36392 + C36393) * C50814) *
               C50626) *
              C50682 * C1147 -
          (((C33356 * C4210 + C50842 * C4214 + C33355 * C2516 +
             C33353 * C2520) *
                C50814 +
            (C33356 * C4208 + C50842 * C4211 + C33355 * C2511 +
             C33353 * C2515) *
                C8064 +
            (C36393 + C36392) * C50920 + (C36391 + C36390) * C8063) *
               C50626 +
           ((C37321 + C37320) * C50814 + (C37319 + C37318) * C8064 +
            C37308 * C50920 + C37309 * C8063) *
               C50892) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                  C8063 +
              (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                  C50920 +
              (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                 C50892 +
             ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
              C40968 * C8064 + C40969 * C50814) *
                 C50626) *
                C1725 -
            ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
              (C33794 + C33795) * C8063) *
                 C50626 +
             ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
              (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                  C50920 +
              (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                  C8063) *
                 C50892) *
                C50746) *
               C50907 +
           ((((C37059 + C37058) * C8063 + (C37057 + C37056) * C50920 +
              (C37055 + C37054) * C8064 + (C37053 + C37052) * C50814) *
                 C50892 +
             (C41830 * C8063 + C41831 * C50920 + (C37060 + C37061) * C8064 +
              (C37062 + C37063) * C50814) *
                 C50626) *
                C50746 -
            ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
              C40971 * C8063) *
                 C50626 +
             ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
              (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                 C50892) *
                C1725) *
               C50718) *
              C50899 +
          (((((C33795 + C33794) * C8063 + (C33793 + C33792) * C50920 +
              C41830 * C8064 + C41831 * C50814) *
                 C50892 +
             ((C33791 + C33790) * C8063 + (C33789 + C33788) * C50920 +
              (C34344 + C34345) * C8064 + (C34346 + C34347) * C50814) *
                 C50626) *
                C50746 -
            ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
              (C33395 + C33394) * C8063) *
                 C50626 +
             (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
              (C33391 + C33390) * C8063) *
                 C50892) *
                C1725) *
               C50907 +
           (((C40968 * C8063 + C40969 * C50920 + C40972 * C8064 +
              C40973 * C50814) *
                 C50892 +
             (C41374 * C8063 + C41375 * C50920 + (C33606 + C33607) * C8064 +
              (C33608 + C33609) * C50814) *
                 C50626) *
                C1725 -
            (((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
               C33353 * C1624) *
                  C50814 +
              (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
               C33353 * C1618) *
                  C8064 +
              (C34347 + C34346) * C50920 + (C34345 + C34344) * C8063) *
                 C50626 +
             ((C37063 + C37062) * C50814 + (C37061 + C37060) * C8064 +
              C41828 * C50920 + C41829 * C8063) *
                 C50892) *
                C50746) *
               C50718) *
              C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50954 -
           ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
             (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C50955 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C8063 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50920 +
             (C37484 + C37485) * C8064 + (C37486 + C37487) * C50814) *
                C50892 +
            ((C33796 + C33797) * C8063 + (C33798 + C33799) * C50920 +
             (C41176 + C41177) * C8064 + (C41178 + C41179) * C50814) *
                C50626) *
               C2141) *
              C50907 +
          ((((C37059 + C37058) * C8063 + (C37057 + C37056) * C50920 +
             (C37055 + C37054) * C8064 + (C37053 + C37052) * C50814) *
                C50892 +
            (C41830 * C8063 + C41831 * C50920 + (C37060 + C37061) * C8064 +
             (C37062 + C37063) * C50814) *
                C50626) *
               C50955 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C50954 -
           (((C33356 * C4616 + C50842 * C4624 + C33355 * C2722 +
              C33353 * C2726) *
                 C50814 +
             (C33356 * C4612 + C50842 * C4617 + C33355 * C2717 +
              C33353 * C2721) *
                 C8064 +
             (C41179 + C41178) * C50920 + (C41177 + C41176) * C8063) *
                C50626 +
            ((C37491 + C37490) * C50814 + (C37489 + C37488) * C8064 +
             (C37487 + C37486) * C50920 + (C37485 + C37484) * C8063) *
                C50892) *
               C2141) *
              C50718) *
         C50647) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C1725 -
           ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
             (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C50746) *
              C289 +
          ((((C37059 + C37058) * C8063 + (C37057 + C37056) * C50920 +
             (C37055 + C37054) * C8064 + (C37053 + C37052) * C50814) *
                C50892 +
            (C41830 * C8063 + C41831 * C50920 + (C37060 + C37061) * C8064 +
             (C37062 + C37063) * C50814) *
                C50626) *
               C50746 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C1725) *
              C290 +
          (((C36394 * C8063 + C36395 * C50920 + (C36389 + C36388) * C8064 +
             (C36387 + C36386) * C50814) *
                C50892 +
            (C40972 * C8063 + C40973 * C50920 + (C36390 + C36391) * C8064 +
             (C36392 + C36393) * C50814) *
                C50626) *
               C1725 -
           (((C33356 * C3704 + C50842 * C3708 + C33355 * C3268 +
              C33353 * C3272) *
                 C50814 +
             (C33356 * C3702 + C50842 * C3705 + C33355 * C3263 +
              C33353 * C3267) *
                 C8064 +
             (C37063 + C37062) * C50920 + (C37061 + C37060) * C8063) *
                C50626 +
            ((C37991 + C37990) * C50814 + (C37989 + C37988) * C8064 +
             C37978 * C50920 + C37979 * C8063) *
                C50892) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C1725 -
           ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
             (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C50746) *
              C50666 * C1076 +
          ((((C33795 + C33794) * C8063 + (C33793 + C33792) * C50920 +
             C41830 * C8064 + C41831 * C50814) *
                C50892 +
            ((C33791 + C33790) * C8063 + (C33789 + C33788) * C50920 +
             (C34344 + C34345) * C8064 + (C34346 + C34347) * C50814) *
                C50626) *
               C50746 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C1725) *
              C50666 * C1077 +
          (((C33406 * C8063 + C33407 * C50920 + C41374 * C8064 +
             C41375 * C50814) *
                C50892 +
            ((C33401 + C33400) * C8063 + (C33399 + C33398) * C50920 +
             (C33962 + C33963) * C8064 + (C33964 + C33965) * C50814) *
                C50626) *
               C1725 -
           (((C33356 * C1268 + C50842 * C1276 + C33355 * C944 + C33353 * C950) *
                 C50814 +
             (C33356 * C1264 + C50842 * C1269 + C33355 * C935 + C33353 * C943) *
                 C8064 +
             (C34128 + C34127) * C50920 + (C34126 + C34125) * C8063) *
                C50626 +
            ((C34347 + C34346) * C50814 + (C34345 + C34344) * C8064 +
             C34113 * C50920 + C34114 * C8063) *
                C50892) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C8063 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50920 +
            (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
               C50892 +
           ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
            C40968 * C8064 + C40969 * C50814) *
               C50626) *
              C1891 -
          ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
            (C33794 + C33795) * C8063) *
               C50626 +
           ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C50920 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C8063) *
               C50892) *
              C1892 +
          (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C8063 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C50920 +
            (C37484 + C37485) * C8064 + (C37486 + C37487) * C50814) *
               C50892 +
           ((C33796 + C33797) * C8063 + (C33798 + C33799) * C50920 +
            (C41176 + C41177) * C8064 + (C41178 + C41179) * C50814) *
               C50626) *
              C1893 -
          (((C33356 * C6584 + C50842 * C6588 + C33355 * C4618 +
             C33353 * C4625) *
                C50814 +
            (C33356 * C6582 + C50842 * C6585 + C33355 * C4613 +
             C33353 * C4619) *
                C8064 +
            (C33356 * C5606 + C50842 * C5610 + C33355 * C1903 +
             C33353 * C1909) *
                C50920 +
            (C33356 * C5601 + C50842 * C5605 + C33355 * C1897 +
             C33353 * C1904) *
                C8063) *
               C50626 +
           ((C33356 * C6586 + C50842 * C6589 + C33355 * C4622 +
             C33353 * C4627) *
                C50814 +
            (C33356 * C6583 + C50842 * C6587 + C33355 * C4615 +
             C33353 * C4623) *
                C8064 +
            (C33356 * C5604 + C50842 * C5609 + C33355 * C1905 +
             C33353 * C1910) *
                C50920 +
            (C33356 * C5600 + C50842 * C5603 + C33355 * C1898 +
             C33353 * C1906) *
                C8063) *
               C50892) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C50954 -
           ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
             (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C50955 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C8063 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50920 +
             (C37484 + C37485) * C8064 + (C37486 + C37487) * C50814) *
                C50892 +
            ((C33796 + C33797) * C8063 + (C33798 + C33799) * C50920 +
             (C41176 + C41177) * C8064 + (C41178 + C41179) * C50814) *
                C50626) *
               C2141) *
              C50666 * C50899 +
          ((((C33795 + C33794) * C8063 + (C33793 + C33792) * C50920 +
             C41830 * C8064 + C41831 * C50814) *
                C50892 +
            ((C33791 + C33790) * C8063 + (C33789 + C33788) * C50920 +
             (C34344 + C34345) * C8064 + (C34346 + C34347) * C50814) *
                C50626) *
               C50955 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C50954 -
           (((C33356 * C6171 + C50842 * C6173 + C33355 * C1270 +
              C33353 * C1277) *
                 C50814 +
             (C33356 * C6170 + C50842 * C6172 + C33355 * C1265 +
              C33353 * C1271) *
                 C8064 +
             (C33803 + C33802) * C50920 + (C33801 + C33800) * C8063) *
                C50626 +
            ((C41179 + C41178) * C50814 + (C41177 + C41176) * C8064 +
             (C33799 + C33798) * C50920 + (C33797 + C33796) * C8063) *
                C50892) *
               C2141) *
              C50666 * C50653)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C1725 -
           ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
             (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C50746) *
              C50666 * C1076 +
          ((((C33795 + C33794) * C8063 + (C33793 + C33792) * C50920 +
             C41830 * C8064 + C41831 * C50814) *
                C50892 +
            ((C33791 + C33790) * C8063 + (C33789 + C33788) * C50920 +
             (C34344 + C34345) * C8064 + (C34346 + C34347) * C50814) *
                C50626) *
               C50746 -
           ((C33950 * C50814 + C33951 * C8064 + (C33397 + C33396) * C50920 +
             (C33395 + C33394) * C8063) *
                C50626 +
            (C40970 * C50814 + C40971 * C8064 + (C33393 + C33392) * C50920 +
             (C33391 + C33390) * C8063) *
                C50892) *
               C1725) *
              C50666 * C1077 +
          (((C33406 * C8063 + C33407 * C50920 + C41374 * C8064 +
             C41375 * C50814) *
                C50892 +
            ((C33401 + C33400) * C8063 + (C33399 + C33398) * C50920 +
             (C33962 + C33963) * C8064 + (C33964 + C33965) * C50814) *
                C50626) *
               C1725 -
           (((C33356 * C1268 + C50842 * C1276 + C33355 * C944 + C33353 * C950) *
                 C50814 +
             (C33356 * C1264 + C50842 * C1269 + C33355 * C935 + C33353 * C943) *
                 C8064 +
             (C34128 + C34127) * C50920 + (C34126 + C34125) * C8063) *
                C50626 +
            ((C34347 + C34346) * C50814 + (C34345 + C34344) * C8064 +
             C34113 * C50920 + C34114 * C8063) *
                C50892) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C8063 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50920 +
             (C36378 + C36379) * C8064 + (C36380 + C36381) * C50814) *
                C50892 +
            ((C33390 + C33391) * C8063 + (C33392 + C33393) * C50920 +
             C40968 * C8064 + C40969 * C50814) *
                C50626) *
               C1725 -
           ((C41828 * C50814 + C41829 * C8064 + (C33792 + C33793) * C50920 +
             (C33794 + C33795) * C8063) *
                C50626 +
            ((C37056 + C37057) * C50814 + (C37058 + C37059) * C8064 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50920 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C8063) *
                C50892) *
               C50746) *
              C289 +
          ((((C37059 + C37058) * C8063 + (C37057 + C37056) * C50920 +
             (C37055 + C37054) * C8064 + (C37053 + C37052) * C50814) *
                C50892 +
            (C41830 * C8063 + C41831 * C50920 + (C37060 + C37061) * C8064 +
             (C37062 + C37063) * C50814) *
                C50626) *
               C50746 -
           ((C36376 * C50814 + C36377 * C8064 + C40970 * C50920 +
             C40971 * C8063) *
                C50626 +
            ((C36385 + C36384) * C50814 + (C36383 + C36382) * C8064 +
             (C36381 + C36380) * C50920 + (C36379 + C36378) * C8063) *
                C50892) *
               C1725) *
              C290 +
          (((C36394 * C8063 + C36395 * C50920 + (C36389 + C36388) * C8064 +
             (C36387 + C36386) * C50814) *
                C50892 +
            (C40972 * C8063 + C40973 * C50920 + (C36390 + C36391) * C8064 +
             (C36392 + C36393) * C50814) *
                C50626) *
               C1725 -
           (((C33356 * C3704 + C50842 * C3708 + C33355 * C3268 +
              C33353 * C3272) *
                 C50814 +
             (C33356 * C3702 + C50842 * C3705 + C33355 * C3263 +
              C33353 * C3267) *
                 C8064 +
             (C37063 + C37062) * C50920 + (C37061 + C37060) * C8063) *
                C50626 +
            ((C37991 + C37990) * C50814 + (C37989 + C37988) * C8064 +
             C37978 * C50920 + C37979 * C8063) *
                C50892) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[165] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50682 * C50907 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C50682 * C50718) *
                       C50950 +
                   (((C44493 + C44492 + C44491) * C8063 +
                     (C44490 + C44489 + C44488) * C50920 +
                     (C44494 + C44495 + C44496) * C8064 +
                     (C44497 + C44498 + C44499) * C50814) *
                        C50621 * C50682 * C50718 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C50682 * C50907) *
                       C50951 +
                   (((C44311 + C44310 + C44309) * C8063 +
                     (C44308 + C44307 + C44306) * C50920 +
                     (C44840 + C44841 + C44842) * C8064 +
                     (C44843 + C44844 + C44845) * C50814) *
                        C50621 * C50682 * C50907 -
                    ((C44262 * C2723 + C44259 * C2727 + C44261 * C1617 +
                      C50959 * C1624 + C44260 * C317 + C50958 * C330) *
                         C50814 +
                     (C44262 * C2718 + C44259 * C2724 + C44261 * C1612 +
                      C50959 * C1618 + C44260 * C300 + C50958 * C316) *
                         C8064 +
                     (C44845 + C44844 + C44843) * C50920 +
                     (C44842 + C44841 + C44840) * C8063) *
                        C50621 * C50682 * C50718) *
                       C673)) /
                 (p * q * std::sqrt(p + q));
    d2ee[166] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C8063 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50920 +
                      (C47242 + C47243 + C47244) * C8064 +
                      (C47245 + C47246 + C47247) * C50814) *
                         C50621 * C50908 -
                     ((C47898 + C47899 + C47900) * C50814 +
                      (C47901 + C47902 + C47903) * C8064 +
                      (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50920 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C8063) *
                         C50621 * C50746) *
                        C50907 +
                    (((C47903 + C47902 + C47901) * C8063 +
                      (C47900 + C47899 + C47898) * C50920 +
                      (C44260 * C1614 + C50958 * C1622 + C44261 * C2716 +
                       C50959 * C2719 + C44262 * C4614 + C44259 * C4621) *
                          C8064 +
                      (C44260 * C1621 + C50958 * C1626 + C44261 * C2720 +
                       C50959 * C2725 + C44262 * C4620 + C44259 * C4626) *
                          C50814) *
                         C50621 * C50746 -
                     ((C47248 + C47249 + C47250) * C50814 +
                      (C47251 + C47252 + C47253) * C8064 +
                      (C47247 + C47246 + C47245) * C50920 +
                      (C47244 + C47243 + C47242) * C8063) *
                         C50621 * C50908) *
                        C50718) *
                       C292 +
                   ((((C44675 + C44674 + C44673) * C8063 +
                      (C44672 + C44671 + C44670) * C50920 +
                      (C45216 + C45217 + C45218) * C8064 +
                      (C45219 + C45220 + C45221) * C50814) *
                         C50621 * C50746 -
                     ((C44488 + C44489 + C44490) * C50814 +
                      (C44491 + C44492 + C44493) * C8064 +
                      (C44305 + C44304 + C44303) * C50920 +
                      (C44302 + C44301 + C44300) * C8063) *
                         C50621 * C50908) *
                        C50907 +
                    (((C44493 + C44492 + C44491) * C8063 +
                      (C44490 + C44489 + C44488) * C50920 +
                      (C44494 + C44495 + C44496) * C8064 +
                      (C44497 + C44498 + C44499) * C50814) *
                         C50621 * C50908 -
                     ((C44262 * C4616 + C44259 * C4624 + C44261 * C2722 +
                       C50959 * C2726 + C44260 * C1619 + C50958 * C1625) *
                          C50814 +
                      (C44262 * C4612 + C44259 * C4617 + C44261 * C2717 +
                       C50959 * C2721 + C44260 * C1613 + C50958 * C1620) *
                          C8064 +
                      (C45221 + C45220 + C45219) * C50920 +
                      (C45218 + C45217 + C45216) * C8063) *
                         C50621 * C50746) *
                        C50718) *
                       C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[167] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50682 * C289 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C50682 * C290 +
                    ((C47253 + C47252 + C47251) * C8063 +
                     (C47250 + C47249 + C47248) * C50920 +
                     (C44260 * C1153 + C50958 * C1161 + C44261 * C3262 +
                      C50959 * C3265 + C44262 * C3703 + C44259 * C3707) *
                         C8064 +
                     (C44260 * C1160 + C50958 * C1165 + C44261 * C3266 +
                      C50959 * C3271 + C44262 * C3706 + C44259 * C3709) *
                         C50814) *
                        C50621 * C50682 * C291) *
                       C292 +
                   (((C44493 + C44492 + C44491) * C8063 +
                     (C44490 + C44489 + C44488) * C50920 +
                     (C44494 + C44495 + C44496) * C8064 +
                     (C44497 + C44498 + C44499) * C50814) *
                        C50621 * C50682 * C290 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C50682 * C289 -
                    ((C44262 * C3704 + C44259 * C3708 + C44261 * C3268 +
                      C50959 * C3272 + C44260 * C1158 + C50958 * C1164) *
                         C50814 +
                     (C44262 * C3702 + C44259 * C3705 + C44261 * C3263 +
                      C50959 * C3267 + C44260 * C1152 + C50958 * C1159) *
                         C8064 +
                     (C44499 + C44498 + C44497) * C50920 +
                     (C44496 + C44495 + C44494) * C8063) *
                        C50621 * C50682 * C291) *
                       C50653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                     C50959 * C500 + C44262 * C487 + C44259 * C501) *
                        C8063 +
                    (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                     C50959 * C516 + C44262 * C502 + C44259 * C517) *
                        C50920 +
                    (C44260 * C297 + C50958 * C311 + C44261 * C932 +
                     C50959 * C937 + C44262 * C1267 + C44259 * C1275) *
                        C8064 +
                    (C44260 * C310 + C50958 * C327 + C44261 * C938 +
                     C50959 * C947 + C44262 * C1274 + C44259 * C1279) *
                        C50814) *
                       C50621 * C50682 * C50666 * C113 -
                   ((C44488 + C44489 + C44490) * C50814 +
                    (C44491 + C44492 + C44493) * C8064 +
                    (C44305 + C44304 + C44303) * C50920 +
                    (C44302 + C44301 + C44300) * C8063) *
                       C50621 * C50682 * C50666 * C114 +
                   ((C44311 + C44310 + C44309) * C8063 +
                    (C44308 + C44307 + C44306) * C50920 +
                    (C44840 + C44841 + C44842) * C8064 +
                    (C44843 + C44844 + C44845) * C50814) *
                       C50621 * C50682 * C50666 * C115 -
                   ((C44262 * C1268 + C44259 * C1276 + C44261 * C944 +
                     C50959 * C950 + C44260 * C304 + C50958 * C324) *
                        C50814 +
                    (C44262 * C1264 + C44259 * C1269 + C44261 * C935 +
                     C50959 * C943 + C44260 * C294 + C50958 * C305) *
                        C8064 +
                    (C44317 + C44316 + C44315) * C50920 +
                    (C44314 + C44313 + C44312) * C8063) *
                       C50621 * C50682 * C50666 * C116)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C480 -
                    ((C44262 * C4622 + C44259 * C4627 + C44261 * C1274 +
                      C50959 * C1279 + C44260 * C938 + C50958 * C947) *
                         C50814 +
                     (C44262 * C4615 + C44259 * C4623 + C44261 * C1267 +
                      C50959 * C1275 + C44260 * C932 + C50958 * C937) *
                         C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C481 +
                    ((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                      C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                         C8063 +
                     (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                      C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                         C50920 +
                     (C44260 * C1267 + C50958 * C1275 + C44261 * C4615 +
                      C50959 * C4623 + C44262 * C6583 + C44259 * C6587) *
                         C8064 +
                     (C44260 * C1274 + C50958 * C1279 + C44261 * C4622 +
                      C50959 * C4627 + C44262 * C6586 + C44259 * C6589) *
                         C50814) *
                        C50621 * C482) *
                       C50666 * C292 +
                   (((C44675 + C44674 + C44673) * C8063 +
                     (C44672 + C44671 + C44670) * C50920 +
                     (C45216 + C45217 + C45218) * C8064 +
                     (C45219 + C45220 + C45221) * C50814) *
                        C50621 * C481 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C480 -
                    ((C44262 * C6584 + C44259 * C6588 + C44261 * C4618 +
                      C50959 * C4625 + C44260 * C1272 + C50958 * C1278) *
                         C50814 +
                     (C44262 * C6582 + C44259 * C6585 + C44261 * C4613 +
                      C50959 * C4619 + C44260 * C1266 + C50958 * C1273) *
                         C8064 +
                     (C44681 + C44680 + C44679) * C50920 +
                     (C44678 + C44677 + C44676) * C8063) *
                        C50621 * C482) *
                       C50666 * C50653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[168] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50908 -
                    ((C44262 * C4622 + C44259 * C4627 + C44261 * C1274 +
                      C50959 * C1279 + C44260 * C938 + C50958 * C947) *
                         C50814 +
                     (C44262 * C4615 + C44259 * C4623 + C44261 * C1267 +
                      C50959 * C1275 + C44260 * C932 + C50958 * C937) *
                         C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C50746) *
                       C50666 * C50950 +
                   (((C44675 + C44674 + C44673) * C8063 +
                     (C44672 + C44671 + C44670) * C50920 +
                     (C45216 + C45217 + C45218) * C8064 +
                     (C45219 + C45220 + C45221) * C50814) *
                        C50621 * C50746 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C50908) *
                       C50666 * C50951 +
                   (((C44311 + C44310 + C44309) * C8063 +
                     (C44308 + C44307 + C44306) * C50920 +
                     (C44840 + C44841 + C44842) * C8064 +
                     (C44843 + C44844 + C44845) * C50814) *
                        C50621 * C50908 -
                    ((C44262 * C6171 + C44259 * C6173 + C44261 * C1270 +
                      C50959 * C1277 + C44260 * C942 + C50958 * C949) *
                         C50814 +
                     (C44262 * C6170 + C44259 * C6172 + C44261 * C1265 +
                      C50959 * C1271 + C44260 * C934 + C50958 * C941) *
                         C8064 +
                     (C45009 + C45008 + C45007) * C50920 +
                     (C45006 + C45005 + C45004) * C8063) *
                        C50621 * C50746) *
                       C50666 * C673)) /
                 (p * q * std::sqrt(p + q));
    d2ee[169] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                     C50959 * C500 + C44262 * C487 + C44259 * C501) *
                        C8063 +
                    (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                     C50959 * C516 + C44262 * C502 + C44259 * C517) *
                        C50920 +
                    (C44260 * C297 + C50958 * C311 + C44261 * C932 +
                     C50959 * C937 + C44262 * C1267 + C44259 * C1275) *
                        C8064 +
                    (C44260 * C310 + C50958 * C327 + C44261 * C938 +
                     C50959 * C947 + C44262 * C1274 + C44259 * C1279) *
                        C50814) *
                       C50621 * C50682 * C50666 * C113 -
                   ((C44488 + C44489 + C44490) * C50814 +
                    (C44491 + C44492 + C44493) * C8064 +
                    (C44305 + C44304 + C44303) * C50920 +
                    (C44302 + C44301 + C44300) * C8063) *
                       C50621 * C50682 * C50666 * C114 +
                   ((C44311 + C44310 + C44309) * C8063 +
                    (C44308 + C44307 + C44306) * C50920 +
                    (C44840 + C44841 + C44842) * C8064 +
                    (C44843 + C44844 + C44845) * C50814) *
                       C50621 * C50682 * C50666 * C115 -
                   ((C44262 * C1268 + C44259 * C1276 + C44261 * C944 +
                     C50959 * C950 + C44260 * C304 + C50958 * C324) *
                        C50814 +
                    (C44262 * C1264 + C44259 * C1269 + C44261 * C935 +
                     C50959 * C943 + C44260 * C294 + C50958 * C305) *
                        C8064 +
                    (C44317 + C44316 + C44315) * C50920 +
                    (C44314 + C44313 + C44312) * C8063) *
                       C50621 * C50682 * C50666 * C116)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50682 * C289 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C50682 * C290 +
                    ((C47253 + C47252 + C47251) * C8063 +
                     (C47250 + C47249 + C47248) * C50920 +
                     (C44260 * C1153 + C50958 * C1161 + C44261 * C3262 +
                      C50959 * C3265 + C44262 * C3703 + C44259 * C3707) *
                         C8064 +
                     (C44260 * C1160 + C50958 * C1165 + C44261 * C3266 +
                      C50959 * C3271 + C44262 * C3706 + C44259 * C3709) *
                         C50814) *
                        C50621 * C50682 * C291) *
                       C292 +
                   (((C44493 + C44492 + C44491) * C8063 +
                     (C44490 + C44489 + C44488) * C50920 +
                     (C44494 + C44495 + C44496) * C8064 +
                     (C44497 + C44498 + C44499) * C50814) *
                        C50621 * C50682 * C290 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C50682 * C289 -
                    ((C44262 * C3704 + C44259 * C3708 + C44261 * C3268 +
                      C50959 * C3272 + C44260 * C1158 + C50958 * C1164) *
                         C50814 +
                     (C44262 * C3702 + C44259 * C3705 + C44261 * C3263 +
                      C50959 * C3267 + C44260 * C1152 + C50958 * C1159) *
                         C8064 +
                     (C44499 + C44498 + C44497) * C50920 +
                     (C44496 + C44495 + C44494) * C8063) *
                        C50621 * C50682 * C291) *
                       C50653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[170] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50682 * C50952 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C50682 * C50953 +
                    ((C47253 + C47252 + C47251) * C8063 +
                     (C47250 + C47249 + C47248) * C50920 +
                     (C48160 + C48161 + C48162) * C8064 +
                     (C48163 + C48164 + C48165) * C50814) *
                        C50621 * C50682 * C1380) *
                       C50899 +
                   (((C44493 + C44492 + C44491) * C8063 +
                     (C44490 + C44489 + C44488) * C50920 +
                     (C44494 + C44495 + C44496) * C8064 +
                     (C44497 + C44498 + C44499) * C50814) *
                        C50621 * C50682 * C50953 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C50682 * C50952 -
                    ((C44262 * C3704 + C44259 * C3708 + C44261 * C3268 +
                      C50959 * C3272 + C44260 * C1158 + C50958 * C1164) *
                         C50814 +
                     (C44262 * C3702 + C44259 * C3705 + C44261 * C3263 +
                      C50959 * C3267 + C44260 * C1152 + C50958 * C1159) *
                         C8064 +
                     (C44499 + C44498 + C44497) * C50920 +
                     (C44496 + C44495 + C44494) * C8063) *
                        C50621 * C50682 * C1380) *
                       C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[171] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50908 -
                    ((C47898 + C47899 + C47900) * C50814 +
                     (C47901 + C47902 + C47903) * C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C50746) *
                       C50952 +
                   (((C47903 + C47902 + C47901) * C8063 +
                     (C47900 + C47899 + C47898) * C50920 +
                     (C48828 + C48829 + C48830) * C8064 +
                     (C48831 + C48832 + C48833) * C50814) *
                        C50621 * C50746 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C50908) *
                       C50953 +
                   (((C47253 + C47252 + C47251) * C8063 +
                     (C47250 + C47249 + C47248) * C50920 +
                     (C48160 + C48161 + C48162) * C8064 +
                     (C48163 + C48164 + C48165) * C50814) *
                        C50621 * C50908 -
                    ((C44262 * C21324 + C44259 * C21326 + C44261 * C3706 +
                      C50959 * C3709 + C44260 * C3266 + C50958 * C3271) *
                         C50814 +
                     (C44262 * C21323 + C44259 * C21325 + C44261 * C3703 +
                      C50959 * C3707 + C44260 * C3262 + C50958 * C3265) *
                         C8064 +
                     (C48833 + C48832 + C48831) * C50920 +
                     (C48830 + C48829 + C48828) * C8063) *
                        C50621 * C50746) *
                       C1380) *
                  C50647) /
                 (p * q * std::sqrt(p + q));
    d2ee[172] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                     C50959 * C500 + C44262 * C487 + C44259 * C501) *
                        C8063 +
                    (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                     C50959 * C516 + C44262 * C502 + C44259 * C517) *
                        C50920 +
                    (C47242 + C47243 + C47244) * C8064 +
                    (C47245 + C47246 + C47247) * C50814) *
                       C50621 * C50682 * C1145 -
                   ((C47248 + C47249 + C47250) * C50814 +
                    (C47251 + C47252 + C47253) * C8064 +
                    (C47247 + C47246 + C47245) * C50920 +
                    (C47244 + C47243 + C47242) * C8063) *
                       C50621 * C50682 * C1146 +
                   ((C47253 + C47252 + C47251) * C8063 +
                    (C47250 + C47249 + C47248) * C50920 +
                    (C48160 + C48161 + C48162) * C8064 +
                    (C48163 + C48164 + C48165) * C50814) *
                       C50621 * C50682 * C1147 -
                   ((C44262 * C20716 + C44259 * C20718 + C44261 * C4212 +
                     C50959 * C4215 + C44260 * C2514 + C50958 * C2519) *
                        C50814 +
                    (C44262 * C20715 + C44259 * C20717 + C44261 * C4209 +
                     C50959 * C4213 + C44260 * C2510 + C50958 * C2513) *
                        C8064 +
                    (C48165 + C48164 + C48163) * C50920 +
                    (C48162 + C48161 + C48160) * C8063) *
                       C50621 * C50682 * C1148) *
                  C50647) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50682 * C1074 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C50682 * C50718) *
                       C1076 +
                   (((C44493 + C44492 + C44491) * C8063 +
                     (C44490 + C44489 + C44488) * C50920 +
                     (C44494 + C44495 + C44496) * C8064 +
                     (C44497 + C44498 + C44499) * C50814) *
                        C50621 * C50682 * C50718 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C50682 * C1074) *
                       C1077 +
                   (((C44311 + C44310 + C44309) * C8063 +
                     (C44308 + C44307 + C44306) * C50920 +
                     (C44840 + C44841 + C44842) * C8064 +
                     (C44843 + C44844 + C44845) * C50814) *
                        C50621 * C50682 * C1074 -
                    ((C44262 * C2723 + C44259 * C2727 + C44261 * C1617 +
                      C50959 * C1624 + C44260 * C317 + C50958 * C330) *
                         C50814 +
                     (C44262 * C2718 + C44259 * C2724 + C44261 * C1612 +
                      C50959 * C1618 + C44260 * C300 + C50958 * C316) *
                         C8064 +
                     (C44845 + C44844 + C44843) * C50920 +
                     (C44842 + C44841 + C44840) * C8063) *
                        C50621 * C50682 * C50718) *
                       C1078)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C480 -
                    ((C47898 + C47899 + C47900) * C50814 +
                     (C47901 + C47902 + C47903) * C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C481 +
                    ((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                      C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                         C8063 +
                     (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                      C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                         C50920 +
                     (C48324 + C48325 + C48326) * C8064 +
                     (C48327 + C48328 + C48329) * C50814) *
                        C50621 * C482) *
                       C1074 +
                   (((C47903 + C47902 + C47901) * C8063 +
                     (C47900 + C47899 + C47898) * C50920 +
                     (C44260 * C1614 + C50958 * C1622 + C44261 * C2716 +
                      C50959 * C2719 + C44262 * C4614 + C44259 * C4621) *
                         C8064 +
                     (C44260 * C1621 + C50958 * C1626 + C44261 * C2720 +
                      C50959 * C2725 + C44262 * C4620 + C44259 * C4626) *
                         C50814) *
                        C50621 * C481 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C480 -
                    ((C44262 * C22992 + C44259 * C22994 + C44261 * C4620 +
                      C50959 * C4626 + C44260 * C2720 + C50958 * C2725) *
                         C50814 +
                     (C44262 * C22991 + C44259 * C22993 + C44261 * C4614 +
                      C50959 * C4621 + C44260 * C2716 + C50958 * C2719) *
                         C8064 +
                     (C48329 + C48328 + C48327) * C50920 +
                     (C48326 + C48325 + C48324) * C8063) *
                        C50621 * C482) *
                       C50718) *
                  C50647) /
                     (p * q * std::sqrt(p + q));
    d2ee[173] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C8063 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50920 +
                      (C47242 + C47243 + C47244) * C8064 +
                      (C47245 + C47246 + C47247) * C50814) *
                         C50621 * C50908 -
                     ((C47898 + C47899 + C47900) * C50814 +
                      (C47901 + C47902 + C47903) * C8064 +
                      (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50920 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C8063) *
                         C50621 * C50746) *
                        C1074 +
                    (((C47903 + C47902 + C47901) * C8063 +
                      (C47900 + C47899 + C47898) * C50920 +
                      (C44260 * C1614 + C50958 * C1622 + C44261 * C2716 +
                       C50959 * C2719 + C44262 * C4614 + C44259 * C4621) *
                          C8064 +
                      (C44260 * C1621 + C50958 * C1626 + C44261 * C2720 +
                       C50959 * C2725 + C44262 * C4620 + C44259 * C4626) *
                          C50814) *
                         C50621 * C50746 -
                     ((C47248 + C47249 + C47250) * C50814 +
                      (C47251 + C47252 + C47253) * C8064 +
                      (C47247 + C47246 + C47245) * C50920 +
                      (C47244 + C47243 + C47242) * C8063) *
                         C50621 * C50908) *
                        C50718) *
                       C50899 +
                   ((((C44675 + C44674 + C44673) * C8063 +
                      (C44672 + C44671 + C44670) * C50920 +
                      (C45216 + C45217 + C45218) * C8064 +
                      (C45219 + C45220 + C45221) * C50814) *
                         C50621 * C50746 -
                     ((C44488 + C44489 + C44490) * C50814 +
                      (C44491 + C44492 + C44493) * C8064 +
                      (C44305 + C44304 + C44303) * C50920 +
                      (C44302 + C44301 + C44300) * C8063) *
                         C50621 * C50908) *
                        C1074 +
                    (((C44493 + C44492 + C44491) * C8063 +
                      (C44490 + C44489 + C44488) * C50920 +
                      (C44494 + C44495 + C44496) * C8064 +
                      (C44497 + C44498 + C44499) * C50814) *
                         C50621 * C50908 -
                     ((C44262 * C4616 + C44259 * C4624 + C44261 * C2722 +
                       C50959 * C2726 + C44260 * C1619 + C50958 * C1625) *
                          C50814 +
                      (C44262 * C4612 + C44259 * C4617 + C44261 * C2717 +
                       C50959 * C2721 + C44260 * C1613 + C50958 * C1620) *
                          C8064 +
                      (C45221 + C45220 + C45219) * C50920 +
                      (C45218 + C45217 + C45216) * C8063) *
                         C50621 * C50746) *
                        C50718) *
                       C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[174] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50682 * C1074 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C50682 * C50718) *
                       C1076 +
                   (((C44493 + C44492 + C44491) * C8063 +
                     (C44490 + C44489 + C44488) * C50920 +
                     (C44494 + C44495 + C44496) * C8064 +
                     (C44497 + C44498 + C44499) * C50814) *
                        C50621 * C50682 * C50718 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C50682 * C1074) *
                       C1077 +
                   (((C44311 + C44310 + C44309) * C8063 +
                     (C44308 + C44307 + C44306) * C50920 +
                     (C44840 + C44841 + C44842) * C8064 +
                     (C44843 + C44844 + C44845) * C50814) *
                        C50621 * C50682 * C1074 -
                    ((C44262 * C2723 + C44259 * C2727 + C44261 * C1617 +
                      C50959 * C1624 + C44260 * C317 + C50958 * C330) *
                         C50814 +
                     (C44262 * C2718 + C44259 * C2724 + C44261 * C1612 +
                      C50959 * C1618 + C44260 * C300 + C50958 * C316) *
                         C8064 +
                     (C44845 + C44844 + C44843) * C50920 +
                     (C44842 + C44841 + C44840) * C8063) *
                        C50621 * C50682 * C50718) *
                       C1078)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                     C50959 * C500 + C44262 * C487 + C44259 * C501) *
                        C8063 +
                    (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                     C50959 * C516 + C44262 * C502 + C44259 * C517) *
                        C50920 +
                    (C47242 + C47243 + C47244) * C8064 +
                    (C47245 + C47246 + C47247) * C50814) *
                       C50621 * C50682 * C1145 -
                   ((C47248 + C47249 + C47250) * C50814 +
                    (C47251 + C47252 + C47253) * C8064 +
                    (C47247 + C47246 + C47245) * C50920 +
                    (C47244 + C47243 + C47242) * C8063) *
                       C50621 * C50682 * C1146 +
                   ((C47253 + C47252 + C47251) * C8063 +
                    (C47250 + C47249 + C47248) * C50920 +
                    (C48160 + C48161 + C48162) * C8064 +
                    (C48163 + C48164 + C48165) * C50814) *
                       C50621 * C50682 * C1147 -
                   ((C44262 * C20716 + C44259 * C20718 + C44261 * C4212 +
                     C50959 * C4215 + C44260 * C2514 + C50958 * C2519) *
                        C50814 +
                    (C44262 * C20715 + C44259 * C20717 + C44261 * C4209 +
                     C50959 * C4213 + C44260 * C2510 + C50958 * C2513) *
                        C8064 +
                    (C48165 + C48164 + C48163) * C50920 +
                    (C48162 + C48161 + C48160) * C8063) *
                       C50621 * C50682 * C1148) *
                  C50647) /
                     (p * q * std::sqrt(p + q));
    d2ee[175] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C8063 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50920 +
                      (C47242 + C47243 + C47244) * C8064 +
                      (C47245 + C47246 + C47247) * C50814) *
                         C50621 * C1725 -
                     ((C47898 + C47899 + C47900) * C50814 +
                      (C47901 + C47902 + C47903) * C8064 +
                      (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50920 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C8063) *
                         C50621 * C50746) *
                        C50907 +
                    (((C47903 + C47902 + C47901) * C8063 +
                      (C47900 + C47899 + C47898) * C50920 +
                      (C48828 + C48829 + C48830) * C8064 +
                      (C48831 + C48832 + C48833) * C50814) *
                         C50621 * C50746 -
                     ((C47248 + C47249 + C47250) * C50814 +
                      (C47251 + C47252 + C47253) * C8064 +
                      (C47247 + C47246 + C47245) * C50920 +
                      (C47244 + C47243 + C47242) * C8063) *
                         C50621 * C1725) *
                        C50718) *
                       C50899 +
                   ((((C44675 + C44674 + C44673) * C8063 +
                      (C44672 + C44671 + C44670) * C50920 +
                      (C45216 + C45217 + C45218) * C8064 +
                      (C45219 + C45220 + C45221) * C50814) *
                         C50621 * C50746 -
                     ((C44488 + C44489 + C44490) * C50814 +
                      (C44491 + C44492 + C44493) * C8064 +
                      (C44305 + C44304 + C44303) * C50920 +
                      (C44302 + C44301 + C44300) * C8063) *
                         C50621 * C1725) *
                        C50907 +
                    (((C44493 + C44492 + C44491) * C8063 +
                      (C44490 + C44489 + C44488) * C50920 +
                      (C44494 + C44495 + C44496) * C8064 +
                      (C44497 + C44498 + C44499) * C50814) *
                         C50621 * C1725 -
                     ((C44262 * C4616 + C44259 * C4624 + C44261 * C2722 +
                       C50959 * C2726 + C44260 * C1619 + C50958 * C1625) *
                          C50814 +
                      (C44262 * C4612 + C44259 * C4617 + C44261 * C2717 +
                       C50959 * C2721 + C44260 * C1613 + C50958 * C1620) *
                          C8064 +
                      (C45221 + C45220 + C45219) * C50920 +
                      (C45218 + C45217 + C45216) * C8063) *
                         C50621 * C50746) *
                        C50718) *
                       C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[176] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50954 -
                    ((C47898 + C47899 + C47900) * C50814 +
                     (C47901 + C47902 + C47903) * C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C50955 +
                    ((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                      C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                         C8063 +
                     (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                      C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                         C50920 +
                     (C48324 + C48325 + C48326) * C8064 +
                     (C48327 + C48328 + C48329) * C50814) *
                        C50621 * C2141) *
                       C50907 +
                   (((C47903 + C47902 + C47901) * C8063 +
                     (C47900 + C47899 + C47898) * C50920 +
                     (C48828 + C48829 + C48830) * C8064 +
                     (C48831 + C48832 + C48833) * C50814) *
                        C50621 * C50955 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C50954 -
                    ((C44262 * C22992 + C44259 * C22994 + C44261 * C4620 +
                      C50959 * C4626 + C44260 * C2720 + C50958 * C2725) *
                         C50814 +
                     (C44262 * C22991 + C44259 * C22993 + C44261 * C4614 +
                      C50959 * C4621 + C44260 * C2716 + C50958 * C2719) *
                         C8064 +
                     (C48329 + C48328 + C48327) * C50920 +
                     (C48326 + C48325 + C48324) * C8063) *
                        C50621 * C2141) *
                       C50718) *
                  C50647) /
                 (p * q * std::sqrt(p + q));
    d2ee[177] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C1725 -
                    ((C47898 + C47899 + C47900) * C50814 +
                     (C47901 + C47902 + C47903) * C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C50746) *
                       C289 +
                   (((C47903 + C47902 + C47901) * C8063 +
                     (C47900 + C47899 + C47898) * C50920 +
                     (C48828 + C48829 + C48830) * C8064 +
                     (C48831 + C48832 + C48833) * C50814) *
                        C50621 * C50746 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C1725) *
                       C290 +
                   (((C47253 + C47252 + C47251) * C8063 +
                     (C47250 + C47249 + C47248) * C50920 +
                     (C48160 + C48161 + C48162) * C8064 +
                     (C48163 + C48164 + C48165) * C50814) *
                        C50621 * C1725 -
                    ((C44262 * C21324 + C44259 * C21326 + C44261 * C3706 +
                      C50959 * C3709 + C44260 * C3266 + C50958 * C3271) *
                         C50814 +
                     (C44262 * C21323 + C44259 * C21325 + C44261 * C3703 +
                      C50959 * C3707 + C44260 * C3262 + C50958 * C3265) *
                         C8064 +
                     (C48833 + C48832 + C48831) * C50920 +
                     (C48830 + C48829 + C48828) * C8063) *
                        C50621 * C50746) *
                       C291) *
                  C50647) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C1725 -
                    ((C47898 + C47899 + C47900) * C50814 +
                     (C47901 + C47902 + C47903) * C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C50746) *
                       C50666 * C1076 +
                   (((C44675 + C44674 + C44673) * C8063 +
                     (C44672 + C44671 + C44670) * C50920 +
                     (C45216 + C45217 + C45218) * C8064 +
                     (C45219 + C45220 + C45221) * C50814) *
                        C50621 * C50746 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C1725) *
                       C50666 * C1077 +
                   (((C44311 + C44310 + C44309) * C8063 +
                     (C44308 + C44307 + C44306) * C50920 +
                     (C44840 + C44841 + C44842) * C8064 +
                     (C44843 + C44844 + C44845) * C50814) *
                        C50621 * C1725 -
                    ((C44262 * C6171 + C44259 * C6173 + C44261 * C1270 +
                      C50959 * C1277 + C44260 * C942 + C50958 * C949) *
                         C50814 +
                     (C44262 * C6170 + C44259 * C6172 + C44261 * C1265 +
                      C50959 * C1271 + C44260 * C934 + C50958 * C941) *
                         C8064 +
                     (C45009 + C45008 + C45007) * C50920 +
                     (C45006 + C45005 + C45004) * C8063) *
                        C50621 * C50746) *
                       C50666 * C1078)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                     C50959 * C500 + C44262 * C487 + C44259 * C501) *
                        C8063 +
                    (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                     C50959 * C516 + C44262 * C502 + C44259 * C517) *
                        C50920 +
                    (C47242 + C47243 + C47244) * C8064 +
                    (C47245 + C47246 + C47247) * C50814) *
                       C50621 * C1891 -
                   ((C47898 + C47899 + C47900) * C50814 +
                    (C47901 + C47902 + C47903) * C8064 +
                    (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                     C50959 * C517 + C44260 * C499 + C50958 * C516) *
                        C50920 +
                    (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                     C50959 * C501 + C44260 * C486 + C50958 * C500) *
                        C8063) *
                       C50621 * C1892 +
                   ((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                     C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                        C8063 +
                    (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                     C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                        C50920 +
                    (C48324 + C48325 + C48326) * C8064 +
                    (C48327 + C48328 + C48329) * C50814) *
                       C50621 * C1893 -
                   ((C44262 * C23908 + C44259 * C23910 + C44261 * C6586 +
                     C50959 * C6589 + C44260 * C4622 + C50958 * C4627) *
                        C50814 +
                    (C44262 * C23907 + C44259 * C23909 + C44261 * C6583 +
                     C50959 * C6587 + C44260 * C4615 + C50958 * C4623) *
                        C8064 +
                    (C44262 * C7470 + C44259 * C7473 + C44261 * C5604 +
                     C50959 * C5609 + C44260 * C1905 + C50958 * C1910) *
                        C50920 +
                    (C44262 * C7467 + C44259 * C7471 + C44261 * C5600 +
                     C50959 * C5603 + C44260 * C1898 + C50958 * C1906) *
                        C8063) *
                       C50621 * C1894) *
                  C50666 * C50647) /
                     (p * q * std::sqrt(p + q));
    d2ee[178] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C50954 -
                    ((C47898 + C47899 + C47900) * C50814 +
                     (C47901 + C47902 + C47903) * C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C50955 +
                    ((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                      C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                         C8063 +
                     (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                      C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                         C50920 +
                     (C48324 + C48325 + C48326) * C8064 +
                     (C48327 + C48328 + C48329) * C50814) *
                        C50621 * C2141) *
                       C50666 * C50899 +
                   (((C44675 + C44674 + C44673) * C8063 +
                     (C44672 + C44671 + C44670) * C50920 +
                     (C45216 + C45217 + C45218) * C8064 +
                     (C45219 + C45220 + C45221) * C50814) *
                        C50621 * C50955 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C50954 -
                    ((C44262 * C6584 + C44259 * C6588 + C44261 * C4618 +
                      C50959 * C4625 + C44260 * C1272 + C50958 * C1278) *
                         C50814 +
                     (C44262 * C6582 + C44259 * C6585 + C44261 * C4613 +
                      C50959 * C4619 + C44260 * C1266 + C50958 * C1273) *
                         C8064 +
                     (C44681 + C44680 + C44679) * C50920 +
                     (C44678 + C44677 + C44676) * C8063) *
                        C50621 * C2141) *
                       C50666 * C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[179] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C1725 -
                    ((C47898 + C47899 + C47900) * C50814 +
                     (C47901 + C47902 + C47903) * C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C50746) *
                       C50666 * C1076 +
                   (((C44675 + C44674 + C44673) * C8063 +
                     (C44672 + C44671 + C44670) * C50920 +
                     (C45216 + C45217 + C45218) * C8064 +
                     (C45219 + C45220 + C45221) * C50814) *
                        C50621 * C50746 -
                    ((C44488 + C44489 + C44490) * C50814 +
                     (C44491 + C44492 + C44493) * C8064 +
                     (C44305 + C44304 + C44303) * C50920 +
                     (C44302 + C44301 + C44300) * C8063) *
                        C50621 * C1725) *
                       C50666 * C1077 +
                   (((C44311 + C44310 + C44309) * C8063 +
                     (C44308 + C44307 + C44306) * C50920 +
                     (C44840 + C44841 + C44842) * C8064 +
                     (C44843 + C44844 + C44845) * C50814) *
                        C50621 * C1725 -
                    ((C44262 * C6171 + C44259 * C6173 + C44261 * C1270 +
                      C50959 * C1277 + C44260 * C942 + C50958 * C949) *
                         C50814 +
                     (C44262 * C6170 + C44259 * C6172 + C44261 * C1265 +
                      C50959 * C1271 + C44260 * C934 + C50958 * C941) *
                         C8064 +
                     (C45009 + C45008 + C45007) * C50920 +
                     (C45006 + C45005 + C45004) * C8063) *
                        C50621 * C50746) *
                       C50666 * C1078)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C8063 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50920 +
                     (C47242 + C47243 + C47244) * C8064 +
                     (C47245 + C47246 + C47247) * C50814) *
                        C50621 * C1725 -
                    ((C47898 + C47899 + C47900) * C50814 +
                     (C47901 + C47902 + C47903) * C8064 +
                     (C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50920 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C8063) *
                        C50621 * C50746) *
                       C289 +
                   (((C47903 + C47902 + C47901) * C8063 +
                     (C47900 + C47899 + C47898) * C50920 +
                     (C48828 + C48829 + C48830) * C8064 +
                     (C48831 + C48832 + C48833) * C50814) *
                        C50621 * C50746 -
                    ((C47248 + C47249 + C47250) * C50814 +
                     (C47251 + C47252 + C47253) * C8064 +
                     (C47247 + C47246 + C47245) * C50920 +
                     (C47244 + C47243 + C47242) * C8063) *
                        C50621 * C1725) *
                       C290 +
                   (((C47253 + C47252 + C47251) * C8063 +
                     (C47250 + C47249 + C47248) * C50920 +
                     (C48160 + C48161 + C48162) * C8064 +
                     (C48163 + C48164 + C48165) * C50814) *
                        C50621 * C1725 -
                    ((C44262 * C21324 + C44259 * C21326 + C44261 * C3706 +
                      C50959 * C3709 + C44260 * C3266 + C50958 * C3271) *
                         C50814 +
                     (C44262 * C21323 + C44259 * C21325 + C44261 * C3703 +
                      C50959 * C3707 + C44260 * C3262 + C50958 * C3265) *
                         C8064 +
                     (C48833 + C48832 + C48831) * C50920 +
                     (C48830 + C48829 + C48828) * C8063) *
                        C50621 * C50746) *
                       C291) *
                  C50647) /
                     (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C50907 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C50718) *
              C50950 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C50718 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C50907) *
              C50951 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C50682 * C50907 -
           ((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
             C33353 * C1163) *
                C2340 +
            (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
             C33353 * C1157) *
                C2345 +
            (C33609 + C33608) * C2339 + (C33607 + C33606) * C2344 +
            C33950 * C2338 + C33951 * C2343) *
               C50621 * C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C50907 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C50718) *
              C50950 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
               C50682 * C50718 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C50907) *
              C50951 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C50682 * C50907 -
           (((C33356 * C945 + C50842 * C951 + C33355 * C321 + C33353 * C332) *
                 C50763 +
             (C33356 * C936 + C50842 * C946 + C33355 * C302 + C33353 * C320) *
                 C118) *
                C17237 +
            ((C33965 + C33964) * C50763 + (C33963 + C33962) * C118) * C17236 +
            C33966 * C17235) *
               C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50682 * C50907 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C50682 * C50718) *
              C50950 +
          (((C38937 * C296 + C38933 * C309 + C38938 * C933 + C38934 * C939 +
             C38939 * C1266 + C38935 * C1273 + C38940 * C4613 +
             C38936 * C4619) *
                C118 +
            (C38937 * C308 + C38933 * C326 + C38938 * C940 + C38934 * C948 +
             C38939 * C1272 + C38935 * C1278 + C38940 * C4618 +
             C38936 * C4625) *
                C50763) *
               C50621 * C50682 * C50718 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C50682 * C50907) *
              C50951 +
          (((C38937 * C121 + C38933 * C130 + C38938 * C484 + C38934 * C496 +
             C38939 * C489 + C38935 * C505 + C38940 * C1896 + C38936 * C1902) *
                C118 +
            (C38937 * C131 + C38933 * C142 + C38938 * C495 + C38934 * C514 +
             C38939 * C506 + C38935 * C519 + C38940 * C1901 + C38936 * C1908) *
                C50763) *
               C50621 * C50682 * C50907 -
           ((C38940 * C6171 + C38936 * C6173 + C38939 * C1270 + C38935 * C1277 +
             C38938 * C942 + C38934 * C949 + C38937 * C306 + C38933 * C325) *
                C50763 +
            (C38940 * C6170 + C38936 * C6172 + C38939 * C1265 + C38935 * C1271 +
             C38938 * C934 + C38934 * C941 + C38937 * C295 + C38933 * C307) *
                C118) *
               C50621 * C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C2343 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C2338 +
             (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
             C36394 * C2345 + C36395 * C2340) *
                C50621 * C50908 -
            ((C37052 + C37053) * C2340 + (C37054 + C37055) * C2345 +
             (C37056 + C37057) * C2339 + (C37058 + C37059) * C2344 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C2338 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C2343) *
                C50621 * C50746) *
               C50907 +
           (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
             (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
             (C33355 * C3262 + C33353 * C3265 + C33356 * C3703 +
              C50842 * C3707) *
                 C2345 +
             (C33355 * C3266 + C33353 * C3271 + C33356 * C3706 +
              C50842 * C3709) *
                 C2340) *
                C50621 * C50746 -
            ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
             (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
             (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
                C50621 * C50908) *
               C50718) *
              C292 +
          ((((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
             (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
             (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
                C50621 * C50746 -
            (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
             (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
             (C33391 + C33390) * C2343) *
                C50621 * C50908) *
               C50907 +
           (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
             (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
             (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
                C50621 * C50908 -
            ((C33356 * C3704 + C50842 * C3708 + C33355 * C3268 +
              C33353 * C3272) *
                 C2340 +
             (C33356 * C3702 + C50842 * C3705 + C33355 * C3263 +
              C33353 * C3267) *
                 C2345 +
             (C37063 + C37062) * C2339 + (C37061 + C37060) * C2344 +
             (C34343 + C34342) * C2338 + (C34341 + C34340) * C2343) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                  C118 +
              (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                  C50763) *
                 C17235 +
             ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
             C33414 * C17237) *
                C50908 -
            (C34129 * C17237 +
             ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
             ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                  C50763 +
              (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                  C118) *
                 C17235) *
                C50746) *
               C50907 +
           ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 +
               C50842 * C1275) *
                  C118 +
              (C33355 * C938 + C33353 * C947 + C33356 * C1274 +
               C50842 * C1279) *
                  C50763) *
                 C17235 +
             ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
             ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
                C50746 -
            (C33966 * C17237 +
             ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
             ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                  C50763 +
              (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                  C118) *
                 C17235) *
                C50908) *
               C50718) *
              C292 +
          (((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
             ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
             ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
                C50746 -
            (C33415 * C17237 +
             ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
             ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
                C50908) *
               C50907 +
           ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
             ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
             ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
                C50908 -
            (((C33356 * C1268 + C50842 * C1276 + C33355 * C944 +
               C33353 * C950) *
                  C50763 +
              (C33356 * C1264 + C50842 * C1269 + C33355 * C935 +
               C33353 * C943) *
                  C118) *
                 C17237 +
             ((C34347 + C34346) * C50763 + (C34345 + C34344) * C118) * C17236 +
             ((C34343 + C34342) * C50763 + (C34341 + C34340) * C118) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
              C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                 C118 +
             (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
              C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                 C50763) *
                C50621 * C50908 -
            ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 +
              C38935 * C1910 + C38938 * C502 + C38934 * C517 + C38937 * C499 +
              C38933 * C516) *
                 C50763 +
             (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 +
              C38935 * C1906 + C38938 * C487 + C38934 * C501 + C38937 * C486 +
              C38933 * C500) *
                 C118) *
                C50621 * C50746) *
               C50907 +
           (((C38937 * C932 + C38933 * C937 + C38938 * C1267 + C38934 * C1275 +
              C38939 * C4615 + C38935 * C4623 + C38940 * C6583 +
              C38936 * C6587) *
                 C118 +
             (C38937 * C938 + C38933 * C947 + C38938 * C1274 + C38934 * C1279 +
              C38939 * C4622 + C38935 * C4627 + C38940 * C6586 +
              C38936 * C6589) *
                 C50763) *
                C50621 * C50746 -
            ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 +
              C38935 * C1279 + C38938 * C938 + C38934 * C947 + C38937 * C310 +
              C38933 * C327) *
                 C50763 +
             (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 +
              C38935 * C1275 + C38938 * C932 + C38934 * C937 + C38937 * C297 +
              C38933 * C311) *
                 C118) *
                C50621 * C50908) *
               C50718) *
              C292 +
          ((((C38937 * C485 + C38933 * C498 + C38938 * C488 + C38934 * C503 +
              C38939 * C1897 + C38935 * C1904 + C38940 * C5601 +
              C38936 * C5605) *
                 C118 +
             (C38937 * C497 + C38933 * C515 + C38938 * C504 + C38934 * C518 +
              C38939 * C1903 + C38935 * C1909 + C38940 * C5606 +
              C38936 * C5610) *
                 C50763) *
                C50621 * C50746 -
            ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
              C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                 C50763 +
             (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
              C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                 C118) *
                C50621 * C50908) *
               C50907 +
           (((C38937 * C296 + C38933 * C309 + C38938 * C933 + C38934 * C939 +
              C38939 * C1266 + C38935 * C1273 + C38940 * C4613 +
              C38936 * C4619) *
                 C118 +
             (C38937 * C308 + C38933 * C326 + C38938 * C940 + C38934 * C948 +
              C38939 * C1272 + C38935 * C1278 + C38940 * C4618 +
              C38936 * C4625) *
                 C50763) *
                C50621 * C50908 -
            ((C38940 * C6584 + C38936 * C6588 + C38939 * C4618 +
              C38935 * C4625 + C38938 * C1272 + C38934 * C1278 + C38937 * C940 +
              C38933 * C948) *
                 C50763 +
             (C38940 * C6582 + C38936 * C6585 + C38939 * C4613 +
              C38935 * C4619 + C38938 * C1266 + C38934 * C1273 + C38937 * C933 +
              C38933 * C939) *
                 C118) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C33355 * C119 + C33353 * C126 + C33356 * C486 +
                 C50842 * C500) *
                    C118 +
                (C33355 * C127 + C33353 * C140 + C33356 * C499 +
                 C50842 * C516) *
                    C50763) *
                   C17235 +
               ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) *
                   C17236 +
               C33414 * C17237) *
                  C50682 * C50666 * C113 -
              (C33415 * C17237 +
               ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) *
                   C17236 +
               ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) *
                   C17235) *
                  C50682 * C50666 * C114 +
              (C33414 * C17235 +
               ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) *
                   C17236 +
               ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) *
                   C17237) *
                  C50682 * C50666 * C115 -
              (((C33356 * C789 + C50842 * C791 + C33355 * C137 +
                 C33353 * C145) *
                    C50763 +
                (C33356 * C788 + C50842 * C790 + C33355 * C124 +
                 C33353 * C136) *
                    C118) *
                   C17237 +
               ((C33405 + C33404) * C50763 + (C33403 + C33402) * C118) *
                   C17236 +
               C33415 * C17235) *
                  C50682 * C50666 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C33355 * C119 + C33353 * C126 + C33356 * C486 +
                  C50842 * C500) *
                     C118 +
                 (C33355 * C127 + C33353 * C140 + C33356 * C499 +
                  C50842 * C516) *
                     C50763) *
                    C17235 +
                ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) *
                    C17236 +
                C33414 * C17237) *
                   C50682 * C289 -
               (((C33594 + C33595) * C50763 + (C33596 + C33597) * C118) *
                    C17237 +
                ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) *
                    C17236 +
                ((C33356 * C938 + C50842 * C947 + C33355 * C310 +
                  C33353 * C327) *
                     C50763 +
                 (C33356 * C932 + C50842 * C937 + C33355 * C297 +
                  C33353 * C311) *
                     C118) *
                    C17235) *
                   C50682 * C290 +
               (((C33355 * C298 + C33353 * C312 + C33356 * C1614 +
                  C50842 * C1622) *
                     C118 +
                 (C33355 * C313 + C33353 * C328 + C33356 * C1621 +
                  C50842 * C1626) *
                     C50763) *
                    C17235 +
                ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) *
                    C17236 +
                ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) *
                    C17237) *
                   C50682 * C291) *
                  C292 +
              ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) *
                    C17235 +
                ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) *
                    C17236 +
                ((C33355 * C294 + C33353 * C305 + C33356 * C935 +
                  C50842 * C943) *
                     C118 +
                 (C33355 * C304 + C33353 * C324 + C33356 * C944 +
                  C50842 * C950) *
                     C50763) *
                    C17237) *
                   C50682 * C290 -
               (C33415 * C17237 +
                ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) *
                    C17236 +
                ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) *
                    C17235) *
                   C50682 * C289 -
               (((C33356 * C1615 + C50842 * C1623 + C33355 * C319 +
                  C33353 * C331) *
                     C50763 +
                 (C33356 * C1611 + C50842 * C1616 + C33355 * C301 +
                  C33353 * C318) *
                     C118) *
                    C17237 +
                ((C33609 + C33608) * C50763 + (C33607 + C33606) * C118) *
                    C17236 +
                ((C33605 + C33604) * C50763 + (C33603 + C33602) * C118) *
                    C17235) *
                   C50682 * C291) *
                  C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C480 -
           (((C33788 + C33789) * C50763 + (C33790 + C33791) * C118) * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C481 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C118 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50763) *
                C17235 +
            ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
            ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
               C482) *
              C50666 * C292 +
          ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
            ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
            ((C33355 * C483 + C33353 * C494 + C33356 * C490 + C50842 * C507) *
                 C118 +
             (C33355 * C493 + C33353 * C513 + C33356 * C508 + C50842 * C520) *
                 C50763) *
                C17237) *
               C481 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C480 -
           (((C33356 * C1899 + C50842 * C1907 + C33355 * C508 + C33353 * C520) *
                 C50763 +
             (C33356 * C1895 + C50842 * C1900 + C33355 * C490 + C33353 * C507) *
                 C118) *
                C17237 +
            ((C33803 + C33802) * C50763 + (C33801 + C33800) * C118) * C17236 +
            ((C33799 + C33798) * C50763 + (C33797 + C33796) * C118) * C17235) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C33355 * C297 + C33353 * C311 + C33356 * C932 + C50842 * C937) *
               C2344 +
           (C33355 * C310 + C33353 * C327 + C33356 * C938 + C50842 * C947) *
               C2339 +
           (C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
               C2345 +
           (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
               C2340) *
              C50621 * C50682 * C50666 * C113 -
          ((C33605 + C33604) * C2340 + (C33603 + C33602) * C2345 +
           (C33598 + C33599) * C2339 + (C33600 + C33601) * C2344 +
           (C33393 + C33392) * C2338 + (C33391 + C33390) * C2343) *
              C50621 * C50682 * C50666 * C114 +
          (C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
           (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
           (C33608 + C33609) * C2340) *
              C50621 * C50682 * C50666 * C115 -
          ((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
               C2340 +
           (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
               C2345 +
           (C33965 + C33964) * C2339 + (C33963 + C33962) * C2344 +
           C33408 * C2338 + C33409 * C2343) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C289 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C290 +
           (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 +
            (C33355 * C2510 + C33353 * C2513 + C33356 * C4209 +
             C50842 * C4213) *
                C2345 +
            (C33355 * C2514 + C33353 * C2519 + C33356 * C4212 +
             C50842 * C4215) *
                C2340) *
               C50621 * C50682 * C291) *
              C292 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C290 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C289 -
           ((C33356 * C4210 + C50842 * C4214 + C33355 * C2516 +
             C33353 * C2520) *
                C2340 +
            (C33356 * C4208 + C50842 * C4211 + C33355 * C2511 +
             C33353 * C2515) *
                C2345 +
            (C36393 + C36392) * C2339 + (C36391 + C36390) * C2344 +
            C36376 * C2338 + C36377 * C2343) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C480 -
           ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
             C33353 * C1626) *
                C2340 +
            (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
             C33353 * C1622) *
                C2345 +
            (C33356 * C1274 + C50842 * C1279 + C33355 * C938 + C33353 * C947) *
                C2339 +
            (C33356 * C1267 + C50842 * C1275 + C33355 * C932 + C33353 * C937) *
                C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C481 +
           ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C2343 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C2338 +
            (C33355 * C1267 + C33353 * C1275 + C33356 * C4615 +
             C50842 * C4623) *
                C2344 +
            (C33355 * C1274 + C33353 * C1279 + C33356 * C4622 +
             C50842 * C4627) *
                C2339 +
            (C33355 * C2716 + C33353 * C2719 + C33356 * C4614 +
             C50842 * C4621) *
                C2345 +
            (C33355 * C2720 + C33353 * C2725 + C33356 * C4620 +
             C50842 * C4626) *
                C2340) *
               C50621 * C482) *
              C50666 * C292 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C33355 * C1613 + C33353 * C1620 + C33356 * C2717 +
             C50842 * C2721) *
                C2345 +
            (C33355 * C1619 + C33353 * C1625 + C33356 * C2722 +
             C50842 * C2726) *
                C2340) *
               C50621 * C481 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C480 -
           ((C33356 * C4616 + C50842 * C4624 + C33355 * C2722 +
             C33353 * C2726) *
                C2340 +
            (C33356 * C4612 + C50842 * C4617 + C33355 * C2717 +
             C33353 * C2721) *
                C2345 +
            (C33356 * C4618 + C50842 * C4625 + C33355 * C1272 +
             C33353 * C1278) *
                C2339 +
            (C33356 * C4613 + C50842 * C4619 + C33355 * C1266 +
             C33353 * C1273) *
                C2344 +
            (C33799 + C33798) * C2338 + (C33797 + C33796) * C2343) *
               C50621 * C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
            C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
               C118 +
           (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
            C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
               C50763) *
              C50621 * C50682 * C50666 * C113 -
          ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
            C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
               C50763 +
           (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
            C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
               C118) *
              C50621 * C50682 * C50666 * C114 +
          ((C38937 * C121 + C38933 * C130 + C38938 * C484 + C38934 * C496 +
            C38939 * C489 + C38935 * C505 + C38940 * C1896 + C38936 * C1902) *
               C118 +
           (C38937 * C131 + C38933 * C142 + C38938 * C495 + C38934 * C514 +
            C38939 * C506 + C38935 * C519 + C38940 * C1901 + C38936 * C1908) *
               C50763) *
              C50621 * C50682 * C50666 * C115 -
          ((C38940 * C1899 + C38936 * C1907 + C38939 * C508 + C38935 * C520 +
            C38938 * C493 + C38934 * C513 + C38937 * C133 + C38933 * C143) *
               C50763 +
           (C38940 * C1895 + C38936 * C1900 + C38939 * C490 + C38935 * C507 +
            C38938 * C483 + C38934 * C494 + C38937 * C122 + C38933 * C132) *
               C118) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50682 * C289 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C50682 * C290 +
           ((C38937 * C298 + C38933 * C312 + C38938 * C1614 + C38934 * C1622 +
             C38939 * C2716 + C38935 * C2719 + C38940 * C4614 +
             C38936 * C4621) *
                C118 +
            (C38937 * C313 + C38933 * C328 + C38938 * C1621 + C38934 * C1626 +
             C38939 * C2720 + C38935 * C2725 + C38940 * C4620 +
             C38936 * C4626) *
                C50763) *
               C50621 * C50682 * C291) *
              C292 +
          (((C38937 * C296 + C38933 * C309 + C38938 * C933 + C38934 * C939 +
             C38939 * C1266 + C38935 * C1273 + C38940 * C4613 +
             C38936 * C4619) *
                C118 +
            (C38937 * C308 + C38933 * C326 + C38938 * C940 + C38934 * C948 +
             C38939 * C1272 + C38935 * C1278 + C38940 * C4618 +
             C38936 * C4625) *
                C50763) *
               C50621 * C50682 * C290 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C50682 * C289 -
           ((C38940 * C4616 + C38936 * C4624 + C38939 * C2722 + C38935 * C2726 +
             C38938 * C1619 + C38934 * C1625 + C38937 * C315 + C38933 * C329) *
                C50763 +
            (C38940 * C4612 + C38936 * C4617 + C38939 * C2717 + C38935 * C2721 +
             C38938 * C1613 + C38934 * C1620 + C38937 * C299 + C38933 * C314) *
                C118) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C480 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C481 +
           ((C38937 * C487 + C38933 * C501 + C38938 * C1898 + C38934 * C1906 +
             C38939 * C5600 + C38935 * C5603 + C38940 * C7467 +
             C38936 * C7471) *
                C118 +
            (C38937 * C502 + C38933 * C517 + C38938 * C1905 + C38934 * C1910 +
             C38939 * C5604 + C38935 * C5609 + C38940 * C7470 +
             C38936 * C7473) *
                C50763) *
               C50621 * C482) *
              C50666 * C292 +
          (((C38937 * C485 + C38933 * C498 + C38938 * C488 + C38934 * C503 +
             C38939 * C1897 + C38935 * C1904 + C38940 * C5601 +
             C38936 * C5605) *
                C118 +
            (C38937 * C497 + C38933 * C515 + C38938 * C504 + C38934 * C518 +
             C38939 * C1903 + C38935 * C1909 + C38940 * C5606 +
             C38936 * C5610) *
                C50763) *
               C50621 * C481 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C480 -
           ((C38940 * C7468 + C38936 * C7472 + C38939 * C5606 + C38935 * C5610 +
             C38938 * C1903 + C38934 * C1909 + C38937 * C504 + C38933 * C518) *
                C50763 +
            (C38940 * C7466 + C38936 * C7469 + C38939 * C5601 + C38935 * C5605 +
             C38938 * C1897 + C38934 * C1904 + C38937 * C488 + C38933 * C503) *
                C118) *
               C50621 * C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50908 -
           ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
             C33353 * C1626) *
                C2340 +
            (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
             C33353 * C1622) *
                C2345 +
            (C33356 * C1274 + C50842 * C1279 + C33355 * C938 + C33353 * C947) *
                C2339 +
            (C33356 * C1267 + C50842 * C1275 + C33355 * C932 + C33353 * C937) *
                C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C50666 * C50950 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C33355 * C1613 + C33353 * C1620 + C33356 * C2717 +
             C50842 * C2721) *
                C2345 +
            (C33355 * C1619 + C33353 * C1625 + C33356 * C2722 +
             C50842 * C2726) *
                C2340) *
               C50621 * C50746 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50908) *
              C50666 * C50951 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C50908 -
           ((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
             C33353 * C1624) *
                C2340 +
            (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
             C33353 * C1618) *
                C2345 +
            (C34347 + C34346) * C2339 + (C34345 + C34344) * C2344 +
            C34113 * C2338 + C34114 * C2343) *
               C50621 * C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50908 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C50666 * C50950 +
          ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
            ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
            ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
               C50746 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50908) *
              C50666 * C50951 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C50908 -
           (((C33356 * C511 + C50842 * C522 + C33355 * C510 + C33353 * C521) *
                 C50763 +
             (C33356 * C492 + C50842 * C512 + C33355 * C491 + C33353 * C509) *
                 C118) *
                C17237 +
            ((C34128 + C34127) * C50763 + (C34126 + C34125) * C118) * C17236 +
            C34129 * C17235) *
               C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50908 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C50746) *
              C50666 * C50950 +
          (((C38937 * C485 + C38933 * C498 + C38938 * C488 + C38934 * C503 +
             C38939 * C1897 + C38935 * C1904 + C38940 * C5601 +
             C38936 * C5605) *
                C118 +
            (C38937 * C497 + C38933 * C515 + C38938 * C504 + C38934 * C518 +
             C38939 * C1903 + C38935 * C1909 + C38940 * C5606 +
             C38936 * C5610) *
                C50763) *
               C50621 * C50746 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C50908) *
              C50666 * C50951 +
          (((C38937 * C121 + C38933 * C130 + C38938 * C484 + C38934 * C496 +
             C38939 * C489 + C38935 * C505 + C38940 * C1896 + C38936 * C1902) *
                C118 +
            (C38937 * C131 + C38933 * C142 + C38938 * C495 + C38934 * C514 +
             C38939 * C506 + C38935 * C519 + C38940 * C1901 + C38936 * C1908) *
                C50763) *
               C50621 * C50908 -
           ((C38940 * C5607 + C38936 * C5611 + C38939 * C1901 + C38935 * C1908 +
             C38938 * C506 + C38934 * C519 + C38937 * C495 + C38933 * C514) *
                C50763 +
            (C38940 * C5602 + C38936 * C5608 + C38939 * C1896 + C38935 * C1902 +
             C38938 * C489 + C38934 * C505 + C38937 * C484 + C38933 * C496) *
                C118) *
               C50621 * C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C289 -
           (((C33594 + C33595) * C50763 + (C33596 + C33597) * C118) * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C290 +
           (((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C50682 * C291) *
              C292 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33355 * C294 + C33353 * C305 + C33356 * C935 + C50842 * C943) *
                 C118 +
             (C33355 * C304 + C33353 * C324 + C33356 * C944 + C50842 * C950) *
                 C50763) *
                C17237) *
               C50682 * C290 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C289 -
           (((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
                 C50763 +
             (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
                 C118) *
                C17237 +
            ((C33609 + C33608) * C50763 + (C33607 + C33606) * C118) * C17236 +
            ((C33605 + C33604) * C50763 + (C33603 + C33602) * C118) * C17235) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C118 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50763) *
               C17235 +
           ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
           C33414 * C17237) *
              C50682 * C50666 * C113 -
          (C33415 * C17237 +
           ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
           ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
              C50682 * C50666 * C114 +
          (C33414 * C17235 +
           ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
           ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
              C50682 * C50666 * C115 -
          (((C33356 * C789 + C50842 * C791 + C33355 * C137 + C33353 * C145) *
                C50763 +
            (C33356 * C788 + C50842 * C790 + C33355 * C124 + C33353 * C136) *
                C118) *
               C17237 +
           ((C33405 + C33404) * C50763 + (C33403 + C33402) * C118) * C17236 +
           C33415 * C17235) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C33355 * C297 + C33353 * C311 + C33356 * C932 + C50842 * C937) *
               C2344 +
           (C33355 * C310 + C33353 * C327 + C33356 * C938 + C50842 * C947) *
               C2339 +
           (C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
               C2345 +
           (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
               C2340) *
              C50621 * C50682 * C50666 * C113 -
          ((C33605 + C33604) * C2340 + (C33603 + C33602) * C2345 +
           (C33598 + C33599) * C2339 + (C33600 + C33601) * C2344 +
           (C33393 + C33392) * C2338 + (C33391 + C33390) * C2343) *
              C50621 * C50682 * C50666 * C114 +
          (C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
           (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
           (C33608 + C33609) * C2340) *
              C50621 * C50682 * C50666 * C115 -
          ((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
               C2340 +
           (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
               C2345 +
           (C33965 + C33964) * C2339 + (C33963 + C33962) * C2344 +
           C33408 * C2338 + C33409 * C2343) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C289 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C290 +
           (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 +
            (C33355 * C2510 + C33353 * C2513 + C33356 * C4209 +
             C50842 * C4213) *
                C2345 +
            (C33355 * C2514 + C33353 * C2519 + C33356 * C4212 +
             C50842 * C4215) *
                C2340) *
               C50621 * C50682 * C291) *
              C292 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C290 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C289 -
           ((C33356 * C4210 + C50842 * C4214 + C33355 * C2516 +
             C33353 * C2520) *
                C2340 +
            (C33356 * C4208 + C50842 * C4211 + C33355 * C2511 +
             C33353 * C2515) *
                C2345 +
            (C36393 + C36392) * C2339 + (C36391 + C36390) * C2344 +
            C36376 * C2338 + C36377 * C2343) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
            C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
               C118 +
           (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
            C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
               C50763) *
              C50621 * C50682 * C50666 * C113 -
          ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
            C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
               C50763 +
           (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
            C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
               C118) *
              C50621 * C50682 * C50666 * C114 +
          ((C38937 * C121 + C38933 * C130 + C38938 * C484 + C38934 * C496 +
            C38939 * C489 + C38935 * C505 + C38940 * C1896 + C38936 * C1902) *
               C118 +
           (C38937 * C131 + C38933 * C142 + C38938 * C495 + C38934 * C514 +
            C38939 * C506 + C38935 * C519 + C38940 * C1901 + C38936 * C1908) *
               C50763) *
              C50621 * C50682 * C50666 * C115 -
          ((C38940 * C1899 + C38936 * C1907 + C38939 * C508 + C38935 * C520 +
            C38938 * C493 + C38934 * C513 + C38937 * C133 + C38933 * C143) *
               C50763 +
           (C38940 * C1895 + C38936 * C1900 + C38939 * C490 + C38935 * C507 +
            C38938 * C483 + C38934 * C494 + C38937 * C122 + C38933 * C132) *
               C118) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50682 * C289 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C50682 * C290 +
           ((C38937 * C298 + C38933 * C312 + C38938 * C1614 + C38934 * C1622 +
             C38939 * C2716 + C38935 * C2719 + C38940 * C4614 +
             C38936 * C4621) *
                C118 +
            (C38937 * C313 + C38933 * C328 + C38938 * C1621 + C38934 * C1626 +
             C38939 * C2720 + C38935 * C2725 + C38940 * C4620 +
             C38936 * C4626) *
                C50763) *
               C50621 * C50682 * C291) *
              C292 +
          (((C38937 * C296 + C38933 * C309 + C38938 * C933 + C38934 * C939 +
             C38939 * C1266 + C38935 * C1273 + C38940 * C4613 +
             C38936 * C4619) *
                C118 +
            (C38937 * C308 + C38933 * C326 + C38938 * C940 + C38934 * C948 +
             C38939 * C1272 + C38935 * C1278 + C38940 * C4618 +
             C38936 * C4625) *
                C50763) *
               C50621 * C50682 * C290 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C50682 * C289 -
           ((C38940 * C4616 + C38936 * C4624 + C38939 * C2722 + C38935 * C2726 +
             C38938 * C1619 + C38934 * C1625 + C38937 * C315 + C38933 * C329) *
                C50763 +
            (C38940 * C4612 + C38936 * C4617 + C38939 * C2717 + C38935 * C2721 +
             C38938 * C1613 + C38934 * C1620 + C38937 * C299 + C38933 * C314) *
                C118) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C50952 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C50682 * C50953 +
           (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
            (C37320 + C37321) * C2340) *
               C50621 * C50682 * C1380) *
              C50899 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C50953 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C50952 -
           ((C33356 * C4210 + C50842 * C4214 + C33355 * C2516 +
             C33353 * C2520) *
                C2340 +
            (C33356 * C4208 + C50842 * C4211 + C33355 * C2511 +
             C33353 * C2515) *
                C2345 +
            (C36393 + C36392) * C2339 + (C36391 + C36390) * C2344 +
            C36376 * C2338 + C36377 * C2343) *
               C50621 * C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C50952 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C50953 +
           (((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C50682 * C1380) *
              C50899 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
               C50682 * C50953 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C50952 -
           (((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
                 C50763 +
             (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
                 C118) *
                C17237 +
            ((C33609 + C33608) * C50763 + (C33607 + C33606) * C118) * C17236 +
            ((C33605 + C33604) * C50763 + (C33603 + C33602) * C118) * C17235) *
               C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50682 * C50952 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C50682 * C50953 +
           ((C38937 * C298 + C38933 * C312 + C38938 * C1614 + C38934 * C1622 +
             C38939 * C2716 + C38935 * C2719 + C38940 * C4614 +
             C38936 * C4621) *
                C118 +
            (C38937 * C313 + C38933 * C328 + C38938 * C1621 + C38934 * C1626 +
             C38939 * C2720 + C38935 * C2725 + C38940 * C4620 +
             C38936 * C4626) *
                C50763) *
               C50621 * C50682 * C1380) *
              C50899 +
          (((C38937 * C296 + C38933 * C309 + C38938 * C933 + C38934 * C939 +
             C38939 * C1266 + C38935 * C1273 + C38940 * C4613 +
             C38936 * C4619) *
                C118 +
            (C38937 * C308 + C38933 * C326 + C38938 * C940 + C38934 * C948 +
             C38939 * C1272 + C38935 * C1278 + C38940 * C4618 +
             C38936 * C4625) *
                C50763) *
               C50621 * C50682 * C50953 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C50682 * C50952 -
           ((C38940 * C4616 + C38936 * C4624 + C38939 * C2722 + C38935 * C2726 +
             C38938 * C1619 + C38934 * C1625 + C38937 * C315 + C38933 * C329) *
                C50763 +
            (C38940 * C4612 + C38936 * C4617 + C38939 * C2717 + C38935 * C2721 +
             C38938 * C1613 + C38934 * C1620 + C38937 * C299 + C38933 * C314) *
                C118) *
               C50621 * C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50908 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C50952 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
               C50621 * C50746 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C50908) *
              C50953 +
          ((C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
            (C37320 + C37321) * C2340) *
               C50621 * C50908 -
           ((C33356 * C20716 + C50842 * C20718 + C33355 * C4212 +
             C33353 * C4215) *
                C2340 +
            (C33356 * C20715 + C50842 * C20717 + C33355 * C4209 +
             C33353 * C4213) *
                C2345 +
            (C37991 + C37990) * C2339 + (C37989 + C37988) * C2344 +
            C37978 * C2338 + C37979 * C2343) *
               C50621 * C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50908 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C50952 +
          ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 + C50842 * C1275) *
                 C118 +
             (C33355 * C938 + C33353 * C947 + C33356 * C1274 + C50842 * C1279) *
                 C50763) *
                C17235 +
            ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
            ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
               C50746 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50908) *
              C50953 +
          ((((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C50908 -
           (((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
              C33353 * C1624) *
                 C50763 +
             (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
              C33353 * C1618) *
                 C118) *
                C17237 +
            ((C33356 * C2722 + C50842 * C2726 + C33355 * C1619 +
              C33353 * C1625) *
                 C50763 +
             (C33356 * C2717 + C50842 * C2721 + C33355 * C1613 +
              C33353 * C1620) *
                 C118) *
                C17236 +
            ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
              C33353 * C1626) *
                 C50763 +
             (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
              C33353 * C1622) *
                 C118) *
                C17235) *
               C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50908 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C50746) *
              C50952 +
          (((C38937 * C932 + C38933 * C937 + C38938 * C1267 + C38934 * C1275 +
             C38939 * C4615 + C38935 * C4623 + C38940 * C6583 +
             C38936 * C6587) *
                C118 +
            (C38937 * C938 + C38933 * C947 + C38938 * C1274 + C38934 * C1279 +
             C38939 * C4622 + C38935 * C4627 + C38940 * C6586 +
             C38936 * C6589) *
                C50763) *
               C50621 * C50746 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C50908) *
              C50953 +
          (((C38937 * C298 + C38933 * C312 + C38938 * C1614 + C38934 * C1622 +
             C38939 * C2716 + C38935 * C2719 + C38940 * C4614 +
             C38936 * C4621) *
                C118 +
            (C38937 * C313 + C38933 * C328 + C38938 * C1621 + C38934 * C1626 +
             C38939 * C2720 + C38935 * C2725 + C38940 * C4620 +
             C38936 * C4626) *
                C50763) *
               C50621 * C50908 -
           ((C38940 * C22992 + C38936 * C22994 + C38939 * C4620 +
             C38935 * C4626 + C38938 * C2720 + C38934 * C2725 + C38937 * C1621 +
             C38933 * C1626) *
                C50763 +
            (C38940 * C22991 + C38936 * C22993 + C38939 * C4614 +
             C38935 * C4621 + C38938 * C2716 + C38934 * C2719 + C38937 * C1614 +
             C38933 * C1622) *
                C118) *
               C50621 * C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C33355 * C119 + C33353 * C126 + C33356 * C486 +
                  C50842 * C500) *
                     C118 +
                 (C33355 * C127 + C33353 * C140 + C33356 * C499 +
                  C50842 * C516) *
                     C50763) *
                    C17235 +
                ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) *
                    C17236 +
                C33414 * C17237) *
                   C50682 * C1074 -
               (C33966 * C17237 +
                ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) *
                    C17236 +
                ((C33356 * C938 + C50842 * C947 + C33355 * C310 +
                  C33353 * C327) *
                     C50763 +
                 (C33356 * C932 + C50842 * C937 + C33355 * C297 +
                  C33353 * C311) *
                     C118) *
                    C17235) *
                   C50682 * C50718) *
                  C1076 +
              ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) *
                    C17235 +
                ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) *
                    C17236 +
                ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) *
                    C17237) *
                   C50682 * C50718 -
               (C33415 * C17237 +
                ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) *
                    C17236 +
                ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) *
                    C17235) *
                   C50682 * C1074) *
                  C1077 +
              ((C33414 * C17235 +
                ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) *
                    C17236 +
                ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) *
                    C17237) *
                   C50682 * C1074 -
               (((C33356 * C945 + C50842 * C951 + C33355 * C321 +
                  C33353 * C332) *
                     C50763 +
                 (C33356 * C936 + C50842 * C946 + C33355 * C302 +
                  C33353 * C320) *
                     C118) *
                    C17237 +
                ((C33965 + C33964) * C50763 + (C33963 + C33962) * C118) *
                    C17236 +
                C33966 * C17235) *
                   C50682 * C50718) *
                  C1078) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C33355 * C119 + C33353 * C126 + C33356 * C486 +
                 C50842 * C500) *
                    C118 +
                (C33355 * C127 + C33353 * C140 + C33356 * C499 +
                 C50842 * C516) *
                    C50763) *
                   C17235 +
               ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) *
                   C17236 +
               C33414 * C17237) *
                  C50682 * C1145 -
              (C33966 * C17237 +
               ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) *
                   C17236 +
               ((C33356 * C938 + C50842 * C947 + C33355 * C310 +
                 C33353 * C327) *
                    C50763 +
                (C33356 * C932 + C50842 * C937 + C33355 * C297 +
                 C33353 * C311) *
                    C118) *
                   C17235) *
                  C50682 * C1146 +
              (((C33355 * C298 + C33353 * C312 + C33356 * C1614 +
                 C50842 * C1622) *
                    C118 +
                (C33355 * C313 + C33353 * C328 + C33356 * C1621 +
                 C50842 * C1626) *
                    C50763) *
                   C17235 +
               ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) *
                   C17236 +
               ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) *
                   C17237) *
                  C50682 * C1147 -
              (((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
                 C33353 * C1163) *
                    C50763 +
                (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
                 C33353 * C1157) *
                    C118) *
                   C17237 +
               ((C33356 * C3268 + C50842 * C3272 + C33355 * C1158 +
                 C33353 * C1164) *
                    C50763 +
                (C33356 * C3263 + C50842 * C3267 + C33355 * C1152 +
                 C33353 * C1159) *
                    C118) *
                   C17236 +
               ((C33356 * C3266 + C50842 * C3271 + C33355 * C1160 +
                 C33353 * C1165) *
                    C50763 +
                (C33356 * C3262 + C50842 * C3265 + C33355 * C1153 +
                 C33353 * C1161) *
                    C118) *
                   C17235) *
                  C50682 * C1148) *
             C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C480 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C481 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C118 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50763) *
                C17235 +
            ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
            ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
               C482) *
              C1074 +
          ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 + C50842 * C1275) *
                 C118 +
             (C33355 * C938 + C33353 * C947 + C33356 * C1274 + C50842 * C1279) *
                 C50763) *
                C17235 +
            ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
            ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
               C481 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C480 -
           (((C33356 * C6171 + C50842 * C6173 + C33355 * C1270 +
              C33353 * C1277) *
                 C50763 +
             (C33356 * C6170 + C50842 * C6172 + C33355 * C1265 +
              C33353 * C1271) *
                 C118) *
                C17237 +
            ((C33356 * C4618 + C50842 * C4625 + C33355 * C1272 +
              C33353 * C1278) *
                 C50763 +
             (C33356 * C4613 + C50842 * C4619 + C33355 * C1266 +
              C33353 * C1273) *
                 C118) *
                C17236 +
            ((C33356 * C4622 + C50842 * C4627 + C33355 * C1274 +
              C33353 * C1279) *
                 C50763 +
             (C33356 * C4615 + C50842 * C4623 + C33355 * C1267 +
              C33353 * C1275) *
                 C118) *
                C17235) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C1074 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C50718) *
              C1076 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C50718 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C50682 * C1074 -
           ((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
             C33353 * C1163) *
                C2340 +
            (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
             C33353 * C1157) *
                C2345 +
            (C33609 + C33608) * C2339 + (C33607 + C33606) * C2344 +
            C33950 * C2338 + C33951 * C2343) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
           C36394 * C2345 + C36395 * C2340) *
              C50621 * C50682 * C1145 -
          (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
           (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
           (C36379 + C36378) * C2343) *
              C50621 * C50682 * C1146 +
          (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
           (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
           (C37320 + C37321) * C2340) *
              C50621 * C50682 * C1147 -
          ((C33356 * C21052 + C50842 * C21054 + C33355 * C3546 +
            C33353 * C3549) *
               C2340 +
           (C33356 * C21051 + C50842 * C21053 + C33355 * C3543 +
            C33353 * C3547) *
               C2345 +
           (C37321 + C37320) * C2339 + (C37319 + C37318) * C2344 +
           C37308 * C2338 + C37309 * C2343) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C480 -
           ((C37052 + C37053) * C2340 + (C37054 + C37055) * C2345 +
            (C37056 + C37057) * C2339 + (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C481 +
           ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C2343 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C2338 +
            (C37484 + C37485) * C2344 + (C37486 + C37487) * C2339 +
            (C37488 + C37489) * C2345 + (C37490 + C37491) * C2340) *
               C50621 * C482) *
              C1074 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C33355 * C3262 + C33353 * C3265 + C33356 * C3703 +
             C50842 * C3707) *
                C2345 +
            (C33355 * C3266 + C33353 * C3271 + C33356 * C3706 +
             C50842 * C3709) *
                C2340) *
               C50621 * C481 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C480 -
           ((C33356 * C21324 + C50842 * C21326 + C33355 * C3706 +
             C33353 * C3709) *
                C2340 +
            (C33356 * C21323 + C50842 * C21325 + C33355 * C3703 +
             C33353 * C3707) *
                C2345 +
            (C37491 + C37490) * C2339 + (C37489 + C37488) * C2344 +
            (C37487 + C37486) * C2338 + (C37485 + C37484) * C2343) *
               C50621 * C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50682 * C1074 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C50682 * C50718) *
              C1076 +
          (((C38937 * C296 + C38933 * C309 + C38938 * C933 + C38934 * C939 +
             C38939 * C1266 + C38935 * C1273 + C38940 * C4613 +
             C38936 * C4619) *
                C118 +
            (C38937 * C308 + C38933 * C326 + C38938 * C940 + C38934 * C948 +
             C38939 * C1272 + C38935 * C1278 + C38940 * C4618 +
             C38936 * C4625) *
                C50763) *
               C50621 * C50682 * C50718 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C50682 * C1074) *
              C1077 +
          (((C38937 * C121 + C38933 * C130 + C38938 * C484 + C38934 * C496 +
             C38939 * C489 + C38935 * C505 + C38940 * C1896 + C38936 * C1902) *
                C118 +
            (C38937 * C131 + C38933 * C142 + C38938 * C495 + C38934 * C514 +
             C38939 * C506 + C38935 * C519 + C38940 * C1901 + C38936 * C1908) *
                C50763) *
               C50621 * C50682 * C1074 -
           ((C38940 * C6171 + C38936 * C6173 + C38939 * C1270 + C38935 * C1277 +
             C38938 * C942 + C38934 * C949 + C38937 * C306 + C38933 * C325) *
                C50763 +
            (C38940 * C6170 + C38936 * C6172 + C38939 * C1265 + C38935 * C1271 +
             C38938 * C934 + C38934 * C941 + C38937 * C295 + C38933 * C307) *
                C118) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
            C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
               C118 +
           (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
            C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
               C50763) *
              C50621 * C50682 * C1145 -
          ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
            C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
               C50763 +
           (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
            C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
               C118) *
              C50621 * C50682 * C1146 +
          ((C38937 * C298 + C38933 * C312 + C38938 * C1614 + C38934 * C1622 +
            C38939 * C2716 + C38935 * C2719 + C38940 * C4614 + C38936 * C4621) *
               C118 +
           (C38937 * C313 + C38933 * C328 + C38938 * C1621 + C38934 * C1626 +
            C38939 * C2720 + C38935 * C2725 + C38940 * C4620 + C38936 * C4626) *
               C50763) *
              C50621 * C50682 * C1147 -
          ((C38940 * C21324 + C38936 * C21326 + C38939 * C3706 +
            C38935 * C3709 + C38938 * C3266 + C38934 * C3271 + C38937 * C1160 +
            C38933 * C1165) *
               C50763 +
           (C38940 * C21323 + C38936 * C21325 + C38939 * C3703 +
            C38935 * C3707 + C38938 * C3262 + C38934 * C3265 + C38937 * C1153 +
            C38933 * C1161) *
               C118) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C480 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C481 +
           ((C38937 * C487 + C38933 * C501 + C38938 * C1898 + C38934 * C1906 +
             C38939 * C5600 + C38935 * C5603 + C38940 * C7467 +
             C38936 * C7471) *
                C118 +
            (C38937 * C502 + C38933 * C517 + C38938 * C1905 + C38934 * C1910 +
             C38939 * C5604 + C38935 * C5609 + C38940 * C7470 +
             C38936 * C7473) *
                C50763) *
               C50621 * C482) *
              C1074 +
          (((C38937 * C932 + C38933 * C937 + C38938 * C1267 + C38934 * C1275 +
             C38939 * C4615 + C38935 * C4623 + C38940 * C6583 +
             C38936 * C6587) *
                C118 +
            (C38937 * C938 + C38933 * C947 + C38938 * C1274 + C38934 * C1279 +
             C38939 * C4622 + C38935 * C4627 + C38940 * C6586 +
             C38936 * C6589) *
                C50763) *
               C50621 * C481 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C480 -
           ((C38940 * C23908 + C38936 * C23910 + C38939 * C6586 +
             C38935 * C6589 + C38938 * C4622 + C38934 * C4627 + C38937 * C1274 +
             C38933 * C1279) *
                C50763 +
            (C38940 * C23907 + C38936 * C23909 + C38939 * C6583 +
             C38935 * C6587 + C38938 * C4615 + C38934 * C4623 + C38937 * C1267 +
             C38933 * C1275) *
                C118) *
               C50621 * C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C2343 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C2338 +
             (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
             C36394 * C2345 + C36395 * C2340) *
                C50621 * C50908 -
            ((C37052 + C37053) * C2340 + (C37054 + C37055) * C2345 +
             (C37056 + C37057) * C2339 + (C37058 + C37059) * C2344 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C2338 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C2343) *
                C50621 * C50746) *
               C1074 +
           (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
             (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
             (C33355 * C3262 + C33353 * C3265 + C33356 * C3703 +
              C50842 * C3707) *
                 C2345 +
             (C33355 * C3266 + C33353 * C3271 + C33356 * C3706 +
              C50842 * C3709) *
                 C2340) *
                C50621 * C50746 -
            (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
             (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
             (C36379 + C36378) * C2343) *
                C50621 * C50908) *
               C50718) *
              C50899 +
          ((((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
             (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
             (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
                C50621 * C50746 -
            (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
             (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
             (C33391 + C33390) * C2343) *
                C50621 * C50908) *
               C1074 +
           (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
             (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
             (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
                C50621 * C50908 -
            ((C33356 * C3704 + C50842 * C3708 + C33355 * C3268 +
              C33353 * C3272) *
                 C2340 +
             (C33356 * C3702 + C50842 * C3705 + C33355 * C3263 +
              C33353 * C3267) *
                 C2345 +
             (C37063 + C37062) * C2339 + (C37061 + C37060) * C2344 +
             (C34343 + C34342) * C2338 + (C34341 + C34340) * C2343) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                  C118 +
              (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                  C50763) *
                 C17235 +
             ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
             C33414 * C17237) *
                C50908 -
            (C34129 * C17237 +
             ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
             ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                  C50763 +
              (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                  C118) *
                 C17235) *
                C50746) *
               C1074 +
           ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 +
               C50842 * C1275) *
                  C118 +
              (C33355 * C938 + C33353 * C947 + C33356 * C1274 +
               C50842 * C1279) *
                  C50763) *
                 C17235 +
             ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
             ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
                C50746 -
            (C33966 * C17237 +
             ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
             ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                  C50763 +
              (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                  C118) *
                 C17235) *
                C50908) *
               C50718) *
              C50899 +
          (((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
             ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
             ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
                C50746 -
            (C33415 * C17237 +
             ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
             ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
                C50908) *
               C1074 +
           ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
             ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
             ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
                C50908 -
            (((C33356 * C1268 + C50842 * C1276 + C33355 * C944 +
               C33353 * C950) *
                  C50763 +
              (C33356 * C1264 + C50842 * C1269 + C33355 * C935 +
               C33353 * C943) *
                  C118) *
                 C17237 +
             ((C34347 + C34346) * C50763 + (C34345 + C34344) * C118) * C17236 +
             ((C34343 + C34342) * C50763 + (C34341 + C34340) * C118) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
              C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                 C118 +
             (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
              C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                 C50763) *
                C50621 * C50908 -
            ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 +
              C38935 * C1910 + C38938 * C502 + C38934 * C517 + C38937 * C499 +
              C38933 * C516) *
                 C50763 +
             (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 +
              C38935 * C1906 + C38938 * C487 + C38934 * C501 + C38937 * C486 +
              C38933 * C500) *
                 C118) *
                C50621 * C50746) *
               C1074 +
           (((C38937 * C932 + C38933 * C937 + C38938 * C1267 + C38934 * C1275 +
              C38939 * C4615 + C38935 * C4623 + C38940 * C6583 +
              C38936 * C6587) *
                 C118 +
             (C38937 * C938 + C38933 * C947 + C38938 * C1274 + C38934 * C1279 +
              C38939 * C4622 + C38935 * C4627 + C38940 * C6586 +
              C38936 * C6589) *
                 C50763) *
                C50621 * C50746 -
            ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 +
              C38935 * C1279 + C38938 * C938 + C38934 * C947 + C38937 * C310 +
              C38933 * C327) *
                 C50763 +
             (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 +
              C38935 * C1275 + C38938 * C932 + C38934 * C937 + C38937 * C297 +
              C38933 * C311) *
                 C118) *
                C50621 * C50908) *
               C50718) *
              C50899 +
          ((((C38937 * C485 + C38933 * C498 + C38938 * C488 + C38934 * C503 +
              C38939 * C1897 + C38935 * C1904 + C38940 * C5601 +
              C38936 * C5605) *
                 C118 +
             (C38937 * C497 + C38933 * C515 + C38938 * C504 + C38934 * C518 +
              C38939 * C1903 + C38935 * C1909 + C38940 * C5606 +
              C38936 * C5610) *
                 C50763) *
                C50621 * C50746 -
            ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
              C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                 C50763 +
             (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
              C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                 C118) *
                C50621 * C50908) *
               C1074 +
           (((C38937 * C296 + C38933 * C309 + C38938 * C933 + C38934 * C939 +
              C38939 * C1266 + C38935 * C1273 + C38940 * C4613 +
              C38936 * C4619) *
                 C118 +
             (C38937 * C308 + C38933 * C326 + C38938 * C940 + C38934 * C948 +
              C38939 * C1272 + C38935 * C1278 + C38940 * C4618 +
              C38936 * C4625) *
                 C50763) *
                C50621 * C50908 -
            ((C38940 * C6584 + C38936 * C6588 + C38939 * C4618 +
              C38935 * C4625 + C38938 * C1272 + C38934 * C1278 + C38937 * C940 +
              C38933 * C948) *
                 C50763 +
             (C38940 * C6582 + C38936 * C6585 + C38939 * C4613 +
              C38935 * C4619 + C38938 * C1266 + C38934 * C1273 + C38937 * C933 +
              C38933 * C939) *
                 C118) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C118 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50763) *
               C17235 +
           ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
           C33414 * C17237) *
              C50682 * C1145 -
          (C33966 * C17237 +
           ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
           ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                C50763 +
            (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                C118) *
               C17235) *
              C50682 * C1146 +
          (((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                C118 +
            (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                C50763) *
               C17235 +
           ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
           ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
              C50682 * C1147 -
          (((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
             C33353 * C1163) *
                C50763 +
            (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
             C33353 * C1157) *
                C118) *
               C17237 +
           ((C33356 * C3268 + C50842 * C3272 + C33355 * C1158 +
             C33353 * C1164) *
                C50763 +
            (C33356 * C3263 + C50842 * C3267 + C33355 * C1152 +
             C33353 * C1159) *
                C118) *
               C17236 +
           ((C33356 * C3266 + C50842 * C3271 + C33355 * C1160 +
             C33353 * C1165) *
                C50763 +
            (C33356 * C3262 + C50842 * C3265 + C33355 * C1153 +
             C33353 * C1161) *
                C118) *
               C17235) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C1074 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C50718) *
              C1076 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
               C50682 * C50718 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C1074) *
              C1077 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C50682 * C1074 -
           (((C33356 * C945 + C50842 * C951 + C33355 * C321 + C33353 * C332) *
                 C50763 +
             (C33356 * C936 + C50842 * C946 + C33355 * C302 + C33353 * C320) *
                 C118) *
                C17237 +
            ((C33965 + C33964) * C50763 + (C33963 + C33962) * C118) * C17236 +
            C33966 * C17235) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C1074 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C50718) *
              C1076 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C50718 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C50682 * C1074 -
           ((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
             C33353 * C1163) *
                C2340 +
            (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
             C33353 * C1157) *
                C2345 +
            (C33609 + C33608) * C2339 + (C33607 + C33606) * C2344 +
            C33950 * C2338 + C33951 * C2343) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
           C36394 * C2345 + C36395 * C2340) *
              C50621 * C50682 * C1145 -
          (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
           (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
           (C36379 + C36378) * C2343) *
              C50621 * C50682 * C1146 +
          (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
           (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
           (C37320 + C37321) * C2340) *
              C50621 * C50682 * C1147 -
          ((C33356 * C21052 + C50842 * C21054 + C33355 * C3546 +
            C33353 * C3549) *
               C2340 +
           (C33356 * C21051 + C50842 * C21053 + C33355 * C3543 +
            C33353 * C3547) *
               C2345 +
           (C37321 + C37320) * C2339 + (C37319 + C37318) * C2344 +
           C37308 * C2338 + C37309 * C2343) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50682 * C1074 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C50682 * C50718) *
              C1076 +
          (((C38937 * C296 + C38933 * C309 + C38938 * C933 + C38934 * C939 +
             C38939 * C1266 + C38935 * C1273 + C38940 * C4613 +
             C38936 * C4619) *
                C118 +
            (C38937 * C308 + C38933 * C326 + C38938 * C940 + C38934 * C948 +
             C38939 * C1272 + C38935 * C1278 + C38940 * C4618 +
             C38936 * C4625) *
                C50763) *
               C50621 * C50682 * C50718 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C50682 * C1074) *
              C1077 +
          (((C38937 * C121 + C38933 * C130 + C38938 * C484 + C38934 * C496 +
             C38939 * C489 + C38935 * C505 + C38940 * C1896 + C38936 * C1902) *
                C118 +
            (C38937 * C131 + C38933 * C142 + C38938 * C495 + C38934 * C514 +
             C38939 * C506 + C38935 * C519 + C38940 * C1901 + C38936 * C1908) *
                C50763) *
               C50621 * C50682 * C1074 -
           ((C38940 * C6171 + C38936 * C6173 + C38939 * C1270 + C38935 * C1277 +
             C38938 * C942 + C38934 * C949 + C38937 * C306 + C38933 * C325) *
                C50763 +
            (C38940 * C6170 + C38936 * C6172 + C38939 * C1265 + C38935 * C1271 +
             C38938 * C934 + C38934 * C941 + C38937 * C295 + C38933 * C307) *
                C118) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
            C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
               C118 +
           (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
            C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
               C50763) *
              C50621 * C50682 * C1145 -
          ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
            C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
               C50763 +
           (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
            C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
               C118) *
              C50621 * C50682 * C1146 +
          ((C38937 * C298 + C38933 * C312 + C38938 * C1614 + C38934 * C1622 +
            C38939 * C2716 + C38935 * C2719 + C38940 * C4614 + C38936 * C4621) *
               C118 +
           (C38937 * C313 + C38933 * C328 + C38938 * C1621 + C38934 * C1626 +
            C38939 * C2720 + C38935 * C2725 + C38940 * C4620 + C38936 * C4626) *
               C50763) *
              C50621 * C50682 * C1147 -
          ((C38940 * C21324 + C38936 * C21326 + C38939 * C3706 +
            C38935 * C3709 + C38938 * C3266 + C38934 * C3271 + C38937 * C1160 +
            C38933 * C1165) *
               C50763 +
           (C38940 * C21323 + C38936 * C21325 + C38939 * C3703 +
            C38935 * C3707 + C38938 * C3262 + C38934 * C3265 + C38937 * C1153 +
            C38933 * C1161) *
               C118) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C2343 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C2338 +
             (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
             C36394 * C2345 + C36395 * C2340) *
                C50621 * C1725 -
            (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
             (C37058 + C37059) * C2344 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C2338 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C2343) *
                C50621 * C50746) *
               C50907 +
           (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
             (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
             (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
                C50621 * C50746 -
            (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
             (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
             (C36379 + C36378) * C2343) *
                C50621 * C1725) *
               C50718) *
              C50899 +
          ((((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
             (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
             (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
                C50621 * C50746 -
            (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
             (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
             (C33391 + C33390) * C2343) *
                C50621 * C1725) *
               C50907 +
           (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
             (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
             (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
                C50621 * C1725 -
            ((C33356 * C3704 + C50842 * C3708 + C33355 * C3268 +
              C33353 * C3272) *
                 C2340 +
             (C33356 * C3702 + C50842 * C3705 + C33355 * C3263 +
              C33353 * C3267) *
                 C2345 +
             (C37063 + C37062) * C2339 + (C37061 + C37060) * C2344 +
             (C34343 + C34342) * C2338 + (C34341 + C34340) * C2343) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                  C118 +
              (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                  C50763) *
                 C17235 +
             ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
             C33414 * C17237) *
                C1725 -
            (C34129 * C17237 +
             ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
             ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                  C50763 +
              (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                  C118) *
                 C17235) *
                C50746) *
               C50907 +
           ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 +
               C50842 * C1275) *
                  C118 +
              (C33355 * C938 + C33353 * C947 + C33356 * C1274 +
               C50842 * C1279) *
                  C50763) *
                 C17235 +
             ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
             ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
                C50746 -
            (C33966 * C17237 +
             ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
             ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                  C50763 +
              (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                  C118) *
                 C17235) *
                C1725) *
               C50718) *
              C50899 +
          (((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
             ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
             ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
                C50746 -
            (C33415 * C17237 +
             ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
             ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
                C1725) *
               C50907 +
           ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
             ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
             ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
                C1725 -
            (((C33356 * C1268 + C50842 * C1276 + C33355 * C944 +
               C33353 * C950) *
                  C50763 +
              (C33356 * C1264 + C50842 * C1269 + C33355 * C935 +
               C33353 * C943) *
                  C118) *
                 C17237 +
             ((C34347 + C34346) * C50763 + (C34345 + C34344) * C118) * C17236 +
             ((C34343 + C34342) * C50763 + (C34341 + C34340) * C118) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
              C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                 C118 +
             (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
              C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                 C50763) *
                C50621 * C1725 -
            ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 +
              C38935 * C1910 + C38938 * C502 + C38934 * C517 + C38937 * C499 +
              C38933 * C516) *
                 C50763 +
             (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 +
              C38935 * C1906 + C38938 * C487 + C38934 * C501 + C38937 * C486 +
              C38933 * C500) *
                 C118) *
                C50621 * C50746) *
               C50907 +
           (((C38937 * C932 + C38933 * C937 + C38938 * C1267 + C38934 * C1275 +
              C38939 * C4615 + C38935 * C4623 + C38940 * C6583 +
              C38936 * C6587) *
                 C118 +
             (C38937 * C938 + C38933 * C947 + C38938 * C1274 + C38934 * C1279 +
              C38939 * C4622 + C38935 * C4627 + C38940 * C6586 +
              C38936 * C6589) *
                 C50763) *
                C50621 * C50746 -
            ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 +
              C38935 * C1279 + C38938 * C938 + C38934 * C947 + C38937 * C310 +
              C38933 * C327) *
                 C50763 +
             (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 +
              C38935 * C1275 + C38938 * C932 + C38934 * C937 + C38937 * C297 +
              C38933 * C311) *
                 C118) *
                C50621 * C1725) *
               C50718) *
              C50899 +
          ((((C38937 * C485 + C38933 * C498 + C38938 * C488 + C38934 * C503 +
              C38939 * C1897 + C38935 * C1904 + C38940 * C5601 +
              C38936 * C5605) *
                 C118 +
             (C38937 * C497 + C38933 * C515 + C38938 * C504 + C38934 * C518 +
              C38939 * C1903 + C38935 * C1909 + C38940 * C5606 +
              C38936 * C5610) *
                 C50763) *
                C50621 * C50746 -
            ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
              C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                 C50763 +
             (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
              C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                 C118) *
                C50621 * C1725) *
               C50907 +
           (((C38937 * C296 + C38933 * C309 + C38938 * C933 + C38934 * C939 +
              C38939 * C1266 + C38935 * C1273 + C38940 * C4613 +
              C38936 * C4619) *
                 C118 +
             (C38937 * C308 + C38933 * C326 + C38938 * C940 + C38934 * C948 +
              C38939 * C1272 + C38935 * C1278 + C38940 * C4618 +
              C38936 * C4625) *
                 C50763) *
                C50621 * C1725 -
            ((C38940 * C6584 + C38936 * C6588 + C38939 * C4618 +
              C38935 * C4625 + C38938 * C1272 + C38934 * C1278 + C38937 * C940 +
              C38933 * C948) *
                 C50763 +
             (C38940 * C6582 + C38936 * C6585 + C38939 * C4613 +
              C38935 * C4619 + C38938 * C1266 + C38934 * C1273 + C38937 * C933 +
              C38933 * C939) *
                 C118) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50954 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50955 +
           ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C2343 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C2338 +
            (C37484 + C37485) * C2344 + (C37486 + C37487) * C2339 +
            (C37488 + C37489) * C2345 + (C37490 + C37491) * C2340) *
               C50621 * C2141) *
              C50907 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
               C50621 * C50955 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C50954 -
           ((C33356 * C21324 + C50842 * C21326 + C33355 * C3706 +
             C33353 * C3709) *
                C2340 +
            (C33356 * C21323 + C50842 * C21325 + C33355 * C3703 +
             C33353 * C3707) *
                C2345 +
            (C37491 + C37490) * C2339 + (C37489 + C37488) * C2344 +
            (C37487 + C37486) * C2338 + (C37485 + C37484) * C2343) *
               C50621 * C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50954 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50955 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C118 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50763) *
                C17235 +
            ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
            ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
               C2141) *
              C50907 +
          ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 + C50842 * C1275) *
                 C118 +
             (C33355 * C938 + C33353 * C947 + C33356 * C1274 + C50842 * C1279) *
                 C50763) *
                C17235 +
            ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
            ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
               C50955 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50954 -
           (((C33356 * C6171 + C50842 * C6173 + C33355 * C1270 +
              C33353 * C1277) *
                 C50763 +
             (C33356 * C6170 + C50842 * C6172 + C33355 * C1265 +
              C33353 * C1271) *
                 C118) *
                C17237 +
            ((C33356 * C4618 + C50842 * C4625 + C33355 * C1272 +
              C33353 * C1278) *
                 C50763 +
             (C33356 * C4613 + C50842 * C4619 + C33355 * C1266 +
              C33353 * C1273) *
                 C118) *
                C17236 +
            ((C33356 * C4622 + C50842 * C4627 + C33355 * C1274 +
              C33353 * C1279) *
                 C50763 +
             (C33356 * C4615 + C50842 * C4623 + C33355 * C1267 +
              C33353 * C1275) *
                 C118) *
                C17235) *
               C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50954 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C50955 +
           ((C38937 * C487 + C38933 * C501 + C38938 * C1898 + C38934 * C1906 +
             C38939 * C5600 + C38935 * C5603 + C38940 * C7467 +
             C38936 * C7471) *
                C118 +
            (C38937 * C502 + C38933 * C517 + C38938 * C1905 + C38934 * C1910 +
             C38939 * C5604 + C38935 * C5609 + C38940 * C7470 +
             C38936 * C7473) *
                C50763) *
               C50621 * C2141) *
              C50907 +
          (((C38937 * C932 + C38933 * C937 + C38938 * C1267 + C38934 * C1275 +
             C38939 * C4615 + C38935 * C4623 + C38940 * C6583 +
             C38936 * C6587) *
                C118 +
            (C38937 * C938 + C38933 * C947 + C38938 * C1274 + C38934 * C1279 +
             C38939 * C4622 + C38935 * C4627 + C38940 * C6586 +
             C38936 * C6589) *
                C50763) *
               C50621 * C50955 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C50954 -
           ((C38940 * C23908 + C38936 * C23910 + C38939 * C6586 +
             C38935 * C6589 + C38938 * C4622 + C38934 * C4627 + C38937 * C1274 +
             C38933 * C1279) *
                C50763 +
            (C38940 * C23907 + C38936 * C23909 + C38939 * C6583 +
             C38935 * C6587 + C38938 * C4615 + C38934 * C4623 + C38937 * C1267 +
             C38933 * C1275) *
                C118) *
               C50621 * C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C33355 * C119 + C33353 * C126 + C33356 * C486 +
                  C50842 * C500) *
                     C118 +
                 (C33355 * C127 + C33353 * C140 + C33356 * C499 +
                  C50842 * C516) *
                     C50763) *
                    C17235 +
                ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) *
                    C17236 +
                C33414 * C17237) *
                   C1725 -
               (C34129 * C17237 +
                ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) *
                    C17236 +
                ((C33356 * C502 + C50842 * C517 + C33355 * C499 +
                  C33353 * C516) *
                     C50763 +
                 (C33356 * C487 + C50842 * C501 + C33355 * C486 +
                  C33353 * C500) *
                     C118) *
                    C17235) *
                   C50746) *
                  C50666 * C1076 +
              ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) *
                    C17235 +
                ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) *
                    C17236 +
                ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) *
                    C17237) *
                   C50746 -
               (C33415 * C17237 +
                ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) *
                    C17236 +
                ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) *
                    C17235) *
                   C1725) *
                  C50666 * C1077 +
              ((C33414 * C17235 +
                ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) *
                    C17236 +
                ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) *
                    C17237) *
                   C1725 -
               (((C33356 * C511 + C50842 * C522 + C33355 * C510 +
                  C33353 * C521) *
                     C50763 +
                 (C33356 * C492 + C50842 * C512 + C33355 * C491 +
                  C33353 * C509) *
                     C118) *
                    C17237 +
                ((C34128 + C34127) * C50763 + (C34126 + C34125) * C118) *
                    C17236 +
                C34129 * C17235) *
                   C50746) *
                  C50666 * C1078) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C33355 * C119 + C33353 * C126 + C33356 * C486 +
                  C50842 * C500) *
                     C118 +
                 (C33355 * C127 + C33353 * C140 + C33356 * C499 +
                  C50842 * C516) *
                     C50763) *
                    C17235 +
                ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) *
                    C17236 +
                C33414 * C17237) *
                   C1725 -
               (C34129 * C17237 +
                ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) *
                    C17236 +
                ((C33356 * C502 + C50842 * C517 + C33355 * C499 +
                  C33353 * C516) *
                     C50763 +
                 (C33356 * C487 + C50842 * C501 + C33355 * C486 +
                  C33353 * C500) *
                     C118) *
                    C17235) *
                   C50746) *
                  C289 +
              ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 +
                  C50842 * C1275) *
                     C118 +
                 (C33355 * C938 + C33353 * C947 + C33356 * C1274 +
                  C50842 * C1279) *
                     C50763) *
                    C17235 +
                ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) *
                    C17236 +
                ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) *
                    C17237) *
                   C50746 -
               (C33966 * C17237 +
                ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) *
                    C17236 +
                ((C33356 * C938 + C50842 * C947 + C33355 * C310 +
                  C33353 * C327) *
                     C50763 +
                 (C33356 * C932 + C50842 * C937 + C33355 * C297 +
                  C33353 * C311) *
                     C118) *
                    C17235) *
                   C1725) *
                  C290 +
              ((((C33355 * C298 + C33353 * C312 + C33356 * C1614 +
                  C50842 * C1622) *
                     C118 +
                 (C33355 * C313 + C33353 * C328 + C33356 * C1621 +
                  C50842 * C1626) *
                     C50763) *
                    C17235 +
                ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) *
                    C17236 +
                ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) *
                    C17237) *
                   C1725 -
               (((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
                  C33353 * C1624) *
                     C50763 +
                 (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
                  C33353 * C1618) *
                     C118) *
                    C17237 +
                ((C33356 * C2722 + C50842 * C2726 + C33355 * C1619 +
                  C33353 * C1625) *
                     C50763 +
                 (C33356 * C2717 + C50842 * C2721 + C33355 * C1613 +
                  C33353 * C1620) *
                     C118) *
                    C17236 +
                ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
                  C33353 * C1626) *
                     C50763 +
                 (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
                  C33353 * C1622) *
                     C118) *
                    C17235) *
                   C50746) *
                  C291) *
             C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C118 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50763) *
               C17235 +
           ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
           C33414 * C17237) *
              C1891 -
          (C34129 * C17237 +
           ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
           ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C50763 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C118) *
               C17235) *
              C1892 +
          (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C118 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C50763) *
               C17235 +
           ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
           ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
              C1893 -
          (((C33356 * C5607 + C50842 * C5611 + C33355 * C1901 +
             C33353 * C1908) *
                C50763 +
            (C33356 * C5602 + C50842 * C5608 + C33355 * C1896 +
             C33353 * C1902) *
                C118) *
               C17237 +
           ((C33356 * C5606 + C50842 * C5610 + C33355 * C1903 +
             C33353 * C1909) *
                C50763 +
            (C33356 * C5601 + C50842 * C5605 + C33355 * C1897 +
             C33353 * C1904) *
                C118) *
               C17236 +
           ((C33356 * C5604 + C50842 * C5609 + C33355 * C1905 +
             C33353 * C1910) *
                C50763 +
            (C33356 * C5600 + C50842 * C5603 + C33355 * C1898 +
             C33353 * C1906) *
                C118) *
               C17235) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C1725 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C50666 * C1076 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
               C50621 * C50746 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C1725 -
           ((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
             C33353 * C1624) *
                C2340 +
            (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
             C33353 * C1618) *
                C2345 +
            (C34347 + C34346) * C2339 + (C34345 + C34344) * C2344 +
            C34113 * C2338 + C34114 * C2343) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C1725 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C289 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
               C50621 * C50746 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C1725) *
              C290 +
          ((C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
            (C37320 + C37321) * C2340) *
               C50621 * C1725 -
           ((C33356 * C20716 + C50842 * C20718 + C33355 * C4212 +
             C33353 * C4215) *
                C2340 +
            (C33356 * C20715 + C50842 * C20717 + C33355 * C4209 +
             C33353 * C4213) *
                C2345 +
            (C37991 + C37990) * C2339 + (C37989 + C37988) * C2344 +
            C37978 * C2338 + C37979 * C2343) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
           C36394 * C2345 + C36395 * C2340) *
              C50621 * C1891 -
          (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
           (C37058 + C37059) * C2344 +
           (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
               C2338 +
           (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
               C2343) *
              C50621 * C1892 +
          ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
               C2343 +
           (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
               C2338 +
           (C37484 + C37485) * C2344 + (C37486 + C37487) * C2339 +
           (C37488 + C37489) * C2345 + (C37490 + C37491) * C2340) *
              C50621 * C1893 -
          ((C33356 * C22992 + C50842 * C22994 + C33355 * C4620 +
            C33353 * C4626) *
               C2340 +
           (C33356 * C22991 + C50842 * C22993 + C33355 * C4614 +
            C33353 * C4621) *
               C2345 +
           (C33356 * C6586 + C50842 * C6589 + C33355 * C4622 + C33353 * C4627) *
               C2339 +
           (C33356 * C6583 + C50842 * C6587 + C33355 * C4615 + C33353 * C4623) *
               C2344 +
           (C33356 * C5604 + C50842 * C5609 + C33355 * C1905 + C33353 * C1910) *
               C2338 +
           (C33356 * C5600 + C50842 * C5603 + C33355 * C1898 + C33353 * C1906) *
               C2343) *
              C50621 * C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C1725 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C50746) *
              C50666 * C1076 +
          (((C38937 * C485 + C38933 * C498 + C38938 * C488 + C38934 * C503 +
             C38939 * C1897 + C38935 * C1904 + C38940 * C5601 +
             C38936 * C5605) *
                C118 +
            (C38937 * C497 + C38933 * C515 + C38938 * C504 + C38934 * C518 +
             C38939 * C1903 + C38935 * C1909 + C38940 * C5606 +
             C38936 * C5610) *
                C50763) *
               C50621 * C50746 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C1725) *
              C50666 * C1077 +
          (((C38937 * C121 + C38933 * C130 + C38938 * C484 + C38934 * C496 +
             C38939 * C489 + C38935 * C505 + C38940 * C1896 + C38936 * C1902) *
                C118 +
            (C38937 * C131 + C38933 * C142 + C38938 * C495 + C38934 * C514 +
             C38939 * C506 + C38935 * C519 + C38940 * C1901 + C38936 * C1908) *
                C50763) *
               C50621 * C1725 -
           ((C38940 * C5607 + C38936 * C5611 + C38939 * C1901 + C38935 * C1908 +
             C38938 * C506 + C38934 * C519 + C38937 * C495 + C38933 * C514) *
                C50763 +
            (C38940 * C5602 + C38936 * C5608 + C38939 * C1896 + C38935 * C1902 +
             C38938 * C489 + C38934 * C505 + C38937 * C484 + C38933 * C496) *
                C118) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C1725 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C50746) *
              C289 +
          (((C38937 * C932 + C38933 * C937 + C38938 * C1267 + C38934 * C1275 +
             C38939 * C4615 + C38935 * C4623 + C38940 * C6583 +
             C38936 * C6587) *
                C118 +
            (C38937 * C938 + C38933 * C947 + C38938 * C1274 + C38934 * C1279 +
             C38939 * C4622 + C38935 * C4627 + C38940 * C6586 +
             C38936 * C6589) *
                C50763) *
               C50621 * C50746 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C1725) *
              C290 +
          (((C38937 * C298 + C38933 * C312 + C38938 * C1614 + C38934 * C1622 +
             C38939 * C2716 + C38935 * C2719 + C38940 * C4614 +
             C38936 * C4621) *
                C118 +
            (C38937 * C313 + C38933 * C328 + C38938 * C1621 + C38934 * C1626 +
             C38939 * C2720 + C38935 * C2725 + C38940 * C4620 +
             C38936 * C4626) *
                C50763) *
               C50621 * C1725 -
           ((C38940 * C22992 + C38936 * C22994 + C38939 * C4620 +
             C38935 * C4626 + C38938 * C2720 + C38934 * C2725 + C38937 * C1621 +
             C38933 * C1626) *
                C50763 +
            (C38940 * C22991 + C38936 * C22993 + C38939 * C4614 +
             C38935 * C4621 + C38938 * C2716 + C38934 * C2719 + C38937 * C1614 +
             C38933 * C1622) *
                C118) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
            C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
               C118 +
           (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
            C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
               C50763) *
              C50621 * C1891 -
          ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
            C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
               C50763 +
           (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
            C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
               C118) *
              C50621 * C1892 +
          ((C38937 * C487 + C38933 * C501 + C38938 * C1898 + C38934 * C1906 +
            C38939 * C5600 + C38935 * C5603 + C38940 * C7467 + C38936 * C7471) *
               C118 +
           (C38937 * C502 + C38933 * C517 + C38938 * C1905 + C38934 * C1910 +
            C38939 * C5604 + C38935 * C5609 + C38940 * C7470 + C38936 * C7473) *
               C50763) *
              C50621 * C1893 -
          ((C38940 * C40314 + C38936 * C40316 + C38939 * C7470 +
            C38935 * C7473 + C38938 * C5604 + C38934 * C5609 + C38937 * C1905 +
            C38933 * C1910) *
               C50763 +
           (C38940 * C40313 + C38936 * C40315 + C38939 * C7467 +
            C38935 * C7471 + C38938 * C5600 + C38934 * C5603 + C38937 * C1898 +
            C38933 * C1906) *
               C118) *
              C50621 * C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50954 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50955 +
           ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C2343 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C2338 +
            (C37484 + C37485) * C2344 + (C37486 + C37487) * C2339 +
            (C37488 + C37489) * C2345 + (C37490 + C37491) * C2340) *
               C50621 * C2141) *
              C50666 * C50899 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
               C50621 * C50955 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50954 -
           ((C33356 * C4616 + C50842 * C4624 + C33355 * C2722 +
             C33353 * C2726) *
                C2340 +
            (C33356 * C4612 + C50842 * C4617 + C33355 * C2717 +
             C33353 * C2721) *
                C2345 +
            (C33356 * C4618 + C50842 * C4625 + C33355 * C1272 +
             C33353 * C1278) *
                C2339 +
            (C33356 * C4613 + C50842 * C4619 + C33355 * C1266 +
             C33353 * C1273) *
                C2344 +
            (C33799 + C33798) * C2338 + (C33797 + C33796) * C2343) *
               C50621 * C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50954 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50955 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C118 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50763) *
                C17235 +
            ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
            ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
               C2141) *
              C50666 * C50899 +
          ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
            ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
            ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
               C50955 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50954 -
           (((C33356 * C1899 + C50842 * C1907 + C33355 * C508 + C33353 * C520) *
                 C50763 +
             (C33356 * C1895 + C50842 * C1900 + C33355 * C490 + C33353 * C507) *
                 C118) *
                C17237 +
            ((C33803 + C33802) * C50763 + (C33801 + C33800) * C118) * C17236 +
            ((C33799 + C33798) * C50763 + (C33797 + C33796) * C118) * C17235) *
               C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C50954 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C50955 +
           ((C38937 * C487 + C38933 * C501 + C38938 * C1898 + C38934 * C1906 +
             C38939 * C5600 + C38935 * C5603 + C38940 * C7467 +
             C38936 * C7471) *
                C118 +
            (C38937 * C502 + C38933 * C517 + C38938 * C1905 + C38934 * C1910 +
             C38939 * C5604 + C38935 * C5609 + C38940 * C7470 +
             C38936 * C7473) *
                C50763) *
               C50621 * C2141) *
              C50666 * C50899 +
          (((C38937 * C485 + C38933 * C498 + C38938 * C488 + C38934 * C503 +
             C38939 * C1897 + C38935 * C1904 + C38940 * C5601 +
             C38936 * C5605) *
                C118 +
            (C38937 * C497 + C38933 * C515 + C38938 * C504 + C38934 * C518 +
             C38939 * C1903 + C38935 * C1909 + C38940 * C5606 +
             C38936 * C5610) *
                C50763) *
               C50621 * C50955 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C50954 -
           ((C38940 * C7468 + C38936 * C7472 + C38939 * C5606 + C38935 * C5610 +
             C38938 * C1903 + C38934 * C1909 + C38937 * C504 + C38933 * C518) *
                C50763 +
            (C38940 * C7466 + C38936 * C7469 + C38939 * C5601 + C38935 * C5605 +
             C38938 * C1897 + C38934 * C1904 + C38937 * C488 + C38933 * C503) *
                C118) *
               C50621 * C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C1725 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C289 +
          ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 + C50842 * C1275) *
                 C118 +
             (C33355 * C938 + C33353 * C947 + C33356 * C1274 + C50842 * C1279) *
                 C50763) *
                C17235 +
            ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
            ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
               C50746 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C1725) *
              C290 +
          ((((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C1725 -
           (((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
              C33353 * C1624) *
                 C50763 +
             (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
              C33353 * C1618) *
                 C118) *
                C17237 +
            ((C33356 * C2722 + C50842 * C2726 + C33355 * C1619 +
              C33353 * C1625) *
                 C50763 +
             (C33356 * C2717 + C50842 * C2721 + C33355 * C1613 +
              C33353 * C1620) *
                 C118) *
                C17236 +
            ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
              C33353 * C1626) *
                 C50763 +
             (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
              C33353 * C1622) *
                 C118) *
                C17235) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C1725 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C50666 * C1076 +
          ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
            ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
            ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
               C50746 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C1725) *
              C50666 * C1077 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C1725 -
           (((C33356 * C511 + C50842 * C522 + C33355 * C510 + C33353 * C521) *
                 C50763 +
             (C33356 * C492 + C50842 * C512 + C33355 * C491 + C33353 * C509) *
                 C118) *
                C17237 +
            ((C34128 + C34127) * C50763 + (C34126 + C34125) * C118) * C17236 +
            C34129 * C17235) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C1725 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C50666 * C1076 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
               C50621 * C50746 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C1725 -
           ((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
             C33353 * C1624) *
                C2340 +
            (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
             C33353 * C1618) *
                C2345 +
            (C34347 + C34346) * C2339 + (C34345 + C34344) * C2344 +
            C34113 * C2338 + C34114 * C2343) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C1725 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C289 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
               C50621 * C50746 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C1725) *
              C290 +
          ((C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
            (C37320 + C37321) * C2340) *
               C50621 * C1725 -
           ((C33356 * C20716 + C50842 * C20718 + C33355 * C4212 +
             C33353 * C4215) *
                C2340 +
            (C33356 * C20715 + C50842 * C20717 + C33355 * C4209 +
             C33353 * C4213) *
                C2345 +
            (C37991 + C37990) * C2339 + (C37989 + C37988) * C2344 +
            C37978 * C2338 + C37979 * C2343) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C1725 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C50746) *
              C50666 * C1076 +
          (((C38937 * C485 + C38933 * C498 + C38938 * C488 + C38934 * C503 +
             C38939 * C1897 + C38935 * C1904 + C38940 * C5601 +
             C38936 * C5605) *
                C118 +
            (C38937 * C497 + C38933 * C515 + C38938 * C504 + C38934 * C518 +
             C38939 * C1903 + C38935 * C1909 + C38940 * C5606 +
             C38936 * C5610) *
                C50763) *
               C50621 * C50746 -
           ((C38940 * C1903 + C38936 * C1909 + C38939 * C504 + C38935 * C518 +
             C38938 * C497 + C38934 * C515 + C38937 * C129 + C38933 * C141) *
                C50763 +
            (C38940 * C1897 + C38936 * C1904 + C38939 * C488 + C38935 * C503 +
             C38938 * C485 + C38934 * C498 + C38937 * C120 + C38933 * C128) *
                C118) *
               C50621 * C1725) *
              C50666 * C1077 +
          (((C38937 * C121 + C38933 * C130 + C38938 * C484 + C38934 * C496 +
             C38939 * C489 + C38935 * C505 + C38940 * C1896 + C38936 * C1902) *
                C118 +
            (C38937 * C131 + C38933 * C142 + C38938 * C495 + C38934 * C514 +
             C38939 * C506 + C38935 * C519 + C38940 * C1901 + C38936 * C1908) *
                C50763) *
               C50621 * C1725 -
           ((C38940 * C5607 + C38936 * C5611 + C38939 * C1901 + C38935 * C1908 +
             C38938 * C506 + C38934 * C519 + C38937 * C495 + C38933 * C514) *
                C50763 +
            (C38940 * C5602 + C38936 * C5608 + C38939 * C1896 + C38935 * C1902 +
             C38938 * C489 + C38934 * C505 + C38937 * C484 + C38933 * C496) *
                C118) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C38937 * C119 + C38933 * C126 + C38938 * C486 + C38934 * C500 +
             C38939 * C487 + C38935 * C501 + C38940 * C1898 + C38936 * C1906) *
                C118 +
            (C38937 * C127 + C38933 * C140 + C38938 * C499 + C38934 * C516 +
             C38939 * C502 + C38935 * C517 + C38940 * C1905 + C38936 * C1910) *
                C50763) *
               C50621 * C1725 -
           ((C38940 * C5604 + C38936 * C5609 + C38939 * C1905 + C38935 * C1910 +
             C38938 * C502 + C38934 * C517 + C38937 * C499 + C38933 * C516) *
                C50763 +
            (C38940 * C5600 + C38936 * C5603 + C38939 * C1898 + C38935 * C1906 +
             C38938 * C487 + C38934 * C501 + C38937 * C486 + C38933 * C500) *
                C118) *
               C50621 * C50746) *
              C289 +
          (((C38937 * C932 + C38933 * C937 + C38938 * C1267 + C38934 * C1275 +
             C38939 * C4615 + C38935 * C4623 + C38940 * C6583 +
             C38936 * C6587) *
                C118 +
            (C38937 * C938 + C38933 * C947 + C38938 * C1274 + C38934 * C1279 +
             C38939 * C4622 + C38935 * C4627 + C38940 * C6586 +
             C38936 * C6589) *
                C50763) *
               C50621 * C50746 -
           ((C38940 * C4622 + C38936 * C4627 + C38939 * C1274 + C38935 * C1279 +
             C38938 * C938 + C38934 * C947 + C38937 * C310 + C38933 * C327) *
                C50763 +
            (C38940 * C4615 + C38936 * C4623 + C38939 * C1267 + C38935 * C1275 +
             C38938 * C932 + C38934 * C937 + C38937 * C297 + C38933 * C311) *
                C118) *
               C50621 * C1725) *
              C290 +
          (((C38937 * C298 + C38933 * C312 + C38938 * C1614 + C38934 * C1622 +
             C38939 * C2716 + C38935 * C2719 + C38940 * C4614 +
             C38936 * C4621) *
                C118 +
            (C38937 * C313 + C38933 * C328 + C38938 * C1621 + C38934 * C1626 +
             C38939 * C2720 + C38935 * C2725 + C38940 * C4620 +
             C38936 * C4626) *
                C50763) *
               C50621 * C1725 -
           ((C38940 * C22992 + C38936 * C22994 + C38939 * C4620 +
             C38935 * C4626 + C38938 * C2720 + C38934 * C2725 + C38937 * C1621 +
             C38933 * C1626) *
                C50763 +
            (C38940 * C22991 + C38936 * C22993 + C38939 * C4614 +
             C38935 * C4621 + C38938 * C2716 + C38934 * C2719 + C38937 * C1614 +
             C38933 * C1622) *
                C118) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[195] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50682 * C50907 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C50682 * C50718) *
                       C50950 +
                   ((((C44493 + C44492 + C44491) * C118 +
                      (C44490 + C44489 + C44488) * C50763) *
                         C50892 +
                     ((C44840 + C44841 + C44842) * C118 +
                      (C44843 + C44844 + C44845) * C50763) *
                         C50626) *
                        C50682 * C50718 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C50682 * C50907) *
                       C50951 +
                   ((((C44311 + C44310 + C44309) * C118 +
                      (C44308 + C44307 + C44306) * C50763) *
                         C50892 +
                     ((C44312 + C44313 + C44314) * C118 +
                      (C44315 + C44316 + C44317) * C50763) *
                         C50626) *
                        C50682 * C50907 -
                    (((C44262 * C1268 + C44259 * C1276 + C44261 * C944 +
                       C50959 * C950 + C44260 * C304 + C50958 * C324) *
                          C50763 +
                      (C44262 * C1264 + C44259 * C1269 + C44261 * C935 +
                       C50959 * C943 + C44260 * C294 + C50958 * C305) *
                          C118) *
                         C50626 +
                     ((C44845 + C44844 + C44843) * C50763 +
                      (C44842 + C44841 + C44840) * C118) *
                         C50892) *
                        C50682 * C50718) *
                       C673)) /
                 (p * q * std::sqrt(p + q));
    d2ee[196] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                        C50959 * C500 + C44262 * C487 + C44259 * C501) *
                           C118 +
                       (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                        C50959 * C516 + C44262 * C502 + C44259 * C517) *
                           C50763) *
                          C50892 +
                      ((C44300 + C44301 + C44302) * C118 +
                       (C44303 + C44304 + C44305) * C50763) *
                          C50626) *
                         C50908 -
                     (((C44670 + C44671 + C44672) * C50763 +
                       (C44673 + C44674 + C44675) * C118) *
                          C50626 +
                      ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                        C50959 * C517 + C44260 * C499 + C50958 * C516) *
                           C50763 +
                       (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                        C50959 * C501 + C44260 * C486 + C50958 * C500) *
                           C118) *
                          C50892) *
                         C50746) *
                        C50907 +
                    ((((C44260 * C932 + C50958 * C937 + C44261 * C1267 +
                        C50959 * C1275 + C44262 * C4615 + C44259 * C4623) *
                           C118 +
                       (C44260 * C938 + C50958 * C947 + C44261 * C1274 +
                        C50959 * C1279 + C44262 * C4622 + C44259 * C4627) *
                           C50763) *
                          C50892 +
                      ((C45216 + C45217 + C45218) * C118 +
                       (C45219 + C45220 + C45221) * C50763) *
                          C50626) *
                         C50746 -
                     (((C44488 + C44489 + C44490) * C50763 +
                       (C44491 + C44492 + C44493) * C118) *
                          C50626 +
                      ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                        C50959 * C947 + C44260 * C310 + C50958 * C327) *
                           C50763 +
                       (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                        C50959 * C937 + C44260 * C297 + C50958 * C311) *
                           C118) *
                          C50892) *
                         C50908) *
                        C50718) *
                       C292 +
                   (((((C44675 + C44674 + C44673) * C118 +
                       (C44672 + C44671 + C44670) * C50763) *
                          C50892 +
                      ((C45004 + C45005 + C45006) * C118 +
                       (C45007 + C45008 + C45009) * C50763) *
                          C50626) *
                         C50746 -
                     (((C44306 + C44307 + C44308) * C50763 +
                       (C44309 + C44310 + C44311) * C118) *
                          C50626 +
                      ((C44305 + C44304 + C44303) * C50763 +
                       (C44302 + C44301 + C44300) * C118) *
                          C50892) *
                         C50908) *
                        C50907 +
                    ((((C44493 + C44492 + C44491) * C118 +
                       (C44490 + C44489 + C44488) * C50763) *
                          C50892 +
                      ((C44840 + C44841 + C44842) * C118 +
                       (C44843 + C44844 + C44845) * C50763) *
                          C50626) *
                         C50908 -
                     (((C44262 * C6171 + C44259 * C6173 + C44261 * C1270 +
                        C50959 * C1277 + C44260 * C942 + C50958 * C949) *
                           C50763 +
                       (C44262 * C6170 + C44259 * C6172 + C44261 * C1265 +
                        C50959 * C1271 + C44260 * C934 + C50958 * C941) *
                           C118) *
                          C50626 +
                      ((C45221 + C45220 + C45219) * C50763 +
                       (C45218 + C45217 + C45216) * C118) *
                          C50892) *
                         C50746) *
                        C50718) *
                       C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[197] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50682 * C289 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C50682 * C290 +
                    (((C44260 * C298 + C50958 * C312 + C44261 * C1614 +
                       C50959 * C1622 + C44262 * C2716 + C44259 * C2719) *
                          C118 +
                      (C44260 * C313 + C50958 * C328 + C44261 * C1621 +
                       C50959 * C1626 + C44262 * C2720 + C44259 * C2725) *
                          C50763) *
                         C50892 +
                     ((C44494 + C44495 + C44496) * C118 +
                      (C44497 + C44498 + C44499) * C50763) *
                         C50626) *
                        C50682 * C291) *
                       C292 +
                   ((((C44493 + C44492 + C44491) * C118 +
                      (C44490 + C44489 + C44488) * C50763) *
                         C50892 +
                     ((C44260 * C295 + C50958 * C307 + C44261 * C934 +
                       C50959 * C941 + C44262 * C1265 + C44259 * C1271) *
                          C118 +
                      (C44260 * C306 + C50958 * C325 + C44261 * C942 +
                       C50959 * C949 + C44262 * C1270 + C44259 * C1277) *
                          C50763) *
                         C50626) *
                        C50682 * C290 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C50682 * C289 -
                    (((C44262 * C2723 + C44259 * C2727 + C44261 * C1617 +
                       C50959 * C1624 + C44260 * C317 + C50958 * C330) *
                          C50763 +
                      (C44262 * C2718 + C44259 * C2724 + C44261 * C1612 +
                       C50959 * C1618 + C44260 * C300 + C50958 * C316) *
                          C118) *
                         C50626 +
                     ((C44499 + C44498 + C44497) * C50763 +
                      (C44496 + C44495 + C44494) * C118) *
                         C50892) *
                        C50682 * C291) *
                       C50653)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C118 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50763) *
                        C50892 +
                    ((C44300 + C44301 + C44302) * C118 +
                     (C44303 + C44304 + C44305) * C50763) *
                        C50626) *
                       C50682 * C50666 * C113 -
                   (((C44306 + C44307 + C44308) * C50763 +
                     (C44309 + C44310 + C44311) * C118) *
                        C50626 +
                    ((C44305 + C44304 + C44303) * C50763 +
                     (C44302 + C44301 + C44300) * C118) *
                        C50892) *
                       C50682 * C50666 * C114 +
                   (((C44311 + C44310 + C44309) * C118 +
                     (C44308 + C44307 + C44306) * C50763) *
                        C50892 +
                    ((C44312 + C44313 + C44314) * C118 +
                     (C44315 + C44316 + C44317) * C50763) *
                        C50626) *
                       C50682 * C50666 * C115 -
                   (((C44262 * C511 + C44259 * C522 + C44261 * C510 +
                      C50959 * C521 + C44260 * C134 + C50958 * C144) *
                         C50763 +
                     (C44262 * C492 + C44259 * C512 + C44261 * C491 +
                      C50959 * C509 + C44260 * C123 + C50958 * C135) *
                         C118) *
                        C50626 +
                    ((C44317 + C44316 + C44315) * C50763 +
                     (C44314 + C44313 + C44312) * C118) *
                        C50892) *
                       C50682 * C50666 * C116)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C480 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C481 +
                    (((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                       C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                          C118 +
                      (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                       C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                          C50763) *
                         C50892 +
                     ((C44676 + C44677 + C44678) * C118 +
                      (C44679 + C44680 + C44681) * C50763) *
                         C50626) *
                        C482) *
                       C50666 * C292 +
                   ((((C44675 + C44674 + C44673) * C118 +
                      (C44672 + C44671 + C44670) * C50763) *
                         C50892 +
                     ((C44260 * C484 + C50958 * C496 + C44261 * C489 +
                       C50959 * C505 + C44262 * C1896 + C44259 * C1902) *
                          C118 +
                      (C44260 * C495 + C50958 * C514 + C44261 * C506 +
                       C50959 * C519 + C44262 * C1901 + C44259 * C1908) *
                          C50763) *
                         C50626) *
                        C481 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C480 -
                    (((C44262 * C5607 + C44259 * C5611 + C44261 * C1901 +
                       C50959 * C1908 + C44260 * C506 + C50958 * C519) *
                          C50763 +
                      (C44262 * C5602 + C44259 * C5608 + C44261 * C1896 +
                       C50959 * C1902 + C44260 * C489 + C50958 * C505) *
                          C118) *
                         C50626 +
                     ((C44681 + C44680 + C44679) * C50763 +
                      (C44678 + C44677 + C44676) * C118) *
                         C50892) *
                        C482) *
                       C50666 * C50653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[198] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50908 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C50746) *
                       C50666 * C50950 +
                   ((((C44675 + C44674 + C44673) * C118 +
                      (C44672 + C44671 + C44670) * C50763) *
                         C50892 +
                     ((C45004 + C45005 + C45006) * C118 +
                      (C45007 + C45008 + C45009) * C50763) *
                         C50626) *
                        C50746 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C50908) *
                       C50666 * C50951 +
                   ((((C44311 + C44310 + C44309) * C118 +
                      (C44308 + C44307 + C44306) * C50763) *
                         C50892 +
                     ((C44312 + C44313 + C44314) * C118 +
                      (C44315 + C44316 + C44317) * C50763) *
                         C50626) *
                        C50908 -
                    (((C44262 * C1899 + C44259 * C1907 + C44261 * C508 +
                       C50959 * C520 + C44260 * C493 + C50958 * C513) *
                          C50763 +
                      (C44262 * C1895 + C44259 * C1900 + C44261 * C490 +
                       C50959 * C507 + C44260 * C483 + C50958 * C494) *
                          C118) *
                         C50626 +
                     ((C45009 + C45008 + C45007) * C50763 +
                      (C45006 + C45005 + C45004) * C118) *
                         C50892) *
                        C50746) *
                       C50666 * C673)) /
                 (p * q * std::sqrt(p + q));
    d2ee[199] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C118 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50763) *
                        C50892 +
                    ((C44300 + C44301 + C44302) * C118 +
                     (C44303 + C44304 + C44305) * C50763) *
                        C50626) *
                       C50682 * C50666 * C113 -
                   (((C44306 + C44307 + C44308) * C50763 +
                     (C44309 + C44310 + C44311) * C118) *
                        C50626 +
                    ((C44305 + C44304 + C44303) * C50763 +
                     (C44302 + C44301 + C44300) * C118) *
                        C50892) *
                       C50682 * C50666 * C114 +
                   (((C44311 + C44310 + C44309) * C118 +
                     (C44308 + C44307 + C44306) * C50763) *
                        C50892 +
                    ((C44312 + C44313 + C44314) * C118 +
                     (C44315 + C44316 + C44317) * C50763) *
                        C50626) *
                       C50682 * C50666 * C115 -
                   (((C44262 * C511 + C44259 * C522 + C44261 * C510 +
                      C50959 * C521 + C44260 * C134 + C50958 * C144) *
                         C50763 +
                     (C44262 * C492 + C44259 * C512 + C44261 * C491 +
                      C50959 * C509 + C44260 * C123 + C50958 * C135) *
                         C118) *
                        C50626 +
                    ((C44317 + C44316 + C44315) * C50763 +
                     (C44314 + C44313 + C44312) * C118) *
                        C50892) *
                       C50682 * C50666 * C116)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50682 * C289 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C50682 * C290 +
                    (((C44260 * C298 + C50958 * C312 + C44261 * C1614 +
                       C50959 * C1622 + C44262 * C2716 + C44259 * C2719) *
                          C118 +
                      (C44260 * C313 + C50958 * C328 + C44261 * C1621 +
                       C50959 * C1626 + C44262 * C2720 + C44259 * C2725) *
                          C50763) *
                         C50892 +
                     ((C44494 + C44495 + C44496) * C118 +
                      (C44497 + C44498 + C44499) * C50763) *
                         C50626) *
                        C50682 * C291) *
                       C292 +
                   ((((C44493 + C44492 + C44491) * C118 +
                      (C44490 + C44489 + C44488) * C50763) *
                         C50892 +
                     ((C44260 * C295 + C50958 * C307 + C44261 * C934 +
                       C50959 * C941 + C44262 * C1265 + C44259 * C1271) *
                          C118 +
                      (C44260 * C306 + C50958 * C325 + C44261 * C942 +
                       C50959 * C949 + C44262 * C1270 + C44259 * C1277) *
                          C50763) *
                         C50626) *
                        C50682 * C290 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C50682 * C289 -
                    (((C44262 * C2723 + C44259 * C2727 + C44261 * C1617 +
                       C50959 * C1624 + C44260 * C317 + C50958 * C330) *
                          C50763 +
                      (C44262 * C2718 + C44259 * C2724 + C44261 * C1612 +
                       C50959 * C1618 + C44260 * C300 + C50958 * C316) *
                          C118) *
                         C50626 +
                     ((C44499 + C44498 + C44497) * C50763 +
                      (C44496 + C44495 + C44494) * C118) *
                         C50892) *
                        C50682 * C291) *
                       C50653)) /
                     (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50682 * C50952 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C50682 * C50953 +
                    (((C44260 * C298 + C50958 * C312 + C44261 * C1614 +
                       C50959 * C1622 + C44262 * C2716 + C44259 * C2719) *
                          C118 +
                      (C44260 * C313 + C50958 * C328 + C44261 * C1621 +
                       C50959 * C1626 + C44262 * C2720 + C44259 * C2725) *
                          C50763) *
                         C50892 +
                     ((C44494 + C44495 + C44496) * C118 +
                      (C44497 + C44498 + C44499) * C50763) *
                         C50626) *
                        C50682 * C1380) *
                       C50899 +
                   ((((C44493 + C44492 + C44491) * C118 +
                      (C44490 + C44489 + C44488) * C50763) *
                         C50892 +
                     ((C44840 + C44841 + C44842) * C118 +
                      (C44843 + C44844 + C44845) * C50763) *
                         C50626) *
                        C50682 * C50953 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C50682 * C50952 -
                    (((C44262 * C2723 + C44259 * C2727 + C44261 * C1617 +
                       C50959 * C1624 + C44260 * C317 + C50958 * C330) *
                          C50763 +
                      (C44262 * C2718 + C44259 * C2724 + C44261 * C1612 +
                       C50959 * C1618 + C44260 * C300 + C50958 * C316) *
                          C118) *
                         C50626 +
                     ((C44499 + C44498 + C44497) * C50763 +
                      (C44496 + C44495 + C44494) * C118) *
                         C50892) *
                        C50682 * C1380) *
                       C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50908 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C50746) *
                       C50952 +
                   ((((C44260 * C932 + C50958 * C937 + C44261 * C1267 +
                       C50959 * C1275 + C44262 * C4615 + C44259 * C4623) *
                          C118 +
                      (C44260 * C938 + C50958 * C947 + C44261 * C1274 +
                       C50959 * C1279 + C44262 * C4622 + C44259 * C4627) *
                          C50763) *
                         C50892 +
                     ((C45216 + C45217 + C45218) * C118 +
                      (C45219 + C45220 + C45221) * C50763) *
                         C50626) *
                        C50746 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C50908) *
                       C50953 +
                   ((((C44260 * C298 + C50958 * C312 + C44261 * C1614 +
                       C50959 * C1622 + C44262 * C2716 + C44259 * C2719) *
                          C118 +
                      (C44260 * C313 + C50958 * C328 + C44261 * C1621 +
                       C50959 * C1626 + C44262 * C2720 + C44259 * C2725) *
                          C50763) *
                         C50892 +
                     ((C44494 + C44495 + C44496) * C118 +
                      (C44497 + C44498 + C44499) * C50763) *
                         C50626) *
                        C50908 -
                    (((C44262 * C4616 + C44259 * C4624 + C44261 * C2722 +
                       C50959 * C2726 + C44260 * C1619 + C50958 * C1625) *
                          C50763 +
                      (C44262 * C4612 + C44259 * C4617 + C44261 * C2717 +
                       C50959 * C2721 + C44260 * C1613 + C50958 * C1620) *
                          C118) *
                         C50626 +
                     ((C44262 * C4620 + C44259 * C4626 + C44261 * C2720 +
                       C50959 * C2725 + C44260 * C1621 + C50958 * C1626) *
                          C50763 +
                      (C44262 * C4614 + C44259 * C4621 + C44261 * C2716 +
                       C50959 * C2719 + C44260 * C1614 + C50958 * C1622) *
                          C118) *
                         C50892) *
                        C50746) *
                       C1380) *
                  C50647) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C118 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50763) *
                        C50892 +
                    ((C44300 + C44301 + C44302) * C118 +
                     (C44303 + C44304 + C44305) * C50763) *
                        C50626) *
                       C50682 * C1145 -
                   (((C44488 + C44489 + C44490) * C50763 +
                     (C44491 + C44492 + C44493) * C118) *
                        C50626 +
                    ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                      C50959 * C947 + C44260 * C310 + C50958 * C327) *
                         C50763 +
                     (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                      C50959 * C937 + C44260 * C297 + C50958 * C311) *
                         C118) *
                        C50892) *
                       C50682 * C1146 +
                   (((C44260 * C298 + C50958 * C312 + C44261 * C1614 +
                      C50959 * C1622 + C44262 * C2716 + C44259 * C2719) *
                         C118 +
                     (C44260 * C313 + C50958 * C328 + C44261 * C1621 +
                      C50959 * C1626 + C44262 * C2720 + C44259 * C2725) *
                         C50763) *
                        C50892 +
                    ((C44494 + C44495 + C44496) * C118 +
                     (C44497 + C44498 + C44499) * C50763) *
                        C50626) *
                       C50682 * C1147 -
                   (((C44262 * C3704 + C44259 * C3708 + C44261 * C3268 +
                      C50959 * C3272 + C44260 * C1158 + C50958 * C1164) *
                         C50763 +
                     (C44262 * C3702 + C44259 * C3705 + C44261 * C3263 +
                      C50959 * C3267 + C44260 * C1152 + C50958 * C1159) *
                         C118) *
                        C50626 +
                    ((C44262 * C3706 + C44259 * C3709 + C44261 * C3266 +
                      C50959 * C3271 + C44260 * C1160 + C50958 * C1165) *
                         C50763 +
                     (C44262 * C3703 + C44259 * C3707 + C44261 * C3262 +
                      C50959 * C3265 + C44260 * C1153 + C50958 * C1161) *
                         C118) *
                        C50892) *
                       C50682 * C1148) *
                  C50647) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50682 * C1074 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C50682 * C50718) *
                       C1076 +
                   ((((C44493 + C44492 + C44491) * C118 +
                      (C44490 + C44489 + C44488) * C50763) *
                         C50892 +
                     ((C44840 + C44841 + C44842) * C118 +
                      (C44843 + C44844 + C44845) * C50763) *
                         C50626) *
                        C50682 * C50718 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C50682 * C1074) *
                       C1077 +
                   ((((C44311 + C44310 + C44309) * C118 +
                      (C44308 + C44307 + C44306) * C50763) *
                         C50892 +
                     ((C44312 + C44313 + C44314) * C118 +
                      (C44315 + C44316 + C44317) * C50763) *
                         C50626) *
                        C50682 * C1074 -
                    (((C44262 * C1268 + C44259 * C1276 + C44261 * C944 +
                       C50959 * C950 + C44260 * C304 + C50958 * C324) *
                          C50763 +
                      (C44262 * C1264 + C44259 * C1269 + C44261 * C935 +
                       C50959 * C943 + C44260 * C294 + C50958 * C305) *
                          C118) *
                         C50626 +
                     ((C44845 + C44844 + C44843) * C50763 +
                      (C44842 + C44841 + C44840) * C118) *
                         C50892) *
                        C50682 * C50718) *
                       C1078)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C480 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C481 +
                    (((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                       C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                          C118 +
                      (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                       C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                          C50763) *
                         C50892 +
                     ((C44676 + C44677 + C44678) * C118 +
                      (C44679 + C44680 + C44681) * C50763) *
                         C50626) *
                        C482) *
                       C1074 +
                   ((((C44260 * C932 + C50958 * C937 + C44261 * C1267 +
                       C50959 * C1275 + C44262 * C4615 + C44259 * C4623) *
                          C118 +
                      (C44260 * C938 + C50958 * C947 + C44261 * C1274 +
                       C50959 * C1279 + C44262 * C4622 + C44259 * C4627) *
                          C50763) *
                         C50892 +
                     ((C45216 + C45217 + C45218) * C118 +
                      (C45219 + C45220 + C45221) * C50763) *
                         C50626) *
                        C481 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C480 -
                    (((C44262 * C6584 + C44259 * C6588 + C44261 * C4618 +
                       C50959 * C4625 + C44260 * C1272 + C50958 * C1278) *
                          C50763 +
                      (C44262 * C6582 + C44259 * C6585 + C44261 * C4613 +
                       C50959 * C4619 + C44260 * C1266 + C50958 * C1273) *
                          C118) *
                         C50626 +
                     ((C44262 * C6586 + C44259 * C6589 + C44261 * C4622 +
                       C50959 * C4627 + C44260 * C1274 + C50958 * C1279) *
                          C50763 +
                      (C44262 * C6583 + C44259 * C6587 + C44261 * C4615 +
                       C50959 * C4623 + C44260 * C1267 + C50958 * C1275) *
                          C118) *
                         C50892) *
                        C482) *
                       C50718) *
                  C50647) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                        C50959 * C500 + C44262 * C487 + C44259 * C501) *
                           C118 +
                       (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                        C50959 * C516 + C44262 * C502 + C44259 * C517) *
                           C50763) *
                          C50892 +
                      ((C44300 + C44301 + C44302) * C118 +
                       (C44303 + C44304 + C44305) * C50763) *
                          C50626) *
                         C50908 -
                     (((C44670 + C44671 + C44672) * C50763 +
                       (C44673 + C44674 + C44675) * C118) *
                          C50626 +
                      ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                        C50959 * C517 + C44260 * C499 + C50958 * C516) *
                           C50763 +
                       (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                        C50959 * C501 + C44260 * C486 + C50958 * C500) *
                           C118) *
                          C50892) *
                         C50746) *
                        C1074 +
                    ((((C44260 * C932 + C50958 * C937 + C44261 * C1267 +
                        C50959 * C1275 + C44262 * C4615 + C44259 * C4623) *
                           C118 +
                       (C44260 * C938 + C50958 * C947 + C44261 * C1274 +
                        C50959 * C1279 + C44262 * C4622 + C44259 * C4627) *
                           C50763) *
                          C50892 +
                      ((C45216 + C45217 + C45218) * C118 +
                       (C45219 + C45220 + C45221) * C50763) *
                          C50626) *
                         C50746 -
                     (((C44488 + C44489 + C44490) * C50763 +
                       (C44491 + C44492 + C44493) * C118) *
                          C50626 +
                      ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                        C50959 * C947 + C44260 * C310 + C50958 * C327) *
                           C50763 +
                       (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                        C50959 * C937 + C44260 * C297 + C50958 * C311) *
                           C118) *
                          C50892) *
                         C50908) *
                        C50718) *
                       C50899 +
                   (((((C44675 + C44674 + C44673) * C118 +
                       (C44672 + C44671 + C44670) * C50763) *
                          C50892 +
                      ((C45004 + C45005 + C45006) * C118 +
                       (C45007 + C45008 + C45009) * C50763) *
                          C50626) *
                         C50746 -
                     (((C44306 + C44307 + C44308) * C50763 +
                       (C44309 + C44310 + C44311) * C118) *
                          C50626 +
                      ((C44305 + C44304 + C44303) * C50763 +
                       (C44302 + C44301 + C44300) * C118) *
                          C50892) *
                         C50908) *
                        C1074 +
                    ((((C44493 + C44492 + C44491) * C118 +
                       (C44490 + C44489 + C44488) * C50763) *
                          C50892 +
                      ((C44840 + C44841 + C44842) * C118 +
                       (C44843 + C44844 + C44845) * C50763) *
                          C50626) *
                         C50908 -
                     (((C44262 * C6171 + C44259 * C6173 + C44261 * C1270 +
                        C50959 * C1277 + C44260 * C942 + C50958 * C949) *
                           C50763 +
                       (C44262 * C6170 + C44259 * C6172 + C44261 * C1265 +
                        C50959 * C1271 + C44260 * C934 + C50958 * C941) *
                           C118) *
                          C50626 +
                      ((C45221 + C45220 + C45219) * C50763 +
                       (C45218 + C45217 + C45216) * C118) *
                          C50892) *
                         C50746) *
                        C50718) *
                       C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50682 * C1074 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C50682 * C50718) *
                       C1076 +
                   ((((C44493 + C44492 + C44491) * C118 +
                      (C44490 + C44489 + C44488) * C50763) *
                         C50892 +
                     ((C44840 + C44841 + C44842) * C118 +
                      (C44843 + C44844 + C44845) * C50763) *
                         C50626) *
                        C50682 * C50718 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C50682 * C1074) *
                       C1077 +
                   ((((C44311 + C44310 + C44309) * C118 +
                      (C44308 + C44307 + C44306) * C50763) *
                         C50892 +
                     ((C44312 + C44313 + C44314) * C118 +
                      (C44315 + C44316 + C44317) * C50763) *
                         C50626) *
                        C50682 * C1074 -
                    (((C44262 * C1268 + C44259 * C1276 + C44261 * C944 +
                       C50959 * C950 + C44260 * C304 + C50958 * C324) *
                          C50763 +
                      (C44262 * C1264 + C44259 * C1269 + C44261 * C935 +
                       C50959 * C943 + C44260 * C294 + C50958 * C305) *
                          C118) *
                         C50626 +
                     ((C44845 + C44844 + C44843) * C50763 +
                      (C44842 + C44841 + C44840) * C118) *
                         C50892) *
                        C50682 * C50718) *
                       C1078)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C118 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50763) *
                        C50892 +
                    ((C44300 + C44301 + C44302) * C118 +
                     (C44303 + C44304 + C44305) * C50763) *
                        C50626) *
                       C50682 * C1145 -
                   (((C44488 + C44489 + C44490) * C50763 +
                     (C44491 + C44492 + C44493) * C118) *
                        C50626 +
                    ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                      C50959 * C947 + C44260 * C310 + C50958 * C327) *
                         C50763 +
                     (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                      C50959 * C937 + C44260 * C297 + C50958 * C311) *
                         C118) *
                        C50892) *
                       C50682 * C1146 +
                   (((C44260 * C298 + C50958 * C312 + C44261 * C1614 +
                      C50959 * C1622 + C44262 * C2716 + C44259 * C2719) *
                         C118 +
                     (C44260 * C313 + C50958 * C328 + C44261 * C1621 +
                      C50959 * C1626 + C44262 * C2720 + C44259 * C2725) *
                         C50763) *
                        C50892 +
                    ((C44494 + C44495 + C44496) * C118 +
                     (C44497 + C44498 + C44499) * C50763) *
                        C50626) *
                       C50682 * C1147 -
                   (((C44262 * C3704 + C44259 * C3708 + C44261 * C3268 +
                      C50959 * C3272 + C44260 * C1158 + C50958 * C1164) *
                         C50763 +
                     (C44262 * C3702 + C44259 * C3705 + C44261 * C3263 +
                      C50959 * C3267 + C44260 * C1152 + C50958 * C1159) *
                         C118) *
                        C50626 +
                    ((C44262 * C3706 + C44259 * C3709 + C44261 * C3266 +
                      C50959 * C3271 + C44260 * C1160 + C50958 * C1165) *
                         C50763 +
                     (C44262 * C3703 + C44259 * C3707 + C44261 * C3262 +
                      C50959 * C3265 + C44260 * C1153 + C50958 * C1161) *
                         C118) *
                        C50892) *
                       C50682 * C1148) *
                  C50647) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                        C50959 * C500 + C44262 * C487 + C44259 * C501) *
                           C118 +
                       (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                        C50959 * C516 + C44262 * C502 + C44259 * C517) *
                           C50763) *
                          C50892 +
                      ((C44300 + C44301 + C44302) * C118 +
                       (C44303 + C44304 + C44305) * C50763) *
                          C50626) *
                         C1725 -
                     (((C44670 + C44671 + C44672) * C50763 +
                       (C44673 + C44674 + C44675) * C118) *
                          C50626 +
                      ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                        C50959 * C517 + C44260 * C499 + C50958 * C516) *
                           C50763 +
                       (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                        C50959 * C501 + C44260 * C486 + C50958 * C500) *
                           C118) *
                          C50892) *
                         C50746) *
                        C50907 +
                    ((((C44260 * C932 + C50958 * C937 + C44261 * C1267 +
                        C50959 * C1275 + C44262 * C4615 + C44259 * C4623) *
                           C118 +
                       (C44260 * C938 + C50958 * C947 + C44261 * C1274 +
                        C50959 * C1279 + C44262 * C4622 + C44259 * C4627) *
                           C50763) *
                          C50892 +
                      ((C45216 + C45217 + C45218) * C118 +
                       (C45219 + C45220 + C45221) * C50763) *
                          C50626) *
                         C50746 -
                     (((C44488 + C44489 + C44490) * C50763 +
                       (C44491 + C44492 + C44493) * C118) *
                          C50626 +
                      ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                        C50959 * C947 + C44260 * C310 + C50958 * C327) *
                           C50763 +
                       (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                        C50959 * C937 + C44260 * C297 + C50958 * C311) *
                           C118) *
                          C50892) *
                         C1725) *
                        C50718) *
                       C50899 +
                   (((((C44675 + C44674 + C44673) * C118 +
                       (C44672 + C44671 + C44670) * C50763) *
                          C50892 +
                      ((C45004 + C45005 + C45006) * C118 +
                       (C45007 + C45008 + C45009) * C50763) *
                          C50626) *
                         C50746 -
                     (((C44306 + C44307 + C44308) * C50763 +
                       (C44309 + C44310 + C44311) * C118) *
                          C50626 +
                      ((C44305 + C44304 + C44303) * C50763 +
                       (C44302 + C44301 + C44300) * C118) *
                          C50892) *
                         C1725) *
                        C50907 +
                    ((((C44493 + C44492 + C44491) * C118 +
                       (C44490 + C44489 + C44488) * C50763) *
                          C50892 +
                      ((C44840 + C44841 + C44842) * C118 +
                       (C44843 + C44844 + C44845) * C50763) *
                          C50626) *
                         C1725 -
                     (((C44262 * C6171 + C44259 * C6173 + C44261 * C1270 +
                        C50959 * C1277 + C44260 * C942 + C50958 * C949) *
                           C50763 +
                       (C44262 * C6170 + C44259 * C6172 + C44261 * C1265 +
                        C50959 * C1271 + C44260 * C934 + C50958 * C941) *
                           C118) *
                          C50626 +
                      ((C45221 + C45220 + C45219) * C50763 +
                       (C45218 + C45217 + C45216) * C118) *
                          C50892) *
                         C50746) *
                        C50718) *
                       C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50954 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C50955 +
                    (((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                       C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                          C118 +
                      (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                       C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                          C50763) *
                         C50892 +
                     ((C44676 + C44677 + C44678) * C118 +
                      (C44679 + C44680 + C44681) * C50763) *
                         C50626) *
                        C2141) *
                       C50907 +
                   ((((C44260 * C932 + C50958 * C937 + C44261 * C1267 +
                       C50959 * C1275 + C44262 * C4615 + C44259 * C4623) *
                          C118 +
                      (C44260 * C938 + C50958 * C947 + C44261 * C1274 +
                       C50959 * C1279 + C44262 * C4622 + C44259 * C4627) *
                          C50763) *
                         C50892 +
                     ((C45216 + C45217 + C45218) * C118 +
                      (C45219 + C45220 + C45221) * C50763) *
                         C50626) *
                        C50955 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C50954 -
                    (((C44262 * C6584 + C44259 * C6588 + C44261 * C4618 +
                       C50959 * C4625 + C44260 * C1272 + C50958 * C1278) *
                          C50763 +
                      (C44262 * C6582 + C44259 * C6585 + C44261 * C4613 +
                       C50959 * C4619 + C44260 * C1266 + C50958 * C1273) *
                          C118) *
                         C50626 +
                     ((C44262 * C6586 + C44259 * C6589 + C44261 * C4622 +
                       C50959 * C4627 + C44260 * C1274 + C50958 * C1279) *
                          C50763 +
                      (C44262 * C6583 + C44259 * C6587 + C44261 * C4615 +
                       C50959 * C4623 + C44260 * C1267 + C50958 * C1275) *
                          C118) *
                         C50892) *
                        C2141) *
                       C50718) *
                  C50647) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C1725 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C50746) *
                       C289 +
                   ((((C44260 * C932 + C50958 * C937 + C44261 * C1267 +
                       C50959 * C1275 + C44262 * C4615 + C44259 * C4623) *
                          C118 +
                      (C44260 * C938 + C50958 * C947 + C44261 * C1274 +
                       C50959 * C1279 + C44262 * C4622 + C44259 * C4627) *
                          C50763) *
                         C50892 +
                     ((C45216 + C45217 + C45218) * C118 +
                      (C45219 + C45220 + C45221) * C50763) *
                         C50626) *
                        C50746 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C1725) *
                       C290 +
                   ((((C44260 * C298 + C50958 * C312 + C44261 * C1614 +
                       C50959 * C1622 + C44262 * C2716 + C44259 * C2719) *
                          C118 +
                      (C44260 * C313 + C50958 * C328 + C44261 * C1621 +
                       C50959 * C1626 + C44262 * C2720 + C44259 * C2725) *
                          C50763) *
                         C50892 +
                     ((C44494 + C44495 + C44496) * C118 +
                      (C44497 + C44498 + C44499) * C50763) *
                         C50626) *
                        C1725 -
                    (((C44262 * C4616 + C44259 * C4624 + C44261 * C2722 +
                       C50959 * C2726 + C44260 * C1619 + C50958 * C1625) *
                          C50763 +
                      (C44262 * C4612 + C44259 * C4617 + C44261 * C2717 +
                       C50959 * C2721 + C44260 * C1613 + C50958 * C1620) *
                          C118) *
                         C50626 +
                     ((C44262 * C4620 + C44259 * C4626 + C44261 * C2720 +
                       C50959 * C2725 + C44260 * C1621 + C50958 * C1626) *
                          C50763 +
                      (C44262 * C4614 + C44259 * C4621 + C44261 * C2716 +
                       C50959 * C2719 + C44260 * C1614 + C50958 * C1622) *
                          C118) *
                         C50892) *
                        C50746) *
                       C291) *
                  C50647) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C1725 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C50746) *
                       C50666 * C1076 +
                   ((((C44675 + C44674 + C44673) * C118 +
                      (C44672 + C44671 + C44670) * C50763) *
                         C50892 +
                     ((C45004 + C45005 + C45006) * C118 +
                      (C45007 + C45008 + C45009) * C50763) *
                         C50626) *
                        C50746 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C1725) *
                       C50666 * C1077 +
                   ((((C44311 + C44310 + C44309) * C118 +
                      (C44308 + C44307 + C44306) * C50763) *
                         C50892 +
                     ((C44312 + C44313 + C44314) * C118 +
                      (C44315 + C44316 + C44317) * C50763) *
                         C50626) *
                        C1725 -
                    (((C44262 * C1899 + C44259 * C1907 + C44261 * C508 +
                       C50959 * C520 + C44260 * C493 + C50958 * C513) *
                          C50763 +
                      (C44262 * C1895 + C44259 * C1900 + C44261 * C490 +
                       C50959 * C507 + C44260 * C483 + C50958 * C494) *
                          C118) *
                         C50626 +
                     ((C45009 + C45008 + C45007) * C50763 +
                      (C45006 + C45005 + C45004) * C118) *
                         C50892) *
                        C50746) *
                       C50666 * C1078)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                      C50959 * C500 + C44262 * C487 + C44259 * C501) *
                         C118 +
                     (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                      C50959 * C516 + C44262 * C502 + C44259 * C517) *
                         C50763) *
                        C50892 +
                    ((C44300 + C44301 + C44302) * C118 +
                     (C44303 + C44304 + C44305) * C50763) *
                        C50626) *
                       C1891 -
                   (((C44670 + C44671 + C44672) * C50763 +
                     (C44673 + C44674 + C44675) * C118) *
                        C50626 +
                    ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                      C50959 * C517 + C44260 * C499 + C50958 * C516) *
                         C50763 +
                     (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                      C50959 * C501 + C44260 * C486 + C50958 * C500) *
                         C118) *
                        C50892) *
                       C1892 +
                   (((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                      C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                         C118 +
                     (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                      C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                         C50763) *
                        C50892 +
                    ((C44676 + C44677 + C44678) * C118 +
                     (C44679 + C44680 + C44681) * C50763) *
                        C50626) *
                       C1893 -
                   (((C44262 * C7468 + C44259 * C7472 + C44261 * C5606 +
                      C50959 * C5610 + C44260 * C1903 + C50958 * C1909) *
                         C50763 +
                     (C44262 * C7466 + C44259 * C7469 + C44261 * C5601 +
                      C50959 * C5605 + C44260 * C1897 + C50958 * C1904) *
                         C118) *
                        C50626 +
                    ((C44262 * C7470 + C44259 * C7473 + C44261 * C5604 +
                      C50959 * C5609 + C44260 * C1905 + C50958 * C1910) *
                         C50763 +
                     (C44262 * C7467 + C44259 * C7471 + C44261 * C5600 +
                      C50959 * C5603 + C44260 * C1898 + C50958 * C1906) *
                         C118) *
                        C50892) *
                       C1894) *
                  C50666 * C50647) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C50954 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C50955 +
                    (((C44260 * C487 + C50958 * C501 + C44261 * C1898 +
                       C50959 * C1906 + C44262 * C5600 + C44259 * C5603) *
                          C118 +
                      (C44260 * C502 + C50958 * C517 + C44261 * C1905 +
                       C50959 * C1910 + C44262 * C5604 + C44259 * C5609) *
                          C50763) *
                         C50892 +
                     ((C44676 + C44677 + C44678) * C118 +
                      (C44679 + C44680 + C44681) * C50763) *
                         C50626) *
                        C2141) *
                       C50666 * C50899 +
                   ((((C44675 + C44674 + C44673) * C118 +
                      (C44672 + C44671 + C44670) * C50763) *
                         C50892 +
                     ((C45004 + C45005 + C45006) * C118 +
                      (C45007 + C45008 + C45009) * C50763) *
                         C50626) *
                        C50955 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C50954 -
                    (((C44262 * C5607 + C44259 * C5611 + C44261 * C1901 +
                       C50959 * C1908 + C44260 * C506 + C50958 * C519) *
                          C50763 +
                      (C44262 * C5602 + C44259 * C5608 + C44261 * C1896 +
                       C50959 * C1902 + C44260 * C489 + C50958 * C505) *
                          C118) *
                         C50626 +
                     ((C44681 + C44680 + C44679) * C50763 +
                      (C44678 + C44677 + C44676) * C118) *
                         C50892) *
                        C2141) *
                       C50666 * C50653)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C1725 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C50746) *
                       C50666 * C1076 +
                   ((((C44675 + C44674 + C44673) * C118 +
                      (C44672 + C44671 + C44670) * C50763) *
                         C50892 +
                     ((C45004 + C45005 + C45006) * C118 +
                      (C45007 + C45008 + C45009) * C50763) *
                         C50626) *
                        C50746 -
                    (((C44306 + C44307 + C44308) * C50763 +
                      (C44309 + C44310 + C44311) * C118) *
                         C50626 +
                     ((C44305 + C44304 + C44303) * C50763 +
                      (C44302 + C44301 + C44300) * C118) *
                         C50892) *
                        C1725) *
                       C50666 * C1077 +
                   ((((C44311 + C44310 + C44309) * C118 +
                      (C44308 + C44307 + C44306) * C50763) *
                         C50892 +
                     ((C44312 + C44313 + C44314) * C118 +
                      (C44315 + C44316 + C44317) * C50763) *
                         C50626) *
                        C1725 -
                    (((C44262 * C1899 + C44259 * C1907 + C44261 * C508 +
                       C50959 * C520 + C44260 * C493 + C50958 * C513) *
                          C50763 +
                      (C44262 * C1895 + C44259 * C1900 + C44261 * C490 +
                       C50959 * C507 + C44260 * C483 + C50958 * C494) *
                          C118) *
                         C50626 +
                     ((C45009 + C45008 + C45007) * C50763 +
                      (C45006 + C45005 + C45004) * C118) *
                         C50892) *
                        C50746) *
                       C50666 * C1078)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C44260 * C119 + C50958 * C126 + C44261 * C486 +
                       C50959 * C500 + C44262 * C487 + C44259 * C501) *
                          C118 +
                      (C44260 * C127 + C50958 * C140 + C44261 * C499 +
                       C50959 * C516 + C44262 * C502 + C44259 * C517) *
                          C50763) *
                         C50892 +
                     ((C44300 + C44301 + C44302) * C118 +
                      (C44303 + C44304 + C44305) * C50763) *
                         C50626) *
                        C1725 -
                    (((C44670 + C44671 + C44672) * C50763 +
                      (C44673 + C44674 + C44675) * C118) *
                         C50626 +
                     ((C44262 * C1905 + C44259 * C1910 + C44261 * C502 +
                       C50959 * C517 + C44260 * C499 + C50958 * C516) *
                          C50763 +
                      (C44262 * C1898 + C44259 * C1906 + C44261 * C487 +
                       C50959 * C501 + C44260 * C486 + C50958 * C500) *
                          C118) *
                         C50892) *
                        C50746) *
                       C289 +
                   ((((C44260 * C932 + C50958 * C937 + C44261 * C1267 +
                       C50959 * C1275 + C44262 * C4615 + C44259 * C4623) *
                          C118 +
                      (C44260 * C938 + C50958 * C947 + C44261 * C1274 +
                       C50959 * C1279 + C44262 * C4622 + C44259 * C4627) *
                          C50763) *
                         C50892 +
                     ((C45216 + C45217 + C45218) * C118 +
                      (C45219 + C45220 + C45221) * C50763) *
                         C50626) *
                        C50746 -
                    (((C44488 + C44489 + C44490) * C50763 +
                      (C44491 + C44492 + C44493) * C118) *
                         C50626 +
                     ((C44262 * C1274 + C44259 * C1279 + C44261 * C938 +
                       C50959 * C947 + C44260 * C310 + C50958 * C327) *
                          C50763 +
                      (C44262 * C1267 + C44259 * C1275 + C44261 * C932 +
                       C50959 * C937 + C44260 * C297 + C50958 * C311) *
                          C118) *
                         C50892) *
                        C1725) *
                       C290 +
                   ((((C44260 * C298 + C50958 * C312 + C44261 * C1614 +
                       C50959 * C1622 + C44262 * C2716 + C44259 * C2719) *
                          C118 +
                      (C44260 * C313 + C50958 * C328 + C44261 * C1621 +
                       C50959 * C1626 + C44262 * C2720 + C44259 * C2725) *
                          C50763) *
                         C50892 +
                     ((C44494 + C44495 + C44496) * C118 +
                      (C44497 + C44498 + C44499) * C50763) *
                         C50626) *
                        C1725 -
                    (((C44262 * C4616 + C44259 * C4624 + C44261 * C2722 +
                       C50959 * C2726 + C44260 * C1619 + C50958 * C1625) *
                          C50763 +
                      (C44262 * C4612 + C44259 * C4617 + C44261 * C2717 +
                       C50959 * C2721 + C44260 * C1613 + C50958 * C1620) *
                          C118) *
                         C50626 +
                     ((C44262 * C4620 + C44259 * C4626 + C44261 * C2720 +
                       C50959 * C2725 + C44260 * C1621 + C50958 * C1626) *
                          C50763 +
                      (C44262 * C4614 + C44259 * C4621 + C44261 * C2716 +
                       C50959 * C2719 + C44260 * C1614 + C50958 * C1622) *
                          C118) *
                         C50892) *
                        C50746) *
                       C291) *
                  C50647) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C50907 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C50718) *
              C50950 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
               C50682 * C50718 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C50907) *
              C50951 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C50682 * C50907 -
           (((C33356 * C945 + C50842 * C951 + C33355 * C321 + C33353 * C332) *
                 C50763 +
             (C33356 * C936 + C50842 * C946 + C33355 * C302 + C33353 * C320) *
                 C118) *
                C17237 +
            ((C33965 + C33964) * C50763 + (C33963 + C33962) * C118) * C17236 +
            C33966 * C17235) *
               C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C50907 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C50718) *
              C50950 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C50718 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C50907) *
              C50951 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C50682 * C50907 -
           ((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
             C33353 * C1163) *
                C2340 +
            (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
             C33353 * C1157) *
                C2345 +
            (C33609 + C33608) * C2339 + (C33607 + C33606) * C2344 +
            C33950 * C2338 + C33951 * C2343) *
               C50621 * C50682 * C50718) *
              C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                  C118 +
              (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                  C50763) *
                 C17235 +
             ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
             C33414 * C17237) *
                C50908 -
            (C34129 * C17237 +
             ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
             ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                  C50763 +
              (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                  C118) *
                 C17235) *
                C50746) *
               C50907 +
           ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 +
               C50842 * C1275) *
                  C118 +
              (C33355 * C938 + C33353 * C947 + C33356 * C1274 +
               C50842 * C1279) *
                  C50763) *
                 C17235 +
             ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
             ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
                C50746 -
            (C33966 * C17237 +
             ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
             ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                  C50763 +
              (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                  C118) *
                 C17235) *
                C50908) *
               C50718) *
              C292 +
          (((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
             ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
             ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
                C50746 -
            (C33415 * C17237 +
             ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
             ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
                C50908) *
               C50907 +
           ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
             ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
             ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
                C50908 -
            (((C33356 * C1268 + C50842 * C1276 + C33355 * C944 +
               C33353 * C950) *
                  C50763 +
              (C33356 * C1264 + C50842 * C1269 + C33355 * C935 +
               C33353 * C943) *
                  C118) *
                 C17237 +
             ((C34347 + C34346) * C50763 + (C34345 + C34344) * C118) * C17236 +
             ((C34343 + C34342) * C50763 + (C34341 + C34340) * C118) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C2343 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C2338 +
             (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
             C36394 * C2345 + C36395 * C2340) *
                C50621 * C50908 -
            ((C37052 + C37053) * C2340 + (C37054 + C37055) * C2345 +
             (C37056 + C37057) * C2339 + (C37058 + C37059) * C2344 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C2338 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C2343) *
                C50621 * C50746) *
               C50907 +
           (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
             (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
             (C33355 * C3262 + C33353 * C3265 + C33356 * C3703 +
              C50842 * C3707) *
                 C2345 +
             (C33355 * C3266 + C33353 * C3271 + C33356 * C3706 +
              C50842 * C3709) *
                 C2340) *
                C50621 * C50746 -
            ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
             (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
             (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
                C50621 * C50908) *
               C50718) *
              C292 +
          ((((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
             (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
             (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
                C50621 * C50746 -
            (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
             (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
             (C33391 + C33390) * C2343) *
                C50621 * C50908) *
               C50907 +
           (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
             (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
             (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
                C50621 * C50908 -
            ((C33356 * C3704 + C50842 * C3708 + C33355 * C3268 +
              C33353 * C3272) *
                 C2340 +
             (C33356 * C3702 + C50842 * C3705 + C33355 * C3263 +
              C33353 * C3267) *
                 C2345 +
             (C37063 + C37062) * C2339 + (C37061 + C37060) * C2344 +
             (C34343 + C34342) * C2338 + (C34341 + C34340) * C2343) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C289 -
           (((C33594 + C33595) * C50763 + (C33596 + C33597) * C118) * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C290 +
           (((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C50682 * C291) *
              C292 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33355 * C294 + C33353 * C305 + C33356 * C935 + C50842 * C943) *
                 C118 +
             (C33355 * C304 + C33353 * C324 + C33356 * C944 + C50842 * C950) *
                 C50763) *
                C17237) *
               C50682 * C290 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C289 -
           (((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
                 C50763 +
             (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
                 C118) *
                C17237 +
            ((C33609 + C33608) * C50763 + (C33607 + C33606) * C118) * C17236 +
            ((C33605 + C33604) * C50763 + (C33603 + C33602) * C118) * C17235) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C118 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50763) *
               C17235 +
           ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
           C33414 * C17237) *
              C50682 * C50666 * C113 -
          (C33415 * C17237 +
           ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
           ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
              C50682 * C50666 * C114 +
          (C33414 * C17235 +
           ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
           ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
              C50682 * C50666 * C115 -
          (((C33356 * C789 + C50842 * C791 + C33355 * C137 + C33353 * C145) *
                C50763 +
            (C33356 * C788 + C50842 * C790 + C33355 * C124 + C33353 * C136) *
                C118) *
               C17237 +
           ((C33405 + C33404) * C50763 + (C33403 + C33402) * C118) * C17236 +
           C33415 * C17235) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C480 -
           (((C33788 + C33789) * C50763 + (C33790 + C33791) * C118) * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C481 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C118 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50763) *
                C17235 +
            ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
            ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
               C482) *
              C50666 * C292 +
          ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
            ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
            ((C33355 * C483 + C33353 * C494 + C33356 * C490 + C50842 * C507) *
                 C118 +
             (C33355 * C493 + C33353 * C513 + C33356 * C508 + C50842 * C520) *
                 C50763) *
                C17237) *
               C481 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C480 -
           (((C33356 * C1899 + C50842 * C1907 + C33355 * C508 + C33353 * C520) *
                 C50763 +
             (C33356 * C1895 + C50842 * C1900 + C33355 * C490 + C33353 * C507) *
                 C118) *
                C17237 +
            ((C33803 + C33802) * C50763 + (C33801 + C33800) * C118) * C17236 +
            ((C33799 + C33798) * C50763 + (C33797 + C33796) * C118) * C17235) *
               C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C33355 * C297 + C33353 * C311 + C33356 * C932 + C50842 * C937) *
               C2344 +
           (C33355 * C310 + C33353 * C327 + C33356 * C938 + C50842 * C947) *
               C2339 +
           (C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
               C2345 +
           (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
               C2340) *
              C50621 * C50682 * C50666 * C113 -
          ((C33605 + C33604) * C2340 + (C33603 + C33602) * C2345 +
           (C33598 + C33599) * C2339 + (C33600 + C33601) * C2344 +
           (C33393 + C33392) * C2338 + (C33391 + C33390) * C2343) *
              C50621 * C50682 * C50666 * C114 +
          (C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
           (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
           (C33608 + C33609) * C2340) *
              C50621 * C50682 * C50666 * C115 -
          ((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
               C2340 +
           (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
               C2345 +
           (C33965 + C33964) * C2339 + (C33963 + C33962) * C2344 +
           C33408 * C2338 + C33409 * C2343) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C289 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C290 +
           (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 +
            (C33355 * C2510 + C33353 * C2513 + C33356 * C4209 +
             C50842 * C4213) *
                C2345 +
            (C33355 * C2514 + C33353 * C2519 + C33356 * C4212 +
             C50842 * C4215) *
                C2340) *
               C50621 * C50682 * C291) *
              C292 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C290 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C289 -
           ((C33356 * C4210 + C50842 * C4214 + C33355 * C2516 +
             C33353 * C2520) *
                C2340 +
            (C33356 * C4208 + C50842 * C4211 + C33355 * C2511 +
             C33353 * C2515) *
                C2345 +
            (C36393 + C36392) * C2339 + (C36391 + C36390) * C2344 +
            C36376 * C2338 + C36377 * C2343) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C480 -
           ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
             C33353 * C1626) *
                C2340 +
            (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
             C33353 * C1622) *
                C2345 +
            (C33356 * C1274 + C50842 * C1279 + C33355 * C938 + C33353 * C947) *
                C2339 +
            (C33356 * C1267 + C50842 * C1275 + C33355 * C932 + C33353 * C937) *
                C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C481 +
           ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C2343 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C2338 +
            (C33355 * C1267 + C33353 * C1275 + C33356 * C4615 +
             C50842 * C4623) *
                C2344 +
            (C33355 * C1274 + C33353 * C1279 + C33356 * C4622 +
             C50842 * C4627) *
                C2339 +
            (C33355 * C2716 + C33353 * C2719 + C33356 * C4614 +
             C50842 * C4621) *
                C2345 +
            (C33355 * C2720 + C33353 * C2725 + C33356 * C4620 +
             C50842 * C4626) *
                C2340) *
               C50621 * C482) *
              C50666 * C292 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C33355 * C1613 + C33353 * C1620 + C33356 * C2717 +
             C50842 * C2721) *
                C2345 +
            (C33355 * C1619 + C33353 * C1625 + C33356 * C2722 +
             C50842 * C2726) *
                C2340) *
               C50621 * C481 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C480 -
           ((C33356 * C4616 + C50842 * C4624 + C33355 * C2722 +
             C33353 * C2726) *
                C2340 +
            (C33356 * C4612 + C50842 * C4617 + C33355 * C2717 +
             C33353 * C2721) *
                C2345 +
            (C33356 * C4618 + C50842 * C4625 + C33355 * C1272 +
             C33353 * C1278) *
                C2339 +
            (C33356 * C4613 + C50842 * C4619 + C33355 * C1266 +
             C33353 * C1273) *
                C2344 +
            (C33799 + C33798) * C2338 + (C33797 + C33796) * C2343) *
               C50621 * C482) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50908 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C50666 * C50950 +
          ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
            ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
            ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
               C50746 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50908) *
              C50666 * C50951 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C50908 -
           (((C33356 * C511 + C50842 * C522 + C33355 * C510 + C33353 * C521) *
                 C50763 +
             (C33356 * C492 + C50842 * C512 + C33355 * C491 + C33353 * C509) *
                 C118) *
                C17237 +
            ((C34128 + C34127) * C50763 + (C34126 + C34125) * C118) * C17236 +
            C34129 * C17235) *
               C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50908 -
           ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
             C33353 * C1626) *
                C2340 +
            (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
             C33353 * C1622) *
                C2345 +
            (C33356 * C1274 + C50842 * C1279 + C33355 * C938 + C33353 * C947) *
                C2339 +
            (C33356 * C1267 + C50842 * C1275 + C33355 * C932 + C33353 * C937) *
                C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C50666 * C50950 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C33355 * C1613 + C33353 * C1620 + C33356 * C2717 +
             C50842 * C2721) *
                C2345 +
            (C33355 * C1619 + C33353 * C1625 + C33356 * C2722 +
             C50842 * C2726) *
                C2340) *
               C50621 * C50746 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50908) *
              C50666 * C50951 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C50908 -
           ((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
             C33353 * C1624) *
                C2340 +
            (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
             C33353 * C1618) *
                C2345 +
            (C34347 + C34346) * C2339 + (C34345 + C34344) * C2344 +
            C34113 * C2338 + C34114 * C2343) *
               C50621 * C50746) *
              C50666 * C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C118 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50763) *
               C17235 +
           ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
           C33414 * C17237) *
              C50682 * C50666 * C113 -
          (C33415 * C17237 +
           ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
           ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
              C50682 * C50666 * C114 +
          (C33414 * C17235 +
           ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
           ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
              C50682 * C50666 * C115 -
          (((C33356 * C789 + C50842 * C791 + C33355 * C137 + C33353 * C145) *
                C50763 +
            (C33356 * C788 + C50842 * C790 + C33355 * C124 + C33353 * C136) *
                C118) *
               C17237 +
           ((C33405 + C33404) * C50763 + (C33403 + C33402) * C118) * C17236 +
           C33415 * C17235) *
              C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C289 -
           (((C33594 + C33595) * C50763 + (C33596 + C33597) * C118) * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C290 +
           (((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C50682 * C291) *
              C292 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33355 * C294 + C33353 * C305 + C33356 * C935 + C50842 * C943) *
                 C118 +
             (C33355 * C304 + C33353 * C324 + C33356 * C944 + C50842 * C950) *
                 C50763) *
                C17237) *
               C50682 * C290 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C289 -
           (((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
                 C50763 +
             (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
                 C118) *
                C17237 +
            ((C33609 + C33608) * C50763 + (C33607 + C33606) * C118) * C17236 +
            ((C33605 + C33604) * C50763 + (C33603 + C33602) * C118) * C17235) *
               C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C33355 * C297 + C33353 * C311 + C33356 * C932 + C50842 * C937) *
               C2344 +
           (C33355 * C310 + C33353 * C327 + C33356 * C938 + C50842 * C947) *
               C2339 +
           (C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
               C2345 +
           (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
               C2340) *
              C50621 * C50682 * C50666 * C113 -
          ((C33605 + C33604) * C2340 + (C33603 + C33602) * C2345 +
           (C33598 + C33599) * C2339 + (C33600 + C33601) * C2344 +
           (C33393 + C33392) * C2338 + (C33391 + C33390) * C2343) *
              C50621 * C50682 * C50666 * C114 +
          (C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
           (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
           (C33608 + C33609) * C2340) *
              C50621 * C50682 * C50666 * C115 -
          ((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
               C2340 +
           (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
               C2345 +
           (C33965 + C33964) * C2339 + (C33963 + C33962) * C2344 +
           C33408 * C2338 + C33409 * C2343) *
              C50621 * C50682 * C50666 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C289 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C290 +
           (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 +
            (C33355 * C2510 + C33353 * C2513 + C33356 * C4209 +
             C50842 * C4213) *
                C2345 +
            (C33355 * C2514 + C33353 * C2519 + C33356 * C4212 +
             C50842 * C4215) *
                C2340) *
               C50621 * C50682 * C291) *
              C292 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C290 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C289 -
           ((C33356 * C4210 + C50842 * C4214 + C33355 * C2516 +
             C33353 * C2520) *
                C2340 +
            (C33356 * C4208 + C50842 * C4211 + C33355 * C2511 +
             C33353 * C2515) *
                C2345 +
            (C36393 + C36392) * C2339 + (C36391 + C36390) * C2344 +
            C36376 * C2338 + C36377 * C2343) *
               C50621 * C50682 * C291) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C50952 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C50953 +
           (((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C50682 * C1380) *
              C50899 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
               C50682 * C50953 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C50952 -
           (((C33356 * C1615 + C50842 * C1623 + C33355 * C319 + C33353 * C331) *
                 C50763 +
             (C33356 * C1611 + C50842 * C1616 + C33355 * C301 + C33353 * C318) *
                 C118) *
                C17237 +
            ((C33609 + C33608) * C50763 + (C33607 + C33606) * C118) * C17236 +
            ((C33605 + C33604) * C50763 + (C33603 + C33602) * C118) * C17235) *
               C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C50952 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C50682 * C50953 +
           (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
            (C37320 + C37321) * C2340) *
               C50621 * C50682 * C1380) *
              C50899 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C50953 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C50952 -
           ((C33356 * C4210 + C50842 * C4214 + C33355 * C2516 +
             C33353 * C2520) *
                C2340 +
            (C33356 * C4208 + C50842 * C4211 + C33355 * C2511 +
             C33353 * C2515) *
                C2345 +
            (C36393 + C36392) * C2339 + (C36391 + C36390) * C2344 +
            C36376 * C2338 + C36377 * C2343) *
               C50621 * C50682 * C1380) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50908 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C50952 +
          ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 + C50842 * C1275) *
                 C118 +
             (C33355 * C938 + C33353 * C947 + C33356 * C1274 + C50842 * C1279) *
                 C50763) *
                C17235 +
            ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
            ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
               C50746 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50908) *
              C50953 +
          ((((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C50908 -
           (((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
              C33353 * C1624) *
                 C50763 +
             (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
              C33353 * C1618) *
                 C118) *
                C17237 +
            ((C33356 * C2722 + C50842 * C2726 + C33355 * C1619 +
              C33353 * C1625) *
                 C50763 +
             (C33356 * C2717 + C50842 * C2721 + C33355 * C1613 +
              C33353 * C1620) *
                 C118) *
                C17236 +
            ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
              C33353 * C1626) *
                 C50763 +
             (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
              C33353 * C1622) *
                 C118) *
                C17235) *
               C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50908 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C50952 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
               C50621 * C50746 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C50908) *
              C50953 +
          ((C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
            (C37320 + C37321) * C2340) *
               C50621 * C50908 -
           ((C33356 * C20716 + C50842 * C20718 + C33355 * C4212 +
             C33353 * C4215) *
                C2340 +
            (C33356 * C20715 + C50842 * C20717 + C33355 * C4209 +
             C33353 * C4213) *
                C2345 +
            (C37991 + C37990) * C2339 + (C37989 + C37988) * C2344 +
            C37978 * C2338 + C37979 * C2343) *
               C50621 * C50746) *
              C1380) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C118 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50763) *
               C17235 +
           ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
           C33414 * C17237) *
              C50682 * C1145 -
          (C33966 * C17237 +
           ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
           ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                C50763 +
            (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                C118) *
               C17235) *
              C50682 * C1146 +
          (((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                C118 +
            (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                C50763) *
               C17235 +
           ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
           ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
              C50682 * C1147 -
          (((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
             C33353 * C1163) *
                C50763 +
            (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
             C33353 * C1157) *
                C118) *
               C17237 +
           ((C33356 * C3268 + C50842 * C3272 + C33355 * C1158 +
             C33353 * C1164) *
                C50763 +
            (C33356 * C3263 + C50842 * C3267 + C33355 * C1152 +
             C33353 * C1159) *
                C118) *
               C17236 +
           ((C33356 * C3266 + C50842 * C3271 + C33355 * C1160 +
             C33353 * C1165) *
                C50763 +
            (C33356 * C3262 + C50842 * C3265 + C33355 * C1153 +
             C33353 * C1161) *
                C118) *
               C17235) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C1074 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C50718) *
              C1076 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
               C50682 * C50718 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C1074) *
              C1077 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C50682 * C1074 -
           (((C33356 * C945 + C50842 * C951 + C33355 * C321 + C33353 * C332) *
                 C50763 +
             (C33356 * C936 + C50842 * C946 + C33355 * C302 + C33353 * C320) *
                 C118) *
                C17237 +
            ((C33965 + C33964) * C50763 + (C33963 + C33962) * C118) * C17236 +
            C33966 * C17235) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C480 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C481 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C118 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50763) *
                C17235 +
            ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
            ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
               C482) *
              C1074 +
          ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 + C50842 * C1275) *
                 C118 +
             (C33355 * C938 + C33353 * C947 + C33356 * C1274 + C50842 * C1279) *
                 C50763) *
                C17235 +
            ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
            ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
               C481 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C480 -
           (((C33356 * C6171 + C50842 * C6173 + C33355 * C1270 +
              C33353 * C1277) *
                 C50763 +
             (C33356 * C6170 + C50842 * C6172 + C33355 * C1265 +
              C33353 * C1271) *
                 C118) *
                C17237 +
            ((C33356 * C4618 + C50842 * C4625 + C33355 * C1272 +
              C33353 * C1278) *
                 C50763 +
             (C33356 * C4613 + C50842 * C4619 + C33355 * C1266 +
              C33353 * C1273) *
                 C118) *
                C17236 +
            ((C33356 * C4622 + C50842 * C4627 + C33355 * C1274 +
              C33353 * C1279) *
                 C50763 +
             (C33356 * C4615 + C50842 * C4623 + C33355 * C1267 +
              C33353 * C1275) *
                 C118) *
                C17235) *
               C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C1074 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C50718) *
              C1076 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C50718 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C50682 * C1074 -
           ((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
             C33353 * C1163) *
                C2340 +
            (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
             C33353 * C1157) *
                C2345 +
            (C33609 + C33608) * C2339 + (C33607 + C33606) * C2344 +
            C33950 * C2338 + C33951 * C2343) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
           C36394 * C2345 + C36395 * C2340) *
              C50621 * C50682 * C1145 -
          (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
           (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
           (C36379 + C36378) * C2343) *
              C50621 * C50682 * C1146 +
          (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
           (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
           (C37320 + C37321) * C2340) *
              C50621 * C50682 * C1147 -
          ((C33356 * C21052 + C50842 * C21054 + C33355 * C3546 +
            C33353 * C3549) *
               C2340 +
           (C33356 * C21051 + C50842 * C21053 + C33355 * C3543 +
            C33353 * C3547) *
               C2345 +
           (C37321 + C37320) * C2339 + (C37319 + C37318) * C2344 +
           C37308 * C2338 + C37309 * C2343) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C480 -
           ((C37052 + C37053) * C2340 + (C37054 + C37055) * C2345 +
            (C37056 + C37057) * C2339 + (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C481 +
           ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C2343 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C2338 +
            (C37484 + C37485) * C2344 + (C37486 + C37487) * C2339 +
            (C37488 + C37489) * C2345 + (C37490 + C37491) * C2340) *
               C50621 * C482) *
              C1074 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C33355 * C3262 + C33353 * C3265 + C33356 * C3703 +
             C50842 * C3707) *
                C2345 +
            (C33355 * C3266 + C33353 * C3271 + C33356 * C3706 +
             C50842 * C3709) *
                C2340) *
               C50621 * C481 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C480 -
           ((C33356 * C21324 + C50842 * C21326 + C33355 * C3706 +
             C33353 * C3709) *
                C2340 +
            (C33356 * C21323 + C50842 * C21325 + C33355 * C3703 +
             C33353 * C3707) *
                C2345 +
            (C37491 + C37490) * C2339 + (C37489 + C37488) * C2344 +
            (C37487 + C37486) * C2338 + (C37485 + C37484) * C2343) *
               C50621 * C482) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                  C118 +
              (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                  C50763) *
                 C17235 +
             ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
             C33414 * C17237) *
                C50908 -
            (C34129 * C17237 +
             ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
             ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                  C50763 +
              (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                  C118) *
                 C17235) *
                C50746) *
               C1074 +
           ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 +
               C50842 * C1275) *
                  C118 +
              (C33355 * C938 + C33353 * C947 + C33356 * C1274 +
               C50842 * C1279) *
                  C50763) *
                 C17235 +
             ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
             ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
                C50746 -
            (C33966 * C17237 +
             ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
             ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                  C50763 +
              (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                  C118) *
                 C17235) *
                C50908) *
               C50718) *
              C50899 +
          (((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
             ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
             ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
                C50746 -
            (C33415 * C17237 +
             ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
             ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
                C50908) *
               C1074 +
           ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
             ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
             ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
                C50908 -
            (((C33356 * C1268 + C50842 * C1276 + C33355 * C944 +
               C33353 * C950) *
                  C50763 +
              (C33356 * C1264 + C50842 * C1269 + C33355 * C935 +
               C33353 * C943) *
                  C118) *
                 C17237 +
             ((C34347 + C34346) * C50763 + (C34345 + C34344) * C118) * C17236 +
             ((C34343 + C34342) * C50763 + (C34341 + C34340) * C118) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C2343 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C2338 +
             (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
             C36394 * C2345 + C36395 * C2340) *
                C50621 * C50908 -
            ((C37052 + C37053) * C2340 + (C37054 + C37055) * C2345 +
             (C37056 + C37057) * C2339 + (C37058 + C37059) * C2344 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C2338 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C2343) *
                C50621 * C50746) *
               C1074 +
           (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
             (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
             (C33355 * C3262 + C33353 * C3265 + C33356 * C3703 +
              C50842 * C3707) *
                 C2345 +
             (C33355 * C3266 + C33353 * C3271 + C33356 * C3706 +
              C50842 * C3709) *
                 C2340) *
                C50621 * C50746 -
            (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
             (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
             (C36379 + C36378) * C2343) *
                C50621 * C50908) *
               C50718) *
              C50899 +
          ((((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
             (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
             (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
                C50621 * C50746 -
            (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
             (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
             (C33391 + C33390) * C2343) *
                C50621 * C50908) *
               C1074 +
           (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
             (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
             (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
                C50621 * C50908 -
            ((C33356 * C3704 + C50842 * C3708 + C33355 * C3268 +
              C33353 * C3272) *
                 C2340 +
             (C33356 * C3702 + C50842 * C3705 + C33355 * C3263 +
              C33353 * C3267) *
                 C2345 +
             (C37063 + C37062) * C2339 + (C37061 + C37060) * C2344 +
             (C34343 + C34342) * C2338 + (C34341 + C34340) * C2343) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50682 * C1074 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50682 * C50718) *
              C1076 +
          ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
            ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
            ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
               C50682 * C50718 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50682 * C1074) *
              C1077 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C50682 * C1074 -
           (((C33356 * C945 + C50842 * C951 + C33355 * C321 + C33353 * C332) *
                 C50763 +
             (C33356 * C936 + C50842 * C946 + C33355 * C302 + C33353 * C320) *
                 C118) *
                C17237 +
            ((C33965 + C33964) * C50763 + (C33963 + C33962) * C118) * C17236 +
            C33966 * C17235) *
               C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C118 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50763) *
               C17235 +
           ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
           C33414 * C17237) *
              C50682 * C1145 -
          (C33966 * C17237 +
           ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
           ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                C50763 +
            (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                C118) *
               C17235) *
              C50682 * C1146 +
          (((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                C118 +
            (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                C50763) *
               C17235 +
           ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
           ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
              C50682 * C1147 -
          (((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
             C33353 * C1163) *
                C50763 +
            (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
             C33353 * C1157) *
                C118) *
               C17237 +
           ((C33356 * C3268 + C50842 * C3272 + C33355 * C1158 +
             C33353 * C1164) *
                C50763 +
            (C33356 * C3263 + C50842 * C3267 + C33355 * C1152 +
             C33353 * C1159) *
                C118) *
               C17236 +
           ((C33356 * C3266 + C50842 * C3271 + C33355 * C1160 +
             C33353 * C1165) *
                C50763 +
            (C33356 * C3262 + C50842 * C3265 + C33355 * C1153 +
             C33353 * C1161) *
                C118) *
               C17235) *
              C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50682 * C1074 -
           ((C36386 + C36387) * C2340 + (C36388 + C36389) * C2345 +
            (C36385 + C36384) * C2339 + (C36383 + C36382) * C2344 +
            (C36381 + C36380) * C2338 + (C36379 + C36378) * C2343) *
               C50621 * C50682 * C50718) *
              C1076 +
          (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
            (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
            (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
               C50621 * C50682 * C50718 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50682 * C1074) *
              C1077 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C50682 * C1074 -
           ((C33356 * C3269 + C50842 * C3273 + C33355 * C1156 +
             C33353 * C1163) *
                C2340 +
            (C33356 * C3264 + C50842 * C3270 + C33355 * C1151 +
             C33353 * C1157) *
                C2345 +
            (C33609 + C33608) * C2339 + (C33607 + C33606) * C2344 +
            C33950 * C2338 + C33951 * C2343) *
               C50621 * C50682 * C50718) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
           C36394 * C2345 + C36395 * C2340) *
              C50621 * C50682 * C1145 -
          (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
           (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
           (C36379 + C36378) * C2343) *
              C50621 * C50682 * C1146 +
          (C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
           (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
           (C37320 + C37321) * C2340) *
              C50621 * C50682 * C1147 -
          ((C33356 * C21052 + C50842 * C21054 + C33355 * C3546 +
            C33353 * C3549) *
               C2340 +
           (C33356 * C21051 + C50842 * C21053 + C33355 * C3543 +
            C33353 * C3547) *
               C2345 +
           (C37321 + C37320) * C2339 + (C37319 + C37318) * C2344 +
           C37308 * C2338 + C37309 * C2343) *
              C50621 * C50682 * C1148) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                  C118 +
              (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                  C50763) *
                 C17235 +
             ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
             C33414 * C17237) *
                C1725 -
            (C34129 * C17237 +
             ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
             ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                  C50763 +
              (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                  C118) *
                 C17235) *
                C50746) *
               C50907 +
           ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 +
               C50842 * C1275) *
                  C118 +
              (C33355 * C938 + C33353 * C947 + C33356 * C1274 +
               C50842 * C1279) *
                  C50763) *
                 C17235 +
             ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
             ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
                C50746 -
            (C33966 * C17237 +
             ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
             ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                  C50763 +
              (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                  C118) *
                 C17235) *
                C1725) *
               C50718) *
              C50899 +
          (((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
             ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
             ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
                C50746 -
            (C33415 * C17237 +
             ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
             ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
                C1725) *
               C50907 +
           ((((C33601 + C33600) * C118 + (C33599 + C33598) * C50763) * C17235 +
             ((C33597 + C33596) * C118 + (C33595 + C33594) * C50763) * C17236 +
             ((C33962 + C33963) * C118 + (C33964 + C33965) * C50763) * C17237) *
                C1725 -
            (((C33356 * C1268 + C50842 * C1276 + C33355 * C944 +
               C33353 * C950) *
                  C50763 +
              (C33356 * C1264 + C50842 * C1269 + C33355 * C935 +
               C33353 * C943) *
                  C118) *
                 C17237 +
             ((C34347 + C34346) * C50763 + (C34345 + C34344) * C118) * C17236 +
             ((C34343 + C34342) * C50763 + (C34341 + C34340) * C118) * C17235) *
                C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C2343 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C2338 +
             (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
             C36394 * C2345 + C36395 * C2340) *
                C50621 * C1725 -
            (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
             (C37058 + C37059) * C2344 +
             (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C2338 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C2343) *
                C50621 * C50746) *
               C50907 +
           (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
             (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
             (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
                C50621 * C50746 -
            (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
             (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
             (C36379 + C36378) * C2343) *
                C50621 * C1725) *
               C50718) *
              C50899 +
          ((((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
             (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
             (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
                C50621 * C50746 -
            (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
             (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
             (C33391 + C33390) * C2343) *
                C50621 * C1725) *
               C50907 +
           (((C33601 + C33600) * C2343 + (C33599 + C33598) * C2338 +
             (C33602 + C33603) * C2344 + (C33604 + C33605) * C2339 +
             (C36390 + C36391) * C2345 + (C36392 + C36393) * C2340) *
                C50621 * C1725 -
            ((C33356 * C3704 + C50842 * C3708 + C33355 * C3268 +
              C33353 * C3272) *
                 C2340 +
             (C33356 * C3702 + C50842 * C3705 + C33355 * C3263 +
              C33353 * C3267) *
                 C2345 +
             (C37063 + C37062) * C2339 + (C37061 + C37060) * C2344 +
             (C34343 + C34342) * C2338 + (C34341 + C34340) * C2343) *
                C50621 * C50746) *
               C50718) *
              C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50954 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50955 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C118 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50763) *
                C17235 +
            ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
            ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
               C2141) *
              C50907 +
          ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 + C50842 * C1275) *
                 C118 +
             (C33355 * C938 + C33353 * C947 + C33356 * C1274 + C50842 * C1279) *
                 C50763) *
                C17235 +
            ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
            ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
               C50955 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C50954 -
           (((C33356 * C6171 + C50842 * C6173 + C33355 * C1270 +
              C33353 * C1277) *
                 C50763 +
             (C33356 * C6170 + C50842 * C6172 + C33355 * C1265 +
              C33353 * C1271) *
                 C118) *
                C17237 +
            ((C33356 * C4618 + C50842 * C4625 + C33355 * C1272 +
              C33353 * C1278) *
                 C50763 +
             (C33356 * C4613 + C50842 * C4619 + C33355 * C1266 +
              C33353 * C1273) *
                 C118) *
                C17236 +
            ((C33356 * C4622 + C50842 * C4627 + C33355 * C1274 +
              C33353 * C1279) *
                 C50763 +
             (C33356 * C4615 + C50842 * C4623 + C33355 * C1267 +
              C33353 * C1275) *
                 C118) *
                C17235) *
               C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50954 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50955 +
           ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C2343 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C2338 +
            (C37484 + C37485) * C2344 + (C37486 + C37487) * C2339 +
            (C37488 + C37489) * C2345 + (C37490 + C37491) * C2340) *
               C50621 * C2141) *
              C50907 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
               C50621 * C50955 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C50954 -
           ((C33356 * C21324 + C50842 * C21326 + C33355 * C3706 +
             C33353 * C3709) *
                C2340 +
            (C33356 * C21323 + C50842 * C21325 + C33355 * C3703 +
             C33353 * C3707) *
                C2345 +
            (C37491 + C37490) * C2339 + (C37489 + C37488) * C2344 +
            (C37487 + C37486) * C2338 + (C37485 + C37484) * C2343) *
               C50621 * C2141) *
              C50718) *
         C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C1725 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C289 +
          ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 + C50842 * C1275) *
                 C118 +
             (C33355 * C938 + C33353 * C947 + C33356 * C1274 + C50842 * C1279) *
                 C50763) *
                C17235 +
            ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
            ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
               C50746 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C1725) *
              C290 +
          ((((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C1725 -
           (((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
              C33353 * C1624) *
                 C50763 +
             (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
              C33353 * C1618) *
                 C118) *
                C17237 +
            ((C33356 * C2722 + C50842 * C2726 + C33355 * C1619 +
              C33353 * C1625) *
                 C50763 +
             (C33356 * C2717 + C50842 * C2721 + C33355 * C1613 +
              C33353 * C1620) *
                 C118) *
                C17236 +
            ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
              C33353 * C1626) *
                 C50763 +
             (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
              C33353 * C1622) *
                 C118) *
                C17235) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C1725 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C50666 * C1076 +
          ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
            ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
            ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
               C50746 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C1725) *
              C50666 * C1077 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C1725 -
           (((C33356 * C511 + C50842 * C522 + C33355 * C510 + C33353 * C521) *
                 C50763 +
             (C33356 * C492 + C50842 * C512 + C33355 * C491 + C33353 * C509) *
                 C118) *
                C17237 +
            ((C34128 + C34127) * C50763 + (C34126 + C34125) * C118) * C17236 +
            C34129 * C17235) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C118 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C50763) *
               C17235 +
           ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
           C33414 * C17237) *
              C1891 -
          (C34129 * C17237 +
           ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
           ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C50763 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C118) *
               C17235) *
              C1892 +
          (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C118 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C50763) *
               C17235 +
           ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
           ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
              C1893 -
          (((C33356 * C5607 + C50842 * C5611 + C33355 * C1901 +
             C33353 * C1908) *
                C50763 +
            (C33356 * C5602 + C50842 * C5608 + C33355 * C1896 +
             C33353 * C1902) *
                C118) *
               C17237 +
           ((C33356 * C5606 + C50842 * C5610 + C33355 * C1903 +
             C33353 * C1909) *
                C50763 +
            (C33356 * C5601 + C50842 * C5605 + C33355 * C1897 +
             C33353 * C1904) *
                C118) *
               C17236 +
           ((C33356 * C5604 + C50842 * C5609 + C33355 * C1905 +
             C33353 * C1910) *
                C50763 +
            (C33356 * C5600 + C50842 * C5603 + C33355 * C1898 +
             C33353 * C1906) *
                C118) *
               C17235) *
              C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C1725 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C50666 * C1076 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
               C50621 * C50746 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C1725 -
           ((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
             C33353 * C1624) *
                C2340 +
            (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
             C33353 * C1618) *
                C2345 +
            (C34347 + C34346) * C2339 + (C34345 + C34344) * C2344 +
            C34113 * C2338 + C34114 * C2343) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C1725 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C289 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
               C50621 * C50746 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C1725) *
              C290 +
          ((C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
            (C37320 + C37321) * C2340) *
               C50621 * C1725 -
           ((C33356 * C20716 + C50842 * C20718 + C33355 * C4212 +
             C33353 * C4215) *
                C2340 +
            (C33356 * C20715 + C50842 * C20717 + C33355 * C4209 +
             C33353 * C4213) *
                C2345 +
            (C37991 + C37990) * C2339 + (C37989 + C37988) * C2344 +
            C37978 * C2338 + C37979 * C2343) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
               C2343 +
           (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
               C2338 +
           (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
           C36394 * C2345 + C36395 * C2340) *
              C50621 * C1891 -
          (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
           (C37058 + C37059) * C2344 +
           (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
               C2338 +
           (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
               C2343) *
              C50621 * C1892 +
          ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
               C2343 +
           (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
               C2338 +
           (C37484 + C37485) * C2344 + (C37486 + C37487) * C2339 +
           (C37488 + C37489) * C2345 + (C37490 + C37491) * C2340) *
              C50621 * C1893 -
          ((C33356 * C22992 + C50842 * C22994 + C33355 * C4620 +
            C33353 * C4626) *
               C2340 +
           (C33356 * C22991 + C50842 * C22993 + C33355 * C4614 +
            C33353 * C4621) *
               C2345 +
           (C33356 * C6586 + C50842 * C6589 + C33355 * C4622 + C33353 * C4627) *
               C2339 +
           (C33356 * C6583 + C50842 * C6587 + C33355 * C4615 + C33353 * C4623) *
               C2344 +
           (C33356 * C5604 + C50842 * C5609 + C33355 * C1905 + C33353 * C1910) *
               C2338 +
           (C33356 * C5600 + C50842 * C5603 + C33355 * C1898 + C33353 * C1906) *
               C2343) *
              C50621 * C1894) *
         C50666 * C50647) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C50954 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50955 +
           (((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                 C118 +
             (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                 C50763) *
                C17235 +
            ((C33796 + C33797) * C118 + (C33798 + C33799) * C50763) * C17236 +
            ((C33800 + C33801) * C118 + (C33802 + C33803) * C50763) * C17237) *
               C2141) *
              C50666 * C50899 +
          ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
            ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
            ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
               C50955 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C50954 -
           (((C33356 * C1899 + C50842 * C1907 + C33355 * C508 + C33353 * C520) *
                 C50763 +
             (C33356 * C1895 + C50842 * C1900 + C33355 * C490 + C33353 * C507) *
                 C118) *
                C17237 +
            ((C33803 + C33802) * C50763 + (C33801 + C33800) * C118) * C17236 +
            ((C33799 + C33798) * C50763 + (C33797 + C33796) * C118) * C17235) *
               C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C50954 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50955 +
           ((C33355 * C487 + C33353 * C501 + C33356 * C1898 + C50842 * C1906) *
                C2343 +
            (C33355 * C502 + C33353 * C517 + C33356 * C1905 + C50842 * C1910) *
                C2338 +
            (C37484 + C37485) * C2344 + (C37486 + C37487) * C2339 +
            (C37488 + C37489) * C2345 + (C37490 + C37491) * C2340) *
               C50621 * C2141) *
              C50666 * C50899 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
               C50621 * C50955 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C50954 -
           ((C33356 * C4616 + C50842 * C4624 + C33355 * C2722 +
             C33353 * C2726) *
                C2340 +
            (C33356 * C4612 + C50842 * C4617 + C33355 * C2717 +
             C33353 * C2721) *
                C2345 +
            (C33356 * C4618 + C50842 * C4625 + C33355 * C1272 +
             C33353 * C1278) *
                C2339 +
            (C33356 * C4613 + C50842 * C4619 + C33355 * C1266 +
             C33353 * C1273) *
                C2344 +
            (C33799 + C33798) * C2338 + (C33797 + C33796) * C2343) *
               C50621 * C2141) *
              C50666 * C50653)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C1725 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C50666 * C1076 +
          ((((C33795 + C33794) * C118 + (C33793 + C33792) * C50763) * C17235 +
            ((C33791 + C33790) * C118 + (C33789 + C33788) * C50763) * C17236 +
            ((C34125 + C34126) * C118 + (C34127 + C34128) * C50763) * C17237) *
               C50746 -
           (C33415 * C17237 +
            ((C33397 + C33396) * C50763 + (C33395 + C33394) * C118) * C17236 +
            ((C33393 + C33392) * C50763 + (C33391 + C33390) * C118) * C17235) *
               C1725) *
              C50666 * C1077 +
          ((C33414 * C17235 +
            ((C33401 + C33400) * C118 + (C33399 + C33398) * C50763) * C17236 +
            ((C33402 + C33403) * C118 + (C33404 + C33405) * C50763) * C17237) *
               C1725 -
           (((C33356 * C511 + C50842 * C522 + C33355 * C510 + C33353 * C521) *
                 C50763 +
             (C33356 * C492 + C50842 * C512 + C33355 * C491 + C33353 * C509) *
                 C118) *
                C17237 +
            ((C34128 + C34127) * C50763 + (C34126 + C34125) * C118) * C17236 +
            C34129 * C17235) *
               C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                 C118 +
             (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                 C50763) *
                C17235 +
            ((C33390 + C33391) * C118 + (C33392 + C33393) * C50763) * C17236 +
            C33414 * C17237) *
               C1725 -
           (C34129 * C17237 +
            ((C33792 + C33793) * C50763 + (C33794 + C33795) * C118) * C17236 +
            ((C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                 C50763 +
             (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                 C118) *
                C17235) *
               C50746) *
              C289 +
          ((((C33355 * C932 + C33353 * C937 + C33356 * C1267 + C50842 * C1275) *
                 C118 +
             (C33355 * C938 + C33353 * C947 + C33356 * C1274 + C50842 * C1279) *
                 C50763) *
                C17235 +
            ((C34340 + C34341) * C118 + (C34342 + C34343) * C50763) * C17236 +
            ((C34344 + C34345) * C118 + (C34346 + C34347) * C50763) * C17237) *
               C50746 -
           (C33966 * C17237 +
            ((C33598 + C33599) * C50763 + (C33600 + C33601) * C118) * C17236 +
            ((C33356 * C938 + C50842 * C947 + C33355 * C310 + C33353 * C327) *
                 C50763 +
             (C33356 * C932 + C50842 * C937 + C33355 * C297 + C33353 * C311) *
                 C118) *
                C17235) *
               C1725) *
              C290 +
          ((((C33355 * C298 + C33353 * C312 + C33356 * C1614 + C50842 * C1622) *
                 C118 +
             (C33355 * C313 + C33353 * C328 + C33356 * C1621 + C50842 * C1626) *
                 C50763) *
                C17235 +
            ((C33602 + C33603) * C118 + (C33604 + C33605) * C50763) * C17236 +
            ((C33606 + C33607) * C118 + (C33608 + C33609) * C50763) * C17237) *
               C1725 -
           (((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
              C33353 * C1624) *
                 C50763 +
             (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
              C33353 * C1618) *
                 C118) *
                C17237 +
            ((C33356 * C2722 + C50842 * C2726 + C33355 * C1619 +
              C33353 * C1625) *
                 C50763 +
             (C33356 * C2717 + C50842 * C2721 + C33355 * C1613 +
              C33353 * C1620) *
                 C118) *
                C17236 +
            ((C33356 * C2720 + C50842 * C2725 + C33355 * C1621 +
              C33353 * C1626) *
                 C50763 +
             (C33356 * C2716 + C50842 * C2719 + C33355 * C1614 +
              C33353 * C1622) *
                 C118) *
                C17235) *
               C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C1725 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C50666 * C1076 +
          (((C33795 + C33794) * C2343 + (C33793 + C33792) * C2338 +
            (C34340 + C34341) * C2344 + (C34342 + C34343) * C2339 +
            (C37060 + C37061) * C2345 + (C37062 + C37063) * C2340) *
               C50621 * C50746 -
           (C36376 * C2340 + C36377 * C2345 + (C33598 + C33599) * C2339 +
            (C33600 + C33601) * C2344 + (C33393 + C33392) * C2338 +
            (C33391 + C33390) * C2343) *
               C50621 * C1725) *
              C50666 * C1077 +
          ((C33406 * C2343 + C33407 * C2338 + (C33597 + C33596) * C2344 +
            (C33595 + C33594) * C2339 + (C33606 + C33607) * C2345 +
            (C33608 + C33609) * C2340) *
               C50621 * C1725 -
           ((C33356 * C2723 + C50842 * C2727 + C33355 * C1617 +
             C33353 * C1624) *
                C2340 +
            (C33356 * C2718 + C50842 * C2724 + C33355 * C1612 +
             C33353 * C1618) *
                C2345 +
            (C34347 + C34346) * C2339 + (C34345 + C34344) * C2344 +
            C34113 * C2338 + C34114 * C2343) *
               C50621 * C50746) *
              C50666 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C33355 * C119 + C33353 * C126 + C33356 * C486 + C50842 * C500) *
                C2343 +
            (C33355 * C127 + C33353 * C140 + C33356 * C499 + C50842 * C516) *
                C2338 +
            (C36378 + C36379) * C2344 + (C36380 + C36381) * C2339 +
            C36394 * C2345 + C36395 * C2340) *
               C50621 * C1725 -
           (C37978 * C2340 + C37979 * C2345 + (C37056 + C37057) * C2339 +
            (C37058 + C37059) * C2344 +
            (C33356 * C502 + C50842 * C517 + C33355 * C499 + C33353 * C516) *
                C2338 +
            (C33356 * C487 + C50842 * C501 + C33355 * C486 + C33353 * C500) *
                C2343) *
               C50621 * C50746) *
              C289 +
          (((C37059 + C37058) * C2343 + (C37057 + C37056) * C2338 +
            (C37055 + C37054) * C2344 + (C37053 + C37052) * C2339 +
            (C37988 + C37989) * C2345 + (C37990 + C37991) * C2340) *
               C50621 * C50746 -
           (C37308 * C2340 + C37309 * C2345 + (C36385 + C36384) * C2339 +
            (C36383 + C36382) * C2344 + (C36381 + C36380) * C2338 +
            (C36379 + C36378) * C2343) *
               C50621 * C1725) *
              C290 +
          ((C36394 * C2343 + C36395 * C2338 + (C36389 + C36388) * C2344 +
            (C36387 + C36386) * C2339 + (C37318 + C37319) * C2345 +
            (C37320 + C37321) * C2340) *
               C50621 * C1725 -
           ((C33356 * C20716 + C50842 * C20718 + C33355 * C4212 +
             C33353 * C4215) *
                C2340 +
            (C33356 * C20715 + C50842 * C20717 + C33355 * C4209 +
             C33353 * C4213) *
                C2345 +
            (C37991 + C37990) * C2339 + (C37989 + C37988) * C2344 +
            C37978 * C2338 + C37979 * C2343) *
               C50621 * C50746) *
              C291) *
         C50647) /
            (p * q * std::sqrt(p + q));
}
