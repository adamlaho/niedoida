/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AA_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_11_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49724 = 0 * ae;
    const double C49723 = ae * be;
    const double C49722 = 0 * be;
    const double C49721 = ae + be;
    const double C49720 = 0 * be;
    const double C49719 = xA - xB;
    const double C49769 = 0 * be;
    const double C49768 = zA - zB;
    const double C49812 = 0 * ae;
    const double C49808 = 0 * be;
    const double C49846 = xP - xQ;
    const double C49845 = zP - zQ;
    const double C49844 = p + q;
    const double C49843 = p * q;
    const double C49853 = std::pow(ae, 2);
    const double C49851 = bs[3];
    const double C49861 = bs[4];
    const double C49870 = bs[5];
    const double C49884 = bs[6];
    const double C49906 = bs[7];
    const double C50015 = yP - yQ;
    const double C50221 = bs[2];
    const double C122 = bs[0];
    const double C50650 = ce + de;
    const double C50649 = ce * de;
    const double C50648 = xC - xD;
    const double C50672 = yC - yD;
    const double C50688 = zC - zD;
    const double C50774 = yA - yB;
    const double C49729 = C49724 / C49721;
    const double C49726 = 2 * C49721;
    const double C49725 = std::pow(C49721, 2);
    const double C49728 = C49723 * C49719;
    const double C49727 = C49719 * C49722;
    const double C50624 = C49719 * be;
    const double C50623 = C49719 * ae;
    const double C50622 = std::pow(C49719, 2);
    const double C49770 = C49723 * C49768;
    const double C49809 = C49768 * C49769;
    const double C50786 = std::pow(C49768, 2);
    const double C50850 = C49768 * be;
    const double C50849 = C49768 * ae;
    const double C49817 = C49812 / C49721;
    const double C49871 = std::pow(C49846, 2);
    const double C49939 = C49846 * ae;
    const double C49854 = C49845 * ae;
    const double C49852 = C49845 * C49846;
    const double C50088 = std::pow(C49845, 2);
    const double C49847 = 2 * C49843;
    const double C50033 = std::pow(C50015, 2);
    const double C50652 = 2 * C50650;
    const double C50662 = std::pow(C50650, 2);
    const double C50654 = C50648 * de;
    const double C50653 = C50648 * ce;
    const double C50651 = std::pow(C50648, 2);
    const double C50673 = std::pow(C50672, 2);
    const double C50725 = C50672 * de;
    const double C50724 = C50672 * ce;
    const double C50689 = std::pow(C50688, 2);
    const double C50753 = C50688 * de;
    const double C50752 = C50688 * ce;
    const double C50775 = std::pow(C50774, 2);
    const double C50824 = C50774 * be;
    const double C50823 = C50774 * ae;
    const double C50632 = std::pow(C49726, -1);
    const double C50930 = std::pow(C49726, -2);
    const double C49730 = 2 * C49725;
    const double C143 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (xP - xQ) * std::pow(ae, 2)) /
                        C49725;
    const double C50908 = 4 * C49725;
    const double C49731 = C49727 / C49721;
    const double C50625 = C50622 * C49723;
    const double C49814 = C49809 / C49721;
    const double C50787 = C50786 * C49723;
    const double C49942 = C49861 * C49939;
    const double C49948 = C49851 * C49939;
    const double C49955 = C49870 * C49939;
    const double C49967 = C49884 * C49939;
    const double C49988 = C49906 * C49939;
    const double C49857 = C49851 * C49854;
    const double C49863 = C49861 * C49854;
    const double C49873 = C49870 * C49854;
    const double C49888 = C49884 * C49854;
    const double C49912 = C49906 * C49854;
    const double C49856 = C49852 * C49853;
    const double C49848 = C49847 / C49844;
    const double C129 = (-(bs[1] * C49939 * C49847) / C49844) / C49721;
    const double C133 = (-(bs[1] * C49854 * C49847) / C49844) / C49721;
    const double C123 = -(C49846 * bs[1] * C49847) / C49844;
    const double C256 = -(C50015 * bs[1] * C49847) / C49844;
    const double C397 = -(C49845 * bs[1] * C49847) / C49844;
    const double C50663 = std::pow(C50652, -1);
    const double C50917 = std::pow(C50652, -2);
    const double C50667 = 2 * C50662;
    const double C50915 = 4 * C50662;
    const double C50655 = C50651 * C50649;
    const double C50674 = C50673 * C50649;
    const double C50690 = C50689 * C50649;
    const double C50776 = C50775 * C49723;
    const double C49736 = C49722 / C49730;
    const double C49734 = C49720 / C49730;
    const double C49811 = C49769 / C49730;
    const double C49815 = C49808 / C49730;
    const double C49733 = 0 - C49731;
    const double C50626 = C50625 / C49721;
    const double C49818 = 0 - C49814;
    const double C50788 = C50787 / C49721;
    const double C49862 = C49861 * C49856;
    const double C49872 = C49870 * C49856;
    const double C49886 = C49884 * C49856;
    const double C49910 = C49906 * C49856;
    const double C49850 = -C49848;
    const double C49860 = std::pow(C49848, 4);
    const double C49883 = std::pow(C49848, 6);
    const double C144 = (ae * std::pow(C49848, 2) * bs[2] * C49845 * ae +
                         C49846 * std::pow(-C49848, 3) * bs[3] * C49845 *
                             C49846 * std::pow(ae, 2)) /
                        C49725;
    const double C50220 = std::pow(C49848, 2);
    const double C130 =
        (C49846 * std::pow(C49848, 2) * bs[2] * C49939) / C49721 -
        (ae * bs[1] * C49847) / (C49844 * C49721);
    const double C50656 = C50655 / C50650;
    const double C50675 = C50674 / C50650;
    const double C50691 = C50690 / C50650;
    const double C50777 = C50776 / C49721;
    const double C49738 = C49733 * ae;
    const double C50627 = -C50626;
    const double C49821 = C49818 * ae;
    const double C50789 = -C50788;
    const double C49855 = std::pow(C49850, 3);
    const double C49869 = std::pow(C49850, 5);
    const double C49905 = std::pow(C49850, 7);
    const double C49865 = C49860 * C49863;
    const double C49864 = C49860 * C49862;
    const double C49941 = C49861 * C49860;
    const double C49943 = C49860 * C49942;
    const double C49891 = C49883 * C49888;
    const double C49890 = C49883 * C49886;
    const double C49969 = C49883 * C49967;
    const double C49989 = C49884 * C49883;
    const double C50222 = C50221 * C50220;
    const double C134 = (C49846 * C50220 * C50221 * C49854) / C49721;
    const double C266 = (C50015 * C50220 * C50221 * C49854) / C49721;
    const double C270 = (C50015 * C50220 * C50221 * C49939) / C49721;
    const double C407 = (C49845 * C50220 * C50221 * C49854) / C49721 -
                        (ae * bs[1] * C49847) / (C49844 * C49721);
    const double C411 = (C49845 * C50220 * C50221 * C49939) / C49721;
    const double C50657 = -C50656;
    const double C50676 = -C50675;
    const double C50692 = -C50691;
    const double C50778 = -C50777;
    const double C49741 = C49738 / C49721;
    const double C50628 = std::exp(C50627);
    const double C49823 = C49821 / C49721;
    const double C50790 = std::exp(C50789);
    const double C49858 = C49855 * C49857;
    const double C49940 = C49851 * C49855;
    const double C49949 = C49855 * C49948;
    const double C286 = ((yP - yQ) * C49855 * C49851 * C49856) / C49725;
    const double C427 = (ae * std::pow(C49848, 2) * bs[2] * C49939 +
                         C49845 * C49855 * C49851 * C49856) /
                        C49725;
    const double C49875 = C49869 * C49873;
    const double C49874 = C49869 * C49872;
    const double C49958 = C49869 * C49955;
    const double C49968 = C49870 * C49869;
    const double C49915 = C49905 * C49912;
    const double C49914 = C49905 * C49910;
    const double C49991 = C49905 * C49988;
    const double C49868 = ae * C49865;
    const double C49867 = C49846 * C49865;
    const double C50392 = C50015 * C49865;
    const double C50398 = C49845 * C49865;
    const double C287 =
        (C49855 * C49851 * C49856 + C49864 * std::pow(yP - yQ, 2)) / C49725;
    const double C49957 = C49846 * C49941;
    const double C49956 = C49941 * ae;
    const double C50231 = C49941 * C49871;
    const double C50342 = C49941 * C50033;
    const double C50373 = C50015 * C49941;
    const double C50400 = C49941 * C50088;
    const double C50455 = C49845 * C49941;
    const double C49951 = C49846 * C49943;
    const double C50031 = C50015 * C49943;
    const double C50086 = ae * C49943;
    const double C50085 = C49845 * C49943;
    const double C49893 = C49891 * C49871;
    const double C49904 = ae * C49891;
    const double C49903 = C49846 * C49891;
    const double C50470 = C49891 * C50033;
    const double C50498 = C50015 * C49891;
    const double C50516 = C49845 * C49891;
    const double C49892 = C49846 * C49890;
    const double C50060 = C49890 * C50033;
    const double C50121 = C50015 * C49890;
    const double C50144 = C49845 * C49890;
    const double C49973 = C49846 * C49969;
    const double C50071 = C49969 * C50033;
    const double C50122 = C50015 * C49969;
    const double C50145 = C49969 * C50088;
    const double C50199 = ae * C49969;
    const double C50198 = C49845 * C49969;
    const double C49994 = C49989 * C49871;
    const double C49993 = C49846 * C49989;
    const double C49992 = C49989 * ae;
    const double C50478 = C49989 * C50033;
    const double C50501 = C50015 * C49989;
    const double C50519 = C49989 * C50088;
    const double C124 = C50222 * C49871 - (bs[1] * C49847) / C49844;
    const double C255 = C50015 * C49846 * C50222;
    const double C257 = C50222 * C50033 - (bs[1] * C49847) / C49844;
    const double C396 = C49845 * C49846 * C50222;
    const double C398 = C50222 * C50088 - (bs[1] * C49847) / C49844;
    const double C775 = C49845 * C50015 * C50222;
    const double C50658 = std::exp(C50657);
    const double C50677 = std::exp(C50676);
    const double C50693 = std::exp(C50692);
    const double C50779 = std::exp(C50778);
    const double C49743 = C49741 - C49734;
    const double C19848 = C50628 * C270;
    const double C22074 = C50628 * C411;
    const double C49732 = C49728 * C50628;
    const double C50629 = C50628 * C50623;
    const double C50633 = C50632 * C50628;
    const double C50905 = C50628 * C50624;
    const double C50902 = C50628 / C49726;
    const double C16960 = C50930 * C50628;
    const double C49825 = C49823 - C49815;
    const double C49771 = C49770 * C50790;
    const double C121 = -(2 * C49723 * (zA - zB) * C50790) / C49721;
    const double C50851 = C50790 * C50849;
    const double C50854 = C50632 * C50790;
    const double C50938 = C50790 * C50850;
    const double C50931 = C50790 / C49726;
    const double C5082 = C50930 * C50790;
    const double C145 = (C49855 * C49851 * C49856 + ae * C49846 * C49858 +
                         C49846 * (ae * C49858 + C49846 * std::pow(C49848, 4) *
                                                     bs[4] * C49856)) /
                        C49725;
    const double C146 =
        (2 * (ae * C49858 + C49846 * C49864) +
         ae * (C49858 + C49865 * std::pow(C49846, 2)) +
         C49846 * (C49864 + ae * C49846 * C49865 +
                   C49846 * (ae * C49865 +
                             C49846 * std::pow(C49850, 5) * bs[5] * C49856))) /
        C49725;
    const double C285 = ((yP - yQ) * (ae * C49858 + C49846 * C49864)) / C49725;
    const double C426 = (ae * (C49846 * C49855 * C49851 * C49939 +
                               bs[2] * std::pow(C49848, 2) * ae) +
                         C49845 * (ae * C49858 + C49846 * C49864)) /
                        C49725;
    const double C135 = (C50220 * C50221 * C49854 + C49858 * C49871) / C49721;
    const double C136 =
        (2 * C49846 * C49858 + C49846 * (C49858 + C49865 * C49871)) / C49721;
    const double C264 = (C50015 * (C49858 + C49865 * C49871)) / C49721;
    const double C265 = (C50015 * C49846 * C49858) / C49721;
    const double C275 = (C50220 * C50221 * C49854 + C49858 * C50033) / C49721;
    const double C406 =
        (C49845 * C49846 * C49858 + C49846 * C50222 * ae) / C49721;
    const double C416 =
        (C50220 * C50221 * C49854 + C49845 * (C49845 * C49858 + C50222 * ae) +
         C49845 * C50222 * ae) /
        C49721;
    const double C784 =
        (C49845 * C50015 * C49858 + C50015 * C50222 * ae) / C49721;
    const double C976 =
        (2 * C50015 * C49858 + C50015 * (C49858 + C49865 * C50033)) / C49721;
    const double C49952 = C49940 * ae;
    const double C50230 = C49846 * C49940;
    const double C50312 = C50015 * C49940;
    const double C50399 = C49845 * C49940;
    const double C405 = (C49845 * (C49858 + C49865 * C49871) +
                         (C50222 + C49940 * C49871) * ae) /
                        C49721;
    const double C1437 = (C49845 * (C49858 + C49865 * C50033) +
                          (C50222 + C49940 * C50033) * ae) /
                         C49721;
    const double C125 =
        2 * C49846 * C50222 + C49846 * (C50222 + C49940 * C49871);
    const double C254 = C50015 * (C50222 + C49940 * C49871);
    const double C395 = C49845 * (C50222 + C49940 * C49871);
    const double C972 =
        2 * C50015 * C50222 + C50015 * (C50222 + C49940 * C50033);
    const double C1433 = C49845 * (C50222 + C49940 * C50033);
    const double C1717 =
        2 * C49845 * C50222 + C49845 * (C50222 + C49940 * C50088);
    const double C428 = (C49855 * C49851 * C49856 + ae * C49845 * C49949 +
                         C49845 * (ae * C49949 + C49845 * C49864)) /
                        C49725;
    const double C790 =
        (ae * C50015 * C49949 + C49845 * C50015 * C49864) / C49725;
    const double C131 =
        (C50220 * C50221 * C49939 + C49846 * (C49846 * C49949 + C50222 * ae) +
         C49846 * C50222 * ae) /
        C49721;
    const double C269 = (C50015 * (C49846 * C49949 + C50222 * ae)) / C49721;
    const double C271 = (C50220 * C50221 * C49939 + C49949 * C50033) / C49721;
    const double C410 = (C49845 * (C49846 * C49949 + C50222 * ae)) / C49721;
    const double C412 = (C50220 * C50221 * C49939 + C49949 * C50088) / C49721;
    const double C780 = (C49845 * C50015 * C49949) / C49721;
    const double C980 =
        (2 * C50015 * C49949 + C50015 * (C49949 + C49943 * C50033)) / C49721;
    const double C1441 = (C49845 * (C49949 + C49943 * C50033)) / C49721;
    const double C1725 =
        (2 * C49845 * C49949 + C49845 * (C49949 + C49943 * C50088)) / C49721;
    const double C19850 = C50628 * C286;
    const double C22076 = C50628 * C427;
    const double C49877 = C49875 * C49871;
    const double C49882 = ae * C49875;
    const double C49881 = C49846 * C49875;
    const double C50361 = C49875 * C50033;
    const double C50430 = C50015 * C49875;
    const double C50454 = C49845 * C49875;
    const double C2315 =
        (3 * (C49858 + C49865 * C50033) +
         C50015 * (2 * C50015 * C49865 + C50015 * (C49865 + C49875 * C50033))) /
        C49721;
    const double C49876 = C49846 * C49874;
    const double C50083 = C50015 * C49874;
    const double C50087 = C49845 * C49874;
    const double C984 = (2 * C50015 * C49864 +
                         C50015 * (C49864 + C49874 * std::pow(C50015, 2))) /
                        C49725;
    const double C1445 = (ae * (C49949 + C49943 * C50033) +
                          C49845 * (C49864 + C49874 * C50033)) /
                         C49725;
    const double C1729 = (2 * (ae * C49949 + C49845 * C49864) +
                          ae * (C49949 + C49943 * std::pow(C49845, 2)) +
                          C49845 * (C49864 + ae * C49845 * C49943 +
                                    C49845 * (ae * C49943 + C49845 * C49874))) /
                         C49725;
    const double C2319 =
        (3 * (C49864 + C49874 * C50033) +
         C50015 * (2 * C50015 * C49874 + C50015 * (C49874 + C49890 * C50033))) /
        C49725;
    const double C49960 = C49846 * C49958;
    const double C50045 = C49958 * C50033;
    const double C50070 = C50015 * C49958;
    const double C50090 = C49958 * C50088;
    const double C50143 = ae * C49958;
    const double C50142 = C49845 * C49958;
    const double C49972 = C49968 * C49871;
    const double C49971 = C49846 * C49968;
    const double C49970 = C49968 * ae;
    const double C50374 = C49968 * C50033;
    const double C50433 = C50015 * C49968;
    const double C50456 = C49968 * C50088;
    const double C50517 = C49845 * C49968;
    const double C49917 = C49915 * C49871;
    const double C49916 = C49846 * C49914;
    const double C50157 = C49914 * C50033;
    const double C50182 = C50015 * C49914;
    const double C50200 = C49845 * C49914;
    const double C49995 = C49846 * C49991;
    const double C50164 = C49991 * C50033;
    const double C50183 = C50015 * C49991;
    const double C50202 = C49991 * C50088;
    const double C276 = (C49846 * C49858 + C49867 * C50033) / C49721;
    const double C19854 = C50628 * C287;
    const double C49959 = C49957 * ae;
    const double C50234 = 2 * C49957;
    const double C50310 = C50015 * C49957;
    const double C50405 = C49845 * C49957;
    const double C50232 = C49940 + C50231;
    const double C50343 = C49940 + C50342;
    const double C50375 = 2 * C50373;
    const double C50432 = C49845 * C50373;
    const double C50431 = C50373 * ae;
    const double C50402 = C49940 + C50400;
    const double C50460 = 2 * C50455;
    const double C50458 = C50455 * ae;
    const double C1098 = (C50015 * C49864 + ae * C49845 * C50031 +
                          C49845 * (ae * C50031 + C49845 * C50015 * C49874)) /
                         C49725;
    const double C1094 = (C50015 * C49949 + C50031 * C50088) / C49721;
    const double C49895 = C49875 + C49893;
    const double C49911 = 2 * C49903;
    const double C49909 = ae * C49903;
    const double C50358 = C49903 * C50033;
    const double C50421 = C50015 * C49903;
    const double C50441 = C49845 * C49903;
    const double C50471 = C49875 + C50470;
    const double C50502 = C49845 * C50498;
    const double C50061 = C49874 + C50060;
    const double C50123 = C49845 * C50121;
    const double C50156 = 2 * C50121;
    const double C50073 = C49958 + C50071;
    const double C50124 = C50122 * C50088;
    const double C50163 = 2 * C50122;
    const double C50181 = ae * C50122;
    const double C50180 = C49845 * C50122;
    const double C50149 = C49958 + C50145;
    const double C50206 = 2 * C50198;
    const double C50204 = ae * C50198;
    const double C49997 = C49968 + C49994;
    const double C49996 = C49993 * ae;
    const double C50367 = C49993 * C50033;
    const double C50424 = C50015 * C49993;
    const double C50443 = C49993 * C50088;
    const double C50479 = C49968 + C50478;
    const double C50504 = C50501 * C50088;
    const double C50523 = C49968 + C50519;
    const double C50659 = C50658 * C50653;
    const double C50664 = C50663 * C50658;
    const double C50912 = C50658 * C50654;
    const double C50909 = C50658 / C50652;
    const double C897 = C50917 * C50658;
    const double C50726 = C50677 * C50724;
    const double C50729 = C50663 * C50677;
    const double C50921 = C50677 * C50725;
    const double C50916 = C50677 / C50652;
    const double C250 = C50917 * C50677;
    const double C50754 = C50693 * C50752;
    const double C50757 = C50663 * C50693;
    const double C50925 = C50693 * C50753;
    const double C50918 = C50693 / C50652;
    const double C393 = C50917 * C50693;
    const double C50825 = C50779 * C50823;
    const double C50828 = C50632 * C50779;
    const double C50934 = C50779 * C50824;
    const double C50929 = C50779 / C49726;
    const double C2161 = C50930 * C50779;
    const double C49737 = C49732 / C49725;
    const double C49735 = 2 * C49732;
    const double C50906 = C50629 / C49730;
    const double C50904 = C50629 / C49721;
    const double C50903 = C50629 * C50624;
    const double C16959 = (2 * C50632 * C50629) / C49721;
    const double C50907 = C50633 * C50624;
    const double C108 = C50633 / C50908;
    const double C7888 = C50633 / C49726;
    const double C50943 = C50905 / C49721;
    const double C16958 = (C50628 * std::pow(C50623, 2)) / C49725 + C50902;
    const double C49813 = C49771 / C49725;
    const double C49810 = 2 * C49771;
    const double C5085 =
        ((0 * ae) / C49721 - C49771 / C49725) / C49726 + (0 * ae) / C49721;
    const double C10704 =
        ((C50790 - (C49768 * 2 * C49771) / C49721) * ae) / C49721 -
        C49769 / C49730;
    const double C10705 = (0 * ae) / C49721 - C49771 / C49725;
    const double C33715 =
        (-C49769 / C49721) / C49726 -
        ((C50790 - (C49768 * 2 * C49771) / C49721) * be) / C49721;
    const double C33716 = (-(2 * C49771) / C49721) / C49726 - (0 * be) / C49721;
    const double C50940 = C50851 / C49730;
    const double C50939 = C50851 * C50850;
    const double C50933 = C50851 / C49721;
    const double C5081 = (2 * C50632 * C50851) / C49721;
    const double C5084 =
        (((C50790 - (C49768 * 2 * C49771) / C49721) * ae) / C49721 -
         C49769 / C49730) /
            C49726 +
        ((C49768 * ((0 * ae) / C49721 - C49771 / C49725) + C50854) * ae) /
            C49721;
    const double C50941 = C50854 * C50850;
    const double C39128 = C50854 / C50908;
    const double C44445 = C50854 / C49726;
    const double C50957 = C50938 / C49721;
    const double C5080 = (C50790 * std::pow(C50849, 2)) / C49725 + C50931;
    const double C2330 = C50633 * C285;
    const double C19866 = C50628 * C285;
    const double C24703 = C50633 * C285;
    const double C5398 = C50633 * C426;
    const double C22092 = C50628 * C426;
    const double C27817 = C50633 * C426;
    const double C49953 = C49951 + C49952;
    const double C50401 = C50398 + C49952;
    const double C1721 =
        (2 * (C49845 * C49858 + C50222 * ae) +
         C49845 * (C49858 + C49845 * (C49845 * C49865 + C49952) +
                   C49845 * C49940 * ae) +
         (C50222 + C49940 * C50088) * ae) /
        C49721;
    const double C417 =
        (C49846 * C49858 + C49845 * (C49845 * C49867 + C50230 * ae) +
         C49845 * C50230 * ae) /
        C49721;
    const double C785 =
        (C49845 * C50015 * C49867 + C50015 * C50230 * ae) / C49721;
    const double C258 = C49846 * C50222 + C50230 * C50033;
    const double C399 = C49846 * C50222 + C50230 * C50088;
    const double C776 = C49845 * C50015 * C50230;
    const double C971 =
        2 * C50015 * C50230 + C50015 * (C50230 + C49957 * C50033);
    const double C1432 = C49845 * (C50230 + C49957 * C50033);
    const double C1716 =
        2 * C49845 * C50230 + C49845 * (C50230 + C49957 * C50088);
    const double C1090 =
        (C50015 * C49858 + C49845 * (C49845 * C50015 * C49865 + C50312 * ae) +
         C49845 * C50312 * ae) /
        C49721;
    const double C4489 =
        (2 * (C49845 * C50392 + C50312 * ae) +
         C49845 * (C50392 + C49845 * (C49845 * C50015 * C49875 + C50373 * ae) +
                   C49845 * C50373 * ae) +
         (C50312 + C50373 * C50088) * ae) /
        C49721;
    const double C1086 = C50015 * C50222 + C50312 * C50088;
    const double C4483 =
        2 * C49845 * C50312 + C49845 * (C50312 + C50373 * C50088);
    const double C22080 = C50628 * C428;
    const double C20372 = C50628 * C790;
    const double C2326 = C50633 * C269;
    const double C19864 = C50628 * C269;
    const double C24699 = C50633 * C269;
    const double C19852 = C50628 * C271;
    const double C5394 = C50633 * C410;
    const double C22090 = C50628 * C410;
    const double C27813 = C50633 * C410;
    const double C22078 = C50628 * C412;
    const double C20374 = C50628 * C780;
    const double C19856 = C50628 * C980;
    const double C20370 = C50628 * C1441;
    const double C22088 = C50628 * C1725;
    const double C49879 = C49865 + C49877;
    const double C49894 = C49882 + C49892;
    const double C49887 = 2 * C49881;
    const double C49885 = ae * C49881;
    const double C50390 = C50015 * C49881;
    const double C50404 = C49845 * C49881;
    const double C975 =
        (2 * C50015 * C49867 + C50015 * (C49867 + C49881 * C50033)) / C49721;
    const double C1436 = (C49845 * (C49867 + C49881 * C50033) +
                          (C50230 + C49957 * C50033) * ae) /
                         C49721;
    const double C2316 =
        (3 * (C49867 + C49881 * C50033) +
         C50015 * (2 * C50015 * C49881 + C50015 * (C49881 + C49903 * C50033))) /
        C49721;
    const double C50362 = C49865 + C50361;
    const double C50434 = C49845 * C50430;
    const double C50469 = 2 * C50430;
    const double C50457 = C50454 + C49956;
    const double C49878 = C49868 + C49876;
    const double C50089 = C50086 + C50087;
    const double C19858 = C50628 * C984;
    const double C20368 = C50628 * C1445;
    const double C22086 = C50628 * C1729;
    const double C19860 = C50628 * C2319;
    const double C49961 = C49960 + C49956;
    const double C50046 = C49943 + C50045;
    const double C50072 = 2 * C50070;
    const double C50120 = ae * C50070;
    const double C50119 = C49845 * C50070;
    const double C4495 =
        (2 * (ae * C50031 + C49845 * C50083) +
         ae * (C50031 + C50070 * std::pow(C49845, 2)) +
         C49845 * (C50083 + ae * C49845 * C50070 +
                   C49845 * (ae * C50070 + C49845 * C50015 * C49890))) /
        C49725;
    const double C4491 =
        (2 * C49845 * C50031 + C49845 * (C50031 + C50070 * C50088)) / C49721;
    const double C50091 = C49943 + C50090;
    const double C50147 = C50143 + C50144;
    const double C50148 = 2 * C50142;
    const double C50146 = ae * C50142;
    const double C49975 = C49941 + C49972;
    const double C49974 = C49971 * ae;
    const double C49990 = 2 * C49971;
    const double C50345 = C49971 * C50033;
    const double C50366 = C50015 * C49971;
    const double C50406 = C49971 * C50088;
    const double C50442 = C49845 * C49971;
    const double C49976 = C49973 + C49970;
    const double C50521 = C50516 + C49970;
    const double C50376 = C49941 + C50374;
    const double C50435 = C50433 * C50088;
    const double C50477 = 2 * C50433;
    const double C50500 = C49845 * C50433;
    const double C50499 = C50433 * ae;
    const double C50459 = C49941 + C50456;
    const double C50524 = 2 * C50517;
    const double C50522 = C50517 * ae;
    const double C49919 = C49891 + C49917;
    const double C49918 = C49904 + C49916;
    const double C50158 = C49890 + C50157;
    const double C50185 = C49845 * C50182;
    const double C50205 = C50199 + C50200;
    const double C49998 = C49995 + C49992;
    const double C50165 = C49969 + C50164;
    const double C50187 = C50183 * C50088;
    const double C50207 = C49969 + C50202;
    const double C1720 =
        (2 * (C49845 * C49867 + C50230 * ae) +
         C49845 * (C49867 + C49845 * (C49845 * C49881 + C49959) +
                   C49845 * C49957 * ae) +
         (C50230 + C49957 * C50088) * ae) /
        C49721;
    const double C1089 =
        (C50015 * C49867 + C49845 * (C49845 * C50015 * C49881 + C50310 * ae) +
         C49845 * C50310 * ae) /
        C49721;
    const double C1085 = C50015 * C50230 + C50310 * C50088;
    const double C126 = 3 * (C50222 + C49940 * C49871) +
                        C49846 * (2 * C50230 + C49846 * C50232);
    const double C253 = C50015 * (2 * C50230 + C49846 * C50232);
    const double C259 = C50222 + C49940 * C49871 + C50232 * C50033;
    const double C394 = C49845 * (2 * C50230 + C49846 * C50232);
    const double C400 = C50222 + C49940 * C49871 + C50232 * C50088;
    const double C777 = C49845 * C50015 * C50232;
    const double C2555 =
        (C49858 + C49865 * C50033 +
         C49845 * (C49845 * (C49865 + C49875 * C50033) + C50343 * ae) +
         C49845 * C50343 * ae) /
        C49721;
    const double C3077 =
        (C49845 * (2 * C50015 * C49865 + C50015 * (C49865 + C49875 * C50033)) +
         (2 * C50312 + C50015 * C50343) * ae) /
        C49721;
    const double C2310 = 3 * (C50222 + C49940 * C50033) +
                         C50015 * (2 * C50312 + C50015 * C50343);
    const double C2550 = C50222 + C49940 * C50033 + C50343 * C50088;
    const double C3072 = C49845 * (2 * C50312 + C50015 * C50343);
    const double C5378 = 3 * (C50222 + C49940 * C50088) +
                         C49845 * (2 * C50399 + C49845 * C50402);
    const double C20694 = C50628 * C1098;
    const double C20692 = C50628 * C1094;
    const double C49897 = C49846 * C49895;
    const double C49907 = 3 * C49895;
    const double C49902 = ae * C49895;
    const double C50410 = C49845 * C49895;
    const double C50417 = C50015 * C49895;
    const double C49913 = C49890 + C49909;
    const double C50359 = C49881 + C50358;
    const double C50425 = C49845 * C50421;
    const double C50472 = C50015 * C50471;
    const double C50490 = C49845 * C50471;
    const double C3383 =
        (4 * (2 * C50015 * C49874 + C50015 * C50061) +
         C50015 *
             (3 * C50061 + C50015 * (2 * C50015 * C49890 +
                                     C50015 * (C49890 + C49914 * C50033)))) /
        C49725;
    const double C50074 = C50015 * C50073;
    const double C50162 = 3 * C50073;
    const double C50174 = ae * C50073;
    const double C50173 = C49845 * C50073;
    const double C50126 = C50070 + C50124;
    const double C50186 = 2 * C50180;
    const double C50184 = ae * C50180;
    const double C50152 = C49845 * C50149;
    const double C50201 = 3 * C50149;
    const double C50197 = ae * C50149;
    const double C50208 = C49890 + C50204;
    const double C50000 = C49846 * C49997;
    const double C49999 = C49997 * ae;
    const double C50348 = C49997 * C50033;
    const double C50412 = C49997 * C50088;
    const double C50418 = C50015 * C49997;
    const double C50369 = C49971 + C50367;
    const double C50426 = C50424 * C50088;
    const double C50446 = C49971 + C50443;
    const double C50480 = C50015 * C50479;
    const double C50493 = C50479 * C50088;
    const double C50507 = C50433 + C50504;
    const double C50526 = C49845 * C50523;
    const double C50913 = C50659 / C50667;
    const double C50911 = C50659 / C50650;
    const double C50910 = C50659 * C50654;
    const double C896 = (2 * C50663 * C50659) / C50650;
    const double C50914 = C50664 * C50654;
    const double C116 = C50664 / C50915;
    const double C536 = C50664 / C50652;
    const double C50946 = C50912 / C50650;
    const double C895 = (C50658 * std::pow(C50653, 2)) / C50662 + C50909;
    const double C50923 = C50726 / C50667;
    const double C50922 = C50726 * C50725;
    const double C50919 = C50726 / C50650;
    const double C249 = (2 * C50663 * C50726) / C50650;
    const double C50924 = C50729 * C50725;
    const double C967 = C50729 / C50915;
    const double C1199 = C50729 / C50652;
    const double C50948 = C50921 / C50650;
    const double C248 = (C50677 * std::pow(C50724, 2)) / C50662 + C50916;
    const double C50927 = C50754 / C50667;
    const double C50926 = C50754 * C50753;
    const double C50920 = C50754 / C50650;
    const double C392 = (2 * C50663 * C50754) / C50650;
    const double C50928 = C50757 * C50753;
    const double C1713 = C50757 / C50915;
    const double C1960 = C50757 / C50652;
    const double C50951 = C50925 / C50650;
    const double C391 = (C50693 * std::pow(C50752, 2)) / C50662 + C50918;
    const double C50936 = C50825 / C49730;
    const double C50935 = C50825 * C50824;
    const double C50932 = C50825 / C49721;
    const double C2160 = (2 * C50632 * C50825) / C49721;
    const double C50937 = C50828 * C50824;
    const double C19746 = C50828 / C50908;
    const double C24546 = C50828 / C49726;
    const double C50954 = C50934 / C49721;
    const double C2159 = (C50779 * std::pow(C50823, 2)) / C49725 + C50929;
    const double C49740 = C49729 - C49737;
    const double C49739 = C49719 * C49735;
    const double C2163 = (-C49735 / C49721) / C49726 - (0 * be) / C49721;
    const double C19747 = -C49735 / C49721;
    const double C24725 = C50904 * C285;
    const double C24721 = C50904 * C269;
    const double C24719 = C50904 * C980;
    const double C24715 = C50904 * C984;
    const double C24709 = C50904 * C287;
    const double C24705 = C50904 * C271;
    const double C24701 = C50904 * C286;
    const double C24697 = C50904 * C270;
    const double C25449 = C50904 * C780;
    const double C25445 = C50904 * C790;
    const double C25441 = C50904 * C1441;
    const double C25437 = C50904 * C1445;
    const double C25733 = C50904 * C2319;
    const double C25894 = C50904 * C1098;
    const double C25890 = C50904 * C1094;
    const double C27831 = C50904 * C426;
    const double C27827 = C50904 * C410;
    const double C27825 = C50904 * C412;
    const double C27821 = C50904 * C428;
    const double C27815 = C50904 * C427;
    const double C27811 = C50904 * C411;
    const double C30253 = C50904 * C1729;
    const double C30249 = C50904 * C1725;
    const double C50942 = C50903 / C49725;
    const double C17122 = C16959 * C285;
    const double C17116 = C16959 * C269;
    const double C34019 = C16959 * C426;
    const double C34013 = C16959 * C410;
    const double C50944 = C50907 / C49721;
    const double C2157 = -C50943;
    const double C17144 = C16958 * C285;
    const double C17138 = C16958 * C269;
    const double C17136 = C16958 * C271;
    const double C17130 = C16958 * C287;
    const double C17120 = C16958 * C286;
    const double C17114 = C16958 * C270;
    const double C17846 = C16958 * C780;
    const double C17840 = C16958 * C790;
    const double C18122 = C16958 * C984;
    const double C18116 = C16958 * C980;
    const double C18286 = C16958 * C1098;
    const double C18280 = C16958 * C1094;
    const double C18790 = C16958 * C1445;
    const double C18784 = C16958 * C1441;
    const double C34041 = C16958 * C426;
    const double C34035 = C16958 * C410;
    const double C34033 = C16958 * C412;
    const double C34027 = C16958 * C428;
    const double C34017 = C16958 * C427;
    const double C34011 = C16958 * C411;
    const double C35859 = C16958 * C1729;
    const double C35853 = C16958 * C1725;
    const double C49820 = C49817 - C49813;
    const double C49816 = C49768 * C49810;
    const double C50958 = C50939 / C49725;
    const double C5083 =
        (((0 - (C49768 * C49769) / C49721) * ae) / C49721 - (0 * be) / C49730) /
            C49726 +
        ((C49768 * (((C50790 - (C49768 * 2 * C49771) / C49721) * ae) / C49721 -
                    C49769 / C49730) +
          C50933) *
         ae) /
            C49721 +
        (0 * ae) / C49721 - C49771 / C49725;
    const double C50959 = C50941 / C49721;
    const double C33713 = -C50957;
    const double C132 =
        (2 * (C49846 * C49949 + C50222 * ae) +
         C49846 * (C49949 + C49846 * C49953 + C49846 * C49940 * ae) +
         (C50222 + C49940 * C49871) * ae) /
        C49721;
    const double C268 =
        (C50015 * (C49949 + C49846 * C49953 + C50230 * ae)) / C49721;
    const double C272 =
        (C49846 * C49949 + C50222 * ae + C49953 * C50033) / C49721;
    const double C409 =
        (C49845 * (C49949 + C49846 * C49953 + C50230 * ae)) / C49721;
    const double C413 =
        (C49846 * C49949 + C50222 * ae + C49953 * C50088) / C49721;
    const double C781 = (C49845 * C50015 * C49953) / C49721;
    const double C5383 =
        (3 * (C49858 + C49845 * C50401 + C50399 * ae) +
         C49845 * (2 * C50401 +
                   C49845 * (C49865 + C49845 * (C49845 * C49875 + C49956) +
                             C49845 * C49941 * ae) +
                   C50402 * ae) +
         (2 * C50399 + C49845 * C50402) * ae) /
        C49721;
    const double C137 = (3 * (C49858 + C49865 * C49871) +
                         C49846 * (2 * C49867 + C49846 * C49879)) /
                        C49721;
    const double C263 = (C50015 * (2 * C49867 + C49846 * C49879)) / C49721;
    const double C277 = (C49858 + C49865 * C49871 + C49879 * C50033) / C49721;
    const double C404 = (C49845 * (2 * C49867 + C49846 * C49879) +
                         (2 * C50230 + C49846 * C50232) * ae) /
                        C49721;
    const double C418 =
        (C49858 + C49865 * C49871 + C49845 * (C49845 * C49879 + C50232 * ae) +
         C49845 * C50232 * ae) /
        C49721;
    const double C786 =
        (C49845 * C50015 * C49879 + C50015 * C50232 * ae) / C49721;
    const double C974 =
        (2 * C50015 * C49879 + C50015 * (C49879 + C49895 * C50033)) / C49721;
    const double C49896 = C49846 * C49894;
    const double C49901 = 2 * C49894;
    const double C50081 = C50015 * C49894;
    const double C50095 = C49845 * C49894;
    const double C49889 = C49874 + C49885;
    const double C50407 = C50404 + C49959;
    const double C3379 =
        (4 * (2 * C50015 * C49865 + C50015 * C50362) +
         C50015 *
             (3 * C50362 + C50015 * (2 * C50015 * C49875 +
                                     C50015 * (C49875 + C49891 * C50033)))) /
        C49721;
    const double C50436 = C50434 + C50431;
    const double C50461 = C49845 * C50457;
    const double C50515 = 2 * C50457;
    const double C147 =
        (3 * (C49864 + ae * C49867 + C49846 * C49878) +
         ae * (2 * C49867 + C49846 * C49879) +
         C49846 *
             (2 * C49878 + ae * C49879 +
              C49846 * (C49874 + ae * C49846 * C49875 +
                        C49846 * (ae * C49875 + C49846 * std::pow(C49848, 6) *
                                                    bs[6] * C49856)))) /
        C49725;
    const double C284 =
        ((yP - yQ) * (C49864 + ae * C49867 + C49846 * C49878)) / C49725;
    const double C288 =
        (ae * C49858 + C49846 * C49864 + C49878 * std::pow(yP - yQ, 2)) /
        C49725;
    const double C425 = (ae * (C49855 * C49851 * C49939 +
                               C49846 * (C49846 * C49943 + C49940 * ae) +
                               C49846 * C49940 * ae) +
                         C49845 * (C49864 + ae * C49867 + C49846 * C49878)) /
                        C49725;
    const double C429 = (ae * C49858 + C49846 * C49864 + ae * C49845 * C49953 +
                         C49845 * (ae * C49953 + C49845 * C49878)) /
                        C49725;
    const double C791 =
        (ae * C50015 * C49953 + C49845 * C50015 * C49878) / C49725;
    const double C983 = (2 * C50015 * C49878 +
                         C50015 * (C49878 + C49894 * std::pow(C50015, 2))) /
                        C49725;
    const double C49962 = C49846 * C49961;
    const double C49966 = 2 * C49961;
    const double C50029 = C50015 * C49961;
    const double C50094 = ae * C49961;
    const double C50093 = C49845 * C49961;
    const double C1444 = (ae * (C49953 + C49961 * C50033) +
                          C49845 * (C49878 + C49894 * C50033)) /
                         C49725;
    const double C1728 = (2 * (ae * C49953 + C49845 * C49878) +
                          ae * (C49953 + C49961 * std::pow(C49845, 2)) +
                          C49845 * (C49878 + ae * C49845 * C49961 +
                                    C49845 * (ae * C49961 + C49845 * C49894))) /
                         C49725;
    const double C979 =
        (2 * C50015 * C49953 + C50015 * (C49953 + C49961 * C50033)) / C49721;
    const double C1440 = (C49845 * (C49953 + C49961 * C50033)) / C49721;
    const double C1724 =
        (2 * C49845 * C49953 + C49845 * (C49953 + C49961 * C50088)) / C49721;
    const double C2559 =
        (C49864 + C49874 * C50033 + ae * C49845 * C50046 +
         C49845 * (ae * C50046 + C49845 * (C49874 + C49890 * C50033))) /
        C49725;
    const double C3081 =
        (ae * (2 * C50031 + C50015 * C50046) +
         C49845 * (2 * C50015 * C49874 + C50015 * (C49874 + C49890 * C50033))) /
        C49725;
    const double C4493 =
        (2 * (ae * C50046 + C49845 * C50061) +
         ae * (C50046 + C50073 * std::pow(C49845, 2)) +
         C49845 *
             (C50061 + ae * C49845 * C50073 +
              C49845 * (ae * C50073 + C49845 * (C49890 + C49914 * C50033)))) /
        C49725;
    const double C2313 = (3 * (C49949 + C49943 * C50033) +
                          C50015 * (2 * C50031 + C50015 * C50046)) /
                         C49721;
    const double C2553 = (C49949 + C49943 * C50033 + C50046 * C50088) / C49721;
    const double C3075 = (C49845 * (2 * C50031 + C50015 * C50046)) / C49721;
    const double C4487 =
        (2 * C49845 * C50046 + C49845 * (C50046 + C50073 * C50088)) / C49721;
    const double C50125 = C50120 + C50123;
    const double C22082 = C50628 * C4495;
    const double C29075 = C50904 * C4495;
    const double C22084 = C50628 * C4491;
    const double C29071 = C50904 * C4491;
    const double C5387 =
        (3 * (C49864 + ae * C50085 + C49845 * C50089) +
         ae * (2 * C50085 + C49845 * C50091) +
         C49845 * (2 * C50089 + ae * C50091 +
                   C49845 * (C49874 + ae * C49845 * C49958 +
                             C49845 * (ae * C49958 + C49845 * C49890)))) /
        C49725;
    const double C5381 = (3 * (C49949 + C49943 * C50088) +
                          C49845 * (2 * C50085 + C49845 * C50091)) /
                         C49721;
    const double C50151 = C49845 * C50147;
    const double C50196 = 2 * C50147;
    const double C50150 = C49874 + C50146;
    const double C49977 = C49975 * ae;
    const double C50235 = C49846 * C49975;
    const double C50240 = 3 * C49975;
    const double C50308 = C50015 * C49975;
    const double C50411 = C49845 * C49975;
    const double C1435 = (C49845 * (C49879 + C49895 * C50033) +
                          (C50232 + C49975 * C50033) * ae) /
                         C49721;
    const double C970 =
        2 * C50015 * C50232 + C50015 * (C50232 + C49975 * C50033);
    const double C1431 = C49845 * (C50232 + C49975 * C50033);
    const double C1715 =
        2 * C49845 * C50232 + C49845 * (C50232 + C49975 * C50088);
    const double C50444 = C50441 + C49974;
    const double C50346 = C49957 + C50345;
    const double C50368 = 2 * C50366;
    const double C50423 = C49845 * C50366;
    const double C50422 = C50366 * ae;
    const double C4488 =
        (2 * (C49845 * C50390 + C50310 * ae) +
         C49845 * (C50390 + C49845 * (C49845 * C50015 * C49903 + C50366 * ae) +
                   C49845 * C50366 * ae) +
         (C50310 + C50366 * C50088) * ae) /
        C49721;
    const double C4482 =
        2 * C49845 * C50310 + C49845 * (C50310 + C50366 * C50088);
    const double C50408 = C49957 + C50406;
    const double C50447 = 2 * C50442;
    const double C50445 = C50442 * ae;
    const double C49978 = C49846 * C49976;
    const double C49987 = 2 * C49976;
    const double C50048 = C49976 * C50033;
    const double C50063 = C50015 * C49976;
    const double C50096 = C49976 * C50088;
    const double C50129 = ae * C49976;
    const double C50128 = C49845 * C49976;
    const double C50525 = C49845 * C50521;
    const double C50377 = C50015 * C50376;
    const double C50476 = 3 * C50376;
    const double C50492 = C49845 * C50376;
    const double C50491 = C50376 * ae;
    const double C4485 =
        (2 * (C49845 * C50362 + C50343 * ae) +
         C49845 *
             (C50362 +
              C49845 * (C49845 * (C49875 + C49891 * C50033) + C50376 * ae) +
              C49845 * C50376 * ae) +
         (C50343 + C50376 * C50088) * ae) /
        C49721;
    const double C4481 =
        2 * C49845 * C50343 + C49845 * (C50343 + C50376 * C50088);
    const double C50437 = C50373 + C50435;
    const double C50505 = 2 * C50500;
    const double C50503 = C50500 * ae;
    const double C50506 = C50502 + C50499;
    const double C50462 = C49845 * C50459;
    const double C50520 = 3 * C50459;
    const double C50518 = C50459 * ae;
    const double C49921 = C49846 * C49919;
    const double C2317 =
        (3 * (C49879 + C49895 * C50033) +
         C50015 * (2 * C50015 * C49895 + C50015 * (C49895 + C49919 * C50033))) /
        C49721;
    const double C49920 = C49846 * C49918;
    const double C50057 = C49918 * C50033;
    const double C50112 = C50015 * C49918;
    const double C50130 = C49845 * C49918;
    const double C2320 =
        (3 * (C49878 + C49894 * C50033) +
         C50015 * (2 * C50015 * C49894 + C50015 * (C49894 + C49918 * C50033))) /
        C49725;
    const double C50159 = C50015 * C50158;
    const double C50175 = C49845 * C50158;
    const double C50189 = C50181 + C50185;
    const double C50209 = C49845 * C50205;
    const double C50001 = C49846 * C49998;
    const double C50064 = C49998 * C50033;
    const double C50113 = C50015 * C49998;
    const double C50131 = C49998 * C50088;
    const double C50166 = C50015 * C50165;
    const double C50176 = C50165 * C50088;
    const double C50190 = C50122 + C50187;
    const double C50210 = C49845 * C50207;
    const double C49899 = C49887 + C49897;
    const double C3378 =
        (4 * (2 * C50015 * C49881 + C50015 * C50359) +
         C50015 * (3 * C50359 +
                   C50015 * (2 * C50015 * C49903 +
                             C50015 * (C49903 + C49846 * C49915 * C50033)))) /
        C49721;
    const double C50473 = C50469 + C50472;
    const double C20584 = C50628 * C3383;
    const double C50075 = C50072 + C50074;
    const double C6387 = (3 * (C50031 + C50070 * C50088) +
                          C49845 * (2 * C50119 + C49845 * C50126)) /
                         C49721;
    const double C50188 = C50121 + C50184;
    const double C50154 = C50148 + C50152;
    const double C50002 = C49990 + C50000;
    const double C50349 = C49975 + C50348;
    const double C50414 = C49975 + C50412;
    const double C50370 = C50015 * C50369;
    const double C50428 = C50366 + C50426;
    const double C50449 = C49845 * C50446;
    const double C50481 = C50477 + C50480;
    const double C50495 = C50376 + C50493;
    const double C50509 = C49845 * C50507;
    const double C50528 = C50524 + C50526;
    const double C50945 = C50910 / C50662;
    const double C50947 = C50914 / C50650;
    const double C251 = -C50946;
    const double C50949 = C50922 / C50662;
    const double C50950 = C50924 / C50650;
    const double C893 = -C50948;
    const double C50952 = C50926 / C50662;
    const double C50953 = C50928 / C50650;
    const double C1544 = -C50951;
    const double C50955 = C50935 / C49725;
    const double C50956 = C50937 / C49721;
    const double C16961 = -C50954;
    const double C24730 = C49740 * C259;
    const double C24726 = C49740 * C264;
    const double C24722 = C49740 * C254;
    const double C24716 = C49740 * C971;
    const double C24712 = C49740 * C975;
    const double C24710 = C49740 * C276;
    const double C24706 = C49740 * C258;
    const double C24702 = C49740 * C265;
    const double C24698 = C49740 * C255;
    const double C25072 = C49740 * C253;
    const double C25452 = C49740 * C777;
    const double C25446 = C49740 * C776;
    const double C25442 = C49740 * C785;
    const double C25438 = C49740 * C1432;
    const double C25434 = C49740 * C1436;
    const double C25734 = C49740 * C2316;
    const double C25895 = C49740 * C1089;
    const double C25891 = C49740 * C1085;
    const double C27836 = C49740 * C400;
    const double C27832 = C49740 * C405;
    const double C27828 = C49740 * C395;
    const double C27822 = C49740 * C399;
    const double C27818 = C49740 * C417;
    const double C27816 = C49740 * C406;
    const double C27812 = C49740 * C396;
    const double C28272 = C49740 * C394;
    const double C30254 = C49740 * C1720;
    const double C30250 = C49740 * C1716;
    const double C120 =
        (C49740 / C49726 - (0 * be) / C49721) / C49726 + (0 * ae) / C49721;
    const double C7893 = C49740 / C49726 - (0 * be) / C49721;
    const double C16965 = C49740 / C49726 + (0 * ae) / C49721;
    const double C49742 = C49739 / C49721;
    const double C2357 = C2163 * C259;
    const double C2353 = C2163 * C264;
    const double C2349 = C2163 * C254;
    const double C2343 = C2163 * C971;
    const double C2339 = C2163 * C975;
    const double C2337 = C2163 * C276;
    const double C2333 = C2163 * C258;
    const double C2329 = C2163 * C265;
    const double C2325 = C2163 * C255;
    const double C2711 = C2163 * C253;
    const double C3103 = C2163 * C777;
    const double C3097 = C2163 * C776;
    const double C3093 = C2163 * C785;
    const double C3089 = C2163 * C1432;
    const double C3085 = C2163 * C1436;
    const double C3393 = C2163 * C2316;
    const double C3562 = C2163 * C1089;
    const double C3558 = C2163 * C1085;
    const double C5425 = C2163 * C400;
    const double C5421 = C2163 * C405;
    const double C5417 = C2163 * C395;
    const double C5411 = C2163 * C1716;
    const double C5407 = C2163 * C1720;
    const double C5405 = C2163 * C417;
    const double C5401 = C2163 * C399;
    const double C5397 = C2163 * C406;
    const double C5393 = C2163 * C396;
    const double C5761 = C2163 * C394;
    const double C19877 = C19747 * C2316;
    const double C19873 = C19747 * C975;
    const double C19871 = C19747 * C971;
    const double C19869 = C19747 * C276;
    const double C19867 = C19747 * C258;
    const double C19865 = C19747 * C265;
    const double C19863 = C19747 * C255;
    const double C19861 = C19747 * C2310;
    const double C19859 = C19747 * C2315;
    const double C19857 = C19747 * C976;
    const double C19855 = C19747 * C972;
    const double C19853 = C19747 * C275;
    const double C19851 = C19747 * C257;
    const double C19849 = C19747 * C266;
    const double C19847 = C19747 * C256;
    const double C20115 = C19747 * C259;
    const double C20113 = C19747 * C264;
    const double C20111 = C19747 * C254;
    const double C20381 = C19747 * C1436;
    const double C20379 = C19747 * C1432;
    const double C20377 = C19747 * C785;
    const double C20375 = C19747 * C776;
    const double C20373 = C19747 * C775;
    const double C20371 = C19747 * C784;
    const double C20369 = C19747 * C1433;
    const double C20367 = C19747 * C1437;
    const double C20365 = C19747 * C3072;
    const double C20363 = C19747 * C3077;
    const double C20697 = C19747 * C2555;
    const double C20695 = C19747 * C2550;
    const double C20693 = C19747 * C1090;
    const double C20691 = C19747 * C1086;
    const double C21909 = C19747 * C1089;
    const double C21907 = C19747 * C1085;
    const double C22099 = C19747 * C1720;
    const double C22097 = C19747 * C1716;
    const double C22095 = C19747 * C417;
    const double C22093 = C19747 * C399;
    const double C22091 = C19747 * C406;
    const double C22089 = C19747 * C396;
    const double C22087 = C19747 * C1717;
    const double C22085 = C19747 * C1721;
    const double C22083 = C19747 * C4483;
    const double C22081 = C19747 * C4489;
    const double C22079 = C19747 * C416;
    const double C22077 = C19747 * C398;
    const double C22075 = C19747 * C407;
    const double C22073 = C19747 * C397;
    const double C22269 = C19747 * C777;
    const double C22435 = C19747 * C400;
    const double C22433 = C19747 * C405;
    const double C22431 = C19747 * C395;
    const double C23953 = C19747 * C5378;
    const double C50960 = C50902 - C50942;
    const double C50961 = C50906 - C50944;
    const double C2352 = C2157 * C285;
    const double C2348 = C2157 * C269;
    const double C2346 = C2157 * C980;
    const double C2342 = C2157 * C984;
    const double C2336 = C2157 * C287;
    const double C2332 = C2157 * C271;
    const double C2328 = C2157 * C286;
    const double C2324 = C2157 * C270;
    const double C3100 = C2157 * C780;
    const double C3096 = C2157 * C790;
    const double C3092 = C2157 * C1441;
    const double C3088 = C2157 * C1445;
    const double C3392 = C2157 * C2319;
    const double C3561 = C2157 * C1098;
    const double C3557 = C2157 * C1094;
    const double C5420 = C2157 * C426;
    const double C5416 = C2157 * C410;
    const double C5414 = C2157 * C1725;
    const double C5410 = C2157 * C1729;
    const double C5404 = C2157 * C428;
    const double C5400 = C2157 * C412;
    const double C5396 = C2157 * C427;
    const double C5392 = C2157 * C411;
    const double C6396 = C2157 * C4495;
    const double C6392 = C2157 * C4491;
    const double C39132 =
        (C49820 / C49726 - (0 * be) / C49721) / C49726 + (0 * ae) / C49721;
    const double C44448 = C49820 / C49726 - (0 * be) / C49721;
    const double C49819 = C49816 / C49721;
    const double C50970 = C50931 - C50958;
    const double C50971 = C50940 - C50959;
    const double C2350 = C50633 * C268;
    const double C2710 = C2157 * C268;
    const double C8046 = C7888 * C268;
    const double C17140 = C16959 * C268;
    const double C17118 = C16960 * C268;
    const double C17478 = C16958 * C268;
    const double C20112 = C50628 * C268;
    const double C24723 = C50633 * C268;
    const double C25071 = C50904 * C268;
    const double C2356 = C2157 * C272;
    const double C2334 = C50633 * C272;
    const double C17150 = C16958 * C272;
    const double C17134 = C16959 * C272;
    const double C19868 = C50628 * C272;
    const double C24729 = C50904 * C272;
    const double C24707 = C50633 * C272;
    const double C5418 = C50633 * C409;
    const double C5760 = C2157 * C409;
    const double C11004 = C7888 * C409;
    const double C22432 = C50628 * C409;
    const double C27829 = C50633 * C409;
    const double C28271 = C50904 * C409;
    const double C34037 = C16959 * C409;
    const double C34015 = C16960 * C409;
    const double C34375 = C16958 * C409;
    const double C5424 = C2157 * C413;
    const double C5402 = C50633 * C413;
    const double C22094 = C50628 * C413;
    const double C27835 = C50904 * C413;
    const double C27823 = C50633 * C413;
    const double C34047 = C16958 * C413;
    const double C34031 = C16959 * C413;
    const double C3102 = C2157 * C781;
    const double C3098 = C50633 * C781;
    const double C17848 = C16958 * C781;
    const double C17844 = C16959 * C781;
    const double C20376 = C50628 * C781;
    const double C25451 = C50904 * C781;
    const double C25447 = C50633 * C781;
    const double C23955 = C19747 * C5383;
    const double C2715 = C2163 * C263;
    const double C25076 = C49740 * C263;
    const double C2361 = C2163 * C277;
    const double C20117 = C19747 * C277;
    const double C24734 = C49740 * C277;
    const double C5765 = C2163 * C404;
    const double C28276 = C49740 * C404;
    const double C5429 = C2163 * C418;
    const double C22437 = C19747 * C418;
    const double C27840 = C49740 * C418;
    const double C3107 = C2163 * C786;
    const double C22271 = C19747 * C786;
    const double C25456 = C49740 * C786;
    const double C2369 = C2163 * C974;
    const double C20121 = C19747 * C974;
    const double C24742 = C49740 * C974;
    const double C49908 = C49901 + C49902;
    const double C49898 = C49889 + C49896;
    const double C20583 = C19747 * C3379;
    const double C50463 = C49865 + C50461;
    const double C2354 = C50633 * C284;
    const double C2714 = C2157 * C284;
    const double C8052 = C7888 * C284;
    const double C17146 = C16959 * C284;
    const double C17124 = C16960 * C284;
    const double C17484 = C16958 * C284;
    const double C20114 = C50628 * C284;
    const double C24727 = C50633 * C284;
    const double C25075 = C50904 * C284;
    const double C2360 = C2157 * C288;
    const double C2338 = C50633 * C288;
    const double C17156 = C16958 * C288;
    const double C17128 = C16959 * C288;
    const double C19870 = C50628 * C288;
    const double C24733 = C50904 * C288;
    const double C24711 = C50633 * C288;
    const double C5422 = C50633 * C425;
    const double C5764 = C2157 * C425;
    const double C11010 = C7888 * C425;
    const double C22434 = C50628 * C425;
    const double C27833 = C50633 * C425;
    const double C28275 = C50904 * C425;
    const double C34043 = C16959 * C425;
    const double C34021 = C16960 * C425;
    const double C34381 = C16958 * C425;
    const double C5428 = C2157 * C429;
    const double C5406 = C50633 * C429;
    const double C22096 = C50628 * C429;
    const double C27839 = C50904 * C429;
    const double C27819 = C50633 * C429;
    const double C34053 = C16958 * C429;
    const double C34025 = C16959 * C429;
    const double C3106 = C2157 * C791;
    const double C3094 = C50633 * C791;
    const double C17854 = C16958 * C791;
    const double C17838 = C16959 * C791;
    const double C20378 = C50628 * C791;
    const double C25455 = C50904 * C791;
    const double C25443 = C50633 * C791;
    const double C2368 = C2157 * C983;
    const double C2340 = C50633 * C983;
    const double C18124 = C16959 * C983;
    const double C19874 = C50628 * C983;
    const double C24741 = C50904 * C983;
    const double C24713 = C50633 * C983;
    const double C49963 = C49943 + C49962;
    const double C1097 = (C50015 * C49878 + ae * C49845 * C50029 +
                          C49845 * (ae * C50029 + C49845 * C50015 * C49894)) /
                         C49725;
    const double C1093 = (C50015 * C49953 + C50029 * C50088) / C49721;
    const double C50097 = C50094 + C50095;
    const double C3114 = C2157 * C1444;
    const double C3086 = C50633 * C1444;
    const double C18792 = C16959 * C1444;
    const double C20382 = C50628 * C1444;
    const double C25463 = C50904 * C1444;
    const double C25435 = C50633 * C1444;
    const double C5436 = C2157 * C1728;
    const double C5408 = C50633 * C1728;
    const double C22100 = C50628 * C1728;
    const double C30255 = C50633 * C1728;
    const double C35861 = C16959 * C1728;
    const double C44749 = C50904 * C1728;
    const double C2364 = C2157 * C979;
    const double C2344 = C50633 * C979;
    const double C18118 = C16959 * C979;
    const double C19872 = C50628 * C979;
    const double C24737 = C50904 * C979;
    const double C24717 = C50633 * C979;
    const double C3110 = C2157 * C1440;
    const double C3090 = C50633 * C1440;
    const double C18786 = C16959 * C1440;
    const double C20380 = C50628 * C1440;
    const double C25459 = C50904 * C1440;
    const double C25439 = C50633 * C1440;
    const double C5432 = C2157 * C1724;
    const double C5412 = C50633 * C1724;
    const double C22098 = C50628 * C1724;
    const double C30251 = C50633 * C1724;
    const double C35855 = C16959 * C1724;
    const double C44745 = C50904 * C1724;
    const double C3569 = C2157 * C2559;
    const double C20698 = C50628 * C2559;
    const double C25902 = C50904 * C2559;
    const double C4081 = C2157 * C3081;
    const double C20364 = C50628 * C3081;
    const double C26406 = C50904 * C3081;
    const double C23060 = C50628 * C4493;
    const double C3388 = C2157 * C2313;
    const double C19862 = C50628 * C2313;
    const double C25729 = C50904 * C2313;
    const double C3565 = C2157 * C2553;
    const double C20696 = C50628 * C2553;
    const double C25898 = C50904 * C2553;
    const double C4077 = C2157 * C3075;
    const double C20366 = C50628 * C3075;
    const double C26402 = C50904 * C3075;
    const double C23058 = C50628 * C4487;
    const double C6389 =
        (3 * (C50083 + ae * C50119 + C49845 * C50125) +
         ae * (2 * C50119 + C49845 * C50126) +
         C49845 *
             (2 * C50125 + ae * C50126 +
              C49845 * (C50121 + ae * C49845 * C50122 +
                        C49845 * (ae * C50122 + C49845 * C50015 * C49914)))) /
        C49725;
    const double C7296 = C2157 * C5387;
    const double C23956 = C50628 * C5387;
    const double C46529 = C50904 * C5387;
    const double C7292 = C2157 * C5381;
    const double C23954 = C50628 * C5381;
    const double C46525 = C50904 * C5381;
    const double C50203 = C50196 + C50197;
    const double C50153 = C50150 + C50151;
    const double C50413 = C50410 + C49977;
    const double C1719 =
        (2 * (C49845 * C49879 + C50232 * ae) +
         C49845 * (C49879 + C49845 * (C49845 * C49895 + C49977) +
                   C49845 * C49975 * ae) +
         (C50232 + C49975 * C50088) * ae) /
        C49721;
    const double C50236 = C50234 + C50235;
    const double C1088 =
        (C50015 * C49879 + C49845 * (C49845 * C50015 * C49895 + C50308 * ae) +
         C49845 * C50308 * ae) /
        C49721;
    const double C5977 =
        (2 * (C49845 * C50417 + C50308 * ae) +
         C49845 * (C50417 + C49845 * (C49845 * C50015 * C49919 + C50418 * ae) +
                   C49845 * C50418 * ae) +
         (C50308 + C50418 * C50088) * ae) /
        C49721;
    const double C1084 = C50015 * C50232 + C50308 * C50088;
    const double C5976 =
        2 * C49845 * C50308 + C49845 * (C50308 + C50418 * C50088);
    const double C3115 = C2163 * C1435;
    const double C25464 = C49740 * C1435;
    const double C31480 = C19747 * C1435;
    const double C2365 = C2163 * C970;
    const double C20119 = C19747 * C970;
    const double C24738 = C49740 * C970;
    const double C3111 = C2163 * C1431;
    const double C25460 = C49740 * C1431;
    const double C31478 = C19747 * C1431;
    const double C5433 = C2163 * C1715;
    const double C39532 = C19747 * C1715;
    const double C44746 = C49740 * C1715;
    const double C50448 = C49845 * C50444;
    const double C2556 =
        (C49867 + C49881 * C50033 +
         C49845 * (C49845 * (C49881 + C49903 * C50033) + C50346 * ae) +
         C49845 * C50346 * ae) /
        C49721;
    const double C3078 =
        (C49845 * (2 * C50015 * C49881 + C50015 * (C49881 + C49903 * C50033)) +
         (2 * C50310 + C50015 * C50346) * ae) /
        C49721;
    const double C4484 =
        (2 * (C49845 * C50359 + C50346 * ae) +
         C49845 * (C50359 +
                   C49845 * (C49845 * (C49903 + C49846 * C49915 * C50033) +
                             C50369 * ae) +
                   C49845 * C50369 * ae) +
         (C50346 + C50369 * C50088) * ae) /
        C49721;
    const double C2311 = 3 * (C50230 + C49957 * C50033) +
                         C50015 * (2 * C50310 + C50015 * C50346);
    const double C2551 = C50230 + C49957 * C50033 + C50346 * C50088;
    const double C3073 = C49845 * (2 * C50310 + C50015 * C50346);
    const double C4480 =
        2 * C49845 * C50346 + C49845 * (C50346 + C50369 * C50088);
    const double C50427 = C50425 + C50422;
    const double C6397 = C2163 * C4488;
    const double C22103 = C19747 * C4488;
    const double C29076 = C49740 * C4488;
    const double C6393 = C2163 * C4482;
    const double C22101 = C19747 * C4482;
    const double C29072 = C49740 * C4482;
    const double C5384 =
        (3 * (C49867 + C49845 * C50407 + C50405 * ae) +
         C49845 * (2 * C50407 +
                   C49845 * (C49881 + C49845 * (C49845 * C49903 + C49974) +
                             C49845 * C49971 * ae) +
                   C50408 * ae) +
         (2 * C50405 + C49845 * C50408) * ae) /
        C49721;
    const double C5379 = 3 * (C50230 + C49957 * C50088) +
                         C49845 * (2 * C50405 + C49845 * C50408);
    const double C49979 = C49958 + C49978;
    const double C50049 = C49961 + C50048;
    const double C50065 = 2 * C50063;
    const double C50111 = ae * C50063;
    const double C50110 = C49845 * C50063;
    const double C4494 =
        (2 * (ae * C50029 + C49845 * C50081) +
         ae * (C50029 + C50063 * std::pow(C49845, 2)) +
         C49845 * (C50081 + ae * C49845 * C50063 +
                   C49845 * (ae * C50063 + C49845 * C50015 * C49918))) /
        C49725;
    const double C4490 =
        (2 * C49845 * C50029 + C49845 * (C50029 + C50063 * C50088)) / C49721;
    const double C50098 = C49961 + C50096;
    const double C50134 = 2 * C50128;
    const double C50132 = ae * C50128;
    const double C50527 = C49875 + C50525;
    const double C50378 = C50375 + C50377;
    const double C50494 = C50490 + C50491;
    const double C23059 = C19747 * C4485;
    const double C23057 = C19747 * C4481;
    const double C6385 =
        (3 * (C50392 + C49845 * C50436 + C50432 * ae) +
         C49845 * (2 * C50436 +
                   C49845 * (C50430 +
                             C49845 * (C49845 * C50015 * C49891 + C50433 * ae) +
                             C49845 * C50433 * ae) +
                   C50437 * ae) +
         (2 * C50432 + C49845 * C50437) * ae) /
        C49721;
    const double C6383 = 3 * (C50312 + C50373 * C50088) +
                         C49845 * (2 * C50432 + C49845 * C50437);
    const double C50508 = C49845 * C50506;
    const double C50464 = C50460 + C50462;
    const double C49923 = C49911 + C49921;
    const double C49922 = C49913 + C49920;
    const double C50058 = C49894 + C50057;
    const double C50114 = C49845 * C50112;
    const double C50133 = C50129 + C50130;
    const double C3394 = C50633 * C2320;
    const double C19878 = C50628 * C2320;
    const double C25735 = C50633 * C2320;
    const double C50160 = C50156 + C50159;
    const double C50177 = C50174 + C50175;
    const double C50191 = C49845 * C50189;
    const double C50211 = C50208 + C50209;
    const double C50003 = C49969 + C50001;
    const double C50066 = C49976 + C50064;
    const double C50115 = C50113 * C50088;
    const double C50135 = C49976 + C50131;
    const double C50167 = C50163 + C50166;
    const double C50178 = C50073 + C50176;
    const double C50192 = C49845 * C50190;
    const double C50212 = C50206 + C50210;
    const double C140 = (4 * (2 * C49867 + C49846 * C49879) +
                         C49846 * (3 * C49879 + C49846 * C49899)) /
                        C49721;
    const double C278 =
        (2 * C49867 + C49846 * C49879 + C49899 * C50033) / C49721;
    const double C280 = (C50015 * (3 * C49879 + C49846 * C49899)) / C49721;
    const double C20575 =
        (5 * (3 * C50362 + C50015 * C50473) +
         C50015 * (4 * C50473 +
                   C50015 * (3 * C50471 +
                             C50015 * (2 * C50015 * C49891 +
                                       C50015 * (C49891 + C49915 * C50033))))) /
        C49721;
    const double C3554 =
        (2 * C50015 * C49874 + C50015 * C50061 + ae * C49845 * C50075 +
         C49845 *
             (ae * C50075 + C49845 * (2 * C50015 * C49890 +
                                      C50015 * (C49890 + C49914 * C50033)))) /
        C49725;
    const double C4072 =
        (ae * (3 * C50046 + C50015 * C50075) +
         C49845 *
             (3 * C50061 + C50015 * (2 * C50015 * C49890 +
                                     C50015 * (C49890 + C49914 * C50033)))) /
        C49725;
    const double C3381 = (4 * (2 * C50031 + C50015 * C50046) +
                          C50015 * (3 * C50046 + C50015 * C50075)) /
                         C49721;
    const double C3552 =
        (2 * C50031 + C50015 * C50046 + C50075 * C50088) / C49721;
    const double C4070 = (C49845 * (3 * C50046 + C50015 * C50075)) / C49721;
    const double C23054 = C50628 * C6387;
    const double C7285 = (4 * (2 * C50085 + C49845 * C50091) +
                          C49845 * (3 * C50091 + C49845 * C50154)) /
                         C49721;
    const double C50004 = C50002 * ae;
    const double C50241 = C49846 * C50002;
    const double C50306 = C50015 * C50002;
    const double C2557 =
        (C49879 + C49895 * C50033 +
         C49845 * (C49845 * (C49895 + C49919 * C50033) + C50349 * ae) +
         C49845 * C50349 * ae) /
        C49721;
    const double C3079 =
        (C49845 * (2 * C50015 * C49895 + C50015 * (C49895 + C49919 * C50033)) +
         (2 * C50308 + C50015 * C50349) * ae) /
        C49721;
    const double C2312 = 3 * (C50232 + C49975 * C50033) +
                         C50015 * (2 * C50308 + C50015 * C50349);
    const double C2552 = C50232 + C49975 * C50033 + C50349 * C50088;
    const double C3074 = C49845 * (2 * C50308 + C50015 * C50349);
    const double C5380 = 3 * (C50232 + C49975 * C50088) +
                         C49845 * (2 * C50411 + C49845 * C50414);
    const double C50371 = C50368 + C50370;
    const double C6382 = 3 * (C50310 + C50366 * C50088) +
                         C49845 * (2 * C50423 + C49845 * C50428);
    const double C50451 = C50447 + C50449;
    const double C50482 = C50015 * C50481;
    const double C23044 = 3 * (C50343 + C50376 * C50088) +
                          C49845 * (2 * C50492 + C49845 * C50495);
    const double C50511 = C50505 + C50509;
    const double C50530 = C49845 * C50528;
    const double C50962 = C50909 - C50945;
    const double C50963 = C50913 - C50947;
    const double C50964 = C50916 - C50949;
    const double C50965 = C50923 - C50950;
    const double C50966 = C50918 - C50952;
    const double C50967 = C50927 - C50953;
    const double C50968 = C50929 - C50955;
    const double C50969 = C50936 - C50956;
    const double C24747 = C24702 + C24703;
    const double C24745 = C24698 + C24699;
    const double C27853 = C27816 + C27817;
    const double C27851 = C27812 + C27813;
    const double C8075 = C7893 * C263;
    const double C8069 = C7893 * C253;
    const double C8059 = C7893 * C259;
    const double C8053 = C7893 * C277;
    const double C8051 = C7893 * C264;
    const double C8045 = C7893 * C254;
    const double C8769 = C7893 * C777;
    const double C8763 = C7893 * C786;
    const double C9053 = C7893 * C974;
    const double C9047 = C7893 * C970;
    const double C9721 = C7893 * C1435;
    const double C9715 = C7893 * C1431;
    const double C11033 = C7893 * C404;
    const double C11027 = C7893 * C394;
    const double C11017 = C7893 * C400;
    const double C11011 = C7893 * C418;
    const double C11009 = C7893 * C405;
    const double C11003 = C7893 * C395;
    const double C12845 = C7893 * C1715;
    const double C17147 = C16965 * C263;
    const double C17141 = C16965 * C253;
    const double C17131 = C16965 * C259;
    const double C17125 = C16965 * C277;
    const double C17123 = C16965 * C264;
    const double C17117 = C16965 * C254;
    const double C17841 = C16965 * C777;
    const double C17835 = C16965 * C786;
    const double C18125 = C16965 * C974;
    const double C18119 = C16965 * C970;
    const double C18793 = C16965 * C1435;
    const double C18787 = C16965 * C1431;
    const double C34044 = C16965 * C404;
    const double C34038 = C16965 * C394;
    const double C34028 = C16965 * C400;
    const double C34022 = C16965 * C418;
    const double C34020 = C16965 * C405;
    const double C34014 = C16965 * C395;
    const double C35856 = C16965 * C1715;
    const double C49744 = C50628 - C49742;
    const double C2374 = C2329 + C2330;
    const double C2372 = C2325 + C2326;
    const double C5442 = C5397 + C5398;
    const double C5440 = C5393 + C5394;
    const double C19888 = C19865 + C19866;
    const double C19887 = C19863 + C19864;
    const double C19885 = C19859 + C19860;
    const double C19884 = C19857 + C19858;
    const double C19883 = C19855 + C19856;
    const double C19882 = C19853 + C19854;
    const double C19881 = C19851 + C19852;
    const double C19880 = C19849 + C19850;
    const double C19879 = C19847 + C19848;
    const double C20392 = C20373 + C20374;
    const double C20391 = C20371 + C20372;
    const double C20390 = C20369 + C20370;
    const double C20389 = C20367 + C20368;
    const double C20704 = C20693 + C20694;
    const double C20703 = C20691 + C20692;
    const double C22114 = C22091 + C22092;
    const double C22113 = C22089 + C22090;
    const double C22112 = C22087 + C22088;
    const double C22111 = C22085 + C22086;
    const double C22110 = C22083 + C22084;
    const double C22109 = C22081 + C22082;
    const double C22108 = C22079 + C22080;
    const double C22107 = C22077 + C22078;
    const double C22106 = C22075 + C22076;
    const double C22105 = C22073 + C22074;
    const double C8084 = C50960 * C288;
    const double C8078 = C50960 * C272;
    const double C8072 = C50960 * C285;
    const double C8066 = C50960 * C269;
    const double C8064 = C50960 * C271;
    const double C8058 = C50960 * C287;
    const double C8048 = C50960 * C286;
    const double C8042 = C50960 * C270;
    const double C8412 = C50960 * C284;
    const double C8406 = C50960 * C268;
    const double C8782 = C50960 * C791;
    const double C8776 = C50960 * C781;
    const double C8774 = C50960 * C780;
    const double C8768 = C50960 * C790;
    const double C9050 = C50960 * C984;
    const double C9044 = C50960 * C980;
    const double C9214 = C50960 * C1098;
    const double C9208 = C50960 * C1094;
    const double C9718 = C50960 * C1445;
    const double C9712 = C50960 * C1441;
    const double C11042 = C50960 * C429;
    const double C11036 = C50960 * C413;
    const double C11030 = C50960 * C426;
    const double C11024 = C50960 * C410;
    const double C11022 = C50960 * C412;
    const double C11016 = C50960 * C428;
    const double C11006 = C50960 * C427;
    const double C11000 = C50960 * C411;
    const double C11370 = C50960 * C425;
    const double C11364 = C50960 * C409;
    const double C12848 = C50960 * C1729;
    const double C12842 = C50960 * C1725;
    const double C105 = (C50960 * C50623) / C49721 + (C50904 - C50943) / C49726;
    const double C8074 = C50961 * C284;
    const double C8068 = C50961 * C268;
    const double C8062 = C50961 * C272;
    const double C8056 = C50961 * C288;
    const double C8050 = C50961 * C285;
    const double C8044 = C50961 * C269;
    const double C8772 = C50961 * C781;
    const double C8766 = C50961 * C791;
    const double C9052 = C50961 * C983;
    const double C9046 = C50961 * C979;
    const double C9720 = C50961 * C1444;
    const double C9714 = C50961 * C1440;
    const double C11032 = C50961 * C425;
    const double C11026 = C50961 * C409;
    const double C11020 = C50961 * C413;
    const double C11014 = C50961 * C429;
    const double C11008 = C50961 * C426;
    const double C11002 = C50961 * C410;
    const double C12850 = C50961 * C1728;
    const double C12844 = C50961 * C1724;
    const double C106 =
        (C50961 * C50623) / C49721 + (2 * C50633 + C50960) / C49726;
    const double C107 = (C50623 * C50633) / C49730 + C50961 / C49726;
    const double C49822 = C50790 - C49819;
    const double C39125 =
        (C50970 * C50849) / C49721 + (C50933 - C50957) / C49726;
    const double C39126 =
        (C50971 * C50849) / C49721 + (2 * C50854 + C50970) / C49726;
    const double C39127 = (C50849 * C50854) / C49730 + C50971 / C49726;
    const double C2384 = C2349 + C2350;
    const double C20123 = C20111 + C20112;
    const double C24757 = C24722 + C24723;
    const double C2376 = C2333 + C2334;
    const double C19889 = C19867 + C19868;
    const double C24749 = C24706 + C24707;
    const double C5452 = C5417 + C5418;
    const double C22439 = C22431 + C22432;
    const double C27859 = C27828 + C27829;
    const double C5444 = C5401 + C5402;
    const double C22115 = C22093 + C22094;
    const double C27856 = C27822 + C27823;
    const double C3123 = C3097 + C3098;
    const double C20393 = C20375 + C20376;
    const double C25472 = C25446 + C25447;
    const double C148 =
        (4 * (2 * C49878 + ae * C49879 + C49846 * C49898) +
         ae * (3 * C49879 + C49846 * C49899) +
         C49846 * (3 * C49898 + ae * C49899 +
                   C49846 * (2 * C49894 + ae * C49895 +
                             C49846 * (C49890 + ae * C49846 * C49891 +
                                       C49846 * (ae * C49891 +
                                                 C49846 * std::pow(C49850, 7) *
                                                     bs[7] * C49856))))) /
        C49725;
    const double C283 =
        ((yP - yQ) * (2 * C49878 + ae * C49879 + C49846 * C49898)) / C49725;
    const double C289 = (C49864 + ae * C49867 + C49846 * C49878 +
                         C49898 * std::pow(yP - yQ, 2)) /
                        C49725;
    const double C424 =
        (ae * (2 * (C49846 * C49943 + C49940 * ae) +
               C49846 *
                   (C49943 +
                    C49846 * (C49846 * C49869 * C49870 * C49939 + C49941 * ae) +
                    C49846 * C49941 * ae) +
               (C49940 + C49941 * C49871) * ae) +
         C49845 * (2 * C49878 + ae * C49879 + C49846 * C49898)) /
        C49725;
    const double C20586 = C20583 + C20584;
    const double C50465 = C50463 + C50458;
    const double C2386 = C2353 + C2354;
    const double C20124 = C20113 + C20114;
    const double C24759 = C24726 + C24727;
    const double C2378 = C2337 + C2338;
    const double C19890 = C19869 + C19870;
    const double C24751 = C24710 + C24711;
    const double C5454 = C5421 + C5422;
    const double C22440 = C22433 + C22434;
    const double C27861 = C27832 + C27833;
    const double C5446 = C5405 + C5406;
    const double C22116 = C22095 + C22096;
    const double C27854 = C27818 + C27819;
    const double C3121 = C3093 + C3094;
    const double C20394 = C20377 + C20378;
    const double C25470 = C25442 + C25443;
    const double C2379 = C2339 + C2340;
    const double C19892 = C19873 + C19874;
    const double C24752 = C24712 + C24713;
    const double C49964 = C49963 + C49959;
    const double C3563 = C50633 * C1097;
    const double C5986 = C2157 * C1097;
    const double C9216 = C50961 * C1097;
    const double C18288 = C16959 * C1097;
    const double C21910 = C50628 * C1097;
    const double C25896 = C50633 * C1097;
    const double C27847 = C50904 * C1097;
    const double C3559 = C50633 * C1093;
    const double C5982 = C2157 * C1093;
    const double C9210 = C50961 * C1093;
    const double C18282 = C16959 * C1093;
    const double C21908 = C50628 * C1093;
    const double C25892 = C50633 * C1093;
    const double C27843 = C50904 * C1093;
    const double C3117 = C3085 + C3086;
    const double C20396 = C20381 + C20382;
    const double C25466 = C25434 + C25435;
    const double C5447 = C5407 + C5408;
    const double C22118 = C22099 + C22100;
    const double C30259 = C30254 + C30255;
    const double C2381 = C2343 + C2344;
    const double C19891 = C19871 + C19872;
    const double C24754 = C24716 + C24717;
    const double C3119 = C3089 + C3090;
    const double C20395 = C20379 + C20380;
    const double C25468 = C25438 + C25439;
    const double C5449 = C5411 + C5412;
    const double C22117 = C22097 + C22098;
    const double C30257 = C30250 + C30251;
    const double C20706 = C20697 + C20698;
    const double C20387 = C20363 + C20364;
    const double C19886 = C19861 + C19862;
    const double C20705 = C20695 + C20696;
    const double C20388 = C20365 + C20366;
    const double C23056 = C50628 * C6389;
    const double C23958 = C23955 + C23956;
    const double C23957 = C23953 + C23954;
    const double C7287 =
        (4 * (2 * C50089 + ae * C50091 + C49845 * C50153) +
         ae * (3 * C50091 + C49845 * C50154) +
         C49845 *
             (3 * C50153 + ae * C50154 +
              C49845 * (2 * C50147 + ae * C50149 +
                        C49845 * (C49890 + ae * C49845 * C49969 +
                                  C49845 * (ae * C49969 + C49845 * C49914))))) /
        C49725;
    const double C5385 =
        (3 * (C49879 + C49845 * C50413 + C50411 * ae) +
         C49845 * (2 * C50413 +
                   C49845 * (C49895 + C49845 * (C49845 * C49919 + C49999) +
                             C49845 * C49997 * ae) +
                   C50414 * ae) +
         (2 * C50411 + C49845 * C50414) * ae) /
        C49721;
    const double C5437 = C2163 * C1719;
    const double C12851 = C7893 * C1719;
    const double C35862 = C16965 * C1719;
    const double C39534 = C19747 * C1719;
    const double C44750 = C49740 * C1719;
    const double C419 =
        (2 * C49867 + C49846 * C49879 +
         C49845 * (C49845 * C49899 + C50236 * ae) + C49845 * C50236 * ae) /
        C49721;
    const double C421 = (C49845 * (3 * C49879 + C49846 * C49899) +
                         (3 * C50232 + C49846 * C50236) * ae) /
                        C49721;
    const double C787 =
        (C49845 * C50015 * C49899 + C50015 * C50236 * ae) / C49721;
    const double C127 = 4 * (2 * C50230 + C49846 * C50232) +
                        C49846 * (3 * C50232 + C49846 * C50236);
    const double C260 = 2 * C50230 + C49846 * C50232 + C50236 * C50033;
    const double C261 = C50015 * (3 * C50232 + C49846 * C50236);
    const double C401 = 2 * C50230 + C49846 * C50232 + C50236 * C50088;
    const double C402 = C49845 * (3 * C50232 + C49846 * C50236);
    const double C778 = C49845 * C50015 * C50236;
    const double C969 =
        2 * C50015 * C50236 + C50015 * (C50236 + C50002 * C50033);
    const double C1430 = C49845 * (C50236 + C50002 * C50033);
    const double C1714 =
        2 * C49845 * C50236 + C49845 * (C50236 + C50002 * C50088);
    const double C5987 = C2163 * C1088;
    const double C9217 = C7893 * C1088;
    const double C18289 = C16965 * C1088;
    const double C22275 = C19747 * C1088;
    const double C27848 = C49740 * C1088;
    const double C5983 = C2163 * C1084;
    const double C9211 = C7893 * C1084;
    const double C18283 = C16965 * C1084;
    const double C22273 = C19747 * C1084;
    const double C27844 = C49740 * C1084;
    const double C50450 = C49881 + C50448;
    const double C3570 = C2163 * C2556;
    const double C21917 = C19747 * C2556;
    const double C25903 = C49740 * C2556;
    const double C4082 = C2163 * C3078;
    const double C20385 = C19747 * C3078;
    const double C26407 = C49740 * C3078;
    const double C3389 = C2163 * C2311;
    const double C19875 = C19747 * C2311;
    const double C25730 = C49740 * C2311;
    const double C3566 = C2163 * C2551;
    const double C21915 = C19747 * C2551;
    const double C25899 = C49740 * C2551;
    const double C4078 = C2163 * C3073;
    const double C20383 = C19747 * C3073;
    const double C26403 = C49740 * C3073;
    const double C6384 =
        (3 * (C50390 + C49845 * C50427 + C50423 * ae) +
         C49845 * (2 * C50427 +
                   C49845 * (C50421 +
                             C49845 * (C49845 * C50015 * C49846 * C49915 +
                                       C50424 * ae) +
                             C49845 * C50424 * ae) +
                   C50428 * ae) +
         (2 * C50423 + C49845 * C50428) * ae) /
        C49721;
    const double C7297 = C2163 * C5384;
    const double C39332 = C19747 * C5384;
    const double C46530 = C49740 * C5384;
    const double C7293 = C2163 * C5379;
    const double C39330 = C19747 * C5379;
    const double C46526 = C49740 * C5379;
    const double C49980 = C49979 + C49974;
    const double C2560 =
        (C49878 + C49894 * C50033 + ae * C49845 * C50049 +
         C49845 * (ae * C50049 + C49845 * (C49894 + C49918 * C50033))) /
        C49725;
    const double C3082 =
        (ae * (2 * C50029 + C50015 * C50049) +
         C49845 * (2 * C50015 * C49894 + C50015 * (C49894 + C49918 * C50033))) /
        C49725;
    const double C2314 = (3 * (C49953 + C49961 * C50033) +
                          C50015 * (2 * C50029 + C50015 * C50049)) /
                         C49721;
    const double C2554 = (C49953 + C49961 * C50033 + C50049 * C50088) / C49721;
    const double C3076 = (C49845 * (2 * C50029 + C50015 * C50049)) / C49721;
    const double C6398 = C50633 * C4494;
    const double C22104 = C50628 * C4494;
    const double C29077 = C50633 * C4494;
    const double C6394 = C50633 * C4490;
    const double C22102 = C50628 * C4490;
    const double C29073 = C50633 * C4490;
    const double C5388 =
        (3 * (C49878 + ae * C50093 + C49845 * C50097) +
         ae * (2 * C50093 + C49845 * C50098) +
         C49845 * (2 * C50097 + ae * C50098 +
                   C49845 * (C49894 + ae * C49845 * C49976 +
                             C49845 * (ae * C49976 + C49845 * C49918)))) /
        C49725;
    const double C5382 = (3 * (C49953 + C49961 * C50088) +
                          C49845 * (2 * C50093 + C49845 * C50098)) /
                         C49721;
    const double C50136 = C49894 + C50132;
    const double C50529 = C50527 + C50522;
    const double C3550 =
        (2 * C50015 * C49865 + C50015 * C50362 +
         C49845 * (C49845 * (2 * C50015 * C49875 +
                             C50015 * (C49875 + C49891 * C50033)) +
                   C50378 * ae) +
         C49845 * C50378 * ae) /
        C49721;
    const double C4068 =
        (C49845 *
             (3 * C50362 + C50015 * (2 * C50015 * C49875 +
                                     C50015 * (C49875 + C49891 * C50033))) +
         (3 * C50343 + C50015 * C50378) * ae) /
        C49721;
    const double C21317 =
        (2 * (C49845 * C50473 + C50378 * ae) +
         C49845 * (C50473 +
                   C49845 * (C49845 * (2 * C50015 * C49891 +
                                       C50015 * (C49891 + C49915 * C50033)) +
                             C50481 * ae) +
                   C49845 * C50481 * ae) +
         (C50378 + C50481 * C50088) * ae) /
        C49721;
    const double C3377 = 4 * (2 * C50312 + C50015 * C50343) +
                         C50015 * (3 * C50343 + C50015 * C50378);
    const double C3548 = 2 * C50312 + C50015 * C50343 + C50378 * C50088;
    const double C4066 = C49845 * (3 * C50343 + C50015 * C50378);
    const double C21316 =
        2 * C49845 * C50378 + C49845 * (C50378 + C50481 * C50088);
    const double C23045 =
        (3 * (C50362 + C49845 * C50494 + C50492 * ae) +
         C49845 * (2 * C50494 +
                   C49845 * (C50471 +
                             C49845 * (C49845 * (C49891 + C49915 * C50033) +
                                       C50479 * ae) +
                             C49845 * C50479 * ae) +
                   C50495 * ae) +
         (2 * C50492 + C49845 * C50495) * ae) /
        C49721;
    const double C23064 = C23059 + C23060;
    const double C23063 = C23057 + C23058;
    const double C23055 = C19747 * C6385;
    const double C23053 = C19747 * C6383;
    const double C50510 = C50430 + C50508;
    const double C7281 = 4 * (2 * C50399 + C49845 * C50402) +
                         C49845 * (3 * C50402 + C49845 * C50464);
    const double C49925 = C49846 * C49923;
    const double C973 =
        (2 * C50015 * C49899 + C50015 * (C49899 + C49923 * C50033)) / C49721;
    const double C1434 = (C49845 * (C49899 + C49923 * C50033) +
                          (C50236 + C50002 * C50033) * ae) /
                         C49721;
    const double C49924 = C49846 * C49922;
    const double C50102 = C49845 * C49922;
    const double C50107 = C50015 * C49922;
    const double C982 = (2 * C50015 * C49898 +
                         C50015 * (C49898 + C49922 * std::pow(C50015, 2))) /
                        C49725;
    const double C2321 =
        (3 * (C49898 + C49922 * C50033) +
         C50015 * (2 * C50015 * C49922 +
                   C50015 * (C49922 + (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)) *
                                          C50033))) /
        C49725;
    const double C3382 =
        (4 * (2 * C50015 * C49894 + C50015 * C50058) +
         C50015 * (3 * C50058 +
                   C50015 * (2 * C50015 * C49918 +
                             C50015 * (C49918 + (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856) *
                                                    C50033)))) /
        C49725;
    const double C50116 = C50111 + C50114;
    const double C50137 = C49845 * C50133;
    const double C3400 = C3393 + C3394;
    const double C19894 = C19877 + C19878;
    const double C25741 = C25734 + C25735;
    const double C20577 =
        (5 * (3 * C50061 + C50015 * C50160) +
         C50015 * (4 * C50160 +
                   C50015 * (3 * C50158 +
                             C50015 * (2 * C50015 * C49914 +
                                       C50015 * (C49914 + std::pow(C49848, 8) *
                                                              bs[8] * C49856 *
                                                              C50033))))) /
        C49725;
    const double C50193 = C50188 + C50191;
    const double C50213 = C49845 * C50211;
    const double C50005 = C50003 + C49996;
    const double C50067 = C50015 * C50066;
    const double C4492 =
        (2 * (ae * C50049 + C49845 * C50058) +
         ae * (C50049 + C50066 * std::pow(C49845, 2)) +
         C49845 * (C50058 + ae * C49845 * C50066 +
                   C49845 * (ae * C50066 +
                             C49845 * (C49918 + (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856) *
                                                    C50033)))) /
        C49725;
    const double C4486 =
        (2 * C49845 * C50049 + C49845 * (C50049 + C50066 * C50088)) / C49721;
    const double C50117 = C50063 + C50115;
    const double C50138 = C49845 * C50135;
    const double C50168 = C50015 * C50167;
    const double C21319 =
        (2 * (ae * C50075 + C49845 * C50160) + ae * (C50075 + C50167 * C50088) +
         C49845 * (C50160 + ae * C49845 * C50167 +
                   C49845 * (ae * C50167 +
                             C49845 * (2 * C50015 * C49914 +
                                       C50015 * (C49914 + std::pow(C49848, 8) *
                                                              bs[8] * C49856 *
                                                              C50033))))) /
        C49725;
    const double C21318 =
        (2 * C49845 * C50075 + C49845 * (C50075 + C50167 * C50088)) / C49721;
    const double C23047 =
        (3 * (C50061 + ae * C50173 + C49845 * C50177) +
         ae * (2 * C50173 + C49845 * C50178) +
         C49845 * (2 * C50177 + ae * C50178 +
                   C49845 * (C50158 + ae * C49845 * C50165 +
                             C49845 * (ae * C50165 +
                                       C49845 * (C49914 + std::pow(C49848, 8) *
                                                              bs[8] * C49856 *
                                                              C50033))))) /
        C49725;
    const double C23046 = (3 * (C50046 + C50073 * C50088) +
                           C49845 * (2 * C50173 + C49845 * C50178)) /
                          C49721;
    const double C50194 = C50186 + C50192;
    const double C50214 = C49845 * C50212;
    const double C2723 = C2163 * C278;
    const double C8087 = C7893 * C278;
    const double C17159 = C16965 * C278;
    const double C25084 = C49740 * C278;
    const double C8415 = C7893 * C280;
    const double C17487 = C16965 * C280;
    const double C20702 = C50628 * C3554;
    const double C21050 = C50628 * C4072;
    const double C20582 = C50628 * C3381;
    const double C20700 = C50628 * C3552;
    const double C21048 = C50628 * C4070;
    const double C40523 = C50628 * C7285;
    const double C1718 =
        (2 * (C49845 * C49899 + C50236 * ae) +
         C49845 * (C49899 + C49845 * (C49845 * C49923 + C50004) +
                   C49845 * C50002 * ae) +
         (C50236 + C50002 * C50088) * ae) /
        C49721;
    const double C50242 = C50240 + C50241;
    const double C1087 =
        (C50015 * C49899 + C49845 * (C49845 * C50015 * C49923 + C50306 * ae) +
         C49845 * C50306 * ae) /
        C49721;
    const double C1083 = C50015 * C50236 + C50306 * C50088;
    const double C3549 =
        (2 * C50015 * C49881 + C50015 * C50359 +
         C49845 * (C49845 * (2 * C50015 * C49903 +
                             C50015 * (C49903 + C49846 * C49915 * C50033)) +
                   C50371 * ae) +
         C49845 * C50371 * ae) /
        C49721;
    const double C4067 =
        (C49845 * (3 * C50359 +
                   C50015 * (2 * C50015 * C49903 +
                             C50015 * (C49903 + C49846 * C49915 * C50033))) +
         (3 * C50346 + C50015 * C50371) * ae) /
        C49721;
    const double C3376 = 4 * (2 * C50310 + C50015 * C50346) +
                         C50015 * (3 * C50346 + C50015 * C50371);
    const double C3547 = 2 * C50310 + C50015 * C50346 + C50371 * C50088;
    const double C4065 = C49845 * (3 * C50346 + C50015 * C50371);
    const double C7280 = 4 * (2 * C50405 + C49845 * C50408) +
                         C49845 * (3 * C50408 + C49845 * C50451);
    const double C50483 = C50476 + C50482;
    const double C23948 = 4 * (2 * C50432 + C49845 * C50437) +
                          C49845 * (3 * C50437 + C49845 * C50511);
    const double C50532 = C50520 + C50530;
    const double C113 = (C50962 * C50653) / C50650 + (C50911 - C50946) / C50652;
    const double C114 =
        (C50963 * C50653) / C50650 + (2 * C50664 + C50962) / C50652;
    const double C115 = (C50653 * C50664) / C50667 + C50963 / C50652;
    const double C964 = (C50964 * C50724) / C50650 + (C50919 - C50948) / C50652;
    const double C965 =
        (C50965 * C50724) / C50650 + (2 * C50729 + C50964) / C50652;
    const double C966 = (C50724 * C50729) / C50667 + C50965 / C50652;
    const double C1710 =
        (C50966 * C50752) / C50650 + (C50920 - C50951) / C50652;
    const double C1711 =
        (C50967 * C50752) / C50650 + (2 * C50757 + C50966) / C50652;
    const double C1712 = (C50752 * C50757) / C50667 + C50967 / C50652;
    const double C19743 =
        (C50968 * C50823) / C49721 + (C50932 - C50954) / C49726;
    const double C19744 =
        (C50969 * C50823) / C49721 + (2 * C50828 + C50968) / C49726;
    const double C19745 = (C50823 * C50828) / C49730 + C50969 / C49726;
    const double C8094 = C8051 + C8052;
    const double C8091 = C8045 + C8046;
    const double C11052 = C11009 + C11010;
    const double C11049 = C11003 + C11004;
    const double C17166 = C17123 + C17124;
    const double C17163 = C17117 + C17118;
    const double C34063 = C34020 + C34021;
    const double C34060 = C34014 + C34015;
    const double C49745 = C49744 * ae;
    const double C2162 = (-C49722 / C49721) / C49726 - (C49744 * be) / C49721;
    const double C19904 = C19888 * C50790;
    const double C21904 = C19888 * C5080;
    const double C31163 = C19888 * C50933;
    const double C36613 = C19888 * C33713;
    const double C47279 = C19888 * C50970;
    const double C19903 = C19887 * C121;
    const double C21903 = C19887 * C5083;
    const double C31162 = C19887 * C10704;
    const double C36612 = C19887 * C33715;
    const double C19901 = C19885 * C50790;
    const double C32088 = C19885 * C50933;
    const double C37532 = C19885 * C33713;
    const double C19900 = C19884 * C50790;
    const double C22894 = C19884 * C5080;
    const double C31160 = C19884 * C50933;
    const double C36610 = C19884 * C33713;
    const double C48185 = C19884 * C50970;
    const double C19899 = C19883 * C121;
    const double C22893 = C19883 * C5083;
    const double C31161 = C19883 * C10704;
    const double C36611 = C19883 * C33715;
    const double C19898 = C19882 * C50790;
    const double C21901 = C19882 * C5080;
    const double C31155 = C19882 * C50933;
    const double C36605 = C19882 * C33713;
    const double C47276 = C19882 * C50970;
    const double C19897 = C19881 * C121;
    const double C21902 = C19881 * C5083;
    const double C31154 = C19881 * C10704;
    const double C36604 = C19881 * C33715;
    const double C19896 = C19880 * C50790;
    const double C21892 = C19880 * C5080;
    const double C31151 = C19880 * C50933;
    const double C36601 = C19880 * C33713;
    const double C47267 = C19880 * C50970;
    const double C19895 = C19879 * C121;
    const double C21891 = C19879 * C5083;
    const double C31150 = C19879 * C10704;
    const double C36600 = C19879 * C33715;
    const double C20404 = C20392 * C121;
    const double C21893 = C20392 * C5084;
    const double C22642 = C20392 * C5083;
    const double C31152 = C20392 * C10705;
    const double C31833 = C20392 * C10704;
    const double C36602 = C20392 * C33716;
    const double C37277 = C20392 * C33715;
    const double C20403 = C20391 * C50790;
    const double C21894 = C20391 * C5081;
    const double C22641 = C20391 * C5080;
    const double C31153 = C20391 * C50854;
    const double C31832 = C20391 * C50933;
    const double C36603 = C20391 * C50854;
    const double C37276 = C20391 * C33713;
    const double C47269 = C20391 * C50971;
    const double C47932 = C20391 * C50970;
    const double C20402 = C20390 * C121;
    const double C21900 = C20390 * C5084;
    const double C23553 = C20390 * C5083;
    const double C31156 = C20390 * C10705;
    const double C31829 = C20390 * C10704;
    const double C36606 = C20390 * C33716;
    const double C37273 = C20390 * C33715;
    const double C20401 = C20389 * C50790;
    const double C21899 = C20389 * C5081;
    const double C23554 = C20389 * C5080;
    const double C31157 = C20389 * C50854;
    const double C31828 = C20389 * C50933;
    const double C36607 = C20389 * C50854;
    const double C37272 = C20389 * C33713;
    const double C47274 = C20389 * C50971;
    const double C48829 = C20389 * C50970;
    const double C20710 = C20704 * C50790;
    const double C21896 = C20704 * C5082;
    const double C22639 = C20704 * C5081;
    const double C23050 = C20704 * C5080;
    const double C31830 = C20704 * C50854;
    const double C32240 = C20704 * C50933;
    const double C37274 = C20704 * C50854;
    const double C37684 = C20704 * C33713;
    const double C47271 = C20704 * C44445;
    const double C47930 = C20704 * C50971;
    const double C48337 = C20704 * C50970;
    const double C20709 = C20703 * C121;
    const double C21895 = C20703 * C5085;
    const double C22640 = C20703 * C5084;
    const double C23049 = C20703 * C5083;
    const double C31831 = C20703 * C10705;
    const double C32239 = C20703 * C10704;
    const double C37275 = C20703 * C33716;
    const double C37683 = C20703 * C33715;
    const double C47270 = C20703 * C44448;
    const double C22638 = C22110 * C5085;
    const double C23051 = C22110 * C5084;
    const double C32241 = C22110 * C10705;
    const double C37685 = C22110 * C33716;
    const double C47929 = C22110 * C44448;
    const double C22637 = C22109 * C5082;
    const double C23052 = C22109 * C5081;
    const double C32242 = C22109 * C50854;
    const double C37686 = C22109 * C50854;
    const double C47928 = C22109 * C44445;
    const double C48339 = C22109 * C50971;
    const double C49824 = C49822 * ae;
    const double C20129 = C20123 * C121;
    const double C22267 = C20123 * C5083;
    const double C31472 = C20123 * C10704;
    const double C36922 = C20123 * C33715;
    const double C19905 = C19889 * C121;
    const double C21911 = C19889 * C5083;
    const double C31166 = C19889 * C10704;
    const double C36616 = C19889 * C33715;
    const double C20405 = C20393 * C121;
    const double C21905 = C20393 * C5084;
    const double C22643 = C20393 * C5083;
    const double C31164 = C20393 * C10705;
    const double C31834 = C20393 * C10704;
    const double C36614 = C20393 * C33716;
    const double C37278 = C20393 * C33715;
    const double C2716 = C50633 * C283;
    const double C8076 = C7888 * C283;
    const double C8414 = C50961 * C283;
    const double C17148 = C16960 * C283;
    const double C17486 = C16959 * C283;
    const double C25077 = C50633 * C283;
    const double C2362 = C50633 * C289;
    const double C2722 = C2157 * C289;
    const double C8086 = C50961 * C289;
    const double C8054 = C7888 * C289;
    const double C17158 = C16959 * C289;
    const double C17126 = C16960 * C289;
    const double C20118 = C50628 * C289;
    const double C24735 = C50633 * C289;
    const double C25083 = C50904 * C289;
    const double C5766 = C50633 * C424;
    const double C11034 = C7888 * C424;
    const double C11372 = C50961 * C424;
    const double C28277 = C50633 * C424;
    const double C34045 = C16960 * C424;
    const double C34383 = C16959 * C424;
    const double C20588 = C20586 * C50790;
    const double C7283 =
        (4 * (2 * C50401 + C49845 * C50465 + C50402 * ae) +
         C49845 *
             (3 * C50465 +
              C49845 * (2 * C50457 +
                        C49845 * (C49875 + C49845 * (C49845 * C49891 + C49970) +
                                  C49845 * C49968 * ae) +
                        C50459 * ae) +
              C50464 * ae) +
         (3 * C50402 + C49845 * C50464) * ae) /
        C49721;
    const double C20130 = C20124 * C50790;
    const double C22268 = C20124 * C5080;
    const double C31473 = C20124 * C50933;
    const double C36923 = C20124 * C33713;
    const double C47583 = C20124 * C50970;
    const double C19906 = C19890 * C50790;
    const double C21912 = C19890 * C5080;
    const double C31167 = C19890 * C50933;
    const double C36617 = C19890 * C33713;
    const double C47285 = C19890 * C50970;
    const double C20406 = C20394 * C50790;
    const double C21906 = C20394 * C5081;
    const double C22644 = C20394 * C5080;
    const double C31165 = C20394 * C50854;
    const double C31835 = C20394 * C50933;
    const double C36615 = C20394 * C50854;
    const double C37279 = C20394 * C33713;
    const double C47281 = C20394 * C50971;
    const double C47935 = C20394 * C50970;
    const double C19908 = C19892 * C50790;
    const double C31171 = C19892 * C50933;
    const double C36621 = C19892 * C33713;
    const double C430 =
        (C49864 + ae * C49867 + C49846 * C49878 + ae * C49845 * C49964 +
         C49845 * (ae * C49964 + C49845 * C49898)) /
        C49725;
    const double C792 =
        (ae * C50015 * C49964 + C49845 * C50015 * C49898) / C49725;
    const double C138 = (3 * (C49949 + C49846 * C49953 + C50230 * ae) +
                         C49846 * (2 * C49953 + C49846 * C49964 + C50232 * ae) +
                         (2 * C50230 + C49846 * C50232) * ae) /
                        C49721;
    const double C267 =
        (C50015 * (2 * C49953 + C49846 * C49964 + C50232 * ae)) / C49721;
    const double C273 =
        (C49949 + C49846 * C49953 + C50230 * ae + C49964 * C50033) / C49721;
    const double C408 =
        (C49845 * (2 * C49953 + C49846 * C49964 + C50232 * ae)) / C49721;
    const double C414 =
        (C49949 + C49846 * C49953 + C50230 * ae + C49964 * C50088) / C49721;
    const double C782 = (C49845 * C50015 * C49964) / C49721;
    const double C3575 = C3562 + C3563;
    const double C21920 = C21909 + C21910;
    const double C25908 = C25895 + C25896;
    const double C3573 = C3558 + C3559;
    const double C21919 = C21907 + C21908;
    const double C25906 = C25891 + C25892;
    const double C20408 = C20396 * C50790;
    const double C21914 = C20396 * C5081;
    const double C31169 = C20396 * C50854;
    const double C31839 = C20396 * C50933;
    const double C36619 = C20396 * C50854;
    const double C37283 = C20396 * C33713;
    const double C47287 = C20396 * C50971;
    const double C19907 = C19891 * C121;
    const double C31170 = C19891 * C10704;
    const double C36620 = C19891 * C33715;
    const double C20407 = C20395 * C121;
    const double C21913 = C20395 * C5084;
    const double C31168 = C20395 * C10705;
    const double C31838 = C20395 * C10704;
    const double C36618 = C20395 * C33716;
    const double C37282 = C20395 * C33715;
    const double C20712 = C20706 * C50790;
    const double C21897 = C20706 * C5082;
    const double C23556 = C20706 * C5081;
    const double C31826 = C20706 * C50854;
    const double C32244 = C20706 * C50933;
    const double C37270 = C20706 * C50854;
    const double C37688 = C20706 * C33713;
    const double C47272 = C20706 * C44445;
    const double C48831 = C20706 * C50971;
    const double C20399 = C20387 * C50790;
    const double C22896 = C20387 * C5081;
    const double C31158 = C20387 * C50854;
    const double C32735 = C20387 * C50933;
    const double C36608 = C20387 * C50854;
    const double C38179 = C20387 * C33713;
    const double C48187 = C20387 * C50971;
    const double C19902 = C19886 * C121;
    const double C32087 = C19886 * C10704;
    const double C37531 = C19886 * C33715;
    const double C20711 = C20705 * C121;
    const double C21898 = C20705 * C5085;
    const double C23555 = C20705 * C5084;
    const double C31827 = C20705 * C10705;
    const double C32243 = C20705 * C10704;
    const double C37271 = C20705 * C33716;
    const double C37687 = C20705 * C33715;
    const double C47273 = C20705 * C44448;
    const double C20400 = C20388 * C121;
    const double C22895 = C20388 * C5084;
    const double C31159 = C20388 * C10705;
    const double C32734 = C20388 * C10704;
    const double C36609 = C20388 * C33716;
    const double C38178 = C20388 * C33715;
    const double C40525 = C50628 * C7287;
    const double C5773 = C2163 * C419;
    const double C11045 = C7893 * C419;
    const double C34056 = C16965 * C419;
    const double C45056 = C49740 * C419;
    const double C11373 = C7893 * C421;
    const double C34384 = C16965 * C421;
    const double C8785 = C7893 * C787;
    const double C14063 = C2163 * C787;
    const double C17857 = C16965 * C787;
    const double C28070 = C49740 * C787;
    const double C2719 = C2163 * C260;
    const double C8081 = C7893 * C260;
    const double C17153 = C16965 * C260;
    const double C25080 = C49740 * C260;
    const double C8409 = C7893 * C261;
    const double C17481 = C16965 * C261;
    const double C5769 = C2163 * C401;
    const double C11039 = C7893 * C401;
    const double C34050 = C16965 * C401;
    const double C45052 = C49740 * C401;
    const double C11367 = C7893 * C402;
    const double C34378 = C16965 * C402;
    const double C8779 = C7893 * C778;
    const double C14059 = C2163 * C778;
    const double C17851 = C16965 * C778;
    const double C28066 = C49740 * C778;
    const double C50452 = C50450 + C50445;
    const double C49981 = C49846 * C49980;
    const double C49986 = 3 * C49980;
    const double C50027 = C50015 * C49980;
    const double C50101 = ae * C49980;
    const double C50100 = C49845 * C49980;
    const double C1443 = (ae * (C49964 + C49980 * C50033) +
                          C49845 * (C49898 + C49922 * C50033)) /
                         C49725;
    const double C1727 = (2 * (ae * C49964 + C49845 * C49898) +
                          ae * (C49964 + C49980 * std::pow(C49845, 2)) +
                          C49845 * (C49898 + ae * C49845 * C49980 +
                                    C49845 * (ae * C49980 + C49845 * C49922))) /
                         C49725;
    const double C978 =
        (2 * C50015 * C49964 + C50015 * (C49964 + C49980 * C50033)) / C49721;
    const double C1439 = (C49845 * (C49964 + C49980 * C50033)) / C49721;
    const double C1723 =
        (2 * C49845 * C49964 + C49845 * (C49964 + C49980 * C50088)) / C49721;
    const double C3571 = C50633 * C2560;
    const double C21918 = C50628 * C2560;
    const double C25904 = C50633 * C2560;
    const double C4083 = C50633 * C3082;
    const double C20386 = C50628 * C3082;
    const double C26408 = C50633 * C3082;
    const double C3390 = C50633 * C2314;
    const double C19876 = C50628 * C2314;
    const double C25731 = C50633 * C2314;
    const double C3567 = C50633 * C2554;
    const double C21916 = C50628 * C2554;
    const double C25900 = C50633 * C2554;
    const double C4079 = C50633 * C3076;
    const double C20384 = C50628 * C3076;
    const double C26404 = C50633 * C3076;
    const double C6404 = C6397 + C6398;
    const double C22120 = C22103 + C22104;
    const double C29081 = C29076 + C29077;
    const double C6402 = C6393 + C6394;
    const double C22119 = C22101 + C22102;
    const double C29079 = C29072 + C29073;
    const double C7298 = C50633 * C5388;
    const double C39333 = C50628 * C5388;
    const double C46531 = C50633 * C5388;
    const double C7294 = C50633 * C5382;
    const double C39331 = C50628 * C5382;
    const double C46527 = C50633 * C5382;
    const double C50531 = C49845 * C50529;
    const double C20701 = C19747 * C3550;
    const double C21049 = C19747 * C4068;
    const double C20581 = C19747 * C3377;
    const double C20699 = C19747 * C3548;
    const double C21047 = C19747 * C4066;
    const double C23558 = C23064 * C5082;
    const double C32246 = C23064 * C50854;
    const double C37690 = C23064 * C50854;
    const double C48833 = C23064 * C44445;
    const double C23557 = C23063 * C5085;
    const double C32245 = C23063 * C10705;
    const double C37689 = C23063 * C33716;
    const double C48832 = C23063 * C44448;
    const double C23062 = C23055 + C23056;
    const double C23061 = C23053 + C23054;
    const double C50512 = C50510 + C50503;
    const double C40522 = C19747 * C7281;
    const double C49927 = C49907 + C49925;
    const double C49926 = C49908 + C49924;
    const double C2370 = C50633 * C982;
    const double C9054 = C7888 * C982;
    const double C18126 = C16960 * C982;
    const double C20122 = C50628 * C982;
    const double C24743 = C50633 * C982;
    const double C50139 = C50136 + C50137;
    const double C19910 = C19894 * C50790;
    const double C50215 = C50203 + C50213;
    const double C50006 = C49846 * C50005;
    const double C50051 = C50005 * C50033;
    const double C50103 = C50005 * C50088;
    const double C50108 = C50015 * C50005;
    const double C50068 = C50065 + C50067;
    const double C6388 =
        (3 * (C50081 + ae * C50110 + C49845 * C50116) +
         ae * (2 * C50110 + C49845 * C50117) +
         C49845 * (2 * C50116 + ae * C50117 +
                   C49845 * (C50112 + ae * C49845 * C50113 +
                             C49845 * (ae * C50113 +
                                       C49845 * C50015 *
                                           (ae * C49915 +
                                            C49846 * std::pow(C49848, 8) *
                                                bs[8] * C49856))))) /
        C49725;
    const double C6386 = (3 * (C50029 + C50063 * C50088) +
                          C49845 * (2 * C50110 + C49845 * C50117)) /
                         C49721;
    const double C50140 = C50134 + C50138;
    const double C50169 = C50162 + C50168;
    const double C23951 =
        (4 * (2 * C50125 + ae * C50126 + C49845 * C50193) +
         ae * (3 * C50126 + C49845 * C50194) +
         C49845 * (3 * C50193 + ae * C50194 +
                   C49845 * (2 * C50189 + ae * C50190 +
                             C49845 * (C50182 + ae * C49845 * C50183 +
                                       C49845 * (ae * C50183 +
                                                 C49845 * C50015 *
                                                     std::pow(C49848, 8) *
                                                     bs[8] * C49856))))) /
        C49725;
    const double C23950 = (4 * (2 * C50119 + C49845 * C50126) +
                           C49845 * (3 * C50126 + C49845 * C50194)) /
                          C49721;
    const double C50216 = C50201 + C50214;
    const double C128 = 5 * (3 * C50232 + C49846 * C50236) +
                        C49846 * (4 * C50236 + C49846 * C50242);
    const double C262 = 3 * C50232 + C49846 * C50236 + C50242 * C50033;
    const double C403 = 3 * C50232 + C49846 * C50236 + C50242 * C50088;
    const double C537 = C50015 * (4 * C50236 + C49846 * C50242);
    const double C641 = C49845 * (4 * C50236 + C49846 * C50242);
    const double C779 = C49845 * C50015 * C50242;
    const double C20687 =
        (3 * C50362 + C50015 * C50473 +
         C49845 * (C49845 * (3 * C50471 +
                             C50015 * (2 * C50015 * C49891 +
                                       C50015 * (C49891 + C49915 * C50033))) +
                   C50483 * ae) +
         C49845 * C50483 * ae) /
        C49721;
    const double C21041 =
        (C49845 * (4 * C50473 +
                   C50015 * (3 * C50471 +
                             C50015 * (2 * C50015 * C49891 +
                                       C50015 * (C49891 + C49915 * C50033)))) +
         (4 * C50378 + C50015 * C50483) * ae) /
        C49721;
    const double C20574 = 5 * (3 * C50343 + C50015 * C50378) +
                          C50015 * (4 * C50378 + C50015 * C50483);
    const double C20686 = 3 * C50343 + C50015 * C50378 + C50483 * C50088;
    const double C21040 = C49845 * (4 * C50378 + C50015 * C50483);
    const double C40517 = 5 * (3 * C50402 + C49845 * C50464) +
                          C49845 * (4 * C50464 + C49845 * C50532);
    const double C49746 = C49745 / C49721;
    const double C2367 = C2162 * C975;
    const double C2363 = C2162 * C971;
    const double C2359 = C2162 * C276;
    const double C2355 = C2162 * C258;
    const double C2351 = C2162 * C265;
    const double C2347 = C2162 * C255;
    const double C2345 = C2162 * C972;
    const double C2341 = C2162 * C976;
    const double C2335 = C2162 * C275;
    const double C2331 = C2162 * C257;
    const double C2327 = C2162 * C266;
    const double C2323 = C2162 * C256;
    const double C2721 = C2162 * C277;
    const double C2717 = C2162 * C259;
    const double C2713 = C2162 * C264;
    const double C2709 = C2162 * C254;
    const double C3113 = C2162 * C1436;
    const double C3109 = C2162 * C1432;
    const double C3105 = C2162 * C785;
    const double C3101 = C2162 * C776;
    const double C3099 = C2162 * C775;
    const double C3095 = C2162 * C784;
    const double C3091 = C2162 * C1433;
    const double C3087 = C2162 * C1437;
    const double C3391 = C2162 * C2315;
    const double C3387 = C2162 * C2310;
    const double C3568 = C2162 * C2555;
    const double C3564 = C2162 * C2550;
    const double C3560 = C2162 * C1090;
    const double C3556 = C2162 * C1086;
    const double C4080 = C2162 * C3077;
    const double C4076 = C2162 * C3072;
    const double C5435 = C2162 * C1720;
    const double C5431 = C2162 * C1716;
    const double C5427 = C2162 * C417;
    const double C5423 = C2162 * C399;
    const double C5419 = C2162 * C406;
    const double C5415 = C2162 * C396;
    const double C5413 = C2162 * C1717;
    const double C5409 = C2162 * C1721;
    const double C5403 = C2162 * C416;
    const double C5399 = C2162 * C398;
    const double C5395 = C2162 * C407;
    const double C5391 = C2162 * C397;
    const double C5771 = C2162 * C418;
    const double C5767 = C2162 * C400;
    const double C5763 = C2162 * C405;
    const double C5759 = C2162 * C395;
    const double C5985 = C2162 * C1089;
    const double C5981 = C2162 * C1085;
    const double C6395 = C2162 * C4489;
    const double C6391 = C2162 * C4483;
    const double C7295 = C2162 * C5383;
    const double C7291 = C2162 * C5378;
    const double C14061 = C2162 * C786;
    const double C14057 = C2162 * C777;
    const double C19912 = C19899 + C19900;
    const double C20580 = C19900 + C19899;
    const double C32086 = C31160 + C31161;
    const double C37530 = C36610 + C36611;
    const double C19911 = C19897 + C19898;
    const double C31174 = C31154 + C31155;
    const double C36624 = C36604 + C36605;
    const double C21046 = C20401 + C20402;
    const double C32733 = C31828 + C31829;
    const double C38177 = C37272 + C37273;
    const double C49826 = C49824 / C49721;
    const double C2728 = C2715 + C2716;
    const double C8106 = C8075 + C8076;
    const double C17178 = C17147 + C17148;
    const double C25089 = C25076 + C25077;
    const double C2390 = C2361 + C2362;
    const double C8095 = C8053 + C8054;
    const double C17167 = C17125 + C17126;
    const double C20126 = C20117 + C20118;
    const double C24763 = C24734 + C24735;
    const double C5778 = C5765 + C5766;
    const double C11064 = C11033 + C11034;
    const double C28281 = C28276 + C28277;
    const double C34075 = C34044 + C34045;
    const double C40524 = C19747 * C7283;
    const double C19914 = C19906 + C19905;
    const double C31175 = C31167 + C31166;
    const double C36625 = C36617 + C36616;
    const double C5430 = C50633 * C430;
    const double C5772 = C2157 * C430;
    const double C11044 = C50961 * C430;
    const double C11012 = C7888 * C430;
    const double C22438 = C50628 * C430;
    const double C27841 = C50633 * C430;
    const double C34055 = C16959 * C430;
    const double C34023 = C16960 * C430;
    const double C45055 = C50904 * C430;
    const double C3108 = C50633 * C792;
    const double C8784 = C50961 * C792;
    const double C8764 = C7888 * C792;
    const double C14062 = C2157 * C792;
    const double C17856 = C16959 * C792;
    const double C17836 = C16960 * C792;
    const double C22272 = C50628 * C792;
    const double C25457 = C50633 * C792;
    const double C28069 = C50904 * C792;
    const double C2712 = C50633 * C267;
    const double C8070 = C7888 * C267;
    const double C8408 = C50961 * C267;
    const double C17142 = C16960 * C267;
    const double C17480 = C16959 * C267;
    const double C25073 = C50633 * C267;
    const double C2358 = C50633 * C273;
    const double C2718 = C2157 * C273;
    const double C8080 = C50961 * C273;
    const double C8060 = C7888 * C273;
    const double C17152 = C16959 * C273;
    const double C17132 = C16960 * C273;
    const double C20116 = C50628 * C273;
    const double C24731 = C50633 * C273;
    const double C25079 = C50904 * C273;
    const double C5762 = C50633 * C408;
    const double C11028 = C7888 * C408;
    const double C11366 = C50961 * C408;
    const double C28273 = C50633 * C408;
    const double C34039 = C16960 * C408;
    const double C34377 = C16959 * C408;
    const double C5426 = C50633 * C414;
    const double C5768 = C2157 * C414;
    const double C11038 = C50961 * C414;
    const double C11018 = C7888 * C414;
    const double C22436 = C50628 * C414;
    const double C27837 = C50633 * C414;
    const double C34049 = C16959 * C414;
    const double C34029 = C16960 * C414;
    const double C45051 = C50904 * C414;
    const double C3104 = C50633 * C782;
    const double C8778 = C50961 * C782;
    const double C8770 = C7888 * C782;
    const double C14058 = C2157 * C782;
    const double C17850 = C16959 * C782;
    const double C17842 = C16960 * C782;
    const double C22270 = C50628 * C782;
    const double C25453 = C50633 * C782;
    const double C28065 = C50904 * C782;
    const double C21924 = C21920 * C5082;
    const double C22646 = C21920 * C5081;
    const double C31837 = C21920 * C50854;
    const double C37281 = C21920 * C50854;
    const double C47283 = C21920 * C44445;
    const double C47937 = C21920 * C50971;
    const double C21923 = C21919 * C5085;
    const double C22645 = C21919 * C5084;
    const double C31836 = C21919 * C10705;
    const double C37280 = C21919 * C33716;
    const double C47282 = C21919 * C44448;
    const double C19913 = C19908 + C19907;
    const double C20579 = C19901 + C19902;
    const double C21045 = C20399 + C20400;
    const double C7282 =
        (4 * (2 * C50407 + C49845 * C50452 + C50408 * ae) +
         C49845 *
             (3 * C50452 +
              C49845 * (2 * C50444 +
                        C49845 * (C49903 +
                                  C49845 * (C49845 * C49846 * C49915 + C49996) +
                                  C49845 * C49993 * ae) +
                        C50446 * ae) +
              C50451 * ae) +
         (3 * C50408 + C49845 * C50451) * ae) /
        C49721;
    const double C49982 = C49966 + C49981;
    const double C1096 = (C50015 * C49898 + ae * C49845 * C50027 +
                          C49845 * (ae * C50027 + C49845 * C50015 * C49922)) /
                         C49725;
    const double C1092 = (C50015 * C49964 + C50027 * C50088) / C49721;
    const double C50104 = C50101 + C50102;
    const double C3116 = C50633 * C1443;
    const double C9722 = C7888 * C1443;
    const double C18794 = C16960 * C1443;
    const double C25465 = C50633 * C1443;
    const double C31481 = C50628 * C1443;
    const double C5438 = C50633 * C1727;
    const double C12852 = C7888 * C1727;
    const double C35863 = C16960 * C1727;
    const double C39535 = C50628 * C1727;
    const double C44751 = C50633 * C1727;
    const double C2366 = C50633 * C978;
    const double C9048 = C7888 * C978;
    const double C18120 = C16960 * C978;
    const double C20120 = C50628 * C978;
    const double C24739 = C50633 * C978;
    const double C3112 = C50633 * C1439;
    const double C9716 = C7888 * C1439;
    const double C18788 = C16960 * C1439;
    const double C25461 = C50633 * C1439;
    const double C31479 = C50628 * C1439;
    const double C5434 = C50633 * C1723;
    const double C12846 = C7888 * C1723;
    const double C35857 = C16960 * C1723;
    const double C39533 = C50628 * C1723;
    const double C44747 = C50633 * C1723;
    const double C3579 = C3570 + C3571;
    const double C21922 = C21917 + C21918;
    const double C25912 = C25903 + C25904;
    const double C4089 = C4082 + C4083;
    const double C20398 = C20385 + C20386;
    const double C26414 = C26407 + C26408;
    const double C3398 = C3389 + C3390;
    const double C19893 = C19875 + C19876;
    const double C25739 = C25730 + C25731;
    const double C3577 = C3566 + C3567;
    const double C21921 = C21915 + C21916;
    const double C25910 = C25899 + C25900;
    const double C4087 = C4078 + C4079;
    const double C20397 = C20383 + C20384;
    const double C26412 = C26403 + C26404;
    const double C22648 = C22120 * C5082;
    const double C47939 = C22120 * C44445;
    const double C22647 = C22119 * C5085;
    const double C47938 = C22119 * C44448;
    const double C7302 = C7297 + C7298;
    const double C39335 = C39332 + C39333;
    const double C46535 = C46530 + C46531;
    const double C7300 = C7293 + C7294;
    const double C39334 = C39330 + C39331;
    const double C46533 = C46526 + C46527;
    const double C50533 = C50515 + C50531;
    const double C20708 = C20701 + C20702;
    const double C21052 = C21049 + C21050;
    const double C20585 = C20581 + C20582;
    const double C20707 = C20699 + C20700;
    const double C21051 = C21047 + C21048;
    const double C23066 = C23062 * C5082;
    const double C48341 = C23062 * C44445;
    const double C23065 = C23061 * C5085;
    const double C48340 = C23061 * C44448;
    const double C23949 =
        (4 * (2 * C50436 + C49845 * C50512 + C50437 * ae) +
         C49845 * (3 * C50512 +
                   C49845 * (2 * C50506 +
                             C49845 * (C50498 +
                                       C49845 * (C49845 * C50015 * C49915 +
                                                 C50501 * ae) +
                                       C49845 * C50501 * ae) +
                             C50507 * ae) +
                   C50511 * ae) +
         (3 * C50437 + C49845 * C50511) * ae) /
        C49721;
    const double C40526 = C40522 + C40523;
    const double C141 = (5 * (3 * C49879 + C49846 * C49899) +
                         C49846 * (4 * C49899 + C49846 * C49927)) /
                        C49721;
    const double C281 =
        (3 * C49879 + C49846 * C49899 + C49927 * C50033) / C49721;
    const double C422 =
        (3 * C49879 + C49846 * C49899 +
         C49845 * (C49845 * C49927 + C50242 * ae) + C49845 * C50242 * ae) /
        C49721;
    const double C538 = (C50015 * (4 * C49899 + C49846 * C49927)) / C49721;
    const double C642 = (C49845 * (4 * C49899 + C49846 * C49927) +
                         (4 * C50236 + C49846 * C50242) * ae) /
                        C49721;
    const double C788 =
        (C49845 * C50015 * C49927 + C50015 * C50242 * ae) / C49721;
    const double C149 =
        (5 * (3 * C49898 + ae * C49899 + C49846 * C49926) +
         ae * (4 * C49899 + C49846 * C49927) +
         C49846 *
             (4 * C49926 + ae * C49927 +
              C49846 *
                  (3 * C49922 + ae * C49923 +
                   C49846 * (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49725;
    const double C290 = (2 * C49878 + ae * C49879 + C49846 * C49898 +
                         C49926 * std::pow(yP - yQ, 2)) /
                        C49725;
    const double C291 =
        ((yP - yQ) * (3 * C49898 + ae * C49899 + C49846 * C49926)) / C49725;
    const double C292 =
        (3 * C49898 + ae * C49899 + C49846 * C49926 +
         (3 * C49922 + ae * C49923 +
          C49846 *
              (2 * C49918 + ae * C49919 +
               C49846 * (C49914 + ae * C49846 * C49915 +
                         C49846 * (ae * C49915 + C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))) *
             std::pow(yP - yQ, 2)) /
        C49725;
    const double C540 =
        ((yP - yQ) *
         (4 * C49926 + ae * C49927 +
          C49846 * (3 * C49922 + ae * C49923 +
                    C49846 * (2 * C49918 + ae * C49919 +
                              C49846 * (C49914 + ae * C49846 * C49915 +
                                        C49846 * (ae * C49915 +
                                                  C49846 * std::pow(C49848, 8) *
                                                      bs[8] * C49856)))))) /
        C49725;
    const double C981 =
        (2 * C50015 * C49926 +
         C50015 * (C49926 + (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856))) *
                                std::pow(C50015, 2))) /
        C49725;
    const double C2394 = C2369 + C2370;
    const double C9060 = C9053 + C9054;
    const double C18132 = C18125 + C18126;
    const double C20128 = C20121 + C20122;
    const double C24767 = C24742 + C24743;
    const double C50007 = C49987 + C50006;
    const double C50052 = C49980 + C50051;
    const double C50105 = C49980 + C50103;
    const double C5979 =
        (2 * (ae * C50027 + C49845 * C50107) + ae * (C50027 + C50108 * C50088) +
         C49845 * (C50107 + ae * C49845 * C50108 +
                   C49845 * (ae * C50108 +
                             C49845 * C50015 *
                                 (C49914 + ae * C49846 * C49915 +
                                  C49846 * (ae * C49915 +
                                            C49846 * std::pow(C49848, 8) *
                                                bs[8] * C49856))))) /
        C49725;
    const double C5978 =
        (2 * C49845 * C50027 + C49845 * (C50027 + C50108 * C50088)) / C49721;
    const double C3553 =
        (2 * C50015 * C49894 + C50015 * C50058 + ae * C49845 * C50068 +
         C49845 * (ae * C50068 +
                   C49845 * (2 * C50015 * C49918 +
                             C50015 * (C49918 + (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856) *
                                                    C50033)))) /
        C49725;
    const double C4071 =
        (ae * (3 * C50049 + C50015 * C50068) +
         C49845 * (3 * C50058 +
                   C50015 * (2 * C50015 * C49918 +
                             C50015 * (C49918 + (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856) *
                                                    C50033)))) /
        C49725;
    const double C3380 = (4 * (2 * C50029 + C50015 * C50049) +
                          C50015 * (3 * C50049 + C50015 * C50068)) /
                         C49721;
    const double C3551 =
        (2 * C50029 + C50015 * C50049 + C50068 * C50088) / C49721;
    const double C4069 = (C49845 * (3 * C50049 + C50015 * C50068)) / C49721;
    const double C7286 =
        (4 * (2 * C50097 + ae * C50098 + C49845 * C50139) +
         ae * (3 * C50098 + C49845 * C50140) +
         C49845 *
             (3 * C50139 + ae * C50140 +
              C49845 *
                  (2 * C50133 + ae * C50135 +
                   C49845 * (C49918 + ae * C49845 * C49998 +
                             C49845 * (ae * C49998 +
                                       C49845 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49725;
    const double C7284 = (4 * (2 * C50093 + C49845 * C50098) +
                          C49845 * (3 * C50098 + C49845 * C50140)) /
                         C49721;
    const double C20689 =
        (3 * C50061 + C50015 * C50160 + ae * C49845 * C50169 +
         C49845 * (ae * C50169 +
                   C49845 * (3 * C50158 +
                             C50015 * (2 * C50015 * C49914 +
                                       C50015 * (C49914 + std::pow(C49848, 8) *
                                                              bs[8] * C49856 *
                                                              C50033))))) /
        C49725;
    const double C21043 =
        (ae * (4 * C50075 + C50015 * C50169) +
         C49845 * (4 * C50160 +
                   C50015 * (3 * C50158 +
                             C50015 * (2 * C50015 * C49914 +
                                       C50015 * (C49914 + std::pow(C49848, 8) *
                                                              bs[8] * C49856 *
                                                              C50033))))) /
        C49725;
    const double C20576 = (5 * (3 * C50046 + C50015 * C50075) +
                           C50015 * (4 * C50075 + C50015 * C50169)) /
                          C49721;
    const double C20688 =
        (3 * C50046 + C50015 * C50075 + C50169 * C50088) / C49721;
    const double C21042 = (C49845 * (4 * C50075 + C50015 * C50169)) / C49721;
    const double C40520 =
        (5 * (3 * C50153 + ae * C50154 + C49845 * C50215) +
         ae * (4 * C50154 + C49845 * C50216) +
         C49845 *
             (4 * C50215 + ae * C50216 +
              C49845 *
                  (3 * C50211 + ae * C50212 +
                   C49845 * (2 * C50205 + ae * C50207 +
                             C49845 * (C49914 + ae * C49845 * C49991 +
                                       C49845 * (ae * C49991 +
                                                 C49845 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49725;
    const double C40519 = (5 * (3 * C50091 + C49845 * C50154) +
                           C49845 * (4 * C50154 + C49845 * C50216)) /
                          C49721;
    const double C49747 = C49746 - C49736;
    const double C2393 = C2367 + C2368;
    const double C2391 = C2363 + C2364;
    const double C2389 = C2359 + C2360;
    const double C2387 = C2355 + C2356;
    const double C2385 = C2351 + C2352;
    const double C2383 = C2347 + C2348;
    const double C2382 = C2345 + C2346;
    const double C2380 = C2341 + C2342;
    const double C2377 = C2335 + C2336;
    const double C2375 = C2331 + C2332;
    const double C2373 = C2327 + C2328;
    const double C2371 = C2323 + C2324;
    const double C2731 = C2721 + C2722;
    const double C2727 = C2713 + C2714;
    const double C2725 = C2709 + C2710;
    const double C3131 = C3113 + C3114;
    const double C3129 = C3109 + C3110;
    const double C3127 = C3105 + C3106;
    const double C3125 = C3101 + C3102;
    const double C3124 = C3099 + C3100;
    const double C3122 = C3095 + C3096;
    const double C3120 = C3091 + C3092;
    const double C3118 = C3087 + C3088;
    const double C3399 = C3391 + C3392;
    const double C3397 = C3387 + C3388;
    const double C3578 = C3568 + C3569;
    const double C3576 = C3564 + C3565;
    const double C3574 = C3560 + C3561;
    const double C3572 = C3556 + C3557;
    const double C4088 = C4080 + C4081;
    const double C4086 = C4076 + C4077;
    const double C5461 = C5435 + C5436;
    const double C5459 = C5431 + C5432;
    const double C5457 = C5427 + C5428;
    const double C5455 = C5423 + C5424;
    const double C5453 = C5419 + C5420;
    const double C5451 = C5415 + C5416;
    const double C5450 = C5413 + C5414;
    const double C5448 = C5409 + C5410;
    const double C5445 = C5403 + C5404;
    const double C5443 = C5399 + C5400;
    const double C5441 = C5395 + C5396;
    const double C5439 = C5391 + C5392;
    const double C5777 = C5763 + C5764;
    const double C5775 = C5759 + C5760;
    const double C5991 = C5985 + C5986;
    const double C5989 = C5981 + C5982;
    const double C6403 = C6395 + C6396;
    const double C6401 = C6391 + C6392;
    const double C7301 = C7295 + C7296;
    const double C7299 = C7291 + C7292;
    const double C32091 = C31159 + C32086;
    const double C37535 = C36609 + C37530;
    const double C31176 = C31174 + C31156;
    const double C36626 = C36624 + C36606;
    const double C32738 = C31827 + C32733;
    const double C38182 = C37271 + C38177;
    const double C49827 = C49826 - C49811;
    const double C20132 = C20126 * C50790;
    const double C31477 = C20126 * C50933;
    const double C36927 = C20126 * C33713;
    const double C40527 = C40524 + C40525;
    const double C31177 = C31168 + C31175;
    const double C36627 = C36618 + C36625;
    const double C5458 = C5429 + C5430;
    const double C5781 = C5771 + C5772;
    const double C11053 = C11011 + C11012;
    const double C22442 = C22437 + C22438;
    const double C27865 = C27840 + C27841;
    const double C34064 = C34022 + C34023;
    const double C3128 = C3107 + C3108;
    const double C8787 = C8763 + C8764;
    const double C14067 = C14061 + C14062;
    const double C17859 = C17835 + C17836;
    const double C22278 = C22271 + C22272;
    const double C25477 = C25456 + C25457;
    const double C2726 = C2711 + C2712;
    const double C8103 = C8069 + C8070;
    const double C17175 = C17141 + C17142;
    const double C25087 = C25072 + C25073;
    const double C2388 = C2357 + C2358;
    const double C2729 = C2717 + C2718;
    const double C8098 = C8059 + C8060;
    const double C17170 = C17131 + C17132;
    const double C20125 = C20115 + C20116;
    const double C24761 = C24730 + C24731;
    const double C5776 = C5761 + C5762;
    const double C11061 = C11027 + C11028;
    const double C28279 = C28272 + C28273;
    const double C34072 = C34038 + C34039;
    const double C5456 = C5425 + C5426;
    const double C5779 = C5767 + C5768;
    const double C11056 = C11017 + C11018;
    const double C22441 = C22435 + C22436;
    const double C27863 = C27836 + C27837;
    const double C34067 = C34028 + C34029;
    const double C3126 = C3103 + C3104;
    const double C8790 = C8769 + C8770;
    const double C14065 = C14057 + C14058;
    const double C17862 = C17841 + C17842;
    const double C22277 = C22269 + C22270;
    const double C25475 = C25452 + C25453;
    const double C49983 = C49982 + C49977;
    const double C5988 = C50633 * C1096;
    const double C9218 = C7888 * C1096;
    const double C18290 = C16960 * C1096;
    const double C22276 = C50628 * C1096;
    const double C27849 = C50633 * C1096;
    const double C5984 = C50633 * C1092;
    const double C9212 = C7888 * C1092;
    const double C18284 = C16960 * C1092;
    const double C22274 = C50628 * C1092;
    const double C27845 = C50633 * C1092;
    const double C3132 = C3115 + C3116;
    const double C9728 = C9721 + C9722;
    const double C18800 = C18793 + C18794;
    const double C25481 = C25464 + C25465;
    const double C31483 = C31480 + C31481;
    const double C5462 = C5437 + C5438;
    const double C12858 = C12851 + C12852;
    const double C35869 = C35862 + C35863;
    const double C39537 = C39534 + C39535;
    const double C44757 = C44750 + C44751;
    const double C2392 = C2365 + C2366;
    const double C9057 = C9047 + C9048;
    const double C18129 = C18119 + C18120;
    const double C20127 = C20119 + C20120;
    const double C24765 = C24738 + C24739;
    const double C3130 = C3111 + C3112;
    const double C9725 = C9715 + C9716;
    const double C18797 = C18787 + C18788;
    const double C25479 = C25460 + C25461;
    const double C31482 = C31478 + C31479;
    const double C5460 = C5433 + C5434;
    const double C12855 = C12845 + C12846;
    const double C35866 = C35856 + C35857;
    const double C39536 = C39532 + C39533;
    const double C44755 = C44746 + C44747;
    const double C21926 = C21922 * C5082;
    const double C31841 = C21922 * C50854;
    const double C37285 = C21922 * C50854;
    const double C47289 = C21922 * C44445;
    const double C20410 = C20398 * C50790;
    const double C31173 = C20398 * C50854;
    const double C36623 = C20398 * C50854;
    const double C19909 = C19893 * C121;
    const double C21925 = C21921 * C5085;
    const double C31840 = C21921 * C10705;
    const double C37284 = C21921 * C33716;
    const double C47288 = C21921 * C44448;
    const double C20409 = C20397 * C121;
    const double C31172 = C20397 * C10705;
    const double C36622 = C20397 * C33716;
    const double C50534 = C50533 + C50518;
    const double C20714 = C20708 * C50790;
    const double C22898 = C20708 * C5082;
    const double C32737 = C20708 * C50854;
    const double C38181 = C20708 * C50854;
    const double C48189 = C20708 * C44445;
    const double C21054 = C21052 * C50790;
    const double C32090 = C21052 * C50854;
    const double C37534 = C21052 * C50854;
    const double C20587 = C20585 * C121;
    const double C20713 = C20707 * C121;
    const double C22897 = C20707 * C5085;
    const double C32736 = C20707 * C10705;
    const double C38180 = C20707 * C33716;
    const double C48188 = C20707 * C44448;
    const double C21053 = C21051 * C121;
    const double C32089 = C21051 * C10705;
    const double C37533 = C21051 * C33716;
    const double C2724 = C50633 * C290;
    const double C8088 = C7888 * C290;
    const double C17160 = C16960 * C290;
    const double C25085 = C50633 * C290;
    const double C8416 = C7888 * C291;
    const double C17488 = C16960 * C291;
    const double C20134 = C20128 * C50790;
    const double C50008 = C50007 + C49999;
    const double C2561 =
        (C49898 + C49922 * C50033 + ae * C49845 * C50052 +
         C49845 * (ae * C50052 +
                   C49845 * (C49922 + (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)) *
                                          C50033))) /
        C49725;
    const double C3083 =
        (ae * (2 * C50027 + C50015 * C50052) +
         C49845 * (2 * C50015 * C49922 +
                   C50015 * (C49922 + (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)) *
                                          C50033))) /
        C49725;
    const double C2318 = (3 * (C49964 + C49980 * C50033) +
                          C50015 * (2 * C50027 + C50015 * C50052)) /
                         C49721;
    const double C2558 = (C49964 + C49980 * C50033 + C50052 * C50088) / C49721;
    const double C3080 = (C49845 * (2 * C50027 + C50015 * C50052)) / C49721;
    const double C5389 =
        (3 * (C49898 + ae * C50100 + C49845 * C50104) +
         ae * (2 * C50100 + C49845 * C50105) +
         C49845 *
             (2 * C50104 + ae * C50105 +
              C49845 *
                  (C49922 + ae * C49845 * C50005 +
                   C49845 * (ae * C50005 +
                             C49845 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49725;
    const double C5386 = (3 * (C49964 + C49980 * C50088) +
                          C49845 * (2 * C50100 + C49845 * C50105)) /
                         C49721;
    const double C24740 = C49747 * C975;
    const double C24736 = C49747 * C971;
    const double C24732 = C49747 * C276;
    const double C24728 = C49747 * C258;
    const double C24724 = C49747 * C265;
    const double C24720 = C49747 * C255;
    const double C24718 = C49747 * C972;
    const double C24714 = C49747 * C976;
    const double C24708 = C49747 * C275;
    const double C24704 = C49747 * C257;
    const double C24700 = C49747 * C266;
    const double C24696 = C49747 * C256;
    const double C25082 = C49747 * C277;
    const double C25078 = C49747 * C259;
    const double C25074 = C49747 * C264;
    const double C25070 = C49747 * C254;
    const double C25462 = C49747 * C1436;
    const double C25458 = C49747 * C1432;
    const double C25454 = C49747 * C785;
    const double C25450 = C49747 * C776;
    const double C25448 = C49747 * C775;
    const double C25444 = C49747 * C784;
    const double C25440 = C49747 * C1433;
    const double C25436 = C49747 * C1437;
    const double C25732 = C49747 * C2315;
    const double C25728 = C49747 * C2310;
    const double C25901 = C49747 * C2555;
    const double C25897 = C49747 * C2550;
    const double C25893 = C49747 * C1090;
    const double C25889 = C49747 * C1086;
    const double C26405 = C49747 * C3077;
    const double C26401 = C49747 * C3072;
    const double C27846 = C49747 * C1089;
    const double C27842 = C49747 * C1085;
    const double C27838 = C49747 * C417;
    const double C27834 = C49747 * C399;
    const double C27830 = C49747 * C406;
    const double C27826 = C49747 * C396;
    const double C27824 = C49747 * C398;
    const double C27820 = C49747 * C416;
    const double C27814 = C49747 * C407;
    const double C27810 = C49747 * C397;
    const double C28068 = C49747 * C786;
    const double C28064 = C49747 * C777;
    const double C28274 = C49747 * C405;
    const double C28270 = C49747 * C395;
    const double C29074 = C49747 * C4489;
    const double C29070 = C49747 * C4483;
    const double C30252 = C49747 * C1721;
    const double C30248 = C49747 * C1717;
    const double C44748 = C49747 * C1720;
    const double C44744 = C49747 * C1716;
    const double C45054 = C49747 * C418;
    const double C45050 = C49747 * C400;
    const double C46528 = C49747 * C5383;
    const double C46524 = C49747 * C5378;
    const double C117 =
        ((((0 - (C49719 * C49720) / C49721) * ae) / C49721 - (0 * be) / C49730 +
          C49722 / C49721) /
             C49726 -
         ((C49719 * C49743 + 0) * be) / C49721) /
            C49726 +
        ((C49719 * (C49743 / C49726 -
                    ((C49719 * C49747 + C50904) * be) / C49721 + C49740) +
          C50960) *
         ae) /
            C49721 +
        C49747 / C49726 - ((C49719 * C49740 + C50633) * be) / C49721;
    const double C118 =
        (C49743 / C49726 - ((C49719 * C49747 + C50904) * be) / C49721 +
         C49740) /
            C49726 +
        ((C49719 *
              (C49747 / C49726 - ((C49719 * C49740 + C50633) * be) / C49721) +
          C50961) *
         ae) /
            C49721 +
        2 * (C49740 / C49726 - (0 * be) / C49721);
    const double C119 =
        (C49747 / C49726 - ((C49719 * C49740 + C50633) * be) / C49721) /
            C49726 +
        ((C49719 * (C49740 / C49726 - (0 * be) / C49721) + C7888) * ae) /
            C49721;
    const double C7891 =
        C49743 / C49726 - ((C49719 * C49747 + C50904) * be) / C49721 + C49740;
    const double C7892 =
        C49747 / C49726 - ((C49719 * C49740 + C50633) * be) / C49721;
    const double C16963 =
        C49743 / C49726 + ((C49719 * C49747 + C50904) * ae) / C49721 + C49740;
    const double C16964 =
        C49747 / C49726 + ((C49719 * C49740 + C50633) * ae) / C49721;
    const double C2397 = C2390 + C2389;
    const double C3386 = C2381 + C2382;
    const double C3385 = C2379 + C2380;
    const double C2396 = C2377 + C2378;
    const double C2395 = C2375 + C2376;
    const double C14524 = C3123 + C3124;
    const double C14521 = C3124 + C3123;
    const double C14523 = C3121 + C3122;
    const double C14522 = C3122 + C3121;
    const double C4075 = C3119 + C3120;
    const double C15695 = C3120 + C3119;
    const double C4074 = C3117 + C3118;
    const double C15696 = C3118 + C3117;
    const double C6399 = C3575 + C3574;
    const double C15048 = C3574 + C3575;
    const double C6400 = C3573 + C3572;
    const double C15047 = C3572 + C3573;
    const double C7290 = C5449 + C5450;
    const double C7289 = C5447 + C5448;
    const double C5464 = C5445 + C5446;
    const double C5463 = C5443 + C5444;
    const double C32092 = C31158 + C32091;
    const double C37536 = C36608 + C37535;
    const double C31178 = C31176 + C31157;
    const double C36628 = C36626 + C36607;
    const double C32739 = C31826 + C32738;
    const double C38183 = C37270 + C38182;
    const double C39129 =
        ((((0 - (C49768 * C49808) / C49721) * ae) / C49721 - (0 * be) / C49730 +
          C49769 / C49721) /
             C49726 -
         ((C49768 * C49825 + 0) * be) / C49721) /
            C49726 +
        ((C49768 * (C49825 / C49726 -
                    ((C49768 * C49827 + C50933) * be) / C49721 + C49820) +
          C50970) *
         ae) /
            C49721 +
        C49827 / C49726 - ((C49768 * C49820 + C50854) * be) / C49721;
    const double C39130 =
        (C49825 / C49726 - ((C49768 * C49827 + C50933) * be) / C49721 +
         C49820) /
            C49726 +
        ((C49768 *
              (C49827 / C49726 - ((C49768 * C49820 + C50854) * be) / C49721) +
          C50971) *
         ae) /
            C49721 +
        2 * (C49820 / C49726 - (0 * be) / C49721);
    const double C39131 =
        (C49827 / C49726 - ((C49768 * C49820 + C50854) * be) / C49721) /
            C49726 +
        ((C49768 * (C49820 / C49726 - (0 * be) / C49721) + C44445) * ae) /
            C49721;
    const double C44446 =
        C49825 / C49726 - ((C49768 * C49827 + C50933) * be) / C49721 + C49820;
    const double C44447 =
        C49827 / C49726 - ((C49768 * C49820 + C50854) * be) / C49721;
    const double C31179 = C31169 + C31177;
    const double C36629 = C36619 + C36627;
    const double C5465 = C5458 + C5457;
    const double C14527 = C3128 + C3127;
    const double C14526 = C3127 + C3128;
    const double C22282 = C22278 * C5081;
    const double C31475 = C22278 * C50854;
    const double C36925 = C22278 * C50854;
    const double C47585 = C22278 * C50971;
    const double C2398 = C2388 + C2387;
    const double C20131 = C20125 * C121;
    const double C31476 = C20125 * C10704;
    const double C36926 = C20125 * C33715;
    const double C5466 = C5456 + C5455;
    const double C14528 = C3126 + C3125;
    const double C14525 = C3125 + C3126;
    const double C22281 = C22277 * C5084;
    const double C31474 = C22277 * C10705;
    const double C36924 = C22277 * C33716;
    const double C431 =
        (2 * C49878 + ae * C49879 + C49846 * C49898 + ae * C49845 * C49983 +
         C49845 * (ae * C49983 + C49845 * C49926)) /
        C49725;
    const double C432 =
        (ae * (3 * C49964 + C49846 * C49983 +
               (2 * C49957 + C49846 * C49975) * ae) +
         C49845 * (3 * C49898 + ae * C49899 + C49846 * C49926)) /
        C49725;
    const double C793 =
        (ae * C50015 * C49983 + C49845 * C50015 * C49926) / C49725;
    const double C139 = (4 * (2 * C49953 + C49846 * C49964 + C50232 * ae) +
                         C49846 * (3 * C49964 + C49846 * C49983 + C50236 * ae) +
                         (3 * C50232 + C49846 * C50236) * ae) /
                        C49721;
    const double C274 =
        (2 * C49953 + C49846 * C49964 + C50232 * ae + C49983 * C50033) / C49721;
    const double C279 =
        (C50015 * (3 * C49964 + C49846 * C49983 + C50236 * ae)) / C49721;
    const double C415 =
        (2 * C49953 + C49846 * C49964 + C50232 * ae + C49983 * C50088) / C49721;
    const double C420 =
        (C49845 * (3 * C49964 + C49846 * C49983 + C50236 * ae)) / C49721;
    const double C783 = (C49845 * C50015 * C49983) / C49721;
    const double C5992 = C5987 + C5988;
    const double C9224 = C9217 + C9218;
    const double C18296 = C18289 + C18290;
    const double C22280 = C22275 + C22276;
    const double C27869 = C27848 + C27849;
    const double C5990 = C5983 + C5984;
    const double C9221 = C9211 + C9212;
    const double C18293 = C18283 + C18284;
    const double C22279 = C22273 + C22274;
    const double C27867 = C27844 + C27845;
    const double C31485 = C31483 * C50854;
    const double C36929 = C31483 * C50854;
    const double C20133 = C20127 * C121;
    const double C31484 = C31482 * C10705;
    const double C36928 = C31482 * C33716;
    const double C40518 =
        (5 * (3 * C50465 + C49845 * C50534 + C50464 * ae) +
         C49845 *
             (4 * C50534 +
              C49845 *
                  (3 * C50529 +
                   C49845 *
                       (2 * C50521 +
                        C49845 * (C49891 + C49845 * (C49845 * C49915 + C49992) +
                                  C49845 * C49989 * ae) +
                        C50523 * ae) +
                   C50528 * ae) +
              C50532 * ae) +
         (4 * C50464 + C49845 * C50532) * ae) /
        C49721;
    const double C2732 = C2723 + C2724;
    const double C8112 = C8087 + C8088;
    const double C17184 = C17159 + C17160;
    const double C25093 = C25084 + C25085;
    const double C8422 = C8415 + C8416;
    const double C17494 = C17487 + C17488;
    const double C50009 = C49846 * C50008;
    const double C50025 = C50015 * C50008;
    const double C1442 =
        (ae * (C49983 + C50008 * C50033) +
         C49845 * (C49926 + (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856))) *
                                C50033)) /
        C49725;
    const double C1726 =
        (2 * (ae * C49983 + C49845 * C49926) +
         ae * (C49983 + C50008 * std::pow(C49845, 2)) +
         C49845 *
             (C49926 + ae * C49845 * C50008 +
              C49845 *
                  (ae * C50008 +
                   C49845 * (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49725;
    const double C977 =
        (2 * C50015 * C49983 + C50015 * (C49983 + C50008 * C50033)) / C49721;
    const double C1438 = (C49845 * (C49983 + C50008 * C50033)) / C49721;
    const double C1722 =
        (2 * C49845 * C49983 + C49845 * (C49983 + C50008 * C50088)) / C49721;
    const double C24766 = C24740 + C24741;
    const double C24764 = C24736 + C24737;
    const double C24762 = C24732 + C24733;
    const double C24760 = C24728 + C24729;
    const double C24758 = C24724 + C24725;
    const double C24756 = C24720 + C24721;
    const double C24755 = C24718 + C24719;
    const double C24753 = C24714 + C24715;
    const double C24750 = C24708 + C24709;
    const double C24748 = C24704 + C24705;
    const double C24746 = C24700 + C24701;
    const double C24744 = C24696 + C24697;
    const double C25092 = C25082 + C25083;
    const double C25090 = C25078 + C25079;
    const double C25088 = C25074 + C25075;
    const double C25086 = C25070 + C25071;
    const double C25480 = C25462 + C25463;
    const double C25478 = C25458 + C25459;
    const double C25476 = C25454 + C25455;
    const double C25474 = C25450 + C25451;
    const double C25473 = C25448 + C25449;
    const double C25471 = C25444 + C25445;
    const double C25469 = C25440 + C25441;
    const double C25467 = C25436 + C25437;
    const double C25740 = C25732 + C25733;
    const double C25738 = C25728 + C25729;
    const double C25911 = C25901 + C25902;
    const double C25909 = C25897 + C25898;
    const double C25907 = C25893 + C25894;
    const double C25905 = C25889 + C25890;
    const double C26413 = C26405 + C26406;
    const double C26411 = C26401 + C26402;
    const double C27868 = C27846 + C27847;
    const double C27866 = C27842 + C27843;
    const double C27864 = C27838 + C27839;
    const double C27862 = C27834 + C27835;
    const double C27860 = C27830 + C27831;
    const double C27858 = C27826 + C27827;
    const double C27857 = C27824 + C27825;
    const double C27855 = C27820 + C27821;
    const double C27852 = C27814 + C27815;
    const double C27850 = C27810 + C27811;
    const double C28074 = C28068 + C28069;
    const double C28072 = C28064 + C28065;
    const double C28280 = C28274 + C28275;
    const double C28278 = C28270 + C28271;
    const double C29080 = C29074 + C29075;
    const double C29078 = C29070 + C29071;
    const double C30258 = C30252 + C30253;
    const double C30256 = C30248 + C30249;
    const double C44756 = C44748 + C44749;
    const double C44754 = C44744 + C44745;
    const double C45060 = C45054 + C45055;
    const double C45058 = C45050 + C45051;
    const double C46534 = C46528 + C46529;
    const double C46532 = C46524 + C46525;
    const double C8083 = C7891 * C276;
    const double C8077 = C7891 * C258;
    const double C8071 = C7891 * C265;
    const double C8065 = C7891 * C255;
    const double C8063 = C7891 * C257;
    const double C8057 = C7891 * C275;
    const double C8047 = C7891 * C266;
    const double C8041 = C7891 * C256;
    const double C8411 = C7891 * C264;
    const double C8405 = C7891 * C254;
    const double C8781 = C7891 * C785;
    const double C8775 = C7891 * C776;
    const double C8773 = C7891 * C775;
    const double C8767 = C7891 * C784;
    const double C9049 = C7891 * C976;
    const double C9043 = C7891 * C972;
    const double C9213 = C7891 * C1090;
    const double C9207 = C7891 * C1086;
    const double C9717 = C7891 * C1437;
    const double C9711 = C7891 * C1433;
    const double C11041 = C7891 * C417;
    const double C11035 = C7891 * C399;
    const double C11029 = C7891 * C406;
    const double C11023 = C7891 * C396;
    const double C11021 = C7891 * C398;
    const double C11015 = C7891 * C416;
    const double C11005 = C7891 * C407;
    const double C10999 = C7891 * C397;
    const double C11369 = C7891 * C405;
    const double C11363 = C7891 * C395;
    const double C12847 = C7891 * C1721;
    const double C12841 = C7891 * C1717;
    const double C8085 = C7892 * C277;
    const double C8079 = C7892 * C259;
    const double C8073 = C7892 * C264;
    const double C8067 = C7892 * C254;
    const double C8061 = C7892 * C258;
    const double C8055 = C7892 * C276;
    const double C8049 = C7892 * C265;
    const double C8043 = C7892 * C255;
    const double C8413 = C7892 * C263;
    const double C8407 = C7892 * C253;
    const double C8783 = C7892 * C786;
    const double C8777 = C7892 * C777;
    const double C8771 = C7892 * C776;
    const double C8765 = C7892 * C785;
    const double C9051 = C7892 * C975;
    const double C9045 = C7892 * C971;
    const double C9215 = C7892 * C1089;
    const double C9209 = C7892 * C1085;
    const double C9719 = C7892 * C1436;
    const double C9713 = C7892 * C1432;
    const double C11043 = C7892 * C418;
    const double C11037 = C7892 * C400;
    const double C11031 = C7892 * C405;
    const double C11025 = C7892 * C395;
    const double C11019 = C7892 * C399;
    const double C11013 = C7892 * C417;
    const double C11007 = C7892 * C406;
    const double C11001 = C7892 * C396;
    const double C11371 = C7892 * C404;
    const double C11365 = C7892 * C394;
    const double C12849 = C7892 * C1720;
    const double C12843 = C7892 * C1716;
    const double C17155 = C16963 * C276;
    const double C17149 = C16963 * C258;
    const double C17143 = C16963 * C265;
    const double C17137 = C16963 * C255;
    const double C17135 = C16963 * C257;
    const double C17129 = C16963 * C275;
    const double C17119 = C16963 * C266;
    const double C17113 = C16963 * C256;
    const double C17483 = C16963 * C264;
    const double C17477 = C16963 * C254;
    const double C17853 = C16963 * C785;
    const double C17847 = C16963 * C776;
    const double C17845 = C16963 * C775;
    const double C17839 = C16963 * C784;
    const double C18121 = C16963 * C976;
    const double C18115 = C16963 * C972;
    const double C18285 = C16963 * C1090;
    const double C18279 = C16963 * C1086;
    const double C18789 = C16963 * C1437;
    const double C18783 = C16963 * C1433;
    const double C34052 = C16963 * C417;
    const double C34046 = C16963 * C399;
    const double C34040 = C16963 * C406;
    const double C34034 = C16963 * C396;
    const double C34032 = C16963 * C398;
    const double C34026 = C16963 * C416;
    const double C34016 = C16963 * C407;
    const double C34010 = C16963 * C397;
    const double C34380 = C16963 * C405;
    const double C34374 = C16963 * C395;
    const double C35858 = C16963 * C1721;
    const double C35852 = C16963 * C1717;
    const double C17157 = C16964 * C277;
    const double C17151 = C16964 * C259;
    const double C17145 = C16964 * C264;
    const double C17139 = C16964 * C254;
    const double C17133 = C16964 * C258;
    const double C17127 = C16964 * C276;
    const double C17121 = C16964 * C265;
    const double C17115 = C16964 * C255;
    const double C17485 = C16964 * C263;
    const double C17479 = C16964 * C253;
    const double C17855 = C16964 * C786;
    const double C17849 = C16964 * C777;
    const double C17843 = C16964 * C776;
    const double C17837 = C16964 * C785;
    const double C18123 = C16964 * C975;
    const double C18117 = C16964 * C971;
    const double C18287 = C16964 * C1089;
    const double C18281 = C16964 * C1085;
    const double C18791 = C16964 * C1436;
    const double C18785 = C16964 * C1432;
    const double C34054 = C16964 * C418;
    const double C34048 = C16964 * C400;
    const double C34042 = C16964 * C405;
    const double C34036 = C16964 * C395;
    const double C34030 = C16964 * C399;
    const double C34024 = C16964 * C417;
    const double C34018 = C16964 * C406;
    const double C34012 = C16964 * C396;
    const double C34382 = C16964 * C404;
    const double C34376 = C16964 * C394;
    const double C35860 = C16964 * C1720;
    const double C35854 = C16964 * C1716;
    const double C2401 = C2397 * C50790;
    const double C3396 = C3386 * C121;
    const double C3395 = C3385 * C50790;
    const double C2400 = C2396 * C50790;
    const double C2399 = C2395 * C121;
    const double C4085 = C4075 * C121;
    const double C4084 = C4074 * C50790;
    const double C47284 = C19889 * C44446;
    const double C47278 = C19887 * C44446;
    const double C47277 = C19881 * C44446;
    const double C47266 = C19879 * C44446;
    const double C47582 = C20123 * C44446;
    const double C47934 = C20393 * C44446;
    const double C47933 = C20392 * C44446;
    const double C48184 = C19883 * C44446;
    const double C48336 = C20703 * C44446;
    const double C48828 = C20390 * C44446;
    const double C47286 = C20395 * C44447;
    const double C47280 = C20393 * C44447;
    const double C47275 = C20390 * C44447;
    const double C47268 = C20392 * C44447;
    const double C47584 = C22277 * C44447;
    const double C47936 = C21919 * C44447;
    const double C47931 = C20703 * C44447;
    const double C48186 = C20388 * C44447;
    const double C48338 = C22110 * C44447;
    const double C48830 = C20705 * C44447;
    const double C2402 = C2398 * C121;
    const double C5774 = C50633 * C431;
    const double C11046 = C7888 * C431;
    const double C34057 = C16960 * C431;
    const double C45057 = C50633 * C431;
    const double C11374 = C7888 * C432;
    const double C34385 = C16960 * C432;
    const double C8786 = C7888 * C793;
    const double C14064 = C50633 * C793;
    const double C17858 = C16960 * C793;
    const double C28071 = C50633 * C793;
    const double C2720 = C50633 * C274;
    const double C8082 = C7888 * C274;
    const double C17154 = C16960 * C274;
    const double C25081 = C50633 * C274;
    const double C8410 = C7888 * C279;
    const double C17482 = C16960 * C279;
    const double C5770 = C50633 * C415;
    const double C11040 = C7888 * C415;
    const double C34051 = C16960 * C415;
    const double C45053 = C50633 * C415;
    const double C11368 = C7888 * C420;
    const double C34379 = C16960 * C420;
    const double C8780 = C7888 * C783;
    const double C14060 = C50633 * C783;
    const double C17852 = C16960 * C783;
    const double C28067 = C50633 * C783;
    const double C22284 = C22280 * C5082;
    const double C47587 = C22280 * C44445;
    const double C22283 = C22279 * C5085;
    const double C47586 = C22279 * C44448;
    const double C50010 = C49986 + C50009;
    const double C1095 =
        (C50015 * C49926 + ae * C49845 * C50025 +
         C49845 * (ae * C50025 +
                   C49845 * C50015 *
                       (2 * C49918 + ae * C49919 +
                        C49846 * (C49914 + ae * C49846 * C49915 +
                                  C49846 * (ae * C49915 +
                                            C49846 * std::pow(C49848, 8) *
                                                bs[8] * C49856))))) /
        C49725;
    const double C1091 = (C50015 * C49983 + C50025 * C50088) / C49721;
    const double C24770 = C24763 + C24762;
    const double C24771 = C24761 + C24760;
    const double C25727 = C24754 + C24755;
    const double C25726 = C24752 + C24753;
    const double C24769 = C24750 + C24751;
    const double C24768 = C24748 + C24749;
    const double C28546 = C25477 + C25476;
    const double C28545 = C25476 + C25477;
    const double C28547 = C25475 + C25474;
    const double C28544 = C25474 + C25475;
    const double C28543 = C25472 + C25473;
    const double C28540 = C25473 + C25472;
    const double C28542 = C25470 + C25471;
    const double C28541 = C25471 + C25470;
    const double C26400 = C25468 + C25469;
    const double C29728 = C25469 + C25468;
    const double C26399 = C25466 + C25467;
    const double C29729 = C25467 + C25466;
    const double C29069 = C25907 + C25908;
    const double C29066 = C25908 + C25907;
    const double C29068 = C25905 + C25906;
    const double C29067 = C25906 + C25905;
    const double C44752 = C27865 + C27864;
    const double C44753 = C27863 + C27862;
    const double C44742 = C27857 + C27856;
    const double C44743 = C27855 + C27854;
    const double C46522 = C30259 + C30258;
    const double C46523 = C30257 + C30256;
    const double C8110 = C8083 + C8084;
    const double C8107 = C8077 + C8078;
    const double C8104 = C8071 + C8072;
    const double C8101 = C8065 + C8066;
    const double C8100 = C8063 + C8064;
    const double C8097 = C8057 + C8058;
    const double C8092 = C8047 + C8048;
    const double C8089 = C8041 + C8042;
    const double C8420 = C8411 + C8412;
    const double C8417 = C8405 + C8406;
    const double C8796 = C8781 + C8782;
    const double C8793 = C8775 + C8776;
    const double C8792 = C8773 + C8774;
    const double C8789 = C8767 + C8768;
    const double C9058 = C9049 + C9050;
    const double C9055 = C9043 + C9044;
    const double C9222 = C9213 + C9214;
    const double C9219 = C9207 + C9208;
    const double C9726 = C9717 + C9718;
    const double C9723 = C9711 + C9712;
    const double C11068 = C11041 + C11042;
    const double C11065 = C11035 + C11036;
    const double C11062 = C11029 + C11030;
    const double C11059 = C11023 + C11024;
    const double C11058 = C11021 + C11022;
    const double C11055 = C11015 + C11016;
    const double C11050 = C11005 + C11006;
    const double C11047 = C10999 + C11000;
    const double C11378 = C11369 + C11370;
    const double C11375 = C11363 + C11364;
    const double C12856 = C12847 + C12848;
    const double C12853 = C12841 + C12842;
    const double C8111 = C8085 + C8086;
    const double C8108 = C8079 + C8080;
    const double C8105 = C8073 + C8074;
    const double C8102 = C8067 + C8068;
    const double C8099 = C8061 + C8062;
    const double C8096 = C8055 + C8056;
    const double C8093 = C8049 + C8050;
    const double C8090 = C8043 + C8044;
    const double C8421 = C8413 + C8414;
    const double C8418 = C8407 + C8408;
    const double C8797 = C8783 + C8784;
    const double C8794 = C8777 + C8778;
    const double C8791 = C8771 + C8772;
    const double C8788 = C8765 + C8766;
    const double C9059 = C9051 + C9052;
    const double C9056 = C9045 + C9046;
    const double C9223 = C9215 + C9216;
    const double C9220 = C9209 + C9210;
    const double C9727 = C9719 + C9720;
    const double C9724 = C9713 + C9714;
    const double C11069 = C11043 + C11044;
    const double C11066 = C11037 + C11038;
    const double C11063 = C11031 + C11032;
    const double C11060 = C11025 + C11026;
    const double C11057 = C11019 + C11020;
    const double C11054 = C11013 + C11014;
    const double C11051 = C11007 + C11008;
    const double C11048 = C11001 + C11002;
    const double C11379 = C11371 + C11372;
    const double C11376 = C11365 + C11366;
    const double C12857 = C12849 + C12850;
    const double C12854 = C12843 + C12844;
    const double C17182 = C17155 + C17156;
    const double C17179 = C17149 + C17150;
    const double C17176 = C17143 + C17144;
    const double C17173 = C17137 + C17138;
    const double C17172 = C17135 + C17136;
    const double C17169 = C17129 + C17130;
    const double C17164 = C17119 + C17120;
    const double C17161 = C17113 + C17114;
    const double C17492 = C17483 + C17484;
    const double C17489 = C17477 + C17478;
    const double C17868 = C17853 + C17854;
    const double C17865 = C17847 + C17848;
    const double C17864 = C17845 + C17846;
    const double C17861 = C17839 + C17840;
    const double C18130 = C18121 + C18122;
    const double C18127 = C18115 + C18116;
    const double C18294 = C18285 + C18286;
    const double C18291 = C18279 + C18280;
    const double C18798 = C18789 + C18790;
    const double C18795 = C18783 + C18784;
    const double C34079 = C34052 + C34053;
    const double C34076 = C34046 + C34047;
    const double C34073 = C34040 + C34041;
    const double C34070 = C34034 + C34035;
    const double C34069 = C34032 + C34033;
    const double C34066 = C34026 + C34027;
    const double C34061 = C34016 + C34017;
    const double C34058 = C34010 + C34011;
    const double C34389 = C34380 + C34381;
    const double C34386 = C34374 + C34375;
    const double C35867 = C35858 + C35859;
    const double C35864 = C35852 + C35853;
    const double C17183 = C17157 + C17158;
    const double C17180 = C17151 + C17152;
    const double C17177 = C17145 + C17146;
    const double C17174 = C17139 + C17140;
    const double C17171 = C17133 + C17134;
    const double C17168 = C17127 + C17128;
    const double C17165 = C17121 + C17122;
    const double C17162 = C17115 + C17116;
    const double C17493 = C17485 + C17486;
    const double C17490 = C17479 + C17480;
    const double C17869 = C17855 + C17856;
    const double C17866 = C17849 + C17850;
    const double C17863 = C17843 + C17844;
    const double C17860 = C17837 + C17838;
    const double C18131 = C18123 + C18124;
    const double C18128 = C18117 + C18118;
    const double C18295 = C18287 + C18288;
    const double C18292 = C18281 + C18282;
    const double C18799 = C18791 + C18792;
    const double C18796 = C18785 + C18786;
    const double C34080 = C34054 + C34055;
    const double C34077 = C34048 + C34049;
    const double C34074 = C34042 + C34043;
    const double C34071 = C34036 + C34037;
    const double C34068 = C34030 + C34031;
    const double C34065 = C34024 + C34025;
    const double C34062 = C34018 + C34019;
    const double C34059 = C34012 + C34013;
    const double C34390 = C34382 + C34383;
    const double C34387 = C34376 + C34377;
    const double C35868 = C35860 + C35861;
    const double C35865 = C35854 + C35855;
    const double C3401 = C3395 + C3396;
    const double C2403 = C2399 + C2400;
    const double C4090 = C4084 + C4085;
    const double C2404 = C2401 + C2402;
    const double C5782 = C5773 + C5774;
    const double C11070 = C11045 + C11046;
    const double C34081 = C34056 + C34057;
    const double C45061 = C45056 + C45057;
    const double C11380 = C11373 + C11374;
    const double C34391 = C34384 + C34385;
    const double C8798 = C8785 + C8786;
    const double C14068 = C14063 + C14064;
    const double C17870 = C17857 + C17858;
    const double C28075 = C28070 + C28071;
    const double C2730 = C2719 + C2720;
    const double C8109 = C8081 + C8082;
    const double C17181 = C17153 + C17154;
    const double C25091 = C25080 + C25081;
    const double C8419 = C8409 + C8410;
    const double C17491 = C17481 + C17482;
    const double C5780 = C5769 + C5770;
    const double C11067 = C11039 + C11040;
    const double C34078 = C34050 + C34051;
    const double C45059 = C45052 + C45053;
    const double C11377 = C11367 + C11368;
    const double C34388 = C34378 + C34379;
    const double C8795 = C8779 + C8780;
    const double C14066 = C14059 + C14060;
    const double C17867 = C17851 + C17852;
    const double C28073 = C28066 + C28067;
    const double C50011 = C50010 + C50004;
    const double C24774 = C24770 * C50790;
    const double C24775 = C24771 * C121;
    const double C25737 = C25727 * C121;
    const double C25736 = C25726 * C50790;
    const double C24773 = C24769 * C50790;
    const double C24772 = C24768 * C121;
    const double C26410 = C26400 * C121;
    const double C26409 = C26399 * C50790;
    const double C433 =
        (3 * C49898 + ae * C49899 + C49846 * C49926 + ae * C49845 * C50011 +
         C49845 *
             (ae * C50011 +
              C49845 *
                  (3 * C49922 + ae * C49923 +
                   C49846 * (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49725;
    const double C644 =
        (ae * (4 * C49983 + C49846 * C50011 +
               (3 * C49975 + C49846 * C50002) * ae) +
         C49845 *
             (4 * C49926 + ae * C49927 +
              C49846 *
                  (3 * C49922 + ae * C49923 +
                   C49846 * (2 * C49918 + ae * C49919 +
                             C49846 * (C49914 + ae * C49846 * C49915 +
                                       C49846 * (ae * C49915 +
                                                 C49846 * std::pow(C49848, 8) *
                                                     bs[8] * C49856)))))) /
        C49725;
    const double C794 =
        (ae * C50015 * C50011 +
         C49845 * C50015 *
             (3 * C49922 + ae * C49923 +
              C49846 * (2 * C49918 + ae * C49919 +
                        C49846 * (C49914 + ae * C49846 * C49915 +
                                  C49846 * (ae * C49915 +
                                            C49846 * std::pow(C49848, 8) *
                                                bs[8] * C49856))))) /
        C49725;
    const double C142 = (5 * (3 * C49964 + C49846 * C49983 + C50236 * ae) +
                         C49846 * (4 * C49983 + C49846 * C50011 + C50242 * ae) +
                         (4 * C50236 + C49846 * C50242) * ae) /
                        C49721;
    const double C282 =
        (3 * C49964 + C49846 * C49983 + C50236 * ae + C50011 * C50033) / C49721;
    const double C423 =
        (3 * C49964 + C49846 * C49983 + C50236 * ae + C50011 * C50088) / C49721;
    const double C539 =
        (C50015 * (4 * C49983 + C49846 * C50011 + C50242 * ae)) / C49721;
    const double C643 =
        (C49845 * (4 * C49983 + C49846 * C50011 + C50242 * ae)) / C49721;
    const double C789 = (C49845 * C50015 * C50011) / C49721;
    const double C24777 = C24774 + C24775;
    const double C25742 = C25736 + C25737;
    const double C24776 = C24772 + C24773;
    const double C26415 = C26409 + C26410;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C121 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50790) *
                       C50932 +
                   ((C8089 + C8090 + C8091) * C121 +
                    (C8092 + C8093 + C8094) * C50790) *
                       C50828) *
                      C50693 * C50919 -
                  (((C8095 + C8096 + C8097) * C50790 +
                    (C8098 + C8099 + C8100) * C121) *
                       C50828 +
                   ((C8094 + C8093 + C8092) * C50790 +
                    (C8091 + C8090 + C8089) * C121) *
                       C50932) *
                      C50693 * C50729) *
                     C50962 +
                 ((((C8101 + C8102 + C8103) * C121 +
                    (C8104 + C8105 + C8106) * C50790) *
                       C50932 +
                   ((C8107 + C8108 + C8109) * C121 +
                    (C8110 + C8111 + C8112) * C50790) *
                       C50828) *
                      C50693 * C50729 -
                  (((C8106 + C8105 + C8104) * C50790 +
                    (C8103 + C8102 + C8101) * C121) *
                       C50828 +
                   ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50790 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C121) *
                       C50932) *
                      C50693 * C50919) *
                     C50963 +
                 ((((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                     C50961 * C132 + C7893 * C126 + C7888 * C138) *
                        C121 +
                    (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                     C50961 * C146 + C7893 * C137 + C7888 * C147) *
                        C50790) *
                       C50932 +
                   ((C8417 + C8418 + C8419) * C121 +
                    (C8420 + C8421 + C8422) * C50790) *
                       C50828) *
                      C50693 * C50919 -
                  (((C7893 * C281 + C7888 * C292 + C7892 * C278 +
                     C50961 * C290 + C7891 * C277 + C50960 * C289) *
                        C50790 +
                    (C7893 * C262 + C7888 * C282 + C7892 * C260 +
                     C50961 * C274 + C7891 * C259 + C50960 * C273) *
                        C121) *
                       C50828 +
                   ((C8422 + C8421 + C8420) * C50790 +
                    (C8419 + C8418 + C8417) * C121) *
                       C50932) *
                      C50693 * C50729) *
                     C536)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                      C50961 * C130 + C7893 * C124 + C7888 * C131) *
                         C121 +
                     (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                      C50961 * C144 + C7893 * C135 + C7888 * C145) *
                         C50790) *
                        C50932 +
                    ((C8089 + C8090 + C8091) * C121 +
                     (C8092 + C8093 + C8094) * C50790) *
                        C50828) *
                       C50920 -
                   (((C8787 + C8788 + C8789) * C50790 +
                     (C8790 + C8791 + C8792) * C121) *
                        C50828 +
                    ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                      C50961 * C426 + C7891 * C407 + C50960 * C427) *
                         C50790 +
                     (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                      C50961 * C410 + C7891 * C397 + C50960 * C411) *
                         C121) *
                        C50932) *
                       C50757) *
                      C50919 +
                  ((((C8792 + C8791 + C8790) * C121 +
                     (C8789 + C8788 + C8787) * C50790) *
                        C50932 +
                    ((C7891 * C1433 + C50960 * C1441 + C7892 * C1432 +
                      C50961 * C1440 + C7893 * C1431 + C7888 * C1439) *
                         C121 +
                     (C7891 * C1437 + C50960 * C1445 + C7892 * C1436 +
                      C50961 * C1444 + C7893 * C1435 + C7888 * C1443) *
                         C50790) *
                        C50828) *
                       C50757 -
                   (((C8095 + C8096 + C8097) * C50790 +
                     (C8098 + C8099 + C8100) * C121) *
                        C50828 +
                    ((C8094 + C8093 + C8092) * C50790 +
                     (C8091 + C8090 + C8089) * C121) *
                        C50932) *
                       C50920) *
                      C50729) *
                     C251 +
                 (((((C7891 * C396 + C50960 * C410 + C7892 * C395 +
                      C50961 * C409 + C7893 * C394 + C7888 * C408) *
                         C121 +
                     (C7891 * C406 + C50960 * C426 + C7892 * C405 +
                      C50961 * C425 + C7893 * C404 + C7888 * C424) *
                         C50790) *
                        C50932 +
                    ((C8793 + C8794 + C8795) * C121 +
                     (C8796 + C8797 + C8798) * C50790) *
                        C50828) *
                       C50757 -
                   (((C8106 + C8105 + C8104) * C50790 +
                     (C8103 + C8102 + C8101) * C121) *
                        C50828 +
                    ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                      C50961 * C145 + C7891 * C134 + C50960 * C144) *
                         C50790 +
                     (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                      C50961 * C131 + C7891 * C123 + C50960 * C130) *
                         C121) *
                        C50932) *
                       C50920) *
                      C50919 +
                  ((((C8101 + C8102 + C8103) * C121 +
                     (C8104 + C8105 + C8106) * C50790) *
                        C50932 +
                    ((C8107 + C8108 + C8109) * C121 +
                     (C8110 + C8111 + C8112) * C50790) *
                        C50828) *
                       C50920 -
                   (((C7893 * C1434 + C7888 * C1442 + C7892 * C1435 +
                      C50961 * C1443 + C7891 * C1436 + C50960 * C1444) *
                         C50790 +
                     (C7893 * C1430 + C7888 * C1438 + C7892 * C1431 +
                      C50961 * C1439 + C7891 * C1432 + C50960 * C1440) *
                         C121) *
                        C50828 +
                    ((C8798 + C8797 + C8796) * C50790 +
                     (C8795 + C8794 + C8793) * C121) *
                        C50932) *
                       C50757) *
                      C50729) *
                     C50664)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C121 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50790) *
                       C50932 +
                   ((C8089 + C8090 + C8091) * C121 +
                    (C8092 + C8093 + C8094) * C50790) *
                       C50828) *
                      C50693 * C248 -
                  (((C8095 + C8096 + C8097) * C50790 +
                    (C8098 + C8099 + C8100) * C121) *
                       C50828 +
                   ((C8094 + C8093 + C8092) * C50790 +
                    (C8091 + C8090 + C8089) * C121) *
                       C50932) *
                      C50693 * C249 +
                  (((C8100 + C8099 + C8098) * C121 +
                    (C8097 + C8096 + C8095) * C50790) *
                       C50932 +
                   ((C7891 * C972 + C50960 * C980 + C7892 * C971 +
                     C50961 * C979 + C7893 * C970 + C7888 * C978) *
                        C121 +
                    (C7891 * C976 + C50960 * C984 + C7892 * C975 +
                     C50961 * C983 + C7893 * C974 + C7888 * C982) *
                        C50790) *
                       C50828) *
                      C50693 * C250) *
                     C251 +
                 ((((C8101 + C8102 + C8103) * C121 +
                    (C8104 + C8105 + C8106) * C50790) *
                       C50932 +
                   ((C8107 + C8108 + C8109) * C121 +
                    (C8110 + C8111 + C8112) * C50790) *
                       C50828) *
                      C50693 * C249 -
                  (((C8106 + C8105 + C8104) * C50790 +
                    (C8103 + C8102 + C8101) * C121) *
                       C50828 +
                   ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50790 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C121) *
                       C50932) *
                      C50693 * C248 -
                  (((C7893 * C973 + C7888 * C981 + C7892 * C974 +
                     C50961 * C982 + C7891 * C975 + C50960 * C983) *
                        C50790 +
                    (C7893 * C969 + C7888 * C977 + C7892 * C970 +
                     C50961 * C978 + C7891 * C971 + C50960 * C979) *
                        C121) *
                       C50828 +
                   ((C8112 + C8111 + C8110) * C50790 +
                    (C8109 + C8108 + C8107) * C121) *
                       C50932) *
                      C50693 * C250) *
                     C50664)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                    C50961 * C130 + C7893 * C124 + C7888 * C131) *
                       C121 +
                   (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                    C50961 * C144 + C7893 * C135 + C7888 * C145) *
                       C50790) *
                      C50932 +
                  ((C7891 * C256 + C50960 * C270 + C7892 * C255 +
                    C50961 * C269 + C7893 * C254 + C7888 * C268) *
                       C121 +
                   (C7891 * C266 + C50960 * C286 + C7892 * C265 +
                    C50961 * C285 + C7893 * C264 + C7888 * C284) *
                       C50790) *
                      C50828) *
                     C50693 * C50677 * C113 -
                 (((C7893 * C263 + C7888 * C283 + C7892 * C264 + C50961 * C284 +
                    C7891 * C265 + C50960 * C285) *
                       C50790 +
                   (C7893 * C253 + C7888 * C267 + C7892 * C254 + C50961 * C268 +
                    C7891 * C255 + C50960 * C269) *
                       C121) *
                      C50828 +
                  ((C7893 * C136 + C7888 * C146 + C7892 * C135 + C50961 * C145 +
                    C7891 * C134 + C50960 * C144) *
                       C50790 +
                   (C7893 * C125 + C7888 * C132 + C7892 * C124 + C50961 * C131 +
                    C7891 * C123 + C50960 * C130) *
                       C121) *
                      C50932) *
                     C50693 * C50677 * C114 +
                 (((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                    C50961 * C132 + C7893 * C126 + C7888 * C138) *
                       C121 +
                   (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                    C50961 * C146 + C7893 * C137 + C7888 * C147) *
                       C50790) *
                      C50932 +
                  ((C7891 * C254 + C50960 * C268 + C7892 * C253 +
                    C50961 * C267 + C7893 * C261 + C7888 * C279) *
                       C121 +
                   (C7891 * C264 + C50960 * C284 + C7892 * C263 +
                    C50961 * C283 + C7893 * C280 + C7888 * C291) *
                       C50790) *
                      C50828) *
                     C50693 * C50677 * C115 -
                 (((C7893 * C538 + C7888 * C540 + C7892 * C280 + C50961 * C291 +
                    C7891 * C263 + C50960 * C283) *
                       C50790 +
                   (C7893 * C537 + C7888 * C539 + C7892 * C261 + C50961 * C279 +
                    C7891 * C253 + C50960 * C267) *
                       C121) *
                      C50828 +
                  ((C7893 * C140 + C7888 * C148 + C7892 * C137 + C50961 * C147 +
                    C7891 * C136 + C50960 * C146) *
                       C50790 +
                   (C7893 * C127 + C7888 * C139 + C7892 * C126 + C50961 * C138 +
                    C7891 * C125 + C50960 * C132) *
                       C121) *
                      C50932) *
                     C50693 * C50677 * C116)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C121 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50790) *
                       C50932 +
                   ((C8089 + C8090 + C8091) * C121 +
                    (C8092 + C8093 + C8094) * C50790) *
                       C50828) *
                      C391 -
                  (((C7893 * C786 + C7888 * C792 + C7892 * C785 +
                     C50961 * C791 + C7891 * C784 + C50960 * C790) *
                        C50790 +
                    (C7893 * C777 + C7888 * C782 + C7892 * C776 +
                     C50961 * C781 + C7891 * C775 + C50960 * C780) *
                        C121) *
                       C50828 +
                   ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                     C50961 * C426 + C7891 * C407 + C50960 * C427) *
                        C50790 +
                    (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                     C50961 * C410 + C7891 * C397 + C50960 * C411) *
                        C121) *
                       C50932) *
                      C392 +
                  (((C7891 * C398 + C50960 * C412 + C7892 * C399 +
                     C50961 * C413 + C7893 * C400 + C7888 * C414) *
                        C121 +
                    (C7891 * C416 + C50960 * C428 + C7892 * C417 +
                     C50961 * C429 + C7893 * C418 + C7888 * C430) *
                        C50790) *
                       C50932 +
                   ((C7891 * C1086 + C50960 * C1094 + C7892 * C1085 +
                     C50961 * C1093 + C7893 * C1084 + C7888 * C1092) *
                        C121 +
                    (C7891 * C1090 + C50960 * C1098 + C7892 * C1089 +
                     C50961 * C1097 + C7893 * C1088 + C7888 * C1096) *
                        C50790) *
                       C50828) *
                      C393) *
                     C50677 * C251 +
                 ((((C7891 * C396 + C50960 * C410 + C7892 * C395 +
                     C50961 * C409 + C7893 * C394 + C7888 * C408) *
                        C121 +
                    (C7891 * C406 + C50960 * C426 + C7892 * C405 +
                     C50961 * C425 + C7893 * C404 + C7888 * C424) *
                        C50790) *
                       C50932 +
                   ((C7891 * C776 + C50960 * C781 + C7892 * C777 +
                     C50961 * C782 + C7893 * C778 + C7888 * C783) *
                        C121 +
                    (C7891 * C785 + C50960 * C791 + C7892 * C786 +
                     C50961 * C792 + C7893 * C787 + C7888 * C793) *
                        C50790) *
                       C50828) *
                      C392 -
                  (((C8106 + C8105 + C8104) * C50790 +
                    (C8103 + C8102 + C8101) * C121) *
                       C50828 +
                   ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50790 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C121) *
                       C50932) *
                      C391 -
                  (((C7893 * C1087 + C7888 * C1095 + C7892 * C1088 +
                     C50961 * C1096 + C7891 * C1089 + C50960 * C1097) *
                        C50790 +
                    (C7893 * C1083 + C7888 * C1091 + C7892 * C1084 +
                     C50961 * C1092 + C7891 * C1085 + C50960 * C1093) *
                        C121) *
                       C50828 +
                   ((C7893 * C419 + C7888 * C431 + C7892 * C418 +
                     C50961 * C430 + C7891 * C417 + C50960 * C429) *
                        C50790 +
                    (C7893 * C401 + C7888 * C415 + C7892 * C400 +
                     C50961 * C414 + C7891 * C399 + C50960 * C413) *
                        C121) *
                       C50932) *
                      C393) *
                     C50677 * C50664)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C121 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50790) *
                       C50932 +
                   ((C8089 + C8090 + C8091) * C121 +
                    (C8092 + C8093 + C8094) * C50790) *
                       C50828) *
                      C50920 -
                  (((C7893 * C786 + C7888 * C792 + C7892 * C785 +
                     C50961 * C791 + C7891 * C784 + C50960 * C790) *
                        C50790 +
                    (C7893 * C777 + C7888 * C782 + C7892 * C776 +
                     C50961 * C781 + C7891 * C775 + C50960 * C780) *
                        C121) *
                       C50828 +
                   ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                     C50961 * C426 + C7891 * C407 + C50960 * C427) *
                        C50790 +
                    (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                     C50961 * C410 + C7891 * C397 + C50960 * C411) *
                        C121) *
                       C50932) *
                      C50757) *
                     C50677 * C50962 +
                 ((((C7891 * C396 + C50960 * C410 + C7892 * C395 +
                     C50961 * C409 + C7893 * C394 + C7888 * C408) *
                        C121 +
                    (C7891 * C406 + C50960 * C426 + C7892 * C405 +
                     C50961 * C425 + C7893 * C404 + C7888 * C424) *
                        C50790) *
                       C50932 +
                   ((C7891 * C776 + C50960 * C781 + C7892 * C777 +
                     C50961 * C782 + C7893 * C778 + C7888 * C783) *
                        C121 +
                    (C7891 * C785 + C50960 * C791 + C7892 * C786 +
                     C50961 * C792 + C7893 * C787 + C7888 * C793) *
                        C50790) *
                       C50828) *
                      C50757 -
                  (((C8106 + C8105 + C8104) * C50790 +
                    (C8103 + C8102 + C8101) * C121) *
                       C50828 +
                   ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50790 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C121) *
                       C50932) *
                      C50920) *
                     C50677 * C50963 +
                 ((((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                     C50961 * C132 + C7893 * C126 + C7888 * C138) *
                        C121 +
                    (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                     C50961 * C146 + C7893 * C137 + C7888 * C147) *
                        C50790) *
                       C50932 +
                   ((C8417 + C8418 + C8419) * C121 +
                    (C8420 + C8421 + C8422) * C50790) *
                       C50828) *
                      C50920 -
                  (((C7893 * C788 + C7888 * C794 + C7892 * C787 +
                     C50961 * C793 + C7891 * C786 + C50960 * C792) *
                        C50790 +
                    (C7893 * C779 + C7888 * C789 + C7892 * C778 +
                     C50961 * C783 + C7891 * C777 + C50960 * C782) *
                        C121) *
                       C50828 +
                   ((C7893 * C421 + C7888 * C432 + C7892 * C404 +
                     C50961 * C424 + C7891 * C405 + C50960 * C425) *
                        C50790 +
                    (C7893 * C402 + C7888 * C420 + C7892 * C394 +
                     C50961 * C408 + C7891 * C395 + C50960 * C409) *
                        C121) *
                       C50932) *
                      C50757) *
                     C50677 * C536)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                    C50961 * C130 + C7893 * C124 + C7888 * C131) *
                       C121 +
                   (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                    C50961 * C144 + C7893 * C135 + C7888 * C145) *
                       C50790) *
                      C50932 +
                  ((C7891 * C256 + C50960 * C270 + C7892 * C255 +
                    C50961 * C269 + C7893 * C254 + C7888 * C268) *
                       C121 +
                   (C7891 * C266 + C50960 * C286 + C7892 * C265 +
                    C50961 * C285 + C7893 * C264 + C7888 * C284) *
                       C50790) *
                      C50828) *
                     C50693 * C50677 * C113 -
                 (((C7893 * C263 + C7888 * C283 + C7892 * C264 + C50961 * C284 +
                    C7891 * C265 + C50960 * C285) *
                       C50790 +
                   (C7893 * C253 + C7888 * C267 + C7892 * C254 + C50961 * C268 +
                    C7891 * C255 + C50960 * C269) *
                       C121) *
                      C50828 +
                  ((C7893 * C136 + C7888 * C146 + C7892 * C135 + C50961 * C145 +
                    C7891 * C134 + C50960 * C144) *
                       C50790 +
                   (C7893 * C125 + C7888 * C132 + C7892 * C124 + C50961 * C131 +
                    C7891 * C123 + C50960 * C130) *
                       C121) *
                      C50932) *
                     C50693 * C50677 * C114 +
                 (((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                    C50961 * C132 + C7893 * C126 + C7888 * C138) *
                       C121 +
                   (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                    C50961 * C146 + C7893 * C137 + C7888 * C147) *
                       C50790) *
                      C50932 +
                  ((C7891 * C254 + C50960 * C268 + C7892 * C253 +
                    C50961 * C267 + C7893 * C261 + C7888 * C279) *
                       C121 +
                   (C7891 * C264 + C50960 * C284 + C7892 * C263 +
                    C50961 * C283 + C7893 * C280 + C7888 * C291) *
                       C50790) *
                      C50828) *
                     C50693 * C50677 * C115 -
                 (((C7893 * C538 + C7888 * C540 + C7892 * C280 + C50961 * C291 +
                    C7891 * C263 + C50960 * C283) *
                       C50790 +
                   (C7893 * C537 + C7888 * C539 + C7892 * C261 + C50961 * C279 +
                    C7891 * C253 + C50960 * C267) *
                       C121) *
                      C50828 +
                  ((C7893 * C140 + C7888 * C148 + C7892 * C137 + C50961 * C147 +
                    C7891 * C136 + C50960 * C146) *
                       C50790 +
                   (C7893 * C127 + C7888 * C139 + C7892 * C126 + C50961 * C138 +
                    C7891 * C125 + C50960 * C132) *
                       C121) *
                      C50932) *
                     C50693 * C50677 * C116)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C121 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50790) *
                       C50932 +
                   ((C8089 + C8090 + C8091) * C121 +
                    (C8092 + C8093 + C8094) * C50790) *
                       C50828) *
                      C50693 * C248 -
                  (((C8095 + C8096 + C8097) * C50790 +
                    (C8098 + C8099 + C8100) * C121) *
                       C50828 +
                   ((C8094 + C8093 + C8092) * C50790 +
                    (C8091 + C8090 + C8089) * C121) *
                       C50932) *
                      C50693 * C249 +
                  (((C8100 + C8099 + C8098) * C121 +
                    (C8097 + C8096 + C8095) * C50790) *
                       C50932 +
                   ((C7891 * C972 + C50960 * C980 + C7892 * C971 +
                     C50961 * C979 + C7893 * C970 + C7888 * C978) *
                        C121 +
                    (C7891 * C976 + C50960 * C984 + C7892 * C975 +
                     C50961 * C983 + C7893 * C974 + C7888 * C982) *
                        C50790) *
                       C50828) *
                      C50693 * C250) *
                     C251 +
                 ((((C8101 + C8102 + C8103) * C121 +
                    (C8104 + C8105 + C8106) * C50790) *
                       C50932 +
                   ((C8107 + C8108 + C8109) * C121 +
                    (C8110 + C8111 + C8112) * C50790) *
                       C50828) *
                      C50693 * C249 -
                  (((C8106 + C8105 + C8104) * C50790 +
                    (C8103 + C8102 + C8101) * C121) *
                       C50828 +
                   ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50790 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C121) *
                       C50932) *
                      C50693 * C248 -
                  (((C7893 * C973 + C7888 * C981 + C7892 * C974 +
                     C50961 * C982 + C7891 * C975 + C50960 * C983) *
                        C50790 +
                    (C7893 * C969 + C7888 * C977 + C7892 * C970 +
                     C50961 * C978 + C7891 * C971 + C50960 * C979) *
                        C121) *
                       C50828 +
                   ((C8112 + C8111 + C8110) * C50790 +
                    (C8109 + C8108 + C8107) * C121) *
                       C50932) *
                      C50693 * C250) *
                     C50664)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C121 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50790) *
                       C50932 +
                   ((C8089 + C8090 + C8091) * C121 +
                    (C8092 + C8093 + C8094) * C50790) *
                       C50828) *
                      C50693 * C50964 -
                  (((C8095 + C8096 + C8097) * C50790 +
                    (C8098 + C8099 + C8100) * C121) *
                       C50828 +
                   ((C8094 + C8093 + C8092) * C50790 +
                    (C8091 + C8090 + C8089) * C121) *
                       C50932) *
                      C50693 * C50965 +
                  (((C8100 + C8099 + C8098) * C121 +
                    (C8097 + C8096 + C8095) * C50790) *
                       C50932 +
                   ((C9055 + C9056 + C9057) * C121 +
                    (C9058 + C9059 + C9060) * C50790) *
                       C50828) *
                      C50693 * C1199) *
                     C50911 +
                 ((((C8101 + C8102 + C8103) * C121 +
                    (C8104 + C8105 + C8106) * C50790) *
                       C50932 +
                   ((C8107 + C8108 + C8109) * C121 +
                    (C8110 + C8111 + C8112) * C50790) *
                       C50828) *
                      C50693 * C50965 -
                  (((C8106 + C8105 + C8104) * C50790 +
                    (C8103 + C8102 + C8101) * C121) *
                       C50828 +
                   ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50790 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C121) *
                       C50932) *
                      C50693 * C50964 -
                  (((C7893 * C973 + C7888 * C981 + C7892 * C974 +
                     C50961 * C982 + C7891 * C975 + C50960 * C983) *
                        C50790 +
                    (C7893 * C969 + C7888 * C977 + C7892 * C970 +
                     C50961 * C978 + C7891 * C971 + C50960 * C979) *
                        C121) *
                       C50828 +
                   ((C8112 + C8111 + C8110) * C50790 +
                    (C8109 + C8108 + C8107) * C121) *
                       C50932) *
                      C50693 * C1199) *
                     C50664)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C121 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50790) *
                       C50932 +
                   ((C8089 + C8090 + C8091) * C121 +
                    (C8092 + C8093 + C8094) * C50790) *
                       C50828) *
                      C50920 -
                  (((C8787 + C8788 + C8789) * C50790 +
                    (C8790 + C8791 + C8792) * C121) *
                       C50828 +
                   ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                     C50961 * C426 + C7891 * C407 + C50960 * C427) *
                        C50790 +
                    (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                     C50961 * C410 + C7891 * C397 + C50960 * C411) *
                        C121) *
                       C50932) *
                      C50757) *
                     C50964 +
                 ((((C8792 + C8791 + C8790) * C121 +
                    (C8789 + C8788 + C8787) * C50790) *
                       C50932 +
                   ((C9723 + C9724 + C9725) * C121 +
                    (C9726 + C9727 + C9728) * C50790) *
                       C50828) *
                      C50757 -
                  (((C8095 + C8096 + C8097) * C50790 +
                    (C8098 + C8099 + C8100) * C121) *
                       C50828 +
                   ((C8094 + C8093 + C8092) * C50790 +
                    (C8091 + C8090 + C8089) * C121) *
                       C50932) *
                      C50920) *
                     C50965 +
                 ((((C8100 + C8099 + C8098) * C121 +
                    (C8097 + C8096 + C8095) * C50790) *
                       C50932 +
                   ((C9055 + C9056 + C9057) * C121 +
                    (C9058 + C9059 + C9060) * C50790) *
                       C50828) *
                      C50920 -
                  (((C7893 * C3079 + C7888 * C3083 + C7892 * C3078 +
                     C50961 * C3082 + C7891 * C3077 + C50960 * C3081) *
                        C50790 +
                    (C7893 * C3074 + C7888 * C3080 + C7892 * C3073 +
                     C50961 * C3076 + C7891 * C3072 + C50960 * C3075) *
                        C121) *
                       C50828 +
                   ((C9728 + C9727 + C9726) * C50790 +
                    (C9725 + C9724 + C9723) * C121) *
                       C50932) *
                      C50757) *
                     C1199) *
                C50658) /
               (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
             C7893 * C124 + C7888 * C131) *
                C121 +
            (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
             C7893 * C135 + C7888 * C145) *
                C50790) *
               C50932 +
           ((C8089 + C8090 + C8091) * C121 + (C8092 + C8093 + C8094) * C50790) *
               C50828) *
              C50693 * C964 -
          (((C8095 + C8096 + C8097) * C50790 + (C8098 + C8099 + C8100) * C121) *
               C50828 +
           ((C8094 + C8093 + C8092) * C50790 + (C8091 + C8090 + C8089) * C121) *
               C50932) *
              C50693 * C965 +
          (((C8100 + C8099 + C8098) * C121 + (C8097 + C8096 + C8095) * C50790) *
               C50932 +
           ((C9055 + C9056 + C9057) * C121 + (C9058 + C9059 + C9060) * C50790) *
               C50828) *
              C50693 * C966 -
          (((C7893 * C2317 + C7888 * C2321 + C7892 * C2316 + C50961 * C2320 +
             C7891 * C2315 + C50960 * C2319) *
                C50790 +
            (C7893 * C2312 + C7888 * C2318 + C7892 * C2311 + C50961 * C2314 +
             C7891 * C2310 + C50960 * C2313) *
                C121) *
               C50828 +
           ((C9060 + C9059 + C9058) * C50790 + (C9057 + C9056 + C9055) * C121) *
               C50932) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
              C7893 * C124 + C7888 * C131) *
                 C121 +
             (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
              C7893 * C135 + C7888 * C145) *
                 C50790) *
                C50932 +
            ((C8089 + C8090 + C8091) * C121 +
             (C8092 + C8093 + C8094) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C8095 + C8096 + C8097) * C50790 +
             (C8098 + C8099 + C8100) * C121) *
                C50828 +
            ((C8094 + C8093 + C8092) * C50790 +
             (C8091 + C8090 + C8089) * C121) *
                C50932) *
               C50693 * C50729) *
              C895 +
          ((((C8101 + C8102 + C8103) * C121 +
             (C8104 + C8105 + C8106) * C50790) *
                C50932 +
            ((C8107 + C8108 + C8109) * C121 +
             (C8110 + C8111 + C8112) * C50790) *
                C50828) *
               C50693 * C50729 -
           (((C8106 + C8105 + C8104) * C50790 +
             (C8103 + C8102 + C8101) * C121) *
                C50828 +
            ((C7893 * C136 + C7888 * C146 + C7892 * C135 + C50961 * C145 +
              C7891 * C134 + C50960 * C144) *
                 C50790 +
             (C7893 * C125 + C7888 * C132 + C7892 * C124 + C50961 * C131 +
              C7891 * C123 + C50960 * C130) *
                 C121) *
                C50932) *
               C50693 * C893) *
              C896 +
          ((((C7891 * C124 + C50960 * C131 + C7892 * C125 + C50961 * C132 +
              C7893 * C126 + C7888 * C138) *
                 C121 +
             (C7891 * C135 + C50960 * C145 + C7892 * C136 + C50961 * C146 +
              C7893 * C137 + C7888 * C147) *
                 C50790) *
                C50932 +
            ((C8417 + C8418 + C8419) * C121 +
             (C8420 + C8421 + C8422) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C7893 * C281 + C7888 * C292 + C7892 * C278 + C50961 * C290 +
              C7891 * C277 + C50960 * C289) *
                 C50790 +
             (C7893 * C262 + C7888 * C282 + C7892 * C260 + C50961 * C274 +
              C7891 * C259 + C50960 * C273) *
                 C121) *
                C50828 +
            ((C8422 + C8421 + C8420) * C50790 +
             (C8419 + C8418 + C8417) * C121) *
                C50932) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
              C7893 * C124 + C7888 * C131) *
                 C121 +
             (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
              C7893 * C135 + C7888 * C145) *
                 C50790) *
                C50932 +
            ((C8089 + C8090 + C8091) * C121 +
             (C8092 + C8093 + C8094) * C50790) *
                C50828) *
               C391 -
           (((C8787 + C8788 + C8789) * C50790 +
             (C8790 + C8791 + C8792) * C121) *
                C50828 +
            ((C7893 * C405 + C7888 * C425 + C7892 * C406 + C50961 * C426 +
              C7891 * C407 + C50960 * C427) *
                 C50790 +
             (C7893 * C395 + C7888 * C409 + C7892 * C396 + C50961 * C410 +
              C7891 * C397 + C50960 * C411) *
                 C121) *
                C50932) *
               C392 +
           (((C7891 * C398 + C50960 * C412 + C7892 * C399 + C50961 * C413 +
              C7893 * C400 + C7888 * C414) *
                 C121 +
             (C7891 * C416 + C50960 * C428 + C7892 * C417 + C50961 * C429 +
              C7893 * C418 + C7888 * C430) *
                 C50790) *
                C50932 +
            ((C9219 + C9220 + C9221) * C121 +
             (C9222 + C9223 + C9224) * C50790) *
                C50828) *
               C393) *
              C893 +
          ((((C8792 + C8791 + C8790) * C121 +
             (C8789 + C8788 + C8787) * C50790) *
                C50932 +
            ((C7891 * C1433 + C50960 * C1441 + C7892 * C1432 + C50961 * C1440 +
              C7893 * C1431 + C7888 * C1439) *
                 C121 +
             (C7891 * C1437 + C50960 * C1445 + C7892 * C1436 + C50961 * C1444 +
              C7893 * C1435 + C7888 * C1443) *
                 C50790) *
                C50828) *
               C392 -
           (((C8095 + C8096 + C8097) * C50790 +
             (C8098 + C8099 + C8100) * C121) *
                C50828 +
            ((C8094 + C8093 + C8092) * C50790 +
             (C8091 + C8090 + C8089) * C121) *
                C50932) *
               C391 -
           (((C7893 * C2557 + C7888 * C2561 + C7892 * C2556 + C50961 * C2560 +
              C7891 * C2555 + C50960 * C2559) *
                 C50790 +
             (C7893 * C2552 + C7888 * C2558 + C7892 * C2551 + C50961 * C2554 +
              C7891 * C2550 + C50960 * C2553) *
                 C121) *
                C50828 +
            ((C9224 + C9223 + C9222) * C50790 +
             (C9221 + C9220 + C9219) * C121) *
                C50932) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                      C50961 * C130 + C7893 * C124 + C7888 * C131) *
                         C121 +
                     (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                      C50961 * C144 + C7893 * C135 + C7888 * C145) *
                         C50790) *
                        C50932 +
                    ((C8089 + C8090 + C8091) * C121 +
                     (C8092 + C8093 + C8094) * C50790) *
                        C50828) *
                       C50920 -
                   (((C8787 + C8788 + C8789) * C50790 +
                     (C8790 + C8791 + C8792) * C121) *
                        C50828 +
                    ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                      C50961 * C426 + C7891 * C407 + C50960 * C427) *
                         C50790 +
                     (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                      C50961 * C410 + C7891 * C397 + C50960 * C411) *
                         C121) *
                        C50932) *
                       C50757) *
                      C893 +
                  ((((C8792 + C8791 + C8790) * C121 +
                     (C8789 + C8788 + C8787) * C50790) *
                        C50932 +
                    ((C7891 * C1433 + C50960 * C1441 + C7892 * C1432 +
                      C50961 * C1440 + C7893 * C1431 + C7888 * C1439) *
                         C121 +
                     (C7891 * C1437 + C50960 * C1445 + C7892 * C1436 +
                      C50961 * C1444 + C7893 * C1435 + C7888 * C1443) *
                         C50790) *
                        C50828) *
                       C50757 -
                   (((C8095 + C8096 + C8097) * C50790 +
                     (C8098 + C8099 + C8100) * C121) *
                        C50828 +
                    ((C8094 + C8093 + C8092) * C50790 +
                     (C8091 + C8090 + C8089) * C121) *
                        C50932) *
                       C50920) *
                      C50729) *
                     C50911 +
                 (((((C7891 * C396 + C50960 * C410 + C7892 * C395 +
                      C50961 * C409 + C7893 * C394 + C7888 * C408) *
                         C121 +
                     (C7891 * C406 + C50960 * C426 + C7892 * C405 +
                      C50961 * C425 + C7893 * C404 + C7888 * C424) *
                         C50790) *
                        C50932 +
                    ((C8793 + C8794 + C8795) * C121 +
                     (C8796 + C8797 + C8798) * C50790) *
                        C50828) *
                       C50757 -
                   (((C8106 + C8105 + C8104) * C50790 +
                     (C8103 + C8102 + C8101) * C121) *
                        C50828 +
                    ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                      C50961 * C145 + C7891 * C134 + C50960 * C144) *
                         C50790 +
                     (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                      C50961 * C131 + C7891 * C123 + C50960 * C130) *
                         C121) *
                        C50932) *
                       C50920) *
                      C893 +
                  ((((C8101 + C8102 + C8103) * C121 +
                     (C8104 + C8105 + C8106) * C50790) *
                        C50932 +
                    ((C8107 + C8108 + C8109) * C121 +
                     (C8110 + C8111 + C8112) * C50790) *
                        C50828) *
                       C50920 -
                   (((C7893 * C1434 + C7888 * C1442 + C7892 * C1435 +
                      C50961 * C1443 + C7891 * C1436 + C50960 * C1444) *
                         C50790 +
                     (C7893 * C1430 + C7888 * C1438 + C7892 * C1431 +
                      C50961 * C1439 + C7891 * C1432 + C50960 * C1440) *
                         C121) *
                        C50828 +
                    ((C8798 + C8797 + C8796) * C50790 +
                     (C8795 + C8794 + C8793) * C121) *
                        C50932) *
                       C50757) *
                      C50729) *
                     C50664)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
              C7893 * C124 + C7888 * C131) *
                 C121 +
             (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
              C7893 * C135 + C7888 * C145) *
                 C50790) *
                C50932 +
            ((C8089 + C8090 + C8091) * C121 +
             (C8092 + C8093 + C8094) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C8095 + C8096 + C8097) * C50790 +
             (C8098 + C8099 + C8100) * C121) *
                C50828 +
            ((C8094 + C8093 + C8092) * C50790 +
             (C8091 + C8090 + C8089) * C121) *
                C50932) *
               C50693 * C50729) *
              C895 +
          ((((C8101 + C8102 + C8103) * C121 +
             (C8104 + C8105 + C8106) * C50790) *
                C50932 +
            ((C8107 + C8108 + C8109) * C121 +
             (C8110 + C8111 + C8112) * C50790) *
                C50828) *
               C50693 * C50729 -
           (((C8106 + C8105 + C8104) * C50790 +
             (C8103 + C8102 + C8101) * C121) *
                C50828 +
            ((C7893 * C136 + C7888 * C146 + C7892 * C135 + C50961 * C145 +
              C7891 * C134 + C50960 * C144) *
                 C50790 +
             (C7893 * C125 + C7888 * C132 + C7892 * C124 + C50961 * C131 +
              C7891 * C123 + C50960 * C130) *
                 C121) *
                C50932) *
               C50693 * C893) *
              C896 +
          ((((C7891 * C124 + C50960 * C131 + C7892 * C125 + C50961 * C132 +
              C7893 * C126 + C7888 * C138) *
                 C121 +
             (C7891 * C135 + C50960 * C145 + C7892 * C136 + C50961 * C146 +
              C7893 * C137 + C7888 * C147) *
                 C50790) *
                C50932 +
            ((C8417 + C8418 + C8419) * C121 +
             (C8420 + C8421 + C8422) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C7893 * C281 + C7888 * C292 + C7892 * C278 + C50961 * C290 +
              C7891 * C277 + C50960 * C289) *
                 C50790 +
             (C7893 * C262 + C7888 * C282 + C7892 * C260 + C50961 * C274 +
              C7891 * C259 + C50960 * C273) *
                 C121) *
                C50828 +
            ((C8422 + C8421 + C8420) * C50790 +
             (C8419 + C8418 + C8417) * C121) *
                C50932) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
             C7893 * C124 + C7888 * C131) *
                C121 +
            (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
             C7893 * C135 + C7888 * C145) *
                C50790) *
               C50932 +
           ((C8089 + C8090 + C8091) * C121 + (C8092 + C8093 + C8094) * C50790) *
               C50828) *
              C50693 * C964 -
          (((C8095 + C8096 + C8097) * C50790 + (C8098 + C8099 + C8100) * C121) *
               C50828 +
           ((C8094 + C8093 + C8092) * C50790 + (C8091 + C8090 + C8089) * C121) *
               C50932) *
              C50693 * C965 +
          (((C8100 + C8099 + C8098) * C121 + (C8097 + C8096 + C8095) * C50790) *
               C50932 +
           ((C9055 + C9056 + C9057) * C121 + (C9058 + C9059 + C9060) * C50790) *
               C50828) *
              C50693 * C966 -
          (((C7893 * C2317 + C7888 * C2321 + C7892 * C2316 + C50961 * C2320 +
             C7891 * C2315 + C50960 * C2319) *
                C50790 +
            (C7893 * C2312 + C7888 * C2318 + C7892 * C2311 + C50961 * C2314 +
             C7891 * C2310 + C50960 * C2313) *
                C121) *
               C50828 +
           ((C9060 + C9059 + C9058) * C50790 + (C9057 + C9056 + C9055) * C121) *
               C50932) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[10] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                       C50961 * C130 + C7893 * C124 + C7888 * C131) *
                          C121 +
                      (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                       C50961 * C144 + C7893 * C135 + C7888 * C145) *
                          C50790) *
                         C50932 +
                     ((C8089 + C8090 + C8091) * C121 +
                      (C8092 + C8093 + C8094) * C50790) *
                         C50828) *
                        C1544 -
                    (((C8787 + C8788 + C8789) * C50790 +
                      (C8790 + C8791 + C8792) * C121) *
                         C50828 +
                     ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                       C50961 * C426 + C7891 * C407 + C50960 * C427) *
                          C50790 +
                      (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                       C50961 * C410 + C7891 * C397 + C50960 * C411) *
                          C121) *
                         C50932) *
                        C50757) *
                       C50919 +
                   ((((C8792 + C8791 + C8790) * C121 +
                      (C8789 + C8788 + C8787) * C50790) *
                         C50932 +
                     ((C9723 + C9724 + C9725) * C121 +
                      (C9726 + C9727 + C9728) * C50790) *
                         C50828) *
                        C50757 -
                    (((C8095 + C8096 + C8097) * C50790 +
                      (C8098 + C8099 + C8100) * C121) *
                         C50828 +
                     ((C8094 + C8093 + C8092) * C50790 +
                      (C8091 + C8090 + C8089) * C121) *
                         C50932) *
                        C1544) *
                       C50729) *
                      C50911 +
                  (((((C7891 * C396 + C50960 * C410 + C7892 * C395 +
                       C50961 * C409 + C7893 * C394 + C7888 * C408) *
                          C121 +
                      (C7891 * C406 + C50960 * C426 + C7892 * C405 +
                       C50961 * C425 + C7893 * C404 + C7888 * C424) *
                          C50790) *
                         C50932 +
                     ((C8793 + C8794 + C8795) * C121 +
                      (C8796 + C8797 + C8798) * C50790) *
                         C50828) *
                        C50757 -
                    (((C8106 + C8105 + C8104) * C50790 +
                      (C8103 + C8102 + C8101) * C121) *
                         C50828 +
                     ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                       C50961 * C145 + C7891 * C134 + C50960 * C144) *
                          C50790 +
                      (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                       C50961 * C131 + C7891 * C123 + C50960 * C130) *
                          C121) *
                         C50932) *
                        C1544) *
                       C50919 +
                   ((((C8101 + C8102 + C8103) * C121 +
                      (C8104 + C8105 + C8106) * C50790) *
                         C50932 +
                     ((C8107 + C8108 + C8109) * C121 +
                      (C8110 + C8111 + C8112) * C50790) *
                         C50828) *
                        C1544 -
                    (((C7893 * C1434 + C7888 * C1442 + C7892 * C1435 +
                       C50961 * C1443 + C7891 * C1436 + C50960 * C1444) *
                          C50790 +
                      (C7893 * C1430 + C7888 * C1438 + C7892 * C1431 +
                       C50961 * C1439 + C7891 * C1432 + C50960 * C1440) *
                          C121) *
                         C50828 +
                     ((C8798 + C8797 + C8796) * C50790 +
                      (C8795 + C8794 + C8793) * C121) *
                         C50932) *
                        C50757) *
                       C50729) *
                      C50664)) /
                (p * q * std::sqrt(p + q));
    d2ee[11] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                      C50961 * C130 + C7893 * C124 + C7888 * C131) *
                         C121 +
                     (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                      C50961 * C144 + C7893 * C135 + C7888 * C145) *
                         C50790) *
                        C50932 +
                    ((C8089 + C8090 + C8091) * C121 +
                     (C8092 + C8093 + C8094) * C50790) *
                        C50828) *
                       C50966 -
                   (((C8787 + C8788 + C8789) * C50790 +
                     (C8790 + C8791 + C8792) * C121) *
                        C50828 +
                    ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                      C50961 * C426 + C7891 * C407 + C50960 * C427) *
                         C50790 +
                     (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                      C50961 * C410 + C7891 * C397 + C50960 * C411) *
                         C121) *
                        C50932) *
                       C50967 +
                   (((C7891 * C398 + C50960 * C412 + C7892 * C399 +
                      C50961 * C413 + C7893 * C400 + C7888 * C414) *
                         C121 +
                     (C7891 * C416 + C50960 * C428 + C7892 * C417 +
                      C50961 * C429 + C7893 * C418 + C7888 * C430) *
                         C50790) *
                        C50932 +
                    ((C9219 + C9220 + C9221) * C121 +
                     (C9222 + C9223 + C9224) * C50790) *
                        C50828) *
                       C1960) *
                      C50919 +
                  ((((C8792 + C8791 + C8790) * C121 +
                     (C8789 + C8788 + C8787) * C50790) *
                        C50932 +
                    ((C9723 + C9724 + C9725) * C121 +
                     (C9726 + C9727 + C9728) * C50790) *
                        C50828) *
                       C50967 -
                   (((C8095 + C8096 + C8097) * C50790 +
                     (C8098 + C8099 + C8100) * C121) *
                        C50828 +
                    ((C8094 + C8093 + C8092) * C50790 +
                     (C8091 + C8090 + C8089) * C121) *
                        C50932) *
                       C50966 -
                   (((C7893 * C2557 + C7888 * C2561 + C7892 * C2556 +
                      C50961 * C2560 + C7891 * C2555 + C50960 * C2559) *
                         C50790 +
                     (C7893 * C2552 + C7888 * C2558 + C7892 * C2551 +
                      C50961 * C2554 + C7891 * C2550 + C50960 * C2553) *
                         C121) *
                        C50828 +
                    ((C9224 + C9223 + C9222) * C50790 +
                     (C9221 + C9220 + C9219) * C121) *
                        C50932) *
                       C1960) *
                      C50729) *
                 C50658) /
                (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
              C7893 * C124 + C7888 * C131) *
                 C121 +
             (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
              C7893 * C135 + C7888 * C145) *
                 C50790) *
                C50932 +
            ((C8089 + C8090 + C8091) * C121 +
             (C8092 + C8093 + C8094) * C50790) *
                C50828) *
               C1544 -
           (((C8787 + C8788 + C8789) * C50790 +
             (C8790 + C8791 + C8792) * C121) *
                C50828 +
            ((C7893 * C405 + C7888 * C425 + C7892 * C406 + C50961 * C426 +
              C7891 * C407 + C50960 * C427) *
                 C50790 +
             (C7893 * C395 + C7888 * C409 + C7892 * C396 + C50961 * C410 +
              C7891 * C397 + C50960 * C411) *
                 C121) *
                C50932) *
               C50757) *
              C248 +
          ((((C8792 + C8791 + C8790) * C121 +
             (C8789 + C8788 + C8787) * C50790) *
                C50932 +
            ((C9723 + C9724 + C9725) * C121 +
             (C9726 + C9727 + C9728) * C50790) *
                C50828) *
               C50757 -
           (((C8095 + C8096 + C8097) * C50790 +
             (C8098 + C8099 + C8100) * C121) *
                C50828 +
            ((C8094 + C8093 + C8092) * C50790 +
             (C8091 + C8090 + C8089) * C121) *
                C50932) *
               C1544) *
              C249 +
          ((((C8100 + C8099 + C8098) * C121 +
             (C8097 + C8096 + C8095) * C50790) *
                C50932 +
            ((C9055 + C9056 + C9057) * C121 +
             (C9058 + C9059 + C9060) * C50790) *
                C50828) *
               C1544 -
           (((C7893 * C3079 + C7888 * C3083 + C7892 * C3078 + C50961 * C3082 +
              C7891 * C3077 + C50960 * C3081) *
                 C50790 +
             (C7893 * C3074 + C7888 * C3080 + C7892 * C3073 + C50961 * C3076 +
              C7891 * C3072 + C50960 * C3075) *
                 C121) *
                C50828 +
            ((C9728 + C9727 + C9726) * C50790 +
             (C9725 + C9724 + C9723) * C121) *
                C50932) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
              C7893 * C124 + C7888 * C131) *
                 C121 +
             (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
              C7893 * C135 + C7888 * C145) *
                 C50790) *
                C50932 +
            ((C8089 + C8090 + C8091) * C121 +
             (C8092 + C8093 + C8094) * C50790) *
                C50828) *
               C1544 -
           (((C8787 + C8788 + C8789) * C50790 +
             (C8790 + C8791 + C8792) * C121) *
                C50828 +
            ((C7893 * C405 + C7888 * C425 + C7892 * C406 + C50961 * C426 +
              C7891 * C407 + C50960 * C427) *
                 C50790 +
             (C7893 * C395 + C7888 * C409 + C7892 * C396 + C50961 * C410 +
              C7891 * C397 + C50960 * C411) *
                 C121) *
                C50932) *
               C50757) *
              C50677 * C895 +
          ((((C7891 * C396 + C50960 * C410 + C7892 * C395 + C50961 * C409 +
              C7893 * C394 + C7888 * C408) *
                 C121 +
             (C7891 * C406 + C50960 * C426 + C7892 * C405 + C50961 * C425 +
              C7893 * C404 + C7888 * C424) *
                 C50790) *
                C50932 +
            ((C8793 + C8794 + C8795) * C121 +
             (C8796 + C8797 + C8798) * C50790) *
                C50828) *
               C50757 -
           (((C8106 + C8105 + C8104) * C50790 +
             (C8103 + C8102 + C8101) * C121) *
                C50828 +
            ((C7893 * C136 + C7888 * C146 + C7892 * C135 + C50961 * C145 +
              C7891 * C134 + C50960 * C144) *
                 C50790 +
             (C7893 * C125 + C7888 * C132 + C7892 * C124 + C50961 * C131 +
              C7891 * C123 + C50960 * C130) *
                 C121) *
                C50932) *
               C1544) *
              C50677 * C896 +
          ((((C7891 * C124 + C50960 * C131 + C7892 * C125 + C50961 * C132 +
              C7893 * C126 + C7888 * C138) *
                 C121 +
             (C7891 * C135 + C50960 * C145 + C7892 * C136 + C50961 * C146 +
              C7893 * C137 + C7888 * C147) *
                 C50790) *
                C50932 +
            ((C8417 + C8418 + C8419) * C121 +
             (C8420 + C8421 + C8422) * C50790) *
                C50828) *
               C1544 -
           (((C7893 * C788 + C7888 * C794 + C7892 * C787 + C50961 * C793 +
              C7891 * C786 + C50960 * C792) *
                 C50790 +
             (C7893 * C779 + C7888 * C789 + C7892 * C778 + C50961 * C783 +
              C7891 * C777 + C50960 * C782) *
                 C121) *
                C50828 +
            ((C7893 * C421 + C7888 * C432 + C7892 * C404 + C50961 * C424 +
              C7891 * C405 + C50960 * C425) *
                 C50790 +
             (C7893 * C402 + C7888 * C420 + C7892 * C394 + C50961 * C408 +
              C7891 * C395 + C50960 * C409) *
                 C121) *
                C50932) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
             C7893 * C124 + C7888 * C131) *
                C121 +
            (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
             C7893 * C135 + C7888 * C145) *
                C50790) *
               C50932 +
           ((C8089 + C8090 + C8091) * C121 + (C8092 + C8093 + C8094) * C50790) *
               C50828) *
              C1710 -
          (((C8787 + C8788 + C8789) * C50790 + (C8790 + C8791 + C8792) * C121) *
               C50828 +
           ((C7893 * C405 + C7888 * C425 + C7892 * C406 + C50961 * C426 +
             C7891 * C407 + C50960 * C427) *
                C50790 +
            (C7893 * C395 + C7888 * C409 + C7892 * C396 + C50961 * C410 +
             C7891 * C397 + C50960 * C411) *
                C121) *
               C50932) *
              C1711 +
          (((C7891 * C398 + C50960 * C412 + C7892 * C399 + C50961 * C413 +
             C7893 * C400 + C7888 * C414) *
                C121 +
            (C7891 * C416 + C50960 * C428 + C7892 * C417 + C50961 * C429 +
             C7893 * C418 + C7888 * C430) *
                C50790) *
               C50932 +
           ((C9219 + C9220 + C9221) * C121 + (C9222 + C9223 + C9224) * C50790) *
               C50828) *
              C1712 -
          (((C7893 * C5977 + C7888 * C5979 + C7892 * C4488 + C50961 * C4494 +
             C7891 * C4489 + C50960 * C4495) *
                C50790 +
            (C7893 * C5976 + C7888 * C5978 + C7892 * C4482 + C50961 * C4490 +
             C7891 * C4483 + C50960 * C4491) *
                C121) *
               C50828 +
           ((C7893 * C1719 + C7888 * C1727 + C7892 * C1720 + C50961 * C1728 +
             C7891 * C1721 + C50960 * C1729) *
                C50790 +
            (C7893 * C1715 + C7888 * C1723 + C7892 * C1716 + C50961 * C1724 +
             C7891 * C1717 + C50960 * C1725) *
                C121) *
               C50932) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                      C50961 * C130 + C7893 * C124 + C7888 * C131) *
                         C121 +
                     (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                      C50961 * C144 + C7893 * C135 + C7888 * C145) *
                         C50790) *
                        C50932 +
                    ((C8089 + C8090 + C8091) * C121 +
                     (C8092 + C8093 + C8094) * C50790) *
                        C50828) *
                       C50966 -
                   (((C8787 + C8788 + C8789) * C50790 +
                     (C8790 + C8791 + C8792) * C121) *
                        C50828 +
                    ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                      C50961 * C426 + C7891 * C407 + C50960 * C427) *
                         C50790 +
                     (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                      C50961 * C410 + C7891 * C397 + C50960 * C411) *
                         C121) *
                        C50932) *
                       C50967 +
                   (((C7891 * C398 + C50960 * C412 + C7892 * C399 +
                      C50961 * C413 + C7893 * C400 + C7888 * C414) *
                         C121 +
                     (C7891 * C416 + C50960 * C428 + C7892 * C417 +
                      C50961 * C429 + C7893 * C418 + C7888 * C430) *
                         C50790) *
                        C50932 +
                    ((C9219 + C9220 + C9221) * C121 +
                     (C9222 + C9223 + C9224) * C50790) *
                        C50828) *
                       C1960) *
                      C50677 * C50911 +
                  ((((C7891 * C396 + C50960 * C410 + C7892 * C395 +
                      C50961 * C409 + C7893 * C394 + C7888 * C408) *
                         C121 +
                     (C7891 * C406 + C50960 * C426 + C7892 * C405 +
                      C50961 * C425 + C7893 * C404 + C7888 * C424) *
                         C50790) *
                        C50932 +
                    ((C8793 + C8794 + C8795) * C121 +
                     (C8796 + C8797 + C8798) * C50790) *
                        C50828) *
                       C50967 -
                   (((C8106 + C8105 + C8104) * C50790 +
                     (C8103 + C8102 + C8101) * C121) *
                        C50828 +
                    ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                      C50961 * C145 + C7891 * C134 + C50960 * C144) *
                         C50790 +
                     (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                      C50961 * C131 + C7891 * C123 + C50960 * C130) *
                         C121) *
                        C50932) *
                       C50966 -
                   (((C7893 * C1087 + C7888 * C1095 + C7892 * C1088 +
                      C50961 * C1096 + C7891 * C1089 + C50960 * C1097) *
                         C50790 +
                     (C7893 * C1083 + C7888 * C1091 + C7892 * C1084 +
                      C50961 * C1092 + C7891 * C1085 + C50960 * C1093) *
                         C121) *
                        C50828 +
                    ((C7893 * C419 + C7888 * C431 + C7892 * C418 +
                      C50961 * C430 + C7891 * C417 + C50960 * C429) *
                         C50790 +
                     (C7893 * C401 + C7888 * C415 + C7892 * C400 +
                      C50961 * C414 + C7891 * C399 + C50960 * C413) *
                         C121) *
                        C50932) *
                       C1960) *
                      C50677 * C50664)) /
                (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                      C50961 * C130 + C7893 * C124 + C7888 * C131) *
                         C121 +
                     (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                      C50961 * C144 + C7893 * C135 + C7888 * C145) *
                         C50790) *
                        C50932 +
                    ((C8089 + C8090 + C8091) * C121 +
                     (C8092 + C8093 + C8094) * C50790) *
                        C50828) *
                       C1544 -
                   (((C8787 + C8788 + C8789) * C50790 +
                     (C8790 + C8791 + C8792) * C121) *
                        C50828 +
                    ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                      C50961 * C426 + C7891 * C407 + C50960 * C427) *
                         C50790 +
                     (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                      C50961 * C410 + C7891 * C397 + C50960 * C411) *
                         C121) *
                        C50932) *
                       C50757) *
                      C50677 * C895 +
                  ((((C7891 * C396 + C50960 * C410 + C7892 * C395 +
                      C50961 * C409 + C7893 * C394 + C7888 * C408) *
                         C121 +
                     (C7891 * C406 + C50960 * C426 + C7892 * C405 +
                      C50961 * C425 + C7893 * C404 + C7888 * C424) *
                         C50790) *
                        C50932 +
                    ((C8793 + C8794 + C8795) * C121 +
                     (C8796 + C8797 + C8798) * C50790) *
                        C50828) *
                       C50757 -
                   (((C8106 + C8105 + C8104) * C50790 +
                     (C8103 + C8102 + C8101) * C121) *
                        C50828 +
                    ((C7893 * C136 + C7888 * C146 + C7892 * C135 +
                      C50961 * C145 + C7891 * C134 + C50960 * C144) *
                         C50790 +
                     (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                      C50961 * C131 + C7891 * C123 + C50960 * C130) *
                         C121) *
                        C50932) *
                       C1544) *
                      C50677 * C896 +
                  ((((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                      C50961 * C132 + C7893 * C126 + C7888 * C138) *
                         C121 +
                     (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                      C50961 * C146 + C7893 * C137 + C7888 * C147) *
                         C50790) *
                        C50932 +
                    ((C8417 + C8418 + C8419) * C121 +
                     (C8420 + C8421 + C8422) * C50790) *
                        C50828) *
                       C1544 -
                   (((C7893 * C788 + C7888 * C794 + C7892 * C787 +
                      C50961 * C793 + C7891 * C786 + C50960 * C792) *
                         C50790 +
                     (C7893 * C779 + C7888 * C789 + C7892 * C778 +
                      C50961 * C783 + C7891 * C777 + C50960 * C782) *
                         C121) *
                        C50828 +
                    ((C7893 * C421 + C7888 * C432 + C7892 * C404 +
                      C50961 * C424 + C7891 * C405 + C50960 * C425) *
                         C50790 +
                     (C7893 * C402 + C7888 * C420 + C7892 * C394 +
                      C50961 * C408 + C7891 * C395 + C50960 * C409) *
                         C121) *
                        C50932) *
                       C50757) *
                      C50677 * C897)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                      C50961 * C130 + C7893 * C124 + C7888 * C131) *
                         C121 +
                     (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                      C50961 * C144 + C7893 * C135 + C7888 * C145) *
                         C50790) *
                        C50932 +
                    ((C8089 + C8090 + C8091) * C121 +
                     (C8092 + C8093 + C8094) * C50790) *
                        C50828) *
                       C1544 -
                   (((C8787 + C8788 + C8789) * C50790 +
                     (C8790 + C8791 + C8792) * C121) *
                        C50828 +
                    ((C7893 * C405 + C7888 * C425 + C7892 * C406 +
                      C50961 * C426 + C7891 * C407 + C50960 * C427) *
                         C50790 +
                     (C7893 * C395 + C7888 * C409 + C7892 * C396 +
                      C50961 * C410 + C7891 * C397 + C50960 * C411) *
                         C121) *
                        C50932) *
                       C50757) *
                      C248 +
                  ((((C8792 + C8791 + C8790) * C121 +
                     (C8789 + C8788 + C8787) * C50790) *
                        C50932 +
                    ((C9723 + C9724 + C9725) * C121 +
                     (C9726 + C9727 + C9728) * C50790) *
                        C50828) *
                       C50757 -
                   (((C8095 + C8096 + C8097) * C50790 +
                     (C8098 + C8099 + C8100) * C121) *
                        C50828 +
                    ((C8094 + C8093 + C8092) * C50790 +
                     (C8091 + C8090 + C8089) * C121) *
                        C50932) *
                       C1544) *
                      C249 +
                  ((((C8100 + C8099 + C8098) * C121 +
                     (C8097 + C8096 + C8095) * C50790) *
                        C50932 +
                    ((C9055 + C9056 + C9057) * C121 +
                     (C9058 + C9059 + C9060) * C50790) *
                        C50828) *
                       C1544 -
                   (((C7893 * C3079 + C7888 * C3083 + C7892 * C3078 +
                      C50961 * C3082 + C7891 * C3077 + C50960 * C3081) *
                         C50790 +
                     (C7893 * C3074 + C7888 * C3080 + C7892 * C3073 +
                      C50961 * C3076 + C7891 * C3072 + C50960 * C3075) *
                         C121) *
                        C50828 +
                    ((C9728 + C9727 + C9726) * C50790 +
                     (C9725 + C9724 + C9723) * C121) *
                        C50932) *
                       C50757) *
                      C250) *
                 C50658) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             (C3124 + C3123) * C10705 + (C3122 + C3121) * C50854) *
                C50828) *
               C50693 * C50919 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            ((C3121 + C3122) * C50854 + (C3123 + C3124) * C10705 +
             (C2374 + C2373) * C50933 + (C2372 + C2371) * C10704) *
                C50932) *
               C50693 * C50729) *
              C50962 +
          ((((C2383 + C2384) * C10704 + (C2385 + C2386) * C50933 +
             (C3125 + C3126) * C10705 + (C3127 + C3128) * C50854) *
                C50932 +
            ((C2387 + C2388) * C10704 + (C2389 + C2390) * C50933 +
             (C3129 + C3130) * C10705 + (C3131 + C3132) * C50854) *
                C50828) *
               C50693 * C50729 -
           (((C3128 + C3127) * C50854 + (C3126 + C3125) * C10705 +
             (C2386 + C2385) * C50933 + (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C50693 * C50919) *
              C50963 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C10704 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50933 +
             (C5775 + C5776) * C10705 + (C5777 + C5778) * C50854) *
                C50932 +
            ((C2725 + C2726) * C10704 + (C2727 + C2728) * C50933 +
             (C14065 + C14066) * C10705 + (C14067 + C14068) * C50854) *
                C50828) *
               C50693 * C50919 -
           (((C2163 * C1434 + C50633 * C1442 + C2162 * C1435 + C2157 * C1443) *
                 C50854 +
             (C2163 * C1430 + C50633 * C1438 + C2162 * C1431 + C2157 * C1439) *
                 C10705 +
             (C2732 + C2731) * C50933 + (C2730 + C2729) * C10704) *
                C50828 +
            ((C14068 + C14067) * C50854 + (C14066 + C14065) * C10705 +
             (C2728 + C2727) * C50933 + (C2726 + C2725) * C10704) *
                C50932) *
               C50693 * C50729) *
              C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                  C10704 +
              (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                  C50933 +
              (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                 C50932 +
             ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
              C14521 * C10705 + C14522 * C50854) *
                 C50828) *
                C50920 -
            ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
              C14524 * C10704) *
                 C50828 +
             ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
              (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                 C50932) *
                C50757) *
               C50919 +
           (((C14521 * C10704 + C14522 * C50933 + (C3572 + C3573) * C10705 +
              (C3574 + C3575) * C50854) *
                 C50932 +
             ((C3120 + C3119) * C10704 + (C3118 + C3117) * C50933 +
              (C3576 + C3577) * C10705 + (C3578 + C3579) * C50854) *
                 C50828) *
                C50757 -
            ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
              (C2376 + C2375) * C10704) *
                 C50828 +
             (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
              (C2372 + C2371) * C10704) *
                 C50932) *
                C50920) *
               C50729) *
              C251 +
          (((((C5451 + C5452) * C10704 + (C5453 + C5454) * C50933 +
              (C5455 + C5456) * C10705 + (C5457 + C5458) * C50854) *
                 C50932 +
             (C14525 * C10704 + C14526 * C50933 + (C5989 + C5990) * C10705 +
              (C5991 + C5992) * C50854) *
                 C50828) *
                C50757 -
            ((C14527 * C50854 + C14528 * C10705 + (C2386 + C2385) * C50933 +
              (C2384 + C2383) * C10704) *
                 C50828 +
             ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
              (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                  C50933 +
              (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                  C10704) *
                 C50932) *
                C50920) *
               C50919 +
           ((((C2383 + C2384) * C10704 + (C2385 + C2386) * C50933 +
              C14525 * C10705 + C14526 * C50854) *
                 C50932 +
             ((C2387 + C2388) * C10704 + (C2389 + C2390) * C50933 +
              (C3129 + C3130) * C10705 + (C3131 + C3132) * C50854) *
                 C50828) *
                C50920 -
            (((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                  C50854 +
              (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                  C10705 +
              (C3132 + C3131) * C50933 + (C3130 + C3129) * C10704) *
                 C50828 +
             ((C5992 + C5991) * C50854 + (C5990 + C5989) * C10705 +
              C14527 * C50933 + C14528 * C10704) *
                 C50932) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             (C3124 + C3123) * C10705 + (C3122 + C3121) * C50854) *
                C50828) *
               C50693 * C248 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            ((C3121 + C3122) * C50854 + (C3123 + C3124) * C10705 +
             (C2374 + C2373) * C50933 + (C2372 + C2371) * C10704) *
                C50932) *
               C50693 * C249 +
           ((C2395 * C10704 + C2396 * C50933 + (C3120 + C3119) * C10705 +
             (C3118 + C3117) * C50854) *
                C50932 +
            ((C2382 + C2381) * C10704 + (C2380 + C2379) * C50933 +
             (C4086 + C4087) * C10705 + (C4088 + C4089) * C50854) *
                C50828) *
               C50693 * C250) *
              C251 +
          ((((C2383 + C2384) * C10704 + (C2385 + C2386) * C50933 +
             (C3125 + C3126) * C10705 + (C3127 + C3128) * C50854) *
                C50932 +
            ((C2387 + C2388) * C10704 + (C2389 + C2390) * C50933 +
             (C3129 + C3130) * C10705 + (C3131 + C3132) * C50854) *
                C50828) *
               C50693 * C249 -
           (((C3128 + C3127) * C50854 + (C3126 + C3125) * C10705 +
             (C2386 + C2385) * C50933 + (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C50693 * C248 -
           (((C2163 * C3079 + C50633 * C3083 + C2162 * C3078 + C2157 * C3082) *
                 C50854 +
             (C2163 * C3074 + C50633 * C3080 + C2162 * C3073 + C2157 * C3076) *
                 C10705 +
             (C2394 + C2393) * C50933 + (C2392 + C2391) * C10704) *
                C50828 +
            ((C3132 + C3131) * C50854 + (C3130 + C3129) * C10705 +
             C2397 * C50933 + C2398 * C10704) *
                C50932) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C10704 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50933 +
            (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
               C50932 +
           ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
            (C3124 + C3123) * C10705 + (C3122 + C3121) * C50854) *
               C50828) *
              C50693 * C50677 * C113 -
          (((C3128 + C3127) * C50854 + (C3126 + C3125) * C10705 +
            (C2386 + C2385) * C50933 + (C2384 + C2383) * C10704) *
               C50828 +
           ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C50933 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C10704) *
               C50932) *
              C50693 * C50677 * C114 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C10704 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C50933 +
            (C5775 + C5776) * C10705 + (C5777 + C5778) * C50854) *
               C50932 +
           ((C2725 + C2726) * C10704 + (C2727 + C2728) * C50933 +
            (C2162 * C777 + C2157 * C782 + C2163 * C778 + C50633 * C783) *
                C10705 +
            (C2162 * C786 + C2157 * C792 + C2163 * C787 + C50633 * C793) *
                C50854) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C2163 * C788 + C50633 * C794 + C2162 * C787 + C2157 * C793) *
                C50854 +
            (C2163 * C779 + C50633 * C789 + C2162 * C778 + C2157 * C783) *
                C10705 +
            (C2163 * C280 + C50633 * C291 + C2162 * C263 + C2157 * C283) *
                C50933 +
            (C2163 * C261 + C50633 * C279 + C2162 * C253 + C2157 * C267) *
                C10704) *
               C50828 +
           ((C2163 * C421 + C50633 * C432 + C2162 * C404 + C2157 * C424) *
                C50854 +
            (C2163 * C402 + C50633 * C420 + C2162 * C394 + C2157 * C408) *
                C10705 +
            (C2163 * C137 + C50633 * C147 + C2162 * C136 + C2157 * C146) *
                C50933 +
            (C2163 * C126 + C50633 * C138 + C2162 * C125 + C2157 * C132) *
                C10704) *
               C50932) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             (C3124 + C3123) * C10705 + (C3122 + C3121) * C50854) *
                C50828) *
               C391 -
           ((C6399 * C50854 + C6400 * C10705 + (C3121 + C3122) * C50933 +
             (C3123 + C3124) * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C392 +
           ((C5463 * C10704 + C5464 * C50933 + (C5450 + C5449) * C10705 +
             (C5448 + C5447) * C50854) *
                C50932 +
            ((C3572 + C3573) * C10704 + (C3574 + C3575) * C50933 +
             (C6401 + C6402) * C10705 + (C6403 + C6404) * C50854) *
                C50828) *
               C393) *
              C50677 * C251 +
          ((((C5451 + C5452) * C10704 + (C5453 + C5454) * C50933 +
             (C5455 + C5456) * C10705 + (C5457 + C5458) * C50854) *
                C50932 +
            ((C3125 + C3126) * C10704 + (C3127 + C3128) * C50933 +
             (C5989 + C5990) * C10705 + (C5991 + C5992) * C50854) *
                C50828) *
               C392 -
           (((C3128 + C3127) * C50854 + (C3126 + C3125) * C10705 +
             (C2386 + C2385) * C50933 + (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C391 -
           (((C2163 * C5977 + C50633 * C5979 + C2162 * C4488 + C2157 * C4494) *
                 C50854 +
             (C2163 * C5976 + C50633 * C5978 + C2162 * C4482 + C2157 * C4490) *
                 C10705 +
             (C5992 + C5991) * C50933 + (C5990 + C5989) * C10704) *
                C50828 +
            ((C5462 + C5461) * C50854 + (C5460 + C5459) * C10705 +
             C5465 * C50933 + C5466 * C10704) *
                C50932) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             (C3124 + C3123) * C10705 + (C3122 + C3121) * C50854) *
                C50828) *
               C50920 -
           ((C6399 * C50854 + C6400 * C10705 + (C3121 + C3122) * C50933 +
             (C3123 + C3124) * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C50757) *
              C50677 * C50962 +
          ((((C5451 + C5452) * C10704 + (C5453 + C5454) * C50933 +
             (C5455 + C5456) * C10705 + (C5457 + C5458) * C50854) *
                C50932 +
            ((C3125 + C3126) * C10704 + (C3127 + C3128) * C50933 +
             (C5989 + C5990) * C10705 + (C5991 + C5992) * C50854) *
                C50828) *
               C50757 -
           (((C3128 + C3127) * C50854 + (C3126 + C3125) * C10705 +
             (C2386 + C2385) * C50933 + (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C50920) *
              C50677 * C50963 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C10704 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50933 +
             (C5775 + C5776) * C10705 + (C5777 + C5778) * C50854) *
                C50932 +
            ((C2725 + C2726) * C10704 + (C2727 + C2728) * C50933 +
             (C14065 + C14066) * C10705 + (C14067 + C14068) * C50854) *
                C50828) *
               C50920 -
           (((C2163 * C1087 + C50633 * C1095 + C2162 * C1088 + C2157 * C1096) *
                 C50854 +
             (C2163 * C1083 + C50633 * C1091 + C2162 * C1084 + C2157 * C1092) *
                 C10705 +
             (C14068 + C14067) * C50933 + (C14066 + C14065) * C10704) *
                C50828 +
            ((C5782 + C5781) * C50854 + (C5780 + C5779) * C10705 +
             (C5778 + C5777) * C50933 + (C5776 + C5775) * C10704) *
                C50932) *
               C50757) *
              C50677 * C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C10704 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50933 +
            (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
               C50932 +
           ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
            (C3124 + C3123) * C10705 + (C3122 + C3121) * C50854) *
               C50828) *
              C50693 * C50677 * C113 -
          (((C3128 + C3127) * C50854 + (C3126 + C3125) * C10705 +
            (C2386 + C2385) * C50933 + (C2384 + C2383) * C10704) *
               C50828 +
           ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C50933 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C10704) *
               C50932) *
              C50693 * C50677 * C114 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C10704 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C50933 +
            (C5775 + C5776) * C10705 + (C5777 + C5778) * C50854) *
               C50932 +
           ((C2725 + C2726) * C10704 + (C2727 + C2728) * C50933 +
            (C2162 * C777 + C2157 * C782 + C2163 * C778 + C50633 * C783) *
                C10705 +
            (C2162 * C786 + C2157 * C792 + C2163 * C787 + C50633 * C793) *
                C50854) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C2163 * C788 + C50633 * C794 + C2162 * C787 + C2157 * C793) *
                C50854 +
            (C2163 * C779 + C50633 * C789 + C2162 * C778 + C2157 * C783) *
                C10705 +
            (C2163 * C280 + C50633 * C291 + C2162 * C263 + C2157 * C283) *
                C50933 +
            (C2163 * C261 + C50633 * C279 + C2162 * C253 + C2157 * C267) *
                C10704) *
               C50828 +
           ((C2163 * C421 + C50633 * C432 + C2162 * C404 + C2157 * C424) *
                C50854 +
            (C2163 * C402 + C50633 * C420 + C2162 * C394 + C2157 * C408) *
                C10705 +
            (C2163 * C137 + C50633 * C147 + C2162 * C136 + C2157 * C146) *
                C50933 +
            (C2163 * C126 + C50633 * C138 + C2162 * C125 + C2157 * C132) *
                C10704) *
               C50932) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             (C3124 + C3123) * C10705 + (C3122 + C3121) * C50854) *
                C50828) *
               C50693 * C248 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            ((C3121 + C3122) * C50854 + (C3123 + C3124) * C10705 +
             (C2374 + C2373) * C50933 + (C2372 + C2371) * C10704) *
                C50932) *
               C50693 * C249 +
           ((C2395 * C10704 + C2396 * C50933 + (C3120 + C3119) * C10705 +
             (C3118 + C3117) * C50854) *
                C50932 +
            ((C2382 + C2381) * C10704 + (C2380 + C2379) * C50933 +
             (C4086 + C4087) * C10705 + (C4088 + C4089) * C50854) *
                C50828) *
               C50693 * C250) *
              C251 +
          ((((C2383 + C2384) * C10704 + (C2385 + C2386) * C50933 +
             (C3125 + C3126) * C10705 + (C3127 + C3128) * C50854) *
                C50932 +
            ((C2387 + C2388) * C10704 + (C2389 + C2390) * C50933 +
             (C3129 + C3130) * C10705 + (C3131 + C3132) * C50854) *
                C50828) *
               C50693 * C249 -
           (((C3128 + C3127) * C50854 + (C3126 + C3125) * C10705 +
             (C2386 + C2385) * C50933 + (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C50693 * C248 -
           (((C2163 * C3079 + C50633 * C3083 + C2162 * C3078 + C2157 * C3082) *
                 C50854 +
             (C2163 * C3074 + C50633 * C3080 + C2162 * C3073 + C2157 * C3076) *
                 C10705 +
             (C2394 + C2393) * C50933 + (C2392 + C2391) * C10704) *
                C50828 +
            ((C3132 + C3131) * C50854 + (C3130 + C3129) * C10705 +
             C2397 * C50933 + C2398 * C10704) *
                C50932) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C50693 * C50964 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
             (C2372 + C2371) * C10704) *
                C50932) *
               C50693 * C50965 +
           ((C2395 * C10704 + C2396 * C50933 + (C3120 + C3119) * C10705 +
             (C3118 + C3117) * C50854) *
                C50932 +
            ((C2382 + C2381) * C10704 + (C2380 + C2379) * C50933 +
             (C4086 + C4087) * C10705 + (C4088 + C4089) * C50854) *
                C50828) *
               C50693 * C1199) *
              C50911 +
          ((((C2383 + C2384) * C10704 + (C2385 + C2386) * C50933 +
             C14525 * C10705 + C14526 * C50854) *
                C50932 +
            ((C2387 + C2388) * C10704 + (C2389 + C2390) * C50933 +
             (C3129 + C3130) * C10705 + (C3131 + C3132) * C50854) *
                C50828) *
               C50693 * C50965 -
           ((C14527 * C50854 + C14528 * C10705 + (C2386 + C2385) * C50933 +
             (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C50693 * C50964 -
           (((C2163 * C3079 + C50633 * C3083 + C2162 * C3078 + C2157 * C3082) *
                 C50854 +
             (C2163 * C3074 + C50633 * C3080 + C2162 * C3073 + C2157 * C3076) *
                 C10705 +
             (C2394 + C2393) * C50933 + (C2392 + C2391) * C10704) *
                C50828 +
            ((C3132 + C3131) * C50854 + (C3130 + C3129) * C10705 +
             C2397 * C50933 + C2398 * C10704) *
                C50932) *
               C50693 * C1199) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C50920 -
           ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
             C14524 * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C50757) *
              C50964 +
          (((C14521 * C10704 + C14522 * C50933 + C15047 * C10705 +
             C15048 * C50854) *
                C50932 +
            (C15695 * C10704 + C15696 * C50933 + (C3576 + C3577) * C10705 +
             (C3578 + C3579) * C50854) *
                C50828) *
               C50757 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
             (C2372 + C2371) * C10704) *
                C50932) *
               C50920) *
              C50965 +
          (((C2395 * C10704 + C2396 * C50933 + C15695 * C10705 +
             C15696 * C50854) *
                C50932 +
            ((C2382 + C2381) * C10704 + (C2380 + C2379) * C50933 +
             (C4086 + C4087) * C10705 + (C4088 + C4089) * C50854) *
                C50828) *
               C50920 -
           (((C2163 * C3549 + C50633 * C3553 + C2162 * C3550 + C2157 * C3554) *
                 C50854 +
             (C2163 * C3547 + C50633 * C3551 + C2162 * C3548 + C2157 * C3552) *
                 C10705 +
             (C4089 + C4088) * C50933 + (C4087 + C4086) * C10704) *
                C50828 +
            ((C3579 + C3578) * C50854 + (C3577 + C3576) * C10705 +
             C4074 * C50933 + C4075 * C10704) *
                C50932) *
               C50757) *
              C1199) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C10704 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50933 +
            (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
               C50932 +
           ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
            C14521 * C10705 + C14522 * C50854) *
               C50828) *
              C50693 * C964 -
          ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
            (C2376 + C2375) * C10704) *
               C50828 +
           (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
            (C2372 + C2371) * C10704) *
               C50932) *
              C50693 * C965 +
          ((C2395 * C10704 + C2396 * C50933 + (C3120 + C3119) * C10705 +
            (C3118 + C3117) * C50854) *
               C50932 +
           ((C2382 + C2381) * C10704 + (C2380 + C2379) * C50933 +
            (C4086 + C4087) * C10705 + (C4088 + C4089) * C50854) *
               C50828) *
              C50693 * C966 -
          (((C2163 * C4067 + C50633 * C4071 + C2162 * C4068 + C2157 * C4072) *
                C50854 +
            (C2163 * C4065 + C50633 * C4069 + C2162 * C4066 + C2157 * C4070) *
                C10705 +
            (C3400 + C3399) * C50933 + (C3398 + C3397) * C10704) *
               C50828 +
           ((C4089 + C4088) * C50854 + (C4087 + C4086) * C10705 +
            C3385 * C50933 + C3386 * C10704) *
               C50932) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C50693 * C893 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
             (C2372 + C2371) * C10704) *
                C50932) *
               C50693 * C50729) *
              C895 +
          ((((C2383 + C2384) * C10704 + (C2385 + C2386) * C50933 +
             C14525 * C10705 + C14526 * C50854) *
                C50932 +
            ((C2387 + C2388) * C10704 + (C2389 + C2390) * C50933 +
             (C3129 + C3130) * C10705 + (C3131 + C3132) * C50854) *
                C50828) *
               C50693 * C50729 -
           ((C14527 * C50854 + C14528 * C10705 + (C2386 + C2385) * C50933 +
             (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C50693 * C893) *
              C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C10704 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50933 +
             (C5775 + C5776) * C10705 + (C5777 + C5778) * C50854) *
                C50932 +
            ((C2725 + C2726) * C10704 + (C2727 + C2728) * C50933 +
             (C14065 + C14066) * C10705 + (C14067 + C14068) * C50854) *
                C50828) *
               C50693 * C893 -
           (((C2163 * C1434 + C50633 * C1442 + C2162 * C1435 + C2157 * C1443) *
                 C50854 +
             (C2163 * C1430 + C50633 * C1438 + C2162 * C1431 + C2157 * C1439) *
                 C10705 +
             (C2732 + C2731) * C50933 + (C2730 + C2729) * C10704) *
                C50828 +
            ((C14068 + C14067) * C50854 + (C14066 + C14065) * C10705 +
             (C2728 + C2727) * C50933 + (C2726 + C2725) * C10704) *
                C50932) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C391 -
           ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
             C14524 * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C392 +
           ((C5463 * C10704 + C5464 * C50933 + (C5450 + C5449) * C10705 +
             (C5448 + C5447) * C50854) *
                C50932 +
            (C15047 * C10704 + C15048 * C50933 + (C6401 + C6402) * C10705 +
             (C6403 + C6404) * C50854) *
                C50828) *
               C393) *
              C893 +
          (((C14521 * C10704 + C14522 * C50933 + C15047 * C10705 +
             C15048 * C50854) *
                C50932 +
            ((C3120 + C3119) * C10704 + (C3118 + C3117) * C50933 +
             (C3576 + C3577) * C10705 + (C3578 + C3579) * C50854) *
                C50828) *
               C392 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
             (C2372 + C2371) * C10704) *
                C50932) *
               C391 -
           (((C2163 * C4484 + C50633 * C4492 + C2162 * C4485 + C2157 * C4493) *
                 C50854 +
             (C2163 * C4480 + C50633 * C4486 + C2162 * C4481 + C2157 * C4487) *
                 C10705 +
             (C3579 + C3578) * C50933 + (C3577 + C3576) * C10704) *
                C50828 +
            ((C6404 + C6403) * C50854 + (C6402 + C6401) * C10705 +
             C6399 * C50933 + C6400 * C10704) *
                C50932) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                  C10704 +
              (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                  C50933 +
              (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                 C50932 +
             ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
              C14521 * C10705 + C14522 * C50854) *
                 C50828) *
                C50920 -
            ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
              C14524 * C10704) *
                 C50828 +
             ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
              (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                 C50932) *
                C50757) *
               C893 +
           (((C14521 * C10704 + C14522 * C50933 + C15047 * C10705 +
              C15048 * C50854) *
                 C50932 +
             ((C3120 + C3119) * C10704 + (C3118 + C3117) * C50933 +
              (C3576 + C3577) * C10705 + (C3578 + C3579) * C50854) *
                 C50828) *
                C50757 -
            ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
              (C2376 + C2375) * C10704) *
                 C50828 +
             (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
              (C2372 + C2371) * C10704) *
                 C50932) *
                C50920) *
               C50729) *
              C50911 +
          (((((C5451 + C5452) * C10704 + (C5453 + C5454) * C50933 +
              (C5455 + C5456) * C10705 + (C5457 + C5458) * C50854) *
                 C50932 +
             (C14525 * C10704 + C14526 * C50933 + (C5989 + C5990) * C10705 +
              (C5991 + C5992) * C50854) *
                 C50828) *
                C50757 -
            ((C14527 * C50854 + C14528 * C10705 + (C2386 + C2385) * C50933 +
              (C2384 + C2383) * C10704) *
                 C50828 +
             ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
              (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                  C50933 +
              (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                  C10704) *
                 C50932) *
                C50920) *
               C893 +
           ((((C2383 + C2384) * C10704 + (C2385 + C2386) * C50933 +
              C14525 * C10705 + C14526 * C50854) *
                 C50932 +
             ((C2387 + C2388) * C10704 + (C2389 + C2390) * C50933 +
              (C3129 + C3130) * C10705 + (C3131 + C3132) * C50854) *
                 C50828) *
                C50920 -
            (((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                  C50854 +
              (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                  C10705 +
              (C3132 + C3131) * C50933 + (C3130 + C3129) * C10704) *
                 C50828 +
             ((C5992 + C5991) * C50854 + (C5990 + C5989) * C10705 +
              C14527 * C50933 + C14528 * C10704) *
                 C50932) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C50693 * C893 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
             (C2372 + C2371) * C10704) *
                C50932) *
               C50693 * C50729) *
              C895 +
          ((((C2383 + C2384) * C10704 + (C2385 + C2386) * C50933 +
             C14525 * C10705 + C14526 * C50854) *
                C50932 +
            ((C2387 + C2388) * C10704 + (C2389 + C2390) * C50933 +
             (C3129 + C3130) * C10705 + (C3131 + C3132) * C50854) *
                C50828) *
               C50693 * C50729 -
           ((C14527 * C50854 + C14528 * C10705 + (C2386 + C2385) * C50933 +
             (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C50693 * C893) *
              C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C10704 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50933 +
             (C5775 + C5776) * C10705 + (C5777 + C5778) * C50854) *
                C50932 +
            ((C2725 + C2726) * C10704 + (C2727 + C2728) * C50933 +
             (C14065 + C14066) * C10705 + (C14067 + C14068) * C50854) *
                C50828) *
               C50693 * C893 -
           (((C2163 * C1434 + C50633 * C1442 + C2162 * C1435 + C2157 * C1443) *
                 C50854 +
             (C2163 * C1430 + C50633 * C1438 + C2162 * C1431 + C2157 * C1439) *
                 C10705 +
             (C2732 + C2731) * C50933 + (C2730 + C2729) * C10704) *
                C50828 +
            ((C14068 + C14067) * C50854 + (C14066 + C14065) * C10705 +
             (C2728 + C2727) * C50933 + (C2726 + C2725) * C10704) *
                C50932) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C10704 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50933 +
            (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
               C50932 +
           ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
            C14521 * C10705 + C14522 * C50854) *
               C50828) *
              C50693 * C964 -
          ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
            (C2376 + C2375) * C10704) *
               C50828 +
           (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
            (C2372 + C2371) * C10704) *
               C50932) *
              C50693 * C965 +
          ((C2395 * C10704 + C2396 * C50933 + (C3120 + C3119) * C10705 +
            (C3118 + C3117) * C50854) *
               C50932 +
           ((C2382 + C2381) * C10704 + (C2380 + C2379) * C50933 +
            (C4086 + C4087) * C10705 + (C4088 + C4089) * C50854) *
               C50828) *
              C50693 * C966 -
          (((C2163 * C4067 + C50633 * C4071 + C2162 * C4068 + C2157 * C4072) *
                C50854 +
            (C2163 * C4065 + C50633 * C4069 + C2162 * C4066 + C2157 * C4070) *
                C10705 +
            (C3400 + C3399) * C50933 + (C3398 + C3397) * C10704) *
               C50828 +
           ((C4089 + C4088) * C50854 + (C4087 + C4086) * C10705 +
            C3385 * C50933 + C3386 * C10704) *
               C50932) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                  C10704 +
              (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                  C50933 +
              (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                 C50932 +
             ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
              C14521 * C10705 + C14522 * C50854) *
                 C50828) *
                C1544 -
            ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
              C14524 * C10704) *
                 C50828 +
             ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
              (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                 C50932) *
                C50757) *
               C50919 +
           (((C14521 * C10704 + C14522 * C50933 + C15047 * C10705 +
              C15048 * C50854) *
                 C50932 +
             (C15695 * C10704 + C15696 * C50933 + (C3576 + C3577) * C10705 +
              (C3578 + C3579) * C50854) *
                 C50828) *
                C50757 -
            ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
              (C2376 + C2375) * C10704) *
                 C50828 +
             (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
              (C2372 + C2371) * C10704) *
                 C50932) *
                C1544) *
               C50729) *
              C50911 +
          (((((C5451 + C5452) * C10704 + (C5453 + C5454) * C50933 +
              (C5455 + C5456) * C10705 + (C5457 + C5458) * C50854) *
                 C50932 +
             (C14525 * C10704 + C14526 * C50933 + (C5989 + C5990) * C10705 +
              (C5991 + C5992) * C50854) *
                 C50828) *
                C50757 -
            ((C14527 * C50854 + C14528 * C10705 + (C2386 + C2385) * C50933 +
              (C2384 + C2383) * C10704) *
                 C50828 +
             ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
              (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                  C50933 +
              (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                  C10704) *
                 C50932) *
                C1544) *
               C50919 +
           ((((C2383 + C2384) * C10704 + (C2385 + C2386) * C50933 +
              C14525 * C10705 + C14526 * C50854) *
                 C50932 +
             ((C2387 + C2388) * C10704 + (C2389 + C2390) * C50933 +
              (C3129 + C3130) * C10705 + (C3131 + C3132) * C50854) *
                 C50828) *
                C1544 -
            (((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                  C50854 +
              (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                  C10705 +
              (C3132 + C3131) * C50933 + (C3130 + C3129) * C10704) *
                 C50828 +
             ((C5992 + C5991) * C50854 + (C5990 + C5989) * C10705 +
              C14527 * C50933 + C14528 * C10704) *
                 C50932) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C50966 -
           ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
             C14524 * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C50967 +
           ((C5463 * C10704 + C5464 * C50933 + (C5450 + C5449) * C10705 +
             (C5448 + C5447) * C50854) *
                C50932 +
            (C15047 * C10704 + C15048 * C50933 + (C6401 + C6402) * C10705 +
             (C6403 + C6404) * C50854) *
                C50828) *
               C1960) *
              C50919 +
          (((C14521 * C10704 + C14522 * C50933 + C15047 * C10705 +
             C15048 * C50854) *
                C50932 +
            (C15695 * C10704 + C15696 * C50933 + (C3576 + C3577) * C10705 +
             (C3578 + C3579) * C50854) *
                C50828) *
               C50967 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
             (C2372 + C2371) * C10704) *
                C50932) *
               C50966 -
           (((C2163 * C4484 + C50633 * C4492 + C2162 * C4485 + C2157 * C4493) *
                 C50854 +
             (C2163 * C4480 + C50633 * C4486 + C2162 * C4481 + C2157 * C4487) *
                 C10705 +
             (C3579 + C3578) * C50933 + (C3577 + C3576) * C10704) *
                C50828 +
            ((C6404 + C6403) * C50854 + (C6402 + C6401) * C10705 +
             C6399 * C50933 + C6400 * C10704) *
                C50932) *
               C1960) *
              C50729) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C1544 -
           ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
             C14524 * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C50757) *
              C248 +
          (((C14521 * C10704 + C14522 * C50933 + C15047 * C10705 +
             C15048 * C50854) *
                C50932 +
            (C15695 * C10704 + C15696 * C50933 + (C3576 + C3577) * C10705 +
             (C3578 + C3579) * C50854) *
                C50828) *
               C50757 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
             (C2372 + C2371) * C10704) *
                C50932) *
               C1544) *
              C249 +
          (((C2395 * C10704 + C2396 * C50933 + C15695 * C10705 +
             C15696 * C50854) *
                C50932 +
            ((C2382 + C2381) * C10704 + (C2380 + C2379) * C50933 +
             (C4086 + C4087) * C10705 + (C4088 + C4089) * C50854) *
                C50828) *
               C1544 -
           (((C2163 * C3549 + C50633 * C3553 + C2162 * C3550 + C2157 * C3554) *
                 C50854 +
             (C2163 * C3547 + C50633 * C3551 + C2162 * C3548 + C2157 * C3552) *
                 C10705 +
             (C4089 + C4088) * C50933 + (C4087 + C4086) * C10704) *
                C50828 +
            ((C3579 + C3578) * C50854 + (C3577 + C3576) * C10705 +
             C4074 * C50933 + C4075 * C10704) *
                C50932) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C1544 -
           ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
             C14524 * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C50757) *
              C50677 * C895 +
          ((((C5451 + C5452) * C10704 + (C5453 + C5454) * C50933 +
             (C5455 + C5456) * C10705 + (C5457 + C5458) * C50854) *
                C50932 +
            (C14525 * C10704 + C14526 * C50933 + (C5989 + C5990) * C10705 +
             (C5991 + C5992) * C50854) *
                C50828) *
               C50757 -
           ((C14527 * C50854 + C14528 * C10705 + (C2386 + C2385) * C50933 +
             (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C1544) *
              C50677 * C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C10704 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50933 +
             (C5775 + C5776) * C10705 + (C5777 + C5778) * C50854) *
                C50932 +
            ((C2725 + C2726) * C10704 + (C2727 + C2728) * C50933 +
             (C14065 + C14066) * C10705 + (C14067 + C14068) * C50854) *
                C50828) *
               C1544 -
           (((C2163 * C1087 + C50633 * C1095 + C2162 * C1088 + C2157 * C1096) *
                 C50854 +
             (C2163 * C1083 + C50633 * C1091 + C2162 * C1084 + C2157 * C1092) *
                 C10705 +
             (C14068 + C14067) * C50933 + (C14066 + C14065) * C10704) *
                C50828 +
            ((C5782 + C5781) * C50854 + (C5780 + C5779) * C10705 +
             (C5778 + C5777) * C50933 + (C5776 + C5775) * C10704) *
                C50932) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C10704 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50933 +
            (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
               C50932 +
           ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
            C14521 * C10705 + C14522 * C50854) *
               C50828) *
              C1710 -
          ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
            C14524 * C10704) *
               C50828 +
           ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
            (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
               C50932) *
              C1711 +
          ((C5463 * C10704 + C5464 * C50933 + (C5450 + C5449) * C10705 +
            (C5448 + C5447) * C50854) *
               C50932 +
           (C15047 * C10704 + C15048 * C50933 + (C6401 + C6402) * C10705 +
            (C6403 + C6404) * C50854) *
               C50828) *
              C1712 -
          (((C2163 * C6384 + C50633 * C6388 + C2162 * C6385 + C2157 * C6389) *
                C50854 +
            (C2163 * C6382 + C50633 * C6386 + C2162 * C6383 + C2157 * C6387) *
                C10705 +
            (C6404 + C6403) * C50933 + (C6402 + C6401) * C10704) *
               C50828 +
           ((C7302 + C7301) * C50854 + (C7300 + C7299) * C10705 +
            C7289 * C50933 + C7290 * C10704) *
               C50932) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C50966 -
           ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
             C14524 * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C50967 +
           ((C5463 * C10704 + C5464 * C50933 + (C5450 + C5449) * C10705 +
             (C5448 + C5447) * C50854) *
                C50932 +
            (C15047 * C10704 + C15048 * C50933 + (C6401 + C6402) * C10705 +
             (C6403 + C6404) * C50854) *
                C50828) *
               C1960) *
              C50677 * C50911 +
          ((((C5451 + C5452) * C10704 + (C5453 + C5454) * C50933 +
             (C5455 + C5456) * C10705 + (C5457 + C5458) * C50854) *
                C50932 +
            (C14525 * C10704 + C14526 * C50933 + (C5989 + C5990) * C10705 +
             (C5991 + C5992) * C50854) *
                C50828) *
               C50967 -
           ((C14527 * C50854 + C14528 * C10705 + (C2386 + C2385) * C50933 +
             (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C50966 -
           (((C2163 * C5977 + C50633 * C5979 + C2162 * C4488 + C2157 * C4494) *
                 C50854 +
             (C2163 * C5976 + C50633 * C5978 + C2162 * C4482 + C2157 * C4490) *
                 C10705 +
             (C5992 + C5991) * C50933 + (C5990 + C5989) * C10704) *
                C50828 +
            ((C5462 + C5461) * C50854 + (C5460 + C5459) * C10705 +
             C5465 * C50933 + C5466 * C10704) *
                C50932) *
               C1960) *
              C50677 * C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C1544 -
           ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
             C14524 * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C50757) *
              C50677 * C895 +
          ((((C5451 + C5452) * C10704 + (C5453 + C5454) * C50933 +
             (C5455 + C5456) * C10705 + (C5457 + C5458) * C50854) *
                C50932 +
            (C14525 * C10704 + C14526 * C50933 + (C5989 + C5990) * C10705 +
             (C5991 + C5992) * C50854) *
                C50828) *
               C50757 -
           ((C14527 * C50854 + C14528 * C10705 + (C2386 + C2385) * C50933 +
             (C2384 + C2383) * C10704) *
                C50828 +
            ((C5454 + C5453) * C50854 + (C5452 + C5451) * C10705 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50933 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C10704) *
                C50932) *
               C1544) *
              C50677 * C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C10704 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50933 +
             (C5775 + C5776) * C10705 + (C5777 + C5778) * C50854) *
                C50932 +
            ((C2725 + C2726) * C10704 + (C2727 + C2728) * C50933 +
             (C14065 + C14066) * C10705 + (C14067 + C14068) * C50854) *
                C50828) *
               C1544 -
           (((C2163 * C1087 + C50633 * C1095 + C2162 * C1088 + C2157 * C1096) *
                 C50854 +
             (C2163 * C1083 + C50633 * C1091 + C2162 * C1084 + C2157 * C1092) *
                 C10705 +
             (C14068 + C14067) * C50933 + (C14066 + C14065) * C10704) *
                C50828 +
            ((C5782 + C5781) * C50854 + (C5780 + C5779) * C10705 +
             (C5778 + C5777) * C50933 + (C5776 + C5775) * C10704) *
                C50932) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C10704 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50933 +
             (C5439 + C5440) * C10705 + (C5441 + C5442) * C50854) *
                C50932 +
            ((C2371 + C2372) * C10704 + (C2373 + C2374) * C50933 +
             C14521 * C10705 + C14522 * C50854) *
                C50828) *
               C1544 -
           ((C6399 * C50854 + C6400 * C10705 + C14523 * C50933 +
             C14524 * C10704) *
                C50828 +
            ((C5446 + C5445) * C50854 + (C5444 + C5443) * C10705 +
             (C5442 + C5441) * C50933 + (C5440 + C5439) * C10704) *
                C50932) *
               C50757) *
              C248 +
          (((C14521 * C10704 + C14522 * C50933 + C15047 * C10705 +
             C15048 * C50854) *
                C50932 +
            (C15695 * C10704 + C15696 * C50933 + (C3576 + C3577) * C10705 +
             (C3578 + C3579) * C50854) *
                C50828) *
               C50757 -
           ((C4074 * C50854 + C4075 * C10705 + (C2378 + C2377) * C50933 +
             (C2376 + C2375) * C10704) *
                C50828 +
            (C14523 * C50854 + C14524 * C10705 + (C2374 + C2373) * C50933 +
             (C2372 + C2371) * C10704) *
                C50932) *
               C1544) *
              C249 +
          (((C2395 * C10704 + C2396 * C50933 + C15695 * C10705 +
             C15696 * C50854) *
                C50932 +
            ((C2382 + C2381) * C10704 + (C2380 + C2379) * C50933 +
             (C4086 + C4087) * C10705 + (C4088 + C4089) * C50854) *
                C50828) *
               C1544 -
           (((C2163 * C3549 + C50633 * C3553 + C2162 * C3550 + C2157 * C3554) *
                 C50854 +
             (C2163 * C3547 + C50633 * C3551 + C2162 * C3548 + C2157 * C3552) *
                 C10705 +
             (C4089 + C4088) * C50933 + (C4087 + C4086) * C10704) *
                C50828 +
            ((C3579 + C3578) * C50854 + (C3577 + C3576) * C10705 +
             C4074 * C50933 + C4075 * C10704) *
                C50932) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C50919 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C50729) *
              C50962 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C50729 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C50919) *
              C50963 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C50693 * C50919 -
           (((C2163 * C973 + C50633 * C981 + C2162 * C974 + C2157 * C982) *
                 C50790 +
             (C2163 * C969 + C50633 * C977 + C2162 * C970 + C2157 * C978) *
                 C121) *
                C2161 +
            ((C2732 + C2731) * C50790 + (C2730 + C2729) * C121) * C2160 +
            ((C2728 + C2727) * C50790 + (C2726 + C2725) * C121) * C2159) *
               C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C50919 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C50729) *
              C50962 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C50729 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C50919) *
              C50963 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C50693 * C50919 -
           ((C120 * C538 + C108 * C540 + C119 * C280 + C107 * C291 +
             C118 * C263 + C106 * C283 + C117 * C264 + C105 * C284) *
                C50790 +
            (C120 * C537 + C108 * C539 + C119 * C261 + C107 * C279 +
             C118 * C253 + C106 * C267 + C117 * C254 + C105 * C268) *
                C121) *
               C50779 * C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C50693 * C50919 -
           ((C3575 + C3574) * C5082 + (C3573 + C3572) * C5085 +
            (C3121 + C3122) * C5081 + (C3123 + C3124) * C5084 +
            (C2374 + C2373) * C5080 + (C2372 + C2371) * C5083) *
               C50779 * C50693 * C50729) *
              C50962 +
          (((C2383 + C2384) * C5083 + (C2385 + C2386) * C5080 +
            (C3125 + C3126) * C5084 + (C3127 + C3128) * C5081 +
            (C2162 * C1085 + C2157 * C1093 + C2163 * C1084 + C50633 * C1092) *
                C5085 +
            (C2162 * C1089 + C2157 * C1097 + C2163 * C1088 + C50633 * C1096) *
                C5082) *
               C50779 * C50693 * C50729 -
           (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
            (C5452 + C5451) * C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C50693 * C50919) *
              C50963 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C5083 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C5080 +
            (C2162 * C395 + C2157 * C409 + C2163 * C394 + C50633 * C408) *
                C5084 +
            (C2162 * C405 + C2157 * C425 + C2163 * C404 + C50633 * C424) *
                C5081 +
            (C2162 * C400 + C2157 * C414 + C2163 * C401 + C50633 * C415) *
                C5085 +
            (C2162 * C418 + C2157 * C430 + C2163 * C419 + C50633 * C431) *
                C5082) *
               C50779 * C50693 * C50919 -
           ((C2163 * C1087 + C50633 * C1095 + C2162 * C1088 + C2157 * C1096) *
                C5082 +
            (C2163 * C1083 + C50633 * C1091 + C2162 * C1084 + C2157 * C1092) *
                C5085 +
            (C2163 * C787 + C50633 * C793 + C2162 * C786 + C2157 * C792) *
                C5081 +
            (C2163 * C778 + C50633 * C783 + C2162 * C777 + C2157 * C782) *
                C5084 +
            (C2728 + C2727) * C5080 + (C2726 + C2725) * C5083) *
               C50779 * C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                  C121 +
              (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                  C50790) *
                 C2159 +
             ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
             C2403 * C2161) *
                C50920 -
            (((C3117 + C3118) * C50790 + (C3119 + C3120) * C121) * C2161 +
             ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
             ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                  C50790 +
              (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                  C121) *
                 C2159) *
                C50757) *
               C50919 +
           ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
             ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
             ((C2162 * C3072 + C2157 * C3075 + C2163 * C3073 + C50633 * C3076) *
                  C121 +
              (C2162 * C3077 + C2157 * C3081 + C2163 * C3078 + C50633 * C3082) *
                  C50790) *
                 C2161) *
                C50757 -
            (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
             ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
             ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
                C50920) *
               C50729) *
              C251 +
          (((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                  C121 +
              (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                  C50790) *
                 C2159 +
             ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
             ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
                C50757 -
            (C2404 * C2161 +
             ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
             ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                  C50790 +
              (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                  C121) *
                 C2159) *
                C50920) *
               C50919 +
           ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
             ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
             ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
                C50920 -
            (((C2163 * C3079 + C50633 * C3083 + C2162 * C3078 + C2157 * C3082) *
                  C50790 +
              (C2163 * C3074 + C50633 * C3080 + C2162 * C3073 + C2157 * C3076) *
                  C121) *
                 C2161 +
             ((C3132 + C3131) * C50790 + (C3130 + C3129) * C121) * C2160 +
             ((C3128 + C3127) * C50790 + (C3126 + C3125) * C121) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
              C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                 C121 +
             (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
              C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                 C50790) *
                C50779 * C50920 -
            ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
              C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                 C50790 +
             (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
              C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                 C121) *
                C50779 * C50757) *
               C50919 +
           (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
              C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                 C121 +
             (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
              C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
              C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                 C50790 +
             (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
              C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                 C121) *
                C50779 * C50920) *
               C50729) *
              C251 +
          ((((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
              C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                 C121 +
             (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
              C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50790 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C121) *
                C50779 * C50920) *
               C50919 +
           (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
              C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                 C121 +
             (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
              C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                 C50790) *
                C50779 * C50920 -
            ((C120 * C788 + C108 * C794 + C119 * C787 + C107 * C793 +
              C118 * C786 + C106 * C792 + C117 * C785 + C105 * C791) *
                 C50790 +
             (C120 * C779 + C108 * C789 + C119 * C778 + C107 * C783 +
              C118 * C777 + C106 * C782 + C117 * C776 + C105 * C781) *
                 C121) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C5083 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C5080 +
             (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
             C5464 * C5082) *
                C50779 * C50920 -
            ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
             (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
             (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
                C50779 * C50757) *
               C50919 +
           (((C3124 + C3123) * C5083 + (C3122 + C3121) * C5080 +
             (C3572 + C3573) * C5084 + (C3574 + C3575) * C5081 +
             (C2162 * C4483 + C2157 * C4491 + C2163 * C4482 + C50633 * C4490) *
                 C5085 +
             (C2162 * C4489 + C2157 * C4495 + C2163 * C4488 + C50633 * C4494) *
                 C5082) *
                C50779 * C50757 -
            ((C3575 + C3574) * C5082 + (C3573 + C3572) * C5085 +
             (C3121 + C3122) * C5081 + (C3123 + C3124) * C5084 +
             (C2374 + C2373) * C5080 + (C2372 + C2371) * C5083) *
                C50779 * C50920) *
               C50729) *
              C251 +
          ((((C5451 + C5452) * C5083 + (C5453 + C5454) * C5080 +
             (C5455 + C5456) * C5084 + (C5457 + C5458) * C5081 +
             (C5459 + C5460) * C5085 + (C5461 + C5462) * C5082) *
                C50779 * C50757 -
            (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
             (C5452 + C5451) * C5084 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C5080 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C5083) *
                C50779 * C50920) *
               C50919 +
           (((C2383 + C2384) * C5083 + (C2385 + C2386) * C5080 +
             (C3125 + C3126) * C5084 + (C3127 + C3128) * C5081 +
             (C5989 + C5990) * C5085 + (C5991 + C5992) * C5082) *
                C50779 * C50920 -
            ((C2163 * C5977 + C50633 * C5979 + C2162 * C4488 + C2157 * C4494) *
                 C5082 +
             (C2163 * C5976 + C50633 * C5978 + C2162 * C4482 + C2157 * C4490) *
                 C5085 +
             (C5992 + C5991) * C5081 + (C5990 + C5989) * C5084 +
             (C3128 + C3127) * C5080 + (C3126 + C3125) * C5083) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C121 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C50790) *
                  C50779 * C50693 * C50677 * C113 -
              ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                   C50790 +
               (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                   C121) *
                  C50779 * C50693 * C50677 * C114 +
              ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                   C121 +
               (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                   C50790) *
                  C50779 * C50693 * C50677 * C115 -
              ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
                C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
                   C50790 +
               (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
                C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
                   C121) *
                  C50779 * C50693 * C50677 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                 C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                    C121 +
                (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                 C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                    C50790) *
                   C50779 * C50693 * C248 -
               ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
                 C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                    C50790 +
                (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
                 C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                    C121) *
                   C50779 * C50693 * C249 +
               ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
                 C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                    C121 +
                (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
                 C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                    C50790) *
                   C50779 * C50693 * C250) *
                  C251 +
              (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
                 C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                    C121 +
                (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
                 C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                    C50790) *
                   C50779 * C50693 * C249 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C50790 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C121) *
                   C50779 * C50693 * C248 -
               ((C120 * C281 + C108 * C292 + C119 * C278 + C107 * C290 +
                 C118 * C277 + C106 * C289 + C117 * C276 + C105 * C288) *
                    C50790 +
                (C120 * C262 + C108 * C282 + C119 * C260 + C107 * C274 +
                 C118 * C259 + C106 * C273 + C117 * C258 + C105 * C272) *
                    C121) *
                   C50779 * C50693 * C250) *
                  C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C391 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C392 +
           ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
             C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
                C121 +
            (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
             C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
                C50790) *
               C50779 * C393) *
              C50677 * C251 +
          (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
             C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                C121 +
            (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
             C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                C50790) *
               C50779 * C392 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C391 -
           ((C120 * C422 + C108 * C433 + C119 * C419 + C107 * C431 +
             C118 * C418 + C106 * C430 + C117 * C417 + C105 * C429) *
                C50790 +
            (C120 * C403 + C108 * C423 + C119 * C401 + C107 * C415 +
             C118 * C400 + C106 * C414 + C117 * C399 + C105 * C413) *
                C121) *
               C50779 * C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2162 * C256 + C2157 * C270 + C2163 * C255 + C50633 * C269) *
                C121 +
            (C2162 * C266 + C2157 * C286 + C2163 * C265 + C50633 * C285) *
                C50790) *
               C2160 +
           ((C2162 * C257 + C2157 * C271 + C2163 * C258 + C50633 * C272) *
                C121 +
            (C2162 * C275 + C2157 * C287 + C2163 * C276 + C50633 * C288) *
                C50790) *
               C2161) *
              C50693 * C50677 * C113 -
          (((C2163 * C277 + C50633 * C289 + C2162 * C276 + C2157 * C288) *
                C50790 +
            (C2163 * C259 + C50633 * C273 + C2162 * C258 + C2157 * C272) *
                C121) *
               C2161 +
           ((C2163 * C264 + C50633 * C284 + C2162 * C265 + C2157 * C285) *
                C50790 +
            (C2163 * C254 + C50633 * C268 + C2162 * C255 + C2157 * C269) *
                C121) *
               C2160 +
           ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C50790 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C121) *
               C2159) *
              C50693 * C50677 * C114 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C121 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C50790) *
               C2159 +
           ((C2162 * C254 + C2157 * C268 + C2163 * C253 + C50633 * C267) *
                C121 +
            (C2162 * C264 + C2157 * C284 + C2163 * C263 + C50633 * C283) *
                C50790) *
               C2160 +
           ((C2162 * C259 + C2157 * C273 + C2163 * C260 + C50633 * C274) *
                C121 +
            (C2162 * C277 + C2157 * C289 + C2163 * C278 + C50633 * C290) *
                C50790) *
               C2161) *
              C50693 * C50677 * C115 -
          (((C2163 * C281 + C50633 * C292 + C2162 * C278 + C2157 * C290) *
                C50790 +
            (C2163 * C262 + C50633 * C282 + C2162 * C260 + C2157 * C274) *
                C121) *
               C2161 +
           ((C2163 * C280 + C50633 * C291 + C2162 * C263 + C2157 * C283) *
                C50790 +
            (C2163 * C261 + C50633 * C279 + C2162 * C253 + C2157 * C267) *
                C121) *
               C2160 +
           ((C2163 * C137 + C50633 * C147 + C2162 * C136 + C2157 * C146) *
                C50790 +
            (C2163 * C126 + C50633 * C138 + C2162 * C125 + C2157 * C132) *
                C121) *
               C2159) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C248 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C249 +
           (C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C2162 * C2310 + C2157 * C2313 + C2163 * C2311 + C50633 * C2314) *
                 C121 +
             (C2162 * C2315 + C2157 * C2319 + C2163 * C2316 + C50633 * C2320) *
                 C50790) *
                C2161) *
               C50693 * C250) *
              C251 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C249 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C248 -
           (((C2163 * C2317 + C50633 * C2321 + C2162 * C2316 + C2157 * C2320) *
                 C50790 +
             (C2163 * C2312 + C50633 * C2318 + C2162 * C2311 + C2157 * C2314) *
                 C121) *
                C2161 +
            ((C2394 + C2393) * C50790 + (C2392 + C2391) * C121) * C2160 +
            C2404 * C2159) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C391 -
           (((C2163 * C1436 + C50633 * C1444 + C2162 * C1437 + C2157 * C1445) *
                 C50790 +
             (C2163 * C1432 + C50633 * C1440 + C2162 * C1433 + C2157 * C1441) *
                 C121) *
                C2161 +
            ((C2163 * C785 + C50633 * C791 + C2162 * C784 + C2157 * C790) *
                 C50790 +
             (C2163 * C776 + C50633 * C781 + C2162 * C775 + C2157 * C780) *
                 C121) *
                C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C392 +
           (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                 C121 +
             (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                 C50790) *
                C2159 +
            ((C2162 * C1086 + C2157 * C1094 + C2163 * C1085 + C50633 * C1093) *
                 C121 +
             (C2162 * C1090 + C2157 * C1098 + C2163 * C1089 + C50633 * C1097) *
                 C50790) *
                C2160 +
            ((C2162 * C2550 + C2157 * C2553 + C2163 * C2551 + C50633 * C2554) *
                 C121 +
             (C2162 * C2555 + C2157 * C2559 + C2163 * C2556 + C50633 * C2560) *
                 C50790) *
                C2161) *
               C393) *
              C50677 * C251 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C2162 * C776 + C2157 * C781 + C2163 * C777 + C50633 * C782) *
                 C121 +
             (C2162 * C785 + C2157 * C791 + C2163 * C786 + C50633 * C792) *
                 C50790) *
                C2160 +
            ((C2162 * C1432 + C2157 * C1440 + C2163 * C1431 + C50633 * C1439) *
                 C121 +
             (C2162 * C1436 + C2157 * C1444 + C2163 * C1435 + C50633 * C1443) *
                 C50790) *
                C2161) *
               C392 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C391 -
           (((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                 C50790 +
             (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                 C121) *
                C2161 +
            ((C2163 * C1088 + C50633 * C1096 + C2162 * C1089 + C2157 * C1097) *
                 C50790 +
             (C2163 * C1084 + C50633 * C1092 + C2162 * C1085 + C2157 * C1093) *
                 C121) *
                C2160 +
            ((C2163 * C418 + C50633 * C430 + C2162 * C417 + C2157 * C429) *
                 C50790 +
             (C2163 * C400 + C50633 * C414 + C2162 * C399 + C2157 * C413) *
                 C121) *
                C2159) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
               C5083 +
           (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
               C5080 +
           (C2162 * C397 + C2157 * C411 + C2163 * C396 + C50633 * C410) *
               C5084 +
           (C2162 * C407 + C2157 * C427 + C2163 * C406 + C50633 * C426) *
               C5081 +
           (C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
               C5085 +
           (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
               C5082) *
              C50779 * C50693 * C50677 * C113 -
          ((C2163 * C418 + C50633 * C430 + C2162 * C417 + C2157 * C429) *
               C5082 +
           (C2163 * C400 + C50633 * C414 + C2162 * C399 + C2157 * C413) *
               C5085 +
           (C2163 * C405 + C50633 * C425 + C2162 * C406 + C2157 * C426) *
               C5081 +
           (C2163 * C395 + C50633 * C409 + C2162 * C396 + C2157 * C410) *
               C5084 +
           (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
               C5080 +
           (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
               C5083) *
              C50779 * C50693 * C50677 * C114 +
          ((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
               C5083 +
           (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
               C5080 +
           (C2162 * C395 + C2157 * C409 + C2163 * C394 + C50633 * C408) *
               C5084 +
           (C2162 * C405 + C2157 * C425 + C2163 * C404 + C50633 * C424) *
               C5081 +
           (C2162 * C400 + C2157 * C414 + C2163 * C401 + C50633 * C415) *
               C5085 +
           (C2162 * C418 + C2157 * C430 + C2163 * C419 + C50633 * C431) *
               C5082) *
              C50779 * C50693 * C50677 * C115 -
          ((C2163 * C422 + C50633 * C433 + C2162 * C419 + C2157 * C431) *
               C5082 +
           (C2163 * C403 + C50633 * C423 + C2162 * C401 + C2157 * C415) *
               C5085 +
           (C2163 * C421 + C50633 * C432 + C2162 * C404 + C2157 * C424) *
               C5081 +
           (C2163 * C402 + C50633 * C420 + C2162 * C394 + C2157 * C408) *
               C5084 +
           (C2163 * C137 + C50633 * C147 + C2162 * C136 + C2157 * C146) *
               C5080 +
           (C2163 * C126 + C50633 * C138 + C2162 * C125 + C2157 * C132) *
               C5083) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C2162 * C397 + C2157 * C411 + C2163 * C396 + C50633 * C410) *
                C5084 +
            (C2162 * C407 + C2157 * C427 + C2163 * C406 + C50633 * C426) *
                C5081 +
            (C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                C5085 +
            (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                C5082) *
               C50779 * C50693 * C248 -
           ((C3575 + C3574) * C5082 + (C3573 + C3572) * C5085 +
            (C3121 + C3122) * C5081 + (C3123 + C3124) * C5084 +
            (C2374 + C2373) * C5080 + (C2372 + C2371) * C5083) *
               C50779 * C50693 * C249 +
           (C2395 * C5083 + C2396 * C5080 + (C3120 + C3119) * C5084 +
            (C3118 + C3117) * C5081 + (C3576 + C3577) * C5085 +
            (C3578 + C3579) * C5082) *
               C50779 * C50693 * C250) *
              C251 +
          (((C2383 + C2384) * C5083 + (C2385 + C2386) * C5080 +
            (C3125 + C3126) * C5084 + (C3127 + C3128) * C5081 +
            (C2162 * C1085 + C2157 * C1093 + C2163 * C1084 + C50633 * C1092) *
                C5085 +
            (C2162 * C1089 + C2157 * C1097 + C2163 * C1088 + C50633 * C1096) *
                C5082) *
               C50779 * C50693 * C249 -
           ((C2163 * C418 + C50633 * C430 + C2162 * C417 + C2157 * C429) *
                C5082 +
            (C2163 * C400 + C50633 * C414 + C2162 * C399 + C2157 * C413) *
                C5085 +
            (C2163 * C405 + C50633 * C425 + C2162 * C406 + C2157 * C426) *
                C5081 +
            (C2163 * C395 + C50633 * C409 + C2162 * C396 + C2157 * C410) *
                C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C50693 * C248 -
           ((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                C5082 +
            (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                C5085 +
            (C3132 + C3131) * C5081 + (C3130 + C3129) * C5084 + C2397 * C5080 +
            C2398 * C5083) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C391 -
           ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
            (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
            (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
               C50779 * C392 +
           (C5463 * C5083 + C5464 * C5080 + (C5450 + C5449) * C5084 +
            (C5448 + C5447) * C5081 +
            (C2162 * C5378 + C2157 * C5381 + C2163 * C5379 + C50633 * C5382) *
                C5085 +
            (C2162 * C5383 + C2157 * C5387 + C2163 * C5384 + C50633 * C5388) *
                C5082) *
               C50779 * C393) *
              C50677 * C251 +
          (((C5451 + C5452) * C5083 + (C5453 + C5454) * C5080 +
            (C5455 + C5456) * C5084 + (C5457 + C5458) * C5081 +
            (C5459 + C5460) * C5085 + (C5461 + C5462) * C5082) *
               C50779 * C392 -
           (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
            (C5452 + C5451) * C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C391 -
           ((C2163 * C5385 + C50633 * C5389 + C2162 * C5384 + C2157 * C5388) *
                C5082 +
            (C2163 * C5380 + C50633 * C5386 + C2162 * C5379 + C2157 * C5382) *
                C5085 +
            (C5462 + C5461) * C5081 + (C5460 + C5459) * C5084 + C5465 * C5080 +
            C5466 * C5083) *
               C50779 * C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50920 -
           (((C2163 * C1436 + C50633 * C1444 + C2162 * C1437 + C2157 * C1445) *
                 C50790 +
             (C2163 * C1432 + C50633 * C1440 + C2162 * C1433 + C2157 * C1441) *
                 C121) *
                C2161 +
            ((C2163 * C785 + C50633 * C791 + C2162 * C784 + C2157 * C790) *
                 C50790 +
             (C2163 * C776 + C50633 * C781 + C2162 * C775 + C2157 * C780) *
                 C121) *
                C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C50962 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C2162 * C776 + C2157 * C781 + C2163 * C777 + C50633 * C782) *
                 C121 +
             (C2162 * C785 + C2157 * C791 + C2163 * C786 + C50633 * C792) *
                 C50790) *
                C2160 +
            ((C2162 * C1432 + C2157 * C1440 + C2163 * C1431 + C50633 * C1439) *
                 C121 +
             (C2162 * C1436 + C2157 * C1444 + C2163 * C1435 + C50633 * C1443) *
                 C50790) *
                C2161) *
               C50757 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50920) *
              C50677 * C50963 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C50920 -
           (((C2163 * C1434 + C50633 * C1442 + C2162 * C1435 + C2157 * C1443) *
                 C50790 +
             (C2163 * C1430 + C50633 * C1438 + C2162 * C1431 + C2157 * C1439) *
                 C121) *
                C2161 +
            ((C2163 * C787 + C50633 * C793 + C2162 * C786 + C2157 * C792) *
                 C50790 +
             (C2163 * C778 + C50633 * C783 + C2162 * C777 + C2157 * C782) *
                 C121) *
                C2160 +
            ((C2163 * C404 + C50633 * C424 + C2162 * C405 + C2157 * C425) *
                 C50790 +
             (C2163 * C394 + C50633 * C408 + C2162 * C395 + C2157 * C409) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50920 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C50677 * C50962 +
          (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
             C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                C121 +
            (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
             C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50920) *
              C50677 * C50963 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C50920 -
           ((C120 * C642 + C108 * C644 + C119 * C421 + C107 * C432 +
             C118 * C404 + C106 * C424 + C117 * C405 + C105 * C425) *
                C50790 +
            (C120 * C641 + C108 * C643 + C119 * C402 + C107 * C420 +
             C118 * C394 + C106 * C408 + C117 * C395 + C105 * C409) *
                C121) *
               C50779 * C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C50920 -
           ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
            (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
            (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
               C50779 * C50757) *
              C50677 * C50962 +
          (((C5451 + C5452) * C5083 + (C5453 + C5454) * C5080 +
            (C5455 + C5456) * C5084 + (C5457 + C5458) * C5081 +
            (C5459 + C5460) * C5085 + (C5461 + C5462) * C5082) *
               C50779 * C50757 -
           (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
            (C5452 + C5451) * C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C50920) *
              C50677 * C50963 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C5083 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C5080 +
            (C5775 + C5776) * C5084 + (C5777 + C5778) * C5081 +
            (C5779 + C5780) * C5085 + (C5781 + C5782) * C5082) *
               C50779 * C50920 -
           ((C2163 * C1718 + C50633 * C1726 + C2162 * C1719 + C2157 * C1727) *
                C5082 +
            (C2163 * C1714 + C50633 * C1722 + C2162 * C1715 + C2157 * C1723) *
                C5085 +
            (C5782 + C5781) * C5081 + (C5780 + C5779) * C5084 +
            (C5778 + C5777) * C5080 + (C5776 + C5775) * C5083) *
               C50779 * C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C248 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C249 +
           ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C50693 * C250) *
              C251 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C249 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C248 -
           ((C120 * C281 + C108 * C292 + C119 * C278 + C107 * C290 +
             C118 * C277 + C106 * C289 + C117 * C276 + C105 * C288) *
                C50790 +
            (C120 * C262 + C108 * C282 + C119 * C260 + C107 * C274 +
             C118 * C259 + C106 * C273 + C117 * C258 + C105 * C272) *
                C121) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50790) *
              C50779 * C50693 * C50677 * C113 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50790 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50779 * C50693 * C50677 * C114 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50790) *
              C50779 * C50693 * C50677 * C115 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50790 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2162 * C256 + C2157 * C270 + C2163 * C255 + C50633 * C269) *
                C121 +
            (C2162 * C266 + C2157 * C286 + C2163 * C265 + C50633 * C285) *
                C50790) *
               C2160 +
           ((C2162 * C257 + C2157 * C271 + C2163 * C258 + C50633 * C272) *
                C121 +
            (C2162 * C275 + C2157 * C287 + C2163 * C276 + C50633 * C288) *
                C50790) *
               C2161) *
              C50693 * C50677 * C113 -
          (((C2163 * C277 + C50633 * C289 + C2162 * C276 + C2157 * C288) *
                C50790 +
            (C2163 * C259 + C50633 * C273 + C2162 * C258 + C2157 * C272) *
                C121) *
               C2161 +
           ((C2163 * C264 + C50633 * C284 + C2162 * C265 + C2157 * C285) *
                C50790 +
            (C2163 * C254 + C50633 * C268 + C2162 * C255 + C2157 * C269) *
                C121) *
               C2160 +
           ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C50790 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C121) *
               C2159) *
              C50693 * C50677 * C114 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C121 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C50790) *
               C2159 +
           ((C2162 * C254 + C2157 * C268 + C2163 * C253 + C50633 * C267) *
                C121 +
            (C2162 * C264 + C2157 * C284 + C2163 * C263 + C50633 * C283) *
                C50790) *
               C2160 +
           ((C2162 * C259 + C2157 * C273 + C2163 * C260 + C50633 * C274) *
                C121 +
            (C2162 * C277 + C2157 * C289 + C2163 * C278 + C50633 * C290) *
                C50790) *
               C2161) *
              C50693 * C50677 * C115 -
          (((C2163 * C281 + C50633 * C292 + C2162 * C278 + C2157 * C290) *
                C50790 +
            (C2163 * C262 + C50633 * C282 + C2162 * C260 + C2157 * C274) *
                C121) *
               C2161 +
           ((C2163 * C280 + C50633 * C291 + C2162 * C263 + C2157 * C283) *
                C50790 +
            (C2163 * C261 + C50633 * C279 + C2162 * C253 + C2157 * C267) *
                C121) *
               C2160 +
           ((C2163 * C137 + C50633 * C147 + C2162 * C136 + C2157 * C146) *
                C50790 +
            (C2163 * C126 + C50633 * C138 + C2162 * C125 + C2157 * C132) *
                C121) *
               C2159) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C248 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C249 +
           (C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C2162 * C2310 + C2157 * C2313 + C2163 * C2311 + C50633 * C2314) *
                 C121 +
             (C2162 * C2315 + C2157 * C2319 + C2163 * C2316 + C50633 * C2320) *
                 C50790) *
                C2161) *
               C50693 * C250) *
              C251 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C249 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C248 -
           (((C2163 * C2317 + C50633 * C2321 + C2162 * C2316 + C2157 * C2320) *
                 C50790 +
             (C2163 * C2312 + C50633 * C2318 + C2162 * C2311 + C2157 * C2314) *
                 C121) *
                C2161 +
            ((C2394 + C2393) * C50790 + (C2392 + C2391) * C121) * C2160 +
            C2404 * C2159) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
               C5083 +
           (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
               C5080 +
           (C2162 * C397 + C2157 * C411 + C2163 * C396 + C50633 * C410) *
               C5084 +
           (C2162 * C407 + C2157 * C427 + C2163 * C406 + C50633 * C426) *
               C5081 +
           (C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
               C5085 +
           (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
               C5082) *
              C50779 * C50693 * C50677 * C113 -
          ((C2163 * C418 + C50633 * C430 + C2162 * C417 + C2157 * C429) *
               C5082 +
           (C2163 * C400 + C50633 * C414 + C2162 * C399 + C2157 * C413) *
               C5085 +
           (C2163 * C405 + C50633 * C425 + C2162 * C406 + C2157 * C426) *
               C5081 +
           (C2163 * C395 + C50633 * C409 + C2162 * C396 + C2157 * C410) *
               C5084 +
           (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
               C5080 +
           (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
               C5083) *
              C50779 * C50693 * C50677 * C114 +
          ((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
               C5083 +
           (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
               C5080 +
           (C2162 * C395 + C2157 * C409 + C2163 * C394 + C50633 * C408) *
               C5084 +
           (C2162 * C405 + C2157 * C425 + C2163 * C404 + C50633 * C424) *
               C5081 +
           (C2162 * C400 + C2157 * C414 + C2163 * C401 + C50633 * C415) *
               C5085 +
           (C2162 * C418 + C2157 * C430 + C2163 * C419 + C50633 * C431) *
               C5082) *
              C50779 * C50693 * C50677 * C115 -
          ((C2163 * C422 + C50633 * C433 + C2162 * C419 + C2157 * C431) *
               C5082 +
           (C2163 * C403 + C50633 * C423 + C2162 * C401 + C2157 * C415) *
               C5085 +
           (C2163 * C421 + C50633 * C432 + C2162 * C404 + C2157 * C424) *
               C5081 +
           (C2163 * C402 + C50633 * C420 + C2162 * C394 + C2157 * C408) *
               C5084 +
           (C2163 * C137 + C50633 * C147 + C2162 * C136 + C2157 * C146) *
               C5080 +
           (C2163 * C126 + C50633 * C138 + C2162 * C125 + C2157 * C132) *
               C5083) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C2162 * C397 + C2157 * C411 + C2163 * C396 + C50633 * C410) *
                C5084 +
            (C2162 * C407 + C2157 * C427 + C2163 * C406 + C50633 * C426) *
                C5081 +
            (C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                C5085 +
            (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                C5082) *
               C50779 * C50693 * C248 -
           ((C3575 + C3574) * C5082 + (C3573 + C3572) * C5085 +
            (C3121 + C3122) * C5081 + (C3123 + C3124) * C5084 +
            (C2374 + C2373) * C5080 + (C2372 + C2371) * C5083) *
               C50779 * C50693 * C249 +
           (C2395 * C5083 + C2396 * C5080 + (C3120 + C3119) * C5084 +
            (C3118 + C3117) * C5081 + (C3576 + C3577) * C5085 +
            (C3578 + C3579) * C5082) *
               C50779 * C50693 * C250) *
              C251 +
          (((C2383 + C2384) * C5083 + (C2385 + C2386) * C5080 +
            (C3125 + C3126) * C5084 + (C3127 + C3128) * C5081 +
            (C2162 * C1085 + C2157 * C1093 + C2163 * C1084 + C50633 * C1092) *
                C5085 +
            (C2162 * C1089 + C2157 * C1097 + C2163 * C1088 + C50633 * C1096) *
                C5082) *
               C50779 * C50693 * C249 -
           ((C2163 * C418 + C50633 * C430 + C2162 * C417 + C2157 * C429) *
                C5082 +
            (C2163 * C400 + C50633 * C414 + C2162 * C399 + C2157 * C413) *
                C5085 +
            (C2163 * C405 + C50633 * C425 + C2162 * C406 + C2157 * C426) *
                C5081 +
            (C2163 * C395 + C50633 * C409 + C2162 * C396 + C2157 * C410) *
                C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C50693 * C248 -
           ((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                C5082 +
            (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                C5085 +
            (C3132 + C3131) * C5081 + (C3130 + C3129) * C5084 + C2397 * C5080 +
            C2398 * C5083) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C50964 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C50965 +
           (C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
               C50693 * C1199) *
              C50911 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C50965 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C50964 -
           (((C2163 * C2317 + C50633 * C2321 + C2162 * C2316 + C2157 * C2320) *
                 C50790 +
             (C2163 * C2312 + C50633 * C2318 + C2162 * C2311 + C2157 * C2314) *
                 C121) *
                C2161 +
            ((C2394 + C2393) * C50790 + (C2392 + C2391) * C121) * C2160 +
            C2404 * C2159) *
               C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C50964 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C50965 +
           ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C50693 * C1199) *
              C50911 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C50965 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C50964 -
           ((C120 * C281 + C108 * C292 + C119 * C278 + C107 * C290 +
             C118 * C277 + C106 * C289 + C117 * C276 + C105 * C288) *
                C50790 +
            (C120 * C262 + C108 * C282 + C119 * C260 + C107 * C274 +
             C118 * C259 + C106 * C273 + C117 * C258 + C105 * C272) *
                C121) *
               C50779 * C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C50693 * C50964 -
           (C6399 * C5082 + C6400 * C5085 + (C3121 + C3122) * C5081 +
            (C3123 + C3124) * C5084 + (C2374 + C2373) * C5080 +
            (C2372 + C2371) * C5083) *
               C50779 * C50693 * C50965 +
           (C2395 * C5083 + C2396 * C5080 + (C3120 + C3119) * C5084 +
            (C3118 + C3117) * C5081 + (C3576 + C3577) * C5085 +
            (C3578 + C3579) * C5082) *
               C50779 * C50693 * C1199) *
              C50911 +
          (((C2383 + C2384) * C5083 + (C2385 + C2386) * C5080 +
            (C3125 + C3126) * C5084 + (C3127 + C3128) * C5081 +
            (C5989 + C5990) * C5085 + (C5991 + C5992) * C5082) *
               C50779 * C50693 * C50965 -
           (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
            (C5452 + C5451) * C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C50693 * C50964 -
           ((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                C5082 +
            (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                C5085 +
            (C3132 + C3131) * C5081 + (C3130 + C3129) * C5084 + C2397 * C5080 +
            C2398 * C5083) *
               C50779 * C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50920 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C50964 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
               C50757 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50920) *
              C50965 +
          ((C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
               C50920 -
           (((C2163 * C4067 + C50633 * C4071 + C2162 * C4068 + C2157 * C4072) *
                 C50790 +
             (C2163 * C4065 + C50633 * C4069 + C2162 * C4066 + C2157 * C4070) *
                 C121) *
                C2161 +
            ((C4089 + C4088) * C50790 + (C4087 + C4086) * C121) * C2160 +
            C4090 * C2159) *
               C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50920 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C50964 +
          (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
             C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                C121 +
            (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
             C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50920) *
              C50965 +
          (((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C50920 -
           ((C120 * C1434 + C108 * C1442 + C119 * C1435 + C107 * C1443 +
             C118 * C1436 + C106 * C1444 + C117 * C1437 + C105 * C1445) *
                C50790 +
            (C120 * C1430 + C108 * C1438 + C119 * C1431 + C107 * C1439 +
             C118 * C1432 + C106 * C1440 + C117 * C1433 + C105 * C1441) *
                C121) *
               C50779 * C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C50920 -
           ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
            (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
            (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
               C50779 * C50757) *
              C50964 +
          (((C3124 + C3123) * C5083 + (C3122 + C3121) * C5080 +
            (C3572 + C3573) * C5084 + (C3574 + C3575) * C5081 +
            (C6401 + C6402) * C5085 + (C6403 + C6404) * C5082) *
               C50779 * C50757 -
           (C6399 * C5082 + C6400 * C5085 + (C3121 + C3122) * C5081 +
            (C3123 + C3124) * C5084 + (C2374 + C2373) * C5080 +
            (C2372 + C2371) * C5083) *
               C50779 * C50920) *
              C50965 +
          ((C2395 * C5083 + C2396 * C5080 + (C3120 + C3119) * C5084 +
            (C3118 + C3117) * C5081 + (C3576 + C3577) * C5085 +
            (C3578 + C3579) * C5082) *
               C50779 * C50920 -
           ((C2163 * C4484 + C50633 * C4492 + C2162 * C4485 + C2157 * C4493) *
                C5082 +
            (C2163 * C4480 + C50633 * C4486 + C2162 * C4481 + C2157 * C4487) *
                C5085 +
            (C3579 + C3578) * C5081 + (C3577 + C3576) * C5084 + C4074 * C5080 +
            C4075 * C5083) *
               C50779 * C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                 C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                    C121 +
                (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                 C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                    C50790) *
                   C50779 * C50693 * C893 -
               ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
                 C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                    C50790 +
                (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
                 C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                    C121) *
                   C50779 * C50693 * C50729) *
                  C895 +
              (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
                 C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                    C121 +
                (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
                 C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                    C50790) *
                   C50779 * C50693 * C50729 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C50790 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C121) *
                   C50779 * C50693 * C893) *
                  C896 +
              (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                 C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                    C121 +
                (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                 C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                    C50790) *
                   C50779 * C50693 * C893 -
               ((C120 * C538 + C108 * C540 + C119 * C280 + C107 * C291 +
                 C118 * C263 + C106 * C283 + C117 * C264 + C105 * C284) *
                    C50790 +
                (C120 * C537 + C108 * C539 + C119 * C261 + C107 * C279 +
                 C118 * C253 + C106 * C267 + C117 * C254 + C105 * C268) *
                    C121) *
                   C50779 * C50693 * C50729) *
                  C897) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                   C121 +
               (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                   C50790) *
                  C50779 * C50693 * C964 -
              ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
                C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                   C50790 +
               (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
                C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                   C121) *
                  C50779 * C50693 * C965 +
              ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
                C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                   C121 +
               (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
                C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                   C50790) *
                  C50779 * C50693 * C966 -
              ((C120 * C973 + C108 * C981 + C119 * C974 + C107 * C982 +
                C118 * C975 + C106 * C983 + C117 * C976 + C105 * C984) *
                   C50790 +
               (C120 * C969 + C108 * C977 + C119 * C970 + C107 * C978 +
                C118 * C971 + C106 * C979 + C117 * C972 + C105 * C980) *
                   C121) *
                  C50779 * C50693 * C967) *
             C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C391 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C392 +
           ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
             C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
                C121 +
            (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
             C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
                C50790) *
               C50779 * C393) *
              C893 +
          (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
             C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                C121 +
            (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
             C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                C50790) *
               C50779 * C392 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C391 -
           ((C120 * C1087 + C108 * C1095 + C119 * C1088 + C107 * C1096 +
             C118 * C1089 + C106 * C1097 + C117 * C1090 + C105 * C1098) *
                C50790 +
            (C120 * C1083 + C108 * C1091 + C119 * C1084 + C107 * C1092 +
             C118 * C1085 + C106 * C1093 + C117 * C1086 + C105 * C1094) *
                C121) *
               C50779 * C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C893 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C50729) *
              C895 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C50729 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C893) *
              C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C50693 * C893 -
           (((C2163 * C973 + C50633 * C981 + C2162 * C974 + C2157 * C982) *
                 C50790 +
             (C2163 * C969 + C50633 * C977 + C2162 * C970 + C2157 * C978) *
                 C121) *
                C2161 +
            ((C2732 + C2731) * C50790 + (C2730 + C2729) * C121) * C2160 +
            ((C2728 + C2727) * C50790 + (C2726 + C2725) * C121) * C2159) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
           C2403 * C2161) *
              C50693 * C964 -
          (C3401 * C2161 +
           ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
           ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
              C50693 * C965 +
          (C2403 * C2159 +
           ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
           ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
              C50693 * C966 -
          (((C2163 * C3378 + C50633 * C3382 + C2162 * C3379 + C2157 * C3383) *
                C50790 +
            (C2163 * C3376 + C50633 * C3380 + C2162 * C3377 + C2157 * C3381) *
                C121) *
               C2161 +
           ((C3400 + C3399) * C50790 + (C3398 + C3397) * C121) * C2160 +
           C3401 * C2159) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C391 -
           (((C3117 + C3118) * C50790 + (C3119 + C3120) * C121) * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C392 +
           (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                 C121 +
             (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                 C50790) *
                C2159 +
            ((C3572 + C3573) * C121 + (C3574 + C3575) * C50790) * C2160 +
            ((C3576 + C3577) * C121 + (C3578 + C3579) * C50790) * C2161) *
               C393) *
              C893 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C2162 * C3072 + C2157 * C3075 + C2163 * C3073 + C50633 * C3076) *
                 C121 +
             (C2162 * C3077 + C2157 * C3081 + C2163 * C3078 + C50633 * C3082) *
                 C50790) *
                C2161) *
               C392 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C391 -
           (((C2163 * C3549 + C50633 * C3553 + C2162 * C3550 + C2157 * C3554) *
                 C50790 +
             (C2163 * C3547 + C50633 * C3551 + C2162 * C3548 + C2157 * C3552) *
                 C121) *
                C2161 +
            ((C3579 + C3578) * C50790 + (C3577 + C3576) * C121) * C2160 +
            ((C3575 + C3574) * C50790 + (C3573 + C3572) * C121) * C2159) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C50693 * C893 -
           ((C3575 + C3574) * C5082 + (C3573 + C3572) * C5085 +
            (C3121 + C3122) * C5081 + (C3123 + C3124) * C5084 +
            (C2374 + C2373) * C5080 + (C2372 + C2371) * C5083) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C2383 + C2384) * C5083 + (C2385 + C2386) * C5080 +
            (C3125 + C3126) * C5084 + (C3127 + C3128) * C5081 +
            (C5989 + C5990) * C5085 + (C5991 + C5992) * C5082) *
               C50779 * C50693 * C50729 -
           (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
            (C5452 + C5451) * C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C50693 * C893) *
              C896 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C5083 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C5080 +
            (C5775 + C5776) * C5084 + (C5777 + C5778) * C5081 +
            (C5779 + C5780) * C5085 + (C5781 + C5782) * C5082) *
               C50779 * C50693 * C893 -
           ((C2163 * C1087 + C50633 * C1095 + C2162 * C1088 + C2157 * C1096) *
                C5082 +
            (C2163 * C1083 + C50633 * C1091 + C2162 * C1084 + C2157 * C1092) *
                C5085 +
            (C2163 * C787 + C50633 * C793 + C2162 * C786 + C2157 * C792) *
                C5081 +
            (C2163 * C778 + C50633 * C783 + C2162 * C777 + C2157 * C782) *
                C5084 +
            (C2728 + C2727) * C5080 + (C2726 + C2725) * C5083) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
               C5083 +
           (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
               C5080 +
           (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
           C5464 * C5082) *
              C50779 * C50693 * C964 -
          ((C3575 + C3574) * C5082 + (C3573 + C3572) * C5085 +
           (C3121 + C3122) * C5081 + (C3123 + C3124) * C5084 +
           (C2374 + C2373) * C5080 + (C2372 + C2371) * C5083) *
              C50779 * C50693 * C965 +
          (C2395 * C5083 + C2396 * C5080 + (C3120 + C3119) * C5084 +
           (C3118 + C3117) * C5081 + (C3576 + C3577) * C5085 +
           (C3578 + C3579) * C5082) *
              C50779 * C50693 * C966 -
          ((C2163 * C3549 + C50633 * C3553 + C2162 * C3550 + C2157 * C3554) *
               C5082 +
           (C2163 * C3547 + C50633 * C3551 + C2162 * C3548 + C2157 * C3552) *
               C5085 +
           (C4089 + C4088) * C5081 + (C4087 + C4086) * C5084 + C3385 * C5080 +
           C3386 * C5083) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C391 -
           ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
            (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
            (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
               C50779 * C392 +
           (C5463 * C5083 + C5464 * C5080 + (C5450 + C5449) * C5084 +
            (C5448 + C5447) * C5081 +
            (C2162 * C5378 + C2157 * C5381 + C2163 * C5379 + C50633 * C5382) *
                C5085 +
            (C2162 * C5383 + C2157 * C5387 + C2163 * C5384 + C50633 * C5388) *
                C5082) *
               C50779 * C393) *
              C893 +
          (((C3124 + C3123) * C5083 + (C3122 + C3121) * C5080 +
            (C3572 + C3573) * C5084 + (C3574 + C3575) * C5081 +
            (C6401 + C6402) * C5085 + (C6403 + C6404) * C5082) *
               C50779 * C392 -
           (C6399 * C5082 + C6400 * C5085 + (C3121 + C3122) * C5081 +
            (C3123 + C3124) * C5084 + (C2374 + C2373) * C5080 +
            (C2372 + C2371) * C5083) *
               C50779 * C391 -
           ((C2163 * C6384 + C50633 * C6388 + C2162 * C6385 + C2157 * C6389) *
                C5082 +
            (C2163 * C6382 + C50633 * C6386 + C2162 * C6383 + C2157 * C6387) *
                C5085 +
            (C6404 + C6403) * C5081 + (C6402 + C6401) * C5084 + C6399 * C5080 +
            C6400 * C5083) *
               C50779 * C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                  C121 +
              (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                  C50790) *
                 C2159 +
             ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
             C2403 * C2161) *
                C50920 -
            (((C3117 + C3118) * C50790 + (C3119 + C3120) * C121) * C2161 +
             ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
             ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                  C50790 +
              (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                  C121) *
                 C2159) *
                C50757) *
               C893 +
           ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
             ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
             ((C2162 * C3072 + C2157 * C3075 + C2163 * C3073 + C50633 * C3076) *
                  C121 +
              (C2162 * C3077 + C2157 * C3081 + C2163 * C3078 + C50633 * C3082) *
                  C50790) *
                 C2161) *
                C50757 -
            (C3401 * C2161 +
             ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
             ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
                C50920) *
               C50729) *
              C50911 +
          (((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                  C121 +
              (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                  C50790) *
                 C2159 +
             ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
             ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
                C50757 -
            (C2404 * C2161 +
             ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
             ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                  C50790 +
              (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                  C121) *
                 C2159) *
                C50920) *
               C893 +
           ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
             ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
             ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
                C50920 -
            (((C2163 * C3079 + C50633 * C3083 + C2162 * C3078 + C2157 * C3082) *
                  C50790 +
              (C2163 * C3074 + C50633 * C3080 + C2162 * C3073 + C2157 * C3076) *
                  C121) *
                 C2161 +
             ((C3132 + C3131) * C50790 + (C3130 + C3129) * C121) * C2160 +
             ((C3128 + C3127) * C50790 + (C3126 + C3125) * C121) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
              C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                 C121 +
             (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
              C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                 C50790) *
                C50779 * C50920 -
            ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
              C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                 C50790 +
             (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
              C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                 C121) *
                C50779 * C50757) *
               C893 +
           (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
              C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                 C121 +
             (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
              C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
              C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                 C50790 +
             (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
              C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                 C121) *
                C50779 * C50920) *
               C50729) *
              C50911 +
          ((((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
              C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                 C121 +
             (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
              C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50790 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C121) *
                C50779 * C50920) *
               C893 +
           (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
              C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                 C121 +
             (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
              C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                 C50790) *
                C50779 * C50920 -
            ((C120 * C788 + C108 * C794 + C119 * C787 + C107 * C793 +
              C118 * C786 + C106 * C792 + C117 * C785 + C105 * C791) *
                 C50790 +
             (C120 * C779 + C108 * C789 + C119 * C778 + C107 * C783 +
              C118 * C777 + C106 * C782 + C117 * C776 + C105 * C781) *
                 C121) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C5083 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C5080 +
             (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
             C5464 * C5082) *
                C50779 * C50920 -
            ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
             (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
             (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
                C50779 * C50757) *
               C893 +
           (((C3124 + C3123) * C5083 + (C3122 + C3121) * C5080 +
             (C3572 + C3573) * C5084 + (C3574 + C3575) * C5081 +
             (C6401 + C6402) * C5085 + (C6403 + C6404) * C5082) *
                C50779 * C50757 -
            (C6399 * C5082 + C6400 * C5085 + (C3121 + C3122) * C5081 +
             (C3123 + C3124) * C5084 + (C2374 + C2373) * C5080 +
             (C2372 + C2371) * C5083) *
                C50779 * C50920) *
               C50729) *
              C50911 +
          ((((C5451 + C5452) * C5083 + (C5453 + C5454) * C5080 +
             (C5455 + C5456) * C5084 + (C5457 + C5458) * C5081 +
             (C5459 + C5460) * C5085 + (C5461 + C5462) * C5082) *
                C50779 * C50757 -
            (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
             (C5452 + C5451) * C5084 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C5080 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C5083) *
                C50779 * C50920) *
               C893 +
           (((C2383 + C2384) * C5083 + (C2385 + C2386) * C5080 +
             (C3125 + C3126) * C5084 + (C3127 + C3128) * C5081 +
             (C5989 + C5990) * C5085 + (C5991 + C5992) * C5082) *
                C50779 * C50920 -
            ((C2163 * C5977 + C50633 * C5979 + C2162 * C4488 + C2157 * C4494) *
                 C5082 +
             (C2163 * C5976 + C50633 * C5978 + C2162 * C4482 + C2157 * C4490) *
                 C5085 +
             (C5992 + C5991) * C5081 + (C5990 + C5989) * C5084 +
             (C3128 + C3127) * C5080 + (C3126 + C3125) * C5083) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50790) *
              C50779 * C50693 * C964 -
          ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
            C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
               C50790 +
           (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
            C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
               C121) *
              C50779 * C50693 * C965 +
          ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
            C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
               C121 +
           (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
            C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
               C50790) *
              C50779 * C50693 * C966 -
          ((C120 * C973 + C108 * C981 + C119 * C974 + C107 * C982 +
            C118 * C975 + C106 * C983 + C117 * C976 + C105 * C984) *
               C50790 +
           (C120 * C969 + C108 * C977 + C119 * C970 + C107 * C978 +
            C118 * C971 + C106 * C979 + C117 * C972 + C105 * C980) *
               C121) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C893 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C50729 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C893) *
              C896 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C50693 * C893 -
           ((C120 * C538 + C108 * C540 + C119 * C280 + C107 * C291 +
             C118 * C263 + C106 * C283 + C117 * C264 + C105 * C284) *
                C50790 +
            (C120 * C537 + C108 * C539 + C119 * C261 + C107 * C279 +
             C118 * C253 + C106 * C267 + C117 * C254 + C105 * C268) *
                C121) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C893 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C50729) *
              C895 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C50729 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C893) *
              C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C50693 * C893 -
           (((C2163 * C973 + C50633 * C981 + C2162 * C974 + C2157 * C982) *
                 C50790 +
             (C2163 * C969 + C50633 * C977 + C2162 * C970 + C2157 * C978) *
                 C121) *
                C2161 +
            ((C2732 + C2731) * C50790 + (C2730 + C2729) * C121) * C2160 +
            ((C2728 + C2727) * C50790 + (C2726 + C2725) * C121) * C2159) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
           C2403 * C2161) *
              C50693 * C964 -
          (C3401 * C2161 +
           ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
           ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
              C50693 * C965 +
          (C2403 * C2159 +
           ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
           ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
              C50693 * C966 -
          (((C2163 * C3378 + C50633 * C3382 + C2162 * C3379 + C2157 * C3383) *
                C50790 +
            (C2163 * C3376 + C50633 * C3380 + C2162 * C3377 + C2157 * C3381) *
                C121) *
               C2161 +
           ((C3400 + C3399) * C50790 + (C3398 + C3397) * C121) * C2160 +
           C3401 * C2159) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C50693 * C893 -
           ((C3575 + C3574) * C5082 + (C3573 + C3572) * C5085 +
            (C3121 + C3122) * C5081 + (C3123 + C3124) * C5084 +
            (C2374 + C2373) * C5080 + (C2372 + C2371) * C5083) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C2383 + C2384) * C5083 + (C2385 + C2386) * C5080 +
            (C3125 + C3126) * C5084 + (C3127 + C3128) * C5081 +
            (C5989 + C5990) * C5085 + (C5991 + C5992) * C5082) *
               C50779 * C50693 * C50729 -
           (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
            (C5452 + C5451) * C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C50693 * C893) *
              C896 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C5083 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C5080 +
            (C5775 + C5776) * C5084 + (C5777 + C5778) * C5081 +
            (C5779 + C5780) * C5085 + (C5781 + C5782) * C5082) *
               C50779 * C50693 * C893 -
           ((C2163 * C1087 + C50633 * C1095 + C2162 * C1088 + C2157 * C1096) *
                C5082 +
            (C2163 * C1083 + C50633 * C1091 + C2162 * C1084 + C2157 * C1092) *
                C5085 +
            (C2163 * C787 + C50633 * C793 + C2162 * C786 + C2157 * C792) *
                C5081 +
            (C2163 * C778 + C50633 * C783 + C2162 * C777 + C2157 * C782) *
                C5084 +
            (C2728 + C2727) * C5080 + (C2726 + C2725) * C5083) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
               C5083 +
           (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
               C5080 +
           (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
           C5464 * C5082) *
              C50779 * C50693 * C964 -
          ((C3575 + C3574) * C5082 + (C3573 + C3572) * C5085 +
           (C3121 + C3122) * C5081 + (C3123 + C3124) * C5084 +
           (C2374 + C2373) * C5080 + (C2372 + C2371) * C5083) *
              C50779 * C50693 * C965 +
          (C2395 * C5083 + C2396 * C5080 + (C3120 + C3119) * C5084 +
           (C3118 + C3117) * C5081 + (C3576 + C3577) * C5085 +
           (C3578 + C3579) * C5082) *
              C50779 * C50693 * C966 -
          ((C2163 * C3549 + C50633 * C3553 + C2162 * C3550 + C2157 * C3554) *
               C5082 +
           (C2163 * C3547 + C50633 * C3551 + C2162 * C3548 + C2157 * C3552) *
               C5085 +
           (C4089 + C4088) * C5081 + (C4087 + C4086) * C5084 + C3385 * C5080 +
           C3386 * C5083) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                  C121 +
              (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                  C50790) *
                 C2159 +
             ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
             C2403 * C2161) *
                C1544 -
            (C4090 * C2161 +
             ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
             ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                  C50790 +
              (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                  C121) *
                 C2159) *
                C50757) *
               C50919 +
           ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
             ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
             ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
                C50757 -
            (C3401 * C2161 +
             ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
             ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
                C1544) *
               C50729) *
              C50911 +
          (((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                  C121 +
              (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                  C50790) *
                 C2159 +
             ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
             ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
                C50757 -
            (C2404 * C2161 +
             ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
             ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                  C50790 +
              (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                  C121) *
                 C2159) *
                C1544) *
               C50919 +
           ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
             ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
             ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
                C1544 -
            (((C2163 * C3079 + C50633 * C3083 + C2162 * C3078 + C2157 * C3082) *
                  C50790 +
              (C2163 * C3074 + C50633 * C3080 + C2162 * C3073 + C2157 * C3076) *
                  C121) *
                 C2161 +
             ((C3132 + C3131) * C50790 + (C3130 + C3129) * C121) * C2160 +
             ((C3128 + C3127) * C50790 + (C3126 + C3125) * C121) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
              C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                 C121 +
             (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
              C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                 C50790) *
                C50779 * C1544 -
            ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
              C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                 C50790 +
             (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
              C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                 C121) *
                C50779 * C50757) *
               C50919 +
           (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
              C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                 C121 +
             (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
              C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
              C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                 C50790 +
             (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
              C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                 C121) *
                C50779 * C1544) *
               C50729) *
              C50911 +
          ((((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
              C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                 C121 +
             (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
              C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50790 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C121) *
                C50779 * C1544) *
               C50919 +
           (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
              C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                 C121 +
             (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
              C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                 C50790) *
                C50779 * C1544 -
            ((C120 * C788 + C108 * C794 + C119 * C787 + C107 * C793 +
              C118 * C786 + C106 * C792 + C117 * C785 + C105 * C791) *
                 C50790 +
             (C120 * C779 + C108 * C789 + C119 * C778 + C107 * C783 +
              C118 * C777 + C106 * C782 + C117 * C776 + C105 * C781) *
                 C121) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C5083 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C5080 +
             (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
             C5464 * C5082) *
                C50779 * C1544 -
            (C7289 * C5082 + C7290 * C5085 + (C5446 + C5445) * C5081 +
             (C5444 + C5443) * C5084 + (C5442 + C5441) * C5080 +
             (C5440 + C5439) * C5083) *
                C50779 * C50757) *
               C50919 +
           (((C3124 + C3123) * C5083 + (C3122 + C3121) * C5080 +
             (C3572 + C3573) * C5084 + (C3574 + C3575) * C5081 +
             (C6401 + C6402) * C5085 + (C6403 + C6404) * C5082) *
                C50779 * C50757 -
            (C6399 * C5082 + C6400 * C5085 + (C3121 + C3122) * C5081 +
             (C3123 + C3124) * C5084 + (C2374 + C2373) * C5080 +
             (C2372 + C2371) * C5083) *
                C50779 * C1544) *
               C50729) *
              C50911 +
          ((((C5451 + C5452) * C5083 + (C5453 + C5454) * C5080 +
             (C5455 + C5456) * C5084 + (C5457 + C5458) * C5081 +
             (C5459 + C5460) * C5085 + (C5461 + C5462) * C5082) *
                C50779 * C50757 -
            (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
             (C5452 + C5451) * C5084 +
             (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C5080 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C5083) *
                C50779 * C1544) *
               C50919 +
           (((C2383 + C2384) * C5083 + (C2385 + C2386) * C5080 +
             (C3125 + C3126) * C5084 + (C3127 + C3128) * C5081 +
             (C5989 + C5990) * C5085 + (C5991 + C5992) * C5082) *
                C50779 * C1544 -
            ((C2163 * C5977 + C50633 * C5979 + C2162 * C4488 + C2157 * C4494) *
                 C5082 +
             (C2163 * C5976 + C50633 * C5978 + C2162 * C4482 + C2157 * C4490) *
                 C5085 +
             (C5992 + C5991) * C5081 + (C5990 + C5989) * C5084 +
             (C3128 + C3127) * C5080 + (C3126 + C3125) * C5083) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50966 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50967 +
           (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                 C121 +
             (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                 C50790) *
                C2159 +
            ((C3572 + C3573) * C121 + (C3574 + C3575) * C50790) * C2160 +
            ((C3576 + C3577) * C121 + (C3578 + C3579) * C50790) * C2161) *
               C1960) *
              C50919 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
               C50967 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50966 -
           (((C2163 * C3549 + C50633 * C3553 + C2162 * C3550 + C2157 * C3554) *
                 C50790 +
             (C2163 * C3547 + C50633 * C3551 + C2162 * C3548 + C2157 * C3552) *
                 C121) *
                C2161 +
            ((C3579 + C3578) * C50790 + (C3577 + C3576) * C121) * C2160 +
            ((C3575 + C3574) * C50790 + (C3573 + C3572) * C121) * C2159) *
               C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50966 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50967 +
           ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
             C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
                C121 +
            (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
             C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
                C50790) *
               C50779 * C1960) *
              C50919 +
          (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
             C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                C121 +
            (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
             C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                C50790) *
               C50779 * C50967 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50966 -
           ((C120 * C1087 + C108 * C1095 + C119 * C1088 + C107 * C1096 +
             C118 * C1089 + C106 * C1097 + C117 * C1090 + C105 * C1098) *
                C50790 +
            (C120 * C1083 + C108 * C1091 + C119 * C1084 + C107 * C1092 +
             C118 * C1085 + C106 * C1093 + C117 * C1086 + C105 * C1094) *
                C121) *
               C50779 * C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C50966 -
           (C7289 * C5082 + C7290 * C5085 + (C5446 + C5445) * C5081 +
            (C5444 + C5443) * C5084 + (C5442 + C5441) * C5080 +
            (C5440 + C5439) * C5083) *
               C50779 * C50967 +
           (C5463 * C5083 + C5464 * C5080 + (C5450 + C5449) * C5084 +
            (C5448 + C5447) * C5081 + (C7299 + C7300) * C5085 +
            (C7301 + C7302) * C5082) *
               C50779 * C1960) *
              C50919 +
          (((C3124 + C3123) * C5083 + (C3122 + C3121) * C5080 +
            (C3572 + C3573) * C5084 + (C3574 + C3575) * C5081 +
            (C6401 + C6402) * C5085 + (C6403 + C6404) * C5082) *
               C50779 * C50967 -
           (C6399 * C5082 + C6400 * C5085 + (C3121 + C3122) * C5081 +
            (C3123 + C3124) * C5084 + (C2374 + C2373) * C5080 +
            (C2372 + C2371) * C5083) *
               C50779 * C50966 -
           ((C2163 * C6384 + C50633 * C6388 + C2162 * C6385 + C2157 * C6389) *
                C5082 +
            (C2163 * C6382 + C50633 * C6386 + C2162 * C6383 + C2157 * C6387) *
                C5085 +
            (C6404 + C6403) * C5081 + (C6402 + C6401) * C5084 + C6399 * C5080 +
            C6400 * C5083) *
               C50779 * C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                 C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                    C121 +
                (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                 C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                    C50790) *
                   C50779 * C1544 -
               ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
                 C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                    C50790 +
                (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
                 C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                    C121) *
                   C50779 * C50757) *
                  C50677 * C895 +
              (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
                 C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                    C121 +
                (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
                 C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                    C50790) *
                   C50779 * C50757 -
               ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
                 C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                    C50790 +
                (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
                 C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                    C121) *
                   C50779 * C1544) *
                  C50677 * C896 +
              (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
                 C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                    C121 +
                (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
                 C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                    C50790) *
                   C50779 * C1544 -
               ((C120 * C642 + C108 * C644 + C119 * C421 + C107 * C432 +
                 C118 * C404 + C106 * C424 + C117 * C405 + C105 * C425) *
                    C50790 +
                (C120 * C641 + C108 * C643 + C119 * C402 + C107 * C420 +
                 C118 * C394 + C106 * C408 + C117 * C395 + C105 * C409) *
                    C121) *
                   C50779 * C50757) *
                  C50677 * C897) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
                 C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                    C121 +
                (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
                 C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                    C50790) *
                   C50779 * C1544 -
               ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
                 C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                    C50790 +
                (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
                 C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                    C121) *
                   C50779 * C50757) *
                  C248 +
              (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
                 C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                    C121 +
                (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
                 C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                    C50790) *
                   C50779 * C50757 -
               ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
                 C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                    C50790 +
                (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
                 C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                    C121) *
                   C50779 * C1544) *
                  C249 +
              (((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
                 C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                    C121 +
                (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
                 C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                    C50790) *
                   C50779 * C1544 -
               ((C120 * C1434 + C108 * C1442 + C119 * C1435 + C107 * C1443 +
                 C118 * C1436 + C106 * C1444 + C117 * C1437 + C105 * C1445) *
                    C50790 +
                (C120 * C1430 + C108 * C1438 + C119 * C1431 + C107 * C1439 +
                 C118 * C1432 + C106 * C1440 + C117 * C1433 + C105 * C1441) *
                    C121) *
                   C50779 * C50757) *
                  C250) *
             C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50790) *
              C50779 * C1710 -
          ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
            C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
               C50790 +
           (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
            C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
               C121) *
              C50779 * C1711 +
          ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
            C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
               C121 +
           (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
            C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
               C50790) *
              C50779 * C1712 -
          ((C120 * C1718 + C108 * C1726 + C119 * C1719 + C107 * C1727 +
            C118 * C1720 + C106 * C1728 + C117 * C1721 + C105 * C1729) *
               C50790 +
           (C120 * C1714 + C108 * C1722 + C119 * C1715 + C107 * C1723 +
            C118 * C1716 + C106 * C1724 + C117 * C1717 + C105 * C1725) *
               C121) *
              C50779 * C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C1544 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C895 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
            ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
               C50757 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C1544) *
              C50677 * C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C1544 -
           (((C2163 * C1434 + C50633 * C1442 + C2162 * C1435 + C2157 * C1443) *
                 C50790 +
             (C2163 * C1430 + C50633 * C1438 + C2162 * C1431 + C2157 * C1439) *
                 C121) *
                C2161 +
            ((C2163 * C787 + C50633 * C793 + C2162 * C786 + C2157 * C792) *
                 C50790 +
             (C2163 * C778 + C50633 * C783 + C2162 * C777 + C2157 * C782) *
                 C121) *
                C2160 +
            ((C2163 * C404 + C50633 * C424 + C2162 * C405 + C2157 * C425) *
                 C50790 +
             (C2163 * C394 + C50633 * C408 + C2162 * C395 + C2157 * C409) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C1544 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C248 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
               C50757 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C1544) *
              C249 +
          ((C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
               C1544 -
           (((C2163 * C4067 + C50633 * C4071 + C2162 * C4068 + C2157 * C4072) *
                 C50790 +
             (C2163 * C4065 + C50633 * C4069 + C2162 * C4066 + C2157 * C4070) *
                 C121) *
                C2161 +
            ((C4089 + C4088) * C50790 + (C4087 + C4086) * C121) * C2160 +
            C4090 * C2159) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
           C2403 * C2161) *
              C1710 -
          (C4090 * C2161 +
           ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
           ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                C50790 +
            (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                C121) *
               C2159) *
              C1711 +
          (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                C121 +
            (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                C50790) *
               C2159 +
           ((C3572 + C3573) * C121 + (C3574 + C3575) * C50790) * C2160 +
           ((C3576 + C3577) * C121 + (C3578 + C3579) * C50790) * C2161) *
              C1712 -
          (((C2163 * C4484 + C50633 * C4492 + C2162 * C4485 + C2157 * C4493) *
                C50790 +
            (C2163 * C4480 + C50633 * C4486 + C2162 * C4481 + C2157 * C4487) *
                C121) *
               C2161 +
           ((C2163 * C4488 + C50633 * C4494 + C2162 * C4489 + C2157 * C4495) *
                C50790 +
            (C2163 * C4482 + C50633 * C4490 + C2162 * C4483 + C2157 * C4491) *
                C121) *
               C2160 +
           ((C2163 * C1720 + C50633 * C1728 + C2162 * C1721 + C2157 * C1729) *
                C50790 +
            (C2163 * C1716 + C50633 * C1724 + C2162 * C1717 + C2157 * C1725) *
                C121) *
               C2159) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C1544 -
           ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
            (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
            (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C5451 + C5452) * C5083 + (C5453 + C5454) * C5080 +
            (C5455 + C5456) * C5084 + (C5457 + C5458) * C5081 +
            (C5459 + C5460) * C5085 + (C5461 + C5462) * C5082) *
               C50779 * C50757 -
           (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
            (C5452 + C5451) * C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C5083 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C5080 +
            (C5775 + C5776) * C5084 + (C5777 + C5778) * C5081 +
            (C5779 + C5780) * C5085 + (C5781 + C5782) * C5082) *
               C50779 * C1544 -
           ((C2163 * C1718 + C50633 * C1726 + C2162 * C1719 + C2157 * C1727) *
                C5082 +
            (C2163 * C1714 + C50633 * C1722 + C2162 * C1715 + C2157 * C1723) *
                C5085 +
            (C5782 + C5781) * C5081 + (C5780 + C5779) * C5084 +
            (C5778 + C5777) * C5080 + (C5776 + C5775) * C5083) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C1544 -
           ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
            (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
            (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
               C50779 * C50757) *
              C248 +
          (((C3124 + C3123) * C5083 + (C3122 + C3121) * C5080 +
            (C3572 + C3573) * C5084 + (C3574 + C3575) * C5081 +
            (C6401 + C6402) * C5085 + (C6403 + C6404) * C5082) *
               C50779 * C50757 -
           (C6399 * C5082 + C6400 * C5085 + (C3121 + C3122) * C5081 +
            (C3123 + C3124) * C5084 + (C2374 + C2373) * C5080 +
            (C2372 + C2371) * C5083) *
               C50779 * C1544) *
              C249 +
          ((C2395 * C5083 + C2396 * C5080 + (C3120 + C3119) * C5084 +
            (C3118 + C3117) * C5081 + (C3576 + C3577) * C5085 +
            (C3578 + C3579) * C5082) *
               C50779 * C1544 -
           ((C2163 * C4484 + C50633 * C4492 + C2162 * C4485 + C2157 * C4493) *
                C5082 +
            (C2163 * C4480 + C50633 * C4486 + C2162 * C4481 + C2157 * C4487) *
                C5085 +
            (C3579 + C3578) * C5081 + (C3577 + C3576) * C5084 + C4074 * C5080 +
            C4075 * C5083) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
               C5083 +
           (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
               C5080 +
           (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
           C5464 * C5082) *
              C50779 * C1710 -
          (C7289 * C5082 + C7290 * C5085 + (C5446 + C5445) * C5081 +
           (C5444 + C5443) * C5084 + (C5442 + C5441) * C5080 +
           (C5440 + C5439) * C5083) *
              C50779 * C1711 +
          (C5463 * C5083 + C5464 * C5080 + (C5450 + C5449) * C5084 +
           (C5448 + C5447) * C5081 + (C7299 + C7300) * C5085 +
           (C7301 + C7302) * C5082) *
              C50779 * C1712 -
          ((C2163 * C7282 + C50633 * C7286 + C2162 * C7283 + C2157 * C7287) *
               C5082 +
           (C2163 * C7280 + C50633 * C7284 + C2162 * C7281 + C2157 * C7285) *
               C5085 +
           (C7302 + C7301) * C5081 + (C7300 + C7299) * C5084 + C7289 * C5080 +
           C7290 * C5083) *
              C50779 * C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50966 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50967 +
           (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                 C121 +
             (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                 C50790) *
                C2159 +
            ((C3572 + C3573) * C121 + (C3574 + C3575) * C50790) * C2160 +
            ((C3576 + C3577) * C121 + (C3578 + C3579) * C50790) * C2161) *
               C1960) *
              C50677 * C50911 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
            ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
               C50967 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50966 -
           (((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                 C50790 +
             (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                 C121) *
                C2161 +
            ((C2163 * C1088 + C50633 * C1096 + C2162 * C1089 + C2157 * C1097) *
                 C50790 +
             (C2163 * C1084 + C50633 * C1092 + C2162 * C1085 + C2157 * C1093) *
                 C121) *
                C2160 +
            ((C2163 * C418 + C50633 * C430 + C2162 * C417 + C2157 * C429) *
                 C50790 +
             (C2163 * C400 + C50633 * C414 + C2162 * C399 + C2157 * C413) *
                 C121) *
                C2159) *
               C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50966 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50967 +
           ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
             C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
                C121 +
            (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
             C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
                C50790) *
               C50779 * C1960) *
              C50677 * C50911 +
          (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
             C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                C121 +
            (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
             C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                C50790) *
               C50779 * C50967 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50966 -
           ((C120 * C422 + C108 * C433 + C119 * C419 + C107 * C431 +
             C118 * C418 + C106 * C430 + C117 * C417 + C105 * C429) *
                C50790 +
            (C120 * C403 + C108 * C423 + C119 * C401 + C107 * C415 +
             C118 * C400 + C106 * C414 + C117 * C399 + C105 * C413) *
                C121) *
               C50779 * C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C50966 -
           (C7289 * C5082 + C7290 * C5085 + (C5446 + C5445) * C5081 +
            (C5444 + C5443) * C5084 + (C5442 + C5441) * C5080 +
            (C5440 + C5439) * C5083) *
               C50779 * C50967 +
           (C5463 * C5083 + C5464 * C5080 + (C5450 + C5449) * C5084 +
            (C5448 + C5447) * C5081 + (C7299 + C7300) * C5085 +
            (C7301 + C7302) * C5082) *
               C50779 * C1960) *
              C50677 * C50911 +
          (((C5451 + C5452) * C5083 + (C5453 + C5454) * C5080 +
            (C5455 + C5456) * C5084 + (C5457 + C5458) * C5081 +
            (C5459 + C5460) * C5085 + (C5461 + C5462) * C5082) *
               C50779 * C50967 -
           (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
            (C5452 + C5451) * C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C50966 -
           ((C2163 * C5385 + C50633 * C5389 + C2162 * C5384 + C2157 * C5388) *
                C5082 +
            (C2163 * C5380 + C50633 * C5386 + C2162 * C5379 + C2157 * C5382) *
                C5085 +
            (C5462 + C5461) * C5081 + (C5460 + C5459) * C5084 + C5465 * C5080 +
            C5466 * C5083) *
               C50779 * C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C248 +
          (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
             C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                C121 +
            (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
             C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C1544) *
              C249 +
          (((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C1434 + C108 * C1442 + C119 * C1435 + C107 * C1443 +
             C118 * C1436 + C106 * C1444 + C117 * C1437 + C105 * C1445) *
                C50790 +
            (C120 * C1430 + C108 * C1438 + C119 * C1431 + C107 * C1439 +
             C118 * C1432 + C106 * C1440 + C117 * C1433 + C105 * C1441) *
                C121) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
             C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                C121 +
            (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
             C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C642 + C108 * C644 + C119 * C421 + C107 * C432 +
             C118 * C404 + C106 * C424 + C117 * C405 + C105 * C425) *
                C50790 +
            (C120 * C641 + C108 * C643 + C119 * C402 + C107 * C420 +
             C118 * C394 + C106 * C408 + C117 * C395 + C105 * C409) *
                C121) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C1544 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C895 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
            ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
               C50757 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C1544) *
              C50677 * C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C1544 -
           (((C2163 * C1434 + C50633 * C1442 + C2162 * C1435 + C2157 * C1443) *
                 C50790 +
             (C2163 * C1430 + C50633 * C1438 + C2162 * C1431 + C2157 * C1439) *
                 C121) *
                C2161 +
            ((C2163 * C787 + C50633 * C793 + C2162 * C786 + C2157 * C792) *
                 C50790 +
             (C2163 * C778 + C50633 * C783 + C2162 * C777 + C2157 * C782) *
                 C121) *
                C2160 +
            ((C2163 * C404 + C50633 * C424 + C2162 * C405 + C2157 * C425) *
                 C50790 +
             (C2163 * C394 + C50633 * C408 + C2162 * C395 + C2157 * C409) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C1544 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C248 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
               C50757 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C1544) *
              C249 +
          ((C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
               C1544 -
           (((C2163 * C4067 + C50633 * C4071 + C2162 * C4068 + C2157 * C4072) *
                 C50790 +
             (C2163 * C4065 + C50633 * C4069 + C2162 * C4066 + C2157 * C4070) *
                 C121) *
                C2161 +
            ((C4089 + C4088) * C50790 + (C4087 + C4086) * C121) * C2160 +
            C4090 * C2159) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C1544 -
           ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
            (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
            (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C5451 + C5452) * C5083 + (C5453 + C5454) * C5080 +
            (C5455 + C5456) * C5084 + (C5457 + C5458) * C5081 +
            (C5459 + C5460) * C5085 + (C5461 + C5462) * C5082) *
               C50779 * C50757 -
           (C5465 * C5082 + C5466 * C5085 + (C5454 + C5453) * C5081 +
            (C5452 + C5451) * C5084 +
            (C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C5080 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C5083) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C5083 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C5080 +
            (C5775 + C5776) * C5084 + (C5777 + C5778) * C5081 +
            (C5779 + C5780) * C5085 + (C5781 + C5782) * C5082) *
               C50779 * C1544 -
           ((C2163 * C1718 + C50633 * C1726 + C2162 * C1719 + C2157 * C1727) *
                C5082 +
            (C2163 * C1714 + C50633 * C1722 + C2162 * C1715 + C2157 * C1723) *
                C5085 +
            (C5782 + C5781) * C5081 + (C5780 + C5779) * C5084 +
            (C5778 + C5777) * C5080 + (C5776 + C5775) * C5083) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C5083 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C5080 +
            (C5439 + C5440) * C5084 + (C5441 + C5442) * C5081 + C5463 * C5085 +
            C5464 * C5082) *
               C50779 * C1544 -
           ((C5447 + C5448) * C5082 + (C5449 + C5450) * C5085 +
            (C5446 + C5445) * C5081 + (C5444 + C5443) * C5084 +
            (C5442 + C5441) * C5080 + (C5440 + C5439) * C5083) *
               C50779 * C50757) *
              C248 +
          (((C3124 + C3123) * C5083 + (C3122 + C3121) * C5080 +
            (C3572 + C3573) * C5084 + (C3574 + C3575) * C5081 +
            (C6401 + C6402) * C5085 + (C6403 + C6404) * C5082) *
               C50779 * C50757 -
           (C6399 * C5082 + C6400 * C5085 + (C3121 + C3122) * C5081 +
            (C3123 + C3124) * C5084 + (C2374 + C2373) * C5080 +
            (C2372 + C2371) * C5083) *
               C50779 * C1544) *
              C249 +
          ((C2395 * C5083 + C2396 * C5080 + (C3120 + C3119) * C5084 +
            (C3118 + C3117) * C5081 + (C3576 + C3577) * C5085 +
            (C3578 + C3579) * C5082) *
               C50779 * C1544 -
           ((C2163 * C4484 + C50633 * C4492 + C2162 * C4485 + C2157 * C4493) *
                C5082 +
            (C2163 * C4480 + C50633 * C4486 + C2162 * C4481 + C2157 * C4487) *
                C5085 +
            (C3579 + C3578) * C5081 + (C3577 + C3576) * C5084 + C4074 * C5080 +
            C4075 * C5083) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C50693 * C50919 -
                   ((C8787 + C8788 + C8789) * C50854 +
                    (C8790 + C8791 + C8792) * C10705 +
                    (C8094 + C8093 + C8092) * C50933 +
                    (C8091 + C8090 + C8089) * C10704) *
                       C50779 * C50693 * C50729) *
                      C50962 +
                  (((C8101 + C8102 + C8103) * C10704 +
                    (C8104 + C8105 + C8106) * C50933 +
                    (C8793 + C8794 + C8795) * C10705 +
                    (C8796 + C8797 + C8798) * C50854) *
                       C50779 * C50693 * C50729 -
                   ((C11064 + C11063 + C11062) * C50854 +
                    (C11061 + C11060 + C11059) * C10705 +
                    (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50933 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C10704) *
                       C50779 * C50693 * C50919) *
                      C50963 +
                  (((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                     C50961 * C132 + C7893 * C126 + C7888 * C138) *
                        C10704 +
                    (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                     C50961 * C146 + C7893 * C137 + C7888 * C147) *
                        C50933 +
                    (C7891 * C395 + C50960 * C409 + C7892 * C394 +
                     C50961 * C408 + C7893 * C402 + C7888 * C420) *
                        C10705 +
                    (C7891 * C405 + C50960 * C425 + C7892 * C404 +
                     C50961 * C424 + C7893 * C421 + C7888 * C432) *
                        C50854) *
                       C50779 * C50693 * C50919 -
                   ((C7893 * C788 + C7888 * C794 + C7892 * C787 +
                     C50961 * C793 + C7891 * C786 + C50960 * C792) *
                        C50854 +
                    (C7893 * C779 + C7888 * C789 + C7892 * C778 +
                     C50961 * C783 + C7891 * C777 + C50960 * C782) *
                        C10705 +
                    (C8422 + C8421 + C8420) * C50933 +
                    (C8419 + C8418 + C8417) * C10704) *
                       C50779 * C50693 * C50729) *
                      C536)) /
                (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                      C50961 * C130 + C7893 * C124 + C7888 * C131) *
                         C10704 +
                     (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                      C50961 * C144 + C7893 * C135 + C7888 * C145) *
                         C50933 +
                     (C11047 + C11048 + C11049) * C10705 +
                     (C11050 + C11051 + C11052) * C50854) *
                        C50779 * C50920 -
                    ((C11053 + C11054 + C11055) * C50854 +
                     (C11056 + C11057 + C11058) * C10705 +
                     (C11052 + C11051 + C11050) * C50933 +
                     (C11049 + C11048 + C11047) * C10704) *
                        C50779 * C50757) *
                       C50919 +
                   (((C8792 + C8791 + C8790) * C10704 +
                     (C8789 + C8788 + C8787) * C50933 +
                     (C9219 + C9220 + C9221) * C10705 +
                     (C9222 + C9223 + C9224) * C50854) *
                        C50779 * C50757 -
                    ((C8787 + C8788 + C8789) * C50854 +
                     (C8790 + C8791 + C8792) * C10705 +
                     (C8094 + C8093 + C8092) * C50933 +
                     (C8091 + C8090 + C8089) * C10704) *
                        C50779 * C50920) *
                       C50729) *
                      C251 +
                  ((((C11059 + C11060 + C11061) * C10704 +
                     (C11062 + C11063 + C11064) * C50933 +
                     (C11065 + C11066 + C11067) * C10705 +
                     (C11068 + C11069 + C11070) * C50854) *
                        C50779 * C50757 -
                    ((C11064 + C11063 + C11062) * C50854 +
                     (C11061 + C11060 + C11059) * C10705 +
                     (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                      C50961 * C145 + C7891 * C134 + C50960 * C144) *
                         C50933 +
                     (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                      C50961 * C131 + C7891 * C123 + C50960 * C130) *
                         C10704) *
                        C50779 * C50920) *
                       C50919 +
                   (((C8101 + C8102 + C8103) * C10704 +
                     (C8104 + C8105 + C8106) * C50933 +
                     (C8793 + C8794 + C8795) * C10705 +
                     (C8796 + C8797 + C8798) * C50854) *
                        C50779 * C50920 -
                    ((C7893 * C1087 + C7888 * C1095 + C7892 * C1088 +
                      C50961 * C1096 + C7891 * C1089 + C50960 * C1097) *
                         C50854 +
                     (C7893 * C1083 + C7888 * C1091 + C7892 * C1084 +
                      C50961 * C1092 + C7891 * C1085 + C50960 * C1093) *
                         C10705 +
                     (C8798 + C8797 + C8796) * C50933 +
                     (C8795 + C8794 + C8793) * C10704) *
                        C50779 * C50757) *
                       C50729) *
                      C50664)) /
                (p * q * std::sqrt(p + q));
    d2ee[47] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C7891 * C397 + C50960 * C411 + C7892 * C396 +
                     C50961 * C410 + C7893 * C395 + C7888 * C409) *
                        C10705 +
                    (C7891 * C407 + C50960 * C427 + C7892 * C406 +
                     C50961 * C426 + C7893 * C405 + C7888 * C425) *
                        C50854) *
                       C50779 * C50693 * C248 -
                   ((C8787 + C8788 + C8789) * C50854 +
                    (C8790 + C8791 + C8792) * C10705 +
                    (C8094 + C8093 + C8092) * C50933 +
                    (C8091 + C8090 + C8089) * C10704) *
                       C50779 * C50693 * C249 +
                   ((C8100 + C8099 + C8098) * C10704 +
                    (C8097 + C8096 + C8095) * C50933 +
                    (C9723 + C9724 + C9725) * C10705 +
                    (C9726 + C9727 + C9728) * C50854) *
                       C50779 * C50693 * C250) *
                      C251 +
                  (((C8101 + C8102 + C8103) * C10704 +
                    (C8104 + C8105 + C8106) * C50933 +
                    (C8793 + C8794 + C8795) * C10705 +
                    (C8796 + C8797 + C8798) * C50854) *
                       C50779 * C50693 * C249 -
                   ((C7893 * C404 + C7888 * C424 + C7892 * C405 +
                     C50961 * C425 + C7891 * C406 + C50960 * C426) *
                        C50854 +
                    (C7893 * C394 + C7888 * C408 + C7892 * C395 +
                     C50961 * C409 + C7891 * C396 + C50960 * C410) *
                        C10705 +
                    (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50933 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C10704) *
                       C50779 * C50693 * C248 -
                   ((C7893 * C1434 + C7888 * C1442 + C7892 * C1435 +
                     C50961 * C1443 + C7891 * C1436 + C50960 * C1444) *
                        C50854 +
                    (C7893 * C1430 + C7888 * C1438 + C7892 * C1431 +
                     C50961 * C1439 + C7891 * C1432 + C50960 * C1440) *
                        C10705 +
                    (C8112 + C8111 + C8110) * C50933 +
                    (C8109 + C8108 + C8107) * C10704) *
                       C50779 * C50693 * C250) *
                      C50664)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                    C50961 * C130 + C7893 * C124 + C7888 * C131) *
                       C10704 +
                   (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                    C50961 * C144 + C7893 * C135 + C7888 * C145) *
                       C50933 +
                   (C7891 * C397 + C50960 * C411 + C7892 * C396 +
                    C50961 * C410 + C7893 * C395 + C7888 * C409) *
                       C10705 +
                   (C7891 * C407 + C50960 * C427 + C7892 * C406 +
                    C50961 * C426 + C7893 * C405 + C7888 * C425) *
                       C50854) *
                      C50779 * C50693 * C50677 * C113 -
                  ((C7893 * C404 + C7888 * C424 + C7892 * C405 + C50961 * C425 +
                    C7891 * C406 + C50960 * C426) *
                       C50854 +
                   (C7893 * C394 + C7888 * C408 + C7892 * C395 + C50961 * C409 +
                    C7891 * C396 + C50960 * C410) *
                       C10705 +
                   (C7893 * C136 + C7888 * C146 + C7892 * C135 + C50961 * C145 +
                    C7891 * C134 + C50960 * C144) *
                       C50933 +
                   (C7893 * C125 + C7888 * C132 + C7892 * C124 + C50961 * C131 +
                    C7891 * C123 + C50960 * C130) *
                       C10704) *
                      C50779 * C50693 * C50677 * C114 +
                  ((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                    C50961 * C132 + C7893 * C126 + C7888 * C138) *
                       C10704 +
                   (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                    C50961 * C146 + C7893 * C137 + C7888 * C147) *
                       C50933 +
                   (C7891 * C395 + C50960 * C409 + C7892 * C394 +
                    C50961 * C408 + C7893 * C402 + C7888 * C420) *
                       C10705 +
                   (C7891 * C405 + C50960 * C425 + C7892 * C404 +
                    C50961 * C424 + C7893 * C421 + C7888 * C432) *
                       C50854) *
                      C50779 * C50693 * C50677 * C115 -
                  ((C7893 * C642 + C7888 * C644 + C7892 * C421 + C50961 * C432 +
                    C7891 * C404 + C50960 * C424) *
                       C50854 +
                   (C7893 * C641 + C7888 * C643 + C7892 * C402 + C50961 * C420 +
                    C7891 * C394 + C50960 * C408) *
                       C10705 +
                   (C7893 * C140 + C7888 * C148 + C7892 * C137 + C50961 * C147 +
                    C7891 * C136 + C50960 * C146) *
                       C50933 +
                   (C7893 * C127 + C7888 * C139 + C7892 * C126 + C50961 * C138 +
                    C7891 * C125 + C50960 * C132) *
                       C10704) *
                      C50779 * C50693 * C50677 * C116)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C391 -
                   ((C11053 + C11054 + C11055) * C50854 +
                    (C11056 + C11057 + C11058) * C10705 +
                    (C11052 + C11051 + C11050) * C50933 +
                    (C11049 + C11048 + C11047) * C10704) *
                       C50779 * C392 +
                   ((C11058 + C11057 + C11056) * C10704 +
                    (C11055 + C11054 + C11053) * C50933 +
                    (C7891 * C1717 + C50960 * C1725 + C7892 * C1716 +
                     C50961 * C1724 + C7893 * C1715 + C7888 * C1723) *
                        C10705 +
                    (C7891 * C1721 + C50960 * C1729 + C7892 * C1720 +
                     C50961 * C1728 + C7893 * C1719 + C7888 * C1727) *
                        C50854) *
                       C50779 * C393) *
                      C50677 * C251 +
                  (((C11059 + C11060 + C11061) * C10704 +
                    (C11062 + C11063 + C11064) * C50933 +
                    (C11065 + C11066 + C11067) * C10705 +
                    (C11068 + C11069 + C11070) * C50854) *
                       C50779 * C392 -
                   ((C11064 + C11063 + C11062) * C50854 +
                    (C11061 + C11060 + C11059) * C10705 +
                    (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50933 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C10704) *
                       C50779 * C391 -
                   ((C7893 * C1718 + C7888 * C1726 + C7892 * C1719 +
                     C50961 * C1727 + C7891 * C1720 + C50960 * C1728) *
                        C50854 +
                    (C7893 * C1714 + C7888 * C1722 + C7892 * C1715 +
                     C50961 * C1723 + C7891 * C1716 + C50960 * C1724) *
                        C10705 +
                    (C11070 + C11069 + C11068) * C50933 +
                    (C11067 + C11066 + C11065) * C10704) *
                       C50779 * C393) *
                      C50677 * C50664)) /
                    (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C50920 -
                   ((C11053 + C11054 + C11055) * C50854 +
                    (C11056 + C11057 + C11058) * C10705 +
                    (C11052 + C11051 + C11050) * C50933 +
                    (C11049 + C11048 + C11047) * C10704) *
                       C50779 * C50757) *
                      C50677 * C50962 +
                  (((C11059 + C11060 + C11061) * C10704 +
                    (C11062 + C11063 + C11064) * C50933 +
                    (C11065 + C11066 + C11067) * C10705 +
                    (C11068 + C11069 + C11070) * C50854) *
                       C50779 * C50757 -
                   ((C11064 + C11063 + C11062) * C50854 +
                    (C11061 + C11060 + C11059) * C10705 +
                    (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50933 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C10704) *
                       C50779 * C50920) *
                      C50677 * C50963 +
                  (((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                     C50961 * C132 + C7893 * C126 + C7888 * C138) *
                        C10704 +
                    (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                     C50961 * C146 + C7893 * C137 + C7888 * C147) *
                        C50933 +
                    (C11375 + C11376 + C11377) * C10705 +
                    (C11378 + C11379 + C11380) * C50854) *
                       C50779 * C50920 -
                   ((C7893 * C422 + C7888 * C433 + C7892 * C419 +
                     C50961 * C431 + C7891 * C418 + C50960 * C430) *
                        C50854 +
                    (C7893 * C403 + C7888 * C423 + C7892 * C401 +
                     C50961 * C415 + C7891 * C400 + C50960 * C414) *
                        C10705 +
                    (C11380 + C11379 + C11378) * C50933 +
                    (C11377 + C11376 + C11375) * C10704) *
                       C50779 * C50757) *
                      C50677 * C536)) /
                (p * q * std::sqrt(p + q));
    d2ee[49] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                    C50961 * C130 + C7893 * C124 + C7888 * C131) *
                       C10704 +
                   (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                    C50961 * C144 + C7893 * C135 + C7888 * C145) *
                       C50933 +
                   (C7891 * C397 + C50960 * C411 + C7892 * C396 +
                    C50961 * C410 + C7893 * C395 + C7888 * C409) *
                       C10705 +
                   (C7891 * C407 + C50960 * C427 + C7892 * C406 +
                    C50961 * C426 + C7893 * C405 + C7888 * C425) *
                       C50854) *
                      C50779 * C50693 * C50677 * C113 -
                  ((C7893 * C404 + C7888 * C424 + C7892 * C405 + C50961 * C425 +
                    C7891 * C406 + C50960 * C426) *
                       C50854 +
                   (C7893 * C394 + C7888 * C408 + C7892 * C395 + C50961 * C409 +
                    C7891 * C396 + C50960 * C410) *
                       C10705 +
                   (C7893 * C136 + C7888 * C146 + C7892 * C135 + C50961 * C145 +
                    C7891 * C134 + C50960 * C144) *
                       C50933 +
                   (C7893 * C125 + C7888 * C132 + C7892 * C124 + C50961 * C131 +
                    C7891 * C123 + C50960 * C130) *
                       C10704) *
                      C50779 * C50693 * C50677 * C114 +
                  ((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                    C50961 * C132 + C7893 * C126 + C7888 * C138) *
                       C10704 +
                   (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                    C50961 * C146 + C7893 * C137 + C7888 * C147) *
                       C50933 +
                   (C7891 * C395 + C50960 * C409 + C7892 * C394 +
                    C50961 * C408 + C7893 * C402 + C7888 * C420) *
                       C10705 +
                   (C7891 * C405 + C50960 * C425 + C7892 * C404 +
                    C50961 * C424 + C7893 * C421 + C7888 * C432) *
                       C50854) *
                      C50779 * C50693 * C50677 * C115 -
                  ((C7893 * C642 + C7888 * C644 + C7892 * C421 + C50961 * C432 +
                    C7891 * C404 + C50960 * C424) *
                       C50854 +
                   (C7893 * C641 + C7888 * C643 + C7892 * C402 + C50961 * C420 +
                    C7891 * C394 + C50960 * C408) *
                       C10705 +
                   (C7893 * C140 + C7888 * C148 + C7892 * C137 + C50961 * C147 +
                    C7891 * C136 + C50960 * C146) *
                       C50933 +
                   (C7893 * C127 + C7888 * C139 + C7892 * C126 + C50961 * C138 +
                    C7891 * C125 + C50960 * C132) *
                       C10704) *
                      C50779 * C50693 * C50677 * C116)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C7891 * C397 + C50960 * C411 + C7892 * C396 +
                     C50961 * C410 + C7893 * C395 + C7888 * C409) *
                        C10705 +
                    (C7891 * C407 + C50960 * C427 + C7892 * C406 +
                     C50961 * C426 + C7893 * C405 + C7888 * C425) *
                        C50854) *
                       C50779 * C50693 * C248 -
                   ((C8787 + C8788 + C8789) * C50854 +
                    (C8790 + C8791 + C8792) * C10705 +
                    (C8094 + C8093 + C8092) * C50933 +
                    (C8091 + C8090 + C8089) * C10704) *
                       C50779 * C50693 * C249 +
                   ((C8100 + C8099 + C8098) * C10704 +
                    (C8097 + C8096 + C8095) * C50933 +
                    (C9723 + C9724 + C9725) * C10705 +
                    (C9726 + C9727 + C9728) * C50854) *
                       C50779 * C50693 * C250) *
                      C251 +
                  (((C8101 + C8102 + C8103) * C10704 +
                    (C8104 + C8105 + C8106) * C50933 +
                    (C8793 + C8794 + C8795) * C10705 +
                    (C8796 + C8797 + C8798) * C50854) *
                       C50779 * C50693 * C249 -
                   ((C7893 * C404 + C7888 * C424 + C7892 * C405 +
                     C50961 * C425 + C7891 * C406 + C50960 * C426) *
                        C50854 +
                    (C7893 * C394 + C7888 * C408 + C7892 * C395 +
                     C50961 * C409 + C7891 * C396 + C50960 * C410) *
                        C10705 +
                    (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50933 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C10704) *
                       C50779 * C50693 * C248 -
                   ((C7893 * C1434 + C7888 * C1442 + C7892 * C1435 +
                     C50961 * C1443 + C7891 * C1436 + C50960 * C1444) *
                        C50854 +
                    (C7893 * C1430 + C7888 * C1438 + C7892 * C1431 +
                     C50961 * C1439 + C7891 * C1432 + C50960 * C1440) *
                        C10705 +
                    (C8112 + C8111 + C8110) * C50933 +
                    (C8109 + C8108 + C8107) * C10704) *
                       C50779 * C50693 * C250) *
                      C50664)) /
                    (p * q * std::sqrt(p + q));
    d2ee[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C50693 * C50964 -
                   ((C8787 + C8788 + C8789) * C50854 +
                    (C8790 + C8791 + C8792) * C10705 +
                    (C8094 + C8093 + C8092) * C50933 +
                    (C8091 + C8090 + C8089) * C10704) *
                       C50779 * C50693 * C50965 +
                   ((C8100 + C8099 + C8098) * C10704 +
                    (C8097 + C8096 + C8095) * C50933 +
                    (C9723 + C9724 + C9725) * C10705 +
                    (C9726 + C9727 + C9728) * C50854) *
                       C50779 * C50693 * C1199) *
                      C50911 +
                  (((C8101 + C8102 + C8103) * C10704 +
                    (C8104 + C8105 + C8106) * C50933 +
                    (C8793 + C8794 + C8795) * C10705 +
                    (C8796 + C8797 + C8798) * C50854) *
                       C50779 * C50693 * C50965 -
                   ((C11064 + C11063 + C11062) * C50854 +
                    (C11061 + C11060 + C11059) * C10705 +
                    (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50933 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C10704) *
                       C50779 * C50693 * C50964 -
                   ((C7893 * C1434 + C7888 * C1442 + C7892 * C1435 +
                     C50961 * C1443 + C7891 * C1436 + C50960 * C1444) *
                        C50854 +
                    (C7893 * C1430 + C7888 * C1438 + C7892 * C1431 +
                     C50961 * C1439 + C7891 * C1432 + C50960 * C1440) *
                        C10705 +
                    (C8112 + C8111 + C8110) * C50933 +
                    (C8109 + C8108 + C8107) * C10704) *
                       C50779 * C50693 * C1199) *
                      C50664)) /
                (p * q * std::sqrt(p + q));
    d2ee[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C50920 -
                   ((C11053 + C11054 + C11055) * C50854 +
                    (C11056 + C11057 + C11058) * C10705 +
                    (C11052 + C11051 + C11050) * C50933 +
                    (C11049 + C11048 + C11047) * C10704) *
                       C50779 * C50757) *
                      C50964 +
                  (((C8792 + C8791 + C8790) * C10704 +
                    (C8789 + C8788 + C8787) * C50933 +
                    (C9219 + C9220 + C9221) * C10705 +
                    (C9222 + C9223 + C9224) * C50854) *
                       C50779 * C50757 -
                   ((C8787 + C8788 + C8789) * C50854 +
                    (C8790 + C8791 + C8792) * C10705 +
                    (C8094 + C8093 + C8092) * C50933 +
                    (C8091 + C8090 + C8089) * C10704) *
                       C50779 * C50920) *
                      C50965 +
                  (((C8100 + C8099 + C8098) * C10704 +
                    (C8097 + C8096 + C8095) * C50933 +
                    (C9723 + C9724 + C9725) * C10705 +
                    (C9726 + C9727 + C9728) * C50854) *
                       C50779 * C50920 -
                   ((C7893 * C2557 + C7888 * C2561 + C7892 * C2556 +
                     C50961 * C2560 + C7891 * C2555 + C50960 * C2559) *
                        C50854 +
                    (C7893 * C2552 + C7888 * C2558 + C7892 * C2551 +
                     C50961 * C2554 + C7891 * C2550 + C50960 * C2553) *
                        C10705 +
                    (C9728 + C9727 + C9726) * C50933 +
                    (C9725 + C9724 + C9723) * C10704) *
                       C50779 * C50757) *
                      C1199) *
                 C50658) /
                (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
            C7893 * C124 + C7888 * C131) *
               C10704 +
           (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
            C7893 * C135 + C7888 * C145) *
               C50933 +
           (C11047 + C11048 + C11049) * C10705 +
           (C11050 + C11051 + C11052) * C50854) *
              C50779 * C50693 * C964 -
          ((C8787 + C8788 + C8789) * C50854 + (C8790 + C8791 + C8792) * C10705 +
           (C8094 + C8093 + C8092) * C50933 +
           (C8091 + C8090 + C8089) * C10704) *
              C50779 * C50693 * C965 +
          ((C8100 + C8099 + C8098) * C10704 + (C8097 + C8096 + C8095) * C50933 +
           (C9723 + C9724 + C9725) * C10705 +
           (C9726 + C9727 + C9728) * C50854) *
              C50779 * C50693 * C966 -
          ((C7893 * C3079 + C7888 * C3083 + C7892 * C3078 + C50961 * C3082 +
            C7891 * C3077 + C50960 * C3081) *
               C50854 +
           (C7893 * C3074 + C7888 * C3080 + C7892 * C3073 + C50961 * C3076 +
            C7891 * C3072 + C50960 * C3075) *
               C10705 +
           (C9060 + C9059 + C9058) * C50933 +
           (C9057 + C9056 + C9055) * C10704) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
             C7893 * C124 + C7888 * C131) *
                C10704 +
            (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
             C7893 * C135 + C7888 * C145) *
                C50933 +
            (C11047 + C11048 + C11049) * C10705 +
            (C11050 + C11051 + C11052) * C50854) *
               C50779 * C50693 * C893 -
           ((C8787 + C8788 + C8789) * C50854 +
            (C8790 + C8791 + C8792) * C10705 +
            (C8094 + C8093 + C8092) * C50933 +
            (C8091 + C8090 + C8089) * C10704) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C8101 + C8102 + C8103) * C10704 +
            (C8104 + C8105 + C8106) * C50933 +
            (C8793 + C8794 + C8795) * C10705 +
            (C8796 + C8797 + C8798) * C50854) *
               C50779 * C50693 * C50729 -
           ((C11064 + C11063 + C11062) * C50854 +
            (C11061 + C11060 + C11059) * C10705 +
            (C7893 * C136 + C7888 * C146 + C7892 * C135 + C50961 * C145 +
             C7891 * C134 + C50960 * C144) *
                C50933 +
            (C7893 * C125 + C7888 * C132 + C7892 * C124 + C50961 * C131 +
             C7891 * C123 + C50960 * C130) *
                C10704) *
               C50779 * C50693 * C893) *
              C896 +
          (((C7891 * C124 + C50960 * C131 + C7892 * C125 + C50961 * C132 +
             C7893 * C126 + C7888 * C138) *
                C10704 +
            (C7891 * C135 + C50960 * C145 + C7892 * C136 + C50961 * C146 +
             C7893 * C137 + C7888 * C147) *
                C50933 +
            (C11375 + C11376 + C11377) * C10705 +
            (C11378 + C11379 + C11380) * C50854) *
               C50779 * C50693 * C893 -
           ((C7893 * C788 + C7888 * C794 + C7892 * C787 + C50961 * C793 +
             C7891 * C786 + C50960 * C792) *
                C50854 +
            (C7893 * C779 + C7888 * C789 + C7892 * C778 + C50961 * C783 +
             C7891 * C777 + C50960 * C782) *
                C10705 +
            (C8422 + C8421 + C8420) * C50933 +
            (C8419 + C8418 + C8417) * C10704) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
             C7893 * C124 + C7888 * C131) *
                C10704 +
            (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
             C7893 * C135 + C7888 * C145) *
                C50933 +
            (C11047 + C11048 + C11049) * C10705 +
            (C11050 + C11051 + C11052) * C50854) *
               C50779 * C391 -
           ((C11053 + C11054 + C11055) * C50854 +
            (C11056 + C11057 + C11058) * C10705 +
            (C11052 + C11051 + C11050) * C50933 +
            (C11049 + C11048 + C11047) * C10704) *
               C50779 * C392 +
           ((C11058 + C11057 + C11056) * C10704 +
            (C11055 + C11054 + C11053) * C50933 +
            (C7891 * C1717 + C50960 * C1725 + C7892 * C1716 + C50961 * C1724 +
             C7893 * C1715 + C7888 * C1723) *
                C10705 +
            (C7891 * C1721 + C50960 * C1729 + C7892 * C1720 + C50961 * C1728 +
             C7893 * C1719 + C7888 * C1727) *
                C50854) *
               C50779 * C393) *
              C893 +
          (((C8792 + C8791 + C8790) * C10704 +
            (C8789 + C8788 + C8787) * C50933 +
            (C9219 + C9220 + C9221) * C10705 +
            (C9222 + C9223 + C9224) * C50854) *
               C50779 * C392 -
           ((C8787 + C8788 + C8789) * C50854 +
            (C8790 + C8791 + C8792) * C10705 +
            (C8094 + C8093 + C8092) * C50933 +
            (C8091 + C8090 + C8089) * C10704) *
               C50779 * C391 -
           ((C7893 * C5977 + C7888 * C5979 + C7892 * C4488 + C50961 * C4494 +
             C7891 * C4489 + C50960 * C4495) *
                C50854 +
            (C7893 * C5976 + C7888 * C5978 + C7892 * C4482 + C50961 * C4490 +
             C7891 * C4483 + C50960 * C4491) *
                C10705 +
            (C9224 + C9223 + C9222) * C50933 +
            (C9221 + C9220 + C9219) * C10704) *
               C50779 * C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[53] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                      C50961 * C130 + C7893 * C124 + C7888 * C131) *
                         C10704 +
                     (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                      C50961 * C144 + C7893 * C135 + C7888 * C145) *
                         C50933 +
                     (C11047 + C11048 + C11049) * C10705 +
                     (C11050 + C11051 + C11052) * C50854) *
                        C50779 * C50920 -
                    ((C11053 + C11054 + C11055) * C50854 +
                     (C11056 + C11057 + C11058) * C10705 +
                     (C11052 + C11051 + C11050) * C50933 +
                     (C11049 + C11048 + C11047) * C10704) *
                        C50779 * C50757) *
                       C893 +
                   (((C8792 + C8791 + C8790) * C10704 +
                     (C8789 + C8788 + C8787) * C50933 +
                     (C9219 + C9220 + C9221) * C10705 +
                     (C9222 + C9223 + C9224) * C50854) *
                        C50779 * C50757 -
                    ((C8787 + C8788 + C8789) * C50854 +
                     (C8790 + C8791 + C8792) * C10705 +
                     (C8094 + C8093 + C8092) * C50933 +
                     (C8091 + C8090 + C8089) * C10704) *
                        C50779 * C50920) *
                       C50729) *
                      C50911 +
                  ((((C11059 + C11060 + C11061) * C10704 +
                     (C11062 + C11063 + C11064) * C50933 +
                     (C11065 + C11066 + C11067) * C10705 +
                     (C11068 + C11069 + C11070) * C50854) *
                        C50779 * C50757 -
                    ((C11064 + C11063 + C11062) * C50854 +
                     (C11061 + C11060 + C11059) * C10705 +
                     (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                      C50961 * C145 + C7891 * C134 + C50960 * C144) *
                         C50933 +
                     (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                      C50961 * C131 + C7891 * C123 + C50960 * C130) *
                         C10704) *
                        C50779 * C50920) *
                       C893 +
                   (((C8101 + C8102 + C8103) * C10704 +
                     (C8104 + C8105 + C8106) * C50933 +
                     (C8793 + C8794 + C8795) * C10705 +
                     (C8796 + C8797 + C8798) * C50854) *
                        C50779 * C50920 -
                    ((C7893 * C1087 + C7888 * C1095 + C7892 * C1088 +
                      C50961 * C1096 + C7891 * C1089 + C50960 * C1097) *
                         C50854 +
                     (C7893 * C1083 + C7888 * C1091 + C7892 * C1084 +
                      C50961 * C1092 + C7891 * C1085 + C50960 * C1093) *
                         C10705 +
                     (C8798 + C8797 + C8796) * C50933 +
                     (C8795 + C8794 + C8793) * C10704) *
                        C50779 * C50757) *
                       C50729) *
                      C50664)) /
                (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
             C7893 * C124 + C7888 * C131) *
                C10704 +
            (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
             C7893 * C135 + C7888 * C145) *
                C50933 +
            (C11047 + C11048 + C11049) * C10705 +
            (C11050 + C11051 + C11052) * C50854) *
               C50779 * C50693 * C893 -
           ((C8787 + C8788 + C8789) * C50854 +
            (C8790 + C8791 + C8792) * C10705 +
            (C8094 + C8093 + C8092) * C50933 +
            (C8091 + C8090 + C8089) * C10704) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C8101 + C8102 + C8103) * C10704 +
            (C8104 + C8105 + C8106) * C50933 +
            (C8793 + C8794 + C8795) * C10705 +
            (C8796 + C8797 + C8798) * C50854) *
               C50779 * C50693 * C50729 -
           ((C11064 + C11063 + C11062) * C50854 +
            (C11061 + C11060 + C11059) * C10705 +
            (C7893 * C136 + C7888 * C146 + C7892 * C135 + C50961 * C145 +
             C7891 * C134 + C50960 * C144) *
                C50933 +
            (C7893 * C125 + C7888 * C132 + C7892 * C124 + C50961 * C131 +
             C7891 * C123 + C50960 * C130) *
                C10704) *
               C50779 * C50693 * C893) *
              C896 +
          (((C7891 * C124 + C50960 * C131 + C7892 * C125 + C50961 * C132 +
             C7893 * C126 + C7888 * C138) *
                C10704 +
            (C7891 * C135 + C50960 * C145 + C7892 * C136 + C50961 * C146 +
             C7893 * C137 + C7888 * C147) *
                C50933 +
            (C11375 + C11376 + C11377) * C10705 +
            (C11378 + C11379 + C11380) * C50854) *
               C50779 * C50693 * C893 -
           ((C7893 * C788 + C7888 * C794 + C7892 * C787 + C50961 * C793 +
             C7891 * C786 + C50960 * C792) *
                C50854 +
            (C7893 * C779 + C7888 * C789 + C7892 * C778 + C50961 * C783 +
             C7891 * C777 + C50960 * C782) *
                C10705 +
            (C8422 + C8421 + C8420) * C50933 +
            (C8419 + C8418 + C8417) * C10704) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7891 * C122 + C50960 * C129 + C7892 * C123 + C50961 * C130 +
            C7893 * C124 + C7888 * C131) *
               C10704 +
           (C7891 * C133 + C50960 * C143 + C7892 * C134 + C50961 * C144 +
            C7893 * C135 + C7888 * C145) *
               C50933 +
           (C11047 + C11048 + C11049) * C10705 +
           (C11050 + C11051 + C11052) * C50854) *
              C50779 * C50693 * C964 -
          ((C8787 + C8788 + C8789) * C50854 + (C8790 + C8791 + C8792) * C10705 +
           (C8094 + C8093 + C8092) * C50933 +
           (C8091 + C8090 + C8089) * C10704) *
              C50779 * C50693 * C965 +
          ((C8100 + C8099 + C8098) * C10704 + (C8097 + C8096 + C8095) * C50933 +
           (C9723 + C9724 + C9725) * C10705 +
           (C9726 + C9727 + C9728) * C50854) *
              C50779 * C50693 * C966 -
          ((C7893 * C3079 + C7888 * C3083 + C7892 * C3078 + C50961 * C3082 +
            C7891 * C3077 + C50960 * C3081) *
               C50854 +
           (C7893 * C3074 + C7888 * C3080 + C7892 * C3073 + C50961 * C3076 +
            C7891 * C3072 + C50960 * C3075) *
               C10705 +
           (C9060 + C9059 + C9058) * C50933 +
           (C9057 + C9056 + C9055) * C10704) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                      C50961 * C130 + C7893 * C124 + C7888 * C131) *
                         C10704 +
                     (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                      C50961 * C144 + C7893 * C135 + C7888 * C145) *
                         C50933 +
                     (C11047 + C11048 + C11049) * C10705 +
                     (C11050 + C11051 + C11052) * C50854) *
                        C50779 * C1544 -
                    ((C11053 + C11054 + C11055) * C50854 +
                     (C11056 + C11057 + C11058) * C10705 +
                     (C11052 + C11051 + C11050) * C50933 +
                     (C11049 + C11048 + C11047) * C10704) *
                        C50779 * C50757) *
                       C50919 +
                   (((C8792 + C8791 + C8790) * C10704 +
                     (C8789 + C8788 + C8787) * C50933 +
                     (C9219 + C9220 + C9221) * C10705 +
                     (C9222 + C9223 + C9224) * C50854) *
                        C50779 * C50757 -
                    ((C8787 + C8788 + C8789) * C50854 +
                     (C8790 + C8791 + C8792) * C10705 +
                     (C8094 + C8093 + C8092) * C50933 +
                     (C8091 + C8090 + C8089) * C10704) *
                        C50779 * C1544) *
                       C50729) *
                      C50911 +
                  ((((C11059 + C11060 + C11061) * C10704 +
                     (C11062 + C11063 + C11064) * C50933 +
                     (C11065 + C11066 + C11067) * C10705 +
                     (C11068 + C11069 + C11070) * C50854) *
                        C50779 * C50757 -
                    ((C11064 + C11063 + C11062) * C50854 +
                     (C11061 + C11060 + C11059) * C10705 +
                     (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                      C50961 * C145 + C7891 * C134 + C50960 * C144) *
                         C50933 +
                     (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                      C50961 * C131 + C7891 * C123 + C50960 * C130) *
                         C10704) *
                        C50779 * C1544) *
                       C50919 +
                   (((C8101 + C8102 + C8103) * C10704 +
                     (C8104 + C8105 + C8106) * C50933 +
                     (C8793 + C8794 + C8795) * C10705 +
                     (C8796 + C8797 + C8798) * C50854) *
                        C50779 * C1544 -
                    ((C7893 * C1087 + C7888 * C1095 + C7892 * C1088 +
                      C50961 * C1096 + C7891 * C1089 + C50960 * C1097) *
                         C50854 +
                     (C7893 * C1083 + C7888 * C1091 + C7892 * C1084 +
                      C50961 * C1092 + C7891 * C1085 + C50960 * C1093) *
                         C10705 +
                     (C8798 + C8797 + C8796) * C50933 +
                     (C8795 + C8794 + C8793) * C10704) *
                        C50779 * C50757) *
                       C50729) *
                      C50664)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C50966 -
                   ((C11053 + C11054 + C11055) * C50854 +
                    (C11056 + C11057 + C11058) * C10705 +
                    (C11052 + C11051 + C11050) * C50933 +
                    (C11049 + C11048 + C11047) * C10704) *
                       C50779 * C50967 +
                   ((C11058 + C11057 + C11056) * C10704 +
                    (C11055 + C11054 + C11053) * C50933 +
                    (C12853 + C12854 + C12855) * C10705 +
                    (C12856 + C12857 + C12858) * C50854) *
                       C50779 * C1960) *
                      C50919 +
                  (((C8792 + C8791 + C8790) * C10704 +
                    (C8789 + C8788 + C8787) * C50933 +
                    (C9219 + C9220 + C9221) * C10705 +
                    (C9222 + C9223 + C9224) * C50854) *
                       C50779 * C50967 -
                   ((C8787 + C8788 + C8789) * C50854 +
                    (C8790 + C8791 + C8792) * C10705 +
                    (C8094 + C8093 + C8092) * C50933 +
                    (C8091 + C8090 + C8089) * C10704) *
                       C50779 * C50966 -
                   ((C7893 * C5977 + C7888 * C5979 + C7892 * C4488 +
                     C50961 * C4494 + C7891 * C4489 + C50960 * C4495) *
                        C50854 +
                    (C7893 * C5976 + C7888 * C5978 + C7892 * C4482 +
                     C50961 * C4490 + C7891 * C4483 + C50960 * C4491) *
                        C10705 +
                    (C9224 + C9223 + C9222) * C50933 +
                    (C9221 + C9220 + C9219) * C10704) *
                       C50779 * C1960) *
                      C50729) *
                 C50658) /
                (p * q * std::sqrt(p + q));
    d2ee[57] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C1544 -
                   ((C11053 + C11054 + C11055) * C50854 +
                    (C11056 + C11057 + C11058) * C10705 +
                    (C11052 + C11051 + C11050) * C50933 +
                    (C11049 + C11048 + C11047) * C10704) *
                       C50779 * C50757) *
                      C248 +
                  (((C8792 + C8791 + C8790) * C10704 +
                    (C8789 + C8788 + C8787) * C50933 +
                    (C9219 + C9220 + C9221) * C10705 +
                    (C9222 + C9223 + C9224) * C50854) *
                       C50779 * C50757 -
                   ((C8787 + C8788 + C8789) * C50854 +
                    (C8790 + C8791 + C8792) * C10705 +
                    (C8094 + C8093 + C8092) * C50933 +
                    (C8091 + C8090 + C8089) * C10704) *
                       C50779 * C1544) *
                      C249 +
                  (((C8100 + C8099 + C8098) * C10704 +
                    (C8097 + C8096 + C8095) * C50933 +
                    (C9723 + C9724 + C9725) * C10705 +
                    (C9726 + C9727 + C9728) * C50854) *
                       C50779 * C1544 -
                   ((C7893 * C2557 + C7888 * C2561 + C7892 * C2556 +
                     C50961 * C2560 + C7891 * C2555 + C50960 * C2559) *
                        C50854 +
                    (C7893 * C2552 + C7888 * C2558 + C7892 * C2551 +
                     C50961 * C2554 + C7891 * C2550 + C50960 * C2553) *
                        C10705 +
                    (C9728 + C9727 + C9726) * C50933 +
                    (C9725 + C9724 + C9723) * C10704) *
                       C50779 * C50757) *
                      C250) *
                 C50658) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C1544 -
                   ((C11053 + C11054 + C11055) * C50854 +
                    (C11056 + C11057 + C11058) * C10705 +
                    (C11052 + C11051 + C11050) * C50933 +
                    (C11049 + C11048 + C11047) * C10704) *
                       C50779 * C50757) *
                      C50677 * C895 +
                  (((C11059 + C11060 + C11061) * C10704 +
                    (C11062 + C11063 + C11064) * C50933 +
                    (C11065 + C11066 + C11067) * C10705 +
                    (C11068 + C11069 + C11070) * C50854) *
                       C50779 * C50757 -
                   ((C11064 + C11063 + C11062) * C50854 +
                    (C11061 + C11060 + C11059) * C10705 +
                    (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50933 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C10704) *
                       C50779 * C1544) *
                      C50677 * C896 +
                  (((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                     C50961 * C132 + C7893 * C126 + C7888 * C138) *
                        C10704 +
                    (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                     C50961 * C146 + C7893 * C137 + C7888 * C147) *
                        C50933 +
                    (C11375 + C11376 + C11377) * C10705 +
                    (C11378 + C11379 + C11380) * C50854) *
                       C50779 * C1544 -
                   ((C7893 * C422 + C7888 * C433 + C7892 * C419 +
                     C50961 * C431 + C7891 * C418 + C50960 * C430) *
                        C50854 +
                    (C7893 * C403 + C7888 * C423 + C7892 * C401 +
                     C50961 * C415 + C7891 * C400 + C50960 * C414) *
                        C10705 +
                    (C11380 + C11379 + C11378) * C50933 +
                    (C11377 + C11376 + C11375) * C10704) *
                       C50779 * C50757) *
                      C50677 * C897)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                    C50961 * C130 + C7893 * C124 + C7888 * C131) *
                       C10704 +
                   (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                    C50961 * C144 + C7893 * C135 + C7888 * C145) *
                       C50933 +
                   (C11047 + C11048 + C11049) * C10705 +
                   (C11050 + C11051 + C11052) * C50854) *
                      C50779 * C1710 -
                  ((C11053 + C11054 + C11055) * C50854 +
                   (C11056 + C11057 + C11058) * C10705 +
                   (C11052 + C11051 + C11050) * C50933 +
                   (C11049 + C11048 + C11047) * C10704) *
                      C50779 * C1711 +
                  ((C11058 + C11057 + C11056) * C10704 +
                   (C11055 + C11054 + C11053) * C50933 +
                   (C12853 + C12854 + C12855) * C10705 +
                   (C12856 + C12857 + C12858) * C50854) *
                      C50779 * C1712 -
                  ((C7893 * C5385 + C7888 * C5389 + C7892 * C5384 +
                    C50961 * C5388 + C7891 * C5383 + C50960 * C5387) *
                       C50854 +
                   (C7893 * C5380 + C7888 * C5386 + C7892 * C5379 +
                    C50961 * C5382 + C7891 * C5378 + C50960 * C5381) *
                       C10705 +
                   (C12858 + C12857 + C12856) * C50933 +
                   (C12855 + C12854 + C12853) * C10704) *
                      C50779 * C1713) *
                 C50677 * C50658) /
                    (p * q * std::sqrt(p + q));
    d2ee[58] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C50966 -
                   ((C11053 + C11054 + C11055) * C50854 +
                    (C11056 + C11057 + C11058) * C10705 +
                    (C11052 + C11051 + C11050) * C50933 +
                    (C11049 + C11048 + C11047) * C10704) *
                       C50779 * C50967 +
                   ((C11058 + C11057 + C11056) * C10704 +
                    (C11055 + C11054 + C11053) * C50933 +
                    (C12853 + C12854 + C12855) * C10705 +
                    (C12856 + C12857 + C12858) * C50854) *
                       C50779 * C1960) *
                      C50677 * C50911 +
                  (((C11059 + C11060 + C11061) * C10704 +
                    (C11062 + C11063 + C11064) * C50933 +
                    (C11065 + C11066 + C11067) * C10705 +
                    (C11068 + C11069 + C11070) * C50854) *
                       C50779 * C50967 -
                   ((C11064 + C11063 + C11062) * C50854 +
                    (C11061 + C11060 + C11059) * C10705 +
                    (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50933 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C10704) *
                       C50779 * C50966 -
                   ((C7893 * C1718 + C7888 * C1726 + C7892 * C1719 +
                     C50961 * C1727 + C7891 * C1720 + C50960 * C1728) *
                        C50854 +
                    (C7893 * C1714 + C7888 * C1722 + C7892 * C1715 +
                     C50961 * C1723 + C7891 * C1716 + C50960 * C1724) *
                        C10705 +
                    (C11070 + C11069 + C11068) * C50933 +
                    (C11067 + C11066 + C11065) * C10704) *
                       C50779 * C1960) *
                      C50677 * C50664)) /
                (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C1544 -
                   ((C11053 + C11054 + C11055) * C50854 +
                    (C11056 + C11057 + C11058) * C10705 +
                    (C11052 + C11051 + C11050) * C50933 +
                    (C11049 + C11048 + C11047) * C10704) *
                       C50779 * C50757) *
                      C50677 * C895 +
                  (((C11059 + C11060 + C11061) * C10704 +
                    (C11062 + C11063 + C11064) * C50933 +
                    (C11065 + C11066 + C11067) * C10705 +
                    (C11068 + C11069 + C11070) * C50854) *
                       C50779 * C50757 -
                   ((C11064 + C11063 + C11062) * C50854 +
                    (C11061 + C11060 + C11059) * C10705 +
                    (C7893 * C136 + C7888 * C146 + C7892 * C135 +
                     C50961 * C145 + C7891 * C134 + C50960 * C144) *
                        C50933 +
                    (C7893 * C125 + C7888 * C132 + C7892 * C124 +
                     C50961 * C131 + C7891 * C123 + C50960 * C130) *
                        C10704) *
                       C50779 * C1544) *
                      C50677 * C896 +
                  (((C7891 * C124 + C50960 * C131 + C7892 * C125 +
                     C50961 * C132 + C7893 * C126 + C7888 * C138) *
                        C10704 +
                    (C7891 * C135 + C50960 * C145 + C7892 * C136 +
                     C50961 * C146 + C7893 * C137 + C7888 * C147) *
                        C50933 +
                    (C11375 + C11376 + C11377) * C10705 +
                    (C11378 + C11379 + C11380) * C50854) *
                       C50779 * C1544 -
                   ((C7893 * C422 + C7888 * C433 + C7892 * C419 +
                     C50961 * C431 + C7891 * C418 + C50960 * C430) *
                        C50854 +
                    (C7893 * C403 + C7888 * C423 + C7892 * C401 +
                     C50961 * C415 + C7891 * C400 + C50960 * C414) *
                        C10705 +
                    (C11380 + C11379 + C11378) * C50933 +
                    (C11377 + C11376 + C11375) * C10704) *
                       C50779 * C50757) *
                      C50677 * C897)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C7891 * C122 + C50960 * C129 + C7892 * C123 +
                     C50961 * C130 + C7893 * C124 + C7888 * C131) *
                        C10704 +
                    (C7891 * C133 + C50960 * C143 + C7892 * C134 +
                     C50961 * C144 + C7893 * C135 + C7888 * C145) *
                        C50933 +
                    (C11047 + C11048 + C11049) * C10705 +
                    (C11050 + C11051 + C11052) * C50854) *
                       C50779 * C1544 -
                   ((C11053 + C11054 + C11055) * C50854 +
                    (C11056 + C11057 + C11058) * C10705 +
                    (C11052 + C11051 + C11050) * C50933 +
                    (C11049 + C11048 + C11047) * C10704) *
                       C50779 * C50757) *
                      C248 +
                  (((C8792 + C8791 + C8790) * C10704 +
                    (C8789 + C8788 + C8787) * C50933 +
                    (C9219 + C9220 + C9221) * C10705 +
                    (C9222 + C9223 + C9224) * C50854) *
                       C50779 * C50757 -
                   ((C8787 + C8788 + C8789) * C50854 +
                    (C8790 + C8791 + C8792) * C10705 +
                    (C8094 + C8093 + C8092) * C50933 +
                    (C8091 + C8090 + C8089) * C10704) *
                       C50779 * C1544) *
                      C249 +
                  (((C8100 + C8099 + C8098) * C10704 +
                    (C8097 + C8096 + C8095) * C50933 +
                    (C9723 + C9724 + C9725) * C10705 +
                    (C9726 + C9727 + C9728) * C50854) *
                       C50779 * C1544 -
                   ((C7893 * C2557 + C7888 * C2561 + C7892 * C2556 +
                     C50961 * C2560 + C7891 * C2555 + C50960 * C2559) *
                        C50854 +
                    (C7893 * C2552 + C7888 * C2558 + C7892 * C2551 +
                     C50961 * C2554 + C7891 * C2550 + C50960 * C2553) *
                        C10705 +
                    (C9728 + C9727 + C9726) * C50933 +
                    (C9725 + C9724 + C9723) * C10704) *
                       C50779 * C50757) *
                      C250) *
                 C50658) /
                    (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C50919 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C50729) *
              C50962 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C50729 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C50919) *
              C50963 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C50693 * C50919 -
           ((C120 * C538 + C108 * C540 + C119 * C280 + C107 * C291 +
             C118 * C263 + C106 * C283 + C117 * C264 + C105 * C284) *
                C50790 +
            (C120 * C537 + C108 * C539 + C119 * C261 + C107 * C279 +
             C118 * C253 + C106 * C267 + C117 * C254 + C105 * C268) *
                C121) *
               C50779 * C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C50919 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C50729) *
              C50962 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C50729 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C50919) *
              C50963 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C50693 * C50919 -
           (((C2163 * C973 + C50633 * C981 + C2162 * C974 + C2157 * C982) *
                 C50790 +
             (C2163 * C969 + C50633 * C977 + C2162 * C970 + C2157 * C978) *
                 C121) *
                C2161 +
            ((C2732 + C2731) * C50790 + (C2730 + C2729) * C121) * C2160 +
            ((C2728 + C2727) * C50790 + (C2726 + C2725) * C121) * C2159) *
               C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
              C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                 C121 +
             (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
              C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                 C50790) *
                C50779 * C50920 -
            ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
              C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                 C50790 +
             (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
              C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                 C121) *
                C50779 * C50757) *
               C50919 +
           (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
              C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                 C121 +
             (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
              C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
              C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                 C50790 +
             (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
              C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                 C121) *
                C50779 * C50920) *
               C50729) *
              C251 +
          ((((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
              C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                 C121 +
             (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
              C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50790 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C121) *
                C50779 * C50920) *
               C50919 +
           (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
              C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                 C121 +
             (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
              C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                 C50790) *
                C50779 * C50920 -
            ((C120 * C788 + C108 * C794 + C119 * C787 + C107 * C793 +
              C118 * C786 + C106 * C792 + C117 * C785 + C105 * C791) *
                 C50790 +
             (C120 * C779 + C108 * C789 + C119 * C778 + C107 * C783 +
              C118 * C777 + C106 * C782 + C117 * C776 + C105 * C781) *
                 C121) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                  C121 +
              (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                  C50790) *
                 C2159 +
             ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
             C2403 * C2161) *
                C50920 -
            (((C3117 + C3118) * C50790 + (C3119 + C3120) * C121) * C2161 +
             ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
             ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                  C50790 +
              (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                  C121) *
                 C2159) *
                C50757) *
               C50919 +
           ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
             ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
             ((C2162 * C3072 + C2157 * C3075 + C2163 * C3073 + C50633 * C3076) *
                  C121 +
              (C2162 * C3077 + C2157 * C3081 + C2163 * C3078 + C50633 * C3082) *
                  C50790) *
                 C2161) *
                C50757 -
            (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
             ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
             ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
                C50920) *
               C50729) *
              C251 +
          (((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                  C121 +
              (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                  C50790) *
                 C2159 +
             ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
             ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
                C50757 -
            (C2404 * C2161 +
             ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
             ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                  C50790 +
              (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                  C121) *
                 C2159) *
                C50920) *
               C50919 +
           ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
             ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
             ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
                C50920 -
            (((C2163 * C3079 + C50633 * C3083 + C2162 * C3078 + C2157 * C3082) *
                  C50790 +
              (C2163 * C3074 + C50633 * C3080 + C2162 * C3073 + C2157 * C3076) *
                  C121) *
                 C2161 +
             ((C3132 + C3131) * C50790 + (C3130 + C3129) * C121) * C2160 +
             ((C3128 + C3127) * C50790 + (C3126 + C3125) * C121) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C248 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C249 +
           ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C50693 * C250) *
              C251 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C249 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C248 -
           ((C120 * C281 + C108 * C292 + C119 * C278 + C107 * C290 +
             C118 * C277 + C106 * C289 + C117 * C276 + C105 * C288) *
                C50790 +
            (C120 * C262 + C108 * C282 + C119 * C260 + C107 * C274 +
             C118 * C259 + C106 * C273 + C117 * C258 + C105 * C272) *
                C121) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50790) *
              C50779 * C50693 * C50677 * C113 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50790 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50779 * C50693 * C50677 * C114 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50790) *
              C50779 * C50693 * C50677 * C115 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50790 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C391 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C392 +
           ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
             C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
                C121 +
            (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
             C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
                C50790) *
               C50779 * C393) *
              C50677 * C251 +
          (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
             C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                C121 +
            (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
             C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                C50790) *
               C50779 * C392 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C391 -
           ((C120 * C422 + C108 * C433 + C119 * C419 + C107 * C431 +
             C118 * C418 + C106 * C430 + C117 * C417 + C105 * C429) *
                C50790 +
            (C120 * C403 + C108 * C423 + C119 * C401 + C107 * C415 +
             C118 * C400 + C106 * C414 + C117 * C399 + C105 * C413) *
                C121) *
               C50779 * C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2162 * C256 + C2157 * C270 + C2163 * C255 + C50633 * C269) *
                C121 +
            (C2162 * C266 + C2157 * C286 + C2163 * C265 + C50633 * C285) *
                C50790) *
               C2160 +
           ((C2162 * C257 + C2157 * C271 + C2163 * C258 + C50633 * C272) *
                C121 +
            (C2162 * C275 + C2157 * C287 + C2163 * C276 + C50633 * C288) *
                C50790) *
               C2161) *
              C50693 * C50677 * C113 -
          (((C2163 * C277 + C50633 * C289 + C2162 * C276 + C2157 * C288) *
                C50790 +
            (C2163 * C259 + C50633 * C273 + C2162 * C258 + C2157 * C272) *
                C121) *
               C2161 +
           ((C2163 * C264 + C50633 * C284 + C2162 * C265 + C2157 * C285) *
                C50790 +
            (C2163 * C254 + C50633 * C268 + C2162 * C255 + C2157 * C269) *
                C121) *
               C2160 +
           ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C50790 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C121) *
               C2159) *
              C50693 * C50677 * C114 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C121 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C50790) *
               C2159 +
           ((C2162 * C254 + C2157 * C268 + C2163 * C253 + C50633 * C267) *
                C121 +
            (C2162 * C264 + C2157 * C284 + C2163 * C263 + C50633 * C283) *
                C50790) *
               C2160 +
           ((C2162 * C259 + C2157 * C273 + C2163 * C260 + C50633 * C274) *
                C121 +
            (C2162 * C277 + C2157 * C289 + C2163 * C278 + C50633 * C290) *
                C50790) *
               C2161) *
              C50693 * C50677 * C115 -
          (((C2163 * C281 + C50633 * C292 + C2162 * C278 + C2157 * C290) *
                C50790 +
            (C2163 * C262 + C50633 * C282 + C2162 * C260 + C2157 * C274) *
                C121) *
               C2161 +
           ((C2163 * C280 + C50633 * C291 + C2162 * C263 + C2157 * C283) *
                C50790 +
            (C2163 * C261 + C50633 * C279 + C2162 * C253 + C2157 * C267) *
                C121) *
               C2160 +
           ((C2163 * C137 + C50633 * C147 + C2162 * C136 + C2157 * C146) *
                C50790 +
            (C2163 * C126 + C50633 * C138 + C2162 * C125 + C2157 * C132) *
                C121) *
               C2159) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C248 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C249 +
           (C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C2162 * C2310 + C2157 * C2313 + C2163 * C2311 + C50633 * C2314) *
                 C121 +
             (C2162 * C2315 + C2157 * C2319 + C2163 * C2316 + C50633 * C2320) *
                 C50790) *
                C2161) *
               C50693 * C250) *
              C251 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C249 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C248 -
           (((C2163 * C2317 + C50633 * C2321 + C2162 * C2316 + C2157 * C2320) *
                 C50790 +
             (C2163 * C2312 + C50633 * C2318 + C2162 * C2311 + C2157 * C2314) *
                 C121) *
                C2161 +
            ((C2394 + C2393) * C50790 + (C2392 + C2391) * C121) * C2160 +
            C2404 * C2159) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C391 -
           (((C2163 * C1436 + C50633 * C1444 + C2162 * C1437 + C2157 * C1445) *
                 C50790 +
             (C2163 * C1432 + C50633 * C1440 + C2162 * C1433 + C2157 * C1441) *
                 C121) *
                C2161 +
            ((C2163 * C785 + C50633 * C791 + C2162 * C784 + C2157 * C790) *
                 C50790 +
             (C2163 * C776 + C50633 * C781 + C2162 * C775 + C2157 * C780) *
                 C121) *
                C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C392 +
           (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                 C121 +
             (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                 C50790) *
                C2159 +
            ((C2162 * C1086 + C2157 * C1094 + C2163 * C1085 + C50633 * C1093) *
                 C121 +
             (C2162 * C1090 + C2157 * C1098 + C2163 * C1089 + C50633 * C1097) *
                 C50790) *
                C2160 +
            ((C2162 * C2550 + C2157 * C2553 + C2163 * C2551 + C50633 * C2554) *
                 C121 +
             (C2162 * C2555 + C2157 * C2559 + C2163 * C2556 + C50633 * C2560) *
                 C50790) *
                C2161) *
               C393) *
              C50677 * C251 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C2162 * C776 + C2157 * C781 + C2163 * C777 + C50633 * C782) *
                 C121 +
             (C2162 * C785 + C2157 * C791 + C2163 * C786 + C50633 * C792) *
                 C50790) *
                C2160 +
            ((C2162 * C1432 + C2157 * C1440 + C2163 * C1431 + C50633 * C1439) *
                 C121 +
             (C2162 * C1436 + C2157 * C1444 + C2163 * C1435 + C50633 * C1443) *
                 C50790) *
                C2161) *
               C392 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C391 -
           (((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                 C50790 +
             (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                 C121) *
                C2161 +
            ((C2163 * C1088 + C50633 * C1096 + C2162 * C1089 + C2157 * C1097) *
                 C50790 +
             (C2163 * C1084 + C50633 * C1092 + C2162 * C1085 + C2157 * C1093) *
                 C121) *
                C2160 +
            ((C2163 * C418 + C50633 * C430 + C2162 * C417 + C2157 * C429) *
                 C50790 +
             (C2163 * C400 + C50633 * C414 + C2162 * C399 + C2157 * C413) *
                 C121) *
                C2159) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50920 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C50677 * C50962 +
          (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
             C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                C121 +
            (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
             C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50920) *
              C50677 * C50963 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C50920 -
           ((C120 * C642 + C108 * C644 + C119 * C421 + C107 * C432 +
             C118 * C404 + C106 * C424 + C117 * C405 + C105 * C425) *
                C50790 +
            (C120 * C641 + C108 * C643 + C119 * C402 + C107 * C420 +
             C118 * C394 + C106 * C408 + C117 * C395 + C105 * C409) *
                C121) *
               C50779 * C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50920 -
           (((C2163 * C1436 + C50633 * C1444 + C2162 * C1437 + C2157 * C1445) *
                 C50790 +
             (C2163 * C1432 + C50633 * C1440 + C2162 * C1433 + C2157 * C1441) *
                 C121) *
                C2161 +
            ((C2163 * C785 + C50633 * C791 + C2162 * C784 + C2157 * C790) *
                 C50790 +
             (C2163 * C776 + C50633 * C781 + C2162 * C775 + C2157 * C780) *
                 C121) *
                C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C50962 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C2162 * C776 + C2157 * C781 + C2163 * C777 + C50633 * C782) *
                 C121 +
             (C2162 * C785 + C2157 * C791 + C2163 * C786 + C50633 * C792) *
                 C50790) *
                C2160 +
            ((C2162 * C1432 + C2157 * C1440 + C2163 * C1431 + C50633 * C1439) *
                 C121 +
             (C2162 * C1436 + C2157 * C1444 + C2163 * C1435 + C50633 * C1443) *
                 C50790) *
                C2161) *
               C50757 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50920) *
              C50677 * C50963 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C50920 -
           (((C2163 * C1434 + C50633 * C1442 + C2162 * C1435 + C2157 * C1443) *
                 C50790 +
             (C2163 * C1430 + C50633 * C1438 + C2162 * C1431 + C2157 * C1439) *
                 C121) *
                C2161 +
            ((C2163 * C787 + C50633 * C793 + C2162 * C786 + C2157 * C792) *
                 C50790 +
             (C2163 * C778 + C50633 * C783 + C2162 * C777 + C2157 * C782) *
                 C121) *
                C2160 +
            ((C2163 * C404 + C50633 * C424 + C2162 * C405 + C2157 * C425) *
                 C50790 +
             (C2163 * C394 + C50633 * C408 + C2162 * C395 + C2157 * C409) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50790) *
              C50779 * C50693 * C50677 * C113 -
          ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
            C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
               C50790 +
           (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
            C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
               C121) *
              C50779 * C50693 * C50677 * C114 +
          ((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
            C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
               C121 +
           (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
            C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
               C50790) *
              C50779 * C50693 * C50677 * C115 -
          ((C120 * C141 + C108 * C149 + C119 * C140 + C107 * C148 +
            C118 * C137 + C106 * C147 + C117 * C136 + C105 * C146) *
               C50790 +
           (C120 * C128 + C108 * C142 + C119 * C127 + C107 * C139 +
            C118 * C126 + C106 * C138 + C117 * C125 + C105 * C132) *
               C121) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C248 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C249 +
           ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C50693 * C250) *
              C251 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C249 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C248 -
           ((C120 * C281 + C108 * C292 + C119 * C278 + C107 * C290 +
             C118 * C277 + C106 * C289 + C117 * C276 + C105 * C288) *
                C50790 +
            (C120 * C262 + C108 * C282 + C119 * C260 + C107 * C274 +
             C118 * C259 + C106 * C273 + C117 * C258 + C105 * C272) *
                C121) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2162 * C256 + C2157 * C270 + C2163 * C255 + C50633 * C269) *
                C121 +
            (C2162 * C266 + C2157 * C286 + C2163 * C265 + C50633 * C285) *
                C50790) *
               C2160 +
           ((C2162 * C257 + C2157 * C271 + C2163 * C258 + C50633 * C272) *
                C121 +
            (C2162 * C275 + C2157 * C287 + C2163 * C276 + C50633 * C288) *
                C50790) *
               C2161) *
              C50693 * C50677 * C113 -
          (((C2163 * C277 + C50633 * C289 + C2162 * C276 + C2157 * C288) *
                C50790 +
            (C2163 * C259 + C50633 * C273 + C2162 * C258 + C2157 * C272) *
                C121) *
               C2161 +
           ((C2163 * C264 + C50633 * C284 + C2162 * C265 + C2157 * C285) *
                C50790 +
            (C2163 * C254 + C50633 * C268 + C2162 * C255 + C2157 * C269) *
                C121) *
               C2160 +
           ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                C50790 +
            (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                C121) *
               C2159) *
              C50693 * C50677 * C114 +
          (((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                C121 +
            (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                C50790) *
               C2159 +
           ((C2162 * C254 + C2157 * C268 + C2163 * C253 + C50633 * C267) *
                C121 +
            (C2162 * C264 + C2157 * C284 + C2163 * C263 + C50633 * C283) *
                C50790) *
               C2160 +
           ((C2162 * C259 + C2157 * C273 + C2163 * C260 + C50633 * C274) *
                C121 +
            (C2162 * C277 + C2157 * C289 + C2163 * C278 + C50633 * C290) *
                C50790) *
               C2161) *
              C50693 * C50677 * C115 -
          (((C2163 * C281 + C50633 * C292 + C2162 * C278 + C2157 * C290) *
                C50790 +
            (C2163 * C262 + C50633 * C282 + C2162 * C260 + C2157 * C274) *
                C121) *
               C2161 +
           ((C2163 * C280 + C50633 * C291 + C2162 * C263 + C2157 * C283) *
                C50790 +
            (C2163 * C261 + C50633 * C279 + C2162 * C253 + C2157 * C267) *
                C121) *
               C2160 +
           ((C2163 * C137 + C50633 * C147 + C2162 * C136 + C2157 * C146) *
                C50790 +
            (C2163 * C126 + C50633 * C138 + C2162 * C125 + C2157 * C132) *
                C121) *
               C2159) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C248 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C249 +
           (C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C2162 * C2310 + C2157 * C2313 + C2163 * C2311 + C50633 * C2314) *
                 C121 +
             (C2162 * C2315 + C2157 * C2319 + C2163 * C2316 + C50633 * C2320) *
                 C50790) *
                C2161) *
               C50693 * C250) *
              C251 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C249 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C248 -
           (((C2163 * C2317 + C50633 * C2321 + C2162 * C2316 + C2157 * C2320) *
                 C50790 +
             (C2163 * C2312 + C50633 * C2318 + C2162 * C2311 + C2157 * C2314) *
                 C121) *
                C2161 +
            ((C2394 + C2393) * C50790 + (C2392 + C2391) * C121) * C2160 +
            C2404 * C2159) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C50964 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C50965 +
           ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C50693 * C1199) *
              C50911 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C50965 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C50964 -
           ((C120 * C281 + C108 * C292 + C119 * C278 + C107 * C290 +
             C118 * C277 + C106 * C289 + C117 * C276 + C105 * C288) *
                C50790 +
            (C120 * C262 + C108 * C282 + C119 * C260 + C107 * C274 +
             C118 * C259 + C106 * C273 + C117 * C258 + C105 * C272) *
                C121) *
               C50779 * C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C50964 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C50965 +
           (C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
               C50693 * C1199) *
              C50911 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C50965 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C50964 -
           (((C2163 * C2317 + C50633 * C2321 + C2162 * C2316 + C2157 * C2320) *
                 C50790 +
             (C2163 * C2312 + C50633 * C2318 + C2162 * C2311 + C2157 * C2314) *
                 C121) *
                C2161 +
            ((C2394 + C2393) * C50790 + (C2392 + C2391) * C121) * C2160 +
            C2404 * C2159) *
               C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50920 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C50964 +
          (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
             C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                C121 +
            (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
             C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50920) *
              C50965 +
          (((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C50920 -
           ((C120 * C1434 + C108 * C1442 + C119 * C1435 + C107 * C1443 +
             C118 * C1436 + C106 * C1444 + C117 * C1437 + C105 * C1445) *
                C50790 +
            (C120 * C1430 + C108 * C1438 + C119 * C1431 + C107 * C1439 +
             C118 * C1432 + C106 * C1440 + C117 * C1433 + C105 * C1441) *
                C121) *
               C50779 * C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50920 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C50964 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
               C50757 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50920) *
              C50965 +
          ((C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
               C50920 -
           (((C2163 * C4067 + C50633 * C4071 + C2162 * C4068 + C2157 * C4072) *
                 C50790 +
             (C2163 * C4065 + C50633 * C4069 + C2162 * C4066 + C2157 * C4070) *
                 C121) *
                C2161 +
            ((C4089 + C4088) * C50790 + (C4087 + C4086) * C121) * C2160 +
            C4090 * C2159) *
               C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50790) *
              C50779 * C50693 * C964 -
          ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
            C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
               C50790 +
           (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
            C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
               C121) *
              C50779 * C50693 * C965 +
          ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
            C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
               C121 +
           (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
            C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
               C50790) *
              C50779 * C50693 * C966 -
          ((C120 * C973 + C108 * C981 + C119 * C974 + C107 * C982 +
            C118 * C975 + C106 * C983 + C117 * C976 + C105 * C984) *
               C50790 +
           (C120 * C969 + C108 * C977 + C119 * C970 + C107 * C978 +
            C118 * C971 + C106 * C979 + C117 * C972 + C105 * C980) *
               C121) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C893 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C50729 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C893) *
              C896 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C50693 * C893 -
           ((C120 * C538 + C108 * C540 + C119 * C280 + C107 * C291 +
             C118 * C263 + C106 * C283 + C117 * C264 + C105 * C284) *
                C50790 +
            (C120 * C537 + C108 * C539 + C119 * C261 + C107 * C279 +
             C118 * C253 + C106 * C267 + C117 * C254 + C105 * C268) *
                C121) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C391 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C392 +
           ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
             C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
                C121 +
            (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
             C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
                C50790) *
               C50779 * C393) *
              C893 +
          (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
             C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                C121 +
            (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
             C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                C50790) *
               C50779 * C392 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C391 -
           ((C120 * C1087 + C108 * C1095 + C119 * C1088 + C107 * C1096 +
             C118 * C1089 + C106 * C1097 + C117 * C1090 + C105 * C1098) *
                C50790 +
            (C120 * C1083 + C108 * C1091 + C119 * C1084 + C107 * C1092 +
             C118 * C1085 + C106 * C1093 + C117 * C1086 + C105 * C1094) *
                C121) *
               C50779 * C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C893 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C50729) *
              C895 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C50729 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C893) *
              C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C50693 * C893 -
           (((C2163 * C973 + C50633 * C981 + C2162 * C974 + C2157 * C982) *
                 C50790 +
             (C2163 * C969 + C50633 * C977 + C2162 * C970 + C2157 * C978) *
                 C121) *
                C2161 +
            ((C2732 + C2731) * C50790 + (C2730 + C2729) * C121) * C2160 +
            ((C2728 + C2727) * C50790 + (C2726 + C2725) * C121) * C2159) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
           C2403 * C2161) *
              C50693 * C964 -
          (C3401 * C2161 +
           ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
           ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
              C50693 * C965 +
          (C2403 * C2159 +
           ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
           ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
              C50693 * C966 -
          (((C2163 * C3378 + C50633 * C3382 + C2162 * C3379 + C2157 * C3383) *
                C50790 +
            (C2163 * C3376 + C50633 * C3380 + C2162 * C3377 + C2157 * C3381) *
                C121) *
               C2161 +
           ((C3400 + C3399) * C50790 + (C3398 + C3397) * C121) * C2160 +
           C3401 * C2159) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C391 -
           (((C3117 + C3118) * C50790 + (C3119 + C3120) * C121) * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C392 +
           (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                 C121 +
             (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                 C50790) *
                C2159 +
            ((C3572 + C3573) * C121 + (C3574 + C3575) * C50790) * C2160 +
            ((C3576 + C3577) * C121 + (C3578 + C3579) * C50790) * C2161) *
               C393) *
              C893 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C2162 * C3072 + C2157 * C3075 + C2163 * C3073 + C50633 * C3076) *
                 C121 +
             (C2162 * C3077 + C2157 * C3081 + C2163 * C3078 + C50633 * C3082) *
                 C50790) *
                C2161) *
               C392 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C391 -
           (((C2163 * C3549 + C50633 * C3553 + C2162 * C3550 + C2157 * C3554) *
                 C50790 +
             (C2163 * C3547 + C50633 * C3551 + C2162 * C3548 + C2157 * C3552) *
                 C121) *
                C2161 +
            ((C3579 + C3578) * C50790 + (C3577 + C3576) * C121) * C2160 +
            ((C3575 + C3574) * C50790 + (C3573 + C3572) * C121) * C2159) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
              C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                 C121 +
             (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
              C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                 C50790) *
                C50779 * C50920 -
            ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
              C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                 C50790 +
             (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
              C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                 C121) *
                C50779 * C50757) *
               C893 +
           (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
              C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                 C121 +
             (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
              C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
              C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                 C50790 +
             (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
              C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                 C121) *
                C50779 * C50920) *
               C50729) *
              C50911 +
          ((((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
              C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                 C121 +
             (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
              C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50790 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C121) *
                C50779 * C50920) *
               C893 +
           (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
              C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                 C121 +
             (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
              C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                 C50790) *
                C50779 * C50920 -
            ((C120 * C788 + C108 * C794 + C119 * C787 + C107 * C793 +
              C118 * C786 + C106 * C792 + C117 * C785 + C105 * C791) *
                 C50790 +
             (C120 * C779 + C108 * C789 + C119 * C778 + C107 * C783 +
              C118 * C777 + C106 * C782 + C117 * C776 + C105 * C781) *
                 C121) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                  C121 +
              (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                  C50790) *
                 C2159 +
             ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
             C2403 * C2161) *
                C50920 -
            (((C3117 + C3118) * C50790 + (C3119 + C3120) * C121) * C2161 +
             ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
             ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                  C50790 +
              (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                  C121) *
                 C2159) *
                C50757) *
               C893 +
           ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
             ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
             ((C2162 * C3072 + C2157 * C3075 + C2163 * C3073 + C50633 * C3076) *
                  C121 +
              (C2162 * C3077 + C2157 * C3081 + C2163 * C3078 + C50633 * C3082) *
                  C50790) *
                 C2161) *
                C50757 -
            (C3401 * C2161 +
             ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
             ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
                C50920) *
               C50729) *
              C50911 +
          (((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                  C121 +
              (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                  C50790) *
                 C2159 +
             ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
             ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
                C50757 -
            (C2404 * C2161 +
             ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
             ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                  C50790 +
              (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                  C121) *
                 C2159) *
                C50920) *
               C893 +
           ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
             ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
             ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
                C50920 -
            (((C2163 * C3079 + C50633 * C3083 + C2162 * C3078 + C2157 * C3082) *
                  C50790 +
              (C2163 * C3074 + C50633 * C3080 + C2162 * C3073 + C2157 * C3076) *
                  C121) *
                 C2161 +
             ((C3132 + C3131) * C50790 + (C3130 + C3129) * C121) * C2160 +
             ((C3128 + C3127) * C50790 + (C3126 + C3125) * C121) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50693 * C893 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
             C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                C121 +
            (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
             C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                C50790) *
               C50779 * C50693 * C50729 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50693 * C893) *
              C896 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C50693 * C893 -
           ((C120 * C538 + C108 * C540 + C119 * C280 + C107 * C291 +
             C118 * C263 + C106 * C283 + C117 * C264 + C105 * C284) *
                C50790 +
            (C120 * C537 + C108 * C539 + C119 * C261 + C107 * C279 +
             C118 * C253 + C106 * C267 + C117 * C254 + C105 * C268) *
                C121) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50790) *
              C50779 * C50693 * C964 -
          ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
            C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
               C50790 +
           (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
            C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
               C121) *
              C50779 * C50693 * C965 +
          ((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
            C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
               C121 +
           (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
            C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
               C50790) *
              C50779 * C50693 * C966 -
          ((C120 * C973 + C108 * C981 + C119 * C974 + C107 * C982 +
            C118 * C975 + C106 * C983 + C117 * C976 + C105 * C984) *
               C50790 +
           (C120 * C969 + C108 * C977 + C119 * C970 + C107 * C978 +
            C118 * C971 + C106 * C979 + C117 * C972 + C105 * C980) *
               C121) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50693 * C893 -
           (((C2379 + C2380) * C50790 + (C2381 + C2382) * C121) * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50693 * C50729) *
              C895 +
          ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
            ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
            ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
               C50693 * C50729 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50693 * C893) *
              C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C50693 * C893 -
           (((C2163 * C973 + C50633 * C981 + C2162 * C974 + C2157 * C982) *
                 C50790 +
             (C2163 * C969 + C50633 * C977 + C2162 * C970 + C2157 * C978) *
                 C121) *
                C2161 +
            ((C2732 + C2731) * C50790 + (C2730 + C2729) * C121) * C2160 +
            ((C2728 + C2727) * C50790 + (C2726 + C2725) * C121) * C2159) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
           C2403 * C2161) *
              C50693 * C964 -
          (C3401 * C2161 +
           ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
           ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
              C50693 * C965 +
          (C2403 * C2159 +
           ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
           ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
              C50693 * C966 -
          (((C2163 * C3378 + C50633 * C3382 + C2162 * C3379 + C2157 * C3383) *
                C50790 +
            (C2163 * C3376 + C50633 * C3380 + C2162 * C3377 + C2157 * C3381) *
                C121) *
               C2161 +
           ((C3400 + C3399) * C50790 + (C3398 + C3397) * C121) * C2160 +
           C3401 * C2159) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
              C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                 C121 +
             (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
              C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                 C50790) *
                C50779 * C1544 -
            ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
              C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                 C50790 +
             (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
              C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                 C121) *
                C50779 * C50757) *
               C50919 +
           (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
              C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                 C121 +
             (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
              C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
              C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                 C50790 +
             (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
              C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                 C121) *
                C50779 * C1544) *
               C50729) *
              C50911 +
          ((((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
              C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                 C121 +
             (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
              C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                 C50790) *
                C50779 * C50757 -
            ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
              C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                 C50790 +
             (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
              C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                 C121) *
                C50779 * C1544) *
               C50919 +
           (((C117 * C255 + C105 * C269 + C118 * C254 + C106 * C268 +
              C119 * C253 + C107 * C267 + C120 * C261 + C108 * C279) *
                 C121 +
             (C117 * C265 + C105 * C285 + C118 * C264 + C106 * C284 +
              C119 * C263 + C107 * C283 + C120 * C280 + C108 * C291) *
                 C50790) *
                C50779 * C1544 -
            ((C120 * C788 + C108 * C794 + C119 * C787 + C107 * C793 +
              C118 * C786 + C106 * C792 + C117 * C785 + C105 * C791) *
                 C50790 +
             (C120 * C779 + C108 * C789 + C119 * C778 + C107 * C783 +
              C118 * C777 + C106 * C782 + C117 * C776 + C105 * C781) *
                 C121) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                  C121 +
              (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                  C50790) *
                 C2159 +
             ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
             C2403 * C2161) *
                C1544 -
            (C4090 * C2161 +
             ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
             ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                  C50790 +
              (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                  C121) *
                 C2159) *
                C50757) *
               C50919 +
           ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
             ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
             ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
                C50757 -
            (C3401 * C2161 +
             ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
             ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
                C1544) *
               C50729) *
              C50911 +
          (((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                  C121 +
              (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                  C50790) *
                 C2159 +
             ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
             ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
                C50757 -
            (C2404 * C2161 +
             ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
             ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                  C50790 +
              (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                  C121) *
                 C2159) *
                C1544) *
               C50919 +
           ((((C2383 + C2384) * C121 + (C2385 + C2386) * C50790) * C2159 +
             ((C2387 + C2388) * C121 + (C2389 + C2390) * C50790) * C2160 +
             ((C2391 + C2392) * C121 + (C2393 + C2394) * C50790) * C2161) *
                C1544 -
            (((C2163 * C3079 + C50633 * C3083 + C2162 * C3078 + C2157 * C3082) *
                  C50790 +
              (C2163 * C3074 + C50633 * C3080 + C2162 * C3073 + C2157 * C3076) *
                  C121) *
                 C2161 +
             ((C3132 + C3131) * C50790 + (C3130 + C3129) * C121) * C2160 +
             ((C3128 + C3127) * C50790 + (C3126 + C3125) * C121) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50966 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50967 +
           ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
             C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
                C121 +
            (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
             C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
                C50790) *
               C50779 * C1960) *
              C50919 +
          (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
             C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                C121 +
            (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
             C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                C50790) *
               C50779 * C50967 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C50966 -
           ((C120 * C1087 + C108 * C1095 + C119 * C1088 + C107 * C1096 +
             C118 * C1089 + C106 * C1097 + C117 * C1090 + C105 * C1098) *
                C50790 +
            (C120 * C1083 + C108 * C1091 + C119 * C1084 + C107 * C1092 +
             C118 * C1085 + C106 * C1093 + C117 * C1086 + C105 * C1094) *
                C121) *
               C50779 * C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50966 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50967 +
           (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                 C121 +
             (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                 C50790) *
                C2159 +
            ((C3572 + C3573) * C121 + (C3574 + C3575) * C50790) * C2160 +
            ((C3576 + C3577) * C121 + (C3578 + C3579) * C50790) * C2161) *
               C1960) *
              C50919 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
               C50967 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C50966 -
           (((C2163 * C3549 + C50633 * C3553 + C2162 * C3550 + C2157 * C3554) *
                 C50790 +
             (C2163 * C3547 + C50633 * C3551 + C2162 * C3548 + C2157 * C3552) *
                 C121) *
                C2161 +
            ((C3579 + C3578) * C50790 + (C3577 + C3576) * C121) * C2160 +
            ((C3575 + C3574) * C50790 + (C3573 + C3572) * C121) * C2159) *
               C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C248 +
          (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
             C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                C121 +
            (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
             C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C1544) *
              C249 +
          (((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C1434 + C108 * C1442 + C119 * C1435 + C107 * C1443 +
             C118 * C1436 + C106 * C1444 + C117 * C1437 + C105 * C1445) *
                C50790 +
            (C120 * C1430 + C108 * C1438 + C119 * C1431 + C107 * C1439 +
             C118 * C1432 + C106 * C1440 + C117 * C1433 + C105 * C1441) *
                C121) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
             C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                C121 +
            (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
             C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C642 + C108 * C644 + C119 * C421 + C107 * C432 +
             C118 * C404 + C106 * C424 + C117 * C405 + C105 * C425) *
                C50790 +
            (C120 * C641 + C108 * C643 + C119 * C402 + C107 * C420 +
             C118 * C394 + C106 * C408 + C117 * C395 + C105 * C409) *
                C121) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
            C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
               C121 +
           (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
            C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
               C50790) *
              C50779 * C1710 -
          ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
            C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
               C50790 +
           (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
            C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
               C121) *
              C50779 * C1711 +
          ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
            C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
               C121 +
           (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
            C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
               C50790) *
              C50779 * C1712 -
          ((C120 * C1718 + C108 * C1726 + C119 * C1719 + C107 * C1727 +
            C118 * C1720 + C106 * C1728 + C117 * C1721 + C105 * C1729) *
               C50790 +
           (C120 * C1714 + C108 * C1722 + C119 * C1715 + C107 * C1723 +
            C118 * C1716 + C106 * C1724 + C117 * C1717 + C105 * C1725) *
               C121) *
              C50779 * C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C1544 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C895 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
            ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
               C50757 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C1544) *
              C50677 * C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C1544 -
           (((C2163 * C1434 + C50633 * C1442 + C2162 * C1435 + C2157 * C1443) *
                 C50790 +
             (C2163 * C1430 + C50633 * C1438 + C2162 * C1431 + C2157 * C1439) *
                 C121) *
                C2161 +
            ((C2163 * C787 + C50633 * C793 + C2162 * C786 + C2157 * C792) *
                 C50790 +
             (C2163 * C778 + C50633 * C783 + C2162 * C777 + C2157 * C782) *
                 C121) *
                C2160 +
            ((C2163 * C404 + C50633 * C424 + C2162 * C405 + C2157 * C425) *
                 C50790 +
             (C2163 * C394 + C50633 * C408 + C2162 * C395 + C2157 * C409) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C1544 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C248 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
               C50757 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C1544) *
              C249 +
          ((C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
               C1544 -
           (((C2163 * C4067 + C50633 * C4071 + C2162 * C4068 + C2157 * C4072) *
                 C50790 +
             (C2163 * C4065 + C50633 * C4069 + C2162 * C4066 + C2157 * C4070) *
                 C121) *
                C2161 +
            ((C4089 + C4088) * C50790 + (C4087 + C4086) * C121) * C2160 +
            C4090 * C2159) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                C121 +
            (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                C50790) *
               C2159 +
           ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
           C2403 * C2161) *
              C1710 -
          (C4090 * C2161 +
           ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
           ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                C50790 +
            (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                C121) *
               C2159) *
              C1711 +
          (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                C121 +
            (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                C50790) *
               C2159 +
           ((C3572 + C3573) * C121 + (C3574 + C3575) * C50790) * C2160 +
           ((C3576 + C3577) * C121 + (C3578 + C3579) * C50790) * C2161) *
              C1712 -
          (((C2163 * C4484 + C50633 * C4492 + C2162 * C4485 + C2157 * C4493) *
                C50790 +
            (C2163 * C4480 + C50633 * C4486 + C2162 * C4481 + C2157 * C4487) *
                C121) *
               C2161 +
           ((C2163 * C4488 + C50633 * C4494 + C2162 * C4489 + C2157 * C4495) *
                C50790 +
            (C2163 * C4482 + C50633 * C4490 + C2162 * C4483 + C2157 * C4491) *
                C121) *
               C2160 +
           ((C2163 * C1720 + C50633 * C1728 + C2162 * C1721 + C2157 * C1729) *
                C50790 +
            (C2163 * C1716 + C50633 * C1724 + C2162 * C1717 + C2157 * C1725) *
                C121) *
               C2159) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C50966 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50967 +
           ((C117 * C398 + C105 * C412 + C118 * C399 + C106 * C413 +
             C119 * C400 + C107 * C414 + C120 * C401 + C108 * C415) *
                C121 +
            (C117 * C416 + C105 * C428 + C118 * C417 + C106 * C429 +
             C119 * C418 + C107 * C430 + C120 * C419 + C108 * C431) *
                C50790) *
               C50779 * C1960) *
              C50677 * C50911 +
          (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
             C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                C121 +
            (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
             C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                C50790) *
               C50779 * C50967 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C50966 -
           ((C120 * C422 + C108 * C433 + C119 * C419 + C107 * C431 +
             C118 * C418 + C106 * C430 + C117 * C417 + C105 * C429) *
                C50790 +
            (C120 * C403 + C108 * C423 + C119 * C401 + C107 * C415 +
             C118 * C400 + C106 * C414 + C117 * C399 + C105 * C413) *
                C121) *
               C50779 * C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C50966 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50967 +
           (((C2162 * C398 + C2157 * C412 + C2163 * C399 + C50633 * C413) *
                 C121 +
             (C2162 * C416 + C2157 * C428 + C2163 * C417 + C50633 * C429) *
                 C50790) *
                C2159 +
            ((C3572 + C3573) * C121 + (C3574 + C3575) * C50790) * C2160 +
            ((C3576 + C3577) * C121 + (C3578 + C3579) * C50790) * C2161) *
               C1960) *
              C50677 * C50911 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
            ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
               C50967 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C50966 -
           (((C2163 * C2557 + C50633 * C2561 + C2162 * C2556 + C2157 * C2560) *
                 C50790 +
             (C2163 * C2552 + C50633 * C2558 + C2162 * C2551 + C2157 * C2554) *
                 C121) *
                C2161 +
            ((C2163 * C1088 + C50633 * C1096 + C2162 * C1089 + C2157 * C1097) *
                 C50790 +
             (C2163 * C1084 + C50633 * C1092 + C2162 * C1085 + C2157 * C1093) *
                 C121) *
                C2160 +
            ((C2163 * C418 + C50633 * C430 + C2162 * C417 + C2157 * C429) *
                 C50790 +
             (C2163 * C400 + C50633 * C414 + C2162 * C399 + C2157 * C413) *
                 C121) *
                C2159) *
               C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C117 * C396 + C105 * C410 + C118 * C395 + C106 * C409 +
             C119 * C394 + C107 * C408 + C120 * C402 + C108 * C420) *
                C121 +
            (C117 * C406 + C105 * C426 + C118 * C405 + C106 * C425 +
             C119 * C404 + C107 * C424 + C120 * C421 + C108 * C432) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C137 + C108 * C147 + C119 * C136 + C107 * C146 +
             C118 * C135 + C106 * C145 + C117 * C134 + C105 * C144) *
                C50790 +
            (C120 * C126 + C108 * C138 + C119 * C125 + C107 * C132 +
             C118 * C124 + C106 * C131 + C117 * C123 + C105 * C130) *
                C121) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C117 * C124 + C105 * C131 + C118 * C125 + C106 * C132 +
             C119 * C126 + C107 * C138 + C120 * C127 + C108 * C139) *
                C121 +
            (C117 * C135 + C105 * C145 + C118 * C136 + C106 * C146 +
             C119 * C137 + C107 * C147 + C120 * C140 + C108 * C148) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C642 + C108 * C644 + C119 * C421 + C107 * C432 +
             C118 * C404 + C106 * C424 + C117 * C405 + C105 * C425) *
                C50790 +
            (C120 * C641 + C108 * C643 + C119 * C402 + C107 * C420 +
             C118 * C394 + C106 * C408 + C117 * C395 + C105 * C409) *
                C121) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C122 + C105 * C129 + C118 * C123 + C106 * C130 +
             C119 * C124 + C107 * C131 + C120 * C125 + C108 * C132) *
                C121 +
            (C117 * C133 + C105 * C143 + C118 * C134 + C106 * C144 +
             C119 * C135 + C107 * C145 + C120 * C136 + C108 * C146) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C404 + C108 * C424 + C119 * C405 + C107 * C425 +
             C118 * C406 + C106 * C426 + C117 * C407 + C105 * C427) *
                C50790 +
            (C120 * C394 + C108 * C408 + C119 * C395 + C107 * C409 +
             C118 * C396 + C106 * C410 + C117 * C397 + C105 * C411) *
                C121) *
               C50779 * C50757) *
              C248 +
          (((C117 * C775 + C105 * C780 + C118 * C776 + C106 * C781 +
             C119 * C777 + C107 * C782 + C120 * C778 + C108 * C783) *
                C121 +
            (C117 * C784 + C105 * C790 + C118 * C785 + C106 * C791 +
             C119 * C786 + C107 * C792 + C120 * C787 + C108 * C793) *
                C50790) *
               C50779 * C50757 -
           ((C120 * C263 + C108 * C283 + C119 * C264 + C107 * C284 +
             C118 * C265 + C106 * C285 + C117 * C266 + C105 * C286) *
                C50790 +
            (C120 * C253 + C108 * C267 + C119 * C254 + C107 * C268 +
             C118 * C255 + C106 * C269 + C117 * C256 + C105 * C270) *
                C121) *
               C50779 * C1544) *
              C249 +
          (((C117 * C257 + C105 * C271 + C118 * C258 + C106 * C272 +
             C119 * C259 + C107 * C273 + C120 * C260 + C108 * C274) *
                C121 +
            (C117 * C275 + C105 * C287 + C118 * C276 + C106 * C288 +
             C119 * C277 + C107 * C289 + C120 * C278 + C108 * C290) *
                C50790) *
               C50779 * C1544 -
           ((C120 * C1434 + C108 * C1442 + C119 * C1435 + C107 * C1443 +
             C118 * C1436 + C106 * C1444 + C117 * C1437 + C105 * C1445) *
                C50790 +
            (C120 * C1430 + C108 * C1438 + C119 * C1431 + C107 * C1439 +
             C118 * C1432 + C106 * C1440 + C117 * C1433 + C105 * C1441) *
                C121) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C1544 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C895 +
          ((((C2162 * C396 + C2157 * C410 + C2163 * C395 + C50633 * C409) *
                 C121 +
             (C2162 * C406 + C2157 * C426 + C2163 * C405 + C50633 * C425) *
                 C50790) *
                C2159 +
            ((C3125 + C3126) * C121 + (C3127 + C3128) * C50790) * C2160 +
            ((C3129 + C3130) * C121 + (C3131 + C3132) * C50790) * C2161) *
               C50757 -
           (C2404 * C2161 +
            ((C2386 + C2385) * C50790 + (C2384 + C2383) * C121) * C2160 +
            ((C2163 * C135 + C50633 * C145 + C2162 * C134 + C2157 * C144) *
                 C50790 +
             (C2163 * C124 + C50633 * C131 + C2162 * C123 + C2157 * C130) *
                 C121) *
                C2159) *
               C1544) *
              C50677 * C896 +
          ((((C2162 * C124 + C2157 * C131 + C2163 * C125 + C50633 * C132) *
                 C121 +
             (C2162 * C135 + C2157 * C145 + C2163 * C136 + C50633 * C146) *
                 C50790) *
                C2159 +
            ((C2725 + C2726) * C121 + (C2727 + C2728) * C50790) * C2160 +
            ((C2729 + C2730) * C121 + (C2731 + C2732) * C50790) * C2161) *
               C1544 -
           (((C2163 * C1434 + C50633 * C1442 + C2162 * C1435 + C2157 * C1443) *
                 C50790 +
             (C2163 * C1430 + C50633 * C1438 + C2162 * C1431 + C2157 * C1439) *
                 C121) *
                C2161 +
            ((C2163 * C787 + C50633 * C793 + C2162 * C786 + C2157 * C792) *
                 C50790 +
             (C2163 * C778 + C50633 * C783 + C2162 * C777 + C2157 * C782) *
                 C121) *
                C2160 +
            ((C2163 * C404 + C50633 * C424 + C2162 * C405 + C2157 * C425) *
                 C50790 +
             (C2163 * C394 + C50633 * C408 + C2162 * C395 + C2157 * C409) *
                 C121) *
                C2159) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2162 * C122 + C2157 * C129 + C2163 * C123 + C50633 * C130) *
                 C121 +
             (C2162 * C133 + C2157 * C143 + C2163 * C134 + C50633 * C144) *
                 C50790) *
                C2159 +
            ((C2371 + C2372) * C121 + (C2373 + C2374) * C50790) * C2160 +
            C2403 * C2161) *
               C1544 -
           (C4090 * C2161 +
            ((C3121 + C3122) * C50790 + (C3123 + C3124) * C121) * C2160 +
            ((C2163 * C406 + C50633 * C426 + C2162 * C407 + C2157 * C427) *
                 C50790 +
             (C2163 * C396 + C50633 * C410 + C2162 * C397 + C2157 * C411) *
                 C121) *
                C2159) *
               C50757) *
              C248 +
          ((((C3124 + C3123) * C121 + (C3122 + C3121) * C50790) * C2159 +
            ((C3120 + C3119) * C121 + (C3118 + C3117) * C50790) * C2160 +
            ((C4086 + C4087) * C121 + (C4088 + C4089) * C50790) * C2161) *
               C50757 -
           (C3401 * C2161 +
            ((C2378 + C2377) * C50790 + (C2376 + C2375) * C121) * C2160 +
            ((C2374 + C2373) * C50790 + (C2372 + C2371) * C121) * C2159) *
               C1544) *
              C249 +
          ((C2403 * C2159 +
            ((C2382 + C2381) * C121 + (C2380 + C2379) * C50790) * C2160 +
            ((C3397 + C3398) * C121 + (C3399 + C3400) * C50790) * C2161) *
               C1544 -
           (((C2163 * C4067 + C50633 * C4071 + C2162 * C4068 + C2157 * C4072) *
                 C50790 +
             (C2163 * C4065 + C50633 * C4069 + C2162 * C4066 + C2157 * C4070) *
                 C121) *
                C2161 +
            ((C4089 + C4088) * C50790 + (C4087 + C4086) * C121) * C2160 +
            C4090 * C2159) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50693 * C50919 -
           (((C24752 + C24753) * C50790 + (C24754 + C24755) * C121) * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C50693 * C50729) *
              C50962 +
          ((((C24756 + C24757) * C121 + (C24758 + C24759) * C50790) * C50968 +
            ((C24760 + C24761) * C121 + (C24762 + C24763) * C50790) * C50969 +
            ((C24764 + C24765) * C121 + (C24766 + C24767) * C50790) * C24546) *
               C50693 * C50729 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C50693 * C50919) *
              C50963 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C121 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50790) *
                C50968 +
            ((C25086 + C25087) * C121 + (C25088 + C25089) * C50790) * C50969 +
            ((C25090 + C25091) * C121 + (C25092 + C25093) * C50790) * C24546) *
               C50693 * C50919 -
           (((C49740 * C973 + C50633 * C981 + C49747 * C974 + C50904 * C982) *
                 C50790 +
             (C49740 * C969 + C50633 * C977 + C49747 * C970 + C50904 * C978) *
                 C121) *
                C24546 +
            ((C25093 + C25092) * C50790 + (C25091 + C25090) * C121) * C50969 +
            ((C25089 + C25088) * C50790 + (C25087 + C25086) * C121) * C50968) *
               C50693 * C50729) *
              C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                  C121 +
              (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                  C50790) *
                 C50968 +
             ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
             C24776 * C24546) *
                C50920 -
            (((C25466 + C25467) * C50790 + (C25468 + C25469) * C121) * C24546 +
             ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
             ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                  C50790 +
              (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                  C121) *
                 C50968) *
                C50757) *
               C50919 +
           ((((C25473 + C25472) * C121 + (C25471 + C25470) * C50790) * C50968 +
             ((C25469 + C25468) * C121 + (C25467 + C25466) * C50790) * C50969 +
             ((C49747 * C3072 + C50904 * C3075 + C49740 * C3073 +
               C50633 * C3076) *
                  C121 +
              (C49747 * C3077 + C50904 * C3081 + C49740 * C3078 +
               C50633 * C3082) *
                  C50790) *
                 C24546) *
                C50757 -
            (((C24752 + C24753) * C50790 + (C24754 + C24755) * C121) * C24546 +
             ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
             ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
                C50920) *
               C50729) *
              C251 +
          (((((C49747 * C396 + C50904 * C410 + C49740 * C395 + C50633 * C409) *
                  C121 +
              (C49747 * C406 + C50904 * C426 + C49740 * C405 + C50633 * C425) *
                  C50790) *
                 C50968 +
             ((C25474 + C25475) * C121 + (C25476 + C25477) * C50790) * C50969 +
             ((C25478 + C25479) * C121 + (C25480 + C25481) * C50790) * C24546) *
                C50757 -
            (C24777 * C24546 +
             ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
             ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                  C50790 +
              (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                  C121) *
                 C50968) *
                C50920) *
               C50919 +
           ((((C24756 + C24757) * C121 + (C24758 + C24759) * C50790) * C50968 +
             ((C24760 + C24761) * C121 + (C24762 + C24763) * C50790) * C50969 +
             ((C24764 + C24765) * C121 + (C24766 + C24767) * C50790) * C24546) *
                C50920 -
            (((C49740 * C3079 + C50633 * C3083 + C49747 * C3078 +
               C50904 * C3082) *
                  C50790 +
              (C49740 * C3074 + C50633 * C3080 + C49747 * C3073 +
               C50904 * C3076) *
                  C121) *
                 C24546 +
             ((C25481 + C25480) * C50790 + (C25479 + C25478) * C121) * C50969 +
             ((C25477 + C25476) * C50790 + (C25475 + C25474) * C121) * C50968) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50693 * C248 -
           (((C24752 + C24753) * C50790 + (C24754 + C24755) * C121) * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C50693 * C249 +
           (C24776 * C50968 +
            ((C24755 + C24754) * C121 + (C24753 + C24752) * C50790) * C50969 +
            ((C49747 * C2310 + C50904 * C2313 + C49740 * C2311 +
              C50633 * C2314) *
                 C121 +
             (C49747 * C2315 + C50904 * C2319 + C49740 * C2316 +
              C50633 * C2320) *
                 C50790) *
                C24546) *
               C50693 * C250) *
              C251 +
          ((((C24756 + C24757) * C121 + (C24758 + C24759) * C50790) * C50968 +
            ((C24760 + C24761) * C121 + (C24762 + C24763) * C50790) * C50969 +
            ((C24764 + C24765) * C121 + (C24766 + C24767) * C50790) * C24546) *
               C50693 * C249 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C50693 * C248 -
           (((C49740 * C2317 + C50633 * C2321 + C49747 * C2316 +
              C50904 * C2320) *
                 C50790 +
             (C49740 * C2312 + C50633 * C2318 + C49747 * C2311 +
              C50904 * C2314) *
                 C121) *
                C24546 +
            ((C24767 + C24766) * C50790 + (C24765 + C24764) * C121) * C50969 +
            C24777 * C50968) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C121 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50790) *
               C50968 +
           ((C49747 * C256 + C50904 * C270 + C49740 * C255 + C50633 * C269) *
                C121 +
            (C49747 * C266 + C50904 * C286 + C49740 * C265 + C50633 * C285) *
                C50790) *
               C50969 +
           ((C49747 * C257 + C50904 * C271 + C49740 * C258 + C50633 * C272) *
                C121 +
            (C49747 * C275 + C50904 * C287 + C49740 * C276 + C50633 * C288) *
                C50790) *
               C24546) *
              C50693 * C50677 * C113 -
          (((C49740 * C277 + C50633 * C289 + C49747 * C276 + C50904 * C288) *
                C50790 +
            (C49740 * C259 + C50633 * C273 + C49747 * C258 + C50904 * C272) *
                C121) *
               C24546 +
           ((C49740 * C264 + C50633 * C284 + C49747 * C265 + C50904 * C285) *
                C50790 +
            (C49740 * C254 + C50633 * C268 + C49747 * C255 + C50904 * C269) *
                C121) *
               C50969 +
           ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50790 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C121) *
               C50968) *
              C50693 * C50677 * C114 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C121 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50790) *
               C50968 +
           ((C49747 * C254 + C50904 * C268 + C49740 * C253 + C50633 * C267) *
                C121 +
            (C49747 * C264 + C50904 * C284 + C49740 * C263 + C50633 * C283) *
                C50790) *
               C50969 +
           ((C49747 * C259 + C50904 * C273 + C49740 * C260 + C50633 * C274) *
                C121 +
            (C49747 * C277 + C50904 * C289 + C49740 * C278 + C50633 * C290) *
                C50790) *
               C24546) *
              C50693 * C50677 * C115 -
          (((C49740 * C281 + C50633 * C292 + C49747 * C278 + C50904 * C290) *
                C50790 +
            (C49740 * C262 + C50633 * C282 + C49747 * C260 + C50904 * C274) *
                C121) *
               C24546 +
           ((C49740 * C280 + C50633 * C291 + C49747 * C263 + C50904 * C283) *
                C50790 +
            (C49740 * C261 + C50633 * C279 + C49747 * C253 + C50904 * C267) *
                C121) *
               C50969 +
           ((C49740 * C137 + C50633 * C147 + C49747 * C136 + C50904 * C146) *
                C50790 +
            (C49740 * C126 + C50633 * C138 + C49747 * C125 + C50904 * C132) *
                C121) *
               C50968) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C391 -
           (((C49740 * C1436 + C50633 * C1444 + C49747 * C1437 +
              C50904 * C1445) *
                 C50790 +
             (C49740 * C1432 + C50633 * C1440 + C49747 * C1433 +
              C50904 * C1441) *
                 C121) *
                C24546 +
            ((C49740 * C785 + C50633 * C791 + C49747 * C784 + C50904 * C790) *
                 C50790 +
             (C49740 * C776 + C50633 * C781 + C49747 * C775 + C50904 * C780) *
                 C121) *
                C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C392 +
           (((C49747 * C398 + C50904 * C412 + C49740 * C399 + C50633 * C413) *
                 C121 +
             (C49747 * C416 + C50904 * C428 + C49740 * C417 + C50633 * C429) *
                 C50790) *
                C50968 +
            ((C49747 * C1086 + C50904 * C1094 + C49740 * C1085 +
              C50633 * C1093) *
                 C121 +
             (C49747 * C1090 + C50904 * C1098 + C49740 * C1089 +
              C50633 * C1097) *
                 C50790) *
                C50969 +
            ((C49747 * C2550 + C50904 * C2553 + C49740 * C2551 +
              C50633 * C2554) *
                 C121 +
             (C49747 * C2555 + C50904 * C2559 + C49740 * C2556 +
              C50633 * C2560) *
                 C50790) *
                C24546) *
               C393) *
              C50677 * C251 +
          ((((C49747 * C396 + C50904 * C410 + C49740 * C395 + C50633 * C409) *
                 C121 +
             (C49747 * C406 + C50904 * C426 + C49740 * C405 + C50633 * C425) *
                 C50790) *
                C50968 +
            ((C49747 * C776 + C50904 * C781 + C49740 * C777 + C50633 * C782) *
                 C121 +
             (C49747 * C785 + C50904 * C791 + C49740 * C786 + C50633 * C792) *
                 C50790) *
                C50969 +
            ((C49747 * C1432 + C50904 * C1440 + C49740 * C1431 +
              C50633 * C1439) *
                 C121 +
             (C49747 * C1436 + C50904 * C1444 + C49740 * C1435 +
              C50633 * C1443) *
                 C50790) *
                C24546) *
               C392 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C391 -
           (((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
              C50904 * C2560) *
                 C50790 +
             (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
              C50904 * C2554) *
                 C121) *
                C24546 +
            ((C49740 * C1088 + C50633 * C1096 + C49747 * C1089 +
              C50904 * C1097) *
                 C50790 +
             (C49740 * C1084 + C50633 * C1092 + C49747 * C1085 +
              C50904 * C1093) *
                 C121) *
                C50969 +
            ((C49740 * C418 + C50633 * C430 + C49747 * C417 + C50904 * C429) *
                 C50790 +
             (C49740 * C400 + C50633 * C414 + C49747 * C399 + C50904 * C413) *
                 C121) *
                C50968) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50920 -
           (((C49740 * C1436 + C50633 * C1444 + C49747 * C1437 +
              C50904 * C1445) *
                 C50790 +
             (C49740 * C1432 + C50633 * C1440 + C49747 * C1433 +
              C50904 * C1441) *
                 C121) *
                C24546 +
            ((C49740 * C785 + C50633 * C791 + C49747 * C784 + C50904 * C790) *
                 C50790 +
             (C49740 * C776 + C50633 * C781 + C49747 * C775 + C50904 * C780) *
                 C121) *
                C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C50757) *
              C50677 * C50962 +
          ((((C49747 * C396 + C50904 * C410 + C49740 * C395 + C50633 * C409) *
                 C121 +
             (C49747 * C406 + C50904 * C426 + C49740 * C405 + C50633 * C425) *
                 C50790) *
                C50968 +
            ((C49747 * C776 + C50904 * C781 + C49740 * C777 + C50633 * C782) *
                 C121 +
             (C49747 * C785 + C50904 * C791 + C49740 * C786 + C50633 * C792) *
                 C50790) *
                C50969 +
            ((C49747 * C1432 + C50904 * C1440 + C49740 * C1431 +
              C50633 * C1439) *
                 C121 +
             (C49747 * C1436 + C50904 * C1444 + C49740 * C1435 +
              C50633 * C1443) *
                 C50790) *
                C24546) *
               C50757 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C50920) *
              C50677 * C50963 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C121 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50790) *
                C50968 +
            ((C25086 + C25087) * C121 + (C25088 + C25089) * C50790) * C50969 +
            ((C25090 + C25091) * C121 + (C25092 + C25093) * C50790) * C24546) *
               C50920 -
           (((C49740 * C1434 + C50633 * C1442 + C49747 * C1435 +
              C50904 * C1443) *
                 C50790 +
             (C49740 * C1430 + C50633 * C1438 + C49747 * C1431 +
              C50904 * C1439) *
                 C121) *
                C24546 +
            ((C49740 * C787 + C50633 * C793 + C49747 * C786 + C50904 * C792) *
                 C50790 +
             (C49740 * C778 + C50633 * C783 + C49747 * C777 + C50904 * C782) *
                 C121) *
                C50969 +
            ((C49740 * C404 + C50633 * C424 + C49747 * C405 + C50904 * C425) *
                 C50790 +
             (C49740 * C394 + C50633 * C408 + C49747 * C395 + C50904 * C409) *
                 C121) *
                C50968) *
               C50757) *
              C50677 * C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C121 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50790) *
               C50968 +
           ((C49747 * C256 + C50904 * C270 + C49740 * C255 + C50633 * C269) *
                C121 +
            (C49747 * C266 + C50904 * C286 + C49740 * C265 + C50633 * C285) *
                C50790) *
               C50969 +
           ((C49747 * C257 + C50904 * C271 + C49740 * C258 + C50633 * C272) *
                C121 +
            (C49747 * C275 + C50904 * C287 + C49740 * C276 + C50633 * C288) *
                C50790) *
               C24546) *
              C50693 * C50677 * C113 -
          (((C49740 * C277 + C50633 * C289 + C49747 * C276 + C50904 * C288) *
                C50790 +
            (C49740 * C259 + C50633 * C273 + C49747 * C258 + C50904 * C272) *
                C121) *
               C24546 +
           ((C49740 * C264 + C50633 * C284 + C49747 * C265 + C50904 * C285) *
                C50790 +
            (C49740 * C254 + C50633 * C268 + C49747 * C255 + C50904 * C269) *
                C121) *
               C50969 +
           ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50790 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C121) *
               C50968) *
              C50693 * C50677 * C114 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C121 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50790) *
               C50968 +
           ((C49747 * C254 + C50904 * C268 + C49740 * C253 + C50633 * C267) *
                C121 +
            (C49747 * C264 + C50904 * C284 + C49740 * C263 + C50633 * C283) *
                C50790) *
               C50969 +
           ((C49747 * C259 + C50904 * C273 + C49740 * C260 + C50633 * C274) *
                C121 +
            (C49747 * C277 + C50904 * C289 + C49740 * C278 + C50633 * C290) *
                C50790) *
               C24546) *
              C50693 * C50677 * C115 -
          (((C49740 * C281 + C50633 * C292 + C49747 * C278 + C50904 * C290) *
                C50790 +
            (C49740 * C262 + C50633 * C282 + C49747 * C260 + C50904 * C274) *
                C121) *
               C24546 +
           ((C49740 * C280 + C50633 * C291 + C49747 * C263 + C50904 * C283) *
                C50790 +
            (C49740 * C261 + C50633 * C279 + C49747 * C253 + C50904 * C267) *
                C121) *
               C50969 +
           ((C49740 * C137 + C50633 * C147 + C49747 * C136 + C50904 * C146) *
                C50790 +
            (C49740 * C126 + C50633 * C138 + C49747 * C125 + C50904 * C132) *
                C121) *
               C50968) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50693 * C248 -
           (((C24752 + C24753) * C50790 + (C24754 + C24755) * C121) * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C50693 * C249 +
           (C24776 * C50968 +
            ((C24755 + C24754) * C121 + (C24753 + C24752) * C50790) * C50969 +
            ((C49747 * C2310 + C50904 * C2313 + C49740 * C2311 +
              C50633 * C2314) *
                 C121 +
             (C49747 * C2315 + C50904 * C2319 + C49740 * C2316 +
              C50633 * C2320) *
                 C50790) *
                C24546) *
               C50693 * C250) *
              C251 +
          ((((C24756 + C24757) * C121 + (C24758 + C24759) * C50790) * C50968 +
            ((C24760 + C24761) * C121 + (C24762 + C24763) * C50790) * C50969 +
            ((C24764 + C24765) * C121 + (C24766 + C24767) * C50790) * C24546) *
               C50693 * C249 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C50693 * C248 -
           (((C49740 * C2317 + C50633 * C2321 + C49747 * C2316 +
              C50904 * C2320) *
                 C50790 +
             (C49740 * C2312 + C50633 * C2318 + C49747 * C2311 +
              C50904 * C2314) *
                 C121) *
                C24546 +
            ((C24767 + C24766) * C50790 + (C24765 + C24764) * C121) * C50969 +
            C24777 * C50968) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50693 * C50964 -
           (C25742 * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C50693 * C50965 +
           (C24776 * C50968 +
            ((C24755 + C24754) * C121 + (C24753 + C24752) * C50790) * C50969 +
            ((C25738 + C25739) * C121 + (C25740 + C25741) * C50790) * C24546) *
               C50693 * C1199) *
              C50911 +
          ((((C24756 + C24757) * C121 + (C24758 + C24759) * C50790) * C50968 +
            ((C24760 + C24761) * C121 + (C24762 + C24763) * C50790) * C50969 +
            ((C24764 + C24765) * C121 + (C24766 + C24767) * C50790) * C24546) *
               C50693 * C50965 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C50693 * C50964 -
           (((C49740 * C2317 + C50633 * C2321 + C49747 * C2316 +
              C50904 * C2320) *
                 C50790 +
             (C49740 * C2312 + C50633 * C2318 + C49747 * C2311 +
              C50904 * C2314) *
                 C121) *
                C24546 +
            ((C24767 + C24766) * C50790 + (C24765 + C24764) * C121) * C50969 +
            C24777 * C50968) *
               C50693 * C1199) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50920 -
           (C26415 * C24546 +
            ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C50757) *
              C50964 +
          ((((C25473 + C25472) * C121 + (C25471 + C25470) * C50790) * C50968 +
            ((C25469 + C25468) * C121 + (C25467 + C25466) * C50790) * C50969 +
            ((C26411 + C26412) * C121 + (C26413 + C26414) * C50790) * C24546) *
               C50757 -
           (C25742 * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C50920) *
              C50965 +
          ((C24776 * C50968 +
            ((C24755 + C24754) * C121 + (C24753 + C24752) * C50790) * C50969 +
            ((C25738 + C25739) * C121 + (C25740 + C25741) * C50790) * C24546) *
               C50920 -
           (((C49740 * C4067 + C50633 * C4071 + C49747 * C4068 +
              C50904 * C4072) *
                 C50790 +
             (C49740 * C4065 + C50633 * C4069 + C49747 * C4066 +
              C50904 * C4070) *
                 C121) *
                C24546 +
            ((C26414 + C26413) * C50790 + (C26412 + C26411) * C121) * C50969 +
            C26415 * C50968) *
               C50757) *
              C1199) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C121 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50790) *
               C50968 +
           ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
           C24776 * C24546) *
              C50693 * C964 -
          (C25742 * C24546 +
           ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
           ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
              C50693 * C965 +
          (C24776 * C50968 +
           ((C24755 + C24754) * C121 + (C24753 + C24752) * C50790) * C50969 +
           ((C25738 + C25739) * C121 + (C25740 + C25741) * C50790) * C24546) *
              C50693 * C966 -
          (((C49740 * C3378 + C50633 * C3382 + C49747 * C3379 +
             C50904 * C3383) *
                C50790 +
            (C49740 * C3376 + C50633 * C3380 + C49747 * C3377 +
             C50904 * C3381) *
                C121) *
               C24546 +
           ((C25741 + C25740) * C50790 + (C25739 + C25738) * C121) * C50969 +
           C25742 * C50968) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50693 * C893 -
           (((C24752 + C24753) * C50790 + (C24754 + C24755) * C121) * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C50693 * C50729) *
              C895 +
          ((((C24756 + C24757) * C121 + (C24758 + C24759) * C50790) * C50968 +
            ((C24760 + C24761) * C121 + (C24762 + C24763) * C50790) * C50969 +
            ((C24764 + C24765) * C121 + (C24766 + C24767) * C50790) * C24546) *
               C50693 * C50729 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C50693 * C893) *
              C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C121 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50790) *
                C50968 +
            ((C25086 + C25087) * C121 + (C25088 + C25089) * C50790) * C50969 +
            ((C25090 + C25091) * C121 + (C25092 + C25093) * C50790) * C24546) *
               C50693 * C893 -
           (((C49740 * C973 + C50633 * C981 + C49747 * C974 + C50904 * C982) *
                 C50790 +
             (C49740 * C969 + C50633 * C977 + C49747 * C970 + C50904 * C978) *
                 C121) *
                C24546 +
            ((C25093 + C25092) * C50790 + (C25091 + C25090) * C121) * C50969 +
            ((C25089 + C25088) * C50790 + (C25087 + C25086) * C121) * C50968) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C391 -
           (((C25466 + C25467) * C50790 + (C25468 + C25469) * C121) * C24546 +
            ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C392 +
           (((C49747 * C398 + C50904 * C412 + C49740 * C399 + C50633 * C413) *
                 C121 +
             (C49747 * C416 + C50904 * C428 + C49740 * C417 + C50633 * C429) *
                 C50790) *
                C50968 +
            ((C25905 + C25906) * C121 + (C25907 + C25908) * C50790) * C50969 +
            ((C25909 + C25910) * C121 + (C25911 + C25912) * C50790) * C24546) *
               C393) *
              C893 +
          ((((C25473 + C25472) * C121 + (C25471 + C25470) * C50790) * C50968 +
            ((C25469 + C25468) * C121 + (C25467 + C25466) * C50790) * C50969 +
            ((C49747 * C3072 + C50904 * C3075 + C49740 * C3073 +
              C50633 * C3076) *
                 C121 +
             (C49747 * C3077 + C50904 * C3081 + C49740 * C3078 +
              C50633 * C3082) *
                 C50790) *
                C24546) *
               C392 -
           (C25742 * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C391 -
           (((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 +
              C50904 * C3554) *
                 C50790 +
             (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 +
              C50904 * C3552) *
                 C121) *
                C24546 +
            ((C25912 + C25911) * C50790 + (C25910 + C25909) * C121) * C50969 +
            ((C25908 + C25907) * C50790 + (C25906 + C25905) * C121) * C50968) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                  C121 +
              (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                  C50790) *
                 C50968 +
             ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
             C24776 * C24546) *
                C50920 -
            (((C25466 + C25467) * C50790 + (C25468 + C25469) * C121) * C24546 +
             ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
             ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                  C50790 +
              (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                  C121) *
                 C50968) *
                C50757) *
               C893 +
           ((((C25473 + C25472) * C121 + (C25471 + C25470) * C50790) * C50968 +
             ((C25469 + C25468) * C121 + (C25467 + C25466) * C50790) * C50969 +
             ((C49747 * C3072 + C50904 * C3075 + C49740 * C3073 +
               C50633 * C3076) *
                  C121 +
              (C49747 * C3077 + C50904 * C3081 + C49740 * C3078 +
               C50633 * C3082) *
                  C50790) *
                 C24546) *
                C50757 -
            (C25742 * C24546 +
             ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
             ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
                C50920) *
               C50729) *
              C50911 +
          (((((C49747 * C396 + C50904 * C410 + C49740 * C395 + C50633 * C409) *
                  C121 +
              (C49747 * C406 + C50904 * C426 + C49740 * C405 + C50633 * C425) *
                  C50790) *
                 C50968 +
             ((C25474 + C25475) * C121 + (C25476 + C25477) * C50790) * C50969 +
             ((C25478 + C25479) * C121 + (C25480 + C25481) * C50790) * C24546) *
                C50757 -
            (C24777 * C24546 +
             ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
             ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                  C50790 +
              (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                  C121) *
                 C50968) *
                C50920) *
               C893 +
           ((((C24756 + C24757) * C121 + (C24758 + C24759) * C50790) * C50968 +
             ((C24760 + C24761) * C121 + (C24762 + C24763) * C50790) * C50969 +
             ((C24764 + C24765) * C121 + (C24766 + C24767) * C50790) * C24546) *
                C50920 -
            (((C49740 * C3079 + C50633 * C3083 + C49747 * C3078 +
               C50904 * C3082) *
                  C50790 +
              (C49740 * C3074 + C50633 * C3080 + C49747 * C3073 +
               C50904 * C3076) *
                  C121) *
                 C24546 +
             ((C25481 + C25480) * C50790 + (C25479 + C25478) * C121) * C50969 +
             ((C25477 + C25476) * C50790 + (C25475 + C25474) * C121) * C50968) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50693 * C893 -
           (((C24752 + C24753) * C50790 + (C24754 + C24755) * C121) * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C50693 * C50729) *
              C895 +
          ((((C24756 + C24757) * C121 + (C24758 + C24759) * C50790) * C50968 +
            ((C24760 + C24761) * C121 + (C24762 + C24763) * C50790) * C50969 +
            ((C24764 + C24765) * C121 + (C24766 + C24767) * C50790) * C24546) *
               C50693 * C50729 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C50693 * C893) *
              C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C121 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50790) *
                C50968 +
            ((C25086 + C25087) * C121 + (C25088 + C25089) * C50790) * C50969 +
            ((C25090 + C25091) * C121 + (C25092 + C25093) * C50790) * C24546) *
               C50693 * C893 -
           (((C49740 * C973 + C50633 * C981 + C49747 * C974 + C50904 * C982) *
                 C50790 +
             (C49740 * C969 + C50633 * C977 + C49747 * C970 + C50904 * C978) *
                 C121) *
                C24546 +
            ((C25093 + C25092) * C50790 + (C25091 + C25090) * C121) * C50969 +
            ((C25089 + C25088) * C50790 + (C25087 + C25086) * C121) * C50968) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C121 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50790) *
               C50968 +
           ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
           C24776 * C24546) *
              C50693 * C964 -
          (C25742 * C24546 +
           ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
           ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
              C50693 * C965 +
          (C24776 * C50968 +
           ((C24755 + C24754) * C121 + (C24753 + C24752) * C50790) * C50969 +
           ((C25738 + C25739) * C121 + (C25740 + C25741) * C50790) * C24546) *
              C50693 * C966 -
          (((C49740 * C3378 + C50633 * C3382 + C49747 * C3379 +
             C50904 * C3383) *
                C50790 +
            (C49740 * C3376 + C50633 * C3380 + C49747 * C3377 +
             C50904 * C3381) *
                C121) *
               C24546 +
           ((C25741 + C25740) * C50790 + (C25739 + C25738) * C121) * C50969 +
           C25742 * C50968) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                  C121 +
              (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                  C50790) *
                 C50968 +
             ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
             C24776 * C24546) *
                C1544 -
            (C26415 * C24546 +
             ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
             ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                  C50790 +
              (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                  C121) *
                 C50968) *
                C50757) *
               C50919 +
           ((((C25473 + C25472) * C121 + (C25471 + C25470) * C50790) * C50968 +
             ((C25469 + C25468) * C121 + (C25467 + C25466) * C50790) * C50969 +
             ((C26411 + C26412) * C121 + (C26413 + C26414) * C50790) * C24546) *
                C50757 -
            (C25742 * C24546 +
             ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
             ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
                C1544) *
               C50729) *
              C50911 +
          (((((C49747 * C396 + C50904 * C410 + C49740 * C395 + C50633 * C409) *
                  C121 +
              (C49747 * C406 + C50904 * C426 + C49740 * C405 + C50633 * C425) *
                  C50790) *
                 C50968 +
             ((C25474 + C25475) * C121 + (C25476 + C25477) * C50790) * C50969 +
             ((C25478 + C25479) * C121 + (C25480 + C25481) * C50790) * C24546) *
                C50757 -
            (C24777 * C24546 +
             ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
             ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                  C50790 +
              (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                  C121) *
                 C50968) *
                C1544) *
               C50919 +
           ((((C24756 + C24757) * C121 + (C24758 + C24759) * C50790) * C50968 +
             ((C24760 + C24761) * C121 + (C24762 + C24763) * C50790) * C50969 +
             ((C24764 + C24765) * C121 + (C24766 + C24767) * C50790) * C24546) *
                C1544 -
            (((C49740 * C3079 + C50633 * C3083 + C49747 * C3078 +
               C50904 * C3082) *
                  C50790 +
              (C49740 * C3074 + C50633 * C3080 + C49747 * C3073 +
               C50904 * C3076) *
                  C121) *
                 C24546 +
             ((C25481 + C25480) * C50790 + (C25479 + C25478) * C121) * C50969 +
             ((C25477 + C25476) * C50790 + (C25475 + C25474) * C121) * C50968) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50966 -
           (C26415 * C24546 +
            ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C50967 +
           (((C49747 * C398 + C50904 * C412 + C49740 * C399 + C50633 * C413) *
                 C121 +
             (C49747 * C416 + C50904 * C428 + C49740 * C417 + C50633 * C429) *
                 C50790) *
                C50968 +
            ((C25905 + C25906) * C121 + (C25907 + C25908) * C50790) * C50969 +
            ((C25909 + C25910) * C121 + (C25911 + C25912) * C50790) * C24546) *
               C1960) *
              C50919 +
          ((((C25473 + C25472) * C121 + (C25471 + C25470) * C50790) * C50968 +
            ((C25469 + C25468) * C121 + (C25467 + C25466) * C50790) * C50969 +
            ((C26411 + C26412) * C121 + (C26413 + C26414) * C50790) * C24546) *
               C50967 -
           (C25742 * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C50966 -
           (((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 +
              C50904 * C3554) *
                 C50790 +
             (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 +
              C50904 * C3552) *
                 C121) *
                C24546 +
            ((C25912 + C25911) * C50790 + (C25910 + C25909) * C121) * C50969 +
            ((C25908 + C25907) * C50790 + (C25906 + C25905) * C121) * C50968) *
               C1960) *
              C50729) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C1544 -
           (C26415 * C24546 +
            ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C50757) *
              C248 +
          ((((C25473 + C25472) * C121 + (C25471 + C25470) * C50790) * C50968 +
            ((C25469 + C25468) * C121 + (C25467 + C25466) * C50790) * C50969 +
            ((C26411 + C26412) * C121 + (C26413 + C26414) * C50790) * C24546) *
               C50757 -
           (C25742 * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C1544) *
              C249 +
          ((C24776 * C50968 +
            ((C24755 + C24754) * C121 + (C24753 + C24752) * C50790) * C50969 +
            ((C25738 + C25739) * C121 + (C25740 + C25741) * C50790) * C24546) *
               C1544 -
           (((C49740 * C4067 + C50633 * C4071 + C49747 * C4068 +
              C50904 * C4072) *
                 C50790 +
             (C49740 * C4065 + C50633 * C4069 + C49747 * C4066 +
              C50904 * C4070) *
                 C121) *
                C24546 +
            ((C26414 + C26413) * C50790 + (C26412 + C26411) * C121) * C50969 +
            C26415 * C50968) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C1544 -
           (C26415 * C24546 +
            ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C50757) *
              C50677 * C895 +
          ((((C49747 * C396 + C50904 * C410 + C49740 * C395 + C50633 * C409) *
                 C121 +
             (C49747 * C406 + C50904 * C426 + C49740 * C405 + C50633 * C425) *
                 C50790) *
                C50968 +
            ((C25474 + C25475) * C121 + (C25476 + C25477) * C50790) * C50969 +
            ((C25478 + C25479) * C121 + (C25480 + C25481) * C50790) * C24546) *
               C50757 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C1544) *
              C50677 * C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C121 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50790) *
                C50968 +
            ((C25086 + C25087) * C121 + (C25088 + C25089) * C50790) * C50969 +
            ((C25090 + C25091) * C121 + (C25092 + C25093) * C50790) * C24546) *
               C1544 -
           (((C49740 * C1434 + C50633 * C1442 + C49747 * C1435 +
              C50904 * C1443) *
                 C50790 +
             (C49740 * C1430 + C50633 * C1438 + C49747 * C1431 +
              C50904 * C1439) *
                 C121) *
                C24546 +
            ((C49740 * C787 + C50633 * C793 + C49747 * C786 + C50904 * C792) *
                 C50790 +
             (C49740 * C778 + C50633 * C783 + C49747 * C777 + C50904 * C782) *
                 C121) *
                C50969 +
            ((C49740 * C404 + C50633 * C424 + C49747 * C405 + C50904 * C425) *
                 C50790 +
             (C49740 * C394 + C50633 * C408 + C49747 * C395 + C50904 * C409) *
                 C121) *
                C50968) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C121 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50790) *
               C50968 +
           ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
           C24776 * C24546) *
              C1710 -
          (C26415 * C24546 +
           ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
           ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                C50790 +
            (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                C121) *
               C50968) *
              C1711 +
          (((C49747 * C398 + C50904 * C412 + C49740 * C399 + C50633 * C413) *
                C121 +
            (C49747 * C416 + C50904 * C428 + C49740 * C417 + C50633 * C429) *
                C50790) *
               C50968 +
           ((C25905 + C25906) * C121 + (C25907 + C25908) * C50790) * C50969 +
           ((C25909 + C25910) * C121 + (C25911 + C25912) * C50790) * C24546) *
              C1712 -
          (((C49740 * C4484 + C50633 * C4492 + C49747 * C4485 +
             C50904 * C4493) *
                C50790 +
            (C49740 * C4480 + C50633 * C4486 + C49747 * C4481 +
             C50904 * C4487) *
                C121) *
               C24546 +
           ((C49740 * C4488 + C50633 * C4494 + C49747 * C4489 +
             C50904 * C4495) *
                C50790 +
            (C49740 * C4482 + C50633 * C4490 + C49747 * C4483 +
             C50904 * C4491) *
                C121) *
               C50969 +
           ((C49740 * C1720 + C50633 * C1728 + C49747 * C1721 +
             C50904 * C1729) *
                C50790 +
            (C49740 * C1716 + C50633 * C1724 + C49747 * C1717 +
             C50904 * C1725) *
                C121) *
               C50968) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C50966 -
           (C26415 * C24546 +
            ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C50967 +
           (((C49747 * C398 + C50904 * C412 + C49740 * C399 + C50633 * C413) *
                 C121 +
             (C49747 * C416 + C50904 * C428 + C49740 * C417 + C50633 * C429) *
                 C50790) *
                C50968 +
            ((C25905 + C25906) * C121 + (C25907 + C25908) * C50790) * C50969 +
            ((C25909 + C25910) * C121 + (C25911 + C25912) * C50790) * C24546) *
               C1960) *
              C50677 * C50911 +
          ((((C49747 * C396 + C50904 * C410 + C49740 * C395 + C50633 * C409) *
                 C121 +
             (C49747 * C406 + C50904 * C426 + C49740 * C405 + C50633 * C425) *
                 C50790) *
                C50968 +
            ((C25474 + C25475) * C121 + (C25476 + C25477) * C50790) * C50969 +
            ((C25478 + C25479) * C121 + (C25480 + C25481) * C50790) * C24546) *
               C50967 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C50966 -
           (((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
              C50904 * C2560) *
                 C50790 +
             (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
              C50904 * C2554) *
                 C121) *
                C24546 +
            ((C49740 * C1088 + C50633 * C1096 + C49747 * C1089 +
              C50904 * C1097) *
                 C50790 +
             (C49740 * C1084 + C50633 * C1092 + C49747 * C1085 +
              C50904 * C1093) *
                 C121) *
                C50969 +
            ((C49740 * C418 + C50633 * C430 + C49747 * C417 + C50904 * C429) *
                 C50790 +
             (C49740 * C400 + C50633 * C414 + C49747 * C399 + C50904 * C413) *
                 C121) *
                C50968) *
               C1960) *
              C50677 * C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C1544 -
           (C26415 * C24546 +
            ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C50757) *
              C50677 * C895 +
          ((((C49747 * C396 + C50904 * C410 + C49740 * C395 + C50633 * C409) *
                 C121 +
             (C49747 * C406 + C50904 * C426 + C49740 * C405 + C50633 * C425) *
                 C50790) *
                C50968 +
            ((C25474 + C25475) * C121 + (C25476 + C25477) * C50790) * C50969 +
            ((C25478 + C25479) * C121 + (C25480 + C25481) * C50790) * C24546) *
               C50757 -
           (C24777 * C24546 +
            ((C24759 + C24758) * C50790 + (C24757 + C24756) * C121) * C50969 +
            ((C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50790 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C121) *
                C50968) *
               C1544) *
              C50677 * C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C121 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50790) *
                C50968 +
            ((C25086 + C25087) * C121 + (C25088 + C25089) * C50790) * C50969 +
            ((C25090 + C25091) * C121 + (C25092 + C25093) * C50790) * C24546) *
               C1544 -
           (((C49740 * C1434 + C50633 * C1442 + C49747 * C1435 +
              C50904 * C1443) *
                 C50790 +
             (C49740 * C1430 + C50633 * C1438 + C49747 * C1431 +
              C50904 * C1439) *
                 C121) *
                C24546 +
            ((C49740 * C787 + C50633 * C793 + C49747 * C786 + C50904 * C792) *
                 C50790 +
             (C49740 * C778 + C50633 * C783 + C49747 * C777 + C50904 * C782) *
                 C121) *
                C50969 +
            ((C49740 * C404 + C50633 * C424 + C49747 * C405 + C50904 * C425) *
                 C50790 +
             (C49740 * C394 + C50633 * C408 + C49747 * C395 + C50904 * C409) *
                 C121) *
                C50968) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C121 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50790) *
                C50968 +
            ((C24744 + C24745) * C121 + (C24746 + C24747) * C50790) * C50969 +
            C24776 * C24546) *
               C1544 -
           (C26415 * C24546 +
            ((C25470 + C25471) * C50790 + (C25472 + C25473) * C121) * C50969 +
            ((C49740 * C406 + C50633 * C426 + C49747 * C407 + C50904 * C427) *
                 C50790 +
             (C49740 * C396 + C50633 * C410 + C49747 * C397 + C50904 * C411) *
                 C121) *
                C50968) *
               C50757) *
              C248 +
          ((((C25473 + C25472) * C121 + (C25471 + C25470) * C50790) * C50968 +
            ((C25469 + C25468) * C121 + (C25467 + C25466) * C50790) * C50969 +
            ((C26411 + C26412) * C121 + (C26413 + C26414) * C50790) * C24546) *
               C50757 -
           (C25742 * C24546 +
            ((C24751 + C24750) * C50790 + (C24749 + C24748) * C121) * C50969 +
            ((C24747 + C24746) * C50790 + (C24745 + C24744) * C121) * C50968) *
               C1544) *
              C249 +
          ((C24776 * C50968 +
            ((C24755 + C24754) * C121 + (C24753 + C24752) * C50790) * C50969 +
            ((C25738 + C25739) * C121 + (C25740 + C25741) * C50790) * C24546) *
               C1544 -
           (((C49740 * C4067 + C50633 * C4071 + C49747 * C4068 +
              C50904 * C4072) *
                 C50790 +
             (C49740 * C4065 + C50633 * C4069 + C49747 * C4066 +
              C50904 * C4070) *
                 C121) *
                C24546 +
            ((C26414 + C26413) * C50790 + (C26412 + C26411) * C121) * C50969 +
            C26415 * C50968) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50693 * C50919 -
           ((C31158 + C31159 + C31160 + C31161) * C24546 +
            (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C50693 * C50729) *
              C50962 +
          (((C31162 + C31163 + C31164 + C31165) * C50968 +
            (C31166 + C31167 + C31168 + C31169) * C50969 +
            (C31170 + C31171 + C31172 + C31173) * C24546) *
               C50693 * C50729 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C50693 * C50919) *
              C50963 +
          ((((C19747 * C124 + C50628 * C131) * C10704 +
             (C19747 * C135 + C50628 * C145) * C50933 + C22439 * C10705 +
             C22440 * C50854) *
                C50968 +
            (C31472 + C31473 + C31474 + C31475) * C50969 +
            (C31476 + C31477 + C31484 + C31485) * C24546) *
               C50693 * C50919 -
           (((C19747 * C3079 + C50628 * C3083) * C50854 +
             (C19747 * C3074 + C50628 * C3080) * C10705 + C20128 * C50933 +
             C20127 * C10704) *
                C24546 +
            (C31485 + C31484 + C31477 + C31476) * C50969 +
            (C31475 + C31474 + C31473 + C31472) * C50968) *
               C50693 * C50729) *
              C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C10704 +
              (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
              C22106 * C50854) *
                 C50968 +
             (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
                C50920 -
            ((C31826 + C31827 + C31828 + C31829) * C24546 +
             (C31830 + C31831 + C31832 + C31833) * C50969 +
             (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
              C22105 * C10704) *
                 C50968) *
                C50757) *
               C50919 +
           (((C31833 + C31832 + C31831 + C31830) * C50968 +
             (C31829 + C31828 + C31827 + C31826) * C50969 +
             (C20388 * C10704 + C20387 * C50933 + C20707 * C10705 +
              C20708 * C50854) *
                 C24546) *
                C50757 -
            ((C31158 + C31159 + C31160 + C31161) * C24546 +
             (C31157 + C31156 + C31155 + C31154) * C50969 +
             (C31153 + C31152 + C31151 + C31150) * C50968) *
                C50920) *
               C50729) *
              C251 +
          ((((C22113 * C10704 + C22114 * C50933 + C22115 * C10705 +
              C22116 * C50854) *
                 C50968 +
             (C31834 + C31835 + C31836 + C31837) * C50969 +
             (C31838 + C31839 + C31840 + C31841) * C24546) *
                C50757 -
            (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
             (C22114 * C50854 + C22113 * C10705 +
              (C19747 * C134 + C50628 * C144) * C50933 +
              (C19747 * C123 + C50628 * C130) * C10704) *
                 C50968) *
                C50920) *
               C50919 +
           (((C31162 + C31163 + C31164 + C31165) * C50968 +
             (C31166 + C31167 + C31168 + C31169) * C50969 +
             (C31170 + C31171 + C31172 + C31173) * C24546) *
                C50920 -
            (((C19747 * C3549 + C50628 * C3553) * C50854 +
              (C19747 * C3547 + C50628 * C3551) * C10705 + C20398 * C50933 +
              C20397 * C10704) *
                 C24546 +
             (C31841 + C31840 + C31839 + C31838) * C50969 +
             (C31837 + C31836 + C31835 + C31834) * C50968) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50693 * C248 -
           ((C31158 + C31159 + C31160 + C31161) * C24546 +
            (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C50693 * C249 +
           (C31178 * C50968 + (C31161 + C31160 + C31159 + C31158) * C50969 +
            (C19886 * C10704 + C19885 * C50933 + C21051 * C10705 +
             C21052 * C50854) *
                C24546) *
               C50693 * C250) *
              C251 +
          (((C31162 + C31163 + C31164 + C31165) * C50968 +
            (C31166 + C31167 + C31168 + C31169) * C50969 +
            (C31170 + C31171 + C31172 + C31173) * C24546) *
               C50693 * C249 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C50693 * C248 -
           (((C19747 * C4067 + C50628 * C4071) * C50854 +
             (C19747 * C4065 + C50628 * C4069) * C10705 + C19894 * C50933 +
             C19893 * C10704) *
                C24546 +
            (C31173 + C31172 + C31171 + C31170) * C50969 + C31179 * C50968) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C10704 +
            (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
            C22106 * C50854) *
               C50968 +
           (C19879 * C10704 + C19880 * C50933 + C20392 * C10705 +
            C20391 * C50854) *
               C50969 +
           (C19881 * C10704 + C19882 * C50933 + C20390 * C10705 +
            C20389 * C50854) *
               C24546) *
              C50693 * C50677 * C113 -
          ((C20396 * C50854 + C20395 * C10705 + C19890 * C50933 +
            C19889 * C10704) *
               C24546 +
           (C20394 * C50854 + C20393 * C10705 + C19888 * C50933 +
            C19887 * C10704) *
               C50969 +
           (C22114 * C50854 + C22113 * C10705 +
            (C19747 * C134 + C50628 * C144) * C50933 +
            (C19747 * C123 + C50628 * C130) * C10704) *
               C50968) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C10704 +
            (C19747 * C135 + C50628 * C145) * C50933 + C22439 * C10705 +
            C22440 * C50854) *
               C50968 +
           (C20123 * C10704 + C20124 * C50933 + C22277 * C10705 +
            C22278 * C50854) *
               C50969 +
           (C20125 * C10704 + C20126 * C50933 +
            (C19747 * C1431 + C50628 * C1439) * C10705 +
            (C19747 * C1435 + C50628 * C1443) * C50854) *
               C24546) *
              C50693 * C50677 * C115 -
          (((C19747 * C1434 + C50628 * C1442) * C50854 +
            (C19747 * C1430 + C50628 * C1438) * C10705 +
            (C19747 * C278 + C50628 * C290) * C50933 +
            (C19747 * C260 + C50628 * C274) * C10704) *
               C24546 +
           ((C19747 * C787 + C50628 * C793) * C50854 +
            (C19747 * C778 + C50628 * C783) * C10705 +
            (C19747 * C263 + C50628 * C283) * C50933 +
            (C19747 * C253 + C50628 * C267) * C10704) *
               C50969 +
           ((C19747 * C404 + C50628 * C424) * C50854 +
            (C19747 * C394 + C50628 * C408) * C10705 +
            (C19747 * C136 + C50628 * C146) * C50933 +
            (C19747 * C125 + C50628 * C132) * C10704) *
               C50968) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C391 -
           ((C20706 * C50854 + C20705 * C10705 + C20389 * C50933 +
             C20390 * C10704) *
                C24546 +
            (C20704 * C50854 + C20703 * C10705 + C20391 * C50933 +
             C20392 * C10704) *
                C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C392 +
           ((C22107 * C10704 + C22108 * C50933 + C22112 * C10705 +
             C22111 * C50854) *
                C50968 +
            (C20703 * C10704 + C20704 * C50933 + C22110 * C10705 +
             C22109 * C50854) *
                C50969 +
            (C20705 * C10704 + C20706 * C50933 + C23063 * C10705 +
             C23064 * C50854) *
                C24546) *
               C393) *
              C50677 * C251 +
          (((C22113 * C10704 + C22114 * C50933 + C22115 * C10705 +
             C22116 * C50854) *
                C50968 +
            (C20393 * C10704 + C20394 * C50933 + C21919 * C10705 +
             C21920 * C50854) *
                C50969 +
            (C20395 * C10704 + C20396 * C50933 + C21921 * C10705 +
             C21922 * C50854) *
                C24546) *
               C392 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C391 -
           (((C19747 * C4484 + C50628 * C4492) * C50854 +
             (C19747 * C4480 + C50628 * C4486) * C10705 + C21922 * C50933 +
             C21921 * C10704) *
                C24546 +
            (C22120 * C50854 + C22119 * C10705 + C21920 * C50933 +
             C21919 * C10704) *
                C50969 +
            (C22118 * C50854 + C22117 * C10705 + C22116 * C50933 +
             C22115 * C10704) *
                C50968) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50920 -
           ((C20706 * C50854 + C20705 * C10705 + C20389 * C50933 +
             C20390 * C10704) *
                C24546 +
            (C20704 * C50854 + C20703 * C10705 + C20391 * C50933 +
             C20392 * C10704) *
                C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C50757) *
              C50677 * C50962 +
          (((C22113 * C10704 + C22114 * C50933 + C22115 * C10705 +
             C22116 * C50854) *
                C50968 +
            (C20393 * C10704 + C20394 * C50933 + C21919 * C10705 +
             C21920 * C50854) *
                C50969 +
            (C20395 * C10704 + C20396 * C50933 + C21921 * C10705 +
             C21922 * C50854) *
                C24546) *
               C50757 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C50920) *
              C50677 * C50963 +
          ((((C19747 * C124 + C50628 * C131) * C10704 +
             (C19747 * C135 + C50628 * C145) * C50933 + C22439 * C10705 +
             C22440 * C50854) *
                C50968 +
            (C31472 + C31473 + C31474 + C31475) * C50969 +
            (C31476 + C31477 + C31484 + C31485) * C24546) *
               C50920 -
           (((C19747 * C2557 + C50628 * C2561) * C50854 +
             (C19747 * C2552 + C50628 * C2558) * C10705 + C31483 * C50933 +
             C31482 * C10704) *
                C24546 +
            (C22280 * C50854 + C22279 * C10705 + C22278 * C50933 +
             C22277 * C10704) *
                C50969 +
            (C22442 * C50854 + C22441 * C10705 + C22440 * C50933 +
             C22439 * C10704) *
                C50968) *
               C50757) *
              C50677 * C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C10704 +
            (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
            C22106 * C50854) *
               C50968 +
           (C19879 * C10704 + C19880 * C50933 + C20392 * C10705 +
            C20391 * C50854) *
               C50969 +
           (C19881 * C10704 + C19882 * C50933 + C20390 * C10705 +
            C20389 * C50854) *
               C24546) *
              C50693 * C50677 * C113 -
          ((C20396 * C50854 + C20395 * C10705 + C19890 * C50933 +
            C19889 * C10704) *
               C24546 +
           (C20394 * C50854 + C20393 * C10705 + C19888 * C50933 +
            C19887 * C10704) *
               C50969 +
           (C22114 * C50854 + C22113 * C10705 +
            (C19747 * C134 + C50628 * C144) * C50933 +
            (C19747 * C123 + C50628 * C130) * C10704) *
               C50968) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C10704 +
            (C19747 * C135 + C50628 * C145) * C50933 + C22439 * C10705 +
            C22440 * C50854) *
               C50968 +
           (C20123 * C10704 + C20124 * C50933 + C22277 * C10705 +
            C22278 * C50854) *
               C50969 +
           (C20125 * C10704 + C20126 * C50933 +
            (C19747 * C1431 + C50628 * C1439) * C10705 +
            (C19747 * C1435 + C50628 * C1443) * C50854) *
               C24546) *
              C50693 * C50677 * C115 -
          (((C19747 * C1434 + C50628 * C1442) * C50854 +
            (C19747 * C1430 + C50628 * C1438) * C10705 +
            (C19747 * C278 + C50628 * C290) * C50933 +
            (C19747 * C260 + C50628 * C274) * C10704) *
               C24546 +
           ((C19747 * C787 + C50628 * C793) * C50854 +
            (C19747 * C778 + C50628 * C783) * C10705 +
            (C19747 * C263 + C50628 * C283) * C50933 +
            (C19747 * C253 + C50628 * C267) * C10704) *
               C50969 +
           ((C19747 * C404 + C50628 * C424) * C50854 +
            (C19747 * C394 + C50628 * C408) * C10705 +
            (C19747 * C136 + C50628 * C146) * C50933 +
            (C19747 * C125 + C50628 * C132) * C10704) *
               C50968) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50693 * C248 -
           ((C31158 + C31159 + C31160 + C31161) * C24546 +
            (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C50693 * C249 +
           (C31178 * C50968 + (C31161 + C31160 + C31159 + C31158) * C50969 +
            (C19886 * C10704 + C19885 * C50933 + C21051 * C10705 +
             C21052 * C50854) *
                C24546) *
               C50693 * C250) *
              C251 +
          (((C31162 + C31163 + C31164 + C31165) * C50968 +
            (C31166 + C31167 + C31168 + C31169) * C50969 +
            (C31170 + C31171 + C31172 + C31173) * C24546) *
               C50693 * C249 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C50693 * C248 -
           (((C19747 * C4067 + C50628 * C4071) * C50854 +
             (C19747 * C4065 + C50628 * C4069) * C10705 + C19894 * C50933 +
             C19893 * C10704) *
                C24546 +
            (C31173 + C31172 + C31171 + C31170) * C50969 + C31179 * C50968) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50693 * C50964 -
           (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C50693 * C50965 +
           (C31178 * C50968 + (C31161 + C31160 + C31159 + C31158) * C50969 +
            (C32087 + C32088 + C32089 + C32090) * C24546) *
               C50693 * C1199) *
              C50911 +
          (((C31162 + C31163 + C31164 + C31165) * C50968 +
            (C31166 + C31167 + C31168 + C31169) * C50969 +
            (C31170 + C31171 + C31172 + C31173) * C24546) *
               C50693 * C50965 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C50693 * C50964 -
           (((C19747 * C4067 + C50628 * C4071) * C50854 +
             (C19747 * C4065 + C50628 * C4069) * C10705 + C19894 * C50933 +
             C19893 * C10704) *
                C24546 +
            (C31173 + C31172 + C31171 + C31170) * C50969 + C31179 * C50968) *
               C50693 * C1199) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50920 -
           (C32739 * C24546 + (C31830 + C31831 + C31832 + C31833) * C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C50757) *
              C50964 +
          (((C31833 + C31832 + C31831 + C31830) * C50968 +
            (C31829 + C31828 + C31827 + C31826) * C50969 +
            (C32734 + C32735 + C32736 + C32737) * C24546) *
               C50757 -
           (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C50920) *
              C50965 +
          ((C31178 * C50968 + (C31161 + C31160 + C31159 + C31158) * C50969 +
            (C32087 + C32088 + C32089 + C32090) * C24546) *
               C50920 -
           (((C19747 * C20687 + C50628 * C20689) * C50854 +
             (C19747 * C20686 + C50628 * C20688) * C10705 + C21052 * C50933 +
             C21051 * C10704) *
                C24546 +
            (C32737 + C32736 + C32735 + C32734) * C50969 + C32739 * C50968) *
               C50757) *
              C1199) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C10704 +
            (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
            C22106 * C50854) *
               C50968 +
           (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
              C50693 * C964 -
          (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
           (C31153 + C31152 + C31151 + C31150) * C50968) *
              C50693 * C965 +
          (C31178 * C50968 + (C31161 + C31160 + C31159 + C31158) * C50969 +
           (C32087 + C32088 + C32089 + C32090) * C24546) *
              C50693 * C966 -
          (((C19747 * C21041 + C50628 * C21043) * C50854 +
            (C19747 * C21040 + C50628 * C21042) * C10705 + C20586 * C50933 +
            C20585 * C10704) *
               C24546 +
           (C32090 + C32089 + C32088 + C32087) * C50969 + C32092 * C50968) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50693 * C893 -
           ((C31158 + C31159 + C31160 + C31161) * C24546 +
            (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C50693 * C50729) *
              C895 +
          (((C31162 + C31163 + C31164 + C31165) * C50968 +
            (C31166 + C31167 + C31168 + C31169) * C50969 +
            (C31170 + C31171 + C31172 + C31173) * C24546) *
               C50693 * C50729 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C10704 +
             (C19747 * C135 + C50628 * C145) * C50933 + C22439 * C10705 +
             C22440 * C50854) *
                C50968 +
            (C31472 + C31473 + C31474 + C31475) * C50969 +
            (C31476 + C31477 + C31484 + C31485) * C24546) *
               C50693 * C893 -
           (((C19747 * C3079 + C50628 * C3083) * C50854 +
             (C19747 * C3074 + C50628 * C3080) * C10705 + C20128 * C50933 +
             C20127 * C10704) *
                C24546 +
            (C31485 + C31484 + C31477 + C31476) * C50969 +
            (C31475 + C31474 + C31473 + C31472) * C50968) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C391 -
           ((C31826 + C31827 + C31828 + C31829) * C24546 +
            (C31830 + C31831 + C31832 + C31833) * C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C392 +
           ((C22107 * C10704 + C22108 * C50933 + C22112 * C10705 +
             C22111 * C50854) *
                C50968 +
            (C32239 + C32240 + C32241 + C32242) * C50969 +
            (C32243 + C32244 + C32245 + C32246) * C24546) *
               C393) *
              C893 +
          (((C31833 + C31832 + C31831 + C31830) * C50968 +
            (C31829 + C31828 + C31827 + C31826) * C50969 +
            (C20388 * C10704 + C20387 * C50933 + C20707 * C10705 +
             C20708 * C50854) *
                C24546) *
               C392 -
           (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C391 -
           (((C19747 * C21317 + C50628 * C21319) * C50854 +
             (C19747 * C21316 + C50628 * C21318) * C10705 + C20708 * C50933 +
             C20707 * C10704) *
                C24546 +
            (C32246 + C32245 + C32244 + C32243) * C50969 +
            (C32242 + C32241 + C32240 + C32239) * C50968) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C10704 +
              (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
              C22106 * C50854) *
                 C50968 +
             (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
                C50920 -
            ((C31826 + C31827 + C31828 + C31829) * C24546 +
             (C31830 + C31831 + C31832 + C31833) * C50969 +
             (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
              C22105 * C10704) *
                 C50968) *
                C50757) *
               C893 +
           (((C31833 + C31832 + C31831 + C31830) * C50968 +
             (C31829 + C31828 + C31827 + C31826) * C50969 +
             (C20388 * C10704 + C20387 * C50933 + C20707 * C10705 +
              C20708 * C50854) *
                 C24546) *
                C50757 -
            (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
             (C31153 + C31152 + C31151 + C31150) * C50968) *
                C50920) *
               C50729) *
              C50911 +
          ((((C22113 * C10704 + C22114 * C50933 + C22115 * C10705 +
              C22116 * C50854) *
                 C50968 +
             (C31834 + C31835 + C31836 + C31837) * C50969 +
             (C31838 + C31839 + C31840 + C31841) * C24546) *
                C50757 -
            (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
             (C22114 * C50854 + C22113 * C10705 +
              (C19747 * C134 + C50628 * C144) * C50933 +
              (C19747 * C123 + C50628 * C130) * C10704) *
                 C50968) *
                C50920) *
               C893 +
           (((C31162 + C31163 + C31164 + C31165) * C50968 +
             (C31166 + C31167 + C31168 + C31169) * C50969 +
             (C31170 + C31171 + C31172 + C31173) * C24546) *
                C50920 -
            (((C19747 * C3549 + C50628 * C3553) * C50854 +
              (C19747 * C3547 + C50628 * C3551) * C10705 + C20398 * C50933 +
              C20397 * C10704) *
                 C24546 +
             (C31841 + C31840 + C31839 + C31838) * C50969 +
             (C31837 + C31836 + C31835 + C31834) * C50968) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50693 * C893 -
           ((C31158 + C31159 + C31160 + C31161) * C24546 +
            (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C50693 * C50729) *
              C895 +
          (((C31162 + C31163 + C31164 + C31165) * C50968 +
            (C31166 + C31167 + C31168 + C31169) * C50969 +
            (C31170 + C31171 + C31172 + C31173) * C24546) *
               C50693 * C50729 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C10704 +
             (C19747 * C135 + C50628 * C145) * C50933 + C22439 * C10705 +
             C22440 * C50854) *
                C50968 +
            (C31472 + C31473 + C31474 + C31475) * C50969 +
            (C31476 + C31477 + C31484 + C31485) * C24546) *
               C50693 * C893 -
           (((C19747 * C3079 + C50628 * C3083) * C50854 +
             (C19747 * C3074 + C50628 * C3080) * C10705 + C20128 * C50933 +
             C20127 * C10704) *
                C24546 +
            (C31485 + C31484 + C31477 + C31476) * C50969 +
            (C31475 + C31474 + C31473 + C31472) * C50968) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C10704 +
            (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
            C22106 * C50854) *
               C50968 +
           (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
              C50693 * C964 -
          (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
           (C31153 + C31152 + C31151 + C31150) * C50968) *
              C50693 * C965 +
          (C31178 * C50968 + (C31161 + C31160 + C31159 + C31158) * C50969 +
           (C32087 + C32088 + C32089 + C32090) * C24546) *
              C50693 * C966 -
          (((C19747 * C21041 + C50628 * C21043) * C50854 +
            (C19747 * C21040 + C50628 * C21042) * C10705 + C20586 * C50933 +
            C20585 * C10704) *
               C24546 +
           (C32090 + C32089 + C32088 + C32087) * C50969 + C32092 * C50968) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C10704 +
              (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
              C22106 * C50854) *
                 C50968 +
             (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
                C1544 -
            (C32739 * C24546 + (C31830 + C31831 + C31832 + C31833) * C50969 +
             (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
              C22105 * C10704) *
                 C50968) *
                C50757) *
               C50919 +
           (((C31833 + C31832 + C31831 + C31830) * C50968 +
             (C31829 + C31828 + C31827 + C31826) * C50969 +
             (C32734 + C32735 + C32736 + C32737) * C24546) *
                C50757 -
            (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
             (C31153 + C31152 + C31151 + C31150) * C50968) *
                C1544) *
               C50729) *
              C50911 +
          ((((C22113 * C10704 + C22114 * C50933 + C22115 * C10705 +
              C22116 * C50854) *
                 C50968 +
             (C31834 + C31835 + C31836 + C31837) * C50969 +
             (C31838 + C31839 + C31840 + C31841) * C24546) *
                C50757 -
            (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
             (C22114 * C50854 + C22113 * C10705 +
              (C19747 * C134 + C50628 * C144) * C50933 +
              (C19747 * C123 + C50628 * C130) * C10704) *
                 C50968) *
                C1544) *
               C50919 +
           (((C31162 + C31163 + C31164 + C31165) * C50968 +
             (C31166 + C31167 + C31168 + C31169) * C50969 +
             (C31170 + C31171 + C31172 + C31173) * C24546) *
                C1544 -
            (((C19747 * C3549 + C50628 * C3553) * C50854 +
              (C19747 * C3547 + C50628 * C3551) * C10705 + C20398 * C50933 +
              C20397 * C10704) *
                 C24546 +
             (C31841 + C31840 + C31839 + C31838) * C50969 +
             (C31837 + C31836 + C31835 + C31834) * C50968) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50966 -
           (C32739 * C24546 + (C31830 + C31831 + C31832 + C31833) * C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C50967 +
           ((C22107 * C10704 + C22108 * C50933 + C22112 * C10705 +
             C22111 * C50854) *
                C50968 +
            (C32239 + C32240 + C32241 + C32242) * C50969 +
            (C32243 + C32244 + C32245 + C32246) * C24546) *
               C1960) *
              C50919 +
          (((C31833 + C31832 + C31831 + C31830) * C50968 +
            (C31829 + C31828 + C31827 + C31826) * C50969 +
            (C32734 + C32735 + C32736 + C32737) * C24546) *
               C50967 -
           (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C50966 -
           (((C19747 * C21317 + C50628 * C21319) * C50854 +
             (C19747 * C21316 + C50628 * C21318) * C10705 + C20708 * C50933 +
             C20707 * C10704) *
                C24546 +
            (C32246 + C32245 + C32244 + C32243) * C50969 +
            (C32242 + C32241 + C32240 + C32239) * C50968) *
               C1960) *
              C50729) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C1544 -
           (C32739 * C24546 + (C31830 + C31831 + C31832 + C31833) * C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C50757) *
              C248 +
          (((C31833 + C31832 + C31831 + C31830) * C50968 +
            (C31829 + C31828 + C31827 + C31826) * C50969 +
            (C32734 + C32735 + C32736 + C32737) * C24546) *
               C50757 -
           (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C1544) *
              C249 +
          ((C31178 * C50968 + (C31161 + C31160 + C31159 + C31158) * C50969 +
            (C32087 + C32088 + C32089 + C32090) * C24546) *
               C1544 -
           (((C19747 * C20687 + C50628 * C20689) * C50854 +
             (C19747 * C20686 + C50628 * C20688) * C10705 + C21052 * C50933 +
             C21051 * C10704) *
                C24546 +
            (C32737 + C32736 + C32735 + C32734) * C50969 + C32739 * C50968) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C1544 -
           (C32739 * C24546 + (C31830 + C31831 + C31832 + C31833) * C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C10704 + C22114 * C50933 + C22115 * C10705 +
             C22116 * C50854) *
                C50968 +
            (C31834 + C31835 + C31836 + C31837) * C50969 +
            (C31838 + C31839 + C31840 + C31841) * C24546) *
               C50757 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C10704 +
             (C19747 * C135 + C50628 * C145) * C50933 + C22439 * C10705 +
             C22440 * C50854) *
                C50968 +
            (C31472 + C31473 + C31474 + C31475) * C50969 +
            (C31476 + C31477 + C31484 + C31485) * C24546) *
               C1544 -
           (((C19747 * C2557 + C50628 * C2561) * C50854 +
             (C19747 * C2552 + C50628 * C2558) * C10705 + C31483 * C50933 +
             C31482 * C10704) *
                C24546 +
            (C22280 * C50854 + C22279 * C10705 + C22278 * C50933 +
             C22277 * C10704) *
                C50969 +
            (C22442 * C50854 + C22441 * C10705 + C22440 * C50933 +
             C22439 * C10704) *
                C50968) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C10704 +
            (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
            C22106 * C50854) *
               C50968 +
           (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
              C1710 -
          (C32739 * C24546 + (C31830 + C31831 + C31832 + C31833) * C50969 +
           (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
            C22105 * C10704) *
               C50968) *
              C1711 +
          ((C22107 * C10704 + C22108 * C50933 + C22112 * C10705 +
            C22111 * C50854) *
               C50968 +
           (C32239 + C32240 + C32241 + C32242) * C50969 +
           (C32243 + C32244 + C32245 + C32246) * C24546) *
              C1712 -
          (((C19747 * C23045 + C50628 * C23047) * C50854 +
            (C19747 * C23044 + C50628 * C23046) * C10705 + C23064 * C50933 +
            C23063 * C10704) *
               C24546 +
           (C23062 * C50854 + C23061 * C10705 + C22109 * C50933 +
            C22110 * C10704) *
               C50969 +
           (C23958 * C50854 + C23957 * C10705 + C22111 * C50933 +
            C22112 * C10704) *
               C50968) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C50966 -
           (C32739 * C24546 + (C31830 + C31831 + C31832 + C31833) * C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C50967 +
           ((C22107 * C10704 + C22108 * C50933 + C22112 * C10705 +
             C22111 * C50854) *
                C50968 +
            (C32239 + C32240 + C32241 + C32242) * C50969 +
            (C32243 + C32244 + C32245 + C32246) * C24546) *
               C1960) *
              C50677 * C50911 +
          (((C22113 * C10704 + C22114 * C50933 + C22115 * C10705 +
             C22116 * C50854) *
                C50968 +
            (C31834 + C31835 + C31836 + C31837) * C50969 +
            (C31838 + C31839 + C31840 + C31841) * C24546) *
               C50967 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C50966 -
           (((C19747 * C4484 + C50628 * C4492) * C50854 +
             (C19747 * C4480 + C50628 * C4486) * C10705 + C21922 * C50933 +
             C21921 * C10704) *
                C24546 +
            (C22120 * C50854 + C22119 * C10705 + C21920 * C50933 +
             C21919 * C10704) *
                C50969 +
            (C22118 * C50854 + C22117 * C10705 + C22116 * C50933 +
             C22115 * C10704) *
                C50968) *
               C1960) *
              C50677 * C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C1544 -
           (C32739 * C24546 + (C31830 + C31831 + C31832 + C31833) * C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C10704 + C22114 * C50933 + C22115 * C10705 +
             C22116 * C50854) *
                C50968 +
            (C31834 + C31835 + C31836 + C31837) * C50969 +
            (C31838 + C31839 + C31840 + C31841) * C24546) *
               C50757 -
           (C31179 * C24546 + (C31165 + C31164 + C31163 + C31162) * C50969 +
            (C22114 * C50854 + C22113 * C10705 +
             (C19747 * C134 + C50628 * C144) * C50933 +
             (C19747 * C123 + C50628 * C130) * C10704) *
                C50968) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C10704 +
             (C19747 * C135 + C50628 * C145) * C50933 + C22439 * C10705 +
             C22440 * C50854) *
                C50968 +
            (C31472 + C31473 + C31474 + C31475) * C50969 +
            (C31476 + C31477 + C31484 + C31485) * C24546) *
               C1544 -
           (((C19747 * C2557 + C50628 * C2561) * C50854 +
             (C19747 * C2552 + C50628 * C2558) * C10705 + C31483 * C50933 +
             C31482 * C10704) *
                C24546 +
            (C22280 * C50854 + C22279 * C10705 + C22278 * C50933 +
             C22277 * C10704) *
                C50969 +
            (C22442 * C50854 + C22441 * C10705 + C22440 * C50933 +
             C22439 * C10704) *
                C50968) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C10704 +
             (C19747 * C133 + C50628 * C143) * C50933 + C22105 * C10705 +
             C22106 * C50854) *
                C50968 +
            (C31150 + C31151 + C31152 + C31153) * C50969 + C31178 * C24546) *
               C1544 -
           (C32739 * C24546 + (C31830 + C31831 + C31832 + C31833) * C50969 +
            (C22108 * C50854 + C22107 * C10705 + C22106 * C50933 +
             C22105 * C10704) *
                C50968) *
               C50757) *
              C248 +
          (((C31833 + C31832 + C31831 + C31830) * C50968 +
            (C31829 + C31828 + C31827 + C31826) * C50969 +
            (C32734 + C32735 + C32736 + C32737) * C24546) *
               C50757 -
           (C32092 * C24546 + (C31157 + C31156 + C31155 + C31154) * C50969 +
            (C31153 + C31152 + C31151 + C31150) * C50968) *
               C1544) *
              C249 +
          ((C31178 * C50968 + (C31161 + C31160 + C31159 + C31158) * C50969 +
            (C32087 + C32088 + C32089 + C32090) * C24546) *
               C1544 -
           (((C19747 * C20687 + C50628 * C20689) * C50854 +
             (C19747 * C20686 + C50628 * C20688) * C10705 + C21052 * C50933 +
             C21051 * C10704) *
                C24546 +
            (C32737 + C32736 + C32735 + C32734) * C50969 + C32739 * C50968) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C50919 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C50729) *
              C50962 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C50729 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C50919) *
              C50963 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C50693 * C50919 -
           (((C19747 * C2317 + C50628 * C2321) * C50790 +
             (C19747 * C2312 + C50628 * C2318) * C121) *
                C19746 +
            (C20134 + C20133) * C19745 + (C20132 + C20131) * C19744 +
            (C20130 + C20129) * C19743) *
               C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C50919 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C50729) *
              C50962 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C50729 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C50919) *
              C50963 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C50693 * C50919 -
           (((C16965 * C281 + C16960 * C292 + C16964 * C278 + C16959 * C290 +
              C16963 * C277 + C16958 * C289) *
                 C50790 +
             (C16965 * C262 + C16960 * C282 + C16964 * C260 + C16959 * C274 +
              C16963 * C259 + C16958 * C273) *
                 C121) *
                C50828 +
            ((C17494 + C17493 + C17492) * C50790 +
             (C17491 + C17490 + C17489) * C121) *
                C16961) *
               C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50693 * C50919 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C50693 * C50729) *
              C50962 +
          (((C21903 + C21904 + C21905 + C21906 + C21923 + C21924) * C16961 +
            (C21911 + C21912 + C21913 + C21914 + C21925 + C21926) * C50828) *
               C50693 * C50729 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 + C22113 * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C50693 * C50919) *
              C50963 +
          ((((C19747 * C124 + C50628 * C131) * C5083 +
             (C19747 * C135 + C50628 * C145) * C5080 +
             (C19747 * C395 + C50628 * C409) * C5084 +
             (C19747 * C405 + C50628 * C425) * C5081 +
             (C19747 * C400 + C50628 * C414) * C5085 +
             (C19747 * C418 + C50628 * C430) * C5082) *
                C16961 +
            (C22267 + C22268 + C22281 + C22282 + C22283 + C22284) * C50828) *
               C50693 * C50919 -
           (((C19747 * C2557 + C50628 * C2561) * C5082 +
             (C19747 * C2552 + C50628 * C2558) * C5085 +
             (C19747 * C1435 + C50628 * C1443) * C5081 +
             (C19747 * C1431 + C50628 * C1439) * C5084 + C20126 * C5080 +
             C20125 * C5083) *
                C50828 +
            (C22284 + C22283 + C22282 + C22281 + C22268 + C22267) * C16961) *
               C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C121 +
              (C19747 * C133 + C50628 * C143) * C50790) *
                 C19743 +
             (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
                C50920 -
            ((C20399 + C20400) * C19746 + (C20401 + C20402) * C19745 +
             (C20403 + C20404) * C19744 +
             ((C19747 * C407 + C50628 * C427) * C50790 +
              (C19747 * C397 + C50628 * C411) * C121) *
                 C19743) *
                C50757) *
               C50919 +
           (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
             (C20400 + C20399) * C19745 +
             ((C19747 * C4066 + C50628 * C4070) * C121 +
              (C19747 * C4068 + C50628 * C4072) * C50790) *
                 C19746) *
                C50757 -
            ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
             (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
                C50920) *
               C50729) *
              C251 +
          (((((C19747 * C396 + C50628 * C410) * C121 +
              (C19747 * C406 + C50628 * C426) * C50790) *
                 C19743 +
             (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
             (C20409 + C20410) * C19746) *
                C50757 -
            (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
             ((C19747 * C134 + C50628 * C144) * C50790 +
              (C19747 * C123 + C50628 * C130) * C121) *
                 C19743) *
                C50920) *
               C50919 +
           (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
             (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
                C50920 -
            (((C19747 * C4067 + C50628 * C4071) * C50790 +
              (C19747 * C4065 + C50628 * C4069) * C121) *
                 C19746 +
             (C20410 + C20409) * C19745 + (C20408 + C20407) * C19744 +
             (C20406 + C20405) * C19743) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
               C16965 * C124 + C16960 * C131) *
                  C121 +
              (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
               C16965 * C135 + C16960 * C145) *
                  C50790) *
                 C16961 +
             ((C17161 + C17162 + C17163) * C121 +
              (C17164 + C17165 + C17166) * C50790) *
                 C50828) *
                C50920 -
            (((C17859 + C17860 + C17861) * C50790 +
              (C17862 + C17863 + C17864) * C121) *
                 C50828 +
             ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
               C16963 * C407 + C16958 * C427) *
                  C50790 +
              (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
               C16963 * C397 + C16958 * C411) *
                  C121) *
                 C16961) *
                C50757) *
               C50919 +
           ((((C17864 + C17863 + C17862) * C121 +
              (C17861 + C17860 + C17859) * C50790) *
                 C16961 +
             ((C16963 * C1433 + C16958 * C1441 + C16964 * C1432 +
               C16959 * C1440 + C16965 * C1431 + C16960 * C1439) *
                  C121 +
              (C16963 * C1437 + C16958 * C1445 + C16964 * C1436 +
               C16959 * C1444 + C16965 * C1435 + C16960 * C1443) *
                  C50790) *
                 C50828) *
                C50757 -
            (((C17167 + C17168 + C17169) * C50790 +
              (C17170 + C17171 + C17172) * C121) *
                 C50828 +
             ((C17166 + C17165 + C17164) * C50790 +
              (C17163 + C17162 + C17161) * C121) *
                 C16961) *
                C50920) *
               C50729) *
              C251 +
          (((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
               C16965 * C394 + C16960 * C408) *
                  C121 +
              (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
               C16965 * C404 + C16960 * C424) *
                  C50790) *
                 C16961 +
             ((C17865 + C17866 + C17867) * C121 +
              (C17868 + C17869 + C17870) * C50790) *
                 C50828) *
                C50757 -
            (((C17178 + C17177 + C17176) * C50790 +
              (C17175 + C17174 + C17173) * C121) *
                 C50828 +
             ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
               C16963 * C134 + C16958 * C144) *
                  C50790 +
              (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
               C16963 * C123 + C16958 * C130) *
                  C121) *
                 C16961) *
                C50920) *
               C50919 +
           ((((C17173 + C17174 + C17175) * C121 +
              (C17176 + C17177 + C17178) * C50790) *
                 C16961 +
             ((C17179 + C17180 + C17181) * C121 +
              (C17182 + C17183 + C17184) * C50790) *
                 C50828) *
                C50920 -
            (((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 +
               C16959 * C1443 + C16963 * C1436 + C16958 * C1444) *
                  C50790 +
              (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 +
               C16959 * C1439 + C16963 * C1432 + C16958 * C1440) *
                  C121) *
                 C50828 +
             ((C17870 + C17869 + C17868) * C50790 +
              (C17867 + C17866 + C17865) * C121) *
                 C16961) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C5083 +
              (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
              C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                 C16961 +
             (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
                C50920 -
            ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
             (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 +
              C22107 * C5084 + C22106 * C5080 + C22105 * C5083) *
                 C16961) *
                C50757) *
               C50919 +
           (((C22642 + C22641 + C22640 + C22639 + C22638 + C22637) * C16961 +
             (C20390 * C5083 + C20389 * C5080 + C20705 * C5084 +
              C20706 * C5081 + (C19747 * C4481 + C50628 * C4487) * C5085 +
              (C19747 * C4485 + C50628 * C4493) * C5082) *
                 C50828) *
                C50757 -
            ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
             (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
                C50920) *
               C50729) *
              C251 +
          ((((C22113 * C5083 + C22114 * C5080 + C22115 * C5084 +
              C22116 * C5081 + C22117 * C5085 + C22118 * C5082) *
                 C16961 +
             (C22643 + C22644 + C22645 + C22646 + C22647 + C22648) * C50828) *
                C50757 -
            ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
             (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 +
              C22113 * C5084 + (C19747 * C134 + C50628 * C144) * C5080 +
              (C19747 * C123 + C50628 * C130) * C5083) *
                 C16961) *
                C50920) *
               C50919 +
           (((C21903 + C21904 + C21905 + C21906 + C21923 + C21924) * C16961 +
             (C21911 + C21912 + C21913 + C21914 + C21925 + C21926) * C50828) *
                C50920 -
            (((C19747 * C4484 + C50628 * C4492) * C5082 +
              (C19747 * C4480 + C50628 * C4486) * C5085 + C21922 * C5081 +
              C21921 * C5084 + C20396 * C5080 + C20395 * C5083) *
                 C50828 +
             (C22648 + C22647 + C22646 + C22645 + C22644 + C22643) * C16961) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
                 C16965 * C124 + C16960 * C131) *
                    C121 +
                (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
                 C16965 * C135 + C16960 * C145) *
                    C50790) *
                   C16961 +
               ((C16963 * C256 + C16958 * C270 + C16964 * C255 + C16959 * C269 +
                 C16965 * C254 + C16960 * C268) *
                    C121 +
                (C16963 * C266 + C16958 * C286 + C16964 * C265 + C16959 * C285 +
                 C16965 * C264 + C16960 * C284) *
                    C50790) *
                   C50828) *
                  C50693 * C50677 * C113 -
              (((C16965 * C263 + C16960 * C283 + C16964 * C264 + C16959 * C284 +
                 C16963 * C265 + C16958 * C285) *
                    C50790 +
                (C16965 * C253 + C16960 * C267 + C16964 * C254 + C16959 * C268 +
                 C16963 * C255 + C16958 * C269) *
                    C121) *
                   C50828 +
               ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
                 C16963 * C134 + C16958 * C144) *
                    C50790 +
                (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
                 C16963 * C123 + C16958 * C130) *
                    C121) *
                   C16961) *
                  C50693 * C50677 * C114 +
              (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
                 C16965 * C126 + C16960 * C138) *
                    C121 +
                (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
                 C16965 * C137 + C16960 * C147) *
                    C50790) *
                   C16961 +
               ((C16963 * C254 + C16958 * C268 + C16964 * C253 + C16959 * C267 +
                 C16965 * C261 + C16960 * C279) *
                    C121 +
                (C16963 * C264 + C16958 * C284 + C16964 * C263 + C16959 * C283 +
                 C16965 * C280 + C16960 * C291) *
                    C50790) *
                   C50828) *
                  C50693 * C50677 * C115 -
              (((C16965 * C538 + C16960 * C540 + C16964 * C280 + C16959 * C291 +
                 C16963 * C263 + C16958 * C283) *
                    C50790 +
                (C16965 * C537 + C16960 * C539 + C16964 * C261 + C16959 * C279 +
                 C16963 * C253 + C16958 * C267) *
                    C121) *
                   C50828 +
               ((C16965 * C140 + C16960 * C148 + C16964 * C137 + C16959 * C147 +
                 C16963 * C136 + C16958 * C146) *
                    C50790 +
                (C16965 * C127 + C16960 * C139 + C16964 * C126 + C16959 * C138 +
                 C16963 * C125 + C16958 * C132) *
                    C121) *
                   C16961) *
                  C50693 * C50677 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C16963 * C122 + C16958 * C129 + C16964 * C123 +
                  C16959 * C130 + C16965 * C124 + C16960 * C131) *
                     C121 +
                 (C16963 * C133 + C16958 * C143 + C16964 * C134 +
                  C16959 * C144 + C16965 * C135 + C16960 * C145) *
                     C50790) *
                    C16961 +
                ((C17161 + C17162 + C17163) * C121 +
                 (C17164 + C17165 + C17166) * C50790) *
                    C50828) *
                   C50693 * C248 -
               (((C17167 + C17168 + C17169) * C50790 +
                 (C17170 + C17171 + C17172) * C121) *
                    C50828 +
                ((C17166 + C17165 + C17164) * C50790 +
                 (C17163 + C17162 + C17161) * C121) *
                    C16961) *
                   C50693 * C249 +
               (((C17172 + C17171 + C17170) * C121 +
                 (C17169 + C17168 + C17167) * C50790) *
                    C16961 +
                ((C16963 * C972 + C16958 * C980 + C16964 * C971 +
                  C16959 * C979 + C16965 * C970 + C16960 * C978) *
                     C121 +
                 (C16963 * C976 + C16958 * C984 + C16964 * C975 +
                  C16959 * C983 + C16965 * C974 + C16960 * C982) *
                     C50790) *
                    C50828) *
                   C50693 * C250) *
                  C251 +
              ((((C17173 + C17174 + C17175) * C121 +
                 (C17176 + C17177 + C17178) * C50790) *
                    C16961 +
                ((C17179 + C17180 + C17181) * C121 +
                 (C17182 + C17183 + C17184) * C50790) *
                    C50828) *
                   C50693 * C249 -
               (((C17178 + C17177 + C17176) * C50790 +
                 (C17175 + C17174 + C17173) * C121) *
                    C50828 +
                ((C16965 * C136 + C16960 * C146 + C16964 * C135 +
                  C16959 * C145 + C16963 * C134 + C16958 * C144) *
                     C50790 +
                 (C16965 * C125 + C16960 * C132 + C16964 * C124 +
                  C16959 * C131 + C16963 * C123 + C16958 * C130) *
                     C121) *
                    C16961) *
                   C50693 * C248 -
               (((C16965 * C973 + C16960 * C981 + C16964 * C974 +
                  C16959 * C982 + C16963 * C975 + C16958 * C983) *
                     C50790 +
                 (C16965 * C969 + C16960 * C977 + C16964 * C970 +
                  C16959 * C978 + C16963 * C971 + C16958 * C979) *
                     C121) *
                    C50828 +
                ((C17184 + C17183 + C17182) * C50790 +
                 (C17181 + C17180 + C17179) * C121) *
                    C16961) *
                   C50693 * C250) *
                  C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C391 -
           (((C16965 * C786 + C16960 * C792 + C16964 * C785 + C16959 * C791 +
              C16963 * C784 + C16958 * C790) *
                 C50790 +
             (C16965 * C777 + C16960 * C782 + C16964 * C776 + C16959 * C781 +
              C16963 * C775 + C16958 * C780) *
                 C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C392 +
           (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
              C16965 * C400 + C16960 * C414) *
                 C121 +
             (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
              C16965 * C418 + C16960 * C430) *
                 C50790) *
                C16961 +
            ((C16963 * C1086 + C16958 * C1094 + C16964 * C1085 +
              C16959 * C1093 + C16965 * C1084 + C16960 * C1092) *
                 C121 +
             (C16963 * C1090 + C16958 * C1098 + C16964 * C1089 +
              C16959 * C1097 + C16965 * C1088 + C16960 * C1096) *
                 C50790) *
                C50828) *
               C393) *
              C50677 * C251 +
          ((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
              C16965 * C394 + C16960 * C408) *
                 C121 +
             (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
              C16965 * C404 + C16960 * C424) *
                 C50790) *
                C16961 +
            ((C16963 * C776 + C16958 * C781 + C16964 * C777 + C16959 * C782 +
              C16965 * C778 + C16960 * C783) *
                 C121 +
             (C16963 * C785 + C16958 * C791 + C16964 * C786 + C16959 * C792 +
              C16965 * C787 + C16960 * C793) *
                 C50790) *
                C50828) *
               C392 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C391 -
           (((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50790 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C121) *
                C50828 +
            ((C16965 * C419 + C16960 * C431 + C16964 * C418 + C16959 * C430 +
              C16963 * C417 + C16958 * C429) *
                 C50790 +
             (C16965 * C401 + C16960 * C415 + C16964 * C400 + C16959 * C414 +
              C16963 * C399 + C16958 * C413) *
                 C121) *
                C16961) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           ((C19747 * C256 + C50628 * C270) * C121 +
            (C19747 * C266 + C50628 * C286) * C50790) *
               C19744 +
           ((C19747 * C257 + C50628 * C271) * C121 +
            (C19747 * C275 + C50628 * C287) * C50790) *
               C19745 +
           ((C19747 * C972 + C50628 * C980) * C121 +
            (C19747 * C976 + C50628 * C984) * C50790) *
               C19746) *
              C50693 * C50677 * C113 -
          (((C19747 * C975 + C50628 * C983) * C50790 +
            (C19747 * C971 + C50628 * C979) * C121) *
               C19746 +
           ((C19747 * C276 + C50628 * C288) * C50790 +
            (C19747 * C258 + C50628 * C272) * C121) *
               C19745 +
           ((C19747 * C265 + C50628 * C285) * C50790 +
            (C19747 * C255 + C50628 * C269) * C121) *
               C19744 +
           ((C19747 * C134 + C50628 * C144) * C50790 +
            (C19747 * C123 + C50628 * C130) * C121) *
               C19743) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C121 +
            (C19747 * C135 + C50628 * C145) * C50790) *
               C19743 +
           ((C19747 * C254 + C50628 * C268) * C121 +
            (C19747 * C264 + C50628 * C284) * C50790) *
               C19744 +
           ((C19747 * C259 + C50628 * C273) * C121 +
            (C19747 * C277 + C50628 * C289) * C50790) *
               C19745 +
           ((C19747 * C970 + C50628 * C978) * C121 +
            (C19747 * C974 + C50628 * C982) * C50790) *
               C19746) *
              C50693 * C50677 * C115 -
          (((C19747 * C973 + C50628 * C981) * C50790 +
            (C19747 * C969 + C50628 * C977) * C121) *
               C19746 +
           ((C19747 * C278 + C50628 * C290) * C50790 +
            (C19747 * C260 + C50628 * C274) * C121) *
               C19745 +
           ((C19747 * C263 + C50628 * C283) * C50790 +
            (C19747 * C253 + C50628 * C267) * C121) *
               C19744 +
           ((C19747 * C136 + C50628 * C146) * C50790 +
            (C19747 * C125 + C50628 * C132) * C121) *
               C19743) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C248 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C249 +
           (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            ((C19747 * C3377 + C50628 * C3381) * C121 +
             (C19747 * C3379 + C50628 * C3383) * C50790) *
                C19746) *
               C50693 * C250) *
              C251 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C249 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C248 -
           (((C19747 * C3378 + C50628 * C3382) * C50790 +
             (C19747 * C3376 + C50628 * C3380) * C121) *
                C19746 +
            (C19910 + C19909) * C19745 + C19913 * C19744 + C19914 * C19743) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C391 -
           (((C19747 * C3077 + C50628 * C3081) * C50790 +
             (C19747 * C3072 + C50628 * C3075) * C121) *
                C19746 +
            ((C19747 * C1437 + C50628 * C1445) * C50790 +
             (C19747 * C1433 + C50628 * C1441) * C121) *
                C19745 +
            ((C19747 * C784 + C50628 * C790) * C50790 +
             (C19747 * C775 + C50628 * C780) * C121) *
                C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C392 +
           (((C19747 * C398 + C50628 * C412) * C121 +
             (C19747 * C416 + C50628 * C428) * C50790) *
                C19743 +
            ((C19747 * C1086 + C50628 * C1094) * C121 +
             (C19747 * C1090 + C50628 * C1098) * C50790) *
                C19744 +
            ((C19747 * C2550 + C50628 * C2553) * C121 +
             (C19747 * C2555 + C50628 * C2559) * C50790) *
                C19745 +
            ((C19747 * C3548 + C50628 * C3552) * C121 +
             (C19747 * C3550 + C50628 * C3554) * C50790) *
                C19746) *
               C393) *
              C50677 * C251 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            ((C19747 * C776 + C50628 * C781) * C121 +
             (C19747 * C785 + C50628 * C791) * C50790) *
                C19744 +
            ((C19747 * C1432 + C50628 * C1440) * C121 +
             (C19747 * C1436 + C50628 * C1444) * C50790) *
                C19745 +
            ((C19747 * C3073 + C50628 * C3076) * C121 +
             (C19747 * C3078 + C50628 * C3082) * C50790) *
                C19746) *
               C392 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C391 -
           (((C19747 * C3549 + C50628 * C3553) * C50790 +
             (C19747 * C3547 + C50628 * C3551) * C121) *
                C19746 +
            ((C19747 * C2556 + C50628 * C2560) * C50790 +
             (C19747 * C2551 + C50628 * C2554) * C121) *
                C19745 +
            ((C19747 * C1089 + C50628 * C1097) * C50790 +
             (C19747 * C1085 + C50628 * C1093) * C121) *
                C19744 +
            ((C19747 * C417 + C50628 * C429) * C50790 +
             (C19747 * C399 + C50628 * C413) * C121) *
                C19743) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C5083 +
            (C19747 * C133 + C50628 * C143) * C5080 +
            (C19747 * C397 + C50628 * C411) * C5084 +
            (C19747 * C407 + C50628 * C427) * C5081 +
            (C19747 * C398 + C50628 * C412) * C5085 +
            (C19747 * C416 + C50628 * C428) * C5082) *
               C16961 +
           (C19879 * C5083 + C19880 * C5080 + C20392 * C5084 + C20391 * C5081 +
            C20703 * C5085 + C20704 * C5082) *
               C50828) *
              C50693 * C50677 * C113 -
          (((C19747 * C1089 + C50628 * C1097) * C5082 +
            (C19747 * C1085 + C50628 * C1093) * C5085 + C20394 * C5081 +
            C20393 * C5084 + C19888 * C5080 + C19887 * C5083) *
               C50828 +
           ((C19747 * C417 + C50628 * C429) * C5082 +
            (C19747 * C399 + C50628 * C413) * C5085 +
            (C19747 * C406 + C50628 * C426) * C5081 +
            (C19747 * C396 + C50628 * C410) * C5084 +
            (C19747 * C134 + C50628 * C144) * C5080 +
            (C19747 * C123 + C50628 * C130) * C5083) *
               C16961) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C5083 +
            (C19747 * C135 + C50628 * C145) * C5080 +
            (C19747 * C395 + C50628 * C409) * C5084 +
            (C19747 * C405 + C50628 * C425) * C5081 +
            (C19747 * C400 + C50628 * C414) * C5085 +
            (C19747 * C418 + C50628 * C430) * C5082) *
               C16961 +
           (C20123 * C5083 + C20124 * C5080 +
            (C19747 * C777 + C50628 * C782) * C5084 +
            (C19747 * C786 + C50628 * C792) * C5081 +
            (C19747 * C1084 + C50628 * C1092) * C5085 +
            (C19747 * C1088 + C50628 * C1096) * C5082) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C19747 * C1087 + C50628 * C1095) * C5082 +
            (C19747 * C1083 + C50628 * C1091) * C5085 +
            (C19747 * C787 + C50628 * C793) * C5081 +
            (C19747 * C778 + C50628 * C783) * C5084 +
            (C19747 * C263 + C50628 * C283) * C5080 +
            (C19747 * C253 + C50628 * C267) * C5083) *
               C50828 +
           ((C19747 * C419 + C50628 * C431) * C5082 +
            (C19747 * C401 + C50628 * C415) * C5085 +
            (C19747 * C404 + C50628 * C424) * C5081 +
            (C19747 * C394 + C50628 * C408) * C5084 +
            (C19747 * C136 + C50628 * C146) * C5080 +
            (C19747 * C125 + C50628 * C132) * C5083) *
               C16961) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 +
             (C19747 * C397 + C50628 * C411) * C5084 +
             (C19747 * C407 + C50628 * C427) * C5081 +
             (C19747 * C398 + C50628 * C412) * C5085 +
             (C19747 * C416 + C50628 * C428) * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50693 * C248 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C50693 * C249 +
           ((C21902 + C21901 + C21900 + C21899 + C21898 + C21897) * C16961 +
            (C19883 * C5083 + C19884 * C5080 + C20388 * C5084 + C20387 * C5081 +
             C20707 * C5085 + C20708 * C5082) *
                C50828) *
               C50693 * C250) *
              C251 +
          (((C21903 + C21904 + C21905 + C21906 + C21923 + C21924) * C16961 +
            (C21911 + C21912 + C21913 + C21914 + C21925 + C21926) * C50828) *
               C50693 * C249 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            ((C19747 * C417 + C50628 * C429) * C5082 +
             (C19747 * C399 + C50628 * C413) * C5085 +
             (C19747 * C406 + C50628 * C426) * C5081 +
             (C19747 * C396 + C50628 * C410) * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C50693 * C248 -
           (((C19747 * C3549 + C50628 * C3553) * C5082 +
             (C19747 * C3547 + C50628 * C3551) * C5085 + C20398 * C5081 +
             C20397 * C5084 + C19892 * C5080 + C19891 * C5083) *
                C50828 +
            (C21926 + C21925 + C21914 + C21913 + C21912 + C21911) * C16961) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C391 -
           ((C22109 * C5082 + C22110 * C5085 + C20704 * C5081 + C20703 * C5084 +
             C20391 * C5080 + C20392 * C5083) *
                C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C392 +
           ((C22107 * C5083 + C22108 * C5080 + C22112 * C5084 + C22111 * C5081 +
             (C19747 * C5378 + C50628 * C5381) * C5085 +
             (C19747 * C5383 + C50628 * C5387) * C5082) *
                C16961 +
            (C20703 * C5083 + C20704 * C5080 + C22110 * C5084 + C22109 * C5081 +
             (C19747 * C6383 + C50628 * C6387) * C5085 +
             (C19747 * C6385 + C50628 * C6389) * C5082) *
                C50828) *
               C393) *
              C50677 * C251 +
          (((C22113 * C5083 + C22114 * C5080 + C22115 * C5084 + C22116 * C5081 +
             C22117 * C5085 + C22118 * C5082) *
                C16961 +
            (C20393 * C5083 + C20394 * C5080 + C21919 * C5084 + C21920 * C5081 +
             C22119 * C5085 + C22120 * C5082) *
                C50828) *
               C392 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 + C22113 * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C391 -
           (((C19747 * C6384 + C50628 * C6388) * C5082 +
             (C19747 * C6382 + C50628 * C6386) * C5085 + C22120 * C5081 +
             C22119 * C5084 + C21920 * C5080 + C21919 * C5083) *
                C50828 +
            ((C19747 * C5384 + C50628 * C5388) * C5082 +
             (C19747 * C5379 + C50628 * C5382) * C5085 + C22118 * C5081 +
             C22117 * C5084 + C22116 * C5080 + C22115 * C5083) *
                C16961) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50920 -
           (((C19747 * C3077 + C50628 * C3081) * C50790 +
             (C19747 * C3072 + C50628 * C3075) * C121) *
                C19746 +
            ((C19747 * C1437 + C50628 * C1445) * C50790 +
             (C19747 * C1433 + C50628 * C1441) * C121) *
                C19745 +
            ((C19747 * C784 + C50628 * C790) * C50790 +
             (C19747 * C775 + C50628 * C780) * C121) *
                C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C50677 * C50962 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            ((C19747 * C776 + C50628 * C781) * C121 +
             (C19747 * C785 + C50628 * C791) * C50790) *
                C19744 +
            ((C19747 * C1432 + C50628 * C1440) * C121 +
             (C19747 * C1436 + C50628 * C1444) * C50790) *
                C19745 +
            ((C19747 * C3073 + C50628 * C3076) * C121 +
             (C19747 * C3078 + C50628 * C3082) * C50790) *
                C19746) *
               C50757 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50920) *
              C50677 * C50963 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C50920 -
           (((C19747 * C3079 + C50628 * C3083) * C50790 +
             (C19747 * C3074 + C50628 * C3080) * C121) *
                C19746 +
            ((C19747 * C1435 + C50628 * C1443) * C50790 +
             (C19747 * C1431 + C50628 * C1439) * C121) *
                C19745 +
            ((C19747 * C786 + C50628 * C792) * C50790 +
             (C19747 * C777 + C50628 * C782) * C121) *
                C19744 +
            ((C19747 * C405 + C50628 * C425) * C50790 +
             (C19747 * C395 + C50628 * C409) * C121) *
                C19743) *
               C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50920 -
           (((C16965 * C786 + C16960 * C792 + C16964 * C785 + C16959 * C791 +
              C16963 * C784 + C16958 * C790) *
                 C50790 +
             (C16965 * C777 + C16960 * C782 + C16964 * C776 + C16959 * C781 +
              C16963 * C775 + C16958 * C780) *
                 C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C50962 +
          ((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
              C16965 * C394 + C16960 * C408) *
                 C121 +
             (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
              C16965 * C404 + C16960 * C424) *
                 C50790) *
                C16961 +
            ((C16963 * C776 + C16958 * C781 + C16964 * C777 + C16959 * C782 +
              C16965 * C778 + C16960 * C783) *
                 C121 +
             (C16963 * C785 + C16958 * C791 + C16964 * C786 + C16959 * C792 +
              C16965 * C787 + C16960 * C793) *
                 C50790) *
                C50828) *
               C50757 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50920) *
              C50677 * C50963 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C50920 -
           (((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
              C16963 * C786 + C16958 * C792) *
                 C50790 +
             (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
              C16963 * C777 + C16958 * C782) *
                 C121) *
                C50828 +
            ((C16965 * C421 + C16960 * C432 + C16964 * C404 + C16959 * C424 +
              C16963 * C405 + C16958 * C425) *
                 C50790 +
             (C16965 * C402 + C16960 * C420 + C16964 * C394 + C16959 * C408 +
              C16963 * C395 + C16958 * C409) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50920 -
           ((C22109 * C5082 + C22110 * C5085 + C20704 * C5081 + C20703 * C5084 +
             C20391 * C5080 + C20392 * C5083) *
                C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C50757) *
              C50677 * C50962 +
          (((C22113 * C5083 + C22114 * C5080 + C22115 * C5084 + C22116 * C5081 +
             C22117 * C5085 + C22118 * C5082) *
                C16961 +
            (C20393 * C5083 + C20394 * C5080 + C21919 * C5084 + C21920 * C5081 +
             C22119 * C5085 + C22120 * C5082) *
                C50828) *
               C50757 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 + C22113 * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C50920) *
              C50677 * C50963 +
          ((((C19747 * C124 + C50628 * C131) * C5083 +
             (C19747 * C135 + C50628 * C145) * C5080 + C22439 * C5084 +
             C22440 * C5081 + C22441 * C5085 + C22442 * C5082) *
                C16961 +
            (C22267 + C22268 + C22281 + C22282 + C22283 + C22284) * C50828) *
               C50920 -
           (((C19747 * C5977 + C50628 * C5979) * C5082 +
             (C19747 * C5976 + C50628 * C5978) * C5085 + C22280 * C5081 +
             C22279 * C5084 + C22278 * C5080 + C22277 * C5083) *
                C50828 +
            ((C19747 * C1719 + C50628 * C1727) * C5082 +
             (C19747 * C1715 + C50628 * C1723) * C5085 + C22442 * C5081 +
             C22441 * C5084 + C22440 * C5080 + C22439 * C5083) *
                C16961) *
               C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C248 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C249 +
           (((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C16963 * C972 + C16958 * C980 + C16964 * C971 + C16959 * C979 +
              C16965 * C970 + C16960 * C978) *
                 C121 +
             (C16963 * C976 + C16958 * C984 + C16964 * C975 + C16959 * C983 +
              C16965 * C974 + C16960 * C982) *
                 C50790) *
                C50828) *
               C50693 * C250) *
              C251 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C249 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C248 -
           (((C16965 * C973 + C16960 * C981 + C16964 * C974 + C16959 * C982 +
              C16963 * C975 + C16958 * C983) *
                 C50790 +
             (C16965 * C969 + C16960 * C977 + C16964 * C970 + C16959 * C978 +
              C16963 * C971 + C16958 * C979) *
                 C121) *
                C50828 +
            ((C17184 + C17183 + C17182) * C50790 +
             (C17181 + C17180 + C17179) * C121) *
                C16961) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C121 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C50790) *
               C16961 +
           ((C16963 * C256 + C16958 * C270 + C16964 * C255 + C16959 * C269 +
             C16965 * C254 + C16960 * C268) *
                C121 +
            (C16963 * C266 + C16958 * C286 + C16964 * C265 + C16959 * C285 +
             C16965 * C264 + C16960 * C284) *
                C50790) *
               C50828) *
              C50693 * C50677 * C113 -
          (((C16965 * C263 + C16960 * C283 + C16964 * C264 + C16959 * C284 +
             C16963 * C265 + C16958 * C285) *
                C50790 +
            (C16965 * C253 + C16960 * C267 + C16964 * C254 + C16959 * C268 +
             C16963 * C255 + C16958 * C269) *
                C121) *
               C50828 +
           ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C50790 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C121) *
               C16961) *
              C50693 * C50677 * C114 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C121 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C50790) *
               C16961 +
           ((C16963 * C254 + C16958 * C268 + C16964 * C253 + C16959 * C267 +
             C16965 * C261 + C16960 * C279) *
                C121 +
            (C16963 * C264 + C16958 * C284 + C16964 * C263 + C16959 * C283 +
             C16965 * C280 + C16960 * C291) *
                C50790) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C16965 * C538 + C16960 * C540 + C16964 * C280 + C16959 * C291 +
             C16963 * C263 + C16958 * C283) *
                C50790 +
            (C16965 * C537 + C16960 * C539 + C16964 * C261 + C16959 * C279 +
             C16963 * C253 + C16958 * C267) *
                C121) *
               C50828 +
           ((C16965 * C140 + C16960 * C148 + C16964 * C137 + C16959 * C147 +
             C16963 * C136 + C16958 * C146) *
                C50790 +
            (C16965 * C127 + C16960 * C139 + C16964 * C126 + C16959 * C138 +
             C16963 * C125 + C16958 * C132) *
                C121) *
               C16961) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           ((C19747 * C256 + C50628 * C270) * C121 +
            (C19747 * C266 + C50628 * C286) * C50790) *
               C19744 +
           ((C19747 * C257 + C50628 * C271) * C121 +
            (C19747 * C275 + C50628 * C287) * C50790) *
               C19745 +
           ((C19747 * C972 + C50628 * C980) * C121 +
            (C19747 * C976 + C50628 * C984) * C50790) *
               C19746) *
              C50693 * C50677 * C113 -
          (((C19747 * C975 + C50628 * C983) * C50790 +
            (C19747 * C971 + C50628 * C979) * C121) *
               C19746 +
           ((C19747 * C276 + C50628 * C288) * C50790 +
            (C19747 * C258 + C50628 * C272) * C121) *
               C19745 +
           ((C19747 * C265 + C50628 * C285) * C50790 +
            (C19747 * C255 + C50628 * C269) * C121) *
               C19744 +
           ((C19747 * C134 + C50628 * C144) * C50790 +
            (C19747 * C123 + C50628 * C130) * C121) *
               C19743) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C121 +
            (C19747 * C135 + C50628 * C145) * C50790) *
               C19743 +
           ((C19747 * C254 + C50628 * C268) * C121 +
            (C19747 * C264 + C50628 * C284) * C50790) *
               C19744 +
           ((C19747 * C259 + C50628 * C273) * C121 +
            (C19747 * C277 + C50628 * C289) * C50790) *
               C19745 +
           ((C19747 * C970 + C50628 * C978) * C121 +
            (C19747 * C974 + C50628 * C982) * C50790) *
               C19746) *
              C50693 * C50677 * C115 -
          (((C19747 * C973 + C50628 * C981) * C50790 +
            (C19747 * C969 + C50628 * C977) * C121) *
               C19746 +
           ((C19747 * C278 + C50628 * C290) * C50790 +
            (C19747 * C260 + C50628 * C274) * C121) *
               C19745 +
           ((C19747 * C263 + C50628 * C283) * C50790 +
            (C19747 * C253 + C50628 * C267) * C121) *
               C19744 +
           ((C19747 * C136 + C50628 * C146) * C50790 +
            (C19747 * C125 + C50628 * C132) * C121) *
               C19743) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C248 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C249 +
           (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            ((C19747 * C3377 + C50628 * C3381) * C121 +
             (C19747 * C3379 + C50628 * C3383) * C50790) *
                C19746) *
               C50693 * C250) *
              C251 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C249 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C248 -
           (((C19747 * C3378 + C50628 * C3382) * C50790 +
             (C19747 * C3376 + C50628 * C3380) * C121) *
                C19746 +
            (C19910 + C19909) * C19745 + C19913 * C19744 + C19914 * C19743) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C5083 +
            (C19747 * C133 + C50628 * C143) * C5080 +
            (C19747 * C397 + C50628 * C411) * C5084 +
            (C19747 * C407 + C50628 * C427) * C5081 +
            (C19747 * C398 + C50628 * C412) * C5085 +
            (C19747 * C416 + C50628 * C428) * C5082) *
               C16961 +
           (C19879 * C5083 + C19880 * C5080 + C20392 * C5084 + C20391 * C5081 +
            C20703 * C5085 + C20704 * C5082) *
               C50828) *
              C50693 * C50677 * C113 -
          (((C19747 * C1089 + C50628 * C1097) * C5082 +
            (C19747 * C1085 + C50628 * C1093) * C5085 + C20394 * C5081 +
            C20393 * C5084 + C19888 * C5080 + C19887 * C5083) *
               C50828 +
           ((C19747 * C417 + C50628 * C429) * C5082 +
            (C19747 * C399 + C50628 * C413) * C5085 +
            (C19747 * C406 + C50628 * C426) * C5081 +
            (C19747 * C396 + C50628 * C410) * C5084 +
            (C19747 * C134 + C50628 * C144) * C5080 +
            (C19747 * C123 + C50628 * C130) * C5083) *
               C16961) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C5083 +
            (C19747 * C135 + C50628 * C145) * C5080 +
            (C19747 * C395 + C50628 * C409) * C5084 +
            (C19747 * C405 + C50628 * C425) * C5081 +
            (C19747 * C400 + C50628 * C414) * C5085 +
            (C19747 * C418 + C50628 * C430) * C5082) *
               C16961 +
           (C20123 * C5083 + C20124 * C5080 +
            (C19747 * C777 + C50628 * C782) * C5084 +
            (C19747 * C786 + C50628 * C792) * C5081 +
            (C19747 * C1084 + C50628 * C1092) * C5085 +
            (C19747 * C1088 + C50628 * C1096) * C5082) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C19747 * C1087 + C50628 * C1095) * C5082 +
            (C19747 * C1083 + C50628 * C1091) * C5085 +
            (C19747 * C787 + C50628 * C793) * C5081 +
            (C19747 * C778 + C50628 * C783) * C5084 +
            (C19747 * C263 + C50628 * C283) * C5080 +
            (C19747 * C253 + C50628 * C267) * C5083) *
               C50828 +
           ((C19747 * C419 + C50628 * C431) * C5082 +
            (C19747 * C401 + C50628 * C415) * C5085 +
            (C19747 * C404 + C50628 * C424) * C5081 +
            (C19747 * C394 + C50628 * C408) * C5084 +
            (C19747 * C136 + C50628 * C146) * C5080 +
            (C19747 * C125 + C50628 * C132) * C5083) *
               C16961) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 +
             (C19747 * C397 + C50628 * C411) * C5084 +
             (C19747 * C407 + C50628 * C427) * C5081 +
             (C19747 * C398 + C50628 * C412) * C5085 +
             (C19747 * C416 + C50628 * C428) * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50693 * C248 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C50693 * C249 +
           ((C21902 + C21901 + C21900 + C21899 + C21898 + C21897) * C16961 +
            (C19883 * C5083 + C19884 * C5080 + C20388 * C5084 + C20387 * C5081 +
             C20707 * C5085 + C20708 * C5082) *
                C50828) *
               C50693 * C250) *
              C251 +
          (((C21903 + C21904 + C21905 + C21906 + C21923 + C21924) * C16961 +
            (C21911 + C21912 + C21913 + C21914 + C21925 + C21926) * C50828) *
               C50693 * C249 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            ((C19747 * C417 + C50628 * C429) * C5082 +
             (C19747 * C399 + C50628 * C413) * C5085 +
             (C19747 * C406 + C50628 * C426) * C5081 +
             (C19747 * C396 + C50628 * C410) * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C50693 * C248 -
           (((C19747 * C3549 + C50628 * C3553) * C5082 +
             (C19747 * C3547 + C50628 * C3551) * C5085 + C20398 * C5081 +
             C20397 * C5084 + C19892 * C5080 + C19891 * C5083) *
                C50828 +
            (C21926 + C21925 + C21914 + C21913 + C21912 + C21911) * C16961) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C50964 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C50693 * C50965 +
           (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            (C20587 + C20588) * C19746) *
               C50693 * C1199) *
              C50911 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C50965 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C50964 -
           (((C19747 * C3378 + C50628 * C3382) * C50790 +
             (C19747 * C3376 + C50628 * C3380) * C121) *
                C19746 +
            (C19910 + C19909) * C19745 + C19913 * C19744 + C19914 * C19743) *
               C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C50964 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C50965 +
           (((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C18127 + C18128 + C18129) * C121 +
             (C18130 + C18131 + C18132) * C50790) *
                C50828) *
               C50693 * C1199) *
              C50911 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C50965 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C50964 -
           (((C16965 * C973 + C16960 * C981 + C16964 * C974 + C16959 * C982 +
              C16963 * C975 + C16958 * C983) *
                 C50790 +
             (C16965 * C969 + C16960 * C977 + C16964 * C970 + C16959 * C978 +
              C16963 * C971 + C16958 * C979) *
                 C121) *
                C50828 +
            ((C17184 + C17183 + C17182) * C50790 +
             (C17181 + C17180 + C17179) * C121) *
                C16961) *
               C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50693 * C50964 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C50693 * C50965 +
           ((C21902 + C21901 + C21900 + C21899 + C21898 + C21897) * C16961 +
            (C22893 + C22894 + C22895 + C22896 + C22897 + C22898) * C50828) *
               C50693 * C1199) *
              C50911 +
          (((C21903 + C21904 + C21905 + C21906 + C21923 + C21924) * C16961 +
            (C21911 + C21912 + C21913 + C21914 + C21925 + C21926) * C50828) *
               C50693 * C50965 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 + C22113 * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C50693 * C50964 -
           (((C19747 * C3549 + C50628 * C3553) * C5082 +
             (C19747 * C3547 + C50628 * C3551) * C5085 + C20398 * C5081 +
             C20397 * C5084 + C19892 * C5080 + C19891 * C5083) *
                C50828 +
            (C21926 + C21925 + C21914 + C21913 + C21912 + C21911) * C16961) *
               C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50920 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C50964 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
               C50757 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C50920) *
              C50965 +
          ((C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            (C20587 + C20588) * C19746) *
               C50920 -
           (((C19747 * C21041 + C50628 * C21043) * C50790 +
             (C19747 * C21040 + C50628 * C21042) * C121) *
                C19746 +
            (C21054 + C21053) * C19745 + C21045 * C19744 + C21046 * C19743) *
               C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50920 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C50964 +
          ((((C17864 + C17863 + C17862) * C121 +
             (C17861 + C17860 + C17859) * C50790) *
                C16961 +
            ((C18795 + C18796 + C18797) * C121 +
             (C18798 + C18799 + C18800) * C50790) *
                C50828) *
               C50757 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50920) *
              C50965 +
          ((((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C18127 + C18128 + C18129) * C121 +
             (C18130 + C18131 + C18132) * C50790) *
                C50828) *
               C50920 -
           (((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 +
              C16959 * C3082 + C16963 * C3077 + C16958 * C3081) *
                 C50790 +
             (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 +
              C16959 * C3076 + C16963 * C3072 + C16958 * C3075) *
                 C121) *
                C50828 +
            ((C18800 + C18799 + C18798) * C50790 +
             (C18797 + C18796 + C18795) * C121) *
                C16961) *
               C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50920 -
           ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C50757) *
              C50964 +
          (((C22642 + C22641 + C22640 + C22639 + C22638 + C22637) * C16961 +
            (C23553 + C23554 + C23555 + C23556 + C23557 + C23558) * C50828) *
               C50757 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C50920) *
              C50965 +
          (((C21902 + C21901 + C21900 + C21899 + C21898 + C21897) * C16961 +
            (C22893 + C22894 + C22895 + C22896 + C22897 + C22898) * C50828) *
               C50920 -
           (((C19747 * C21317 + C50628 * C21319) * C5082 +
             (C19747 * C21316 + C50628 * C21318) * C5085 + C20708 * C5081 +
             C20707 * C5084 + C20387 * C5080 + C20388 * C5083) *
                C50828 +
            (C23558 + C23557 + C23556 + C23555 + C23554 + C23553) * C16961) *
               C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C16963 * C122 + C16958 * C129 + C16964 * C123 +
                  C16959 * C130 + C16965 * C124 + C16960 * C131) *
                     C121 +
                 (C16963 * C133 + C16958 * C143 + C16964 * C134 +
                  C16959 * C144 + C16965 * C135 + C16960 * C145) *
                     C50790) *
                    C16961 +
                ((C17161 + C17162 + C17163) * C121 +
                 (C17164 + C17165 + C17166) * C50790) *
                    C50828) *
                   C50693 * C893 -
               (((C17167 + C17168 + C17169) * C50790 +
                 (C17170 + C17171 + C17172) * C121) *
                    C50828 +
                ((C17166 + C17165 + C17164) * C50790 +
                 (C17163 + C17162 + C17161) * C121) *
                    C16961) *
                   C50693 * C50729) *
                  C895 +
              ((((C17173 + C17174 + C17175) * C121 +
                 (C17176 + C17177 + C17178) * C50790) *
                    C16961 +
                ((C17179 + C17180 + C17181) * C121 +
                 (C17182 + C17183 + C17184) * C50790) *
                    C50828) *
                   C50693 * C50729 -
               (((C17178 + C17177 + C17176) * C50790 +
                 (C17175 + C17174 + C17173) * C121) *
                    C50828 +
                ((C16965 * C136 + C16960 * C146 + C16964 * C135 +
                  C16959 * C145 + C16963 * C134 + C16958 * C144) *
                     C50790 +
                 (C16965 * C125 + C16960 * C132 + C16964 * C124 +
                  C16959 * C131 + C16963 * C123 + C16958 * C130) *
                     C121) *
                    C16961) *
                   C50693 * C893) *
                  C896 +
              ((((C16963 * C124 + C16958 * C131 + C16964 * C125 +
                  C16959 * C132 + C16965 * C126 + C16960 * C138) *
                     C121 +
                 (C16963 * C135 + C16958 * C145 + C16964 * C136 +
                  C16959 * C146 + C16965 * C137 + C16960 * C147) *
                     C50790) *
                    C16961 +
                ((C17489 + C17490 + C17491) * C121 +
                 (C17492 + C17493 + C17494) * C50790) *
                    C50828) *
                   C50693 * C893 -
               (((C16965 * C281 + C16960 * C292 + C16964 * C278 +
                  C16959 * C290 + C16963 * C277 + C16958 * C289) *
                     C50790 +
                 (C16965 * C262 + C16960 * C282 + C16964 * C260 +
                  C16959 * C274 + C16963 * C259 + C16958 * C273) *
                     C121) *
                    C50828 +
                ((C17494 + C17493 + C17492) * C50790 +
                 (C17491 + C17490 + C17489) * C121) *
                    C16961) *
                   C50693 * C50729) *
                  C897) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
                 C16965 * C124 + C16960 * C131) *
                    C121 +
                (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
                 C16965 * C135 + C16960 * C145) *
                    C50790) *
                   C16961 +
               ((C17161 + C17162 + C17163) * C121 +
                (C17164 + C17165 + C17166) * C50790) *
                   C50828) *
                  C50693 * C964 -
              (((C17167 + C17168 + C17169) * C50790 +
                (C17170 + C17171 + C17172) * C121) *
                   C50828 +
               ((C17166 + C17165 + C17164) * C50790 +
                (C17163 + C17162 + C17161) * C121) *
                   C16961) *
                  C50693 * C965 +
              (((C17172 + C17171 + C17170) * C121 +
                (C17169 + C17168 + C17167) * C50790) *
                   C16961 +
               ((C18127 + C18128 + C18129) * C121 +
                (C18130 + C18131 + C18132) * C50790) *
                   C50828) *
                  C50693 * C966 -
              (((C16965 * C2317 + C16960 * C2321 + C16964 * C2316 +
                 C16959 * C2320 + C16963 * C2315 + C16958 * C2319) *
                    C50790 +
                (C16965 * C2312 + C16960 * C2318 + C16964 * C2311 +
                 C16959 * C2314 + C16963 * C2310 + C16958 * C2313) *
                    C121) *
                   C50828 +
               ((C18132 + C18131 + C18130) * C50790 +
                (C18129 + C18128 + C18127) * C121) *
                   C16961) *
                  C50693 * C967) *
             C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C391 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C392 +
           (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
              C16965 * C400 + C16960 * C414) *
                 C121 +
             (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
              C16965 * C418 + C16960 * C430) *
                 C50790) *
                C16961 +
            ((C18291 + C18292 + C18293) * C121 +
             (C18294 + C18295 + C18296) * C50790) *
                C50828) *
               C393) *
              C893 +
          ((((C17864 + C17863 + C17862) * C121 +
             (C17861 + C17860 + C17859) * C50790) *
                C16961 +
            ((C16963 * C1433 + C16958 * C1441 + C16964 * C1432 +
              C16959 * C1440 + C16965 * C1431 + C16960 * C1439) *
                 C121 +
             (C16963 * C1437 + C16958 * C1445 + C16964 * C1436 +
              C16959 * C1444 + C16965 * C1435 + C16960 * C1443) *
                 C50790) *
                C50828) *
               C392 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C391 -
           (((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 +
              C16959 * C2560 + C16963 * C2555 + C16958 * C2559) *
                 C50790 +
             (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 +
              C16959 * C2554 + C16963 * C2550 + C16958 * C2553) *
                 C121) *
                C50828 +
            ((C18296 + C18295 + C18294) * C50790 +
             (C18293 + C18292 + C18291) * C121) *
                C16961) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C893 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C50729) *
              C895 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C50729 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C50693 * C893 -
           (((C19747 * C2317 + C50628 * C2321) * C50790 +
             (C19747 * C2312 + C50628 * C2318) * C121) *
                C19746 +
            (C20134 + C20133) * C19745 + (C20132 + C20131) * C19744 +
            (C20130 + C20129) * C19743) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
              C50693 * C964 -
          (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
           (C19896 + C19895) * C19743) *
              C50693 * C965 +
          (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
           (C20587 + C20588) * C19746) *
              C50693 * C966 -
          (((C19747 * C20575 + C50628 * C20577) * C50790 +
            (C19747 * C20574 + C50628 * C20576) * C121) *
               C19746 +
           (C20588 + C20587) * C19745 + C20579 * C19744 + C20580 * C19743) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C391 -
           ((C20399 + C20400) * C19746 + (C20401 + C20402) * C19745 +
            (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C392 +
           (((C19747 * C398 + C50628 * C412) * C121 +
             (C19747 * C416 + C50628 * C428) * C50790) *
                C19743 +
            (C20709 + C20710) * C19744 + (C20711 + C20712) * C19745 +
            (C20713 + C20714) * C19746) *
               C393) *
              C893 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 +
            ((C19747 * C4066 + C50628 * C4070) * C121 +
             (C19747 * C4068 + C50628 * C4072) * C50790) *
                C19746) *
               C392 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C391 -
           (((C19747 * C20687 + C50628 * C20689) * C50790 +
             (C19747 * C20686 + C50628 * C20688) * C121) *
                C19746 +
            (C20714 + C20713) * C19745 + (C20712 + C20711) * C19744 +
            (C20710 + C20709) * C19743) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50693 * C893 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C50693 * C50729) *
              C895 +
          (((C21903 + C21904 + C21905 + C21906 + C21923 + C21924) * C16961 +
            (C21911 + C21912 + C21913 + C21914 + C21925 + C21926) * C50828) *
               C50693 * C50729 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 + C22113 * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C5083 +
             (C19747 * C135 + C50628 * C145) * C5080 + C22439 * C5084 +
             C22440 * C5081 + C22441 * C5085 + C22442 * C5082) *
                C16961 +
            (C22267 + C22268 + C22281 + C22282 + C22283 + C22284) * C50828) *
               C50693 * C893 -
           (((C19747 * C2557 + C50628 * C2561) * C5082 +
             (C19747 * C2552 + C50628 * C2558) * C5085 +
             (C19747 * C1435 + C50628 * C1443) * C5081 +
             (C19747 * C1431 + C50628 * C1439) * C5084 + C20126 * C5080 +
             C20125 * C5083) *
                C50828 +
            (C22284 + C22283 + C22282 + C22281 + C22268 + C22267) * C16961) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C5083 +
            (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
            C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
               C16961 +
           (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
              C50693 * C964 -
          ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
           (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
              C50693 * C965 +
          ((C21902 + C21901 + C21900 + C21899 + C21898 + C21897) * C16961 +
           (C22893 + C22894 + C22895 + C22896 + C22897 + C22898) * C50828) *
              C50693 * C966 -
          (((C19747 * C20687 + C50628 * C20689) * C5082 +
            (C19747 * C20686 + C50628 * C20688) * C5085 + C21052 * C5081 +
            C21051 * C5084 + C19885 * C5080 + C19886 * C5083) *
               C50828 +
           (C22898 + C22897 + C22896 + C22895 + C22894 + C22893) * C16961) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C391 -
           ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C392 +
           ((C22107 * C5083 + C22108 * C5080 + C22112 * C5084 + C22111 * C5081 +
             (C19747 * C5378 + C50628 * C5381) * C5085 +
             (C19747 * C5383 + C50628 * C5387) * C5082) *
                C16961 +
            (C23049 + C23050 + C23051 + C23052 + C23065 + C23066) * C50828) *
               C393) *
              C893 +
          (((C22642 + C22641 + C22640 + C22639 + C22638 + C22637) * C16961 +
            (C20390 * C5083 + C20389 * C5080 + C20705 * C5084 + C20706 * C5081 +
             C23063 * C5085 + C23064 * C5082) *
                C50828) *
               C392 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C391 -
           (((C19747 * C23045 + C50628 * C23047) * C5082 +
             (C19747 * C23044 + C50628 * C23046) * C5085 + C23064 * C5081 +
             C23063 * C5084 + C20706 * C5080 + C20705 * C5083) *
                C50828 +
            (C23066 + C23065 + C23052 + C23051 + C23050 + C23049) * C16961) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C121 +
              (C19747 * C133 + C50628 * C143) * C50790) *
                 C19743 +
             (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
                C50920 -
            ((C20399 + C20400) * C19746 + (C20401 + C20402) * C19745 +
             (C20403 + C20404) * C19744 +
             ((C19747 * C407 + C50628 * C427) * C50790 +
              (C19747 * C397 + C50628 * C411) * C121) *
                 C19743) *
                C50757) *
               C893 +
           (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
             (C20400 + C20399) * C19745 +
             ((C19747 * C4066 + C50628 * C4070) * C121 +
              (C19747 * C4068 + C50628 * C4072) * C50790) *
                 C19746) *
                C50757 -
            (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
             (C19896 + C19895) * C19743) *
                C50920) *
               C50729) *
              C50911 +
          (((((C19747 * C396 + C50628 * C410) * C121 +
              (C19747 * C406 + C50628 * C426) * C50790) *
                 C19743 +
             (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
             (C20409 + C20410) * C19746) *
                C50757 -
            (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
             ((C19747 * C134 + C50628 * C144) * C50790 +
              (C19747 * C123 + C50628 * C130) * C121) *
                 C19743) *
                C50920) *
               C893 +
           (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
             (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
                C50920 -
            (((C19747 * C4067 + C50628 * C4071) * C50790 +
              (C19747 * C4065 + C50628 * C4069) * C121) *
                 C19746 +
             (C20410 + C20409) * C19745 + (C20408 + C20407) * C19744 +
             (C20406 + C20405) * C19743) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
               C16965 * C124 + C16960 * C131) *
                  C121 +
              (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
               C16965 * C135 + C16960 * C145) *
                  C50790) *
                 C16961 +
             ((C17161 + C17162 + C17163) * C121 +
              (C17164 + C17165 + C17166) * C50790) *
                 C50828) *
                C50920 -
            (((C17859 + C17860 + C17861) * C50790 +
              (C17862 + C17863 + C17864) * C121) *
                 C50828 +
             ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
               C16963 * C407 + C16958 * C427) *
                  C50790 +
              (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
               C16963 * C397 + C16958 * C411) *
                  C121) *
                 C16961) *
                C50757) *
               C893 +
           ((((C17864 + C17863 + C17862) * C121 +
              (C17861 + C17860 + C17859) * C50790) *
                 C16961 +
             ((C16963 * C1433 + C16958 * C1441 + C16964 * C1432 +
               C16959 * C1440 + C16965 * C1431 + C16960 * C1439) *
                  C121 +
              (C16963 * C1437 + C16958 * C1445 + C16964 * C1436 +
               C16959 * C1444 + C16965 * C1435 + C16960 * C1443) *
                  C50790) *
                 C50828) *
                C50757 -
            (((C17167 + C17168 + C17169) * C50790 +
              (C17170 + C17171 + C17172) * C121) *
                 C50828 +
             ((C17166 + C17165 + C17164) * C50790 +
              (C17163 + C17162 + C17161) * C121) *
                 C16961) *
                C50920) *
               C50729) *
              C50911 +
          (((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
               C16965 * C394 + C16960 * C408) *
                  C121 +
              (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
               C16965 * C404 + C16960 * C424) *
                  C50790) *
                 C16961 +
             ((C17865 + C17866 + C17867) * C121 +
              (C17868 + C17869 + C17870) * C50790) *
                 C50828) *
                C50757 -
            (((C17178 + C17177 + C17176) * C50790 +
              (C17175 + C17174 + C17173) * C121) *
                 C50828 +
             ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
               C16963 * C134 + C16958 * C144) *
                  C50790 +
              (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
               C16963 * C123 + C16958 * C130) *
                  C121) *
                 C16961) *
                C50920) *
               C893 +
           ((((C17173 + C17174 + C17175) * C121 +
              (C17176 + C17177 + C17178) * C50790) *
                 C16961 +
             ((C17179 + C17180 + C17181) * C121 +
              (C17182 + C17183 + C17184) * C50790) *
                 C50828) *
                C50920 -
            (((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 +
               C16959 * C1443 + C16963 * C1436 + C16958 * C1444) *
                  C50790 +
              (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 +
               C16959 * C1439 + C16963 * C1432 + C16958 * C1440) *
                  C121) *
                 C50828 +
             ((C17870 + C17869 + C17868) * C50790 +
              (C17867 + C17866 + C17865) * C121) *
                 C16961) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C5083 +
              (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
              C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                 C16961 +
             (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
                C50920 -
            ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
             (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 +
              C22107 * C5084 + C22106 * C5080 + C22105 * C5083) *
                 C16961) *
                C50757) *
               C893 +
           (((C22642 + C22641 + C22640 + C22639 + C22638 + C22637) * C16961 +
             (C20390 * C5083 + C20389 * C5080 + C20705 * C5084 +
              C20706 * C5081 + C23063 * C5085 + C23064 * C5082) *
                 C50828) *
                C50757 -
            ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
             (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
                C50920) *
               C50729) *
              C50911 +
          ((((C22113 * C5083 + C22114 * C5080 + C22115 * C5084 +
              C22116 * C5081 + C22117 * C5085 + C22118 * C5082) *
                 C16961 +
             (C22643 + C22644 + C22645 + C22646 + C22647 + C22648) * C50828) *
                C50757 -
            ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
             (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 +
              C22113 * C5084 + (C19747 * C134 + C50628 * C144) * C5080 +
              (C19747 * C123 + C50628 * C130) * C5083) *
                 C16961) *
                C50920) *
               C893 +
           (((C21903 + C21904 + C21905 + C21906 + C21923 + C21924) * C16961 +
             (C21911 + C21912 + C21913 + C21914 + C21925 + C21926) * C50828) *
                C50920 -
            (((C19747 * C4484 + C50628 * C4492) * C5082 +
              (C19747 * C4480 + C50628 * C4486) * C5085 + C21922 * C5081 +
              C21921 * C5084 + C20396 * C5080 + C20395 * C5083) *
                 C50828 +
             (C22648 + C22647 + C22646 + C22645 + C22644 + C22643) * C16961) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C121 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C50790) *
               C16961 +
           ((C17161 + C17162 + C17163) * C121 +
            (C17164 + C17165 + C17166) * C50790) *
               C50828) *
              C50693 * C964 -
          (((C17167 + C17168 + C17169) * C50790 +
            (C17170 + C17171 + C17172) * C121) *
               C50828 +
           ((C17166 + C17165 + C17164) * C50790 +
            (C17163 + C17162 + C17161) * C121) *
               C16961) *
              C50693 * C965 +
          (((C17172 + C17171 + C17170) * C121 +
            (C17169 + C17168 + C17167) * C50790) *
               C16961 +
           ((C18127 + C18128 + C18129) * C121 +
            (C18130 + C18131 + C18132) * C50790) *
               C50828) *
              C50693 * C966 -
          (((C16965 * C2317 + C16960 * C2321 + C16964 * C2316 + C16959 * C2320 +
             C16963 * C2315 + C16958 * C2319) *
                C50790 +
            (C16965 * C2312 + C16960 * C2318 + C16964 * C2311 + C16959 * C2314 +
             C16963 * C2310 + C16958 * C2313) *
                C121) *
               C50828 +
           ((C18132 + C18131 + C18130) * C50790 +
            (C18129 + C18128 + C18127) * C121) *
               C16961) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C50729) *
              C895 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C50729 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C893) *
              C896 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C16965 * C281 + C16960 * C292 + C16964 * C278 + C16959 * C290 +
              C16963 * C277 + C16958 * C289) *
                 C50790 +
             (C16965 * C262 + C16960 * C282 + C16964 * C260 + C16959 * C274 +
              C16963 * C259 + C16958 * C273) *
                 C121) *
                C50828 +
            ((C17494 + C17493 + C17492) * C50790 +
             (C17491 + C17490 + C17489) * C121) *
                C16961) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C893 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C50729) *
              C895 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C50729 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C50693 * C893 -
           (((C19747 * C2317 + C50628 * C2321) * C50790 +
             (C19747 * C2312 + C50628 * C2318) * C121) *
                C19746 +
            (C20134 + C20133) * C19745 + (C20132 + C20131) * C19744 +
            (C20130 + C20129) * C19743) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
              C50693 * C964 -
          (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
           (C19896 + C19895) * C19743) *
              C50693 * C965 +
          (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
           (C20587 + C20588) * C19746) *
              C50693 * C966 -
          (((C19747 * C20575 + C50628 * C20577) * C50790 +
            (C19747 * C20574 + C50628 * C20576) * C121) *
               C19746 +
           (C20588 + C20587) * C19745 + C20579 * C19744 + C20580 * C19743) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50693 * C893 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C50693 * C50729) *
              C895 +
          (((C21903 + C21904 + C21905 + C21906 + C21923 + C21924) * C16961 +
            (C21911 + C21912 + C21913 + C21914 + C21925 + C21926) * C50828) *
               C50693 * C50729 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 + C22113 * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C5083 +
             (C19747 * C135 + C50628 * C145) * C5080 + C22439 * C5084 +
             C22440 * C5081 + C22441 * C5085 + C22442 * C5082) *
                C16961 +
            (C22267 + C22268 + C22281 + C22282 + C22283 + C22284) * C50828) *
               C50693 * C893 -
           (((C19747 * C2557 + C50628 * C2561) * C5082 +
             (C19747 * C2552 + C50628 * C2558) * C5085 +
             (C19747 * C1435 + C50628 * C1443) * C5081 +
             (C19747 * C1431 + C50628 * C1439) * C5084 + C20126 * C5080 +
             C20125 * C5083) *
                C50828 +
            (C22284 + C22283 + C22282 + C22281 + C22268 + C22267) * C16961) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C5083 +
            (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
            C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
               C16961 +
           (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
              C50693 * C964 -
          ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
           (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
              C50693 * C965 +
          ((C21902 + C21901 + C21900 + C21899 + C21898 + C21897) * C16961 +
           (C22893 + C22894 + C22895 + C22896 + C22897 + C22898) * C50828) *
              C50693 * C966 -
          (((C19747 * C20687 + C50628 * C20689) * C5082 +
            (C19747 * C20686 + C50628 * C20688) * C5085 + C21052 * C5081 +
            C21051 * C5084 + C19885 * C5080 + C19886 * C5083) *
               C50828 +
           (C22898 + C22897 + C22896 + C22895 + C22894 + C22893) * C16961) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C121 +
              (C19747 * C133 + C50628 * C143) * C50790) *
                 C19743 +
             (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
                C1544 -
            (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
             ((C19747 * C407 + C50628 * C427) * C50790 +
              (C19747 * C397 + C50628 * C411) * C121) *
                 C19743) *
                C50757) *
               C50919 +
           (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
             (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
                C50757 -
            (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
             (C19896 + C19895) * C19743) *
                C1544) *
               C50729) *
              C50911 +
          (((((C19747 * C396 + C50628 * C410) * C121 +
              (C19747 * C406 + C50628 * C426) * C50790) *
                 C19743 +
             (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
             (C20409 + C20410) * C19746) *
                C50757 -
            (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
             ((C19747 * C134 + C50628 * C144) * C50790 +
              (C19747 * C123 + C50628 * C130) * C121) *
                 C19743) *
                C1544) *
               C50919 +
           (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
             (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
                C1544 -
            (((C19747 * C4067 + C50628 * C4071) * C50790 +
              (C19747 * C4065 + C50628 * C4069) * C121) *
                 C19746 +
             (C20410 + C20409) * C19745 + (C20408 + C20407) * C19744 +
             (C20406 + C20405) * C19743) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
               C16965 * C124 + C16960 * C131) *
                  C121 +
              (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
               C16965 * C135 + C16960 * C145) *
                  C50790) *
                 C16961 +
             ((C17161 + C17162 + C17163) * C121 +
              (C17164 + C17165 + C17166) * C50790) *
                 C50828) *
                C1544 -
            (((C17859 + C17860 + C17861) * C50790 +
              (C17862 + C17863 + C17864) * C121) *
                 C50828 +
             ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
               C16963 * C407 + C16958 * C427) *
                  C50790 +
              (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
               C16963 * C397 + C16958 * C411) *
                  C121) *
                 C16961) *
                C50757) *
               C50919 +
           ((((C17864 + C17863 + C17862) * C121 +
              (C17861 + C17860 + C17859) * C50790) *
                 C16961 +
             ((C18795 + C18796 + C18797) * C121 +
              (C18798 + C18799 + C18800) * C50790) *
                 C50828) *
                C50757 -
            (((C17167 + C17168 + C17169) * C50790 +
              (C17170 + C17171 + C17172) * C121) *
                 C50828 +
             ((C17166 + C17165 + C17164) * C50790 +
              (C17163 + C17162 + C17161) * C121) *
                 C16961) *
                C1544) *
               C50729) *
              C50911 +
          (((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
               C16965 * C394 + C16960 * C408) *
                  C121 +
              (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
               C16965 * C404 + C16960 * C424) *
                  C50790) *
                 C16961 +
             ((C17865 + C17866 + C17867) * C121 +
              (C17868 + C17869 + C17870) * C50790) *
                 C50828) *
                C50757 -
            (((C17178 + C17177 + C17176) * C50790 +
              (C17175 + C17174 + C17173) * C121) *
                 C50828 +
             ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
               C16963 * C134 + C16958 * C144) *
                  C50790 +
              (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
               C16963 * C123 + C16958 * C130) *
                  C121) *
                 C16961) *
                C1544) *
               C50919 +
           ((((C17173 + C17174 + C17175) * C121 +
              (C17176 + C17177 + C17178) * C50790) *
                 C16961 +
             ((C17179 + C17180 + C17181) * C121 +
              (C17182 + C17183 + C17184) * C50790) *
                 C50828) *
                C1544 -
            (((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 +
               C16959 * C1443 + C16963 * C1436 + C16958 * C1444) *
                  C50790 +
              (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 +
               C16959 * C1439 + C16963 * C1432 + C16958 * C1440) *
                  C121) *
                 C50828 +
             ((C17870 + C17869 + C17868) * C50790 +
              (C17867 + C17866 + C17865) * C121) *
                 C16961) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C5083 +
              (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
              C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                 C16961 +
             (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
                C1544 -
            ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
             (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 +
              C22107 * C5084 + C22106 * C5080 + C22105 * C5083) *
                 C16961) *
                C50757) *
               C50919 +
           (((C22642 + C22641 + C22640 + C22639 + C22638 + C22637) * C16961 +
             (C23553 + C23554 + C23555 + C23556 + C23557 + C23558) * C50828) *
                C50757 -
            ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
             (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
                C1544) *
               C50729) *
              C50911 +
          ((((C22113 * C5083 + C22114 * C5080 + C22115 * C5084 +
              C22116 * C5081 + C22117 * C5085 + C22118 * C5082) *
                 C16961 +
             (C22643 + C22644 + C22645 + C22646 + C22647 + C22648) * C50828) *
                C50757 -
            ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
             (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 +
              C22113 * C5084 + (C19747 * C134 + C50628 * C144) * C5080 +
              (C19747 * C123 + C50628 * C130) * C5083) *
                 C16961) *
                C1544) *
               C50919 +
           (((C21903 + C21904 + C21905 + C21906 + C21923 + C21924) * C16961 +
             (C21911 + C21912 + C21913 + C21914 + C21925 + C21926) * C50828) *
                C1544 -
            (((C19747 * C4484 + C50628 * C4492) * C5082 +
              (C19747 * C4480 + C50628 * C4486) * C5085 + C21922 * C5081 +
              C21921 * C5084 + C20396 * C5080 + C20395 * C5083) *
                 C50828 +
             (C22648 + C22647 + C22646 + C22645 + C22644 + C22643) * C16961) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50966 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50967 +
           (((C19747 * C398 + C50628 * C412) * C121 +
             (C19747 * C416 + C50628 * C428) * C50790) *
                C19743 +
            (C20709 + C20710) * C19744 + (C20711 + C20712) * C19745 +
            (C20713 + C20714) * C19746) *
               C1960) *
              C50919 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
               C50967 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C50966 -
           (((C19747 * C20687 + C50628 * C20689) * C50790 +
             (C19747 * C20686 + C50628 * C20688) * C121) *
                C19746 +
            (C20714 + C20713) * C19745 + (C20712 + C20711) * C19744 +
            (C20710 + C20709) * C19743) *
               C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50966 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50967 +
           (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
              C16965 * C400 + C16960 * C414) *
                 C121 +
             (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
              C16965 * C418 + C16960 * C430) *
                 C50790) *
                C16961 +
            ((C18291 + C18292 + C18293) * C121 +
             (C18294 + C18295 + C18296) * C50790) *
                C50828) *
               C1960) *
              C50919 +
          ((((C17864 + C17863 + C17862) * C121 +
             (C17861 + C17860 + C17859) * C50790) *
                C16961 +
            ((C18795 + C18796 + C18797) * C121 +
             (C18798 + C18799 + C18800) * C50790) *
                C50828) *
               C50967 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50966 -
           (((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 +
              C16959 * C2560 + C16963 * C2555 + C16958 * C2559) *
                 C50790 +
             (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 +
              C16959 * C2554 + C16963 * C2550 + C16958 * C2553) *
                 C121) *
                C50828 +
            ((C18296 + C18295 + C18294) * C50790 +
             (C18293 + C18292 + C18291) * C121) *
                C16961) *
               C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50966 -
           ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C50967 +
           ((C22107 * C5083 + C22108 * C5080 + C22112 * C5084 + C22111 * C5081 +
             C23957 * C5085 + C23958 * C5082) *
                C16961 +
            (C23049 + C23050 + C23051 + C23052 + C23065 + C23066) * C50828) *
               C1960) *
              C50919 +
          (((C22642 + C22641 + C22640 + C22639 + C22638 + C22637) * C16961 +
            (C23553 + C23554 + C23555 + C23556 + C23557 + C23558) * C50828) *
               C50967 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C50966 -
           (((C19747 * C23045 + C50628 * C23047) * C5082 +
             (C19747 * C23044 + C50628 * C23046) * C5085 + C23064 * C5081 +
             C23063 * C5084 + C20706 * C5080 + C20705 * C5083) *
                C50828 +
            (C23066 + C23065 + C23052 + C23051 + C23050 + C23049) * C16961) *
               C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C16963 * C122 + C16958 * C129 + C16964 * C123 +
                  C16959 * C130 + C16965 * C124 + C16960 * C131) *
                     C121 +
                 (C16963 * C133 + C16958 * C143 + C16964 * C134 +
                  C16959 * C144 + C16965 * C135 + C16960 * C145) *
                     C50790) *
                    C16961 +
                ((C17161 + C17162 + C17163) * C121 +
                 (C17164 + C17165 + C17166) * C50790) *
                    C50828) *
                   C1544 -
               (((C17859 + C17860 + C17861) * C50790 +
                 (C17862 + C17863 + C17864) * C121) *
                    C50828 +
                ((C16965 * C405 + C16960 * C425 + C16964 * C406 +
                  C16959 * C426 + C16963 * C407 + C16958 * C427) *
                     C50790 +
                 (C16965 * C395 + C16960 * C409 + C16964 * C396 +
                  C16959 * C410 + C16963 * C397 + C16958 * C411) *
                     C121) *
                    C16961) *
                   C50757) *
                  C50677 * C895 +
              ((((C16963 * C396 + C16958 * C410 + C16964 * C395 +
                  C16959 * C409 + C16965 * C394 + C16960 * C408) *
                     C121 +
                 (C16963 * C406 + C16958 * C426 + C16964 * C405 +
                  C16959 * C425 + C16965 * C404 + C16960 * C424) *
                     C50790) *
                    C16961 +
                ((C17865 + C17866 + C17867) * C121 +
                 (C17868 + C17869 + C17870) * C50790) *
                    C50828) *
                   C50757 -
               (((C17178 + C17177 + C17176) * C50790 +
                 (C17175 + C17174 + C17173) * C121) *
                    C50828 +
                ((C16965 * C136 + C16960 * C146 + C16964 * C135 +
                  C16959 * C145 + C16963 * C134 + C16958 * C144) *
                     C50790 +
                 (C16965 * C125 + C16960 * C132 + C16964 * C124 +
                  C16959 * C131 + C16963 * C123 + C16958 * C130) *
                     C121) *
                    C16961) *
                   C1544) *
                  C50677 * C896 +
              ((((C16963 * C124 + C16958 * C131 + C16964 * C125 +
                  C16959 * C132 + C16965 * C126 + C16960 * C138) *
                     C121 +
                 (C16963 * C135 + C16958 * C145 + C16964 * C136 +
                  C16959 * C146 + C16965 * C137 + C16960 * C147) *
                     C50790) *
                    C16961 +
                ((C17489 + C17490 + C17491) * C121 +
                 (C17492 + C17493 + C17494) * C50790) *
                    C50828) *
                   C1544 -
               (((C16965 * C788 + C16960 * C794 + C16964 * C787 +
                  C16959 * C793 + C16963 * C786 + C16958 * C792) *
                     C50790 +
                 (C16965 * C779 + C16960 * C789 + C16964 * C778 +
                  C16959 * C783 + C16963 * C777 + C16958 * C782) *
                     C121) *
                    C50828 +
                ((C16965 * C421 + C16960 * C432 + C16964 * C404 +
                  C16959 * C424 + C16963 * C405 + C16958 * C425) *
                     C50790 +
                 (C16965 * C402 + C16960 * C420 + C16964 * C394 +
                  C16959 * C408 + C16963 * C395 + C16958 * C409) *
                     C121) *
                    C16961) *
                   C50757) *
                  C50677 * C897) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C16963 * C122 + C16958 * C129 + C16964 * C123 +
                  C16959 * C130 + C16965 * C124 + C16960 * C131) *
                     C121 +
                 (C16963 * C133 + C16958 * C143 + C16964 * C134 +
                  C16959 * C144 + C16965 * C135 + C16960 * C145) *
                     C50790) *
                    C16961 +
                ((C17161 + C17162 + C17163) * C121 +
                 (C17164 + C17165 + C17166) * C50790) *
                    C50828) *
                   C1544 -
               (((C17859 + C17860 + C17861) * C50790 +
                 (C17862 + C17863 + C17864) * C121) *
                    C50828 +
                ((C16965 * C405 + C16960 * C425 + C16964 * C406 +
                  C16959 * C426 + C16963 * C407 + C16958 * C427) *
                     C50790 +
                 (C16965 * C395 + C16960 * C409 + C16964 * C396 +
                  C16959 * C410 + C16963 * C397 + C16958 * C411) *
                     C121) *
                    C16961) *
                   C50757) *
                  C248 +
              ((((C17864 + C17863 + C17862) * C121 +
                 (C17861 + C17860 + C17859) * C50790) *
                    C16961 +
                ((C18795 + C18796 + C18797) * C121 +
                 (C18798 + C18799 + C18800) * C50790) *
                    C50828) *
                   C50757 -
               (((C17167 + C17168 + C17169) * C50790 +
                 (C17170 + C17171 + C17172) * C121) *
                    C50828 +
                ((C17166 + C17165 + C17164) * C50790 +
                 (C17163 + C17162 + C17161) * C121) *
                    C16961) *
                   C1544) *
                  C249 +
              ((((C17172 + C17171 + C17170) * C121 +
                 (C17169 + C17168 + C17167) * C50790) *
                    C16961 +
                ((C18127 + C18128 + C18129) * C121 +
                 (C18130 + C18131 + C18132) * C50790) *
                    C50828) *
                   C1544 -
               (((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 +
                  C16959 * C3082 + C16963 * C3077 + C16958 * C3081) *
                     C50790 +
                 (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 +
                  C16959 * C3076 + C16963 * C3072 + C16958 * C3075) *
                     C121) *
                    C50828 +
                ((C18800 + C18799 + C18798) * C50790 +
                 (C18797 + C18796 + C18795) * C121) *
                    C16961) *
                   C50757) *
                  C250) *
             C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C121 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C50790) *
               C16961 +
           ((C17161 + C17162 + C17163) * C121 +
            (C17164 + C17165 + C17166) * C50790) *
               C50828) *
              C1710 -
          (((C17859 + C17860 + C17861) * C50790 +
            (C17862 + C17863 + C17864) * C121) *
               C50828 +
           ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
             C16963 * C407 + C16958 * C427) *
                C50790 +
            (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
             C16963 * C397 + C16958 * C411) *
                C121) *
               C16961) *
              C1711 +
          (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
             C16965 * C400 + C16960 * C414) *
                C121 +
            (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
             C16965 * C418 + C16960 * C430) *
                C50790) *
               C16961 +
           ((C18291 + C18292 + C18293) * C121 +
            (C18294 + C18295 + C18296) * C50790) *
               C50828) *
              C1712 -
          (((C16965 * C5977 + C16960 * C5979 + C16964 * C4488 + C16959 * C4494 +
             C16963 * C4489 + C16958 * C4495) *
                C50790 +
            (C16965 * C5976 + C16960 * C5978 + C16964 * C4482 + C16959 * C4490 +
             C16963 * C4483 + C16958 * C4491) *
                C121) *
               C50828 +
           ((C16965 * C1719 + C16960 * C1727 + C16964 * C1720 + C16959 * C1728 +
             C16963 * C1721 + C16958 * C1729) *
                C50790 +
            (C16965 * C1715 + C16960 * C1723 + C16964 * C1716 + C16959 * C1724 +
             C16963 * C1717 + C16958 * C1725) *
                C121) *
               C16961) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C1544 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C50677 * C895 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
            (C20409 + C20410) * C19746) *
               C50757 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C1544 -
           (((C19747 * C3079 + C50628 * C3083) * C50790 +
             (C19747 * C3074 + C50628 * C3080) * C121) *
                C19746 +
            ((C19747 * C1435 + C50628 * C1443) * C50790 +
             (C19747 * C1431 + C50628 * C1439) * C121) *
                C19745 +
            ((C19747 * C786 + C50628 * C792) * C50790 +
             (C19747 * C777 + C50628 * C782) * C121) *
                C19744 +
            ((C19747 * C405 + C50628 * C425) * C50790 +
             (C19747 * C395 + C50628 * C409) * C121) *
                C19743) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C1544 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C248 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
               C50757 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C1544) *
              C249 +
          ((C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            (C20587 + C20588) * C19746) *
               C1544 -
           (((C19747 * C21041 + C50628 * C21043) * C50790 +
             (C19747 * C21040 + C50628 * C21042) * C121) *
                C19746 +
            (C21054 + C21053) * C19745 + C21045 * C19744 + C21046 * C19743) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
              C1710 -
          (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
           ((C19747 * C407 + C50628 * C427) * C50790 +
            (C19747 * C397 + C50628 * C411) * C121) *
               C19743) *
              C1711 +
          (((C19747 * C398 + C50628 * C412) * C121 +
            (C19747 * C416 + C50628 * C428) * C50790) *
               C19743 +
           (C20709 + C20710) * C19744 + (C20711 + C20712) * C19745 +
           (C20713 + C20714) * C19746) *
              C1712 -
          (((C19747 * C21317 + C50628 * C21319) * C50790 +
            (C19747 * C21316 + C50628 * C21318) * C121) *
               C19746 +
           ((C19747 * C4485 + C50628 * C4493) * C50790 +
            (C19747 * C4481 + C50628 * C4487) * C121) *
               C19745 +
           ((C19747 * C4489 + C50628 * C4495) * C50790 +
            (C19747 * C4483 + C50628 * C4491) * C121) *
               C19744 +
           ((C19747 * C1721 + C50628 * C1729) * C50790 +
            (C19747 * C1717 + C50628 * C1725) * C121) *
               C19743) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C1544 -
           ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C5083 + C22114 * C5080 + C22115 * C5084 + C22116 * C5081 +
             C22117 * C5085 + C22118 * C5082) *
                C16961 +
            (C22643 + C22644 + C22645 + C22646 + C22647 + C22648) * C50828) *
               C50757 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 + C22113 * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C5083 +
             (C19747 * C135 + C50628 * C145) * C5080 + C22439 * C5084 +
             C22440 * C5081 + C22441 * C5085 + C22442 * C5082) *
                C16961 +
            (C22267 + C22268 + C22281 + C22282 + C22283 + C22284) * C50828) *
               C1544 -
           (((C19747 * C5977 + C50628 * C5979) * C5082 +
             (C19747 * C5976 + C50628 * C5978) * C5085 + C22280 * C5081 +
             C22279 * C5084 + C22278 * C5080 + C22277 * C5083) *
                C50828 +
            ((C19747 * C1719 + C50628 * C1727) * C5082 +
             (C19747 * C1715 + C50628 * C1723) * C5085 + C22442 * C5081 +
             C22441 * C5084 + C22440 * C5080 + C22439 * C5083) *
                C16961) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C1544 -
           ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C50757) *
              C248 +
          (((C22642 + C22641 + C22640 + C22639 + C22638 + C22637) * C16961 +
            (C23553 + C23554 + C23555 + C23556 + C23557 + C23558) * C50828) *
               C50757 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C1544) *
              C249 +
          (((C21902 + C21901 + C21900 + C21899 + C21898 + C21897) * C16961 +
            (C22893 + C22894 + C22895 + C22896 + C22897 + C22898) * C50828) *
               C1544 -
           (((C19747 * C21317 + C50628 * C21319) * C5082 +
             (C19747 * C21316 + C50628 * C21318) * C5085 + C20708 * C5081 +
             C20707 * C5084 + C20387 * C5080 + C20388 * C5083) *
                C50828 +
            (C23558 + C23557 + C23556 + C23555 + C23554 + C23553) * C16961) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C5083 +
            (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
            C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
               C16961 +
           (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
              C1710 -
          ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
           (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
            C22106 * C5080 + C22105 * C5083) *
               C16961) *
              C1711 +
          ((C22107 * C5083 + C22108 * C5080 + C22112 * C5084 + C22111 * C5081 +
            C23957 * C5085 + C23958 * C5082) *
               C16961 +
           (C23049 + C23050 + C23051 + C23052 + C23065 + C23066) * C50828) *
              C1712 -
          (((C19747 * C23949 + C50628 * C23951) * C5082 +
            (C19747 * C23948 + C50628 * C23950) * C5085 + C23062 * C5081 +
            C23061 * C5084 + C22109 * C5080 + C22110 * C5083) *
               C50828 +
           ((C19747 * C7283 + C50628 * C7287) * C5082 +
            (C19747 * C7281 + C50628 * C7285) * C5085 + C23958 * C5081 +
            C23957 * C5084 + C22111 * C5080 + C22112 * C5083) *
               C16961) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50966 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50967 +
           (((C19747 * C398 + C50628 * C412) * C121 +
             (C19747 * C416 + C50628 * C428) * C50790) *
                C19743 +
            (C20709 + C20710) * C19744 + (C20711 + C20712) * C19745 +
            (C20713 + C20714) * C19746) *
               C1960) *
              C50677 * C50911 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
            (C20409 + C20410) * C19746) *
               C50967 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50966 -
           (((C19747 * C3549 + C50628 * C3553) * C50790 +
             (C19747 * C3547 + C50628 * C3551) * C121) *
                C19746 +
            ((C19747 * C2556 + C50628 * C2560) * C50790 +
             (C19747 * C2551 + C50628 * C2554) * C121) *
                C19745 +
            ((C19747 * C1089 + C50628 * C1097) * C50790 +
             (C19747 * C1085 + C50628 * C1093) * C121) *
                C19744 +
            ((C19747 * C417 + C50628 * C429) * C50790 +
             (C19747 * C399 + C50628 * C413) * C121) *
                C19743) *
               C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50966 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50967 +
           (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
              C16965 * C400 + C16960 * C414) *
                 C121 +
             (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
              C16965 * C418 + C16960 * C430) *
                 C50790) *
                C16961 +
            ((C18291 + C18292 + C18293) * C121 +
             (C18294 + C18295 + C18296) * C50790) *
                C50828) *
               C1960) *
              C50677 * C50911 +
          ((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
              C16965 * C394 + C16960 * C408) *
                 C121 +
             (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
              C16965 * C404 + C16960 * C424) *
                 C50790) *
                C16961 +
            ((C17865 + C17866 + C17867) * C121 +
             (C17868 + C17869 + C17870) * C50790) *
                C50828) *
               C50967 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50966 -
           (((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50790 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C121) *
                C50828 +
            ((C16965 * C419 + C16960 * C431 + C16964 * C418 + C16959 * C430 +
              C16963 * C417 + C16958 * C429) *
                 C50790 +
             (C16965 * C401 + C16960 * C415 + C16964 * C400 + C16959 * C414 +
              C16963 * C399 + C16958 * C413) *
                 C121) *
                C16961) *
               C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C50966 -
           ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C50967 +
           ((C22107 * C5083 + C22108 * C5080 + C22112 * C5084 + C22111 * C5081 +
             C23957 * C5085 + C23958 * C5082) *
                C16961 +
            (C23049 + C23050 + C23051 + C23052 + C23065 + C23066) * C50828) *
               C1960) *
              C50677 * C50911 +
          (((C22113 * C5083 + C22114 * C5080 + C22115 * C5084 + C22116 * C5081 +
             C22117 * C5085 + C22118 * C5082) *
                C16961 +
            (C22643 + C22644 + C22645 + C22646 + C22647 + C22648) * C50828) *
               C50967 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 + C22113 * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C50966 -
           (((C19747 * C6384 + C50628 * C6388) * C5082 +
             (C19747 * C6382 + C50628 * C6386) * C5085 + C22120 * C5081 +
             C22119 * C5084 + C21920 * C5080 + C21919 * C5083) *
                C50828 +
            ((C19747 * C5384 + C50628 * C5388) * C5082 +
             (C19747 * C5379 + C50628 * C5382) * C5085 + C22118 * C5081 +
             C22117 * C5084 + C22116 * C5080 + C22115 * C5083) *
                C16961) *
               C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C1544 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C248 +
          ((((C17864 + C17863 + C17862) * C121 +
             (C17861 + C17860 + C17859) * C50790) *
                C16961 +
            ((C18795 + C18796 + C18797) * C121 +
             (C18798 + C18799 + C18800) * C50790) *
                C50828) *
               C50757 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C1544) *
              C249 +
          ((((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C18127 + C18128 + C18129) * C121 +
             (C18130 + C18131 + C18132) * C50790) *
                C50828) *
               C1544 -
           (((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 +
              C16959 * C3082 + C16963 * C3077 + C16958 * C3081) *
                 C50790 +
             (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 +
              C16959 * C3076 + C16963 * C3072 + C16958 * C3075) *
                 C121) *
                C50828 +
            ((C18800 + C18799 + C18798) * C50790 +
             (C18797 + C18796 + C18795) * C121) *
                C16961) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C1544 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C895 +
          ((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
              C16965 * C394 + C16960 * C408) *
                 C121 +
             (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
              C16965 * C404 + C16960 * C424) *
                 C50790) *
                C16961 +
            ((C17865 + C17866 + C17867) * C121 +
             (C17868 + C17869 + C17870) * C50790) *
                C50828) *
               C50757 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C1544) *
              C50677 * C896 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C1544 -
           (((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
              C16963 * C786 + C16958 * C792) *
                 C50790 +
             (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
              C16963 * C777 + C16958 * C782) *
                 C121) *
                C50828 +
            ((C16965 * C421 + C16960 * C432 + C16964 * C404 + C16959 * C424 +
              C16963 * C405 + C16958 * C425) *
                 C50790 +
             (C16965 * C402 + C16960 * C420 + C16964 * C394 + C16959 * C408 +
              C16963 * C395 + C16958 * C409) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C1544 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C50677 * C895 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
            (C20409 + C20410) * C19746) *
               C50757 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C1544 -
           (((C19747 * C3079 + C50628 * C3083) * C50790 +
             (C19747 * C3074 + C50628 * C3080) * C121) *
                C19746 +
            ((C19747 * C1435 + C50628 * C1443) * C50790 +
             (C19747 * C1431 + C50628 * C1439) * C121) *
                C19745 +
            ((C19747 * C786 + C50628 * C792) * C50790 +
             (C19747 * C777 + C50628 * C782) * C121) *
                C19744 +
            ((C19747 * C405 + C50628 * C425) * C50790 +
             (C19747 * C395 + C50628 * C409) * C121) *
                C19743) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C1544 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C248 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
               C50757 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C1544) *
              C249 +
          ((C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            (C20587 + C20588) * C19746) *
               C1544 -
           (((C19747 * C21041 + C50628 * C21043) * C50790 +
             (C19747 * C21040 + C50628 * C21042) * C121) *
                C19746 +
            (C21054 + C21053) * C19745 + C21045 * C19744 + C21046 * C19743) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C1544 -
           ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C5083 + C22114 * C5080 + C22115 * C5084 + C22116 * C5081 +
             C22117 * C5085 + C22118 * C5082) *
                C16961 +
            (C22643 + C22644 + C22645 + C22646 + C22647 + C22648) * C50828) *
               C50757 -
           ((C21924 + C21923 + C21906 + C21905 + C21904 + C21903) * C50828 +
            (C22116 * C5082 + C22115 * C5085 + C22114 * C5081 + C22113 * C5084 +
             (C19747 * C134 + C50628 * C144) * C5080 +
             (C19747 * C123 + C50628 * C130) * C5083) *
                C16961) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C5083 +
             (C19747 * C135 + C50628 * C145) * C5080 + C22439 * C5084 +
             C22440 * C5081 + C22441 * C5085 + C22442 * C5082) *
                C16961 +
            (C22267 + C22268 + C22281 + C22282 + C22283 + C22284) * C50828) *
               C1544 -
           (((C19747 * C5977 + C50628 * C5979) * C5082 +
             (C19747 * C5976 + C50628 * C5978) * C5085 + C22280 * C5081 +
             C22279 * C5084 + C22278 * C5080 + C22277 * C5083) *
                C50828 +
            ((C19747 * C1719 + C50628 * C1727) * C5082 +
             (C19747 * C1715 + C50628 * C1723) * C5085 + C22442 * C5081 +
             C22441 * C5084 + C22440 * C5080 + C22439 * C5083) *
                C16961) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C5083 +
             (C19747 * C133 + C50628 * C143) * C5080 + C22105 * C5084 +
             C22106 * C5081 + C22107 * C5085 + C22108 * C5082) *
                C16961 +
            (C21891 + C21892 + C21893 + C21894 + C21895 + C21896) * C50828) *
               C1544 -
           ((C22637 + C22638 + C22639 + C22640 + C22641 + C22642) * C50828 +
            (C22111 * C5082 + C22112 * C5085 + C22108 * C5081 + C22107 * C5084 +
             C22106 * C5080 + C22105 * C5083) *
                C16961) *
               C50757) *
              C248 +
          (((C22642 + C22641 + C22640 + C22639 + C22638 + C22637) * C16961 +
            (C23553 + C23554 + C23555 + C23556 + C23557 + C23558) * C50828) *
               C50757 -
           ((C21897 + C21898 + C21899 + C21900 + C21901 + C21902) * C50828 +
            (C21896 + C21895 + C21894 + C21893 + C21892 + C21891) * C16961) *
               C1544) *
              C249 +
          (((C21902 + C21901 + C21900 + C21899 + C21898 + C21897) * C16961 +
            (C22893 + C22894 + C22895 + C22896 + C22897 + C22898) * C50828) *
               C1544 -
           (((C19747 * C21317 + C50628 * C21319) * C5082 +
             (C19747 * C21316 + C50628 * C21318) * C5085 + C20708 * C5081 +
             C20707 * C5084 + C20387 * C5080 + C20388 * C5083) *
                C50828 +
            (C23558 + C23557 + C23556 + C23555 + C23554 + C23553) * C16961) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             (C25473 + C25472) * C10705 + (C25471 + C25470) * C50854) *
                C50828) *
               C50693 * C50919 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            ((C25470 + C25471) * C50854 + (C25472 + C25473) * C10705 +
             (C24747 + C24746) * C50933 + (C24745 + C24744) * C10704) *
                C16961) *
               C50693 * C50729) *
              C50962 +
          ((((C24756 + C24757) * C10704 + (C24758 + C24759) * C50933 +
             (C25474 + C25475) * C10705 + (C25476 + C25477) * C50854) *
                C16961 +
            ((C24760 + C24761) * C10704 + (C24762 + C24763) * C50933 +
             (C25478 + C25479) * C10705 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C50729 -
           (((C25477 + C25476) * C50854 + (C25475 + C25474) * C10705 +
             (C24759 + C24758) * C50933 + (C24757 + C24756) * C10704) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C50693 * C50919) *
              C50963 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C10704 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50933 +
             (C49747 * C395 + C50904 * C409 + C49740 * C394 + C50633 * C408) *
                 C10705 +
             (C49747 * C405 + C50904 * C425 + C49740 * C404 + C50633 * C424) *
                 C50854) *
                C16961 +
            ((C25086 + C25087) * C10704 + (C25088 + C25089) * C50933 +
             (C28072 + C28073) * C10705 + (C28074 + C28075) * C50854) *
                C50828) *
               C50693 * C50919 -
           (((C49740 * C1434 + C50633 * C1442 + C49747 * C1435 +
              C50904 * C1443) *
                 C50854 +
             (C49740 * C1430 + C50633 * C1438 + C49747 * C1431 +
              C50904 * C1439) *
                 C10705 +
             (C25093 + C25092) * C50933 + (C25091 + C25090) * C10704) *
                C50828 +
            ((C28075 + C28074) * C50854 + (C28073 + C28072) * C10705 +
             (C25089 + C25088) * C50933 + (C25087 + C25086) * C10704) *
                C16961) *
               C50693 * C50729) *
              C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                  C10704 +
              (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                  C50933 +
              (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                 C16961 +
             ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
              C28540 * C10705 + C28541 * C50854) *
                 C50828) *
                C50920 -
            (((C25908 + C25907) * C50854 + (C25906 + C25905) * C10705 +
              C28542 * C50933 + C28543 * C10704) *
                 C50828 +
             ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
              (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                 C16961) *
                C50757) *
               C50919 +
           (((C28540 * C10704 + C28541 * C50933 + (C25905 + C25906) * C10705 +
              (C25907 + C25908) * C50854) *
                 C16961 +
             ((C25469 + C25468) * C10704 + (C25467 + C25466) * C50933 +
              (C25909 + C25910) * C10705 + (C25911 + C25912) * C50854) *
                 C50828) *
                C50757 -
            ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
              (C24749 + C24748) * C10704) *
                 C50828 +
             (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
              (C24745 + C24744) * C10704) *
                 C16961) *
                C50920) *
               C50729) *
              C251 +
          (((((C27858 + C27859) * C10704 + (C27860 + C27861) * C50933 +
              (C27862 + C27863) * C10705 + (C27864 + C27865) * C50854) *
                 C16961 +
             (C28544 * C10704 + C28545 * C50933 + (C27866 + C27867) * C10705 +
              (C27868 + C27869) * C50854) *
                 C50828) *
                C50757 -
            ((C28546 * C50854 + C28547 * C10705 + (C24759 + C24758) * C50933 +
              (C24757 + C24756) * C10704) *
                 C50828 +
             ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
              (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                  C50933 +
              (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                  C10704) *
                 C16961) *
                C50920) *
               C50919 +
           ((((C24756 + C24757) * C10704 + (C24758 + C24759) * C50933 +
              C28544 * C10705 + C28545 * C50854) *
                 C16961 +
             ((C24760 + C24761) * C10704 + (C24762 + C24763) * C50933 +
              (C25478 + C25479) * C10705 + (C25480 + C25481) * C50854) *
                 C50828) *
                C50920 -
            (((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
               C50904 * C2560) *
                  C50854 +
              (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
               C50904 * C2554) *
                  C10705 +
              (C25481 + C25480) * C50933 + (C25479 + C25478) * C10704) *
                 C50828 +
             ((C27869 + C27868) * C50854 + (C27867 + C27866) * C10705 +
              C28546 * C50933 + C28547 * C10704) *
                 C16961) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C49747 * C397 + C50904 * C411 + C49740 * C396 + C50633 * C410) *
                 C10705 +
             (C49747 * C407 + C50904 * C427 + C49740 * C406 + C50633 * C426) *
                 C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             (C25473 + C25472) * C10705 + (C25471 + C25470) * C50854) *
                C50828) *
               C50693 * C248 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            ((C25470 + C25471) * C50854 + (C25472 + C25473) * C10705 +
             (C24747 + C24746) * C50933 + (C24745 + C24744) * C10704) *
                C16961) *
               C50693 * C249 +
           ((C24768 * C10704 + C24769 * C50933 + (C25469 + C25468) * C10705 +
             (C25467 + C25466) * C50854) *
                C16961 +
            ((C24755 + C24754) * C10704 + (C24753 + C24752) * C50933 +
             (C26411 + C26412) * C10705 + (C26413 + C26414) * C50854) *
                C50828) *
               C50693 * C250) *
              C251 +
          ((((C24756 + C24757) * C10704 + (C24758 + C24759) * C50933 +
             (C25474 + C25475) * C10705 + (C25476 + C25477) * C50854) *
                C16961 +
            ((C24760 + C24761) * C10704 + (C24762 + C24763) * C50933 +
             (C25478 + C25479) * C10705 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C249 -
           (((C25477 + C25476) * C50854 + (C25475 + C25474) * C10705 +
             (C24759 + C24758) * C50933 + (C24757 + C24756) * C10704) *
                C50828 +
            ((C49740 * C405 + C50633 * C425 + C49747 * C406 + C50904 * C426) *
                 C50854 +
             (C49740 * C395 + C50633 * C409 + C49747 * C396 + C50904 * C410) *
                 C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C50693 * C248 -
           (((C49740 * C3079 + C50633 * C3083 + C49747 * C3078 +
              C50904 * C3082) *
                 C50854 +
             (C49740 * C3074 + C50633 * C3080 + C49747 * C3073 +
              C50904 * C3076) *
                 C10705 +
             (C24767 + C24766) * C50933 + (C24765 + C24764) * C10704) *
                C50828 +
            ((C25481 + C25480) * C50854 + (C25479 + C25478) * C10705 +
             C24770 * C50933 + C24771 * C10704) *
                C16961) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C10704 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50933 +
            (C49747 * C397 + C50904 * C411 + C49740 * C396 + C50633 * C410) *
                C10705 +
            (C49747 * C407 + C50904 * C427 + C49740 * C406 + C50633 * C426) *
                C50854) *
               C16961 +
           ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
            (C25473 + C25472) * C10705 + (C25471 + C25470) * C50854) *
               C50828) *
              C50693 * C50677 * C113 -
          (((C25477 + C25476) * C50854 + (C25475 + C25474) * C10705 +
            (C24759 + C24758) * C50933 + (C24757 + C24756) * C10704) *
               C50828 +
           ((C49740 * C405 + C50633 * C425 + C49747 * C406 + C50904 * C426) *
                C50854 +
            (C49740 * C395 + C50633 * C409 + C49747 * C396 + C50904 * C410) *
                C10705 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50933 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C10704) *
               C16961) *
              C50693 * C50677 * C114 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C10704 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50933 +
            (C49747 * C395 + C50904 * C409 + C49740 * C394 + C50633 * C408) *
                C10705 +
            (C49747 * C405 + C50904 * C425 + C49740 * C404 + C50633 * C424) *
                C50854) *
               C16961 +
           ((C25086 + C25087) * C10704 + (C25088 + C25089) * C50933 +
            (C49747 * C777 + C50904 * C782 + C49740 * C778 + C50633 * C783) *
                C10705 +
            (C49747 * C786 + C50904 * C792 + C49740 * C787 + C50633 * C793) *
                C50854) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C49740 * C788 + C50633 * C794 + C49747 * C787 + C50904 * C793) *
                C50854 +
            (C49740 * C779 + C50633 * C789 + C49747 * C778 + C50904 * C783) *
                C10705 +
            (C49740 * C280 + C50633 * C291 + C49747 * C263 + C50904 * C283) *
                C50933 +
            (C49740 * C261 + C50633 * C279 + C49747 * C253 + C50904 * C267) *
                C10704) *
               C50828 +
           ((C49740 * C421 + C50633 * C432 + C49747 * C404 + C50904 * C424) *
                C50854 +
            (C49740 * C402 + C50633 * C420 + C49747 * C394 + C50904 * C408) *
                C10705 +
            (C49740 * C137 + C50633 * C147 + C49747 * C136 + C50904 * C146) *
                C50933 +
            (C49740 * C126 + C50633 * C138 + C49747 * C125 + C50904 * C132) *
                C10704) *
               C16961) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             (C25473 + C25472) * C10705 + (C25471 + C25470) * C50854) *
                C50828) *
               C391 -
           (((C25908 + C25907) * C50854 + (C25906 + C25905) * C10705 +
             (C25470 + C25471) * C50933 + (C25472 + C25473) * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C392 +
           (((C27857 + C27856) * C10704 + (C27855 + C27854) * C50933 +
             (C49747 * C1717 + C50904 * C1725 + C49740 * C1716 +
              C50633 * C1724) *
                 C10705 +
             (C49747 * C1721 + C50904 * C1729 + C49740 * C1720 +
              C50633 * C1728) *
                 C50854) *
                C16961 +
            ((C25905 + C25906) * C10704 + (C25907 + C25908) * C50933 +
             (C49747 * C4483 + C50904 * C4491 + C49740 * C4482 +
              C50633 * C4490) *
                 C10705 +
             (C49747 * C4489 + C50904 * C4495 + C49740 * C4488 +
              C50633 * C4494) *
                 C50854) *
                C50828) *
               C393) *
              C50677 * C251 +
          ((((C27858 + C27859) * C10704 + (C27860 + C27861) * C50933 +
             (C27862 + C27863) * C10705 + (C27864 + C27865) * C50854) *
                C16961 +
            ((C25474 + C25475) * C10704 + (C25476 + C25477) * C50933 +
             (C27866 + C27867) * C10705 + (C27868 + C27869) * C50854) *
                C50828) *
               C392 -
           (((C25477 + C25476) * C50854 + (C25475 + C25474) * C10705 +
             (C24759 + C24758) * C50933 + (C24757 + C24756) * C10704) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C391 -
           (((C49740 * C5977 + C50633 * C5979 + C49747 * C4488 +
              C50904 * C4494) *
                 C50854 +
             (C49740 * C5976 + C50633 * C5978 + C49747 * C4482 +
              C50904 * C4490) *
                 C10705 +
             (C27869 + C27868) * C50933 + (C27867 + C27866) * C10704) *
                C50828 +
            ((C49740 * C1719 + C50633 * C1727 + C49747 * C1720 +
              C50904 * C1728) *
                 C50854 +
             (C49740 * C1715 + C50633 * C1723 + C49747 * C1716 +
              C50904 * C1724) *
                 C10705 +
             (C27865 + C27864) * C50933 + (C27863 + C27862) * C10704) *
                C16961) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             (C25473 + C25472) * C10705 + (C25471 + C25470) * C50854) *
                C50828) *
               C50920 -
           (((C25908 + C25907) * C50854 + (C25906 + C25905) * C10705 +
             (C25470 + C25471) * C50933 + (C25472 + C25473) * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C50757) *
              C50677 * C50962 +
          ((((C27858 + C27859) * C10704 + (C27860 + C27861) * C50933 +
             (C27862 + C27863) * C10705 + (C27864 + C27865) * C50854) *
                C16961 +
            ((C25474 + C25475) * C10704 + (C25476 + C25477) * C50933 +
             (C27866 + C27867) * C10705 + (C27868 + C27869) * C50854) *
                C50828) *
               C50757 -
           (((C25477 + C25476) * C50854 + (C25475 + C25474) * C10705 +
             (C24759 + C24758) * C50933 + (C24757 + C24756) * C10704) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C50920) *
              C50677 * C50963 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C10704 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50933 +
             (C28278 + C28279) * C10705 + (C28280 + C28281) * C50854) *
                C16961 +
            ((C25086 + C25087) * C10704 + (C25088 + C25089) * C50933 +
             (C28072 + C28073) * C10705 + (C28074 + C28075) * C50854) *
                C50828) *
               C50920 -
           (((C49740 * C1087 + C50633 * C1095 + C49747 * C1088 +
              C50904 * C1096) *
                 C50854 +
             (C49740 * C1083 + C50633 * C1091 + C49747 * C1084 +
              C50904 * C1092) *
                 C10705 +
             (C28075 + C28074) * C50933 + (C28073 + C28072) * C10704) *
                C50828 +
            ((C49740 * C419 + C50633 * C431 + C49747 * C418 + C50904 * C430) *
                 C50854 +
             (C49740 * C401 + C50633 * C415 + C49747 * C400 + C50904 * C414) *
                 C10705 +
             (C28281 + C28280) * C50933 + (C28279 + C28278) * C10704) *
                C16961) *
               C50757) *
              C50677 * C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C10704 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50933 +
            (C49747 * C397 + C50904 * C411 + C49740 * C396 + C50633 * C410) *
                C10705 +
            (C49747 * C407 + C50904 * C427 + C49740 * C406 + C50633 * C426) *
                C50854) *
               C16961 +
           ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
            (C25473 + C25472) * C10705 + (C25471 + C25470) * C50854) *
               C50828) *
              C50693 * C50677 * C113 -
          (((C25477 + C25476) * C50854 + (C25475 + C25474) * C10705 +
            (C24759 + C24758) * C50933 + (C24757 + C24756) * C10704) *
               C50828 +
           ((C49740 * C405 + C50633 * C425 + C49747 * C406 + C50904 * C426) *
                C50854 +
            (C49740 * C395 + C50633 * C409 + C49747 * C396 + C50904 * C410) *
                C10705 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50933 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C10704) *
               C16961) *
              C50693 * C50677 * C114 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C10704 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50933 +
            (C49747 * C395 + C50904 * C409 + C49740 * C394 + C50633 * C408) *
                C10705 +
            (C49747 * C405 + C50904 * C425 + C49740 * C404 + C50633 * C424) *
                C50854) *
               C16961 +
           ((C25086 + C25087) * C10704 + (C25088 + C25089) * C50933 +
            (C49747 * C777 + C50904 * C782 + C49740 * C778 + C50633 * C783) *
                C10705 +
            (C49747 * C786 + C50904 * C792 + C49740 * C787 + C50633 * C793) *
                C50854) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C49740 * C788 + C50633 * C794 + C49747 * C787 + C50904 * C793) *
                C50854 +
            (C49740 * C779 + C50633 * C789 + C49747 * C778 + C50904 * C783) *
                C10705 +
            (C49740 * C280 + C50633 * C291 + C49747 * C263 + C50904 * C283) *
                C50933 +
            (C49740 * C261 + C50633 * C279 + C49747 * C253 + C50904 * C267) *
                C10704) *
               C50828 +
           ((C49740 * C421 + C50633 * C432 + C49747 * C404 + C50904 * C424) *
                C50854 +
            (C49740 * C402 + C50633 * C420 + C49747 * C394 + C50904 * C408) *
                C10705 +
            (C49740 * C137 + C50633 * C147 + C49747 * C136 + C50904 * C146) *
                C50933 +
            (C49740 * C126 + C50633 * C138 + C49747 * C125 + C50904 * C132) *
                C10704) *
               C16961) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C49747 * C397 + C50904 * C411 + C49740 * C396 + C50633 * C410) *
                 C10705 +
             (C49747 * C407 + C50904 * C427 + C49740 * C406 + C50633 * C426) *
                 C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             (C25473 + C25472) * C10705 + (C25471 + C25470) * C50854) *
                C50828) *
               C50693 * C248 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            ((C25470 + C25471) * C50854 + (C25472 + C25473) * C10705 +
             (C24747 + C24746) * C50933 + (C24745 + C24744) * C10704) *
                C16961) *
               C50693 * C249 +
           ((C24768 * C10704 + C24769 * C50933 + (C25469 + C25468) * C10705 +
             (C25467 + C25466) * C50854) *
                C16961 +
            ((C24755 + C24754) * C10704 + (C24753 + C24752) * C50933 +
             (C26411 + C26412) * C10705 + (C26413 + C26414) * C50854) *
                C50828) *
               C50693 * C250) *
              C251 +
          ((((C24756 + C24757) * C10704 + (C24758 + C24759) * C50933 +
             (C25474 + C25475) * C10705 + (C25476 + C25477) * C50854) *
                C16961 +
            ((C24760 + C24761) * C10704 + (C24762 + C24763) * C50933 +
             (C25478 + C25479) * C10705 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C249 -
           (((C25477 + C25476) * C50854 + (C25475 + C25474) * C10705 +
             (C24759 + C24758) * C50933 + (C24757 + C24756) * C10704) *
                C50828 +
            ((C49740 * C405 + C50633 * C425 + C49747 * C406 + C50904 * C426) *
                 C50854 +
             (C49740 * C395 + C50633 * C409 + C49747 * C396 + C50904 * C410) *
                 C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C50693 * C248 -
           (((C49740 * C3079 + C50633 * C3083 + C49747 * C3078 +
              C50904 * C3082) *
                 C50854 +
             (C49740 * C3074 + C50633 * C3080 + C49747 * C3073 +
              C50904 * C3076) *
                 C10705 +
             (C24767 + C24766) * C50933 + (C24765 + C24764) * C10704) *
                C50828 +
            ((C25481 + C25480) * C50854 + (C25479 + C25478) * C10705 +
             C24770 * C50933 + C24771 * C10704) *
                C16961) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C50693 * C50964 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
             (C24745 + C24744) * C10704) *
                C16961) *
               C50693 * C50965 +
           ((C24768 * C10704 + C24769 * C50933 + (C25469 + C25468) * C10705 +
             (C25467 + C25466) * C50854) *
                C16961 +
            ((C24755 + C24754) * C10704 + (C24753 + C24752) * C50933 +
             (C26411 + C26412) * C10705 + (C26413 + C26414) * C50854) *
                C50828) *
               C50693 * C1199) *
              C50911 +
          ((((C24756 + C24757) * C10704 + (C24758 + C24759) * C50933 +
             C28544 * C10705 + C28545 * C50854) *
                C16961 +
            ((C24760 + C24761) * C10704 + (C24762 + C24763) * C50933 +
             (C25478 + C25479) * C10705 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C50965 -
           ((C28546 * C50854 + C28547 * C10705 + (C24759 + C24758) * C50933 +
             (C24757 + C24756) * C10704) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C50693 * C50964 -
           (((C49740 * C3079 + C50633 * C3083 + C49747 * C3078 +
              C50904 * C3082) *
                 C50854 +
             (C49740 * C3074 + C50633 * C3080 + C49747 * C3073 +
              C50904 * C3076) *
                 C10705 +
             (C24767 + C24766) * C50933 + (C24765 + C24764) * C10704) *
                C50828 +
            ((C25481 + C25480) * C50854 + (C25479 + C25478) * C10705 +
             C24770 * C50933 + C24771 * C10704) *
                C16961) *
               C50693 * C1199) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C50920 -
           ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
             C28543 * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C50757) *
              C50964 +
          (((C28540 * C10704 + C28541 * C50933 + C29068 * C10705 +
             C29069 * C50854) *
                C16961 +
            (C29728 * C10704 + C29729 * C50933 + (C25909 + C25910) * C10705 +
             (C25911 + C25912) * C50854) *
                C50828) *
               C50757 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
             (C24745 + C24744) * C10704) *
                C16961) *
               C50920) *
              C50965 +
          (((C24768 * C10704 + C24769 * C50933 + C29728 * C10705 +
             C29729 * C50854) *
                C16961 +
            ((C24755 + C24754) * C10704 + (C24753 + C24752) * C50933 +
             (C26411 + C26412) * C10705 + (C26413 + C26414) * C50854) *
                C50828) *
               C50920 -
           (((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 +
              C50904 * C3554) *
                 C50854 +
             (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 +
              C50904 * C3552) *
                 C10705 +
             (C26414 + C26413) * C50933 + (C26412 + C26411) * C10704) *
                C50828 +
            ((C25912 + C25911) * C50854 + (C25910 + C25909) * C10705 +
             C26399 * C50933 + C26400 * C10704) *
                C16961) *
               C50757) *
              C1199) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C10704 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50933 +
            (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
               C16961 +
           ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
            C28540 * C10705 + C28541 * C50854) *
               C50828) *
              C50693 * C964 -
          ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
            (C24749 + C24748) * C10704) *
               C50828 +
           (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
            (C24745 + C24744) * C10704) *
               C16961) *
              C50693 * C965 +
          ((C24768 * C10704 + C24769 * C50933 + (C25469 + C25468) * C10705 +
            (C25467 + C25466) * C50854) *
               C16961 +
           ((C24755 + C24754) * C10704 + (C24753 + C24752) * C50933 +
            (C26411 + C26412) * C10705 + (C26413 + C26414) * C50854) *
               C50828) *
              C50693 * C966 -
          (((C49740 * C4067 + C50633 * C4071 + C49747 * C4068 +
             C50904 * C4072) *
                C50854 +
            (C49740 * C4065 + C50633 * C4069 + C49747 * C4066 +
             C50904 * C4070) *
                C10705 +
            (C25741 + C25740) * C50933 + (C25739 + C25738) * C10704) *
               C50828 +
           ((C26414 + C26413) * C50854 + (C26412 + C26411) * C10705 +
            C25726 * C50933 + C25727 * C10704) *
               C16961) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C50693 * C893 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
             (C24745 + C24744) * C10704) *
                C16961) *
               C50693 * C50729) *
              C895 +
          ((((C24756 + C24757) * C10704 + (C24758 + C24759) * C50933 +
             C28544 * C10705 + C28545 * C50854) *
                C16961 +
            ((C24760 + C24761) * C10704 + (C24762 + C24763) * C50933 +
             (C25478 + C25479) * C10705 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C50729 -
           ((C28546 * C50854 + C28547 * C10705 + (C24759 + C24758) * C50933 +
             (C24757 + C24756) * C10704) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C50693 * C893) *
              C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C10704 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50933 +
             (C28278 + C28279) * C10705 + (C28280 + C28281) * C50854) *
                C16961 +
            ((C25086 + C25087) * C10704 + (C25088 + C25089) * C50933 +
             (C28072 + C28073) * C10705 + (C28074 + C28075) * C50854) *
                C50828) *
               C50693 * C893 -
           (((C49740 * C1434 + C50633 * C1442 + C49747 * C1435 +
              C50904 * C1443) *
                 C50854 +
             (C49740 * C1430 + C50633 * C1438 + C49747 * C1431 +
              C50904 * C1439) *
                 C10705 +
             (C25093 + C25092) * C50933 + (C25091 + C25090) * C10704) *
                C50828 +
            ((C28075 + C28074) * C50854 + (C28073 + C28072) * C10705 +
             (C25089 + C25088) * C50933 + (C25087 + C25086) * C10704) *
                C16961) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C391 -
           ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
             C28543 * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C392 +
           (((C27857 + C27856) * C10704 + (C27855 + C27854) * C50933 +
             (C49747 * C1717 + C50904 * C1725 + C49740 * C1716 +
              C50633 * C1724) *
                 C10705 +
             (C49747 * C1721 + C50904 * C1729 + C49740 * C1720 +
              C50633 * C1728) *
                 C50854) *
                C16961 +
            (C29068 * C10704 + C29069 * C50933 + (C29078 + C29079) * C10705 +
             (C29080 + C29081) * C50854) *
                C50828) *
               C393) *
              C893 +
          (((C28540 * C10704 + C28541 * C50933 + C29068 * C10705 +
             C29069 * C50854) *
                C16961 +
            ((C25469 + C25468) * C10704 + (C25467 + C25466) * C50933 +
             (C25909 + C25910) * C10705 + (C25911 + C25912) * C50854) *
                C50828) *
               C392 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
             (C24745 + C24744) * C10704) *
                C16961) *
               C391 -
           (((C49740 * C4484 + C50633 * C4492 + C49747 * C4485 +
              C50904 * C4493) *
                 C50854 +
             (C49740 * C4480 + C50633 * C4486 + C49747 * C4481 +
              C50904 * C4487) *
                 C10705 +
             (C25912 + C25911) * C50933 + (C25910 + C25909) * C10704) *
                C50828 +
            ((C29081 + C29080) * C50854 + (C29079 + C29078) * C10705 +
             C29066 * C50933 + C29067 * C10704) *
                C16961) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                  C10704 +
              (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                  C50933 +
              (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                 C16961 +
             ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
              C28540 * C10705 + C28541 * C50854) *
                 C50828) *
                C50920 -
            ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
              C28543 * C10704) *
                 C50828 +
             ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
              (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                 C16961) *
                C50757) *
               C893 +
           (((C28540 * C10704 + C28541 * C50933 + C29068 * C10705 +
              C29069 * C50854) *
                 C16961 +
             ((C25469 + C25468) * C10704 + (C25467 + C25466) * C50933 +
              (C25909 + C25910) * C10705 + (C25911 + C25912) * C50854) *
                 C50828) *
                C50757 -
            ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
              (C24749 + C24748) * C10704) *
                 C50828 +
             (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
              (C24745 + C24744) * C10704) *
                 C16961) *
                C50920) *
               C50729) *
              C50911 +
          (((((C27858 + C27859) * C10704 + (C27860 + C27861) * C50933 +
              (C27862 + C27863) * C10705 + (C27864 + C27865) * C50854) *
                 C16961 +
             (C28544 * C10704 + C28545 * C50933 + (C27866 + C27867) * C10705 +
              (C27868 + C27869) * C50854) *
                 C50828) *
                C50757 -
            ((C28546 * C50854 + C28547 * C10705 + (C24759 + C24758) * C50933 +
              (C24757 + C24756) * C10704) *
                 C50828 +
             ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
              (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                  C50933 +
              (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                  C10704) *
                 C16961) *
                C50920) *
               C893 +
           ((((C24756 + C24757) * C10704 + (C24758 + C24759) * C50933 +
              C28544 * C10705 + C28545 * C50854) *
                 C16961 +
             ((C24760 + C24761) * C10704 + (C24762 + C24763) * C50933 +
              (C25478 + C25479) * C10705 + (C25480 + C25481) * C50854) *
                 C50828) *
                C50920 -
            (((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
               C50904 * C2560) *
                  C50854 +
              (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
               C50904 * C2554) *
                  C10705 +
              (C25481 + C25480) * C50933 + (C25479 + C25478) * C10704) *
                 C50828 +
             ((C27869 + C27868) * C50854 + (C27867 + C27866) * C10705 +
              C28546 * C50933 + C28547 * C10704) *
                 C16961) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C50693 * C893 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
             (C24745 + C24744) * C10704) *
                C16961) *
               C50693 * C50729) *
              C895 +
          ((((C24756 + C24757) * C10704 + (C24758 + C24759) * C50933 +
             C28544 * C10705 + C28545 * C50854) *
                C16961 +
            ((C24760 + C24761) * C10704 + (C24762 + C24763) * C50933 +
             (C25478 + C25479) * C10705 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C50729 -
           ((C28546 * C50854 + C28547 * C10705 + (C24759 + C24758) * C50933 +
             (C24757 + C24756) * C10704) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C50693 * C893) *
              C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C10704 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50933 +
             (C28278 + C28279) * C10705 + (C28280 + C28281) * C50854) *
                C16961 +
            ((C25086 + C25087) * C10704 + (C25088 + C25089) * C50933 +
             (C28072 + C28073) * C10705 + (C28074 + C28075) * C50854) *
                C50828) *
               C50693 * C893 -
           (((C49740 * C1434 + C50633 * C1442 + C49747 * C1435 +
              C50904 * C1443) *
                 C50854 +
             (C49740 * C1430 + C50633 * C1438 + C49747 * C1431 +
              C50904 * C1439) *
                 C10705 +
             (C25093 + C25092) * C50933 + (C25091 + C25090) * C10704) *
                C50828 +
            ((C28075 + C28074) * C50854 + (C28073 + C28072) * C10705 +
             (C25089 + C25088) * C50933 + (C25087 + C25086) * C10704) *
                C16961) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C10704 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50933 +
            (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
               C16961 +
           ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
            C28540 * C10705 + C28541 * C50854) *
               C50828) *
              C50693 * C964 -
          ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
            (C24749 + C24748) * C10704) *
               C50828 +
           (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
            (C24745 + C24744) * C10704) *
               C16961) *
              C50693 * C965 +
          ((C24768 * C10704 + C24769 * C50933 + (C25469 + C25468) * C10705 +
            (C25467 + C25466) * C50854) *
               C16961 +
           ((C24755 + C24754) * C10704 + (C24753 + C24752) * C50933 +
            (C26411 + C26412) * C10705 + (C26413 + C26414) * C50854) *
               C50828) *
              C50693 * C966 -
          (((C49740 * C4067 + C50633 * C4071 + C49747 * C4068 +
             C50904 * C4072) *
                C50854 +
            (C49740 * C4065 + C50633 * C4069 + C49747 * C4066 +
             C50904 * C4070) *
                C10705 +
            (C25741 + C25740) * C50933 + (C25739 + C25738) * C10704) *
               C50828 +
           ((C26414 + C26413) * C50854 + (C26412 + C26411) * C10705 +
            C25726 * C50933 + C25727 * C10704) *
               C16961) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                  C10704 +
              (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                  C50933 +
              (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                 C16961 +
             ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
              C28540 * C10705 + C28541 * C50854) *
                 C50828) *
                C1544 -
            ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
              C28543 * C10704) *
                 C50828 +
             ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
              (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                 C16961) *
                C50757) *
               C50919 +
           (((C28540 * C10704 + C28541 * C50933 + C29068 * C10705 +
              C29069 * C50854) *
                 C16961 +
             (C29728 * C10704 + C29729 * C50933 + (C25909 + C25910) * C10705 +
              (C25911 + C25912) * C50854) *
                 C50828) *
                C50757 -
            ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
              (C24749 + C24748) * C10704) *
                 C50828 +
             (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
              (C24745 + C24744) * C10704) *
                 C16961) *
                C1544) *
               C50729) *
              C50911 +
          (((((C27858 + C27859) * C10704 + (C27860 + C27861) * C50933 +
              (C27862 + C27863) * C10705 + (C27864 + C27865) * C50854) *
                 C16961 +
             (C28544 * C10704 + C28545 * C50933 + (C27866 + C27867) * C10705 +
              (C27868 + C27869) * C50854) *
                 C50828) *
                C50757 -
            ((C28546 * C50854 + C28547 * C10705 + (C24759 + C24758) * C50933 +
              (C24757 + C24756) * C10704) *
                 C50828 +
             ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
              (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                  C50933 +
              (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                  C10704) *
                 C16961) *
                C1544) *
               C50919 +
           ((((C24756 + C24757) * C10704 + (C24758 + C24759) * C50933 +
              C28544 * C10705 + C28545 * C50854) *
                 C16961 +
             ((C24760 + C24761) * C10704 + (C24762 + C24763) * C50933 +
              (C25478 + C25479) * C10705 + (C25480 + C25481) * C50854) *
                 C50828) *
                C1544 -
            (((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
               C50904 * C2560) *
                  C50854 +
              (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
               C50904 * C2554) *
                  C10705 +
              (C25481 + C25480) * C50933 + (C25479 + C25478) * C10704) *
                 C50828 +
             ((C27869 + C27868) * C50854 + (C27867 + C27866) * C10705 +
              C28546 * C50933 + C28547 * C10704) *
                 C16961) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C50966 -
           ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
             C28543 * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C50967 +
           (((C27857 + C27856) * C10704 + (C27855 + C27854) * C50933 +
             (C30256 + C30257) * C10705 + (C30258 + C30259) * C50854) *
                C16961 +
            (C29068 * C10704 + C29069 * C50933 + (C29078 + C29079) * C10705 +
             (C29080 + C29081) * C50854) *
                C50828) *
               C1960) *
              C50919 +
          (((C28540 * C10704 + C28541 * C50933 + C29068 * C10705 +
             C29069 * C50854) *
                C16961 +
            (C29728 * C10704 + C29729 * C50933 + (C25909 + C25910) * C10705 +
             (C25911 + C25912) * C50854) *
                C50828) *
               C50967 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
             (C24745 + C24744) * C10704) *
                C16961) *
               C50966 -
           (((C49740 * C4484 + C50633 * C4492 + C49747 * C4485 +
              C50904 * C4493) *
                 C50854 +
             (C49740 * C4480 + C50633 * C4486 + C49747 * C4481 +
              C50904 * C4487) *
                 C10705 +
             (C25912 + C25911) * C50933 + (C25910 + C25909) * C10704) *
                C50828 +
            ((C29081 + C29080) * C50854 + (C29079 + C29078) * C10705 +
             C29066 * C50933 + C29067 * C10704) *
                C16961) *
               C1960) *
              C50729) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C1544 -
           ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
             C28543 * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C50757) *
              C248 +
          (((C28540 * C10704 + C28541 * C50933 + C29068 * C10705 +
             C29069 * C50854) *
                C16961 +
            (C29728 * C10704 + C29729 * C50933 + (C25909 + C25910) * C10705 +
             (C25911 + C25912) * C50854) *
                C50828) *
               C50757 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
             (C24745 + C24744) * C10704) *
                C16961) *
               C1544) *
              C249 +
          (((C24768 * C10704 + C24769 * C50933 + C29728 * C10705 +
             C29729 * C50854) *
                C16961 +
            ((C24755 + C24754) * C10704 + (C24753 + C24752) * C50933 +
             (C26411 + C26412) * C10705 + (C26413 + C26414) * C50854) *
                C50828) *
               C1544 -
           (((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 +
              C50904 * C3554) *
                 C50854 +
             (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 +
              C50904 * C3552) *
                 C10705 +
             (C26414 + C26413) * C50933 + (C26412 + C26411) * C10704) *
                C50828 +
            ((C25912 + C25911) * C50854 + (C25910 + C25909) * C10705 +
             C26399 * C50933 + C26400 * C10704) *
                C16961) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C1544 -
           ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
             C28543 * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C50757) *
              C50677 * C895 +
          ((((C27858 + C27859) * C10704 + (C27860 + C27861) * C50933 +
             (C27862 + C27863) * C10705 + (C27864 + C27865) * C50854) *
                C16961 +
            (C28544 * C10704 + C28545 * C50933 + (C27866 + C27867) * C10705 +
             (C27868 + C27869) * C50854) *
                C50828) *
               C50757 -
           ((C28546 * C50854 + C28547 * C10705 + (C24759 + C24758) * C50933 +
             (C24757 + C24756) * C10704) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C1544) *
              C50677 * C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C10704 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50933 +
             (C28278 + C28279) * C10705 + (C28280 + C28281) * C50854) *
                C16961 +
            ((C25086 + C25087) * C10704 + (C25088 + C25089) * C50933 +
             (C28072 + C28073) * C10705 + (C28074 + C28075) * C50854) *
                C50828) *
               C1544 -
           (((C49740 * C1087 + C50633 * C1095 + C49747 * C1088 +
              C50904 * C1096) *
                 C50854 +
             (C49740 * C1083 + C50633 * C1091 + C49747 * C1084 +
              C50904 * C1092) *
                 C10705 +
             (C28075 + C28074) * C50933 + (C28073 + C28072) * C10704) *
                C50828 +
            ((C49740 * C419 + C50633 * C431 + C49747 * C418 + C50904 * C430) *
                 C50854 +
             (C49740 * C401 + C50633 * C415 + C49747 * C400 + C50904 * C414) *
                 C10705 +
             (C28281 + C28280) * C50933 + (C28279 + C28278) * C10704) *
                C16961) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C10704 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50933 +
            (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
               C16961 +
           ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
            C28540 * C10705 + C28541 * C50854) *
               C50828) *
              C1710 -
          ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
            C28543 * C10704) *
               C50828 +
           ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
            (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
               C16961) *
              C1711 +
          (((C27857 + C27856) * C10704 + (C27855 + C27854) * C50933 +
            (C30256 + C30257) * C10705 + (C30258 + C30259) * C50854) *
               C16961 +
           (C29068 * C10704 + C29069 * C50933 + (C29078 + C29079) * C10705 +
            (C29080 + C29081) * C50854) *
               C50828) *
              C1712 -
          (((C49740 * C6384 + C50633 * C6388 + C49747 * C6385 +
             C50904 * C6389) *
                C50854 +
            (C49740 * C6382 + C50633 * C6386 + C49747 * C6383 +
             C50904 * C6387) *
                C10705 +
            (C29081 + C29080) * C50933 + (C29079 + C29078) * C10704) *
               C50828 +
           ((C49740 * C5384 + C50633 * C5388 + C49747 * C5383 +
             C50904 * C5387) *
                C50854 +
            (C49740 * C5379 + C50633 * C5382 + C49747 * C5378 +
             C50904 * C5381) *
                C10705 +
            (C30259 + C30258) * C50933 + (C30257 + C30256) * C10704) *
               C16961) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C50966 -
           ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
             C28543 * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C50967 +
           (((C27857 + C27856) * C10704 + (C27855 + C27854) * C50933 +
             (C30256 + C30257) * C10705 + (C30258 + C30259) * C50854) *
                C16961 +
            (C29068 * C10704 + C29069 * C50933 + (C29078 + C29079) * C10705 +
             (C29080 + C29081) * C50854) *
                C50828) *
               C1960) *
              C50677 * C50911 +
          ((((C27858 + C27859) * C10704 + (C27860 + C27861) * C50933 +
             (C27862 + C27863) * C10705 + (C27864 + C27865) * C50854) *
                C16961 +
            (C28544 * C10704 + C28545 * C50933 + (C27866 + C27867) * C10705 +
             (C27868 + C27869) * C50854) *
                C50828) *
               C50967 -
           ((C28546 * C50854 + C28547 * C10705 + (C24759 + C24758) * C50933 +
             (C24757 + C24756) * C10704) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C50966 -
           (((C49740 * C5977 + C50633 * C5979 + C49747 * C4488 +
              C50904 * C4494) *
                 C50854 +
             (C49740 * C5976 + C50633 * C5978 + C49747 * C4482 +
              C50904 * C4490) *
                 C10705 +
             (C27869 + C27868) * C50933 + (C27867 + C27866) * C10704) *
                C50828 +
            ((C49740 * C1719 + C50633 * C1727 + C49747 * C1720 +
              C50904 * C1728) *
                 C50854 +
             (C49740 * C1715 + C50633 * C1723 + C49747 * C1716 +
              C50904 * C1724) *
                 C10705 +
             (C27865 + C27864) * C50933 + (C27863 + C27862) * C10704) *
                C16961) *
               C1960) *
              C50677 * C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C1544 -
           ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
             C28543 * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C50757) *
              C50677 * C895 +
          ((((C27858 + C27859) * C10704 + (C27860 + C27861) * C50933 +
             (C27862 + C27863) * C10705 + (C27864 + C27865) * C50854) *
                C16961 +
            (C28544 * C10704 + C28545 * C50933 + (C27866 + C27867) * C10705 +
             (C27868 + C27869) * C50854) *
                C50828) *
               C50757 -
           ((C28546 * C50854 + C28547 * C10705 + (C24759 + C24758) * C50933 +
             (C24757 + C24756) * C10704) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C10705 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50933 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C10704) *
                C16961) *
               C1544) *
              C50677 * C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C10704 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C50933 +
             (C28278 + C28279) * C10705 + (C28280 + C28281) * C50854) *
                C16961 +
            ((C25086 + C25087) * C10704 + (C25088 + C25089) * C50933 +
             (C28072 + C28073) * C10705 + (C28074 + C28075) * C50854) *
                C50828) *
               C1544 -
           (((C49740 * C1087 + C50633 * C1095 + C49747 * C1088 +
              C50904 * C1096) *
                 C50854 +
             (C49740 * C1083 + C50633 * C1091 + C49747 * C1084 +
              C50904 * C1092) *
                 C10705 +
             (C28075 + C28074) * C50933 + (C28073 + C28072) * C10704) *
                C50828 +
            ((C49740 * C419 + C50633 * C431 + C49747 * C418 + C50904 * C430) *
                 C50854 +
             (C49740 * C401 + C50633 * C415 + C49747 * C400 + C50904 * C414) *
                 C10705 +
             (C28281 + C28280) * C50933 + (C28279 + C28278) * C10704) *
                C16961) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C10704 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50933 +
             (C27850 + C27851) * C10705 + (C27852 + C27853) * C50854) *
                C16961 +
            ((C24744 + C24745) * C10704 + (C24746 + C24747) * C50933 +
             C28540 * C10705 + C28541 * C50854) *
                C50828) *
               C1544 -
           ((C29066 * C50854 + C29067 * C10705 + C28542 * C50933 +
             C28543 * C10704) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C10705 +
             (C27853 + C27852) * C50933 + (C27851 + C27850) * C10704) *
                C16961) *
               C50757) *
              C248 +
          (((C28540 * C10704 + C28541 * C50933 + C29068 * C10705 +
             C29069 * C50854) *
                C16961 +
            (C29728 * C10704 + C29729 * C50933 + (C25909 + C25910) * C10705 +
             (C25911 + C25912) * C50854) *
                C50828) *
               C50757 -
           ((C26399 * C50854 + C26400 * C10705 + (C24751 + C24750) * C50933 +
             (C24749 + C24748) * C10704) *
                C50828 +
            (C28542 * C50854 + C28543 * C10705 + (C24747 + C24746) * C50933 +
             (C24745 + C24744) * C10704) *
                C16961) *
               C1544) *
              C249 +
          (((C24768 * C10704 + C24769 * C50933 + C29728 * C10705 +
             C29729 * C50854) *
                C16961 +
            ((C24755 + C24754) * C10704 + (C24753 + C24752) * C50933 +
             (C26411 + C26412) * C10705 + (C26413 + C26414) * C50854) *
                C50828) *
               C1544 -
           (((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 +
              C50904 * C3554) *
                 C50854 +
             (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 +
              C50904 * C3552) *
                 C10705 +
             (C26414 + C26413) * C50933 + (C26412 + C26411) * C10704) *
                C50828 +
            ((C25912 + C25911) * C50854 + (C25910 + C25909) * C10705 +
             C26399 * C50933 + C26400 * C10704) *
                C16961) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C50919 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C50729) *
              C50962 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C50729 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C50919) *
              C50963 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C50693 * C50919 -
           (((C16965 * C281 + C16960 * C292 + C16964 * C278 + C16959 * C290 +
              C16963 * C277 + C16958 * C289) *
                 C50790 +
             (C16965 * C262 + C16960 * C282 + C16964 * C260 + C16959 * C274 +
              C16963 * C259 + C16958 * C273) *
                 C121) *
                C50828 +
            ((C17494 + C17493 + C17492) * C50790 +
             (C17491 + C17490 + C17489) * C121) *
                C16961) *
               C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C50919 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C50729) *
              C50962 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C50729 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C50919) *
              C50963 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C50693 * C50919 -
           (((C19747 * C2317 + C50628 * C2321) * C50790 +
             (C19747 * C2312 + C50628 * C2318) * C121) *
                C19746 +
            (C20134 + C20133) * C19745 + (C20132 + C20131) * C19744 +
            (C20130 + C20129) * C19743) *
               C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
               C16965 * C124 + C16960 * C131) *
                  C121 +
              (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
               C16965 * C135 + C16960 * C145) *
                  C50790) *
                 C16961 +
             ((C17161 + C17162 + C17163) * C121 +
              (C17164 + C17165 + C17166) * C50790) *
                 C50828) *
                C50920 -
            (((C17859 + C17860 + C17861) * C50790 +
              (C17862 + C17863 + C17864) * C121) *
                 C50828 +
             ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
               C16963 * C407 + C16958 * C427) *
                  C50790 +
              (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
               C16963 * C397 + C16958 * C411) *
                  C121) *
                 C16961) *
                C50757) *
               C50919 +
           ((((C17864 + C17863 + C17862) * C121 +
              (C17861 + C17860 + C17859) * C50790) *
                 C16961 +
             ((C16963 * C1433 + C16958 * C1441 + C16964 * C1432 +
               C16959 * C1440 + C16965 * C1431 + C16960 * C1439) *
                  C121 +
              (C16963 * C1437 + C16958 * C1445 + C16964 * C1436 +
               C16959 * C1444 + C16965 * C1435 + C16960 * C1443) *
                  C50790) *
                 C50828) *
                C50757 -
            (((C17167 + C17168 + C17169) * C50790 +
              (C17170 + C17171 + C17172) * C121) *
                 C50828 +
             ((C17166 + C17165 + C17164) * C50790 +
              (C17163 + C17162 + C17161) * C121) *
                 C16961) *
                C50920) *
               C50729) *
              C251 +
          (((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
               C16965 * C394 + C16960 * C408) *
                  C121 +
              (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
               C16965 * C404 + C16960 * C424) *
                  C50790) *
                 C16961 +
             ((C17865 + C17866 + C17867) * C121 +
              (C17868 + C17869 + C17870) * C50790) *
                 C50828) *
                C50757 -
            (((C17178 + C17177 + C17176) * C50790 +
              (C17175 + C17174 + C17173) * C121) *
                 C50828 +
             ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
               C16963 * C134 + C16958 * C144) *
                  C50790 +
              (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
               C16963 * C123 + C16958 * C130) *
                  C121) *
                 C16961) *
                C50920) *
               C50919 +
           ((((C17173 + C17174 + C17175) * C121 +
              (C17176 + C17177 + C17178) * C50790) *
                 C16961 +
             ((C17179 + C17180 + C17181) * C121 +
              (C17182 + C17183 + C17184) * C50790) *
                 C50828) *
                C50920 -
            (((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 +
               C16959 * C1443 + C16963 * C1436 + C16958 * C1444) *
                  C50790 +
              (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 +
               C16959 * C1439 + C16963 * C1432 + C16958 * C1440) *
                  C121) *
                 C50828 +
             ((C17870 + C17869 + C17868) * C50790 +
              (C17867 + C17866 + C17865) * C121) *
                 C16961) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C121 +
              (C19747 * C133 + C50628 * C143) * C50790) *
                 C19743 +
             (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
                C50920 -
            ((C20399 + C20400) * C19746 + (C20401 + C20402) * C19745 +
             (C20403 + C20404) * C19744 +
             ((C19747 * C407 + C50628 * C427) * C50790 +
              (C19747 * C397 + C50628 * C411) * C121) *
                 C19743) *
                C50757) *
               C50919 +
           (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
             (C20400 + C20399) * C19745 +
             ((C19747 * C4066 + C50628 * C4070) * C121 +
              (C19747 * C4068 + C50628 * C4072) * C50790) *
                 C19746) *
                C50757 -
            ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
             (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
                C50920) *
               C50729) *
              C251 +
          (((((C19747 * C396 + C50628 * C410) * C121 +
              (C19747 * C406 + C50628 * C426) * C50790) *
                 C19743 +
             (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
             (C20409 + C20410) * C19746) *
                C50757 -
            (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
             ((C19747 * C134 + C50628 * C144) * C50790 +
              (C19747 * C123 + C50628 * C130) * C121) *
                 C19743) *
                C50920) *
               C50919 +
           (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
             (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
                C50920 -
            (((C19747 * C4067 + C50628 * C4071) * C50790 +
              (C19747 * C4065 + C50628 * C4069) * C121) *
                 C19746 +
             (C20410 + C20409) * C19745 + (C20408 + C20407) * C19744 +
             (C20406 + C20405) * C19743) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C248 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C249 +
           (((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C16963 * C972 + C16958 * C980 + C16964 * C971 + C16959 * C979 +
              C16965 * C970 + C16960 * C978) *
                 C121 +
             (C16963 * C976 + C16958 * C984 + C16964 * C975 + C16959 * C983 +
              C16965 * C974 + C16960 * C982) *
                 C50790) *
                C50828) *
               C50693 * C250) *
              C251 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C249 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C248 -
           (((C16965 * C973 + C16960 * C981 + C16964 * C974 + C16959 * C982 +
              C16963 * C975 + C16958 * C983) *
                 C50790 +
             (C16965 * C969 + C16960 * C977 + C16964 * C970 + C16959 * C978 +
              C16963 * C971 + C16958 * C979) *
                 C121) *
                C50828 +
            ((C17184 + C17183 + C17182) * C50790 +
             (C17181 + C17180 + C17179) * C121) *
                C16961) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C121 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C50790) *
               C16961 +
           ((C16963 * C256 + C16958 * C270 + C16964 * C255 + C16959 * C269 +
             C16965 * C254 + C16960 * C268) *
                C121 +
            (C16963 * C266 + C16958 * C286 + C16964 * C265 + C16959 * C285 +
             C16965 * C264 + C16960 * C284) *
                C50790) *
               C50828) *
              C50693 * C50677 * C113 -
          (((C16965 * C263 + C16960 * C283 + C16964 * C264 + C16959 * C284 +
             C16963 * C265 + C16958 * C285) *
                C50790 +
            (C16965 * C253 + C16960 * C267 + C16964 * C254 + C16959 * C268 +
             C16963 * C255 + C16958 * C269) *
                C121) *
               C50828 +
           ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C50790 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C121) *
               C16961) *
              C50693 * C50677 * C114 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C121 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C50790) *
               C16961 +
           ((C16963 * C254 + C16958 * C268 + C16964 * C253 + C16959 * C267 +
             C16965 * C261 + C16960 * C279) *
                C121 +
            (C16963 * C264 + C16958 * C284 + C16964 * C263 + C16959 * C283 +
             C16965 * C280 + C16960 * C291) *
                C50790) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C16965 * C538 + C16960 * C540 + C16964 * C280 + C16959 * C291 +
             C16963 * C263 + C16958 * C283) *
                C50790 +
            (C16965 * C537 + C16960 * C539 + C16964 * C261 + C16959 * C279 +
             C16963 * C253 + C16958 * C267) *
                C121) *
               C50828 +
           ((C16965 * C140 + C16960 * C148 + C16964 * C137 + C16959 * C147 +
             C16963 * C136 + C16958 * C146) *
                C50790 +
            (C16965 * C127 + C16960 * C139 + C16964 * C126 + C16959 * C138 +
             C16963 * C125 + C16958 * C132) *
                C121) *
               C16961) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C391 -
           (((C16965 * C786 + C16960 * C792 + C16964 * C785 + C16959 * C791 +
              C16963 * C784 + C16958 * C790) *
                 C50790 +
             (C16965 * C777 + C16960 * C782 + C16964 * C776 + C16959 * C781 +
              C16963 * C775 + C16958 * C780) *
                 C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C392 +
           (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
              C16965 * C400 + C16960 * C414) *
                 C121 +
             (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
              C16965 * C418 + C16960 * C430) *
                 C50790) *
                C16961 +
            ((C16963 * C1086 + C16958 * C1094 + C16964 * C1085 +
              C16959 * C1093 + C16965 * C1084 + C16960 * C1092) *
                 C121 +
             (C16963 * C1090 + C16958 * C1098 + C16964 * C1089 +
              C16959 * C1097 + C16965 * C1088 + C16960 * C1096) *
                 C50790) *
                C50828) *
               C393) *
              C50677 * C251 +
          ((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
              C16965 * C394 + C16960 * C408) *
                 C121 +
             (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
              C16965 * C404 + C16960 * C424) *
                 C50790) *
                C16961 +
            ((C16963 * C776 + C16958 * C781 + C16964 * C777 + C16959 * C782 +
              C16965 * C778 + C16960 * C783) *
                 C121 +
             (C16963 * C785 + C16958 * C791 + C16964 * C786 + C16959 * C792 +
              C16965 * C787 + C16960 * C793) *
                 C50790) *
                C50828) *
               C392 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C391 -
           (((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50790 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C121) *
                C50828 +
            ((C16965 * C419 + C16960 * C431 + C16964 * C418 + C16959 * C430 +
              C16963 * C417 + C16958 * C429) *
                 C50790 +
             (C16965 * C401 + C16960 * C415 + C16964 * C400 + C16959 * C414 +
              C16963 * C399 + C16958 * C413) *
                 C121) *
                C16961) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           ((C19747 * C256 + C50628 * C270) * C121 +
            (C19747 * C266 + C50628 * C286) * C50790) *
               C19744 +
           ((C19747 * C257 + C50628 * C271) * C121 +
            (C19747 * C275 + C50628 * C287) * C50790) *
               C19745 +
           ((C19747 * C972 + C50628 * C980) * C121 +
            (C19747 * C976 + C50628 * C984) * C50790) *
               C19746) *
              C50693 * C50677 * C113 -
          (((C19747 * C975 + C50628 * C983) * C50790 +
            (C19747 * C971 + C50628 * C979) * C121) *
               C19746 +
           ((C19747 * C276 + C50628 * C288) * C50790 +
            (C19747 * C258 + C50628 * C272) * C121) *
               C19745 +
           ((C19747 * C265 + C50628 * C285) * C50790 +
            (C19747 * C255 + C50628 * C269) * C121) *
               C19744 +
           ((C19747 * C134 + C50628 * C144) * C50790 +
            (C19747 * C123 + C50628 * C130) * C121) *
               C19743) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C121 +
            (C19747 * C135 + C50628 * C145) * C50790) *
               C19743 +
           ((C19747 * C254 + C50628 * C268) * C121 +
            (C19747 * C264 + C50628 * C284) * C50790) *
               C19744 +
           ((C19747 * C259 + C50628 * C273) * C121 +
            (C19747 * C277 + C50628 * C289) * C50790) *
               C19745 +
           ((C19747 * C970 + C50628 * C978) * C121 +
            (C19747 * C974 + C50628 * C982) * C50790) *
               C19746) *
              C50693 * C50677 * C115 -
          (((C19747 * C973 + C50628 * C981) * C50790 +
            (C19747 * C969 + C50628 * C977) * C121) *
               C19746 +
           ((C19747 * C278 + C50628 * C290) * C50790 +
            (C19747 * C260 + C50628 * C274) * C121) *
               C19745 +
           ((C19747 * C263 + C50628 * C283) * C50790 +
            (C19747 * C253 + C50628 * C267) * C121) *
               C19744 +
           ((C19747 * C136 + C50628 * C146) * C50790 +
            (C19747 * C125 + C50628 * C132) * C121) *
               C19743) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C248 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C249 +
           (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            ((C19747 * C3377 + C50628 * C3381) * C121 +
             (C19747 * C3379 + C50628 * C3383) * C50790) *
                C19746) *
               C50693 * C250) *
              C251 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C249 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C248 -
           (((C19747 * C3378 + C50628 * C3382) * C50790 +
             (C19747 * C3376 + C50628 * C3380) * C121) *
                C19746 +
            (C19910 + C19909) * C19745 + C19913 * C19744 + C19914 * C19743) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C391 -
           (((C19747 * C3077 + C50628 * C3081) * C50790 +
             (C19747 * C3072 + C50628 * C3075) * C121) *
                C19746 +
            ((C19747 * C1437 + C50628 * C1445) * C50790 +
             (C19747 * C1433 + C50628 * C1441) * C121) *
                C19745 +
            ((C19747 * C784 + C50628 * C790) * C50790 +
             (C19747 * C775 + C50628 * C780) * C121) *
                C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C392 +
           (((C19747 * C398 + C50628 * C412) * C121 +
             (C19747 * C416 + C50628 * C428) * C50790) *
                C19743 +
            ((C19747 * C1086 + C50628 * C1094) * C121 +
             (C19747 * C1090 + C50628 * C1098) * C50790) *
                C19744 +
            ((C19747 * C2550 + C50628 * C2553) * C121 +
             (C19747 * C2555 + C50628 * C2559) * C50790) *
                C19745 +
            ((C19747 * C3548 + C50628 * C3552) * C121 +
             (C19747 * C3550 + C50628 * C3554) * C50790) *
                C19746) *
               C393) *
              C50677 * C251 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            ((C19747 * C776 + C50628 * C781) * C121 +
             (C19747 * C785 + C50628 * C791) * C50790) *
                C19744 +
            ((C19747 * C1432 + C50628 * C1440) * C121 +
             (C19747 * C1436 + C50628 * C1444) * C50790) *
                C19745 +
            ((C19747 * C3073 + C50628 * C3076) * C121 +
             (C19747 * C3078 + C50628 * C3082) * C50790) *
                C19746) *
               C392 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C391 -
           (((C19747 * C3549 + C50628 * C3553) * C50790 +
             (C19747 * C3547 + C50628 * C3551) * C121) *
                C19746 +
            ((C19747 * C2556 + C50628 * C2560) * C50790 +
             (C19747 * C2551 + C50628 * C2554) * C121) *
                C19745 +
            ((C19747 * C1089 + C50628 * C1097) * C50790 +
             (C19747 * C1085 + C50628 * C1093) * C121) *
                C19744 +
            ((C19747 * C417 + C50628 * C429) * C50790 +
             (C19747 * C399 + C50628 * C413) * C121) *
                C19743) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50920 -
           (((C16965 * C786 + C16960 * C792 + C16964 * C785 + C16959 * C791 +
              C16963 * C784 + C16958 * C790) *
                 C50790 +
             (C16965 * C777 + C16960 * C782 + C16964 * C776 + C16959 * C781 +
              C16963 * C775 + C16958 * C780) *
                 C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C50962 +
          ((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
              C16965 * C394 + C16960 * C408) *
                 C121 +
             (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
              C16965 * C404 + C16960 * C424) *
                 C50790) *
                C16961 +
            ((C16963 * C776 + C16958 * C781 + C16964 * C777 + C16959 * C782 +
              C16965 * C778 + C16960 * C783) *
                 C121 +
             (C16963 * C785 + C16958 * C791 + C16964 * C786 + C16959 * C792 +
              C16965 * C787 + C16960 * C793) *
                 C50790) *
                C50828) *
               C50757 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50920) *
              C50677 * C50963 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C50920 -
           (((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
              C16963 * C786 + C16958 * C792) *
                 C50790 +
             (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
              C16963 * C777 + C16958 * C782) *
                 C121) *
                C50828 +
            ((C16965 * C421 + C16960 * C432 + C16964 * C404 + C16959 * C424 +
              C16963 * C405 + C16958 * C425) *
                 C50790 +
             (C16965 * C402 + C16960 * C420 + C16964 * C394 + C16959 * C408 +
              C16963 * C395 + C16958 * C409) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50920 -
           (((C19747 * C3077 + C50628 * C3081) * C50790 +
             (C19747 * C3072 + C50628 * C3075) * C121) *
                C19746 +
            ((C19747 * C1437 + C50628 * C1445) * C50790 +
             (C19747 * C1433 + C50628 * C1441) * C121) *
                C19745 +
            ((C19747 * C784 + C50628 * C790) * C50790 +
             (C19747 * C775 + C50628 * C780) * C121) *
                C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C50677 * C50962 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            ((C19747 * C776 + C50628 * C781) * C121 +
             (C19747 * C785 + C50628 * C791) * C50790) *
                C19744 +
            ((C19747 * C1432 + C50628 * C1440) * C121 +
             (C19747 * C1436 + C50628 * C1444) * C50790) *
                C19745 +
            ((C19747 * C3073 + C50628 * C3076) * C121 +
             (C19747 * C3078 + C50628 * C3082) * C50790) *
                C19746) *
               C50757 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50920) *
              C50677 * C50963 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C50920 -
           (((C19747 * C3079 + C50628 * C3083) * C50790 +
             (C19747 * C3074 + C50628 * C3080) * C121) *
                C19746 +
            ((C19747 * C1435 + C50628 * C1443) * C50790 +
             (C19747 * C1431 + C50628 * C1439) * C121) *
                C19745 +
            ((C19747 * C786 + C50628 * C792) * C50790 +
             (C19747 * C777 + C50628 * C782) * C121) *
                C19744 +
            ((C19747 * C405 + C50628 * C425) * C50790 +
             (C19747 * C395 + C50628 * C409) * C121) *
                C19743) *
               C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C121 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C50790) *
               C16961 +
           ((C16963 * C256 + C16958 * C270 + C16964 * C255 + C16959 * C269 +
             C16965 * C254 + C16960 * C268) *
                C121 +
            (C16963 * C266 + C16958 * C286 + C16964 * C265 + C16959 * C285 +
             C16965 * C264 + C16960 * C284) *
                C50790) *
               C50828) *
              C50693 * C50677 * C113 -
          (((C16965 * C263 + C16960 * C283 + C16964 * C264 + C16959 * C284 +
             C16963 * C265 + C16958 * C285) *
                C50790 +
            (C16965 * C253 + C16960 * C267 + C16964 * C254 + C16959 * C268 +
             C16963 * C255 + C16958 * C269) *
                C121) *
               C50828 +
           ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C50790 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C121) *
               C16961) *
              C50693 * C50677 * C114 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C121 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C50790) *
               C16961 +
           ((C16963 * C254 + C16958 * C268 + C16964 * C253 + C16959 * C267 +
             C16965 * C261 + C16960 * C279) *
                C121 +
            (C16963 * C264 + C16958 * C284 + C16964 * C263 + C16959 * C283 +
             C16965 * C280 + C16960 * C291) *
                C50790) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C16965 * C538 + C16960 * C540 + C16964 * C280 + C16959 * C291 +
             C16963 * C263 + C16958 * C283) *
                C50790 +
            (C16965 * C537 + C16960 * C539 + C16964 * C261 + C16959 * C279 +
             C16963 * C253 + C16958 * C267) *
                C121) *
               C50828 +
           ((C16965 * C140 + C16960 * C148 + C16964 * C137 + C16959 * C147 +
             C16963 * C136 + C16958 * C146) *
                C50790 +
            (C16965 * C127 + C16960 * C139 + C16964 * C126 + C16959 * C138 +
             C16963 * C125 + C16958 * C132) *
                C121) *
               C16961) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C248 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C249 +
           (((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C16963 * C972 + C16958 * C980 + C16964 * C971 + C16959 * C979 +
              C16965 * C970 + C16960 * C978) *
                 C121 +
             (C16963 * C976 + C16958 * C984 + C16964 * C975 + C16959 * C983 +
              C16965 * C974 + C16960 * C982) *
                 C50790) *
                C50828) *
               C50693 * C250) *
              C251 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C249 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C248 -
           (((C16965 * C973 + C16960 * C981 + C16964 * C974 + C16959 * C982 +
              C16963 * C975 + C16958 * C983) *
                 C50790 +
             (C16965 * C969 + C16960 * C977 + C16964 * C970 + C16959 * C978 +
              C16963 * C971 + C16958 * C979) *
                 C121) *
                C50828 +
            ((C17184 + C17183 + C17182) * C50790 +
             (C17181 + C17180 + C17179) * C121) *
                C16961) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           ((C19747 * C256 + C50628 * C270) * C121 +
            (C19747 * C266 + C50628 * C286) * C50790) *
               C19744 +
           ((C19747 * C257 + C50628 * C271) * C121 +
            (C19747 * C275 + C50628 * C287) * C50790) *
               C19745 +
           ((C19747 * C972 + C50628 * C980) * C121 +
            (C19747 * C976 + C50628 * C984) * C50790) *
               C19746) *
              C50693 * C50677 * C113 -
          (((C19747 * C975 + C50628 * C983) * C50790 +
            (C19747 * C971 + C50628 * C979) * C121) *
               C19746 +
           ((C19747 * C276 + C50628 * C288) * C50790 +
            (C19747 * C258 + C50628 * C272) * C121) *
               C19745 +
           ((C19747 * C265 + C50628 * C285) * C50790 +
            (C19747 * C255 + C50628 * C269) * C121) *
               C19744 +
           ((C19747 * C134 + C50628 * C144) * C50790 +
            (C19747 * C123 + C50628 * C130) * C121) *
               C19743) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C121 +
            (C19747 * C135 + C50628 * C145) * C50790) *
               C19743 +
           ((C19747 * C254 + C50628 * C268) * C121 +
            (C19747 * C264 + C50628 * C284) * C50790) *
               C19744 +
           ((C19747 * C259 + C50628 * C273) * C121 +
            (C19747 * C277 + C50628 * C289) * C50790) *
               C19745 +
           ((C19747 * C970 + C50628 * C978) * C121 +
            (C19747 * C974 + C50628 * C982) * C50790) *
               C19746) *
              C50693 * C50677 * C115 -
          (((C19747 * C973 + C50628 * C981) * C50790 +
            (C19747 * C969 + C50628 * C977) * C121) *
               C19746 +
           ((C19747 * C278 + C50628 * C290) * C50790 +
            (C19747 * C260 + C50628 * C274) * C121) *
               C19745 +
           ((C19747 * C263 + C50628 * C283) * C50790 +
            (C19747 * C253 + C50628 * C267) * C121) *
               C19744 +
           ((C19747 * C136 + C50628 * C146) * C50790 +
            (C19747 * C125 + C50628 * C132) * C121) *
               C19743) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C248 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C249 +
           (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            ((C19747 * C3377 + C50628 * C3381) * C121 +
             (C19747 * C3379 + C50628 * C3383) * C50790) *
                C19746) *
               C50693 * C250) *
              C251 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C249 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C248 -
           (((C19747 * C3378 + C50628 * C3382) * C50790 +
             (C19747 * C3376 + C50628 * C3380) * C121) *
                C19746 +
            (C19910 + C19909) * C19745 + C19913 * C19744 + C19914 * C19743) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C50964 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C50965 +
           (((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C18127 + C18128 + C18129) * C121 +
             (C18130 + C18131 + C18132) * C50790) *
                C50828) *
               C50693 * C1199) *
              C50911 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C50965 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C50964 -
           (((C16965 * C973 + C16960 * C981 + C16964 * C974 + C16959 * C982 +
              C16963 * C975 + C16958 * C983) *
                 C50790 +
             (C16965 * C969 + C16960 * C977 + C16964 * C970 + C16959 * C978 +
              C16963 * C971 + C16958 * C979) *
                 C121) *
                C50828 +
            ((C17184 + C17183 + C17182) * C50790 +
             (C17181 + C17180 + C17179) * C121) *
                C16961) *
               C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C50964 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C50693 * C50965 +
           (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            (C20587 + C20588) * C19746) *
               C50693 * C1199) *
              C50911 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C50965 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C50964 -
           (((C19747 * C3378 + C50628 * C3382) * C50790 +
             (C19747 * C3376 + C50628 * C3380) * C121) *
                C19746 +
            (C19910 + C19909) * C19745 + C19913 * C19744 + C19914 * C19743) *
               C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50920 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C50964 +
          ((((C17864 + C17863 + C17862) * C121 +
             (C17861 + C17860 + C17859) * C50790) *
                C16961 +
            ((C18795 + C18796 + C18797) * C121 +
             (C18798 + C18799 + C18800) * C50790) *
                C50828) *
               C50757 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50920) *
              C50965 +
          ((((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C18127 + C18128 + C18129) * C121 +
             (C18130 + C18131 + C18132) * C50790) *
                C50828) *
               C50920 -
           (((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 +
              C16959 * C3082 + C16963 * C3077 + C16958 * C3081) *
                 C50790 +
             (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 +
              C16959 * C3076 + C16963 * C3072 + C16958 * C3075) *
                 C121) *
                C50828 +
            ((C18800 + C18799 + C18798) * C50790 +
             (C18797 + C18796 + C18795) * C121) *
                C16961) *
               C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50920 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C50964 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
               C50757 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C50920) *
              C50965 +
          ((C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            (C20587 + C20588) * C19746) *
               C50920 -
           (((C19747 * C21041 + C50628 * C21043) * C50790 +
             (C19747 * C21040 + C50628 * C21042) * C121) *
                C19746 +
            (C21054 + C21053) * C19745 + C21045 * C19744 + C21046 * C19743) *
               C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C121 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C50790) *
               C16961 +
           ((C17161 + C17162 + C17163) * C121 +
            (C17164 + C17165 + C17166) * C50790) *
               C50828) *
              C50693 * C964 -
          (((C17167 + C17168 + C17169) * C50790 +
            (C17170 + C17171 + C17172) * C121) *
               C50828 +
           ((C17166 + C17165 + C17164) * C50790 +
            (C17163 + C17162 + C17161) * C121) *
               C16961) *
              C50693 * C965 +
          (((C17172 + C17171 + C17170) * C121 +
            (C17169 + C17168 + C17167) * C50790) *
               C16961 +
           ((C18127 + C18128 + C18129) * C121 +
            (C18130 + C18131 + C18132) * C50790) *
               C50828) *
              C50693 * C966 -
          (((C16965 * C2317 + C16960 * C2321 + C16964 * C2316 + C16959 * C2320 +
             C16963 * C2315 + C16958 * C2319) *
                C50790 +
            (C16965 * C2312 + C16960 * C2318 + C16964 * C2311 + C16959 * C2314 +
             C16963 * C2310 + C16958 * C2313) *
                C121) *
               C50828 +
           ((C18132 + C18131 + C18130) * C50790 +
            (C18129 + C18128 + C18127) * C121) *
               C16961) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C50729) *
              C895 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C50729 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C893) *
              C896 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C16965 * C281 + C16960 * C292 + C16964 * C278 + C16959 * C290 +
              C16963 * C277 + C16958 * C289) *
                 C50790 +
             (C16965 * C262 + C16960 * C282 + C16964 * C260 + C16959 * C274 +
              C16963 * C259 + C16958 * C273) *
                 C121) *
                C50828 +
            ((C17494 + C17493 + C17492) * C50790 +
             (C17491 + C17490 + C17489) * C121) *
                C16961) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C391 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C392 +
           (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
              C16965 * C400 + C16960 * C414) *
                 C121 +
             (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
              C16965 * C418 + C16960 * C430) *
                 C50790) *
                C16961 +
            ((C18291 + C18292 + C18293) * C121 +
             (C18294 + C18295 + C18296) * C50790) *
                C50828) *
               C393) *
              C893 +
          ((((C17864 + C17863 + C17862) * C121 +
             (C17861 + C17860 + C17859) * C50790) *
                C16961 +
            ((C16963 * C1433 + C16958 * C1441 + C16964 * C1432 +
              C16959 * C1440 + C16965 * C1431 + C16960 * C1439) *
                 C121 +
             (C16963 * C1437 + C16958 * C1445 + C16964 * C1436 +
              C16959 * C1444 + C16965 * C1435 + C16960 * C1443) *
                 C50790) *
                C50828) *
               C392 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C391 -
           (((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 +
              C16959 * C2560 + C16963 * C2555 + C16958 * C2559) *
                 C50790 +
             (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 +
              C16959 * C2554 + C16963 * C2550 + C16958 * C2553) *
                 C121) *
                C50828 +
            ((C18296 + C18295 + C18294) * C50790 +
             (C18293 + C18292 + C18291) * C121) *
                C16961) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C893 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C50729) *
              C895 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C50729 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C50693 * C893 -
           (((C19747 * C2317 + C50628 * C2321) * C50790 +
             (C19747 * C2312 + C50628 * C2318) * C121) *
                C19746 +
            (C20134 + C20133) * C19745 + (C20132 + C20131) * C19744 +
            (C20130 + C20129) * C19743) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
              C50693 * C964 -
          (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
           (C19896 + C19895) * C19743) *
              C50693 * C965 +
          (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
           (C20587 + C20588) * C19746) *
              C50693 * C966 -
          (((C19747 * C20575 + C50628 * C20577) * C50790 +
            (C19747 * C20574 + C50628 * C20576) * C121) *
               C19746 +
           (C20588 + C20587) * C19745 + C20579 * C19744 + C20580 * C19743) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C391 -
           ((C20399 + C20400) * C19746 + (C20401 + C20402) * C19745 +
            (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C392 +
           (((C19747 * C398 + C50628 * C412) * C121 +
             (C19747 * C416 + C50628 * C428) * C50790) *
                C19743 +
            (C20709 + C20710) * C19744 + (C20711 + C20712) * C19745 +
            (C20713 + C20714) * C19746) *
               C393) *
              C893 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 +
            ((C19747 * C4066 + C50628 * C4070) * C121 +
             (C19747 * C4068 + C50628 * C4072) * C50790) *
                C19746) *
               C392 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C391 -
           (((C19747 * C20687 + C50628 * C20689) * C50790 +
             (C19747 * C20686 + C50628 * C20688) * C121) *
                C19746 +
            (C20714 + C20713) * C19745 + (C20712 + C20711) * C19744 +
            (C20710 + C20709) * C19743) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
               C16965 * C124 + C16960 * C131) *
                  C121 +
              (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
               C16965 * C135 + C16960 * C145) *
                  C50790) *
                 C16961 +
             ((C17161 + C17162 + C17163) * C121 +
              (C17164 + C17165 + C17166) * C50790) *
                 C50828) *
                C50920 -
            (((C17859 + C17860 + C17861) * C50790 +
              (C17862 + C17863 + C17864) * C121) *
                 C50828 +
             ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
               C16963 * C407 + C16958 * C427) *
                  C50790 +
              (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
               C16963 * C397 + C16958 * C411) *
                  C121) *
                 C16961) *
                C50757) *
               C893 +
           ((((C17864 + C17863 + C17862) * C121 +
              (C17861 + C17860 + C17859) * C50790) *
                 C16961 +
             ((C16963 * C1433 + C16958 * C1441 + C16964 * C1432 +
               C16959 * C1440 + C16965 * C1431 + C16960 * C1439) *
                  C121 +
              (C16963 * C1437 + C16958 * C1445 + C16964 * C1436 +
               C16959 * C1444 + C16965 * C1435 + C16960 * C1443) *
                  C50790) *
                 C50828) *
                C50757 -
            (((C17167 + C17168 + C17169) * C50790 +
              (C17170 + C17171 + C17172) * C121) *
                 C50828 +
             ((C17166 + C17165 + C17164) * C50790 +
              (C17163 + C17162 + C17161) * C121) *
                 C16961) *
                C50920) *
               C50729) *
              C50911 +
          (((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
               C16965 * C394 + C16960 * C408) *
                  C121 +
              (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
               C16965 * C404 + C16960 * C424) *
                  C50790) *
                 C16961 +
             ((C17865 + C17866 + C17867) * C121 +
              (C17868 + C17869 + C17870) * C50790) *
                 C50828) *
                C50757 -
            (((C17178 + C17177 + C17176) * C50790 +
              (C17175 + C17174 + C17173) * C121) *
                 C50828 +
             ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
               C16963 * C134 + C16958 * C144) *
                  C50790 +
              (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
               C16963 * C123 + C16958 * C130) *
                  C121) *
                 C16961) *
                C50920) *
               C893 +
           ((((C17173 + C17174 + C17175) * C121 +
              (C17176 + C17177 + C17178) * C50790) *
                 C16961 +
             ((C17179 + C17180 + C17181) * C121 +
              (C17182 + C17183 + C17184) * C50790) *
                 C50828) *
                C50920 -
            (((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 +
               C16959 * C1443 + C16963 * C1436 + C16958 * C1444) *
                  C50790 +
              (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 +
               C16959 * C1439 + C16963 * C1432 + C16958 * C1440) *
                  C121) *
                 C50828 +
             ((C17870 + C17869 + C17868) * C50790 +
              (C17867 + C17866 + C17865) * C121) *
                 C16961) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C121 +
              (C19747 * C133 + C50628 * C143) * C50790) *
                 C19743 +
             (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
                C50920 -
            ((C20399 + C20400) * C19746 + (C20401 + C20402) * C19745 +
             (C20403 + C20404) * C19744 +
             ((C19747 * C407 + C50628 * C427) * C50790 +
              (C19747 * C397 + C50628 * C411) * C121) *
                 C19743) *
                C50757) *
               C893 +
           (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
             (C20400 + C20399) * C19745 +
             ((C19747 * C4066 + C50628 * C4070) * C121 +
              (C19747 * C4068 + C50628 * C4072) * C50790) *
                 C19746) *
                C50757 -
            (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
             (C19896 + C19895) * C19743) *
                C50920) *
               C50729) *
              C50911 +
          (((((C19747 * C396 + C50628 * C410) * C121 +
              (C19747 * C406 + C50628 * C426) * C50790) *
                 C19743 +
             (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
             (C20409 + C20410) * C19746) *
                C50757 -
            (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
             ((C19747 * C134 + C50628 * C144) * C50790 +
              (C19747 * C123 + C50628 * C130) * C121) *
                 C19743) *
                C50920) *
               C893 +
           (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
             (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
                C50920 -
            (((C19747 * C4067 + C50628 * C4071) * C50790 +
              (C19747 * C4065 + C50628 * C4069) * C121) *
                 C19746 +
             (C20410 + C20409) * C19745 + (C20408 + C20407) * C19744 +
             (C20406 + C20405) * C19743) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50693 * C50729) *
              C895 +
          ((((C17173 + C17174 + C17175) * C121 +
             (C17176 + C17177 + C17178) * C50790) *
                C16961 +
            ((C17179 + C17180 + C17181) * C121 +
             (C17182 + C17183 + C17184) * C50790) *
                C50828) *
               C50693 * C50729 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50693 * C893) *
              C896 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C50693 * C893 -
           (((C16965 * C281 + C16960 * C292 + C16964 * C278 + C16959 * C290 +
              C16963 * C277 + C16958 * C289) *
                 C50790 +
             (C16965 * C262 + C16960 * C282 + C16964 * C260 + C16959 * C274 +
              C16963 * C259 + C16958 * C273) *
                 C121) *
                C50828 +
            ((C17494 + C17493 + C17492) * C50790 +
             (C17491 + C17490 + C17489) * C121) *
                C16961) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C121 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C50790) *
               C16961 +
           ((C17161 + C17162 + C17163) * C121 +
            (C17164 + C17165 + C17166) * C50790) *
               C50828) *
              C50693 * C964 -
          (((C17167 + C17168 + C17169) * C50790 +
            (C17170 + C17171 + C17172) * C121) *
               C50828 +
           ((C17166 + C17165 + C17164) * C50790 +
            (C17163 + C17162 + C17161) * C121) *
               C16961) *
              C50693 * C965 +
          (((C17172 + C17171 + C17170) * C121 +
            (C17169 + C17168 + C17167) * C50790) *
               C16961 +
           ((C18127 + C18128 + C18129) * C121 +
            (C18130 + C18131 + C18132) * C50790) *
               C50828) *
              C50693 * C966 -
          (((C16965 * C2317 + C16960 * C2321 + C16964 * C2316 + C16959 * C2320 +
             C16963 * C2315 + C16958 * C2319) *
                C50790 +
            (C16965 * C2312 + C16960 * C2318 + C16964 * C2311 + C16959 * C2314 +
             C16963 * C2310 + C16958 * C2313) *
                C121) *
               C50828 +
           ((C18132 + C18131 + C18130) * C50790 +
            (C18129 + C18128 + C18127) * C121) *
               C16961) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50693 * C893 -
           ((C19901 + C19902) * C19746 + (C19900 + C19899) * C19745 +
            (C19898 + C19897) * C19744 + (C19896 + C19895) * C19743) *
               C50693 * C50729) *
              C895 +
          (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
            (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
               C50693 * C50729 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C50693 * C893 -
           (((C19747 * C2317 + C50628 * C2321) * C50790 +
             (C19747 * C2312 + C50628 * C2318) * C121) *
                C19746 +
            (C20134 + C20133) * C19745 + (C20132 + C20131) * C19744 +
            (C20130 + C20129) * C19743) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
              C50693 * C964 -
          (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
           (C19896 + C19895) * C19743) *
              C50693 * C965 +
          (C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
           (C20587 + C20588) * C19746) *
              C50693 * C966 -
          (((C19747 * C20575 + C50628 * C20577) * C50790 +
            (C19747 * C20574 + C50628 * C20576) * C121) *
               C19746 +
           (C20588 + C20587) * C19745 + C20579 * C19744 + C20580 * C19743) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
               C16965 * C124 + C16960 * C131) *
                  C121 +
              (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
               C16965 * C135 + C16960 * C145) *
                  C50790) *
                 C16961 +
             ((C17161 + C17162 + C17163) * C121 +
              (C17164 + C17165 + C17166) * C50790) *
                 C50828) *
                C1544 -
            (((C17859 + C17860 + C17861) * C50790 +
              (C17862 + C17863 + C17864) * C121) *
                 C50828 +
             ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
               C16963 * C407 + C16958 * C427) *
                  C50790 +
              (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
               C16963 * C397 + C16958 * C411) *
                  C121) *
                 C16961) *
                C50757) *
               C50919 +
           ((((C17864 + C17863 + C17862) * C121 +
              (C17861 + C17860 + C17859) * C50790) *
                 C16961 +
             ((C18795 + C18796 + C18797) * C121 +
              (C18798 + C18799 + C18800) * C50790) *
                 C50828) *
                C50757 -
            (((C17167 + C17168 + C17169) * C50790 +
              (C17170 + C17171 + C17172) * C121) *
                 C50828 +
             ((C17166 + C17165 + C17164) * C50790 +
              (C17163 + C17162 + C17161) * C121) *
                 C16961) *
                C1544) *
               C50729) *
              C50911 +
          (((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
               C16965 * C394 + C16960 * C408) *
                  C121 +
              (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
               C16965 * C404 + C16960 * C424) *
                  C50790) *
                 C16961 +
             ((C17865 + C17866 + C17867) * C121 +
              (C17868 + C17869 + C17870) * C50790) *
                 C50828) *
                C50757 -
            (((C17178 + C17177 + C17176) * C50790 +
              (C17175 + C17174 + C17173) * C121) *
                 C50828 +
             ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
               C16963 * C134 + C16958 * C144) *
                  C50790 +
              (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
               C16963 * C123 + C16958 * C130) *
                  C121) *
                 C16961) *
                C1544) *
               C50919 +
           ((((C17173 + C17174 + C17175) * C121 +
              (C17176 + C17177 + C17178) * C50790) *
                 C16961 +
             ((C17179 + C17180 + C17181) * C121 +
              (C17182 + C17183 + C17184) * C50790) *
                 C50828) *
                C1544 -
            (((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 +
               C16959 * C1443 + C16963 * C1436 + C16958 * C1444) *
                  C50790 +
              (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 +
               C16959 * C1439 + C16963 * C1432 + C16958 * C1440) *
                  C121) *
                 C50828 +
             ((C17870 + C17869 + C17868) * C50790 +
              (C17867 + C17866 + C17865) * C121) *
                 C16961) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C121 +
              (C19747 * C133 + C50628 * C143) * C50790) *
                 C19743 +
             (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
                C1544 -
            (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
             ((C19747 * C407 + C50628 * C427) * C50790 +
              (C19747 * C397 + C50628 * C411) * C121) *
                 C19743) *
                C50757) *
               C50919 +
           (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
             (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
                C50757 -
            (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
             (C19896 + C19895) * C19743) *
                C1544) *
               C50729) *
              C50911 +
          (((((C19747 * C396 + C50628 * C410) * C121 +
              (C19747 * C406 + C50628 * C426) * C50790) *
                 C19743 +
             (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
             (C20409 + C20410) * C19746) *
                C50757 -
            (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
             ((C19747 * C134 + C50628 * C144) * C50790 +
              (C19747 * C123 + C50628 * C130) * C121) *
                 C19743) *
                C1544) *
               C50919 +
           (((C19903 + C19904) * C19743 + (C19905 + C19906) * C19744 +
             (C19907 + C19908) * C19745 + (C19909 + C19910) * C19746) *
                C1544 -
            (((C19747 * C4067 + C50628 * C4071) * C50790 +
              (C19747 * C4065 + C50628 * C4069) * C121) *
                 C19746 +
             (C20410 + C20409) * C19745 + (C20408 + C20407) * C19744 +
             (C20406 + C20405) * C19743) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50966 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50967 +
           (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
              C16965 * C400 + C16960 * C414) *
                 C121 +
             (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
              C16965 * C418 + C16960 * C430) *
                 C50790) *
                C16961 +
            ((C18291 + C18292 + C18293) * C121 +
             (C18294 + C18295 + C18296) * C50790) *
                C50828) *
               C1960) *
              C50919 +
          ((((C17864 + C17863 + C17862) * C121 +
             (C17861 + C17860 + C17859) * C50790) *
                C16961 +
            ((C18795 + C18796 + C18797) * C121 +
             (C18798 + C18799 + C18800) * C50790) *
                C50828) *
               C50967 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C50966 -
           (((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 +
              C16959 * C2560 + C16963 * C2555 + C16958 * C2559) *
                 C50790 +
             (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 +
              C16959 * C2554 + C16963 * C2550 + C16958 * C2553) *
                 C121) *
                C50828 +
            ((C18296 + C18295 + C18294) * C50790 +
             (C18293 + C18292 + C18291) * C121) *
                C16961) *
               C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50966 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50967 +
           (((C19747 * C398 + C50628 * C412) * C121 +
             (C19747 * C416 + C50628 * C428) * C50790) *
                C19743 +
            (C20709 + C20710) * C19744 + (C20711 + C20712) * C19745 +
            (C20713 + C20714) * C19746) *
               C1960) *
              C50919 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
               C50967 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C50966 -
           (((C19747 * C20687 + C50628 * C20689) * C50790 +
             (C19747 * C20686 + C50628 * C20688) * C121) *
                C19746 +
            (C20714 + C20713) * C19745 + (C20712 + C20711) * C19744 +
            (C20710 + C20709) * C19743) *
               C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C1544 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C248 +
          ((((C17864 + C17863 + C17862) * C121 +
             (C17861 + C17860 + C17859) * C50790) *
                C16961 +
            ((C18795 + C18796 + C18797) * C121 +
             (C18798 + C18799 + C18800) * C50790) *
                C50828) *
               C50757 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C1544) *
              C249 +
          ((((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C18127 + C18128 + C18129) * C121 +
             (C18130 + C18131 + C18132) * C50790) *
                C50828) *
               C1544 -
           (((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 +
              C16959 * C3082 + C16963 * C3077 + C16958 * C3081) *
                 C50790 +
             (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 +
              C16959 * C3076 + C16963 * C3072 + C16958 * C3075) *
                 C121) *
                C50828 +
            ((C18800 + C18799 + C18798) * C50790 +
             (C18797 + C18796 + C18795) * C121) *
                C16961) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C1544 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C895 +
          ((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
              C16965 * C394 + C16960 * C408) *
                 C121 +
             (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
              C16965 * C404 + C16960 * C424) *
                 C50790) *
                C16961 +
            ((C17865 + C17866 + C17867) * C121 +
             (C17868 + C17869 + C17870) * C50790) *
                C50828) *
               C50757 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C1544) *
              C50677 * C896 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C1544 -
           (((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
              C16963 * C786 + C16958 * C792) *
                 C50790 +
             (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
              C16963 * C777 + C16958 * C782) *
                 C121) *
                C50828 +
            ((C16965 * C421 + C16960 * C432 + C16964 * C404 + C16959 * C424 +
              C16963 * C405 + C16958 * C425) *
                 C50790 +
             (C16965 * C402 + C16960 * C420 + C16964 * C394 + C16959 * C408 +
              C16963 * C395 + C16958 * C409) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C121 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C50790) *
               C16961 +
           ((C17161 + C17162 + C17163) * C121 +
            (C17164 + C17165 + C17166) * C50790) *
               C50828) *
              C1710 -
          (((C17859 + C17860 + C17861) * C50790 +
            (C17862 + C17863 + C17864) * C121) *
               C50828 +
           ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
             C16963 * C407 + C16958 * C427) *
                C50790 +
            (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
             C16963 * C397 + C16958 * C411) *
                C121) *
               C16961) *
              C1711 +
          (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
             C16965 * C400 + C16960 * C414) *
                C121 +
            (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
             C16965 * C418 + C16960 * C430) *
                C50790) *
               C16961 +
           ((C18291 + C18292 + C18293) * C121 +
            (C18294 + C18295 + C18296) * C50790) *
               C50828) *
              C1712 -
          (((C16965 * C5977 + C16960 * C5979 + C16964 * C4488 + C16959 * C4494 +
             C16963 * C4489 + C16958 * C4495) *
                C50790 +
            (C16965 * C5976 + C16960 * C5978 + C16964 * C4482 + C16959 * C4490 +
             C16963 * C4483 + C16958 * C4491) *
                C121) *
               C50828 +
           ((C16965 * C1719 + C16960 * C1727 + C16964 * C1720 + C16959 * C1728 +
             C16963 * C1721 + C16958 * C1729) *
                C50790 +
            (C16965 * C1715 + C16960 * C1723 + C16964 * C1716 + C16959 * C1724 +
             C16963 * C1717 + C16958 * C1725) *
                C121) *
               C16961) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C1544 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C50677 * C895 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
            (C20409 + C20410) * C19746) *
               C50757 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C1544 -
           (((C19747 * C3079 + C50628 * C3083) * C50790 +
             (C19747 * C3074 + C50628 * C3080) * C121) *
                C19746 +
            ((C19747 * C1435 + C50628 * C1443) * C50790 +
             (C19747 * C1431 + C50628 * C1439) * C121) *
                C19745 +
            ((C19747 * C786 + C50628 * C792) * C50790 +
             (C19747 * C777 + C50628 * C782) * C121) *
                C19744 +
            ((C19747 * C405 + C50628 * C425) * C50790 +
             (C19747 * C395 + C50628 * C409) * C121) *
                C19743) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C1544 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C248 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
               C50757 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C1544) *
              C249 +
          ((C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            (C20587 + C20588) * C19746) *
               C1544 -
           (((C19747 * C21041 + C50628 * C21043) * C50790 +
             (C19747 * C21040 + C50628 * C21042) * C121) *
                C19746 +
            (C21054 + C21053) * C19745 + C21045 * C19744 + C21046 * C19743) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C121 +
            (C19747 * C133 + C50628 * C143) * C50790) *
               C19743 +
           (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
              C1710 -
          (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
           ((C19747 * C407 + C50628 * C427) * C50790 +
            (C19747 * C397 + C50628 * C411) * C121) *
               C19743) *
              C1711 +
          (((C19747 * C398 + C50628 * C412) * C121 +
            (C19747 * C416 + C50628 * C428) * C50790) *
               C19743 +
           (C20709 + C20710) * C19744 + (C20711 + C20712) * C19745 +
           (C20713 + C20714) * C19746) *
              C1712 -
          (((C19747 * C21317 + C50628 * C21319) * C50790 +
            (C19747 * C21316 + C50628 * C21318) * C121) *
               C19746 +
           ((C19747 * C4485 + C50628 * C4493) * C50790 +
            (C19747 * C4481 + C50628 * C4487) * C121) *
               C19745 +
           ((C19747 * C4489 + C50628 * C4495) * C50790 +
            (C19747 * C4483 + C50628 * C4491) * C121) *
               C19744 +
           ((C19747 * C1721 + C50628 * C1729) * C50790 +
            (C19747 * C1717 + C50628 * C1725) * C121) *
               C19743) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C50966 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50967 +
           (((C16963 * C398 + C16958 * C412 + C16964 * C399 + C16959 * C413 +
              C16965 * C400 + C16960 * C414) *
                 C121 +
             (C16963 * C416 + C16958 * C428 + C16964 * C417 + C16959 * C429 +
              C16965 * C418 + C16960 * C430) *
                 C50790) *
                C16961 +
            ((C18291 + C18292 + C18293) * C121 +
             (C18294 + C18295 + C18296) * C50790) *
                C50828) *
               C1960) *
              C50677 * C50911 +
          ((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
              C16965 * C394 + C16960 * C408) *
                 C121 +
             (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
              C16965 * C404 + C16960 * C424) *
                 C50790) *
                C16961 +
            ((C17865 + C17866 + C17867) * C121 +
             (C17868 + C17869 + C17870) * C50790) *
                C50828) *
               C50967 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C50966 -
           (((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50790 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C121) *
                C50828 +
            ((C16965 * C419 + C16960 * C431 + C16964 * C418 + C16959 * C430 +
              C16963 * C417 + C16958 * C429) *
                 C50790 +
             (C16965 * C401 + C16960 * C415 + C16964 * C400 + C16959 * C414 +
              C16963 * C399 + C16958 * C413) *
                 C121) *
                C16961) *
               C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C50966 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50967 +
           (((C19747 * C398 + C50628 * C412) * C121 +
             (C19747 * C416 + C50628 * C428) * C50790) *
                C19743 +
            (C20709 + C20710) * C19744 + (C20711 + C20712) * C19745 +
            (C20713 + C20714) * C19746) *
               C1960) *
              C50677 * C50911 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
            (C20409 + C20410) * C19746) *
               C50967 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C50966 -
           (((C19747 * C3549 + C50628 * C3553) * C50790 +
             (C19747 * C3547 + C50628 * C3551) * C121) *
                C19746 +
            ((C19747 * C2556 + C50628 * C2560) * C50790 +
             (C19747 * C2551 + C50628 * C2554) * C121) *
                C19745 +
            ((C19747 * C1089 + C50628 * C1097) * C50790 +
             (C19747 * C1085 + C50628 * C1093) * C121) *
                C19744 +
            ((C19747 * C417 + C50628 * C429) * C50790 +
             (C19747 * C399 + C50628 * C413) * C121) *
                C19743) *
               C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C1544 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C895 +
          ((((C16963 * C396 + C16958 * C410 + C16964 * C395 + C16959 * C409 +
              C16965 * C394 + C16960 * C408) *
                 C121 +
             (C16963 * C406 + C16958 * C426 + C16964 * C405 + C16959 * C425 +
              C16965 * C404 + C16960 * C424) *
                 C50790) *
                C16961 +
            ((C17865 + C17866 + C17867) * C121 +
             (C17868 + C17869 + C17870) * C50790) *
                C50828) *
               C50757 -
           (((C17178 + C17177 + C17176) * C50790 +
             (C17175 + C17174 + C17173) * C121) *
                C50828 +
            ((C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C50790 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C121) *
                C16961) *
               C1544) *
              C50677 * C896 +
          ((((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
              C16965 * C126 + C16960 * C138) *
                 C121 +
             (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
              C16965 * C137 + C16960 * C147) *
                 C50790) *
                C16961 +
            ((C17489 + C17490 + C17491) * C121 +
             (C17492 + C17493 + C17494) * C50790) *
                C50828) *
               C1544 -
           (((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
              C16963 * C786 + C16958 * C792) *
                 C50790 +
             (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
              C16963 * C777 + C16958 * C782) *
                 C121) *
                C50828 +
            ((C16965 * C421 + C16960 * C432 + C16964 * C404 + C16959 * C424 +
              C16963 * C405 + C16958 * C425) *
                 C50790 +
             (C16965 * C402 + C16960 * C420 + C16964 * C394 + C16959 * C408 +
              C16963 * C395 + C16958 * C409) *
                 C121) *
                C16961) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C121 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C50790) *
                C16961 +
            ((C17161 + C17162 + C17163) * C121 +
             (C17164 + C17165 + C17166) * C50790) *
                C50828) *
               C1544 -
           (((C17859 + C17860 + C17861) * C50790 +
             (C17862 + C17863 + C17864) * C121) *
                C50828 +
            ((C16965 * C405 + C16960 * C425 + C16964 * C406 + C16959 * C426 +
              C16963 * C407 + C16958 * C427) *
                 C50790 +
             (C16965 * C395 + C16960 * C409 + C16964 * C396 + C16959 * C410 +
              C16963 * C397 + C16958 * C411) *
                 C121) *
                C16961) *
               C50757) *
              C248 +
          ((((C17864 + C17863 + C17862) * C121 +
             (C17861 + C17860 + C17859) * C50790) *
                C16961 +
            ((C18795 + C18796 + C18797) * C121 +
             (C18798 + C18799 + C18800) * C50790) *
                C50828) *
               C50757 -
           (((C17167 + C17168 + C17169) * C50790 +
             (C17170 + C17171 + C17172) * C121) *
                C50828 +
            ((C17166 + C17165 + C17164) * C50790 +
             (C17163 + C17162 + C17161) * C121) *
                C16961) *
               C1544) *
              C249 +
          ((((C17172 + C17171 + C17170) * C121 +
             (C17169 + C17168 + C17167) * C50790) *
                C16961 +
            ((C18127 + C18128 + C18129) * C121 +
             (C18130 + C18131 + C18132) * C50790) *
                C50828) *
               C1544 -
           (((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 +
              C16959 * C3082 + C16963 * C3077 + C16958 * C3081) *
                 C50790 +
             (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 +
              C16959 * C3076 + C16963 * C3072 + C16958 * C3075) *
                 C121) *
                C50828 +
            ((C18800 + C18799 + C18798) * C50790 +
             (C18797 + C18796 + C18795) * C121) *
                C16961) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C1544 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C50677 * C895 +
          ((((C19747 * C396 + C50628 * C410) * C121 +
             (C19747 * C406 + C50628 * C426) * C50790) *
                C19743 +
            (C20405 + C20406) * C19744 + (C20407 + C20408) * C19745 +
            (C20409 + C20410) * C19746) *
               C50757 -
           (C19913 * C19746 + C19914 * C19745 + (C19904 + C19903) * C19744 +
            ((C19747 * C134 + C50628 * C144) * C50790 +
             (C19747 * C123 + C50628 * C130) * C121) *
                C19743) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C121 +
             (C19747 * C135 + C50628 * C145) * C50790) *
                C19743 +
            (C20129 + C20130) * C19744 + (C20131 + C20132) * C19745 +
            (C20133 + C20134) * C19746) *
               C1544 -
           (((C19747 * C3079 + C50628 * C3083) * C50790 +
             (C19747 * C3074 + C50628 * C3080) * C121) *
                C19746 +
            ((C19747 * C1435 + C50628 * C1443) * C50790 +
             (C19747 * C1431 + C50628 * C1439) * C121) *
                C19745 +
            ((C19747 * C786 + C50628 * C792) * C50790 +
             (C19747 * C777 + C50628 * C782) * C121) *
                C19744 +
            ((C19747 * C405 + C50628 * C425) * C50790 +
             (C19747 * C395 + C50628 * C409) * C121) *
                C19743) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C121 +
             (C19747 * C133 + C50628 * C143) * C50790) *
                C19743 +
            (C19895 + C19896) * C19744 + C19911 * C19745 + C19912 * C19746) *
               C1544 -
           (C21045 * C19746 + C21046 * C19745 + (C20403 + C20404) * C19744 +
            ((C19747 * C407 + C50628 * C427) * C50790 +
             (C19747 * C397 + C50628 * C411) * C121) *
                C19743) *
               C50757) *
              C248 +
          (((C20404 + C20403) * C19743 + (C20402 + C20401) * C19744 +
            (C20400 + C20399) * C19745 + (C21053 + C21054) * C19746) *
               C50757 -
           (C20579 * C19746 + C20580 * C19745 + (C19898 + C19897) * C19744 +
            (C19896 + C19895) * C19743) *
               C1544) *
              C249 +
          ((C19911 * C19743 + C19912 * C19744 + (C19902 + C19901) * C19745 +
            (C20587 + C20588) * C19746) *
               C1544 -
           (((C19747 * C21041 + C50628 * C21043) * C50790 +
             (C19747 * C21040 + C50628 * C21042) * C121) *
                C19746 +
            (C21054 + C21053) * C19745 + C21045 * C19744 + C21046 * C19743) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50693 * C50919 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C50693 * C50729) *
              C50962 +
          ((((C24756 + C24757) * C33715 + (C24758 + C24759) * C33713 +
             C28544 * C33716 + C28545 * C50854) *
                C50932 +
            ((C24760 + C24761) * C33715 + (C24762 + C24763) * C33713 +
             (C25478 + C25479) * C33716 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C50729 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C50693 * C50919) *
              C50963 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C33715 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C33713 +
             (C28278 + C28279) * C33716 + (C28280 + C28281) * C50854) *
                C50932 +
            ((C25086 + C25087) * C33715 + (C25088 + C25089) * C33713 +
             (C28072 + C28073) * C33716 + (C28074 + C28075) * C50854) *
                C50828) *
               C50693 * C50919 -
           (((C49740 * C1434 + C50633 * C1442 + C49747 * C1435 +
              C50904 * C1443) *
                 C50854 +
             (C49740 * C1430 + C50633 * C1438 + C49747 * C1431 +
              C50904 * C1439) *
                 C33716 +
             (C25093 + C25092) * C33713 + (C25091 + C25090) * C33715) *
                C50828 +
            ((C28075 + C28074) * C50854 + (C28073 + C28072) * C33716 +
             (C25089 + C25088) * C33713 + (C25087 + C25086) * C33715) *
                C50932) *
               C50693 * C50729) *
              C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                  C33715 +
              (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                  C33713 +
              (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                 C50932 +
             ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
              C28540 * C33716 + C28541 * C50854) *
                 C50828) *
                C50920 -
            ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
              C28543 * C33715) *
                 C50828 +
             ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
              (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                 C50932) *
                C50757) *
               C50919 +
           (((C28540 * C33715 + C28541 * C33713 + C29068 * C33716 +
              C29069 * C50854) *
                 C50932 +
             (C29728 * C33715 + C29729 * C33713 + (C25909 + C25910) * C33716 +
              (C25911 + C25912) * C50854) *
                 C50828) *
                C50757 -
            ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
              (C24749 + C24748) * C33715) *
                 C50828 +
             (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
              (C24745 + C24744) * C33715) *
                 C50932) *
                C50920) *
               C50729) *
              C251 +
          (((((C27858 + C27859) * C33715 + (C27860 + C27861) * C33713 +
              (C27862 + C27863) * C33716 + (C27864 + C27865) * C50854) *
                 C50932 +
             (C28544 * C33715 + C28545 * C33713 + (C27866 + C27867) * C33716 +
              (C27868 + C27869) * C50854) *
                 C50828) *
                C50757 -
            ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
              (C24757 + C24756) * C33715) *
                 C50828 +
             ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
              (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                  C33713 +
              (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                  C33715) *
                 C50932) *
                C50920) *
               C50919 +
           ((((C24756 + C24757) * C33715 + (C24758 + C24759) * C33713 +
              C28544 * C33716 + C28545 * C50854) *
                 C50932 +
             ((C24760 + C24761) * C33715 + (C24762 + C24763) * C33713 +
              (C25478 + C25479) * C33716 + (C25480 + C25481) * C50854) *
                 C50828) *
                C50920 -
            (((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
               C50904 * C2560) *
                  C50854 +
              (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
               C50904 * C2554) *
                  C33716 +
              (C25481 + C25480) * C33713 + (C25479 + C25478) * C33715) *
                 C50828 +
             ((C27869 + C27868) * C50854 + (C27867 + C27866) * C33716 +
              C28546 * C33713 + C28547 * C33715) *
                 C50932) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50693 * C248 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C50693 * C249 +
           ((C24768 * C33715 + C24769 * C33713 + C29728 * C33716 +
             C29729 * C50854) *
                C50932 +
            ((C24755 + C24754) * C33715 + (C24753 + C24752) * C33713 +
             (C26411 + C26412) * C33716 + (C26413 + C26414) * C50854) *
                C50828) *
               C50693 * C250) *
              C251 +
          ((((C24756 + C24757) * C33715 + (C24758 + C24759) * C33713 +
             C28544 * C33716 + C28545 * C50854) *
                C50932 +
            ((C24760 + C24761) * C33715 + (C24762 + C24763) * C33713 +
             (C25478 + C25479) * C33716 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C249 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C50693 * C248 -
           (((C49740 * C3079 + C50633 * C3083 + C49747 * C3078 +
              C50904 * C3082) *
                 C50854 +
             (C49740 * C3074 + C50633 * C3080 + C49747 * C3073 +
              C50904 * C3076) *
                 C33716 +
             (C24767 + C24766) * C33713 + (C24765 + C24764) * C33715) *
                C50828 +
            ((C25481 + C25480) * C50854 + (C25479 + C25478) * C33716 +
             C24770 * C33713 + C24771 * C33715) *
                C50932) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C33715 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C33713 +
            (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
               C50932 +
           ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
            C28540 * C33716 + C28541 * C50854) *
               C50828) *
              C50693 * C50677 * C113 -
          ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
            (C24757 + C24756) * C33715) *
               C50828 +
           ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C33713 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C33715) *
               C50932) *
              C50693 * C50677 * C114 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C33715 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C33713 +
            (C28278 + C28279) * C33716 + (C28280 + C28281) * C50854) *
               C50932 +
           ((C25086 + C25087) * C33715 + (C25088 + C25089) * C33713 +
            (C28072 + C28073) * C33716 + (C28074 + C28075) * C50854) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C49740 * C788 + C50633 * C794 + C49747 * C787 + C50904 * C793) *
                C50854 +
            (C49740 * C779 + C50633 * C789 + C49747 * C778 + C50904 * C783) *
                C33716 +
            (C49740 * C280 + C50633 * C291 + C49747 * C263 + C50904 * C283) *
                C33713 +
            (C49740 * C261 + C50633 * C279 + C49747 * C253 + C50904 * C267) *
                C33715) *
               C50828 +
           ((C49740 * C421 + C50633 * C432 + C49747 * C404 + C50904 * C424) *
                C50854 +
            (C49740 * C402 + C50633 * C420 + C49747 * C394 + C50904 * C408) *
                C33716 +
            (C49740 * C137 + C50633 * C147 + C49747 * C136 + C50904 * C146) *
                C33713 +
            (C49740 * C126 + C50633 * C138 + C49747 * C125 + C50904 * C132) *
                C33715) *
               C50932) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C391 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C392 +
           (((C27857 + C27856) * C33715 + (C27855 + C27854) * C33713 +
             (C30256 + C30257) * C33716 + (C30258 + C30259) * C50854) *
                C50932 +
            (C29068 * C33715 + C29069 * C33713 + (C29078 + C29079) * C33716 +
             (C29080 + C29081) * C50854) *
                C50828) *
               C393) *
              C50677 * C251 +
          ((((C27858 + C27859) * C33715 + (C27860 + C27861) * C33713 +
             (C27862 + C27863) * C33716 + (C27864 + C27865) * C50854) *
                C50932 +
            (C28544 * C33715 + C28545 * C33713 + (C27866 + C27867) * C33716 +
             (C27868 + C27869) * C50854) *
                C50828) *
               C392 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C391 -
           (((C49740 * C5977 + C50633 * C5979 + C49747 * C4488 +
              C50904 * C4494) *
                 C50854 +
             (C49740 * C5976 + C50633 * C5978 + C49747 * C4482 +
              C50904 * C4490) *
                 C33716 +
             (C27869 + C27868) * C33713 + (C27867 + C27866) * C33715) *
                C50828 +
            ((C49740 * C1719 + C50633 * C1727 + C49747 * C1720 +
              C50904 * C1728) *
                 C50854 +
             (C49740 * C1715 + C50633 * C1723 + C49747 * C1716 +
              C50904 * C1724) *
                 C33716 +
             (C27865 + C27864) * C33713 + (C27863 + C27862) * C33715) *
                C50932) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50920 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C50757) *
              C50677 * C50962 +
          ((((C27858 + C27859) * C33715 + (C27860 + C27861) * C33713 +
             (C27862 + C27863) * C33716 + (C27864 + C27865) * C50854) *
                C50932 +
            (C28544 * C33715 + C28545 * C33713 + (C27866 + C27867) * C33716 +
             (C27868 + C27869) * C50854) *
                C50828) *
               C50757 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C50920) *
              C50677 * C50963 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C33715 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C33713 +
             (C28278 + C28279) * C33716 + (C28280 + C28281) * C50854) *
                C50932 +
            ((C25086 + C25087) * C33715 + (C25088 + C25089) * C33713 +
             (C28072 + C28073) * C33716 + (C28074 + C28075) * C50854) *
                C50828) *
               C50920 -
           (((C49740 * C1087 + C50633 * C1095 + C49747 * C1088 +
              C50904 * C1096) *
                 C50854 +
             (C49740 * C1083 + C50633 * C1091 + C49747 * C1084 +
              C50904 * C1092) *
                 C33716 +
             (C28075 + C28074) * C33713 + (C28073 + C28072) * C33715) *
                C50828 +
            ((C49740 * C419 + C50633 * C431 + C49747 * C418 + C50904 * C430) *
                 C50854 +
             (C49740 * C401 + C50633 * C415 + C49747 * C400 + C50904 * C414) *
                 C33716 +
             (C28281 + C28280) * C33713 + (C28279 + C28278) * C33715) *
                C50932) *
               C50757) *
              C50677 * C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C33715 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C33713 +
            (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
               C50932 +
           ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
            C28540 * C33716 + C28541 * C50854) *
               C50828) *
              C50693 * C50677 * C113 -
          ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
            (C24757 + C24756) * C33715) *
               C50828 +
           ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C33713 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C33715) *
               C50932) *
              C50693 * C50677 * C114 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C33715 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C33713 +
            (C28278 + C28279) * C33716 + (C28280 + C28281) * C50854) *
               C50932 +
           ((C25086 + C25087) * C33715 + (C25088 + C25089) * C33713 +
            (C28072 + C28073) * C33716 + (C28074 + C28075) * C50854) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C49740 * C788 + C50633 * C794 + C49747 * C787 + C50904 * C793) *
                C50854 +
            (C49740 * C779 + C50633 * C789 + C49747 * C778 + C50904 * C783) *
                C33716 +
            (C49740 * C280 + C50633 * C291 + C49747 * C263 + C50904 * C283) *
                C33713 +
            (C49740 * C261 + C50633 * C279 + C49747 * C253 + C50904 * C267) *
                C33715) *
               C50828 +
           ((C49740 * C421 + C50633 * C432 + C49747 * C404 + C50904 * C424) *
                C50854 +
            (C49740 * C402 + C50633 * C420 + C49747 * C394 + C50904 * C408) *
                C33716 +
            (C49740 * C137 + C50633 * C147 + C49747 * C136 + C50904 * C146) *
                C33713 +
            (C49740 * C126 + C50633 * C138 + C49747 * C125 + C50904 * C132) *
                C33715) *
               C50932) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50693 * C248 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C50693 * C249 +
           ((C24768 * C33715 + C24769 * C33713 + C29728 * C33716 +
             C29729 * C50854) *
                C50932 +
            ((C24755 + C24754) * C33715 + (C24753 + C24752) * C33713 +
             (C26411 + C26412) * C33716 + (C26413 + C26414) * C50854) *
                C50828) *
               C50693 * C250) *
              C251 +
          ((((C24756 + C24757) * C33715 + (C24758 + C24759) * C33713 +
             C28544 * C33716 + C28545 * C50854) *
                C50932 +
            ((C24760 + C24761) * C33715 + (C24762 + C24763) * C33713 +
             (C25478 + C25479) * C33716 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C249 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C50693 * C248 -
           (((C49740 * C3079 + C50633 * C3083 + C49747 * C3078 +
              C50904 * C3082) *
                 C50854 +
             (C49740 * C3074 + C50633 * C3080 + C49747 * C3073 +
              C50904 * C3076) *
                 C33716 +
             (C24767 + C24766) * C33713 + (C24765 + C24764) * C33715) *
                C50828 +
            ((C25481 + C25480) * C50854 + (C25479 + C25478) * C33716 +
             C24770 * C33713 + C24771 * C33715) *
                C50932) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50693 * C50964 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C50693 * C50965 +
           ((C24768 * C33715 + C24769 * C33713 + C29728 * C33716 +
             C29729 * C50854) *
                C50932 +
            ((C24755 + C24754) * C33715 + (C24753 + C24752) * C33713 +
             (C26411 + C26412) * C33716 + (C26413 + C26414) * C50854) *
                C50828) *
               C50693 * C1199) *
              C50911 +
          ((((C24756 + C24757) * C33715 + (C24758 + C24759) * C33713 +
             C28544 * C33716 + C28545 * C50854) *
                C50932 +
            ((C24760 + C24761) * C33715 + (C24762 + C24763) * C33713 +
             (C25478 + C25479) * C33716 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C50965 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C50693 * C50964 -
           (((C49740 * C3079 + C50633 * C3083 + C49747 * C3078 +
              C50904 * C3082) *
                 C50854 +
             (C49740 * C3074 + C50633 * C3080 + C49747 * C3073 +
              C50904 * C3076) *
                 C33716 +
             (C24767 + C24766) * C33713 + (C24765 + C24764) * C33715) *
                C50828 +
            ((C25481 + C25480) * C50854 + (C25479 + C25478) * C33716 +
             C24770 * C33713 + C24771 * C33715) *
                C50932) *
               C50693 * C1199) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50920 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C50757) *
              C50964 +
          (((C28540 * C33715 + C28541 * C33713 + C29068 * C33716 +
             C29069 * C50854) *
                C50932 +
            (C29728 * C33715 + C29729 * C33713 + (C25909 + C25910) * C33716 +
             (C25911 + C25912) * C50854) *
                C50828) *
               C50757 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C50920) *
              C50965 +
          (((C24768 * C33715 + C24769 * C33713 + C29728 * C33716 +
             C29729 * C50854) *
                C50932 +
            ((C24755 + C24754) * C33715 + (C24753 + C24752) * C33713 +
             (C26411 + C26412) * C33716 + (C26413 + C26414) * C50854) *
                C50828) *
               C50920 -
           (((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 +
              C50904 * C3554) *
                 C50854 +
             (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 +
              C50904 * C3552) *
                 C33716 +
             (C26414 + C26413) * C33713 + (C26412 + C26411) * C33715) *
                C50828 +
            ((C25912 + C25911) * C50854 + (C25910 + C25909) * C33716 +
             C26399 * C33713 + C26400 * C33715) *
                C50932) *
               C50757) *
              C1199) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C33715 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C33713 +
            (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
               C50932 +
           ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
            C28540 * C33716 + C28541 * C50854) *
               C50828) *
              C50693 * C964 -
          ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
            (C24749 + C24748) * C33715) *
               C50828 +
           (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
            (C24745 + C24744) * C33715) *
               C50932) *
              C50693 * C965 +
          ((C24768 * C33715 + C24769 * C33713 + C29728 * C33716 +
            C29729 * C50854) *
               C50932 +
           ((C24755 + C24754) * C33715 + (C24753 + C24752) * C33713 +
            (C26411 + C26412) * C33716 + (C26413 + C26414) * C50854) *
               C50828) *
              C50693 * C966 -
          (((C49740 * C4067 + C50633 * C4071 + C49747 * C4068 +
             C50904 * C4072) *
                C50854 +
            (C49740 * C4065 + C50633 * C4069 + C49747 * C4066 +
             C50904 * C4070) *
                C33716 +
            (C25741 + C25740) * C33713 + (C25739 + C25738) * C33715) *
               C50828 +
           ((C26414 + C26413) * C50854 + (C26412 + C26411) * C33716 +
            C25726 * C33713 + C25727 * C33715) *
               C50932) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50693 * C893 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C50693 * C50729) *
              C895 +
          ((((C24756 + C24757) * C33715 + (C24758 + C24759) * C33713 +
             C28544 * C33716 + C28545 * C50854) *
                C50932 +
            ((C24760 + C24761) * C33715 + (C24762 + C24763) * C33713 +
             (C25478 + C25479) * C33716 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C50729 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C50693 * C893) *
              C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C33715 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C33713 +
             (C28278 + C28279) * C33716 + (C28280 + C28281) * C50854) *
                C50932 +
            ((C25086 + C25087) * C33715 + (C25088 + C25089) * C33713 +
             (C28072 + C28073) * C33716 + (C28074 + C28075) * C50854) *
                C50828) *
               C50693 * C893 -
           (((C49740 * C1434 + C50633 * C1442 + C49747 * C1435 +
              C50904 * C1443) *
                 C50854 +
             (C49740 * C1430 + C50633 * C1438 + C49747 * C1431 +
              C50904 * C1439) *
                 C33716 +
             (C25093 + C25092) * C33713 + (C25091 + C25090) * C33715) *
                C50828 +
            ((C28075 + C28074) * C50854 + (C28073 + C28072) * C33716 +
             (C25089 + C25088) * C33713 + (C25087 + C25086) * C33715) *
                C50932) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C391 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C392 +
           (((C27857 + C27856) * C33715 + (C27855 + C27854) * C33713 +
             (C30256 + C30257) * C33716 + (C30258 + C30259) * C50854) *
                C50932 +
            (C29068 * C33715 + C29069 * C33713 + (C29078 + C29079) * C33716 +
             (C29080 + C29081) * C50854) *
                C50828) *
               C393) *
              C893 +
          (((C28540 * C33715 + C28541 * C33713 + C29068 * C33716 +
             C29069 * C50854) *
                C50932 +
            (C29728 * C33715 + C29729 * C33713 + (C25909 + C25910) * C33716 +
             (C25911 + C25912) * C50854) *
                C50828) *
               C392 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C391 -
           (((C49740 * C4484 + C50633 * C4492 + C49747 * C4485 +
              C50904 * C4493) *
                 C50854 +
             (C49740 * C4480 + C50633 * C4486 + C49747 * C4481 +
              C50904 * C4487) *
                 C33716 +
             (C25912 + C25911) * C33713 + (C25910 + C25909) * C33715) *
                C50828 +
            ((C29081 + C29080) * C50854 + (C29079 + C29078) * C33716 +
             C29066 * C33713 + C29067 * C33715) *
                C50932) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                  C33715 +
              (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                  C33713 +
              (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                 C50932 +
             ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
              C28540 * C33716 + C28541 * C50854) *
                 C50828) *
                C50920 -
            ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
              C28543 * C33715) *
                 C50828 +
             ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
              (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                 C50932) *
                C50757) *
               C893 +
           (((C28540 * C33715 + C28541 * C33713 + C29068 * C33716 +
              C29069 * C50854) *
                 C50932 +
             (C29728 * C33715 + C29729 * C33713 + (C25909 + C25910) * C33716 +
              (C25911 + C25912) * C50854) *
                 C50828) *
                C50757 -
            ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
              (C24749 + C24748) * C33715) *
                 C50828 +
             (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
              (C24745 + C24744) * C33715) *
                 C50932) *
                C50920) *
               C50729) *
              C50911 +
          (((((C27858 + C27859) * C33715 + (C27860 + C27861) * C33713 +
              (C27862 + C27863) * C33716 + (C27864 + C27865) * C50854) *
                 C50932 +
             (C28544 * C33715 + C28545 * C33713 + (C27866 + C27867) * C33716 +
              (C27868 + C27869) * C50854) *
                 C50828) *
                C50757 -
            ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
              (C24757 + C24756) * C33715) *
                 C50828 +
             ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
              (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                  C33713 +
              (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                  C33715) *
                 C50932) *
                C50920) *
               C893 +
           ((((C24756 + C24757) * C33715 + (C24758 + C24759) * C33713 +
              C28544 * C33716 + C28545 * C50854) *
                 C50932 +
             ((C24760 + C24761) * C33715 + (C24762 + C24763) * C33713 +
              (C25478 + C25479) * C33716 + (C25480 + C25481) * C50854) *
                 C50828) *
                C50920 -
            (((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
               C50904 * C2560) *
                  C50854 +
              (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
               C50904 * C2554) *
                  C33716 +
              (C25481 + C25480) * C33713 + (C25479 + C25478) * C33715) *
                 C50828 +
             ((C27869 + C27868) * C50854 + (C27867 + C27866) * C33716 +
              C28546 * C33713 + C28547 * C33715) *
                 C50932) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50693 * C893 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C50693 * C50729) *
              C895 +
          ((((C24756 + C24757) * C33715 + (C24758 + C24759) * C33713 +
             C28544 * C33716 + C28545 * C50854) *
                C50932 +
            ((C24760 + C24761) * C33715 + (C24762 + C24763) * C33713 +
             (C25478 + C25479) * C33716 + (C25480 + C25481) * C50854) *
                C50828) *
               C50693 * C50729 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C50693 * C893) *
              C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C33715 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C33713 +
             (C28278 + C28279) * C33716 + (C28280 + C28281) * C50854) *
                C50932 +
            ((C25086 + C25087) * C33715 + (C25088 + C25089) * C33713 +
             (C28072 + C28073) * C33716 + (C28074 + C28075) * C50854) *
                C50828) *
               C50693 * C893 -
           (((C49740 * C1434 + C50633 * C1442 + C49747 * C1435 +
              C50904 * C1443) *
                 C50854 +
             (C49740 * C1430 + C50633 * C1438 + C49747 * C1431 +
              C50904 * C1439) *
                 C33716 +
             (C25093 + C25092) * C33713 + (C25091 + C25090) * C33715) *
                C50828 +
            ((C28075 + C28074) * C50854 + (C28073 + C28072) * C33716 +
             (C25089 + C25088) * C33713 + (C25087 + C25086) * C33715) *
                C50932) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C33715 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C33713 +
            (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
               C50932 +
           ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
            C28540 * C33716 + C28541 * C50854) *
               C50828) *
              C50693 * C964 -
          ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
            (C24749 + C24748) * C33715) *
               C50828 +
           (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
            (C24745 + C24744) * C33715) *
               C50932) *
              C50693 * C965 +
          ((C24768 * C33715 + C24769 * C33713 + C29728 * C33716 +
            C29729 * C50854) *
               C50932 +
           ((C24755 + C24754) * C33715 + (C24753 + C24752) * C33713 +
            (C26411 + C26412) * C33716 + (C26413 + C26414) * C50854) *
               C50828) *
              C50693 * C966 -
          (((C49740 * C4067 + C50633 * C4071 + C49747 * C4068 +
             C50904 * C4072) *
                C50854 +
            (C49740 * C4065 + C50633 * C4069 + C49747 * C4066 +
             C50904 * C4070) *
                C33716 +
            (C25741 + C25740) * C33713 + (C25739 + C25738) * C33715) *
               C50828 +
           ((C26414 + C26413) * C50854 + (C26412 + C26411) * C33716 +
            C25726 * C33713 + C25727 * C33715) *
               C50932) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                  C33715 +
              (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                  C33713 +
              (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                 C50932 +
             ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
              C28540 * C33716 + C28541 * C50854) *
                 C50828) *
                C1544 -
            ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
              C28543 * C33715) *
                 C50828 +
             ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
              (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                 C50932) *
                C50757) *
               C50919 +
           (((C28540 * C33715 + C28541 * C33713 + C29068 * C33716 +
              C29069 * C50854) *
                 C50932 +
             (C29728 * C33715 + C29729 * C33713 + (C25909 + C25910) * C33716 +
              (C25911 + C25912) * C50854) *
                 C50828) *
                C50757 -
            ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
              (C24749 + C24748) * C33715) *
                 C50828 +
             (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
              (C24745 + C24744) * C33715) *
                 C50932) *
                C1544) *
               C50729) *
              C50911 +
          (((((C27858 + C27859) * C33715 + (C27860 + C27861) * C33713 +
              (C27862 + C27863) * C33716 + (C27864 + C27865) * C50854) *
                 C50932 +
             (C28544 * C33715 + C28545 * C33713 + (C27866 + C27867) * C33716 +
              (C27868 + C27869) * C50854) *
                 C50828) *
                C50757 -
            ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
              (C24757 + C24756) * C33715) *
                 C50828 +
             ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
              (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                  C33713 +
              (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                  C33715) *
                 C50932) *
                C1544) *
               C50919 +
           ((((C24756 + C24757) * C33715 + (C24758 + C24759) * C33713 +
              C28544 * C33716 + C28545 * C50854) *
                 C50932 +
             ((C24760 + C24761) * C33715 + (C24762 + C24763) * C33713 +
              (C25478 + C25479) * C33716 + (C25480 + C25481) * C50854) *
                 C50828) *
                C1544 -
            (((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
               C50904 * C2560) *
                  C50854 +
              (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
               C50904 * C2554) *
                  C33716 +
              (C25481 + C25480) * C33713 + (C25479 + C25478) * C33715) *
                 C50828 +
             ((C27869 + C27868) * C50854 + (C27867 + C27866) * C33716 +
              C28546 * C33713 + C28547 * C33715) *
                 C50932) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50966 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C50967 +
           (((C27857 + C27856) * C33715 + (C27855 + C27854) * C33713 +
             (C30256 + C30257) * C33716 + (C30258 + C30259) * C50854) *
                C50932 +
            (C29068 * C33715 + C29069 * C33713 + (C29078 + C29079) * C33716 +
             (C29080 + C29081) * C50854) *
                C50828) *
               C1960) *
              C50919 +
          (((C28540 * C33715 + C28541 * C33713 + C29068 * C33716 +
             C29069 * C50854) *
                C50932 +
            (C29728 * C33715 + C29729 * C33713 + (C25909 + C25910) * C33716 +
             (C25911 + C25912) * C50854) *
                C50828) *
               C50967 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C50966 -
           (((C49740 * C4484 + C50633 * C4492 + C49747 * C4485 +
              C50904 * C4493) *
                 C50854 +
             (C49740 * C4480 + C50633 * C4486 + C49747 * C4481 +
              C50904 * C4487) *
                 C33716 +
             (C25912 + C25911) * C33713 + (C25910 + C25909) * C33715) *
                C50828 +
            ((C29081 + C29080) * C50854 + (C29079 + C29078) * C33716 +
             C29066 * C33713 + C29067 * C33715) *
                C50932) *
               C1960) *
              C50729) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C1544 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C50757) *
              C248 +
          (((C28540 * C33715 + C28541 * C33713 + C29068 * C33716 +
             C29069 * C50854) *
                C50932 +
            (C29728 * C33715 + C29729 * C33713 + (C25909 + C25910) * C33716 +
             (C25911 + C25912) * C50854) *
                C50828) *
               C50757 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C1544) *
              C249 +
          (((C24768 * C33715 + C24769 * C33713 + C29728 * C33716 +
             C29729 * C50854) *
                C50932 +
            ((C24755 + C24754) * C33715 + (C24753 + C24752) * C33713 +
             (C26411 + C26412) * C33716 + (C26413 + C26414) * C50854) *
                C50828) *
               C1544 -
           (((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 +
              C50904 * C3554) *
                 C50854 +
             (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 +
              C50904 * C3552) *
                 C33716 +
             (C26414 + C26413) * C33713 + (C26412 + C26411) * C33715) *
                C50828 +
            ((C25912 + C25911) * C50854 + (C25910 + C25909) * C33716 +
             C26399 * C33713 + C26400 * C33715) *
                C50932) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C1544 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C50757) *
              C50677 * C895 +
          ((((C27858 + C27859) * C33715 + (C27860 + C27861) * C33713 +
             (C27862 + C27863) * C33716 + (C27864 + C27865) * C50854) *
                C50932 +
            (C28544 * C33715 + C28545 * C33713 + (C27866 + C27867) * C33716 +
             (C27868 + C27869) * C50854) *
                C50828) *
               C50757 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C1544) *
              C50677 * C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C33715 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C33713 +
             (C28278 + C28279) * C33716 + (C28280 + C28281) * C50854) *
                C50932 +
            ((C25086 + C25087) * C33715 + (C25088 + C25089) * C33713 +
             (C28072 + C28073) * C33716 + (C28074 + C28075) * C50854) *
                C50828) *
               C1544 -
           (((C49740 * C1087 + C50633 * C1095 + C49747 * C1088 +
              C50904 * C1096) *
                 C50854 +
             (C49740 * C1083 + C50633 * C1091 + C49747 * C1084 +
              C50904 * C1092) *
                 C33716 +
             (C28075 + C28074) * C33713 + (C28073 + C28072) * C33715) *
                C50828 +
            ((C49740 * C419 + C50633 * C431 + C49747 * C418 + C50904 * C430) *
                 C50854 +
             (C49740 * C401 + C50633 * C415 + C49747 * C400 + C50904 * C414) *
                 C33716 +
             (C28281 + C28280) * C33713 + (C28279 + C28278) * C33715) *
                C50932) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C33715 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C33713 +
            (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
               C50932 +
           ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
            C28540 * C33716 + C28541 * C50854) *
               C50828) *
              C1710 -
          ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
            C28543 * C33715) *
               C50828 +
           ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
            (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
               C50932) *
              C1711 +
          (((C27857 + C27856) * C33715 + (C27855 + C27854) * C33713 +
            (C30256 + C30257) * C33716 + (C30258 + C30259) * C50854) *
               C50932 +
           (C29068 * C33715 + C29069 * C33713 + (C29078 + C29079) * C33716 +
            (C29080 + C29081) * C50854) *
               C50828) *
              C1712 -
          (((C49740 * C6384 + C50633 * C6388 + C49747 * C6385 +
             C50904 * C6389) *
                C50854 +
            (C49740 * C6382 + C50633 * C6386 + C49747 * C6383 +
             C50904 * C6387) *
                C33716 +
            (C29081 + C29080) * C33713 + (C29079 + C29078) * C33715) *
               C50828 +
           ((C49740 * C5384 + C50633 * C5388 + C49747 * C5383 +
             C50904 * C5387) *
                C50854 +
            (C49740 * C5379 + C50633 * C5382 + C49747 * C5378 +
             C50904 * C5381) *
                C33716 +
            (C30259 + C30258) * C33713 + (C30257 + C30256) * C33715) *
               C50932) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C50966 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C50967 +
           (((C27857 + C27856) * C33715 + (C27855 + C27854) * C33713 +
             (C30256 + C30257) * C33716 + (C30258 + C30259) * C50854) *
                C50932 +
            (C29068 * C33715 + C29069 * C33713 + (C29078 + C29079) * C33716 +
             (C29080 + C29081) * C50854) *
                C50828) *
               C1960) *
              C50677 * C50911 +
          ((((C27858 + C27859) * C33715 + (C27860 + C27861) * C33713 +
             (C27862 + C27863) * C33716 + (C27864 + C27865) * C50854) *
                C50932 +
            (C28544 * C33715 + C28545 * C33713 + (C27866 + C27867) * C33716 +
             (C27868 + C27869) * C50854) *
                C50828) *
               C50967 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C50966 -
           (((C49740 * C5977 + C50633 * C5979 + C49747 * C4488 +
              C50904 * C4494) *
                 C50854 +
             (C49740 * C5976 + C50633 * C5978 + C49747 * C4482 +
              C50904 * C4490) *
                 C33716 +
             (C27869 + C27868) * C33713 + (C27867 + C27866) * C33715) *
                C50828 +
            ((C49740 * C1719 + C50633 * C1727 + C49747 * C1720 +
              C50904 * C1728) *
                 C50854 +
             (C49740 * C1715 + C50633 * C1723 + C49747 * C1716 +
              C50904 * C1724) *
                 C33716 +
             (C27865 + C27864) * C33713 + (C27863 + C27862) * C33715) *
                C50932) *
               C1960) *
              C50677 * C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C1544 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C50757) *
              C50677 * C895 +
          ((((C27858 + C27859) * C33715 + (C27860 + C27861) * C33713 +
             (C27862 + C27863) * C33716 + (C27864 + C27865) * C50854) *
                C50932 +
            (C28544 * C33715 + C28545 * C33713 + (C27866 + C27867) * C33716 +
             (C27868 + C27869) * C50854) *
                C50828) *
               C50757 -
           ((C28546 * C50854 + C28547 * C33716 + (C24759 + C24758) * C33713 +
             (C24757 + C24756) * C33715) *
                C50828 +
            ((C27861 + C27860) * C50854 + (C27859 + C27858) * C33716 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C33713 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C33715) *
                C50932) *
               C1544) *
              C50677 * C896 +
          ((((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                 C33715 +
             (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                 C33713 +
             (C28278 + C28279) * C33716 + (C28280 + C28281) * C50854) *
                C50932 +
            ((C25086 + C25087) * C33715 + (C25088 + C25089) * C33713 +
             (C28072 + C28073) * C33716 + (C28074 + C28075) * C50854) *
                C50828) *
               C1544 -
           (((C49740 * C1087 + C50633 * C1095 + C49747 * C1088 +
              C50904 * C1096) *
                 C50854 +
             (C49740 * C1083 + C50633 * C1091 + C49747 * C1084 +
              C50904 * C1092) *
                 C33716 +
             (C28075 + C28074) * C33713 + (C28073 + C28072) * C33715) *
                C50828 +
            ((C49740 * C419 + C50633 * C431 + C49747 * C418 + C50904 * C430) *
                 C50854 +
             (C49740 * C401 + C50633 * C415 + C49747 * C400 + C50904 * C414) *
                 C33716 +
             (C28281 + C28280) * C33713 + (C28279 + C28278) * C33715) *
                C50932) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C33715 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C33713 +
             (C27850 + C27851) * C33716 + (C27852 + C27853) * C50854) *
                C50932 +
            ((C24744 + C24745) * C33715 + (C24746 + C24747) * C33713 +
             C28540 * C33716 + C28541 * C50854) *
                C50828) *
               C1544 -
           ((C29066 * C50854 + C29067 * C33716 + C28542 * C33713 +
             C28543 * C33715) *
                C50828 +
            ((C27854 + C27855) * C50854 + (C27856 + C27857) * C33716 +
             (C27853 + C27852) * C33713 + (C27851 + C27850) * C33715) *
                C50932) *
               C50757) *
              C248 +
          (((C28540 * C33715 + C28541 * C33713 + C29068 * C33716 +
             C29069 * C50854) *
                C50932 +
            (C29728 * C33715 + C29729 * C33713 + (C25909 + C25910) * C33716 +
             (C25911 + C25912) * C50854) *
                C50828) *
               C50757 -
           ((C26399 * C50854 + C26400 * C33716 + (C24751 + C24750) * C33713 +
             (C24749 + C24748) * C33715) *
                C50828 +
            (C28542 * C50854 + C28543 * C33716 + (C24747 + C24746) * C33713 +
             (C24745 + C24744) * C33715) *
                C50932) *
               C1544) *
              C249 +
          (((C24768 * C33715 + C24769 * C33713 + C29728 * C33716 +
             C29729 * C50854) *
                C50932 +
            ((C24755 + C24754) * C33715 + (C24753 + C24752) * C33713 +
             (C26411 + C26412) * C33716 + (C26413 + C26414) * C50854) *
                C50828) *
               C1544 -
           (((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 +
              C50904 * C3554) *
                 C50854 +
             (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 +
              C50904 * C3552) *
                 C33716 +
             (C26414 + C26413) * C33713 + (C26412 + C26411) * C33715) *
                C50828 +
            ((C25912 + C25911) * C50854 + (C25910 + C25909) * C33716 +
             C26399 * C33713 + C26400 * C33715) *
                C50932) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50693 * C50919 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C50693 * C50729) *
              C50962 +
          (((C47278 + C47279 + C47280 + C47281 + C47282 + C47283) * C50932 +
            (C47284 + C47285 + C47286 + C47287 + C47288 + C47289) * C50828) *
               C50693 * C50729 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C50693 * C50919) *
              C50963 +
          ((((C19747 * C124 + C50628 * C131) * C44446 +
             (C19747 * C135 + C50628 * C145) * C50970 + C22439 * C44447 +
             C22440 * C50971 + C22441 * C44448 + C22442 * C44445) *
                C50932 +
            (C47582 + C47583 + C47584 + C47585 + C47586 + C47587) * C50828) *
               C50693 * C50919 -
           (((C19747 * C2557 + C50628 * C2561) * C44445 +
             (C19747 * C2552 + C50628 * C2558) * C44448 + C31483 * C50971 +
             C31482 * C44447 + C20126 * C50970 + C20125 * C44446) *
                C50828 +
            (C47587 + C47586 + C47585 + C47584 + C47583 + C47582) * C50932) *
               C50693 * C50729) *
              C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C44446 +
              (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
              C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                 C50932 +
             (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
                C50920 -
            ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
             (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
              C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                 C50932) *
                C50757) *
               C50919 +
           (((C47933 + C47932 + C47931 + C47930 + C47929 + C47928) * C50932 +
             (C20390 * C44446 + C20389 * C50970 + C20705 * C44447 +
              C20706 * C50971 + C23063 * C44448 + C23064 * C44445) *
                 C50828) *
                C50757 -
            ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
             (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
                C50920) *
               C50729) *
              C251 +
          ((((C22113 * C44446 + C22114 * C50970 + C22115 * C44447 +
              C22116 * C50971 + C22117 * C44448 + C22118 * C44445) *
                 C50932 +
             (C47934 + C47935 + C47936 + C47937 + C47938 + C47939) * C50828) *
                C50757 -
            ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
             (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
              C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
              (C19747 * C123 + C50628 * C130) * C44446) *
                 C50932) *
                C50920) *
               C50919 +
           (((C47278 + C47279 + C47280 + C47281 + C47282 + C47283) * C50932 +
             (C47284 + C47285 + C47286 + C47287 + C47288 + C47289) * C50828) *
                C50920 -
            (((C19747 * C4484 + C50628 * C4492) * C44445 +
              (C19747 * C4480 + C50628 * C4486) * C44448 + C21922 * C50971 +
              C21921 * C44447 + C20396 * C50970 + C20395 * C44446) *
                 C50828 +
             (C47939 + C47938 + C47937 + C47936 + C47935 + C47934) * C50932) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50693 * C248 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C50693 * C249 +
           ((C47277 + C47276 + C47275 + C47274 + C47273 + C47272) * C50932 +
            (C19883 * C44446 + C19884 * C50970 + C20388 * C44447 +
             C20387 * C50971 + C20707 * C44448 + C20708 * C44445) *
                C50828) *
               C50693 * C250) *
              C251 +
          (((C47278 + C47279 + C47280 + C47281 + C47282 + C47283) * C50932 +
            (C47284 + C47285 + C47286 + C47287 + C47288 + C47289) * C50828) *
               C50693 * C249 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C50693 * C248 -
           (((C19747 * C3549 + C50628 * C3553) * C44445 +
             (C19747 * C3547 + C50628 * C3551) * C44448 + C20398 * C50971 +
             C20397 * C44447 + C19892 * C50970 + C19891 * C44446) *
                C50828 +
            (C47289 + C47288 + C47287 + C47286 + C47285 + C47284) * C50932) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C44446 +
            (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
            C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
               C50932 +
           (C19879 * C44446 + C19880 * C50970 + C20392 * C44447 +
            C20391 * C50971 + C20703 * C44448 + C20704 * C44445) *
               C50828) *
              C50693 * C50677 * C113 -
          ((C21920 * C44445 + C21919 * C44448 + C20394 * C50971 +
            C20393 * C44447 + C19888 * C50970 + C19887 * C44446) *
               C50828 +
           (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
            C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
            (C19747 * C123 + C50628 * C130) * C44446) *
               C50932) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C44446 +
            (C19747 * C135 + C50628 * C145) * C50970 + C22439 * C44447 +
            C22440 * C50971 + C22441 * C44448 + C22442 * C44445) *
               C50932 +
           (C20123 * C44446 + C20124 * C50970 + C22277 * C44447 +
            C22278 * C50971 + C22279 * C44448 + C22280 * C44445) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C19747 * C1087 + C50628 * C1095) * C44445 +
            (C19747 * C1083 + C50628 * C1091) * C44448 +
            (C19747 * C787 + C50628 * C793) * C50971 +
            (C19747 * C778 + C50628 * C783) * C44447 +
            (C19747 * C263 + C50628 * C283) * C50970 +
            (C19747 * C253 + C50628 * C267) * C44446) *
               C50828 +
           ((C19747 * C419 + C50628 * C431) * C44445 +
            (C19747 * C401 + C50628 * C415) * C44448 +
            (C19747 * C404 + C50628 * C424) * C50971 +
            (C19747 * C394 + C50628 * C408) * C44447 +
            (C19747 * C136 + C50628 * C146) * C50970 +
            (C19747 * C125 + C50628 * C132) * C44446) *
               C50932) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C391 -
           ((C22109 * C44445 + C22110 * C44448 + C20704 * C50971 +
             C20703 * C44447 + C20391 * C50970 + C20392 * C44446) *
                C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C392 +
           ((C22107 * C44446 + C22108 * C50970 + C22112 * C44447 +
             C22111 * C50971 + C23957 * C44448 + C23958 * C44445) *
                C50932 +
            (C20703 * C44446 + C20704 * C50970 + C22110 * C44447 +
             C22109 * C50971 + C23061 * C44448 + C23062 * C44445) *
                C50828) *
               C393) *
              C50677 * C251 +
          (((C22113 * C44446 + C22114 * C50970 + C22115 * C44447 +
             C22116 * C50971 + C22117 * C44448 + C22118 * C44445) *
                C50932 +
            (C20393 * C44446 + C20394 * C50970 + C21919 * C44447 +
             C21920 * C50971 + C22119 * C44448 + C22120 * C44445) *
                C50828) *
               C392 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C391 -
           (((C19747 * C6384 + C50628 * C6388) * C44445 +
             (C19747 * C6382 + C50628 * C6386) * C44448 + C22120 * C50971 +
             C22119 * C44447 + C21920 * C50970 + C21919 * C44446) *
                C50828 +
            (C39335 * C44445 + C39334 * C44448 + C22118 * C50971 +
             C22117 * C44447 + C22116 * C50970 + C22115 * C44446) *
                C50932) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50920 -
           ((C22109 * C44445 + C22110 * C44448 + C20704 * C50971 +
             C20703 * C44447 + C20391 * C50970 + C20392 * C44446) *
                C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C50757) *
              C50677 * C50962 +
          (((C22113 * C44446 + C22114 * C50970 + C22115 * C44447 +
             C22116 * C50971 + C22117 * C44448 + C22118 * C44445) *
                C50932 +
            (C20393 * C44446 + C20394 * C50970 + C21919 * C44447 +
             C21920 * C50971 + C22119 * C44448 + C22120 * C44445) *
                C50828) *
               C50757 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C50920) *
              C50677 * C50963 +
          ((((C19747 * C124 + C50628 * C131) * C44446 +
             (C19747 * C135 + C50628 * C145) * C50970 + C22439 * C44447 +
             C22440 * C50971 + C22441 * C44448 + C22442 * C44445) *
                C50932 +
            (C47582 + C47583 + C47584 + C47585 + C47586 + C47587) * C50828) *
               C50920 -
           (((C19747 * C5977 + C50628 * C5979) * C44445 +
             (C19747 * C5976 + C50628 * C5978) * C44448 + C22280 * C50971 +
             C22279 * C44447 + C22278 * C50970 + C22277 * C44446) *
                C50828 +
            (C39537 * C44445 + C39536 * C44448 + C22442 * C50971 +
             C22441 * C44447 + C22440 * C50970 + C22439 * C44446) *
                C50932) *
               C50757) *
              C50677 * C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C44446 +
            (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
            C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
               C50932 +
           (C19879 * C44446 + C19880 * C50970 + C20392 * C44447 +
            C20391 * C50971 + C20703 * C44448 + C20704 * C44445) *
               C50828) *
              C50693 * C50677 * C113 -
          ((C21920 * C44445 + C21919 * C44448 + C20394 * C50971 +
            C20393 * C44447 + C19888 * C50970 + C19887 * C44446) *
               C50828 +
           (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
            C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
            (C19747 * C123 + C50628 * C130) * C44446) *
               C50932) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C44446 +
            (C19747 * C135 + C50628 * C145) * C50970 + C22439 * C44447 +
            C22440 * C50971 + C22441 * C44448 + C22442 * C44445) *
               C50932 +
           (C20123 * C44446 + C20124 * C50970 + C22277 * C44447 +
            C22278 * C50971 + C22279 * C44448 + C22280 * C44445) *
               C50828) *
              C50693 * C50677 * C115 -
          (((C19747 * C1087 + C50628 * C1095) * C44445 +
            (C19747 * C1083 + C50628 * C1091) * C44448 +
            (C19747 * C787 + C50628 * C793) * C50971 +
            (C19747 * C778 + C50628 * C783) * C44447 +
            (C19747 * C263 + C50628 * C283) * C50970 +
            (C19747 * C253 + C50628 * C267) * C44446) *
               C50828 +
           ((C19747 * C419 + C50628 * C431) * C44445 +
            (C19747 * C401 + C50628 * C415) * C44448 +
            (C19747 * C404 + C50628 * C424) * C50971 +
            (C19747 * C394 + C50628 * C408) * C44447 +
            (C19747 * C136 + C50628 * C146) * C50970 +
            (C19747 * C125 + C50628 * C132) * C44446) *
               C50932) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50693 * C248 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C50693 * C249 +
           ((C47277 + C47276 + C47275 + C47274 + C47273 + C47272) * C50932 +
            (C19883 * C44446 + C19884 * C50970 + C20388 * C44447 +
             C20387 * C50971 + C20707 * C44448 + C20708 * C44445) *
                C50828) *
               C50693 * C250) *
              C251 +
          (((C47278 + C47279 + C47280 + C47281 + C47282 + C47283) * C50932 +
            (C47284 + C47285 + C47286 + C47287 + C47288 + C47289) * C50828) *
               C50693 * C249 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C50693 * C248 -
           (((C19747 * C3549 + C50628 * C3553) * C44445 +
             (C19747 * C3547 + C50628 * C3551) * C44448 + C20398 * C50971 +
             C20397 * C44447 + C19892 * C50970 + C19891 * C44446) *
                C50828 +
            (C47289 + C47288 + C47287 + C47286 + C47285 + C47284) * C50932) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50693 * C50964 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C50693 * C50965 +
           ((C47277 + C47276 + C47275 + C47274 + C47273 + C47272) * C50932 +
            (C48184 + C48185 + C48186 + C48187 + C48188 + C48189) * C50828) *
               C50693 * C1199) *
              C50911 +
          (((C47278 + C47279 + C47280 + C47281 + C47282 + C47283) * C50932 +
            (C47284 + C47285 + C47286 + C47287 + C47288 + C47289) * C50828) *
               C50693 * C50965 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C50693 * C50964 -
           (((C19747 * C3549 + C50628 * C3553) * C44445 +
             (C19747 * C3547 + C50628 * C3551) * C44448 + C20398 * C50971 +
             C20397 * C44447 + C19892 * C50970 + C19891 * C44446) *
                C50828 +
            (C47289 + C47288 + C47287 + C47286 + C47285 + C47284) * C50932) *
               C50693 * C1199) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50920 -
           ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C50757) *
              C50964 +
          (((C47933 + C47932 + C47931 + C47930 + C47929 + C47928) * C50932 +
            (C48828 + C48829 + C48830 + C48831 + C48832 + C48833) * C50828) *
               C50757 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C50920) *
              C50965 +
          (((C47277 + C47276 + C47275 + C47274 + C47273 + C47272) * C50932 +
            (C48184 + C48185 + C48186 + C48187 + C48188 + C48189) * C50828) *
               C50920 -
           (((C19747 * C21317 + C50628 * C21319) * C44445 +
             (C19747 * C21316 + C50628 * C21318) * C44448 + C20708 * C50971 +
             C20707 * C44447 + C20387 * C50970 + C20388 * C44446) *
                C50828 +
            (C48833 + C48832 + C48831 + C48830 + C48829 + C48828) * C50932) *
               C50757) *
              C1199) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C44446 +
            (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
            C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
               C50932 +
           (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
              C50693 * C964 -
          ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
           (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
              C50693 * C965 +
          ((C47277 + C47276 + C47275 + C47274 + C47273 + C47272) * C50932 +
           (C48184 + C48185 + C48186 + C48187 + C48188 + C48189) * C50828) *
              C50693 * C966 -
          (((C19747 * C20687 + C50628 * C20689) * C44445 +
            (C19747 * C20686 + C50628 * C20688) * C44448 + C21052 * C50971 +
            C21051 * C44447 + C19885 * C50970 + C19886 * C44446) *
               C50828 +
           (C48189 + C48188 + C48187 + C48186 + C48185 + C48184) * C50932) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50693 * C893 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C50693 * C50729) *
              C895 +
          (((C47278 + C47279 + C47280 + C47281 + C47282 + C47283) * C50932 +
            (C47284 + C47285 + C47286 + C47287 + C47288 + C47289) * C50828) *
               C50693 * C50729 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C44446 +
             (C19747 * C135 + C50628 * C145) * C50970 + C22439 * C44447 +
             C22440 * C50971 + C22441 * C44448 + C22442 * C44445) *
                C50932 +
            (C47582 + C47583 + C47584 + C47585 + C47586 + C47587) * C50828) *
               C50693 * C893 -
           (((C19747 * C2557 + C50628 * C2561) * C44445 +
             (C19747 * C2552 + C50628 * C2558) * C44448 + C31483 * C50971 +
             C31482 * C44447 + C20126 * C50970 + C20125 * C44446) *
                C50828 +
            (C47587 + C47586 + C47585 + C47584 + C47583 + C47582) * C50932) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C391 -
           ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C392 +
           ((C22107 * C44446 + C22108 * C50970 + C22112 * C44447 +
             C22111 * C50971 + C23957 * C44448 + C23958 * C44445) *
                C50932 +
            (C48336 + C48337 + C48338 + C48339 + C48340 + C48341) * C50828) *
               C393) *
              C893 +
          (((C47933 + C47932 + C47931 + C47930 + C47929 + C47928) * C50932 +
            (C20390 * C44446 + C20389 * C50970 + C20705 * C44447 +
             C20706 * C50971 + C23063 * C44448 + C23064 * C44445) *
                C50828) *
               C392 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C391 -
           (((C19747 * C23045 + C50628 * C23047) * C44445 +
             (C19747 * C23044 + C50628 * C23046) * C44448 + C23064 * C50971 +
             C23063 * C44447 + C20706 * C50970 + C20705 * C44446) *
                C50828 +
            (C48341 + C48340 + C48339 + C48338 + C48337 + C48336) * C50932) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C44446 +
              (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
              C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                 C50932 +
             (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
                C50920 -
            ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
             (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
              C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                 C50932) *
                C50757) *
               C893 +
           (((C47933 + C47932 + C47931 + C47930 + C47929 + C47928) * C50932 +
             (C20390 * C44446 + C20389 * C50970 + C20705 * C44447 +
              C20706 * C50971 + C23063 * C44448 + C23064 * C44445) *
                 C50828) *
                C50757 -
            ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
             (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
                C50920) *
               C50729) *
              C50911 +
          ((((C22113 * C44446 + C22114 * C50970 + C22115 * C44447 +
              C22116 * C50971 + C22117 * C44448 + C22118 * C44445) *
                 C50932 +
             (C47934 + C47935 + C47936 + C47937 + C47938 + C47939) * C50828) *
                C50757 -
            ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
             (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
              C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
              (C19747 * C123 + C50628 * C130) * C44446) *
                 C50932) *
                C50920) *
               C893 +
           (((C47278 + C47279 + C47280 + C47281 + C47282 + C47283) * C50932 +
             (C47284 + C47285 + C47286 + C47287 + C47288 + C47289) * C50828) *
                C50920 -
            (((C19747 * C4484 + C50628 * C4492) * C44445 +
              (C19747 * C4480 + C50628 * C4486) * C44448 + C21922 * C50971 +
              C21921 * C44447 + C20396 * C50970 + C20395 * C44446) *
                 C50828 +
             (C47939 + C47938 + C47937 + C47936 + C47935 + C47934) * C50932) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50693 * C893 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C50693 * C50729) *
              C895 +
          (((C47278 + C47279 + C47280 + C47281 + C47282 + C47283) * C50932 +
            (C47284 + C47285 + C47286 + C47287 + C47288 + C47289) * C50828) *
               C50693 * C50729 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C44446 +
             (C19747 * C135 + C50628 * C145) * C50970 + C22439 * C44447 +
             C22440 * C50971 + C22441 * C44448 + C22442 * C44445) *
                C50932 +
            (C47582 + C47583 + C47584 + C47585 + C47586 + C47587) * C50828) *
               C50693 * C893 -
           (((C19747 * C2557 + C50628 * C2561) * C44445 +
             (C19747 * C2552 + C50628 * C2558) * C44448 + C31483 * C50971 +
             C31482 * C44447 + C20126 * C50970 + C20125 * C44446) *
                C50828 +
            (C47587 + C47586 + C47585 + C47584 + C47583 + C47582) * C50932) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C44446 +
            (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
            C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
               C50932 +
           (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
              C50693 * C964 -
          ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
           (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
              C50693 * C965 +
          ((C47277 + C47276 + C47275 + C47274 + C47273 + C47272) * C50932 +
           (C48184 + C48185 + C48186 + C48187 + C48188 + C48189) * C50828) *
              C50693 * C966 -
          (((C19747 * C20687 + C50628 * C20689) * C44445 +
            (C19747 * C20686 + C50628 * C20688) * C44448 + C21052 * C50971 +
            C21051 * C44447 + C19885 * C50970 + C19886 * C44446) *
               C50828 +
           (C48189 + C48188 + C48187 + C48186 + C48185 + C48184) * C50932) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C44446 +
              (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
              C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                 C50932 +
             (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
                C1544 -
            ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
             (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
              C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                 C50932) *
                C50757) *
               C50919 +
           (((C47933 + C47932 + C47931 + C47930 + C47929 + C47928) * C50932 +
             (C48828 + C48829 + C48830 + C48831 + C48832 + C48833) * C50828) *
                C50757 -
            ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
             (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
                C1544) *
               C50729) *
              C50911 +
          ((((C22113 * C44446 + C22114 * C50970 + C22115 * C44447 +
              C22116 * C50971 + C22117 * C44448 + C22118 * C44445) *
                 C50932 +
             (C47934 + C47935 + C47936 + C47937 + C47938 + C47939) * C50828) *
                C50757 -
            ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
             (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
              C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
              (C19747 * C123 + C50628 * C130) * C44446) *
                 C50932) *
                C1544) *
               C50919 +
           (((C47278 + C47279 + C47280 + C47281 + C47282 + C47283) * C50932 +
             (C47284 + C47285 + C47286 + C47287 + C47288 + C47289) * C50828) *
                C1544 -
            (((C19747 * C4484 + C50628 * C4492) * C44445 +
              (C19747 * C4480 + C50628 * C4486) * C44448 + C21922 * C50971 +
              C21921 * C44447 + C20396 * C50970 + C20395 * C44446) *
                 C50828 +
             (C47939 + C47938 + C47937 + C47936 + C47935 + C47934) * C50932) *
                C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50966 -
           ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C50967 +
           ((C22107 * C44446 + C22108 * C50970 + C22112 * C44447 +
             C22111 * C50971 + C23957 * C44448 + C23958 * C44445) *
                C50932 +
            (C48336 + C48337 + C48338 + C48339 + C48340 + C48341) * C50828) *
               C1960) *
              C50919 +
          (((C47933 + C47932 + C47931 + C47930 + C47929 + C47928) * C50932 +
            (C48828 + C48829 + C48830 + C48831 + C48832 + C48833) * C50828) *
               C50967 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C50966 -
           (((C19747 * C23045 + C50628 * C23047) * C44445 +
             (C19747 * C23044 + C50628 * C23046) * C44448 + C23064 * C50971 +
             C23063 * C44447 + C20706 * C50970 + C20705 * C44446) *
                C50828 +
            (C48341 + C48340 + C48339 + C48338 + C48337 + C48336) * C50932) *
               C1960) *
              C50729) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C1544 -
           ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C50757) *
              C248 +
          (((C47933 + C47932 + C47931 + C47930 + C47929 + C47928) * C50932 +
            (C48828 + C48829 + C48830 + C48831 + C48832 + C48833) * C50828) *
               C50757 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C1544) *
              C249 +
          (((C47277 + C47276 + C47275 + C47274 + C47273 + C47272) * C50932 +
            (C48184 + C48185 + C48186 + C48187 + C48188 + C48189) * C50828) *
               C1544 -
           (((C19747 * C21317 + C50628 * C21319) * C44445 +
             (C19747 * C21316 + C50628 * C21318) * C44448 + C20708 * C50971 +
             C20707 * C44447 + C20387 * C50970 + C20388 * C44446) *
                C50828 +
            (C48833 + C48832 + C48831 + C48830 + C48829 + C48828) * C50932) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C1544 -
           ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C44446 + C22114 * C50970 + C22115 * C44447 +
             C22116 * C50971 + C22117 * C44448 + C22118 * C44445) *
                C50932 +
            (C47934 + C47935 + C47936 + C47937 + C47938 + C47939) * C50828) *
               C50757 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C44446 +
             (C19747 * C135 + C50628 * C145) * C50970 + C22439 * C44447 +
             C22440 * C50971 + C22441 * C44448 + C22442 * C44445) *
                C50932 +
            (C47582 + C47583 + C47584 + C47585 + C47586 + C47587) * C50828) *
               C1544 -
           (((C19747 * C5977 + C50628 * C5979) * C44445 +
             (C19747 * C5976 + C50628 * C5978) * C44448 + C22280 * C50971 +
             C22279 * C44447 + C22278 * C50970 + C22277 * C44446) *
                C50828 +
            (C39537 * C44445 + C39536 * C44448 + C22442 * C50971 +
             C22441 * C44447 + C22440 * C50970 + C22439 * C44446) *
                C50932) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C44446 +
            (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
            C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
               C50932 +
           (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
              C1710 -
          ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
           (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
            C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
               C50932) *
              C1711 +
          ((C22107 * C44446 + C22108 * C50970 + C22112 * C44447 +
            C22111 * C50971 + C23957 * C44448 + C23958 * C44445) *
               C50932 +
           (C48336 + C48337 + C48338 + C48339 + C48340 + C48341) * C50828) *
              C1712 -
          (((C19747 * C23949 + C50628 * C23951) * C44445 +
            (C19747 * C23948 + C50628 * C23950) * C44448 + C23062 * C50971 +
            C23061 * C44447 + C22109 * C50970 + C22110 * C44446) *
               C50828 +
           (C40527 * C44445 + C40526 * C44448 + C23958 * C50971 +
            C23957 * C44447 + C22111 * C50970 + C22112 * C44446) *
               C50932) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C50966 -
           ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C50967 +
           ((C22107 * C44446 + C22108 * C50970 + C22112 * C44447 +
             C22111 * C50971 + C23957 * C44448 + C23958 * C44445) *
                C50932 +
            (C48336 + C48337 + C48338 + C48339 + C48340 + C48341) * C50828) *
               C1960) *
              C50677 * C50911 +
          (((C22113 * C44446 + C22114 * C50970 + C22115 * C44447 +
             C22116 * C50971 + C22117 * C44448 + C22118 * C44445) *
                C50932 +
            (C47934 + C47935 + C47936 + C47937 + C47938 + C47939) * C50828) *
               C50967 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C50966 -
           (((C19747 * C6384 + C50628 * C6388) * C44445 +
             (C19747 * C6382 + C50628 * C6386) * C44448 + C22120 * C50971 +
             C22119 * C44447 + C21920 * C50970 + C21919 * C44446) *
                C50828 +
            (C39335 * C44445 + C39334 * C44448 + C22118 * C50971 +
             C22117 * C44447 + C22116 * C50970 + C22115 * C44446) *
                C50932) *
               C1960) *
              C50677 * C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C1544 -
           ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C44446 + C22114 * C50970 + C22115 * C44447 +
             C22116 * C50971 + C22117 * C44448 + C22118 * C44445) *
                C50932 +
            (C47934 + C47935 + C47936 + C47937 + C47938 + C47939) * C50828) *
               C50757 -
           ((C47283 + C47282 + C47281 + C47280 + C47279 + C47278) * C50828 +
            (C22116 * C44445 + C22115 * C44448 + C22114 * C50971 +
             C22113 * C44447 + (C19747 * C134 + C50628 * C144) * C50970 +
             (C19747 * C123 + C50628 * C130) * C44446) *
                C50932) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C44446 +
             (C19747 * C135 + C50628 * C145) * C50970 + C22439 * C44447 +
             C22440 * C50971 + C22441 * C44448 + C22442 * C44445) *
                C50932 +
            (C47582 + C47583 + C47584 + C47585 + C47586 + C47587) * C50828) *
               C1544 -
           (((C19747 * C5977 + C50628 * C5979) * C44445 +
             (C19747 * C5976 + C50628 * C5978) * C44448 + C22280 * C50971 +
             C22279 * C44447 + C22278 * C50970 + C22277 * C44446) *
                C50828 +
            (C39537 * C44445 + C39536 * C44448 + C22442 * C50971 +
             C22441 * C44447 + C22440 * C50970 + C22439 * C44446) *
                C50932) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C44446 +
             (C19747 * C133 + C50628 * C143) * C50970 + C22105 * C44447 +
             C22106 * C50971 + C22107 * C44448 + C22108 * C44445) *
                C50932 +
            (C47266 + C47267 + C47268 + C47269 + C47270 + C47271) * C50828) *
               C1544 -
           ((C47928 + C47929 + C47930 + C47931 + C47932 + C47933) * C50828 +
            (C22111 * C44445 + C22112 * C44448 + C22108 * C50971 +
             C22107 * C44447 + C22106 * C50970 + C22105 * C44446) *
                C50932) *
               C50757) *
              C248 +
          (((C47933 + C47932 + C47931 + C47930 + C47929 + C47928) * C50932 +
            (C48828 + C48829 + C48830 + C48831 + C48832 + C48833) * C50828) *
               C50757 -
           ((C47272 + C47273 + C47274 + C47275 + C47276 + C47277) * C50828 +
            (C47271 + C47270 + C47269 + C47268 + C47267 + C47266) * C50932) *
               C1544) *
              C249 +
          (((C47277 + C47276 + C47275 + C47274 + C47273 + C47272) * C50932 +
            (C48184 + C48185 + C48186 + C48187 + C48188 + C48189) * C50828) *
               C1544 -
           (((C19747 * C21317 + C50628 * C21319) * C44445 +
             (C19747 * C21316 + C50628 * C21318) * C44448 + C20708 * C50971 +
             C20707 * C44447 + C20387 * C50970 + C20388 * C44446) *
                C50828 +
            (C48833 + C48832 + C48831 + C48830 + C48829 + C48828) * C50932) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C50919 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C50729) *
              C50962 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C50729 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C50919) *
              C50963 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C50693 * C50919 -
           (((C19747 * C3079 + C50628 * C3083) * C50854 +
             (C19747 * C3074 + C50628 * C3080) * C33716 + C20128 * C33713 +
             C20127 * C33715) *
                C2161 +
            (C36929 + C36928 + C36927 + C36926) * C2160 +
            (C36925 + C36924 + C36923 + C36922) * C2159) *
               C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50693 * C50919 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C50729) *
              C50962 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C50729 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C50919) *
              C50963 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C16963 * C395 + C16958 * C409 + C16964 * C394 + C16959 * C408 +
             C16965 * C402 + C16960 * C420) *
                C33716 +
            (C16963 * C405 + C16958 * C425 + C16964 * C404 + C16959 * C424 +
             C16965 * C421 + C16960 * C432) *
                C50854) *
               C50779 * C50693 * C50919 -
           ((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
             C16963 * C786 + C16958 * C792) *
                C50854 +
            (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
             C16963 * C777 + C16958 * C782) *
                C33716 +
            (C17494 + C17493 + C17492) * C33713 +
            (C17491 + C17490 + C17489) * C33715) *
               C50779 * C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50693 * C50919 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C50693 * C50729) *
              C50962 +
          ((C19887 * C39129 + C19888 * C39125 + C20393 * C39130 +
            C20394 * C39126 + C21919 * C39131 + C21920 * C39127 +
            C22119 * C39132 + C22120 * C39128) *
               C50779 * C50693 * C50729 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C50693 * C50919) *
              C50963 +
          (((C19747 * C124 + C50628 * C131) * C39129 +
            (C19747 * C135 + C50628 * C145) * C39125 + C22439 * C39130 +
            C22440 * C39126 + C22441 * C39131 + C22442 * C39127 +
            (C19747 * C1715 + C50628 * C1723) * C39132 +
            (C19747 * C1719 + C50628 * C1727) * C39128) *
               C50779 * C50693 * C50919 -
           ((C19747 * C5977 + C50628 * C5979) * C39128 +
            (C19747 * C5976 + C50628 * C5978) * C39132 + C22280 * C39127 +
            C22279 * C39131 + C22278 * C39126 + C22277 * C39130 +
            C20124 * C39125 + C20123 * C39129) *
               C50779 * C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C33715 +
              (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
              C22106 * C50854) *
                 C2159 +
             (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
                C50920 -
            ((C37270 + C37271 + C37272 + C37273) * C2161 +
             (C37274 + C37275 + C37276 + C37277) * C2160 +
             (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
              C22105 * C33715) *
                 C2159) *
                C50757) *
               C50919 +
           (((C37277 + C37276 + C37275 + C37274) * C2159 +
             (C37273 + C37272 + C37271 + C37270) * C2160 +
             (C20388 * C33715 + C20387 * C33713 + C20707 * C33716 +
              C20708 * C50854) *
                 C2161) *
                C50757 -
            ((C36608 + C36609 + C36610 + C36611) * C2161 +
             (C36607 + C36606 + C36605 + C36604) * C2160 +
             (C36603 + C36602 + C36601 + C36600) * C2159) *
                C50920) *
               C50729) *
              C251 +
          ((((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
              C22116 * C50854) *
                 C2159 +
             (C37278 + C37279 + C37280 + C37281) * C2160 +
             (C37282 + C37283 + C37284 + C37285) * C2161) *
                C50757 -
            (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
             (C22114 * C50854 + C22113 * C33716 +
              (C19747 * C134 + C50628 * C144) * C33713 +
              (C19747 * C123 + C50628 * C130) * C33715) *
                 C2159) *
                C50920) *
               C50919 +
           (((C36612 + C36613 + C36614 + C36615) * C2159 +
             (C36616 + C36617 + C36618 + C36619) * C2160 +
             (C36620 + C36621 + C36622 + C36623) * C2161) *
                C50920 -
            (((C19747 * C3549 + C50628 * C3553) * C50854 +
              (C19747 * C3547 + C50628 * C3551) * C33716 + C20398 * C33713 +
              C20397 * C33715) *
                 C2161 +
             (C37285 + C37284 + C37283 + C37282) * C2160 +
             (C37281 + C37280 + C37279 + C37278) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C33715 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C33713 +
             (C34058 + C34059 + C34060) * C33716 +
             (C34061 + C34062 + C34063) * C50854) *
                C50779 * C50920 -
            ((C34064 + C34065 + C34066) * C50854 +
             (C34067 + C34068 + C34069) * C33716 +
             (C34063 + C34062 + C34061) * C33713 +
             (C34060 + C34059 + C34058) * C33715) *
                C50779 * C50757) *
               C50919 +
           (((C17864 + C17863 + C17862) * C33715 +
             (C17861 + C17860 + C17859) * C33713 +
             (C18291 + C18292 + C18293) * C33716 +
             (C18294 + C18295 + C18296) * C50854) *
                C50779 * C50757 -
            ((C17859 + C17860 + C17861) * C50854 +
             (C17862 + C17863 + C17864) * C33716 +
             (C17166 + C17165 + C17164) * C33713 +
             (C17163 + C17162 + C17161) * C33715) *
                C50779 * C50920) *
               C50729) *
              C251 +
          ((((C34070 + C34071 + C34072) * C33715 +
             (C34073 + C34074 + C34075) * C33713 +
             (C34076 + C34077 + C34078) * C33716 +
             (C34079 + C34080 + C34081) * C50854) *
                C50779 * C50757 -
            ((C34075 + C34074 + C34073) * C50854 +
             (C34072 + C34071 + C34070) * C33716 +
             (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C33713 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C33715) *
                C50779 * C50920) *
               C50919 +
           (((C17173 + C17174 + C17175) * C33715 +
             (C17176 + C17177 + C17178) * C33713 +
             (C17865 + C17866 + C17867) * C33716 +
             (C17868 + C17869 + C17870) * C50854) *
                C50779 * C50920 -
            ((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50854 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C33716 +
             (C17870 + C17869 + C17868) * C33713 +
             (C17867 + C17866 + C17865) * C33715) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C39129 +
             (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
             C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
             C22112 * C39132 + C22111 * C39128) *
                C50779 * C50920 -
            (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
             C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
             C22106 * C39125 + C22105 * C39129) *
                C50779 * C50757) *
               C50919 +
           ((C20392 * C39129 + C20391 * C39125 + C20703 * C39130 +
             C20704 * C39126 + C22110 * C39131 + C22109 * C39127 +
             C23061 * C39132 + C23062 * C39128) *
                C50779 * C50757 -
            (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
             C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
             C19880 * C39125 + C19879 * C39129) *
                C50779 * C50920) *
               C50729) *
              C251 +
          (((C22113 * C39129 + C22114 * C39125 + C22115 * C39130 +
             C22116 * C39126 + C22117 * C39131 + C22118 * C39127 +
             C39334 * C39132 + C39335 * C39128) *
                C50779 * C50757 -
            (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
             C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
             (C19747 * C134 + C50628 * C144) * C39125 +
             (C19747 * C123 + C50628 * C130) * C39129) *
                C50779 * C50920) *
               C50919 +
           ((C19887 * C39129 + C19888 * C39125 + C20393 * C39130 +
             C20394 * C39126 + C21919 * C39131 + C21920 * C39127 +
             C22119 * C39132 + C22120 * C39128) *
                C50779 * C50920 -
            ((C19747 * C6384 + C50628 * C6388) * C39128 +
             (C19747 * C6382 + C50628 * C6386) * C39132 + C22120 * C39127 +
             C22119 * C39131 + C21920 * C39126 + C21919 * C39130 +
             C20394 * C39125 + C20393 * C39129) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
                C16965 * C124 + C16960 * C131) *
                   C33715 +
               (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
                C16965 * C135 + C16960 * C145) *
                   C33713 +
               (C16963 * C397 + C16958 * C411 + C16964 * C396 + C16959 * C410 +
                C16965 * C395 + C16960 * C409) *
                   C33716 +
               (C16963 * C407 + C16958 * C427 + C16964 * C406 + C16959 * C426 +
                C16965 * C405 + C16960 * C425) *
                   C50854) *
                  C50779 * C50693 * C50677 * C113 -
              ((C16965 * C404 + C16960 * C424 + C16964 * C405 + C16959 * C425 +
                C16963 * C406 + C16958 * C426) *
                   C50854 +
               (C16965 * C394 + C16960 * C408 + C16964 * C395 + C16959 * C409 +
                C16963 * C396 + C16958 * C410) *
                   C33716 +
               (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
                C16963 * C134 + C16958 * C144) *
                   C33713 +
               (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
                C16963 * C123 + C16958 * C130) *
                   C33715) *
                  C50779 * C50693 * C50677 * C114 +
              ((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
                C16965 * C126 + C16960 * C138) *
                   C33715 +
               (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
                C16965 * C137 + C16960 * C147) *
                   C33713 +
               (C16963 * C395 + C16958 * C409 + C16964 * C394 + C16959 * C408 +
                C16965 * C402 + C16960 * C420) *
                   C33716 +
               (C16963 * C405 + C16958 * C425 + C16964 * C404 + C16959 * C424 +
                C16965 * C421 + C16960 * C432) *
                   C50854) *
                  C50779 * C50693 * C50677 * C115 -
              ((C16965 * C642 + C16960 * C644 + C16964 * C421 + C16959 * C432 +
                C16963 * C404 + C16958 * C424) *
                   C50854 +
               (C16965 * C641 + C16960 * C643 + C16964 * C402 + C16959 * C420 +
                C16963 * C394 + C16958 * C408) *
                   C33716 +
               (C16965 * C140 + C16960 * C148 + C16964 * C137 + C16959 * C147 +
                C16963 * C136 + C16958 * C146) *
                   C33713 +
               (C16965 * C127 + C16960 * C139 + C16964 * C126 + C16959 * C138 +
                C16963 * C125 + C16958 * C132) *
                   C33715) *
                  C50779 * C50693 * C50677 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
                 C16965 * C124 + C16960 * C131) *
                    C33715 +
                (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
                 C16965 * C135 + C16960 * C145) *
                    C33713 +
                (C16963 * C397 + C16958 * C411 + C16964 * C396 + C16959 * C410 +
                 C16965 * C395 + C16960 * C409) *
                    C33716 +
                (C16963 * C407 + C16958 * C427 + C16964 * C406 + C16959 * C426 +
                 C16965 * C405 + C16960 * C425) *
                    C50854) *
                   C50779 * C50693 * C248 -
               ((C17859 + C17860 + C17861) * C50854 +
                (C17862 + C17863 + C17864) * C33716 +
                (C17166 + C17165 + C17164) * C33713 +
                (C17163 + C17162 + C17161) * C33715) *
                   C50779 * C50693 * C249 +
               ((C17172 + C17171 + C17170) * C33715 +
                (C17169 + C17168 + C17167) * C33713 +
                (C18795 + C18796 + C18797) * C33716 +
                (C18798 + C18799 + C18800) * C50854) *
                   C50779 * C50693 * C250) *
                  C251 +
              (((C17173 + C17174 + C17175) * C33715 +
                (C17176 + C17177 + C17178) * C33713 +
                (C17865 + C17866 + C17867) * C33716 +
                (C17868 + C17869 + C17870) * C50854) *
                   C50779 * C50693 * C249 -
               ((C16965 * C404 + C16960 * C424 + C16964 * C405 + C16959 * C425 +
                 C16963 * C406 + C16958 * C426) *
                    C50854 +
                (C16965 * C394 + C16960 * C408 + C16964 * C395 + C16959 * C409 +
                 C16963 * C396 + C16958 * C410) *
                    C33716 +
                (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
                 C16963 * C134 + C16958 * C144) *
                    C33713 +
                (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
                 C16963 * C123 + C16958 * C130) *
                    C33715) *
                   C50779 * C50693 * C248 -
               ((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 +
                 C16959 * C1443 + C16963 * C1436 + C16958 * C1444) *
                    C50854 +
                (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 +
                 C16959 * C1439 + C16963 * C1432 + C16958 * C1440) *
                    C33716 +
                (C17184 + C17183 + C17182) * C33713 +
                (C17181 + C17180 + C17179) * C33715) *
                   C50779 * C50693 * C250) *
                  C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C391 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C392 +
           ((C34069 + C34068 + C34067) * C33715 +
            (C34066 + C34065 + C34064) * C33713 +
            (C16963 * C1717 + C16958 * C1725 + C16964 * C1716 + C16959 * C1724 +
             C16965 * C1715 + C16960 * C1723) *
                C33716 +
            (C16963 * C1721 + C16958 * C1729 + C16964 * C1720 + C16959 * C1728 +
             C16965 * C1719 + C16960 * C1727) *
                C50854) *
               C50779 * C393) *
              C50677 * C251 +
          (((C34070 + C34071 + C34072) * C33715 +
            (C34073 + C34074 + C34075) * C33713 +
            (C34076 + C34077 + C34078) * C33716 +
            (C34079 + C34080 + C34081) * C50854) *
               C50779 * C392 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C391 -
           ((C16965 * C1718 + C16960 * C1726 + C16964 * C1719 + C16959 * C1727 +
             C16963 * C1720 + C16958 * C1728) *
                C50854 +
            (C16965 * C1714 + C16960 * C1722 + C16964 * C1715 + C16959 * C1723 +
             C16963 * C1716 + C16958 * C1724) *
                C33716 +
            (C34081 + C34080 + C34079) * C33713 +
            (C34078 + C34077 + C34076) * C33715) *
               C50779 * C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C19879 * C33715 + C19880 * C33713 + C20392 * C33716 +
            C20391 * C50854) *
               C2160 +
           (C19881 * C33715 + C19882 * C33713 + C20390 * C33716 +
            C20389 * C50854) *
               C2161) *
              C50693 * C50677 * C113 -
          ((C20396 * C50854 + C20395 * C33716 + C19890 * C33713 +
            C19889 * C33715) *
               C2161 +
           (C20394 * C50854 + C20393 * C33716 + C19888 * C33713 +
            C19887 * C33715) *
               C2160 +
           (C22114 * C50854 + C22113 * C33716 +
            (C19747 * C134 + C50628 * C144) * C33713 +
            (C19747 * C123 + C50628 * C130) * C33715) *
               C2159) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C33715 +
            (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
            C22440 * C50854) *
               C2159 +
           (C20123 * C33715 + C20124 * C33713 + C22277 * C33716 +
            C22278 * C50854) *
               C2160 +
           (C20125 * C33715 + C20126 * C33713 + C31482 * C33716 +
            C31483 * C50854) *
               C2161) *
              C50693 * C50677 * C115 -
          (((C19747 * C1434 + C50628 * C1442) * C50854 +
            (C19747 * C1430 + C50628 * C1438) * C33716 +
            (C19747 * C278 + C50628 * C290) * C33713 +
            (C19747 * C260 + C50628 * C274) * C33715) *
               C2161 +
           ((C19747 * C787 + C50628 * C793) * C50854 +
            (C19747 * C778 + C50628 * C783) * C33716 +
            (C19747 * C263 + C50628 * C283) * C33713 +
            (C19747 * C253 + C50628 * C267) * C33715) *
               C2160 +
           ((C19747 * C404 + C50628 * C424) * C50854 +
            (C19747 * C394 + C50628 * C408) * C33716 +
            (C19747 * C136 + C50628 * C146) * C33713 +
            (C19747 * C125 + C50628 * C132) * C33715) *
               C2159) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C248 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C249 +
           (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C19886 * C33715 + C19885 * C33713 + C21051 * C33716 +
             C21052 * C50854) *
                C2161) *
               C50693 * C250) *
              C251 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C249 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C248 -
           (((C19747 * C4067 + C50628 * C4071) * C50854 +
             (C19747 * C4065 + C50628 * C4069) * C33716 + C19894 * C33713 +
             C19893 * C33715) *
                C2161 +
            (C36623 + C36622 + C36621 + C36620) * C2160 + C36629 * C2159) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C391 -
           ((C20706 * C50854 + C20705 * C33716 + C20389 * C33713 +
             C20390 * C33715) *
                C2161 +
            (C20704 * C50854 + C20703 * C33716 + C20391 * C33713 +
             C20392 * C33715) *
                C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C392 +
           ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
             C22111 * C50854) *
                C2159 +
            (C20703 * C33715 + C20704 * C33713 + C22110 * C33716 +
             C22109 * C50854) *
                C2160 +
            (C20705 * C33715 + C20706 * C33713 + C23063 * C33716 +
             C23064 * C50854) *
                C2161) *
               C393) *
              C50677 * C251 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C20393 * C33715 + C20394 * C33713 + C21919 * C33716 +
             C21920 * C50854) *
                C2160 +
            (C20395 * C33715 + C20396 * C33713 + C21921 * C33716 +
             C21922 * C50854) *
                C2161) *
               C392 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C391 -
           (((C19747 * C4484 + C50628 * C4492) * C50854 +
             (C19747 * C4480 + C50628 * C4486) * C33716 + C21922 * C33713 +
             C21921 * C33715) *
                C2161 +
            (C22120 * C50854 + C22119 * C33716 + C21920 * C33713 +
             C21919 * C33715) *
                C2160 +
            (C22118 * C50854 + C22117 * C33716 + C22116 * C33713 +
             C22115 * C33715) *
                C2159) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C19747 * C122 + C50628 * C129) * C39129 +
           (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
           C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
           C22112 * C39132 + C22111 * C39128) *
              C50779 * C50693 * C50677 * C113 -
          (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
           C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
           (C19747 * C134 + C50628 * C144) * C39125 +
           (C19747 * C123 + C50628 * C130) * C39129) *
              C50779 * C50693 * C50677 * C114 +
          ((C19747 * C124 + C50628 * C131) * C39129 +
           (C19747 * C135 + C50628 * C145) * C39125 + C22439 * C39130 +
           C22440 * C39126 + C22441 * C39131 + C22442 * C39127 +
           (C19747 * C1715 + C50628 * C1723) * C39132 +
           (C19747 * C1719 + C50628 * C1727) * C39128) *
              C50779 * C50693 * C50677 * C115 -
          ((C19747 * C1718 + C50628 * C1726) * C39128 +
           (C19747 * C1714 + C50628 * C1722) * C39132 +
           (C19747 * C419 + C50628 * C431) * C39127 +
           (C19747 * C401 + C50628 * C415) * C39131 +
           (C19747 * C404 + C50628 * C424) * C39126 +
           (C19747 * C394 + C50628 * C408) * C39130 +
           (C19747 * C136 + C50628 * C146) * C39125 +
           (C19747 * C125 + C50628 * C132) * C39129) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50693 * C248 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C50693 * C249 +
           (C19881 * C39129 + C19882 * C39125 + C20390 * C39130 +
            C20389 * C39126 + C20705 * C39131 + C20706 * C39127 +
            C23063 * C39132 + C23064 * C39128) *
               C50779 * C50693 * C250) *
              C251 +
          ((C19887 * C39129 + C19888 * C39125 + C20393 * C39130 +
            C20394 * C39126 + C21919 * C39131 + C21920 * C39127 +
            C22119 * C39132 + C22120 * C39128) *
               C50779 * C50693 * C249 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C50693 * C248 -
           ((C19747 * C4484 + C50628 * C4492) * C39128 +
            (C19747 * C4480 + C50628 * C4486) * C39132 + C21922 * C39127 +
            C21921 * C39131 + C20396 * C39126 + C20395 * C39130 +
            C19890 * C39125 + C19889 * C39129) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C391 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C392 +
           (C22107 * C39129 + C22108 * C39125 + C22112 * C39130 +
            C22111 * C39126 + C23957 * C39131 + C23958 * C39127 +
            (C19747 * C7281 + C50628 * C7285) * C39132 +
            (C19747 * C7283 + C50628 * C7287) * C39128) *
               C50779 * C393) *
              C50677 * C251 +
          ((C22113 * C39129 + C22114 * C39125 + C22115 * C39130 +
            C22116 * C39126 + C22117 * C39131 + C22118 * C39127 +
            C39334 * C39132 + C39335 * C39128) *
               C50779 * C392 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C391 -
           ((C19747 * C7282 + C50628 * C7286) * C39128 +
            (C19747 * C7280 + C50628 * C7284) * C39132 + C39335 * C39127 +
            C39334 * C39131 + C22118 * C39126 + C22117 * C39130 +
            C22116 * C39125 + C22115 * C39129) *
               C50779 * C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50920 -
           ((C20706 * C50854 + C20705 * C33716 + C20389 * C33713 +
             C20390 * C33715) *
                C2161 +
            (C20704 * C50854 + C20703 * C33716 + C20391 * C33713 +
             C20392 * C33715) *
                C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C50677 * C50962 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C20393 * C33715 + C20394 * C33713 + C21919 * C33716 +
             C21920 * C50854) *
                C2160 +
            (C20395 * C33715 + C20396 * C33713 + C21921 * C33716 +
             C21922 * C50854) *
                C2161) *
               C50757 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50920) *
              C50677 * C50963 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C50920 -
           (((C19747 * C2557 + C50628 * C2561) * C50854 +
             (C19747 * C2552 + C50628 * C2558) * C33716 + C31483 * C33713 +
             C31482 * C33715) *
                C2161 +
            (C22280 * C50854 + C22279 * C33716 + C22278 * C33713 +
             C22277 * C33715) *
                C2160 +
            (C22442 * C50854 + C22441 * C33716 + C22440 * C33713 +
             C22439 * C33715) *
                C2159) *
               C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50920 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C50677 * C50962 +
          (((C34070 + C34071 + C34072) * C33715 +
            (C34073 + C34074 + C34075) * C33713 +
            (C34076 + C34077 + C34078) * C33716 +
            (C34079 + C34080 + C34081) * C50854) *
               C50779 * C50757 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50920) *
              C50677 * C50963 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C34386 + C34387 + C34388) * C33716 +
            (C34389 + C34390 + C34391) * C50854) *
               C50779 * C50920 -
           ((C16965 * C422 + C16960 * C433 + C16964 * C419 + C16959 * C431 +
             C16963 * C418 + C16958 * C430) *
                C50854 +
            (C16965 * C403 + C16960 * C423 + C16964 * C401 + C16959 * C415 +
             C16963 * C400 + C16958 * C414) *
                C33716 +
            (C34391 + C34390 + C34389) * C33713 +
            (C34388 + C34387 + C34386) * C33715) *
               C50779 * C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50920 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C50757) *
              C50677 * C50962 +
          ((C22113 * C39129 + C22114 * C39125 + C22115 * C39130 +
            C22116 * C39126 + C22117 * C39131 + C22118 * C39127 +
            C39334 * C39132 + C39335 * C39128) *
               C50779 * C50757 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C50920) *
              C50677 * C50963 +
          (((C19747 * C124 + C50628 * C131) * C39129 +
            (C19747 * C135 + C50628 * C145) * C39125 + C22439 * C39130 +
            C22440 * C39126 + C22441 * C39131 + C22442 * C39127 +
            C39536 * C39132 + C39537 * C39128) *
               C50779 * C50920 -
           ((C19747 * C5385 + C50628 * C5389) * C39128 +
            (C19747 * C5380 + C50628 * C5386) * C39132 + C39537 * C39127 +
            C39536 * C39131 + C22442 * C39126 + C22441 * C39130 +
            C22440 * C39125 + C22439 * C39129) *
               C50779 * C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C16963 * C397 + C16958 * C411 + C16964 * C396 + C16959 * C410 +
             C16965 * C395 + C16960 * C409) *
                C33716 +
            (C16963 * C407 + C16958 * C427 + C16964 * C406 + C16959 * C426 +
             C16965 * C405 + C16960 * C425) *
                C50854) *
               C50779 * C50693 * C248 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C249 +
           ((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C50693 * C250) *
              C251 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C249 -
           ((C16965 * C404 + C16960 * C424 + C16964 * C405 + C16959 * C425 +
             C16963 * C406 + C16958 * C426) *
                C50854 +
            (C16965 * C394 + C16960 * C408 + C16964 * C395 + C16959 * C409 +
             C16963 * C396 + C16958 * C410) *
                C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C248 -
           ((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 + C16959 * C1443 +
             C16963 * C1436 + C16958 * C1444) *
                C50854 +
            (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 + C16959 * C1439 +
             C16963 * C1432 + C16958 * C1440) *
                C33716 +
            (C17184 + C17183 + C17182) * C33713 +
            (C17181 + C17180 + C17179) * C33715) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
            C16965 * C124 + C16960 * C131) *
               C33715 +
           (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
            C16965 * C135 + C16960 * C145) *
               C33713 +
           (C16963 * C397 + C16958 * C411 + C16964 * C396 + C16959 * C410 +
            C16965 * C395 + C16960 * C409) *
               C33716 +
           (C16963 * C407 + C16958 * C427 + C16964 * C406 + C16959 * C426 +
            C16965 * C405 + C16960 * C425) *
               C50854) *
              C50779 * C50693 * C50677 * C113 -
          ((C16965 * C404 + C16960 * C424 + C16964 * C405 + C16959 * C425 +
            C16963 * C406 + C16958 * C426) *
               C50854 +
           (C16965 * C394 + C16960 * C408 + C16964 * C395 + C16959 * C409 +
            C16963 * C396 + C16958 * C410) *
               C33716 +
           (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
            C16963 * C134 + C16958 * C144) *
               C33713 +
           (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
            C16963 * C123 + C16958 * C130) *
               C33715) *
              C50779 * C50693 * C50677 * C114 +
          ((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
            C16965 * C126 + C16960 * C138) *
               C33715 +
           (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
            C16965 * C137 + C16960 * C147) *
               C33713 +
           (C16963 * C395 + C16958 * C409 + C16964 * C394 + C16959 * C408 +
            C16965 * C402 + C16960 * C420) *
               C33716 +
           (C16963 * C405 + C16958 * C425 + C16964 * C404 + C16959 * C424 +
            C16965 * C421 + C16960 * C432) *
               C50854) *
              C50779 * C50693 * C50677 * C115 -
          ((C16965 * C642 + C16960 * C644 + C16964 * C421 + C16959 * C432 +
            C16963 * C404 + C16958 * C424) *
               C50854 +
           (C16965 * C641 + C16960 * C643 + C16964 * C402 + C16959 * C420 +
            C16963 * C394 + C16958 * C408) *
               C33716 +
           (C16965 * C140 + C16960 * C148 + C16964 * C137 + C16959 * C147 +
            C16963 * C136 + C16958 * C146) *
               C33713 +
           (C16965 * C127 + C16960 * C139 + C16964 * C126 + C16959 * C138 +
            C16963 * C125 + C16958 * C132) *
               C33715) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C19879 * C33715 + C19880 * C33713 + C20392 * C33716 +
            C20391 * C50854) *
               C2160 +
           (C19881 * C33715 + C19882 * C33713 + C20390 * C33716 +
            C20389 * C50854) *
               C2161) *
              C50693 * C50677 * C113 -
          ((C20396 * C50854 + C20395 * C33716 + C19890 * C33713 +
            C19889 * C33715) *
               C2161 +
           (C20394 * C50854 + C20393 * C33716 + C19888 * C33713 +
            C19887 * C33715) *
               C2160 +
           (C22114 * C50854 + C22113 * C33716 +
            (C19747 * C134 + C50628 * C144) * C33713 +
            (C19747 * C123 + C50628 * C130) * C33715) *
               C2159) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C33715 +
            (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
            C22440 * C50854) *
               C2159 +
           (C20123 * C33715 + C20124 * C33713 + C22277 * C33716 +
            C22278 * C50854) *
               C2160 +
           (C20125 * C33715 + C20126 * C33713 + C31482 * C33716 +
            C31483 * C50854) *
               C2161) *
              C50693 * C50677 * C115 -
          (((C19747 * C1434 + C50628 * C1442) * C50854 +
            (C19747 * C1430 + C50628 * C1438) * C33716 +
            (C19747 * C278 + C50628 * C290) * C33713 +
            (C19747 * C260 + C50628 * C274) * C33715) *
               C2161 +
           ((C19747 * C787 + C50628 * C793) * C50854 +
            (C19747 * C778 + C50628 * C783) * C33716 +
            (C19747 * C263 + C50628 * C283) * C33713 +
            (C19747 * C253 + C50628 * C267) * C33715) *
               C2160 +
           ((C19747 * C404 + C50628 * C424) * C50854 +
            (C19747 * C394 + C50628 * C408) * C33716 +
            (C19747 * C136 + C50628 * C146) * C33713 +
            (C19747 * C125 + C50628 * C132) * C33715) *
               C2159) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C248 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C249 +
           (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C19886 * C33715 + C19885 * C33713 + C21051 * C33716 +
             C21052 * C50854) *
                C2161) *
               C50693 * C250) *
              C251 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C249 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C248 -
           (((C19747 * C4067 + C50628 * C4071) * C50854 +
             (C19747 * C4065 + C50628 * C4069) * C33716 + C19894 * C33713 +
             C19893 * C33715) *
                C2161 +
            (C36623 + C36622 + C36621 + C36620) * C2160 + C36629 * C2159) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19747 * C122 + C50628 * C129) * C39129 +
           (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
           C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
           C22112 * C39132 + C22111 * C39128) *
              C50779 * C50693 * C50677 * C113 -
          (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
           C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
           (C19747 * C134 + C50628 * C144) * C39125 +
           (C19747 * C123 + C50628 * C130) * C39129) *
              C50779 * C50693 * C50677 * C114 +
          ((C19747 * C124 + C50628 * C131) * C39129 +
           (C19747 * C135 + C50628 * C145) * C39125 + C22439 * C39130 +
           C22440 * C39126 + C22441 * C39131 + C22442 * C39127 +
           (C19747 * C1715 + C50628 * C1723) * C39132 +
           (C19747 * C1719 + C50628 * C1727) * C39128) *
              C50779 * C50693 * C50677 * C115 -
          ((C19747 * C1718 + C50628 * C1726) * C39128 +
           (C19747 * C1714 + C50628 * C1722) * C39132 +
           (C19747 * C419 + C50628 * C431) * C39127 +
           (C19747 * C401 + C50628 * C415) * C39131 +
           (C19747 * C404 + C50628 * C424) * C39126 +
           (C19747 * C394 + C50628 * C408) * C39130 +
           (C19747 * C136 + C50628 * C146) * C39125 +
           (C19747 * C125 + C50628 * C132) * C39129) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50693 * C248 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C50693 * C249 +
           (C19881 * C39129 + C19882 * C39125 + C20390 * C39130 +
            C20389 * C39126 + C20705 * C39131 + C20706 * C39127 +
            C23063 * C39132 + C23064 * C39128) *
               C50779 * C50693 * C250) *
              C251 +
          ((C19887 * C39129 + C19888 * C39125 + C20393 * C39130 +
            C20394 * C39126 + C21919 * C39131 + C21920 * C39127 +
            C22119 * C39132 + C22120 * C39128) *
               C50779 * C50693 * C249 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C50693 * C248 -
           ((C19747 * C4484 + C50628 * C4492) * C39128 +
            (C19747 * C4480 + C50628 * C4486) * C39132 + C21922 * C39127 +
            C21921 * C39131 + C20396 * C39126 + C20395 * C39130 +
            C19890 * C39125 + C19889 * C39129) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C50964 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C50965 +
           (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C37531 + C37532 + C37533 + C37534) * C2161) *
               C50693 * C1199) *
              C50911 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C50965 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C50964 -
           (((C19747 * C4067 + C50628 * C4071) * C50854 +
             (C19747 * C4065 + C50628 * C4069) * C33716 + C19894 * C33713 +
             C19893 * C33715) *
                C2161 +
            (C36623 + C36622 + C36621 + C36620) * C2160 + C36629 * C2159) *
               C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50693 * C50964 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C50965 +
           ((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C50693 * C1199) *
              C50911 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C50965 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C50964 -
           ((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 + C16959 * C1443 +
             C16963 * C1436 + C16958 * C1444) *
                C50854 +
            (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 + C16959 * C1439 +
             C16963 * C1432 + C16958 * C1440) *
                C33716 +
            (C17184 + C17183 + C17182) * C33713 +
            (C17181 + C17180 + C17179) * C33715) *
               C50779 * C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50693 * C50964 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C50693 * C50965 +
           (C19881 * C39129 + C19882 * C39125 + C20390 * C39130 +
            C20389 * C39126 + C20705 * C39131 + C20706 * C39127 +
            C23063 * C39132 + C23064 * C39128) *
               C50779 * C50693 * C1199) *
              C50911 +
          ((C19887 * C39129 + C19888 * C39125 + C20393 * C39130 +
            C20394 * C39126 + C21919 * C39131 + C21920 * C39127 +
            C22119 * C39132 + C22120 * C39128) *
               C50779 * C50693 * C50965 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C50693 * C50964 -
           ((C19747 * C4484 + C50628 * C4492) * C39128 +
            (C19747 * C4480 + C50628 * C4486) * C39132 + C21922 * C39127 +
            C21921 * C39131 + C20396 * C39126 + C20395 * C39130 +
            C19890 * C39125 + C19889 * C39129) *
               C50779 * C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50920 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C50964 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C38178 + C38179 + C38180 + C38181) * C2161) *
               C50757 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50920) *
              C50965 +
          ((C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C37531 + C37532 + C37533 + C37534) * C2161) *
               C50920 -
           (((C19747 * C20687 + C50628 * C20689) * C50854 +
             (C19747 * C20686 + C50628 * C20688) * C33716 + C21052 * C33713 +
             C21051 * C33715) *
                C2161 +
            (C38181 + C38180 + C38179 + C38178) * C2160 + C38183 * C2159) *
               C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50920 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C50964 +
          (((C17864 + C17863 + C17862) * C33715 +
            (C17861 + C17860 + C17859) * C33713 +
            (C18291 + C18292 + C18293) * C33716 +
            (C18294 + C18295 + C18296) * C50854) *
               C50779 * C50757 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50920) *
              C50965 +
          (((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C50920 -
           ((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 + C16959 * C2560 +
             C16963 * C2555 + C16958 * C2559) *
                C50854 +
            (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 + C16959 * C2554 +
             C16963 * C2550 + C16958 * C2553) *
                C33716 +
            (C18800 + C18799 + C18798) * C33713 +
            (C18797 + C18796 + C18795) * C33715) *
               C50779 * C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50920 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C50757) *
              C50964 +
          ((C20392 * C39129 + C20391 * C39125 + C20703 * C39130 +
            C20704 * C39126 + C22110 * C39131 + C22109 * C39127 +
            C23061 * C39132 + C23062 * C39128) *
               C50779 * C50757 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C50920) *
              C50965 +
          ((C19881 * C39129 + C19882 * C39125 + C20390 * C39130 +
            C20389 * C39126 + C20705 * C39131 + C20706 * C39127 +
            C23063 * C39132 + C23064 * C39128) *
               C50779 * C50920 -
           ((C19747 * C23045 + C50628 * C23047) * C39128 +
            (C19747 * C23044 + C50628 * C23046) * C39132 + C23064 * C39127 +
            C23063 * C39131 + C20706 * C39126 + C20705 * C39130 +
            C20389 * C39125 + C20390 * C39129) *
               C50779 * C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
                 C16965 * C124 + C16960 * C131) *
                    C33715 +
                (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
                 C16965 * C135 + C16960 * C145) *
                    C33713 +
                (C34058 + C34059 + C34060) * C33716 +
                (C34061 + C34062 + C34063) * C50854) *
                   C50779 * C50693 * C893 -
               ((C17859 + C17860 + C17861) * C50854 +
                (C17862 + C17863 + C17864) * C33716 +
                (C17166 + C17165 + C17164) * C33713 +
                (C17163 + C17162 + C17161) * C33715) *
                   C50779 * C50693 * C50729) *
                  C895 +
              (((C17173 + C17174 + C17175) * C33715 +
                (C17176 + C17177 + C17178) * C33713 +
                (C17865 + C17866 + C17867) * C33716 +
                (C17868 + C17869 + C17870) * C50854) *
                   C50779 * C50693 * C50729 -
               ((C34075 + C34074 + C34073) * C50854 +
                (C34072 + C34071 + C34070) * C33716 +
                (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
                 C16963 * C134 + C16958 * C144) *
                    C33713 +
                (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
                 C16963 * C123 + C16958 * C130) *
                    C33715) *
                   C50779 * C50693 * C893) *
                  C896 +
              (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
                 C16965 * C126 + C16960 * C138) *
                    C33715 +
                (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
                 C16965 * C137 + C16960 * C147) *
                    C33713 +
                (C34386 + C34387 + C34388) * C33716 +
                (C34389 + C34390 + C34391) * C50854) *
                   C50779 * C50693 * C893 -
               ((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
                 C16963 * C786 + C16958 * C792) *
                    C50854 +
                (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
                 C16963 * C777 + C16958 * C782) *
                    C33716 +
                (C17494 + C17493 + C17492) * C33713 +
                (C17491 + C17490 + C17489) * C33715) *
                   C50779 * C50693 * C50729) *
                  C897) +
         0.5 * std::pow(Pi, 2.5) *
             (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
                C16965 * C124 + C16960 * C131) *
                   C33715 +
               (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
                C16965 * C135 + C16960 * C145) *
                   C33713 +
               (C34058 + C34059 + C34060) * C33716 +
               (C34061 + C34062 + C34063) * C50854) *
                  C50779 * C50693 * C964 -
              ((C17859 + C17860 + C17861) * C50854 +
               (C17862 + C17863 + C17864) * C33716 +
               (C17166 + C17165 + C17164) * C33713 +
               (C17163 + C17162 + C17161) * C33715) *
                  C50779 * C50693 * C965 +
              ((C17172 + C17171 + C17170) * C33715 +
               (C17169 + C17168 + C17167) * C33713 +
               (C18795 + C18796 + C18797) * C33716 +
               (C18798 + C18799 + C18800) * C50854) *
                  C50779 * C50693 * C966 -
              ((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 +
                C16959 * C3082 + C16963 * C3077 + C16958 * C3081) *
                   C50854 +
               (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 +
                C16959 * C3076 + C16963 * C3072 + C16958 * C3075) *
                   C33716 +
               (C18132 + C18131 + C18130) * C33713 +
               (C18129 + C18128 + C18127) * C33715) *
                  C50779 * C50693 * C967) *
             C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C391 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C392 +
           ((C34069 + C34068 + C34067) * C33715 +
            (C34066 + C34065 + C34064) * C33713 +
            (C16963 * C1717 + C16958 * C1725 + C16964 * C1716 + C16959 * C1724 +
             C16965 * C1715 + C16960 * C1723) *
                C33716 +
            (C16963 * C1721 + C16958 * C1729 + C16964 * C1720 + C16959 * C1728 +
             C16965 * C1719 + C16960 * C1727) *
                C50854) *
               C50779 * C393) *
              C893 +
          (((C17864 + C17863 + C17862) * C33715 +
            (C17861 + C17860 + C17859) * C33713 +
            (C18291 + C18292 + C18293) * C33716 +
            (C18294 + C18295 + C18296) * C50854) *
               C50779 * C392 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C391 -
           ((C16965 * C5977 + C16960 * C5979 + C16964 * C4488 + C16959 * C4494 +
             C16963 * C4489 + C16958 * C4495) *
                C50854 +
            (C16965 * C5976 + C16960 * C5978 + C16964 * C4482 + C16959 * C4490 +
             C16963 * C4483 + C16958 * C4491) *
                C33716 +
            (C18296 + C18295 + C18294) * C33713 +
            (C18293 + C18292 + C18291) * C33715) *
               C50779 * C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C893 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C50729) *
              C895 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C50729 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C50693 * C893 -
           (((C19747 * C3079 + C50628 * C3083) * C50854 +
             (C19747 * C3074 + C50628 * C3080) * C33716 + C20128 * C33713 +
             C20127 * C33715) *
                C2161 +
            (C36929 + C36928 + C36927 + C36926) * C2160 +
            (C36925 + C36924 + C36923 + C36922) * C2159) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
              C50693 * C964 -
          (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
           (C36603 + C36602 + C36601 + C36600) * C2159) *
              C50693 * C965 +
          (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
           (C37531 + C37532 + C37533 + C37534) * C2161) *
              C50693 * C966 -
          (((C19747 * C21041 + C50628 * C21043) * C50854 +
            (C19747 * C21040 + C50628 * C21042) * C33716 + C20586 * C33713 +
            C20585 * C33715) *
               C2161 +
           (C37534 + C37533 + C37532 + C37531) * C2160 + C37536 * C2159) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C391 -
           ((C37270 + C37271 + C37272 + C37273) * C2161 +
            (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C392 +
           ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
             C22111 * C50854) *
                C2159 +
            (C37683 + C37684 + C37685 + C37686) * C2160 +
            (C37687 + C37688 + C37689 + C37690) * C2161) *
               C393) *
              C893 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C20388 * C33715 + C20387 * C33713 + C20707 * C33716 +
             C20708 * C50854) *
                C2161) *
               C392 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C391 -
           (((C19747 * C21317 + C50628 * C21319) * C50854 +
             (C19747 * C21316 + C50628 * C21318) * C33716 + C20708 * C33713 +
             C20707 * C33715) *
                C2161 +
            (C37690 + C37689 + C37688 + C37687) * C2160 +
            (C37686 + C37685 + C37684 + C37683) * C2159) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50693 * C893 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C50693 * C50729) *
              C895 +
          ((C19887 * C39129 + C19888 * C39125 + C20393 * C39130 +
            C20394 * C39126 + C21919 * C39131 + C21920 * C39127 +
            C22119 * C39132 + C22120 * C39128) *
               C50779 * C50693 * C50729 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C50693 * C893) *
              C896 +
          (((C19747 * C124 + C50628 * C131) * C39129 +
            (C19747 * C135 + C50628 * C145) * C39125 + C22439 * C39130 +
            C22440 * C39126 + C22441 * C39131 + C22442 * C39127 +
            C39536 * C39132 + C39537 * C39128) *
               C50779 * C50693 * C893 -
           ((C19747 * C5977 + C50628 * C5979) * C39128 +
            (C19747 * C5976 + C50628 * C5978) * C39132 + C22280 * C39127 +
            C22279 * C39131 + C22278 * C39126 + C22277 * C39130 +
            C20124 * C39125 + C20123 * C39129) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C19747 * C122 + C50628 * C129) * C39129 +
           (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
           C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
           C22112 * C39132 + C22111 * C39128) *
              C50779 * C50693 * C964 -
          (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
           C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
           C19880 * C39125 + C19879 * C39129) *
              C50779 * C50693 * C965 +
          (C19881 * C39129 + C19882 * C39125 + C20390 * C39130 +
           C20389 * C39126 + C20705 * C39131 + C20706 * C39127 +
           C23063 * C39132 + C23064 * C39128) *
              C50779 * C50693 * C966 -
          ((C19747 * C21317 + C50628 * C21319) * C39128 +
           (C19747 * C21316 + C50628 * C21318) * C39132 + C20708 * C39127 +
           C20707 * C39131 + C20387 * C39126 + C20388 * C39130 +
           C19884 * C39125 + C19883 * C39129) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C391 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C392 +
           (C22107 * C39129 + C22108 * C39125 + C22112 * C39130 +
            C22111 * C39126 + C23957 * C39131 + C23958 * C39127 +
            (C19747 * C7281 + C50628 * C7285) * C39132 +
            (C19747 * C7283 + C50628 * C7287) * C39128) *
               C50779 * C393) *
              C893 +
          ((C20392 * C39129 + C20391 * C39125 + C20703 * C39130 +
            C20704 * C39126 + C22110 * C39131 + C22109 * C39127 +
            C23061 * C39132 + C23062 * C39128) *
               C50779 * C392 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C391 -
           ((C19747 * C23949 + C50628 * C23951) * C39128 +
            (C19747 * C23948 + C50628 * C23950) * C39132 + C23062 * C39127 +
            C23061 * C39131 + C22109 * C39126 + C22110 * C39130 +
            C20704 * C39125 + C20703 * C39129) *
               C50779 * C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C33715 +
              (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
              C22106 * C50854) *
                 C2159 +
             (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
                C50920 -
            ((C37270 + C37271 + C37272 + C37273) * C2161 +
             (C37274 + C37275 + C37276 + C37277) * C2160 +
             (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
              C22105 * C33715) *
                 C2159) *
                C50757) *
               C893 +
           (((C37277 + C37276 + C37275 + C37274) * C2159 +
             (C37273 + C37272 + C37271 + C37270) * C2160 +
             (C20388 * C33715 + C20387 * C33713 + C20707 * C33716 +
              C20708 * C50854) *
                 C2161) *
                C50757 -
            (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
             (C36603 + C36602 + C36601 + C36600) * C2159) *
                C50920) *
               C50729) *
              C50911 +
          ((((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
              C22116 * C50854) *
                 C2159 +
             (C37278 + C37279 + C37280 + C37281) * C2160 +
             (C37282 + C37283 + C37284 + C37285) * C2161) *
                C50757 -
            (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
             (C22114 * C50854 + C22113 * C33716 +
              (C19747 * C134 + C50628 * C144) * C33713 +
              (C19747 * C123 + C50628 * C130) * C33715) *
                 C2159) *
                C50920) *
               C893 +
           (((C36612 + C36613 + C36614 + C36615) * C2159 +
             (C36616 + C36617 + C36618 + C36619) * C2160 +
             (C36620 + C36621 + C36622 + C36623) * C2161) *
                C50920 -
            (((C19747 * C3549 + C50628 * C3553) * C50854 +
              (C19747 * C3547 + C50628 * C3551) * C33716 + C20398 * C33713 +
              C20397 * C33715) *
                 C2161 +
             (C37285 + C37284 + C37283 + C37282) * C2160 +
             (C37281 + C37280 + C37279 + C37278) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C33715 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C33713 +
             (C34058 + C34059 + C34060) * C33716 +
             (C34061 + C34062 + C34063) * C50854) *
                C50779 * C50920 -
            ((C34064 + C34065 + C34066) * C50854 +
             (C34067 + C34068 + C34069) * C33716 +
             (C34063 + C34062 + C34061) * C33713 +
             (C34060 + C34059 + C34058) * C33715) *
                C50779 * C50757) *
               C893 +
           (((C17864 + C17863 + C17862) * C33715 +
             (C17861 + C17860 + C17859) * C33713 +
             (C18291 + C18292 + C18293) * C33716 +
             (C18294 + C18295 + C18296) * C50854) *
                C50779 * C50757 -
            ((C17859 + C17860 + C17861) * C50854 +
             (C17862 + C17863 + C17864) * C33716 +
             (C17166 + C17165 + C17164) * C33713 +
             (C17163 + C17162 + C17161) * C33715) *
                C50779 * C50920) *
               C50729) *
              C50911 +
          ((((C34070 + C34071 + C34072) * C33715 +
             (C34073 + C34074 + C34075) * C33713 +
             (C34076 + C34077 + C34078) * C33716 +
             (C34079 + C34080 + C34081) * C50854) *
                C50779 * C50757 -
            ((C34075 + C34074 + C34073) * C50854 +
             (C34072 + C34071 + C34070) * C33716 +
             (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C33713 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C33715) *
                C50779 * C50920) *
               C893 +
           (((C17173 + C17174 + C17175) * C33715 +
             (C17176 + C17177 + C17178) * C33713 +
             (C17865 + C17866 + C17867) * C33716 +
             (C17868 + C17869 + C17870) * C50854) *
                C50779 * C50920 -
            ((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50854 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C33716 +
             (C17870 + C17869 + C17868) * C33713 +
             (C17867 + C17866 + C17865) * C33715) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C39129 +
             (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
             C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
             C22112 * C39132 + C22111 * C39128) *
                C50779 * C50920 -
            (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
             C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
             C22106 * C39125 + C22105 * C39129) *
                C50779 * C50757) *
               C893 +
           ((C20392 * C39129 + C20391 * C39125 + C20703 * C39130 +
             C20704 * C39126 + C22110 * C39131 + C22109 * C39127 +
             C23061 * C39132 + C23062 * C39128) *
                C50779 * C50757 -
            (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
             C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
             C19880 * C39125 + C19879 * C39129) *
                C50779 * C50920) *
               C50729) *
              C50911 +
          (((C22113 * C39129 + C22114 * C39125 + C22115 * C39130 +
             C22116 * C39126 + C22117 * C39131 + C22118 * C39127 +
             C39334 * C39132 + C39335 * C39128) *
                C50779 * C50757 -
            (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
             C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
             (C19747 * C134 + C50628 * C144) * C39125 +
             (C19747 * C123 + C50628 * C130) * C39129) *
                C50779 * C50920) *
               C893 +
           ((C19887 * C39129 + C19888 * C39125 + C20393 * C39130 +
             C20394 * C39126 + C21919 * C39131 + C21920 * C39127 +
             C22119 * C39132 + C22120 * C39128) *
                C50779 * C50920 -
            ((C19747 * C6384 + C50628 * C6388) * C39128 +
             (C19747 * C6382 + C50628 * C6386) * C39132 + C22120 * C39127 +
             C22119 * C39131 + C21920 * C39126 + C21919 * C39130 +
             C20394 * C39125 + C20393 * C39129) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
            C16965 * C124 + C16960 * C131) *
               C33715 +
           (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
            C16965 * C135 + C16960 * C145) *
               C33713 +
           (C34058 + C34059 + C34060) * C33716 +
           (C34061 + C34062 + C34063) * C50854) *
              C50779 * C50693 * C964 -
          ((C17859 + C17860 + C17861) * C50854 +
           (C17862 + C17863 + C17864) * C33716 +
           (C17166 + C17165 + C17164) * C33713 +
           (C17163 + C17162 + C17161) * C33715) *
              C50779 * C50693 * C965 +
          ((C17172 + C17171 + C17170) * C33715 +
           (C17169 + C17168 + C17167) * C33713 +
           (C18795 + C18796 + C18797) * C33716 +
           (C18798 + C18799 + C18800) * C50854) *
              C50779 * C50693 * C966 -
          ((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 + C16959 * C3082 +
            C16963 * C3077 + C16958 * C3081) *
               C50854 +
           (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 + C16959 * C3076 +
            C16963 * C3072 + C16958 * C3075) *
               C33716 +
           (C18132 + C18131 + C18130) * C33713 +
           (C18129 + C18128 + C18127) * C33715) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50693 * C893 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C50729 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C893) *
              C896 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C34386 + C34387 + C34388) * C33716 +
            (C34389 + C34390 + C34391) * C50854) *
               C50779 * C50693 * C893 -
           ((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
             C16963 * C786 + C16958 * C792) *
                C50854 +
            (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
             C16963 * C777 + C16958 * C782) *
                C33716 +
            (C17494 + C17493 + C17492) * C33713 +
            (C17491 + C17490 + C17489) * C33715) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C893 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C50729) *
              C895 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C50729 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C50693 * C893 -
           (((C19747 * C3079 + C50628 * C3083) * C50854 +
             (C19747 * C3074 + C50628 * C3080) * C33716 + C20128 * C33713 +
             C20127 * C33715) *
                C2161 +
            (C36929 + C36928 + C36927 + C36926) * C2160 +
            (C36925 + C36924 + C36923 + C36922) * C2159) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
              C50693 * C964 -
          (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
           (C36603 + C36602 + C36601 + C36600) * C2159) *
              C50693 * C965 +
          (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
           (C37531 + C37532 + C37533 + C37534) * C2161) *
              C50693 * C966 -
          (((C19747 * C21041 + C50628 * C21043) * C50854 +
            (C19747 * C21040 + C50628 * C21042) * C33716 + C20586 * C33713 +
            C20585 * C33715) *
               C2161 +
           (C37534 + C37533 + C37532 + C37531) * C2160 + C37536 * C2159) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50693 * C893 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C50693 * C50729) *
              C895 +
          ((C19887 * C39129 + C19888 * C39125 + C20393 * C39130 +
            C20394 * C39126 + C21919 * C39131 + C21920 * C39127 +
            C22119 * C39132 + C22120 * C39128) *
               C50779 * C50693 * C50729 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C50693 * C893) *
              C896 +
          (((C19747 * C124 + C50628 * C131) * C39129 +
            (C19747 * C135 + C50628 * C145) * C39125 + C22439 * C39130 +
            C22440 * C39126 + C22441 * C39131 + C22442 * C39127 +
            C39536 * C39132 + C39537 * C39128) *
               C50779 * C50693 * C893 -
           ((C19747 * C5977 + C50628 * C5979) * C39128 +
            (C19747 * C5976 + C50628 * C5978) * C39132 + C22280 * C39127 +
            C22279 * C39131 + C22278 * C39126 + C22277 * C39130 +
            C20124 * C39125 + C20123 * C39129) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19747 * C122 + C50628 * C129) * C39129 +
           (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
           C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
           C22112 * C39132 + C22111 * C39128) *
              C50779 * C50693 * C964 -
          (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
           C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
           C19880 * C39125 + C19879 * C39129) *
              C50779 * C50693 * C965 +
          (C19881 * C39129 + C19882 * C39125 + C20390 * C39130 +
           C20389 * C39126 + C20705 * C39131 + C20706 * C39127 +
           C23063 * C39132 + C23064 * C39128) *
              C50779 * C50693 * C966 -
          ((C19747 * C21317 + C50628 * C21319) * C39128 +
           (C19747 * C21316 + C50628 * C21318) * C39132 + C20708 * C39127 +
           C20707 * C39131 + C20387 * C39126 + C20388 * C39130 +
           C19884 * C39125 + C19883 * C39129) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C33715 +
              (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
              C22106 * C50854) *
                 C2159 +
             (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
                C1544 -
            (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
             (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
              C22105 * C33715) *
                 C2159) *
                C50757) *
               C50919 +
           (((C37277 + C37276 + C37275 + C37274) * C2159 +
             (C37273 + C37272 + C37271 + C37270) * C2160 +
             (C38178 + C38179 + C38180 + C38181) * C2161) *
                C50757 -
            (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
             (C36603 + C36602 + C36601 + C36600) * C2159) *
                C1544) *
               C50729) *
              C50911 +
          ((((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
              C22116 * C50854) *
                 C2159 +
             (C37278 + C37279 + C37280 + C37281) * C2160 +
             (C37282 + C37283 + C37284 + C37285) * C2161) *
                C50757 -
            (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
             (C22114 * C50854 + C22113 * C33716 +
              (C19747 * C134 + C50628 * C144) * C33713 +
              (C19747 * C123 + C50628 * C130) * C33715) *
                 C2159) *
                C1544) *
               C50919 +
           (((C36612 + C36613 + C36614 + C36615) * C2159 +
             (C36616 + C36617 + C36618 + C36619) * C2160 +
             (C36620 + C36621 + C36622 + C36623) * C2161) *
                C1544 -
            (((C19747 * C3549 + C50628 * C3553) * C50854 +
              (C19747 * C3547 + C50628 * C3551) * C33716 + C20398 * C33713 +
              C20397 * C33715) *
                 C2161 +
             (C37285 + C37284 + C37283 + C37282) * C2160 +
             (C37281 + C37280 + C37279 + C37278) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C33715 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C33713 +
             (C34058 + C34059 + C34060) * C33716 +
             (C34061 + C34062 + C34063) * C50854) *
                C50779 * C1544 -
            ((C34064 + C34065 + C34066) * C50854 +
             (C34067 + C34068 + C34069) * C33716 +
             (C34063 + C34062 + C34061) * C33713 +
             (C34060 + C34059 + C34058) * C33715) *
                C50779 * C50757) *
               C50919 +
           (((C17864 + C17863 + C17862) * C33715 +
             (C17861 + C17860 + C17859) * C33713 +
             (C18291 + C18292 + C18293) * C33716 +
             (C18294 + C18295 + C18296) * C50854) *
                C50779 * C50757 -
            ((C17859 + C17860 + C17861) * C50854 +
             (C17862 + C17863 + C17864) * C33716 +
             (C17166 + C17165 + C17164) * C33713 +
             (C17163 + C17162 + C17161) * C33715) *
                C50779 * C1544) *
               C50729) *
              C50911 +
          ((((C34070 + C34071 + C34072) * C33715 +
             (C34073 + C34074 + C34075) * C33713 +
             (C34076 + C34077 + C34078) * C33716 +
             (C34079 + C34080 + C34081) * C50854) *
                C50779 * C50757 -
            ((C34075 + C34074 + C34073) * C50854 +
             (C34072 + C34071 + C34070) * C33716 +
             (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C33713 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C33715) *
                C50779 * C1544) *
               C50919 +
           (((C17173 + C17174 + C17175) * C33715 +
             (C17176 + C17177 + C17178) * C33713 +
             (C17865 + C17866 + C17867) * C33716 +
             (C17868 + C17869 + C17870) * C50854) *
                C50779 * C1544 -
            ((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50854 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C33716 +
             (C17870 + C17869 + C17868) * C33713 +
             (C17867 + C17866 + C17865) * C33715) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C39129 +
             (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
             C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
             C22112 * C39132 + C22111 * C39128) *
                C50779 * C1544 -
            (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
             C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
             C22106 * C39125 + C22105 * C39129) *
                C50779 * C50757) *
               C50919 +
           ((C20392 * C39129 + C20391 * C39125 + C20703 * C39130 +
             C20704 * C39126 + C22110 * C39131 + C22109 * C39127 +
             C23061 * C39132 + C23062 * C39128) *
                C50779 * C50757 -
            (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
             C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
             C19880 * C39125 + C19879 * C39129) *
                C50779 * C1544) *
               C50729) *
              C50911 +
          (((C22113 * C39129 + C22114 * C39125 + C22115 * C39130 +
             C22116 * C39126 + C22117 * C39131 + C22118 * C39127 +
             C39334 * C39132 + C39335 * C39128) *
                C50779 * C50757 -
            (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
             C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
             (C19747 * C134 + C50628 * C144) * C39125 +
             (C19747 * C123 + C50628 * C130) * C39129) *
                C50779 * C1544) *
               C50919 +
           ((C19887 * C39129 + C19888 * C39125 + C20393 * C39130 +
             C20394 * C39126 + C21919 * C39131 + C21920 * C39127 +
             C22119 * C39132 + C22120 * C39128) *
                C50779 * C1544 -
            ((C19747 * C6384 + C50628 * C6388) * C39128 +
             (C19747 * C6382 + C50628 * C6386) * C39132 + C22120 * C39127 +
             C22119 * C39131 + C21920 * C39126 + C21919 * C39130 +
             C20394 * C39125 + C20393 * C39129) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50966 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50967 +
           ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
             C22111 * C50854) *
                C2159 +
            (C37683 + C37684 + C37685 + C37686) * C2160 +
            (C37687 + C37688 + C37689 + C37690) * C2161) *
               C1960) *
              C50919 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C38178 + C38179 + C38180 + C38181) * C2161) *
               C50967 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50966 -
           (((C19747 * C21317 + C50628 * C21319) * C50854 +
             (C19747 * C21316 + C50628 * C21318) * C33716 + C20708 * C33713 +
             C20707 * C33715) *
                C2161 +
            (C37690 + C37689 + C37688 + C37687) * C2160 +
            (C37686 + C37685 + C37684 + C37683) * C2159) *
               C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50966 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50967 +
           ((C34069 + C34068 + C34067) * C33715 +
            (C34066 + C34065 + C34064) * C33713 +
            (C35864 + C35865 + C35866) * C33716 +
            (C35867 + C35868 + C35869) * C50854) *
               C50779 * C1960) *
              C50919 +
          (((C17864 + C17863 + C17862) * C33715 +
            (C17861 + C17860 + C17859) * C33713 +
            (C18291 + C18292 + C18293) * C33716 +
            (C18294 + C18295 + C18296) * C50854) *
               C50779 * C50967 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50966 -
           ((C16965 * C5977 + C16960 * C5979 + C16964 * C4488 + C16959 * C4494 +
             C16963 * C4489 + C16958 * C4495) *
                C50854 +
            (C16965 * C5976 + C16960 * C5978 + C16964 * C4482 + C16959 * C4490 +
             C16963 * C4483 + C16958 * C4491) *
                C33716 +
            (C18296 + C18295 + C18294) * C33713 +
            (C18293 + C18292 + C18291) * C33715) *
               C50779 * C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50966 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C50967 +
           (C22107 * C39129 + C22108 * C39125 + C22112 * C39130 +
            C22111 * C39126 + C23957 * C39131 + C23958 * C39127 +
            C40526 * C39132 + C40527 * C39128) *
               C50779 * C1960) *
              C50919 +
          ((C20392 * C39129 + C20391 * C39125 + C20703 * C39130 +
            C20704 * C39126 + C22110 * C39131 + C22109 * C39127 +
            C23061 * C39132 + C23062 * C39128) *
               C50779 * C50967 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C50966 -
           ((C19747 * C23949 + C50628 * C23951) * C39128 +
            (C19747 * C23948 + C50628 * C23950) * C39132 + C23062 * C39127 +
            C23061 * C39131 + C22109 * C39126 + C22110 * C39130 +
            C20704 * C39125 + C20703 * C39129) *
               C50779 * C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
                 C16965 * C124 + C16960 * C131) *
                    C33715 +
                (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
                 C16965 * C135 + C16960 * C145) *
                    C33713 +
                (C34058 + C34059 + C34060) * C33716 +
                (C34061 + C34062 + C34063) * C50854) *
                   C50779 * C1544 -
               ((C34064 + C34065 + C34066) * C50854 +
                (C34067 + C34068 + C34069) * C33716 +
                (C34063 + C34062 + C34061) * C33713 +
                (C34060 + C34059 + C34058) * C33715) *
                   C50779 * C50757) *
                  C50677 * C895 +
              (((C34070 + C34071 + C34072) * C33715 +
                (C34073 + C34074 + C34075) * C33713 +
                (C34076 + C34077 + C34078) * C33716 +
                (C34079 + C34080 + C34081) * C50854) *
                   C50779 * C50757 -
               ((C34075 + C34074 + C34073) * C50854 +
                (C34072 + C34071 + C34070) * C33716 +
                (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
                 C16963 * C134 + C16958 * C144) *
                    C33713 +
                (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
                 C16963 * C123 + C16958 * C130) *
                    C33715) *
                   C50779 * C1544) *
                  C50677 * C896 +
              (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
                 C16965 * C126 + C16960 * C138) *
                    C33715 +
                (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
                 C16965 * C137 + C16960 * C147) *
                    C33713 +
                (C34386 + C34387 + C34388) * C33716 +
                (C34389 + C34390 + C34391) * C50854) *
                   C50779 * C1544 -
               ((C16965 * C422 + C16960 * C433 + C16964 * C419 + C16959 * C431 +
                 C16963 * C418 + C16958 * C430) *
                    C50854 +
                (C16965 * C403 + C16960 * C423 + C16964 * C401 + C16959 * C415 +
                 C16963 * C400 + C16958 * C414) *
                    C33716 +
                (C34391 + C34390 + C34389) * C33713 +
                (C34388 + C34387 + C34386) * C33715) *
                   C50779 * C50757) *
                  C50677 * C897) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
                 C16965 * C124 + C16960 * C131) *
                    C33715 +
                (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
                 C16965 * C135 + C16960 * C145) *
                    C33713 +
                (C34058 + C34059 + C34060) * C33716 +
                (C34061 + C34062 + C34063) * C50854) *
                   C50779 * C1544 -
               ((C34064 + C34065 + C34066) * C50854 +
                (C34067 + C34068 + C34069) * C33716 +
                (C34063 + C34062 + C34061) * C33713 +
                (C34060 + C34059 + C34058) * C33715) *
                   C50779 * C50757) *
                  C248 +
              (((C17864 + C17863 + C17862) * C33715 +
                (C17861 + C17860 + C17859) * C33713 +
                (C18291 + C18292 + C18293) * C33716 +
                (C18294 + C18295 + C18296) * C50854) *
                   C50779 * C50757 -
               ((C17859 + C17860 + C17861) * C50854 +
                (C17862 + C17863 + C17864) * C33716 +
                (C17166 + C17165 + C17164) * C33713 +
                (C17163 + C17162 + C17161) * C33715) *
                   C50779 * C1544) *
                  C249 +
              (((C17172 + C17171 + C17170) * C33715 +
                (C17169 + C17168 + C17167) * C33713 +
                (C18795 + C18796 + C18797) * C33716 +
                (C18798 + C18799 + C18800) * C50854) *
                   C50779 * C1544 -
               ((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 +
                 C16959 * C2560 + C16963 * C2555 + C16958 * C2559) *
                    C50854 +
                (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 +
                 C16959 * C2554 + C16963 * C2550 + C16958 * C2553) *
                    C33716 +
                (C18800 + C18799 + C18798) * C33713 +
                (C18797 + C18796 + C18795) * C33715) *
                   C50779 * C50757) *
                  C250) *
             C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
            C16965 * C124 + C16960 * C131) *
               C33715 +
           (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
            C16965 * C135 + C16960 * C145) *
               C33713 +
           (C34058 + C34059 + C34060) * C33716 +
           (C34061 + C34062 + C34063) * C50854) *
              C50779 * C1710 -
          ((C34064 + C34065 + C34066) * C50854 +
           (C34067 + C34068 + C34069) * C33716 +
           (C34063 + C34062 + C34061) * C33713 +
           (C34060 + C34059 + C34058) * C33715) *
              C50779 * C1711 +
          ((C34069 + C34068 + C34067) * C33715 +
           (C34066 + C34065 + C34064) * C33713 +
           (C35864 + C35865 + C35866) * C33716 +
           (C35867 + C35868 + C35869) * C50854) *
              C50779 * C1712 -
          ((C16965 * C5385 + C16960 * C5389 + C16964 * C5384 + C16959 * C5388 +
            C16963 * C5383 + C16958 * C5387) *
               C50854 +
           (C16965 * C5380 + C16960 * C5386 + C16964 * C5379 + C16959 * C5382 +
            C16963 * C5378 + C16958 * C5381) *
               C33716 +
           (C35869 + C35868 + C35867) * C33713 +
           (C35866 + C35865 + C35864) * C33715) *
              C50779 * C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C1544 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C37278 + C37279 + C37280 + C37281) * C2160 +
            (C37282 + C37283 + C37284 + C37285) * C2161) *
               C50757 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C1544 -
           (((C19747 * C2557 + C50628 * C2561) * C50854 +
             (C19747 * C2552 + C50628 * C2558) * C33716 + C31483 * C33713 +
             C31482 * C33715) *
                C2161 +
            (C22280 * C50854 + C22279 * C33716 + C22278 * C33713 +
             C22277 * C33715) *
                C2160 +
            (C22442 * C50854 + C22441 * C33716 + C22440 * C33713 +
             C22439 * C33715) *
                C2159) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C1544 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C248 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C38178 + C38179 + C38180 + C38181) * C2161) *
               C50757 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C1544) *
              C249 +
          ((C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C37531 + C37532 + C37533 + C37534) * C2161) *
               C1544 -
           (((C19747 * C20687 + C50628 * C20689) * C50854 +
             (C19747 * C20686 + C50628 * C20688) * C33716 + C21052 * C33713 +
             C21051 * C33715) *
                C2161 +
            (C38181 + C38180 + C38179 + C38178) * C2160 + C38183 * C2159) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
              C1710 -
          (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
           (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
            C22105 * C33715) *
               C2159) *
              C1711 +
          ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
            C22111 * C50854) *
               C2159 +
           (C37683 + C37684 + C37685 + C37686) * C2160 +
           (C37687 + C37688 + C37689 + C37690) * C2161) *
              C1712 -
          (((C19747 * C23045 + C50628 * C23047) * C50854 +
            (C19747 * C23044 + C50628 * C23046) * C33716 + C23064 * C33713 +
            C23063 * C33715) *
               C2161 +
           (C23062 * C50854 + C23061 * C33716 + C22109 * C33713 +
            C22110 * C33715) *
               C2160 +
           (C23958 * C50854 + C23957 * C33716 + C22111 * C33713 +
            C22112 * C33715) *
               C2159) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C1544 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C50757) *
              C50677 * C895 +
          ((C22113 * C39129 + C22114 * C39125 + C22115 * C39130 +
            C22116 * C39126 + C22117 * C39131 + C22118 * C39127 +
            C39334 * C39132 + C39335 * C39128) *
               C50779 * C50757 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C19747 * C124 + C50628 * C131) * C39129 +
            (C19747 * C135 + C50628 * C145) * C39125 + C22439 * C39130 +
            C22440 * C39126 + C22441 * C39131 + C22442 * C39127 +
            C39536 * C39132 + C39537 * C39128) *
               C50779 * C1544 -
           ((C19747 * C5385 + C50628 * C5389) * C39128 +
            (C19747 * C5380 + C50628 * C5386) * C39132 + C39537 * C39127 +
            C39536 * C39131 + C22442 * C39126 + C22441 * C39130 +
            C22440 * C39125 + C22439 * C39129) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C1544 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C50757) *
              C248 +
          ((C20392 * C39129 + C20391 * C39125 + C20703 * C39130 +
            C20704 * C39126 + C22110 * C39131 + C22109 * C39127 +
            C23061 * C39132 + C23062 * C39128) *
               C50779 * C50757 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C1544) *
              C249 +
          ((C19881 * C39129 + C19882 * C39125 + C20390 * C39130 +
            C20389 * C39126 + C20705 * C39131 + C20706 * C39127 +
            C23063 * C39132 + C23064 * C39128) *
               C50779 * C1544 -
           ((C19747 * C23045 + C50628 * C23047) * C39128 +
            (C19747 * C23044 + C50628 * C23046) * C39132 + C23064 * C39127 +
            C23063 * C39131 + C20706 * C39126 + C20705 * C39130 +
            C20389 * C39125 + C20390 * C39129) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C19747 * C122 + C50628 * C129) * C39129 +
           (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
           C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
           C22112 * C39132 + C22111 * C39128) *
              C50779 * C1710 -
          (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
           C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
           C22106 * C39125 + C22105 * C39129) *
              C50779 * C1711 +
          (C22107 * C39129 + C22108 * C39125 + C22112 * C39130 +
           C22111 * C39126 + C23957 * C39131 + C23958 * C39127 +
           C40526 * C39132 + C40527 * C39128) *
              C50779 * C1712 -
          ((C19747 * C40518 + C50628 * C40520) * C39128 +
           (C19747 * C40517 + C50628 * C40519) * C39132 + C40527 * C39127 +
           C40526 * C39131 + C23958 * C39126 + C23957 * C39130 +
           C22111 * C39125 + C22112 * C39129) *
              C50779 * C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50966 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50967 +
           ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
             C22111 * C50854) *
                C2159 +
            (C37683 + C37684 + C37685 + C37686) * C2160 +
            (C37687 + C37688 + C37689 + C37690) * C2161) *
               C1960) *
              C50677 * C50911 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C37278 + C37279 + C37280 + C37281) * C2160 +
            (C37282 + C37283 + C37284 + C37285) * C2161) *
               C50967 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50966 -
           (((C19747 * C4484 + C50628 * C4492) * C50854 +
             (C19747 * C4480 + C50628 * C4486) * C33716 + C21922 * C33713 +
             C21921 * C33715) *
                C2161 +
            (C22120 * C50854 + C22119 * C33716 + C21920 * C33713 +
             C21919 * C33715) *
                C2160 +
            (C22118 * C50854 + C22117 * C33716 + C22116 * C33713 +
             C22115 * C33715) *
                C2159) *
               C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50966 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50967 +
           ((C34069 + C34068 + C34067) * C33715 +
            (C34066 + C34065 + C34064) * C33713 +
            (C35864 + C35865 + C35866) * C33716 +
            (C35867 + C35868 + C35869) * C50854) *
               C50779 * C1960) *
              C50677 * C50911 +
          (((C34070 + C34071 + C34072) * C33715 +
            (C34073 + C34074 + C34075) * C33713 +
            (C34076 + C34077 + C34078) * C33716 +
            (C34079 + C34080 + C34081) * C50854) *
               C50779 * C50967 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50966 -
           ((C16965 * C1718 + C16960 * C1726 + C16964 * C1719 + C16959 * C1727 +
             C16963 * C1720 + C16958 * C1728) *
                C50854 +
            (C16965 * C1714 + C16960 * C1722 + C16964 * C1715 + C16959 * C1723 +
             C16963 * C1716 + C16958 * C1724) *
                C33716 +
            (C34081 + C34080 + C34079) * C33713 +
            (C34078 + C34077 + C34076) * C33715) *
               C50779 * C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C50966 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C50967 +
           (C22107 * C39129 + C22108 * C39125 + C22112 * C39130 +
            C22111 * C39126 + C23957 * C39131 + C23958 * C39127 +
            C40526 * C39132 + C40527 * C39128) *
               C50779 * C1960) *
              C50677 * C50911 +
          ((C22113 * C39129 + C22114 * C39125 + C22115 * C39130 +
            C22116 * C39126 + C22117 * C39131 + C22118 * C39127 +
            C39334 * C39132 + C39335 * C39128) *
               C50779 * C50967 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C50966 -
           ((C19747 * C7282 + C50628 * C7286) * C39128 +
            (C19747 * C7280 + C50628 * C7284) * C39132 + C39335 * C39127 +
            C39334 * C39131 + C22118 * C39126 + C22117 * C39130 +
            C22116 * C39125 + C22115 * C39129) *
               C50779 * C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C1544 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C248 +
          (((C17864 + C17863 + C17862) * C33715 +
            (C17861 + C17860 + C17859) * C33713 +
            (C18291 + C18292 + C18293) * C33716 +
            (C18294 + C18295 + C18296) * C50854) *
               C50779 * C50757 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C1544) *
              C249 +
          (((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C1544 -
           ((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 + C16959 * C2560 +
             C16963 * C2555 + C16958 * C2559) *
                C50854 +
            (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 + C16959 * C2554 +
             C16963 * C2550 + C16958 * C2553) *
                C33716 +
            (C18800 + C18799 + C18798) * C33713 +
            (C18797 + C18796 + C18795) * C33715) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C1544 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C34070 + C34071 + C34072) * C33715 +
            (C34073 + C34074 + C34075) * C33713 +
            (C34076 + C34077 + C34078) * C33716 +
            (C34079 + C34080 + C34081) * C50854) *
               C50779 * C50757 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C34386 + C34387 + C34388) * C33716 +
            (C34389 + C34390 + C34391) * C50854) *
               C50779 * C1544 -
           ((C16965 * C422 + C16960 * C433 + C16964 * C419 + C16959 * C431 +
             C16963 * C418 + C16958 * C430) *
                C50854 +
            (C16965 * C403 + C16960 * C423 + C16964 * C401 + C16959 * C415 +
             C16963 * C400 + C16958 * C414) *
                C33716 +
            (C34391 + C34390 + C34389) * C33713 +
            (C34388 + C34387 + C34386) * C33715) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C1544 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C37278 + C37279 + C37280 + C37281) * C2160 +
            (C37282 + C37283 + C37284 + C37285) * C2161) *
               C50757 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C1544 -
           (((C19747 * C2557 + C50628 * C2561) * C50854 +
             (C19747 * C2552 + C50628 * C2558) * C33716 + C31483 * C33713 +
             C31482 * C33715) *
                C2161 +
            (C22280 * C50854 + C22279 * C33716 + C22278 * C33713 +
             C22277 * C33715) *
                C2160 +
            (C22442 * C50854 + C22441 * C33716 + C22440 * C33713 +
             C22439 * C33715) *
                C2159) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C1544 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C248 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C38178 + C38179 + C38180 + C38181) * C2161) *
               C50757 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C1544) *
              C249 +
          ((C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C37531 + C37532 + C37533 + C37534) * C2161) *
               C1544 -
           (((C19747 * C20687 + C50628 * C20689) * C50854 +
             (C19747 * C20686 + C50628 * C20688) * C33716 + C21052 * C33713 +
             C21051 * C33715) *
                C2161 +
            (C38181 + C38180 + C38179 + C38178) * C2160 + C38183 * C2159) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C1544 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C50757) *
              C50677 * C895 +
          ((C22113 * C39129 + C22114 * C39125 + C22115 * C39130 +
            C22116 * C39126 + C22117 * C39131 + C22118 * C39127 +
            C39334 * C39132 + C39335 * C39128) *
               C50779 * C50757 -
           (C22118 * C39128 + C22117 * C39132 + C22116 * C39127 +
            C22115 * C39131 + C22114 * C39126 + C22113 * C39130 +
            (C19747 * C134 + C50628 * C144) * C39125 +
            (C19747 * C123 + C50628 * C130) * C39129) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C19747 * C124 + C50628 * C131) * C39129 +
            (C19747 * C135 + C50628 * C145) * C39125 + C22439 * C39130 +
            C22440 * C39126 + C22441 * C39131 + C22442 * C39127 +
            C39536 * C39132 + C39537 * C39128) *
               C50779 * C1544 -
           ((C19747 * C5385 + C50628 * C5389) * C39128 +
            (C19747 * C5380 + C50628 * C5386) * C39132 + C39537 * C39127 +
            C39536 * C39131 + C22442 * C39126 + C22441 * C39130 +
            C22440 * C39125 + C22439 * C39129) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C39129 +
            (C19747 * C133 + C50628 * C143) * C39125 + C22105 * C39130 +
            C22106 * C39126 + C22107 * C39131 + C22108 * C39127 +
            C22112 * C39132 + C22111 * C39128) *
               C50779 * C1544 -
           (C23958 * C39128 + C23957 * C39132 + C22111 * C39127 +
            C22112 * C39131 + C22108 * C39126 + C22107 * C39130 +
            C22106 * C39125 + C22105 * C39129) *
               C50779 * C50757) *
              C248 +
          ((C20392 * C39129 + C20391 * C39125 + C20703 * C39130 +
            C20704 * C39126 + C22110 * C39131 + C22109 * C39127 +
            C23061 * C39132 + C23062 * C39128) *
               C50779 * C50757 -
           (C22109 * C39128 + C22110 * C39132 + C20704 * C39127 +
            C20703 * C39131 + C20391 * C39126 + C20392 * C39130 +
            C19880 * C39125 + C19879 * C39129) *
               C50779 * C1544) *
              C249 +
          ((C19881 * C39129 + C19882 * C39125 + C20390 * C39130 +
            C20389 * C39126 + C20705 * C39131 + C20706 * C39127 +
            C23063 * C39132 + C23064 * C39128) *
               C50779 * C1544 -
           ((C19747 * C23045 + C50628 * C23047) * C39128 +
            (C19747 * C23044 + C50628 * C23046) * C39132 + C23064 * C39127 +
            C23063 * C39131 + C20706 * C39126 + C20705 * C39130 +
            C20389 * C39125 + C20390 * C39129) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C50693 * C50919 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C50693 * C50729) *
              C50962 +
          (((C24756 + C24757) * C44446 + (C24758 + C24759) * C50970 +
            C28544 * C44447 + C28545 * C50971 + (C27866 + C27867) * C44448 +
            (C27868 + C27869) * C44445) *
               C50779 * C50693 * C50729 -
           (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
            (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C50693 * C50919) *
              C50963 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C44446 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50970 +
            (C28278 + C28279) * C44447 + (C28280 + C28281) * C50971 +
            (C49747 * C400 + C50904 * C414 + C49740 * C401 + C50633 * C415) *
                C44448 +
            (C49747 * C418 + C50904 * C430 + C49740 * C419 + C50633 * C431) *
                C44445) *
               C50779 * C50693 * C50919 -
           ((C49740 * C1087 + C50633 * C1095 + C49747 * C1088 +
             C50904 * C1096) *
                C44445 +
            (C49740 * C1083 + C50633 * C1091 + C49747 * C1084 +
             C50904 * C1092) *
                C44448 +
            (C28075 + C28074) * C50971 + (C28073 + C28072) * C44447 +
            (C25089 + C25088) * C50970 + (C25087 + C25086) * C44446) *
               C50779 * C50693 * C50729) *
              C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C44446 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50970 +
             (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
             C44742 * C44448 + C44743 * C44445) *
                C50779 * C50920 -
            ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
             (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
             (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
                C50779 * C50757) *
               C50919 +
           ((C28540 * C44446 + C28541 * C50970 + C29068 * C44447 +
             C29069 * C50971 + (C29078 + C29079) * C44448 +
             (C29080 + C29081) * C44445) *
                C50779 * C50757 -
            (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
             C28543 * C44447 + (C24747 + C24746) * C50970 +
             (C24745 + C24744) * C44446) *
                C50779 * C50920) *
               C50729) *
              C251 +
          ((((C27858 + C27859) * C44446 + (C27860 + C27861) * C50970 +
             (C27862 + C27863) * C44447 + (C27864 + C27865) * C50971 +
             (C44754 + C44755) * C44448 + (C44756 + C44757) * C44445) *
                C50779 * C50757 -
            (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
             (C27859 + C27858) * C44447 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50970 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C44446) *
                C50779 * C50920) *
               C50919 +
           (((C24756 + C24757) * C44446 + (C24758 + C24759) * C50970 +
             C28544 * C44447 + C28545 * C50971 + (C27866 + C27867) * C44448 +
             (C27868 + C27869) * C44445) *
                C50779 * C50920 -
            ((C49740 * C5977 + C50633 * C5979 + C49747 * C4488 +
              C50904 * C4494) *
                 C44445 +
             (C49740 * C5976 + C50633 * C5978 + C49747 * C4482 +
              C50904 * C4490) *
                 C44448 +
             (C27869 + C27868) * C50971 + (C27867 + C27866) * C44447 +
             C28546 * C50970 + C28547 * C44446) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            (C27857 + C27856) * C44448 + (C27855 + C27854) * C44445) *
               C50779 * C50693 * C248 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C50693 * C249 +
           (C24768 * C44446 + C24769 * C50970 + C29728 * C44447 +
            C29729 * C50971 + (C25909 + C25910) * C44448 +
            (C25911 + C25912) * C44445) *
               C50779 * C50693 * C250) *
              C251 +
          (((C24756 + C24757) * C44446 + (C24758 + C24759) * C50970 +
            C28544 * C44447 + C28545 * C50971 + (C27866 + C27867) * C44448 +
            (C27868 + C27869) * C44445) *
               C50779 * C50693 * C249 -
           ((C27865 + C27864) * C44445 + (C27863 + C27862) * C44448 +
            (C27861 + C27860) * C50971 + (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C50693 * C248 -
           ((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
             C50904 * C2560) *
                C44445 +
            (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
             C50904 * C2554) *
                C44448 +
            (C25481 + C25480) * C50971 + (C25479 + C25478) * C44447 +
            C24770 * C50970 + C24771 * C44446) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
               C44446 +
           (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
               C50970 +
           (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
           (C27857 + C27856) * C44448 + (C27855 + C27854) * C44445) *
              C50779 * C50693 * C50677 * C113 -
          ((C27865 + C27864) * C44445 + (C27863 + C27862) * C44448 +
           (C27861 + C27860) * C50971 + (C27859 + C27858) * C44447 +
           (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
               C50970 +
           (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
               C44446) *
              C50779 * C50693 * C50677 * C114 +
          ((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
               C44446 +
           (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
               C50970 +
           (C28278 + C28279) * C44447 + (C28280 + C28281) * C50971 +
           (C49747 * C400 + C50904 * C414 + C49740 * C401 + C50633 * C415) *
               C44448 +
           (C49747 * C418 + C50904 * C430 + C49740 * C419 + C50633 * C431) *
               C44445) *
              C50779 * C50693 * C50677 * C115 -
          ((C49740 * C422 + C50633 * C433 + C49747 * C419 + C50904 * C431) *
               C44445 +
           (C49740 * C403 + C50633 * C423 + C49747 * C401 + C50904 * C415) *
               C44448 +
           (C49740 * C421 + C50633 * C432 + C49747 * C404 + C50904 * C424) *
               C50971 +
           (C49740 * C402 + C50633 * C420 + C49747 * C394 + C50904 * C408) *
               C44447 +
           (C49740 * C137 + C50633 * C147 + C49747 * C136 + C50904 * C146) *
               C50970 +
           (C49740 * C126 + C50633 * C138 + C49747 * C125 + C50904 * C132) *
               C44446) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C391 -
           ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
            (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
            (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
               C50779 * C392 +
           (C44742 * C44446 + C44743 * C50970 + (C30256 + C30257) * C44447 +
            (C30258 + C30259) * C50971 +
            (C49747 * C5378 + C50904 * C5381 + C49740 * C5379 +
             C50633 * C5382) *
                C44448 +
            (C49747 * C5383 + C50904 * C5387 + C49740 * C5384 +
             C50633 * C5388) *
                C44445) *
               C50779 * C393) *
              C50677 * C251 +
          (((C27858 + C27859) * C44446 + (C27860 + C27861) * C50970 +
            (C27862 + C27863) * C44447 + (C27864 + C27865) * C50971 +
            (C44754 + C44755) * C44448 + (C44756 + C44757) * C44445) *
               C50779 * C392 -
           (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
            (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C391 -
           ((C49740 * C5385 + C50633 * C5389 + C49747 * C5384 +
             C50904 * C5388) *
                C44445 +
            (C49740 * C5380 + C50633 * C5386 + C49747 * C5379 +
             C50904 * C5382) *
                C44448 +
            (C44757 + C44756) * C50971 + (C44755 + C44754) * C44447 +
            C44752 * C50970 + C44753 * C44446) *
               C50779 * C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C50920 -
           ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
            (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
            (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
               C50779 * C50757) *
              C50677 * C50962 +
          (((C27858 + C27859) * C44446 + (C27860 + C27861) * C50970 +
            (C27862 + C27863) * C44447 + (C27864 + C27865) * C50971 +
            (C44754 + C44755) * C44448 + (C44756 + C44757) * C44445) *
               C50779 * C50757 -
           (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
            (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C50920) *
              C50677 * C50963 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C44446 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50970 +
            (C28278 + C28279) * C44447 + (C28280 + C28281) * C50971 +
            (C45058 + C45059) * C44448 + (C45060 + C45061) * C44445) *
               C50779 * C50920 -
           ((C49740 * C1718 + C50633 * C1726 + C49747 * C1719 +
             C50904 * C1727) *
                C44445 +
            (C49740 * C1714 + C50633 * C1722 + C49747 * C1715 +
             C50904 * C1723) *
                C44448 +
            (C45061 + C45060) * C50971 + (C45059 + C45058) * C44447 +
            (C28281 + C28280) * C50970 + (C28279 + C28278) * C44446) *
               C50779 * C50757) *
              C50677 * C536)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
               C44446 +
           (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
               C50970 +
           (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
           (C27857 + C27856) * C44448 + (C27855 + C27854) * C44445) *
              C50779 * C50693 * C50677 * C113 -
          ((C27865 + C27864) * C44445 + (C27863 + C27862) * C44448 +
           (C27861 + C27860) * C50971 + (C27859 + C27858) * C44447 +
           (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
               C50970 +
           (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
               C44446) *
              C50779 * C50693 * C50677 * C114 +
          ((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
               C44446 +
           (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
               C50970 +
           (C28278 + C28279) * C44447 + (C28280 + C28281) * C50971 +
           (C49747 * C400 + C50904 * C414 + C49740 * C401 + C50633 * C415) *
               C44448 +
           (C49747 * C418 + C50904 * C430 + C49740 * C419 + C50633 * C431) *
               C44445) *
              C50779 * C50693 * C50677 * C115 -
          ((C49740 * C422 + C50633 * C433 + C49747 * C419 + C50904 * C431) *
               C44445 +
           (C49740 * C403 + C50633 * C423 + C49747 * C401 + C50904 * C415) *
               C44448 +
           (C49740 * C421 + C50633 * C432 + C49747 * C404 + C50904 * C424) *
               C50971 +
           (C49740 * C402 + C50633 * C420 + C49747 * C394 + C50904 * C408) *
               C44447 +
           (C49740 * C137 + C50633 * C147 + C49747 * C136 + C50904 * C146) *
               C50970 +
           (C49740 * C126 + C50633 * C138 + C49747 * C125 + C50904 * C132) *
               C44446) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            (C27857 + C27856) * C44448 + (C27855 + C27854) * C44445) *
               C50779 * C50693 * C248 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C50693 * C249 +
           (C24768 * C44446 + C24769 * C50970 + C29728 * C44447 +
            C29729 * C50971 + (C25909 + C25910) * C44448 +
            (C25911 + C25912) * C44445) *
               C50779 * C50693 * C250) *
              C251 +
          (((C24756 + C24757) * C44446 + (C24758 + C24759) * C50970 +
            C28544 * C44447 + C28545 * C50971 + (C27866 + C27867) * C44448 +
            (C27868 + C27869) * C44445) *
               C50779 * C50693 * C249 -
           ((C27865 + C27864) * C44445 + (C27863 + C27862) * C44448 +
            (C27861 + C27860) * C50971 + (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C50693 * C248 -
           ((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
             C50904 * C2560) *
                C44445 +
            (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
             C50904 * C2554) *
                C44448 +
            (C25481 + C25480) * C50971 + (C25479 + C25478) * C44447 +
            C24770 * C50970 + C24771 * C44446) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C50693 * C50964 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C50693 * C50965 +
           (C24768 * C44446 + C24769 * C50970 + C29728 * C44447 +
            C29729 * C50971 + (C25909 + C25910) * C44448 +
            (C25911 + C25912) * C44445) *
               C50779 * C50693 * C1199) *
              C50911 +
          (((C24756 + C24757) * C44446 + (C24758 + C24759) * C50970 +
            C28544 * C44447 + C28545 * C50971 + (C27866 + C27867) * C44448 +
            (C27868 + C27869) * C44445) *
               C50779 * C50693 * C50965 -
           (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
            (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C50693 * C50964 -
           ((C49740 * C2557 + C50633 * C2561 + C49747 * C2556 +
             C50904 * C2560) *
                C44445 +
            (C49740 * C2552 + C50633 * C2558 + C49747 * C2551 +
             C50904 * C2554) *
                C44448 +
            (C25481 + C25480) * C50971 + (C25479 + C25478) * C44447 +
            C24770 * C50970 + C24771 * C44446) *
               C50779 * C50693 * C1199) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C50920 -
           ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
            (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
            (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
               C50779 * C50757) *
              C50964 +
          ((C28540 * C44446 + C28541 * C50970 + C29068 * C44447 +
            C29069 * C50971 + (C29078 + C29079) * C44448 +
            (C29080 + C29081) * C44445) *
               C50779 * C50757 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C50920) *
              C50965 +
          ((C24768 * C44446 + C24769 * C50970 + C29728 * C44447 +
            C29729 * C50971 + (C25909 + C25910) * C44448 +
            (C25911 + C25912) * C44445) *
               C50779 * C50920 -
           ((C49740 * C4484 + C50633 * C4492 + C49747 * C4485 +
             C50904 * C4493) *
                C44445 +
            (C49740 * C4480 + C50633 * C4486 + C49747 * C4481 +
             C50904 * C4487) *
                C44448 +
            (C25912 + C25911) * C50971 + (C25910 + C25909) * C44447 +
            C26399 * C50970 + C26400 * C44446) *
               C50779 * C50757) *
              C1199) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
               C44446 +
           (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
               C50970 +
           (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
           C44742 * C44448 + C44743 * C44445) *
              C50779 * C50693 * C964 -
          (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
           C28543 * C44447 + (C24747 + C24746) * C50970 +
           (C24745 + C24744) * C44446) *
              C50779 * C50693 * C965 +
          (C24768 * C44446 + C24769 * C50970 + C29728 * C44447 +
           C29729 * C50971 + (C25909 + C25910) * C44448 +
           (C25911 + C25912) * C44445) *
              C50779 * C50693 * C966 -
          ((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 + C50904 * C3554) *
               C44445 +
           (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 + C50904 * C3552) *
               C44448 +
           (C26414 + C26413) * C50971 + (C26412 + C26411) * C44447 +
           C25726 * C50970 + C25727 * C44446) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C50693 * C893 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C24756 + C24757) * C44446 + (C24758 + C24759) * C50970 +
            C28544 * C44447 + C28545 * C50971 + (C27866 + C27867) * C44448 +
            (C27868 + C27869) * C44445) *
               C50779 * C50693 * C50729 -
           (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
            (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C50693 * C893) *
              C896 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C44446 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50970 +
            (C28278 + C28279) * C44447 + (C28280 + C28281) * C50971 +
            (C45058 + C45059) * C44448 + (C45060 + C45061) * C44445) *
               C50779 * C50693 * C893 -
           ((C49740 * C1087 + C50633 * C1095 + C49747 * C1088 +
             C50904 * C1096) *
                C44445 +
            (C49740 * C1083 + C50633 * C1091 + C49747 * C1084 +
             C50904 * C1092) *
                C44448 +
            (C28075 + C28074) * C50971 + (C28073 + C28072) * C44447 +
            (C25089 + C25088) * C50970 + (C25087 + C25086) * C44446) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C391 -
           ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
            (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
            (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
               C50779 * C392 +
           (C44742 * C44446 + C44743 * C50970 + (C30256 + C30257) * C44447 +
            (C30258 + C30259) * C50971 +
            (C49747 * C5378 + C50904 * C5381 + C49740 * C5379 +
             C50633 * C5382) *
                C44448 +
            (C49747 * C5383 + C50904 * C5387 + C49740 * C5384 +
             C50633 * C5388) *
                C44445) *
               C50779 * C393) *
              C893 +
          ((C28540 * C44446 + C28541 * C50970 + C29068 * C44447 +
            C29069 * C50971 + (C29078 + C29079) * C44448 +
            (C29080 + C29081) * C44445) *
               C50779 * C392 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C391 -
           ((C49740 * C6384 + C50633 * C6388 + C49747 * C6385 +
             C50904 * C6389) *
                C44445 +
            (C49740 * C6382 + C50633 * C6386 + C49747 * C6383 +
             C50904 * C6387) *
                C44448 +
            (C29081 + C29080) * C50971 + (C29079 + C29078) * C44447 +
            C29066 * C50970 + C29067 * C44446) *
               C50779 * C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C44446 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50970 +
             (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
             C44742 * C44448 + C44743 * C44445) *
                C50779 * C50920 -
            ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
             (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
             (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
                C50779 * C50757) *
               C893 +
           ((C28540 * C44446 + C28541 * C50970 + C29068 * C44447 +
             C29069 * C50971 + (C29078 + C29079) * C44448 +
             (C29080 + C29081) * C44445) *
                C50779 * C50757 -
            (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
             C28543 * C44447 + (C24747 + C24746) * C50970 +
             (C24745 + C24744) * C44446) *
                C50779 * C50920) *
               C50729) *
              C50911 +
          ((((C27858 + C27859) * C44446 + (C27860 + C27861) * C50970 +
             (C27862 + C27863) * C44447 + (C27864 + C27865) * C50971 +
             (C44754 + C44755) * C44448 + (C44756 + C44757) * C44445) *
                C50779 * C50757 -
            (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
             (C27859 + C27858) * C44447 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50970 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C44446) *
                C50779 * C50920) *
               C893 +
           (((C24756 + C24757) * C44446 + (C24758 + C24759) * C50970 +
             C28544 * C44447 + C28545 * C50971 + (C27866 + C27867) * C44448 +
             (C27868 + C27869) * C44445) *
                C50779 * C50920 -
            ((C49740 * C5977 + C50633 * C5979 + C49747 * C4488 +
              C50904 * C4494) *
                 C44445 +
             (C49740 * C5976 + C50633 * C5978 + C49747 * C4482 +
              C50904 * C4490) *
                 C44448 +
             (C27869 + C27868) * C50971 + (C27867 + C27866) * C44447 +
             C28546 * C50970 + C28547 * C44446) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C50693 * C893 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C24756 + C24757) * C44446 + (C24758 + C24759) * C50970 +
            C28544 * C44447 + C28545 * C50971 + (C27866 + C27867) * C44448 +
            (C27868 + C27869) * C44445) *
               C50779 * C50693 * C50729 -
           (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
            (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C50693 * C893) *
              C896 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C44446 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50970 +
            (C28278 + C28279) * C44447 + (C28280 + C28281) * C50971 +
            (C45058 + C45059) * C44448 + (C45060 + C45061) * C44445) *
               C50779 * C50693 * C893 -
           ((C49740 * C1087 + C50633 * C1095 + C49747 * C1088 +
             C50904 * C1096) *
                C44445 +
            (C49740 * C1083 + C50633 * C1091 + C49747 * C1084 +
             C50904 * C1092) *
                C44448 +
            (C28075 + C28074) * C50971 + (C28073 + C28072) * C44447 +
            (C25089 + C25088) * C50970 + (C25087 + C25086) * C44446) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
               C44446 +
           (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
               C50970 +
           (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
           C44742 * C44448 + C44743 * C44445) *
              C50779 * C50693 * C964 -
          (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
           C28543 * C44447 + (C24747 + C24746) * C50970 +
           (C24745 + C24744) * C44446) *
              C50779 * C50693 * C965 +
          (C24768 * C44446 + C24769 * C50970 + C29728 * C44447 +
           C29729 * C50971 + (C25909 + C25910) * C44448 +
           (C25911 + C25912) * C44445) *
              C50779 * C50693 * C966 -
          ((C49740 * C3549 + C50633 * C3553 + C49747 * C3550 + C50904 * C3554) *
               C44445 +
           (C49740 * C3547 + C50633 * C3551 + C49747 * C3548 + C50904 * C3552) *
               C44448 +
           (C26414 + C26413) * C50971 + (C26412 + C26411) * C44447 +
           C25726 * C50970 + C25727 * C44446) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                 C44446 +
             (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                 C50970 +
             (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
             C44742 * C44448 + C44743 * C44445) *
                C50779 * C1544 -
            (C46522 * C44445 + C46523 * C44448 + (C27854 + C27855) * C50971 +
             (C27856 + C27857) * C44447 + (C27853 + C27852) * C50970 +
             (C27851 + C27850) * C44446) *
                C50779 * C50757) *
               C50919 +
           ((C28540 * C44446 + C28541 * C50970 + C29068 * C44447 +
             C29069 * C50971 + (C29078 + C29079) * C44448 +
             (C29080 + C29081) * C44445) *
                C50779 * C50757 -
            (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
             C28543 * C44447 + (C24747 + C24746) * C50970 +
             (C24745 + C24744) * C44446) *
                C50779 * C1544) *
               C50729) *
              C50911 +
          ((((C27858 + C27859) * C44446 + (C27860 + C27861) * C50970 +
             (C27862 + C27863) * C44447 + (C27864 + C27865) * C50971 +
             (C44754 + C44755) * C44448 + (C44756 + C44757) * C44445) *
                C50779 * C50757 -
            (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
             (C27859 + C27858) * C44447 +
             (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                 C50970 +
             (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                 C44446) *
                C50779 * C1544) *
               C50919 +
           (((C24756 + C24757) * C44446 + (C24758 + C24759) * C50970 +
             C28544 * C44447 + C28545 * C50971 + (C27866 + C27867) * C44448 +
             (C27868 + C27869) * C44445) *
                C50779 * C1544 -
            ((C49740 * C5977 + C50633 * C5979 + C49747 * C4488 +
              C50904 * C4494) *
                 C44445 +
             (C49740 * C5976 + C50633 * C5978 + C49747 * C4482 +
              C50904 * C4490) *
                 C44448 +
             (C27869 + C27868) * C50971 + (C27867 + C27866) * C44447 +
             C28546 * C50970 + C28547 * C44446) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C50966 -
           (C46522 * C44445 + C46523 * C44448 + (C27854 + C27855) * C50971 +
            (C27856 + C27857) * C44447 + (C27853 + C27852) * C50970 +
            (C27851 + C27850) * C44446) *
               C50779 * C50967 +
           (C44742 * C44446 + C44743 * C50970 + (C30256 + C30257) * C44447 +
            (C30258 + C30259) * C50971 + (C46532 + C46533) * C44448 +
            (C46534 + C46535) * C44445) *
               C50779 * C1960) *
              C50919 +
          ((C28540 * C44446 + C28541 * C50970 + C29068 * C44447 +
            C29069 * C50971 + (C29078 + C29079) * C44448 +
            (C29080 + C29081) * C44445) *
               C50779 * C50967 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C50966 -
           ((C49740 * C6384 + C50633 * C6388 + C49747 * C6385 +
             C50904 * C6389) *
                C44445 +
            (C49740 * C6382 + C50633 * C6386 + C49747 * C6383 +
             C50904 * C6387) *
                C44448 +
            (C29081 + C29080) * C50971 + (C29079 + C29078) * C44447 +
            C29066 * C50970 + C29067 * C44446) *
               C50779 * C1960) *
              C50729) *
         C50658) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C1544 -
           ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
            (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
            (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
               C50779 * C50757) *
              C248 +
          ((C28540 * C44446 + C28541 * C50970 + C29068 * C44447 +
            C29069 * C50971 + (C29078 + C29079) * C44448 +
            (C29080 + C29081) * C44445) *
               C50779 * C50757 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C1544) *
              C249 +
          ((C24768 * C44446 + C24769 * C50970 + C29728 * C44447 +
            C29729 * C50971 + (C25909 + C25910) * C44448 +
            (C25911 + C25912) * C44445) *
               C50779 * C1544 -
           ((C49740 * C4484 + C50633 * C4492 + C49747 * C4485 +
             C50904 * C4493) *
                C44445 +
            (C49740 * C4480 + C50633 * C4486 + C49747 * C4481 +
             C50904 * C4487) *
                C44448 +
            (C25912 + C25911) * C50971 + (C25910 + C25909) * C44447 +
            C26399 * C50970 + C26400 * C44446) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C1544 -
           ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
            (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
            (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C27858 + C27859) * C44446 + (C27860 + C27861) * C50970 +
            (C27862 + C27863) * C44447 + (C27864 + C27865) * C50971 +
            (C44754 + C44755) * C44448 + (C44756 + C44757) * C44445) *
               C50779 * C50757 -
           (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
            (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C44446 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50970 +
            (C28278 + C28279) * C44447 + (C28280 + C28281) * C50971 +
            (C45058 + C45059) * C44448 + (C45060 + C45061) * C44445) *
               C50779 * C1544 -
           ((C49740 * C1718 + C50633 * C1726 + C49747 * C1719 +
             C50904 * C1727) *
                C44445 +
            (C49740 * C1714 + C50633 * C1722 + C49747 * C1715 +
             C50904 * C1723) *
                C44448 +
            (C45061 + C45060) * C50971 + (C45059 + C45058) * C44447 +
            (C28281 + C28280) * C50970 + (C28279 + C28278) * C44446) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
               C44446 +
           (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
               C50970 +
           (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
           C44742 * C44448 + C44743 * C44445) *
              C50779 * C1710 -
          (C46522 * C44445 + C46523 * C44448 + (C27854 + C27855) * C50971 +
           (C27856 + C27857) * C44447 + (C27853 + C27852) * C50970 +
           (C27851 + C27850) * C44446) *
              C50779 * C1711 +
          (C44742 * C44446 + C44743 * C50970 + (C30256 + C30257) * C44447 +
           (C30258 + C30259) * C50971 + (C46532 + C46533) * C44448 +
           (C46534 + C46535) * C44445) *
              C50779 * C1712 -
          ((C49740 * C7282 + C50633 * C7286 + C49747 * C7283 + C50904 * C7287) *
               C44445 +
           (C49740 * C7280 + C50633 * C7284 + C49747 * C7281 + C50904 * C7285) *
               C44448 +
           (C46535 + C46534) * C50971 + (C46533 + C46532) * C44447 +
           C46522 * C50970 + C46523 * C44446) *
              C50779 * C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C50966 -
           (C46522 * C44445 + C46523 * C44448 + (C27854 + C27855) * C50971 +
            (C27856 + C27857) * C44447 + (C27853 + C27852) * C50970 +
            (C27851 + C27850) * C44446) *
               C50779 * C50967 +
           (C44742 * C44446 + C44743 * C50970 + (C30256 + C30257) * C44447 +
            (C30258 + C30259) * C50971 + (C46532 + C46533) * C44448 +
            (C46534 + C46535) * C44445) *
               C50779 * C1960) *
              C50677 * C50911 +
          (((C27858 + C27859) * C44446 + (C27860 + C27861) * C50970 +
            (C27862 + C27863) * C44447 + (C27864 + C27865) * C50971 +
            (C44754 + C44755) * C44448 + (C44756 + C44757) * C44445) *
               C50779 * C50967 -
           (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
            (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C50966 -
           ((C49740 * C5385 + C50633 * C5389 + C49747 * C5384 +
             C50904 * C5388) *
                C44445 +
            (C49740 * C5380 + C50633 * C5386 + C49747 * C5379 +
             C50904 * C5382) *
                C44448 +
            (C44757 + C44756) * C50971 + (C44755 + C44754) * C44447 +
            C44752 * C50970 + C44753 * C44446) *
               C50779 * C1960) *
              C50677 * C50664)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C1544 -
           ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
            (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
            (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C27858 + C27859) * C44446 + (C27860 + C27861) * C50970 +
            (C27862 + C27863) * C44447 + (C27864 + C27865) * C50971 +
            (C44754 + C44755) * C44448 + (C44756 + C44757) * C44445) *
               C50779 * C50757 -
           (C44752 * C44445 + C44753 * C44448 + (C27861 + C27860) * C50971 +
            (C27859 + C27858) * C44447 +
            (C49740 * C135 + C50633 * C145 + C49747 * C134 + C50904 * C144) *
                C50970 +
            (C49740 * C124 + C50633 * C131 + C49747 * C123 + C50904 * C130) *
                C44446) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C49747 * C124 + C50904 * C131 + C49740 * C125 + C50633 * C132) *
                C44446 +
            (C49747 * C135 + C50904 * C145 + C49740 * C136 + C50633 * C146) *
                C50970 +
            (C28278 + C28279) * C44447 + (C28280 + C28281) * C50971 +
            (C45058 + C45059) * C44448 + (C45060 + C45061) * C44445) *
               C50779 * C1544 -
           ((C49740 * C1718 + C50633 * C1726 + C49747 * C1719 +
             C50904 * C1727) *
                C44445 +
            (C49740 * C1714 + C50633 * C1722 + C49747 * C1715 +
             C50904 * C1723) *
                C44448 +
            (C45061 + C45060) * C50971 + (C45059 + C45058) * C44447 +
            (C28281 + C28280) * C50970 + (C28279 + C28278) * C44446) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49747 * C122 + C50904 * C129 + C49740 * C123 + C50633 * C130) *
                C44446 +
            (C49747 * C133 + C50904 * C143 + C49740 * C134 + C50633 * C144) *
                C50970 +
            (C27850 + C27851) * C44447 + (C27852 + C27853) * C50971 +
            C44742 * C44448 + C44743 * C44445) *
               C50779 * C1544 -
           ((C30259 + C30258) * C44445 + (C30257 + C30256) * C44448 +
            (C27854 + C27855) * C50971 + (C27856 + C27857) * C44447 +
            (C27853 + C27852) * C50970 + (C27851 + C27850) * C44446) *
               C50779 * C50757) *
              C248 +
          ((C28540 * C44446 + C28541 * C50970 + C29068 * C44447 +
            C29069 * C50971 + (C29078 + C29079) * C44448 +
            (C29080 + C29081) * C44445) *
               C50779 * C50757 -
           (C29066 * C44445 + C29067 * C44448 + C28542 * C50971 +
            C28543 * C44447 + (C24747 + C24746) * C50970 +
            (C24745 + C24744) * C44446) *
               C50779 * C1544) *
              C249 +
          ((C24768 * C44446 + C24769 * C50970 + C29728 * C44447 +
            C29729 * C50971 + (C25909 + C25910) * C44448 +
            (C25911 + C25912) * C44445) *
               C50779 * C1544 -
           ((C49740 * C4484 + C50633 * C4492 + C49747 * C4485 +
             C50904 * C4493) *
                C44445 +
            (C49740 * C4480 + C50633 * C4486 + C49747 * C4481 +
             C50904 * C4487) *
                C44448 +
            (C25912 + C25911) * C50971 + (C25910 + C25909) * C44447 +
            C26399 * C50970 + C26400 * C44446) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50693 * C50919 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C50729) *
              C50962 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C50729 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C50919) *
              C50963 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C16963 * C395 + C16958 * C409 + C16964 * C394 + C16959 * C408 +
             C16965 * C402 + C16960 * C420) *
                C33716 +
            (C16963 * C405 + C16958 * C425 + C16964 * C404 + C16959 * C424 +
             C16965 * C421 + C16960 * C432) *
                C50854) *
               C50779 * C50693 * C50919 -
           ((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
             C16963 * C786 + C16958 * C792) *
                C50854 +
            (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
             C16963 * C777 + C16958 * C782) *
                C33716 +
            (C17494 + C17493 + C17492) * C33713 +
            (C17491 + C17490 + C17489) * C33715) *
               C50779 * C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C50919 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C50729) *
              C50962 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C50729 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C50919) *
              C50963 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C50693 * C50919 -
           (((C19747 * C3079 + C50628 * C3083) * C50854 +
             (C19747 * C3074 + C50628 * C3080) * C33716 + C20128 * C33713 +
             C20127 * C33715) *
                C2161 +
            (C36929 + C36928 + C36927 + C36926) * C2160 +
            (C36925 + C36924 + C36923 + C36922) * C2159) *
               C50693 * C50729) *
              C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C33715 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C33713 +
             (C34058 + C34059 + C34060) * C33716 +
             (C34061 + C34062 + C34063) * C50854) *
                C50779 * C50920 -
            ((C34064 + C34065 + C34066) * C50854 +
             (C34067 + C34068 + C34069) * C33716 +
             (C34063 + C34062 + C34061) * C33713 +
             (C34060 + C34059 + C34058) * C33715) *
                C50779 * C50757) *
               C50919 +
           (((C17864 + C17863 + C17862) * C33715 +
             (C17861 + C17860 + C17859) * C33713 +
             (C18291 + C18292 + C18293) * C33716 +
             (C18294 + C18295 + C18296) * C50854) *
                C50779 * C50757 -
            ((C17859 + C17860 + C17861) * C50854 +
             (C17862 + C17863 + C17864) * C33716 +
             (C17166 + C17165 + C17164) * C33713 +
             (C17163 + C17162 + C17161) * C33715) *
                C50779 * C50920) *
               C50729) *
              C251 +
          ((((C34070 + C34071 + C34072) * C33715 +
             (C34073 + C34074 + C34075) * C33713 +
             (C34076 + C34077 + C34078) * C33716 +
             (C34079 + C34080 + C34081) * C50854) *
                C50779 * C50757 -
            ((C34075 + C34074 + C34073) * C50854 +
             (C34072 + C34071 + C34070) * C33716 +
             (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C33713 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C33715) *
                C50779 * C50920) *
               C50919 +
           (((C17173 + C17174 + C17175) * C33715 +
             (C17176 + C17177 + C17178) * C33713 +
             (C17865 + C17866 + C17867) * C33716 +
             (C17868 + C17869 + C17870) * C50854) *
                C50779 * C50920 -
            ((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50854 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C33716 +
             (C17870 + C17869 + C17868) * C33713 +
             (C17867 + C17866 + C17865) * C33715) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C33715 +
              (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
              C22106 * C50854) *
                 C2159 +
             (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
                C50920 -
            ((C37270 + C37271 + C37272 + C37273) * C2161 +
             (C37274 + C37275 + C37276 + C37277) * C2160 +
             (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
              C22105 * C33715) *
                 C2159) *
                C50757) *
               C50919 +
           (((C37277 + C37276 + C37275 + C37274) * C2159 +
             (C37273 + C37272 + C37271 + C37270) * C2160 +
             (C20388 * C33715 + C20387 * C33713 + C20707 * C33716 +
              C20708 * C50854) *
                 C2161) *
                C50757 -
            ((C36608 + C36609 + C36610 + C36611) * C2161 +
             (C36607 + C36606 + C36605 + C36604) * C2160 +
             (C36603 + C36602 + C36601 + C36600) * C2159) *
                C50920) *
               C50729) *
              C251 +
          ((((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
              C22116 * C50854) *
                 C2159 +
             (C37278 + C37279 + C37280 + C37281) * C2160 +
             (C37282 + C37283 + C37284 + C37285) * C2161) *
                C50757 -
            (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
             (C22114 * C50854 + C22113 * C33716 +
              (C19747 * C134 + C50628 * C144) * C33713 +
              (C19747 * C123 + C50628 * C130) * C33715) *
                 C2159) *
                C50920) *
               C50919 +
           (((C36612 + C36613 + C36614 + C36615) * C2159 +
             (C36616 + C36617 + C36618 + C36619) * C2160 +
             (C36620 + C36621 + C36622 + C36623) * C2161) *
                C50920 -
            (((C19747 * C3549 + C50628 * C3553) * C50854 +
              (C19747 * C3547 + C50628 * C3551) * C33716 + C20398 * C33713 +
              C20397 * C33715) *
                 C2161 +
             (C37285 + C37284 + C37283 + C37282) * C2160 +
             (C37281 + C37280 + C37279 + C37278) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C16963 * C397 + C16958 * C411 + C16964 * C396 + C16959 * C410 +
             C16965 * C395 + C16960 * C409) *
                C33716 +
            (C16963 * C407 + C16958 * C427 + C16964 * C406 + C16959 * C426 +
             C16965 * C405 + C16960 * C425) *
                C50854) *
               C50779 * C50693 * C248 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C249 +
           ((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C50693 * C250) *
              C251 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C249 -
           ((C16965 * C404 + C16960 * C424 + C16964 * C405 + C16959 * C425 +
             C16963 * C406 + C16958 * C426) *
                C50854 +
            (C16965 * C394 + C16960 * C408 + C16964 * C395 + C16959 * C409 +
             C16963 * C396 + C16958 * C410) *
                C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C248 -
           ((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 + C16959 * C1443 +
             C16963 * C1436 + C16958 * C1444) *
                C50854 +
            (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 + C16959 * C1439 +
             C16963 * C1432 + C16958 * C1440) *
                C33716 +
            (C17184 + C17183 + C17182) * C33713 +
            (C17181 + C17180 + C17179) * C33715) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
            C16965 * C124 + C16960 * C131) *
               C33715 +
           (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
            C16965 * C135 + C16960 * C145) *
               C33713 +
           (C16963 * C397 + C16958 * C411 + C16964 * C396 + C16959 * C410 +
            C16965 * C395 + C16960 * C409) *
               C33716 +
           (C16963 * C407 + C16958 * C427 + C16964 * C406 + C16959 * C426 +
            C16965 * C405 + C16960 * C425) *
               C50854) *
              C50779 * C50693 * C50677 * C113 -
          ((C16965 * C404 + C16960 * C424 + C16964 * C405 + C16959 * C425 +
            C16963 * C406 + C16958 * C426) *
               C50854 +
           (C16965 * C394 + C16960 * C408 + C16964 * C395 + C16959 * C409 +
            C16963 * C396 + C16958 * C410) *
               C33716 +
           (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
            C16963 * C134 + C16958 * C144) *
               C33713 +
           (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
            C16963 * C123 + C16958 * C130) *
               C33715) *
              C50779 * C50693 * C50677 * C114 +
          ((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
            C16965 * C126 + C16960 * C138) *
               C33715 +
           (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
            C16965 * C137 + C16960 * C147) *
               C33713 +
           (C16963 * C395 + C16958 * C409 + C16964 * C394 + C16959 * C408 +
            C16965 * C402 + C16960 * C420) *
               C33716 +
           (C16963 * C405 + C16958 * C425 + C16964 * C404 + C16959 * C424 +
            C16965 * C421 + C16960 * C432) *
               C50854) *
              C50779 * C50693 * C50677 * C115 -
          ((C16965 * C642 + C16960 * C644 + C16964 * C421 + C16959 * C432 +
            C16963 * C404 + C16958 * C424) *
               C50854 +
           (C16965 * C641 + C16960 * C643 + C16964 * C402 + C16959 * C420 +
            C16963 * C394 + C16958 * C408) *
               C33716 +
           (C16965 * C140 + C16960 * C148 + C16964 * C137 + C16959 * C147 +
            C16963 * C136 + C16958 * C146) *
               C33713 +
           (C16965 * C127 + C16960 * C139 + C16964 * C126 + C16959 * C138 +
            C16963 * C125 + C16958 * C132) *
               C33715) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C391 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C392 +
           ((C34069 + C34068 + C34067) * C33715 +
            (C34066 + C34065 + C34064) * C33713 +
            (C16963 * C1717 + C16958 * C1725 + C16964 * C1716 + C16959 * C1724 +
             C16965 * C1715 + C16960 * C1723) *
                C33716 +
            (C16963 * C1721 + C16958 * C1729 + C16964 * C1720 + C16959 * C1728 +
             C16965 * C1719 + C16960 * C1727) *
                C50854) *
               C50779 * C393) *
              C50677 * C251 +
          (((C34070 + C34071 + C34072) * C33715 +
            (C34073 + C34074 + C34075) * C33713 +
            (C34076 + C34077 + C34078) * C33716 +
            (C34079 + C34080 + C34081) * C50854) *
               C50779 * C392 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C391 -
           ((C16965 * C1718 + C16960 * C1726 + C16964 * C1719 + C16959 * C1727 +
             C16963 * C1720 + C16958 * C1728) *
                C50854 +
            (C16965 * C1714 + C16960 * C1722 + C16964 * C1715 + C16959 * C1723 +
             C16963 * C1716 + C16958 * C1724) *
                C33716 +
            (C34081 + C34080 + C34079) * C33713 +
            (C34078 + C34077 + C34076) * C33715) *
               C50779 * C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C19879 * C33715 + C19880 * C33713 + C20392 * C33716 +
            C20391 * C50854) *
               C2160 +
           (C19881 * C33715 + C19882 * C33713 + C20390 * C33716 +
            C20389 * C50854) *
               C2161) *
              C50693 * C50677 * C113 -
          ((C20396 * C50854 + C20395 * C33716 + C19890 * C33713 +
            C19889 * C33715) *
               C2161 +
           (C20394 * C50854 + C20393 * C33716 + C19888 * C33713 +
            C19887 * C33715) *
               C2160 +
           (C22114 * C50854 + C22113 * C33716 +
            (C19747 * C134 + C50628 * C144) * C33713 +
            (C19747 * C123 + C50628 * C130) * C33715) *
               C2159) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C33715 +
            (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
            C22440 * C50854) *
               C2159 +
           (C20123 * C33715 + C20124 * C33713 + C22277 * C33716 +
            C22278 * C50854) *
               C2160 +
           (C20125 * C33715 + C20126 * C33713 + C31482 * C33716 +
            C31483 * C50854) *
               C2161) *
              C50693 * C50677 * C115 -
          (((C19747 * C1434 + C50628 * C1442) * C50854 +
            (C19747 * C1430 + C50628 * C1438) * C33716 +
            (C19747 * C278 + C50628 * C290) * C33713 +
            (C19747 * C260 + C50628 * C274) * C33715) *
               C2161 +
           ((C19747 * C787 + C50628 * C793) * C50854 +
            (C19747 * C778 + C50628 * C783) * C33716 +
            (C19747 * C263 + C50628 * C283) * C33713 +
            (C19747 * C253 + C50628 * C267) * C33715) *
               C2160 +
           ((C19747 * C404 + C50628 * C424) * C50854 +
            (C19747 * C394 + C50628 * C408) * C33716 +
            (C19747 * C136 + C50628 * C146) * C33713 +
            (C19747 * C125 + C50628 * C132) * C33715) *
               C2159) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C248 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C249 +
           (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C19886 * C33715 + C19885 * C33713 + C21051 * C33716 +
             C21052 * C50854) *
                C2161) *
               C50693 * C250) *
              C251 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C249 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C248 -
           (((C19747 * C4067 + C50628 * C4071) * C50854 +
             (C19747 * C4065 + C50628 * C4069) * C33716 + C19894 * C33713 +
             C19893 * C33715) *
                C2161 +
            (C36623 + C36622 + C36621 + C36620) * C2160 + C36629 * C2159) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C391 -
           ((C20706 * C50854 + C20705 * C33716 + C20389 * C33713 +
             C20390 * C33715) *
                C2161 +
            (C20704 * C50854 + C20703 * C33716 + C20391 * C33713 +
             C20392 * C33715) *
                C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C392 +
           ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
             C22111 * C50854) *
                C2159 +
            (C20703 * C33715 + C20704 * C33713 + C22110 * C33716 +
             C22109 * C50854) *
                C2160 +
            (C20705 * C33715 + C20706 * C33713 + C23063 * C33716 +
             C23064 * C50854) *
                C2161) *
               C393) *
              C50677 * C251 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C20393 * C33715 + C20394 * C33713 + C21919 * C33716 +
             C21920 * C50854) *
                C2160 +
            (C20395 * C33715 + C20396 * C33713 + C21921 * C33716 +
             C21922 * C50854) *
                C2161) *
               C392 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C391 -
           (((C19747 * C4484 + C50628 * C4492) * C50854 +
             (C19747 * C4480 + C50628 * C4486) * C33716 + C21922 * C33713 +
             C21921 * C33715) *
                C2161 +
            (C22120 * C50854 + C22119 * C33716 + C21920 * C33713 +
             C21919 * C33715) *
                C2160 +
            (C22118 * C50854 + C22117 * C33716 + C22116 * C33713 +
             C22115 * C33715) *
                C2159) *
               C393) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50920 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C50677 * C50962 +
          (((C34070 + C34071 + C34072) * C33715 +
            (C34073 + C34074 + C34075) * C33713 +
            (C34076 + C34077 + C34078) * C33716 +
            (C34079 + C34080 + C34081) * C50854) *
               C50779 * C50757 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50920) *
              C50677 * C50963 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C34386 + C34387 + C34388) * C33716 +
            (C34389 + C34390 + C34391) * C50854) *
               C50779 * C50920 -
           ((C16965 * C422 + C16960 * C433 + C16964 * C419 + C16959 * C431 +
             C16963 * C418 + C16958 * C430) *
                C50854 +
            (C16965 * C403 + C16960 * C423 + C16964 * C401 + C16959 * C415 +
             C16963 * C400 + C16958 * C414) *
                C33716 +
            (C34391 + C34390 + C34389) * C33713 +
            (C34388 + C34387 + C34386) * C33715) *
               C50779 * C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50920 -
           ((C20706 * C50854 + C20705 * C33716 + C20389 * C33713 +
             C20390 * C33715) *
                C2161 +
            (C20704 * C50854 + C20703 * C33716 + C20391 * C33713 +
             C20392 * C33715) *
                C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C50677 * C50962 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C20393 * C33715 + C20394 * C33713 + C21919 * C33716 +
             C21920 * C50854) *
                C2160 +
            (C20395 * C33715 + C20396 * C33713 + C21921 * C33716 +
             C21922 * C50854) *
                C2161) *
               C50757 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50920) *
              C50677 * C50963 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C50920 -
           (((C19747 * C2557 + C50628 * C2561) * C50854 +
             (C19747 * C2552 + C50628 * C2558) * C33716 + C31483 * C33713 +
             C31482 * C33715) *
                C2161 +
            (C22280 * C50854 + C22279 * C33716 + C22278 * C33713 +
             C22277 * C33715) *
                C2160 +
            (C22442 * C50854 + C22441 * C33716 + C22440 * C33713 +
             C22439 * C33715) *
                C2159) *
               C50757) *
              C50677 * C536)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
            C16965 * C124 + C16960 * C131) *
               C33715 +
           (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
            C16965 * C135 + C16960 * C145) *
               C33713 +
           (C16963 * C397 + C16958 * C411 + C16964 * C396 + C16959 * C410 +
            C16965 * C395 + C16960 * C409) *
               C33716 +
           (C16963 * C407 + C16958 * C427 + C16964 * C406 + C16959 * C426 +
            C16965 * C405 + C16960 * C425) *
               C50854) *
              C50779 * C50693 * C50677 * C113 -
          ((C16965 * C404 + C16960 * C424 + C16964 * C405 + C16959 * C425 +
            C16963 * C406 + C16958 * C426) *
               C50854 +
           (C16965 * C394 + C16960 * C408 + C16964 * C395 + C16959 * C409 +
            C16963 * C396 + C16958 * C410) *
               C33716 +
           (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
            C16963 * C134 + C16958 * C144) *
               C33713 +
           (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
            C16963 * C123 + C16958 * C130) *
               C33715) *
              C50779 * C50693 * C50677 * C114 +
          ((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
            C16965 * C126 + C16960 * C138) *
               C33715 +
           (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
            C16965 * C137 + C16960 * C147) *
               C33713 +
           (C16963 * C395 + C16958 * C409 + C16964 * C394 + C16959 * C408 +
            C16965 * C402 + C16960 * C420) *
               C33716 +
           (C16963 * C405 + C16958 * C425 + C16964 * C404 + C16959 * C424 +
            C16965 * C421 + C16960 * C432) *
               C50854) *
              C50779 * C50693 * C50677 * C115 -
          ((C16965 * C642 + C16960 * C644 + C16964 * C421 + C16959 * C432 +
            C16963 * C404 + C16958 * C424) *
               C50854 +
           (C16965 * C641 + C16960 * C643 + C16964 * C402 + C16959 * C420 +
            C16963 * C394 + C16958 * C408) *
               C33716 +
           (C16965 * C140 + C16960 * C148 + C16964 * C137 + C16959 * C147 +
            C16963 * C136 + C16958 * C146) *
               C33713 +
           (C16965 * C127 + C16960 * C139 + C16964 * C126 + C16959 * C138 +
            C16963 * C125 + C16958 * C132) *
               C33715) *
              C50779 * C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C16963 * C397 + C16958 * C411 + C16964 * C396 + C16959 * C410 +
             C16965 * C395 + C16960 * C409) *
                C33716 +
            (C16963 * C407 + C16958 * C427 + C16964 * C406 + C16959 * C426 +
             C16965 * C405 + C16960 * C425) *
                C50854) *
               C50779 * C50693 * C248 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C249 +
           ((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C50693 * C250) *
              C251 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C249 -
           ((C16965 * C404 + C16960 * C424 + C16964 * C405 + C16959 * C425 +
             C16963 * C406 + C16958 * C426) *
                C50854 +
            (C16965 * C394 + C16960 * C408 + C16964 * C395 + C16959 * C409 +
             C16963 * C396 + C16958 * C410) *
                C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C248 -
           ((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 + C16959 * C1443 +
             C16963 * C1436 + C16958 * C1444) *
                C50854 +
            (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 + C16959 * C1439 +
             C16963 * C1432 + C16958 * C1440) *
                C33716 +
            (C17184 + C17183 + C17182) * C33713 +
            (C17181 + C17180 + C17179) * C33715) *
               C50779 * C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C19879 * C33715 + C19880 * C33713 + C20392 * C33716 +
            C20391 * C50854) *
               C2160 +
           (C19881 * C33715 + C19882 * C33713 + C20390 * C33716 +
            C20389 * C50854) *
               C2161) *
              C50693 * C50677 * C113 -
          ((C20396 * C50854 + C20395 * C33716 + C19890 * C33713 +
            C19889 * C33715) *
               C2161 +
           (C20394 * C50854 + C20393 * C33716 + C19888 * C33713 +
            C19887 * C33715) *
               C2160 +
           (C22114 * C50854 + C22113 * C33716 +
            (C19747 * C134 + C50628 * C144) * C33713 +
            (C19747 * C123 + C50628 * C130) * C33715) *
               C2159) *
              C50693 * C50677 * C114 +
          (((C19747 * C124 + C50628 * C131) * C33715 +
            (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
            C22440 * C50854) *
               C2159 +
           (C20123 * C33715 + C20124 * C33713 + C22277 * C33716 +
            C22278 * C50854) *
               C2160 +
           (C20125 * C33715 + C20126 * C33713 + C31482 * C33716 +
            C31483 * C50854) *
               C2161) *
              C50693 * C50677 * C115 -
          (((C19747 * C1434 + C50628 * C1442) * C50854 +
            (C19747 * C1430 + C50628 * C1438) * C33716 +
            (C19747 * C278 + C50628 * C290) * C33713 +
            (C19747 * C260 + C50628 * C274) * C33715) *
               C2161 +
           ((C19747 * C787 + C50628 * C793) * C50854 +
            (C19747 * C778 + C50628 * C783) * C33716 +
            (C19747 * C263 + C50628 * C283) * C33713 +
            (C19747 * C253 + C50628 * C267) * C33715) *
               C2160 +
           ((C19747 * C404 + C50628 * C424) * C50854 +
            (C19747 * C394 + C50628 * C408) * C33716 +
            (C19747 * C136 + C50628 * C146) * C33713 +
            (C19747 * C125 + C50628 * C132) * C33715) *
               C2159) *
              C50693 * C50677 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C248 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C249 +
           (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C19886 * C33715 + C19885 * C33713 + C21051 * C33716 +
             C21052 * C50854) *
                C2161) *
               C50693 * C250) *
              C251 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C249 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C248 -
           (((C19747 * C4067 + C50628 * C4071) * C50854 +
             (C19747 * C4065 + C50628 * C4069) * C33716 + C19894 * C33713 +
             C19893 * C33715) *
                C2161 +
            (C36623 + C36622 + C36621 + C36620) * C2160 + C36629 * C2159) *
               C50693 * C250) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50693 * C50964 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C50965 +
           ((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C50693 * C1199) *
              C50911 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C50965 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C50964 -
           ((C16965 * C1434 + C16960 * C1442 + C16964 * C1435 + C16959 * C1443 +
             C16963 * C1436 + C16958 * C1444) *
                C50854 +
            (C16965 * C1430 + C16960 * C1438 + C16964 * C1431 + C16959 * C1439 +
             C16963 * C1432 + C16958 * C1440) *
                C33716 +
            (C17184 + C17183 + C17182) * C33713 +
            (C17181 + C17180 + C17179) * C33715) *
               C50779 * C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C50964 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C50965 +
           (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C37531 + C37532 + C37533 + C37534) * C2161) *
               C50693 * C1199) *
              C50911 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C50965 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C50964 -
           (((C19747 * C4067 + C50628 * C4071) * C50854 +
             (C19747 * C4065 + C50628 * C4069) * C33716 + C19894 * C33713 +
             C19893 * C33715) *
                C2161 +
            (C36623 + C36622 + C36621 + C36620) * C2160 + C36629 * C2159) *
               C50693 * C1199) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50920 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C50964 +
          (((C17864 + C17863 + C17862) * C33715 +
            (C17861 + C17860 + C17859) * C33713 +
            (C18291 + C18292 + C18293) * C33716 +
            (C18294 + C18295 + C18296) * C50854) *
               C50779 * C50757 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50920) *
              C50965 +
          (((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C50920 -
           ((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 + C16959 * C2560 +
             C16963 * C2555 + C16958 * C2559) *
                C50854 +
            (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 + C16959 * C2554 +
             C16963 * C2550 + C16958 * C2553) *
                C33716 +
            (C18800 + C18799 + C18798) * C33713 +
            (C18797 + C18796 + C18795) * C33715) *
               C50779 * C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50920 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C50964 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C38178 + C38179 + C38180 + C38181) * C2161) *
               C50757 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50920) *
              C50965 +
          ((C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C37531 + C37532 + C37533 + C37534) * C2161) *
               C50920 -
           (((C19747 * C20687 + C50628 * C20689) * C50854 +
             (C19747 * C20686 + C50628 * C20688) * C33716 + C21052 * C33713 +
             C21051 * C33715) *
                C2161 +
            (C38181 + C38180 + C38179 + C38178) * C2160 + C38183 * C2159) *
               C50757) *
              C1199) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
            C16965 * C124 + C16960 * C131) *
               C33715 +
           (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
            C16965 * C135 + C16960 * C145) *
               C33713 +
           (C34058 + C34059 + C34060) * C33716 +
           (C34061 + C34062 + C34063) * C50854) *
              C50779 * C50693 * C964 -
          ((C17859 + C17860 + C17861) * C50854 +
           (C17862 + C17863 + C17864) * C33716 +
           (C17166 + C17165 + C17164) * C33713 +
           (C17163 + C17162 + C17161) * C33715) *
              C50779 * C50693 * C965 +
          ((C17172 + C17171 + C17170) * C33715 +
           (C17169 + C17168 + C17167) * C33713 +
           (C18795 + C18796 + C18797) * C33716 +
           (C18798 + C18799 + C18800) * C50854) *
              C50779 * C50693 * C966 -
          ((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 + C16959 * C3082 +
            C16963 * C3077 + C16958 * C3081) *
               C50854 +
           (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 + C16959 * C3076 +
            C16963 * C3072 + C16958 * C3075) *
               C33716 +
           (C18132 + C18131 + C18130) * C33713 +
           (C18129 + C18128 + C18127) * C33715) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50693 * C893 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C50729 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C893) *
              C896 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C34386 + C34387 + C34388) * C33716 +
            (C34389 + C34390 + C34391) * C50854) *
               C50779 * C50693 * C893 -
           ((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
             C16963 * C786 + C16958 * C792) *
                C50854 +
            (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
             C16963 * C777 + C16958 * C782) *
                C33716 +
            (C17494 + C17493 + C17492) * C33713 +
            (C17491 + C17490 + C17489) * C33715) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C391 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C392 +
           ((C34069 + C34068 + C34067) * C33715 +
            (C34066 + C34065 + C34064) * C33713 +
            (C16963 * C1717 + C16958 * C1725 + C16964 * C1716 + C16959 * C1724 +
             C16965 * C1715 + C16960 * C1723) *
                C33716 +
            (C16963 * C1721 + C16958 * C1729 + C16964 * C1720 + C16959 * C1728 +
             C16965 * C1719 + C16960 * C1727) *
                C50854) *
               C50779 * C393) *
              C893 +
          (((C17864 + C17863 + C17862) * C33715 +
            (C17861 + C17860 + C17859) * C33713 +
            (C18291 + C18292 + C18293) * C33716 +
            (C18294 + C18295 + C18296) * C50854) *
               C50779 * C392 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C391 -
           ((C16965 * C5977 + C16960 * C5979 + C16964 * C4488 + C16959 * C4494 +
             C16963 * C4489 + C16958 * C4495) *
                C50854 +
            (C16965 * C5976 + C16960 * C5978 + C16964 * C4482 + C16959 * C4490 +
             C16963 * C4483 + C16958 * C4491) *
                C33716 +
            (C18296 + C18295 + C18294) * C33713 +
            (C18293 + C18292 + C18291) * C33715) *
               C50779 * C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C893 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C50729) *
              C895 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C50729 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C50693 * C893 -
           (((C19747 * C3079 + C50628 * C3083) * C50854 +
             (C19747 * C3074 + C50628 * C3080) * C33716 + C20128 * C33713 +
             C20127 * C33715) *
                C2161 +
            (C36929 + C36928 + C36927 + C36926) * C2160 +
            (C36925 + C36924 + C36923 + C36922) * C2159) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
              C50693 * C964 -
          (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
           (C36603 + C36602 + C36601 + C36600) * C2159) *
              C50693 * C965 +
          (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
           (C37531 + C37532 + C37533 + C37534) * C2161) *
              C50693 * C966 -
          (((C19747 * C21041 + C50628 * C21043) * C50854 +
            (C19747 * C21040 + C50628 * C21042) * C33716 + C20586 * C33713 +
            C20585 * C33715) *
               C2161 +
           (C37534 + C37533 + C37532 + C37531) * C2160 + C37536 * C2159) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C391 -
           ((C37270 + C37271 + C37272 + C37273) * C2161 +
            (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C392 +
           ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
             C22111 * C50854) *
                C2159 +
            (C37683 + C37684 + C37685 + C37686) * C2160 +
            (C37687 + C37688 + C37689 + C37690) * C2161) *
               C393) *
              C893 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C20388 * C33715 + C20387 * C33713 + C20707 * C33716 +
             C20708 * C50854) *
                C2161) *
               C392 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C391 -
           (((C19747 * C21317 + C50628 * C21319) * C50854 +
             (C19747 * C21316 + C50628 * C21318) * C33716 + C20708 * C33713 +
             C20707 * C33715) *
                C2161 +
            (C37690 + C37689 + C37688 + C37687) * C2160 +
            (C37686 + C37685 + C37684 + C37683) * C2159) *
               C393) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C33715 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C33713 +
             (C34058 + C34059 + C34060) * C33716 +
             (C34061 + C34062 + C34063) * C50854) *
                C50779 * C50920 -
            ((C34064 + C34065 + C34066) * C50854 +
             (C34067 + C34068 + C34069) * C33716 +
             (C34063 + C34062 + C34061) * C33713 +
             (C34060 + C34059 + C34058) * C33715) *
                C50779 * C50757) *
               C893 +
           (((C17864 + C17863 + C17862) * C33715 +
             (C17861 + C17860 + C17859) * C33713 +
             (C18291 + C18292 + C18293) * C33716 +
             (C18294 + C18295 + C18296) * C50854) *
                C50779 * C50757 -
            ((C17859 + C17860 + C17861) * C50854 +
             (C17862 + C17863 + C17864) * C33716 +
             (C17166 + C17165 + C17164) * C33713 +
             (C17163 + C17162 + C17161) * C33715) *
                C50779 * C50920) *
               C50729) *
              C50911 +
          ((((C34070 + C34071 + C34072) * C33715 +
             (C34073 + C34074 + C34075) * C33713 +
             (C34076 + C34077 + C34078) * C33716 +
             (C34079 + C34080 + C34081) * C50854) *
                C50779 * C50757 -
            ((C34075 + C34074 + C34073) * C50854 +
             (C34072 + C34071 + C34070) * C33716 +
             (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C33713 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C33715) *
                C50779 * C50920) *
               C893 +
           (((C17173 + C17174 + C17175) * C33715 +
             (C17176 + C17177 + C17178) * C33713 +
             (C17865 + C17866 + C17867) * C33716 +
             (C17868 + C17869 + C17870) * C50854) *
                C50779 * C50920 -
            ((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50854 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C33716 +
             (C17870 + C17869 + C17868) * C33713 +
             (C17867 + C17866 + C17865) * C33715) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C33715 +
              (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
              C22106 * C50854) *
                 C2159 +
             (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
                C50920 -
            ((C37270 + C37271 + C37272 + C37273) * C2161 +
             (C37274 + C37275 + C37276 + C37277) * C2160 +
             (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
              C22105 * C33715) *
                 C2159) *
                C50757) *
               C893 +
           (((C37277 + C37276 + C37275 + C37274) * C2159 +
             (C37273 + C37272 + C37271 + C37270) * C2160 +
             (C20388 * C33715 + C20387 * C33713 + C20707 * C33716 +
              C20708 * C50854) *
                 C2161) *
                C50757 -
            (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
             (C36603 + C36602 + C36601 + C36600) * C2159) *
                C50920) *
               C50729) *
              C50911 +
          ((((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
              C22116 * C50854) *
                 C2159 +
             (C37278 + C37279 + C37280 + C37281) * C2160 +
             (C37282 + C37283 + C37284 + C37285) * C2161) *
                C50757 -
            (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
             (C22114 * C50854 + C22113 * C33716 +
              (C19747 * C134 + C50628 * C144) * C33713 +
              (C19747 * C123 + C50628 * C130) * C33715) *
                 C2159) *
                C50920) *
               C893 +
           (((C36612 + C36613 + C36614 + C36615) * C2159 +
             (C36616 + C36617 + C36618 + C36619) * C2160 +
             (C36620 + C36621 + C36622 + C36623) * C2161) *
                C50920 -
            (((C19747 * C3549 + C50628 * C3553) * C50854 +
              (C19747 * C3547 + C50628 * C3551) * C33716 + C20398 * C33713 +
              C20397 * C33715) *
                 C2161 +
             (C37285 + C37284 + C37283 + C37282) * C2160 +
             (C37281 + C37280 + C37279 + C37278) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50693 * C893 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50693 * C50729) *
              C895 +
          (((C17173 + C17174 + C17175) * C33715 +
            (C17176 + C17177 + C17178) * C33713 +
            (C17865 + C17866 + C17867) * C33716 +
            (C17868 + C17869 + C17870) * C50854) *
               C50779 * C50693 * C50729 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50693 * C893) *
              C896 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C34386 + C34387 + C34388) * C33716 +
            (C34389 + C34390 + C34391) * C50854) *
               C50779 * C50693 * C893 -
           ((C16965 * C788 + C16960 * C794 + C16964 * C787 + C16959 * C793 +
             C16963 * C786 + C16958 * C792) *
                C50854 +
            (C16965 * C779 + C16960 * C789 + C16964 * C778 + C16959 * C783 +
             C16963 * C777 + C16958 * C782) *
                C33716 +
            (C17494 + C17493 + C17492) * C33713 +
            (C17491 + C17490 + C17489) * C33715) *
               C50779 * C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
            C16965 * C124 + C16960 * C131) *
               C33715 +
           (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
            C16965 * C135 + C16960 * C145) *
               C33713 +
           (C34058 + C34059 + C34060) * C33716 +
           (C34061 + C34062 + C34063) * C50854) *
              C50779 * C50693 * C964 -
          ((C17859 + C17860 + C17861) * C50854 +
           (C17862 + C17863 + C17864) * C33716 +
           (C17166 + C17165 + C17164) * C33713 +
           (C17163 + C17162 + C17161) * C33715) *
              C50779 * C50693 * C965 +
          ((C17172 + C17171 + C17170) * C33715 +
           (C17169 + C17168 + C17167) * C33713 +
           (C18795 + C18796 + C18797) * C33716 +
           (C18798 + C18799 + C18800) * C50854) *
              C50779 * C50693 * C966 -
          ((C16965 * C3079 + C16960 * C3083 + C16964 * C3078 + C16959 * C3082 +
            C16963 * C3077 + C16958 * C3081) *
               C50854 +
           (C16965 * C3074 + C16960 * C3080 + C16964 * C3073 + C16959 * C3076 +
            C16963 * C3072 + C16958 * C3075) *
               C33716 +
           (C18132 + C18131 + C18130) * C33713 +
           (C18129 + C18128 + C18127) * C33715) *
              C50779 * C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50693 * C893 -
           ((C36608 + C36609 + C36610 + C36611) * C2161 +
            (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50693 * C50729) *
              C895 +
          (((C36612 + C36613 + C36614 + C36615) * C2159 +
            (C36616 + C36617 + C36618 + C36619) * C2160 +
            (C36620 + C36621 + C36622 + C36623) * C2161) *
               C50693 * C50729 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50693 * C893) *
              C896 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C50693 * C893 -
           (((C19747 * C3079 + C50628 * C3083) * C50854 +
             (C19747 * C3074 + C50628 * C3080) * C33716 + C20128 * C33713 +
             C20127 * C33715) *
                C2161 +
            (C36929 + C36928 + C36927 + C36926) * C2160 +
            (C36925 + C36924 + C36923 + C36922) * C2159) *
               C50693 * C50729) *
              C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
              C50693 * C964 -
          (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
           (C36603 + C36602 + C36601 + C36600) * C2159) *
              C50693 * C965 +
          (C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
           (C37531 + C37532 + C37533 + C37534) * C2161) *
              C50693 * C966 -
          (((C19747 * C21041 + C50628 * C21043) * C50854 +
            (C19747 * C21040 + C50628 * C21042) * C33716 + C20586 * C33713 +
            C20585 * C33715) *
               C2161 +
           (C37534 + C37533 + C37532 + C37531) * C2160 + C37536 * C2159) *
              C50693 * C967) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
              C16965 * C124 + C16960 * C131) *
                 C33715 +
             (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
              C16965 * C135 + C16960 * C145) *
                 C33713 +
             (C34058 + C34059 + C34060) * C33716 +
             (C34061 + C34062 + C34063) * C50854) *
                C50779 * C1544 -
            ((C34064 + C34065 + C34066) * C50854 +
             (C34067 + C34068 + C34069) * C33716 +
             (C34063 + C34062 + C34061) * C33713 +
             (C34060 + C34059 + C34058) * C33715) *
                C50779 * C50757) *
               C50919 +
           (((C17864 + C17863 + C17862) * C33715 +
             (C17861 + C17860 + C17859) * C33713 +
             (C18291 + C18292 + C18293) * C33716 +
             (C18294 + C18295 + C18296) * C50854) *
                C50779 * C50757 -
            ((C17859 + C17860 + C17861) * C50854 +
             (C17862 + C17863 + C17864) * C33716 +
             (C17166 + C17165 + C17164) * C33713 +
             (C17163 + C17162 + C17161) * C33715) *
                C50779 * C1544) *
               C50729) *
              C50911 +
          ((((C34070 + C34071 + C34072) * C33715 +
             (C34073 + C34074 + C34075) * C33713 +
             (C34076 + C34077 + C34078) * C33716 +
             (C34079 + C34080 + C34081) * C50854) *
                C50779 * C50757 -
            ((C34075 + C34074 + C34073) * C50854 +
             (C34072 + C34071 + C34070) * C33716 +
             (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
              C16963 * C134 + C16958 * C144) *
                 C33713 +
             (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
              C16963 * C123 + C16958 * C130) *
                 C33715) *
                C50779 * C1544) *
               C50919 +
           (((C17173 + C17174 + C17175) * C33715 +
             (C17176 + C17177 + C17178) * C33713 +
             (C17865 + C17866 + C17867) * C33716 +
             (C17868 + C17869 + C17870) * C50854) *
                C50779 * C1544 -
            ((C16965 * C1087 + C16960 * C1095 + C16964 * C1088 +
              C16959 * C1096 + C16963 * C1089 + C16958 * C1097) *
                 C50854 +
             (C16965 * C1083 + C16960 * C1091 + C16964 * C1084 +
              C16959 * C1092 + C16963 * C1085 + C16958 * C1093) *
                 C33716 +
             (C17870 + C17869 + C17868) * C33713 +
             (C17867 + C17866 + C17865) * C33715) *
                C50779 * C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19747 * C122 + C50628 * C129) * C33715 +
              (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
              C22106 * C50854) *
                 C2159 +
             (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
                C1544 -
            (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
             (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
              C22105 * C33715) *
                 C2159) *
                C50757) *
               C50919 +
           (((C37277 + C37276 + C37275 + C37274) * C2159 +
             (C37273 + C37272 + C37271 + C37270) * C2160 +
             (C38178 + C38179 + C38180 + C38181) * C2161) *
                C50757 -
            (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
             (C36603 + C36602 + C36601 + C36600) * C2159) *
                C1544) *
               C50729) *
              C50911 +
          ((((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
              C22116 * C50854) *
                 C2159 +
             (C37278 + C37279 + C37280 + C37281) * C2160 +
             (C37282 + C37283 + C37284 + C37285) * C2161) *
                C50757 -
            (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
             (C22114 * C50854 + C22113 * C33716 +
              (C19747 * C134 + C50628 * C144) * C33713 +
              (C19747 * C123 + C50628 * C130) * C33715) *
                 C2159) *
                C1544) *
               C50919 +
           (((C36612 + C36613 + C36614 + C36615) * C2159 +
             (C36616 + C36617 + C36618 + C36619) * C2160 +
             (C36620 + C36621 + C36622 + C36623) * C2161) *
                C1544 -
            (((C19747 * C3549 + C50628 * C3553) * C50854 +
              (C19747 * C3547 + C50628 * C3551) * C33716 + C20398 * C33713 +
              C20397 * C33715) *
                 C2161 +
             (C37285 + C37284 + C37283 + C37282) * C2160 +
             (C37281 + C37280 + C37279 + C37278) * C2159) *
                C50757) *
               C50729) *
              C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50966 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50967 +
           ((C34069 + C34068 + C34067) * C33715 +
            (C34066 + C34065 + C34064) * C33713 +
            (C35864 + C35865 + C35866) * C33716 +
            (C35867 + C35868 + C35869) * C50854) *
               C50779 * C1960) *
              C50919 +
          (((C17864 + C17863 + C17862) * C33715 +
            (C17861 + C17860 + C17859) * C33713 +
            (C18291 + C18292 + C18293) * C33716 +
            (C18294 + C18295 + C18296) * C50854) *
               C50779 * C50967 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C50966 -
           ((C16965 * C5977 + C16960 * C5979 + C16964 * C4488 + C16959 * C4494 +
             C16963 * C4489 + C16958 * C4495) *
                C50854 +
            (C16965 * C5976 + C16960 * C5978 + C16964 * C4482 + C16959 * C4490 +
             C16963 * C4483 + C16958 * C4491) *
                C33716 +
            (C18296 + C18295 + C18294) * C33713 +
            (C18293 + C18292 + C18291) * C33715) *
               C50779 * C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50966 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50967 +
           ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
             C22111 * C50854) *
                C2159 +
            (C37683 + C37684 + C37685 + C37686) * C2160 +
            (C37687 + C37688 + C37689 + C37690) * C2161) *
               C1960) *
              C50919 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C38178 + C38179 + C38180 + C38181) * C2161) *
               C50967 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C50966 -
           (((C19747 * C21317 + C50628 * C21319) * C50854 +
             (C19747 * C21316 + C50628 * C21318) * C33716 + C20708 * C33713 +
             C20707 * C33715) *
                C2161 +
            (C37690 + C37689 + C37688 + C37687) * C2160 +
            (C37686 + C37685 + C37684 + C37683) * C2159) *
               C1960) *
              C50729) *
         C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C1544 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C248 +
          (((C17864 + C17863 + C17862) * C33715 +
            (C17861 + C17860 + C17859) * C33713 +
            (C18291 + C18292 + C18293) * C33716 +
            (C18294 + C18295 + C18296) * C50854) *
               C50779 * C50757 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C1544) *
              C249 +
          (((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C1544 -
           ((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 + C16959 * C2560 +
             C16963 * C2555 + C16958 * C2559) *
                C50854 +
            (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 + C16959 * C2554 +
             C16963 * C2550 + C16958 * C2553) *
                C33716 +
            (C18800 + C18799 + C18798) * C33713 +
            (C18797 + C18796 + C18795) * C33715) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C1544 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C34070 + C34071 + C34072) * C33715 +
            (C34073 + C34074 + C34075) * C33713 +
            (C34076 + C34077 + C34078) * C33716 +
            (C34079 + C34080 + C34081) * C50854) *
               C50779 * C50757 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C34386 + C34387 + C34388) * C33716 +
            (C34389 + C34390 + C34391) * C50854) *
               C50779 * C1544 -
           ((C16965 * C422 + C16960 * C433 + C16964 * C419 + C16959 * C431 +
             C16963 * C418 + C16958 * C430) *
                C50854 +
            (C16965 * C403 + C16960 * C423 + C16964 * C401 + C16959 * C415 +
             C16963 * C400 + C16958 * C414) *
                C33716 +
            (C34391 + C34390 + C34389) * C33713 +
            (C34388 + C34387 + C34386) * C33715) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
            C16965 * C124 + C16960 * C131) *
               C33715 +
           (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
            C16965 * C135 + C16960 * C145) *
               C33713 +
           (C34058 + C34059 + C34060) * C33716 +
           (C34061 + C34062 + C34063) * C50854) *
              C50779 * C1710 -
          ((C34064 + C34065 + C34066) * C50854 +
           (C34067 + C34068 + C34069) * C33716 +
           (C34063 + C34062 + C34061) * C33713 +
           (C34060 + C34059 + C34058) * C33715) *
              C50779 * C1711 +
          ((C34069 + C34068 + C34067) * C33715 +
           (C34066 + C34065 + C34064) * C33713 +
           (C35864 + C35865 + C35866) * C33716 +
           (C35867 + C35868 + C35869) * C50854) *
              C50779 * C1712 -
          ((C16965 * C5385 + C16960 * C5389 + C16964 * C5384 + C16959 * C5388 +
            C16963 * C5383 + C16958 * C5387) *
               C50854 +
           (C16965 * C5380 + C16960 * C5386 + C16964 * C5379 + C16959 * C5382 +
            C16963 * C5378 + C16958 * C5381) *
               C33716 +
           (C35869 + C35868 + C35867) * C33713 +
           (C35866 + C35865 + C35864) * C33715) *
              C50779 * C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C1544 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C37278 + C37279 + C37280 + C37281) * C2160 +
            (C37282 + C37283 + C37284 + C37285) * C2161) *
               C50757 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C1544 -
           (((C19747 * C2557 + C50628 * C2561) * C50854 +
             (C19747 * C2552 + C50628 * C2558) * C33716 + C31483 * C33713 +
             C31482 * C33715) *
                C2161 +
            (C22280 * C50854 + C22279 * C33716 + C22278 * C33713 +
             C22277 * C33715) *
                C2160 +
            (C22442 * C50854 + C22441 * C33716 + C22440 * C33713 +
             C22439 * C33715) *
                C2159) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C1544 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C248 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C38178 + C38179 + C38180 + C38181) * C2161) *
               C50757 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C1544) *
              C249 +
          ((C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C37531 + C37532 + C37533 + C37534) * C2161) *
               C1544 -
           (((C19747 * C20687 + C50628 * C20689) * C50854 +
             (C19747 * C20686 + C50628 * C20688) * C33716 + C21052 * C33713 +
             C21051 * C33715) *
                C2161 +
            (C38181 + C38180 + C38179 + C38178) * C2160 + C38183 * C2159) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19747 * C122 + C50628 * C129) * C33715 +
            (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
            C22106 * C50854) *
               C2159 +
           (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
              C1710 -
          (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
           (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
            C22105 * C33715) *
               C2159) *
              C1711 +
          ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
            C22111 * C50854) *
               C2159 +
           (C37683 + C37684 + C37685 + C37686) * C2160 +
           (C37687 + C37688 + C37689 + C37690) * C2161) *
              C1712 -
          (((C19747 * C23045 + C50628 * C23047) * C50854 +
            (C19747 * C23044 + C50628 * C23046) * C33716 + C23064 * C33713 +
            C23063 * C33715) *
               C2161 +
           (C23062 * C50854 + C23061 * C33716 + C22109 * C33713 +
            C22110 * C33715) *
               C2160 +
           (C23958 * C50854 + C23957 * C33716 + C22111 * C33713 +
            C22112 * C33715) *
               C2159) *
              C1713) *
         C50677 * C50658) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C50966 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50967 +
           ((C34069 + C34068 + C34067) * C33715 +
            (C34066 + C34065 + C34064) * C33713 +
            (C35864 + C35865 + C35866) * C33716 +
            (C35867 + C35868 + C35869) * C50854) *
               C50779 * C1960) *
              C50677 * C50911 +
          (((C34070 + C34071 + C34072) * C33715 +
            (C34073 + C34074 + C34075) * C33713 +
            (C34076 + C34077 + C34078) * C33716 +
            (C34079 + C34080 + C34081) * C50854) *
               C50779 * C50967 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C50966 -
           ((C16965 * C1718 + C16960 * C1726 + C16964 * C1719 + C16959 * C1727 +
             C16963 * C1720 + C16958 * C1728) *
                C50854 +
            (C16965 * C1714 + C16960 * C1722 + C16964 * C1715 + C16959 * C1723 +
             C16963 * C1716 + C16958 * C1724) *
                C33716 +
            (C34081 + C34080 + C34079) * C33713 +
            (C34078 + C34077 + C34076) * C33715) *
               C50779 * C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C50966 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50967 +
           ((C22107 * C33715 + C22108 * C33713 + C22112 * C33716 +
             C22111 * C50854) *
                C2159 +
            (C37683 + C37684 + C37685 + C37686) * C2160 +
            (C37687 + C37688 + C37689 + C37690) * C2161) *
               C1960) *
              C50677 * C50911 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C37278 + C37279 + C37280 + C37281) * C2160 +
            (C37282 + C37283 + C37284 + C37285) * C2161) *
               C50967 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C50966 -
           (((C19747 * C4484 + C50628 * C4492) * C50854 +
             (C19747 * C4480 + C50628 * C4486) * C33716 + C21922 * C33713 +
             C21921 * C33715) *
                C2161 +
            (C22120 * C50854 + C22119 * C33716 + C21920 * C33713 +
             C21919 * C33715) *
                C2160 +
            (C22118 * C50854 + C22117 * C33716 + C22116 * C33713 +
             C22115 * C33715) *
                C2159) *
               C1960) *
              C50677 * C50664)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C1544 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C50677 * C895 +
          (((C34070 + C34071 + C34072) * C33715 +
            (C34073 + C34074 + C34075) * C33713 +
            (C34076 + C34077 + C34078) * C33716 +
            (C34079 + C34080 + C34081) * C50854) *
               C50779 * C50757 -
           ((C34075 + C34074 + C34073) * C50854 +
            (C34072 + C34071 + C34070) * C33716 +
            (C16965 * C136 + C16960 * C146 + C16964 * C135 + C16959 * C145 +
             C16963 * C134 + C16958 * C144) *
                C33713 +
            (C16965 * C125 + C16960 * C132 + C16964 * C124 + C16959 * C131 +
             C16963 * C123 + C16958 * C130) *
                C33715) *
               C50779 * C1544) *
              C50677 * C896 +
          (((C16963 * C124 + C16958 * C131 + C16964 * C125 + C16959 * C132 +
             C16965 * C126 + C16960 * C138) *
                C33715 +
            (C16963 * C135 + C16958 * C145 + C16964 * C136 + C16959 * C146 +
             C16965 * C137 + C16960 * C147) *
                C33713 +
            (C34386 + C34387 + C34388) * C33716 +
            (C34389 + C34390 + C34391) * C50854) *
               C50779 * C1544 -
           ((C16965 * C422 + C16960 * C433 + C16964 * C419 + C16959 * C431 +
             C16963 * C418 + C16958 * C430) *
                C50854 +
            (C16965 * C403 + C16960 * C423 + C16964 * C401 + C16959 * C415 +
             C16963 * C400 + C16958 * C414) *
                C33716 +
            (C34391 + C34390 + C34389) * C33713 +
            (C34388 + C34387 + C34386) * C33715) *
               C50779 * C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16963 * C122 + C16958 * C129 + C16964 * C123 + C16959 * C130 +
             C16965 * C124 + C16960 * C131) *
                C33715 +
            (C16963 * C133 + C16958 * C143 + C16964 * C134 + C16959 * C144 +
             C16965 * C135 + C16960 * C145) *
                C33713 +
            (C34058 + C34059 + C34060) * C33716 +
            (C34061 + C34062 + C34063) * C50854) *
               C50779 * C1544 -
           ((C34064 + C34065 + C34066) * C50854 +
            (C34067 + C34068 + C34069) * C33716 +
            (C34063 + C34062 + C34061) * C33713 +
            (C34060 + C34059 + C34058) * C33715) *
               C50779 * C50757) *
              C248 +
          (((C17864 + C17863 + C17862) * C33715 +
            (C17861 + C17860 + C17859) * C33713 +
            (C18291 + C18292 + C18293) * C33716 +
            (C18294 + C18295 + C18296) * C50854) *
               C50779 * C50757 -
           ((C17859 + C17860 + C17861) * C50854 +
            (C17862 + C17863 + C17864) * C33716 +
            (C17166 + C17165 + C17164) * C33713 +
            (C17163 + C17162 + C17161) * C33715) *
               C50779 * C1544) *
              C249 +
          (((C17172 + C17171 + C17170) * C33715 +
            (C17169 + C17168 + C17167) * C33713 +
            (C18795 + C18796 + C18797) * C33716 +
            (C18798 + C18799 + C18800) * C50854) *
               C50779 * C1544 -
           ((C16965 * C2557 + C16960 * C2561 + C16964 * C2556 + C16959 * C2560 +
             C16963 * C2555 + C16958 * C2559) *
                C50854 +
            (C16965 * C2552 + C16960 * C2558 + C16964 * C2551 + C16959 * C2554 +
             C16963 * C2550 + C16958 * C2553) *
                C33716 +
            (C18800 + C18799 + C18798) * C33713 +
            (C18797 + C18796 + C18795) * C33715) *
               C50779 * C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C1544 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C50677 * C895 +
          (((C22113 * C33715 + C22114 * C33713 + C22115 * C33716 +
             C22116 * C50854) *
                C2159 +
            (C37278 + C37279 + C37280 + C37281) * C2160 +
            (C37282 + C37283 + C37284 + C37285) * C2161) *
               C50757 -
           (C36629 * C2161 + (C36615 + C36614 + C36613 + C36612) * C2160 +
            (C22114 * C50854 + C22113 * C33716 +
             (C19747 * C134 + C50628 * C144) * C33713 +
             (C19747 * C123 + C50628 * C130) * C33715) *
                C2159) *
               C1544) *
              C50677 * C896 +
          ((((C19747 * C124 + C50628 * C131) * C33715 +
             (C19747 * C135 + C50628 * C145) * C33713 + C22439 * C33716 +
             C22440 * C50854) *
                C2159 +
            (C36922 + C36923 + C36924 + C36925) * C2160 +
            (C36926 + C36927 + C36928 + C36929) * C2161) *
               C1544 -
           (((C19747 * C2557 + C50628 * C2561) * C50854 +
             (C19747 * C2552 + C50628 * C2558) * C33716 + C31483 * C33713 +
             C31482 * C33715) *
                C2161 +
            (C22280 * C50854 + C22279 * C33716 + C22278 * C33713 +
             C22277 * C33715) *
                C2160 +
            (C22442 * C50854 + C22441 * C33716 + C22440 * C33713 +
             C22439 * C33715) *
                C2159) *
               C50757) *
              C50677 * C897)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19747 * C122 + C50628 * C129) * C33715 +
             (C19747 * C133 + C50628 * C143) * C33713 + C22105 * C33716 +
             C22106 * C50854) *
                C2159 +
            (C36600 + C36601 + C36602 + C36603) * C2160 + C36628 * C2161) *
               C1544 -
           (C38183 * C2161 + (C37274 + C37275 + C37276 + C37277) * C2160 +
            (C22108 * C50854 + C22107 * C33716 + C22106 * C33713 +
             C22105 * C33715) *
                C2159) *
               C50757) *
              C248 +
          (((C37277 + C37276 + C37275 + C37274) * C2159 +
            (C37273 + C37272 + C37271 + C37270) * C2160 +
            (C38178 + C38179 + C38180 + C38181) * C2161) *
               C50757 -
           (C37536 * C2161 + (C36607 + C36606 + C36605 + C36604) * C2160 +
            (C36603 + C36602 + C36601 + C36600) * C2159) *
               C1544) *
              C249 +
          ((C36628 * C2159 + (C36611 + C36610 + C36609 + C36608) * C2160 +
            (C37531 + C37532 + C37533 + C37534) * C2161) *
               C1544 -
           (((C19747 * C20687 + C50628 * C20689) * C50854 +
             (C19747 * C20686 + C50628 * C20688) * C33716 + C21052 * C33713 +
             C21051 * C33715) *
                C2161 +
            (C38181 + C38180 + C38179 + C38178) * C2160 + C38183 * C2159) *
               C50757) *
              C250) *
         C50658) /
            (p * q * std::sqrt(p + q));
}
