/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AA_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_11_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49723 = ae * be;
    const double C49722 = ae + be;
    const double C49721 = 0 * be;
    const double C49720 = yA - yB;
    const double C49740 = 0 * be;
    const double C49739 = zA - zB;
    const double C49770 = 0 * ae;
    const double C49765 = 0 * be;
    const double C49812 = 0 * ae;
    const double C49808 = 0 * be;
    const double C49848 = std::pow(ae, 2);
    const double C49847 = yP - yQ;
    const double C49846 = zP - zQ;
    const double C49845 = p + q;
    const double C49844 = p * q;
    const double C49856 = bs[4];
    const double C49854 = xP - xQ;
    const double C49861 = bs[5];
    const double C49868 = bs[6];
    const double C49876 = bs[7];
    const double C49893 = bs[3];
    const double C50315 = bs[2];
    const double C119 = bs[0];
    const double C50666 = xA - xB;
    const double C50691 = ce + de;
    const double C50690 = ce * de;
    const double C50689 = xC - xD;
    const double C50713 = yC - yD;
    const double C50729 = zC - zD;
    const double C49724 = std::pow(C49722, 2);
    const double C49766 = 2 * C49722;
    const double C49725 = C49723 * C49720;
    const double C49767 = C49720 * C49721;
    const double C50811 = std::pow(C49720, 2);
    const double C50862 = C49720 * be;
    const double C50861 = C49720 * ae;
    const double C49741 = C49723 * C49739;
    const double C49809 = C49739 * C49740;
    const double C50826 = std::pow(C49739, 2);
    const double C50890 = C49739 * be;
    const double C50889 = C49739 * ae;
    const double C49775 = C49770 / C49722;
    const double C49817 = C49812 / C49722;
    const double C49926 = C49847 * ae;
    const double C50017 = std::pow(C49847, 2);
    const double C49850 = C49846 * C49847;
    const double C49885 = C49846 * ae;
    const double C50139 = std::pow(C49846, 2);
    const double C49849 = 2 * C49844;
    const double C49862 = std::pow(C49854, 2);
    const double C50669 = C50666 * be;
    const double C50668 = C50666 * ae;
    const double C50667 = std::pow(C50666, 2);
    const double C50693 = 2 * C50691;
    const double C50703 = std::pow(C50691, 2);
    const double C50695 = C50689 * de;
    const double C50694 = C50689 * ce;
    const double C50692 = std::pow(C50689, 2);
    const double C50714 = std::pow(C50713, 2);
    const double C50766 = C50713 * de;
    const double C50765 = C50713 * ce;
    const double C50730 = std::pow(C50729, 2);
    const double C50794 = C50729 * de;
    const double C50793 = C50729 * ce;
    const double C49726 = 2 * C49724;
    const double C140 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (zP - zQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C49724;
    const double C141 = ((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                         bs[3] * (zP - zQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C49724;
    const double C50948 = 4 * C49724;
    const double C50677 = std::pow(C49766, -1);
    const double C50970 = std::pow(C49766, -2);
    const double C49772 = C49767 / C49722;
    const double C50812 = C50811 * C49723;
    const double C49814 = C49809 / C49722;
    const double C50827 = C50826 * C49723;
    const double C49927 = C49856 * C49926;
    const double C49933 = C49893 * C49926;
    const double C49938 = C49861 * C49926;
    const double C49944 = C49868 * C49926;
    const double C49955 = C49876 * C49926;
    const double C49852 = C49850 * C49848;
    const double C49886 = C49856 * C49885;
    const double C49894 = C49893 * C49885;
    const double C49899 = C49861 * C49885;
    const double C49905 = C49868 * C49885;
    const double C49916 = C49876 * C49885;
    const double C49851 = C49849 / C49845;
    const double C126 = (-(bs[1] * C49926 * C49849) / C49845) / C49722;
    const double C127 = (-(bs[1] * C49885 * C49849) / C49845) / C49722;
    const double C120 = -(C49854 * bs[1] * C49849) / C49845;
    const double C297 = -(C49847 * bs[1] * C49849) / C49845;
    const double C486 = -(C49846 * bs[1] * C49849) / C49845;
    const double C50670 = C50667 * C49723;
    const double C50704 = std::pow(C50693, -1);
    const double C50957 = std::pow(C50693, -2);
    const double C50708 = 2 * C50703;
    const double C50955 = 4 * C50703;
    const double C50696 = C50692 * C50690;
    const double C50715 = C50714 * C50690;
    const double C50731 = C50730 * C50690;
    const double C49769 = C49721 / C49726;
    const double C49773 = C49765 / C49726;
    const double C49811 = C49740 / C49726;
    const double C49815 = C49808 / C49726;
    const double C49776 = 0 - C49772;
    const double C50813 = C50812 / C49722;
    const double C49818 = 0 - C49814;
    const double C50828 = C50827 / C49722;
    const double C49857 = C49856 * C49852;
    const double C49864 = C49861 * C49852;
    const double C49869 = C49868 * C49852;
    const double C49878 = C49876 * C49852;
    const double C49855 = std::pow(C49851, 4);
    const double C49860 = -C49851;
    const double C49867 = std::pow(C49851, 6);
    const double C142 =
        (std::pow(-C49851, 3) * bs[3] * C49852 +
         std::pow(C49851, 4) * bs[4] * C49852 * std::pow(xP - xQ, 2)) /
        C49724;
    const double C50314 = std::pow(C49851, 2);
    const double C128 =
        (C49854 * std::pow(C49851, 2) * bs[2] * C49926) / C49722;
    const double C129 =
        (C49854 * std::pow(C49851, 2) * bs[2] * C49885) / C49722;
    const double C310 =
        (C49847 * std::pow(C49851, 2) * bs[2] * C49885) / C49722;
    const double C311 =
        (C49847 * std::pow(C49851, 2) * bs[2] * C49926) / C49722 -
        (ae * bs[1] * C49849) / (C49845 * C49722);
    const double C50671 = C50670 / C49722;
    const double C50697 = C50696 / C50691;
    const double C50716 = C50715 / C50691;
    const double C50732 = C50731 / C50691;
    const double C49779 = C49776 * ae;
    const double C50814 = -C50813;
    const double C49821 = C49818 * ae;
    const double C50829 = -C50828;
    const double C49858 = C49855 * C49857;
    const double C49887 = C49855 * C49886;
    const double C49928 = C49855 * C49927;
    const double C49970 = C49856 * C49855;
    const double C49863 = std::pow(C49860, 5);
    const double C49875 = std::pow(C49860, 7);
    const double C49892 = std::pow(C49860, 3);
    const double C327 = (ae * std::pow(C49851, 2) * bs[2] * C49885 +
                         C49847 * std::pow(C49860, 3) * bs[3] * C49852) /
                        C49724;
    const double C49870 = C49867 * C49869;
    const double C49907 = C49867 * C49905;
    const double C49946 = C49867 * C49944;
    const double C49981 = C49868 * C49867;
    const double C50316 = C50315 * C50314;
    const double C499 = (C49846 * C50314 * C50315 * C49885) / C49722 -
                        (ae * bs[1] * C49849) / (C49845 * C49722);
    const double C500 = (C49846 * C50314 * C50315 * C49926) / C49722;
    const double C50672 = -C50671;
    const double C50698 = -C50697;
    const double C50717 = -C50716;
    const double C50733 = -C50732;
    const double C49781 = C49779 / C49722;
    const double C50815 = std::exp(C50814);
    const double C49823 = C49821 / C49722;
    const double C50830 = std::exp(C50829);
    const double C143 = (2 * C49854 * C49858 +
                         C49854 * (C49858 + std::pow(-C49851, 5) * bs[5] *
                                                C49852 * std::pow(C49854, 2))) /
                        C49724;
    const double C326 = (ae * C49854 * std::pow(C49860, 3) * bs[3] * C49885 +
                         C49847 * C49854 * C49858) /
                        C49724;
    const double C49897 = C49854 * C49887;
    const double C50015 = ae * C49887;
    const double C50014 = C49847 * C49887;
    const double C50459 = C49846 * C49887;
    const double C49936 = C49854 * C49928;
    const double C50001 = C49847 * C49928;
    const double C50137 = ae * C49928;
    const double C50136 = C49846 * C49928;
    const double C49997 = C49854 * C49970;
    const double C50038 = C49847 * C49970;
    const double C50037 = C49970 * ae;
    const double C50322 = C49970 * C49862;
    const double C50408 = C49970 * C50017;
    const double C50461 = C49970 * C50139;
    const double C50510 = C49846 * C49970;
    const double C49865 = C49863 * C49864;
    const double C49900 = C49863 * C49899;
    const double C49939 = C49863 * C49938;
    const double C49972 = C49861 * C49863;
    const double C49879 = C49875 * C49878;
    const double C49918 = C49875 * C49916;
    const double C49957 = C49875 * C49955;
    const double C49895 = C49892 * C49894;
    const double C49934 = C49892 * C49933;
    const double C50002 = C49893 * C49892;
    const double C515 =
        (ae * C49854 * C49892 * C49893 * C49926 + C49846 * C49854 * C49858) /
        C49724;
    const double C516 = (ae * std::pow(C49851, 2) * bs[2] * C49926 +
                         C49846 * C49892 * C49893 * C49852) /
                        C49724;
    const double C49871 = C49870 * C49862;
    const double C49874 = C49854 * C49870;
    const double C50084 = C49847 * C49870;
    const double C50189 = C49846 * C49870;
    const double C49908 = C49907 * C49862;
    const double C49915 = C49854 * C49907;
    const double C50085 = C49907 * C50017;
    const double C50204 = ae * C49907;
    const double C50203 = C49847 * C49907;
    const double C50556 = C49846 * C49907;
    const double C49947 = C49946 * C49862;
    const double C49954 = C49854 * C49946;
    const double C50115 = C49847 * C49946;
    const double C50190 = C49946 * C50139;
    const double C50273 = ae * C49946;
    const double C50272 = C49846 * C49946;
    const double C49983 = C49981 * C49862;
    const double C50098 = C49854 * C49981;
    const double C50228 = C49981 * C50017;
    const double C50227 = C49847 * C49981;
    const double C50226 = C49981 * ae;
    const double C50559 = C49981 * C50139;
    const double C121 = C50316 * C49862 - (bs[1] * C49849) / C49845;
    const double C296 = C49847 * C49854 * C50316;
    const double C298 = C50316 * C50017 - (bs[1] * C49849) / C49845;
    const double C485 = C49846 * C49854 * C50316;
    const double C487 = C50316 * C50139 - (bs[1] * C49849) / C49845;
    const double C932 = C49846 * C49847 * C50316;
    const double C50673 = std::exp(C50672);
    const double C50699 = std::exp(C50698);
    const double C50718 = std::exp(C50717);
    const double C50734 = std::exp(C50733);
    const double C49783 = C49781 - C49773;
    const double C155 = C50815 * C142;
    const double C151 = C50815 * C141;
    const double C149 = C50815 * C128;
    const double C5590 = C50815 * C500;
    const double C49727 = C49725 * C50815;
    const double C117 = -(2 * ae * be * (yA - yB) * C50815) / (ae + be);
    const double C50863 = C50815 * C50861;
    const double C50866 = C50677 * C50815;
    const double C50974 = C50815 * C50862;
    const double C50969 = C50815 / C49766;
    const double C2340 = C50970 * C50815;
    const double C49825 = C49823 - C49815;
    const double C49742 = C49741 * C50830;
    const double C118 = -(2 * ae * be * (zA - zB) * C50830) / (ae + be);
    const double C50891 = C50830 * C50889;
    const double C50894 = C50677 * C50830;
    const double C50978 = C50830 * C50890;
    const double C50971 = C50830 / C49766;
    const double C5232 = C50970 * C50830;
    const double C159 = C50815 * C143;
    const double C344 = C50815 * C326;
    const double C49998 = C49997 * ae;
    const double C50326 = 2 * C49997;
    const double C50386 = C49847 * C49997;
    const double C50467 = C49846 * C49997;
    const double C50040 = C50038 * ae;
    const double C50438 = 2 * C50038;
    const double C50489 = C49846 * C50038;
    const double C50515 = 2 * C50510;
    const double C50513 = C50510 * ae;
    const double C49976 = C49854 * C49865;
    const double C50016 = C49847 * C49865;
    const double C50138 = C49846 * C49865;
    const double C144 =
        (3 * (C49858 + C49865 * C49862) +
         C49854 * (2 * C49854 * C49865 +
                   C49854 * (C49865 +
                             std::pow(C49851, 6) * bs[6] * C49852 * C49862))) /
        C49724;
    const double C325 =
        (ae * (std::pow(C49860, 3) * bs[3] * C49885 + C49887 * C49862) +
         C49847 * (C49858 + C49865 * C49862)) /
        C49724;
    const double C329 = (C49854 * C49858 + ae * C49847 * C49897 +
                         C49847 * (ae * C49897 + C49847 * C49854 * C49865)) /
                        C49724;
    const double C514 = (ae * (C49892 * C49893 * C49926 + C49928 * C49862) +
                         C49846 * (C49858 + C49865 * C49862)) /
                        C49724;
    const double C518 = (C49854 * C49858 + ae * C49846 * C49936 +
                         C49846 * (ae * C49936 + C49846 * C49854 * C49865)) /
                        C49724;
    const double C948 =
        (ae * (C49847 * C49936 + C49854 * C49893 * C49892 * ae) +
         C49846 * (ae * C49897 + C49847 * C49854 * C49865)) /
        C49724;
    const double C49901 = C49900 * C49862;
    const double C49904 = C49854 * C49900;
    const double C50019 = C49900 * C50017;
    const double C50083 = ae * C49900;
    const double C50082 = C49847 * C49900;
    const double C50509 = C49846 * C49900;
    const double C49940 = C49939 * C49862;
    const double C49943 = C49854 * C49939;
    const double C50036 = C49847 * C49939;
    const double C50141 = C49939 * C50139;
    const double C50188 = ae * C49939;
    const double C50187 = C49846 * C49939;
    const double C49980 = C49854 * C49972;
    const double C49991 = C49972 * C49862;
    const double C50118 = C49972 * C50017;
    const double C50117 = C49847 * C49972;
    const double C50116 = C49972 * ae;
    const double C50511 = C49972 * C50139;
    const double C50557 = C49846 * C49972;
    const double C49880 = C49879 * C49862;
    const double C50068 = C49854 * C49879;
    const double C50205 = C49847 * C49879;
    const double C50274 = C49846 * C49879;
    const double C49919 = C49918 * C49862;
    const double C50069 = C49854 * C49918;
    const double C50207 = C49918 * C50017;
    const double C49958 = C49957 * C49862;
    const double C50097 = C49854 * C49957;
    const double C50225 = C49847 * C49957;
    const double C50276 = C49957 * C50139;
    const double C328 = (C49892 * C49893 * C49852 + ae * C49847 * C49895 +
                         C49847 * (ae * C49895 + C49847 * C49858)) /
                        C49724;
    const double C1165 = (2 * (ae * C49895 + C49847 * C49858) +
                          ae * (C49895 + C49887 * std::pow(C49847, 2)) +
                          C49847 * (C49858 + ae * C49847 * C49887 +
                                    C49847 * (ae * C49887 + C49847 * C49865))) /
                         C49724;
    const double C131 =
        (std::pow(C49851, 2) * bs[2] * C49885 + C49895 * C49862) / C49722;
    const double C133 =
        (2 * C49854 * C49895 + C49854 * (C49895 + C49887 * C49862)) / C49722;
    const double C306 = (C49847 * (C49895 + C49887 * C49862)) / C49722;
    const double C308 = (C49847 * C49854 * C49895) / C49722;
    const double C313 = (C50314 * C50315 * C49885 + C49895 * C50017) / C49722;
    const double C315 = (C49854 * C49895 + C49897 * C50017) / C49722;
    const double C497 =
        (C49846 * C49854 * C49895 + C49854 * C50316 * ae) / C49722;
    const double C502 =
        (C50314 * C50315 * C49885 + C49846 * (C49846 * C49895 + C50316 * ae) +
         C49846 * C50316 * ae) /
        C49722;
    const double C938 =
        (C49846 * C49847 * C49895 + C49847 * C50316 * ae) / C49722;
    const double C1160 =
        (2 * C49847 * C49895 + C49847 * (C49895 + C49887 * C50017)) / C49722;
    const double C517 = (C49892 * C49893 * C49852 + ae * C49846 * C49934 +
                         C49846 * (ae * C49934 + C49846 * C49858)) /
                        C49724;
    const double C947 =
        (ae * (C49847 * C49934 + bs[2] * std::pow(C49851, 2) * ae) +
         C49846 * (ae * C49895 + C49847 * C49858)) /
        C49724;
    const double C1910 = (2 * (ae * C49934 + C49846 * C49858) +
                          ae * (C49934 + C49928 * std::pow(C49846, 2)) +
                          C49846 * (C49858 + ae * C49846 * C49928 +
                                    C49846 * (ae * C49928 + C49846 * C49865))) /
                         C49724;
    const double C130 =
        (std::pow(C49851, 2) * bs[2] * C49926 + C49934 * C49862) / C49722;
    const double C132 =
        (2 * C49854 * C49934 + C49854 * (C49934 + C49928 * C49862)) / C49722;
    const double C309 =
        (C49847 * C49854 * C49934 + C49854 * bs[2] * std::pow(C49851, 2) * ae) /
        C49722;
    const double C312 =
        (C50314 * C50315 * C49926 + C49847 * (C49847 * C49934 + C50316 * ae) +
         C49847 * C50316 * ae) /
        C49722;
    const double C496 = (C49846 * (C49934 + C49928 * C49862)) / C49722;
    const double C498 = (C49846 * C49854 * C49934) / C49722;
    const double C501 = (C50314 * C50315 * C49926 + C49934 * C50139) / C49722;
    const double C503 = (C49854 * C49934 + C49936 * C50139) / C49722;
    const double C937 = (C49846 * (C49847 * C49934 + C50316 * ae)) / C49722;
    const double C1906 =
        (2 * C49846 * C49934 + C49846 * (C49934 + C49928 * C50139)) / C49722;
    const double C50003 = C50002 * ae;
    const double C50319 = C49854 * C50002;
    const double C50323 = C50002 + C50322;
    const double C50389 = C49847 * C50002;
    const double C50409 = C50002 + C50408;
    const double C50460 = C49846 * C50002;
    const double C50463 = C50002 + C50461;
    const double C307 = (C49847 * (C49934 + C49928 * C49862) +
                         (bs[2] * std::pow(C49851, 2) + C50002 * C49862) * ae) /
                        C49722;
    const double C495 = (C49846 * (C49895 + C49887 * C49862) +
                         (C50316 + C50002 * C49862) * ae) /
                        C49722;
    const double C1621 = (C49846 * (C49895 + C49887 * C50017) +
                          (C50316 + C50002 * C50017) * ae) /
                         C49722;
    const double C122 =
        2 * C49854 * C50316 + C49854 * (C50316 + C50002 * C49862);
    const double C295 = C49847 * (C50316 + C50002 * C49862);
    const double C484 = C49846 * (C50316 + C50002 * C49862);
    const double C1153 =
        2 * C49847 * C50316 + C49847 * (C50316 + C50002 * C50017);
    const double C1614 = C49846 * (C50316 + C50002 * C50017);
    const double C1898 =
        2 * C49846 * C50316 + C49846 * (C50316 + C50002 * C50139);
    const double C533 = C50815 * C515;
    const double C5592 = C50815 * C516;
    const double C49872 = C49865 + C49871;
    const double C49877 = 2 * C49874;
    const double C50024 = C49847 * C49874;
    const double C50146 = C49846 * C49874;
    const double C49909 = C49900 + C49908;
    const double C49917 = 2 * C49915;
    const double C50025 = C49915 * C50017;
    const double C50067 = ae * C49915;
    const double C50066 = C49847 * C49915;
    const double C50495 = C49846 * C49915;
    const double C50089 = C49900 + C50085;
    const double C50211 = 2 * C50203;
    const double C50209 = ae * C50203;
    const double C50541 = C49846 * C50203;
    const double C49948 = C49939 + C49947;
    const double C49956 = 2 * C49954;
    const double C50045 = C49847 * C49954;
    const double C50147 = C49954 * C50139;
    const double C50174 = ae * C49954;
    const double C50173 = C49846 * C49954;
    const double C50194 = C49939 + C50190;
    const double C50280 = 2 * C50272;
    const double C50278 = ae * C50272;
    const double C49984 = C49972 + C49983;
    const double C50102 = C50098 * C50017;
    const double C50101 = C49847 * C50098;
    const double C50100 = C50098 * ae;
    const double C50497 = C50098 * C50139;
    const double C50232 = C49972 + C50228;
    const double C50231 = C50227 * ae;
    const double C50543 = C50227 * C50139;
    const double C50563 = C49972 + C50559;
    const double C50674 = C50673 * C50668;
    const double C50678 = C50677 * C50673;
    const double C50945 = C50673 * C50669;
    const double C50942 = C50673 / C49766;
    const double C17237 = C50970 * C50673;
    const double C50700 = C50699 * C50694;
    const double C50705 = C50704 * C50699;
    const double C50952 = C50699 * C50695;
    const double C50949 = C50699 / C50693;
    const double C1078 = C50957 * C50699;
    const double C50767 = C50718 * C50765;
    const double C50770 = C50704 * C50718;
    const double C50961 = C50718 * C50766;
    const double C50956 = C50718 / C50693;
    const double C291 = C50957 * C50718;
    const double C50795 = C50734 * C50793;
    const double C50798 = C50704 * C50734;
    const double C50965 = C50734 * C50794;
    const double C50958 = C50734 / C50693;
    const double C482 = C50957 * C50734;
    const double C49771 = C49727 / C49724;
    const double C49768 = 2 * C49727;
    const double C2345 = ((0 * ae) / C49722 - C49727 / C49724) / (2 * C49722) +
                         (0 * ae) / C49722;
    const double C8063 =
        ((C50815 - (C49720 * 2 * C49727) / C49722) * ae) / C49722 -
        C49721 / C49726;
    const double C8064 = (0 * ae) / C49722 - C49727 / C49724;
    const double C17238 =
        (-C49721 / C49722) / (2 * C49722) -
        ((C50815 - (C49720 * 2 * C49727) / C49722) * be) / C49722;
    const double C17239 =
        (-(2 * C49727) / C49722) / (2 * C49722) - (0 * be) / C49722;
    const double C152 = C117 * C121;
    const double C150 = C117 * C129;
    const double C148 = C117 * C120;
    const double C345 = C117 * C296;
    const double C534 = C117 * C485;
    const double C5593 = C117 * C487;
    const double C5591 = C117 * C499;
    const double C5589 = C117 * C486;
    const double C6145 = C117 * C932;
    const double C50976 = C50863 / C49726;
    const double C50975 = C50863 * C50862;
    const double C50972 = C50863 / C49722;
    const double C2339 = (2 * C50677 * C50863) / C49722;
    const double C8073 = C50866 * C326;
    const double C17248 = C50866 * C326;
    const double C2344 =
        (((C50815 - (C49720 * 2 * C49727) / C49722) * ae) / C49722 -
         C49721 / C49726) /
            (2 * C49722) +
        ((C49720 * ((0 * ae) / C49722 - C49727 / C49724) + C50866) * ae) /
            C49722;
    const double C50977 = C50866 * C50862;
    const double C20051 = C50866 / C50948;
    const double C24647 = C50866 / C49766;
    const double C50994 = C50974 / C49722;
    const double C2338 = (C50815 * std::pow(C50861, 2)) / C49724 + C50969;
    const double C49813 = C49742 / C49724;
    const double C49810 = 2 * C49742;
    const double C5235 = ((0 * ae) / C49722 - C49742 / C49724) / (2 * C49722) +
                         (0 * ae) / C49722;
    const double C10907 =
        ((C50830 - (C49739 * 2 * C49742) / C49722) * ae) / C49722 -
        C49740 / C49726;
    const double C10908 = (0 * ae) / C49722 - C49742 / C49724;
    const double C33715 =
        (-C49740 / C49722) / C49766 -
        ((C50830 - (C49739 * 2 * C49742) / C49722) * be) / C49722;
    const double C33716 = (-(2 * C49742) / C49722) / C49766 - (0 * be) / C49722;
    const double C50980 = C50891 / C49726;
    const double C50979 = C50891 * C50890;
    const double C50973 = C50891 / C49722;
    const double C5231 = (2 * C50677 * C50891) / C49722;
    const double C5234 =
        (((C50830 - (C49739 * 2 * C49742) / C49722) * ae) / C49722 -
         C49740 / C49726) /
            (2 * C49722) +
        ((C49739 * ((0 * ae) / C49722 - C49742 / C49724) + C50894) * ae) /
            C49722;
    const double C50981 = C50894 * C50890;
    const double C39128 = C50894 / C50948;
    const double C44445 = C50894 / C49766;
    const double C50997 = C50978 / C49722;
    const double C5230 = (C50830 * std::pow(C50889, 2)) / C49724 + C50971;
    const double C50018 = C50015 + C50016;
    const double C50140 = C50137 + C50138;
    const double C161 = C50815 * C144;
    const double C340 = C50815 * C325;
    const double C8081 = C50866 * C325;
    const double C17256 = C50866 * C325;
    const double C350 = C50815 * C329;
    const double C2358 = C2340 * C329;
    const double C8279 = C50866 * C329;
    const double C17454 = C50866 * C329;
    const double C529 = C50815 * C514;
    const double C539 = C50815 * C518;
    const double C956 = C50815 * C948;
    const double C8473 = C50866 * C948;
    const double C17648 = C50866 * C948;
    const double C49902 = C49887 + C49901;
    const double C49906 = 2 * C49904;
    const double C50023 = ae * C49904;
    const double C50022 = C49847 * C49904;
    const double C1164 = (2 * (ae * C49897 + C49847 * C49976) +
                          ae * (C49897 + C49904 * std::pow(C49847, 2)) +
                          C49847 * (C49976 + ae * C49847 * C49904 +
                                    C49847 * (ae * C49904 + C49847 * C49874))) /
                         C49724;
    const double C50466 = C49846 * C49904;
    const double C1158 =
        (2 * C49847 * C49897 + C49847 * (C49897 + C49904 * C50017)) / C49722;
    const double C50020 = C49887 + C50019;
    const double C50087 = C50083 + C50084;
    const double C50088 = 2 * C50082;
    const double C50086 = ae * C50082;
    const double C50488 = C49846 * C50082;
    const double C50512 = C50509 + C50037;
    const double C49941 = C49928 + C49940;
    const double C49945 = 2 * C49943;
    const double C49996 = C49847 * C49943;
    const double C50145 = ae * C49943;
    const double C50144 = C49846 * C49943;
    const double C1909 = (2 * (ae * C49936 + C49846 * C49976) +
                          ae * (C49936 + C49943 * std::pow(C49846, 2)) +
                          C49846 * (C49976 + ae * C49846 * C49943 +
                                    C49846 * (ae * C49943 + C49846 * C49874))) /
                         C49724;
    const double C1904 =
        (2 * C49846 * C49936 + C49846 * (C49936 + C49943 * C50139)) / C49722;
    const double C50039 = C50036 + C50037;
    const double C50142 = C49928 + C50141;
    const double C50192 = C50188 + C50189;
    const double C50193 = 2 * C50187;
    const double C50191 = ae * C50187;
    const double C49982 = 2 * C49980;
    const double C50047 = C49847 * C49980;
    const double C50046 = C49980 * ae;
    const double C50412 = C49980 * C50017;
    const double C50468 = C49980 * C50139;
    const double C50496 = C49846 * C49980;
    const double C49992 = C49970 + C49991;
    const double C50121 = C49970 + C50118;
    const double C50120 = C50117 * ae;
    const double C50229 = 2 * C50117;
    const double C50490 = C50117 * C50139;
    const double C50542 = C49846 * C50117;
    const double C50119 = C50115 + C50116;
    const double C50561 = C50556 + C50116;
    const double C50514 = C49970 + C50511;
    const double C50564 = 2 * C50557;
    const double C50562 = C50557 * ae;
    const double C49881 = C49870 + C49880;
    const double C50071 = C49847 * C50068;
    const double C50175 = C49846 * C50068;
    const double C50210 = C50204 + C50205;
    const double C50279 = C50273 + C50274;
    const double C49920 = C49907 + C49919;
    const double C50073 = C50069 * C50017;
    const double C50212 = C49907 + C50207;
    const double C49959 = C49946 + C49958;
    const double C50099 = C49847 * C50097;
    const double C50176 = C50097 * C50139;
    const double C50230 = C50225 + C50226;
    const double C50281 = C49946 + C50276;
    const double C154 = C117 * C131;
    const double C158 = C117 * C133;
    const double C339 = C117 * C306;
    const double C343 = C117 * C308;
    const double C349 = C117 * C315;
    const double C532 = C117 * C497;
    const double C5595 = C117 * C502;
    const double C6147 = C117 * C938;
    const double C5596 = C50815 * C517;
    const double C6148 = C50815 * C947;
    const double C14059 = C50866 * C947;
    const double C22169 = C50866 * C947;
    const double C5606 = C50815 * C1910;
    const double C153 = C50815 * C130;
    const double C157 = C50815 * C132;
    const double C346 = C50815 * C309;
    const double C8069 = C50866 * C309;
    const double C17244 = C50866 * C309;
    const double C531 = C50815 * C496;
    const double C535 = C50815 * C498;
    const double C5594 = C50815 * C501;
    const double C537 = C50815 * C503;
    const double C6146 = C50815 * C937;
    const double C14055 = C50866 * C937;
    const double C22165 = C50866 * C937;
    const double C5608 = C50815 * C1906;
    const double C50004 = C50001 + C50003;
    const double C50462 = C50459 + C50003;
    const double C1905 =
        (2 * (C49846 * C49895 + C50316 * ae) +
         C49846 * (C49895 + C49846 * (C49846 * C49887 + C50003) +
                   C49846 * C50002 * ae) +
         (C50316 + C50002 * C50139) * ae) /
        C49722;
    const double C314 =
        (C49854 * C49934 + C49847 * (C49847 * C49936 + C50319 * ae) +
         C49847 * C50319 * ae) /
        C49722;
    const double C504 =
        (C49854 * C49895 + C49846 * (C49846 * C49897 + C50319 * ae) +
         C49846 * C50319 * ae) /
        C49722;
    const double C939 = (C49846 * (C49847 * C49936 + C50319 * ae)) / C49722;
    const double C940 =
        (C49846 * C49847 * C49897 + C49847 * C50319 * ae) / C49722;
    const double C1619 = (C49846 * (C49897 + C49904 * C50017) +
                          (C50319 + C49997 * C50017) * ae) /
                         C49722;
    const double C1903 =
        (2 * (C49846 * C49897 + C50319 * ae) +
         C49846 * (C49897 + C49846 * (C49846 * C49904 + C49998) +
                   C49846 * C49997 * ae) +
         (C50319 + C49997 * C50139) * ae) /
        C49722;
    const double C299 = C49854 * C50316 + C50319 * C50017;
    const double C488 = C49854 * C50316 + C50319 * C50139;
    const double C933 = C49846 * C49847 * C50319;
    const double C1152 =
        2 * C49847 * C50319 + C49847 * (C50319 + C49997 * C50017);
    const double C1266 = C49847 * C50319 + C50386 * C50139;
    const double C1613 = C49846 * (C50319 + C49997 * C50017);
    const double C1897 =
        2 * C49846 * C50319 + C49846 * (C50319 + C49997 * C50139);
    const double C123 = 3 * (C50316 + C50002 * C49862) +
                        C49854 * (2 * C50319 + C49854 * C50323);
    const double C294 = C49847 * (2 * C50319 + C49854 * C50323);
    const double C300 = C50316 + C50002 * C49862 + C50323 * C50017;
    const double C483 = C49846 * (2 * C50319 + C49854 * C50323);
    const double C489 = C50316 + C50002 * C49862 + C50323 * C50139;
    const double C934 = C49846 * C49847 * C50323;
    const double C1274 =
        (C49847 * C49895 + C49846 * (C49846 * C50014 + C50389 * ae) +
         C49846 * C50389 * ae) /
        C49722;
    const double C4639 =
        (2 * (C49846 * C50014 + C50389 * ae) +
         C49846 * (C50014 + C49846 * (C49846 * C50082 + C50040) +
                   C49846 * C50038 * ae) +
         (C50389 + C50038 * C50139) * ae) /
        C49722;
    const double C1267 = C49847 * C50316 + C50389 * C50139;
    const double C4633 =
        2 * C49846 * C50389 + C49846 * (C50389 + C50038 * C50139);
    const double C2546 = 3 * (C50316 + C50002 * C50017) +
                         C49847 * (2 * C50389 + C49847 * C50409);
    const double C2740 = C50316 + C50002 * C50017 + C50409 * C50139;
    const double C3310 = C49846 * (2 * C50389 + C49847 * C50409);
    const double C5576 = 3 * (C50316 + C50002 * C50139) +
                         C49846 * (2 * C50460 + C49846 * C50463);
    const double C342 = C50815 * C307;
    const double C8077 = C50866 * C307;
    const double C17252 = C50866 * C307;
    const double C528 = C117 * C495;
    const double C7061 = C117 * C1621;
    const double C156 = C117 * C122;
    const double C341 = C117 * C295;
    const double C530 = C117 * C484;
    const double C7059 = C117 * C1614;
    const double C5607 = C117 * C1898;
    const double C145 =
        (4 * (2 * C49854 * C49865 + C49854 * C49872) +
         C49854 * (3 * C49872 +
                   C49854 * (2 * C49854 * C49870 +
                             C49854 * (C49870 + std::pow(C49860, 7) * bs[7] *
                                                    C49852 * C49862)))) /
        C49724;
    const double C324 =
        (ae * (2 * C49854 * C49887 +
               C49854 * (C49887 + C49863 * C49861 * C49885 * C49862)) +
         C49847 * (2 * C49854 * C49865 + C49854 * C49872)) /
        C49724;
    const double C513 =
        (ae * (2 * C49854 * C49928 +
               C49854 * (C49928 + C49863 * C49861 * C49926 * C49862)) +
         C49846 * (2 * C49854 * C49865 + C49854 * C49872)) /
        C49724;
    const double C49910 = C49854 * C49909;
    const double C49914 = 3 * C49909;
    const double C50030 = ae * C49909;
    const double C50029 = C49847 * C49909;
    const double C50472 = C49846 * C49909;
    const double C50027 = C49904 + C50025;
    const double C50072 = 2 * C50066;
    const double C50070 = ae * C50066;
    const double C50481 = C49846 * C50066;
    const double C50092 = C49847 * C50089;
    const double C50206 = 3 * C50089;
    const double C50202 = ae * C50089;
    const double C50534 = C49846 * C50089;
    const double C50213 = C49870 + C50209;
    const double C49949 = C49854 * C49948;
    const double C49953 = 3 * C49948;
    const double C49990 = C49847 * C49948;
    const double C50152 = ae * C49948;
    const double C50151 = C49846 * C49948;
    const double C50149 = C49943 + C50147;
    const double C50179 = 2 * C50173;
    const double C50177 = ae * C50173;
    const double C50197 = C49846 * C50194;
    const double C50275 = 3 * C50194;
    const double C50271 = ae * C50194;
    const double C50282 = C49870 + C50278;
    const double C49985 = C49854 * C49984;
    const double C50056 = C49847 * C49984;
    const double C50055 = C49984 * ae;
    const double C50417 = C49984 * C50017;
    const double C50474 = C49984 * C50139;
    const double C50105 = C49980 + C50102;
    const double C50104 = C50101 * ae;
    const double C50483 = C50101 * C50139;
    const double C50500 = C49980 + C50497;
    const double C50235 = C49847 * C50232;
    const double C50234 = C50232 * ae;
    const double C50536 = C50232 * C50139;
    const double C50546 = C50117 + C50543;
    const double C50566 = C49846 * C50563;
    const double C50946 = C50674 / C49726;
    const double C50944 = C50674 / C49722;
    const double C50943 = C50674 * C50669;
    const double C17236 = (2 * C50677 * C50674) / C49722;
    const double C50947 = C50678 * C50669;
    const double C110 = C50678 / C50948;
    const double C8062 = C50678 / C49766;
    const double C50983 = C50945 / C49722;
    const double C17235 = (C50673 * std::pow(C50668, 2)) / C49724 + C50942;
    const double C50953 = C50700 / C50708;
    const double C50951 = C50700 / C50691;
    const double C50950 = C50700 * C50695;
    const double C1077 = (2 * C50704 * C50700) / C50691;
    const double C50954 = C50705 * C50695;
    const double C116 = C50705 / C50955;
    const double C673 = C50705 / C50693;
    const double C50986 = C50952 / C50691;
    const double C1076 = (C50699 * std::pow(C50694, 2)) / C50703 + C50949;
    const double C50963 = C50767 / C50708;
    const double C50962 = C50767 * C50766;
    const double C50959 = C50767 / C50691;
    const double C290 = (2 * C50704 * C50767) / C50691;
    const double C50964 = C50770 * C50766;
    const double C1148 = C50770 / C50955;
    const double C1380 = C50770 / C50693;
    const double C50988 = C50961 / C50691;
    const double C289 = (C50718 * std::pow(C50765, 2)) / C50703 + C50956;
    const double C50967 = C50795 / C50708;
    const double C50966 = C50795 * C50794;
    const double C50960 = C50795 / C50691;
    const double C481 = (2 * C50704 * C50795) / C50691;
    const double C50968 = C50798 * C50794;
    const double C1894 = C50798 / C50955;
    const double C2141 = C50798 / C50693;
    const double C50991 = C50965 / C50691;
    const double C480 = (C50734 * std::pow(C50793, 2)) / C50703 + C50958;
    const double C49778 = C49775 - C49771;
    const double C49774 = C49720 * C49768;
    const double C2357 = C2345 * C315;
    const double C36724 = C2345 * C1621;
    const double C36718 = C2345 * C1614;
    const double C8088 = C8063 * C122;
    const double C8084 = C8063 * C133;
    const double C8078 = C8063 * C131;
    const double C8074 = C8063 * C121;
    const double C8070 = C8063 * C129;
    const double C8066 = C8063 * C120;
    const double C8290 = C8063 * C315;
    const double C8284 = C8063 * C296;
    const double C8280 = C8063 * C308;
    const double C8276 = C8063 * C295;
    const double C8272 = C8063 * C306;
    const double C8478 = C8063 * C485;
    const double C8474 = C8063 * C497;
    const double C8470 = C8063 * C484;
    const double C8466 = C8063 * C495;
    const double C14072 = C8063 * C487;
    const double C14068 = C8063 * C502;
    const double C14056 = C8063 * C499;
    const double C14052 = C8063 * C486;
    const double C14748 = C8063 * C938;
    const double C14744 = C8063 * C932;
    const double C15952 = C8063 * C1621;
    const double C15948 = C8063 * C1614;
    const double C16478 = C8063 * C1898;
    const double C8080 = C8064 * C306;
    const double C8076 = C8064 * C295;
    const double C8072 = C8064 * C308;
    const double C8068 = C8064 * C296;
    const double C8278 = C8064 * C315;
    const double C14058 = C8064 * C938;
    const double C14054 = C8064 * C932;
    const double C14750 = C8064 * C1621;
    const double C14746 = C8064 * C1614;
    const double C17263 = C17238 * C122;
    const double C17259 = C17238 * C133;
    const double C17253 = C17238 * C131;
    const double C17249 = C17238 * C121;
    const double C17245 = C17238 * C129;
    const double C17241 = C17238 * C120;
    const double C17465 = C17238 * C315;
    const double C17459 = C17238 * C296;
    const double C17455 = C17238 * C308;
    const double C17451 = C17238 * C295;
    const double C17447 = C17238 * C306;
    const double C17653 = C17238 * C485;
    const double C17649 = C17238 * C497;
    const double C17645 = C17238 * C484;
    const double C17641 = C17238 * C495;
    const double C22184 = C17238 * C1898;
    const double C22174 = C17238 * C502;
    const double C22170 = C17238 * C487;
    const double C22166 = C17238 * C499;
    const double C22162 = C17238 * C486;
    const double C22704 = C17238 * C938;
    const double C22700 = C17238 * C932;
    const double C23634 = C17238 * C1621;
    const double C23630 = C17238 * C1614;
    const double C17255 = C17239 * C306;
    const double C17251 = C17239 * C295;
    const double C17247 = C17239 * C308;
    const double C17243 = C17239 * C296;
    const double C17453 = C17239 * C315;
    const double C22168 = C17239 * C938;
    const double C22164 = C17239 * C932;
    const double C22706 = C17239 * C1621;
    const double C22702 = C17239 * C1614;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C5620 = C5591 + C5592;
    const double C5619 = C5589 + C5590;
    const double C50995 = C50975 / C49724;
    const double C8095 = C50972 * C144;
    const double C8089 = C50972 * C132;
    const double C8085 = C50972 * C143;
    const double C8079 = C50972 * C142;
    const double C8075 = C50972 * C130;
    const double C8071 = C50972 * C141;
    const double C8067 = C50972 * C128;
    const double C8291 = C50972 * C329;
    const double C8285 = C50972 * C309;
    const double C8281 = C50972 * C326;
    const double C8277 = C50972 * C307;
    const double C8273 = C50972 * C325;
    const double C8485 = C50972 * C518;
    const double C8481 = C50972 * C503;
    const double C8479 = C50972 * C498;
    const double C8475 = C50972 * C515;
    const double C8471 = C50972 * C496;
    const double C8467 = C50972 * C514;
    const double C9037 = C50972 * C948;
    const double C14073 = C50972 * C501;
    const double C14069 = C50972 * C517;
    const double C14057 = C50972 * C516;
    const double C14053 = C50972 * C500;
    const double C14749 = C50972 * C947;
    const double C14745 = C50972 * C937;
    const double C16483 = C50972 * C1910;
    const double C16479 = C50972 * C1906;
    const double C2343 =
        (((0 - (C49720 * C49721) / C49722) * ae) / C49722 - (0 * be) / C49726) /
            (2 * C49722) +
        ((C49720 * (((C50815 - (C49720 * 2 * C49727) / C49722) * ae) / C49722 -
                    C49721 / C49726) +
          C50972) *
         ae) /
            C49722 +
        (0 * ae) / C49722 - C49727 / C49724;
    const double C2368 = C2339 * C307;
    const double C2362 = C2339 * C325;
    const double C2356 = C2339 * C326;
    const double C2350 = C2339 * C309;
    const double C2562 = C2339 * C329;
    const double C2756 = C2339 * C948;
    const double C36723 = C2339 * C947;
    const double C36717 = C2339 * C937;
    const double C2367 = C2344 * C295;
    const double C2361 = C2344 * C306;
    const double C2355 = C2344 * C308;
    const double C2349 = C2344 * C296;
    const double C2561 = C2344 * C315;
    const double C36722 = C2344 * C938;
    const double C36716 = C2344 * C932;
    const double C37244 = C2344 * C1621;
    const double C37238 = C2344 * C1614;
    const double C50996 = C50977 / C49722;
    const double C24665 = C24647 * C329;
    const double C17233 = -C50994;
    const double C2378 = C2338 * C143;
    const double C2372 = C2338 * C132;
    const double C2370 = C2338 * C130;
    const double C2364 = C2338 * C142;
    const double C2354 = C2338 * C141;
    const double C2348 = C2338 * C128;
    const double C2578 = C2338 * C329;
    const double C2570 = C2338 * C309;
    const double C2564 = C2338 * C326;
    const double C2772 = C2338 * C518;
    const double C2766 = C2338 * C503;
    const double C2764 = C2338 * C498;
    const double C2758 = C2338 * C515;
    const double C2942 = C2338 * C325;
    const double C2936 = C2338 * C307;
    const double C3106 = C2338 * C514;
    const double C3100 = C2338 * C496;
    const double C3330 = C2338 * C948;
    const double C36737 = C2338 * C501;
    const double C36731 = C2338 * C517;
    const double C36721 = C2338 * C516;
    const double C36715 = C2338 * C500;
    const double C37243 = C2338 * C947;
    const double C37237 = C2338 * C937;
    const double C38563 = C2338 * C1910;
    const double C38557 = C2338 * C1906;
    const double C49820 = C49817 - C49813;
    const double C49816 = C49739 * C49810;
    const double C50998 = C50979 / C49724;
    const double C5233 =
        (((0 - (C49739 * C49740) / C49722) * ae) / C49722 - (0 * be) / C49726) /
            (2 * C49722) +
        ((C49739 * (((C50830 - (C49739 * 2 * C49742) / C49722) * ae) / C49722 -
                    C49740 / C49726) +
          C50973) *
         ae) /
            C49722 +
        (0 * ae) / C49722 - C49742 / C49724;
    const double C50999 = C50981 / C49722;
    const double C33713 = -C50997;
    const double C330 = (C49858 + C49865 * C49862 + ae * C49847 * C49902 +
                         C49847 * (ae * C49902 + C49847 * C49872)) /
                        C49724;
    const double C134 = (3 * (C49895 + C49887 * C49862) +
                         C49854 * (2 * C49897 + C49854 * C49902)) /
                        C49722;
    const double C304 = (C49847 * (2 * C49897 + C49854 * C49902)) / C49722;
    const double C317 = (C49895 + C49887 * C49862 + C49902 * C50017) / C49722;
    const double C493 = (C49846 * (2 * C49897 + C49854 * C49902) +
                         (2 * C50319 + C49854 * C50323) * ae) /
                        C49722;
    const double C506 =
        (C49895 + C49887 * C49862 + C49846 * (C49846 * C49902 + C50323 * ae) +
         C49846 * C50323 * ae) /
        C49722;
    const double C942 =
        (C49846 * C49847 * C49902 + C49847 * C50323 * ae) / C49722;
    const double C1156 =
        (2 * C49847 * C49902 + C49847 * (C49902 + C49909 * C50017)) / C49722;
    const double C50026 = C50023 + C50024;
    const double C1272 =
        (C49847 * C49897 + C49846 * (C49846 * C50022 + C50386 * ae) +
         C49846 * C50386 * ae) /
        C49722;
    const double C2580 = C2339 * C1164;
    const double C2560 = C2340 * C1164;
    const double C8293 = C50866 * C1164;
    const double C17468 = C50866 * C1164;
    const double C24855 = C24647 * C1164;
    const double C50469 = C50466 + C49998;
    const double C2579 = C2344 * C1158;
    const double C2559 = C2345 * C1158;
    const double C8292 = C8064 * C1158;
    const double C17467 = C17239 * C1158;
    const double C2555 =
        (3 * (C49858 + ae * C50014 + C49847 * C50018) +
         ae * (2 * C50014 + C49847 * C50020) +
         C49847 * (2 * C50018 + ae * C50020 +
                   C49847 * (C49865 + ae * C49847 * C49900 +
                             C49847 * (ae * C49900 + C49847 * C49870)))) /
        C49724;
    const double C2550 = (3 * (C49895 + C49887 * C50017) +
                          C49847 * (2 * C50014 + C49847 * C50020)) /
                         C49722;
    const double C2744 =
        (C49895 + C49887 * C50017 + C49846 * (C49846 * C50020 + C50409 * ae) +
         C49846 * C50409 * ae) /
        C49722;
    const double C3314 = (C49846 * (2 * C50014 + C49847 * C50020) +
                          (2 * C50389 + C49847 * C50409) * ae) /
                         C49722;
    const double C50091 = C49847 * C50087;
    const double C50168 = C49846 * C50087;
    const double C50201 = 2 * C50087;
    const double C50090 = C49865 + C50086;
    const double C50491 = C50488 + C50040;
    const double C50516 = C49846 * C50512;
    const double C50555 = 2 * C50512;
    const double C519 = (C49858 + C49865 * C49862 + ae * C49846 * C49941 +
                         C49846 * (ae * C49941 + C49846 * C49872)) /
                        C49724;
    const double C949 =
        (ae * (C49847 * C49941 +
               (C49893 * C49892 + C49856 * C49855 * C49862) * ae) +
         C49846 * (ae * C49902 + C49847 * C49872)) /
        C49724;
    const double C135 = (3 * (C49934 + C49928 * C49862) +
                         C49854 * (2 * C49936 + C49854 * C49941)) /
                        C49722;
    const double C305 =
        (C49847 * (2 * C49936 + C49854 * C49941) +
         (2 * C49854 * C50002 + C49854 * (C50002 + C49970 * C49862)) * ae) /
        C49722;
    const double C316 =
        (C49934 + C49928 * C49862 + C49847 * (C49847 * C49941 + C50323 * ae) +
         C49847 * C50323 * ae) /
        C49722;
    const double C494 = (C49846 * (2 * C49936 + C49854 * C49941)) / C49722;
    const double C505 = (C49934 + C49928 * C49862 + C49941 * C50139) / C49722;
    const double C941 = (C49846 * (C49847 * C49941 + C50323 * ae)) / C49722;
    const double C1902 =
        (2 * C49846 * C49941 + C49846 * (C49941 + C49948 * C50139)) / C49722;
    const double C49999 = C49996 + C49998;
    const double C50148 = C50145 + C50146;
    const double C5598 = C50815 * C1909;
    const double C14081 = C50972 * C1909;
    const double C5600 = C50815 * C1904;
    const double C14077 = C50972 * C1904;
    const double C50041 = C49847 * C50039;
    const double C50114 = 2 * C50039;
    const double C50167 = ae * C50039;
    const double C50166 = C49846 * C50039;
    const double C5585 =
        (3 * (C49858 + ae * C50136 + C49846 * C50140) +
         ae * (2 * C50136 + C49846 * C50142) +
         C49846 * (2 * C50140 + ae * C50142 +
                   C49846 * (C49865 + ae * C49846 * C49939 +
                             C49846 * (ae * C49939 + C49846 * C49870)))) /
        C49724;
    const double C5579 = (3 * (C49934 + C49928 * C50139) +
                          C49846 * (2 * C50136 + C49846 * C50142)) /
                         C49722;
    const double C50196 = C49846 * C50192;
    const double C50270 = 2 * C50192;
    const double C50195 = C49865 + C50191;
    const double C50049 = C50047 * ae;
    const double C50433 = 2 * C50047;
    const double C50482 = C49846 * C50047;
    const double C4631 =
        2 * C49846 * C50386 + C49846 * (C50386 + C50047 * C50139);
    const double C50048 = C50045 + C50046;
    const double C50498 = C50495 + C50046;
    const double C50413 = C49997 + C50412;
    const double C50470 = C49997 + C50468;
    const double C50501 = 2 * C50496;
    const double C50499 = C50496 * ae;
    const double C49993 = C49992 * ae;
    const double C50327 = C49854 * C49992;
    const double C50334 = 3 * C49992;
    const double C50383 = C49847 * C49992;
    const double C50473 = C49846 * C49992;
    const double C1617 = (C49846 * (C49902 + C49909 * C50017) +
                          (C50323 + C49992 * C50017) * ae) /
                         C49722;
    const double C1151 =
        2 * C49847 * C50323 + C49847 * (C50323 + C49992 * C50017);
    const double C1612 = C49846 * (C50323 + C49992 * C50017);
    const double C1896 =
        2 * C49846 * C50323 + C49846 * (C50323 + C49992 * C50139);
    const double C50123 = C50121 * ae;
    const double C50439 = C49847 * C50121;
    const double C50524 = 3 * C50121;
    const double C50535 = C49846 * C50121;
    const double C4632 =
        2 * C49846 * C50409 + C49846 * (C50409 + C50121 * C50139);
    const double C50544 = C50541 + C50120;
    const double C50492 = C50038 + C50490;
    const double C50547 = 2 * C50542;
    const double C50545 = C50542 * ae;
    const double C50122 = C49847 * C50119;
    const double C50169 = C50119 * C50139;
    const double C50224 = 2 * C50119;
    const double C50257 = ae * C50119;
    const double C50256 = C49846 * C50119;
    const double C50565 = C49846 * C50561;
    const double C50517 = C49846 * C50514;
    const double C50560 = 3 * C50514;
    const double C50558 = C50514 * ae;
    const double C49882 = C49854 * C49881;
    const double C50031 = C49847 * C49881;
    const double C50153 = C49846 * C49881;
    const double C1163 = (2 * (ae * C49902 + C49847 * C49872) +
                          ae * (C49902 + C49909 * std::pow(C49847, 2)) +
                          C49847 * (C49872 + ae * C49847 * C49909 +
                                    C49847 * (ae * C49909 + C49847 * C49881))) /
                         C49724;
    const double C1908 = (2 * (ae * C49941 + C49846 * C49872) +
                          ae * (C49941 + C49948 * std::pow(C49846, 2)) +
                          C49846 * (C49872 + ae * C49846 * C49948 +
                                    C49846 * (ae * C49948 + C49846 * C49881))) /
                         C49724;
    const double C50075 = C50067 + C50071;
    const double C50178 = C50174 + C50175;
    const double C50214 = C49847 * C50210;
    const double C50258 = C49846 * C50210;
    const double C50283 = C49846 * C50279;
    const double C49921 = C49854 * C49920;
    const double C50032 = C49920 * C50017;
    const double C50076 = C49915 + C50073;
    const double C50215 = C49847 * C50212;
    const double C49960 = C49854 * C49959;
    const double C50054 = C49847 * C49959;
    const double C50154 = C49959 * C50139;
    const double C50103 = C50099 + C50100;
    const double C50180 = C49954 + C50176;
    const double C50233 = C49847 * C50230;
    const double C50259 = C50230 * C50139;
    const double C50284 = C49846 * C50281;
    const double C171 = C154 + C155;
    const double C173 = C158 + C159;
    const double C361 = C339 + C340;
    const double C363 = C343 + C344;
    const double C366 = C349 + C350;
    const double C552 = C532 + C533;
    const double C5622 = C5595 + C5596;
    const double C6162 = C6147 + C6148;
    const double C170 = C152 + C153;
    const double C364 = C345 + C346;
    const double C553 = C534 + C535;
    const double C5621 = C5593 + C5594;
    const double C6161 = C6145 + C6146;
    const double C1279 =
        (ae * C49895 + C49847 * C49858 + ae * C49846 * C50004 +
         C49846 * (ae * C50004 + C49846 * (ae * C49887 + C49847 * C49865))) /
        C49724;
    const double C1626 =
        (ae * (C49934 + C49847 * C50004 + C49847 * C50002 * ae) +
         C49846 * (C49858 + ae * C49847 * C49887 +
                   C49847 * (ae * C49887 + C49847 * C49865))) /
        C49724;
    const double C4645 = (2 * (ae * C50004 + C49846 * C50018) +
                          ae * (C50004 + C50039 * std::pow(C49846, 2)) +
                          C49846 * (C50018 + ae * C49846 * C50039 +
                                    C49846 * (ae * C50039 + C49846 * C50087))) /
                         C49724;
    const double C1161 =
        (2 * (C49847 * C49934 + C50316 * ae) +
         C49847 * (C49934 + C49847 * C50004 + C49847 * C50002 * ae) +
         (C50316 + C50002 * C50017) * ae) /
        C49722;
    const double C1275 =
        (C49847 * C49934 + C50316 * ae + C50004 * C50139) / C49722;
    const double C1622 =
        (C49846 * (C49934 + C49847 * C50004 + C50389 * ae)) / C49722;
    const double C4641 =
        (2 * C49846 * C50004 + C49846 * (C50004 + C50039 * C50139)) / C49722;
    const double C5580 =
        (3 * (C49895 + C49846 * C50462 + C50460 * ae) +
         C49846 * (2 * C50462 +
                   C49846 * (C49887 + C49846 * (C49846 * C49900 + C50037) +
                             C49846 * C49970 * ae) +
                   C50463 * ae) +
         (2 * C50460 + C49846 * C50463) * ae) /
        C49722;
    const double C5605 = C117 * C1905;
    const double C16482 = C8063 * C1905;
    const double C22180 = C17238 * C1905;
    const double C348 = C50815 * C314;
    const double C2352 = C2340 * C314;
    const double C2572 = C2338 * C314;
    const double C2568 = C2339 * C314;
    const double C8287 = C50972 * C314;
    const double C8283 = C50866 * C314;
    const double C17458 = C50866 * C314;
    const double C24659 = C24647 * C314;
    const double C538 = C117 * C504;
    const double C8484 = C8063 * C504;
    const double C17659 = C17238 * C504;
    const double C954 = C50815 * C939;
    const double C2762 = C2339 * C939;
    const double C3324 = C2338 * C939;
    const double C8477 = C50866 * C939;
    const double C9033 = C50972 * C939;
    const double C17652 = C50866 * C939;
    const double C955 = C117 * C940;
    const double C2755 = C2344 * C940;
    const double C8472 = C8064 * C940;
    const double C9036 = C8063 * C940;
    const double C17647 = C17239 * C940;
    const double C18211 = C17238 * C940;
    const double C2753 = C2345 * C1619;
    const double C3331 = C2344 * C1619;
    const double C5413 = C117 * C1619;
    const double C9038 = C8064 * C1619;
    const double C13850 = C8063 * C1619;
    const double C18213 = C17239 * C1619;
    const double C27692 = C17238 * C1619;
    const double C5597 = C117 * C1903;
    const double C14080 = C8063 * C1903;
    const double C22190 = C17238 * C1903;
    const double C347 = C117 * C299;
    const double C2351 = C2345 * C299;
    const double C2567 = C2344 * C299;
    const double C8286 = C8063 * C299;
    const double C8282 = C8064 * C299;
    const double C17461 = C17238 * C299;
    const double C17457 = C17239 * C299;
    const double C536 = C117 * C488;
    const double C8480 = C8063 * C488;
    const double C17655 = C17238 * C488;
    const double C953 = C117 * C933;
    const double C2761 = C2344 * C933;
    const double C8476 = C8064 * C933;
    const double C9032 = C8063 * C933;
    const double C17651 = C17239 * C933;
    const double C18207 = C17238 * C933;
    const double C2573 = C2344 * C1152;
    const double C2565 = C2345 * C1152;
    const double C8288 = C8064 * C1152;
    const double C17463 = C17239 * C1152;
    const double C2767 = C2344 * C1266;
    const double C5403 = C117 * C1266;
    const double C8482 = C8064 * C1266;
    const double C14754 = C8063 * C1266;
    const double C17657 = C17239 * C1266;
    const double C22716 = C17238 * C1266;
    const double C2759 = C2345 * C1613;
    const double C3325 = C2344 * C1613;
    const double C5411 = C117 * C1613;
    const double C9034 = C8064 * C1613;
    const double C13846 = C8063 * C1613;
    const double C18209 = C17239 * C1613;
    const double C27688 = C17238 * C1613;
    const double C5599 = C117 * C1897;
    const double C14076 = C8063 * C1897;
    const double C22186 = C17238 * C1897;
    const double C162 = C117 * C123;
    const double C8090 = C8063 * C123;
    const double C17265 = C17238 * C123;
    const double C337 = C117 * C294;
    const double C2373 = C2344 * C294;
    const double C8086 = C8064 * C294;
    const double C8660 = C8063 * C294;
    const double C17261 = C17239 * C294;
    const double C17835 = C17238 * C294;
    const double C351 = C117 * C300;
    const double C2365 = C2345 * C300;
    const double C2937 = C2344 * C300;
    const double C8294 = C8063 * C300;
    const double C8274 = C8064 * C300;
    const double C17469 = C17238 * C300;
    const double C17449 = C17239 * C300;
    const double C526 = C117 * C483;
    const double C8823 = C8063 * C483;
    const double C17998 = C17238 * C483;
    const double C540 = C117 * C489;
    const double C8488 = C8063 * C489;
    const double C17663 = C17238 * C489;
    const double C957 = C117 * C934;
    const double C3101 = C2344 * C934;
    const double C8468 = C8064 * C934;
    const double C9040 = C8063 * C934;
    const double C17643 = C17239 * C934;
    const double C18215 = C17238 * C934;
    const double C6151 = C117 * C1274;
    const double C14066 = C8064 * C1274;
    const double C15294 = C8063 * C1274;
    const double C22176 = C17239 * C1274;
    const double C22712 = C17238 * C1274;
    const double C36728 = C2344 * C1274;
    const double C6569 = C117 * C4639;
    const double C16484 = C8064 * C4639;
    const double C22178 = C17239 * C4639;
    const double C23134 = C17238 * C4639;
    const double C38564 = C2344 * C4639;
    const double C48312 = C8063 * C4639;
    const double C6149 = C117 * C1267;
    const double C14070 = C8064 * C1267;
    const double C15290 = C8063 * C1267;
    const double C22172 = C17239 * C1267;
    const double C22708 = C17238 * C1267;
    const double C36734 = C2344 * C1267;
    const double C6567 = C117 * C4633;
    const double C16480 = C8064 * C4633;
    const double C22182 = C17239 * C4633;
    const double C23130 = C17238 * C4633;
    const double C38558 = C2344 * C4633;
    const double C48308 = C8063 * C4633;
    const double C7063 = C117 * C2740;
    const double C15292 = C8064 * C2740;
    const double C22710 = C17239 * C2740;
    const double C23638 = C17238 * C2740;
    const double C36732 = C2345 * C2740;
    const double C37646 = C2344 * C2740;
    const double C48808 = C8063 * C2740;
    const double C15950 = C8064 * C3310;
    const double C23632 = C17239 * C3310;
    const double C37240 = C2345 * C3310;
    const double C38150 = C2344 * C3310;
    const double C7469 = C117 * C5576;
    const double C24050 = C17238 * C5576;
    const double C49212 = C8063 * C5576;
    const double C550 = C528 + C529;
    const double C172 = C156 + C157;
    const double C362 = C341 + C342;
    const double C551 = C530 + C531;
    const double C5626 = C5607 + C5608;
    const double C167 = C50815 * C145;
    const double C336 = C50815 * C324;
    const double C2380 = C2339 * C324;
    const double C8083 = C50866 * C324;
    const double C8665 = C50972 * C324;
    const double C17258 = C50866 * C324;
    const double C525 = C50815 * C513;
    const double C8828 = C50972 * C513;
    const double C49911 = C49906 + C49910;
    const double C2552 = (3 * (C49897 + C49904 * C50017) +
                          C49847 * (2 * C50022 + C49847 * C50027)) /
                         C49722;
    const double C50074 = C49874 + C50070;
    const double C50094 = C50088 + C50092;
    const double C49950 = C49945 + C49949;
    const double C5581 = (3 * (C49936 + C49943 * C50139) +
                          C49846 * (2 * C50144 + C49846 * C50149)) /
                         C49722;
    const double C50181 = C49874 + C50177;
    const double C50199 = C50193 + C50197;
    const double C49986 = C49982 + C49985;
    const double C50058 = C50056 * ae;
    const double C50418 = C49992 + C50417;
    const double C50476 = C49992 + C50474;
    const double C50107 = C50105 * ae;
    const double C50434 = C49847 * C50105;
    const double C50485 = C50047 + C50483;
    const double C50503 = C49846 * C50500;
    const double C50237 = C50229 + C50235;
    const double C50538 = C50121 + C50536;
    const double C50549 = C49846 * C50546;
    const double C50568 = C50564 + C50566;
    const double C50982 = C50943 / C49724;
    const double C50984 = C50947 / C49722;
    const double C2341 = -C50983;
    const double C50985 = C50950 / C50703;
    const double C50987 = C50954 / C50691;
    const double C292 = -C50986;
    const double C50989 = C50962 / C50703;
    const double C50990 = C50964 / C50691;
    const double C1074 = -C50988;
    const double C50992 = C50966 / C50703;
    const double C50993 = C50968 / C50691;
    const double C1725 = -C50991;
    const double C20056 =
        (C49778 / C49766 - (0 * be) / C49722) / C49766 + (0 * ae) / C49722;
    const double C24652 = C49778 / C49766 - (0 * be) / C49722;
    const double C49777 = C49774 / C49722;
    const double C2388 = C2357 + C2358;
    const double C8105 = C8080 + C8081;
    const double C8103 = C8076 + C8077;
    const double C8101 = C8072 + C8073;
    const double C8099 = C8068 + C8069;
    const double C8306 = C8278 + C8279;
    const double C14087 = C14058 + C14059;
    const double C14085 = C14054 + C14055;
    const double C17280 = C17255 + C17256;
    const double C17278 = C17251 + C17252;
    const double C17276 = C17247 + C17248;
    const double C17274 = C17243 + C17244;
    const double C17481 = C17453 + C17454;
    const double C22199 = C22168 + C22169;
    const double C22197 = C22164 + C22165;
    const double C179 = C169 * C50830;
    const double C5238 = C169 * C5230;
    const double C10911 = C169 * C50973;
    const double C178 = C168 * C118;
    const double C10910 = C168 * C10907;
    const double C33718 = C168 * C33715;
    const double C51008 = C50969 - C50995;
    const double C8109 = C8088 + C8089;
    const double C8107 = C8084 + C8085;
    const double C8104 = C8078 + C8079;
    const double C8102 = C8074 + C8075;
    const double C8100 = C8070 + C8071;
    const double C8098 = C8066 + C8067;
    const double C8312 = C8290 + C8291;
    const double C8309 = C8284 + C8285;
    const double C8307 = C8280 + C8281;
    const double C8305 = C8276 + C8277;
    const double C8303 = C8272 + C8273;
    const double C8503 = C8478 + C8479;
    const double C8501 = C8474 + C8475;
    const double C8499 = C8470 + C8471;
    const double C8497 = C8466 + C8467;
    const double C14091 = C14072 + C14073;
    const double C14089 = C14068 + C14069;
    const double C14086 = C14056 + C14057;
    const double C14084 = C14052 + C14053;
    const double C14766 = C14748 + C14749;
    const double C14764 = C14744 + C14745;
    const double C16486 = C16478 + C16479;
    const double C2377 = C2343 * C133;
    const double C2371 = C2343 * C122;
    const double C2369 = C2343 * C121;
    const double C2363 = C2343 * C131;
    const double C2353 = C2343 * C129;
    const double C2347 = C2343 * C120;
    const double C2577 = C2343 * C315;
    const double C2571 = C2343 * C299;
    const double C2569 = C2343 * C296;
    const double C2563 = C2343 * C308;
    const double C2771 = C2343 * C504;
    const double C2765 = C2343 * C488;
    const double C2763 = C2343 * C485;
    const double C2757 = C2343 * C497;
    const double C2941 = C2343 * C306;
    const double C2935 = C2343 * C295;
    const double C3105 = C2343 * C495;
    const double C3099 = C2343 * C484;
    const double C3329 = C2343 * C940;
    const double C3323 = C2343 * C933;
    const double C36736 = C2343 * C487;
    const double C36730 = C2343 * C502;
    const double C36720 = C2343 * C499;
    const double C36714 = C2343 * C486;
    const double C37242 = C2343 * C938;
    const double C37236 = C2343 * C932;
    const double C37650 = C2343 * C1274;
    const double C37644 = C2343 * C1267;
    const double C38154 = C2343 * C1621;
    const double C38148 = C2343 * C1614;
    const double C38562 = C2343 * C1905;
    const double C38556 = C2343 * C1898;
    const double C2393 = C2367 + C2368;
    const double C2390 = C2361 + C2362;
    const double C2387 = C2355 + C2356;
    const double C2384 = C2349 + C2350;
    const double C2584 = C2561 + C2562;
    const double C36742 = C36722 + C36723;
    const double C36739 = C36716 + C36717;
    const double C51009 = C50976 - C50996;
    const double C17270 = C17233 * C144;
    const double C17264 = C17233 * C132;
    const double C17260 = C17233 * C143;
    const double C17254 = C17233 * C142;
    const double C17250 = C17233 * C130;
    const double C17246 = C17233 * C141;
    const double C17242 = C17233 * C128;
    const double C17466 = C17233 * C329;
    const double C17462 = C17233 * C314;
    const double C17460 = C17233 * C309;
    const double C17456 = C17233 * C326;
    const double C17452 = C17233 * C307;
    const double C17448 = C17233 * C325;
    const double C17660 = C17233 * C518;
    const double C17656 = C17233 * C503;
    const double C17654 = C17233 * C498;
    const double C17650 = C17233 * C515;
    const double C17646 = C17233 * C496;
    const double C17642 = C17233 * C514;
    const double C17840 = C17233 * C324;
    const double C18003 = C17233 * C513;
    const double C18212 = C17233 * C948;
    const double C18208 = C17233 * C939;
    const double C22191 = C17233 * C1909;
    const double C22187 = C17233 * C1904;
    const double C22185 = C17233 * C1906;
    const double C22181 = C17233 * C1910;
    const double C22175 = C17233 * C517;
    const double C22171 = C17233 * C501;
    const double C22167 = C17233 * C516;
    const double C22163 = C17233 * C500;
    const double C22705 = C17233 * C947;
    const double C22701 = C17233 * C937;
    const double C39132 =
        (C49820 / C49766 - (0 * be) / C49722) / C49766 + (0 * ae) / C49722;
    const double C44448 = C49820 / C49766 - (0 * be) / C49722;
    const double C49819 = C49816 / C49722;
    const double C51010 = C50971 - C50998;
    const double C5237 = C168 * C5233;
    const double C51011 = C50980 - C50999;
    const double C33719 = C169 * C33713;
    const double C354 = C50815 * C330;
    const double C2360 = C2340 * C330;
    const double C2944 = C2339 * C330;
    const double C8299 = C50972 * C330;
    const double C8271 = C50866 * C330;
    const double C17474 = C17233 * C330;
    const double C17446 = C50866 * C330;
    const double C24667 = C24647 * C330;
    const double C160 = C117 * C134;
    const double C8094 = C8063 * C134;
    const double C17269 = C17238 * C134;
    const double C335 = C117 * C304;
    const double C2379 = C2344 * C304;
    const double C8082 = C8064 * C304;
    const double C8664 = C8063 * C304;
    const double C17257 = C17239 * C304;
    const double C17839 = C17238 * C304;
    const double C353 = C117 * C317;
    const double C2359 = C2345 * C317;
    const double C2943 = C2344 * C317;
    const double C8298 = C8063 * C317;
    const double C8270 = C8064 * C317;
    const double C17473 = C17238 * C317;
    const double C17445 = C17239 * C317;
    const double C524 = C117 * C493;
    const double C8827 = C8063 * C493;
    const double C18002 = C17238 * C493;
    const double C542 = C117 * C506;
    const double C8492 = C8063 * C506;
    const double C17667 = C17238 * C506;
    const double C959 = C117 * C942;
    const double C3107 = C2344 * C942;
    const double C8464 = C8064 * C942;
    const double C9044 = C8063 * C942;
    const double C17639 = C17239 * C942;
    const double C18219 = C17238 * C942;
    const double C2945 = C2345 * C1156;
    const double C8300 = C8064 * C1156;
    const double C17475 = C17239 * C1156;
    const double C2556 =
        (3 * (C49976 + ae * C50022 + C49847 * C50026) +
         ae * (2 * C50022 + C49847 * C50027) +
         C49847 *
             (2 * C50026 + ae * C50027 +
              C49847 * (C49874 + ae * C49847 * C49915 +
                        C49847 * (ae * C49915 + C49847 * C49854 * C49879)))) /
        C49724;
    const double C2773 = C2344 * C1272;
    const double C5401 = C117 * C1272;
    const double C8486 = C8064 * C1272;
    const double C14758 = C8063 * C1272;
    const double C17661 = C17239 * C1272;
    const double C22720 = C17238 * C1272;
    const double C2593 = C2579 + C2580;
    const double C2583 = C2559 + C2560;
    const double C8313 = C8292 + C8293;
    const double C17488 = C17467 + C17468;
    const double C7065 = C117 * C2744;
    const double C15296 = C8064 * C2744;
    const double C22714 = C17239 * C2744;
    const double C23642 = C17238 * C2744;
    const double C36726 = C2345 * C2744;
    const double C37652 = C2344 * C2744;
    const double C48812 = C8063 * C2744;
    const double C15954 = C8064 * C3314;
    const double C23636 = C17239 * C3314;
    const double C37246 = C2345 * C3314;
    const double C38156 = C2344 * C3314;
    const double C50208 = C50201 + C50202;
    const double C50093 = C50090 + C50091;
    const double C50518 = C49887 + C50516;
    const double C543 = C50815 * C519;
    const double C8493 = C50972 * C519;
    const double C17668 = C17233 * C519;
    const double C960 = C50815 * C949;
    const double C3108 = C2339 * C949;
    const double C8465 = C50866 * C949;
    const double C9045 = C50972 * C949;
    const double C17640 = C50866 * C949;
    const double C18220 = C17233 * C949;
    const double C163 = C50815 * C135;
    const double C8091 = C50972 * C135;
    const double C17266 = C17233 * C135;
    const double C338 = C50815 * C305;
    const double C2374 = C2339 * C305;
    const double C8087 = C50866 * C305;
    const double C8661 = C50972 * C305;
    const double C17262 = C50866 * C305;
    const double C17836 = C17233 * C305;
    const double C352 = C50815 * C316;
    const double C2366 = C2340 * C316;
    const double C2938 = C2339 * C316;
    const double C8295 = C50972 * C316;
    const double C8275 = C50866 * C316;
    const double C17470 = C17233 * C316;
    const double C17450 = C50866 * C316;
    const double C24673 = C24647 * C316;
    const double C527 = C50815 * C494;
    const double C8824 = C50972 * C494;
    const double C17999 = C17233 * C494;
    const double C541 = C50815 * C505;
    const double C8489 = C50972 * C505;
    const double C17664 = C17233 * C505;
    const double C958 = C50815 * C941;
    const double C3102 = C2339 * C941;
    const double C8469 = C50866 * C941;
    const double C9041 = C50972 * C941;
    const double C17644 = C50866 * C941;
    const double C18216 = C17233 * C941;
    const double C5616 = C50815 * C1902;
    const double C1278 =
        (ae * C49897 + C49847 * C49976 + ae * C49846 * C49999 +
         C49846 * (ae * C49999 + C49846 * (ae * C49904 + C49847 * C49874))) /
        C49724;
    const double C1625 =
        (ae * (C49936 + C49847 * C49999 + C49847 * C49997 * ae) +
         C49846 * (C49976 + ae * C49847 * C49904 +
                   C49847 * (ae * C49904 + C49847 * C49874))) /
        C49724;
    const double C1159 =
        (2 * (C49847 * C49936 + C50319 * ae) +
         C49847 * (C49936 + C49847 * C49999 + C49847 * C49997 * ae) +
         (C50319 + C49997 * C50017) * ae) /
        C49722;
    const double C1273 =
        (C49847 * C49936 + C50319 * ae + C49999 * C50139) / C49722;
    const double C1620 =
        (C49846 * (C49936 + C49847 * C49999 + C50386 * ae)) / C49722;
    const double C5586 =
        (3 * (C49976 + ae * C50144 + C49846 * C50148) +
         ae * (2 * C50144 + C49846 * C50149) +
         C49846 * (2 * C50148 + ae * C50149 +
                   C49846 * (C49874 + ae * C49846 * C49954 +
                             C49846 * (ae * C49954 + C49846 * C50068)))) /
        C49724;
    const double C50042 = C49928 + C50041;
    const double C50170 = C50167 + C50168;
    const double C7472 = C50815 * C5585;
    const double C24055 = C17233 * C5585;
    const double C49217 = C50972 * C5585;
    const double C7470 = C50815 * C5579;
    const double C24051 = C17233 * C5579;
    const double C49213 = C50972 * C5579;
    const double C50277 = C50270 + C50271;
    const double C50198 = C50195 + C50196;
    const double C50484 = C50481 + C50049;
    const double C4635 =
        (2 * (C49846 * C50022 + C50386 * ae) +
         C49846 * (C50022 + C49846 * (C49846 * C50066 + C50049) +
                   C49846 * C50047 * ae) +
         (C50386 + C50047 * C50139) * ae) /
        C49722;
    const double C6157 = C117 * C4631;
    const double C14078 = C8064 * C4631;
    const double C22188 = C17239 * C4631;
    const double C50050 = C49847 * C50048;
    const double C50096 = 2 * C50048;
    const double C50160 = ae * C50048;
    const double C50159 = C49846 * C50048;
    const double C4637 =
        (2 * C49846 * C49999 + C49846 * (C49999 + C50048 * C50139)) / C49722;
    const double C50502 = C49846 * C50498;
    const double C2746 =
        (C49897 + C49904 * C50017 + C49846 * (C49846 * C50027 + C50413 * ae) +
         C49846 * C50413 * ae) /
        C49722;
    const double C3316 = (C49846 * (2 * C50022 + C49847 * C50027) +
                          (2 * C50386 + C49847 * C50413) * ae) /
                         C49722;
    const double C2547 = 3 * (C50319 + C49997 * C50017) +
                         C49847 * (2 * C50386 + C49847 * C50413);
    const double C2741 = C50319 + C49997 * C50017 + C50413 * C50139;
    const double C3311 = C49846 * (2 * C50386 + C49847 * C50413);
    const double C4630 =
        2 * C49846 * C50413 + C49846 * (C50413 + C50105 * C50139);
    const double C5582 =
        (3 * (C49897 + C49846 * C50469 + C50467 * ae) +
         C49846 * (2 * C50469 +
                   C49846 * (C49904 + C49846 * (C49846 * C49915 + C50046) +
                             C49846 * C49980 * ae) +
                   C50470 * ae) +
         (2 * C50467 + C49846 * C50470) * ae) /
        C49722;
    const double C5577 = 3 * (C50319 + C49997 * C50139) +
                         C49846 * (2 * C50467 + C49846 * C50470);
    const double C49994 = C49990 + C49993;
    const double C50475 = C50472 + C49993;
    const double C1901 =
        (2 * (C49846 * C49902 + C50323 * ae) +
         C49846 * (C49902 + C49846 * (C49846 * C49909 + C49993) +
                   C49846 * C49992 * ae) +
         (C50323 + C49992 * C50139) * ae) /
        C49722;
    const double C50328 = C50326 + C50327;
    const double C1270 =
        (C49847 * C49902 + C49846 * (C49846 * C50029 + C50383 * ae) +
         C49846 * C50383 * ae) /
        C49722;
    const double C1265 = C49847 * C50323 + C50383 * C50139;
    const double C6140 =
        2 * C49846 * C50383 + C49846 * (C50383 + C50056 * C50139);
    const double C3109 = C2345 * C1617;
    const double C9046 = C8064 * C1617;
    const double C11094 = C117 * C1617;
    const double C18221 = C17239 * C1617;
    const double C2939 = C2345 * C1151;
    const double C8296 = C8064 * C1151;
    const double C17471 = C17239 * C1151;
    const double C3103 = C2345 * C1612;
    const double C9042 = C8064 * C1612;
    const double C11092 = C117 * C1612;
    const double C18217 = C17239 * C1612;
    const double C5615 = C117 * C1896;
    const double C50537 = C50534 + C50123;
    const double C4638 =
        (2 * (C49846 * C50020 + C50409 * ae) +
         C49846 * (C50020 + C49846 * (C49846 * C50089 + C50123) +
                   C49846 * C50121 * ae) +
         (C50409 + C50121 * C50139) * ae) /
        C49722;
    const double C50440 = C50438 + C50439;
    const double C23132 = C17239 * C4632;
    const double C38560 = C2345 * C4632;
    const double C40250 = C117 * C4632;
    const double C48310 = C8064 * C4632;
    const double C50548 = C49846 * C50544;
    const double C6562 =
        (3 * (C50014 + C49846 * C50491 + C50489 * ae) +
         C49846 * (2 * C50491 +
                   C49846 * (C50082 + C49846 * (C49846 * C50203 + C50120) +
                             C49846 * C50117 * ae) +
                   C50492 * ae) +
         (2 * C50489 + C49846 * C50492) * ae) /
        C49722;
    const double C6559 = 3 * (C50389 + C50038 * C50139) +
                         C49846 * (2 * C50489 + C49846 * C50492);
    const double C50124 = C49939 + C50122;
    const double C50171 = C50039 + C50169;
    const double C50262 = 2 * C50256;
    const double C50260 = ae * C50256;
    const double C50567 = C49900 + C50565;
    const double C50519 = C50515 + C50517;
    const double C49883 = C49877 + C49882;
    const double C50033 = C50030 + C50031;
    const double C50155 = C50152 + C50153;
    const double C2946 = C2340 * C1163;
    const double C8301 = C50866 * C1163;
    const double C17476 = C50866 * C1163;
    const double C25229 = C24647 * C1163;
    const double C5618 = C50815 * C1908;
    const double C50077 = C49847 * C50075;
    const double C50161 = C49846 * C50075;
    const double C4643 = (2 * (ae * C49999 + C49846 * C50026) +
                          ae * (C49999 + C50048 * std::pow(C49846, 2)) +
                          C49846 * (C50026 + ae * C49846 * C50048 +
                                    C49846 * (ae * C50048 + C49846 * C50075))) /
                         C49724;
    const double C50182 = C49846 * C50178;
    const double C50216 = C50213 + C50214;
    const double C50261 = C50257 + C50258;
    const double C50285 = C50282 + C50283;
    const double C49922 = C49917 + C49921;
    const double C50034 = C49909 + C50032;
    const double C50078 = C49847 * C50076;
    const double C50217 = C50211 + C50215;
    const double C49961 = C49956 + C49960;
    const double C50057 = C50054 + C50055;
    const double C50156 = C49948 + C50154;
    const double C50106 = C49847 * C50103;
    const double C50162 = C50103 * C50139;
    const double C50183 = C49846 * C50180;
    const double C50236 = C49946 + C50233;
    const double C50263 = C50119 + C50259;
    const double C50286 = C50280 + C50284;
    const double C181 = C171 * C50830;
    const double C5247 = C171 * C5230;
    const double C10915 = C171 * C50973;
    const double C33723 = C171 * C33713;
    const double C183 = C173 * C50830;
    const double C5250 = C173 * C5230;
    const double C10920 = C173 * C50973;
    const double C33728 = C173 * C33713;
    const double C373 = C361 * C50830;
    const double C5784 = C361 * C5230;
    const double C11080 = C361 * C50973;
    const double C33888 = C361 * C33713;
    const double C375 = C363 * C50830;
    const double C5407 = C363 * C5230;
    const double C11084 = C363 * C50973;
    const double C33892 = C363 * C33713;
    const double C378 = C366 * C50830;
    const double C5410 = C366 * C5230;
    const double C11087 = C366 * C50973;
    const double C33895 = C366 * C33713;
    const double C564 = C552 * C50830;
    const double C5240 = C552 * C5231;
    const double C5603 = C552 * C5230;
    const double C10913 = C552 * C50894;
    const double C11252 = C552 * C50973;
    const double C33721 = C552 * C50894;
    const double C34054 = C552 * C33713;
    const double C180 = C170 * C118;
    const double C5248 = C170 * C5233;
    const double C10914 = C170 * C10907;
    const double C33722 = C170 * C33715;
    const double C376 = C364 * C118;
    const double C5408 = C364 * C5233;
    const double C11085 = C364 * C10907;
    const double C33893 = C364 * C33715;
    const double C565 = C553 * C118;
    const double C5239 = C553 * C5234;
    const double C5604 = C553 * C5233;
    const double C10912 = C553 * C10908;
    const double C11253 = C553 * C10907;
    const double C33720 = C553 * C33716;
    const double C34055 = C553 * C33715;
    const double C6152 = C50815 * C1279;
    const double C14067 = C50866 * C1279;
    const double C15295 = C50972 * C1279;
    const double C22177 = C50866 * C1279;
    const double C22713 = C17233 * C1279;
    const double C36729 = C2339 * C1279;
    const double C37651 = C2338 * C1279;
    const double C7062 = C50815 * C1626;
    const double C14751 = C50866 * C1626;
    const double C15953 = C50972 * C1626;
    const double C22707 = C50866 * C1626;
    const double C23635 = C17233 * C1626;
    const double C31281 = C24647 * C1626;
    const double C36725 = C2340 * C1626;
    const double C37245 = C2339 * C1626;
    const double C38155 = C2338 * C1626;
    const double C6570 = C50815 * C4645;
    const double C16485 = C50866 * C4645;
    const double C22179 = C50866 * C4645;
    const double C23135 = C17233 * C4645;
    const double C38565 = C2339 * C4645;
    const double C48313 = C50972 * C4645;
    const double C6150 = C50815 * C1275;
    const double C14071 = C50866 * C1275;
    const double C15291 = C50972 * C1275;
    const double C22173 = C50866 * C1275;
    const double C22709 = C17233 * C1275;
    const double C36735 = C2339 * C1275;
    const double C37645 = C2338 * C1275;
    const double C7060 = C50815 * C1622;
    const double C14747 = C50866 * C1622;
    const double C15949 = C50972 * C1622;
    const double C22703 = C50866 * C1622;
    const double C23631 = C17233 * C1622;
    const double C31275 = C24647 * C1622;
    const double C36719 = C2340 * C1622;
    const double C37239 = C2339 * C1622;
    const double C38149 = C2338 * C1622;
    const double C6568 = C50815 * C4641;
    const double C16481 = C50866 * C4641;
    const double C22183 = C50866 * C4641;
    const double C23131 = C17233 * C4641;
    const double C38559 = C2339 * C4641;
    const double C48309 = C50972 * C4641;
    const double C7471 = C117 * C5580;
    const double C24054 = C17238 * C5580;
    const double C49216 = C8063 * C5580;
    const double C5625 = C5605 + C5606;
    const double C16488 = C16482 + C16483;
    const double C555 = C538 + C539;
    const double C8506 = C8484 + C8485;
    const double C966 = C955 + C956;
    const double C2778 = C2755 + C2756;
    const double C8500 = C8472 + C8473;
    const double C9050 = C9036 + C9037;
    const double C17675 = C17647 + C17648;
    const double C5623 = C5597 + C5598;
    const double C14094 = C14080 + C14081;
    const double C365 = C347 + C348;
    const double C2385 = C2351 + C2352;
    const double C2587 = C2567 + C2568;
    const double C8310 = C8286 + C8287;
    const double C8308 = C8282 + C8283;
    const double C17483 = C17457 + C17458;
    const double C554 = C536 + C537;
    const double C8504 = C8480 + C8481;
    const double C965 = C953 + C954;
    const double C2781 = C2761 + C2762;
    const double C8502 = C8476 + C8477;
    const double C9048 = C9032 + C9033;
    const double C17677 = C17651 + C17652;
    const double C5624 = C5599 + C5600;
    const double C14092 = C14076 + C14077;
    const double C562 = C550 * C50830;
    const double C5245 = C550 * C5231;
    const double C5942 = C550 * C5230;
    const double C10917 = C550 * C50894;
    const double C11248 = C550 * C50973;
    const double C33725 = C550 * C50894;
    const double C34050 = C550 * C33713;
    const double C182 = C172 * C118;
    const double C5249 = C172 * C5233;
    const double C10921 = C172 * C10907;
    const double C33729 = C172 * C33715;
    const double C374 = C362 * C118;
    const double C5783 = C362 * C5233;
    const double C11081 = C362 * C10907;
    const double C33889 = C362 * C33715;
    const double C563 = C551 * C118;
    const double C5246 = C551 * C5234;
    const double C5941 = C551 * C5233;
    const double C10916 = C551 * C10908;
    const double C11249 = C551 * C10907;
    const double C33724 = C551 * C33716;
    const double C34051 = C551 * C33715;
    const double C137 = (4 * (2 * C49897 + C49854 * C49902) +
                         C49854 * (3 * C49902 + C49854 * C49911)) /
                        C49722;
    const double C319 =
        (2 * C49897 + C49854 * C49902 + C49911 * C50017) / C49722;
    const double C321 = (C49847 * (3 * C49902 + C49854 * C49911)) / C49722;
    const double C2581 = C2345 * C2552;
    const double C3588 = (4 * (2 * C50014 + C49847 * C50020) +
                          C49847 * (3 * C50020 + C49847 * C50094)) /
                         C49722;
    const double C136 = (4 * (2 * C49936 + C49854 * C49941) +
                         C49854 * (3 * C49941 + C49854 * C49950)) /
                        C49722;
    const double C507 =
        (2 * C49936 + C49854 * C49941 + C49950 * C50139) / C49722;
    const double C509 = (C49846 * (3 * C49941 + C49854 * C49950)) / C49722;
    const double C5612 = C50815 * C5581;
    const double C7465 = (4 * (2 * C50136 + C49846 * C50142) +
                          C49846 * (3 * C50142 + C49846 * C50199)) /
                         C49722;
    const double C49987 = C49986 * ae;
    const double C50335 = C49854 * C49986;
    const double C50380 = C49847 * C49986;
    const double C6141 =
        (2 * (C49846 * C50029 + C50383 * ae) +
         C49846 * (C50029 + C49846 * (C49846 * C49847 * C49920 + C50058) +
                   C49846 * C50056 * ae) +
         (C50383 + C50056 * C50139) * ae) /
        C49722;
    const double C2548 = 3 * (C50323 + C49992 * C50017) +
                         C49847 * (2 * C50383 + C49847 * C50418);
    const double C2742 = C50323 + C49992 * C50017 + C50418 * C50139;
    const double C3312 = C49846 * (2 * C50383 + C49847 * C50418);
    const double C5578 = 3 * (C50323 + C49992 * C50139) +
                         C49846 * (2 * C50473 + C49846 * C50476);
    const double C4634 =
        (2 * (C49846 * C50027 + C50413 * ae) +
         C49846 * (C50027 + C49846 * (C49846 * C50076 + C50107) +
                   C49846 * C50105 * ae) +
         (C50413 + C50105 * C50139) * ae) /
        C49722;
    const double C50435 = C50433 + C50434;
    const double C6558 = 3 * (C50386 + C50047 * C50139) +
                         C49846 * (2 * C50482 + C49846 * C50485);
    const double C50505 = C50501 + C50503;
    const double C50239 = C50237 * ae;
    const double C50525 = C49847 * C50237;
    const double C23125 = 3 * (C50409 + C50121 * C50139) +
                          C49846 * (2 * C50535 + C49846 * C50538);
    const double C50551 = C50547 + C50549;
    const double C50570 = C49846 * C50568;
    const double C51000 = C50942 - C50982;
    const double C51001 = C50946 - C50984;
    const double C51002 = C50949 - C50985;
    const double C51003 = C50953 - C50987;
    const double C51004 = C50956 - C50989;
    const double C51005 = C50963 - C50990;
    const double C51006 = C50958 - C50992;
    const double C51007 = C50967 - C50993;
    const double C24672 = C24652 * C300;
    const double C24666 = C24652 * C317;
    const double C24664 = C24652 * C315;
    const double C24658 = C24652 * C299;
    const double C24876 = C24652 * C2552;
    const double C24860 = C24652 * C1152;
    const double C24854 = C24652 * C1158;
    const double C25042 = C24652 * C1613;
    const double C25036 = C24652 * C1619;
    const double C25228 = C24652 * C1156;
    const double C25222 = C24652 * C1151;
    const double C25392 = C24652 * C1617;
    const double C25386 = C24652 * C1612;
    const double C31288 = C24652 * C2740;
    const double C31282 = C24652 * C2744;
    const double C31280 = C24652 * C1621;
    const double C31274 = C24652 * C1614;
    const double C31802 = C24652 * C3314;
    const double C31796 = C24652 * C3310;
    const double C33116 = C24652 * C4632;
    const double C49780 = C50815 - C49777;
    const double C24685 = C51008 * C143;
    const double C24679 = C51008 * C132;
    const double C24677 = C51008 * C130;
    const double C24671 = C51008 * C142;
    const double C24661 = C51008 * C141;
    const double C24655 = C51008 * C128;
    const double C24873 = C51008 * C329;
    const double C24867 = C51008 * C314;
    const double C24865 = C51008 * C309;
    const double C24859 = C51008 * C326;
    const double C25055 = C51008 * C518;
    const double C25049 = C51008 * C503;
    const double C25047 = C51008 * C498;
    const double C25041 = C51008 * C515;
    const double C25225 = C51008 * C325;
    const double C25219 = C51008 * C307;
    const double C25389 = C51008 * C514;
    const double C25383 = C51008 * C496;
    const double C25601 = C51008 * C948;
    const double C25595 = C51008 * C939;
    const double C31293 = C51008 * C501;
    const double C31287 = C51008 * C517;
    const double C31277 = C51008 * C516;
    const double C31271 = C51008 * C500;
    const double C31799 = C51008 * C947;
    const double C31793 = C51008 * C937;
    const double C32207 = C51008 * C1279;
    const double C32201 = C51008 * C1275;
    const double C32711 = C51008 * C1626;
    const double C32705 = C51008 * C1622;
    const double C33119 = C51008 * C1910;
    const double C33113 = C51008 * C1906;
    const double C20048 =
        (C51008 * C50861) / C49722 + (C50972 - C50994) / C49766;
    const double C8115 = C8104 + C8105;
    const double C8114 = C8102 + C8103;
    const double C2398 = C2377 + C2378;
    const double C2395 = C2371 + C2372;
    const double C2394 = C2369 + C2370;
    const double C2391 = C2363 + C2364;
    const double C2386 = C2353 + C2354;
    const double C2383 = C2347 + C2348;
    const double C2592 = C2577 + C2578;
    const double C2589 = C2571 + C2572;
    const double C2588 = C2569 + C2570;
    const double C2585 = C2563 + C2564;
    const double C2786 = C2771 + C2772;
    const double C2783 = C2765 + C2766;
    const double C2782 = C2763 + C2764;
    const double C2779 = C2757 + C2758;
    const double C2950 = C2941 + C2942;
    const double C2947 = C2935 + C2936;
    const double C3114 = C3105 + C3106;
    const double C3111 = C3099 + C3100;
    const double C3338 = C3329 + C3330;
    const double C3335 = C3323 + C3324;
    const double C36749 = C36736 + C36737;
    const double C36746 = C36730 + C36731;
    const double C36741 = C36720 + C36721;
    const double C36738 = C36714 + C36715;
    const double C37251 = C37242 + C37243;
    const double C37248 = C37236 + C37237;
    const double C38571 = C38562 + C38563;
    const double C38568 = C38556 + C38557;
    const double C24687 = C51009 * C324;
    const double C24681 = C51009 * C305;
    const double C24675 = C51009 * C307;
    const double C24669 = C51009 * C325;
    const double C24663 = C51009 * C326;
    const double C24657 = C51009 * C309;
    const double C24875 = C51009 * C1164;
    const double C24863 = C51009 * C314;
    const double C24857 = C51009 * C329;
    const double C25045 = C51009 * C939;
    const double C25039 = C51009 * C948;
    const double C25227 = C51009 * C330;
    const double C25221 = C51009 * C316;
    const double C25391 = C51009 * C949;
    const double C25385 = C51009 * C941;
    const double C31291 = C51009 * C1275;
    const double C31285 = C51009 * C1279;
    const double C31279 = C51009 * C947;
    const double C31273 = C51009 * C937;
    const double C31801 = C51009 * C1626;
    const double C31795 = C51009 * C1622;
    const double C33121 = C51009 * C4645;
    const double C33115 = C51009 * C4641;
    const double C20049 =
        (C51009 * C50861) / C49722 + (2 * C50866 + C51008) / C49766;
    const double C20050 = (C50861 * C50866) / C49726 + C51009 / C49766;
    const double C17284 = C17263 + C17264;
    const double C17282 = C17259 + C17260;
    const double C17279 = C17253 + C17254;
    const double C17277 = C17249 + C17250;
    const double C17275 = C17245 + C17246;
    const double C17273 = C17241 + C17242;
    const double C17487 = C17465 + C17466;
    const double C17485 = C17461 + C17462;
    const double C17484 = C17459 + C17460;
    const double C17482 = C17455 + C17456;
    const double C17480 = C17451 + C17452;
    const double C17478 = C17447 + C17448;
    const double C17681 = C17659 + C17660;
    const double C17679 = C17655 + C17656;
    const double C17678 = C17653 + C17654;
    const double C17676 = C17649 + C17650;
    const double C17674 = C17645 + C17646;
    const double C17672 = C17641 + C17642;
    const double C18225 = C18211 + C18212;
    const double C18223 = C18207 + C18208;
    const double C22210 = C22190 + C22191;
    const double C22208 = C22186 + C22187;
    const double C22207 = C22184 + C22185;
    const double C22205 = C22180 + C22181;
    const double C22202 = C22174 + C22175;
    const double C22200 = C22170 + C22171;
    const double C22198 = C22166 + C22167;
    const double C22196 = C22162 + C22163;
    const double C22726 = C22704 + C22705;
    const double C22724 = C22700 + C22701;
    const double C49822 = C50830 - C49819;
    const double C44463 = C173 * C51010;
    const double C44460 = C171 * C51010;
    const double C44451 = C169 * C51010;
    const double C44621 = C366 * C51010;
    const double C44618 = C363 * C51010;
    const double C44776 = C552 * C51010;
    const double C44931 = C361 * C51010;
    const double C45083 = C550 * C51010;
    const double C39125 =
        (C51010 * C50889) / C49722 + (C50973 - C50997) / C49766;
    const double C44458 = C550 * C51011;
    const double C44453 = C552 * C51011;
    const double C39126 =
        (C51011 * C50889) / C49722 + (2 * C50894 + C51010) / C49766;
    const double C39127 = (C50889 * C50894) / C49726 + C51011 / C49766;
    const double C174 = C160 + C161;
    const double C8112 = C8094 + C8095;
    const double C17287 = C17269 + C17270;
    const double C359 = C335 + C336;
    const double C2399 = C2379 + C2380;
    const double C8106 = C8082 + C8083;
    const double C8672 = C8664 + C8665;
    const double C17281 = C17257 + C17258;
    const double C17847 = C17839 + C17840;
    const double C368 = C353 + C354;
    const double C2389 = C2359 + C2360;
    const double C2951 = C2943 + C2944;
    const double C8316 = C8298 + C8299;
    const double C8302 = C8270 + C8271;
    const double C17491 = C17473 + C17474;
    const double C17477 = C17445 + C17446;
    const double C548 = C524 + C525;
    const double C8835 = C8827 + C8828;
    const double C18010 = C18002 + C18003;
    const double C2582 = C2340 * C2556;
    const double C24877 = C24647 * C2556;
    const double C3591 =
        (4 * (2 * C50018 + ae * C50020 + C49847 * C50093) +
         ae * (3 * C50020 + C49847 * C50094) +
         C49847 *
             (3 * C50093 + ae * C50094 +
              C49847 * (2 * C50087 + ae * C50089 +
                        C49847 * (C49870 + ae * C49847 * C49907 +
                                  C49847 * (ae * C49907 + C49847 * C49879))))) /
        C49724;
    const double C50520 = C50518 + C50513;
    const double C557 = C542 + C543;
    const double C8510 = C8492 + C8493;
    const double C17685 = C17667 + C17668;
    const double C968 = C959 + C960;
    const double C3115 = C3107 + C3108;
    const double C8496 = C8464 + C8465;
    const double C9054 = C9044 + C9045;
    const double C17671 = C17639 + C17640;
    const double C18229 = C18219 + C18220;
    const double C175 = C162 + C163;
    const double C8110 = C8090 + C8091;
    const double C17285 = C17265 + C17266;
    const double C360 = C337 + C338;
    const double C2396 = C2373 + C2374;
    const double C8108 = C8086 + C8087;
    const double C8670 = C8660 + C8661;
    const double C17283 = C17261 + C17262;
    const double C17845 = C17835 + C17836;
    const double C367 = C351 + C352;
    const double C2392 = C2365 + C2366;
    const double C2948 = C2937 + C2938;
    const double C8314 = C8294 + C8295;
    const double C8304 = C8274 + C8275;
    const double C17489 = C17469 + C17470;
    const double C17479 = C17449 + C17450;
    const double C549 = C526 + C527;
    const double C8833 = C8823 + C8824;
    const double C18008 = C17998 + C17999;
    const double C556 = C540 + C541;
    const double C8508 = C8488 + C8489;
    const double C17683 = C17663 + C17664;
    const double C967 = C957 + C958;
    const double C3112 = C3101 + C3102;
    const double C8498 = C8468 + C8469;
    const double C9052 = C9040 + C9041;
    const double C17673 = C17643 + C17644;
    const double C18227 = C18215 + C18216;
    const double C2774 = C2339 * C1278;
    const double C5402 = C50815 * C1278;
    const double C8487 = C50866 * C1278;
    const double C14759 = C50972 * C1278;
    const double C17662 = C50866 * C1278;
    const double C22721 = C17233 * C1278;
    const double C25057 = C51009 * C1278;
    const double C2754 = C2340 * C1625;
    const double C3332 = C2339 * C1625;
    const double C5414 = C50815 * C1625;
    const double C9039 = C50866 * C1625;
    const double C13851 = C50972 * C1625;
    const double C18214 = C50866 * C1625;
    const double C25037 = C24647 * C1625;
    const double C25603 = C51009 * C1625;
    const double C27693 = C17233 * C1625;
    const double C2574 = C2339 * C1159;
    const double C2566 = C2340 * C1159;
    const double C8289 = C50866 * C1159;
    const double C17464 = C50866 * C1159;
    const double C24869 = C51009 * C1159;
    const double C24861 = C24647 * C1159;
    const double C2768 = C2339 * C1273;
    const double C5404 = C50815 * C1273;
    const double C8483 = C50866 * C1273;
    const double C14755 = C50972 * C1273;
    const double C17658 = C50866 * C1273;
    const double C22717 = C17233 * C1273;
    const double C25051 = C51009 * C1273;
    const double C2760 = C2340 * C1620;
    const double C3326 = C2339 * C1620;
    const double C5412 = C50815 * C1620;
    const double C9035 = C50866 * C1620;
    const double C13847 = C50972 * C1620;
    const double C18210 = C50866 * C1620;
    const double C25043 = C24647 * C1620;
    const double C25597 = C51009 * C1620;
    const double C27689 = C17233 * C1620;
    const double C5614 = C50815 * C5586;
    const double C50043 = C50042 + C50040;
    const double C7473 = C7469 + C7470;
    const double C24058 = C24050 + C24051;
    const double C49220 = C49212 + C49213;
    const double C7467 =
        (4 * (2 * C50140 + ae * C50142 + C49846 * C50198) +
         ae * (3 * C50142 + C49846 * C50199) +
         C49846 *
             (3 * C50198 + ae * C50199 +
              C49846 * (2 * C50192 + ae * C50194 +
                        C49846 * (C49870 + ae * C49846 * C49946 +
                                  C49846 * (ae * C49946 + C49846 * C49879))))) /
        C49724;
    const double C6560 =
        (3 * (C50022 + C49846 * C50484 + C50482 * ae) +
         C49846 *
             (2 * C50484 +
              C49846 * (C50066 + C49846 * (C49846 * C49847 * C50069 + C50104) +
                        C49846 * C50101 * ae) +
              C50485 * ae) +
         (2 * C50482 + C49846 * C50485) * ae) /
        C49722;
    const double C6159 = C117 * C4635;
    const double C14082 = C8064 * C4635;
    const double C22192 = C17239 * C4635;
    const double C50051 = C49943 + C50050;
    const double C6158 = C50815 * C4637;
    const double C14079 = C50866 * C4637;
    const double C22189 = C50866 * C4637;
    const double C50504 = C49904 + C50502;
    const double C2775 = C2345 * C2746;
    const double C5417 = C117 * C2746;
    const double C14760 = C8064 * C2746;
    const double C22722 = C17239 * C2746;
    const double C25058 = C24652 * C2746;
    const double C3333 = C2345 * C3316;
    const double C13852 = C8064 * C3316;
    const double C25604 = C24652 * C3316;
    const double C27694 = C17239 * C3316;
    const double C2575 = C2345 * C2547;
    const double C24870 = C24652 * C2547;
    const double C2769 = C2345 * C2741;
    const double C5415 = C117 * C2741;
    const double C14756 = C8064 * C2741;
    const double C22718 = C17239 * C2741;
    const double C25052 = C24652 * C2741;
    const double C3327 = C2345 * C3311;
    const double C13848 = C8064 * C3311;
    const double C25598 = C24652 * C3311;
    const double C27690 = C17239 * C3311;
    const double C5613 = C117 * C5582;
    const double C5611 = C117 * C5577;
    const double C1277 =
        (ae * C49902 + C49847 * C49872 + ae * C49846 * C49994 +
         C49846 * (ae * C49994 + C49846 * (ae * C49909 + C49847 * C49881))) /
        C49724;
    const double C1624 =
        (ae * (C49941 + C49847 * C49994 + C49847 * C49992 * ae) +
         C49846 * (C49872 + ae * C49847 * C49909 +
                   C49847 * (ae * C49909 + C49847 * C49881))) /
        C49724;
    const double C1157 =
        (2 * (C49847 * C49941 + C50323 * ae) +
         C49847 * (C49941 + C49847 * C49994 + C49847 * C49992 * ae) +
         (C50323 + C49992 * C50017) * ae) /
        C49722;
    const double C1271 =
        (C49847 * C49941 + C50323 * ae + C49994 * C50139) / C49722;
    const double C1618 =
        (C49846 * (C49941 + C49847 * C49994 + C50383 * ae)) / C49722;
    const double C5583 =
        (3 * (C49902 + C49846 * C50475 + C50473 * ae) +
         C49846 * (2 * C50475 +
                   C49846 * (C49909 + C49846 * (C49846 * C49920 + C50055) +
                             C49846 * C49984 * ae) +
                   C50476 * ae) +
         (2 * C50473 + C49846 * C50476) * ae) /
        C49722;
    const double C5617 = C117 * C1901;
    const double C318 =
        (2 * C49936 + C49854 * C49941 +
         C49847 * (C49847 * C49950 + C50328 * ae) + C49847 * C50328 * ae) /
        C49722;
    const double C320 = (C49847 * (3 * C49941 + C49854 * C49950) +
                         (3 * C50323 + C49854 * C50328) * ae) /
                        C49722;
    const double C508 =
        (2 * C49897 + C49854 * C49902 +
         C49846 * (C49846 * C49911 + C50328 * ae) + C49846 * C50328 * ae) /
        C49722;
    const double C510 = (C49846 * (3 * C49902 + C49854 * C49911) +
                         (3 * C50323 + C49854 * C50328) * ae) /
                        C49722;
    const double C943 = (C49846 * (C49847 * C49950 + C50328 * ae)) / C49722;
    const double C944 =
        (C49846 * C49847 * C49911 + C49847 * C50328 * ae) / C49722;
    const double C124 = 4 * (2 * C50319 + C49854 * C50323) +
                        C49854 * (3 * C50323 + C49854 * C50328);
    const double C301 = 2 * C50319 + C49854 * C50323 + C50328 * C50017;
    const double C302 = C49847 * (3 * C50323 + C49854 * C50328);
    const double C490 = 2 * C50319 + C49854 * C50323 + C50328 * C50139;
    const double C491 = C49846 * (3 * C50323 + C49854 * C50328);
    const double C935 = C49846 * C49847 * C50328;
    const double C1150 =
        2 * C49847 * C50328 + C49847 * (C50328 + C49986 * C50017);
    const double C1611 = C49846 * (C50328 + C49986 * C50017);
    const double C1895 =
        2 * C49846 * C50328 + C49846 * (C50328 + C49986 * C50139);
    const double C5789 = C117 * C1270;
    const double C8494 = C8064 * C1270;
    const double C17669 = C17239 * C1270;
    const double C5787 = C117 * C1265;
    const double C8490 = C8064 * C1265;
    const double C17665 = C17239 * C1265;
    const double C5629 = C5615 + C5616;
    const double C23126 =
        (3 * (C50020 + C49846 * C50537 + C50535 * ae) +
         C49846 * (2 * C50537 +
                   C49846 * (C50089 + C49846 * (C49846 * C50212 + C50234) +
                             C49846 * C50232 * ae) +
                   C50538 * ae) +
         (2 * C50535 + C49846 * C50538) * ae) /
        C49722;
    const double C23136 = C17239 * C4638;
    const double C33122 = C24652 * C4638;
    const double C38566 = C2345 * C4638;
    const double C40252 = C117 * C4638;
    const double C48314 = C8064 * C4638;
    const double C3742 =
        (2 * C50014 + C49847 * C50020 +
         C49846 * (C49846 * C50094 + C50440 * ae) + C49846 * C50440 * ae) /
        C49722;
    const double C4236 = (C49846 * (3 * C50020 + C49847 * C50094) +
                          (3 * C50409 + C49847 * C50440) * ae) /
                         C49722;
    const double C3585 = 4 * (2 * C50389 + C49847 * C50409) +
                         C49847 * (3 * C50409 + C49847 * C50440);
    const double C3739 = 2 * C50389 + C49847 * C50409 + C50440 * C50139;
    const double C4233 = C49846 * (3 * C50409 + C49847 * C50440);
    const double C21441 =
        2 * C49846 * C50440 + C49846 * (C50440 + C50237 * C50139);
    const double C50550 = C50082 + C50548;
    const double C24056 = C17239 * C6562;
    const double C39920 = C117 * C6562;
    const double C49218 = C8064 * C6562;
    const double C24052 = C17239 * C6559;
    const double C39918 = C117 * C6559;
    const double C49214 = C8064 * C6559;
    const double C50125 = C50124 + C50120;
    const double C6565 =
        (3 * (C50018 + ae * C50166 + C49846 * C50170) +
         ae * (2 * C50166 + C49846 * C50171) +
         C49846 *
             (2 * C50170 + ae * C50171 +
              C49846 * (C50087 + ae * C49846 * C50119 +
                        C49846 * (ae * C50119 +
                                  C49846 * (ae * C49907 + C49847 * C49879))))) /
        C49724;
    const double C6563 = (3 * (C50004 + C50039 * C50139) +
                          C49846 * (2 * C50166 + C49846 * C50171)) /
                         C49722;
    const double C50264 = C50087 + C50260;
    const double C50569 = C50567 + C50562;
    const double C7461 = 4 * (2 * C50460 + C49846 * C50463) +
                         C49846 * (3 * C50463 + C49846 * C50519);
    const double C146 =
        (5 * (3 * C49872 + C49854 * C49883) +
         C49854 * (4 * C49883 +
                   C49854 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C331 =
        (2 * C49854 * C49865 + C49854 * C49872 + ae * C49847 * C49911 +
         C49847 * (ae * C49911 + C49847 * C49883)) /
        C49724;
    const double C332 = (ae * (3 * C49902 + C49854 * C49911) +
                         C49847 * (3 * C49872 + C49854 * C49883)) /
                        C49724;
    const double C520 =
        (2 * C49854 * C49865 + C49854 * C49872 + ae * C49846 * C49950 +
         C49846 * (ae * C49950 + C49846 * C49883)) /
        C49724;
    const double C521 = (ae * (3 * C49941 + C49854 * C49950) +
                         C49846 * (3 * C49872 + C49854 * C49883)) /
                        C49724;
    const double C950 = (ae * (C49847 * C49950 +
                               (2 * C49854 * C49970 +
                                C49854 * (C49970 + C49861 * C49863 * C49862)) *
                                   ae) +
                         C49846 * (ae * C49911 + C49847 * C49883)) /
                        C49724;
    const double C2952 = C2945 + C2946;
    const double C8317 = C8300 + C8301;
    const double C17492 = C17475 + C17476;
    const double C50079 = C50074 + C50077;
    const double C50163 = C50160 + C50161;
    const double C6160 = C50815 * C4643;
    const double C14083 = C50866 * C4643;
    const double C22193 = C50866 * C4643;
    const double C50184 = C50181 + C50182;
    const double C50218 = C49847 * C50216;
    const double C50251 = C49846 * C50216;
    const double C50265 = C49846 * C50261;
    const double C50287 = C49846 * C50285;
    const double C49923 = C49854 * C49922;
    const double C1162 =
        (2 * (ae * C49911 + C49847 * C49883) +
         ae * (C49911 + C49922 * std::pow(C49847, 2)) +
         C49847 * (C49883 + ae * C49847 * C49922 +
                   C49847 * (ae * C49922 +
                             C49847 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C1154 =
        (2 * C49847 * C49911 + C49847 * (C49911 + C49922 * C50017)) / C49722;
    const double C1615 = (C49846 * (C49911 + C49922 * C50017) +
                          (C50328 + C49986 * C50017) * ae) /
                         C49722;
    const double C2557 =
        (3 * (C49872 + ae * C50029 + C49847 * C50033) +
         ae * (2 * C50029 + C49847 * C50034) +
         C49847 * (2 * C50033 + ae * C50034 +
                   C49847 * (C49881 + ae * C49847 * C49920 +
                             C49847 * (ae * C49920 +
                                       C49847 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C2553 = (3 * (C49902 + C49909 * C50017) +
                          C49847 * (2 * C50029 + C49847 * C50034)) /
                         C49722;
    const double C2747 =
        (C49902 + C49909 * C50017 + C49846 * (C49846 * C50034 + C50418 * ae) +
         C49846 * C50418 * ae) /
        C49722;
    const double C3317 = (C49846 * (2 * C50029 + C49847 * C50034) +
                          (2 * C50383 + C49847 * C50418) * ae) /
                         C49722;
    const double C50080 = C50072 + C50078;
    const double C50219 = C49847 * C50217;
    const double C49962 = C49854 * C49961;
    const double C49979 = C49847 * C49961;
    const double C1907 =
        (2 * (ae * C49950 + C49846 * C49883) +
         ae * (C49950 + C49961 * std::pow(C49846, 2)) +
         C49846 * (C49883 + ae * C49846 * C49961 +
                   C49846 * (ae * C49961 +
                             C49846 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C1900 =
        (2 * C49846 * C49950 + C49846 * (C49950 + C49961 * C50139)) / C49722;
    const double C50059 = C49847 * C50057;
    const double C6143 =
        (2 * (ae * C49994 + C49846 * C50033) + ae * (C49994 + C50057 * C50139) +
         C49846 * (C50033 + ae * C49846 * C50057 +
                   C49846 * (ae * C50057 +
                             C49846 * (ae * C49920 +
                                       C49847 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C6142 =
        (2 * C49846 * C49994 + C49846 * (C49994 + C50057 * C50139)) / C49722;
    const double C5587 =
        (3 * (C49872 + ae * C50151 + C49846 * C50155) +
         ae * (2 * C50151 + C49846 * C50156) +
         C49846 * (2 * C50155 + ae * C50156 +
                   C49846 * (C49881 + ae * C49846 * C49959 +
                             C49846 * (ae * C49959 +
                                       C49846 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C5584 = (3 * (C49941 + C49948 * C50139) +
                          C49846 * (2 * C50151 + C49846 * C50156)) /
                         C49722;
    const double C50108 = C49954 + C50106;
    const double C50164 = C50048 + C50162;
    const double C50185 = C50179 + C50183;
    const double C50238 = C50236 + C50231;
    const double C50266 = C49846 * C50263;
    const double C50288 = C49846 * C50286;
    const double C188 = C180 + C181;
    const double C10926 = C10914 + C10915;
    const double C33734 = C33722 + C33723;
    const double C6164 = C6151 + C6152;
    const double C14088 = C14066 + C14067;
    const double C15300 = C15294 + C15295;
    const double C22203 = C22176 + C22177;
    const double C22730 = C22712 + C22713;
    const double C36745 = C36728 + C36729;
    const double C37659 = C37650 + C37651;
    const double C7068 = C7061 + C7062;
    const double C14767 = C14750 + C14751;
    const double C15958 = C15952 + C15953;
    const double C22727 = C22706 + C22707;
    const double C23648 = C23634 + C23635;
    const double C36743 = C36724 + C36725;
    const double C37252 = C37244 + C37245;
    const double C38163 = C38154 + C38155;
    const double C6572 = C6569 + C6570;
    const double C16489 = C16484 + C16485;
    const double C22204 = C22178 + C22179;
    const double C23142 = C23134 + C23135;
    const double C38572 = C38564 + C38565;
    const double C48320 = C48312 + C48313;
    const double C6163 = C6149 + C6150;
    const double C14090 = C14070 + C14071;
    const double C15298 = C15290 + C15291;
    const double C22201 = C22172 + C22173;
    const double C22728 = C22708 + C22709;
    const double C36748 = C36734 + C36735;
    const double C37656 = C37644 + C37645;
    const double C7067 = C7059 + C7060;
    const double C14765 = C14746 + C14747;
    const double C15956 = C15948 + C15949;
    const double C22725 = C22702 + C22703;
    const double C23646 = C23630 + C23631;
    const double C36740 = C36718 + C36719;
    const double C37249 = C37238 + C37239;
    const double C38160 = C38148 + C38149;
    const double C6571 = C6567 + C6568;
    const double C16487 = C16480 + C16481;
    const double C22206 = C22182 + C22183;
    const double C23140 = C23130 + C23131;
    const double C38569 = C38558 + C38559;
    const double C48318 = C48308 + C48309;
    const double C7474 = C7471 + C7472;
    const double C24060 = C24054 + C24055;
    const double C49222 = C49216 + C49217;
    const double C567 = C555 * C50830;
    const double C5242 = C555 * C5232;
    const double C5610 = C555 * C5230;
    const double C5601 = C555 * C5231;
    const double C11255 = C555 * C50973;
    const double C11250 = C555 * C50894;
    const double C34057 = C555 * C33713;
    const double C34052 = C555 * C50894;
    const double C44455 = C555 * C44445;
    const double C44779 = C555 * C51010;
    const double C44774 = C555 * C51011;
    const double C972 = C966 * C50830;
    const double C5405 = C966 * C5231;
    const double C6154 = C966 * C5230;
    const double C11082 = C966 * C50894;
    const double C11763 = C966 * C50973;
    const double C33890 = C966 * C50894;
    const double C34565 = C966 * C33713;
    const double C44616 = C966 * C51011;
    const double C45283 = C966 * C51010;
    const double C14064 = C8500 + C8501;
    const double C14061 = C8501 + C8500;
    const double C5634 = C5623 * C5231;
    const double C5631 = C5623 * C5232;
    const double C11257 = C5623 * C50894;
    const double C34059 = C5623 * C50894;
    const double C44781 = C5623 * C51011;
    const double C44772 = C5623 * C44445;
    const double C377 = C365 * C118;
    const double C5409 = C365 * C5233;
    const double C11086 = C365 * C10907;
    const double C33894 = C365 * C33715;
    const double C566 = C554 * C118;
    const double C5241 = C554 * C5235;
    const double C5609 = C554 * C5233;
    const double C5602 = C554 * C5234;
    const double C11254 = C554 * C10907;
    const double C11251 = C554 * C10908;
    const double C34056 = C554 * C33715;
    const double C34053 = C554 * C33716;
    const double C44454 = C554 * C44448;
    const double C971 = C965 * C118;
    const double C5406 = C965 * C5234;
    const double C6153 = C965 * C5233;
    const double C11083 = C965 * C10908;
    const double C11762 = C965 * C10907;
    const double C33891 = C965 * C33716;
    const double C34564 = C965 * C33715;
    const double C14065 = C8502 + C8503;
    const double C14060 = C8503 + C8502;
    const double C5633 = C5624 * C5234;
    const double C5632 = C5624 * C5235;
    const double C11256 = C5624 * C10908;
    const double C34058 = C5624 * C33716;
    const double C44773 = C5624 * C44448;
    const double C191 = C183 + C182;
    const double C189 = C182 + C183;
    const double C10927 = C10920 + C10921;
    const double C33735 = C33728 + C33729;
    const double C680 = C373 + C374;
    const double C11408 = C11080 + C11081;
    const double C34210 = C33888 + C33889;
    const double C794 = C562 + C563;
    const double C11561 = C11248 + C11249;
    const double C34363 = C34050 + C34051;
    const double C166 = C117 * C137;
    const double C357 = C117 * C319;
    const double C2381 = C2345 * C319;
    const double C8666 = C8064 * C319;
    const double C17841 = C17239 * C319;
    const double C24688 = C24652 * C319;
    const double C683 = C117 * C321;
    const double C8096 = C8064 * C321;
    const double C17271 = C17239 * C321;
    const double C165 = C50815 * C136;
    const double C545 = C50815 * C507;
    const double C796 = C50815 * C509;
    const double C40523 = C50815 * C7465;
    const double C1899 =
        (2 * (C49846 * C49911 + C50328 * ae) +
         C49846 * (C49911 + C49846 * (C49846 * C49922 + C49987) +
                   C49846 * C49986 * ae) +
         (C50328 + C49986 * C50139) * ae) /
        C49722;
    const double C50336 = C50334 + C50335;
    const double C1268 =
        (C49847 * C49911 + C49846 * (C49846 * C49847 * C49922 + C50380 * ae) +
         C49846 * C50380 * ae) /
        C49722;
    const double C1264 = C49847 * C50328 + C50380 * C50139;
    const double C3584 = 4 * (2 * C50386 + C49847 * C50413) +
                         C49847 * (3 * C50413 + C49847 * C50435);
    const double C3738 = 2 * C50386 + C49847 * C50413 + C50435 * C50139;
    const double C4232 = C49846 * (3 * C50413 + C49847 * C50435);
    const double C7460 = 4 * (2 * C50467 + C49846 * C50470) +
                         C49846 * (3 * C50470 + C49846 * C50505);
    const double C21442 =
        (2 * (C49846 * C50094 + C50440 * ae) +
         C49846 * (C50094 + C49846 * (C49846 * C50217 + C50239) +
                   C49846 * C50237 * ae) +
         (C50440 + C50237 * C50139) * ae) /
        C49722;
    const double C50526 = C50524 + C50525;
    const double C24043 = 4 * (2 * C50489 + C49846 * C50492) +
                          C49846 * (3 * C50492 + C49846 * C50551);
    const double C50572 = C50560 + C50570;
    const double C107 = (C51000 * C50668) / C49722 + (C50944 - C50983) / C49766;
    const double C108 =
        (C51001 * C50668) / C49722 + (2 * C50678 + C51000) / C49766;
    const double C109 = (C50668 * C50678) / C49726 + C51001 / C49766;
    const double C113 = (C51002 * C50694) / C50691 + (C50951 - C50986) / C50693;
    const double C114 =
        (C51003 * C50694) / C50691 + (2 * C50705 + C51002) / C50693;
    const double C115 = (C50694 * C50705) / C50708 + C51003 / C50693;
    const double C1145 =
        (C51004 * C50765) / C50691 + (C50959 - C50988) / C50693;
    const double C1146 =
        (C51005 * C50765) / C50691 + (2 * C50770 + C51004) / C50693;
    const double C1147 = (C50765 * C50770) / C50708 + C51005 / C50693;
    const double C1891 =
        (C51006 * C50793) / C50691 + (C50960 - C50991) / C50693;
    const double C1892 =
        (C51007 * C50793) / C50691 + (2 * C50798 + C51006) / C50693;
    const double C1893 = (C50793 * C50798) / C50708 + C51007 / C50693;
    const double C24699 = C24672 + C24673;
    const double C24696 = C24666 + C24667;
    const double C24695 = C24664 + C24665;
    const double C24692 = C24658 + C24659;
    const double C24878 = C24854 + C24855;
    const double C25235 = C25228 + C25229;
    const double C31299 = C31280 + C31281;
    const double C31296 = C31274 + C31275;
    const double C49782 = C49780 * ae;
    const double C8119 = C8115 * C50830;
    const double C8118 = C8114 * C118;
    const double C17290 = C17279 + C17280;
    const double C17289 = C17277 + C17278;
    const double C27897 = C17677 + C17678;
    const double C27894 = C17678 + C17677;
    const double C27896 = C17675 + C17676;
    const double C27895 = C17676 + C17675;
    const double C49824 = C49822 * ae;
    const double C184 = C174 * C50830;
    const double C10923 = C174 * C50973;
    const double C33731 = C174 * C33713;
    const double C371 = C359 * C50830;
    const double C11410 = C359 * C50973;
    const double C34212 = C359 * C33713;
    const double C8116 = C8106 + C8107;
    const double C17291 = C17281 + C17282;
    const double C380 = C368 * C50830;
    const double C11091 = C368 * C50973;
    const double C33899 = C368 * C33713;
    const double C8658 = C8302 + C8303;
    const double C17833 = C17477 + C17478;
    const double C560 = C548 * C50830;
    const double C5252 = C548 * C5231;
    const double C10918 = C548 * C50894;
    const double C11563 = C548 * C50973;
    const double C33726 = C548 * C50894;
    const double C34365 = C548 * C33713;
    const double C44465 = C548 * C51011;
    const double C2594 = C2581 + C2582;
    const double C24889 = C24876 + C24877;
    const double C7464 =
        (4 * (2 * C50462 + C49846 * C50520 + C50463 * ae) +
         C49846 *
             (3 * C50520 +
              C49846 * (2 * C50512 +
                        C49846 * (C49900 + C49846 * (C49846 * C49907 + C50116) +
                                  C49846 * C49972 * ae) +
                        C50514 * ae) +
              C50519 * ae) +
         (3 * C50463 + C49846 * C50519) * ae) /
        C49722;
    const double C569 = C557 * C50830;
    const double C5243 = C557 * C5232;
    const double C5944 = C557 * C5231;
    const double C11259 = C557 * C50973;
    const double C11246 = C557 * C50894;
    const double C34061 = C557 * C33713;
    const double C34048 = C557 * C50894;
    const double C44456 = C557 * C44445;
    const double C45085 = C557 * C51011;
    const double C974 = C968 * C50830;
    const double C5786 = C968 * C5231;
    const double C11078 = C968 * C50894;
    const double C11767 = C968 * C50973;
    const double C33886 = C968 * C50894;
    const double C34569 = C968 * C33713;
    const double C44933 = C968 * C51011;
    const double C8821 = C8496 + C8497;
    const double C14485 = C8497 + C8496;
    const double C17996 = C17671 + C17672;
    const double C28289 = C17672 + C17671;
    const double C185 = C175 * C118;
    const double C10922 = C175 * C10907;
    const double C33730 = C175 * C33715;
    const double C372 = C360 * C118;
    const double C11409 = C360 * C10907;
    const double C34211 = C360 * C33715;
    const double C8117 = C8108 + C8109;
    const double C17292 = C17283 + C17284;
    const double C379 = C367 * C118;
    const double C11090 = C367 * C10907;
    const double C33898 = C367 * C33715;
    const double C8659 = C8304 + C8305;
    const double C17834 = C17479 + C17480;
    const double C561 = C549 * C118;
    const double C5251 = C549 * C5234;
    const double C10919 = C549 * C10908;
    const double C11562 = C549 * C10907;
    const double C33727 = C549 * C33716;
    const double C34364 = C549 * C33715;
    const double C568 = C556 * C118;
    const double C5244 = C556 * C5235;
    const double C5943 = C556 * C5234;
    const double C11258 = C556 * C10907;
    const double C11247 = C556 * C10908;
    const double C34060 = C556 * C33715;
    const double C34049 = C556 * C33716;
    const double C44457 = C556 * C44448;
    const double C973 = C967 * C118;
    const double C5785 = C967 * C5234;
    const double C11079 = C967 * C10908;
    const double C11766 = C967 * C10907;
    const double C33887 = C967 * C33716;
    const double C34568 = C967 * C33715;
    const double C8822 = C8498 + C8499;
    const double C14484 = C8499 + C8498;
    const double C17997 = C17673 + C17674;
    const double C28288 = C17674 + C17673;
    const double C2787 = C2773 + C2774;
    const double C5419 = C5401 + C5402;
    const double C8507 = C8486 + C8487;
    const double C14770 = C14758 + C14759;
    const double C17682 = C17661 + C17662;
    const double C22734 = C22720 + C22721;
    const double C2777 = C2753 + C2754;
    const double C3339 = C3331 + C3332;
    const double C5422 = C5413 + C5414;
    const double C9051 = C9038 + C9039;
    const double C13856 = C13850 + C13851;
    const double C18226 = C18213 + C18214;
    const double C25060 = C25036 + C25037;
    const double C27698 = C27692 + C27693;
    const double C2590 = C2573 + C2574;
    const double C2586 = C2565 + C2566;
    const double C8311 = C8288 + C8289;
    const double C17486 = C17463 + C17464;
    const double C24881 = C24860 + C24861;
    const double C2784 = C2767 + C2768;
    const double C5420 = C5403 + C5404;
    const double C8505 = C8482 + C8483;
    const double C14768 = C14754 + C14755;
    const double C17680 = C17657 + C17658;
    const double C22732 = C22716 + C22717;
    const double C2780 = C2759 + C2760;
    const double C3336 = C3325 + C3326;
    const double C5421 = C5411 + C5412;
    const double C9049 = C9034 + C9035;
    const double C13854 = C13846 + C13847;
    const double C18224 = C18209 + C18210;
    const double C25063 = C25042 + C25043;
    const double C27696 = C27688 + C27689;
    const double C2749 =
        (C49858 + ae * C50014 + C49847 * C50018 + ae * C49846 * C50043 +
         C49846 * (ae * C50043 +
                   C49846 * (C49865 + ae * C49847 * C49900 +
                             C49847 * (ae * C49900 + C49847 * C49870)))) /
        C49724;
    const double C3319 =
        (ae * (2 * C50004 + C49847 * C50043 + (C50002 + C49970 * C50017) * ae) +
         C49846 * (2 * C50018 + ae * C50020 +
                   C49847 * (C49865 + ae * C49847 * C49900 +
                             C49847 * (ae * C49900 + C49847 * C49870)))) /
        C49724;
    const double C2549 =
        (3 * (C49934 + C49847 * C50004 + C50389 * ae) +
         C49847 * (2 * C50004 + C49847 * C50043 + C50409 * ae) +
         (2 * C50389 + C49847 * C50409) * ae) /
        C49722;
    const double C2743 =
        (C49934 + C49847 * C50004 + C50389 * ae + C50043 * C50139) / C49722;
    const double C3313 =
        (C49846 * (2 * C50004 + C49847 * C50043 + C50409 * ae)) / C49722;
    const double C40525 = C50815 * C7467;
    const double C50052 = C50051 + C50049;
    const double C6165 = C6157 + C6158;
    const double C14093 = C14078 + C14079;
    const double C22209 = C22188 + C22189;
    const double C50506 = C50504 + C50499;
    const double C5628 = C5613 + C5614;
    const double C5627 = C5611 + C5612;
    const double C5790 = C50815 * C1277;
    const double C8495 = C50866 * C1277;
    const double C17670 = C50866 * C1277;
    const double C3110 = C2340 * C1624;
    const double C9047 = C50866 * C1624;
    const double C11095 = C50815 * C1624;
    const double C18222 = C50866 * C1624;
    const double C25393 = C24647 * C1624;
    const double C2940 = C2340 * C1157;
    const double C8297 = C50866 * C1157;
    const double C17472 = C50866 * C1157;
    const double C25223 = C24647 * C1157;
    const double C5788 = C50815 * C1271;
    const double C8491 = C50866 * C1271;
    const double C17666 = C50866 * C1271;
    const double C3104 = C2340 * C1618;
    const double C9043 = C50866 * C1618;
    const double C11093 = C50815 * C1618;
    const double C18218 = C50866 * C1618;
    const double C25387 = C24647 * C1618;
    const double C5630 = C5617 + C5618;
    const double C356 = C50815 * C318;
    const double C2376 = C2340 * C318;
    const double C8663 = C50866 * C318;
    const double C17838 = C50866 * C318;
    const double C24683 = C24647 * C318;
    const double C682 = C50815 * C320;
    const double C8093 = C50866 * C320;
    const double C17268 = C50866 * C320;
    const double C546 = C117 * C508;
    const double C797 = C117 * C510;
    const double C962 = C50815 * C943;
    const double C8826 = C50866 * C943;
    const double C18001 = C50866 * C943;
    const double C963 = C117 * C944;
    const double C8829 = C8064 * C944;
    const double C18004 = C17239 * C944;
    const double C164 = C117 * C124;
    const double C355 = C117 * C301;
    const double C2375 = C2345 * C301;
    const double C8662 = C8064 * C301;
    const double C17837 = C17239 * C301;
    const double C24682 = C24652 * C301;
    const double C681 = C117 * C302;
    const double C8092 = C8064 * C302;
    const double C17267 = C17239 * C302;
    const double C544 = C117 * C490;
    const double C795 = C117 * C491;
    const double C961 = C117 * C935;
    const double C8825 = C8064 * C935;
    const double C18000 = C17239 * C935;
    const double C5945 = C5629 * C5235;
    const double C11260 = C5629 * C10908;
    const double C34062 = C5629 * C33716;
    const double C45086 = C5629 * C44448;
    const double C23644 = C17239 * C3742;
    const double C32210 = C24652 * C3742;
    const double C37654 = C2345 * C3742;
    const double C48814 = C8064 * C3742;
    const double C32714 = C24652 * C4236;
    const double C38158 = C2345 * C4236;
    const double C23640 = C17239 * C3739;
    const double C32204 = C24652 * C3739;
    const double C37648 = C2345 * C3739;
    const double C48810 = C8064 * C3739;
    const double C32708 = C24652 * C4233;
    const double C38152 = C2345 * C4233;
    const double C50552 = C50550 + C50545;
    const double C50126 = C49847 * C50125;
    const double C50223 = 3 * C50125;
    const double C50250 = ae * C50125;
    const double C50249 = C49846 * C50125;
    const double C4644 =
        (2 * (ae * C50043 + C49846 * C50093) +
         ae * (C50043 + C50125 * std::pow(C49846, 2)) +
         C49846 *
             (C50093 + ae * C49846 * C50125 +
              C49846 * (ae * C50125 +
                        C49846 * (C49870 + ae * C49847 * C49907 +
                                  C49847 * (ae * C49907 + C49847 * C49879))))) /
        C49724;
    const double C4640 =
        (2 * C49846 * C50043 + C49846 * (C50043 + C50125 * C50139)) / C49722;
    const double C24057 = C50866 * C6565;
    const double C39921 = C50815 * C6565;
    const double C49219 = C50866 * C6565;
    const double C24053 = C50866 * C6563;
    const double C39919 = C50815 * C6563;
    const double C49215 = C50866 * C6563;
    const double C50571 = C49846 * C50569;
    const double C40522 = C117 * C7461;
    const double C358 = C50815 * C331;
    const double C2382 = C2340 * C331;
    const double C8667 = C50866 * C331;
    const double C17842 = C50866 * C331;
    const double C24689 = C24647 * C331;
    const double C684 = C50815 * C332;
    const double C8097 = C50866 * C332;
    const double C17272 = C50866 * C332;
    const double C547 = C50815 * C520;
    const double C798 = C50815 * C521;
    const double C964 = C50815 * C950;
    const double C8830 = C50866 * C950;
    const double C18005 = C50866 * C950;
    const double C6166 = C6159 + C6160;
    const double C14095 = C14082 + C14083;
    const double C22211 = C22192 + C22193;
    const double C50220 = C50208 + C50218;
    const double C50267 = C50264 + C50265;
    const double C50289 = C50277 + C50287;
    const double C49924 = C49914 + C49923;
    const double C3590 =
        (4 * (2 * C50026 + ae * C50027 + C49847 * C50079) +
         ae * (3 * C50027 + C49847 * C50080) +
         C49847 * (3 * C50079 + ae * C50080 +
                   C49847 * (2 * C50075 + ae * C50076 +
                             C49847 * (C50068 + ae * C49847 * C50069 +
                                       C49847 * (ae * C50069 +
                                                 C49847 * C49854 *
                                                     std::pow(C49851, 8) *
                                                     bs[8] * C49852))))) /
        C49724;
    const double C3586 = (4 * (2 * C50022 + C49847 * C50027) +
                          C49847 * (3 * C50027 + C49847 * C50080)) /
                         C49722;
    const double C3740 =
        (2 * C50022 + C49847 * C50027 +
         C49846 * (C49846 * C50080 + C50435 * ae) + C49846 * C50435 * ae) /
        C49722;
    const double C4234 = (C49846 * (3 * C50027 + C49847 * C50080) +
                          (3 * C50413 + C49847 * C50435) * ae) /
                         C49722;
    const double C50221 = C50206 + C50219;
    const double C49963 = C49953 + C49962;
    const double C49988 = C49979 + C49987;
    const double C50060 = C49948 + C50059;
    const double C50109 = C50108 + C50104;
    const double C6564 =
        (3 * (C50026 + ae * C50159 + C49846 * C50163) +
         ae * (2 * C50159 + C49846 * C50164) +
         C49846 * (2 * C50163 + ae * C50164 +
                   C49846 * (C50075 + ae * C49846 * C50103 +
                             C49846 * (ae * C50103 +
                                       C49846 * (ae * C50069 +
                                                 C49847 * C49854 *
                                                     std::pow(C49851, 8) *
                                                     bs[8] * C49852))))) /
        C49724;
    const double C6561 = (3 * (C49999 + C50048 * C50139) +
                          C49846 * (2 * C50159 + C49846 * C50164)) /
                         C49722;
    const double C7466 =
        (4 * (2 * C50148 + ae * C50149 + C49846 * C50184) +
         ae * (3 * C50149 + C49846 * C50185) +
         C49846 * (3 * C50184 + ae * C50185 +
                   C49846 * (2 * C50178 + ae * C50180 +
                             C49846 * (C50068 + ae * C49846 * C50097 +
                                       C49846 * (ae * C50097 +
                                                 C49846 * C49854 *
                                                     std::pow(C49851, 8) *
                                                     bs[8] * C49852))))) /
        C49724;
    const double C7463 = (4 * (2 * C50144 + C49846 * C50149) +
                          C49846 * (3 * C50149 + C49846 * C50185)) /
                         C49722;
    const double C50240 = C49847 * C50238;
    const double C50252 = C50238 * C50139;
    const double C50268 = C50262 + C50266;
    const double C50290 = C50275 + C50288;
    const double C10928 = C10926 + C10916;
    const double C33736 = C33734 + C33724;
    const double C47431 = C14089 + C14088;
    const double C22213 = C22202 + C22203;
    const double C49210 = C16489 + C16488;
    const double C24048 = C22204 + C22205;
    const double C47430 = C14091 + C14090;
    const double C22212 = C22200 + C22201;
    const double C49211 = C16487 + C16486;
    const double C24049 = C22206 + C22207;
    const double C177 = C166 + C167;
    const double C125 = 5 * (3 * C50323 + C49854 * C50328) +
                        C49854 * (4 * C50328 + C49854 * C50336);
    const double C303 = 3 * C50323 + C49854 * C50328 + C50336 * C50017;
    const double C492 = 3 * C50323 + C49854 * C50328 + C50336 * C50139;
    const double C674 = C49847 * (4 * C50328 + C49854 * C50336);
    const double C788 = C49846 * (4 * C50328 + C49854 * C50336);
    const double C936 = C49846 * C49847 * C50336;
    const double C20743 = 5 * (3 * C50409 + C49847 * C50440) +
                          C49847 * (4 * C50440 + C49847 * C50526);
    const double C20845 = 3 * C50409 + C49847 * C50440 + C50526 * C50139;
    const double C21175 = C49846 * (4 * C50440 + C49847 * C50526);
    const double C40517 = 5 * (3 * C50463 + C49846 * C50519) +
                          C49846 * (4 * C50519 + C49846 * C50572);
    const double C49784 = C49782 / C49722;
    const double C8122 = C8118 + C8119;
    const double C17294 = C17290 * C50830;
    const double C17293 = C17289 * C118;
    const double C49826 = C49824 / C49722;
    const double C8120 = C8116 * C50830;
    const double C17295 = C17291 * C50830;
    const double C8668 = C8658 * C50830;
    const double C17843 = C17833 * C50830;
    const double C40524 = C117 * C7464;
    const double C8831 = C8821 * C50830;
    const double C18006 = C17996 * C50830;
    const double C190 = C184 + C185;
    const double C679 = C371 + C372;
    const double C8121 = C8117 * C118;
    const double C17296 = C17292 * C118;
    const double C8669 = C8659 * C118;
    const double C17844 = C17834 * C118;
    const double C793 = C560 + C561;
    const double C10929 = C10919 + C10927;
    const double C33737 = C33727 + C33735;
    const double C11566 = C11247 + C11561;
    const double C34368 = C34049 + C34363;
    const double C11413 = C11079 + C11408;
    const double C34215 = C33887 + C34210;
    const double C8832 = C8822 * C118;
    const double C18007 = C17997 * C118;
    const double C5425 = C5419 * C5232;
    const double C6156 = C5419 * C5231;
    const double C11765 = C5419 * C50894;
    const double C34567 = C5419 * C50894;
    const double C44614 = C5419 * C44445;
    const double C45285 = C5419 * C51011;
    const double C14075 = C8506 + C8507;
    const double C14062 = C8507 + C8506;
    const double C22194 = C17682 + C17681;
    const double C27899 = C17681 + C17682;
    const double C5428 = C5422 * C5231;
    const double C11089 = C5422 * C50894;
    const double C33897 = C5422 * C50894;
    const double C44623 = C5422 * C51011;
    const double C14762 = C9051 + C9050;
    const double C14753 = C9050 + C9051;
    const double C28550 = C18226 + C18225;
    const double C28549 = C18225 + C18226;
    const double C5426 = C5420 * C5235;
    const double C6155 = C5420 * C5234;
    const double C11764 = C5420 * C10908;
    const double C34566 = C5420 * C33716;
    const double C44615 = C5420 * C44448;
    const double C14074 = C8504 + C8505;
    const double C14063 = C8505 + C8504;
    const double C22195 = C17680 + C17679;
    const double C27898 = C17679 + C17680;
    const double C5427 = C5421 * C5234;
    const double C11088 = C5421 * C10908;
    const double C33896 = C5421 * C33716;
    const double C14763 = C9049 + C9048;
    const double C14752 = C9048 + C9049;
    const double C28551 = C18224 + C18223;
    const double C28548 = C18223 + C18224;
    const double C7066 = C50815 * C2749;
    const double C15297 = C50866 * C2749;
    const double C22715 = C50866 * C2749;
    const double C23643 = C17233 * C2749;
    const double C31283 = C24647 * C2749;
    const double C32209 = C51009 * C2749;
    const double C36727 = C2340 * C2749;
    const double C37653 = C2339 * C2749;
    const double C48813 = C50972 * C2749;
    const double C15955 = C50866 * C3319;
    const double C23637 = C50866 * C3319;
    const double C31803 = C24647 * C3319;
    const double C32713 = C51009 * C3319;
    const double C37247 = C2340 * C3319;
    const double C38157 = C2339 * C3319;
    const double C7064 = C50815 * C2743;
    const double C15293 = C50866 * C2743;
    const double C22711 = C50866 * C2743;
    const double C23639 = C17233 * C2743;
    const double C31289 = C24647 * C2743;
    const double C32203 = C51009 * C2743;
    const double C36733 = C2340 * C2743;
    const double C37647 = C2339 * C2743;
    const double C48809 = C50972 * C2743;
    const double C15951 = C50866 * C3313;
    const double C23633 = C50866 * C3313;
    const double C31797 = C24647 * C3313;
    const double C32707 = C51009 * C3313;
    const double C37241 = C2340 * C3313;
    const double C38151 = C2339 * C3313;
    const double C2750 =
        (C49976 + ae * C50022 + C49847 * C50026 + ae * C49846 * C50052 +
         C49846 *
             (ae * C50052 +
              C49846 * (C49874 + ae * C49847 * C49915 +
                        C49847 * (ae * C49915 + C49847 * C49854 * C49879)))) /
        C49724;
    const double C3320 =
        (ae * (2 * C49999 + C49847 * C50052 + (C49997 + C49980 * C50017) * ae) +
         C49846 *
             (2 * C50026 + ae * C50027 +
              C49847 * (C49874 + ae * C49847 * C49915 +
                        C49847 * (ae * C49915 + C49847 * C49854 * C49879)))) /
        C49724;
    const double C2551 =
        (3 * (C49936 + C49847 * C49999 + C50386 * ae) +
         C49847 * (2 * C49999 + C49847 * C50052 + C50413 * ae) +
         (2 * C50386 + C49847 * C50413) * ae) /
        C49722;
    const double C2745 =
        (C49936 + C49847 * C49999 + C50386 * ae + C50052 * C50139) / C49722;
    const double C3315 =
        (C49846 * (2 * C49999 + C49847 * C50052 + C50413 * ae)) / C49722;
    const double C6167 = C6165 * C5235;
    const double C45286 = C6165 * C44448;
    const double C7462 =
        (4 * (2 * C50469 + C49846 * C50506 + C50470 * ae) +
         C49846 *
             (3 * C50506 +
              C49846 * (2 * C50498 +
                        C49846 * (C49915 + C49846 * (C49846 * C50069 + C50100) +
                                  C49846 * C50098 * ae) +
                        C50500 * ae) +
              C50505 * ae) +
         (3 * C50470 + C49846 * C50505) * ae) /
        C49722;
    const double C5636 = C5628 * C5232;
    const double C44783 = C5628 * C44445;
    const double C5635 = C5627 * C5235;
    const double C44782 = C5627 * C44448;
    const double C5792 = C5789 + C5790;
    const double C8511 = C8494 + C8495;
    const double C17686 = C17669 + C17670;
    const double C3116 = C3109 + C3110;
    const double C9055 = C9046 + C9047;
    const double C11097 = C11094 + C11095;
    const double C18230 = C18221 + C18222;
    const double C25399 = C25392 + C25393;
    const double C2949 = C2939 + C2940;
    const double C8315 = C8296 + C8297;
    const double C17490 = C17471 + C17472;
    const double C25232 = C25222 + C25223;
    const double C5791 = C5787 + C5788;
    const double C8509 = C8490 + C8491;
    const double C17684 = C17665 + C17666;
    const double C3113 = C3103 + C3104;
    const double C9053 = C9042 + C9043;
    const double C11096 = C11092 + C11093;
    const double C18228 = C18217 + C18218;
    const double C25396 = C25386 + C25387;
    const double C5946 = C5630 * C5232;
    const double C11261 = C5630 * C50894;
    const double C34063 = C5630 * C50894;
    const double C45087 = C5630 * C44445;
    const double C176 = C164 + C165;
    const double C369 = C355 + C356;
    const double C2397 = C2375 + C2376;
    const double C8671 = C8662 + C8663;
    const double C17846 = C17837 + C17838;
    const double C24704 = C24682 + C24683;
    const double C685 = C681 + C682;
    const double C8111 = C8092 + C8093;
    const double C17286 = C17267 + C17268;
    const double C558 = C544 + C545;
    const double C799 = C795 + C796;
    const double C969 = C961 + C962;
    const double C8834 = C8825 + C8826;
    const double C18009 = C18000 + C18001;
    const double C24044 =
        (4 * (2 * C50491 + C49846 * C50552 + C50492 * ae) +
         C49846 *
             (3 * C50552 +
              C49846 * (2 * C50544 +
                        C49846 * (C50203 +
                                  C49846 * (C49846 * C49847 * C49918 + C50231) +
                                  C49846 * C50227 * ae) +
                        C50546 * ae) +
              C50551 * ae) +
         (3 * C50492 + C49846 * C50551) * ae) /
        C49722;
    const double C50127 = C50114 + C50126;
    const double C50253 = C50250 + C50251;
    const double C23137 = C50866 * C4644;
    const double C33123 = C24647 * C4644;
    const double C38567 = C2340 * C4644;
    const double C40253 = C50815 * C4644;
    const double C48315 = C50866 * C4644;
    const double C23133 = C50866 * C4640;
    const double C33117 = C24647 * C4640;
    const double C38561 = C2340 * C4640;
    const double C40251 = C50815 * C4640;
    const double C48311 = C50866 * C4640;
    const double C24061 = C24056 + C24057;
    const double C39923 = C39920 + C39921;
    const double C49223 = C49218 + C49219;
    const double C24059 = C24052 + C24053;
    const double C39922 = C39918 + C39919;
    const double C49221 = C49214 + C49215;
    const double C50573 = C50555 + C50571;
    const double C40526 = C40522 + C40523;
    const double C370 = C357 + C358;
    const double C2400 = C2381 + C2382;
    const double C8673 = C8666 + C8667;
    const double C17848 = C17841 + C17842;
    const double C24707 = C24688 + C24689;
    const double C686 = C683 + C684;
    const double C8113 = C8096 + C8097;
    const double C17288 = C17271 + C17272;
    const double C559 = C546 + C547;
    const double C800 = C797 + C798;
    const double C970 = C963 + C964;
    const double C8836 = C8829 + C8830;
    const double C18011 = C18004 + C18005;
    const double C6168 = C6166 * C5232;
    const double C45287 = C6166 * C44445;
    const double C333 =
        (3 * C49872 + C49854 * C49883 + ae * C49847 * C49924 +
         C49847 * (ae * C49924 +
                   C49847 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C677 =
        (ae * (4 * C49911 + C49854 * C49924) +
         C49847 * (4 * C49883 +
                   C49854 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C138 = (5 * (3 * C49902 + C49854 * C49911) +
                         C49854 * (4 * C49911 + C49854 * C49924)) /
                        C49722;
    const double C322 =
        (3 * C49902 + C49854 * C49911 + C49924 * C50017) / C49722;
    const double C511 =
        (3 * C49902 + C49854 * C49911 +
         C49846 * (C49846 * C49924 + C50336 * ae) + C49846 * C50336 * ae) /
        C49722;
    const double C675 = (C49847 * (4 * C49911 + C49854 * C49924)) / C49722;
    const double C789 = (C49846 * (4 * C49911 + C49854 * C49924) +
                         (4 * C50328 + C49854 * C50336) * ae) /
                        C49722;
    const double C945 =
        (C49846 * C49847 * C49924 + C49847 * C50336 * ae) / C49722;
    const double C20746 =
        (5 * (3 * C50093 + ae * C50094 + C49847 * C50220) +
         ae * (4 * C50094 + C49847 * C50221) +
         C49847 *
             (4 * C50220 + ae * C50221 +
              C49847 *
                  (3 * C50216 + ae * C50217 +
                   C49847 * (2 * C50210 + ae * C50212 +
                             C49847 * (C49879 + ae * C49847 * C49918 +
                                       C49847 * (ae * C49918 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C20744 = (5 * (3 * C50020 + C49847 * C50094) +
                           C49847 * (4 * C50094 + C49847 * C50221)) /
                          C49722;
    const double C20846 =
        (3 * C50020 + C49847 * C50094 +
         C49846 * (C49846 * C50221 + C50526 * ae) + C49846 * C50526 * ae) /
        C49722;
    const double C21176 = (C49846 * (4 * C50094 + C49847 * C50221) +
                           (4 * C50440 + C49847 * C50526) * ae) /
                          C49722;
    const double C522 =
        (3 * C49872 + C49854 * C49883 + ae * C49846 * C49963 +
         C49846 * (ae * C49963 +
                   C49846 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C791 =
        (ae * (4 * C49950 + C49854 * C49963) +
         C49846 * (4 * C49883 +
                   C49854 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C951 =
        (ae * (C49847 * C49963 +
               (3 * (C49970 + C49972 * C49862) +
                C49854 * (2 * C49854 * C49972 +
                          C49854 * (C49972 + C49868 * C49867 * C49862))) *
                   ae) +
         C49846 * (ae * C49924 +
                   C49847 * (3 * C49881 +
                             C49854 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C139 = (5 * (3 * C49941 + C49854 * C49950) +
                         C49854 * (4 * C49950 + C49854 * C49963)) /
                        C49722;
    const double C323 =
        (3 * C49941 + C49854 * C49950 +
         C49847 * (C49847 * C49963 + C50336 * ae) + C49847 * C50336 * ae) /
        C49722;
    const double C512 =
        (3 * C49941 + C49854 * C49950 + C49963 * C50139) / C49722;
    const double C676 = (C49847 * (4 * C49950 + C49854 * C49963) +
                         (4 * C50328 + C49854 * C50336) * ae) /
                        C49722;
    const double C790 = (C49846 * (4 * C49950 + C49854 * C49963)) / C49722;
    const double C946 = (C49846 * (C49847 * C49963 + C50336 * ae)) / C49722;
    const double C1276 =
        (ae * C49911 + C49847 * C49883 + ae * C49846 * C49988 +
         C49846 * (ae * C49988 +
                   C49846 * (ae * C49922 +
                             C49847 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C1623 =
        (ae * (C49950 + C49847 * C49988 + C49847 * C49986 * ae) +
         C49846 * (C49883 + ae * C49847 * C49922 +
                   C49847 * (ae * C49922 +
                             C49847 * (2 * C49854 * C49879 +
                                       C49854 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C1155 =
        (2 * (C49847 * C49950 + C50328 * ae) +
         C49847 * (C49950 + C49847 * C49988 + C49847 * C49986 * ae) +
         (C50328 + C49986 * C50017) * ae) /
        C49722;
    const double C1269 =
        (C49847 * C49950 + C50328 * ae + C49988 * C50139) / C49722;
    const double C1616 =
        (C49846 * (C49950 + C49847 * C49988 + C50380 * ae)) / C49722;
    const double C50061 = C50060 + C50058;
    const double C50110 = C49847 * C50109;
    const double C4642 =
        (2 * (ae * C50052 + C49846 * C50079) +
         ae * (C50052 + C50109 * std::pow(C49846, 2)) +
         C49846 * (C50079 + ae * C49846 * C50109 +
                   C49846 * (ae * C50109 +
                             C49846 * (C50068 + ae * C49847 * C50069 +
                                       C49847 * (ae * C50069 +
                                                 C49847 * C49854 *
                                                     std::pow(C49851, 8) *
                                                     bs[8] * C49852))))) /
        C49724;
    const double C4636 =
        (2 * C49846 * C50052 + C49846 * (C50052 + C50109 * C50139)) / C49722;
    const double C50241 = C50224 + C50240;
    const double C50254 = C50125 + C50252;
    const double C24046 =
        (4 * (2 * C50170 + ae * C50171 + C49846 * C50267) +
         ae * (3 * C50171 + C49846 * C50268) +
         C49846 *
             (3 * C50267 + ae * C50268 +
              C49846 *
                  (2 * C50261 + ae * C50263 +
                   C49846 * (C50210 + ae * C49846 * C50230 +
                             C49846 * (ae * C50230 +
                                       C49846 * (ae * C49918 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C24045 = (4 * (2 * C50166 + C49846 * C50171) +
                           C49846 * (3 * C50171 + C49846 * C50268)) /
                          C49722;
    const double C40520 =
        (5 * (3 * C50198 + ae * C50199 + C49846 * C50289) +
         ae * (4 * C50199 + C49846 * C50290) +
         C49846 *
             (4 * C50289 + ae * C50290 +
              C49846 *
                  (3 * C50285 + ae * C50286 +
                   C49846 * (2 * C50279 + ae * C50281 +
                             C49846 * (C49879 + ae * C49846 * C49957 +
                                       C49846 * (ae * C49957 +
                                                 C49846 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C40519 = (5 * (3 * C50142 + C49846 * C50199) +
                           C49846 * (4 * C50199 + C49846 * C50290)) /
                          C49722;
    const double C10930 = C10928 + C10917;
    const double C33738 = C33736 + C33725;
    const double C187 = C177 * C50830;
    const double C49785 = C49784 - C49769;
    const double C17297 = C17293 + C17294;
    const double C49827 = C49826 - C49811;
    const double C40527 = C40524 + C40525;
    const double C8123 = C8120 + C8121;
    const double C17298 = C17295 + C17296;
    const double C8674 = C8668 + C8669;
    const double C17849 = C17843 + C17844;
    const double C10931 = C10918 + C10929;
    const double C33739 = C33726 + C33737;
    const double C11567 = C11246 + C11566;
    const double C34369 = C34048 + C34368;
    const double C11414 = C11078 + C11413;
    const double C34216 = C33886 + C34215;
    const double C8837 = C8831 + C8832;
    const double C18012 = C18006 + C18007;
    const double C7070 = C7065 + C7066;
    const double C15301 = C15296 + C15297;
    const double C22731 = C22714 + C22715;
    const double C23652 = C23642 + C23643;
    const double C31300 = C31282 + C31283;
    const double C36744 = C36726 + C36727;
    const double C37660 = C37652 + C37653;
    const double C48818 = C48812 + C48813;
    const double C15959 = C15954 + C15955;
    const double C23649 = C23636 + C23637;
    const double C31809 = C31802 + C31803;
    const double C37253 = C37246 + C37247;
    const double C38164 = C38156 + C38157;
    const double C7069 = C7063 + C7064;
    const double C15299 = C15292 + C15293;
    const double C22729 = C22710 + C22711;
    const double C23650 = C23638 + C23639;
    const double C31303 = C31288 + C31289;
    const double C36747 = C36732 + C36733;
    const double C37657 = C37646 + C37647;
    const double C48816 = C48808 + C48809;
    const double C15957 = C15950 + C15951;
    const double C23647 = C23632 + C23633;
    const double C31806 = C31796 + C31797;
    const double C37250 = C37240 + C37241;
    const double C38161 = C38150 + C38151;
    const double C2776 = C2340 * C2750;
    const double C5418 = C50815 * C2750;
    const double C14761 = C50866 * C2750;
    const double C22723 = C50866 * C2750;
    const double C25059 = C24647 * C2750;
    const double C3334 = C2340 * C3320;
    const double C13853 = C50866 * C3320;
    const double C25605 = C24647 * C3320;
    const double C27695 = C50866 * C3320;
    const double C2576 = C2340 * C2551;
    const double C24871 = C24647 * C2551;
    const double C2770 = C2340 * C2745;
    const double C5416 = C50815 * C2745;
    const double C14757 = C50866 * C2745;
    const double C22719 = C50866 * C2745;
    const double C25053 = C24647 * C2745;
    const double C3328 = C2340 * C3315;
    const double C13849 = C50866 * C3315;
    const double C25599 = C24647 * C3315;
    const double C27691 = C50866 * C3315;
    const double C5794 = C5792 * C5232;
    const double C11769 = C5792 * C50894;
    const double C34571 = C5792 * C50894;
    const double C44935 = C5792 * C44445;
    const double C11099 = C11097 * C50894;
    const double C33901 = C11097 * C50894;
    const double C5793 = C5791 * C5235;
    const double C11768 = C5791 * C10908;
    const double C34570 = C5791 * C33716;
    const double C44934 = C5791 * C44448;
    const double C11098 = C11096 * C10908;
    const double C33900 = C11096 * C33716;
    const double C186 = C176 * C118;
    const double C381 = C369 * C118;
    const double C687 = C685 * C118;
    const double C570 = C558 * C118;
    const double C5253 = C558 * C5235;
    const double C11564 = C558 * C10908;
    const double C34366 = C558 * C33716;
    const double C44466 = C558 * C44448;
    const double C801 = C799 * C118;
    const double C10924 = C799 * C10908;
    const double C33732 = C799 * C33716;
    const double C975 = C969 * C118;
    const double C11411 = C969 * C10908;
    const double C34213 = C969 * C33716;
    const double C50128 = C50127 + C50123;
    const double C23143 = C23136 + C23137;
    const double C33129 = C33122 + C33123;
    const double C38573 = C38566 + C38567;
    const double C40255 = C40252 + C40253;
    const double C48321 = C48314 + C48315;
    const double C23141 = C23132 + C23133;
    const double C33126 = C33116 + C33117;
    const double C38570 = C38560 + C38561;
    const double C40254 = C40250 + C40251;
    const double C48319 = C48310 + C48311;
    const double C50574 = C50573 + C50558;
    const double C382 = C370 * C50830;
    const double C688 = C686 * C50830;
    const double C571 = C559 * C50830;
    const double C5254 = C559 * C5232;
    const double C11565 = C559 * C50894;
    const double C34367 = C559 * C50894;
    const double C44467 = C559 * C44445;
    const double C802 = C800 * C50830;
    const double C10925 = C800 * C50894;
    const double C33733 = C800 * C50894;
    const double C976 = C970 * C50830;
    const double C11412 = C970 * C50894;
    const double C34214 = C970 * C50894;
    const double C2751 =
        (C49872 + ae * C50029 + C49847 * C50033 + ae * C49846 * C50061 +
         C49846 * (ae * C50061 +
                   C49846 * (C49881 + ae * C49847 * C49920 +
                             C49847 * (ae * C49920 +
                                       C49847 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C3321 =
        (ae * (2 * C49994 + C49847 * C50061 + (C49992 + C49984 * C50017) * ae) +
         C49846 * (2 * C50033 + ae * C50034 +
                   C49847 * (C49881 + ae * C49847 * C49920 +
                             C49847 * (ae * C49920 +
                                       C49847 * (C49879 + std::pow(C49851, 8) *
                                                              bs[8] * C49852 *
                                                              C49862))))) /
        C49724;
    const double C2554 =
        (3 * (C49941 + C49847 * C49994 + C50383 * ae) +
         C49847 * (2 * C49994 + C49847 * C50061 + C50418 * ae) +
         (2 * C50383 + C49847 * C50418) * ae) /
        C49722;
    const double C2748 =
        (C49941 + C49847 * C49994 + C50383 * ae + C50061 * C50139) / C49722;
    const double C3318 =
        (C49846 * (2 * C49994 + C49847 * C50061 + C50418 * ae)) / C49722;
    const double C50111 = C50096 + C50110;
    const double C50242 = C50241 + C50234;
    const double C23128 =
        (3 * (C50093 + ae * C50249 + C49846 * C50253) +
         ae * (2 * C50249 + C49846 * C50254) +
         C49846 *
             (2 * C50253 + ae * C50254 +
              C49846 *
                  (C50216 + ae * C49846 * C50238 +
                   C49846 * (ae * C50238 +
                             C49846 * (C49879 + ae * C49847 * C49918 +
                                       C49847 * (ae * C49918 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C23127 = (3 * (C50043 + C50125 * C50139) +
                           C49846 * (2 * C50249 + C49846 * C50254)) /
                          C49722;
    const double C20053 =
        ((((0 - (C49720 * C49765) / C49722) * ae) / C49722 - (0 * be) / C49726 +
          C49721 / C49722) /
             C49766 -
         ((C49720 * C49783 + 0) * be) / C49722) /
            C49766 +
        ((C49720 * (C49783 / C49766 -
                    ((C49720 * C49785 + C50972) * be) / C49722 + C49778) +
          C51008) *
         ae) /
            C49722 +
        C49785 / C49766 - ((C49720 * C49778 + C50866) * be) / C49722;
    const double C20054 =
        (C49783 / C49766 - ((C49720 * C49785 + C50972) * be) / C49722 +
         C49778) /
            C49766 +
        ((C49720 *
              (C49785 / C49766 - ((C49720 * C49778 + C50866) * be) / C49722) +
          C51009) *
         ae) /
            C49722 +
        2 * (C49778 / C49766 - (0 * be) / C49722);
    const double C20055 =
        (C49785 / C49766 - ((C49720 * C49778 + C50866) * be) / C49722) /
            C49766 +
        ((C49720 * (C49778 / C49766 - (0 * be) / C49722) + C24647) * ae) /
            C49722;
    const double C24650 =
        C49783 / C49766 - ((C49720 * C49785 + C50972) * be) / C49722 + C49778;
    const double C24651 =
        C49785 / C49766 - ((C49720 * C49778 + C50866) * be) / C49722;
    const double C39129 =
        ((((0 - (C49739 * C49808) / C49722) * ae) / C49722 - (0 * be) / C49726 +
          C49740 / C49722) /
             C49766 -
         ((C49739 * C49825 + 0) * be) / C49722) /
            C49766 +
        ((C49739 * (C49825 / C49766 -
                    ((C49739 * C49827 + C50973) * be) / C49722 + C49820) +
          C51010) *
         ae) /
            C49722 +
        C49827 / C49766 - ((C49739 * C49820 + C50894) * be) / C49722;
    const double C39130 =
        (C49825 / C49766 - ((C49739 * C49827 + C50973) * be) / C49722 +
         C49820) /
            C49766 +
        ((C49739 *
              (C49827 / C49766 - ((C49739 * C49820 + C50894) * be) / C49722) +
          C51011) *
         ae) /
            C49722 +
        2 * (C49820 / C49766 - (0 * be) / C49722);
    const double C39131 =
        (C49827 / C49766 - ((C49739 * C49820 + C50894) * be) / C49722) /
            C49766 +
        ((C49739 * (C49820 / C49766 - (0 * be) / C49722) + C44445) * ae) /
            C49722;
    const double C44446 =
        C49825 / C49766 - ((C49739 * C49827 + C50973) * be) / C49722 + C49820;
    const double C44447 =
        C49827 / C49766 - ((C49739 * C49820 + C50894) * be) / C49722;
    const double C48316 = C15301 + C15300;
    const double C23138 = C22731 + C22730;
    const double C48317 = C15299 + C15298;
    const double C23139 = C22729 + C22728;
    const double C2788 = C2775 + C2776;
    const double C5424 = C5417 + C5418;
    const double C14771 = C14760 + C14761;
    const double C22735 = C22722 + C22723;
    const double C25071 = C25058 + C25059;
    const double C3340 = C3333 + C3334;
    const double C13857 = C13852 + C13853;
    const double C25611 = C25604 + C25605;
    const double C27699 = C27694 + C27695;
    const double C2591 = C2575 + C2576;
    const double C24886 = C24870 + C24871;
    const double C2785 = C2769 + C2770;
    const double C5423 = C5415 + C5416;
    const double C14769 = C14756 + C14757;
    const double C22733 = C22718 + C22719;
    const double C25068 = C25052 + C25053;
    const double C3337 = C3327 + C3328;
    const double C13855 = C13848 + C13849;
    const double C25608 = C25598 + C25599;
    const double C27697 = C27690 + C27691;
    const double C3745 =
        (2 * C50018 + ae * C50020 + C49847 * C50093 + ae * C49846 * C50128 +
         C49846 *
             (ae * C50128 +
              C49846 * (2 * C50087 + ae * C50089 +
                        C49847 * (C49870 + ae * C49847 * C49907 +
                                  C49847 * (ae * C49907 + C49847 * C49879))))) /
        C49724;
    const double C4239 =
        (ae * (3 * C50043 + C49847 * C50128 +
               (2 * C50038 + C49847 * C50121) * ae) +
         C49846 *
             (3 * C50093 + ae * C50094 +
              C49847 * (2 * C50087 + ae * C50089 +
                        C49847 * (C49870 + ae * C49847 * C49907 +
                                  C49847 * (ae * C49907 + C49847 * C49879))))) /
        C49724;
    const double C3589 =
        (4 * (2 * C50004 + C49847 * C50043 + C50409 * ae) +
         C49847 * (3 * C50043 + C49847 * C50128 + C50440 * ae) +
         (3 * C50409 + C49847 * C50440) * ae) /
        C49722;
    const double C3743 =
        (2 * C50004 + C49847 * C50043 + C50409 * ae + C50128 * C50139) / C49722;
    const double C4237 =
        (C49846 * (3 * C50043 + C49847 * C50128 + C50440 * ae)) / C49722;
    const double C40518 =
        (5 * (3 * C50520 + C49846 * C50574 + C50519 * ae) +
         C49846 *
             (4 * C50574 +
              C49846 *
                  (3 * C50569 +
                   C49846 *
                       (2 * C50561 +
                        C49846 * (C49907 + C49846 * (C49846 * C49918 + C50226) +
                                  C49846 * C49981 * ae) +
                        C50563 * ae) +
                   C50568 * ae) +
              C50572 * ae) +
         (4 * C50519 + C49846 * C50572) * ae) /
        C49722;
    const double C50112 = C50111 + C50107;
    const double C50243 = C49847 * C50242;
    const double C21444 =
        (2 * (ae * C50128 + C49846 * C50220) + ae * (C50128 + C50242 * C50139) +
         C49846 *
             (C50220 + ae * C49846 * C50242 +
              C49846 *
                  (ae * C50242 +
                   C49846 * (2 * C50210 + ae * C50212 +
                             C49847 * (C49879 + ae * C49847 * C49918 +
                                       C49847 * (ae * C49918 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C21443 =
        (2 * C49846 * C50128 + C49846 * (C50128 + C50242 * C50139)) / C49722;
    const double C24684 = C24650 * C133;
    const double C24678 = C24650 * C122;
    const double C24676 = C24650 * C121;
    const double C24670 = C24650 * C131;
    const double C24660 = C24650 * C129;
    const double C24654 = C24650 * C120;
    const double C24872 = C24650 * C315;
    const double C24866 = C24650 * C299;
    const double C24864 = C24650 * C296;
    const double C24858 = C24650 * C308;
    const double C25054 = C24650 * C504;
    const double C25048 = C24650 * C488;
    const double C25046 = C24650 * C485;
    const double C25040 = C24650 * C497;
    const double C25224 = C24650 * C306;
    const double C25218 = C24650 * C295;
    const double C25388 = C24650 * C495;
    const double C25382 = C24650 * C484;
    const double C25600 = C24650 * C940;
    const double C25594 = C24650 * C933;
    const double C31292 = C24650 * C487;
    const double C31286 = C24650 * C502;
    const double C31276 = C24650 * C499;
    const double C31270 = C24650 * C486;
    const double C31798 = C24650 * C938;
    const double C31792 = C24650 * C932;
    const double C32206 = C24650 * C1274;
    const double C32200 = C24650 * C1267;
    const double C32710 = C24650 * C1621;
    const double C32704 = C24650 * C1614;
    const double C33118 = C24650 * C1905;
    const double C33112 = C24650 * C1898;
    const double C24686 = C24651 * C304;
    const double C24680 = C24651 * C294;
    const double C24674 = C24651 * C295;
    const double C24668 = C24651 * C306;
    const double C24662 = C24651 * C308;
    const double C24656 = C24651 * C296;
    const double C24874 = C24651 * C1158;
    const double C24868 = C24651 * C1152;
    const double C24862 = C24651 * C299;
    const double C24856 = C24651 * C315;
    const double C25056 = C24651 * C1272;
    const double C25050 = C24651 * C1266;
    const double C25044 = C24651 * C933;
    const double C25038 = C24651 * C940;
    const double C25226 = C24651 * C317;
    const double C25220 = C24651 * C300;
    const double C25390 = C24651 * C942;
    const double C25384 = C24651 * C934;
    const double C25602 = C24651 * C1619;
    const double C25596 = C24651 * C1613;
    const double C31290 = C24651 * C1267;
    const double C31284 = C24651 * C1274;
    const double C31278 = C24651 * C938;
    const double C31272 = C24651 * C932;
    const double C31800 = C24651 * C1621;
    const double C31794 = C24651 * C1614;
    const double C32208 = C24651 * C2744;
    const double C32202 = C24651 * C2740;
    const double C32712 = C24651 * C3314;
    const double C32706 = C24651 * C3310;
    const double C33120 = C24651 * C4639;
    const double C33114 = C24651 * C4633;
    const double C44462 = C172 * C44446;
    const double C44461 = C170 * C44446;
    const double C44450 = C168 * C44446;
    const double C44620 = C365 * C44446;
    const double C44619 = C364 * C44446;
    const double C44778 = C554 * C44446;
    const double C44777 = C553 * C44446;
    const double C44930 = C362 * C44446;
    const double C45082 = C551 * C44446;
    const double C45282 = C965 * C44446;
    const double C44464 = C549 * C44447;
    const double C44459 = C551 * C44447;
    const double C44452 = C553 * C44447;
    const double C44622 = C5421 * C44447;
    const double C44617 = C965 * C44447;
    const double C44780 = C5624 * C44447;
    const double C44775 = C554 * C44447;
    const double C44932 = C967 * C44447;
    const double C45084 = C556 * C44447;
    const double C45284 = C5420 * C44447;
    const double C5430 = C5424 * C5232;
    const double C44625 = C5424 * C44445;
    const double C5429 = C5423 * C5235;
    const double C44624 = C5423 * C44448;
    const double C23645 = C50866 * C3745;
    const double C32211 = C24647 * C3745;
    const double C37655 = C2340 * C3745;
    const double C48815 = C50866 * C3745;
    const double C32715 = C24647 * C4239;
    const double C38159 = C2340 * C4239;
    const double C23641 = C50866 * C3743;
    const double C32205 = C24647 * C3743;
    const double C37649 = C2340 * C3743;
    const double C48811 = C50866 * C3743;
    const double C32709 = C24647 * C4237;
    const double C38153 = C2340 * C4237;
    const double C3744 =
        (2 * C50026 + ae * C50027 + C49847 * C50079 + ae * C49846 * C50112 +
         C49846 * (ae * C50112 +
                   C49846 * (2 * C50075 + ae * C50076 +
                             C49847 * (C50068 + ae * C49847 * C50069 +
                                       C49847 * (ae * C50069 +
                                                 C49847 * C49854 *
                                                     std::pow(C49851, 8) *
                                                     bs[8] * C49852))))) /
        C49724;
    const double C4238 =
        (ae * (3 * C50052 + C49847 * C50112 +
               (2 * C50047 + C49847 * C50105) * ae) +
         C49846 * (3 * C50079 + ae * C50080 +
                   C49847 * (2 * C50075 + ae * C50076 +
                             C49847 * (C50068 + ae * C49847 * C50069 +
                                       C49847 * (ae * C50069 +
                                                 C49847 * C49854 *
                                                     std::pow(C49851, 8) *
                                                     bs[8] * C49852))))) /
        C49724;
    const double C3587 =
        (4 * (2 * C49999 + C49847 * C50052 + C50413 * ae) +
         C49847 * (3 * C50052 + C49847 * C50112 + C50435 * ae) +
         (3 * C50413 + C49847 * C50435) * ae) /
        C49722;
    const double C3741 =
        (2 * C49999 + C49847 * C50052 + C50413 * ae + C50112 * C50139) / C49722;
    const double C4235 =
        (C49846 * (3 * C50052 + C49847 * C50112 + C50435 * ae)) / C49722;
    const double C50244 = C50223 + C50243;
    const double C24705 = C24684 + C24685;
    const double C24702 = C24678 + C24679;
    const double C24701 = C24676 + C24677;
    const double C24698 = C24670 + C24671;
    const double C24693 = C24660 + C24661;
    const double C24690 = C24654 + C24655;
    const double C24887 = C24872 + C24873;
    const double C24884 = C24866 + C24867;
    const double C24883 = C24864 + C24865;
    const double C24880 = C24858 + C24859;
    const double C25069 = C25054 + C25055;
    const double C25066 = C25048 + C25049;
    const double C25065 = C25046 + C25047;
    const double C25062 = C25040 + C25041;
    const double C25233 = C25224 + C25225;
    const double C25230 = C25218 + C25219;
    const double C25397 = C25388 + C25389;
    const double C25394 = C25382 + C25383;
    const double C25609 = C25600 + C25601;
    const double C25606 = C25594 + C25595;
    const double C31305 = C31292 + C31293;
    const double C31302 = C31286 + C31287;
    const double C31297 = C31276 + C31277;
    const double C31294 = C31270 + C31271;
    const double C31807 = C31798 + C31799;
    const double C31804 = C31792 + C31793;
    const double C32215 = C32206 + C32207;
    const double C32212 = C32200 + C32201;
    const double C32719 = C32710 + C32711;
    const double C32716 = C32704 + C32705;
    const double C33127 = C33118 + C33119;
    const double C33124 = C33112 + C33113;
    const double C24706 = C24686 + C24687;
    const double C24703 = C24680 + C24681;
    const double C24700 = C24674 + C24675;
    const double C24697 = C24668 + C24669;
    const double C24694 = C24662 + C24663;
    const double C24691 = C24656 + C24657;
    const double C24888 = C24874 + C24875;
    const double C24885 = C24868 + C24869;
    const double C24882 = C24862 + C24863;
    const double C24879 = C24856 + C24857;
    const double C25070 = C25056 + C25057;
    const double C25067 = C25050 + C25051;
    const double C25064 = C25044 + C25045;
    const double C25061 = C25038 + C25039;
    const double C25234 = C25226 + C25227;
    const double C25231 = C25220 + C25221;
    const double C25398 = C25390 + C25391;
    const double C25395 = C25384 + C25385;
    const double C25610 = C25602 + C25603;
    const double C25607 = C25596 + C25597;
    const double C31304 = C31290 + C31291;
    const double C31301 = C31284 + C31285;
    const double C31298 = C31278 + C31279;
    const double C31295 = C31272 + C31273;
    const double C31808 = C31800 + C31801;
    const double C31805 = C31794 + C31795;
    const double C32216 = C32208 + C32209;
    const double C32213 = C32202 + C32203;
    const double C32720 = C32712 + C32713;
    const double C32717 = C32706 + C32707;
    const double C33128 = C33120 + C33121;
    const double C33125 = C33114 + C33115;
    const double C23653 = C23644 + C23645;
    const double C32217 = C32210 + C32211;
    const double C37661 = C37654 + C37655;
    const double C48819 = C48814 + C48815;
    const double C32721 = C32714 + C32715;
    const double C38165 = C38158 + C38159;
    const double C23651 = C23640 + C23641;
    const double C32214 = C32204 + C32205;
    const double C37658 = C37648 + C37649;
    const double C48817 = C48810 + C48811;
    const double C32718 = C32708 + C32709;
    const double C38162 = C38152 + C38153;
    const double C50245 = C50244 + C50239;
    const double C20848 =
        (3 * C50093 + ae * C50094 + C49847 * C50220 + ae * C49846 * C50245 +
         C49846 *
             (ae * C50245 +
              C49846 *
                  (3 * C50216 + ae * C50217 +
                   C49847 * (2 * C50210 + ae * C50212 +
                             C49847 * (C49879 + ae * C49847 * C49918 +
                                       C49847 * (ae * C49918 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C21178 =
        (ae * (4 * C50128 + C49847 * C50245 +
               (3 * C50121 + C49847 * C50237) * ae) +
         C49846 *
             (4 * C50220 + ae * C50221 +
              C49847 *
                  (3 * C50216 + ae * C50217 +
                   C49847 * (2 * C50210 + ae * C50212 +
                             C49847 * (C49879 + ae * C49847 * C49918 +
                                       C49847 * (ae * C49918 +
                                                 C49847 * std::pow(C49851, 8) *
                                                     bs[8] * C49852)))))) /
        C49724;
    const double C20745 =
        (5 * (3 * C50043 + C49847 * C50128 + C50440 * ae) +
         C49847 * (4 * C50128 + C49847 * C50245 + C50526 * ae) +
         (4 * C50440 + C49847 * C50526) * ae) /
        C49722;
    const double C20847 =
        (3 * C50043 + C49847 * C50128 + C50440 * ae + C50245 * C50139) / C49722;
    const double C21177 =
        (C49846 * (4 * C50128 + C49847 * C50245 + C50526 * ae)) / C49722;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C50734 * C50959 -
           (C8674 * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C50734 * C50770) *
              C51002 +
          ((((C8309 + C8308) * C118 + (C8307 + C8306) * C50830) * C51000 +
            ((C8305 + C8304) * C118 + (C8303 + C8302) * C50830) * C51001 +
            ((C8670 + C8671) * C118 + (C8672 + C8673) * C50830) * C8062) *
               C50734 * C50770 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C50734 * C50959) *
              C51003 +
          ((C8122 * C51000 +
            ((C8109 + C8108) * C118 + (C8107 + C8106) * C50830) * C51001 +
            ((C8110 + C8111) * C118 + (C8112 + C8113) * C50830) * C8062) *
               C50734 * C50959 -
           (((C8064 * C322 + C50866 * C333 + C8063 * C321 + C50972 * C332) *
                 C50830 +
             (C8064 * C303 + C50866 * C323 + C8063 * C302 + C50972 * C320) *
                 C118) *
                C8062 +
            ((C8673 + C8672) * C50830 + (C8671 + C8670) * C118) * C51001 +
            C8674 * C51000) *
               C50734 * C50770) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                  C118 +
              (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                  C50830) *
                 C51000 +
             ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
             C8122 * C8062) *
                C50960 -
            (C8837 * C8062 +
             ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
             ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                  C50830 +
              (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                  C118) *
                 C51000) *
                C50798) *
               C50959 +
           ((((C8063 * C932 + C50972 * C937 + C8064 * C1614 + C50866 * C1622) *
                  C118 +
              (C8063 * C938 + C50972 * C947 + C8064 * C1621 + C50866 * C1626) *
                  C50830) *
                 C51000 +
             ((C9048 + C9049) * C118 + (C9050 + C9051) * C50830) * C51001 +
             ((C9052 + C9053) * C118 + (C9054 + C9055) * C50830) * C8062) *
                C50798 -
            (C8674 * C8062 +
             ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
             ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                  C50830 +
              (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                  C118) *
                 C51000) *
                C50960) *
               C50770) *
              C292 +
          (((((C8503 + C8502) * C118 + (C8501 + C8500) * C50830) * C51000 +
             ((C8499 + C8498) * C118 + (C8497 + C8496) * C50830) * C51001 +
             ((C8833 + C8834) * C118 + (C8835 + C8836) * C50830) * C8062) *
                C50798 -
            (C8123 * C8062 +
             ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
             ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
                C50960) *
               C50959 +
           ((((C8309 + C8308) * C118 + (C8307 + C8306) * C50830) * C51000 +
             ((C8305 + C8304) * C118 + (C8303 + C8302) * C50830) * C51001 +
             ((C8670 + C8671) * C118 + (C8672 + C8673) * C50830) * C8062) *
                C50960 -
            (((C8064 * C1615 + C50866 * C1623 + C8063 * C944 + C50972 * C950) *
                  C50830 +
              (C8064 * C1611 + C50866 * C1616 + C8063 * C935 + C50972 * C943) *
                  C118) *
                 C8062 +
             ((C9055 + C9054) * C50830 + (C9053 + C9052) * C118) * C51001 +
             ((C9051 + C9050) * C50830 + (C9049 + C9048) * C118) * C51000) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C50734 * C289 -
           (((C8302 + C8303) * C50830 + (C8304 + C8305) * C118) * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C50734 * C290 +
           (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C118 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50830) *
                C51000 +
            ((C8310 + C8311) * C118 + (C8312 + C8313) * C50830) * C51001 +
            ((C8314 + C8315) * C118 + (C8316 + C8317) * C50830) * C8062) *
               C50734 * C291) *
              C292 +
          ((((C8309 + C8308) * C118 + (C8307 + C8306) * C50830) * C51000 +
            ((C8305 + C8304) * C118 + (C8303 + C8302) * C50830) * C51001 +
            ((C8063 * C294 + C50972 * C305 + C8064 * C301 + C50866 * C318) *
                 C118 +
             (C8063 * C304 + C50972 * C324 + C8064 * C319 + C50866 * C331) *
                 C50830) *
                C8062) *
               C50734 * C290 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C50734 * C289 -
           (((C8064 * C1154 + C50866 * C1162 + C8063 * C319 + C50972 * C331) *
                 C50830 +
             (C8064 * C1150 + C50866 * C1155 + C8063 * C301 + C50972 * C318) *
                 C118) *
                C8062 +
            ((C8317 + C8316) * C50830 + (C8315 + C8314) * C118) * C51001 +
            ((C8313 + C8312) * C50830 + (C8311 + C8310) * C118) * C51000) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C118 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50830) *
               C51000 +
           ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
           C8122 * C8062) *
              C50734 * C50718 * C113 -
          (C8123 * C8062 +
           ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
           ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
              C50734 * C50718 * C114 +
          (C8122 * C51000 +
           ((C8109 + C8108) * C118 + (C8107 + C8106) * C50830) * C51001 +
           ((C8110 + C8111) * C118 + (C8112 + C8113) * C50830) * C8062) *
              C50734 * C50718 * C115 -
          (((C8064 * C675 + C50866 * C677 + C8063 * C137 + C50972 * C145) *
                C50830 +
            (C8064 * C674 + C50866 * C676 + C8063 * C124 + C50972 * C136) *
                C118) *
               C8062 +
           ((C8113 + C8112) * C50830 + (C8111 + C8110) * C118) * C51001 +
           C8123 * C51000) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C480 -
           (((C8496 + C8497) * C50830 + (C8498 + C8499) * C118) * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C481 +
           (((C8063 * C487 + C50972 * C501 + C8064 * C1267 + C50866 * C1275) *
                 C118 +
             (C8063 * C502 + C50972 * C517 + C8064 * C1274 + C50866 * C1279) *
                 C50830) *
                C51000 +
            ((C8504 + C8505) * C118 + (C8506 + C8507) * C50830) * C51001 +
            ((C8508 + C8509) * C118 + (C8510 + C8511) * C50830) * C8062) *
               C482) *
              C50718 * C292 +
          ((((C8503 + C8502) * C118 + (C8501 + C8500) * C50830) * C51000 +
            ((C8499 + C8498) * C118 + (C8497 + C8496) * C50830) * C51001 +
            ((C8063 * C483 + C50972 * C494 + C8064 * C935 + C50866 * C943) *
                 C118 +
             (C8063 * C493 + C50972 * C513 + C8064 * C944 + C50866 * C950) *
                 C50830) *
                C8062) *
               C481 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C480 -
           (((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
                 C50830 +
             (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
                 C118) *
                C8062 +
            ((C8511 + C8510) * C50830 + (C8509 + C8508) * C118) * C51001 +
            ((C8507 + C8506) * C50830 + (C8505 + C8504) * C118) * C51000) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C50960 -
           (C8837 * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C50798) *
              C50718 * C51002 +
          ((((C8503 + C8502) * C118 + (C8501 + C8500) * C50830) * C51000 +
            ((C8499 + C8498) * C118 + (C8497 + C8496) * C50830) * C51001 +
            ((C8833 + C8834) * C118 + (C8835 + C8836) * C50830) * C8062) *
               C50798 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C50960) *
              C50718 * C51003 +
          ((C8122 * C51000 +
            ((C8109 + C8108) * C118 + (C8107 + C8106) * C50830) * C51001 +
            ((C8110 + C8111) * C118 + (C8112 + C8113) * C50830) * C8062) *
               C50960 -
           (((C8064 * C945 + C50866 * C951 + C8063 * C510 + C50972 * C521) *
                 C50830 +
             (C8064 * C936 + C50866 * C946 + C8063 * C491 + C50972 * C509) *
                 C118) *
                C8062 +
            ((C8836 + C8835) * C50830 + (C8834 + C8833) * C118) * C51001 +
            C8837 * C51000) *
               C50798) *
              C50718 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C118 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50830) *
               C51000 +
           ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
           C8122 * C8062) *
              C50734 * C50718 * C113 -
          (C8123 * C8062 +
           ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
           ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
              C50734 * C50718 * C114 +
          (C8122 * C51000 +
           ((C8109 + C8108) * C118 + (C8107 + C8106) * C50830) * C51001 +
           ((C8110 + C8111) * C118 + (C8112 + C8113) * C50830) * C8062) *
              C50734 * C50718 * C115 -
          (((C8064 * C675 + C50866 * C677 + C8063 * C137 + C50972 * C145) *
                C50830 +
            (C8064 * C674 + C50866 * C676 + C8063 * C124 + C50972 * C136) *
                C118) *
               C8062 +
           ((C8113 + C8112) * C50830 + (C8111 + C8110) * C118) * C51001 +
           C8123 * C51000) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C50734 * C289 -
           (((C8302 + C8303) * C50830 + (C8304 + C8305) * C118) * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C50734 * C290 +
           (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C118 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50830) *
                C51000 +
            ((C8310 + C8311) * C118 + (C8312 + C8313) * C50830) * C51001 +
            ((C8314 + C8315) * C118 + (C8316 + C8317) * C50830) * C8062) *
               C50734 * C291) *
              C292 +
          ((((C8309 + C8308) * C118 + (C8307 + C8306) * C50830) * C51000 +
            ((C8305 + C8304) * C118 + (C8303 + C8302) * C50830) * C51001 +
            ((C8063 * C294 + C50972 * C305 + C8064 * C301 + C50866 * C318) *
                 C118 +
             (C8063 * C304 + C50972 * C324 + C8064 * C319 + C50866 * C331) *
                 C50830) *
                C8062) *
               C50734 * C290 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C50734 * C289 -
           (((C8064 * C1154 + C50866 * C1162 + C8063 * C319 + C50972 * C331) *
                 C50830 +
             (C8064 * C1150 + C50866 * C1155 + C8063 * C301 + C50972 * C318) *
                 C118) *
                C8062 +
            ((C8317 + C8316) * C50830 + (C8315 + C8314) * C118) * C51001 +
            ((C8313 + C8312) * C50830 + (C8311 + C8310) * C118) * C51000) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C50734 * C51004 -
           (C8674 * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C50734 * C51005 +
           (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C118 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50830) *
                C51000 +
            ((C8310 + C8311) * C118 + (C8312 + C8313) * C50830) * C51001 +
            ((C8314 + C8315) * C118 + (C8316 + C8317) * C50830) * C8062) *
               C50734 * C1380) *
              C50951 +
          ((((C8309 + C8308) * C118 + (C8307 + C8306) * C50830) * C51000 +
            ((C8305 + C8304) * C118 + (C8303 + C8302) * C50830) * C51001 +
            ((C8670 + C8671) * C118 + (C8672 + C8673) * C50830) * C8062) *
               C50734 * C51005 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C50734 * C51004 -
           (((C8064 * C1154 + C50866 * C1162 + C8063 * C319 + C50972 * C331) *
                 C50830 +
             (C8064 * C1150 + C50866 * C1155 + C8063 * C301 + C50972 * C318) *
                 C118) *
                C8062 +
            ((C8317 + C8316) * C50830 + (C8315 + C8314) * C118) * C51001 +
            ((C8313 + C8312) * C50830 + (C8311 + C8310) * C118) * C51000) *
               C50734 * C1380) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C50960 -
           (C8837 * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C50798) *
              C51004 +
          ((((C8063 * C932 + C50972 * C937 + C8064 * C1614 + C50866 * C1622) *
                 C118 +
             (C8063 * C938 + C50972 * C947 + C8064 * C1621 + C50866 * C1626) *
                 C50830) *
                C51000 +
            ((C9048 + C9049) * C118 + (C9050 + C9051) * C50830) * C51001 +
            ((C9052 + C9053) * C118 + (C9054 + C9055) * C50830) * C8062) *
               C50798 -
           (C8674 * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C50960) *
              C51005 +
          ((((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C118 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50830) *
                C51000 +
            ((C8310 + C8311) * C118 + (C8312 + C8313) * C50830) * C51001 +
            ((C8314 + C8315) * C118 + (C8316 + C8317) * C50830) * C8062) *
               C50960 -
           (((C8064 * C3317 + C50866 * C3321 + C8063 * C1617 + C50972 * C1624) *
                 C50830 +
             (C8064 * C3312 + C50866 * C3318 + C8063 * C1612 + C50972 * C1618) *
                 C118) *
                C8062 +
            ((C8064 * C3316 + C50866 * C3320 + C8063 * C1619 + C50972 * C1625) *
                 C50830 +
             (C8064 * C3311 + C50866 * C3315 + C8063 * C1613 + C50972 * C1620) *
                 C118) *
                C51001 +
            ((C8064 * C3314 + C50866 * C3319 + C8063 * C1621 + C50972 * C1626) *
                 C50830 +
             (C8064 * C3310 + C50866 * C3313 + C8063 * C1614 + C50972 * C1622) *
                 C118) *
                C51000) *
               C50798) *
              C1380) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C118 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50830) *
               C51000 +
           ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
           C8122 * C8062) *
              C50734 * C1145 -
          (C8674 * C8062 +
           ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
           ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C50830 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C118) *
               C51000) *
              C50734 * C1146 +
          (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C118 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C50830) *
               C51000 +
           ((C8310 + C8311) * C118 + (C8312 + C8313) * C50830) * C51001 +
           ((C8314 + C8315) * C118 + (C8316 + C8317) * C50830) * C8062) *
              C50734 * C1147 -
          (((C8064 * C2553 + C50866 * C2557 + C8063 * C1156 + C50972 * C1163) *
                C50830 +
            (C8064 * C2548 + C50866 * C2554 + C8063 * C1151 + C50972 * C1157) *
                C118) *
               C8062 +
           ((C8064 * C2552 + C50866 * C2556 + C8063 * C1158 + C50972 * C1164) *
                C50830 +
            (C8064 * C2547 + C50866 * C2551 + C8063 * C1152 + C50972 * C1159) *
                C118) *
               C51001 +
           ((C8064 * C2550 + C50866 * C2555 + C8063 * C1160 + C50972 * C1165) *
                C50830 +
            (C8064 * C2546 + C50866 * C2549 + C8063 * C1153 + C50972 * C1161) *
                C118) *
               C51000) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C50734 * C1074 -
           (C8674 * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C50734 * C50770) *
              C1076 +
          ((((C8309 + C8308) * C118 + (C8307 + C8306) * C50830) * C51000 +
            ((C8305 + C8304) * C118 + (C8303 + C8302) * C50830) * C51001 +
            ((C8670 + C8671) * C118 + (C8672 + C8673) * C50830) * C8062) *
               C50734 * C50770 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C50734 * C1074) *
              C1077 +
          ((C8122 * C51000 +
            ((C8109 + C8108) * C118 + (C8107 + C8106) * C50830) * C51001 +
            ((C8110 + C8111) * C118 + (C8112 + C8113) * C50830) * C8062) *
               C50734 * C1074 -
           (((C8064 * C322 + C50866 * C333 + C8063 * C321 + C50972 * C332) *
                 C50830 +
             (C8064 * C303 + C50866 * C323 + C8063 * C302 + C50972 * C320) *
                 C118) *
                C8062 +
            ((C8673 + C8672) * C50830 + (C8671 + C8670) * C118) * C51001 +
            C8674 * C51000) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C480 -
           (C8837 * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C481 +
           (((C8063 * C487 + C50972 * C501 + C8064 * C1267 + C50866 * C1275) *
                 C118 +
             (C8063 * C502 + C50972 * C517 + C8064 * C1274 + C50866 * C1279) *
                 C50830) *
                C51000 +
            ((C8504 + C8505) * C118 + (C8506 + C8507) * C50830) * C51001 +
            ((C8508 + C8509) * C118 + (C8510 + C8511) * C50830) * C8062) *
               C482) *
              C1074 +
          ((((C8063 * C932 + C50972 * C937 + C8064 * C1614 + C50866 * C1622) *
                 C118 +
             (C8063 * C938 + C50972 * C947 + C8064 * C1621 + C50866 * C1626) *
                 C50830) *
                C51000 +
            ((C9048 + C9049) * C118 + (C9050 + C9051) * C50830) * C51001 +
            ((C9052 + C9053) * C118 + (C9054 + C9055) * C50830) * C8062) *
               C481 -
           (C8674 * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C480 -
           (((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 + C50972 * C1277) *
                 C50830 +
             (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 + C50972 * C1271) *
                 C118) *
                C8062 +
            ((C8064 * C2746 + C50866 * C2750 + C8063 * C1272 + C50972 * C1278) *
                 C50830 +
             (C8064 * C2741 + C50866 * C2745 + C8063 * C1266 + C50972 * C1273) *
                 C118) *
                C51001 +
            ((C8064 * C2744 + C50866 * C2749 + C8063 * C1274 + C50972 * C1279) *
                 C50830 +
             (C8064 * C2740 + C50866 * C2743 + C8063 * C1267 + C50972 * C1275) *
                 C118) *
                C51000) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                  C118 +
              (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                  C50830) *
                 C51000 +
             ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
             C8122 * C8062) *
                C50960 -
            (C8837 * C8062 +
             ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
             ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                  C50830 +
              (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                  C118) *
                 C51000) *
                C50798) *
               C1074 +
           ((((C8063 * C932 + C50972 * C937 + C8064 * C1614 + C50866 * C1622) *
                  C118 +
              (C8063 * C938 + C50972 * C947 + C8064 * C1621 + C50866 * C1626) *
                  C50830) *
                 C51000 +
             ((C9048 + C9049) * C118 + (C9050 + C9051) * C50830) * C51001 +
             ((C9052 + C9053) * C118 + (C9054 + C9055) * C50830) * C8062) *
                C50798 -
            (C8674 * C8062 +
             ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
             ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                  C50830 +
              (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                  C118) *
                 C51000) *
                C50960) *
               C50770) *
              C50951 +
          (((((C8503 + C8502) * C118 + (C8501 + C8500) * C50830) * C51000 +
             ((C8499 + C8498) * C118 + (C8497 + C8496) * C50830) * C51001 +
             ((C8833 + C8834) * C118 + (C8835 + C8836) * C50830) * C8062) *
                C50798 -
            (C8123 * C8062 +
             ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
             ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
                C50960) *
               C1074 +
           ((((C8309 + C8308) * C118 + (C8307 + C8306) * C50830) * C51000 +
             ((C8305 + C8304) * C118 + (C8303 + C8302) * C50830) * C51001 +
             ((C8670 + C8671) * C118 + (C8672 + C8673) * C50830) * C8062) *
                C50960 -
            (((C8064 * C1615 + C50866 * C1623 + C8063 * C944 + C50972 * C950) *
                  C50830 +
              (C8064 * C1611 + C50866 * C1616 + C8063 * C935 + C50972 * C943) *
                  C118) *
                 C8062 +
             ((C9055 + C9054) * C50830 + (C9053 + C9052) * C118) * C51001 +
             ((C9051 + C9050) * C50830 + (C9049 + C9048) * C118) * C51000) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C50734 * C1074 -
           (C8674 * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C50734 * C50770) *
              C1076 +
          ((((C8309 + C8308) * C118 + (C8307 + C8306) * C50830) * C51000 +
            ((C8305 + C8304) * C118 + (C8303 + C8302) * C50830) * C51001 +
            ((C8670 + C8671) * C118 + (C8672 + C8673) * C50830) * C8062) *
               C50734 * C50770 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C50734 * C1074) *
              C1077 +
          ((C8122 * C51000 +
            ((C8109 + C8108) * C118 + (C8107 + C8106) * C50830) * C51001 +
            ((C8110 + C8111) * C118 + (C8112 + C8113) * C50830) * C8062) *
               C50734 * C1074 -
           (((C8064 * C322 + C50866 * C333 + C8063 * C321 + C50972 * C332) *
                 C50830 +
             (C8064 * C303 + C50866 * C323 + C8063 * C302 + C50972 * C320) *
                 C118) *
                C8062 +
            ((C8673 + C8672) * C50830 + (C8671 + C8670) * C118) * C51001 +
            C8674 * C51000) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C118 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50830) *
               C51000 +
           ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
           C8122 * C8062) *
              C50734 * C1145 -
          (C8674 * C8062 +
           ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
           ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C50830 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C118) *
               C51000) *
              C50734 * C1146 +
          (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C118 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C50830) *
               C51000 +
           ((C8310 + C8311) * C118 + (C8312 + C8313) * C50830) * C51001 +
           ((C8314 + C8315) * C118 + (C8316 + C8317) * C50830) * C8062) *
              C50734 * C1147 -
          (((C8064 * C2553 + C50866 * C2557 + C8063 * C1156 + C50972 * C1163) *
                C50830 +
            (C8064 * C2548 + C50866 * C2554 + C8063 * C1151 + C50972 * C1157) *
                C118) *
               C8062 +
           ((C8064 * C2552 + C50866 * C2556 + C8063 * C1158 + C50972 * C1164) *
                C50830 +
            (C8064 * C2547 + C50866 * C2551 + C8063 * C1152 + C50972 * C1159) *
                C118) *
               C51001 +
           ((C8064 * C2550 + C50866 * C2555 + C8063 * C1160 + C50972 * C1165) *
                C50830 +
            (C8064 * C2546 + C50866 * C2549 + C8063 * C1153 + C50972 * C1161) *
                C118) *
               C51000) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                  C118 +
              (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                  C50830) *
                 C51000 +
             ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
             C8122 * C8062) *
                C1725 -
            (C8837 * C8062 +
             ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
             ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                  C50830 +
              (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                  C118) *
                 C51000) *
                C50798) *
               C50959 +
           ((((C8063 * C932 + C50972 * C937 + C8064 * C1614 + C50866 * C1622) *
                  C118 +
              (C8063 * C938 + C50972 * C947 + C8064 * C1621 + C50866 * C1626) *
                  C50830) *
                 C51000 +
             ((C9048 + C9049) * C118 + (C9050 + C9051) * C50830) * C51001 +
             ((C9052 + C9053) * C118 + (C9054 + C9055) * C50830) * C8062) *
                C50798 -
            (C8674 * C8062 +
             ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
             ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                  C50830 +
              (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                  C118) *
                 C51000) *
                C1725) *
               C50770) *
              C50951 +
          (((((C8503 + C8502) * C118 + (C8501 + C8500) * C50830) * C51000 +
             ((C8499 + C8498) * C118 + (C8497 + C8496) * C50830) * C51001 +
             ((C8833 + C8834) * C118 + (C8835 + C8836) * C50830) * C8062) *
                C50798 -
            (C8123 * C8062 +
             ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
             ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
                C1725) *
               C50959 +
           ((((C8309 + C8308) * C118 + (C8307 + C8306) * C50830) * C51000 +
             ((C8305 + C8304) * C118 + (C8303 + C8302) * C50830) * C51001 +
             ((C8670 + C8671) * C118 + (C8672 + C8673) * C50830) * C8062) *
                C1725 -
            (((C8064 * C1615 + C50866 * C1623 + C8063 * C944 + C50972 * C950) *
                  C50830 +
              (C8064 * C1611 + C50866 * C1616 + C8063 * C935 + C50972 * C943) *
                  C118) *
                 C8062 +
             ((C9055 + C9054) * C50830 + (C9053 + C9052) * C118) * C51001 +
             ((C9051 + C9050) * C50830 + (C9049 + C9048) * C118) * C51000) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C51006 -
           (C8837 * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C51007 +
           (((C8063 * C487 + C50972 * C501 + C8064 * C1267 + C50866 * C1275) *
                 C118 +
             (C8063 * C502 + C50972 * C517 + C8064 * C1274 + C50866 * C1279) *
                 C50830) *
                C51000 +
            ((C8504 + C8505) * C118 + (C8506 + C8507) * C50830) * C51001 +
            ((C8508 + C8509) * C118 + (C8510 + C8511) * C50830) * C8062) *
               C2141) *
              C50959 +
          ((((C8063 * C932 + C50972 * C937 + C8064 * C1614 + C50866 * C1622) *
                 C118 +
             (C8063 * C938 + C50972 * C947 + C8064 * C1621 + C50866 * C1626) *
                 C50830) *
                C51000 +
            ((C9048 + C9049) * C118 + (C9050 + C9051) * C50830) * C51001 +
            ((C9052 + C9053) * C118 + (C9054 + C9055) * C50830) * C8062) *
               C51007 -
           (C8674 * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C51006 -
           (((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 + C50972 * C1277) *
                 C50830 +
             (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 + C50972 * C1271) *
                 C118) *
                C8062 +
            ((C8064 * C2746 + C50866 * C2750 + C8063 * C1272 + C50972 * C1278) *
                 C50830 +
             (C8064 * C2741 + C50866 * C2745 + C8063 * C1266 + C50972 * C1273) *
                 C118) *
                C51001 +
            ((C8064 * C2744 + C50866 * C2749 + C8063 * C1274 + C50972 * C1279) *
                 C50830 +
             (C8064 * C2740 + C50866 * C2743 + C8063 * C1267 + C50972 * C1275) *
                 C118) *
                C51000) *
               C2141) *
              C50770) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C1725 -
           (C8837 * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C50798) *
              C289 +
          ((((C8063 * C932 + C50972 * C937 + C8064 * C1614 + C50866 * C1622) *
                 C118 +
             (C8063 * C938 + C50972 * C947 + C8064 * C1621 + C50866 * C1626) *
                 C50830) *
                C51000 +
            ((C9048 + C9049) * C118 + (C9050 + C9051) * C50830) * C51001 +
            ((C9052 + C9053) * C118 + (C9054 + C9055) * C50830) * C8062) *
               C50798 -
           (C8674 * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C1725) *
              C290 +
          ((((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C118 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50830) *
                C51000 +
            ((C8310 + C8311) * C118 + (C8312 + C8313) * C50830) * C51001 +
            ((C8314 + C8315) * C118 + (C8316 + C8317) * C50830) * C8062) *
               C1725 -
           (((C8064 * C3317 + C50866 * C3321 + C8063 * C1617 + C50972 * C1624) *
                 C50830 +
             (C8064 * C3312 + C50866 * C3318 + C8063 * C1612 + C50972 * C1618) *
                 C118) *
                C8062 +
            ((C8064 * C3316 + C50866 * C3320 + C8063 * C1619 + C50972 * C1625) *
                 C50830 +
             (C8064 * C3311 + C50866 * C3315 + C8063 * C1613 + C50972 * C1620) *
                 C118) *
                C51001 +
            ((C8064 * C3314 + C50866 * C3319 + C8063 * C1621 + C50972 * C1626) *
                 C50830 +
             (C8064 * C3310 + C50866 * C3313 + C8063 * C1614 + C50972 * C1622) *
                 C118) *
                C51000) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C1725 -
           (C8837 * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C50798) *
              C50718 * C1076 +
          ((((C8503 + C8502) * C118 + (C8501 + C8500) * C50830) * C51000 +
            ((C8499 + C8498) * C118 + (C8497 + C8496) * C50830) * C51001 +
            ((C8833 + C8834) * C118 + (C8835 + C8836) * C50830) * C8062) *
               C50798 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C1725) *
              C50718 * C1077 +
          ((C8122 * C51000 +
            ((C8109 + C8108) * C118 + (C8107 + C8106) * C50830) * C51001 +
            ((C8110 + C8111) * C118 + (C8112 + C8113) * C50830) * C8062) *
               C1725 -
           (((C8064 * C945 + C50866 * C951 + C8063 * C510 + C50972 * C521) *
                 C50830 +
             (C8064 * C936 + C50866 * C946 + C8063 * C491 + C50972 * C509) *
                 C118) *
                C8062 +
            ((C8836 + C8835) * C50830 + (C8834 + C8833) * C118) * C51001 +
            C8837 * C51000) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C118 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50830) *
               C51000 +
           ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
           C8122 * C8062) *
              C1891 -
          (C8837 * C8062 +
           ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
           ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                C50830 +
            (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                C118) *
               C51000) *
              C1892 +
          (((C8063 * C487 + C50972 * C501 + C8064 * C1267 + C50866 * C1275) *
                C118 +
            (C8063 * C502 + C50972 * C517 + C8064 * C1274 + C50866 * C1279) *
                C50830) *
               C51000 +
           ((C8504 + C8505) * C118 + (C8506 + C8507) * C50830) * C51001 +
           ((C8508 + C8509) * C118 + (C8510 + C8511) * C50830) * C8062) *
              C1893 -
          (((C8064 * C6141 + C50866 * C6143 + C8063 * C1901 + C50972 * C1908) *
                C50830 +
            (C8064 * C6140 + C50866 * C6142 + C8063 * C1896 + C50972 * C1902) *
                C118) *
               C8062 +
           ((C8064 * C4635 + C50866 * C4643 + C8063 * C1903 + C50972 * C1909) *
                C50830 +
            (C8064 * C4631 + C50866 * C4637 + C8063 * C1897 + C50972 * C1904) *
                C118) *
               C51001 +
           ((C8064 * C4639 + C50866 * C4645 + C8063 * C1905 + C50972 * C1910) *
                C50830 +
            (C8064 * C4633 + C50866 * C4641 + C8063 * C1898 + C50972 * C1906) *
                C118) *
               C51000) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C51006 -
           (C8837 * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C51007 +
           (((C8063 * C487 + C50972 * C501 + C8064 * C1267 + C50866 * C1275) *
                 C118 +
             (C8063 * C502 + C50972 * C517 + C8064 * C1274 + C50866 * C1279) *
                 C50830) *
                C51000 +
            ((C8504 + C8505) * C118 + (C8506 + C8507) * C50830) * C51001 +
            ((C8508 + C8509) * C118 + (C8510 + C8511) * C50830) * C8062) *
               C2141) *
              C50718 * C50951 +
          ((((C8503 + C8502) * C118 + (C8501 + C8500) * C50830) * C51000 +
            ((C8499 + C8498) * C118 + (C8497 + C8496) * C50830) * C51001 +
            ((C8833 + C8834) * C118 + (C8835 + C8836) * C50830) * C8062) *
               C51007 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C51006 -
           (((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
                 C50830 +
             (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
                 C118) *
                C8062 +
            ((C8511 + C8510) * C50830 + (C8509 + C8508) * C118) * C51001 +
            ((C8507 + C8506) * C50830 + (C8505 + C8504) * C118) * C51000) *
               C2141) *
              C50718 * C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C1725 -
           (C8837 * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C50798) *
              C50718 * C1076 +
          ((((C8503 + C8502) * C118 + (C8501 + C8500) * C50830) * C51000 +
            ((C8499 + C8498) * C118 + (C8497 + C8496) * C50830) * C51001 +
            ((C8833 + C8834) * C118 + (C8835 + C8836) * C50830) * C8062) *
               C50798 -
           (C8123 * C8062 +
            ((C8105 + C8104) * C50830 + (C8103 + C8102) * C118) * C51001 +
            ((C8101 + C8100) * C50830 + (C8099 + C8098) * C118) * C51000) *
               C1725) *
              C50718 * C1077 +
          ((C8122 * C51000 +
            ((C8109 + C8108) * C118 + (C8107 + C8106) * C50830) * C51001 +
            ((C8110 + C8111) * C118 + (C8112 + C8113) * C50830) * C8062) *
               C1725 -
           (((C8064 * C945 + C50866 * C951 + C8063 * C510 + C50972 * C521) *
                 C50830 +
             (C8064 * C936 + C50866 * C946 + C8063 * C491 + C50972 * C509) *
                 C118) *
                C8062 +
            ((C8836 + C8835) * C50830 + (C8834 + C8833) * C118) * C51001 +
            C8837 * C51000) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C118 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50830) *
                C51000 +
            ((C8098 + C8099) * C118 + (C8100 + C8101) * C50830) * C51001 +
            C8122 * C8062) *
               C1725 -
           (C8837 * C8062 +
            ((C8500 + C8501) * C50830 + (C8502 + C8503) * C118) * C51001 +
            ((C8064 * C938 + C50866 * C947 + C8063 * C499 + C50972 * C516) *
                 C50830 +
             (C8064 * C932 + C50866 * C937 + C8063 * C486 + C50972 * C500) *
                 C118) *
                C51000) *
               C50798) *
              C289 +
          ((((C8063 * C932 + C50972 * C937 + C8064 * C1614 + C50866 * C1622) *
                 C118 +
             (C8063 * C938 + C50972 * C947 + C8064 * C1621 + C50866 * C1626) *
                 C50830) *
                C51000 +
            ((C9048 + C9049) * C118 + (C9050 + C9051) * C50830) * C51001 +
            ((C9052 + C9053) * C118 + (C9054 + C9055) * C50830) * C8062) *
               C50798 -
           (C8674 * C8062 +
            ((C8306 + C8307) * C50830 + (C8308 + C8309) * C118) * C51001 +
            ((C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50830 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C118) *
                C51000) *
               C1725) *
              C290 +
          ((((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C118 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50830) *
                C51000 +
            ((C8310 + C8311) * C118 + (C8312 + C8313) * C50830) * C51001 +
            ((C8314 + C8315) * C118 + (C8316 + C8317) * C50830) * C8062) *
               C1725 -
           (((C8064 * C3317 + C50866 * C3321 + C8063 * C1617 + C50972 * C1624) *
                 C50830 +
             (C8064 * C3312 + C50866 * C3318 + C8063 * C1612 + C50972 * C1618) *
                 C118) *
                C8062 +
            ((C8064 * C3316 + C50866 * C3320 + C8063 * C1619 + C50972 * C1625) *
                 C50830 +
             (C8064 * C3311 + C50866 * C3315 + C8063 * C1613 + C50972 * C1620) *
                 C118) *
                C51001 +
            ((C8064 * C3314 + C50866 * C3319 + C8063 * C1621 + C50972 * C1626) *
                 C50830 +
             (C8064 * C3310 + C50866 * C3313 + C8063 * C1614 + C50972 * C1622) *
                 C118) *
                C51000) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C50734 * C50959 -
           (((C9051 + C9050) * C50894 + (C9049 + C9048) * C10908 +
             (C8306 + C8307) * C50973 + (C8308 + C8309) * C10907) *
                C50678 +
            ((C8064 * C1621 + C50866 * C1626 + C8063 * C938 + C50972 * C947) *
                 C50894 +
             (C8064 * C1614 + C50866 * C1622 + C8063 * C932 + C50972 * C937) *
                 C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C50734 * C50770) *
              C51002 +
          ((((C8309 + C8308) * C10907 + (C8307 + C8306) * C50973 +
             (C9048 + C9049) * C10908 + (C9050 + C9051) * C50894) *
                C2341 +
            ((C8305 + C8304) * C10907 + (C8303 + C8302) * C50973 +
             (C9052 + C9053) * C10908 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C50770 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
             (C8099 + C8098) * C10907) *
                C2341) *
               C50734 * C50959) *
              C51003 +
          (((C8114 * C10907 + C8115 * C50973 + (C8499 + C8498) * C10908 +
             (C8497 + C8496) * C50894) *
                C2341 +
            ((C8109 + C8108) * C10907 + (C8107 + C8106) * C50973 +
             (C8833 + C8834) * C10908 + (C8835 + C8836) * C50894) *
                C50678) *
               C50734 * C50959 -
           (((C8064 * C1615 + C50866 * C1623 + C8063 * C944 + C50972 * C950) *
                 C50894 +
             (C8064 * C1611 + C50866 * C1616 + C8063 * C935 + C50972 * C943) *
                 C10908 +
             (C8673 + C8672) * C50973 + (C8671 + C8670) * C10907) *
                C50678 +
            ((C9055 + C9054) * C50894 + (C9053 + C9052) * C10908 +
             C8658 * C50973 + C8659 * C10907) *
                C2341) *
               C50734 * C50770) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                  C10907 +
              (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                  C50973 +
              (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                 C2341 +
             ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
              C14060 * C10908 + C14061 * C50894) *
                 C50678) *
                C50960 -
            ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
              C14065 * C10907) *
                 C50678 +
             ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
              (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                 C2341) *
                C50798) *
               C50959 +
           ((((C14764 + C14765) * C10907 + (C14766 + C14767) * C50973 +
              (C8063 * C1267 + C50972 * C1275 + C8064 * C2740 +
               C50866 * C2743) *
                  C10908 +
              (C8063 * C1274 + C50972 * C1279 + C8064 * C2744 +
               C50866 * C2749) *
                  C50894) *
                 C2341 +
             (C14752 * C10907 + C14753 * C50973 + (C14768 + C14769) * C10908 +
              (C14770 + C14771) * C50894) *
                 C50678) *
                C50798 -
            ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
              (C8308 + C8309) * C10907) *
                 C50678 +
             ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
              (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                  C50973 +
              (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                  C10907) *
                 C2341) *
                C50960) *
               C50770) *
              C292 +
          ((((C14060 * C10907 + C14061 * C50973 + C14074 * C10908 +
              C14075 * C50894) *
                 C2341 +
             (C14484 * C10907 + C14485 * C50973 + (C8508 + C8509) * C10908 +
              (C8510 + C8511) * C50894) *
                 C50678) *
                C50798 -
            ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
              (C8103 + C8102) * C10907) *
                 C50678 +
             (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
              (C8099 + C8098) * C10907) *
                 C2341) *
                C50960) *
               C50959 +
           ((((C8309 + C8308) * C10907 + (C8307 + C8306) * C50973 +
              C14752 * C10908 + C14753 * C50894) *
                 C2341 +
             ((C8305 + C8304) * C10907 + (C8303 + C8302) * C50973 +
              (C9052 + C9053) * C10908 + (C9054 + C9055) * C50894) *
                 C50678) *
                C50960 -
            (((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 +
               C50972 * C1277) *
                  C50894 +
              (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 +
               C50972 * C1271) *
                  C10908 +
              (C9055 + C9054) * C50973 + (C9053 + C9052) * C10907) *
                 C50678 +
             ((C14771 + C14770) * C50894 + (C14769 + C14768) * C10908 +
              C14762 * C50973 + C14763 * C10907) *
                 C2341) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C8063 * C486 + C50972 * C500 + C8064 * C932 + C50866 * C937) *
                 C10908 +
             (C8063 * C499 + C50972 * C516 + C8064 * C938 + C50866 * C947) *
                 C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             (C8503 + C8502) * C10908 + (C8501 + C8500) * C50894) *
                C50678) *
               C50734 * C289 -
           (((C9051 + C9050) * C50894 + (C9049 + C9048) * C10908 +
             (C8306 + C8307) * C50973 + (C8308 + C8309) * C10907) *
                C50678 +
            ((C8064 * C1621 + C50866 * C1626 + C8063 * C938 + C50972 * C947) *
                 C50894 +
             (C8064 * C1614 + C50866 * C1622 + C8063 * C932 + C50972 * C937) *
                 C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C50734 * C290 +
           (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C10907 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50973 +
             (C8063 * C1614 + C50972 * C1622 + C8064 * C3310 + C50866 * C3313) *
                 C10908 +
             (C8063 * C1621 + C50972 * C1626 + C8064 * C3314 + C50866 * C3319) *
                 C50894) *
                C2341 +
            ((C8310 + C8311) * C10907 + (C8312 + C8313) * C50973 +
             (C13854 + C13855) * C10908 + (C13856 + C13857) * C50894) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C8309 + C8308) * C10907 + (C8307 + C8306) * C50973 +
             (C9048 + C9049) * C10908 + (C9050 + C9051) * C50894) *
                C2341 +
            ((C8305 + C8304) * C10907 + (C8303 + C8302) * C50973 +
             (C9052 + C9053) * C10908 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C290 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            ((C8500 + C8501) * C50894 + (C8502 + C8503) * C10908 +
             (C8101 + C8100) * C50973 + (C8099 + C8098) * C10907) *
                C2341) *
               C50734 * C289 -
           (((C8064 * C3317 + C50866 * C3321 + C8063 * C1617 + C50972 * C1624) *
                 C50894 +
             (C8064 * C3312 + C50866 * C3318 + C8063 * C1612 + C50972 * C1618) *
                 C10908 +
             (C8317 + C8316) * C50973 + (C8315 + C8314) * C10907) *
                C50678 +
            ((C13857 + C13856) * C50894 + (C13855 + C13854) * C10908 +
             (C8313 + C8312) * C50973 + (C8311 + C8310) * C10907) *
                C2341) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C10907 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50973 +
            (C8063 * C486 + C50972 * C500 + C8064 * C932 + C50866 * C937) *
                C10908 +
            (C8063 * C499 + C50972 * C516 + C8064 * C938 + C50866 * C947) *
                C50894) *
               C2341 +
           ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
            (C8503 + C8502) * C10908 + (C8501 + C8500) * C50894) *
               C50678) *
              C50734 * C50718 * C113 -
          ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
            (C8103 + C8102) * C10907) *
               C50678 +
           ((C8500 + C8501) * C50894 + (C8502 + C8503) * C10908 +
            (C8101 + C8100) * C50973 + (C8099 + C8098) * C10907) *
               C2341) *
              C50734 * C50718 * C114 +
          ((C8114 * C10907 + C8115 * C50973 + (C8499 + C8498) * C10908 +
            (C8497 + C8496) * C50894) *
               C2341 +
           ((C8109 + C8108) * C10907 + (C8107 + C8106) * C50973 +
            (C8833 + C8834) * C10908 + (C8835 + C8836) * C50894) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C8064 * C945 + C50866 * C951 + C8063 * C510 + C50972 * C521) *
                C50894 +
            (C8064 * C936 + C50866 * C946 + C8063 * C491 + C50972 * C509) *
                C10908 +
            (C8113 + C8112) * C50973 + (C8111 + C8110) * C10907) *
               C50678 +
           ((C8836 + C8835) * C50894 + (C8834 + C8833) * C10908 +
            C8116 * C50973 + C8117 * C10907) *
               C2341) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C480 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C481 +
           (((C14091 + C14090) * C10907 + (C14089 + C14088) * C50973 +
             (C8063 * C1898 + C50972 * C1906 + C8064 * C4633 + C50866 * C4641) *
                 C10908 +
             (C8063 * C1905 + C50972 * C1910 + C8064 * C4639 + C50866 * C4645) *
                 C50894) *
                C2341 +
            (C14074 * C10907 + C14075 * C50973 + (C14092 + C14093) * C10908 +
             (C14094 + C14095) * C50894) *
                C50678) *
               C482) *
              C50718 * C292 +
          (((C14060 * C10907 + C14061 * C50973 + C14074 * C10908 +
             C14075 * C50894) *
                C2341 +
            ((C8499 + C8498) * C10907 + (C8497 + C8496) * C50973 +
             (C8508 + C8509) * C10908 + (C8510 + C8511) * C50894) *
                C50678) *
               C481 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
             (C8099 + C8098) * C10907) *
                C2341) *
               C480 -
           (((C8064 * C6141 + C50866 * C6143 + C8063 * C1901 + C50972 * C1908) *
                 C50894 +
             (C8064 * C6140 + C50866 * C6142 + C8063 * C1896 + C50972 * C1902) *
                 C10908 +
             (C8511 + C8510) * C50973 + (C8509 + C8508) * C10907) *
                C50678 +
            ((C14095 + C14094) * C50894 + (C14093 + C14092) * C10908 +
             C14062 * C50973 + C14063 * C10907) *
                C2341) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C50960 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C50798) *
              C50718 * C51002 +
          (((C14060 * C10907 + C14061 * C50973 + C14074 * C10908 +
             C14075 * C50894) *
                C2341 +
            (C14484 * C10907 + C14485 * C50973 + (C8508 + C8509) * C10908 +
             (C8510 + C8511) * C50894) *
                C50678) *
               C50798 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
             (C8099 + C8098) * C10907) *
                C2341) *
               C50960) *
              C50718 * C51003 +
          (((C8114 * C10907 + C8115 * C50973 + C14484 * C10908 +
             C14485 * C50894) *
                C2341 +
            ((C8109 + C8108) * C10907 + (C8107 + C8106) * C50973 +
             (C8833 + C8834) * C10908 + (C8835 + C8836) * C50894) *
                C50678) *
               C50960 -
           (((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
                 C50894 +
             (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
                 C10908 +
             (C8836 + C8835) * C50973 + (C8834 + C8833) * C10907) *
                C50678 +
            ((C8511 + C8510) * C50894 + (C8509 + C8508) * C10908 +
             C8821 * C50973 + C8822 * C10907) *
                C2341) *
               C50798) *
              C50718 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C10907 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50973 +
            (C8063 * C486 + C50972 * C500 + C8064 * C932 + C50866 * C937) *
                C10908 +
            (C8063 * C499 + C50972 * C516 + C8064 * C938 + C50866 * C947) *
                C50894) *
               C2341 +
           ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
            (C8503 + C8502) * C10908 + (C8501 + C8500) * C50894) *
               C50678) *
              C50734 * C50718 * C113 -
          ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
            (C8103 + C8102) * C10907) *
               C50678 +
           ((C8500 + C8501) * C50894 + (C8502 + C8503) * C10908 +
            (C8101 + C8100) * C50973 + (C8099 + C8098) * C10907) *
               C2341) *
              C50734 * C50718 * C114 +
          ((C8114 * C10907 + C8115 * C50973 + (C8499 + C8498) * C10908 +
            (C8497 + C8496) * C50894) *
               C2341 +
           ((C8109 + C8108) * C10907 + (C8107 + C8106) * C50973 +
            (C8833 + C8834) * C10908 + (C8835 + C8836) * C50894) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C8064 * C945 + C50866 * C951 + C8063 * C510 + C50972 * C521) *
                C50894 +
            (C8064 * C936 + C50866 * C946 + C8063 * C491 + C50972 * C509) *
                C10908 +
            (C8113 + C8112) * C50973 + (C8111 + C8110) * C10907) *
               C50678 +
           ((C8836 + C8835) * C50894 + (C8834 + C8833) * C10908 +
            C8116 * C50973 + C8117 * C10907) *
               C2341) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C8063 * C486 + C50972 * C500 + C8064 * C932 + C50866 * C937) *
                 C10908 +
             (C8063 * C499 + C50972 * C516 + C8064 * C938 + C50866 * C947) *
                 C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             (C8503 + C8502) * C10908 + (C8501 + C8500) * C50894) *
                C50678) *
               C50734 * C289 -
           (((C9051 + C9050) * C50894 + (C9049 + C9048) * C10908 +
             (C8306 + C8307) * C50973 + (C8308 + C8309) * C10907) *
                C50678 +
            ((C8064 * C1621 + C50866 * C1626 + C8063 * C938 + C50972 * C947) *
                 C50894 +
             (C8064 * C1614 + C50866 * C1622 + C8063 * C932 + C50972 * C937) *
                 C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C50734 * C290 +
           (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C10907 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50973 +
             (C8063 * C1614 + C50972 * C1622 + C8064 * C3310 + C50866 * C3313) *
                 C10908 +
             (C8063 * C1621 + C50972 * C1626 + C8064 * C3314 + C50866 * C3319) *
                 C50894) *
                C2341 +
            ((C8310 + C8311) * C10907 + (C8312 + C8313) * C50973 +
             (C13854 + C13855) * C10908 + (C13856 + C13857) * C50894) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C8309 + C8308) * C10907 + (C8307 + C8306) * C50973 +
             (C9048 + C9049) * C10908 + (C9050 + C9051) * C50894) *
                C2341 +
            ((C8305 + C8304) * C10907 + (C8303 + C8302) * C50973 +
             (C9052 + C9053) * C10908 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C290 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            ((C8500 + C8501) * C50894 + (C8502 + C8503) * C10908 +
             (C8101 + C8100) * C50973 + (C8099 + C8098) * C10907) *
                C2341) *
               C50734 * C289 -
           (((C8064 * C3317 + C50866 * C3321 + C8063 * C1617 + C50972 * C1624) *
                 C50894 +
             (C8064 * C3312 + C50866 * C3318 + C8063 * C1612 + C50972 * C1618) *
                 C10908 +
             (C8317 + C8316) * C50973 + (C8315 + C8314) * C10907) *
                C50678 +
            ((C13857 + C13856) * C50894 + (C13855 + C13854) * C10908 +
             (C8313 + C8312) * C50973 + (C8311 + C8310) * C10907) *
                C2341) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C50734 * C51004 -
           ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
             (C8308 + C8309) * C10907) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C50734 * C51005 +
           (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C10907 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50973 +
             (C8063 * C1614 + C50972 * C1622 + C8064 * C3310 + C50866 * C3313) *
                 C10908 +
             (C8063 * C1621 + C50972 * C1626 + C8064 * C3314 + C50866 * C3319) *
                 C50894) *
                C2341 +
            ((C8310 + C8311) * C10907 + (C8312 + C8313) * C50973 +
             (C13854 + C13855) * C10908 + (C13856 + C13857) * C50894) *
                C50678) *
               C50734 * C1380) *
              C50951 +
          ((((C8309 + C8308) * C10907 + (C8307 + C8306) * C50973 +
             C14752 * C10908 + C14753 * C50894) *
                C2341 +
            ((C8305 + C8304) * C10907 + (C8303 + C8302) * C50973 +
             (C9052 + C9053) * C10908 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C51005 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
             (C8099 + C8098) * C10907) *
                C2341) *
               C50734 * C51004 -
           (((C8064 * C3317 + C50866 * C3321 + C8063 * C1617 + C50972 * C1624) *
                 C50894 +
             (C8064 * C3312 + C50866 * C3318 + C8063 * C1612 + C50972 * C1618) *
                 C10908 +
             (C8317 + C8316) * C50973 + (C8315 + C8314) * C10907) *
                C50678 +
            ((C13857 + C13856) * C50894 + (C13855 + C13854) * C10908 +
             (C8313 + C8312) * C50973 + (C8311 + C8310) * C10907) *
                C2341) *
               C50734 * C1380) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C50960 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C50798) *
              C51004 +
          ((((C14764 + C14765) * C10907 + (C14766 + C14767) * C50973 +
             (C15298 + C15299) * C10908 + (C15300 + C15301) * C50894) *
                C2341 +
            (C14752 * C10907 + C14753 * C50973 + (C14768 + C14769) * C10908 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C50798 -
           ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
             (C8308 + C8309) * C10907) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C50960) *
              C51005 +
          ((((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C10907 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50973 +
             (C15956 + C15957) * C10908 + (C15958 + C15959) * C50894) *
                C2341 +
            ((C8310 + C8311) * C10907 + (C8312 + C8313) * C50973 +
             (C13854 + C13855) * C10908 + (C13856 + C13857) * C50894) *
                C50678) *
               C50960 -
           (((C8064 * C3740 + C50866 * C3744 + C8063 * C2746 + C50972 * C2750) *
                 C50894 +
             (C8064 * C3738 + C50866 * C3741 + C8063 * C2741 + C50972 * C2745) *
                 C10908 +
             (C13857 + C13856) * C50973 + (C13855 + C13854) * C10907) *
                C50678 +
            ((C8064 * C3742 + C50866 * C3745 + C8063 * C2744 + C50972 * C2749) *
                 C50894 +
             (C8064 * C3739 + C50866 * C3743 + C8063 * C2740 + C50972 * C2743) *
                 C10908 +
             (C15959 + C15958) * C50973 + (C15957 + C15956) * C10907) *
                C2341) *
               C50798) *
              C1380) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C10907 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50973 +
            (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
               C2341 +
           ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
            C14060 * C10908 + C14061 * C50894) *
               C50678) *
              C50734 * C1145 -
          ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
            (C8308 + C8309) * C10907) *
               C50678 +
           ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C50973 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C10907) *
               C2341) *
              C50734 * C1146 +
          (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C10907 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C50973 +
            (C8063 * C1614 + C50972 * C1622 + C8064 * C3310 + C50866 * C3313) *
                C10908 +
            (C8063 * C1621 + C50972 * C1626 + C8064 * C3314 + C50866 * C3319) *
                C50894) *
               C2341 +
           ((C8310 + C8311) * C10907 + (C8312 + C8313) * C50973 +
            (C13854 + C13855) * C10908 + (C13856 + C13857) * C50894) *
               C50678) *
              C50734 * C1147 -
          (((C8064 * C4234 + C50866 * C4238 + C8063 * C3316 + C50972 * C3320) *
                C50894 +
            (C8064 * C4232 + C50866 * C4235 + C8063 * C3311 + C50972 * C3315) *
                C10908 +
            (C8064 * C2552 + C50866 * C2556 + C8063 * C1158 + C50972 * C1164) *
                C50973 +
            (C8064 * C2547 + C50866 * C2551 + C8063 * C1152 + C50972 * C1159) *
                C10907) *
               C50678 +
           ((C8064 * C4236 + C50866 * C4239 + C8063 * C3314 + C50972 * C3319) *
                C50894 +
            (C8064 * C4233 + C50866 * C4237 + C8063 * C3310 + C50972 * C3313) *
                C10908 +
            (C8064 * C2550 + C50866 * C2555 + C8063 * C1160 + C50972 * C1165) *
                C50973 +
            (C8064 * C2546 + C50866 * C2549 + C8063 * C1153 + C50972 * C1161) *
                C10907) *
               C2341) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C50734 * C1074 -
           ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
             (C8308 + C8309) * C10907) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C50734 * C50770) *
              C1076 +
          ((((C8309 + C8308) * C10907 + (C8307 + C8306) * C50973 +
             C14752 * C10908 + C14753 * C50894) *
                C2341 +
            ((C8305 + C8304) * C10907 + (C8303 + C8302) * C50973 +
             (C9052 + C9053) * C10908 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C50770 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
             (C8099 + C8098) * C10907) *
                C2341) *
               C50734 * C1074) *
              C1077 +
          (((C8114 * C10907 + C8115 * C50973 + C14484 * C10908 +
             C14485 * C50894) *
                C2341 +
            ((C8109 + C8108) * C10907 + (C8107 + C8106) * C50973 +
             (C8833 + C8834) * C10908 + (C8835 + C8836) * C50894) *
                C50678) *
               C50734 * C1074 -
           (((C8064 * C1615 + C50866 * C1623 + C8063 * C944 + C50972 * C950) *
                 C50894 +
             (C8064 * C1611 + C50866 * C1616 + C8063 * C935 + C50972 * C943) *
                 C10908 +
             (C8673 + C8672) * C50973 + (C8671 + C8670) * C10907) *
                C50678 +
            ((C9055 + C9054) * C50894 + (C9053 + C9052) * C10908 +
             C8658 * C50973 + C8659 * C10907) *
                C2341) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C480 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C481 +
           (((C14091 + C14090) * C10907 + (C14089 + C14088) * C50973 +
             (C8063 * C1898 + C50972 * C1906 + C8064 * C4633 + C50866 * C4641) *
                 C10908 +
             (C8063 * C1905 + C50972 * C1910 + C8064 * C4639 + C50866 * C4645) *
                 C50894) *
                C2341 +
            (C14074 * C10907 + C14075 * C50973 + (C14092 + C14093) * C10908 +
             (C14094 + C14095) * C50894) *
                C50678) *
               C482) *
              C1074 +
          ((((C14764 + C14765) * C10907 + (C14766 + C14767) * C50973 +
             (C15298 + C15299) * C10908 + (C15300 + C15301) * C50894) *
                C2341 +
            (C14752 * C10907 + C14753 * C50973 + (C14768 + C14769) * C10908 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C481 -
           ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
             (C8308 + C8309) * C10907) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C480 -
           (((C8064 * C4634 + C50866 * C4642 + C8063 * C4635 + C50972 * C4643) *
                 C50894 +
             (C8064 * C4630 + C50866 * C4636 + C8063 * C4631 + C50972 * C4637) *
                 C10908 +
             (C14771 + C14770) * C50973 + (C14769 + C14768) * C10907) *
                C50678 +
            ((C8064 * C4638 + C50866 * C4644 + C8063 * C4639 + C50972 * C4645) *
                 C50894 +
             (C8064 * C4632 + C50866 * C4640 + C8063 * C4633 + C50972 * C4641) *
                 C10908 +
             (C15301 + C15300) * C50973 + (C15299 + C15298) * C10907) *
                C2341) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                  C10907 +
              (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                  C50973 +
              (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                 C2341 +
             ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
              C14060 * C10908 + C14061 * C50894) *
                 C50678) *
                C50960 -
            ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
              C14065 * C10907) *
                 C50678 +
             ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
              (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                 C2341) *
                C50798) *
               C1074 +
           ((((C14764 + C14765) * C10907 + (C14766 + C14767) * C50973 +
              (C15298 + C15299) * C10908 + (C15300 + C15301) * C50894) *
                 C2341 +
             (C14752 * C10907 + C14753 * C50973 + (C14768 + C14769) * C10908 +
              (C14770 + C14771) * C50894) *
                 C50678) *
                C50798 -
            ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
              (C8308 + C8309) * C10907) *
                 C50678 +
             ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
              (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                  C50973 +
              (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                  C10907) *
                 C2341) *
                C50960) *
               C50770) *
              C50951 +
          ((((C14060 * C10907 + C14061 * C50973 + C14074 * C10908 +
              C14075 * C50894) *
                 C2341 +
             (C14484 * C10907 + C14485 * C50973 + (C8508 + C8509) * C10908 +
              (C8510 + C8511) * C50894) *
                 C50678) *
                C50798 -
            ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
              (C8103 + C8102) * C10907) *
                 C50678 +
             (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
              (C8099 + C8098) * C10907) *
                 C2341) *
                C50960) *
               C1074 +
           ((((C8309 + C8308) * C10907 + (C8307 + C8306) * C50973 +
              C14752 * C10908 + C14753 * C50894) *
                 C2341 +
             ((C8305 + C8304) * C10907 + (C8303 + C8302) * C50973 +
              (C9052 + C9053) * C10908 + (C9054 + C9055) * C50894) *
                 C50678) *
                C50960 -
            (((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 +
               C50972 * C1277) *
                  C50894 +
              (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 +
               C50972 * C1271) *
                  C10908 +
              (C9055 + C9054) * C50973 + (C9053 + C9052) * C10907) *
                 C50678 +
             ((C14771 + C14770) * C50894 + (C14769 + C14768) * C10908 +
              C14762 * C50973 + C14763 * C10907) *
                 C2341) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C50734 * C1074 -
           ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
             (C8308 + C8309) * C10907) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C50734 * C50770) *
              C1076 +
          ((((C8309 + C8308) * C10907 + (C8307 + C8306) * C50973 +
             C14752 * C10908 + C14753 * C50894) *
                C2341 +
            ((C8305 + C8304) * C10907 + (C8303 + C8302) * C50973 +
             (C9052 + C9053) * C10908 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C50770 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
             (C8099 + C8098) * C10907) *
                C2341) *
               C50734 * C1074) *
              C1077 +
          (((C8114 * C10907 + C8115 * C50973 + C14484 * C10908 +
             C14485 * C50894) *
                C2341 +
            ((C8109 + C8108) * C10907 + (C8107 + C8106) * C50973 +
             (C8833 + C8834) * C10908 + (C8835 + C8836) * C50894) *
                C50678) *
               C50734 * C1074 -
           (((C8064 * C1615 + C50866 * C1623 + C8063 * C944 + C50972 * C950) *
                 C50894 +
             (C8064 * C1611 + C50866 * C1616 + C8063 * C935 + C50972 * C943) *
                 C10908 +
             (C8673 + C8672) * C50973 + (C8671 + C8670) * C10907) *
                C50678 +
            ((C9055 + C9054) * C50894 + (C9053 + C9052) * C10908 +
             C8658 * C50973 + C8659 * C10907) *
                C2341) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C10907 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50973 +
            (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
               C2341 +
           ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
            C14060 * C10908 + C14061 * C50894) *
               C50678) *
              C50734 * C1145 -
          ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
            (C8308 + C8309) * C10907) *
               C50678 +
           ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C50973 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C10907) *
               C2341) *
              C50734 * C1146 +
          (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C10907 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C50973 +
            (C8063 * C1614 + C50972 * C1622 + C8064 * C3310 + C50866 * C3313) *
                C10908 +
            (C8063 * C1621 + C50972 * C1626 + C8064 * C3314 + C50866 * C3319) *
                C50894) *
               C2341 +
           ((C8310 + C8311) * C10907 + (C8312 + C8313) * C50973 +
            (C13854 + C13855) * C10908 + (C13856 + C13857) * C50894) *
               C50678) *
              C50734 * C1147 -
          (((C8064 * C4234 + C50866 * C4238 + C8063 * C3316 + C50972 * C3320) *
                C50894 +
            (C8064 * C4232 + C50866 * C4235 + C8063 * C3311 + C50972 * C3315) *
                C10908 +
            (C8064 * C2552 + C50866 * C2556 + C8063 * C1158 + C50972 * C1164) *
                C50973 +
            (C8064 * C2547 + C50866 * C2551 + C8063 * C1152 + C50972 * C1159) *
                C10907) *
               C50678 +
           ((C8064 * C4236 + C50866 * C4239 + C8063 * C3314 + C50972 * C3319) *
                C50894 +
            (C8064 * C4233 + C50866 * C4237 + C8063 * C3310 + C50972 * C3313) *
                C10908 +
            (C8064 * C2550 + C50866 * C2555 + C8063 * C1160 + C50972 * C1165) *
                C50973 +
            (C8064 * C2546 + C50866 * C2549 + C8063 * C1153 + C50972 * C1161) *
                C10907) *
               C2341) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                  C10907 +
              (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                  C50973 +
              (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                 C2341 +
             ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
              C14060 * C10908 + C14061 * C50894) *
                 C50678) *
                C1725 -
            ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
              C14065 * C10907) *
                 C50678 +
             ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
              (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                 C2341) *
                C50798) *
               C50959 +
           ((((C14764 + C14765) * C10907 + (C14766 + C14767) * C50973 +
              (C15298 + C15299) * C10908 + (C15300 + C15301) * C50894) *
                 C2341 +
             (C14752 * C10907 + C14753 * C50973 + (C14768 + C14769) * C10908 +
              (C14770 + C14771) * C50894) *
                 C50678) *
                C50798 -
            ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
              (C8308 + C8309) * C10907) *
                 C50678 +
             ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
              (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                  C50973 +
              (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                  C10907) *
                 C2341) *
                C1725) *
               C50770) *
              C50951 +
          ((((C14060 * C10907 + C14061 * C50973 + C14074 * C10908 +
              C14075 * C50894) *
                 C2341 +
             (C14484 * C10907 + C14485 * C50973 + (C8508 + C8509) * C10908 +
              (C8510 + C8511) * C50894) *
                 C50678) *
                C50798 -
            ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
              (C8103 + C8102) * C10907) *
                 C50678 +
             (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
              (C8099 + C8098) * C10907) *
                 C2341) *
                C1725) *
               C50959 +
           ((((C8309 + C8308) * C10907 + (C8307 + C8306) * C50973 +
              C14752 * C10908 + C14753 * C50894) *
                 C2341 +
             ((C8305 + C8304) * C10907 + (C8303 + C8302) * C50973 +
              (C9052 + C9053) * C10908 + (C9054 + C9055) * C50894) *
                 C50678) *
                C1725 -
            (((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 +
               C50972 * C1277) *
                  C50894 +
              (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 +
               C50972 * C1271) *
                  C10908 +
              (C9055 + C9054) * C50973 + (C9053 + C9052) * C10907) *
                 C50678 +
             ((C14771 + C14770) * C50894 + (C14769 + C14768) * C10908 +
              C14762 * C50973 + C14763 * C10907) *
                 C2341) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C51006 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C51007 +
           (((C14091 + C14090) * C10907 + (C14089 + C14088) * C50973 +
             (C16486 + C16487) * C10908 + (C16488 + C16489) * C50894) *
                C2341 +
            (C14074 * C10907 + C14075 * C50973 + (C14092 + C14093) * C10908 +
             (C14094 + C14095) * C50894) *
                C50678) *
               C2141) *
              C50959 +
          ((((C14764 + C14765) * C10907 + (C14766 + C14767) * C50973 +
             (C15298 + C15299) * C10908 + (C15300 + C15301) * C50894) *
                C2341 +
            (C14752 * C10907 + C14753 * C50973 + (C14768 + C14769) * C10908 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C51007 -
           ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
             (C8308 + C8309) * C10907) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C51006 -
           (((C8064 * C4634 + C50866 * C4642 + C8063 * C4635 + C50972 * C4643) *
                 C50894 +
             (C8064 * C4630 + C50866 * C4636 + C8063 * C4631 + C50972 * C4637) *
                 C10908 +
             (C14771 + C14770) * C50973 + (C14769 + C14768) * C10907) *
                C50678 +
            ((C8064 * C4638 + C50866 * C4644 + C8063 * C4639 + C50972 * C4645) *
                 C50894 +
             (C8064 * C4632 + C50866 * C4640 + C8063 * C4633 + C50972 * C4641) *
                 C10908 +
             (C15301 + C15300) * C50973 + (C15299 + C15298) * C10907) *
                C2341) *
               C2141) *
              C50770) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C1725 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C50798) *
              C289 +
          ((((C14764 + C14765) * C10907 + (C14766 + C14767) * C50973 +
             (C15298 + C15299) * C10908 + (C15300 + C15301) * C50894) *
                C2341 +
            (C14752 * C10907 + C14753 * C50973 + (C14768 + C14769) * C10908 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C50798 -
           ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
             (C8308 + C8309) * C10907) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C1725) *
              C290 +
          ((((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C10907 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50973 +
             (C15956 + C15957) * C10908 + (C15958 + C15959) * C50894) *
                C2341 +
            ((C8310 + C8311) * C10907 + (C8312 + C8313) * C50973 +
             (C13854 + C13855) * C10908 + (C13856 + C13857) * C50894) *
                C50678) *
               C1725 -
           (((C8064 * C3740 + C50866 * C3744 + C8063 * C2746 + C50972 * C2750) *
                 C50894 +
             (C8064 * C3738 + C50866 * C3741 + C8063 * C2741 + C50972 * C2745) *
                 C10908 +
             (C13857 + C13856) * C50973 + (C13855 + C13854) * C10907) *
                C50678 +
            ((C8064 * C3742 + C50866 * C3745 + C8063 * C2744 + C50972 * C2749) *
                 C50894 +
             (C8064 * C3739 + C50866 * C3743 + C8063 * C2740 + C50972 * C2743) *
                 C10908 +
             (C15959 + C15958) * C50973 + (C15957 + C15956) * C10907) *
                C2341) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C1725 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C50798) *
              C50718 * C1076 +
          (((C14060 * C10907 + C14061 * C50973 + C14074 * C10908 +
             C14075 * C50894) *
                C2341 +
            (C14484 * C10907 + C14485 * C50973 + (C8508 + C8509) * C10908 +
             (C8510 + C8511) * C50894) *
                C50678) *
               C50798 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
             (C8099 + C8098) * C10907) *
                C2341) *
               C1725) *
              C50718 * C1077 +
          (((C8114 * C10907 + C8115 * C50973 + C14484 * C10908 +
             C14485 * C50894) *
                C2341 +
            ((C8109 + C8108) * C10907 + (C8107 + C8106) * C50973 +
             (C8833 + C8834) * C10908 + (C8835 + C8836) * C50894) *
                C50678) *
               C1725 -
           (((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
                 C50894 +
             (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
                 C10908 +
             (C8836 + C8835) * C50973 + (C8834 + C8833) * C10907) *
                C50678 +
            ((C8511 + C8510) * C50894 + (C8509 + C8508) * C10908 +
             C8821 * C50973 + C8822 * C10907) *
                C2341) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C10907 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C50973 +
            (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
               C2341 +
           ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
            C14060 * C10908 + C14061 * C50894) *
               C50678) *
              C1891 -
          ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
            C14065 * C10907) *
               C50678 +
           ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
            (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
               C2341) *
              C1892 +
          (((C14091 + C14090) * C10907 + (C14089 + C14088) * C50973 +
            (C16486 + C16487) * C10908 + (C16488 + C16489) * C50894) *
               C2341 +
           (C14074 * C10907 + C14075 * C50973 + (C14092 + C14093) * C10908 +
            (C14094 + C14095) * C50894) *
               C50678) *
              C1893 -
          (((C8064 * C6560 + C50866 * C6564 + C8063 * C5582 + C50972 * C5586) *
                C50894 +
            (C8064 * C6558 + C50866 * C6561 + C8063 * C5577 + C50972 * C5581) *
                C10908 +
            (C14095 + C14094) * C50973 + (C14093 + C14092) * C10907) *
               C50678 +
           ((C8064 * C6562 + C50866 * C6565 + C8063 * C5580 + C50972 * C5585) *
                C50894 +
            (C8064 * C6559 + C50866 * C6563 + C8063 * C5576 + C50972 * C5579) *
                C10908 +
            (C16489 + C16488) * C50973 + (C16487 + C16486) * C10907) *
               C2341) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C51006 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C51007 +
           (((C14091 + C14090) * C10907 + (C14089 + C14088) * C50973 +
             (C16486 + C16487) * C10908 + (C16488 + C16489) * C50894) *
                C2341 +
            (C14074 * C10907 + C14075 * C50973 + (C14092 + C14093) * C10908 +
             (C14094 + C14095) * C50894) *
                C50678) *
               C2141) *
              C50718 * C50951 +
          (((C14060 * C10907 + C14061 * C50973 + C14074 * C10908 +
             C14075 * C50894) *
                C2341 +
            (C14484 * C10907 + C14485 * C50973 + (C8508 + C8509) * C10908 +
             (C8510 + C8511) * C50894) *
                C50678) *
               C51007 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
             (C8099 + C8098) * C10907) *
                C2341) *
               C51006 -
           (((C8064 * C6141 + C50866 * C6143 + C8063 * C1901 + C50972 * C1908) *
                 C50894 +
             (C8064 * C6140 + C50866 * C6142 + C8063 * C1896 + C50972 * C1902) *
                 C10908 +
             (C8511 + C8510) * C50973 + (C8509 + C8508) * C10907) *
                C50678 +
            ((C14095 + C14094) * C50894 + (C14093 + C14092) * C10908 +
             C14062 * C50973 + C14063 * C10907) *
                C2341) *
               C2141) *
              C50718 * C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C1725 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C50798) *
              C50718 * C1076 +
          (((C14060 * C10907 + C14061 * C50973 + C14074 * C10908 +
             C14075 * C50894) *
                C2341 +
            (C14484 * C10907 + C14485 * C50973 + (C8508 + C8509) * C10908 +
             (C8510 + C8511) * C50894) *
                C50678) *
               C50798 -
           ((C8821 * C50894 + C8822 * C10908 + (C8105 + C8104) * C50973 +
             (C8103 + C8102) * C10907) *
                C50678 +
            (C14064 * C50894 + C14065 * C10908 + (C8101 + C8100) * C50973 +
             (C8099 + C8098) * C10907) *
                C2341) *
               C1725) *
              C50718 * C1077 +
          (((C8114 * C10907 + C8115 * C50973 + C14484 * C10908 +
             C14485 * C50894) *
                C2341 +
            ((C8109 + C8108) * C10907 + (C8107 + C8106) * C50973 +
             (C8833 + C8834) * C10908 + (C8835 + C8836) * C50894) *
                C50678) *
               C1725 -
           (((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
                 C50894 +
             (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
                 C10908 +
             (C8836 + C8835) * C50973 + (C8834 + C8833) * C10907) *
                C50678 +
            ((C8511 + C8510) * C50894 + (C8509 + C8508) * C10908 +
             C8821 * C50973 + C8822 * C10907) *
                C2341) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C10907 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C50973 +
             (C14084 + C14085) * C10908 + (C14086 + C14087) * C50894) *
                C2341 +
            ((C8098 + C8099) * C10907 + (C8100 + C8101) * C50973 +
             C14060 * C10908 + C14061 * C50894) *
                C50678) *
               C1725 -
           ((C14062 * C50894 + C14063 * C10908 + C14064 * C50973 +
             C14065 * C10907) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C10908 +
             (C14087 + C14086) * C50973 + (C14085 + C14084) * C10907) *
                C2341) *
               C50798) *
              C289 +
          ((((C14764 + C14765) * C10907 + (C14766 + C14767) * C50973 +
             (C15298 + C15299) * C10908 + (C15300 + C15301) * C50894) *
                C2341 +
            (C14752 * C10907 + C14753 * C50973 + (C14768 + C14769) * C10908 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C50798 -
           ((C14762 * C50894 + C14763 * C10908 + (C8306 + C8307) * C50973 +
             (C8308 + C8309) * C10907) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C10908 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C50973 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C10907) *
                C2341) *
               C1725) *
              C290 +
          ((((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C10907 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C50973 +
             (C15956 + C15957) * C10908 + (C15958 + C15959) * C50894) *
                C2341 +
            ((C8310 + C8311) * C10907 + (C8312 + C8313) * C50973 +
             (C13854 + C13855) * C10908 + (C13856 + C13857) * C50894) *
                C50678) *
               C1725 -
           (((C8064 * C3740 + C50866 * C3744 + C8063 * C2746 + C50972 * C2750) *
                 C50894 +
             (C8064 * C3738 + C50866 * C3741 + C8063 * C2741 + C50972 * C2745) *
                 C10908 +
             (C13857 + C13856) * C50973 + (C13855 + C13854) * C10907) *
                C50678 +
            ((C8064 * C3742 + C50866 * C3745 + C8063 * C2744 + C50972 * C2749) *
                 C50894 +
             (C8064 * C3739 + C50866 * C3743 + C8063 * C2740 + C50972 * C2743) *
                 C10908 +
             (C15959 + C15958) * C50973 + (C15957 + C15956) * C10907) *
                C2341) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[30] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C50734 * C50959 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C50734 * C50770) *
                      C51002 +
                  ((((C2588 + C2587 + C2586) * C118 +
                     (C2585 + C2584 + C2583) * C50830) *
                        C2341 +
                    ((C2947 + C2948 + C2949) * C118 +
                     (C2950 + C2951 + C2952) * C50830) *
                        C50678) *
                       C50734 * C50770 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C50734 * C50959) *
                      C51003 +
                  ((((C2394 + C2393 + C2392) * C118 +
                     (C2391 + C2390 + C2389) * C50830) *
                        C2341 +
                    ((C2395 + C2396 + C2397) * C118 +
                     (C2398 + C2399 + C2400) * C50830) *
                        C50678) *
                       C50734 * C50959 -
                   (((C2345 * C1154 + C2340 * C1162 + C2344 * C319 +
                      C2339 * C331 + C2343 * C304 + C2338 * C324) *
                         C50830 +
                     (C2345 * C1150 + C2340 * C1155 + C2344 * C301 +
                      C2339 * C318 + C2343 * C294 + C2338 * C305) *
                         C118) *
                        C50678 +
                    ((C2952 + C2951 + C2950) * C50830 +
                     (C2949 + C2948 + C2947) * C118) *
                        C2341) *
                       C50734 * C50770) *
                      C673)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50734 * C50959 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C50734 * C50770) *
                      C51002 +
                  (((C376 + C375) * C107 + (C374 + C373) * C108 +
                    (C372 + C371) * C109 + (C687 + C688) * C110) *
                       C50734 * C50770 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50734 * C50959) *
                      C51003 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C50734 * C50959 -
                   (((C117 * C675 + C50815 * C677) * C50830 +
                     (C117 * C674 + C50815 * C676) * C118) *
                        C110 +
                    (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
                       C50734 * C50770) *
                      C673)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C5233 +
                     (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                     C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                        C2341 +
                    (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                       C50734 * C50959 -
                   ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
                    ((C117 * C1274 + C50815 * C1279) * C5232 +
                     (C117 * C1267 + C50815 * C1275) * C5235 +
                     (C117 * C938 + C50815 * C947) * C5231 +
                     (C117 * C932 + C50815 * C937) * C5234 +
                     (C117 * C310 + C50815 * C327) * C5230 +
                     (C117 * C297 + C50815 * C311) * C5233) *
                        C2341) *
                       C50734 * C50770) *
                      C51002 +
                  (((C5408 + C5407 + C5406 + C5405 + C5426 + C5425) * C2341 +
                    (C5783 + C5784 + C5785 + C5786 + C5793 + C5794) * C50678) *
                       C50734 * C50770 -
                   ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
                    (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
                       C50734 * C50959) *
                      C51003 +
                  (((C5248 + C5247 + C5246 + C5245 + C5244 + C5243) * C2341 +
                    (C5249 + C5250 + C5251 + C5252 + C5253 + C5254) * C50678) *
                       C50734 * C50959 -
                   (((C117 * C1268 + C50815 * C1276) * C5232 +
                     (C117 * C1264 + C50815 * C1269) * C5235 + C970 * C5231 +
                     C969 * C5234 + C359 * C5230 + C360 * C5233) *
                        C50678 +
                    (C5794 + C5793 + C5786 + C5785 + C5784 + C5783) * C2341) *
                       C50734 * C50770) *
                      C673)) /
                    (p * q * std::sqrt(p + q));
    d2ee[31] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                       C2339 * C311 + C2345 * C298 + C2340 * C312) *
                          C118 +
                      (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                       C2339 * C327 + C2345 * C313 + C2340 * C328) *
                          C50830) *
                         C2341 +
                     ((C2383 + C2384 + C2385) * C118 +
                      (C2386 + C2387 + C2388) * C50830) *
                         C50678) *
                        C50960 -
                    (((C2777 + C2778 + C2779) * C50830 +
                      (C2780 + C2781 + C2782) * C118) *
                         C50678 +
                     ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                       C2339 * C947 + C2343 * C499 + C2338 * C516) *
                          C50830 +
                      (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                       C2339 * C937 + C2343 * C486 + C2338 * C500) *
                          C118) *
                         C2341) *
                        C50798) *
                       C50959 +
                   ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                       C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                          C118 +
                      (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                       C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                          C50830) *
                         C2341 +
                     ((C3335 + C3336 + C3337) * C118 +
                      (C3338 + C3339 + C3340) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2583 + C2584 + C2585) * C50830 +
                      (C2586 + C2587 + C2588) * C118) *
                         C50678 +
                     ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                       C2339 * C328 + C2343 * C310 + C2338 * C327) *
                          C50830 +
                      (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                       C2339 * C312 + C2343 * C297 + C2338 * C311) *
                          C118) *
                         C2341) *
                        C50960) *
                       C50770) *
                      C292 +
                  (((((C2782 + C2781 + C2780) * C118 +
                      (C2779 + C2778 + C2777) * C50830) *
                         C2341 +
                     ((C3111 + C3112 + C3113) * C118 +
                      (C3114 + C3115 + C3116) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2389 + C2390 + C2391) * C50830 +
                      (C2392 + C2393 + C2394) * C118) *
                         C50678 +
                     ((C2388 + C2387 + C2386) * C50830 +
                      (C2385 + C2384 + C2383) * C118) *
                         C2341) *
                        C50960) *
                       C50959 +
                   ((((C2588 + C2587 + C2586) * C118 +
                      (C2585 + C2584 + C2583) * C50830) *
                         C2341 +
                     ((C2947 + C2948 + C2949) * C118 +
                      (C2950 + C2951 + C2952) * C50830) *
                         C50678) *
                        C50960 -
                    (((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 +
                       C2339 * C1624 + C2343 * C942 + C2338 * C949) *
                          C50830 +
                      (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 +
                       C2339 * C1618 + C2343 * C934 + C2338 * C941) *
                          C118) *
                         C50678 +
                     ((C3340 + C3339 + C3338) * C50830 +
                      (C3337 + C3336 + C3335) * C118) *
                         C2341) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50815 * C126) * C118 +
                      (C117 * C127 + C50815 * C140) * C50830) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C50960 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50815 * C516) * C50830 +
                      (C117 * C486 + C50815 * C500) * C118) *
                         C107) *
                        C50798) *
                       C50959 +
                   ((((C117 * C932 + C50815 * C937) * C118 +
                      (C117 * C938 + C50815 * C947) * C50830) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50798 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50815 * C327) * C50830 +
                      (C117 * C297 + C50815 * C311) * C118) *
                         C107) *
                        C50960) *
                       C50770) *
                      C292 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50798 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C50960) *
                       C50959 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C50960 -
                    (((C117 * C945 + C50815 * C951) * C50830 +
                      (C117 * C936 + C50815 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50815 * C126) * C5233 +
                      (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                      C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                         C2341 +
                     (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                        C50960 -
                    ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
                     (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 +
                      C5621 * C5234 + C5620 * C5230 + C5619 * C5233) *
                         C2341) *
                        C50798) *
                       C50959 +
                   (((C6161 * C5233 + C6162 * C5230 + C6163 * C5234 +
                      C6164 * C5231 + (C117 * C4633 + C50815 * C4641) * C5235 +
                      (C117 * C4639 + C50815 * C4645) * C5232) *
                         C2341 +
                     (C6153 + C6154 + C6155 + C6156 + C6167 + C6168) * C50678) *
                        C50798 -
                    ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
                     (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 +
                      C6161 * C5234 + (C117 * C310 + C50815 * C327) * C5230 +
                      (C117 * C297 + C50815 * C311) * C5233) *
                         C2341) *
                        C50960) *
                       C50770) *
                      C292 +
                  ((((C5604 + C5603 + C5602 + C5601 + C5632 + C5631) * C2341 +
                     (C5941 + C5942 + C5943 + C5944 + C5945 + C5946) * C50678) *
                        C50798 -
                    ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
                     (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
                        C50960) *
                       C50959 +
                   (((C5408 + C5407 + C5406 + C5405 + C5426 + C5425) * C2341 +
                     (C5783 + C5784 + C5785 + C5786 + C5793 + C5794) * C50678) *
                        C50960 -
                    (((C117 * C6141 + C50815 * C6143) * C5232 +
                      (C117 * C6140 + C50815 * C6142) * C5235 + C5792 * C5231 +
                      C5791 * C5234 + C968 * C5230 + C967 * C5233) *
                         C50678 +
                     (C6168 + C6167 + C6156 + C6155 + C6154 + C6153) * C2341) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50815 * C126) * C118 +
                (C117 * C127 + C50815 * C140) * C50830) *
                   C107 +
               (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                  C50734 * C50718 * C113 -
              (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
               (C179 + C178) * C107) *
                  C50734 * C50718 * C114 +
              (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
               (C186 + C187) * C110) *
                  C50734 * C50718 * C115 -
              (((C117 * C138 + C50815 * C146) * C50830 +
                (C117 * C125 + C50815 * C139) * C118) *
                   C110 +
               (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
                  C50734 * C50718 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50815 * C126) * C118 +
                 (C117 * C127 + C50815 * C140) * C50830) *
                    C107 +
                (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                   C50734 * C289 -
               ((C371 + C372) * C110 + (C373 + C374) * C109 +
                (C375 + C376) * C108 +
                ((C117 * C310 + C50815 * C327) * C50830 +
                 (C117 * C297 + C50815 * C311) * C118) *
                    C107) *
                   C50734 * C290 +
               (((C117 * C298 + C50815 * C312) * C118 +
                 (C117 * C313 + C50815 * C328) * C50830) *
                    C107 +
                (C377 + C378) * C108 + (C379 + C380) * C109 +
                (C381 + C382) * C110) *
                   C50734 * C291) *
                  C292 +
              (((C376 + C375) * C107 + (C374 + C373) * C108 +
                (C372 + C371) * C109 +
                ((C117 * C302 + C50815 * C320) * C118 +
                 (C117 * C321 + C50815 * C332) * C50830) *
                    C110) *
                   C50734 * C290 -
               (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                (C179 + C178) * C107) *
                   C50734 * C289 -
               (((C117 * C322 + C50815 * C333) * C50830 +
                 (C117 * C303 + C50815 * C323) * C118) *
                    C110 +
                (C382 + C381) * C109 + (C380 + C379) * C108 +
                (C378 + C377) * C107) *
                   C50734 * C291) *
                  C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C480 -
           ((C560 + C561) * C110 + (C562 + C563) * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50815 * C516) * C50830 +
             (C117 * C486 + C50815 * C500) * C118) *
                C107) *
               C481 +
           (((C117 * C487 + C50815 * C501) * C118 +
             (C117 * C502 + C50815 * C517) * C50830) *
                C107 +
            (C566 + C567) * C108 + (C568 + C569) * C109 +
            (C570 + C571) * C110) *
               C482) *
              C50718 * C292 +
          (((C565 + C564) * C107 + (C563 + C562) * C108 + (C561 + C560) * C109 +
            ((C117 * C491 + C50815 * C509) * C118 +
             (C117 * C510 + C50815 * C521) * C50830) *
                C110) *
               C481 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C480 -
           (((C117 * C511 + C50815 * C522) * C50830 +
             (C117 * C492 + C50815 * C512) * C118) *
                C110 +
            (C571 + C570) * C109 + (C569 + C568) * C108 +
            (C567 + C566) * C107) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C50734 * C50718 * C113 -
          (((C2389 + C2390 + C2391) * C50830 + (C2392 + C2393 + C2394) * C118) *
               C50678 +
           ((C2388 + C2387 + C2386) * C50830 + (C2385 + C2384 + C2383) * C118) *
               C2341) *
              C50734 * C50718 * C114 +
          (((C2394 + C2393 + C2392) * C118 + (C2391 + C2390 + C2389) * C50830) *
               C2341 +
           ((C2395 + C2396 + C2397) * C118 + (C2398 + C2399 + C2400) * C50830) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C2345 * C322 + C2340 * C333 + C2344 * C321 + C2339 * C332 +
             C2343 * C134 + C2338 * C144) *
                C50830 +
            (C2345 * C303 + C2340 * C323 + C2344 * C302 + C2339 * C320 +
             C2343 * C123 + C2338 * C135) *
                C118) *
               C50678 +
           ((C2400 + C2399 + C2398) * C50830 + (C2397 + C2396 + C2395) * C118) *
               C2341) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C50734 * C289 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C50734 * C290 +
           (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
              C2345 * C2546 + C2340 * C2549) *
                 C118 +
             (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
              C2345 * C2550 + C2340 * C2555) *
                 C50830) *
                C2341 +
            ((C2589 + C2590 + C2591) * C118 +
             (C2592 + C2593 + C2594) * C50830) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C2588 + C2587 + C2586) * C118 +
             (C2585 + C2584 + C2583) * C50830) *
                C2341 +
            ((C2343 * C295 + C2338 * C307 + C2344 * C300 + C2339 * C316 +
              C2345 * C1151 + C2340 * C1157) *
                 C118 +
             (C2343 * C306 + C2338 * C325 + C2344 * C317 + C2339 * C330 +
              C2345 * C1156 + C2340 * C1163) *
                 C50830) *
                C50678) *
               C50734 * C290 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C50734 * C289 -
           (((C2345 * C2553 + C2340 * C2557 + C2344 * C1156 + C2339 * C1163 +
              C2343 * C317 + C2338 * C330) *
                 C50830 +
             (C2345 * C2548 + C2340 * C2554 + C2344 * C1151 + C2339 * C1157 +
              C2343 * C300 + C2338 * C316) *
                 C118) *
                C50678 +
            ((C2594 + C2593 + C2592) * C50830 +
             (C2591 + C2590 + C2589) * C118) *
                C2341) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C480 -
           (((C2777 + C2778 + C2779) * C50830 +
             (C2780 + C2781 + C2782) * C118) *
                C50678 +
            ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
              C2343 * C499 + C2338 * C516) *
                 C50830 +
             (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
              C2343 * C486 + C2338 * C500) *
                 C118) *
                C2341) *
               C481 +
           (((C2343 * C487 + C2338 * C501 + C2344 * C1267 + C2339 * C1275 +
              C2345 * C2740 + C2340 * C2743) *
                 C118 +
             (C2343 * C502 + C2338 * C517 + C2344 * C1274 + C2339 * C1279 +
              C2345 * C2744 + C2340 * C2749) *
                 C50830) *
                C2341 +
            ((C2783 + C2784 + C2785) * C118 +
             (C2786 + C2787 + C2788) * C50830) *
                C50678) *
               C482) *
              C50718 * C292 +
          ((((C2782 + C2781 + C2780) * C118 +
             (C2779 + C2778 + C2777) * C50830) *
                C2341 +
            ((C2343 * C484 + C2338 * C496 + C2344 * C934 + C2339 * C941 +
              C2345 * C1612 + C2340 * C1618) *
                 C118 +
             (C2343 * C495 + C2338 * C514 + C2344 * C942 + C2339 * C949 +
              C2345 * C1617 + C2340 * C1624) *
                 C50830) *
                C50678) *
               C481 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C480 -
           (((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 + C2339 * C1277 +
              C2343 * C506 + C2338 * C519) *
                 C50830 +
             (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 + C2339 * C1271 +
              C2343 * C489 + C2338 * C505) *
                 C118) *
                C50678 +
            ((C2788 + C2787 + C2786) * C50830 +
             (C2785 + C2784 + C2783) * C118) *
                C2341) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C5233 +
            (C117 * C127 + C50815 * C140) * C5230 +
            (C117 * C486 + C50815 * C500) * C5234 +
            (C117 * C499 + C50815 * C516) * C5231 +
            (C117 * C487 + C50815 * C501) * C5235 +
            (C117 * C502 + C50815 * C517) * C5232) *
               C2341 +
           (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
              C50734 * C50718 * C113 -
          ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
           (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
              C50734 * C50718 * C114 +
          ((C5248 + C5247 + C5246 + C5245 + C5244 + C5243) * C2341 +
           (C5249 + C5250 + C5251 + C5252 + C5253 + C5254) * C50678) *
              C50734 * C50718 * C115 -
          (((C117 * C511 + C50815 * C522) * C5232 +
            (C117 * C492 + C50815 * C512) * C5235 + C800 * C5231 +
            C799 * C5234 + C174 * C5230 + C175 * C5233) *
               C50678 +
           (C5254 + C5253 + C5252 + C5251 + C5250 + C5249) * C2341) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C5233 +
             (C117 * C127 + C50815 * C140) * C5230 +
             (C117 * C486 + C50815 * C500) * C5234 +
             (C117 * C499 + C50815 * C516) * C5231 +
             (C117 * C487 + C50815 * C501) * C5235 +
             (C117 * C502 + C50815 * C517) * C5232) *
                C2341 +
            (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
               C50734 * C289 -
           ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
            ((C117 * C1274 + C50815 * C1279) * C5232 +
             (C117 * C1267 + C50815 * C1275) * C5235 +
             (C117 * C938 + C50815 * C947) * C5231 +
             (C117 * C932 + C50815 * C937) * C5234 +
             (C117 * C310 + C50815 * C327) * C5230 +
             (C117 * C297 + C50815 * C311) * C5233) *
                C2341) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C5233 +
             (C117 * C313 + C50815 * C328) * C5230 +
             (C117 * C1614 + C50815 * C1622) * C5234 +
             (C117 * C1621 + C50815 * C1626) * C5231 +
             (C117 * C2740 + C50815 * C2743) * C5235 +
             (C117 * C2744 + C50815 * C2749) * C5232) *
                C2341 +
            (C5409 + C5410 + C5427 + C5428 + C5429 + C5430) * C50678) *
               C50734 * C291) *
              C292 +
          (((C5408 + C5407 + C5406 + C5405 + C5426 + C5425) * C2341 +
            (C362 * C5233 + C361 * C5230 + C967 * C5234 + C968 * C5231 +
             (C117 * C1265 + C50815 * C1271) * C5235 +
             (C117 * C1270 + C50815 * C1277) * C5232) *
                C50678) *
               C50734 * C290 -
           ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
            (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
               C50734 * C289 -
           (((C117 * C2747 + C50815 * C2751) * C5232 +
             (C117 * C2742 + C50815 * C2748) * C5235 +
             (C117 * C1617 + C50815 * C1624) * C5231 +
             (C117 * C1612 + C50815 * C1618) * C5234 + C368 * C5230 +
             C367 * C5233) *
                C50678 +
            (C5430 + C5429 + C5428 + C5427 + C5410 + C5409) * C2341) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C5233 +
             (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
             C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                C2341 +
            (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
               C480 -
           ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
            (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 + C5621 * C5234 +
             C5620 * C5230 + C5619 * C5233) *
                C2341) *
               C481 +
           ((C5621 * C5233 + C5622 * C5230 + C5626 * C5234 + C5625 * C5231 +
             (C117 * C5576 + C50815 * C5579) * C5235 +
             (C117 * C5580 + C50815 * C5585) * C5232) *
                C2341 +
            (C5609 + C5610 + C5633 + C5634 + C5635 + C5636) * C50678) *
               C482) *
              C50718 * C292 +
          (((C5604 + C5603 + C5602 + C5601 + C5632 + C5631) * C2341 +
            (C551 * C5233 + C550 * C5230 + C556 * C5234 + C557 * C5231 +
             C5629 * C5235 + C5630 * C5232) *
                C50678) *
               C481 -
           ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
            (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
               C480 -
           (((C117 * C5583 + C50815 * C5587) * C5232 +
             (C117 * C5578 + C50815 * C5584) * C5235 + C5630 * C5231 +
             C5629 * C5234 + C557 * C5230 + C556 * C5233) *
                C50678 +
            (C5636 + C5635 + C5634 + C5633 + C5610 + C5609) * C2341) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C50960 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C50798) *
                      C50718 * C51002 +
                  ((((C2782 + C2781 + C2780) * C118 +
                     (C2779 + C2778 + C2777) * C50830) *
                        C2341 +
                    ((C3111 + C3112 + C3113) * C118 +
                     (C3114 + C3115 + C3116) * C50830) *
                        C50678) *
                       C50798 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C50960) *
                      C50718 * C51003 +
                  ((((C2394 + C2393 + C2392) * C118 +
                     (C2391 + C2390 + C2389) * C50830) *
                        C2341 +
                    ((C2395 + C2396 + C2397) * C118 +
                     (C2398 + C2399 + C2400) * C50830) *
                        C50678) *
                       C50960 -
                   (((C2345 * C1615 + C2340 * C1623 + C2344 * C944 +
                      C2339 * C950 + C2343 * C493 + C2338 * C513) *
                         C50830 +
                     (C2345 * C1611 + C2340 * C1616 + C2344 * C935 +
                      C2339 * C943 + C2343 * C483 + C2338 * C494) *
                         C118) *
                        C50678 +
                    ((C3116 + C3115 + C3114) * C50830 +
                     (C3113 + C3112 + C3111) * C118) *
                        C2341) *
                       C50798) *
                      C50718 * C673)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50960 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C50798) *
                      C50718 * C51002 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50798 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50960) *
                      C50718 * C51003 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C50960 -
                   (((C117 * C789 + C50815 * C791) * C50830 +
                     (C117 * C788 + C50815 * C790) * C118) *
                        C110 +
                    (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                       C50798) *
                      C50718 * C673)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C5233 +
                     (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                     C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                        C2341 +
                    (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                       C50960 -
                   ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
                    (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 +
                     C5621 * C5234 + C5620 * C5230 + C5619 * C5233) *
                        C2341) *
                       C50798) *
                      C50718 * C51002 +
                  (((C5604 + C5603 + C5602 + C5601 + C5632 + C5631) * C2341 +
                    (C5941 + C5942 + C5943 + C5944 + C5945 + C5946) * C50678) *
                       C50798 -
                   ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
                    (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
                       C50960) *
                      C50718 * C51003 +
                  (((C5248 + C5247 + C5246 + C5245 + C5244 + C5243) * C2341 +
                    (C5249 + C5250 + C5251 + C5252 + C5253 + C5254) * C50678) *
                       C50960 -
                   (((C117 * C1899 + C50815 * C1907) * C5232 +
                     (C117 * C1895 + C50815 * C1900) * C5235 + C559 * C5231 +
                     C558 * C5234 + C548 * C5230 + C549 * C5233) *
                        C50678 +
                    (C5946 + C5945 + C5944 + C5943 + C5942 + C5941) * C2341) *
                       C50798) *
                      C50718 * C673)) /
                    (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50734 * C289 -
           ((C371 + C372) * C110 + (C373 + C374) * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50815 * C327) * C50830 +
             (C117 * C297 + C50815 * C311) * C118) *
                C107) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C118 +
             (C117 * C313 + C50815 * C328) * C50830) *
                C107 +
            (C377 + C378) * C108 + (C379 + C380) * C109 +
            (C381 + C382) * C110) *
               C50734 * C291) *
              C292 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            ((C117 * C302 + C50815 * C320) * C118 +
             (C117 * C321 + C50815 * C332) * C50830) *
                C110) *
               C50734 * C290 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50734 * C289 -
           (((C117 * C322 + C50815 * C333) * C50830 +
             (C117 * C303 + C50815 * C323) * C118) *
                C110 +
            (C382 + C381) * C109 + (C380 + C379) * C108 +
            (C378 + C377) * C107) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C118 +
            (C117 * C127 + C50815 * C140) * C50830) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50734 * C50718 * C113 -
          (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
           (C179 + C178) * C107) *
              C50734 * C50718 * C114 +
          (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
           (C186 + C187) * C110) *
              C50734 * C50718 * C115 -
          (((C117 * C138 + C50815 * C146) * C50830 +
            (C117 * C125 + C50815 * C139) * C118) *
               C110 +
           (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C50734 * C50718 * C113 -
          (((C2389 + C2390 + C2391) * C50830 + (C2392 + C2393 + C2394) * C118) *
               C50678 +
           ((C2388 + C2387 + C2386) * C50830 + (C2385 + C2384 + C2383) * C118) *
               C2341) *
              C50734 * C50718 * C114 +
          (((C2394 + C2393 + C2392) * C118 + (C2391 + C2390 + C2389) * C50830) *
               C2341 +
           ((C2395 + C2396 + C2397) * C118 + (C2398 + C2399 + C2400) * C50830) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C2345 * C322 + C2340 * C333 + C2344 * C321 + C2339 * C332 +
             C2343 * C134 + C2338 * C144) *
                C50830 +
            (C2345 * C303 + C2340 * C323 + C2344 * C302 + C2339 * C320 +
             C2343 * C123 + C2338 * C135) *
                C118) *
               C50678 +
           ((C2400 + C2399 + C2398) * C50830 + (C2397 + C2396 + C2395) * C118) *
               C2341) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C50734 * C289 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C50734 * C290 +
           (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
              C2345 * C2546 + C2340 * C2549) *
                 C118 +
             (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
              C2345 * C2550 + C2340 * C2555) *
                 C50830) *
                C2341 +
            ((C2589 + C2590 + C2591) * C118 +
             (C2592 + C2593 + C2594) * C50830) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C2588 + C2587 + C2586) * C118 +
             (C2585 + C2584 + C2583) * C50830) *
                C2341 +
            ((C2343 * C295 + C2338 * C307 + C2344 * C300 + C2339 * C316 +
              C2345 * C1151 + C2340 * C1157) *
                 C118 +
             (C2343 * C306 + C2338 * C325 + C2344 * C317 + C2339 * C330 +
              C2345 * C1156 + C2340 * C1163) *
                 C50830) *
                C50678) *
               C50734 * C290 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C50734 * C289 -
           (((C2345 * C2553 + C2340 * C2557 + C2344 * C1156 + C2339 * C1163 +
              C2343 * C317 + C2338 * C330) *
                 C50830 +
             (C2345 * C2548 + C2340 * C2554 + C2344 * C1151 + C2339 * C1157 +
              C2343 * C300 + C2338 * C316) *
                 C118) *
                C50678 +
            ((C2594 + C2593 + C2592) * C50830 +
             (C2591 + C2590 + C2589) * C118) *
                C2341) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C5233 +
            (C117 * C127 + C50815 * C140) * C5230 +
            (C117 * C486 + C50815 * C500) * C5234 +
            (C117 * C499 + C50815 * C516) * C5231 +
            (C117 * C487 + C50815 * C501) * C5235 +
            (C117 * C502 + C50815 * C517) * C5232) *
               C2341 +
           (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
              C50734 * C50718 * C113 -
          ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
           (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
              C50734 * C50718 * C114 +
          ((C5248 + C5247 + C5246 + C5245 + C5244 + C5243) * C2341 +
           (C5249 + C5250 + C5251 + C5252 + C5253 + C5254) * C50678) *
              C50734 * C50718 * C115 -
          (((C117 * C511 + C50815 * C522) * C5232 +
            (C117 * C492 + C50815 * C512) * C5235 + C800 * C5231 +
            C799 * C5234 + C174 * C5230 + C175 * C5233) *
               C50678 +
           (C5254 + C5253 + C5252 + C5251 + C5250 + C5249) * C2341) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C5233 +
             (C117 * C127 + C50815 * C140) * C5230 +
             (C117 * C486 + C50815 * C500) * C5234 +
             (C117 * C499 + C50815 * C516) * C5231 +
             (C117 * C487 + C50815 * C501) * C5235 +
             (C117 * C502 + C50815 * C517) * C5232) *
                C2341 +
            (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
               C50734 * C289 -
           ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
            ((C117 * C1274 + C50815 * C1279) * C5232 +
             (C117 * C1267 + C50815 * C1275) * C5235 +
             (C117 * C938 + C50815 * C947) * C5231 +
             (C117 * C932 + C50815 * C937) * C5234 +
             (C117 * C310 + C50815 * C327) * C5230 +
             (C117 * C297 + C50815 * C311) * C5233) *
                C2341) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C5233 +
             (C117 * C313 + C50815 * C328) * C5230 +
             (C117 * C1614 + C50815 * C1622) * C5234 +
             (C117 * C1621 + C50815 * C1626) * C5231 +
             (C117 * C2740 + C50815 * C2743) * C5235 +
             (C117 * C2744 + C50815 * C2749) * C5232) *
                C2341 +
            (C5409 + C5410 + C5427 + C5428 + C5429 + C5430) * C50678) *
               C50734 * C291) *
              C292 +
          (((C5408 + C5407 + C5406 + C5405 + C5426 + C5425) * C2341 +
            (C362 * C5233 + C361 * C5230 + C967 * C5234 + C968 * C5231 +
             (C117 * C1265 + C50815 * C1271) * C5235 +
             (C117 * C1270 + C50815 * C1277) * C5232) *
                C50678) *
               C50734 * C290 -
           ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
            (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
               C50734 * C289 -
           (((C117 * C2747 + C50815 * C2751) * C5232 +
             (C117 * C2742 + C50815 * C2748) * C5235 +
             (C117 * C1617 + C50815 * C1624) * C5231 +
             (C117 * C1612 + C50815 * C1618) * C5234 + C368 * C5230 +
             C367 * C5233) *
                C50678 +
            (C5430 + C5429 + C5428 + C5427 + C5410 + C5409) * C2341) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C50734 * C51004 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C50734 * C51005 +
                   (((C2343 * C298 + C2338 * C312 + C2344 * C1153 +
                      C2339 * C1161 + C2345 * C2546 + C2340 * C2549) *
                         C118 +
                     (C2343 * C313 + C2338 * C328 + C2344 * C1160 +
                      C2339 * C1165 + C2345 * C2550 + C2340 * C2555) *
                         C50830) *
                        C2341 +
                    ((C2589 + C2590 + C2591) * C118 +
                     (C2592 + C2593 + C2594) * C50830) *
                        C50678) *
                       C50734 * C1380) *
                      C50951 +
                  ((((C2588 + C2587 + C2586) * C118 +
                     (C2585 + C2584 + C2583) * C50830) *
                        C2341 +
                    ((C2947 + C2948 + C2949) * C118 +
                     (C2950 + C2951 + C2952) * C50830) *
                        C50678) *
                       C50734 * C51005 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C50734 * C51004 -
                   (((C2345 * C2553 + C2340 * C2557 + C2344 * C1156 +
                      C2339 * C1163 + C2343 * C317 + C2338 * C330) *
                         C50830 +
                     (C2345 * C2548 + C2340 * C2554 + C2344 * C1151 +
                      C2339 * C1157 + C2343 * C300 + C2338 * C316) *
                         C118) *
                        C50678 +
                    ((C2594 + C2593 + C2592) * C50830 +
                     (C2591 + C2590 + C2589) * C118) *
                        C2341) *
                       C50734 * C1380) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50734 * C51004 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C50734 * C51005 +
                   (((C117 * C298 + C50815 * C312) * C118 +
                     (C117 * C313 + C50815 * C328) * C50830) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C50734 * C1380) *
                      C50951 +
                  (((C376 + C375) * C107 + (C374 + C373) * C108 +
                    (C372 + C371) * C109 + (C687 + C688) * C110) *
                       C50734 * C51005 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50734 * C51004 -
                   (((C117 * C322 + C50815 * C333) * C50830 +
                     (C117 * C303 + C50815 * C323) * C118) *
                        C110 +
                    (C382 + C381) * C109 + (C380 + C379) * C108 +
                    (C378 + C377) * C107) *
                       C50734 * C1380) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C5233 +
                     (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                     C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                        C2341 +
                    (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                       C50734 * C51004 -
                   ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
                    (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 +
                     C6161 * C5234 + (C117 * C310 + C50815 * C327) * C5230 +
                     (C117 * C297 + C50815 * C311) * C5233) *
                        C2341) *
                       C50734 * C51005 +
                   (((C117 * C298 + C50815 * C312) * C5233 +
                     (C117 * C313 + C50815 * C328) * C5230 +
                     (C117 * C1614 + C50815 * C1622) * C5234 +
                     (C117 * C1621 + C50815 * C1626) * C5231 +
                     (C117 * C2740 + C50815 * C2743) * C5235 +
                     (C117 * C2744 + C50815 * C2749) * C5232) *
                        C2341 +
                    (C5409 + C5410 + C5427 + C5428 + C5429 + C5430) * C50678) *
                       C50734 * C1380) *
                      C50951 +
                  (((C5408 + C5407 + C5406 + C5405 + C5426 + C5425) * C2341 +
                    (C5783 + C5784 + C5785 + C5786 + C5793 + C5794) * C50678) *
                       C50734 * C51005 -
                   ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
                    (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
                       C50734 * C51004 -
                   (((C117 * C2747 + C50815 * C2751) * C5232 +
                     (C117 * C2742 + C50815 * C2748) * C5235 +
                     (C117 * C1617 + C50815 * C1624) * C5231 +
                     (C117 * C1612 + C50815 * C1618) * C5234 + C368 * C5230 +
                     C367 * C5233) *
                        C50678 +
                    (C5430 + C5429 + C5428 + C5427 + C5410 + C5409) * C2341) *
                       C50734 * C1380) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[36] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C50960 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C50798) *
                      C51004 +
                  ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                      C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                         C118 +
                     (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                      C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                         C50830) *
                        C2341 +
                    ((C3335 + C3336 + C3337) * C118 +
                     (C3338 + C3339 + C3340) * C50830) *
                        C50678) *
                       C50798 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C50960) *
                      C51005 +
                  ((((C2343 * C298 + C2338 * C312 + C2344 * C1153 +
                      C2339 * C1161 + C2345 * C2546 + C2340 * C2549) *
                         C118 +
                     (C2343 * C313 + C2338 * C328 + C2344 * C1160 +
                      C2339 * C1165 + C2345 * C2550 + C2340 * C2555) *
                         C50830) *
                        C2341 +
                    ((C2589 + C2590 + C2591) * C118 +
                     (C2592 + C2593 + C2594) * C50830) *
                        C50678) *
                       C50960 -
                   (((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 +
                      C2339 * C3320 + C2343 * C1619 + C2338 * C1625) *
                         C50830 +
                     (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 +
                      C2339 * C3315 + C2343 * C1613 + C2338 * C1620) *
                         C118) *
                        C50678 +
                    ((C2345 * C4236 + C2340 * C4239 + C2344 * C3314 +
                      C2339 * C3319 + C2343 * C1621 + C2338 * C1626) *
                         C50830 +
                     (C2345 * C4233 + C2340 * C4237 + C2344 * C3310 +
                      C2339 * C3313 + C2343 * C1614 + C2338 * C1622) *
                         C118) *
                        C2341) *
                       C50798) *
                      C1380) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50960 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C50798) *
                      C51004 +
                  ((((C117 * C932 + C50815 * C937) * C118 +
                     (C117 * C938 + C50815 * C947) * C50830) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50798 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C50960) *
                      C51005 +
                  ((((C117 * C298 + C50815 * C312) * C118 +
                     (C117 * C313 + C50815 * C328) * C50830) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C50960 -
                   (((C117 * C1615 + C50815 * C1623) * C50830 +
                     (C117 * C1611 + C50815 * C1616) * C118) *
                        C110 +
                    ((C117 * C1617 + C50815 * C1624) * C50830 +
                     (C117 * C1612 + C50815 * C1618) * C118) *
                        C109 +
                    ((C117 * C1619 + C50815 * C1625) * C50830 +
                     (C117 * C1613 + C50815 * C1620) * C118) *
                        C108 +
                    ((C117 * C1621 + C50815 * C1626) * C50830 +
                     (C117 * C1614 + C50815 * C1622) * C118) *
                        C107) *
                       C50798) *
                      C1380) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C5233 +
                     (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                     C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                        C2341 +
                    (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                       C50960 -
                   ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
                    (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 +
                     C5621 * C5234 + C5620 * C5230 + C5619 * C5233) *
                        C2341) *
                       C50798) *
                      C51004 +
                  (((C6161 * C5233 + C6162 * C5230 + C6163 * C5234 +
                     C6164 * C5231 + C6571 * C5235 + C6572 * C5232) *
                        C2341 +
                    (C6153 + C6154 + C6155 + C6156 + C6167 + C6168) * C50678) *
                       C50798 -
                   ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
                    (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 +
                     C6161 * C5234 + (C117 * C310 + C50815 * C327) * C5230 +
                     (C117 * C297 + C50815 * C311) * C5233) *
                        C2341) *
                       C50960) *
                      C51005 +
                  ((((C117 * C298 + C50815 * C312) * C5233 +
                     (C117 * C313 + C50815 * C328) * C5230 + C7067 * C5234 +
                     C7068 * C5231 + C7069 * C5235 + C7070 * C5232) *
                        C2341 +
                    (C5409 + C5410 + C5427 + C5428 + C5429 + C5430) * C50678) *
                       C50960 -
                   (((C117 * C4634 + C50815 * C4642) * C5232 +
                     (C117 * C4630 + C50815 * C4636) * C5235 + C5424 * C5231 +
                     C5423 * C5234 + C5422 * C5230 + C5421 * C5233) *
                        C50678 +
                    ((C117 * C4638 + C50815 * C4644) * C5232 +
                     (C117 * C4632 + C50815 * C4640) * C5235 + C7070 * C5231 +
                     C7069 * C5234 + C7068 * C5230 + C7067 * C5233) *
                        C2341) *
                       C50798) *
                      C1380) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50815 * C126) * C118 +
                 (C117 * C127 + C50815 * C140) * C50830) *
                    C107 +
                (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                   C50734 * C1074 -
               (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                ((C117 * C310 + C50815 * C327) * C50830 +
                 (C117 * C297 + C50815 * C311) * C118) *
                    C107) *
                   C50734 * C50770) *
                  C1076 +
              (((C376 + C375) * C107 + (C374 + C373) * C108 +
                (C372 + C371) * C109 + (C687 + C688) * C110) *
                   C50734 * C50770 -
               (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                (C179 + C178) * C107) *
                   C50734 * C1074) *
                  C1077 +
              ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                (C186 + C187) * C110) *
                   C50734 * C1074 -
               (((C117 * C675 + C50815 * C677) * C50830 +
                 (C117 * C674 + C50815 * C676) * C118) *
                    C110 +
                (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
                   C50734 * C50770) *
                  C1078) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50815 * C126) * C118 +
                (C117 * C127 + C50815 * C140) * C50830) *
                   C107 +
               (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                  C50734 * C1145 -
              (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
               ((C117 * C310 + C50815 * C327) * C50830 +
                (C117 * C297 + C50815 * C311) * C118) *
                   C107) *
                  C50734 * C1146 +
              (((C117 * C298 + C50815 * C312) * C118 +
                (C117 * C313 + C50815 * C328) * C50830) *
                   C107 +
               (C377 + C378) * C108 + (C379 + C380) * C109 +
               (C381 + C382) * C110) *
                  C50734 * C1147 -
              (((C117 * C1154 + C50815 * C1162) * C50830 +
                (C117 * C1150 + C50815 * C1155) * C118) *
                   C110 +
               ((C117 * C1156 + C50815 * C1163) * C50830 +
                (C117 * C1151 + C50815 * C1157) * C118) *
                   C109 +
               ((C117 * C1158 + C50815 * C1164) * C50830 +
                (C117 * C1152 + C50815 * C1159) * C118) *
                   C108 +
               ((C117 * C1160 + C50815 * C1165) * C50830 +
                (C117 * C1153 + C50815 * C1161) * C118) *
                   C107) *
                  C50734 * C1148) *
             C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C480 -
           (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50815 * C516) * C50830 +
             (C117 * C486 + C50815 * C500) * C118) *
                C107) *
               C481 +
           (((C117 * C487 + C50815 * C501) * C118 +
             (C117 * C502 + C50815 * C517) * C50830) *
                C107 +
            (C566 + C567) * C108 + (C568 + C569) * C109 +
            (C570 + C571) * C110) *
               C482) *
              C1074 +
          ((((C117 * C932 + C50815 * C937) * C118 +
             (C117 * C938 + C50815 * C947) * C50830) *
                C107 +
            (C971 + C972) * C108 + (C973 + C974) * C109 +
            (C975 + C976) * C110) *
               C481 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50815 * C327) * C50830 +
             (C117 * C297 + C50815 * C311) * C118) *
                C107) *
               C480 -
           (((C117 * C1268 + C50815 * C1276) * C50830 +
             (C117 * C1264 + C50815 * C1269) * C118) *
                C110 +
            ((C117 * C1270 + C50815 * C1277) * C50830 +
             (C117 * C1265 + C50815 * C1271) * C118) *
                C109 +
            ((C117 * C1272 + C50815 * C1278) * C50830 +
             (C117 * C1266 + C50815 * C1273) * C118) *
                C108 +
            ((C117 * C1274 + C50815 * C1279) * C50830 +
             (C117 * C1267 + C50815 * C1275) * C118) *
                C107) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C50734 * C1074 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C50734 * C50770) *
              C1076 +
          ((((C2588 + C2587 + C2586) * C118 +
             (C2585 + C2584 + C2583) * C50830) *
                C2341 +
            ((C2947 + C2948 + C2949) * C118 +
             (C2950 + C2951 + C2952) * C50830) *
                C50678) *
               C50734 * C50770 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C50734 * C1074) *
              C1077 +
          ((((C2394 + C2393 + C2392) * C118 +
             (C2391 + C2390 + C2389) * C50830) *
                C2341 +
            ((C2395 + C2396 + C2397) * C118 +
             (C2398 + C2399 + C2400) * C50830) *
                C50678) *
               C50734 * C1074 -
           (((C2345 * C1154 + C2340 * C1162 + C2344 * C319 + C2339 * C331 +
              C2343 * C304 + C2338 * C324) *
                 C50830 +
             (C2345 * C1150 + C2340 * C1155 + C2344 * C301 + C2339 * C318 +
              C2343 * C294 + C2338 * C305) *
                 C118) *
                C50678 +
            ((C2952 + C2951 + C2950) * C50830 +
             (C2949 + C2948 + C2947) * C118) *
                C2341) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C50734 * C1145 -
          (((C2583 + C2584 + C2585) * C50830 + (C2586 + C2587 + C2588) * C118) *
               C50678 +
           ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C50830 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C118) *
               C2341) *
              C50734 * C1146 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C118 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C50830) *
               C2341 +
           ((C2589 + C2590 + C2591) * C118 + (C2592 + C2593 + C2594) * C50830) *
               C50678) *
              C50734 * C1147 -
          (((C2345 * C3586 + C2340 * C3590 + C2344 * C2552 + C2339 * C2556 +
             C2343 * C1158 + C2338 * C1164) *
                C50830 +
            (C2345 * C3584 + C2340 * C3587 + C2344 * C2547 + C2339 * C2551 +
             C2343 * C1152 + C2338 * C1159) *
                C118) *
               C50678 +
           ((C2345 * C3588 + C2340 * C3591 + C2344 * C2550 + C2339 * C2555 +
             C2343 * C1160 + C2338 * C1165) *
                C50830 +
            (C2345 * C3585 + C2340 * C3589 + C2344 * C2546 + C2339 * C2549 +
             C2343 * C1153 + C2338 * C1161) *
                C118) *
               C2341) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C480 -
           (((C2777 + C2778 + C2779) * C50830 +
             (C2780 + C2781 + C2782) * C118) *
                C50678 +
            ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
              C2343 * C499 + C2338 * C516) *
                 C50830 +
             (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
              C2343 * C486 + C2338 * C500) *
                 C118) *
                C2341) *
               C481 +
           (((C2343 * C487 + C2338 * C501 + C2344 * C1267 + C2339 * C1275 +
              C2345 * C2740 + C2340 * C2743) *
                 C118 +
             (C2343 * C502 + C2338 * C517 + C2344 * C1274 + C2339 * C1279 +
              C2345 * C2744 + C2340 * C2749) *
                 C50830) *
                C2341 +
            ((C2783 + C2784 + C2785) * C118 +
             (C2786 + C2787 + C2788) * C50830) *
                C50678) *
               C482) *
              C1074 +
          ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 + C2339 * C1622 +
              C2345 * C3310 + C2340 * C3313) *
                 C118 +
             (C2343 * C938 + C2338 * C947 + C2344 * C1621 + C2339 * C1626 +
              C2345 * C3314 + C2340 * C3319) *
                 C50830) *
                C2341 +
            ((C3335 + C3336 + C3337) * C118 +
             (C3338 + C3339 + C3340) * C50830) *
                C50678) *
               C481 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C480 -
           (((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 + C2339 * C2750 +
              C2343 * C1272 + C2338 * C1278) *
                 C50830 +
             (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 + C2339 * C2745 +
              C2343 * C1266 + C2338 * C1273) *
                 C118) *
                C50678 +
            ((C2345 * C3742 + C2340 * C3745 + C2344 * C2744 + C2339 * C2749 +
              C2343 * C1274 + C2338 * C1279) *
                 C50830 +
             (C2345 * C3739 + C2340 * C3743 + C2344 * C2740 + C2339 * C2743 +
              C2343 * C1267 + C2338 * C1275) *
                 C118) *
                C2341) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C5233 +
             (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
             C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                C2341 +
            (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
               C50734 * C1074 -
           ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
            (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 + C6161 * C5234 +
             (C117 * C310 + C50815 * C327) * C5230 +
             (C117 * C297 + C50815 * C311) * C5233) *
                C2341) *
               C50734 * C50770) *
              C1076 +
          (((C5408 + C5407 + C5406 + C5405 + C5426 + C5425) * C2341 +
            (C5783 + C5784 + C5785 + C5786 + C5793 + C5794) * C50678) *
               C50734 * C50770 -
           ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
            (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
               C50734 * C1074) *
              C1077 +
          (((C5248 + C5247 + C5246 + C5245 + C5244 + C5243) * C2341 +
            (C5249 + C5250 + C5251 + C5252 + C5253 + C5254) * C50678) *
               C50734 * C1074 -
           (((C117 * C1268 + C50815 * C1276) * C5232 +
             (C117 * C1264 + C50815 * C1269) * C5235 + C970 * C5231 +
             C969 * C5234 + C359 * C5230 + C360 * C5233) *
                C50678 +
            (C5794 + C5793 + C5786 + C5785 + C5784 + C5783) * C2341) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C5233 +
            (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
            C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
               C2341 +
           (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
              C50734 * C1145 -
          ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
           (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 + C6161 * C5234 +
            (C117 * C310 + C50815 * C327) * C5230 +
            (C117 * C297 + C50815 * C311) * C5233) *
               C2341) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C5233 +
            (C117 * C313 + C50815 * C328) * C5230 +
            (C117 * C1614 + C50815 * C1622) * C5234 +
            (C117 * C1621 + C50815 * C1626) * C5231 +
            (C117 * C2740 + C50815 * C2743) * C5235 +
            (C117 * C2744 + C50815 * C2749) * C5232) *
               C2341 +
           (C5409 + C5410 + C5427 + C5428 + C5429 + C5430) * C50678) *
              C50734 * C1147 -
          (((C117 * C3740 + C50815 * C3744) * C5232 +
            (C117 * C3738 + C50815 * C3741) * C5235 +
            (C117 * C3316 + C50815 * C3320) * C5231 +
            (C117 * C3311 + C50815 * C3315) * C5234 +
            (C117 * C1158 + C50815 * C1164) * C5230 +
            (C117 * C1152 + C50815 * C1159) * C5233) *
               C50678 +
           ((C117 * C3742 + C50815 * C3745) * C5232 +
            (C117 * C3739 + C50815 * C3743) * C5235 +
            (C117 * C3314 + C50815 * C3319) * C5231 +
            (C117 * C3310 + C50815 * C3313) * C5234 +
            (C117 * C1160 + C50815 * C1165) * C5230 +
            (C117 * C1153 + C50815 * C1161) * C5233) *
               C2341) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C5233 +
             (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
             C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                C2341 +
            (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
               C480 -
           ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
            (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 + C5621 * C5234 +
             C5620 * C5230 + C5619 * C5233) *
                C2341) *
               C481 +
           ((C5621 * C5233 + C5622 * C5230 + C5626 * C5234 + C5625 * C5231 +
             (C117 * C5576 + C50815 * C5579) * C5235 +
             (C117 * C5580 + C50815 * C5585) * C5232) *
                C2341 +
            (C5609 + C5610 + C5633 + C5634 + C5635 + C5636) * C50678) *
               C482) *
              C1074 +
          (((C6161 * C5233 + C6162 * C5230 + C6163 * C5234 + C6164 * C5231 +
             C6571 * C5235 + C6572 * C5232) *
                C2341 +
            (C6153 + C6154 + C6155 + C6156 + C6167 + C6168) * C50678) *
               C481 -
           ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
            (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 + C6161 * C5234 +
             (C117 * C310 + C50815 * C327) * C5230 +
             (C117 * C297 + C50815 * C311) * C5233) *
                C2341) *
               C480 -
           (((C117 * C6560 + C50815 * C6564) * C5232 +
             (C117 * C6558 + C50815 * C6561) * C5235 + C6166 * C5231 +
             C6165 * C5234 + C5419 * C5230 + C5420 * C5233) *
                C50678 +
            ((C117 * C6562 + C50815 * C6565) * C5232 +
             (C117 * C6559 + C50815 * C6563) * C5235 + C6572 * C5231 +
             C6571 * C5234 + C6164 * C5230 + C6163 * C5233) *
                C2341) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[38] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                       C2339 * C311 + C2345 * C298 + C2340 * C312) *
                          C118 +
                      (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                       C2339 * C327 + C2345 * C313 + C2340 * C328) *
                          C50830) *
                         C2341 +
                     ((C2383 + C2384 + C2385) * C118 +
                      (C2386 + C2387 + C2388) * C50830) *
                         C50678) *
                        C50960 -
                    (((C2777 + C2778 + C2779) * C50830 +
                      (C2780 + C2781 + C2782) * C118) *
                         C50678 +
                     ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                       C2339 * C947 + C2343 * C499 + C2338 * C516) *
                          C50830 +
                      (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                       C2339 * C937 + C2343 * C486 + C2338 * C500) *
                          C118) *
                         C2341) *
                        C50798) *
                       C1074 +
                   ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                       C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                          C118 +
                      (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                       C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                          C50830) *
                         C2341 +
                     ((C3335 + C3336 + C3337) * C118 +
                      (C3338 + C3339 + C3340) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2583 + C2584 + C2585) * C50830 +
                      (C2586 + C2587 + C2588) * C118) *
                         C50678 +
                     ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                       C2339 * C328 + C2343 * C310 + C2338 * C327) *
                          C50830 +
                      (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                       C2339 * C312 + C2343 * C297 + C2338 * C311) *
                          C118) *
                         C2341) *
                        C50960) *
                       C50770) *
                      C50951 +
                  (((((C2782 + C2781 + C2780) * C118 +
                      (C2779 + C2778 + C2777) * C50830) *
                         C2341 +
                     ((C3111 + C3112 + C3113) * C118 +
                      (C3114 + C3115 + C3116) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2389 + C2390 + C2391) * C50830 +
                      (C2392 + C2393 + C2394) * C118) *
                         C50678 +
                     ((C2388 + C2387 + C2386) * C50830 +
                      (C2385 + C2384 + C2383) * C118) *
                         C2341) *
                        C50960) *
                       C1074 +
                   ((((C2588 + C2587 + C2586) * C118 +
                      (C2585 + C2584 + C2583) * C50830) *
                         C2341 +
                     ((C2947 + C2948 + C2949) * C118 +
                      (C2950 + C2951 + C2952) * C50830) *
                         C50678) *
                        C50960 -
                    (((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 +
                       C2339 * C1624 + C2343 * C942 + C2338 * C949) *
                          C50830 +
                      (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 +
                       C2339 * C1618 + C2343 * C934 + C2338 * C941) *
                          C118) *
                         C50678 +
                     ((C3340 + C3339 + C3338) * C50830 +
                      (C3337 + C3336 + C3335) * C118) *
                         C2341) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50815 * C126) * C118 +
                      (C117 * C127 + C50815 * C140) * C50830) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C50960 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50815 * C516) * C50830 +
                      (C117 * C486 + C50815 * C500) * C118) *
                         C107) *
                        C50798) *
                       C1074 +
                   ((((C117 * C932 + C50815 * C937) * C118 +
                      (C117 * C938 + C50815 * C947) * C50830) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50798 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50815 * C327) * C50830 +
                      (C117 * C297 + C50815 * C311) * C118) *
                         C107) *
                        C50960) *
                       C50770) *
                      C50951 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50798 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C50960) *
                       C1074 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C50960 -
                    (((C117 * C945 + C50815 * C951) * C50830 +
                      (C117 * C936 + C50815 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50815 * C126) * C5233 +
                      (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                      C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                         C2341 +
                     (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                        C50960 -
                    ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
                     (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 +
                      C5621 * C5234 + C5620 * C5230 + C5619 * C5233) *
                         C2341) *
                        C50798) *
                       C1074 +
                   (((C6161 * C5233 + C6162 * C5230 + C6163 * C5234 +
                      C6164 * C5231 + C6571 * C5235 + C6572 * C5232) *
                         C2341 +
                     (C6153 + C6154 + C6155 + C6156 + C6167 + C6168) * C50678) *
                        C50798 -
                    ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
                     (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 +
                      C6161 * C5234 + (C117 * C310 + C50815 * C327) * C5230 +
                      (C117 * C297 + C50815 * C311) * C5233) *
                         C2341) *
                        C50960) *
                       C50770) *
                      C50951 +
                  ((((C5604 + C5603 + C5602 + C5601 + C5632 + C5631) * C2341 +
                     (C5941 + C5942 + C5943 + C5944 + C5945 + C5946) * C50678) *
                        C50798 -
                    ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
                     (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
                        C50960) *
                       C1074 +
                   (((C5408 + C5407 + C5406 + C5405 + C5426 + C5425) * C2341 +
                     (C5783 + C5784 + C5785 + C5786 + C5793 + C5794) * C50678) *
                        C50960 -
                    (((C117 * C6141 + C50815 * C6143) * C5232 +
                      (C117 * C6140 + C50815 * C6142) * C5235 + C5792 * C5231 +
                      C5791 * C5234 + C968 * C5230 + C967 * C5233) *
                         C50678 +
                     (C6168 + C6167 + C6156 + C6155 + C6154 + C6153) * C2341) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C118 +
            (C117 * C127 + C50815 * C140) * C50830) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50734 * C1145 -
          (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
           ((C117 * C310 + C50815 * C327) * C50830 +
            (C117 * C297 + C50815 * C311) * C118) *
               C107) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C118 +
            (C117 * C313 + C50815 * C328) * C50830) *
               C107 +
           (C377 + C378) * C108 + (C379 + C380) * C109 + (C381 + C382) * C110) *
              C50734 * C1147 -
          (((C117 * C1154 + C50815 * C1162) * C50830 +
            (C117 * C1150 + C50815 * C1155) * C118) *
               C110 +
           ((C117 * C1156 + C50815 * C1163) * C50830 +
            (C117 * C1151 + C50815 * C1157) * C118) *
               C109 +
           ((C117 * C1158 + C50815 * C1164) * C50830 +
            (C117 * C1152 + C50815 * C1159) * C118) *
               C108 +
           ((C117 * C1160 + C50815 * C1165) * C50830 +
            (C117 * C1153 + C50815 * C1161) * C118) *
               C107) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50734 * C1074 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50815 * C327) * C50830 +
             (C117 * C297 + C50815 * C311) * C118) *
                C107) *
               C50734 * C50770) *
              C1076 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            (C687 + C688) * C110) *
               C50734 * C50770 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50734 * C1074) *
              C1077 +
          ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50734 * C1074 -
           (((C117 * C675 + C50815 * C677) * C50830 +
             (C117 * C674 + C50815 * C676) * C118) *
                C110 +
            (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C50734 * C1074 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C50734 * C50770) *
              C1076 +
          ((((C2588 + C2587 + C2586) * C118 +
             (C2585 + C2584 + C2583) * C50830) *
                C2341 +
            ((C2947 + C2948 + C2949) * C118 +
             (C2950 + C2951 + C2952) * C50830) *
                C50678) *
               C50734 * C50770 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C50734 * C1074) *
              C1077 +
          ((((C2394 + C2393 + C2392) * C118 +
             (C2391 + C2390 + C2389) * C50830) *
                C2341 +
            ((C2395 + C2396 + C2397) * C118 +
             (C2398 + C2399 + C2400) * C50830) *
                C50678) *
               C50734 * C1074 -
           (((C2345 * C1154 + C2340 * C1162 + C2344 * C319 + C2339 * C331 +
              C2343 * C304 + C2338 * C324) *
                 C50830 +
             (C2345 * C1150 + C2340 * C1155 + C2344 * C301 + C2339 * C318 +
              C2343 * C294 + C2338 * C305) *
                 C118) *
                C50678 +
            ((C2952 + C2951 + C2950) * C50830 +
             (C2949 + C2948 + C2947) * C118) *
                C2341) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C50734 * C1145 -
          (((C2583 + C2584 + C2585) * C50830 + (C2586 + C2587 + C2588) * C118) *
               C50678 +
           ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C50830 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C118) *
               C2341) *
              C50734 * C1146 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C118 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C50830) *
               C2341 +
           ((C2589 + C2590 + C2591) * C118 + (C2592 + C2593 + C2594) * C50830) *
               C50678) *
              C50734 * C1147 -
          (((C2345 * C3586 + C2340 * C3590 + C2344 * C2552 + C2339 * C2556 +
             C2343 * C1158 + C2338 * C1164) *
                C50830 +
            (C2345 * C3584 + C2340 * C3587 + C2344 * C2547 + C2339 * C2551 +
             C2343 * C1152 + C2338 * C1159) *
                C118) *
               C50678 +
           ((C2345 * C3588 + C2340 * C3591 + C2344 * C2550 + C2339 * C2555 +
             C2343 * C1160 + C2338 * C1165) *
                C50830 +
            (C2345 * C3585 + C2340 * C3589 + C2344 * C2546 + C2339 * C2549 +
             C2343 * C1153 + C2338 * C1161) *
                C118) *
               C2341) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C5233 +
             (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
             C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                C2341 +
            (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
               C50734 * C1074 -
           ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
            (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 + C6161 * C5234 +
             (C117 * C310 + C50815 * C327) * C5230 +
             (C117 * C297 + C50815 * C311) * C5233) *
                C2341) *
               C50734 * C50770) *
              C1076 +
          (((C5408 + C5407 + C5406 + C5405 + C5426 + C5425) * C2341 +
            (C5783 + C5784 + C5785 + C5786 + C5793 + C5794) * C50678) *
               C50734 * C50770 -
           ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
            (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
               C50734 * C1074) *
              C1077 +
          (((C5248 + C5247 + C5246 + C5245 + C5244 + C5243) * C2341 +
            (C5249 + C5250 + C5251 + C5252 + C5253 + C5254) * C50678) *
               C50734 * C1074 -
           (((C117 * C1268 + C50815 * C1276) * C5232 +
             (C117 * C1264 + C50815 * C1269) * C5235 + C970 * C5231 +
             C969 * C5234 + C359 * C5230 + C360 * C5233) *
                C50678 +
            (C5794 + C5793 + C5786 + C5785 + C5784 + C5783) * C2341) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C5233 +
            (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
            C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
               C2341 +
           (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
              C50734 * C1145 -
          ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
           (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 + C6161 * C5234 +
            (C117 * C310 + C50815 * C327) * C5230 +
            (C117 * C297 + C50815 * C311) * C5233) *
               C2341) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C5233 +
            (C117 * C313 + C50815 * C328) * C5230 +
            (C117 * C1614 + C50815 * C1622) * C5234 +
            (C117 * C1621 + C50815 * C1626) * C5231 +
            (C117 * C2740 + C50815 * C2743) * C5235 +
            (C117 * C2744 + C50815 * C2749) * C5232) *
               C2341 +
           (C5409 + C5410 + C5427 + C5428 + C5429 + C5430) * C50678) *
              C50734 * C1147 -
          (((C117 * C3740 + C50815 * C3744) * C5232 +
            (C117 * C3738 + C50815 * C3741) * C5235 +
            (C117 * C3316 + C50815 * C3320) * C5231 +
            (C117 * C3311 + C50815 * C3315) * C5234 +
            (C117 * C1158 + C50815 * C1164) * C5230 +
            (C117 * C1152 + C50815 * C1159) * C5233) *
               C50678 +
           ((C117 * C3742 + C50815 * C3745) * C5232 +
            (C117 * C3739 + C50815 * C3743) * C5235 +
            (C117 * C3314 + C50815 * C3319) * C5231 +
            (C117 * C3310 + C50815 * C3313) * C5234 +
            (C117 * C1160 + C50815 * C1165) * C5230 +
            (C117 * C1153 + C50815 * C1161) * C5233) *
               C2341) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[40] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                       C2339 * C311 + C2345 * C298 + C2340 * C312) *
                          C118 +
                      (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                       C2339 * C327 + C2345 * C313 + C2340 * C328) *
                          C50830) *
                         C2341 +
                     ((C2383 + C2384 + C2385) * C118 +
                      (C2386 + C2387 + C2388) * C50830) *
                         C50678) *
                        C1725 -
                    (((C2777 + C2778 + C2779) * C50830 +
                      (C2780 + C2781 + C2782) * C118) *
                         C50678 +
                     ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                       C2339 * C947 + C2343 * C499 + C2338 * C516) *
                          C50830 +
                      (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                       C2339 * C937 + C2343 * C486 + C2338 * C500) *
                          C118) *
                         C2341) *
                        C50798) *
                       C50959 +
                   ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                       C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                          C118 +
                      (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                       C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                          C50830) *
                         C2341 +
                     ((C3335 + C3336 + C3337) * C118 +
                      (C3338 + C3339 + C3340) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2583 + C2584 + C2585) * C50830 +
                      (C2586 + C2587 + C2588) * C118) *
                         C50678 +
                     ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                       C2339 * C328 + C2343 * C310 + C2338 * C327) *
                          C50830 +
                      (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                       C2339 * C312 + C2343 * C297 + C2338 * C311) *
                          C118) *
                         C2341) *
                        C1725) *
                       C50770) *
                      C50951 +
                  (((((C2782 + C2781 + C2780) * C118 +
                      (C2779 + C2778 + C2777) * C50830) *
                         C2341 +
                     ((C3111 + C3112 + C3113) * C118 +
                      (C3114 + C3115 + C3116) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2389 + C2390 + C2391) * C50830 +
                      (C2392 + C2393 + C2394) * C118) *
                         C50678 +
                     ((C2388 + C2387 + C2386) * C50830 +
                      (C2385 + C2384 + C2383) * C118) *
                         C2341) *
                        C1725) *
                       C50959 +
                   ((((C2588 + C2587 + C2586) * C118 +
                      (C2585 + C2584 + C2583) * C50830) *
                         C2341 +
                     ((C2947 + C2948 + C2949) * C118 +
                      (C2950 + C2951 + C2952) * C50830) *
                         C50678) *
                        C1725 -
                    (((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 +
                       C2339 * C1624 + C2343 * C942 + C2338 * C949) *
                          C50830 +
                      (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 +
                       C2339 * C1618 + C2343 * C934 + C2338 * C941) *
                          C118) *
                         C50678 +
                     ((C3340 + C3339 + C3338) * C50830 +
                      (C3337 + C3336 + C3335) * C118) *
                         C2341) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50815 * C126) * C118 +
                      (C117 * C127 + C50815 * C140) * C50830) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C1725 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50815 * C516) * C50830 +
                      (C117 * C486 + C50815 * C500) * C118) *
                         C107) *
                        C50798) *
                       C50959 +
                   ((((C117 * C932 + C50815 * C937) * C118 +
                      (C117 * C938 + C50815 * C947) * C50830) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50798 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50815 * C327) * C50830 +
                      (C117 * C297 + C50815 * C311) * C118) *
                         C107) *
                        C1725) *
                       C50770) *
                      C50951 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50798 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C1725) *
                       C50959 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C1725 -
                    (((C117 * C945 + C50815 * C951) * C50830 +
                      (C117 * C936 + C50815 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50815 * C126) * C5233 +
                      (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                      C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                         C2341 +
                     (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                        C1725 -
                    ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
                     (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 +
                      C5621 * C5234 + C5620 * C5230 + C5619 * C5233) *
                         C2341) *
                        C50798) *
                       C50959 +
                   (((C6161 * C5233 + C6162 * C5230 + C6163 * C5234 +
                      C6164 * C5231 + C6571 * C5235 + C6572 * C5232) *
                         C2341 +
                     (C6153 + C6154 + C6155 + C6156 + C6167 + C6168) * C50678) *
                        C50798 -
                    ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
                     (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 +
                      C6161 * C5234 + (C117 * C310 + C50815 * C327) * C5230 +
                      (C117 * C297 + C50815 * C311) * C5233) *
                         C2341) *
                        C1725) *
                       C50770) *
                      C50951 +
                  ((((C5604 + C5603 + C5602 + C5601 + C5632 + C5631) * C2341 +
                     (C5941 + C5942 + C5943 + C5944 + C5945 + C5946) * C50678) *
                        C50798 -
                    ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
                     (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
                        C1725) *
                       C50959 +
                   (((C5408 + C5407 + C5406 + C5405 + C5426 + C5425) * C2341 +
                     (C5783 + C5784 + C5785 + C5786 + C5793 + C5794) * C50678) *
                        C1725 -
                    (((C117 * C6141 + C50815 * C6143) * C5232 +
                      (C117 * C6140 + C50815 * C6142) * C5235 + C5792 * C5231 +
                      C5791 * C5234 + C968 * C5230 + C967 * C5233) *
                         C50678 +
                     (C6168 + C6167 + C6156 + C6155 + C6154 + C6153) * C2341) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[41] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C51006 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C51007 +
                   (((C2343 * C487 + C2338 * C501 + C2344 * C1267 +
                      C2339 * C1275 + C2345 * C2740 + C2340 * C2743) *
                         C118 +
                     (C2343 * C502 + C2338 * C517 + C2344 * C1274 +
                      C2339 * C1279 + C2345 * C2744 + C2340 * C2749) *
                         C50830) *
                        C2341 +
                    ((C2783 + C2784 + C2785) * C118 +
                     (C2786 + C2787 + C2788) * C50830) *
                        C50678) *
                       C2141) *
                      C50959 +
                  ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                      C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                         C118 +
                     (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                      C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                         C50830) *
                        C2341 +
                    ((C3335 + C3336 + C3337) * C118 +
                     (C3338 + C3339 + C3340) * C50830) *
                        C50678) *
                       C51007 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C51006 -
                   (((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 +
                      C2339 * C2750 + C2343 * C1272 + C2338 * C1278) *
                         C50830 +
                     (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 +
                      C2339 * C2745 + C2343 * C1266 + C2338 * C1273) *
                         C118) *
                        C50678 +
                    ((C2345 * C3742 + C2340 * C3745 + C2344 * C2744 +
                      C2339 * C2749 + C2343 * C1274 + C2338 * C1279) *
                         C50830 +
                     (C2345 * C3739 + C2340 * C3743 + C2344 * C2740 +
                      C2339 * C2743 + C2343 * C1267 + C2338 * C1275) *
                         C118) *
                        C2341) *
                       C2141) *
                      C50770) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C51006 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C51007 +
                   (((C117 * C487 + C50815 * C501) * C118 +
                     (C117 * C502 + C50815 * C517) * C50830) *
                        C107 +
                    (C566 + C567) * C108 + (C568 + C569) * C109 +
                    (C570 + C571) * C110) *
                       C2141) *
                      C50959 +
                  ((((C117 * C932 + C50815 * C937) * C118 +
                     (C117 * C938 + C50815 * C947) * C50830) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C51007 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C51006 -
                   (((C117 * C1268 + C50815 * C1276) * C50830 +
                     (C117 * C1264 + C50815 * C1269) * C118) *
                        C110 +
                    ((C117 * C1270 + C50815 * C1277) * C50830 +
                     (C117 * C1265 + C50815 * C1271) * C118) *
                        C109 +
                    ((C117 * C1272 + C50815 * C1278) * C50830 +
                     (C117 * C1266 + C50815 * C1273) * C118) *
                        C108 +
                    ((C117 * C1274 + C50815 * C1279) * C50830 +
                     (C117 * C1267 + C50815 * C1275) * C118) *
                        C107) *
                       C2141) *
                      C50770) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C5233 +
                     (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                     C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                        C2341 +
                    (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                       C51006 -
                   ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
                    (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 +
                     C5621 * C5234 + C5620 * C5230 + C5619 * C5233) *
                        C2341) *
                       C51007 +
                   ((C5621 * C5233 + C5622 * C5230 + C5626 * C5234 +
                     C5625 * C5231 + C7473 * C5235 + C7474 * C5232) *
                        C2341 +
                    (C5609 + C5610 + C5633 + C5634 + C5635 + C5636) * C50678) *
                       C2141) *
                      C50959 +
                  (((C6161 * C5233 + C6162 * C5230 + C6163 * C5234 +
                     C6164 * C5231 + C6571 * C5235 + C6572 * C5232) *
                        C2341 +
                    (C6153 + C6154 + C6155 + C6156 + C6167 + C6168) * C50678) *
                       C51007 -
                   ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
                    (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 +
                     C6161 * C5234 + (C117 * C310 + C50815 * C327) * C5230 +
                     (C117 * C297 + C50815 * C311) * C5233) *
                        C2341) *
                       C51006 -
                   (((C117 * C6560 + C50815 * C6564) * C5232 +
                     (C117 * C6558 + C50815 * C6561) * C5235 + C6166 * C5231 +
                     C6165 * C5234 + C5419 * C5230 + C5420 * C5233) *
                        C50678 +
                    ((C117 * C6562 + C50815 * C6565) * C5232 +
                     (C117 * C6559 + C50815 * C6563) * C5235 + C6572 * C5231 +
                     C6571 * C5234 + C6164 * C5230 + C6163 * C5233) *
                        C2341) *
                       C2141) *
                      C50770) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50815 * C126) * C118 +
                 (C117 * C127 + C50815 * C140) * C50830) *
                    C107 +
                (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                   C1725 -
               (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                ((C117 * C499 + C50815 * C516) * C50830 +
                 (C117 * C486 + C50815 * C500) * C118) *
                    C107) *
                   C50798) *
                  C50718 * C1076 +
              (((C565 + C564) * C107 + (C563 + C562) * C108 +
                (C561 + C560) * C109 + (C801 + C802) * C110) *
                   C50798 -
               (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                (C179 + C178) * C107) *
                   C1725) *
                  C50718 * C1077 +
              ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                (C186 + C187) * C110) *
                   C1725 -
               (((C117 * C789 + C50815 * C791) * C50830 +
                 (C117 * C788 + C50815 * C790) * C118) *
                    C110 +
                (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                   C50798) *
                  C50718 * C1078) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50815 * C126) * C118 +
                 (C117 * C127 + C50815 * C140) * C50830) *
                    C107 +
                (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                   C1725 -
               (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                ((C117 * C499 + C50815 * C516) * C50830 +
                 (C117 * C486 + C50815 * C500) * C118) *
                    C107) *
                   C50798) *
                  C289 +
              ((((C117 * C932 + C50815 * C937) * C118 +
                 (C117 * C938 + C50815 * C947) * C50830) *
                    C107 +
                (C971 + C972) * C108 + (C973 + C974) * C109 +
                (C975 + C976) * C110) *
                   C50798 -
               (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                ((C117 * C310 + C50815 * C327) * C50830 +
                 (C117 * C297 + C50815 * C311) * C118) *
                    C107) *
                   C1725) *
                  C290 +
              ((((C117 * C298 + C50815 * C312) * C118 +
                 (C117 * C313 + C50815 * C328) * C50830) *
                    C107 +
                (C377 + C378) * C108 + (C379 + C380) * C109 +
                (C381 + C382) * C110) *
                   C1725 -
               (((C117 * C1615 + C50815 * C1623) * C50830 +
                 (C117 * C1611 + C50815 * C1616) * C118) *
                    C110 +
                ((C117 * C1617 + C50815 * C1624) * C50830 +
                 (C117 * C1612 + C50815 * C1618) * C118) *
                    C109 +
                ((C117 * C1619 + C50815 * C1625) * C50830 +
                 (C117 * C1613 + C50815 * C1620) * C118) *
                    C108 +
                ((C117 * C1621 + C50815 * C1626) * C50830 +
                 (C117 * C1614 + C50815 * C1622) * C118) *
                    C107) *
                   C50798) *
                  C291) *
             C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C118 +
            (C117 * C127 + C50815 * C140) * C50830) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C1891 -
          (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
           ((C117 * C499 + C50815 * C516) * C50830 +
            (C117 * C486 + C50815 * C500) * C118) *
               C107) *
              C1892 +
          (((C117 * C487 + C50815 * C501) * C118 +
            (C117 * C502 + C50815 * C517) * C50830) *
               C107 +
           (C566 + C567) * C108 + (C568 + C569) * C109 + (C570 + C571) * C110) *
              C1893 -
          (((C117 * C1899 + C50815 * C1907) * C50830 +
            (C117 * C1895 + C50815 * C1900) * C118) *
               C110 +
           ((C117 * C1901 + C50815 * C1908) * C50830 +
            (C117 * C1896 + C50815 * C1902) * C118) *
               C109 +
           ((C117 * C1903 + C50815 * C1909) * C50830 +
            (C117 * C1897 + C50815 * C1904) * C118) *
               C108 +
           ((C117 * C1905 + C50815 * C1910) * C50830 +
            (C117 * C1898 + C50815 * C1906) * C118) *
               C107) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C1725 -
           (((C2777 + C2778 + C2779) * C50830 +
             (C2780 + C2781 + C2782) * C118) *
                C50678 +
            ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
              C2343 * C499 + C2338 * C516) *
                 C50830 +
             (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
              C2343 * C486 + C2338 * C500) *
                 C118) *
                C2341) *
               C50798) *
              C50718 * C1076 +
          ((((C2782 + C2781 + C2780) * C118 +
             (C2779 + C2778 + C2777) * C50830) *
                C2341 +
            ((C3111 + C3112 + C3113) * C118 +
             (C3114 + C3115 + C3116) * C50830) *
                C50678) *
               C50798 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C1725) *
              C50718 * C1077 +
          ((((C2394 + C2393 + C2392) * C118 +
             (C2391 + C2390 + C2389) * C50830) *
                C2341 +
            ((C2395 + C2396 + C2397) * C118 +
             (C2398 + C2399 + C2400) * C50830) *
                C50678) *
               C1725 -
           (((C2345 * C1615 + C2340 * C1623 + C2344 * C944 + C2339 * C950 +
              C2343 * C493 + C2338 * C513) *
                 C50830 +
             (C2345 * C1611 + C2340 * C1616 + C2344 * C935 + C2339 * C943 +
              C2343 * C483 + C2338 * C494) *
                 C118) *
                C50678 +
            ((C3116 + C3115 + C3114) * C50830 +
             (C3113 + C3112 + C3111) * C118) *
                C2341) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C1725 -
           (((C2777 + C2778 + C2779) * C50830 +
             (C2780 + C2781 + C2782) * C118) *
                C50678 +
            ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
              C2343 * C499 + C2338 * C516) *
                 C50830 +
             (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
              C2343 * C486 + C2338 * C500) *
                 C118) *
                C2341) *
               C50798) *
              C289 +
          ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 + C2339 * C1622 +
              C2345 * C3310 + C2340 * C3313) *
                 C118 +
             (C2343 * C938 + C2338 * C947 + C2344 * C1621 + C2339 * C1626 +
              C2345 * C3314 + C2340 * C3319) *
                 C50830) *
                C2341 +
            ((C3335 + C3336 + C3337) * C118 +
             (C3338 + C3339 + C3340) * C50830) *
                C50678) *
               C50798 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C1725) *
              C290 +
          ((((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
              C2345 * C2546 + C2340 * C2549) *
                 C118 +
             (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
              C2345 * C2550 + C2340 * C2555) *
                 C50830) *
                C2341 +
            ((C2589 + C2590 + C2591) * C118 +
             (C2592 + C2593 + C2594) * C50830) *
                C50678) *
               C1725 -
           (((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 + C2339 * C3320 +
              C2343 * C1619 + C2338 * C1625) *
                 C50830 +
             (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 + C2339 * C3315 +
              C2343 * C1613 + C2338 * C1620) *
                 C118) *
                C50678 +
            ((C2345 * C4236 + C2340 * C4239 + C2344 * C3314 + C2339 * C3319 +
              C2343 * C1621 + C2338 * C1626) *
                 C50830 +
             (C2345 * C4233 + C2340 * C4237 + C2344 * C3310 + C2339 * C3313 +
              C2343 * C1614 + C2338 * C1622) *
                 C118) *
                C2341) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C1891 -
          (((C2777 + C2778 + C2779) * C50830 + (C2780 + C2781 + C2782) * C118) *
               C50678 +
           ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
             C2343 * C499 + C2338 * C516) *
                C50830 +
            (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
             C2343 * C486 + C2338 * C500) *
                C118) *
               C2341) *
              C1892 +
          (((C2343 * C487 + C2338 * C501 + C2344 * C1267 + C2339 * C1275 +
             C2345 * C2740 + C2340 * C2743) *
                C118 +
            (C2343 * C502 + C2338 * C517 + C2344 * C1274 + C2339 * C1279 +
             C2345 * C2744 + C2340 * C2749) *
                C50830) *
               C2341 +
           ((C2783 + C2784 + C2785) * C118 + (C2786 + C2787 + C2788) * C50830) *
               C50678) *
              C1893 -
          (((C2345 * C4634 + C2340 * C4642 + C2344 * C4635 + C2339 * C4643 +
             C2343 * C1903 + C2338 * C1909) *
                C50830 +
            (C2345 * C4630 + C2340 * C4636 + C2344 * C4631 + C2339 * C4637 +
             C2343 * C1897 + C2338 * C1904) *
                C118) *
               C50678 +
           ((C2345 * C4638 + C2340 * C4644 + C2344 * C4639 + C2339 * C4645 +
             C2343 * C1905 + C2338 * C1910) *
                C50830 +
            (C2345 * C4632 + C2340 * C4640 + C2344 * C4633 + C2339 * C4641 +
             C2343 * C1898 + C2338 * C1906) *
                C118) *
               C2341) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C5233 +
             (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
             C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                C2341 +
            (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
               C1725 -
           ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
            (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 + C5621 * C5234 +
             C5620 * C5230 + C5619 * C5233) *
                C2341) *
               C50798) *
              C50718 * C1076 +
          (((C5604 + C5603 + C5602 + C5601 + C5632 + C5631) * C2341 +
            (C5941 + C5942 + C5943 + C5944 + C5945 + C5946) * C50678) *
               C50798 -
           ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
            (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
               C1725) *
              C50718 * C1077 +
          (((C5248 + C5247 + C5246 + C5245 + C5244 + C5243) * C2341 +
            (C5249 + C5250 + C5251 + C5252 + C5253 + C5254) * C50678) *
               C1725 -
           (((C117 * C1899 + C50815 * C1907) * C5232 +
             (C117 * C1895 + C50815 * C1900) * C5235 + C559 * C5231 +
             C558 * C5234 + C548 * C5230 + C549 * C5233) *
                C50678 +
            (C5946 + C5945 + C5944 + C5943 + C5942 + C5941) * C2341) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C5233 +
             (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
             C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                C2341 +
            (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
               C1725 -
           ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
            (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 + C5621 * C5234 +
             C5620 * C5230 + C5619 * C5233) *
                C2341) *
               C50798) *
              C289 +
          (((C6161 * C5233 + C6162 * C5230 + C6163 * C5234 + C6164 * C5231 +
             C6571 * C5235 + C6572 * C5232) *
                C2341 +
            (C6153 + C6154 + C6155 + C6156 + C6167 + C6168) * C50678) *
               C50798 -
           ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
            (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 + C6161 * C5234 +
             (C117 * C310 + C50815 * C327) * C5230 +
             (C117 * C297 + C50815 * C311) * C5233) *
                C2341) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50815 * C312) * C5233 +
             (C117 * C313 + C50815 * C328) * C5230 + C7067 * C5234 +
             C7068 * C5231 + C7069 * C5235 + C7070 * C5232) *
                C2341 +
            (C5409 + C5410 + C5427 + C5428 + C5429 + C5430) * C50678) *
               C1725 -
           (((C117 * C4634 + C50815 * C4642) * C5232 +
             (C117 * C4630 + C50815 * C4636) * C5235 + C5424 * C5231 +
             C5423 * C5234 + C5422 * C5230 + C5421 * C5233) *
                C50678 +
            ((C117 * C4638 + C50815 * C4644) * C5232 +
             (C117 * C4632 + C50815 * C4640) * C5235 + C7070 * C5231 +
             C7069 * C5234 + C7068 * C5230 + C7067 * C5233) *
                C2341) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C5233 +
            (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
            C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
               C2341 +
           (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
              C1891 -
          ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
           (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 + C5621 * C5234 +
            C5620 * C5230 + C5619 * C5233) *
               C2341) *
              C1892 +
          ((C5621 * C5233 + C5622 * C5230 + C5626 * C5234 + C5625 * C5231 +
            C7473 * C5235 + C7474 * C5232) *
               C2341 +
           (C5609 + C5610 + C5633 + C5634 + C5635 + C5636) * C50678) *
              C1893 -
          (((C117 * C7462 + C50815 * C7466) * C5232 +
            (C117 * C7460 + C50815 * C7463) * C5235 + C5628 * C5231 +
            C5627 * C5234 + C5623 * C5230 + C5624 * C5233) *
               C50678 +
           ((C117 * C7464 + C50815 * C7467) * C5232 +
            (C117 * C7461 + C50815 * C7465) * C5235 + C7474 * C5231 +
            C7473 * C5234 + C5625 * C5230 + C5626 * C5233) *
               C2341) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[43] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C51006 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C51007 +
                   (((C2343 * C487 + C2338 * C501 + C2344 * C1267 +
                      C2339 * C1275 + C2345 * C2740 + C2340 * C2743) *
                         C118 +
                     (C2343 * C502 + C2338 * C517 + C2344 * C1274 +
                      C2339 * C1279 + C2345 * C2744 + C2340 * C2749) *
                         C50830) *
                        C2341 +
                    ((C2783 + C2784 + C2785) * C118 +
                     (C2786 + C2787 + C2788) * C50830) *
                        C50678) *
                       C2141) *
                      C50718 * C50951 +
                  ((((C2782 + C2781 + C2780) * C118 +
                     (C2779 + C2778 + C2777) * C50830) *
                        C2341 +
                    ((C3111 + C3112 + C3113) * C118 +
                     (C3114 + C3115 + C3116) * C50830) *
                        C50678) *
                       C51007 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C51006 -
                   (((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 +
                      C2339 * C1277 + C2343 * C506 + C2338 * C519) *
                         C50830 +
                     (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 +
                      C2339 * C1271 + C2343 * C489 + C2338 * C505) *
                         C118) *
                        C50678 +
                    ((C2788 + C2787 + C2786) * C50830 +
                     (C2785 + C2784 + C2783) * C118) *
                        C2341) *
                       C2141) *
                      C50718 * C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C51006 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C51007 +
                   (((C117 * C487 + C50815 * C501) * C118 +
                     (C117 * C502 + C50815 * C517) * C50830) *
                        C107 +
                    (C566 + C567) * C108 + (C568 + C569) * C109 +
                    (C570 + C571) * C110) *
                       C2141) *
                      C50718 * C50951 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C51007 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C51006 -
                   (((C117 * C511 + C50815 * C522) * C50830 +
                     (C117 * C492 + C50815 * C512) * C118) *
                        C110 +
                    (C571 + C570) * C109 + (C569 + C568) * C108 +
                    (C567 + C566) * C107) *
                       C2141) *
                      C50718 * C50705)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C5233 +
                     (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                     C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                        C2341 +
                    (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                       C51006 -
                   ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
                    (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 +
                     C5621 * C5234 + C5620 * C5230 + C5619 * C5233) *
                        C2341) *
                       C51007 +
                   ((C5621 * C5233 + C5622 * C5230 + C5626 * C5234 +
                     C5625 * C5231 + C7473 * C5235 + C7474 * C5232) *
                        C2341 +
                    (C5609 + C5610 + C5633 + C5634 + C5635 + C5636) * C50678) *
                       C2141) *
                      C50718 * C50951 +
                  (((C5604 + C5603 + C5602 + C5601 + C5632 + C5631) * C2341 +
                    (C5941 + C5942 + C5943 + C5944 + C5945 + C5946) * C50678) *
                       C51007 -
                   ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
                    (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
                       C51006 -
                   (((C117 * C5583 + C50815 * C5587) * C5232 +
                     (C117 * C5578 + C50815 * C5584) * C5235 + C5630 * C5231 +
                     C5629 * C5234 + C557 * C5230 + C556 * C5233) *
                        C50678 +
                    (C5636 + C5635 + C5634 + C5633 + C5610 + C5609) * C2341) *
                       C2141) *
                      C50718 * C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[44] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C1725 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C50798) *
                      C289 +
                  ((((C117 * C932 + C50815 * C937) * C118 +
                     (C117 * C938 + C50815 * C947) * C50830) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50798 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C1725) *
                      C290 +
                  ((((C117 * C298 + C50815 * C312) * C118 +
                     (C117 * C313 + C50815 * C328) * C50830) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C1725 -
                   (((C117 * C1615 + C50815 * C1623) * C50830 +
                     (C117 * C1611 + C50815 * C1616) * C118) *
                        C110 +
                    ((C117 * C1617 + C50815 * C1624) * C50830 +
                     (C117 * C1612 + C50815 * C1618) * C118) *
                        C109 +
                    ((C117 * C1619 + C50815 * C1625) * C50830 +
                     (C117 * C1613 + C50815 * C1620) * C118) *
                        C108 +
                    ((C117 * C1621 + C50815 * C1626) * C50830 +
                     (C117 * C1614 + C50815 * C1622) * C118) *
                        C107) *
                       C50798) *
                      C291) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C1725 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C50798) *
                      C50718 * C1076 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50798 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C1725) *
                      C50718 * C1077 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C1725 -
                   (((C117 * C789 + C50815 * C791) * C50830 +
                     (C117 * C788 + C50815 * C790) * C118) *
                        C110 +
                    (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                       C50798) *
                      C50718 * C1078)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C1725 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C50798) *
                      C50718 * C1076 +
                  ((((C2782 + C2781 + C2780) * C118 +
                     (C2779 + C2778 + C2777) * C50830) *
                        C2341 +
                    ((C3111 + C3112 + C3113) * C118 +
                     (C3114 + C3115 + C3116) * C50830) *
                        C50678) *
                       C50798 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C1725) *
                      C50718 * C1077 +
                  ((((C2394 + C2393 + C2392) * C118 +
                     (C2391 + C2390 + C2389) * C50830) *
                        C2341 +
                    ((C2395 + C2396 + C2397) * C118 +
                     (C2398 + C2399 + C2400) * C50830) *
                        C50678) *
                       C1725 -
                   (((C2345 * C1615 + C2340 * C1623 + C2344 * C944 +
                      C2339 * C950 + C2343 * C493 + C2338 * C513) *
                         C50830 +
                     (C2345 * C1611 + C2340 * C1616 + C2344 * C935 +
                      C2339 * C943 + C2343 * C483 + C2338 * C494) *
                         C118) *
                        C50678 +
                    ((C3116 + C3115 + C3114) * C50830 +
                     (C3113 + C3112 + C3111) * C118) *
                        C2341) *
                       C50798) *
                      C50718 * C1078)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C1725 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C50798) *
                      C289 +
                  ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                      C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                         C118 +
                     (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                      C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                         C50830) *
                        C2341 +
                    ((C3335 + C3336 + C3337) * C118 +
                     (C3338 + C3339 + C3340) * C50830) *
                        C50678) *
                       C50798 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C1725) *
                      C290 +
                  ((((C2343 * C298 + C2338 * C312 + C2344 * C1153 +
                      C2339 * C1161 + C2345 * C2546 + C2340 * C2549) *
                         C118 +
                     (C2343 * C313 + C2338 * C328 + C2344 * C1160 +
                      C2339 * C1165 + C2345 * C2550 + C2340 * C2555) *
                         C50830) *
                        C2341 +
                    ((C2589 + C2590 + C2591) * C118 +
                     (C2592 + C2593 + C2594) * C50830) *
                        C50678) *
                       C1725 -
                   (((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 +
                      C2339 * C3320 + C2343 * C1619 + C2338 * C1625) *
                         C50830 +
                     (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 +
                      C2339 * C3315 + C2343 * C1613 + C2338 * C1620) *
                         C118) *
                        C50678 +
                    ((C2345 * C4236 + C2340 * C4239 + C2344 * C3314 +
                      C2339 * C3319 + C2343 * C1621 + C2338 * C1626) *
                         C50830 +
                     (C2345 * C4233 + C2340 * C4237 + C2344 * C3310 +
                      C2339 * C3313 + C2343 * C1614 + C2338 * C1622) *
                         C118) *
                        C2341) *
                       C50798) *
                      C291) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C5233 +
                     (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                     C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                        C2341 +
                    (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                       C1725 -
                   ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
                    (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 +
                     C5621 * C5234 + C5620 * C5230 + C5619 * C5233) *
                        C2341) *
                       C50798) *
                      C50718 * C1076 +
                  (((C5604 + C5603 + C5602 + C5601 + C5632 + C5631) * C2341 +
                    (C5941 + C5942 + C5943 + C5944 + C5945 + C5946) * C50678) *
                       C50798 -
                   ((C5243 + C5244 + C5245 + C5246 + C5247 + C5248) * C50678 +
                    (C5242 + C5241 + C5240 + C5239 + C5238 + C5237) * C2341) *
                       C1725) *
                      C50718 * C1077 +
                  (((C5248 + C5247 + C5246 + C5245 + C5244 + C5243) * C2341 +
                    (C5249 + C5250 + C5251 + C5252 + C5253 + C5254) * C50678) *
                       C1725 -
                   (((C117 * C1899 + C50815 * C1907) * C5232 +
                     (C117 * C1895 + C50815 * C1900) * C5235 + C559 * C5231 +
                     C558 * C5234 + C548 * C5230 + C549 * C5233) *
                        C50678 +
                    (C5946 + C5945 + C5944 + C5943 + C5942 + C5941) * C2341) *
                       C50798) *
                      C50718 * C1078)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C5233 +
                     (C117 * C127 + C50815 * C140) * C5230 + C5619 * C5234 +
                     C5620 * C5231 + C5621 * C5235 + C5622 * C5232) *
                        C2341 +
                    (C5237 + C5238 + C5239 + C5240 + C5241 + C5242) * C50678) *
                       C1725 -
                   ((C5631 + C5632 + C5601 + C5602 + C5603 + C5604) * C50678 +
                    (C5625 * C5232 + C5626 * C5235 + C5622 * C5231 +
                     C5621 * C5234 + C5620 * C5230 + C5619 * C5233) *
                        C2341) *
                       C50798) *
                      C289 +
                  (((C6161 * C5233 + C6162 * C5230 + C6163 * C5234 +
                     C6164 * C5231 + C6571 * C5235 + C6572 * C5232) *
                        C2341 +
                    (C6153 + C6154 + C6155 + C6156 + C6167 + C6168) * C50678) *
                       C50798 -
                   ((C5425 + C5426 + C5405 + C5406 + C5407 + C5408) * C50678 +
                    (C6164 * C5232 + C6163 * C5235 + C6162 * C5231 +
                     C6161 * C5234 + (C117 * C310 + C50815 * C327) * C5230 +
                     (C117 * C297 + C50815 * C311) * C5233) *
                        C2341) *
                       C1725) *
                      C290 +
                  ((((C117 * C298 + C50815 * C312) * C5233 +
                     (C117 * C313 + C50815 * C328) * C5230 + C7067 * C5234 +
                     C7068 * C5231 + C7069 * C5235 + C7070 * C5232) *
                        C2341 +
                    (C5409 + C5410 + C5427 + C5428 + C5429 + C5430) * C50678) *
                       C1725 -
                   (((C117 * C4634 + C50815 * C4642) * C5232 +
                     (C117 * C4630 + C50815 * C4636) * C5235 + C5424 * C5231 +
                     C5423 * C5234 + C5422 * C5230 + C5421 * C5233) *
                        C50678 +
                    ((C117 * C4638 + C50815 * C4644) * C5232 +
                     (C117 * C4632 + C50815 * C4640) * C5235 + C7070 * C5231 +
                     C7069 * C5234 + C7068 * C5230 + C7067 * C5233) *
                        C2341) *
                       C50798) *
                      C291) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C50734 * C50959 -
           (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C50734 * C50770) *
              C51002 +
          (((C11085 + C11084 + C11083 + C11082) * C51000 +
            (C11081 + C11080 + C11079 + C11078) * C51001 +
            (C11409 + C11410 + C11411 + C11412) * C8062) *
               C50734 * C50770 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C50734 * C50959) *
              C51003 +
          ((C10930 * C51000 + (C10921 + C10920 + C10919 + C10918) * C51001 +
            (C10922 + C10923 + C10924 + C10925) * C8062) *
               C50734 * C50959 -
           (((C117 * C945 + C50815 * C951) * C50894 +
             (C117 * C936 + C50815 * C946) * C10908 + C686 * C50973 +
             C685 * C10907) *
                C8062 +
            (C11412 + C11411 + C11410 + C11409) * C51001 + C11414 * C51000) *
               C50734 * C50770) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C10907 +
              (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
              C5620 * C50894) *
                 C51000 +
             (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
                C50960 -
            (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
             (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
              C5619 * C10907) *
                 C51000) *
                C50798) *
               C50959 +
           (((C6161 * C10907 + C6162 * C50973 + C6163 * C10908 +
              C6164 * C50894) *
                 C51000 +
             (C11762 + C11763 + C11764 + C11765) * C51001 +
             (C11766 + C11767 + C11768 + C11769) * C8062) *
                C50798 -
            (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
             (C6162 * C50894 + C6161 * C10908 +
              (C117 * C310 + C50815 * C327) * C50973 +
              (C117 * C297 + C50815 * C311) * C10907) *
                 C51000) *
                C50960) *
               C50770) *
              C292 +
          ((((C11253 + C11252 + C11251 + C11250) * C51000 +
             (C11249 + C11248 + C11247 + C11246) * C51001 +
             (C11562 + C11563 + C11564 + C11565) * C8062) *
                C50798 -
            (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
             (C10913 + C10912 + C10911 + C10910) * C51000) *
                C50960) *
               C50959 +
           (((C11085 + C11084 + C11083 + C11082) * C51000 +
             (C11081 + C11080 + C11079 + C11078) * C51001 +
             (C11409 + C11410 + C11411 + C11412) * C8062) *
                C50960 -
            (((C117 * C1268 + C50815 * C1276) * C50894 +
              (C117 * C1264 + C50815 * C1269) * C10908 + C970 * C50973 +
              C969 * C10907) *
                 C8062 +
             (C11769 + C11768 + C11767 + C11766) * C51001 +
             (C11765 + C11764 + C11763 + C11762) * C51000) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C50734 * C289 -
           ((C11078 + C11079 + C11080 + C11081) * C8062 +
            (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C10907 +
             (C117 * C313 + C50815 * C328) * C50973 + C7067 * C10908 +
             C7068 * C50894) *
                C51000 +
            (C11086 + C11087 + C11088 + C11089) * C51001 +
            (C11090 + C11091 + C11098 + C11099) * C8062) *
               C50734 * C291) *
              C292 +
          (((C11085 + C11084 + C11083 + C11082) * C51000 +
            (C11081 + C11080 + C11079 + C11078) * C51001 +
            (C360 * C10907 + C359 * C50973 + C969 * C10908 + C970 * C50894) *
                C8062) *
               C50734 * C290 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C50734 * C289 -
           (((C117 * C1615 + C50815 * C1623) * C50894 +
             (C117 * C1611 + C50815 * C1616) * C10908 + C370 * C50973 +
             C369 * C10907) *
                C8062 +
            (C11099 + C11098 + C11091 + C11090) * C51001 +
            (C11089 + C11088 + C11087 + C11086) * C51000) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C10907 +
            (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
            C5620 * C50894) *
               C51000 +
           (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
              C50734 * C50718 * C113 -
          (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
           (C10913 + C10912 + C10911 + C10910) * C51000) *
              C50734 * C50718 * C114 +
          (C10930 * C51000 + (C10921 + C10920 + C10919 + C10918) * C51001 +
           (C10922 + C10923 + C10924 + C10925) * C8062) *
              C50734 * C50718 * C115 -
          (((C117 * C789 + C50815 * C791) * C50894 +
            (C117 * C788 + C50815 * C790) * C10908 + C177 * C50973 +
            C176 * C10907) *
               C8062 +
           (C10925 + C10924 + C10923 + C10922) * C51001 + C10931 * C51000) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C480 -
           ((C11246 + C11247 + C11248 + C11249) * C8062 +
            (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C481 +
           ((C5621 * C10907 + C5622 * C50973 + C5626 * C10908 +
             C5625 * C50894) *
                C51000 +
            (C11254 + C11255 + C11256 + C11257) * C51001 +
            (C11258 + C11259 + C11260 + C11261) * C8062) *
               C482) *
              C50718 * C292 +
          (((C11253 + C11252 + C11251 + C11250) * C51000 +
            (C11249 + C11248 + C11247 + C11246) * C51001 +
            (C549 * C10907 + C548 * C50973 + C558 * C10908 + C559 * C50894) *
                C8062) *
               C481 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C480 -
           (((C117 * C1899 + C50815 * C1907) * C50894 +
             (C117 * C1895 + C50815 * C1900) * C10908 + C559 * C50973 +
             C558 * C10907) *
                C8062 +
            (C11261 + C11260 + C11259 + C11258) * C51001 +
            (C11257 + C11256 + C11255 + C11254) * C51000) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C50960 -
           (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C50798) *
              C50718 * C51002 +
          (((C11253 + C11252 + C11251 + C11250) * C51000 +
            (C11249 + C11248 + C11247 + C11246) * C51001 +
            (C11562 + C11563 + C11564 + C11565) * C8062) *
               C50798 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C50960) *
              C50718 * C51003 +
          ((C10930 * C51000 + (C10921 + C10920 + C10919 + C10918) * C51001 +
            (C10922 + C10923 + C10924 + C10925) * C8062) *
               C50960 -
           (((C117 * C511 + C50815 * C522) * C50894 +
             (C117 * C492 + C50815 * C512) * C10908 + C800 * C50973 +
             C799 * C10907) *
                C8062 +
            (C11565 + C11564 + C11563 + C11562) * C51001 + C11567 * C51000) *
               C50798) *
              C50718 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C10907 +
            (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
            C5620 * C50894) *
               C51000 +
           (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
              C50734 * C50718 * C113 -
          (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
           (C10913 + C10912 + C10911 + C10910) * C51000) *
              C50734 * C50718 * C114 +
          (C10930 * C51000 + (C10921 + C10920 + C10919 + C10918) * C51001 +
           (C10922 + C10923 + C10924 + C10925) * C8062) *
              C50734 * C50718 * C115 -
          (((C117 * C789 + C50815 * C791) * C50894 +
            (C117 * C788 + C50815 * C790) * C10908 + C177 * C50973 +
            C176 * C10907) *
               C8062 +
           (C10925 + C10924 + C10923 + C10922) * C51001 + C10931 * C51000) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C50734 * C289 -
           ((C11078 + C11079 + C11080 + C11081) * C8062 +
            (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C10907 +
             (C117 * C313 + C50815 * C328) * C50973 + C7067 * C10908 +
             C7068 * C50894) *
                C51000 +
            (C11086 + C11087 + C11088 + C11089) * C51001 +
            (C11090 + C11091 + C11098 + C11099) * C8062) *
               C50734 * C291) *
              C292 +
          (((C11085 + C11084 + C11083 + C11082) * C51000 +
            (C11081 + C11080 + C11079 + C11078) * C51001 +
            (C360 * C10907 + C359 * C50973 + C969 * C10908 + C970 * C50894) *
                C8062) *
               C50734 * C290 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C50734 * C289 -
           (((C117 * C1615 + C50815 * C1623) * C50894 +
             (C117 * C1611 + C50815 * C1616) * C10908 + C370 * C50973 +
             C369 * C10907) *
                C8062 +
            (C11099 + C11098 + C11091 + C11090) * C51001 +
            (C11089 + C11088 + C11087 + C11086) * C51000) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C50734 * C51004 -
           (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C50734 * C51005 +
           (((C117 * C298 + C50815 * C312) * C10907 +
             (C117 * C313 + C50815 * C328) * C50973 + C7067 * C10908 +
             C7068 * C50894) *
                C51000 +
            (C11086 + C11087 + C11088 + C11089) * C51001 +
            (C11090 + C11091 + C11098 + C11099) * C8062) *
               C50734 * C1380) *
              C50951 +
          (((C11085 + C11084 + C11083 + C11082) * C51000 +
            (C11081 + C11080 + C11079 + C11078) * C51001 +
            (C11409 + C11410 + C11411 + C11412) * C8062) *
               C50734 * C51005 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C50734 * C51004 -
           (((C117 * C1615 + C50815 * C1623) * C50894 +
             (C117 * C1611 + C50815 * C1616) * C10908 + C370 * C50973 +
             C369 * C10907) *
                C8062 +
            (C11099 + C11098 + C11091 + C11090) * C51001 +
            (C11089 + C11088 + C11087 + C11086) * C51000) *
               C50734 * C1380) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C50960 -
           (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C50798) *
              C51004 +
          (((C6161 * C10907 + C6162 * C50973 + C6163 * C10908 +
             C6164 * C50894) *
                C51000 +
            (C11762 + C11763 + C11764 + C11765) * C51001 +
            (C11766 + C11767 + C11768 + C11769) * C8062) *
               C50798 -
           (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C50960) *
              C51005 +
          ((((C117 * C298 + C50815 * C312) * C10907 +
             (C117 * C313 + C50815 * C328) * C50973 + C7067 * C10908 +
             C7068 * C50894) *
                C51000 +
            (C11086 + C11087 + C11088 + C11089) * C51001 +
            (C11090 + C11091 + C11098 + C11099) * C8062) *
               C50960 -
           (((C117 * C2747 + C50815 * C2751) * C50894 +
             (C117 * C2742 + C50815 * C2748) * C10908 + C11097 * C50973 +
             C11096 * C10907) *
                C8062 +
            (C5424 * C50894 + C5423 * C10908 + C5422 * C50973 +
             C5421 * C10907) *
                C51001 +
            (C7070 * C50894 + C7069 * C10908 + C7068 * C50973 +
             C7067 * C10907) *
                C51000) *
               C50798) *
              C1380) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C10907 +
            (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
            C5620 * C50894) *
               C51000 +
           (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
              C50734 * C1145 -
          (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
           (C6162 * C50894 + C6161 * C10908 +
            (C117 * C310 + C50815 * C327) * C50973 +
            (C117 * C297 + C50815 * C311) * C10907) *
               C51000) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C10907 +
            (C117 * C313 + C50815 * C328) * C50973 + C7067 * C10908 +
            C7068 * C50894) *
               C51000 +
           (C11086 + C11087 + C11088 + C11089) * C51001 +
           (C11090 + C11091 + C11098 + C11099) * C8062) *
              C50734 * C1147 -
          (((C117 * C3317 + C50815 * C3321) * C50894 +
            (C117 * C3312 + C50815 * C3318) * C10908 +
            (C117 * C1156 + C50815 * C1163) * C50973 +
            (C117 * C1151 + C50815 * C1157) * C10907) *
               C8062 +
           ((C117 * C3316 + C50815 * C3320) * C50894 +
            (C117 * C3311 + C50815 * C3315) * C10908 +
            (C117 * C1158 + C50815 * C1164) * C50973 +
            (C117 * C1152 + C50815 * C1159) * C10907) *
               C51001 +
           ((C117 * C3314 + C50815 * C3319) * C50894 +
            (C117 * C3310 + C50815 * C3313) * C10908 +
            (C117 * C1160 + C50815 * C1165) * C50973 +
            (C117 * C1153 + C50815 * C1161) * C10907) *
               C51000) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C50734 * C1074 -
           (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C50734 * C50770) *
              C1076 +
          (((C11085 + C11084 + C11083 + C11082) * C51000 +
            (C11081 + C11080 + C11079 + C11078) * C51001 +
            (C11409 + C11410 + C11411 + C11412) * C8062) *
               C50734 * C50770 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C50734 * C1074) *
              C1077 +
          ((C10930 * C51000 + (C10921 + C10920 + C10919 + C10918) * C51001 +
            (C10922 + C10923 + C10924 + C10925) * C8062) *
               C50734 * C1074 -
           (((C117 * C945 + C50815 * C951) * C50894 +
             (C117 * C936 + C50815 * C946) * C10908 + C686 * C50973 +
             C685 * C10907) *
                C8062 +
            (C11412 + C11411 + C11410 + C11409) * C51001 + C11414 * C51000) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C480 -
           (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C481 +
           ((C5621 * C10907 + C5622 * C50973 + C5626 * C10908 +
             C5625 * C50894) *
                C51000 +
            (C11254 + C11255 + C11256 + C11257) * C51001 +
            (C11258 + C11259 + C11260 + C11261) * C8062) *
               C482) *
              C1074 +
          (((C6161 * C10907 + C6162 * C50973 + C6163 * C10908 +
             C6164 * C50894) *
                C51000 +
            (C11762 + C11763 + C11764 + C11765) * C51001 +
            (C11766 + C11767 + C11768 + C11769) * C8062) *
               C481 -
           (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C480 -
           (((C117 * C6141 + C50815 * C6143) * C50894 +
             (C117 * C6140 + C50815 * C6142) * C10908 + C5792 * C50973 +
             C5791 * C10907) *
                C8062 +
            (C6166 * C50894 + C6165 * C10908 + C5419 * C50973 +
             C5420 * C10907) *
                C51001 +
            (C6572 * C50894 + C6571 * C10908 + C6164 * C50973 +
             C6163 * C10907) *
                C51000) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C10907 +
              (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
              C5620 * C50894) *
                 C51000 +
             (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
                C50960 -
            (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
             (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
              C5619 * C10907) *
                 C51000) *
                C50798) *
               C1074 +
           (((C6161 * C10907 + C6162 * C50973 + C6163 * C10908 +
              C6164 * C50894) *
                 C51000 +
             (C11762 + C11763 + C11764 + C11765) * C51001 +
             (C11766 + C11767 + C11768 + C11769) * C8062) *
                C50798 -
            (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
             (C6162 * C50894 + C6161 * C10908 +
              (C117 * C310 + C50815 * C327) * C50973 +
              (C117 * C297 + C50815 * C311) * C10907) *
                 C51000) *
                C50960) *
               C50770) *
              C50951 +
          ((((C11253 + C11252 + C11251 + C11250) * C51000 +
             (C11249 + C11248 + C11247 + C11246) * C51001 +
             (C11562 + C11563 + C11564 + C11565) * C8062) *
                C50798 -
            (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
             (C10913 + C10912 + C10911 + C10910) * C51000) *
                C50960) *
               C1074 +
           (((C11085 + C11084 + C11083 + C11082) * C51000 +
             (C11081 + C11080 + C11079 + C11078) * C51001 +
             (C11409 + C11410 + C11411 + C11412) * C8062) *
                C50960 -
            (((C117 * C1268 + C50815 * C1276) * C50894 +
              (C117 * C1264 + C50815 * C1269) * C10908 + C970 * C50973 +
              C969 * C10907) *
                 C8062 +
             (C11769 + C11768 + C11767 + C11766) * C51001 +
             (C11765 + C11764 + C11763 + C11762) * C51000) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C50734 * C1074 -
           (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C50734 * C50770) *
              C1076 +
          (((C11085 + C11084 + C11083 + C11082) * C51000 +
            (C11081 + C11080 + C11079 + C11078) * C51001 +
            (C11409 + C11410 + C11411 + C11412) * C8062) *
               C50734 * C50770 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C50734 * C1074) *
              C1077 +
          ((C10930 * C51000 + (C10921 + C10920 + C10919 + C10918) * C51001 +
            (C10922 + C10923 + C10924 + C10925) * C8062) *
               C50734 * C1074 -
           (((C117 * C945 + C50815 * C951) * C50894 +
             (C117 * C936 + C50815 * C946) * C10908 + C686 * C50973 +
             C685 * C10907) *
                C8062 +
            (C11412 + C11411 + C11410 + C11409) * C51001 + C11414 * C51000) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C10907 +
            (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
            C5620 * C50894) *
               C51000 +
           (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
              C50734 * C1145 -
          (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
           (C6162 * C50894 + C6161 * C10908 +
            (C117 * C310 + C50815 * C327) * C50973 +
            (C117 * C297 + C50815 * C311) * C10907) *
               C51000) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C10907 +
            (C117 * C313 + C50815 * C328) * C50973 + C7067 * C10908 +
            C7068 * C50894) *
               C51000 +
           (C11086 + C11087 + C11088 + C11089) * C51001 +
           (C11090 + C11091 + C11098 + C11099) * C8062) *
              C50734 * C1147 -
          (((C117 * C3317 + C50815 * C3321) * C50894 +
            (C117 * C3312 + C50815 * C3318) * C10908 +
            (C117 * C1156 + C50815 * C1163) * C50973 +
            (C117 * C1151 + C50815 * C1157) * C10907) *
               C8062 +
           ((C117 * C3316 + C50815 * C3320) * C50894 +
            (C117 * C3311 + C50815 * C3315) * C10908 +
            (C117 * C1158 + C50815 * C1164) * C50973 +
            (C117 * C1152 + C50815 * C1159) * C10907) *
               C51001 +
           ((C117 * C3314 + C50815 * C3319) * C50894 +
            (C117 * C3310 + C50815 * C3313) * C10908 +
            (C117 * C1160 + C50815 * C1165) * C50973 +
            (C117 * C1153 + C50815 * C1161) * C10907) *
               C51000) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C10907 +
              (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
              C5620 * C50894) *
                 C51000 +
             (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
                C1725 -
            (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
             (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
              C5619 * C10907) *
                 C51000) *
                C50798) *
               C50959 +
           (((C6161 * C10907 + C6162 * C50973 + C6163 * C10908 +
              C6164 * C50894) *
                 C51000 +
             (C11762 + C11763 + C11764 + C11765) * C51001 +
             (C11766 + C11767 + C11768 + C11769) * C8062) *
                C50798 -
            (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
             (C6162 * C50894 + C6161 * C10908 +
              (C117 * C310 + C50815 * C327) * C50973 +
              (C117 * C297 + C50815 * C311) * C10907) *
                 C51000) *
                C1725) *
               C50770) *
              C50951 +
          ((((C11253 + C11252 + C11251 + C11250) * C51000 +
             (C11249 + C11248 + C11247 + C11246) * C51001 +
             (C11562 + C11563 + C11564 + C11565) * C8062) *
                C50798 -
            (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
             (C10913 + C10912 + C10911 + C10910) * C51000) *
                C1725) *
               C50959 +
           (((C11085 + C11084 + C11083 + C11082) * C51000 +
             (C11081 + C11080 + C11079 + C11078) * C51001 +
             (C11409 + C11410 + C11411 + C11412) * C8062) *
                C1725 -
            (((C117 * C1268 + C50815 * C1276) * C50894 +
              (C117 * C1264 + C50815 * C1269) * C10908 + C970 * C50973 +
              C969 * C10907) *
                 C8062 +
             (C11769 + C11768 + C11767 + C11766) * C51001 +
             (C11765 + C11764 + C11763 + C11762) * C51000) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C51006 -
           (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C51007 +
           ((C5621 * C10907 + C5622 * C50973 + C5626 * C10908 +
             C5625 * C50894) *
                C51000 +
            (C11254 + C11255 + C11256 + C11257) * C51001 +
            (C11258 + C11259 + C11260 + C11261) * C8062) *
               C2141) *
              C50959 +
          (((C6161 * C10907 + C6162 * C50973 + C6163 * C10908 +
             C6164 * C50894) *
                C51000 +
            (C11762 + C11763 + C11764 + C11765) * C51001 +
            (C11766 + C11767 + C11768 + C11769) * C8062) *
               C51007 -
           (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C51006 -
           (((C117 * C6141 + C50815 * C6143) * C50894 +
             (C117 * C6140 + C50815 * C6142) * C10908 + C5792 * C50973 +
             C5791 * C10907) *
                C8062 +
            (C6166 * C50894 + C6165 * C10908 + C5419 * C50973 +
             C5420 * C10907) *
                C51001 +
            (C6572 * C50894 + C6571 * C10908 + C6164 * C50973 +
             C6163 * C10907) *
                C51000) *
               C2141) *
              C50770) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C1725 -
           (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C50798) *
              C289 +
          (((C6161 * C10907 + C6162 * C50973 + C6163 * C10908 +
             C6164 * C50894) *
                C51000 +
            (C11762 + C11763 + C11764 + C11765) * C51001 +
            (C11766 + C11767 + C11768 + C11769) * C8062) *
               C50798 -
           (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50815 * C312) * C10907 +
             (C117 * C313 + C50815 * C328) * C50973 + C7067 * C10908 +
             C7068 * C50894) *
                C51000 +
            (C11086 + C11087 + C11088 + C11089) * C51001 +
            (C11090 + C11091 + C11098 + C11099) * C8062) *
               C1725 -
           (((C117 * C2747 + C50815 * C2751) * C50894 +
             (C117 * C2742 + C50815 * C2748) * C10908 + C11097 * C50973 +
             C11096 * C10907) *
                C8062 +
            (C5424 * C50894 + C5423 * C10908 + C5422 * C50973 +
             C5421 * C10907) *
                C51001 +
            (C7070 * C50894 + C7069 * C10908 + C7068 * C50973 +
             C7067 * C10907) *
                C51000) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C1725 -
           (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C50798) *
              C50718 * C1076 +
          (((C11253 + C11252 + C11251 + C11250) * C51000 +
            (C11249 + C11248 + C11247 + C11246) * C51001 +
            (C11562 + C11563 + C11564 + C11565) * C8062) *
               C50798 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C1725) *
              C50718 * C1077 +
          ((C10930 * C51000 + (C10921 + C10920 + C10919 + C10918) * C51001 +
            (C10922 + C10923 + C10924 + C10925) * C8062) *
               C1725 -
           (((C117 * C511 + C50815 * C522) * C50894 +
             (C117 * C492 + C50815 * C512) * C10908 + C800 * C50973 +
             C799 * C10907) *
                C8062 +
            (C11565 + C11564 + C11563 + C11562) * C51001 + C11567 * C51000) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C10907 +
            (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
            C5620 * C50894) *
               C51000 +
           (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
              C1891 -
          (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
           (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 + C5619 * C10907) *
               C51000) *
              C1892 +
          ((C5621 * C10907 + C5622 * C50973 + C5626 * C10908 + C5625 * C50894) *
               C51000 +
           (C11254 + C11255 + C11256 + C11257) * C51001 +
           (C11258 + C11259 + C11260 + C11261) * C8062) *
              C1893 -
          (((C117 * C5583 + C50815 * C5587) * C50894 +
            (C117 * C5578 + C50815 * C5584) * C10908 + C5630 * C50973 +
            C5629 * C10907) *
               C8062 +
           (C5628 * C50894 + C5627 * C10908 + C5623 * C50973 + C5624 * C10907) *
               C51001 +
           (C7474 * C50894 + C7473 * C10908 + C5625 * C50973 + C5626 * C10907) *
               C51000) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C51006 -
           (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C51007 +
           ((C5621 * C10907 + C5622 * C50973 + C5626 * C10908 +
             C5625 * C50894) *
                C51000 +
            (C11254 + C11255 + C11256 + C11257) * C51001 +
            (C11258 + C11259 + C11260 + C11261) * C8062) *
               C2141) *
              C50718 * C50951 +
          (((C11253 + C11252 + C11251 + C11250) * C51000 +
            (C11249 + C11248 + C11247 + C11246) * C51001 +
            (C11562 + C11563 + C11564 + C11565) * C8062) *
               C51007 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C51006 -
           (((C117 * C1899 + C50815 * C1907) * C50894 +
             (C117 * C1895 + C50815 * C1900) * C10908 + C559 * C50973 +
             C558 * C10907) *
                C8062 +
            (C11261 + C11260 + C11259 + C11258) * C51001 +
            (C11257 + C11256 + C11255 + C11254) * C51000) *
               C2141) *
              C50718 * C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C1725 -
           (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C50798) *
              C50718 * C1076 +
          (((C11253 + C11252 + C11251 + C11250) * C51000 +
            (C11249 + C11248 + C11247 + C11246) * C51001 +
            (C11562 + C11563 + C11564 + C11565) * C8062) *
               C50798 -
           (C10931 * C8062 + (C10917 + C10916 + C10915 + C10914) * C51001 +
            (C10913 + C10912 + C10911 + C10910) * C51000) *
               C1725) *
              C50718 * C1077 +
          ((C10930 * C51000 + (C10921 + C10920 + C10919 + C10918) * C51001 +
            (C10922 + C10923 + C10924 + C10925) * C8062) *
               C1725 -
           (((C117 * C511 + C50815 * C522) * C50894 +
             (C117 * C492 + C50815 * C512) * C10908 + C800 * C50973 +
             C799 * C10907) *
                C8062 +
            (C11565 + C11564 + C11563 + C11562) * C51001 + C11567 * C51000) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C10907 +
             (C117 * C127 + C50815 * C140) * C50973 + C5619 * C10908 +
             C5620 * C50894) *
                C51000 +
            (C10910 + C10911 + C10912 + C10913) * C51001 + C10930 * C8062) *
               C1725 -
           (C11567 * C8062 + (C11250 + C11251 + C11252 + C11253) * C51001 +
            (C5622 * C50894 + C5621 * C10908 + C5620 * C50973 +
             C5619 * C10907) *
                C51000) *
               C50798) *
              C289 +
          (((C6161 * C10907 + C6162 * C50973 + C6163 * C10908 +
             C6164 * C50894) *
                C51000 +
            (C11762 + C11763 + C11764 + C11765) * C51001 +
            (C11766 + C11767 + C11768 + C11769) * C8062) *
               C50798 -
           (C11414 * C8062 + (C11082 + C11083 + C11084 + C11085) * C51001 +
            (C6162 * C50894 + C6161 * C10908 +
             (C117 * C310 + C50815 * C327) * C50973 +
             (C117 * C297 + C50815 * C311) * C10907) *
                C51000) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50815 * C312) * C10907 +
             (C117 * C313 + C50815 * C328) * C50973 + C7067 * C10908 +
             C7068 * C50894) *
                C51000 +
            (C11086 + C11087 + C11088 + C11089) * C51001 +
            (C11090 + C11091 + C11098 + C11099) * C8062) *
               C1725 -
           (((C117 * C2747 + C50815 * C2751) * C50894 +
             (C117 * C2742 + C50815 * C2748) * C10908 + C11097 * C50973 +
             C11096 * C10907) *
                C8062 +
            (C5424 * C50894 + C5423 * C10908 + C5422 * C50973 +
             C5421 * C10907) *
                C51001 +
            (C7070 * C50894 + C7069 * C10908 + C7068 * C50973 +
             C7067 * C10907) *
                C51000) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50734 * C50959 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C50734 * C50770) *
                      C51002 +
                  (((C376 + C375) * C107 + (C374 + C373) * C108 +
                    (C372 + C371) * C109 + (C687 + C688) * C110) *
                       C50734 * C50770 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50734 * C50959) *
                      C51003 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C50734 * C50959 -
                   (((C117 * C675 + C50815 * C677) * C50830 +
                     (C117 * C674 + C50815 * C676) * C118) *
                        C110 +
                    (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
                       C50734 * C50770) *
                      C673)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C50734 * C50959 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C50734 * C50770) *
                      C51002 +
                  ((((C2588 + C2587 + C2586) * C118 +
                     (C2585 + C2584 + C2583) * C50830) *
                        C2341 +
                    ((C2947 + C2948 + C2949) * C118 +
                     (C2950 + C2951 + C2952) * C50830) *
                        C50678) *
                       C50734 * C50770 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C50734 * C50959) *
                      C51003 +
                  ((((C2394 + C2393 + C2392) * C118 +
                     (C2391 + C2390 + C2389) * C50830) *
                        C2341 +
                    ((C2395 + C2396 + C2397) * C118 +
                     (C2398 + C2399 + C2400) * C50830) *
                        C50678) *
                       C50734 * C50959 -
                   (((C2345 * C1154 + C2340 * C1162 + C2344 * C319 +
                      C2339 * C331 + C2343 * C304 + C2338 * C324) *
                         C50830 +
                     (C2345 * C1150 + C2340 * C1155 + C2344 * C301 +
                      C2339 * C318 + C2343 * C294 + C2338 * C305) *
                         C118) *
                        C50678 +
                    ((C2952 + C2951 + C2950) * C50830 +
                     (C2949 + C2948 + C2947) * C118) *
                        C2341) *
                       C50734 * C50770) *
                      C673)) /
                    (p * q * std::sqrt(p + q));
    d2ee[61] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50815 * C126) * C118 +
                      (C117 * C127 + C50815 * C140) * C50830) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C50960 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50815 * C516) * C50830 +
                      (C117 * C486 + C50815 * C500) * C118) *
                         C107) *
                        C50798) *
                       C50959 +
                   ((((C117 * C932 + C50815 * C937) * C118 +
                      (C117 * C938 + C50815 * C947) * C50830) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50798 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50815 * C327) * C50830 +
                      (C117 * C297 + C50815 * C311) * C118) *
                         C107) *
                        C50960) *
                       C50770) *
                      C292 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50798 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C50960) *
                       C50959 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C50960 -
                    (((C117 * C945 + C50815 * C951) * C50830 +
                      (C117 * C936 + C50815 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                       C2339 * C311 + C2345 * C298 + C2340 * C312) *
                          C118 +
                      (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                       C2339 * C327 + C2345 * C313 + C2340 * C328) *
                          C50830) *
                         C2341 +
                     ((C2383 + C2384 + C2385) * C118 +
                      (C2386 + C2387 + C2388) * C50830) *
                         C50678) *
                        C50960 -
                    (((C2777 + C2778 + C2779) * C50830 +
                      (C2780 + C2781 + C2782) * C118) *
                         C50678 +
                     ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                       C2339 * C947 + C2343 * C499 + C2338 * C516) *
                          C50830 +
                      (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                       C2339 * C937 + C2343 * C486 + C2338 * C500) *
                          C118) *
                         C2341) *
                        C50798) *
                       C50959 +
                   ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                       C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                          C118 +
                      (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                       C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                          C50830) *
                         C2341 +
                     ((C3335 + C3336 + C3337) * C118 +
                      (C3338 + C3339 + C3340) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2583 + C2584 + C2585) * C50830 +
                      (C2586 + C2587 + C2588) * C118) *
                         C50678 +
                     ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                       C2339 * C328 + C2343 * C310 + C2338 * C327) *
                          C50830 +
                      (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                       C2339 * C312 + C2343 * C297 + C2338 * C311) *
                          C118) *
                         C2341) *
                        C50960) *
                       C50770) *
                      C292 +
                  (((((C2782 + C2781 + C2780) * C118 +
                      (C2779 + C2778 + C2777) * C50830) *
                         C2341 +
                     ((C3111 + C3112 + C3113) * C118 +
                      (C3114 + C3115 + C3116) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2389 + C2390 + C2391) * C50830 +
                      (C2392 + C2393 + C2394) * C118) *
                         C50678 +
                     ((C2388 + C2387 + C2386) * C50830 +
                      (C2385 + C2384 + C2383) * C118) *
                         C2341) *
                        C50960) *
                       C50959 +
                   ((((C2588 + C2587 + C2586) * C118 +
                      (C2585 + C2584 + C2583) * C50830) *
                         C2341 +
                     ((C2947 + C2948 + C2949) * C118 +
                      (C2950 + C2951 + C2952) * C50830) *
                         C50678) *
                        C50960 -
                    (((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 +
                       C2339 * C1624 + C2343 * C942 + C2338 * C949) *
                          C50830 +
                      (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 +
                       C2339 * C1618 + C2343 * C934 + C2338 * C941) *
                          C118) *
                         C50678 +
                     ((C3340 + C3339 + C3338) * C50830 +
                      (C3337 + C3336 + C3335) * C118) *
                         C2341) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50734 * C289 -
           ((C371 + C372) * C110 + (C373 + C374) * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50815 * C327) * C50830 +
             (C117 * C297 + C50815 * C311) * C118) *
                C107) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C118 +
             (C117 * C313 + C50815 * C328) * C50830) *
                C107 +
            (C377 + C378) * C108 + (C379 + C380) * C109 +
            (C381 + C382) * C110) *
               C50734 * C291) *
              C292 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            ((C117 * C302 + C50815 * C320) * C118 +
             (C117 * C321 + C50815 * C332) * C50830) *
                C110) *
               C50734 * C290 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50734 * C289 -
           (((C117 * C322 + C50815 * C333) * C50830 +
             (C117 * C303 + C50815 * C323) * C118) *
                C110 +
            (C382 + C381) * C109 + (C380 + C379) * C108 +
            (C378 + C377) * C107) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C118 +
            (C117 * C127 + C50815 * C140) * C50830) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50734 * C50718 * C113 -
          (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
           (C179 + C178) * C107) *
              C50734 * C50718 * C114 +
          (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
           (C186 + C187) * C110) *
              C50734 * C50718 * C115 -
          (((C117 * C138 + C50815 * C146) * C50830 +
            (C117 * C125 + C50815 * C139) * C118) *
               C110 +
           (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C480 -
           ((C560 + C561) * C110 + (C562 + C563) * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50815 * C516) * C50830 +
             (C117 * C486 + C50815 * C500) * C118) *
                C107) *
               C481 +
           (((C117 * C487 + C50815 * C501) * C118 +
             (C117 * C502 + C50815 * C517) * C50830) *
                C107 +
            (C566 + C567) * C108 + (C568 + C569) * C109 +
            (C570 + C571) * C110) *
               C482) *
              C50718 * C292 +
          (((C565 + C564) * C107 + (C563 + C562) * C108 + (C561 + C560) * C109 +
            ((C117 * C491 + C50815 * C509) * C118 +
             (C117 * C510 + C50815 * C521) * C50830) *
                C110) *
               C481 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C480 -
           (((C117 * C511 + C50815 * C522) * C50830 +
             (C117 * C492 + C50815 * C512) * C118) *
                C110 +
            (C571 + C570) * C109 + (C569 + C568) * C108 +
            (C567 + C566) * C107) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C50734 * C50718 * C113 -
          (((C2389 + C2390 + C2391) * C50830 + (C2392 + C2393 + C2394) * C118) *
               C50678 +
           ((C2388 + C2387 + C2386) * C50830 + (C2385 + C2384 + C2383) * C118) *
               C2341) *
              C50734 * C50718 * C114 +
          (((C2394 + C2393 + C2392) * C118 + (C2391 + C2390 + C2389) * C50830) *
               C2341 +
           ((C2395 + C2396 + C2397) * C118 + (C2398 + C2399 + C2400) * C50830) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C2345 * C322 + C2340 * C333 + C2344 * C321 + C2339 * C332 +
             C2343 * C134 + C2338 * C144) *
                C50830 +
            (C2345 * C303 + C2340 * C323 + C2344 * C302 + C2339 * C320 +
             C2343 * C123 + C2338 * C135) *
                C118) *
               C50678 +
           ((C2400 + C2399 + C2398) * C50830 + (C2397 + C2396 + C2395) * C118) *
               C2341) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C50734 * C289 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C50734 * C290 +
           (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
              C2345 * C2546 + C2340 * C2549) *
                 C118 +
             (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
              C2345 * C2550 + C2340 * C2555) *
                 C50830) *
                C2341 +
            ((C2589 + C2590 + C2591) * C118 +
             (C2592 + C2593 + C2594) * C50830) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C2588 + C2587 + C2586) * C118 +
             (C2585 + C2584 + C2583) * C50830) *
                C2341 +
            ((C2343 * C295 + C2338 * C307 + C2344 * C300 + C2339 * C316 +
              C2345 * C1151 + C2340 * C1157) *
                 C118 +
             (C2343 * C306 + C2338 * C325 + C2344 * C317 + C2339 * C330 +
              C2345 * C1156 + C2340 * C1163) *
                 C50830) *
                C50678) *
               C50734 * C290 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C50734 * C289 -
           (((C2345 * C2553 + C2340 * C2557 + C2344 * C1156 + C2339 * C1163 +
              C2343 * C317 + C2338 * C330) *
                 C50830 +
             (C2345 * C2548 + C2340 * C2554 + C2344 * C1151 + C2339 * C1157 +
              C2343 * C300 + C2338 * C316) *
                 C118) *
                C50678 +
            ((C2594 + C2593 + C2592) * C50830 +
             (C2591 + C2590 + C2589) * C118) *
                C2341) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C480 -
           (((C2777 + C2778 + C2779) * C50830 +
             (C2780 + C2781 + C2782) * C118) *
                C50678 +
            ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
              C2343 * C499 + C2338 * C516) *
                 C50830 +
             (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
              C2343 * C486 + C2338 * C500) *
                 C118) *
                C2341) *
               C481 +
           (((C2343 * C487 + C2338 * C501 + C2344 * C1267 + C2339 * C1275 +
              C2345 * C2740 + C2340 * C2743) *
                 C118 +
             (C2343 * C502 + C2338 * C517 + C2344 * C1274 + C2339 * C1279 +
              C2345 * C2744 + C2340 * C2749) *
                 C50830) *
                C2341 +
            ((C2783 + C2784 + C2785) * C118 +
             (C2786 + C2787 + C2788) * C50830) *
                C50678) *
               C482) *
              C50718 * C292 +
          ((((C2782 + C2781 + C2780) * C118 +
             (C2779 + C2778 + C2777) * C50830) *
                C2341 +
            ((C2343 * C484 + C2338 * C496 + C2344 * C934 + C2339 * C941 +
              C2345 * C1612 + C2340 * C1618) *
                 C118 +
             (C2343 * C495 + C2338 * C514 + C2344 * C942 + C2339 * C949 +
              C2345 * C1617 + C2340 * C1624) *
                 C50830) *
                C50678) *
               C481 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C480 -
           (((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 + C2339 * C1277 +
              C2343 * C506 + C2338 * C519) *
                 C50830 +
             (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 + C2339 * C1271 +
              C2343 * C489 + C2338 * C505) *
                 C118) *
                C50678 +
            ((C2788 + C2787 + C2786) * C50830 +
             (C2785 + C2784 + C2783) * C118) *
                C2341) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50960 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C50798) *
                      C50718 * C51002 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50798 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50960) *
                      C50718 * C51003 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C50960 -
                   (((C117 * C789 + C50815 * C791) * C50830 +
                     (C117 * C788 + C50815 * C790) * C118) *
                        C110 +
                    (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                       C50798) *
                      C50718 * C673)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C50960 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C50798) *
                      C50718 * C51002 +
                  ((((C2782 + C2781 + C2780) * C118 +
                     (C2779 + C2778 + C2777) * C50830) *
                        C2341 +
                    ((C3111 + C3112 + C3113) * C118 +
                     (C3114 + C3115 + C3116) * C50830) *
                        C50678) *
                       C50798 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C50960) *
                      C50718 * C51003 +
                  ((((C2394 + C2393 + C2392) * C118 +
                     (C2391 + C2390 + C2389) * C50830) *
                        C2341 +
                    ((C2395 + C2396 + C2397) * C118 +
                     (C2398 + C2399 + C2400) * C50830) *
                        C50678) *
                       C50960 -
                   (((C2345 * C1615 + C2340 * C1623 + C2344 * C944 +
                      C2339 * C950 + C2343 * C493 + C2338 * C513) *
                         C50830 +
                     (C2345 * C1611 + C2340 * C1616 + C2344 * C935 +
                      C2339 * C943 + C2343 * C483 + C2338 * C494) *
                         C118) *
                        C50678 +
                    ((C3116 + C3115 + C3114) * C50830 +
                     (C3113 + C3112 + C3111) * C118) *
                        C2341) *
                       C50798) *
                      C50718 * C673)) /
                    (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C118 +
            (C117 * C127 + C50815 * C140) * C50830) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50734 * C50718 * C113 -
          (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
           (C179 + C178) * C107) *
              C50734 * C50718 * C114 +
          (C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
           (C186 + C187) * C110) *
              C50734 * C50718 * C115 -
          (((C117 * C138 + C50815 * C146) * C50830 +
            (C117 * C125 + C50815 * C139) * C118) *
               C110 +
           (C187 + C186) * C109 + C190 * C108 + C191 * C107) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50734 * C289 -
           ((C371 + C372) * C110 + (C373 + C374) * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50815 * C327) * C50830 +
             (C117 * C297 + C50815 * C311) * C118) *
                C107) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C118 +
             (C117 * C313 + C50815 * C328) * C50830) *
                C107 +
            (C377 + C378) * C108 + (C379 + C380) * C109 +
            (C381 + C382) * C110) *
               C50734 * C291) *
              C292 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            ((C117 * C302 + C50815 * C320) * C118 +
             (C117 * C321 + C50815 * C332) * C50830) *
                C110) *
               C50734 * C290 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50734 * C289 -
           (((C117 * C322 + C50815 * C333) * C50830 +
             (C117 * C303 + C50815 * C323) * C118) *
                C110 +
            (C382 + C381) * C109 + (C380 + C379) * C108 +
            (C378 + C377) * C107) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C50734 * C50718 * C113 -
          (((C2389 + C2390 + C2391) * C50830 + (C2392 + C2393 + C2394) * C118) *
               C50678 +
           ((C2388 + C2387 + C2386) * C50830 + (C2385 + C2384 + C2383) * C118) *
               C2341) *
              C50734 * C50718 * C114 +
          (((C2394 + C2393 + C2392) * C118 + (C2391 + C2390 + C2389) * C50830) *
               C2341 +
           ((C2395 + C2396 + C2397) * C118 + (C2398 + C2399 + C2400) * C50830) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C2345 * C322 + C2340 * C333 + C2344 * C321 + C2339 * C332 +
             C2343 * C134 + C2338 * C144) *
                C50830 +
            (C2345 * C303 + C2340 * C323 + C2344 * C302 + C2339 * C320 +
             C2343 * C123 + C2338 * C135) *
                C118) *
               C50678 +
           ((C2400 + C2399 + C2398) * C50830 + (C2397 + C2396 + C2395) * C118) *
               C2341) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C50734 * C289 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C50734 * C290 +
           (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
              C2345 * C2546 + C2340 * C2549) *
                 C118 +
             (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
              C2345 * C2550 + C2340 * C2555) *
                 C50830) *
                C2341 +
            ((C2589 + C2590 + C2591) * C118 +
             (C2592 + C2593 + C2594) * C50830) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C2588 + C2587 + C2586) * C118 +
             (C2585 + C2584 + C2583) * C50830) *
                C2341 +
            ((C2343 * C295 + C2338 * C307 + C2344 * C300 + C2339 * C316 +
              C2345 * C1151 + C2340 * C1157) *
                 C118 +
             (C2343 * C306 + C2338 * C325 + C2344 * C317 + C2339 * C330 +
              C2345 * C1156 + C2340 * C1163) *
                 C50830) *
                C50678) *
               C50734 * C290 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C50734 * C289 -
           (((C2345 * C2553 + C2340 * C2557 + C2344 * C1156 + C2339 * C1163 +
              C2343 * C317 + C2338 * C330) *
                 C50830 +
             (C2345 * C2548 + C2340 * C2554 + C2344 * C1151 + C2339 * C1157 +
              C2343 * C300 + C2338 * C316) *
                 C118) *
                C50678 +
            ((C2594 + C2593 + C2592) * C50830 +
             (C2591 + C2590 + C2589) * C118) *
                C2341) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50734 * C51004 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C50734 * C51005 +
                   (((C117 * C298 + C50815 * C312) * C118 +
                     (C117 * C313 + C50815 * C328) * C50830) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C50734 * C1380) *
                      C50951 +
                  (((C376 + C375) * C107 + (C374 + C373) * C108 +
                    (C372 + C371) * C109 + (C687 + C688) * C110) *
                       C50734 * C51005 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C50734 * C51004 -
                   (((C117 * C322 + C50815 * C333) * C50830 +
                     (C117 * C303 + C50815 * C323) * C118) *
                        C110 +
                    (C382 + C381) * C109 + (C380 + C379) * C108 +
                    (C378 + C377) * C107) *
                       C50734 * C1380) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C50734 * C51004 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C50734 * C51005 +
                   (((C2343 * C298 + C2338 * C312 + C2344 * C1153 +
                      C2339 * C1161 + C2345 * C2546 + C2340 * C2549) *
                         C118 +
                     (C2343 * C313 + C2338 * C328 + C2344 * C1160 +
                      C2339 * C1165 + C2345 * C2550 + C2340 * C2555) *
                         C50830) *
                        C2341 +
                    ((C2589 + C2590 + C2591) * C118 +
                     (C2592 + C2593 + C2594) * C50830) *
                        C50678) *
                       C50734 * C1380) *
                      C50951 +
                  ((((C2588 + C2587 + C2586) * C118 +
                     (C2585 + C2584 + C2583) * C50830) *
                        C2341 +
                    ((C2947 + C2948 + C2949) * C118 +
                     (C2950 + C2951 + C2952) * C50830) *
                        C50678) *
                       C50734 * C51005 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C50734 * C51004 -
                   (((C2345 * C2553 + C2340 * C2557 + C2344 * C1156 +
                      C2339 * C1163 + C2343 * C317 + C2338 * C330) *
                         C50830 +
                     (C2345 * C2548 + C2340 * C2554 + C2344 * C1151 +
                      C2339 * C1157 + C2343 * C300 + C2338 * C316) *
                         C118) *
                        C50678 +
                    ((C2594 + C2593 + C2592) * C50830 +
                     (C2591 + C2590 + C2589) * C118) *
                        C2341) *
                       C50734 * C1380) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[66] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C50960 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C50798) *
                      C51004 +
                  ((((C117 * C932 + C50815 * C937) * C118 +
                     (C117 * C938 + C50815 * C947) * C50830) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50798 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C50960) *
                      C51005 +
                  ((((C117 * C298 + C50815 * C312) * C118 +
                     (C117 * C313 + C50815 * C328) * C50830) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C50960 -
                   (((C117 * C1615 + C50815 * C1623) * C50830 +
                     (C117 * C1611 + C50815 * C1616) * C118) *
                        C110 +
                    ((C117 * C1617 + C50815 * C1624) * C50830 +
                     (C117 * C1612 + C50815 * C1618) * C118) *
                        C109 +
                    ((C117 * C1619 + C50815 * C1625) * C50830 +
                     (C117 * C1613 + C50815 * C1620) * C118) *
                        C108 +
                    ((C117 * C1621 + C50815 * C1626) * C50830 +
                     (C117 * C1614 + C50815 * C1622) * C118) *
                        C107) *
                       C50798) *
                      C1380) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C50960 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C50798) *
                      C51004 +
                  ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                      C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                         C118 +
                     (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                      C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                         C50830) *
                        C2341 +
                    ((C3335 + C3336 + C3337) * C118 +
                     (C3338 + C3339 + C3340) * C50830) *
                        C50678) *
                       C50798 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C50960) *
                      C51005 +
                  ((((C2343 * C298 + C2338 * C312 + C2344 * C1153 +
                      C2339 * C1161 + C2345 * C2546 + C2340 * C2549) *
                         C118 +
                     (C2343 * C313 + C2338 * C328 + C2344 * C1160 +
                      C2339 * C1165 + C2345 * C2550 + C2340 * C2555) *
                         C50830) *
                        C2341 +
                    ((C2589 + C2590 + C2591) * C118 +
                     (C2592 + C2593 + C2594) * C50830) *
                        C50678) *
                       C50960 -
                   (((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 +
                      C2339 * C3320 + C2343 * C1619 + C2338 * C1625) *
                         C50830 +
                     (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 +
                      C2339 * C3315 + C2343 * C1613 + C2338 * C1620) *
                         C118) *
                        C50678 +
                    ((C2345 * C4236 + C2340 * C4239 + C2344 * C3314 +
                      C2339 * C3319 + C2343 * C1621 + C2338 * C1626) *
                         C50830 +
                     (C2345 * C4233 + C2340 * C4237 + C2344 * C3310 +
                      C2339 * C3313 + C2343 * C1614 + C2338 * C1622) *
                         C118) *
                        C2341) *
                       C50798) *
                      C1380) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C118 +
            (C117 * C127 + C50815 * C140) * C50830) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50734 * C1145 -
          (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
           ((C117 * C310 + C50815 * C327) * C50830 +
            (C117 * C297 + C50815 * C311) * C118) *
               C107) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C118 +
            (C117 * C313 + C50815 * C328) * C50830) *
               C107 +
           (C377 + C378) * C108 + (C379 + C380) * C109 + (C381 + C382) * C110) *
              C50734 * C1147 -
          (((C117 * C1154 + C50815 * C1162) * C50830 +
            (C117 * C1150 + C50815 * C1155) * C118) *
               C110 +
           ((C117 * C1156 + C50815 * C1163) * C50830 +
            (C117 * C1151 + C50815 * C1157) * C118) *
               C109 +
           ((C117 * C1158 + C50815 * C1164) * C50830 +
            (C117 * C1152 + C50815 * C1159) * C118) *
               C108 +
           ((C117 * C1160 + C50815 * C1165) * C50830 +
            (C117 * C1153 + C50815 * C1161) * C118) *
               C107) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50734 * C1074 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50815 * C327) * C50830 +
             (C117 * C297 + C50815 * C311) * C118) *
                C107) *
               C50734 * C50770) *
              C1076 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            (C687 + C688) * C110) *
               C50734 * C50770 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50734 * C1074) *
              C1077 +
          ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50734 * C1074 -
           (((C117 * C675 + C50815 * C677) * C50830 +
             (C117 * C674 + C50815 * C676) * C118) *
                C110 +
            (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C480 -
           (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50815 * C516) * C50830 +
             (C117 * C486 + C50815 * C500) * C118) *
                C107) *
               C481 +
           (((C117 * C487 + C50815 * C501) * C118 +
             (C117 * C502 + C50815 * C517) * C50830) *
                C107 +
            (C566 + C567) * C108 + (C568 + C569) * C109 +
            (C570 + C571) * C110) *
               C482) *
              C1074 +
          ((((C117 * C932 + C50815 * C937) * C118 +
             (C117 * C938 + C50815 * C947) * C50830) *
                C107 +
            (C971 + C972) * C108 + (C973 + C974) * C109 +
            (C975 + C976) * C110) *
               C481 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50815 * C327) * C50830 +
             (C117 * C297 + C50815 * C311) * C118) *
                C107) *
               C480 -
           (((C117 * C1268 + C50815 * C1276) * C50830 +
             (C117 * C1264 + C50815 * C1269) * C118) *
                C110 +
            ((C117 * C1270 + C50815 * C1277) * C50830 +
             (C117 * C1265 + C50815 * C1271) * C118) *
                C109 +
            ((C117 * C1272 + C50815 * C1278) * C50830 +
             (C117 * C1266 + C50815 * C1273) * C118) *
                C108 +
            ((C117 * C1274 + C50815 * C1279) * C50830 +
             (C117 * C1267 + C50815 * C1275) * C118) *
                C107) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C50734 * C1074 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C50734 * C50770) *
              C1076 +
          ((((C2588 + C2587 + C2586) * C118 +
             (C2585 + C2584 + C2583) * C50830) *
                C2341 +
            ((C2947 + C2948 + C2949) * C118 +
             (C2950 + C2951 + C2952) * C50830) *
                C50678) *
               C50734 * C50770 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C50734 * C1074) *
              C1077 +
          ((((C2394 + C2393 + C2392) * C118 +
             (C2391 + C2390 + C2389) * C50830) *
                C2341 +
            ((C2395 + C2396 + C2397) * C118 +
             (C2398 + C2399 + C2400) * C50830) *
                C50678) *
               C50734 * C1074 -
           (((C2345 * C1154 + C2340 * C1162 + C2344 * C319 + C2339 * C331 +
              C2343 * C304 + C2338 * C324) *
                 C50830 +
             (C2345 * C1150 + C2340 * C1155 + C2344 * C301 + C2339 * C318 +
              C2343 * C294 + C2338 * C305) *
                 C118) *
                C50678 +
            ((C2952 + C2951 + C2950) * C50830 +
             (C2949 + C2948 + C2947) * C118) *
                C2341) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C50734 * C1145 -
          (((C2583 + C2584 + C2585) * C50830 + (C2586 + C2587 + C2588) * C118) *
               C50678 +
           ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C50830 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C118) *
               C2341) *
              C50734 * C1146 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C118 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C50830) *
               C2341 +
           ((C2589 + C2590 + C2591) * C118 + (C2592 + C2593 + C2594) * C50830) *
               C50678) *
              C50734 * C1147 -
          (((C2345 * C3586 + C2340 * C3590 + C2344 * C2552 + C2339 * C2556 +
             C2343 * C1158 + C2338 * C1164) *
                C50830 +
            (C2345 * C3584 + C2340 * C3587 + C2344 * C2547 + C2339 * C2551 +
             C2343 * C1152 + C2338 * C1159) *
                C118) *
               C50678 +
           ((C2345 * C3588 + C2340 * C3591 + C2344 * C2550 + C2339 * C2555 +
             C2343 * C1160 + C2338 * C1165) *
                C50830 +
            (C2345 * C3585 + C2340 * C3589 + C2344 * C2546 + C2339 * C2549 +
             C2343 * C1153 + C2338 * C1161) *
                C118) *
               C2341) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C480 -
           (((C2777 + C2778 + C2779) * C50830 +
             (C2780 + C2781 + C2782) * C118) *
                C50678 +
            ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
              C2343 * C499 + C2338 * C516) *
                 C50830 +
             (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
              C2343 * C486 + C2338 * C500) *
                 C118) *
                C2341) *
               C481 +
           (((C2343 * C487 + C2338 * C501 + C2344 * C1267 + C2339 * C1275 +
              C2345 * C2740 + C2340 * C2743) *
                 C118 +
             (C2343 * C502 + C2338 * C517 + C2344 * C1274 + C2339 * C1279 +
              C2345 * C2744 + C2340 * C2749) *
                 C50830) *
                C2341 +
            ((C2783 + C2784 + C2785) * C118 +
             (C2786 + C2787 + C2788) * C50830) *
                C50678) *
               C482) *
              C1074 +
          ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 + C2339 * C1622 +
              C2345 * C3310 + C2340 * C3313) *
                 C118 +
             (C2343 * C938 + C2338 * C947 + C2344 * C1621 + C2339 * C1626 +
              C2345 * C3314 + C2340 * C3319) *
                 C50830) *
                C2341 +
            ((C3335 + C3336 + C3337) * C118 +
             (C3338 + C3339 + C3340) * C50830) *
                C50678) *
               C481 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C480 -
           (((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 + C2339 * C2750 +
              C2343 * C1272 + C2338 * C1278) *
                 C50830 +
             (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 + C2339 * C2745 +
              C2343 * C1266 + C2338 * C1273) *
                 C118) *
                C50678 +
            ((C2345 * C3742 + C2340 * C3745 + C2344 * C2744 + C2339 * C2749 +
              C2343 * C1274 + C2338 * C1279) *
                 C50830 +
             (C2345 * C3739 + C2340 * C3743 + C2344 * C2740 + C2339 * C2743 +
              C2343 * C1267 + C2338 * C1275) *
                 C118) *
                C2341) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[68] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50815 * C126) * C118 +
                      (C117 * C127 + C50815 * C140) * C50830) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C50960 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50815 * C516) * C50830 +
                      (C117 * C486 + C50815 * C500) * C118) *
                         C107) *
                        C50798) *
                       C1074 +
                   ((((C117 * C932 + C50815 * C937) * C118 +
                      (C117 * C938 + C50815 * C947) * C50830) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50798 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50815 * C327) * C50830 +
                      (C117 * C297 + C50815 * C311) * C118) *
                         C107) *
                        C50960) *
                       C50770) *
                      C50951 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50798 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C50960) *
                       C1074 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C50960 -
                    (((C117 * C945 + C50815 * C951) * C50830 +
                      (C117 * C936 + C50815 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                       C2339 * C311 + C2345 * C298 + C2340 * C312) *
                          C118 +
                      (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                       C2339 * C327 + C2345 * C313 + C2340 * C328) *
                          C50830) *
                         C2341 +
                     ((C2383 + C2384 + C2385) * C118 +
                      (C2386 + C2387 + C2388) * C50830) *
                         C50678) *
                        C50960 -
                    (((C2777 + C2778 + C2779) * C50830 +
                      (C2780 + C2781 + C2782) * C118) *
                         C50678 +
                     ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                       C2339 * C947 + C2343 * C499 + C2338 * C516) *
                          C50830 +
                      (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                       C2339 * C937 + C2343 * C486 + C2338 * C500) *
                          C118) *
                         C2341) *
                        C50798) *
                       C1074 +
                   ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                       C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                          C118 +
                      (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                       C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                          C50830) *
                         C2341 +
                     ((C3335 + C3336 + C3337) * C118 +
                      (C3338 + C3339 + C3340) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2583 + C2584 + C2585) * C50830 +
                      (C2586 + C2587 + C2588) * C118) *
                         C50678 +
                     ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                       C2339 * C328 + C2343 * C310 + C2338 * C327) *
                          C50830 +
                      (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                       C2339 * C312 + C2343 * C297 + C2338 * C311) *
                          C118) *
                         C2341) *
                        C50960) *
                       C50770) *
                      C50951 +
                  (((((C2782 + C2781 + C2780) * C118 +
                      (C2779 + C2778 + C2777) * C50830) *
                         C2341 +
                     ((C3111 + C3112 + C3113) * C118 +
                      (C3114 + C3115 + C3116) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2389 + C2390 + C2391) * C50830 +
                      (C2392 + C2393 + C2394) * C118) *
                         C50678 +
                     ((C2388 + C2387 + C2386) * C50830 +
                      (C2385 + C2384 + C2383) * C118) *
                         C2341) *
                        C50960) *
                       C1074 +
                   ((((C2588 + C2587 + C2586) * C118 +
                      (C2585 + C2584 + C2583) * C50830) *
                         C2341 +
                     ((C2947 + C2948 + C2949) * C118 +
                      (C2950 + C2951 + C2952) * C50830) *
                         C50678) *
                        C50960 -
                    (((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 +
                       C2339 * C1624 + C2343 * C942 + C2338 * C949) *
                          C50830 +
                      (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 +
                       C2339 * C1618 + C2343 * C934 + C2338 * C941) *
                          C118) *
                         C50678 +
                     ((C3340 + C3339 + C3338) * C50830 +
                      (C3337 + C3336 + C3335) * C118) *
                         C2341) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C50734 * C1074 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50815 * C327) * C50830 +
             (C117 * C297 + C50815 * C311) * C118) *
                C107) *
               C50734 * C50770) *
              C1076 +
          (((C376 + C375) * C107 + (C374 + C373) * C108 + (C372 + C371) * C109 +
            (C687 + C688) * C110) *
               C50734 * C50770 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C50734 * C1074) *
              C1077 +
          ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C50734 * C1074 -
           (((C117 * C675 + C50815 * C677) * C50830 +
             (C117 * C674 + C50815 * C676) * C118) *
                C110 +
            (C688 + C687) * C109 + C679 * C108 + C680 * C107) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C118 +
            (C117 * C127 + C50815 * C140) * C50830) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C50734 * C1145 -
          (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
           ((C117 * C310 + C50815 * C327) * C50830 +
            (C117 * C297 + C50815 * C311) * C118) *
               C107) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C118 +
            (C117 * C313 + C50815 * C328) * C50830) *
               C107 +
           (C377 + C378) * C108 + (C379 + C380) * C109 + (C381 + C382) * C110) *
              C50734 * C1147 -
          (((C117 * C1154 + C50815 * C1162) * C50830 +
            (C117 * C1150 + C50815 * C1155) * C118) *
               C110 +
           ((C117 * C1156 + C50815 * C1163) * C50830 +
            (C117 * C1151 + C50815 * C1157) * C118) *
               C109 +
           ((C117 * C1158 + C50815 * C1164) * C50830 +
            (C117 * C1152 + C50815 * C1159) * C118) *
               C108 +
           ((C117 * C1160 + C50815 * C1165) * C50830 +
            (C117 * C1153 + C50815 * C1161) * C118) *
               C107) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C50734 * C1074 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C50734 * C50770) *
              C1076 +
          ((((C2588 + C2587 + C2586) * C118 +
             (C2585 + C2584 + C2583) * C50830) *
                C2341 +
            ((C2947 + C2948 + C2949) * C118 +
             (C2950 + C2951 + C2952) * C50830) *
                C50678) *
               C50734 * C50770 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C50734 * C1074) *
              C1077 +
          ((((C2394 + C2393 + C2392) * C118 +
             (C2391 + C2390 + C2389) * C50830) *
                C2341 +
            ((C2395 + C2396 + C2397) * C118 +
             (C2398 + C2399 + C2400) * C50830) *
                C50678) *
               C50734 * C1074 -
           (((C2345 * C1154 + C2340 * C1162 + C2344 * C319 + C2339 * C331 +
              C2343 * C304 + C2338 * C324) *
                 C50830 +
             (C2345 * C1150 + C2340 * C1155 + C2344 * C301 + C2339 * C318 +
              C2343 * C294 + C2338 * C305) *
                 C118) *
                C50678 +
            ((C2952 + C2951 + C2950) * C50830 +
             (C2949 + C2948 + C2947) * C118) *
                C2341) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C50734 * C1145 -
          (((C2583 + C2584 + C2585) * C50830 + (C2586 + C2587 + C2588) * C118) *
               C50678 +
           ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C50830 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C118) *
               C2341) *
              C50734 * C1146 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C118 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C50830) *
               C2341 +
           ((C2589 + C2590 + C2591) * C118 + (C2592 + C2593 + C2594) * C50830) *
               C50678) *
              C50734 * C1147 -
          (((C2345 * C3586 + C2340 * C3590 + C2344 * C2552 + C2339 * C2556 +
             C2343 * C1158 + C2338 * C1164) *
                C50830 +
            (C2345 * C3584 + C2340 * C3587 + C2344 * C2547 + C2339 * C2551 +
             C2343 * C1152 + C2338 * C1159) *
                C118) *
               C50678 +
           ((C2345 * C3588 + C2340 * C3591 + C2344 * C2550 + C2339 * C2555 +
             C2343 * C1160 + C2338 * C1165) *
                C50830 +
            (C2345 * C3585 + C2340 * C3589 + C2344 * C2546 + C2339 * C2549 +
             C2343 * C1153 + C2338 * C1161) *
                C118) *
               C2341) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C117 * C119 + C50815 * C126) * C118 +
                      (C117 * C127 + C50815 * C140) * C50830) *
                         C107 +
                     (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                        C1725 -
                    (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                     ((C117 * C499 + C50815 * C516) * C50830 +
                      (C117 * C486 + C50815 * C500) * C118) *
                         C107) *
                        C50798) *
                       C50959 +
                   ((((C117 * C932 + C50815 * C937) * C118 +
                      (C117 * C938 + C50815 * C947) * C50830) *
                         C107 +
                     (C971 + C972) * C108 + (C973 + C974) * C109 +
                     (C975 + C976) * C110) *
                        C50798 -
                    (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                     ((C117 * C310 + C50815 * C327) * C50830 +
                      (C117 * C297 + C50815 * C311) * C118) *
                         C107) *
                        C1725) *
                       C50770) *
                      C50951 +
                  ((((C565 + C564) * C107 + (C563 + C562) * C108 +
                     (C561 + C560) * C109 + (C801 + C802) * C110) *
                        C50798 -
                    (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                     (C179 + C178) * C107) *
                        C1725) *
                       C50959 +
                   (((C376 + C375) * C107 + (C374 + C373) * C108 +
                     (C372 + C371) * C109 + (C687 + C688) * C110) *
                        C1725 -
                    (((C117 * C945 + C50815 * C951) * C50830 +
                      (C117 * C936 + C50815 * C946) * C118) *
                         C110 +
                     (C976 + C975) * C109 + (C974 + C973) * C108 +
                     (C972 + C971) * C107) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                       C2339 * C311 + C2345 * C298 + C2340 * C312) *
                          C118 +
                      (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                       C2339 * C327 + C2345 * C313 + C2340 * C328) *
                          C50830) *
                         C2341 +
                     ((C2383 + C2384 + C2385) * C118 +
                      (C2386 + C2387 + C2388) * C50830) *
                         C50678) *
                        C1725 -
                    (((C2777 + C2778 + C2779) * C50830 +
                      (C2780 + C2781 + C2782) * C118) *
                         C50678 +
                     ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                       C2339 * C947 + C2343 * C499 + C2338 * C516) *
                          C50830 +
                      (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                       C2339 * C937 + C2343 * C486 + C2338 * C500) *
                          C118) *
                         C2341) *
                        C50798) *
                       C50959 +
                   ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                       C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                          C118 +
                      (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                       C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                          C50830) *
                         C2341 +
                     ((C3335 + C3336 + C3337) * C118 +
                      (C3338 + C3339 + C3340) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2583 + C2584 + C2585) * C50830 +
                      (C2586 + C2587 + C2588) * C118) *
                         C50678 +
                     ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                       C2339 * C328 + C2343 * C310 + C2338 * C327) *
                          C50830 +
                      (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                       C2339 * C312 + C2343 * C297 + C2338 * C311) *
                          C118) *
                         C2341) *
                        C1725) *
                       C50770) *
                      C50951 +
                  (((((C2782 + C2781 + C2780) * C118 +
                      (C2779 + C2778 + C2777) * C50830) *
                         C2341 +
                     ((C3111 + C3112 + C3113) * C118 +
                      (C3114 + C3115 + C3116) * C50830) *
                         C50678) *
                        C50798 -
                    (((C2389 + C2390 + C2391) * C50830 +
                      (C2392 + C2393 + C2394) * C118) *
                         C50678 +
                     ((C2388 + C2387 + C2386) * C50830 +
                      (C2385 + C2384 + C2383) * C118) *
                         C2341) *
                        C1725) *
                       C50959 +
                   ((((C2588 + C2587 + C2586) * C118 +
                      (C2585 + C2584 + C2583) * C50830) *
                         C2341 +
                     ((C2947 + C2948 + C2949) * C118 +
                      (C2950 + C2951 + C2952) * C50830) *
                         C50678) *
                        C1725 -
                    (((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 +
                       C2339 * C1624 + C2343 * C942 + C2338 * C949) *
                          C50830 +
                      (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 +
                       C2339 * C1618 + C2343 * C934 + C2338 * C941) *
                          C118) *
                         C50678 +
                     ((C3340 + C3339 + C3338) * C50830 +
                      (C3337 + C3336 + C3335) * C118) *
                         C2341) *
                        C50798) *
                       C50770) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C51006 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C51007 +
                   (((C117 * C487 + C50815 * C501) * C118 +
                     (C117 * C502 + C50815 * C517) * C50830) *
                        C107 +
                    (C566 + C567) * C108 + (C568 + C569) * C109 +
                    (C570 + C571) * C110) *
                       C2141) *
                      C50959 +
                  ((((C117 * C932 + C50815 * C937) * C118 +
                     (C117 * C938 + C50815 * C947) * C50830) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C51007 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C51006 -
                   (((C117 * C1268 + C50815 * C1276) * C50830 +
                     (C117 * C1264 + C50815 * C1269) * C118) *
                        C110 +
                    ((C117 * C1270 + C50815 * C1277) * C50830 +
                     (C117 * C1265 + C50815 * C1271) * C118) *
                        C109 +
                    ((C117 * C1272 + C50815 * C1278) * C50830 +
                     (C117 * C1266 + C50815 * C1273) * C118) *
                        C108 +
                    ((C117 * C1274 + C50815 * C1279) * C50830 +
                     (C117 * C1267 + C50815 * C1275) * C118) *
                        C107) *
                       C2141) *
                      C50770) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C51006 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C51007 +
                   (((C2343 * C487 + C2338 * C501 + C2344 * C1267 +
                      C2339 * C1275 + C2345 * C2740 + C2340 * C2743) *
                         C118 +
                     (C2343 * C502 + C2338 * C517 + C2344 * C1274 +
                      C2339 * C1279 + C2345 * C2744 + C2340 * C2749) *
                         C50830) *
                        C2341 +
                    ((C2783 + C2784 + C2785) * C118 +
                     (C2786 + C2787 + C2788) * C50830) *
                        C50678) *
                       C2141) *
                      C50959 +
                  ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                      C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                         C118 +
                     (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                      C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                         C50830) *
                        C2341 +
                    ((C3335 + C3336 + C3337) * C118 +
                     (C3338 + C3339 + C3340) * C50830) *
                        C50678) *
                       C51007 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C51006 -
                   (((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 +
                      C2339 * C2750 + C2343 * C1272 + C2338 * C1278) *
                         C50830 +
                     (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 +
                      C2339 * C2745 + C2343 * C1266 + C2338 * C1273) *
                         C118) *
                        C50678 +
                    ((C2345 * C3742 + C2340 * C3745 + C2344 * C2744 +
                      C2339 * C2749 + C2343 * C1274 + C2338 * C1279) *
                         C50830 +
                     (C2345 * C3739 + C2340 * C3743 + C2344 * C2740 +
                      C2339 * C2743 + C2343 * C1267 + C2338 * C1275) *
                         C118) *
                        C2341) *
                       C2141) *
                      C50770) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C1725 -
           (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50815 * C516) * C50830 +
             (C117 * C486 + C50815 * C500) * C118) *
                C107) *
               C50798) *
              C289 +
          ((((C117 * C932 + C50815 * C937) * C118 +
             (C117 * C938 + C50815 * C947) * C50830) *
                C107 +
            (C971 + C972) * C108 + (C973 + C974) * C109 +
            (C975 + C976) * C110) *
               C50798 -
           (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
            ((C117 * C310 + C50815 * C327) * C50830 +
             (C117 * C297 + C50815 * C311) * C118) *
                C107) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50815 * C312) * C118 +
             (C117 * C313 + C50815 * C328) * C50830) *
                C107 +
            (C377 + C378) * C108 + (C379 + C380) * C109 +
            (C381 + C382) * C110) *
               C1725 -
           (((C117 * C1615 + C50815 * C1623) * C50830 +
             (C117 * C1611 + C50815 * C1616) * C118) *
                C110 +
            ((C117 * C1617 + C50815 * C1624) * C50830 +
             (C117 * C1612 + C50815 * C1618) * C118) *
                C109 +
            ((C117 * C1619 + C50815 * C1625) * C50830 +
             (C117 * C1613 + C50815 * C1620) * C118) *
                C108 +
            ((C117 * C1621 + C50815 * C1626) * C50830 +
             (C117 * C1614 + C50815 * C1622) * C118) *
                C107) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C118 +
             (C117 * C127 + C50815 * C140) * C50830) *
                C107 +
            (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
               C1725 -
           (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
            ((C117 * C499 + C50815 * C516) * C50830 +
             (C117 * C486 + C50815 * C500) * C118) *
                C107) *
               C50798) *
              C50718 * C1076 +
          (((C565 + C564) * C107 + (C563 + C562) * C108 + (C561 + C560) * C109 +
            (C801 + C802) * C110) *
               C50798 -
           (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
            (C179 + C178) * C107) *
               C1725) *
              C50718 * C1077 +
          ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
            (C186 + C187) * C110) *
               C1725 -
           (((C117 * C789 + C50815 * C791) * C50830 +
             (C117 * C788 + C50815 * C790) * C118) *
                C110 +
            (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C118 +
            (C117 * C127 + C50815 * C140) * C50830) *
               C107 +
           (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
              C1891 -
          (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
           ((C117 * C499 + C50815 * C516) * C50830 +
            (C117 * C486 + C50815 * C500) * C118) *
               C107) *
              C1892 +
          (((C117 * C487 + C50815 * C501) * C118 +
            (C117 * C502 + C50815 * C517) * C50830) *
               C107 +
           (C566 + C567) * C108 + (C568 + C569) * C109 + (C570 + C571) * C110) *
              C1893 -
          (((C117 * C1899 + C50815 * C1907) * C50830 +
            (C117 * C1895 + C50815 * C1900) * C118) *
               C110 +
           ((C117 * C1901 + C50815 * C1908) * C50830 +
            (C117 * C1896 + C50815 * C1902) * C118) *
               C109 +
           ((C117 * C1903 + C50815 * C1909) * C50830 +
            (C117 * C1897 + C50815 * C1904) * C118) *
               C108 +
           ((C117 * C1905 + C50815 * C1910) * C50830 +
            (C117 * C1898 + C50815 * C1906) * C118) *
               C107) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C1725 -
           (((C2777 + C2778 + C2779) * C50830 +
             (C2780 + C2781 + C2782) * C118) *
                C50678 +
            ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
              C2343 * C499 + C2338 * C516) *
                 C50830 +
             (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
              C2343 * C486 + C2338 * C500) *
                 C118) *
                C2341) *
               C50798) *
              C50718 * C1076 +
          ((((C2782 + C2781 + C2780) * C118 +
             (C2779 + C2778 + C2777) * C50830) *
                C2341 +
            ((C3111 + C3112 + C3113) * C118 +
             (C3114 + C3115 + C3116) * C50830) *
                C50678) *
               C50798 -
           (((C2389 + C2390 + C2391) * C50830 +
             (C2392 + C2393 + C2394) * C118) *
                C50678 +
            ((C2388 + C2387 + C2386) * C50830 +
             (C2385 + C2384 + C2383) * C118) *
                C2341) *
               C1725) *
              C50718 * C1077 +
          ((((C2394 + C2393 + C2392) * C118 +
             (C2391 + C2390 + C2389) * C50830) *
                C2341 +
            ((C2395 + C2396 + C2397) * C118 +
             (C2398 + C2399 + C2400) * C50830) *
                C50678) *
               C1725 -
           (((C2345 * C1615 + C2340 * C1623 + C2344 * C944 + C2339 * C950 +
              C2343 * C493 + C2338 * C513) *
                 C50830 +
             (C2345 * C1611 + C2340 * C1616 + C2344 * C935 + C2339 * C943 +
              C2343 * C483 + C2338 * C494) *
                 C118) *
                C50678 +
            ((C3116 + C3115 + C3114) * C50830 +
             (C3113 + C3112 + C3111) * C118) *
                C2341) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C118 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C50830) *
                C2341 +
            ((C2383 + C2384 + C2385) * C118 +
             (C2386 + C2387 + C2388) * C50830) *
                C50678) *
               C1725 -
           (((C2777 + C2778 + C2779) * C50830 +
             (C2780 + C2781 + C2782) * C118) *
                C50678 +
            ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
              C2343 * C499 + C2338 * C516) *
                 C50830 +
             (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
              C2343 * C486 + C2338 * C500) *
                 C118) *
                C2341) *
               C50798) *
              C289 +
          ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 + C2339 * C1622 +
              C2345 * C3310 + C2340 * C3313) *
                 C118 +
             (C2343 * C938 + C2338 * C947 + C2344 * C1621 + C2339 * C1626 +
              C2345 * C3314 + C2340 * C3319) *
                 C50830) *
                C2341 +
            ((C3335 + C3336 + C3337) * C118 +
             (C3338 + C3339 + C3340) * C50830) *
                C50678) *
               C50798 -
           (((C2583 + C2584 + C2585) * C50830 +
             (C2586 + C2587 + C2588) * C118) *
                C50678 +
            ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C50830 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C118) *
                C2341) *
               C1725) *
              C290 +
          ((((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
              C2345 * C2546 + C2340 * C2549) *
                 C118 +
             (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
              C2345 * C2550 + C2340 * C2555) *
                 C50830) *
                C2341 +
            ((C2589 + C2590 + C2591) * C118 +
             (C2592 + C2593 + C2594) * C50830) *
                C50678) *
               C1725 -
           (((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 + C2339 * C3320 +
              C2343 * C1619 + C2338 * C1625) *
                 C50830 +
             (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 + C2339 * C3315 +
              C2343 * C1613 + C2338 * C1620) *
                 C118) *
                C50678 +
            ((C2345 * C4236 + C2340 * C4239 + C2344 * C3314 + C2339 * C3319 +
              C2343 * C1621 + C2338 * C1626) *
                 C50830 +
             (C2345 * C4233 + C2340 * C4237 + C2344 * C3310 + C2339 * C3313 +
              C2343 * C1614 + C2338 * C1622) *
                 C118) *
                C2341) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C118 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C50830) *
               C2341 +
           ((C2383 + C2384 + C2385) * C118 + (C2386 + C2387 + C2388) * C50830) *
               C50678) *
              C1891 -
          (((C2777 + C2778 + C2779) * C50830 + (C2780 + C2781 + C2782) * C118) *
               C50678 +
           ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 + C2339 * C947 +
             C2343 * C499 + C2338 * C516) *
                C50830 +
            (C2345 * C1614 + C2340 * C1622 + C2344 * C932 + C2339 * C937 +
             C2343 * C486 + C2338 * C500) *
                C118) *
               C2341) *
              C1892 +
          (((C2343 * C487 + C2338 * C501 + C2344 * C1267 + C2339 * C1275 +
             C2345 * C2740 + C2340 * C2743) *
                C118 +
            (C2343 * C502 + C2338 * C517 + C2344 * C1274 + C2339 * C1279 +
             C2345 * C2744 + C2340 * C2749) *
                C50830) *
               C2341 +
           ((C2783 + C2784 + C2785) * C118 + (C2786 + C2787 + C2788) * C50830) *
               C50678) *
              C1893 -
          (((C2345 * C4634 + C2340 * C4642 + C2344 * C4635 + C2339 * C4643 +
             C2343 * C1903 + C2338 * C1909) *
                C50830 +
            (C2345 * C4630 + C2340 * C4636 + C2344 * C4631 + C2339 * C4637 +
             C2343 * C1897 + C2338 * C1904) *
                C118) *
               C50678 +
           ((C2345 * C4638 + C2340 * C4644 + C2344 * C4639 + C2339 * C4645 +
             C2343 * C1905 + C2338 * C1910) *
                C50830 +
            (C2345 * C4632 + C2340 * C4640 + C2344 * C4633 + C2339 * C4641 +
             C2343 * C1898 + C2338 * C1906) *
                C118) *
               C2341) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C51006 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C51007 +
                   (((C117 * C487 + C50815 * C501) * C118 +
                     (C117 * C502 + C50815 * C517) * C50830) *
                        C107 +
                    (C566 + C567) * C108 + (C568 + C569) * C109 +
                    (C570 + C571) * C110) *
                       C2141) *
                      C50718 * C50951 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C51007 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C51006 -
                   (((C117 * C511 + C50815 * C522) * C50830 +
                     (C117 * C492 + C50815 * C512) * C118) *
                        C110 +
                    (C571 + C570) * C109 + (C569 + C568) * C108 +
                    (C567 + C566) * C107) *
                       C2141) *
                      C50718 * C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C51006 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C51007 +
                   (((C2343 * C487 + C2338 * C501 + C2344 * C1267 +
                      C2339 * C1275 + C2345 * C2740 + C2340 * C2743) *
                         C118 +
                     (C2343 * C502 + C2338 * C517 + C2344 * C1274 +
                      C2339 * C1279 + C2345 * C2744 + C2340 * C2749) *
                         C50830) *
                        C2341 +
                    ((C2783 + C2784 + C2785) * C118 +
                     (C2786 + C2787 + C2788) * C50830) *
                        C50678) *
                       C2141) *
                      C50718 * C50951 +
                  ((((C2782 + C2781 + C2780) * C118 +
                     (C2779 + C2778 + C2777) * C50830) *
                        C2341 +
                    ((C3111 + C3112 + C3113) * C118 +
                     (C3114 + C3115 + C3116) * C50830) *
                        C50678) *
                       C51007 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C51006 -
                   (((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 +
                      C2339 * C1277 + C2343 * C506 + C2338 * C519) *
                         C50830 +
                     (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 +
                      C2339 * C1271 + C2343 * C489 + C2338 * C505) *
                         C118) *
                        C50678 +
                    ((C2788 + C2787 + C2786) * C50830 +
                     (C2785 + C2784 + C2783) * C118) *
                        C2341) *
                       C2141) *
                      C50718 * C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C1725 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C50798) *
                      C50718 * C1076 +
                  (((C565 + C564) * C107 + (C563 + C562) * C108 +
                    (C561 + C560) * C109 + (C801 + C802) * C110) *
                       C50798 -
                   (C190 * C110 + C191 * C109 + (C181 + C180) * C108 +
                    (C179 + C178) * C107) *
                       C1725) *
                      C50718 * C1077 +
                  ((C188 * C107 + C189 * C108 + (C185 + C184) * C109 +
                    (C186 + C187) * C110) *
                       C1725 -
                   (((C117 * C789 + C50815 * C791) * C50830 +
                     (C117 * C788 + C50815 * C790) * C118) *
                        C110 +
                    (C802 + C801) * C109 + C793 * C108 + C794 * C107) *
                       C50798) *
                      C50718 * C1078)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C117 * C119 + C50815 * C126) * C118 +
                     (C117 * C127 + C50815 * C140) * C50830) *
                        C107 +
                    (C178 + C179) * C108 + C188 * C109 + C189 * C110) *
                       C1725 -
                   (C793 * C110 + C794 * C109 + (C564 + C565) * C108 +
                    ((C117 * C499 + C50815 * C516) * C50830 +
                     (C117 * C486 + C50815 * C500) * C118) *
                        C107) *
                       C50798) *
                      C289 +
                  ((((C117 * C932 + C50815 * C937) * C118 +
                     (C117 * C938 + C50815 * C947) * C50830) *
                        C107 +
                    (C971 + C972) * C108 + (C973 + C974) * C109 +
                    (C975 + C976) * C110) *
                       C50798 -
                   (C679 * C110 + C680 * C109 + (C375 + C376) * C108 +
                    ((C117 * C310 + C50815 * C327) * C50830 +
                     (C117 * C297 + C50815 * C311) * C118) *
                        C107) *
                       C1725) *
                      C290 +
                  ((((C117 * C298 + C50815 * C312) * C118 +
                     (C117 * C313 + C50815 * C328) * C50830) *
                        C107 +
                    (C377 + C378) * C108 + (C379 + C380) * C109 +
                    (C381 + C382) * C110) *
                       C1725 -
                   (((C117 * C1615 + C50815 * C1623) * C50830 +
                     (C117 * C1611 + C50815 * C1616) * C118) *
                        C110 +
                    ((C117 * C1617 + C50815 * C1624) * C50830 +
                     (C117 * C1612 + C50815 * C1618) * C118) *
                        C109 +
                    ((C117 * C1619 + C50815 * C1625) * C50830 +
                     (C117 * C1613 + C50815 * C1620) * C118) *
                        C108 +
                    ((C117 * C1621 + C50815 * C1626) * C50830 +
                     (C117 * C1614 + C50815 * C1622) * C118) *
                        C107) *
                       C50798) *
                      C291) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C1725 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C50798) *
                      C50718 * C1076 +
                  ((((C2782 + C2781 + C2780) * C118 +
                     (C2779 + C2778 + C2777) * C50830) *
                        C2341 +
                    ((C3111 + C3112 + C3113) * C118 +
                     (C3114 + C3115 + C3116) * C50830) *
                        C50678) *
                       C50798 -
                   (((C2389 + C2390 + C2391) * C50830 +
                     (C2392 + C2393 + C2394) * C118) *
                        C50678 +
                    ((C2388 + C2387 + C2386) * C50830 +
                     (C2385 + C2384 + C2383) * C118) *
                        C2341) *
                       C1725) *
                      C50718 * C1077 +
                  ((((C2394 + C2393 + C2392) * C118 +
                     (C2391 + C2390 + C2389) * C50830) *
                        C2341 +
                    ((C2395 + C2396 + C2397) * C118 +
                     (C2398 + C2399 + C2400) * C50830) *
                        C50678) *
                       C1725 -
                   (((C2345 * C1615 + C2340 * C1623 + C2344 * C944 +
                      C2339 * C950 + C2343 * C493 + C2338 * C513) *
                         C50830 +
                     (C2345 * C1611 + C2340 * C1616 + C2344 * C935 +
                      C2339 * C943 + C2343 * C483 + C2338 * C494) *
                         C118) *
                        C50678 +
                    ((C3116 + C3115 + C3114) * C50830 +
                     (C3113 + C3112 + C3111) * C118) *
                        C2341) *
                       C50798) *
                      C50718 * C1078)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C2343 * C119 + C2338 * C126 + C2344 * C297 +
                      C2339 * C311 + C2345 * C298 + C2340 * C312) *
                         C118 +
                     (C2343 * C127 + C2338 * C140 + C2344 * C310 +
                      C2339 * C327 + C2345 * C313 + C2340 * C328) *
                         C50830) *
                        C2341 +
                    ((C2383 + C2384 + C2385) * C118 +
                     (C2386 + C2387 + C2388) * C50830) *
                        C50678) *
                       C1725 -
                   (((C2777 + C2778 + C2779) * C50830 +
                     (C2780 + C2781 + C2782) * C118) *
                        C50678 +
                    ((C2345 * C1621 + C2340 * C1626 + C2344 * C938 +
                      C2339 * C947 + C2343 * C499 + C2338 * C516) *
                         C50830 +
                     (C2345 * C1614 + C2340 * C1622 + C2344 * C932 +
                      C2339 * C937 + C2343 * C486 + C2338 * C500) *
                         C118) *
                        C2341) *
                       C50798) *
                      C289 +
                  ((((C2343 * C932 + C2338 * C937 + C2344 * C1614 +
                      C2339 * C1622 + C2345 * C3310 + C2340 * C3313) *
                         C118 +
                     (C2343 * C938 + C2338 * C947 + C2344 * C1621 +
                      C2339 * C1626 + C2345 * C3314 + C2340 * C3319) *
                         C50830) *
                        C2341 +
                    ((C3335 + C3336 + C3337) * C118 +
                     (C3338 + C3339 + C3340) * C50830) *
                        C50678) *
                       C50798 -
                   (((C2583 + C2584 + C2585) * C50830 +
                     (C2586 + C2587 + C2588) * C118) *
                        C50678 +
                    ((C2345 * C1160 + C2340 * C1165 + C2344 * C313 +
                      C2339 * C328 + C2343 * C310 + C2338 * C327) *
                         C50830 +
                     (C2345 * C1153 + C2340 * C1161 + C2344 * C298 +
                      C2339 * C312 + C2343 * C297 + C2338 * C311) *
                         C118) *
                        C2341) *
                       C1725) *
                      C290 +
                  ((((C2343 * C298 + C2338 * C312 + C2344 * C1153 +
                      C2339 * C1161 + C2345 * C2546 + C2340 * C2549) *
                         C118 +
                     (C2343 * C313 + C2338 * C328 + C2344 * C1160 +
                      C2339 * C1165 + C2345 * C2550 + C2340 * C2555) *
                         C50830) *
                        C2341 +
                    ((C2589 + C2590 + C2591) * C118 +
                     (C2592 + C2593 + C2594) * C50830) *
                        C50678) *
                       C1725 -
                   (((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 +
                      C2339 * C3320 + C2343 * C1619 + C2338 * C1625) *
                         C50830 +
                     (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 +
                      C2339 * C3315 + C2343 * C1613 + C2338 * C1620) *
                         C118) *
                        C50678 +
                    ((C2345 * C4236 + C2340 * C4239 + C2344 * C3314 +
                      C2339 * C3319 + C2343 * C1621 + C2338 * C1626) *
                         C50830 +
                     (C2345 * C4233 + C2340 * C4237 + C2344 * C3310 +
                      C2339 * C3313 + C2343 * C1614 + C2338 * C1622) *
                         C118) *
                        C2341) *
                       C50798) *
                      C291) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C50734 * C50959 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C50734 * C50770) *
                      C51002 +
                  ((((C24883 + C24882 + C24881) * C118 +
                     (C24880 + C24879 + C24878) * C50830) *
                        C50944 +
                    ((C25230 + C25231 + C25232) * C118 +
                     (C25233 + C25234 + C25235) * C50830) *
                        C50678) *
                       C50734 * C50770 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C50734 * C50959) *
                      C51003 +
                  ((((C24701 + C24700 + C24699) * C118 +
                     (C24698 + C24697 + C24696) * C50830) *
                        C50944 +
                    ((C24702 + C24703 + C24704) * C118 +
                     (C24705 + C24706 + C24707) * C50830) *
                        C50678) *
                       C50734 * C50959 -
                   (((C24652 * C1154 + C24647 * C1162 + C24651 * C319 +
                      C51009 * C331 + C24650 * C304 + C51008 * C324) *
                         C50830 +
                     (C24652 * C1150 + C24647 * C1155 + C24651 * C301 +
                      C51009 * C318 + C24650 * C294 + C51008 * C305) *
                         C118) *
                        C50678 +
                    ((C25235 + C25234 + C25233) * C50830 +
                     (C25232 + C25231 + C25230) * C118) *
                        C50944) *
                       C50734 * C50770) *
                      C673)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                       C51009 * C311 + C24652 * C298 + C24647 * C312) *
                          C118 +
                      (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                       C51009 * C327 + C24652 * C313 + C24647 * C328) *
                          C50830) *
                         C50944 +
                     ((C24690 + C24691 + C24692) * C118 +
                      (C24693 + C24694 + C24695) * C50830) *
                         C50678) *
                        C50960 -
                    (((C25060 + C25061 + C25062) * C50830 +
                      (C25063 + C25064 + C25065) * C118) *
                         C50678 +
                     ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                       C51009 * C947 + C24650 * C499 + C51008 * C516) *
                          C50830 +
                      (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                       C51009 * C937 + C24650 * C486 + C51008 * C500) *
                          C118) *
                         C50944) *
                        C50798) *
                       C50959 +
                   ((((C24650 * C932 + C51008 * C937 + C24651 * C1614 +
                       C51009 * C1622 + C24652 * C3310 + C24647 * C3313) *
                          C118 +
                      (C24650 * C938 + C51008 * C947 + C24651 * C1621 +
                       C51009 * C1626 + C24652 * C3314 + C24647 * C3319) *
                          C50830) *
                         C50944 +
                     ((C25606 + C25607 + C25608) * C118 +
                      (C25609 + C25610 + C25611) * C50830) *
                         C50678) *
                        C50798 -
                    (((C24878 + C24879 + C24880) * C50830 +
                      (C24881 + C24882 + C24883) * C118) *
                         C50678 +
                     ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                       C51009 * C328 + C24650 * C310 + C51008 * C327) *
                          C50830 +
                      (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                       C51009 * C312 + C24650 * C297 + C51008 * C311) *
                          C118) *
                         C50944) *
                        C50960) *
                       C50770) *
                      C292 +
                  (((((C25065 + C25064 + C25063) * C118 +
                      (C25062 + C25061 + C25060) * C50830) *
                         C50944 +
                     ((C25394 + C25395 + C25396) * C118 +
                      (C25397 + C25398 + C25399) * C50830) *
                         C50678) *
                        C50798 -
                    (((C24696 + C24697 + C24698) * C50830 +
                      (C24699 + C24700 + C24701) * C118) *
                         C50678 +
                     ((C24695 + C24694 + C24693) * C50830 +
                      (C24692 + C24691 + C24690) * C118) *
                         C50944) *
                        C50960) *
                       C50959 +
                   ((((C24883 + C24882 + C24881) * C118 +
                      (C24880 + C24879 + C24878) * C50830) *
                         C50944 +
                     ((C25230 + C25231 + C25232) * C118 +
                      (C25233 + C25234 + C25235) * C50830) *
                         C50678) *
                        C50960 -
                    (((C24652 * C3317 + C24647 * C3321 + C24651 * C1617 +
                       C51009 * C1624 + C24650 * C942 + C51008 * C949) *
                          C50830 +
                      (C24652 * C3312 + C24647 * C3318 + C24651 * C1612 +
                       C51009 * C1618 + C24650 * C934 + C51008 * C941) *
                          C118) *
                         C50678 +
                     ((C25611 + C25610 + C25609) * C50830 +
                      (C25608 + C25607 + C25606) * C118) *
                         C50944) *
                        C50798) *
                       C50770) *
                      C50705)) /
                (p * q * std::sqrt(p + q));
    d2ee[77] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C50734 * C289 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C50734 * C290 +
                   (((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                      C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                         C118 +
                     (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                      C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                         C50830) *
                        C50944 +
                    ((C24884 + C24885 + C24886) * C118 +
                     (C24887 + C24888 + C24889) * C50830) *
                        C50678) *
                       C50734 * C291) *
                      C292 +
                  ((((C24883 + C24882 + C24881) * C118 +
                     (C24880 + C24879 + C24878) * C50830) *
                        C50944 +
                    ((C24650 * C295 + C51008 * C307 + C24651 * C300 +
                      C51009 * C316 + C24652 * C1151 + C24647 * C1157) *
                         C118 +
                     (C24650 * C306 + C51008 * C325 + C24651 * C317 +
                      C51009 * C330 + C24652 * C1156 + C24647 * C1163) *
                         C50830) *
                        C50678) *
                       C50734 * C290 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C50734 * C289 -
                   (((C24652 * C2553 + C24647 * C2557 + C24651 * C1156 +
                      C51009 * C1163 + C24650 * C317 + C51008 * C330) *
                         C50830 +
                     (C24652 * C2548 + C24647 * C2554 + C24651 * C1151 +
                      C51009 * C1157 + C24650 * C300 + C51008 * C316) *
                         C118) *
                        C50678 +
                    ((C24889 + C24888 + C24887) * C50830 +
                     (C24886 + C24885 + C24884) * C118) *
                        C50944) *
                       C50734 * C291) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C118 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50830) *
                       C50944 +
                   ((C24690 + C24691 + C24692) * C118 +
                    (C24693 + C24694 + C24695) * C50830) *
                       C50678) *
                      C50734 * C50718 * C113 -
                  (((C24696 + C24697 + C24698) * C50830 +
                    (C24699 + C24700 + C24701) * C118) *
                       C50678 +
                   ((C24695 + C24694 + C24693) * C50830 +
                    (C24692 + C24691 + C24690) * C118) *
                       C50944) *
                      C50734 * C50718 * C114 +
                  (((C24701 + C24700 + C24699) * C118 +
                    (C24698 + C24697 + C24696) * C50830) *
                       C50944 +
                   ((C24702 + C24703 + C24704) * C118 +
                    (C24705 + C24706 + C24707) * C50830) *
                       C50678) *
                      C50734 * C50718 * C115 -
                  (((C24652 * C322 + C24647 * C333 + C24651 * C321 +
                     C51009 * C332 + C24650 * C134 + C51008 * C144) *
                        C50830 +
                    (C24652 * C303 + C24647 * C323 + C24651 * C302 +
                     C51009 * C320 + C24650 * C123 + C51008 * C135) *
                        C118) *
                       C50678 +
                   ((C24707 + C24706 + C24705) * C50830 +
                    (C24704 + C24703 + C24702) * C118) *
                       C50944) *
                      C50734 * C50718 * C116)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C480 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C481 +
                   (((C24650 * C487 + C51008 * C501 + C24651 * C1267 +
                      C51009 * C1275 + C24652 * C2740 + C24647 * C2743) *
                         C118 +
                     (C24650 * C502 + C51008 * C517 + C24651 * C1274 +
                      C51009 * C1279 + C24652 * C2744 + C24647 * C2749) *
                         C50830) *
                        C50944 +
                    ((C25066 + C25067 + C25068) * C118 +
                     (C25069 + C25070 + C25071) * C50830) *
                        C50678) *
                       C482) *
                      C50718 * C292 +
                  ((((C25065 + C25064 + C25063) * C118 +
                     (C25062 + C25061 + C25060) * C50830) *
                        C50944 +
                    ((C24650 * C484 + C51008 * C496 + C24651 * C934 +
                      C51009 * C941 + C24652 * C1612 + C24647 * C1618) *
                         C118 +
                     (C24650 * C495 + C51008 * C514 + C24651 * C942 +
                      C51009 * C949 + C24652 * C1617 + C24647 * C1624) *
                         C50830) *
                        C50678) *
                       C481 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C480 -
                   (((C24652 * C2747 + C24647 * C2751 + C24651 * C1270 +
                      C51009 * C1277 + C24650 * C506 + C51008 * C519) *
                         C50830 +
                     (C24652 * C2742 + C24647 * C2748 + C24651 * C1265 +
                      C51009 * C1271 + C24650 * C489 + C51008 * C505) *
                         C118) *
                        C50678 +
                    ((C25071 + C25070 + C25069) * C50830 +
                     (C25068 + C25067 + C25066) * C118) *
                        C50944) *
                       C482) *
                      C50718 * C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[78] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C50960 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C50798) *
                      C50718 * C51002 +
                  ((((C25065 + C25064 + C25063) * C118 +
                     (C25062 + C25061 + C25060) * C50830) *
                        C50944 +
                    ((C25394 + C25395 + C25396) * C118 +
                     (C25397 + C25398 + C25399) * C50830) *
                        C50678) *
                       C50798 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C50960) *
                      C50718 * C51003 +
                  ((((C24701 + C24700 + C24699) * C118 +
                     (C24698 + C24697 + C24696) * C50830) *
                        C50944 +
                    ((C24702 + C24703 + C24704) * C118 +
                     (C24705 + C24706 + C24707) * C50830) *
                        C50678) *
                       C50960 -
                   (((C24652 * C1615 + C24647 * C1623 + C24651 * C944 +
                      C51009 * C950 + C24650 * C493 + C51008 * C513) *
                         C50830 +
                     (C24652 * C1611 + C24647 * C1616 + C24651 * C935 +
                      C51009 * C943 + C24650 * C483 + C51008 * C494) *
                         C118) *
                        C50678 +
                    ((C25399 + C25398 + C25397) * C50830 +
                     (C25396 + C25395 + C25394) * C118) *
                        C50944) *
                       C50798) *
                      C50718 * C673)) /
                (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C118 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50830) *
                       C50944 +
                   ((C24690 + C24691 + C24692) * C118 +
                    (C24693 + C24694 + C24695) * C50830) *
                       C50678) *
                      C50734 * C50718 * C113 -
                  (((C24696 + C24697 + C24698) * C50830 +
                    (C24699 + C24700 + C24701) * C118) *
                       C50678 +
                   ((C24695 + C24694 + C24693) * C50830 +
                    (C24692 + C24691 + C24690) * C118) *
                       C50944) *
                      C50734 * C50718 * C114 +
                  (((C24701 + C24700 + C24699) * C118 +
                    (C24698 + C24697 + C24696) * C50830) *
                       C50944 +
                   ((C24702 + C24703 + C24704) * C118 +
                    (C24705 + C24706 + C24707) * C50830) *
                       C50678) *
                      C50734 * C50718 * C115 -
                  (((C24652 * C322 + C24647 * C333 + C24651 * C321 +
                     C51009 * C332 + C24650 * C134 + C51008 * C144) *
                        C50830 +
                    (C24652 * C303 + C24647 * C323 + C24651 * C302 +
                     C51009 * C320 + C24650 * C123 + C51008 * C135) *
                        C118) *
                       C50678 +
                   ((C24707 + C24706 + C24705) * C50830 +
                    (C24704 + C24703 + C24702) * C118) *
                       C50944) *
                      C50734 * C50718 * C116)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C50734 * C289 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C50734 * C290 +
                   (((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                      C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                         C118 +
                     (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                      C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                         C50830) *
                        C50944 +
                    ((C24884 + C24885 + C24886) * C118 +
                     (C24887 + C24888 + C24889) * C50830) *
                        C50678) *
                       C50734 * C291) *
                      C292 +
                  ((((C24883 + C24882 + C24881) * C118 +
                     (C24880 + C24879 + C24878) * C50830) *
                        C50944 +
                    ((C24650 * C295 + C51008 * C307 + C24651 * C300 +
                      C51009 * C316 + C24652 * C1151 + C24647 * C1157) *
                         C118 +
                     (C24650 * C306 + C51008 * C325 + C24651 * C317 +
                      C51009 * C330 + C24652 * C1156 + C24647 * C1163) *
                         C50830) *
                        C50678) *
                       C50734 * C290 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C50734 * C289 -
                   (((C24652 * C2553 + C24647 * C2557 + C24651 * C1156 +
                      C51009 * C1163 + C24650 * C317 + C51008 * C330) *
                         C50830 +
                     (C24652 * C2548 + C24647 * C2554 + C24651 * C1151 +
                      C51009 * C1157 + C24650 * C300 + C51008 * C316) *
                         C118) *
                        C50678 +
                    ((C24889 + C24888 + C24887) * C50830 +
                     (C24886 + C24885 + C24884) * C118) *
                        C50944) *
                       C50734 * C291) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C50734 * C51004 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C50734 * C51005 +
                   (((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                      C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                         C118 +
                     (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                      C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                         C50830) *
                        C50944 +
                    ((C24884 + C24885 + C24886) * C118 +
                     (C24887 + C24888 + C24889) * C50830) *
                        C50678) *
                       C50734 * C1380) *
                      C50951 +
                  ((((C24883 + C24882 + C24881) * C118 +
                     (C24880 + C24879 + C24878) * C50830) *
                        C50944 +
                    ((C25230 + C25231 + C25232) * C118 +
                     (C25233 + C25234 + C25235) * C50830) *
                        C50678) *
                       C50734 * C51005 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C50734 * C51004 -
                   (((C24652 * C2553 + C24647 * C2557 + C24651 * C1156 +
                      C51009 * C1163 + C24650 * C317 + C51008 * C330) *
                         C50830 +
                     (C24652 * C2548 + C24647 * C2554 + C24651 * C1151 +
                      C51009 * C1157 + C24650 * C300 + C51008 * C316) *
                         C118) *
                        C50678 +
                    ((C24889 + C24888 + C24887) * C50830 +
                     (C24886 + C24885 + C24884) * C118) *
                        C50944) *
                       C50734 * C1380) *
                      C50705)) /
                (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C50960 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C50798) *
                      C51004 +
                  ((((C24650 * C932 + C51008 * C937 + C24651 * C1614 +
                      C51009 * C1622 + C24652 * C3310 + C24647 * C3313) *
                         C118 +
                     (C24650 * C938 + C51008 * C947 + C24651 * C1621 +
                      C51009 * C1626 + C24652 * C3314 + C24647 * C3319) *
                         C50830) *
                        C50944 +
                    ((C25606 + C25607 + C25608) * C118 +
                     (C25609 + C25610 + C25611) * C50830) *
                        C50678) *
                       C50798 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C50960) *
                      C51005 +
                  ((((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                      C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                         C118 +
                     (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                      C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                         C50830) *
                        C50944 +
                    ((C24884 + C24885 + C24886) * C118 +
                     (C24887 + C24888 + C24889) * C50830) *
                        C50678) *
                       C50960 -
                   (((C24652 * C4234 + C24647 * C4238 + C24651 * C3316 +
                      C51009 * C3320 + C24650 * C1619 + C51008 * C1625) *
                         C50830 +
                     (C24652 * C4232 + C24647 * C4235 + C24651 * C3311 +
                      C51009 * C3315 + C24650 * C1613 + C51008 * C1620) *
                         C118) *
                        C50678 +
                    ((C24652 * C4236 + C24647 * C4239 + C24651 * C3314 +
                      C51009 * C3319 + C24650 * C1621 + C51008 * C1626) *
                         C50830 +
                     (C24652 * C4233 + C24647 * C4237 + C24651 * C3310 +
                      C51009 * C3313 + C24650 * C1614 + C51008 * C1622) *
                         C118) *
                        C50944) *
                       C50798) *
                      C1380) *
                 C50699) /
                (p * q * std::sqrt(p + q));
    d2ee[82] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C118 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50830) *
                       C50944 +
                   ((C24690 + C24691 + C24692) * C118 +
                    (C24693 + C24694 + C24695) * C50830) *
                       C50678) *
                      C50734 * C1145 -
                  (((C24878 + C24879 + C24880) * C50830 +
                    (C24881 + C24882 + C24883) * C118) *
                       C50678 +
                   ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50830 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C118) *
                       C50944) *
                      C50734 * C1146 +
                  (((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                     C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                        C118 +
                    (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                     C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                        C50830) *
                       C50944 +
                   ((C24884 + C24885 + C24886) * C118 +
                    (C24887 + C24888 + C24889) * C50830) *
                       C50678) *
                      C50734 * C1147 -
                  (((C24652 * C3586 + C24647 * C3590 + C24651 * C2552 +
                     C51009 * C2556 + C24650 * C1158 + C51008 * C1164) *
                        C50830 +
                    (C24652 * C3584 + C24647 * C3587 + C24651 * C2547 +
                     C51009 * C2551 + C24650 * C1152 + C51008 * C1159) *
                        C118) *
                       C50678 +
                   ((C24652 * C3588 + C24647 * C3591 + C24651 * C2550 +
                     C51009 * C2555 + C24650 * C1160 + C51008 * C1165) *
                        C50830 +
                    (C24652 * C3585 + C24647 * C3589 + C24651 * C2546 +
                     C51009 * C2549 + C24650 * C1153 + C51008 * C1161) *
                        C118) *
                       C50944) *
                      C50734 * C1148) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C50734 * C1074 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C50734 * C50770) *
                      C1076 +
                  ((((C24883 + C24882 + C24881) * C118 +
                     (C24880 + C24879 + C24878) * C50830) *
                        C50944 +
                    ((C25230 + C25231 + C25232) * C118 +
                     (C25233 + C25234 + C25235) * C50830) *
                        C50678) *
                       C50734 * C50770 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C50734 * C1074) *
                      C1077 +
                  ((((C24701 + C24700 + C24699) * C118 +
                     (C24698 + C24697 + C24696) * C50830) *
                        C50944 +
                    ((C24702 + C24703 + C24704) * C118 +
                     (C24705 + C24706 + C24707) * C50830) *
                        C50678) *
                       C50734 * C1074 -
                   (((C24652 * C1154 + C24647 * C1162 + C24651 * C319 +
                      C51009 * C331 + C24650 * C304 + C51008 * C324) *
                         C50830 +
                     (C24652 * C1150 + C24647 * C1155 + C24651 * C301 +
                      C51009 * C318 + C24650 * C294 + C51008 * C305) *
                         C118) *
                        C50678 +
                    ((C25235 + C25234 + C25233) * C50830 +
                     (C25232 + C25231 + C25230) * C118) *
                        C50944) *
                       C50734 * C50770) *
                      C1078)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C480 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C481 +
                   (((C24650 * C487 + C51008 * C501 + C24651 * C1267 +
                      C51009 * C1275 + C24652 * C2740 + C24647 * C2743) *
                         C118 +
                     (C24650 * C502 + C51008 * C517 + C24651 * C1274 +
                      C51009 * C1279 + C24652 * C2744 + C24647 * C2749) *
                         C50830) *
                        C50944 +
                    ((C25066 + C25067 + C25068) * C118 +
                     (C25069 + C25070 + C25071) * C50830) *
                        C50678) *
                       C482) *
                      C1074 +
                  ((((C24650 * C932 + C51008 * C937 + C24651 * C1614 +
                      C51009 * C1622 + C24652 * C3310 + C24647 * C3313) *
                         C118 +
                     (C24650 * C938 + C51008 * C947 + C24651 * C1621 +
                      C51009 * C1626 + C24652 * C3314 + C24647 * C3319) *
                         C50830) *
                        C50944 +
                    ((C25606 + C25607 + C25608) * C118 +
                     (C25609 + C25610 + C25611) * C50830) *
                        C50678) *
                       C481 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C480 -
                   (((C24652 * C3740 + C24647 * C3744 + C24651 * C2746 +
                      C51009 * C2750 + C24650 * C1272 + C51008 * C1278) *
                         C50830 +
                     (C24652 * C3738 + C24647 * C3741 + C24651 * C2741 +
                      C51009 * C2745 + C24650 * C1266 + C51008 * C1273) *
                         C118) *
                        C50678 +
                    ((C24652 * C3742 + C24647 * C3745 + C24651 * C2744 +
                      C51009 * C2749 + C24650 * C1274 + C51008 * C1279) *
                         C50830 +
                     (C24652 * C3739 + C24647 * C3743 + C24651 * C2740 +
                      C51009 * C2743 + C24650 * C1267 + C51008 * C1275) *
                         C118) *
                        C50944) *
                       C482) *
                      C50770) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[83] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                       C51009 * C311 + C24652 * C298 + C24647 * C312) *
                          C118 +
                      (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                       C51009 * C327 + C24652 * C313 + C24647 * C328) *
                          C50830) *
                         C50944 +
                     ((C24690 + C24691 + C24692) * C118 +
                      (C24693 + C24694 + C24695) * C50830) *
                         C50678) *
                        C50960 -
                    (((C25060 + C25061 + C25062) * C50830 +
                      (C25063 + C25064 + C25065) * C118) *
                         C50678 +
                     ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                       C51009 * C947 + C24650 * C499 + C51008 * C516) *
                          C50830 +
                      (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                       C51009 * C937 + C24650 * C486 + C51008 * C500) *
                          C118) *
                         C50944) *
                        C50798) *
                       C1074 +
                   ((((C24650 * C932 + C51008 * C937 + C24651 * C1614 +
                       C51009 * C1622 + C24652 * C3310 + C24647 * C3313) *
                          C118 +
                      (C24650 * C938 + C51008 * C947 + C24651 * C1621 +
                       C51009 * C1626 + C24652 * C3314 + C24647 * C3319) *
                          C50830) *
                         C50944 +
                     ((C25606 + C25607 + C25608) * C118 +
                      (C25609 + C25610 + C25611) * C50830) *
                         C50678) *
                        C50798 -
                    (((C24878 + C24879 + C24880) * C50830 +
                      (C24881 + C24882 + C24883) * C118) *
                         C50678 +
                     ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                       C51009 * C328 + C24650 * C310 + C51008 * C327) *
                          C50830 +
                      (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                       C51009 * C312 + C24650 * C297 + C51008 * C311) *
                          C118) *
                         C50944) *
                        C50960) *
                       C50770) *
                      C50951 +
                  (((((C25065 + C25064 + C25063) * C118 +
                      (C25062 + C25061 + C25060) * C50830) *
                         C50944 +
                     ((C25394 + C25395 + C25396) * C118 +
                      (C25397 + C25398 + C25399) * C50830) *
                         C50678) *
                        C50798 -
                    (((C24696 + C24697 + C24698) * C50830 +
                      (C24699 + C24700 + C24701) * C118) *
                         C50678 +
                     ((C24695 + C24694 + C24693) * C50830 +
                      (C24692 + C24691 + C24690) * C118) *
                         C50944) *
                        C50960) *
                       C1074 +
                   ((((C24883 + C24882 + C24881) * C118 +
                      (C24880 + C24879 + C24878) * C50830) *
                         C50944 +
                     ((C25230 + C25231 + C25232) * C118 +
                      (C25233 + C25234 + C25235) * C50830) *
                         C50678) *
                        C50960 -
                    (((C24652 * C3317 + C24647 * C3321 + C24651 * C1617 +
                       C51009 * C1624 + C24650 * C942 + C51008 * C949) *
                          C50830 +
                      (C24652 * C3312 + C24647 * C3318 + C24651 * C1612 +
                       C51009 * C1618 + C24650 * C934 + C51008 * C941) *
                          C118) *
                         C50678 +
                     ((C25611 + C25610 + C25609) * C50830 +
                      (C25608 + C25607 + C25606) * C118) *
                         C50944) *
                        C50798) *
                       C50770) *
                      C50705)) /
                (p * q * std::sqrt(p + q));
    d2ee[84] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C50734 * C1074 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C50734 * C50770) *
                      C1076 +
                  ((((C24883 + C24882 + C24881) * C118 +
                     (C24880 + C24879 + C24878) * C50830) *
                        C50944 +
                    ((C25230 + C25231 + C25232) * C118 +
                     (C25233 + C25234 + C25235) * C50830) *
                        C50678) *
                       C50734 * C50770 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C50734 * C1074) *
                      C1077 +
                  ((((C24701 + C24700 + C24699) * C118 +
                     (C24698 + C24697 + C24696) * C50830) *
                        C50944 +
                    ((C24702 + C24703 + C24704) * C118 +
                     (C24705 + C24706 + C24707) * C50830) *
                        C50678) *
                       C50734 * C1074 -
                   (((C24652 * C1154 + C24647 * C1162 + C24651 * C319 +
                      C51009 * C331 + C24650 * C304 + C51008 * C324) *
                         C50830 +
                     (C24652 * C1150 + C24647 * C1155 + C24651 * C301 +
                      C51009 * C318 + C24650 * C294 + C51008 * C305) *
                         C118) *
                        C50678 +
                    ((C25235 + C25234 + C25233) * C50830 +
                     (C25232 + C25231 + C25230) * C118) *
                        C50944) *
                       C50734 * C50770) *
                      C1078)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C118 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50830) *
                       C50944 +
                   ((C24690 + C24691 + C24692) * C118 +
                    (C24693 + C24694 + C24695) * C50830) *
                       C50678) *
                      C50734 * C1145 -
                  (((C24878 + C24879 + C24880) * C50830 +
                    (C24881 + C24882 + C24883) * C118) *
                       C50678 +
                   ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50830 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C118) *
                       C50944) *
                      C50734 * C1146 +
                  (((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                     C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                        C118 +
                    (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                     C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                        C50830) *
                       C50944 +
                   ((C24884 + C24885 + C24886) * C118 +
                    (C24887 + C24888 + C24889) * C50830) *
                       C50678) *
                      C50734 * C1147 -
                  (((C24652 * C3586 + C24647 * C3590 + C24651 * C2552 +
                     C51009 * C2556 + C24650 * C1158 + C51008 * C1164) *
                        C50830 +
                    (C24652 * C3584 + C24647 * C3587 + C24651 * C2547 +
                     C51009 * C2551 + C24650 * C1152 + C51008 * C1159) *
                        C118) *
                       C50678 +
                   ((C24652 * C3588 + C24647 * C3591 + C24651 * C2550 +
                     C51009 * C2555 + C24650 * C1160 + C51008 * C1165) *
                        C50830 +
                    (C24652 * C3585 + C24647 * C3589 + C24651 * C2546 +
                     C51009 * C2549 + C24650 * C1153 + C51008 * C1161) *
                        C118) *
                       C50944) *
                      C50734 * C1148) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[85] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                       C51009 * C311 + C24652 * C298 + C24647 * C312) *
                          C118 +
                      (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                       C51009 * C327 + C24652 * C313 + C24647 * C328) *
                          C50830) *
                         C50944 +
                     ((C24690 + C24691 + C24692) * C118 +
                      (C24693 + C24694 + C24695) * C50830) *
                         C50678) *
                        C1725 -
                    (((C25060 + C25061 + C25062) * C50830 +
                      (C25063 + C25064 + C25065) * C118) *
                         C50678 +
                     ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                       C51009 * C947 + C24650 * C499 + C51008 * C516) *
                          C50830 +
                      (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                       C51009 * C937 + C24650 * C486 + C51008 * C500) *
                          C118) *
                         C50944) *
                        C50798) *
                       C50959 +
                   ((((C24650 * C932 + C51008 * C937 + C24651 * C1614 +
                       C51009 * C1622 + C24652 * C3310 + C24647 * C3313) *
                          C118 +
                      (C24650 * C938 + C51008 * C947 + C24651 * C1621 +
                       C51009 * C1626 + C24652 * C3314 + C24647 * C3319) *
                          C50830) *
                         C50944 +
                     ((C25606 + C25607 + C25608) * C118 +
                      (C25609 + C25610 + C25611) * C50830) *
                         C50678) *
                        C50798 -
                    (((C24878 + C24879 + C24880) * C50830 +
                      (C24881 + C24882 + C24883) * C118) *
                         C50678 +
                     ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                       C51009 * C328 + C24650 * C310 + C51008 * C327) *
                          C50830 +
                      (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                       C51009 * C312 + C24650 * C297 + C51008 * C311) *
                          C118) *
                         C50944) *
                        C1725) *
                       C50770) *
                      C50951 +
                  (((((C25065 + C25064 + C25063) * C118 +
                      (C25062 + C25061 + C25060) * C50830) *
                         C50944 +
                     ((C25394 + C25395 + C25396) * C118 +
                      (C25397 + C25398 + C25399) * C50830) *
                         C50678) *
                        C50798 -
                    (((C24696 + C24697 + C24698) * C50830 +
                      (C24699 + C24700 + C24701) * C118) *
                         C50678 +
                     ((C24695 + C24694 + C24693) * C50830 +
                      (C24692 + C24691 + C24690) * C118) *
                         C50944) *
                        C1725) *
                       C50959 +
                   ((((C24883 + C24882 + C24881) * C118 +
                      (C24880 + C24879 + C24878) * C50830) *
                         C50944 +
                     ((C25230 + C25231 + C25232) * C118 +
                      (C25233 + C25234 + C25235) * C50830) *
                         C50678) *
                        C1725 -
                    (((C24652 * C3317 + C24647 * C3321 + C24651 * C1617 +
                       C51009 * C1624 + C24650 * C942 + C51008 * C949) *
                          C50830 +
                      (C24652 * C3312 + C24647 * C3318 + C24651 * C1612 +
                       C51009 * C1618 + C24650 * C934 + C51008 * C941) *
                          C118) *
                         C50678 +
                     ((C25611 + C25610 + C25609) * C50830 +
                      (C25608 + C25607 + C25606) * C118) *
                         C50944) *
                        C50798) *
                       C50770) *
                      C50705)) /
                (p * q * std::sqrt(p + q));
    d2ee[86] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C51006 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C51007 +
                   (((C24650 * C487 + C51008 * C501 + C24651 * C1267 +
                      C51009 * C1275 + C24652 * C2740 + C24647 * C2743) *
                         C118 +
                     (C24650 * C502 + C51008 * C517 + C24651 * C1274 +
                      C51009 * C1279 + C24652 * C2744 + C24647 * C2749) *
                         C50830) *
                        C50944 +
                    ((C25066 + C25067 + C25068) * C118 +
                     (C25069 + C25070 + C25071) * C50830) *
                        C50678) *
                       C2141) *
                      C50959 +
                  ((((C24650 * C932 + C51008 * C937 + C24651 * C1614 +
                      C51009 * C1622 + C24652 * C3310 + C24647 * C3313) *
                         C118 +
                     (C24650 * C938 + C51008 * C947 + C24651 * C1621 +
                      C51009 * C1626 + C24652 * C3314 + C24647 * C3319) *
                         C50830) *
                        C50944 +
                    ((C25606 + C25607 + C25608) * C118 +
                     (C25609 + C25610 + C25611) * C50830) *
                        C50678) *
                       C51007 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C51006 -
                   (((C24652 * C3740 + C24647 * C3744 + C24651 * C2746 +
                      C51009 * C2750 + C24650 * C1272 + C51008 * C1278) *
                         C50830 +
                     (C24652 * C3738 + C24647 * C3741 + C24651 * C2741 +
                      C51009 * C2745 + C24650 * C1266 + C51008 * C1273) *
                         C118) *
                        C50678 +
                    ((C24652 * C3742 + C24647 * C3745 + C24651 * C2744 +
                      C51009 * C2749 + C24650 * C1274 + C51008 * C1279) *
                         C50830 +
                     (C24652 * C3739 + C24647 * C3743 + C24651 * C2740 +
                      C51009 * C2743 + C24650 * C1267 + C51008 * C1275) *
                         C118) *
                        C50944) *
                       C2141) *
                      C50770) *
                 C50699) /
                (p * q * std::sqrt(p + q));
    d2ee[87] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C1725 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C50798) *
                      C289 +
                  ((((C24650 * C932 + C51008 * C937 + C24651 * C1614 +
                      C51009 * C1622 + C24652 * C3310 + C24647 * C3313) *
                         C118 +
                     (C24650 * C938 + C51008 * C947 + C24651 * C1621 +
                      C51009 * C1626 + C24652 * C3314 + C24647 * C3319) *
                         C50830) *
                        C50944 +
                    ((C25606 + C25607 + C25608) * C118 +
                     (C25609 + C25610 + C25611) * C50830) *
                        C50678) *
                       C50798 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C1725) *
                      C290 +
                  ((((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                      C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                         C118 +
                     (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                      C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                         C50830) *
                        C50944 +
                    ((C24884 + C24885 + C24886) * C118 +
                     (C24887 + C24888 + C24889) * C50830) *
                        C50678) *
                       C1725 -
                   (((C24652 * C4234 + C24647 * C4238 + C24651 * C3316 +
                      C51009 * C3320 + C24650 * C1619 + C51008 * C1625) *
                         C50830 +
                     (C24652 * C4232 + C24647 * C4235 + C24651 * C3311 +
                      C51009 * C3315 + C24650 * C1613 + C51008 * C1620) *
                         C118) *
                        C50678 +
                    ((C24652 * C4236 + C24647 * C4239 + C24651 * C3314 +
                      C51009 * C3319 + C24650 * C1621 + C51008 * C1626) *
                         C50830 +
                     (C24652 * C4233 + C24647 * C4237 + C24651 * C3310 +
                      C51009 * C3313 + C24650 * C1614 + C51008 * C1622) *
                         C118) *
                        C50944) *
                       C50798) *
                      C291) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C1725 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C50798) *
                      C50718 * C1076 +
                  ((((C25065 + C25064 + C25063) * C118 +
                     (C25062 + C25061 + C25060) * C50830) *
                        C50944 +
                    ((C25394 + C25395 + C25396) * C118 +
                     (C25397 + C25398 + C25399) * C50830) *
                        C50678) *
                       C50798 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C1725) *
                      C50718 * C1077 +
                  ((((C24701 + C24700 + C24699) * C118 +
                     (C24698 + C24697 + C24696) * C50830) *
                        C50944 +
                    ((C24702 + C24703 + C24704) * C118 +
                     (C24705 + C24706 + C24707) * C50830) *
                        C50678) *
                       C1725 -
                   (((C24652 * C1615 + C24647 * C1623 + C24651 * C944 +
                      C51009 * C950 + C24650 * C493 + C51008 * C513) *
                         C50830 +
                     (C24652 * C1611 + C24647 * C1616 + C24651 * C935 +
                      C51009 * C943 + C24650 * C483 + C51008 * C494) *
                         C118) *
                        C50678 +
                    ((C25399 + C25398 + C25397) * C50830 +
                     (C25396 + C25395 + C25394) * C118) *
                        C50944) *
                       C50798) *
                      C50718 * C1078)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C118 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50830) *
                       C50944 +
                   ((C24690 + C24691 + C24692) * C118 +
                    (C24693 + C24694 + C24695) * C50830) *
                       C50678) *
                      C1891 -
                  (((C25060 + C25061 + C25062) * C50830 +
                    (C25063 + C25064 + C25065) * C118) *
                       C50678 +
                   ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                     C51009 * C947 + C24650 * C499 + C51008 * C516) *
                        C50830 +
                    (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                     C51009 * C937 + C24650 * C486 + C51008 * C500) *
                        C118) *
                       C50944) *
                      C1892 +
                  (((C24650 * C487 + C51008 * C501 + C24651 * C1267 +
                     C51009 * C1275 + C24652 * C2740 + C24647 * C2743) *
                        C118 +
                    (C24650 * C502 + C51008 * C517 + C24651 * C1274 +
                     C51009 * C1279 + C24652 * C2744 + C24647 * C2749) *
                        C50830) *
                       C50944 +
                   ((C25066 + C25067 + C25068) * C118 +
                    (C25069 + C25070 + C25071) * C50830) *
                       C50678) *
                      C1893 -
                  (((C24652 * C4634 + C24647 * C4642 + C24651 * C4635 +
                     C51009 * C4643 + C24650 * C1903 + C51008 * C1909) *
                        C50830 +
                    (C24652 * C4630 + C24647 * C4636 + C24651 * C4631 +
                     C51009 * C4637 + C24650 * C1897 + C51008 * C1904) *
                        C118) *
                       C50678 +
                   ((C24652 * C4638 + C24647 * C4644 + C24651 * C4639 +
                     C51009 * C4645 + C24650 * C1905 + C51008 * C1910) *
                        C50830 +
                    (C24652 * C4632 + C24647 * C4640 + C24651 * C4633 +
                     C51009 * C4641 + C24650 * C1898 + C51008 * C1906) *
                        C118) *
                       C50944) *
                      C1894) *
                 C50718 * C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[88] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C51006 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C51007 +
                   (((C24650 * C487 + C51008 * C501 + C24651 * C1267 +
                      C51009 * C1275 + C24652 * C2740 + C24647 * C2743) *
                         C118 +
                     (C24650 * C502 + C51008 * C517 + C24651 * C1274 +
                      C51009 * C1279 + C24652 * C2744 + C24647 * C2749) *
                         C50830) *
                        C50944 +
                    ((C25066 + C25067 + C25068) * C118 +
                     (C25069 + C25070 + C25071) * C50830) *
                        C50678) *
                       C2141) *
                      C50718 * C50951 +
                  ((((C25065 + C25064 + C25063) * C118 +
                     (C25062 + C25061 + C25060) * C50830) *
                        C50944 +
                    ((C25394 + C25395 + C25396) * C118 +
                     (C25397 + C25398 + C25399) * C50830) *
                        C50678) *
                       C51007 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C51006 -
                   (((C24652 * C2747 + C24647 * C2751 + C24651 * C1270 +
                      C51009 * C1277 + C24650 * C506 + C51008 * C519) *
                         C50830 +
                     (C24652 * C2742 + C24647 * C2748 + C24651 * C1265 +
                      C51009 * C1271 + C24650 * C489 + C51008 * C505) *
                         C118) *
                        C50678 +
                    ((C25071 + C25070 + C25069) * C50830 +
                     (C25068 + C25067 + C25066) * C118) *
                        C50944) *
                       C2141) *
                      C50718 * C50705)) /
                (p * q * std::sqrt(p + q));
    d2ee[89] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C1725 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C50798) *
                      C50718 * C1076 +
                  ((((C25065 + C25064 + C25063) * C118 +
                     (C25062 + C25061 + C25060) * C50830) *
                        C50944 +
                    ((C25394 + C25395 + C25396) * C118 +
                     (C25397 + C25398 + C25399) * C50830) *
                        C50678) *
                       C50798 -
                   (((C24696 + C24697 + C24698) * C50830 +
                     (C24699 + C24700 + C24701) * C118) *
                        C50678 +
                    ((C24695 + C24694 + C24693) * C50830 +
                     (C24692 + C24691 + C24690) * C118) *
                        C50944) *
                       C1725) *
                      C50718 * C1077 +
                  ((((C24701 + C24700 + C24699) * C118 +
                     (C24698 + C24697 + C24696) * C50830) *
                        C50944 +
                    ((C24702 + C24703 + C24704) * C118 +
                     (C24705 + C24706 + C24707) * C50830) *
                        C50678) *
                       C1725 -
                   (((C24652 * C1615 + C24647 * C1623 + C24651 * C944 +
                      C51009 * C950 + C24650 * C493 + C51008 * C513) *
                         C50830 +
                     (C24652 * C1611 + C24647 * C1616 + C24651 * C935 +
                      C51009 * C943 + C24650 * C483 + C51008 * C494) *
                         C118) *
                        C50678 +
                    ((C25399 + C25398 + C25397) * C50830 +
                     (C25396 + C25395 + C25394) * C118) *
                        C50944) *
                       C50798) *
                      C50718 * C1078)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C118 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50830) *
                        C50944 +
                    ((C24690 + C24691 + C24692) * C118 +
                     (C24693 + C24694 + C24695) * C50830) *
                        C50678) *
                       C1725 -
                   (((C25060 + C25061 + C25062) * C50830 +
                     (C25063 + C25064 + C25065) * C118) *
                        C50678 +
                    ((C24652 * C1621 + C24647 * C1626 + C24651 * C938 +
                      C51009 * C947 + C24650 * C499 + C51008 * C516) *
                         C50830 +
                     (C24652 * C1614 + C24647 * C1622 + C24651 * C932 +
                      C51009 * C937 + C24650 * C486 + C51008 * C500) *
                         C118) *
                        C50944) *
                       C50798) *
                      C289 +
                  ((((C24650 * C932 + C51008 * C937 + C24651 * C1614 +
                      C51009 * C1622 + C24652 * C3310 + C24647 * C3313) *
                         C118 +
                     (C24650 * C938 + C51008 * C947 + C24651 * C1621 +
                      C51009 * C1626 + C24652 * C3314 + C24647 * C3319) *
                         C50830) *
                        C50944 +
                    ((C25606 + C25607 + C25608) * C118 +
                     (C25609 + C25610 + C25611) * C50830) *
                        C50678) *
                       C50798 -
                   (((C24878 + C24879 + C24880) * C50830 +
                     (C24881 + C24882 + C24883) * C118) *
                        C50678 +
                    ((C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50830 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C118) *
                        C50944) *
                       C1725) *
                      C290 +
                  ((((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                      C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                         C118 +
                     (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                      C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                         C50830) *
                        C50944 +
                    ((C24884 + C24885 + C24886) * C118 +
                     (C24887 + C24888 + C24889) * C50830) *
                        C50678) *
                       C1725 -
                   (((C24652 * C4234 + C24647 * C4238 + C24651 * C3316 +
                      C51009 * C3320 + C24650 * C1619 + C51008 * C1625) *
                         C50830 +
                     (C24652 * C4232 + C24647 * C4235 + C24651 * C3311 +
                      C51009 * C3315 + C24650 * C1613 + C51008 * C1620) *
                         C118) *
                        C50678 +
                    ((C24652 * C4236 + C24647 * C4239 + C24651 * C3314 +
                      C51009 * C3319 + C24650 * C1621 + C51008 * C1626) *
                         C50830 +
                     (C24652 * C4233 + C24647 * C4237 + C24651 * C3310 +
                      C51009 * C3313 + C24650 * C1614 + C51008 * C1622) *
                         C118) *
                        C50944) *
                       C50798) *
                      C291) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[90] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C31294 + C31295 + C31296) * C10908 +
                    (C31297 + C31298 + C31299) * C50894) *
                       C50673 * C50734 * C50959 -
                   ((C24652 * C3314 + C24647 * C3319 + C24651 * C1621 +
                     C51009 * C1626 + C24650 * C938 + C51008 * C947) *
                        C50894 +
                    (C24652 * C3310 + C24647 * C3313 + C24651 * C1614 +
                     C51009 * C1622 + C24650 * C932 + C51008 * C937) *
                        C10908 +
                    (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50973 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C10907) *
                       C50673 * C50734 * C50770) *
                      C51002 +
                  (((C24883 + C24882 + C24881) * C10907 +
                    (C24880 + C24879 + C24878) * C50973 +
                    (C25606 + C25607 + C25608) * C10908 +
                    (C25609 + C25610 + C25611) * C50894) *
                       C50673 * C50734 * C50770 -
                   ((C25060 + C25061 + C25062) * C50894 +
                    (C25063 + C25064 + C25065) * C10908 +
                    (C24695 + C24694 + C24693) * C50973 +
                    (C24692 + C24691 + C24690) * C10907) *
                       C50673 * C50734 * C50959) *
                      C51003 +
                  (((C24701 + C24700 + C24699) * C10907 +
                    (C24698 + C24697 + C24696) * C50973 +
                    (C25394 + C25395 + C25396) * C10908 +
                    (C25397 + C25398 + C25399) * C50894) *
                       C50673 * C50734 * C50959 -
                   ((C24652 * C3317 + C24647 * C3321 + C24651 * C1617 +
                     C51009 * C1624 + C24650 * C942 + C51008 * C949) *
                        C50894 +
                    (C24652 * C3312 + C24647 * C3318 + C24651 * C1612 +
                     C51009 * C1618 + C24650 * C934 + C51008 * C941) *
                        C10908 +
                    (C25235 + C25234 + C25233) * C50973 +
                    (C25232 + C25231 + C25230) * C10907) *
                       C50673 * C50734 * C50770) *
                      C673)) /
                (p * q * std::sqrt(p + q));
    d2ee[91] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C10907 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50973 +
                     (C31294 + C31295 + C31296) * C10908 +
                     (C31297 + C31298 + C31299) * C50894) *
                        C50673 * C50960 -
                    ((C31300 + C31301 + C31302) * C50894 +
                     (C31303 + C31304 + C31305) * C10908 +
                     (C31299 + C31298 + C31297) * C50973 +
                     (C31296 + C31295 + C31294) * C10907) *
                        C50673 * C50798) *
                       C50959 +
                   (((C31804 + C31805 + C31806) * C10907 +
                     (C31807 + C31808 + C31809) * C50973 +
                     (C24650 * C1267 + C51008 * C1275 + C24651 * C2740 +
                      C51009 * C2743 + C24652 * C3739 + C24647 * C3743) *
                         C10908 +
                     (C24650 * C1274 + C51008 * C1279 + C24651 * C2744 +
                      C51009 * C2749 + C24652 * C3742 + C24647 * C3745) *
                         C50894) *
                        C50673 * C50798 -
                    ((C31809 + C31808 + C31807) * C50894 +
                     (C31806 + C31805 + C31804) * C10908 +
                     (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50973 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C10907) *
                        C50673 * C50960) *
                       C50770) *
                      C292 +
                  ((((C25065 + C25064 + C25063) * C10907 +
                     (C25062 + C25061 + C25060) * C50973 +
                     (C25066 + C25067 + C25068) * C10908 +
                     (C25069 + C25070 + C25071) * C50894) *
                        C50673 * C50798 -
                    ((C25060 + C25061 + C25062) * C50894 +
                     (C25063 + C25064 + C25065) * C10908 +
                     (C24695 + C24694 + C24693) * C50973 +
                     (C24692 + C24691 + C24690) * C10907) *
                        C50673 * C50960) *
                       C50959 +
                   (((C24883 + C24882 + C24881) * C10907 +
                     (C24880 + C24879 + C24878) * C50973 +
                     (C25606 + C25607 + C25608) * C10908 +
                     (C25609 + C25610 + C25611) * C50894) *
                        C50673 * C50960 -
                    ((C24652 * C3740 + C24647 * C3744 + C24651 * C2746 +
                      C51009 * C2750 + C24650 * C1272 + C51008 * C1278) *
                         C50894 +
                     (C24652 * C3738 + C24647 * C3741 + C24651 * C2741 +
                      C51009 * C2745 + C24650 * C1266 + C51008 * C1273) *
                         C10908 +
                     (C25611 + C25610 + C25609) * C50973 +
                     (C25608 + C25607 + C25606) * C10907) *
                        C50673 * C50798) *
                       C50770) *
                      C50705)) /
                (p * q * std::sqrt(p + q));
    d2ee[92] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C24650 * C486 + C51008 * C500 + C24651 * C932 +
                     C51009 * C937 + C24652 * C1614 + C24647 * C1622) *
                        C10908 +
                    (C24650 * C499 + C51008 * C516 + C24651 * C938 +
                     C51009 * C947 + C24652 * C1621 + C24647 * C1626) *
                        C50894) *
                       C50673 * C50734 * C289 -
                   ((C24652 * C3314 + C24647 * C3319 + C24651 * C1621 +
                     C51009 * C1626 + C24650 * C938 + C51008 * C947) *
                        C50894 +
                    (C24652 * C3310 + C24647 * C3313 + C24651 * C1614 +
                     C51009 * C1622 + C24650 * C932 + C51008 * C937) *
                        C10908 +
                    (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50973 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C10907) *
                       C50673 * C50734 * C290 +
                   ((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                     C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                        C10907 +
                    (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                     C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                        C50973 +
                    (C24650 * C1614 + C51008 * C1622 + C24651 * C3310 +
                     C51009 * C3313 + C24652 * C4233 + C24647 * C4237) *
                        C10908 +
                    (C24650 * C1621 + C51008 * C1626 + C24651 * C3314 +
                     C51009 * C3319 + C24652 * C4236 + C24647 * C4239) *
                        C50894) *
                       C50673 * C50734 * C291) *
                      C292 +
                  (((C24883 + C24882 + C24881) * C10907 +
                    (C24880 + C24879 + C24878) * C50973 +
                    (C25606 + C25607 + C25608) * C10908 +
                    (C25609 + C25610 + C25611) * C50894) *
                       C50673 * C50734 * C290 -
                   ((C25060 + C25061 + C25062) * C50894 +
                    (C25063 + C25064 + C25065) * C10908 +
                    (C24695 + C24694 + C24693) * C50973 +
                    (C24692 + C24691 + C24690) * C10907) *
                       C50673 * C50734 * C289 -
                   ((C24652 * C4234 + C24647 * C4238 + C24651 * C3316 +
                     C51009 * C3320 + C24650 * C1619 + C51008 * C1625) *
                        C50894 +
                    (C24652 * C4232 + C24647 * C4235 + C24651 * C3311 +
                     C51009 * C3315 + C24650 * C1613 + C51008 * C1620) *
                        C10908 +
                    (C24889 + C24888 + C24887) * C50973 +
                    (C24886 + C24885 + C24884) * C10907) *
                       C50673 * C50734 * C291) *
                      C50705)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                    C51009 * C311 + C24652 * C298 + C24647 * C312) *
                       C10907 +
                   (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                    C51009 * C327 + C24652 * C313 + C24647 * C328) *
                       C50973 +
                   (C24650 * C486 + C51008 * C500 + C24651 * C932 +
                    C51009 * C937 + C24652 * C1614 + C24647 * C1622) *
                       C10908 +
                   (C24650 * C499 + C51008 * C516 + C24651 * C938 +
                    C51009 * C947 + C24652 * C1621 + C24647 * C1626) *
                       C50894) *
                      C50673 * C50734 * C50718 * C113 -
                  ((C25060 + C25061 + C25062) * C50894 +
                   (C25063 + C25064 + C25065) * C10908 +
                   (C24695 + C24694 + C24693) * C50973 +
                   (C24692 + C24691 + C24690) * C10907) *
                      C50673 * C50734 * C50718 * C114 +
                  ((C24701 + C24700 + C24699) * C10907 +
                   (C24698 + C24697 + C24696) * C50973 +
                   (C25394 + C25395 + C25396) * C10908 +
                   (C25397 + C25398 + C25399) * C50894) *
                      C50673 * C50734 * C50718 * C115 -
                  ((C24652 * C1615 + C24647 * C1623 + C24651 * C944 +
                    C51009 * C950 + C24650 * C493 + C51008 * C513) *
                       C50894 +
                   (C24652 * C1611 + C24647 * C1616 + C24651 * C935 +
                    C51009 * C943 + C24650 * C483 + C51008 * C494) *
                       C10908 +
                   (C24707 + C24706 + C24705) * C50973 +
                   (C24704 + C24703 + C24702) * C10907) *
                      C50673 * C50734 * C50718 * C116)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C31294 + C31295 + C31296) * C10908 +
                    (C31297 + C31298 + C31299) * C50894) *
                       C50673 * C480 -
                   ((C31300 + C31301 + C31302) * C50894 +
                    (C31303 + C31304 + C31305) * C10908 +
                    (C31299 + C31298 + C31297) * C50973 +
                    (C31296 + C31295 + C31294) * C10907) *
                       C50673 * C481 +
                   ((C31305 + C31304 + C31303) * C10907 +
                    (C31302 + C31301 + C31300) * C50973 +
                    (C24650 * C1898 + C51008 * C1906 + C24651 * C4633 +
                     C51009 * C4641 + C24652 * C4632 + C24647 * C4640) *
                        C10908 +
                    (C24650 * C1905 + C51008 * C1910 + C24651 * C4639 +
                     C51009 * C4645 + C24652 * C4638 + C24647 * C4644) *
                        C50894) *
                       C50673 * C482) *
                      C50718 * C292 +
                  (((C25065 + C25064 + C25063) * C10907 +
                    (C25062 + C25061 + C25060) * C50973 +
                    (C25066 + C25067 + C25068) * C10908 +
                    (C25069 + C25070 + C25071) * C50894) *
                       C50673 * C481 -
                   ((C25060 + C25061 + C25062) * C50894 +
                    (C25063 + C25064 + C25065) * C10908 +
                    (C24695 + C24694 + C24693) * C50973 +
                    (C24692 + C24691 + C24690) * C10907) *
                       C50673 * C480 -
                   ((C24652 * C4634 + C24647 * C4642 + C24651 * C4635 +
                     C51009 * C4643 + C24650 * C1903 + C51008 * C1909) *
                        C50894 +
                    (C24652 * C4630 + C24647 * C4636 + C24651 * C4631 +
                     C51009 * C4637 + C24650 * C1897 + C51008 * C1904) *
                        C10908 +
                    (C25071 + C25070 + C25069) * C50973 +
                    (C25068 + C25067 + C25066) * C10907) *
                       C50673 * C482) *
                      C50718 * C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[93] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C31294 + C31295 + C31296) * C10908 +
                    (C31297 + C31298 + C31299) * C50894) *
                       C50673 * C50960 -
                   ((C31300 + C31301 + C31302) * C50894 +
                    (C31303 + C31304 + C31305) * C10908 +
                    (C31299 + C31298 + C31297) * C50973 +
                    (C31296 + C31295 + C31294) * C10907) *
                       C50673 * C50798) *
                      C50718 * C51002 +
                  (((C25065 + C25064 + C25063) * C10907 +
                    (C25062 + C25061 + C25060) * C50973 +
                    (C25066 + C25067 + C25068) * C10908 +
                    (C25069 + C25070 + C25071) * C50894) *
                       C50673 * C50798 -
                   ((C25060 + C25061 + C25062) * C50894 +
                    (C25063 + C25064 + C25065) * C10908 +
                    (C24695 + C24694 + C24693) * C50973 +
                    (C24692 + C24691 + C24690) * C10907) *
                       C50673 * C50960) *
                      C50718 * C51003 +
                  (((C24701 + C24700 + C24699) * C10907 +
                    (C24698 + C24697 + C24696) * C50973 +
                    (C25394 + C25395 + C25396) * C10908 +
                    (C25397 + C25398 + C25399) * C50894) *
                       C50673 * C50960 -
                   ((C24652 * C2747 + C24647 * C2751 + C24651 * C1270 +
                     C51009 * C1277 + C24650 * C506 + C51008 * C519) *
                        C50894 +
                    (C24652 * C2742 + C24647 * C2748 + C24651 * C1265 +
                     C51009 * C1271 + C24650 * C489 + C51008 * C505) *
                        C10908 +
                    (C25399 + C25398 + C25397) * C50973 +
                    (C25396 + C25395 + C25394) * C10907) *
                       C50673 * C50798) *
                      C50718 * C673)) /
                (p * q * std::sqrt(p + q));
    d2ee[94] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                    C51009 * C311 + C24652 * C298 + C24647 * C312) *
                       C10907 +
                   (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                    C51009 * C327 + C24652 * C313 + C24647 * C328) *
                       C50973 +
                   (C24650 * C486 + C51008 * C500 + C24651 * C932 +
                    C51009 * C937 + C24652 * C1614 + C24647 * C1622) *
                       C10908 +
                   (C24650 * C499 + C51008 * C516 + C24651 * C938 +
                    C51009 * C947 + C24652 * C1621 + C24647 * C1626) *
                       C50894) *
                      C50673 * C50734 * C50718 * C113 -
                  ((C25060 + C25061 + C25062) * C50894 +
                   (C25063 + C25064 + C25065) * C10908 +
                   (C24695 + C24694 + C24693) * C50973 +
                   (C24692 + C24691 + C24690) * C10907) *
                      C50673 * C50734 * C50718 * C114 +
                  ((C24701 + C24700 + C24699) * C10907 +
                   (C24698 + C24697 + C24696) * C50973 +
                   (C25394 + C25395 + C25396) * C10908 +
                   (C25397 + C25398 + C25399) * C50894) *
                      C50673 * C50734 * C50718 * C115 -
                  ((C24652 * C1615 + C24647 * C1623 + C24651 * C944 +
                    C51009 * C950 + C24650 * C493 + C51008 * C513) *
                       C50894 +
                   (C24652 * C1611 + C24647 * C1616 + C24651 * C935 +
                    C51009 * C943 + C24650 * C483 + C51008 * C494) *
                       C10908 +
                   (C24707 + C24706 + C24705) * C50973 +
                   (C24704 + C24703 + C24702) * C10907) *
                      C50673 * C50734 * C50718 * C116)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C24650 * C486 + C51008 * C500 + C24651 * C932 +
                     C51009 * C937 + C24652 * C1614 + C24647 * C1622) *
                        C10908 +
                    (C24650 * C499 + C51008 * C516 + C24651 * C938 +
                     C51009 * C947 + C24652 * C1621 + C24647 * C1626) *
                        C50894) *
                       C50673 * C50734 * C289 -
                   ((C24652 * C3314 + C24647 * C3319 + C24651 * C1621 +
                     C51009 * C1626 + C24650 * C938 + C51008 * C947) *
                        C50894 +
                    (C24652 * C3310 + C24647 * C3313 + C24651 * C1614 +
                     C51009 * C1622 + C24650 * C932 + C51008 * C937) *
                        C10908 +
                    (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50973 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C10907) *
                       C50673 * C50734 * C290 +
                   ((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                     C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                        C10907 +
                    (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                     C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                        C50973 +
                    (C24650 * C1614 + C51008 * C1622 + C24651 * C3310 +
                     C51009 * C3313 + C24652 * C4233 + C24647 * C4237) *
                        C10908 +
                    (C24650 * C1621 + C51008 * C1626 + C24651 * C3314 +
                     C51009 * C3319 + C24652 * C4236 + C24647 * C4239) *
                        C50894) *
                       C50673 * C50734 * C291) *
                      C292 +
                  (((C24883 + C24882 + C24881) * C10907 +
                    (C24880 + C24879 + C24878) * C50973 +
                    (C25606 + C25607 + C25608) * C10908 +
                    (C25609 + C25610 + C25611) * C50894) *
                       C50673 * C50734 * C290 -
                   ((C25060 + C25061 + C25062) * C50894 +
                    (C25063 + C25064 + C25065) * C10908 +
                    (C24695 + C24694 + C24693) * C50973 +
                    (C24692 + C24691 + C24690) * C10907) *
                       C50673 * C50734 * C289 -
                   ((C24652 * C4234 + C24647 * C4238 + C24651 * C3316 +
                     C51009 * C3320 + C24650 * C1619 + C51008 * C1625) *
                        C50894 +
                    (C24652 * C4232 + C24647 * C4235 + C24651 * C3311 +
                     C51009 * C3315 + C24650 * C1613 + C51008 * C1620) *
                        C10908 +
                    (C24889 + C24888 + C24887) * C50973 +
                    (C24886 + C24885 + C24884) * C10907) *
                       C50673 * C50734 * C291) *
                      C50705)) /
                    (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C31294 + C31295 + C31296) * C10908 +
                    (C31297 + C31298 + C31299) * C50894) *
                       C50673 * C50734 * C51004 -
                   ((C31809 + C31808 + C31807) * C50894 +
                    (C31806 + C31805 + C31804) * C10908 +
                    (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50973 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C10907) *
                       C50673 * C50734 * C51005 +
                   ((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                     C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                        C10907 +
                    (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                     C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                        C50973 +
                    (C24650 * C1614 + C51008 * C1622 + C24651 * C3310 +
                     C51009 * C3313 + C24652 * C4233 + C24647 * C4237) *
                        C10908 +
                    (C24650 * C1621 + C51008 * C1626 + C24651 * C3314 +
                     C51009 * C3319 + C24652 * C4236 + C24647 * C4239) *
                        C50894) *
                       C50673 * C50734 * C1380) *
                      C50951 +
                  (((C24883 + C24882 + C24881) * C10907 +
                    (C24880 + C24879 + C24878) * C50973 +
                    (C25606 + C25607 + C25608) * C10908 +
                    (C25609 + C25610 + C25611) * C50894) *
                       C50673 * C50734 * C51005 -
                   ((C25060 + C25061 + C25062) * C50894 +
                    (C25063 + C25064 + C25065) * C10908 +
                    (C24695 + C24694 + C24693) * C50973 +
                    (C24692 + C24691 + C24690) * C10907) *
                       C50673 * C50734 * C51004 -
                   ((C24652 * C4234 + C24647 * C4238 + C24651 * C3316 +
                     C51009 * C3320 + C24650 * C1619 + C51008 * C1625) *
                        C50894 +
                    (C24652 * C4232 + C24647 * C4235 + C24651 * C3311 +
                     C51009 * C3315 + C24650 * C1613 + C51008 * C1620) *
                        C10908 +
                    (C24889 + C24888 + C24887) * C50973 +
                    (C24886 + C24885 + C24884) * C10907) *
                       C50673 * C50734 * C1380) *
                      C50705)) /
                (p * q * std::sqrt(p + q));
    d2ee[96] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C31294 + C31295 + C31296) * C10908 +
                    (C31297 + C31298 + C31299) * C50894) *
                       C50673 * C50960 -
                   ((C31300 + C31301 + C31302) * C50894 +
                    (C31303 + C31304 + C31305) * C10908 +
                    (C31299 + C31298 + C31297) * C50973 +
                    (C31296 + C31295 + C31294) * C10907) *
                       C50673 * C50798) *
                      C51004 +
                  (((C31804 + C31805 + C31806) * C10907 +
                    (C31807 + C31808 + C31809) * C50973 +
                    (C32212 + C32213 + C32214) * C10908 +
                    (C32215 + C32216 + C32217) * C50894) *
                       C50673 * C50798 -
                   ((C31809 + C31808 + C31807) * C50894 +
                    (C31806 + C31805 + C31804) * C10908 +
                    (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50973 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C10907) *
                       C50673 * C50960) *
                      C51005 +
                  (((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                     C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                        C10907 +
                    (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                     C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                        C50973 +
                    (C32716 + C32717 + C32718) * C10908 +
                    (C32719 + C32720 + C32721) * C50894) *
                       C50673 * C50960 -
                   ((C24652 * C20846 + C24647 * C20848 + C24651 * C3742 +
                     C51009 * C3745 + C24650 * C2744 + C51008 * C2749) *
                        C50894 +
                    (C24652 * C20845 + C24647 * C20847 + C24651 * C3739 +
                     C51009 * C3743 + C24650 * C2740 + C51008 * C2743) *
                        C10908 +
                    (C32721 + C32720 + C32719) * C50973 +
                    (C32718 + C32717 + C32716) * C10907) *
                       C50673 * C50798) *
                      C1380) *
                 C50699) /
                (p * q * std::sqrt(p + q));
    d2ee[97] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                    C51009 * C311 + C24652 * C298 + C24647 * C312) *
                       C10907 +
                   (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                    C51009 * C327 + C24652 * C313 + C24647 * C328) *
                       C50973 +
                   (C31294 + C31295 + C31296) * C10908 +
                   (C31297 + C31298 + C31299) * C50894) *
                      C50673 * C50734 * C1145 -
                  ((C31809 + C31808 + C31807) * C50894 +
                   (C31806 + C31805 + C31804) * C10908 +
                   (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                    C51009 * C328 + C24650 * C310 + C51008 * C327) *
                       C50973 +
                   (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                    C51009 * C312 + C24650 * C297 + C51008 * C311) *
                       C10907) *
                      C50673 * C50734 * C1146 +
                  ((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                    C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                       C10907 +
                   (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                    C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                       C50973 +
                   (C24650 * C1614 + C51008 * C1622 + C24651 * C3310 +
                    C51009 * C3313 + C24652 * C4233 + C24647 * C4237) *
                       C10908 +
                   (C24650 * C1621 + C51008 * C1626 + C24651 * C3314 +
                    C51009 * C3319 + C24652 * C4236 + C24647 * C4239) *
                       C50894) *
                      C50673 * C50734 * C1147 -
                  ((C24652 * C21176 + C24647 * C21178 + C24651 * C4236 +
                    C51009 * C4239 + C24650 * C3314 + C51008 * C3319) *
                       C50894 +
                   (C24652 * C21175 + C24647 * C21177 + C24651 * C4233 +
                    C51009 * C4237 + C24650 * C3310 + C51008 * C3313) *
                       C10908 +
                   (C24652 * C3588 + C24647 * C3591 + C24651 * C2550 +
                    C51009 * C2555 + C24650 * C1160 + C51008 * C1165) *
                       C50973 +
                   (C24652 * C3585 + C24647 * C3589 + C24651 * C2546 +
                    C51009 * C2549 + C24650 * C1153 + C51008 * C1161) *
                       C10907) *
                      C50673 * C50734 * C1148) *
                 C50699) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C31294 + C31295 + C31296) * C10908 +
                    (C31297 + C31298 + C31299) * C50894) *
                       C50673 * C50734 * C1074 -
                   ((C31809 + C31808 + C31807) * C50894 +
                    (C31806 + C31805 + C31804) * C10908 +
                    (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50973 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C10907) *
                       C50673 * C50734 * C50770) *
                      C1076 +
                  (((C24883 + C24882 + C24881) * C10907 +
                    (C24880 + C24879 + C24878) * C50973 +
                    (C25606 + C25607 + C25608) * C10908 +
                    (C25609 + C25610 + C25611) * C50894) *
                       C50673 * C50734 * C50770 -
                   ((C25060 + C25061 + C25062) * C50894 +
                    (C25063 + C25064 + C25065) * C10908 +
                    (C24695 + C24694 + C24693) * C50973 +
                    (C24692 + C24691 + C24690) * C10907) *
                       C50673 * C50734 * C1074) *
                      C1077 +
                  (((C24701 + C24700 + C24699) * C10907 +
                    (C24698 + C24697 + C24696) * C50973 +
                    (C25394 + C25395 + C25396) * C10908 +
                    (C25397 + C25398 + C25399) * C50894) *
                       C50673 * C50734 * C1074 -
                   ((C24652 * C3317 + C24647 * C3321 + C24651 * C1617 +
                     C51009 * C1624 + C24650 * C942 + C51008 * C949) *
                        C50894 +
                    (C24652 * C3312 + C24647 * C3318 + C24651 * C1612 +
                     C51009 * C1618 + C24650 * C934 + C51008 * C941) *
                        C10908 +
                    (C25235 + C25234 + C25233) * C50973 +
                    (C25232 + C25231 + C25230) * C10907) *
                       C50673 * C50734 * C50770) *
                      C1078)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C31294 + C31295 + C31296) * C10908 +
                    (C31297 + C31298 + C31299) * C50894) *
                       C50673 * C480 -
                   ((C31300 + C31301 + C31302) * C50894 +
                    (C31303 + C31304 + C31305) * C10908 +
                    (C31299 + C31298 + C31297) * C50973 +
                    (C31296 + C31295 + C31294) * C10907) *
                       C50673 * C481 +
                   ((C31305 + C31304 + C31303) * C10907 +
                    (C31302 + C31301 + C31300) * C50973 +
                    (C24650 * C1898 + C51008 * C1906 + C24651 * C4633 +
                     C51009 * C4641 + C24652 * C4632 + C24647 * C4640) *
                        C10908 +
                    (C24650 * C1905 + C51008 * C1910 + C24651 * C4639 +
                     C51009 * C4645 + C24652 * C4638 + C24647 * C4644) *
                        C50894) *
                       C50673 * C482) *
                      C1074 +
                  (((C31804 + C31805 + C31806) * C10907 +
                    (C31807 + C31808 + C31809) * C50973 +
                    (C32212 + C32213 + C32214) * C10908 +
                    (C32215 + C32216 + C32217) * C50894) *
                       C50673 * C481 -
                   ((C31809 + C31808 + C31807) * C50894 +
                    (C31806 + C31805 + C31804) * C10908 +
                    (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50973 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C10907) *
                       C50673 * C480 -
                   ((C24652 * C21442 + C24647 * C21444 + C24651 * C4638 +
                     C51009 * C4644 + C24650 * C4639 + C51008 * C4645) *
                        C50894 +
                    (C24652 * C21441 + C24647 * C21443 + C24651 * C4632 +
                     C51009 * C4640 + C24650 * C4633 + C51008 * C4641) *
                        C10908 +
                    (C32217 + C32216 + C32215) * C50973 +
                    (C32214 + C32213 + C32212) * C10907) *
                       C50673 * C482) *
                      C50770) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[98] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C10907 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50973 +
                     (C31294 + C31295 + C31296) * C10908 +
                     (C31297 + C31298 + C31299) * C50894) *
                        C50673 * C50960 -
                    ((C31300 + C31301 + C31302) * C50894 +
                     (C31303 + C31304 + C31305) * C10908 +
                     (C31299 + C31298 + C31297) * C50973 +
                     (C31296 + C31295 + C31294) * C10907) *
                        C50673 * C50798) *
                       C1074 +
                   (((C31804 + C31805 + C31806) * C10907 +
                     (C31807 + C31808 + C31809) * C50973 +
                     (C32212 + C32213 + C32214) * C10908 +
                     (C32215 + C32216 + C32217) * C50894) *
                        C50673 * C50798 -
                    ((C31809 + C31808 + C31807) * C50894 +
                     (C31806 + C31805 + C31804) * C10908 +
                     (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50973 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C10907) *
                        C50673 * C50960) *
                       C50770) *
                      C50951 +
                  ((((C25065 + C25064 + C25063) * C10907 +
                     (C25062 + C25061 + C25060) * C50973 +
                     (C25066 + C25067 + C25068) * C10908 +
                     (C25069 + C25070 + C25071) * C50894) *
                        C50673 * C50798 -
                    ((C25060 + C25061 + C25062) * C50894 +
                     (C25063 + C25064 + C25065) * C10908 +
                     (C24695 + C24694 + C24693) * C50973 +
                     (C24692 + C24691 + C24690) * C10907) *
                        C50673 * C50960) *
                       C1074 +
                   (((C24883 + C24882 + C24881) * C10907 +
                     (C24880 + C24879 + C24878) * C50973 +
                     (C25606 + C25607 + C25608) * C10908 +
                     (C25609 + C25610 + C25611) * C50894) *
                        C50673 * C50960 -
                    ((C24652 * C3740 + C24647 * C3744 + C24651 * C2746 +
                      C51009 * C2750 + C24650 * C1272 + C51008 * C1278) *
                         C50894 +
                     (C24652 * C3738 + C24647 * C3741 + C24651 * C2741 +
                      C51009 * C2745 + C24650 * C1266 + C51008 * C1273) *
                         C10908 +
                     (C25611 + C25610 + C25609) * C50973 +
                     (C25608 + C25607 + C25606) * C10907) *
                        C50673 * C50798) *
                       C50770) *
                      C50705)) /
                (p * q * std::sqrt(p + q));
    d2ee[99] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C31294 + C31295 + C31296) * C10908 +
                    (C31297 + C31298 + C31299) * C50894) *
                       C50673 * C50734 * C1074 -
                   ((C31809 + C31808 + C31807) * C50894 +
                    (C31806 + C31805 + C31804) * C10908 +
                    (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                     C51009 * C328 + C24650 * C310 + C51008 * C327) *
                        C50973 +
                    (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                     C51009 * C312 + C24650 * C297 + C51008 * C311) *
                        C10907) *
                       C50673 * C50734 * C50770) *
                      C1076 +
                  (((C24883 + C24882 + C24881) * C10907 +
                    (C24880 + C24879 + C24878) * C50973 +
                    (C25606 + C25607 + C25608) * C10908 +
                    (C25609 + C25610 + C25611) * C50894) *
                       C50673 * C50734 * C50770 -
                   ((C25060 + C25061 + C25062) * C50894 +
                    (C25063 + C25064 + C25065) * C10908 +
                    (C24695 + C24694 + C24693) * C50973 +
                    (C24692 + C24691 + C24690) * C10907) *
                       C50673 * C50734 * C1074) *
                      C1077 +
                  (((C24701 + C24700 + C24699) * C10907 +
                    (C24698 + C24697 + C24696) * C50973 +
                    (C25394 + C25395 + C25396) * C10908 +
                    (C25397 + C25398 + C25399) * C50894) *
                       C50673 * C50734 * C1074 -
                   ((C24652 * C3317 + C24647 * C3321 + C24651 * C1617 +
                     C51009 * C1624 + C24650 * C942 + C51008 * C949) *
                        C50894 +
                    (C24652 * C3312 + C24647 * C3318 + C24651 * C1612 +
                     C51009 * C1618 + C24650 * C934 + C51008 * C941) *
                        C10908 +
                    (C25235 + C25234 + C25233) * C50973 +
                    (C25232 + C25231 + C25230) * C10907) *
                       C50673 * C50734 * C50770) *
                      C1078)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                    C51009 * C311 + C24652 * C298 + C24647 * C312) *
                       C10907 +
                   (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                    C51009 * C327 + C24652 * C313 + C24647 * C328) *
                       C50973 +
                   (C31294 + C31295 + C31296) * C10908 +
                   (C31297 + C31298 + C31299) * C50894) *
                      C50673 * C50734 * C1145 -
                  ((C31809 + C31808 + C31807) * C50894 +
                   (C31806 + C31805 + C31804) * C10908 +
                   (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                    C51009 * C328 + C24650 * C310 + C51008 * C327) *
                       C50973 +
                   (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                    C51009 * C312 + C24650 * C297 + C51008 * C311) *
                       C10907) *
                      C50673 * C50734 * C1146 +
                  ((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                    C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                       C10907 +
                   (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                    C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                       C50973 +
                   (C24650 * C1614 + C51008 * C1622 + C24651 * C3310 +
                    C51009 * C3313 + C24652 * C4233 + C24647 * C4237) *
                       C10908 +
                   (C24650 * C1621 + C51008 * C1626 + C24651 * C3314 +
                    C51009 * C3319 + C24652 * C4236 + C24647 * C4239) *
                       C50894) *
                      C50673 * C50734 * C1147 -
                  ((C24652 * C21176 + C24647 * C21178 + C24651 * C4236 +
                    C51009 * C4239 + C24650 * C3314 + C51008 * C3319) *
                       C50894 +
                   (C24652 * C21175 + C24647 * C21177 + C24651 * C4233 +
                    C51009 * C4237 + C24650 * C3310 + C51008 * C3313) *
                       C10908 +
                   (C24652 * C3588 + C24647 * C3591 + C24651 * C2550 +
                    C51009 * C2555 + C24650 * C1160 + C51008 * C1165) *
                       C50973 +
                   (C24652 * C3585 + C24647 * C3589 + C24651 * C2546 +
                    C51009 * C2549 + C24650 * C1153 + C51008 * C1161) *
                       C10907) *
                      C50673 * C50734 * C1148) *
                 C50699) /
                    (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                       C51009 * C311 + C24652 * C298 + C24647 * C312) *
                          C10907 +
                      (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                       C51009 * C327 + C24652 * C313 + C24647 * C328) *
                          C50973 +
                      (C31294 + C31295 + C31296) * C10908 +
                      (C31297 + C31298 + C31299) * C50894) *
                         C50673 * C1725 -
                     ((C31300 + C31301 + C31302) * C50894 +
                      (C31303 + C31304 + C31305) * C10908 +
                      (C31299 + C31298 + C31297) * C50973 +
                      (C31296 + C31295 + C31294) * C10907) *
                         C50673 * C50798) *
                        C50959 +
                    (((C31804 + C31805 + C31806) * C10907 +
                      (C31807 + C31808 + C31809) * C50973 +
                      (C32212 + C32213 + C32214) * C10908 +
                      (C32215 + C32216 + C32217) * C50894) *
                         C50673 * C50798 -
                     ((C31809 + C31808 + C31807) * C50894 +
                      (C31806 + C31805 + C31804) * C10908 +
                      (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                       C51009 * C328 + C24650 * C310 + C51008 * C327) *
                          C50973 +
                      (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                       C51009 * C312 + C24650 * C297 + C51008 * C311) *
                          C10907) *
                         C50673 * C1725) *
                        C50770) *
                       C50951 +
                   ((((C25065 + C25064 + C25063) * C10907 +
                      (C25062 + C25061 + C25060) * C50973 +
                      (C25066 + C25067 + C25068) * C10908 +
                      (C25069 + C25070 + C25071) * C50894) *
                         C50673 * C50798 -
                     ((C25060 + C25061 + C25062) * C50894 +
                      (C25063 + C25064 + C25065) * C10908 +
                      (C24695 + C24694 + C24693) * C50973 +
                      (C24692 + C24691 + C24690) * C10907) *
                         C50673 * C1725) *
                        C50959 +
                    (((C24883 + C24882 + C24881) * C10907 +
                      (C24880 + C24879 + C24878) * C50973 +
                      (C25606 + C25607 + C25608) * C10908 +
                      (C25609 + C25610 + C25611) * C50894) *
                         C50673 * C1725 -
                     ((C24652 * C3740 + C24647 * C3744 + C24651 * C2746 +
                       C51009 * C2750 + C24650 * C1272 + C51008 * C1278) *
                          C50894 +
                      (C24652 * C3738 + C24647 * C3741 + C24651 * C2741 +
                       C51009 * C2745 + C24650 * C1266 + C51008 * C1273) *
                          C10908 +
                      (C25611 + C25610 + C25609) * C50973 +
                      (C25608 + C25607 + C25606) * C10907) *
                         C50673 * C50798) *
                        C50770) *
                       C50705)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C10907 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50973 +
                     (C31294 + C31295 + C31296) * C10908 +
                     (C31297 + C31298 + C31299) * C50894) *
                        C50673 * C51006 -
                    ((C31300 + C31301 + C31302) * C50894 +
                     (C31303 + C31304 + C31305) * C10908 +
                     (C31299 + C31298 + C31297) * C50973 +
                     (C31296 + C31295 + C31294) * C10907) *
                        C50673 * C51007 +
                    ((C31305 + C31304 + C31303) * C10907 +
                     (C31302 + C31301 + C31300) * C50973 +
                     (C33124 + C33125 + C33126) * C10908 +
                     (C33127 + C33128 + C33129) * C50894) *
                        C50673 * C2141) *
                       C50959 +
                   (((C31804 + C31805 + C31806) * C10907 +
                     (C31807 + C31808 + C31809) * C50973 +
                     (C32212 + C32213 + C32214) * C10908 +
                     (C32215 + C32216 + C32217) * C50894) *
                        C50673 * C51007 -
                    ((C31809 + C31808 + C31807) * C50894 +
                     (C31806 + C31805 + C31804) * C10908 +
                     (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50973 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C10907) *
                        C50673 * C51006 -
                    ((C24652 * C21442 + C24647 * C21444 + C24651 * C4638 +
                      C51009 * C4644 + C24650 * C4639 + C51008 * C4645) *
                         C50894 +
                     (C24652 * C21441 + C24647 * C21443 + C24651 * C4632 +
                      C51009 * C4640 + C24650 * C4633 + C51008 * C4641) *
                         C10908 +
                     (C32217 + C32216 + C32215) * C50973 +
                     (C32214 + C32213 + C32212) * C10907) *
                        C50673 * C2141) *
                       C50770) *
                  C50699) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C10907 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50973 +
                     (C31294 + C31295 + C31296) * C10908 +
                     (C31297 + C31298 + C31299) * C50894) *
                        C50673 * C1725 -
                    ((C31300 + C31301 + C31302) * C50894 +
                     (C31303 + C31304 + C31305) * C10908 +
                     (C31299 + C31298 + C31297) * C50973 +
                     (C31296 + C31295 + C31294) * C10907) *
                        C50673 * C50798) *
                       C289 +
                   (((C31804 + C31805 + C31806) * C10907 +
                     (C31807 + C31808 + C31809) * C50973 +
                     (C32212 + C32213 + C32214) * C10908 +
                     (C32215 + C32216 + C32217) * C50894) *
                        C50673 * C50798 -
                    ((C31809 + C31808 + C31807) * C50894 +
                     (C31806 + C31805 + C31804) * C10908 +
                     (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50973 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C10907) *
                        C50673 * C1725) *
                       C290 +
                   (((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                      C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                         C10907 +
                     (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                      C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                         C50973 +
                     (C32716 + C32717 + C32718) * C10908 +
                     (C32719 + C32720 + C32721) * C50894) *
                        C50673 * C1725 -
                    ((C24652 * C20846 + C24647 * C20848 + C24651 * C3742 +
                      C51009 * C3745 + C24650 * C2744 + C51008 * C2749) *
                         C50894 +
                     (C24652 * C20845 + C24647 * C20847 + C24651 * C3739 +
                      C51009 * C3743 + C24650 * C2740 + C51008 * C2743) *
                         C10908 +
                     (C32721 + C32720 + C32719) * C50973 +
                     (C32718 + C32717 + C32716) * C10907) *
                        C50673 * C50798) *
                       C291) *
                  C50699) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C10907 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50973 +
                     (C31294 + C31295 + C31296) * C10908 +
                     (C31297 + C31298 + C31299) * C50894) *
                        C50673 * C1725 -
                    ((C31300 + C31301 + C31302) * C50894 +
                     (C31303 + C31304 + C31305) * C10908 +
                     (C31299 + C31298 + C31297) * C50973 +
                     (C31296 + C31295 + C31294) * C10907) *
                        C50673 * C50798) *
                       C50718 * C1076 +
                   (((C25065 + C25064 + C25063) * C10907 +
                     (C25062 + C25061 + C25060) * C50973 +
                     (C25066 + C25067 + C25068) * C10908 +
                     (C25069 + C25070 + C25071) * C50894) *
                        C50673 * C50798 -
                    ((C25060 + C25061 + C25062) * C50894 +
                     (C25063 + C25064 + C25065) * C10908 +
                     (C24695 + C24694 + C24693) * C50973 +
                     (C24692 + C24691 + C24690) * C10907) *
                        C50673 * C1725) *
                       C50718 * C1077 +
                   (((C24701 + C24700 + C24699) * C10907 +
                     (C24698 + C24697 + C24696) * C50973 +
                     (C25394 + C25395 + C25396) * C10908 +
                     (C25397 + C25398 + C25399) * C50894) *
                        C50673 * C1725 -
                    ((C24652 * C2747 + C24647 * C2751 + C24651 * C1270 +
                      C51009 * C1277 + C24650 * C506 + C51008 * C519) *
                         C50894 +
                     (C24652 * C2742 + C24647 * C2748 + C24651 * C1265 +
                      C51009 * C1271 + C24650 * C489 + C51008 * C505) *
                         C10908 +
                     (C25399 + C25398 + C25397) * C50973 +
                     (C25396 + C25395 + C25394) * C10907) *
                        C50673 * C50798) *
                       C50718 * C1078)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                     C51009 * C311 + C24652 * C298 + C24647 * C312) *
                        C10907 +
                    (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                     C51009 * C327 + C24652 * C313 + C24647 * C328) *
                        C50973 +
                    (C31294 + C31295 + C31296) * C10908 +
                    (C31297 + C31298 + C31299) * C50894) *
                       C50673 * C1891 -
                   ((C31300 + C31301 + C31302) * C50894 +
                    (C31303 + C31304 + C31305) * C10908 +
                    (C31299 + C31298 + C31297) * C50973 +
                    (C31296 + C31295 + C31294) * C10907) *
                       C50673 * C1892 +
                   ((C31305 + C31304 + C31303) * C10907 +
                    (C31302 + C31301 + C31300) * C50973 +
                    (C33124 + C33125 + C33126) * C10908 +
                    (C33127 + C33128 + C33129) * C50894) *
                       C50673 * C1893 -
                   ((C24652 * C23126 + C24647 * C23128 + C24651 * C6562 +
                     C51009 * C6565 + C24650 * C5580 + C51008 * C5585) *
                        C50894 +
                    (C24652 * C23125 + C24647 * C23127 + C24651 * C6559 +
                     C51009 * C6563 + C24650 * C5576 + C51008 * C5579) *
                        C10908 +
                    (C33129 + C33128 + C33127) * C50973 +
                    (C33126 + C33125 + C33124) * C10907) *
                       C50673 * C1894) *
                  C50718 * C50699) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C10907 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50973 +
                     (C31294 + C31295 + C31296) * C10908 +
                     (C31297 + C31298 + C31299) * C50894) *
                        C50673 * C51006 -
                    ((C31300 + C31301 + C31302) * C50894 +
                     (C31303 + C31304 + C31305) * C10908 +
                     (C31299 + C31298 + C31297) * C50973 +
                     (C31296 + C31295 + C31294) * C10907) *
                        C50673 * C51007 +
                    ((C31305 + C31304 + C31303) * C10907 +
                     (C31302 + C31301 + C31300) * C50973 +
                     (C33124 + C33125 + C33126) * C10908 +
                     (C33127 + C33128 + C33129) * C50894) *
                        C50673 * C2141) *
                       C50718 * C50951 +
                   (((C25065 + C25064 + C25063) * C10907 +
                     (C25062 + C25061 + C25060) * C50973 +
                     (C25066 + C25067 + C25068) * C10908 +
                     (C25069 + C25070 + C25071) * C50894) *
                        C50673 * C51007 -
                    ((C25060 + C25061 + C25062) * C50894 +
                     (C25063 + C25064 + C25065) * C10908 +
                     (C24695 + C24694 + C24693) * C50973 +
                     (C24692 + C24691 + C24690) * C10907) *
                        C50673 * C51006 -
                    ((C24652 * C4634 + C24647 * C4642 + C24651 * C4635 +
                      C51009 * C4643 + C24650 * C1903 + C51008 * C1909) *
                         C50894 +
                     (C24652 * C4630 + C24647 * C4636 + C24651 * C4631 +
                      C51009 * C4637 + C24650 * C1897 + C51008 * C1904) *
                         C10908 +
                     (C25071 + C25070 + C25069) * C50973 +
                     (C25068 + C25067 + C25066) * C10907) *
                        C50673 * C2141) *
                       C50718 * C50705)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C10907 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50973 +
                     (C31294 + C31295 + C31296) * C10908 +
                     (C31297 + C31298 + C31299) * C50894) *
                        C50673 * C1725 -
                    ((C31300 + C31301 + C31302) * C50894 +
                     (C31303 + C31304 + C31305) * C10908 +
                     (C31299 + C31298 + C31297) * C50973 +
                     (C31296 + C31295 + C31294) * C10907) *
                        C50673 * C50798) *
                       C50718 * C1076 +
                   (((C25065 + C25064 + C25063) * C10907 +
                     (C25062 + C25061 + C25060) * C50973 +
                     (C25066 + C25067 + C25068) * C10908 +
                     (C25069 + C25070 + C25071) * C50894) *
                        C50673 * C50798 -
                    ((C25060 + C25061 + C25062) * C50894 +
                     (C25063 + C25064 + C25065) * C10908 +
                     (C24695 + C24694 + C24693) * C50973 +
                     (C24692 + C24691 + C24690) * C10907) *
                        C50673 * C1725) *
                       C50718 * C1077 +
                   (((C24701 + C24700 + C24699) * C10907 +
                     (C24698 + C24697 + C24696) * C50973 +
                     (C25394 + C25395 + C25396) * C10908 +
                     (C25397 + C25398 + C25399) * C50894) *
                        C50673 * C1725 -
                    ((C24652 * C2747 + C24647 * C2751 + C24651 * C1270 +
                      C51009 * C1277 + C24650 * C506 + C51008 * C519) *
                         C50894 +
                     (C24652 * C2742 + C24647 * C2748 + C24651 * C1265 +
                      C51009 * C1271 + C24650 * C489 + C51008 * C505) *
                         C10908 +
                     (C25399 + C25398 + C25397) * C50973 +
                     (C25396 + C25395 + C25394) * C10907) *
                        C50673 * C50798) *
                       C50718 * C1078)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C24650 * C119 + C51008 * C126 + C24651 * C297 +
                      C51009 * C311 + C24652 * C298 + C24647 * C312) *
                         C10907 +
                     (C24650 * C127 + C51008 * C140 + C24651 * C310 +
                      C51009 * C327 + C24652 * C313 + C24647 * C328) *
                         C50973 +
                     (C31294 + C31295 + C31296) * C10908 +
                     (C31297 + C31298 + C31299) * C50894) *
                        C50673 * C1725 -
                    ((C31300 + C31301 + C31302) * C50894 +
                     (C31303 + C31304 + C31305) * C10908 +
                     (C31299 + C31298 + C31297) * C50973 +
                     (C31296 + C31295 + C31294) * C10907) *
                        C50673 * C50798) *
                       C289 +
                   (((C31804 + C31805 + C31806) * C10907 +
                     (C31807 + C31808 + C31809) * C50973 +
                     (C32212 + C32213 + C32214) * C10908 +
                     (C32215 + C32216 + C32217) * C50894) *
                        C50673 * C50798 -
                    ((C31809 + C31808 + C31807) * C50894 +
                     (C31806 + C31805 + C31804) * C10908 +
                     (C24652 * C1160 + C24647 * C1165 + C24651 * C313 +
                      C51009 * C328 + C24650 * C310 + C51008 * C327) *
                         C50973 +
                     (C24652 * C1153 + C24647 * C1161 + C24651 * C298 +
                      C51009 * C312 + C24650 * C297 + C51008 * C311) *
                         C10907) *
                        C50673 * C1725) *
                       C290 +
                   (((C24650 * C298 + C51008 * C312 + C24651 * C1153 +
                      C51009 * C1161 + C24652 * C2546 + C24647 * C2549) *
                         C10907 +
                     (C24650 * C313 + C51008 * C328 + C24651 * C1160 +
                      C51009 * C1165 + C24652 * C2550 + C24647 * C2555) *
                         C50973 +
                     (C32716 + C32717 + C32718) * C10908 +
                     (C32719 + C32720 + C32721) * C50894) *
                        C50673 * C1725 -
                    ((C24652 * C20846 + C24647 * C20848 + C24651 * C3742 +
                      C51009 * C3745 + C24650 * C2744 + C51008 * C2749) *
                         C50894 +
                     (C24652 * C20845 + C24647 * C20847 + C24651 * C3739 +
                      C51009 * C3743 + C24650 * C2740 + C51008 * C2743) *
                         C10908 +
                     (C32721 + C32720 + C32719) * C50973 +
                     (C32718 + C32717 + C32716) * C10907) *
                        C50673 * C50798) *
                       C291) *
                  C50699) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C50959 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C50770) *
              C51002 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C50770 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C50959) *
              C51003 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C50734 * C50959 -
           ((C20056 * C2553 + C20051 * C2557 + C20055 * C1156 + C20050 * C1163 +
             C20054 * C317 + C20049 * C330 + C20053 * C306 + C20048 * C325) *
                C50830 +
            (C20056 * C2548 + C20051 * C2554 + C20055 * C1151 + C20050 * C1157 +
             C20054 * C300 + C20049 * C316 + C20053 * C295 + C20048 * C307) *
                C118) *
               C50673 * C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C50959 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C50770) *
              C51002 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
               C50734 * C50770 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C50959) *
              C51003 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C50734 * C50959 -
           (((C17239 * C322 + C50866 * C333 + C17238 * C321 + C17233 * C332) *
                 C50830 +
             (C17239 * C303 + C50866 * C323 + C17238 * C302 + C17233 * C320) *
                 C118) *
                C17237 +
            ((C17848 + C17847) * C50830 + (C17846 + C17845) * C118) * C17236 +
            C17849 * C17235) *
               C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C50734 * C50959 -
           ((C17239 * C2744 + C50866 * C2749 + C17238 * C1274 +
             C17233 * C1279) *
                C5232 +
            (C17239 * C2740 + C50866 * C2743 + C17238 * C1267 +
             C17233 * C1275) *
                C5235 +
            (C17239 * C1621 + C50866 * C1626 + C17238 * C938 + C17233 * C947) *
                C5231 +
            (C17239 * C1614 + C50866 * C1622 + C17238 * C932 + C17233 * C937) *
                C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C50734 * C50770) *
              C51002 +
          (((C17484 + C17483) * C5233 + (C17482 + C17481) * C5230 +
            (C18223 + C18224) * C5234 + (C18225 + C18226) * C5231 +
            (C17238 * C1266 + C17233 * C1273 + C17239 * C2741 +
             C50866 * C2745) *
                C5235 +
            (C17238 * C1272 + C17233 * C1278 + C17239 * C2746 +
             C50866 * C2750) *
                C5232) *
               C50673 * C50734 * C50770 -
           (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
            (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
            (C17274 + C17273) * C5233) *
               C50673 * C50734 * C50959) *
              C51003 +
          ((C17289 * C5233 + C17290 * C5230 + (C17674 + C17673) * C5234 +
            (C17672 + C17671) * C5231 + (C17683 + C17684) * C5235 +
            (C17685 + C17686) * C5232) *
               C50673 * C50734 * C50959 -
           ((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
             C17233 * C1277) *
                C5232 +
            (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
             C17233 * C1271) *
                C5235 +
            (C18230 + C18229) * C5231 + (C18228 + C18227) * C5234 +
            C17833 * C5230 + C17834 * C5233) *
               C50673 * C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
              C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                 C118 +
             (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
              C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                 C50830) *
                C50673 * C50960 -
            ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 +
              C20050 * C1626 + C20054 * C938 + C20049 * C947 + C20053 * C499 +
              C20048 * C516) *
                 C50830 +
             (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 +
              C20050 * C1622 + C20054 * C932 + C20049 * C937 + C20053 * C486 +
              C20048 * C500) *
                 C118) *
                C50673 * C50798) *
               C50959 +
           (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
              C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
              C20051 * C4237) *
                 C118 +
             (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
              C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
              C20051 * C4239) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 +
              C20050 * C1165 + C20054 * C313 + C20049 * C328 + C20053 * C310 +
              C20048 * C327) *
                 C50830 +
             (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 +
              C20050 * C1161 + C20054 * C298 + C20049 * C312 + C20053 * C297 +
              C20048 * C311) *
                 C118) *
                C50673 * C50960) *
               C50770) *
              C292 +
          ((((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
              C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
              C20051 * C3315) *
                 C118 +
             (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
              C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
              C20051 * C3320) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
              C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                 C50830 +
             (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
              C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                 C118) *
                C50673 * C50960) *
               C50959 +
           (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
              C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
              C20051 * C2551) *
                 C118 +
             (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
              C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
              C20051 * C2556) *
                 C50830) *
                C50673 * C50960 -
            ((C20056 * C4234 + C20051 * C4238 + C20055 * C3316 +
              C20050 * C3320 + C20054 * C1619 + C20049 * C1625 + C20053 * C940 +
              C20048 * C948) *
                 C50830 +
             (C20056 * C4232 + C20051 * C4235 + C20055 * C3311 +
              C20050 * C3315 + C20054 * C1613 + C20049 * C1620 + C20053 * C933 +
              C20048 * C939) *
                 C118) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                  C118 +
              (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                  C50830) *
                 C17235 +
             ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
             C17297 * C17237) *
                C50960 -
            (C18012 * C17237 +
             ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
             ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                  C50830 +
              (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                  C118) *
                 C17235) *
                C50798) *
               C50959 +
           ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 +
               C50866 * C1622) *
                  C118 +
              (C17238 * C938 + C17233 * C947 + C17239 * C1621 +
               C50866 * C1626) *
                  C50830) *
                 C17235 +
             ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
             ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
                C50798 -
            (C17849 * C17237 +
             ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
             ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                  C50830 +
              (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                  C118) *
                 C17235) *
                C50960) *
               C50770) *
              C292 +
          (((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
             ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
             ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
                C50798 -
            (C17298 * C17237 +
             ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
             ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
                C50960) *
               C50959 +
           ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
             ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
             ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
                C50960 -
            (((C17239 * C1615 + C50866 * C1623 + C17238 * C944 +
               C17233 * C950) *
                  C50830 +
              (C17239 * C1611 + C50866 * C1616 + C17238 * C935 +
               C17233 * C943) *
                  C118) *
                 C17237 +
             ((C18230 + C18229) * C50830 + (C18228 + C18227) * C118) * C17236 +
             ((C18226 + C18225) * C50830 + (C18224 + C18223) * C118) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C5233 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C5230 +
             (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
             C22212 * C5235 + C22213 * C5232) *
                C50673 * C50960 -
            ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
             (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
             (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
                C50673 * C50798) *
               C50959 +
           (((C22724 + C22725) * C5233 + (C22726 + C22727) * C5230 +
             (C22728 + C22729) * C5234 + (C22730 + C22731) * C5231 +
             (C17238 * C4633 + C17233 * C4641 + C17239 * C4632 +
              C50866 * C4640) *
                 C5235 +
             (C17238 * C4639 + C17233 * C4645 + C17239 * C4638 +
              C50866 * C4644) *
                 C5232) *
                C50673 * C50798 -
            ((C22731 + C22730) * C5232 + (C22729 + C22728) * C5235 +
             (C22727 + C22726) * C5231 + (C22725 + C22724) * C5234 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C5230 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C5233) *
                C50673 * C50960) *
               C50770) *
              C292 +
          ((((C17678 + C17677) * C5233 + (C17676 + C17675) * C5230 +
             (C17679 + C17680) * C5234 + (C17681 + C17682) * C5231 +
             (C22208 + C22209) * C5235 + (C22210 + C22211) * C5232) *
                C50673 * C50798 -
            (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
             (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
             (C17274 + C17273) * C5233) *
                C50673 * C50960) *
               C50959 +
           (((C17484 + C17483) * C5233 + (C17482 + C17481) * C5230 +
             (C18223 + C18224) * C5234 + (C18225 + C18226) * C5231 +
             (C22732 + C22733) * C5235 + (C22734 + C22735) * C5232) *
                C50673 * C50960 -
            ((C17239 * C4634 + C50866 * C4642 + C17238 * C4635 +
              C17233 * C4643) *
                 C5232 +
             (C17239 * C4630 + C50866 * C4636 + C17238 * C4631 +
              C17233 * C4637) *
                 C5235 +
             (C22735 + C22734) * C5231 + (C22733 + C22732) * C5234 +
             (C18226 + C18225) * C5230 + (C18224 + C18223) * C5233) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17238 * C119 + C17233 * C126 + C17239 * C297 +
                 C50866 * C311) *
                    C118 +
                (C17238 * C127 + C17233 * C140 + C17239 * C310 +
                 C50866 * C327) *
                    C50830) *
                   C17235 +
               ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) *
                   C17236 +
               C17297 * C17237) *
                  C50734 * C50718 * C113 -
              (C17298 * C17237 +
               ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) *
                   C17236 +
               ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) *
                   C17235) *
                  C50734 * C50718 * C114 +
              (C17297 * C17235 +
               ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) *
                   C17236 +
               ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) *
                   C17237) *
                  C50734 * C50718 * C115 -
              (((C17239 * C675 + C50866 * C677 + C17238 * C137 +
                 C17233 * C145) *
                    C50830 +
                (C17239 * C674 + C50866 * C676 + C17238 * C124 +
                 C17233 * C136) *
                    C118) *
                   C17237 +
               ((C17288 + C17287) * C50830 + (C17286 + C17285) * C118) *
                   C17236 +
               C17298 * C17235) *
                  C50734 * C50718 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C17238 * C119 + C17233 * C126 + C17239 * C297 +
                  C50866 * C311) *
                     C118 +
                 (C17238 * C127 + C17233 * C140 + C17239 * C310 +
                  C50866 * C327) *
                     C50830) *
                    C17235 +
                ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) *
                    C17236 +
                C17297 * C17237) *
                   C50734 * C289 -
               (((C17477 + C17478) * C50830 + (C17479 + C17480) * C118) *
                    C17237 +
                ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) *
                    C17236 +
                ((C17239 * C313 + C50866 * C328 + C17238 * C310 +
                  C17233 * C327) *
                     C50830 +
                 (C17239 * C298 + C50866 * C312 + C17238 * C297 +
                  C17233 * C311) *
                     C118) *
                    C17235) *
                   C50734 * C290 +
               (((C17238 * C298 + C17233 * C312 + C17239 * C1153 +
                  C50866 * C1161) *
                     C118 +
                 (C17238 * C313 + C17233 * C328 + C17239 * C1160 +
                  C50866 * C1165) *
                     C50830) *
                    C17235 +
                ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) *
                    C17236 +
                ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) *
                    C17237) *
                   C50734 * C291) *
                  C292 +
              ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) *
                    C17235 +
                ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) *
                    C17236 +
                ((C17238 * C294 + C17233 * C305 + C17239 * C301 +
                  C50866 * C318) *
                     C118 +
                 (C17238 * C304 + C17233 * C324 + C17239 * C319 +
                  C50866 * C331) *
                     C50830) *
                    C17237) *
                   C50734 * C290 -
               (C17298 * C17237 +
                ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) *
                    C17236 +
                ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) *
                    C17235) *
                   C50734 * C289 -
               (((C17239 * C1154 + C50866 * C1162 + C17238 * C319 +
                  C17233 * C331) *
                     C50830 +
                 (C17239 * C1150 + C50866 * C1155 + C17238 * C301 +
                  C17233 * C318) *
                     C118) *
                    C17237 +
                ((C17492 + C17491) * C50830 + (C17490 + C17489) * C118) *
                    C17236 +
                ((C17488 + C17487) * C50830 + (C17486 + C17485) * C118) *
                    C17235) *
                   C50734 * C291) *
                  C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C480 -
           (((C17671 + C17672) * C50830 + (C17673 + C17674) * C118) * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C481 +
           (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                 C118 +
             (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                 C50830) *
                C17235 +
            ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
            ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
               C482) *
              C50718 * C292 +
          ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
            ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
            ((C17238 * C483 + C17233 * C494 + C17239 * C935 + C50866 * C943) *
                 C118 +
             (C17238 * C493 + C17233 * C513 + C17239 * C944 + C50866 * C950) *
                 C50830) *
                C17237) *
               C481 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C480 -
           (((C17239 * C1268 + C50866 * C1276 + C17238 * C508 + C17233 * C520) *
                 C50830 +
             (C17239 * C1264 + C50866 * C1269 + C17238 * C490 + C17233 * C507) *
                 C118) *
                C17237 +
            ((C17686 + C17685) * C50830 + (C17684 + C17683) * C118) * C17236 +
            ((C17682 + C17681) * C50830 + (C17680 + C17679) * C118) * C17235) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C50734 * C50718 * C113 -
          ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
            C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
               C50830 +
           (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
            C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
               C118) *
              C50673 * C50734 * C50718 * C114 +
          ((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
            C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
               C118 +
           (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
            C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
               C50830) *
              C50673 * C50734 * C50718 * C115 -
          ((C20056 * C1154 + C20051 * C1162 + C20055 * C319 + C20050 * C331 +
            C20054 * C304 + C20049 * C324 + C20053 * C133 + C20048 * C143) *
               C50830 +
           (C20056 * C1150 + C20051 * C1155 + C20055 * C301 + C20050 * C318 +
            C20054 * C294 + C20049 * C305 + C20053 * C122 + C20048 * C132) *
               C118) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C289 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C290 +
           ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C50734 * C291) *
              C292 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C290 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C289 -
           ((C20056 * C3586 + C20051 * C3590 + C20055 * C2552 + C20050 * C2556 +
             C20054 * C1158 + C20049 * C1164 + C20053 * C315 + C20048 * C329) *
                C50830 +
            (C20056 * C3584 + C20051 * C3587 + C20055 * C2547 + C20050 * C2551 +
             C20054 * C1152 + C20049 * C1159 + C20053 * C299 + C20048 * C314) *
                C118) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C480 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C481 +
           ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
             C20055 * C2740 + C20050 * C2743 + C20056 * C3739 +
             C20051 * C3743) *
                C118 +
            (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
             C20055 * C2744 + C20050 * C2749 + C20056 * C3742 +
             C20051 * C3745) *
                C50830) *
               C50673 * C482) *
              C50718 * C292 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C481 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C480 -
           ((C20056 * C3740 + C20051 * C3744 + C20055 * C2746 + C20050 * C2750 +
             C20054 * C1272 + C20049 * C1278 + C20053 * C504 + C20048 * C518) *
                C50830 +
            (C20056 * C3738 + C20051 * C3741 + C20055 * C2741 + C20050 * C2745 +
             C20054 * C1266 + C20049 * C1273 + C20053 * C488 + C20048 * C503) *
                C118) *
               C50673 * C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
               C5233 +
           (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
               C5230 +
           (C17238 * C486 + C17233 * C500 + C17239 * C932 + C50866 * C937) *
               C5234 +
           (C17238 * C499 + C17233 * C516 + C17239 * C938 + C50866 * C947) *
               C5231 +
           (C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
               C5235 +
           (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
               C5232) *
              C50673 * C50734 * C50718 * C113 -
          ((C17682 + C17681) * C5232 + (C17680 + C17679) * C5235 +
           (C17675 + C17676) * C5231 + (C17677 + C17678) * C5234 +
           (C17276 + C17275) * C5230 + (C17274 + C17273) * C5233) *
              C50673 * C50734 * C50718 * C114 +
          (C17289 * C5233 + C17290 * C5230 + (C17674 + C17673) * C5234 +
           (C17672 + C17671) * C5231 + (C17683 + C17684) * C5235 +
           (C17685 + C17686) * C5232) *
              C50673 * C50734 * C50718 * C115 -
          ((C17239 * C1268 + C50866 * C1276 + C17238 * C508 + C17233 * C520) *
               C5232 +
           (C17239 * C1264 + C50866 * C1269 + C17238 * C490 + C17233 * C507) *
               C5235 +
           (C18011 + C18010) * C5231 + (C18009 + C18008) * C5234 +
           C17291 * C5230 + C17292 * C5233) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C17238 * C486 + C17233 * C500 + C17239 * C932 + C50866 * C937) *
                C5234 +
            (C17238 * C499 + C17233 * C516 + C17239 * C938 + C50866 * C947) *
                C5231 +
            (C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                C5235 +
            (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                C5232) *
               C50673 * C50734 * C289 -
           ((C17239 * C2744 + C50866 * C2749 + C17238 * C1274 +
             C17233 * C1279) *
                C5232 +
            (C17239 * C2740 + C50866 * C2743 + C17238 * C1267 +
             C17233 * C1275) *
                C5235 +
            (C17239 * C1621 + C50866 * C1626 + C17238 * C938 + C17233 * C947) *
                C5231 +
            (C17239 * C1614 + C50866 * C1622 + C17238 * C932 + C17233 * C937) *
                C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C50734 * C290 +
           ((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C5233 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C5230 +
            (C17238 * C1614 + C17233 * C1622 + C17239 * C3310 +
             C50866 * C3313) *
                C5234 +
            (C17238 * C1621 + C17233 * C1626 + C17239 * C3314 +
             C50866 * C3319) *
                C5231 +
            (C17238 * C2740 + C17233 * C2743 + C17239 * C3739 +
             C50866 * C3743) *
                C5235 +
            (C17238 * C2744 + C17233 * C2749 + C17239 * C3742 +
             C50866 * C3745) *
                C5232) *
               C50673 * C50734 * C291) *
              C292 +
          (((C17484 + C17483) * C5233 + (C17482 + C17481) * C5230 +
            (C18223 + C18224) * C5234 + (C18225 + C18226) * C5231 +
            (C17238 * C1266 + C17233 * C1273 + C17239 * C2741 +
             C50866 * C2745) *
                C5235 +
            (C17238 * C1272 + C17233 * C1278 + C17239 * C2746 +
             C50866 * C2750) *
                C5232) *
               C50673 * C50734 * C290 -
           ((C17682 + C17681) * C5232 + (C17680 + C17679) * C5235 +
            (C17675 + C17676) * C5231 + (C17677 + C17678) * C5234 +
            (C17276 + C17275) * C5230 + (C17274 + C17273) * C5233) *
               C50673 * C50734 * C289 -
           ((C17239 * C3740 + C50866 * C3744 + C17238 * C2746 +
             C17233 * C2750) *
                C5232 +
            (C17239 * C3738 + C50866 * C3741 + C17238 * C2741 +
             C17233 * C2745) *
                C5235 +
            (C17239 * C3316 + C50866 * C3320 + C17238 * C1619 +
             C17233 * C1625) *
                C5231 +
            (C17239 * C3311 + C50866 * C3315 + C17238 * C1613 +
             C17233 * C1620) *
                C5234 +
            (C17488 + C17487) * C5230 + (C17486 + C17485) * C5233) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C480 -
           ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
            (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
            (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
               C50673 * C481 +
           (C22212 * C5233 + C22213 * C5230 + (C22207 + C22206) * C5234 +
            (C22205 + C22204) * C5231 +
            (C17238 * C5576 + C17233 * C5579 + C17239 * C6559 +
             C50866 * C6563) *
                C5235 +
            (C17238 * C5580 + C17233 * C5585 + C17239 * C6562 +
             C50866 * C6565) *
                C5232) *
               C50673 * C482) *
              C50718 * C292 +
          (((C17678 + C17677) * C5233 + (C17676 + C17675) * C5230 +
            (C17679 + C17680) * C5234 + (C17681 + C17682) * C5231 +
            (C22208 + C22209) * C5235 + (C22210 + C22211) * C5232) *
               C50673 * C481 -
           (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
            (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
            (C17274 + C17273) * C5233) *
               C50673 * C480 -
           ((C17239 * C6560 + C50866 * C6564 + C17238 * C5582 +
             C17233 * C5586) *
                C5232 +
            (C17239 * C6558 + C50866 * C6561 + C17238 * C5577 +
             C17233 * C5581) *
                C5235 +
            (C22211 + C22210) * C5231 + (C22209 + C22208) * C5234 +
            C22194 * C5230 + C22195 * C5233) *
               C50673 * C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50960 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C50718 * C51002 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50960) *
              C50718 * C51003 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C50960 -
           ((C20056 * C3317 + C20051 * C3321 + C20055 * C1617 + C20050 * C1624 +
             C20054 * C942 + C20049 * C949 + C20053 * C495 + C20048 * C514) *
                C50830 +
            (C20056 * C3312 + C20051 * C3318 + C20055 * C1612 + C20050 * C1618 +
             C20054 * C934 + C20049 * C941 + C20053 * C484 + C20048 * C496) *
                C118) *
               C50673 * C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50960 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C50718 * C51002 +
          ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
            ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
            ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
               C50798 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50960) *
              C50718 * C51003 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C50960 -
           (((C17239 * C945 + C50866 * C951 + C17238 * C510 + C17233 * C521) *
                 C50830 +
             (C17239 * C936 + C50866 * C946 + C17238 * C491 + C17233 * C509) *
                 C118) *
                C17237 +
            ((C18011 + C18010) * C50830 + (C18009 + C18008) * C118) * C17236 +
            C18012 * C17235) *
               C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C50960 -
           ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
            (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
            (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
               C50673 * C50798) *
              C50718 * C51002 +
          (((C17678 + C17677) * C5233 + (C17676 + C17675) * C5230 +
            (C17679 + C17680) * C5234 + (C17681 + C17682) * C5231 +
            (C22208 + C22209) * C5235 + (C22210 + C22211) * C5232) *
               C50673 * C50798 -
           (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
            (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
            (C17274 + C17273) * C5233) *
               C50673 * C50960) *
              C50718 * C51003 +
          ((C17289 * C5233 + C17290 * C5230 + (C17674 + C17673) * C5234 +
            (C17672 + C17671) * C5231 + (C17683 + C17684) * C5235 +
            (C17685 + C17686) * C5232) *
               C50673 * C50960 -
           ((C17239 * C6141 + C50866 * C6143 + C17238 * C1901 +
             C17233 * C1908) *
                C5232 +
            (C17239 * C6140 + C50866 * C6142 + C17238 * C1896 +
             C17233 * C1902) *
                C5235 +
            (C17686 + C17685) * C5231 + (C17684 + C17683) * C5234 +
            C17996 * C5230 + C17997 * C5233) *
               C50673 * C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C289 -
           (((C17477 + C17478) * C50830 + (C17479 + C17480) * C118) * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C290 +
           (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C50734 * C291) *
              C292 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17238 * C294 + C17233 * C305 + C17239 * C301 + C50866 * C318) *
                 C118 +
             (C17238 * C304 + C17233 * C324 + C17239 * C319 + C50866 * C331) *
                 C50830) *
                C17237) *
               C50734 * C290 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C289 -
           (((C17239 * C1154 + C50866 * C1162 + C17238 * C319 + C17233 * C331) *
                 C50830 +
             (C17239 * C1150 + C50866 * C1155 + C17238 * C301 + C17233 * C318) *
                 C118) *
                C17237 +
            ((C17492 + C17491) * C50830 + (C17490 + C17489) * C118) * C17236 +
            ((C17488 + C17487) * C50830 + (C17486 + C17485) * C118) * C17235) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C118 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50830) *
               C17235 +
           ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
           C17297 * C17237) *
              C50734 * C50718 * C113 -
          (C17298 * C17237 +
           ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
           ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
              C50734 * C50718 * C114 +
          (C17297 * C17235 +
           ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
           ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
              C50734 * C50718 * C115 -
          (((C17239 * C675 + C50866 * C677 + C17238 * C137 + C17233 * C145) *
                C50830 +
            (C17239 * C674 + C50866 * C676 + C17238 * C124 + C17233 * C136) *
                C118) *
               C17237 +
           ((C17288 + C17287) * C50830 + (C17286 + C17285) * C118) * C17236 +
           C17298 * C17235) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C50734 * C50718 * C113 -
          ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
            C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
               C50830 +
           (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
            C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
               C118) *
              C50673 * C50734 * C50718 * C114 +
          ((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
            C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
               C118 +
           (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
            C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
               C50830) *
              C50673 * C50734 * C50718 * C115 -
          ((C20056 * C1154 + C20051 * C1162 + C20055 * C319 + C20050 * C331 +
            C20054 * C304 + C20049 * C324 + C20053 * C133 + C20048 * C143) *
               C50830 +
           (C20056 * C1150 + C20051 * C1155 + C20055 * C301 + C20050 * C318 +
            C20054 * C294 + C20049 * C305 + C20053 * C122 + C20048 * C132) *
               C118) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C289 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C290 +
           ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C50734 * C291) *
              C292 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C290 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C289 -
           ((C20056 * C3586 + C20051 * C3590 + C20055 * C2552 + C20050 * C2556 +
             C20054 * C1158 + C20049 * C1164 + C20053 * C315 + C20048 * C329) *
                C50830 +
            (C20056 * C3584 + C20051 * C3587 + C20055 * C2547 + C20050 * C2551 +
             C20054 * C1152 + C20049 * C1159 + C20053 * C299 + C20048 * C314) *
                C118) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
               C5233 +
           (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
               C5230 +
           (C17238 * C486 + C17233 * C500 + C17239 * C932 + C50866 * C937) *
               C5234 +
           (C17238 * C499 + C17233 * C516 + C17239 * C938 + C50866 * C947) *
               C5231 +
           (C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
               C5235 +
           (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
               C5232) *
              C50673 * C50734 * C50718 * C113 -
          ((C17682 + C17681) * C5232 + (C17680 + C17679) * C5235 +
           (C17675 + C17676) * C5231 + (C17677 + C17678) * C5234 +
           (C17276 + C17275) * C5230 + (C17274 + C17273) * C5233) *
              C50673 * C50734 * C50718 * C114 +
          (C17289 * C5233 + C17290 * C5230 + (C17674 + C17673) * C5234 +
           (C17672 + C17671) * C5231 + (C17683 + C17684) * C5235 +
           (C17685 + C17686) * C5232) *
              C50673 * C50734 * C50718 * C115 -
          ((C17239 * C1268 + C50866 * C1276 + C17238 * C508 + C17233 * C520) *
               C5232 +
           (C17239 * C1264 + C50866 * C1269 + C17238 * C490 + C17233 * C507) *
               C5235 +
           (C18011 + C18010) * C5231 + (C18009 + C18008) * C5234 +
           C17291 * C5230 + C17292 * C5233) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C17238 * C486 + C17233 * C500 + C17239 * C932 + C50866 * C937) *
                C5234 +
            (C17238 * C499 + C17233 * C516 + C17239 * C938 + C50866 * C947) *
                C5231 +
            (C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                C5235 +
            (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                C5232) *
               C50673 * C50734 * C289 -
           ((C17239 * C2744 + C50866 * C2749 + C17238 * C1274 +
             C17233 * C1279) *
                C5232 +
            (C17239 * C2740 + C50866 * C2743 + C17238 * C1267 +
             C17233 * C1275) *
                C5235 +
            (C17239 * C1621 + C50866 * C1626 + C17238 * C938 + C17233 * C947) *
                C5231 +
            (C17239 * C1614 + C50866 * C1622 + C17238 * C932 + C17233 * C937) *
                C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C50734 * C290 +
           ((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C5233 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C5230 +
            (C17238 * C1614 + C17233 * C1622 + C17239 * C3310 +
             C50866 * C3313) *
                C5234 +
            (C17238 * C1621 + C17233 * C1626 + C17239 * C3314 +
             C50866 * C3319) *
                C5231 +
            (C17238 * C2740 + C17233 * C2743 + C17239 * C3739 +
             C50866 * C3743) *
                C5235 +
            (C17238 * C2744 + C17233 * C2749 + C17239 * C3742 +
             C50866 * C3745) *
                C5232) *
               C50673 * C50734 * C291) *
              C292 +
          (((C17484 + C17483) * C5233 + (C17482 + C17481) * C5230 +
            (C18223 + C18224) * C5234 + (C18225 + C18226) * C5231 +
            (C17238 * C1266 + C17233 * C1273 + C17239 * C2741 +
             C50866 * C2745) *
                C5235 +
            (C17238 * C1272 + C17233 * C1278 + C17239 * C2746 +
             C50866 * C2750) *
                C5232) *
               C50673 * C50734 * C290 -
           ((C17682 + C17681) * C5232 + (C17680 + C17679) * C5235 +
            (C17675 + C17676) * C5231 + (C17677 + C17678) * C5234 +
            (C17276 + C17275) * C5230 + (C17274 + C17273) * C5233) *
               C50673 * C50734 * C289 -
           ((C17239 * C3740 + C50866 * C3744 + C17238 * C2746 +
             C17233 * C2750) *
                C5232 +
            (C17239 * C3738 + C50866 * C3741 + C17238 * C2741 +
             C17233 * C2745) *
                C5235 +
            (C17239 * C3316 + C50866 * C3320 + C17238 * C1619 +
             C17233 * C1625) *
                C5231 +
            (C17239 * C3311 + C50866 * C3315 + C17238 * C1613 +
             C17233 * C1620) *
                C5234 +
            (C17488 + C17487) * C5230 + (C17486 + C17485) * C5233) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C51004 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C51005 +
           ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C50734 * C1380) *
              C50951 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C51005 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C51004 -
           ((C20056 * C3586 + C20051 * C3590 + C20055 * C2552 + C20050 * C2556 +
             C20054 * C1158 + C20049 * C1164 + C20053 * C315 + C20048 * C329) *
                C50830 +
            (C20056 * C3584 + C20051 * C3587 + C20055 * C2547 + C20050 * C2551 +
             C20054 * C1152 + C20049 * C1159 + C20053 * C299 + C20048 * C314) *
                C118) *
               C50673 * C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C51004 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C51005 +
           (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C50734 * C1380) *
              C50951 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
               C50734 * C51005 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C51004 -
           (((C17239 * C1154 + C50866 * C1162 + C17238 * C319 + C17233 * C331) *
                 C50830 +
             (C17239 * C1150 + C50866 * C1155 + C17238 * C301 + C17233 * C318) *
                 C118) *
                C17237 +
            ((C17492 + C17491) * C50830 + (C17490 + C17489) * C118) * C17236 +
            ((C17488 + C17487) * C50830 + (C17486 + C17485) * C118) * C17235) *
               C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C50734 * C51004 -
           (C23138 * C5232 + C23139 * C5235 + (C22727 + C22726) * C5231 +
            (C22725 + C22724) * C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C50734 * C51005 +
           ((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C5233 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C5230 +
            (C17238 * C1614 + C17233 * C1622 + C17239 * C3310 +
             C50866 * C3313) *
                C5234 +
            (C17238 * C1621 + C17233 * C1626 + C17239 * C3314 +
             C50866 * C3319) *
                C5231 +
            (C17238 * C2740 + C17233 * C2743 + C17239 * C3739 +
             C50866 * C3743) *
                C5235 +
            (C17238 * C2744 + C17233 * C2749 + C17239 * C3742 +
             C50866 * C3745) *
                C5232) *
               C50673 * C50734 * C1380) *
              C50951 +
          (((C17484 + C17483) * C5233 + (C17482 + C17481) * C5230 +
            (C18223 + C18224) * C5234 + (C18225 + C18226) * C5231 +
            (C22732 + C22733) * C5235 + (C22734 + C22735) * C5232) *
               C50673 * C50734 * C51005 -
           (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
            (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
            (C17274 + C17273) * C5233) *
               C50673 * C50734 * C51004 -
           ((C17239 * C3740 + C50866 * C3744 + C17238 * C2746 +
             C17233 * C2750) *
                C5232 +
            (C17239 * C3738 + C50866 * C3741 + C17238 * C2741 +
             C17233 * C2745) *
                C5235 +
            (C17239 * C3316 + C50866 * C3320 + C17238 * C1619 +
             C17233 * C1625) *
                C5231 +
            (C17239 * C3311 + C50866 * C3315 + C17238 * C1613 +
             C17233 * C1620) *
                C5234 +
            (C17488 + C17487) * C5230 + (C17486 + C17485) * C5233) *
               C50673 * C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50960 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C51004 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50960) *
              C51005 +
          (((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C50960 -
           ((C20056 * C21176 + C20051 * C21178 + C20055 * C4236 +
             C20050 * C4239 + C20054 * C3314 + C20049 * C3319 + C20053 * C1621 +
             C20048 * C1626) *
                C50830 +
            (C20056 * C21175 + C20051 * C21177 + C20055 * C4233 +
             C20050 * C4237 + C20054 * C3310 + C20049 * C3313 + C20053 * C1614 +
             C20048 * C1622) *
                C118) *
               C50673 * C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50960 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C51004 +
          ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 + C50866 * C1622) *
                 C118 +
             (C17238 * C938 + C17233 * C947 + C17239 * C1621 + C50866 * C1626) *
                 C50830) *
                C17235 +
            ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
            ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
               C50798 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50960) *
              C51005 +
          ((((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C50960 -
           (((C17239 * C3317 + C50866 * C3321 + C17238 * C1617 +
              C17233 * C1624) *
                 C50830 +
             (C17239 * C3312 + C50866 * C3318 + C17238 * C1612 +
              C17233 * C1618) *
                 C118) *
                C17237 +
            ((C17239 * C3316 + C50866 * C3320 + C17238 * C1619 +
              C17233 * C1625) *
                 C50830 +
             (C17239 * C3311 + C50866 * C3315 + C17238 * C1613 +
              C17233 * C1620) *
                 C118) *
                C17236 +
            ((C17239 * C3314 + C50866 * C3319 + C17238 * C1621 +
              C17233 * C1626) *
                 C50830 +
             (C17239 * C3310 + C50866 * C3313 + C17238 * C1614 +
              C17233 * C1622) *
                 C118) *
                C17235) *
               C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C50960 -
           ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
            (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
            (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
               C50673 * C50798) *
              C51004 +
          (((C22724 + C22725) * C5233 + (C22726 + C22727) * C5230 +
            (C22728 + C22729) * C5234 + (C22730 + C22731) * C5231 +
            (C23140 + C23141) * C5235 + (C23142 + C23143) * C5232) *
               C50673 * C50798 -
           (C23138 * C5232 + C23139 * C5235 + (C22727 + C22726) * C5231 +
            (C22725 + C22724) * C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C50960) *
              C51005 +
          (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C5233 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C5230 +
            (C23646 + C23647) * C5234 + (C23648 + C23649) * C5231 +
            (C23650 + C23651) * C5235 + (C23652 + C23653) * C5232) *
               C50673 * C50960 -
           ((C17239 * C21442 + C50866 * C21444 + C17238 * C4638 +
             C17233 * C4644) *
                C5232 +
            (C17239 * C21441 + C50866 * C21443 + C17238 * C4632 +
             C17233 * C4640) *
                C5235 +
            (C23653 + C23652) * C5231 + (C23651 + C23650) * C5234 +
            (C23649 + C23648) * C5230 + (C23647 + C23646) * C5233) *
               C50673 * C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C17238 * C119 + C17233 * C126 + C17239 * C297 +
                  C50866 * C311) *
                     C118 +
                 (C17238 * C127 + C17233 * C140 + C17239 * C310 +
                  C50866 * C327) *
                     C50830) *
                    C17235 +
                ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) *
                    C17236 +
                C17297 * C17237) *
                   C50734 * C1074 -
               (C17849 * C17237 +
                ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) *
                    C17236 +
                ((C17239 * C313 + C50866 * C328 + C17238 * C310 +
                  C17233 * C327) *
                     C50830 +
                 (C17239 * C298 + C50866 * C312 + C17238 * C297 +
                  C17233 * C311) *
                     C118) *
                    C17235) *
                   C50734 * C50770) *
                  C1076 +
              ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) *
                    C17235 +
                ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) *
                    C17236 +
                ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) *
                    C17237) *
                   C50734 * C50770 -
               (C17298 * C17237 +
                ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) *
                    C17236 +
                ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) *
                    C17235) *
                   C50734 * C1074) *
                  C1077 +
              ((C17297 * C17235 +
                ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) *
                    C17236 +
                ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) *
                    C17237) *
                   C50734 * C1074 -
               (((C17239 * C322 + C50866 * C333 + C17238 * C321 +
                  C17233 * C332) *
                     C50830 +
                 (C17239 * C303 + C50866 * C323 + C17238 * C302 +
                  C17233 * C320) *
                     C118) *
                    C17237 +
                ((C17848 + C17847) * C50830 + (C17846 + C17845) * C118) *
                    C17236 +
                C17849 * C17235) *
                   C50734 * C50770) *
                  C1078) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17238 * C119 + C17233 * C126 + C17239 * C297 +
                 C50866 * C311) *
                    C118 +
                (C17238 * C127 + C17233 * C140 + C17239 * C310 +
                 C50866 * C327) *
                    C50830) *
                   C17235 +
               ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) *
                   C17236 +
               C17297 * C17237) *
                  C50734 * C1145 -
              (C17849 * C17237 +
               ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) *
                   C17236 +
               ((C17239 * C313 + C50866 * C328 + C17238 * C310 +
                 C17233 * C327) *
                    C50830 +
                (C17239 * C298 + C50866 * C312 + C17238 * C297 +
                 C17233 * C311) *
                    C118) *
                   C17235) *
                  C50734 * C1146 +
              (((C17238 * C298 + C17233 * C312 + C17239 * C1153 +
                 C50866 * C1161) *
                    C118 +
                (C17238 * C313 + C17233 * C328 + C17239 * C1160 +
                 C50866 * C1165) *
                    C50830) *
                   C17235 +
               ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) *
                   C17236 +
               ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) *
                   C17237) *
                  C50734 * C1147 -
              (((C17239 * C2553 + C50866 * C2557 + C17238 * C1156 +
                 C17233 * C1163) *
                    C50830 +
                (C17239 * C2548 + C50866 * C2554 + C17238 * C1151 +
                 C17233 * C1157) *
                    C118) *
                   C17237 +
               ((C17239 * C2552 + C50866 * C2556 + C17238 * C1158 +
                 C17233 * C1164) *
                    C50830 +
                (C17239 * C2547 + C50866 * C2551 + C17238 * C1152 +
                 C17233 * C1159) *
                    C118) *
                   C17236 +
               ((C17239 * C2550 + C50866 * C2555 + C17238 * C1160 +
                 C17233 * C1165) *
                    C50830 +
                (C17239 * C2546 + C50866 * C2549 + C17238 * C1153 +
                 C17233 * C1161) *
                    C118) *
                   C17235) *
                  C50734 * C1148) *
             C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C480 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C481 +
           (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                 C118 +
             (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                 C50830) *
                C17235 +
            ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
            ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
               C482) *
              C1074 +
          ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 + C50866 * C1622) *
                 C118 +
             (C17238 * C938 + C17233 * C947 + C17239 * C1621 + C50866 * C1626) *
                 C50830) *
                C17235 +
            ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
            ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
               C481 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C480 -
           (((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
              C17233 * C1277) *
                 C50830 +
             (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
              C17233 * C1271) *
                 C118) *
                C17237 +
            ((C17239 * C2746 + C50866 * C2750 + C17238 * C1272 +
              C17233 * C1278) *
                 C50830 +
             (C17239 * C2741 + C50866 * C2745 + C17238 * C1266 +
              C17233 * C1273) *
                 C118) *
                C17236 +
            ((C17239 * C2744 + C50866 * C2749 + C17238 * C1274 +
              C17233 * C1279) *
                 C50830 +
             (C17239 * C2740 + C50866 * C2743 + C17238 * C1267 +
              C17233 * C1275) *
                 C118) *
                C17235) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C1074 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C50770 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C1074) *
              C1077 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C50734 * C1074 -
           ((C20056 * C2553 + C20051 * C2557 + C20055 * C1156 + C20050 * C1163 +
             C20054 * C317 + C20049 * C330 + C20053 * C306 + C20048 * C325) *
                C50830 +
            (C20056 * C2548 + C20051 * C2554 + C20055 * C1151 + C20050 * C1157 +
             C20054 * C300 + C20049 * C316 + C20053 * C295 + C20048 * C307) *
                C118) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C50734 * C1145 -
          ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
            C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
               C50830 +
           (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
            C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
               C118) *
              C50673 * C50734 * C1146 +
          ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
            C20055 * C2546 + C20050 * C2549 + C20056 * C3585 + C20051 * C3589) *
               C118 +
           (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
            C20055 * C2550 + C20050 * C2555 + C20056 * C3588 + C20051 * C3591) *
               C50830) *
              C50673 * C50734 * C1147 -
          ((C20056 * C20744 + C20051 * C20746 + C20055 * C3588 +
            C20050 * C3591 + C20054 * C2550 + C20049 * C2555 + C20053 * C1160 +
            C20048 * C1165) *
               C50830 +
           (C20056 * C20743 + C20051 * C20745 + C20055 * C3585 +
            C20050 * C3589 + C20054 * C2546 + C20049 * C2549 + C20053 * C1153 +
            C20048 * C1161) *
               C118) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C480 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C481 +
           ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
             C20055 * C2740 + C20050 * C2743 + C20056 * C3739 +
             C20051 * C3743) *
                C118 +
            (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
             C20055 * C2744 + C20050 * C2749 + C20056 * C3742 +
             C20051 * C3745) *
                C50830) *
               C50673 * C482) *
              C1074 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C481 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C480 -
           ((C20056 * C20846 + C20051 * C20848 + C20055 * C3742 +
             C20050 * C3745 + C20054 * C2744 + C20049 * C2749 + C20053 * C1274 +
             C20048 * C1279) *
                C50830 +
            (C20056 * C20845 + C20051 * C20847 + C20055 * C3739 +
             C20050 * C3743 + C20054 * C2740 + C20049 * C2743 + C20053 * C1267 +
             C20048 * C1275) *
                C118) *
               C50673 * C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C50734 * C1074 -
           ((C22731 + C22730) * C5232 + (C22729 + C22728) * C5235 +
            (C22727 + C22726) * C5231 + (C22725 + C22724) * C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C17484 + C17483) * C5233 + (C17482 + C17481) * C5230 +
            (C18223 + C18224) * C5234 + (C18225 + C18226) * C5231 +
            (C22732 + C22733) * C5235 + (C22734 + C22735) * C5232) *
               C50673 * C50734 * C50770 -
           (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
            (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
            (C17274 + C17273) * C5233) *
               C50673 * C50734 * C1074) *
              C1077 +
          ((C17289 * C5233 + C17290 * C5230 + (C17674 + C17673) * C5234 +
            (C17672 + C17671) * C5231 + (C17683 + C17684) * C5235 +
            (C17685 + C17686) * C5232) *
               C50673 * C50734 * C1074 -
           ((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
             C17233 * C1277) *
                C5232 +
            (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
             C17233 * C1271) *
                C5235 +
            (C18230 + C18229) * C5231 + (C18228 + C18227) * C5234 +
            C17833 * C5230 + C17834 * C5233) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
               C5233 +
           (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
               C5230 +
           (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
           C22212 * C5235 + C22213 * C5232) *
              C50673 * C50734 * C1145 -
          ((C22731 + C22730) * C5232 + (C22729 + C22728) * C5235 +
           (C22727 + C22726) * C5231 + (C22725 + C22724) * C5234 +
           (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
               C5230 +
           (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
               C5233) *
              C50673 * C50734 * C1146 +
          ((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
               C5233 +
           (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
               C5230 +
           (C17238 * C1614 + C17233 * C1622 + C17239 * C3310 + C50866 * C3313) *
               C5234 +
           (C17238 * C1621 + C17233 * C1626 + C17239 * C3314 + C50866 * C3319) *
               C5231 +
           (C17238 * C2740 + C17233 * C2743 + C17239 * C3739 + C50866 * C3743) *
               C5235 +
           (C17238 * C2744 + C17233 * C2749 + C17239 * C3742 + C50866 * C3745) *
               C5232) *
              C50673 * C50734 * C1147 -
          ((C17239 * C20846 + C50866 * C20848 + C17238 * C3742 +
            C17233 * C3745) *
               C5232 +
           (C17239 * C20845 + C50866 * C20847 + C17238 * C3739 +
            C17233 * C3743) *
               C5235 +
           (C17239 * C4236 + C50866 * C4239 + C17238 * C3314 + C17233 * C3319) *
               C5231 +
           (C17239 * C4233 + C50866 * C4237 + C17238 * C3310 + C17233 * C3313) *
               C5234 +
           (C17239 * C2550 + C50866 * C2555 + C17238 * C1160 + C17233 * C1165) *
               C5230 +
           (C17239 * C2546 + C50866 * C2549 + C17238 * C1153 + C17233 * C1161) *
               C5233) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C480 -
           ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
            (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
            (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
               C50673 * C481 +
           (C22212 * C5233 + C22213 * C5230 + (C22207 + C22206) * C5234 +
            (C22205 + C22204) * C5231 +
            (C17238 * C5576 + C17233 * C5579 + C17239 * C6559 +
             C50866 * C6563) *
                C5235 +
            (C17238 * C5580 + C17233 * C5585 + C17239 * C6562 +
             C50866 * C6565) *
                C5232) *
               C50673 * C482) *
              C1074 +
          (((C22724 + C22725) * C5233 + (C22726 + C22727) * C5230 +
            (C22728 + C22729) * C5234 + (C22730 + C22731) * C5231 +
            (C23140 + C23141) * C5235 + (C23142 + C23143) * C5232) *
               C50673 * C481 -
           (C23138 * C5232 + C23139 * C5235 + (C22727 + C22726) * C5231 +
            (C22725 + C22724) * C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C480 -
           ((C17239 * C23126 + C50866 * C23128 + C17238 * C6562 +
             C17233 * C6565) *
                C5232 +
            (C17239 * C23125 + C50866 * C23127 + C17238 * C6559 +
             C17233 * C6563) *
                C5235 +
            (C23143 + C23142) * C5231 + (C23141 + C23140) * C5234 +
            C23138 * C5230 + C23139 * C5233) *
               C50673 * C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
              C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                 C118 +
             (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
              C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                 C50830) *
                C50673 * C50960 -
            ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 +
              C20050 * C1626 + C20054 * C938 + C20049 * C947 + C20053 * C499 +
              C20048 * C516) *
                 C50830 +
             (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 +
              C20050 * C1622 + C20054 * C932 + C20049 * C937 + C20053 * C486 +
              C20048 * C500) *
                 C118) *
                C50673 * C50798) *
               C1074 +
           (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
              C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
              C20051 * C4237) *
                 C118 +
             (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
              C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
              C20051 * C4239) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 +
              C20050 * C1165 + C20054 * C313 + C20049 * C328 + C20053 * C310 +
              C20048 * C327) *
                 C50830 +
             (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 +
              C20050 * C1161 + C20054 * C298 + C20049 * C312 + C20053 * C297 +
              C20048 * C311) *
                 C118) *
                C50673 * C50960) *
               C50770) *
              C50951 +
          ((((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
              C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
              C20051 * C3315) *
                 C118 +
             (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
              C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
              C20051 * C3320) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
              C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                 C50830 +
             (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
              C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                 C118) *
                C50673 * C50960) *
               C1074 +
           (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
              C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
              C20051 * C2551) *
                 C118 +
             (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
              C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
              C20051 * C2556) *
                 C50830) *
                C50673 * C50960 -
            ((C20056 * C4234 + C20051 * C4238 + C20055 * C3316 +
              C20050 * C3320 + C20054 * C1619 + C20049 * C1625 + C20053 * C940 +
              C20048 * C948) *
                 C50830 +
             (C20056 * C4232 + C20051 * C4235 + C20055 * C3311 +
              C20050 * C3315 + C20054 * C1613 + C20049 * C1620 + C20053 * C933 +
              C20048 * C939) *
                 C118) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                  C118 +
              (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                  C50830) *
                 C17235 +
             ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
             C17297 * C17237) *
                C50960 -
            (C18012 * C17237 +
             ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
             ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                  C50830 +
              (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                  C118) *
                 C17235) *
                C50798) *
               C1074 +
           ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 +
               C50866 * C1622) *
                  C118 +
              (C17238 * C938 + C17233 * C947 + C17239 * C1621 +
               C50866 * C1626) *
                  C50830) *
                 C17235 +
             ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
             ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
                C50798 -
            (C17849 * C17237 +
             ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
             ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                  C50830 +
              (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                  C118) *
                 C17235) *
                C50960) *
               C50770) *
              C50951 +
          (((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
             ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
             ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
                C50798 -
            (C17298 * C17237 +
             ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
             ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
                C50960) *
               C1074 +
           ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
             ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
             ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
                C50960 -
            (((C17239 * C1615 + C50866 * C1623 + C17238 * C944 +
               C17233 * C950) *
                  C50830 +
              (C17239 * C1611 + C50866 * C1616 + C17238 * C935 +
               C17233 * C943) *
                  C118) *
                 C17237 +
             ((C18230 + C18229) * C50830 + (C18228 + C18227) * C118) * C17236 +
             ((C18226 + C18225) * C50830 + (C18224 + C18223) * C118) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C5233 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C5230 +
             (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
             C22212 * C5235 + C22213 * C5232) *
                C50673 * C50960 -
            ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
             (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
             (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
                C50673 * C50798) *
               C1074 +
           (((C22724 + C22725) * C5233 + (C22726 + C22727) * C5230 +
             (C22728 + C22729) * C5234 + (C22730 + C22731) * C5231 +
             (C23140 + C23141) * C5235 + (C23142 + C23143) * C5232) *
                C50673 * C50798 -
            (C23138 * C5232 + C23139 * C5235 + (C22727 + C22726) * C5231 +
             (C22725 + C22724) * C5234 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C5230 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C5233) *
                C50673 * C50960) *
               C50770) *
              C50951 +
          ((((C17678 + C17677) * C5233 + (C17676 + C17675) * C5230 +
             (C17679 + C17680) * C5234 + (C17681 + C17682) * C5231 +
             (C22208 + C22209) * C5235 + (C22210 + C22211) * C5232) *
                C50673 * C50798 -
            (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
             (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
             (C17274 + C17273) * C5233) *
                C50673 * C50960) *
               C1074 +
           (((C17484 + C17483) * C5233 + (C17482 + C17481) * C5230 +
             (C18223 + C18224) * C5234 + (C18225 + C18226) * C5231 +
             (C22732 + C22733) * C5235 + (C22734 + C22735) * C5232) *
                C50673 * C50960 -
            ((C17239 * C4634 + C50866 * C4642 + C17238 * C4635 +
              C17233 * C4643) *
                 C5232 +
             (C17239 * C4630 + C50866 * C4636 + C17238 * C4631 +
              C17233 * C4637) *
                 C5235 +
             (C22735 + C22734) * C5231 + (C22733 + C22732) * C5234 +
             (C18226 + C18225) * C5230 + (C18224 + C18223) * C5233) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C118 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50830) *
               C17235 +
           ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
           C17297 * C17237) *
              C50734 * C1145 -
          (C17849 * C17237 +
           ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
           ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C50830 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C118) *
               C17235) *
              C50734 * C1146 +
          (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C118 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C50830) *
               C17235 +
           ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
           ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
              C50734 * C1147 -
          (((C17239 * C2553 + C50866 * C2557 + C17238 * C1156 +
             C17233 * C1163) *
                C50830 +
            (C17239 * C2548 + C50866 * C2554 + C17238 * C1151 +
             C17233 * C1157) *
                C118) *
               C17237 +
           ((C17239 * C2552 + C50866 * C2556 + C17238 * C1158 +
             C17233 * C1164) *
                C50830 +
            (C17239 * C2547 + C50866 * C2551 + C17238 * C1152 +
             C17233 * C1159) *
                C118) *
               C17236 +
           ((C17239 * C2550 + C50866 * C2555 + C17238 * C1160 +
             C17233 * C1165) *
                C50830 +
            (C17239 * C2546 + C50866 * C2549 + C17238 * C1153 +
             C17233 * C1161) *
                C118) *
               C17235) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C1074 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C50770) *
              C1076 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
               C50734 * C50770 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C1074) *
              C1077 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C50734 * C1074 -
           (((C17239 * C322 + C50866 * C333 + C17238 * C321 + C17233 * C332) *
                 C50830 +
             (C17239 * C303 + C50866 * C323 + C17238 * C302 + C17233 * C320) *
                 C118) *
                C17237 +
            ((C17848 + C17847) * C50830 + (C17846 + C17845) * C118) * C17236 +
            C17849 * C17235) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C1074 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C50770 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C1074) *
              C1077 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C50734 * C1074 -
           ((C20056 * C2553 + C20051 * C2557 + C20055 * C1156 + C20050 * C1163 +
             C20054 * C317 + C20049 * C330 + C20053 * C306 + C20048 * C325) *
                C50830 +
            (C20056 * C2548 + C20051 * C2554 + C20055 * C1151 + C20050 * C1157 +
             C20054 * C300 + C20049 * C316 + C20053 * C295 + C20048 * C307) *
                C118) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C50734 * C1145 -
          ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
            C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
               C50830 +
           (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
            C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
               C118) *
              C50673 * C50734 * C1146 +
          ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
            C20055 * C2546 + C20050 * C2549 + C20056 * C3585 + C20051 * C3589) *
               C118 +
           (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
            C20055 * C2550 + C20050 * C2555 + C20056 * C3588 + C20051 * C3591) *
               C50830) *
              C50673 * C50734 * C1147 -
          ((C20056 * C20744 + C20051 * C20746 + C20055 * C3588 +
            C20050 * C3591 + C20054 * C2550 + C20049 * C2555 + C20053 * C1160 +
            C20048 * C1165) *
               C50830 +
           (C20056 * C20743 + C20051 * C20745 + C20055 * C3585 +
            C20050 * C3589 + C20054 * C2546 + C20049 * C2549 + C20053 * C1153 +
            C20048 * C1161) *
               C118) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C50734 * C1074 -
           ((C22731 + C22730) * C5232 + (C22729 + C22728) * C5235 +
            (C22727 + C22726) * C5231 + (C22725 + C22724) * C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C17484 + C17483) * C5233 + (C17482 + C17481) * C5230 +
            (C18223 + C18224) * C5234 + (C18225 + C18226) * C5231 +
            (C22732 + C22733) * C5235 + (C22734 + C22735) * C5232) *
               C50673 * C50734 * C50770 -
           (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
            (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
            (C17274 + C17273) * C5233) *
               C50673 * C50734 * C1074) *
              C1077 +
          ((C17289 * C5233 + C17290 * C5230 + (C17674 + C17673) * C5234 +
            (C17672 + C17671) * C5231 + (C17683 + C17684) * C5235 +
            (C17685 + C17686) * C5232) *
               C50673 * C50734 * C1074 -
           ((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
             C17233 * C1277) *
                C5232 +
            (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
             C17233 * C1271) *
                C5235 +
            (C18230 + C18229) * C5231 + (C18228 + C18227) * C5234 +
            C17833 * C5230 + C17834 * C5233) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
               C5233 +
           (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
               C5230 +
           (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
           C22212 * C5235 + C22213 * C5232) *
              C50673 * C50734 * C1145 -
          ((C22731 + C22730) * C5232 + (C22729 + C22728) * C5235 +
           (C22727 + C22726) * C5231 + (C22725 + C22724) * C5234 +
           (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
               C5230 +
           (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
               C5233) *
              C50673 * C50734 * C1146 +
          ((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
               C5233 +
           (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
               C5230 +
           (C17238 * C1614 + C17233 * C1622 + C17239 * C3310 + C50866 * C3313) *
               C5234 +
           (C17238 * C1621 + C17233 * C1626 + C17239 * C3314 + C50866 * C3319) *
               C5231 +
           (C17238 * C2740 + C17233 * C2743 + C17239 * C3739 + C50866 * C3743) *
               C5235 +
           (C17238 * C2744 + C17233 * C2749 + C17239 * C3742 + C50866 * C3745) *
               C5232) *
              C50673 * C50734 * C1147 -
          ((C17239 * C20846 + C50866 * C20848 + C17238 * C3742 +
            C17233 * C3745) *
               C5232 +
           (C17239 * C20845 + C50866 * C20847 + C17238 * C3739 +
            C17233 * C3743) *
               C5235 +
           (C17239 * C4236 + C50866 * C4239 + C17238 * C3314 + C17233 * C3319) *
               C5231 +
           (C17239 * C4233 + C50866 * C4237 + C17238 * C3310 + C17233 * C3313) *
               C5234 +
           (C17239 * C2550 + C50866 * C2555 + C17238 * C1160 + C17233 * C1165) *
               C5230 +
           (C17239 * C2546 + C50866 * C2549 + C17238 * C1153 + C17233 * C1161) *
               C5233) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
              C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                 C118 +
             (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
              C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                 C50830) *
                C50673 * C1725 -
            ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 +
              C20050 * C1626 + C20054 * C938 + C20049 * C947 + C20053 * C499 +
              C20048 * C516) *
                 C50830 +
             (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 +
              C20050 * C1622 + C20054 * C932 + C20049 * C937 + C20053 * C486 +
              C20048 * C500) *
                 C118) *
                C50673 * C50798) *
               C50959 +
           (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
              C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
              C20051 * C4237) *
                 C118 +
             (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
              C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
              C20051 * C4239) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 +
              C20050 * C1165 + C20054 * C313 + C20049 * C328 + C20053 * C310 +
              C20048 * C327) *
                 C50830 +
             (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 +
              C20050 * C1161 + C20054 * C298 + C20049 * C312 + C20053 * C297 +
              C20048 * C311) *
                 C118) *
                C50673 * C1725) *
               C50770) *
              C50951 +
          ((((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
              C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
              C20051 * C3315) *
                 C118 +
             (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
              C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
              C20051 * C3320) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
              C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                 C50830 +
             (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
              C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                 C118) *
                C50673 * C1725) *
               C50959 +
           (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
              C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
              C20051 * C2551) *
                 C118 +
             (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
              C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
              C20051 * C2556) *
                 C50830) *
                C50673 * C1725 -
            ((C20056 * C4234 + C20051 * C4238 + C20055 * C3316 +
              C20050 * C3320 + C20054 * C1619 + C20049 * C1625 + C20053 * C940 +
              C20048 * C948) *
                 C50830 +
             (C20056 * C4232 + C20051 * C4235 + C20055 * C3311 +
              C20050 * C3315 + C20054 * C1613 + C20049 * C1620 + C20053 * C933 +
              C20048 * C939) *
                 C118) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                  C118 +
              (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                  C50830) *
                 C17235 +
             ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
             C17297 * C17237) *
                C1725 -
            (C18012 * C17237 +
             ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
             ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                  C50830 +
              (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                  C118) *
                 C17235) *
                C50798) *
               C50959 +
           ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 +
               C50866 * C1622) *
                  C118 +
              (C17238 * C938 + C17233 * C947 + C17239 * C1621 +
               C50866 * C1626) *
                  C50830) *
                 C17235 +
             ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
             ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
                C50798 -
            (C17849 * C17237 +
             ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
             ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                  C50830 +
              (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                  C118) *
                 C17235) *
                C1725) *
               C50770) *
              C50951 +
          (((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
             ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
             ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
                C50798 -
            (C17298 * C17237 +
             ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
             ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
                C1725) *
               C50959 +
           ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
             ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
             ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
                C1725 -
            (((C17239 * C1615 + C50866 * C1623 + C17238 * C944 +
               C17233 * C950) *
                  C50830 +
              (C17239 * C1611 + C50866 * C1616 + C17238 * C935 +
               C17233 * C943) *
                  C118) *
                 C17237 +
             ((C18230 + C18229) * C50830 + (C18228 + C18227) * C118) * C17236 +
             ((C18226 + C18225) * C50830 + (C18224 + C18223) * C118) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C5233 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C5230 +
             (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
             C22212 * C5235 + C22213 * C5232) *
                C50673 * C1725 -
            (C24048 * C5232 + C24049 * C5235 + (C22203 + C22202) * C5231 +
             (C22201 + C22200) * C5234 + (C22199 + C22198) * C5230 +
             (C22197 + C22196) * C5233) *
                C50673 * C50798) *
               C50959 +
           (((C22724 + C22725) * C5233 + (C22726 + C22727) * C5230 +
             (C22728 + C22729) * C5234 + (C22730 + C22731) * C5231 +
             (C23140 + C23141) * C5235 + (C23142 + C23143) * C5232) *
                C50673 * C50798 -
            (C23138 * C5232 + C23139 * C5235 + (C22727 + C22726) * C5231 +
             (C22725 + C22724) * C5234 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C5230 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C5233) *
                C50673 * C1725) *
               C50770) *
              C50951 +
          ((((C17678 + C17677) * C5233 + (C17676 + C17675) * C5230 +
             (C17679 + C17680) * C5234 + (C17681 + C17682) * C5231 +
             (C22208 + C22209) * C5235 + (C22210 + C22211) * C5232) *
                C50673 * C50798 -
            (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
             (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
             (C17274 + C17273) * C5233) *
                C50673 * C1725) *
               C50959 +
           (((C17484 + C17483) * C5233 + (C17482 + C17481) * C5230 +
             (C18223 + C18224) * C5234 + (C18225 + C18226) * C5231 +
             (C22732 + C22733) * C5235 + (C22734 + C22735) * C5232) *
                C50673 * C1725 -
            ((C17239 * C4634 + C50866 * C4642 + C17238 * C4635 +
              C17233 * C4643) *
                 C5232 +
             (C17239 * C4630 + C50866 * C4636 + C17238 * C4631 +
              C17233 * C4637) *
                 C5235 +
             (C22735 + C22734) * C5231 + (C22733 + C22732) * C5234 +
             (C18226 + C18225) * C5230 + (C18224 + C18223) * C5233) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C51006 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C51007 +
           ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
             C20055 * C2740 + C20050 * C2743 + C20056 * C3739 +
             C20051 * C3743) *
                C118 +
            (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
             C20055 * C2744 + C20050 * C2749 + C20056 * C3742 +
             C20051 * C3745) *
                C50830) *
               C50673 * C2141) *
              C50959 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C51007 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C51006 -
           ((C20056 * C20846 + C20051 * C20848 + C20055 * C3742 +
             C20050 * C3745 + C20054 * C2744 + C20049 * C2749 + C20053 * C1274 +
             C20048 * C1279) *
                C50830 +
            (C20056 * C20845 + C20051 * C20847 + C20055 * C3739 +
             C20050 * C3743 + C20054 * C2740 + C20049 * C2743 + C20053 * C1267 +
             C20048 * C1275) *
                C118) *
               C50673 * C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C51006 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C51007 +
           (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                 C118 +
             (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                 C50830) *
                C17235 +
            ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
            ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
               C2141) *
              C50959 +
          ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 + C50866 * C1622) *
                 C118 +
             (C17238 * C938 + C17233 * C947 + C17239 * C1621 + C50866 * C1626) *
                 C50830) *
                C17235 +
            ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
            ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
               C51007 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C51006 -
           (((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
              C17233 * C1277) *
                 C50830 +
             (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
              C17233 * C1271) *
                 C118) *
                C17237 +
            ((C17239 * C2746 + C50866 * C2750 + C17238 * C1272 +
              C17233 * C1278) *
                 C50830 +
             (C17239 * C2741 + C50866 * C2745 + C17238 * C1266 +
              C17233 * C1273) *
                 C118) *
                C17236 +
            ((C17239 * C2744 + C50866 * C2749 + C17238 * C1274 +
              C17233 * C1279) *
                 C50830 +
             (C17239 * C2740 + C50866 * C2743 + C17238 * C1267 +
              C17233 * C1275) *
                 C118) *
                C17235) *
               C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C51006 -
           (C24048 * C5232 + C24049 * C5235 + (C22203 + C22202) * C5231 +
            (C22201 + C22200) * C5234 + (C22199 + C22198) * C5230 +
            (C22197 + C22196) * C5233) *
               C50673 * C51007 +
           (C22212 * C5233 + C22213 * C5230 + (C22207 + C22206) * C5234 +
            (C22205 + C22204) * C5231 + (C24058 + C24059) * C5235 +
            (C24060 + C24061) * C5232) *
               C50673 * C2141) *
              C50959 +
          (((C22724 + C22725) * C5233 + (C22726 + C22727) * C5230 +
            (C22728 + C22729) * C5234 + (C22730 + C22731) * C5231 +
            (C23140 + C23141) * C5235 + (C23142 + C23143) * C5232) *
               C50673 * C51007 -
           (C23138 * C5232 + C23139 * C5235 + (C22727 + C22726) * C5231 +
            (C22725 + C22724) * C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C51006 -
           ((C17239 * C23126 + C50866 * C23128 + C17238 * C6562 +
             C17233 * C6565) *
                C5232 +
            (C17239 * C23125 + C50866 * C23127 + C17238 * C6559 +
             C17233 * C6563) *
                C5235 +
            (C23143 + C23142) * C5231 + (C23141 + C23140) * C5234 +
            C23138 * C5230 + C23139 * C5233) *
               C50673 * C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C17238 * C119 + C17233 * C126 + C17239 * C297 +
                  C50866 * C311) *
                     C118 +
                 (C17238 * C127 + C17233 * C140 + C17239 * C310 +
                  C50866 * C327) *
                     C50830) *
                    C17235 +
                ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) *
                    C17236 +
                C17297 * C17237) *
                   C1725 -
               (C18012 * C17237 +
                ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) *
                    C17236 +
                ((C17239 * C938 + C50866 * C947 + C17238 * C499 +
                  C17233 * C516) *
                     C50830 +
                 (C17239 * C932 + C50866 * C937 + C17238 * C486 +
                  C17233 * C500) *
                     C118) *
                    C17235) *
                   C50798) *
                  C50718 * C1076 +
              ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) *
                    C17235 +
                ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) *
                    C17236 +
                ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) *
                    C17237) *
                   C50798 -
               (C17298 * C17237 +
                ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) *
                    C17236 +
                ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) *
                    C17235) *
                   C1725) *
                  C50718 * C1077 +
              ((C17297 * C17235 +
                ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) *
                    C17236 +
                ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) *
                    C17237) *
                   C1725 -
               (((C17239 * C945 + C50866 * C951 + C17238 * C510 +
                  C17233 * C521) *
                     C50830 +
                 (C17239 * C936 + C50866 * C946 + C17238 * C491 +
                  C17233 * C509) *
                     C118) *
                    C17237 +
                ((C18011 + C18010) * C50830 + (C18009 + C18008) * C118) *
                    C17236 +
                C18012 * C17235) *
                   C50798) *
                  C50718 * C1078) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C17238 * C119 + C17233 * C126 + C17239 * C297 +
                  C50866 * C311) *
                     C118 +
                 (C17238 * C127 + C17233 * C140 + C17239 * C310 +
                  C50866 * C327) *
                     C50830) *
                    C17235 +
                ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) *
                    C17236 +
                C17297 * C17237) *
                   C1725 -
               (C18012 * C17237 +
                ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) *
                    C17236 +
                ((C17239 * C938 + C50866 * C947 + C17238 * C499 +
                  C17233 * C516) *
                     C50830 +
                 (C17239 * C932 + C50866 * C937 + C17238 * C486 +
                  C17233 * C500) *
                     C118) *
                    C17235) *
                   C50798) *
                  C289 +
              ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 +
                  C50866 * C1622) *
                     C118 +
                 (C17238 * C938 + C17233 * C947 + C17239 * C1621 +
                  C50866 * C1626) *
                     C50830) *
                    C17235 +
                ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) *
                    C17236 +
                ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) *
                    C17237) *
                   C50798 -
               (C17849 * C17237 +
                ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) *
                    C17236 +
                ((C17239 * C313 + C50866 * C328 + C17238 * C310 +
                  C17233 * C327) *
                     C50830 +
                 (C17239 * C298 + C50866 * C312 + C17238 * C297 +
                  C17233 * C311) *
                     C118) *
                    C17235) *
                   C1725) *
                  C290 +
              ((((C17238 * C298 + C17233 * C312 + C17239 * C1153 +
                  C50866 * C1161) *
                     C118 +
                 (C17238 * C313 + C17233 * C328 + C17239 * C1160 +
                  C50866 * C1165) *
                     C50830) *
                    C17235 +
                ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) *
                    C17236 +
                ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) *
                    C17237) *
                   C1725 -
               (((C17239 * C3317 + C50866 * C3321 + C17238 * C1617 +
                  C17233 * C1624) *
                     C50830 +
                 (C17239 * C3312 + C50866 * C3318 + C17238 * C1612 +
                  C17233 * C1618) *
                     C118) *
                    C17237 +
                ((C17239 * C3316 + C50866 * C3320 + C17238 * C1619 +
                  C17233 * C1625) *
                     C50830 +
                 (C17239 * C3311 + C50866 * C3315 + C17238 * C1613 +
                  C17233 * C1620) *
                     C118) *
                    C17236 +
                ((C17239 * C3314 + C50866 * C3319 + C17238 * C1621 +
                  C17233 * C1626) *
                     C50830 +
                 (C17239 * C3310 + C50866 * C3313 + C17238 * C1614 +
                  C17233 * C1622) *
                     C118) *
                    C17235) *
                   C50798) *
                  C291) *
             C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C118 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50830) *
               C17235 +
           ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
           C17297 * C17237) *
              C1891 -
          (C18012 * C17237 +
           ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
           ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                C50830 +
            (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                C118) *
               C17235) *
              C1892 +
          (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                C118 +
            (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                C50830) *
               C17235 +
           ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
           ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
              C1893 -
          (((C17239 * C6141 + C50866 * C6143 + C17238 * C1901 +
             C17233 * C1908) *
                C50830 +
            (C17239 * C6140 + C50866 * C6142 + C17238 * C1896 +
             C17233 * C1902) *
                C118) *
               C17237 +
           ((C17239 * C4635 + C50866 * C4643 + C17238 * C1903 +
             C17233 * C1909) *
                C50830 +
            (C17239 * C4631 + C50866 * C4637 + C17238 * C1897 +
             C17233 * C1904) *
                C118) *
               C17236 +
           ((C17239 * C4639 + C50866 * C4645 + C17238 * C1905 +
             C17233 * C1910) *
                C50830 +
            (C17239 * C4633 + C50866 * C4641 + C17238 * C1898 +
             C17233 * C1906) *
                C118) *
               C17235) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C1725) *
              C50718 * C1077 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3317 + C20051 * C3321 + C20055 * C1617 + C20050 * C1624 +
             C20054 * C942 + C20049 * C949 + C20053 * C495 + C20048 * C514) *
                C50830 +
            (C20056 * C3312 + C20051 * C3318 + C20055 * C1612 + C20050 * C1618 +
             C20054 * C934 + C20049 * C941 + C20053 * C484 + C20048 * C496) *
                C118) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C289 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C1725) *
              C290 +
          (((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C21176 + C20051 * C21178 + C20055 * C4236 +
             C20050 * C4239 + C20054 * C3314 + C20049 * C3319 + C20053 * C1621 +
             C20048 * C1626) *
                C50830 +
            (C20056 * C21175 + C20051 * C21177 + C20055 * C4233 +
             C20050 * C4237 + C20054 * C3310 + C20049 * C3313 + C20053 * C1614 +
             C20048 * C1622) *
                C118) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C1891 -
          ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
            C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
               C50830 +
           (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
            C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
               C118) *
              C50673 * C1892 +
          ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
            C20055 * C2740 + C20050 * C2743 + C20056 * C3739 + C20051 * C3743) *
               C118 +
           (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
            C20055 * C2744 + C20050 * C2749 + C20056 * C3742 + C20051 * C3745) *
               C50830) *
              C50673 * C1893 -
          ((C20056 * C21442 + C20051 * C21444 + C20055 * C4638 +
            C20050 * C4644 + C20054 * C4639 + C20049 * C4645 + C20053 * C1905 +
            C20048 * C1910) *
               C50830 +
           (C20056 * C21441 + C20051 * C21443 + C20055 * C4632 +
            C20050 * C4640 + C20054 * C4633 + C20049 * C4641 + C20053 * C1898 +
            C20048 * C1906) *
               C118) *
              C50673 * C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C1725 -
           ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
            (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
            (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C17678 + C17677) * C5233 + (C17676 + C17675) * C5230 +
            (C17679 + C17680) * C5234 + (C17681 + C17682) * C5231 +
            (C22208 + C22209) * C5235 + (C22210 + C22211) * C5232) *
               C50673 * C50798 -
           (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
            (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
            (C17274 + C17273) * C5233) *
               C50673 * C1725) *
              C50718 * C1077 +
          ((C17289 * C5233 + C17290 * C5230 + (C17674 + C17673) * C5234 +
            (C17672 + C17671) * C5231 + (C17683 + C17684) * C5235 +
            (C17685 + C17686) * C5232) *
               C50673 * C1725 -
           ((C17239 * C6141 + C50866 * C6143 + C17238 * C1901 +
             C17233 * C1908) *
                C5232 +
            (C17239 * C6140 + C50866 * C6142 + C17238 * C1896 +
             C17233 * C1902) *
                C5235 +
            (C17686 + C17685) * C5231 + (C17684 + C17683) * C5234 +
            C17996 * C5230 + C17997 * C5233) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C1725 -
           ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
            (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
            (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
               C50673 * C50798) *
              C289 +
          (((C22724 + C22725) * C5233 + (C22726 + C22727) * C5230 +
            (C22728 + C22729) * C5234 + (C22730 + C22731) * C5231 +
            (C23140 + C23141) * C5235 + (C23142 + C23143) * C5232) *
               C50673 * C50798 -
           (C23138 * C5232 + C23139 * C5235 + (C22727 + C22726) * C5231 +
            (C22725 + C22724) * C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C1725) *
              C290 +
          (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C5233 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C5230 +
            (C23646 + C23647) * C5234 + (C23648 + C23649) * C5231 +
            (C23650 + C23651) * C5235 + (C23652 + C23653) * C5232) *
               C50673 * C1725 -
           ((C17239 * C21442 + C50866 * C21444 + C17238 * C4638 +
             C17233 * C4644) *
                C5232 +
            (C17239 * C21441 + C50866 * C21443 + C17238 * C4632 +
             C17233 * C4640) *
                C5235 +
            (C23653 + C23652) * C5231 + (C23651 + C23650) * C5234 +
            (C23649 + C23648) * C5230 + (C23647 + C23646) * C5233) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
               C5233 +
           (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
               C5230 +
           (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
           C22212 * C5235 + C22213 * C5232) *
              C50673 * C1891 -
          (C24048 * C5232 + C24049 * C5235 + (C22203 + C22202) * C5231 +
           (C22201 + C22200) * C5234 + (C22199 + C22198) * C5230 +
           (C22197 + C22196) * C5233) *
              C50673 * C1892 +
          (C22212 * C5233 + C22213 * C5230 + (C22207 + C22206) * C5234 +
           (C22205 + C22204) * C5231 + (C24058 + C24059) * C5235 +
           (C24060 + C24061) * C5232) *
              C50673 * C1893 -
          ((C17239 * C24044 + C50866 * C24046 + C17238 * C7464 +
            C17233 * C7467) *
               C5232 +
           (C17239 * C24043 + C50866 * C24045 + C17238 * C7461 +
            C17233 * C7465) *
               C5235 +
           (C24061 + C24060) * C5231 + (C24059 + C24058) * C5234 +
           C24048 * C5230 + C24049 * C5233) *
              C50673 * C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C51006 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C51007 +
           ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
             C20055 * C2740 + C20050 * C2743 + C20056 * C3739 +
             C20051 * C3743) *
                C118 +
            (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
             C20055 * C2744 + C20050 * C2749 + C20056 * C3742 +
             C20051 * C3745) *
                C50830) *
               C50673 * C2141) *
              C50718 * C50951 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C51007 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C51006 -
           ((C20056 * C3740 + C20051 * C3744 + C20055 * C2746 + C20050 * C2750 +
             C20054 * C1272 + C20049 * C1278 + C20053 * C504 + C20048 * C518) *
                C50830 +
            (C20056 * C3738 + C20051 * C3741 + C20055 * C2741 + C20050 * C2745 +
             C20054 * C1266 + C20049 * C1273 + C20053 * C488 + C20048 * C503) *
                C118) *
               C50673 * C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C51006 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C51007 +
           (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                 C118 +
             (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                 C50830) *
                C17235 +
            ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
            ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
               C2141) *
              C50718 * C50951 +
          ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
            ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
            ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
               C51007 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C51006 -
           (((C17239 * C1268 + C50866 * C1276 + C17238 * C508 + C17233 * C520) *
                 C50830 +
             (C17239 * C1264 + C50866 * C1269 + C17238 * C490 + C17233 * C507) *
                 C118) *
                C17237 +
            ((C17686 + C17685) * C50830 + (C17684 + C17683) * C118) * C17236 +
            ((C17682 + C17681) * C50830 + (C17680 + C17679) * C118) * C17235) *
               C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C51006 -
           (C24048 * C5232 + C24049 * C5235 + (C22203 + C22202) * C5231 +
            (C22201 + C22200) * C5234 + (C22199 + C22198) * C5230 +
            (C22197 + C22196) * C5233) *
               C50673 * C51007 +
           (C22212 * C5233 + C22213 * C5230 + (C22207 + C22206) * C5234 +
            (C22205 + C22204) * C5231 + (C24058 + C24059) * C5235 +
            (C24060 + C24061) * C5232) *
               C50673 * C2141) *
              C50718 * C50951 +
          (((C17678 + C17677) * C5233 + (C17676 + C17675) * C5230 +
            (C17679 + C17680) * C5234 + (C17681 + C17682) * C5231 +
            (C22208 + C22209) * C5235 + (C22210 + C22211) * C5232) *
               C50673 * C51007 -
           (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
            (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
            (C17274 + C17273) * C5233) *
               C50673 * C51006 -
           ((C17239 * C6560 + C50866 * C6564 + C17238 * C5582 +
             C17233 * C5586) *
                C5232 +
            (C17239 * C6558 + C50866 * C6561 + C17238 * C5577 +
             C17233 * C5581) *
                C5235 +
            (C22211 + C22210) * C5231 + (C22209 + C22208) * C5234 +
            C22194 * C5230 + C22195 * C5233) *
               C50673 * C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C1725 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C289 +
          ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 + C50866 * C1622) *
                 C118 +
             (C17238 * C938 + C17233 * C947 + C17239 * C1621 + C50866 * C1626) *
                 C50830) *
                C17235 +
            ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
            ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
               C50798 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C1725) *
              C290 +
          ((((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C1725 -
           (((C17239 * C3317 + C50866 * C3321 + C17238 * C1617 +
              C17233 * C1624) *
                 C50830 +
             (C17239 * C3312 + C50866 * C3318 + C17238 * C1612 +
              C17233 * C1618) *
                 C118) *
                C17237 +
            ((C17239 * C3316 + C50866 * C3320 + C17238 * C1619 +
              C17233 * C1625) *
                 C50830 +
             (C17239 * C3311 + C50866 * C3315 + C17238 * C1613 +
              C17233 * C1620) *
                 C118) *
                C17236 +
            ((C17239 * C3314 + C50866 * C3319 + C17238 * C1621 +
              C17233 * C1626) *
                 C50830 +
             (C17239 * C3310 + C50866 * C3313 + C17238 * C1614 +
              C17233 * C1622) *
                 C118) *
                C17235) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C1725 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C50718 * C1076 +
          ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
            ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
            ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
               C50798 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C1725) *
              C50718 * C1077 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C1725 -
           (((C17239 * C945 + C50866 * C951 + C17238 * C510 + C17233 * C521) *
                 C50830 +
             (C17239 * C936 + C50866 * C946 + C17238 * C491 + C17233 * C509) *
                 C118) *
                C17237 +
            ((C18011 + C18010) * C50830 + (C18009 + C18008) * C118) * C17236 +
            C18012 * C17235) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C1725) *
              C50718 * C1077 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3317 + C20051 * C3321 + C20055 * C1617 + C20050 * C1624 +
             C20054 * C942 + C20049 * C949 + C20053 * C495 + C20048 * C514) *
                C50830 +
            (C20056 * C3312 + C20051 * C3318 + C20055 * C1612 + C20050 * C1618 +
             C20054 * C934 + C20049 * C941 + C20053 * C484 + C20048 * C496) *
                C118) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C289 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C1725) *
              C290 +
          (((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C21176 + C20051 * C21178 + C20055 * C4236 +
             C20050 * C4239 + C20054 * C3314 + C20049 * C3319 + C20053 * C1621 +
             C20048 * C1626) *
                C50830 +
            (C20056 * C21175 + C20051 * C21177 + C20055 * C4233 +
             C20050 * C4237 + C20054 * C3310 + C20049 * C3313 + C20053 * C1614 +
             C20048 * C1622) *
                C118) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C1725 -
           ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
            (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
            (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C17678 + C17677) * C5233 + (C17676 + C17675) * C5230 +
            (C17679 + C17680) * C5234 + (C17681 + C17682) * C5231 +
            (C22208 + C22209) * C5235 + (C22210 + C22211) * C5232) *
               C50673 * C50798 -
           (C22194 * C5232 + C22195 * C5235 + (C17675 + C17676) * C5231 +
            (C17677 + C17678) * C5234 + (C17276 + C17275) * C5230 +
            (C17274 + C17273) * C5233) *
               C50673 * C1725) *
              C50718 * C1077 +
          ((C17289 * C5233 + C17290 * C5230 + (C17674 + C17673) * C5234 +
            (C17672 + C17671) * C5231 + (C17683 + C17684) * C5235 +
            (C17685 + C17686) * C5232) *
               C50673 * C1725 -
           ((C17239 * C6141 + C50866 * C6143 + C17238 * C1901 +
             C17233 * C1908) *
                C5232 +
            (C17239 * C6140 + C50866 * C6142 + C17238 * C1896 +
             C17233 * C1902) *
                C5235 +
            (C17686 + C17685) * C5231 + (C17684 + C17683) * C5234 +
            C17996 * C5230 + C17997 * C5233) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C5233 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C5230 +
            (C22196 + C22197) * C5234 + (C22198 + C22199) * C5231 +
            C22212 * C5235 + C22213 * C5232) *
               C50673 * C1725 -
           ((C22204 + C22205) * C5232 + (C22206 + C22207) * C5235 +
            (C22203 + C22202) * C5231 + (C22201 + C22200) * C5234 +
            (C22199 + C22198) * C5230 + (C22197 + C22196) * C5233) *
               C50673 * C50798) *
              C289 +
          (((C22724 + C22725) * C5233 + (C22726 + C22727) * C5230 +
            (C22728 + C22729) * C5234 + (C22730 + C22731) * C5231 +
            (C23140 + C23141) * C5235 + (C23142 + C23143) * C5232) *
               C50673 * C50798 -
           (C23138 * C5232 + C23139 * C5235 + (C22727 + C22726) * C5231 +
            (C22725 + C22724) * C5234 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C5230 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C5233) *
               C50673 * C1725) *
              C290 +
          (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C5233 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C5230 +
            (C23646 + C23647) * C5234 + (C23648 + C23649) * C5231 +
            (C23650 + C23651) * C5235 + (C23652 + C23653) * C5232) *
               C50673 * C1725 -
           ((C17239 * C21442 + C50866 * C21444 + C17238 * C4638 +
             C17233 * C4644) *
                C5232 +
            (C17239 * C21441 + C50866 * C21443 + C17238 * C4632 +
             C17233 * C4640) *
                C5235 +
            (C23653 + C23652) * C5231 + (C23651 + C23650) * C5234 +
            (C23649 + C23648) * C5230 + (C23647 + C23646) * C5233) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C50734 * C50959 -
           (((C18226 + C18225) * C50894 + (C18224 + C18223) * C10908 +
             (C17481 + C17482) * C50973 + (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C50734 * C50770) *
              C51002 +
          ((((C17484 + C17483) * C10907 + (C17482 + C17481) * C50973 +
             (C18223 + C18224) * C10908 + (C18225 + C18226) * C50894) *
                C50944 +
            ((C17480 + C17479) * C10907 + (C17478 + C17477) * C50973 +
             (C18227 + C18228) * C10908 + (C18229 + C18230) * C50894) *
                C50678) *
               C50734 * C50770 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
             (C17274 + C17273) * C10907) *
                C50944) *
               C50734 * C50959) *
              C51003 +
          (((C17289 * C10907 + C17290 * C50973 + (C17674 + C17673) * C10908 +
             (C17672 + C17671) * C50894) *
                C50944 +
            ((C17284 + C17283) * C10907 + (C17282 + C17281) * C50973 +
             (C18008 + C18009) * C10908 + (C18010 + C18011) * C50894) *
                C50678) *
               C50734 * C50959 -
           (((C17239 * C1615 + C50866 * C1623 + C17238 * C944 + C17233 * C950) *
                 C50894 +
             (C17239 * C1611 + C50866 * C1616 + C17238 * C935 + C17233 * C943) *
                 C10908 +
             (C17848 + C17847) * C50973 + (C17846 + C17845) * C10907) *
                C50678 +
            ((C18230 + C18229) * C50894 + (C18228 + C18227) * C10908 +
             C17833 * C50973 + C17834 * C10907) *
                C50944) *
               C50734 * C50770) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                  C10907 +
              (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                  C50973 +
              (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                 C50944 +
             ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
              C27894 * C10908 + C27895 * C50894) *
                 C50678) *
                C50960 -
            ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
              C27897 * C10907) *
                 C50678 +
             ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
              (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                 C50944) *
                C50798) *
               C50959 +
           ((((C22724 + C22725) * C10907 + (C22726 + C22727) * C50973 +
              (C22728 + C22729) * C10908 + (C22730 + C22731) * C50894) *
                 C50944 +
             (C28548 * C10907 + C28549 * C50973 + (C22732 + C22733) * C10908 +
              (C22734 + C22735) * C50894) *
                 C50678) *
                C50798 -
            ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
              (C17483 + C17484) * C10907) *
                 C50678 +
             ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
              (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                  C50973 +
              (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                  C10907) *
                 C50944) *
                C50960) *
               C50770) *
              C292 +
          ((((C27894 * C10907 + C27895 * C50973 + C27898 * C10908 +
              C27899 * C50894) *
                 C50944 +
             (C28288 * C10907 + C28289 * C50973 + (C17683 + C17684) * C10908 +
              (C17685 + C17686) * C50894) *
                 C50678) *
                C50798 -
            ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
              (C17278 + C17277) * C10907) *
                 C50678 +
             (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
              (C17274 + C17273) * C10907) *
                 C50944) *
                C50960) *
               C50959 +
           ((((C17484 + C17483) * C10907 + (C17482 + C17481) * C50973 +
              C28548 * C10908 + C28549 * C50894) *
                 C50944 +
             ((C17480 + C17479) * C10907 + (C17478 + C17477) * C50973 +
              (C18227 + C18228) * C10908 + (C18229 + C18230) * C50894) *
                 C50678) *
                C50960 -
            (((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
               C17233 * C1277) *
                  C50894 +
              (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
               C17233 * C1271) *
                  C10908 +
              (C18230 + C18229) * C50973 + (C18228 + C18227) * C10907) *
                 C50678 +
             ((C22735 + C22734) * C50894 + (C22733 + C22732) * C10908 +
              C28550 * C50973 + C28551 * C10907) *
                 C50944) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             (C17678 + C17677) * C10908 + (C17676 + C17675) * C50894) *
                C50678) *
               C50734 * C289 -
           (((C18226 + C18225) * C50894 + (C18224 + C18223) * C10908 +
             (C17481 + C17482) * C50973 + (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C50734 * C290 +
           (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C10907 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50973 +
             (C23646 + C23647) * C10908 + (C23648 + C23649) * C50894) *
                C50944 +
            ((C17485 + C17486) * C10907 + (C17487 + C17488) * C50973 +
             (C27696 + C27697) * C10908 + (C27698 + C27699) * C50894) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C17484 + C17483) * C10907 + (C17482 + C17481) * C50973 +
             (C18223 + C18224) * C10908 + (C18225 + C18226) * C50894) *
                C50944 +
            ((C17480 + C17479) * C10907 + (C17478 + C17477) * C50973 +
             (C18227 + C18228) * C10908 + (C18229 + C18230) * C50894) *
                C50678) *
               C50734 * C290 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            ((C17675 + C17676) * C50894 + (C17677 + C17678) * C10908 +
             (C17276 + C17275) * C50973 + (C17274 + C17273) * C10907) *
                C50944) *
               C50734 * C289 -
           (((C17239 * C3317 + C50866 * C3321 + C17238 * C1617 +
              C17233 * C1624) *
                 C50894 +
             (C17239 * C3312 + C50866 * C3318 + C17238 * C1612 +
              C17233 * C1618) *
                 C10908 +
             (C17492 + C17491) * C50973 + (C17490 + C17489) * C10907) *
                C50678 +
            ((C27699 + C27698) * C50894 + (C27697 + C27696) * C10908 +
             (C17488 + C17487) * C50973 + (C17486 + C17485) * C10907) *
                C50944) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C10907 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50973 +
            (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
               C50944 +
           ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
            (C17678 + C17677) * C10908 + (C17676 + C17675) * C50894) *
               C50678) *
              C50734 * C50718 * C113 -
          ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
            (C17278 + C17277) * C10907) *
               C50678 +
           ((C17675 + C17676) * C50894 + (C17677 + C17678) * C10908 +
            (C17276 + C17275) * C50973 + (C17274 + C17273) * C10907) *
               C50944) *
              C50734 * C50718 * C114 +
          ((C17289 * C10907 + C17290 * C50973 + (C17674 + C17673) * C10908 +
            (C17672 + C17671) * C50894) *
               C50944 +
           ((C17284 + C17283) * C10907 + (C17282 + C17281) * C50973 +
            (C18008 + C18009) * C10908 + (C18010 + C18011) * C50894) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C17239 * C945 + C50866 * C951 + C17238 * C510 + C17233 * C521) *
                C50894 +
            (C17239 * C936 + C50866 * C946 + C17238 * C491 + C17233 * C509) *
                C10908 +
            (C17288 + C17287) * C50973 + (C17286 + C17285) * C10907) *
               C50678 +
           ((C18011 + C18010) * C50894 + (C18009 + C18008) * C10908 +
            C17291 * C50973 + C17292 * C10907) *
               C50944) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C480 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C481 +
           ((C22212 * C10907 + C22213 * C50973 + (C22207 + C22206) * C10908 +
             (C22205 + C22204) * C50894) *
                C50944 +
            (C27898 * C10907 + C27899 * C50973 + (C22208 + C22209) * C10908 +
             (C22210 + C22211) * C50894) *
                C50678) *
               C482) *
              C50718 * C292 +
          (((C27894 * C10907 + C27895 * C50973 + C27898 * C10908 +
             C27899 * C50894) *
                C50944 +
            ((C17674 + C17673) * C10907 + (C17672 + C17671) * C50973 +
             (C17683 + C17684) * C10908 + (C17685 + C17686) * C50894) *
                C50678) *
               C481 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
             (C17274 + C17273) * C10907) *
                C50944) *
               C480 -
           (((C17239 * C6141 + C50866 * C6143 + C17238 * C1901 +
              C17233 * C1908) *
                 C50894 +
             (C17239 * C6140 + C50866 * C6142 + C17238 * C1896 +
              C17233 * C1902) *
                 C10908 +
             (C17686 + C17685) * C50973 + (C17684 + C17683) * C10907) *
                C50678 +
            ((C22211 + C22210) * C50894 + (C22209 + C22208) * C10908 +
             C22194 * C50973 + C22195 * C10907) *
                C50944) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C50960 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C50798) *
              C50718 * C51002 +
          (((C27894 * C10907 + C27895 * C50973 + C27898 * C10908 +
             C27899 * C50894) *
                C50944 +
            (C28288 * C10907 + C28289 * C50973 + (C17683 + C17684) * C10908 +
             (C17685 + C17686) * C50894) *
                C50678) *
               C50798 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
             (C17274 + C17273) * C10907) *
                C50944) *
               C50960) *
              C50718 * C51003 +
          (((C17289 * C10907 + C17290 * C50973 + C28288 * C10908 +
             C28289 * C50894) *
                C50944 +
            ((C17284 + C17283) * C10907 + (C17282 + C17281) * C50973 +
             (C18008 + C18009) * C10908 + (C18010 + C18011) * C50894) *
                C50678) *
               C50960 -
           (((C17239 * C1268 + C50866 * C1276 + C17238 * C508 + C17233 * C520) *
                 C50894 +
             (C17239 * C1264 + C50866 * C1269 + C17238 * C490 + C17233 * C507) *
                 C10908 +
             (C18011 + C18010) * C50973 + (C18009 + C18008) * C10907) *
                C50678 +
            ((C17686 + C17685) * C50894 + (C17684 + C17683) * C10908 +
             C17996 * C50973 + C17997 * C10907) *
                C50944) *
               C50798) *
              C50718 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C10907 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50973 +
            (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
               C50944 +
           ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
            (C17678 + C17677) * C10908 + (C17676 + C17675) * C50894) *
               C50678) *
              C50734 * C50718 * C113 -
          ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
            (C17278 + C17277) * C10907) *
               C50678 +
           ((C17675 + C17676) * C50894 + (C17677 + C17678) * C10908 +
            (C17276 + C17275) * C50973 + (C17274 + C17273) * C10907) *
               C50944) *
              C50734 * C50718 * C114 +
          ((C17289 * C10907 + C17290 * C50973 + (C17674 + C17673) * C10908 +
            (C17672 + C17671) * C50894) *
               C50944 +
           ((C17284 + C17283) * C10907 + (C17282 + C17281) * C50973 +
            (C18008 + C18009) * C10908 + (C18010 + C18011) * C50894) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C17239 * C945 + C50866 * C951 + C17238 * C510 + C17233 * C521) *
                C50894 +
            (C17239 * C936 + C50866 * C946 + C17238 * C491 + C17233 * C509) *
                C10908 +
            (C17288 + C17287) * C50973 + (C17286 + C17285) * C10907) *
               C50678 +
           ((C18011 + C18010) * C50894 + (C18009 + C18008) * C10908 +
            C17291 * C50973 + C17292 * C10907) *
               C50944) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             (C17678 + C17677) * C10908 + (C17676 + C17675) * C50894) *
                C50678) *
               C50734 * C289 -
           (((C18226 + C18225) * C50894 + (C18224 + C18223) * C10908 +
             (C17481 + C17482) * C50973 + (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C50734 * C290 +
           (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C10907 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50973 +
             (C23646 + C23647) * C10908 + (C23648 + C23649) * C50894) *
                C50944 +
            ((C17485 + C17486) * C10907 + (C17487 + C17488) * C50973 +
             (C27696 + C27697) * C10908 + (C27698 + C27699) * C50894) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C17484 + C17483) * C10907 + (C17482 + C17481) * C50973 +
             (C18223 + C18224) * C10908 + (C18225 + C18226) * C50894) *
                C50944 +
            ((C17480 + C17479) * C10907 + (C17478 + C17477) * C50973 +
             (C18227 + C18228) * C10908 + (C18229 + C18230) * C50894) *
                C50678) *
               C50734 * C290 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            ((C17675 + C17676) * C50894 + (C17677 + C17678) * C10908 +
             (C17276 + C17275) * C50973 + (C17274 + C17273) * C10907) *
                C50944) *
               C50734 * C289 -
           (((C17239 * C3317 + C50866 * C3321 + C17238 * C1617 +
              C17233 * C1624) *
                 C50894 +
             (C17239 * C3312 + C50866 * C3318 + C17238 * C1612 +
              C17233 * C1618) *
                 C10908 +
             (C17492 + C17491) * C50973 + (C17490 + C17489) * C10907) *
                C50678 +
            ((C27699 + C27698) * C50894 + (C27697 + C27696) * C10908 +
             (C17488 + C17487) * C50973 + (C17486 + C17485) * C10907) *
                C50944) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C50734 * C51004 -
           ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
             (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C50734 * C51005 +
           (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C10907 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50973 +
             (C23646 + C23647) * C10908 + (C23648 + C23649) * C50894) *
                C50944 +
            ((C17485 + C17486) * C10907 + (C17487 + C17488) * C50973 +
             (C27696 + C27697) * C10908 + (C27698 + C27699) * C50894) *
                C50678) *
               C50734 * C1380) *
              C50951 +
          ((((C17484 + C17483) * C10907 + (C17482 + C17481) * C50973 +
             C28548 * C10908 + C28549 * C50894) *
                C50944 +
            ((C17480 + C17479) * C10907 + (C17478 + C17477) * C50973 +
             (C18227 + C18228) * C10908 + (C18229 + C18230) * C50894) *
                C50678) *
               C50734 * C51005 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
             (C17274 + C17273) * C10907) *
                C50944) *
               C50734 * C51004 -
           (((C17239 * C3317 + C50866 * C3321 + C17238 * C1617 +
              C17233 * C1624) *
                 C50894 +
             (C17239 * C3312 + C50866 * C3318 + C17238 * C1612 +
              C17233 * C1618) *
                 C10908 +
             (C17492 + C17491) * C50973 + (C17490 + C17489) * C10907) *
                C50678 +
            ((C27699 + C27698) * C50894 + (C27697 + C27696) * C10908 +
             (C17488 + C17487) * C50973 + (C17486 + C17485) * C10907) *
                C50944) *
               C50734 * C1380) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C50960 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C50798) *
              C51004 +
          ((((C22724 + C22725) * C10907 + (C22726 + C22727) * C50973 +
             (C22728 + C22729) * C10908 + (C22730 + C22731) * C50894) *
                C50944 +
            (C28548 * C10907 + C28549 * C50973 + (C22732 + C22733) * C10908 +
             (C22734 + C22735) * C50894) *
                C50678) *
               C50798 -
           ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
             (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C50960) *
              C51005 +
          ((((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C10907 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50973 +
             (C23646 + C23647) * C10908 + (C23648 + C23649) * C50894) *
                C50944 +
            ((C17485 + C17486) * C10907 + (C17487 + C17488) * C50973 +
             (C27696 + C27697) * C10908 + (C27698 + C27699) * C50894) *
                C50678) *
               C50960 -
           (((C17239 * C3740 + C50866 * C3744 + C17238 * C2746 +
              C17233 * C2750) *
                 C50894 +
             (C17239 * C3738 + C50866 * C3741 + C17238 * C2741 +
              C17233 * C2745) *
                 C10908 +
             (C27699 + C27698) * C50973 + (C27697 + C27696) * C10907) *
                C50678 +
            ((C23653 + C23652) * C50894 + (C23651 + C23650) * C10908 +
             (C23649 + C23648) * C50973 + (C23647 + C23646) * C10907) *
                C50944) *
               C50798) *
              C1380) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C10907 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50973 +
            (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
               C50944 +
           ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
            C27894 * C10908 + C27895 * C50894) *
               C50678) *
              C50734 * C1145 -
          ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
            (C17483 + C17484) * C10907) *
               C50678 +
           ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C50973 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C10907) *
               C50944) *
              C50734 * C1146 +
          (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C10907 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C50973 +
            (C23646 + C23647) * C10908 + (C23648 + C23649) * C50894) *
               C50944 +
           ((C17485 + C17486) * C10907 + (C17487 + C17488) * C50973 +
            (C27696 + C27697) * C10908 + (C27698 + C27699) * C50894) *
               C50678) *
              C50734 * C1147 -
          (((C17239 * C4234 + C50866 * C4238 + C17238 * C3316 +
             C17233 * C3320) *
                C50894 +
            (C17239 * C4232 + C50866 * C4235 + C17238 * C3311 +
             C17233 * C3315) *
                C10908 +
            (C17239 * C2552 + C50866 * C2556 + C17238 * C1158 +
             C17233 * C1164) *
                C50973 +
            (C17239 * C2547 + C50866 * C2551 + C17238 * C1152 +
             C17233 * C1159) *
                C10907) *
               C50678 +
           ((C17239 * C4236 + C50866 * C4239 + C17238 * C3314 +
             C17233 * C3319) *
                C50894 +
            (C17239 * C4233 + C50866 * C4237 + C17238 * C3310 +
             C17233 * C3313) *
                C10908 +
            (C17239 * C2550 + C50866 * C2555 + C17238 * C1160 +
             C17233 * C1165) *
                C50973 +
            (C17239 * C2546 + C50866 * C2549 + C17238 * C1153 +
             C17233 * C1161) *
                C10907) *
               C50944) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C50734 * C1074 -
           ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
             (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C50734 * C50770) *
              C1076 +
          ((((C17484 + C17483) * C10907 + (C17482 + C17481) * C50973 +
             C28548 * C10908 + C28549 * C50894) *
                C50944 +
            ((C17480 + C17479) * C10907 + (C17478 + C17477) * C50973 +
             (C18227 + C18228) * C10908 + (C18229 + C18230) * C50894) *
                C50678) *
               C50734 * C50770 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
             (C17274 + C17273) * C10907) *
                C50944) *
               C50734 * C1074) *
              C1077 +
          (((C17289 * C10907 + C17290 * C50973 + C28288 * C10908 +
             C28289 * C50894) *
                C50944 +
            ((C17284 + C17283) * C10907 + (C17282 + C17281) * C50973 +
             (C18008 + C18009) * C10908 + (C18010 + C18011) * C50894) *
                C50678) *
               C50734 * C1074 -
           (((C17239 * C1615 + C50866 * C1623 + C17238 * C944 + C17233 * C950) *
                 C50894 +
             (C17239 * C1611 + C50866 * C1616 + C17238 * C935 + C17233 * C943) *
                 C10908 +
             (C17848 + C17847) * C50973 + (C17846 + C17845) * C10907) *
                C50678 +
            ((C18230 + C18229) * C50894 + (C18228 + C18227) * C10908 +
             C17833 * C50973 + C17834 * C10907) *
                C50944) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C480 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C481 +
           ((C22212 * C10907 + C22213 * C50973 + (C22207 + C22206) * C10908 +
             (C22205 + C22204) * C50894) *
                C50944 +
            (C27898 * C10907 + C27899 * C50973 + (C22208 + C22209) * C10908 +
             (C22210 + C22211) * C50894) *
                C50678) *
               C482) *
              C1074 +
          ((((C22724 + C22725) * C10907 + (C22726 + C22727) * C50973 +
             (C22728 + C22729) * C10908 + (C22730 + C22731) * C50894) *
                C50944 +
            (C28548 * C10907 + C28549 * C50973 + (C22732 + C22733) * C10908 +
             (C22734 + C22735) * C50894) *
                C50678) *
               C481 -
           ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
             (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C480 -
           (((C17239 * C4634 + C50866 * C4642 + C17238 * C4635 +
              C17233 * C4643) *
                 C50894 +
             (C17239 * C4630 + C50866 * C4636 + C17238 * C4631 +
              C17233 * C4637) *
                 C10908 +
             (C22735 + C22734) * C50973 + (C22733 + C22732) * C10907) *
                C50678 +
            ((C23143 + C23142) * C50894 + (C23141 + C23140) * C10908 +
             C23138 * C50973 + C23139 * C10907) *
                C50944) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                  C10907 +
              (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                  C50973 +
              (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                 C50944 +
             ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
              C27894 * C10908 + C27895 * C50894) *
                 C50678) *
                C50960 -
            ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
              C27897 * C10907) *
                 C50678 +
             ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
              (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                 C50944) *
                C50798) *
               C1074 +
           ((((C22724 + C22725) * C10907 + (C22726 + C22727) * C50973 +
              (C22728 + C22729) * C10908 + (C22730 + C22731) * C50894) *
                 C50944 +
             (C28548 * C10907 + C28549 * C50973 + (C22732 + C22733) * C10908 +
              (C22734 + C22735) * C50894) *
                 C50678) *
                C50798 -
            ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
              (C17483 + C17484) * C10907) *
                 C50678 +
             ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
              (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                  C50973 +
              (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                  C10907) *
                 C50944) *
                C50960) *
               C50770) *
              C50951 +
          ((((C27894 * C10907 + C27895 * C50973 + C27898 * C10908 +
              C27899 * C50894) *
                 C50944 +
             (C28288 * C10907 + C28289 * C50973 + (C17683 + C17684) * C10908 +
              (C17685 + C17686) * C50894) *
                 C50678) *
                C50798 -
            ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
              (C17278 + C17277) * C10907) *
                 C50678 +
             (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
              (C17274 + C17273) * C10907) *
                 C50944) *
                C50960) *
               C1074 +
           ((((C17484 + C17483) * C10907 + (C17482 + C17481) * C50973 +
              C28548 * C10908 + C28549 * C50894) *
                 C50944 +
             ((C17480 + C17479) * C10907 + (C17478 + C17477) * C50973 +
              (C18227 + C18228) * C10908 + (C18229 + C18230) * C50894) *
                 C50678) *
                C50960 -
            (((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
               C17233 * C1277) *
                  C50894 +
              (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
               C17233 * C1271) *
                  C10908 +
              (C18230 + C18229) * C50973 + (C18228 + C18227) * C10907) *
                 C50678 +
             ((C22735 + C22734) * C50894 + (C22733 + C22732) * C10908 +
              C28550 * C50973 + C28551 * C10907) *
                 C50944) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C50734 * C1074 -
           ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
             (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C50734 * C50770) *
              C1076 +
          ((((C17484 + C17483) * C10907 + (C17482 + C17481) * C50973 +
             C28548 * C10908 + C28549 * C50894) *
                C50944 +
            ((C17480 + C17479) * C10907 + (C17478 + C17477) * C50973 +
             (C18227 + C18228) * C10908 + (C18229 + C18230) * C50894) *
                C50678) *
               C50734 * C50770 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
             (C17274 + C17273) * C10907) *
                C50944) *
               C50734 * C1074) *
              C1077 +
          (((C17289 * C10907 + C17290 * C50973 + C28288 * C10908 +
             C28289 * C50894) *
                C50944 +
            ((C17284 + C17283) * C10907 + (C17282 + C17281) * C50973 +
             (C18008 + C18009) * C10908 + (C18010 + C18011) * C50894) *
                C50678) *
               C50734 * C1074 -
           (((C17239 * C1615 + C50866 * C1623 + C17238 * C944 + C17233 * C950) *
                 C50894 +
             (C17239 * C1611 + C50866 * C1616 + C17238 * C935 + C17233 * C943) *
                 C10908 +
             (C17848 + C17847) * C50973 + (C17846 + C17845) * C10907) *
                C50678 +
            ((C18230 + C18229) * C50894 + (C18228 + C18227) * C10908 +
             C17833 * C50973 + C17834 * C10907) *
                C50944) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C10907 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50973 +
            (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
               C50944 +
           ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
            C27894 * C10908 + C27895 * C50894) *
               C50678) *
              C50734 * C1145 -
          ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
            (C17483 + C17484) * C10907) *
               C50678 +
           ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
            (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C50973 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C10907) *
               C50944) *
              C50734 * C1146 +
          (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C10907 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C50973 +
            (C23646 + C23647) * C10908 + (C23648 + C23649) * C50894) *
               C50944 +
           ((C17485 + C17486) * C10907 + (C17487 + C17488) * C50973 +
            (C27696 + C27697) * C10908 + (C27698 + C27699) * C50894) *
               C50678) *
              C50734 * C1147 -
          (((C17239 * C4234 + C50866 * C4238 + C17238 * C3316 +
             C17233 * C3320) *
                C50894 +
            (C17239 * C4232 + C50866 * C4235 + C17238 * C3311 +
             C17233 * C3315) *
                C10908 +
            (C17239 * C2552 + C50866 * C2556 + C17238 * C1158 +
             C17233 * C1164) *
                C50973 +
            (C17239 * C2547 + C50866 * C2551 + C17238 * C1152 +
             C17233 * C1159) *
                C10907) *
               C50678 +
           ((C17239 * C4236 + C50866 * C4239 + C17238 * C3314 +
             C17233 * C3319) *
                C50894 +
            (C17239 * C4233 + C50866 * C4237 + C17238 * C3310 +
             C17233 * C3313) *
                C10908 +
            (C17239 * C2550 + C50866 * C2555 + C17238 * C1160 +
             C17233 * C1165) *
                C50973 +
            (C17239 * C2546 + C50866 * C2549 + C17238 * C1153 +
             C17233 * C1161) *
                C10907) *
               C50944) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                  C10907 +
              (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                  C50973 +
              (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                 C50944 +
             ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
              C27894 * C10908 + C27895 * C50894) *
                 C50678) *
                C1725 -
            ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
              C27897 * C10907) *
                 C50678 +
             ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
              (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                 C50944) *
                C50798) *
               C50959 +
           ((((C22724 + C22725) * C10907 + (C22726 + C22727) * C50973 +
              (C22728 + C22729) * C10908 + (C22730 + C22731) * C50894) *
                 C50944 +
             (C28548 * C10907 + C28549 * C50973 + (C22732 + C22733) * C10908 +
              (C22734 + C22735) * C50894) *
                 C50678) *
                C50798 -
            ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
              (C17483 + C17484) * C10907) *
                 C50678 +
             ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
              (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                  C50973 +
              (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                  C10907) *
                 C50944) *
                C1725) *
               C50770) *
              C50951 +
          ((((C27894 * C10907 + C27895 * C50973 + C27898 * C10908 +
              C27899 * C50894) *
                 C50944 +
             (C28288 * C10907 + C28289 * C50973 + (C17683 + C17684) * C10908 +
              (C17685 + C17686) * C50894) *
                 C50678) *
                C50798 -
            ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
              (C17278 + C17277) * C10907) *
                 C50678 +
             (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
              (C17274 + C17273) * C10907) *
                 C50944) *
                C1725) *
               C50959 +
           ((((C17484 + C17483) * C10907 + (C17482 + C17481) * C50973 +
              C28548 * C10908 + C28549 * C50894) *
                 C50944 +
             ((C17480 + C17479) * C10907 + (C17478 + C17477) * C50973 +
              (C18227 + C18228) * C10908 + (C18229 + C18230) * C50894) *
                 C50678) *
                C1725 -
            (((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
               C17233 * C1277) *
                  C50894 +
              (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
               C17233 * C1271) *
                  C10908 +
              (C18230 + C18229) * C50973 + (C18228 + C18227) * C10907) *
                 C50678 +
             ((C22735 + C22734) * C50894 + (C22733 + C22732) * C10908 +
              C28550 * C50973 + C28551 * C10907) *
                 C50944) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C51006 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C51007 +
           ((C22212 * C10907 + C22213 * C50973 + (C22207 + C22206) * C10908 +
             (C22205 + C22204) * C50894) *
                C50944 +
            (C27898 * C10907 + C27899 * C50973 + (C22208 + C22209) * C10908 +
             (C22210 + C22211) * C50894) *
                C50678) *
               C2141) *
              C50959 +
          ((((C22724 + C22725) * C10907 + (C22726 + C22727) * C50973 +
             (C22728 + C22729) * C10908 + (C22730 + C22731) * C50894) *
                C50944 +
            (C28548 * C10907 + C28549 * C50973 + (C22732 + C22733) * C10908 +
             (C22734 + C22735) * C50894) *
                C50678) *
               C51007 -
           ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
             (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C51006 -
           (((C17239 * C4634 + C50866 * C4642 + C17238 * C4635 +
              C17233 * C4643) *
                 C50894 +
             (C17239 * C4630 + C50866 * C4636 + C17238 * C4631 +
              C17233 * C4637) *
                 C10908 +
             (C22735 + C22734) * C50973 + (C22733 + C22732) * C10907) *
                C50678 +
            ((C23143 + C23142) * C50894 + (C23141 + C23140) * C10908 +
             C23138 * C50973 + C23139 * C10907) *
                C50944) *
               C2141) *
              C50770) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C1725 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C50798) *
              C289 +
          ((((C22724 + C22725) * C10907 + (C22726 + C22727) * C50973 +
             (C22728 + C22729) * C10908 + (C22730 + C22731) * C50894) *
                C50944 +
            (C28548 * C10907 + C28549 * C50973 + (C22732 + C22733) * C10908 +
             (C22734 + C22735) * C50894) *
                C50678) *
               C50798 -
           ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
             (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C1725) *
              C290 +
          ((((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C10907 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50973 +
             (C23646 + C23647) * C10908 + (C23648 + C23649) * C50894) *
                C50944 +
            ((C17485 + C17486) * C10907 + (C17487 + C17488) * C50973 +
             (C27696 + C27697) * C10908 + (C27698 + C27699) * C50894) *
                C50678) *
               C1725 -
           (((C17239 * C3740 + C50866 * C3744 + C17238 * C2746 +
              C17233 * C2750) *
                 C50894 +
             (C17239 * C3738 + C50866 * C3741 + C17238 * C2741 +
              C17233 * C2745) *
                 C10908 +
             (C27699 + C27698) * C50973 + (C27697 + C27696) * C10907) *
                C50678 +
            ((C23653 + C23652) * C50894 + (C23651 + C23650) * C10908 +
             (C23649 + C23648) * C50973 + (C23647 + C23646) * C10907) *
                C50944) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C1725 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C50798) *
              C50718 * C1076 +
          (((C27894 * C10907 + C27895 * C50973 + C27898 * C10908 +
             C27899 * C50894) *
                C50944 +
            (C28288 * C10907 + C28289 * C50973 + (C17683 + C17684) * C10908 +
             (C17685 + C17686) * C50894) *
                C50678) *
               C50798 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
             (C17274 + C17273) * C10907) *
                C50944) *
               C1725) *
              C50718 * C1077 +
          (((C17289 * C10907 + C17290 * C50973 + C28288 * C10908 +
             C28289 * C50894) *
                C50944 +
            ((C17284 + C17283) * C10907 + (C17282 + C17281) * C50973 +
             (C18008 + C18009) * C10908 + (C18010 + C18011) * C50894) *
                C50678) *
               C1725 -
           (((C17239 * C1268 + C50866 * C1276 + C17238 * C508 + C17233 * C520) *
                 C50894 +
             (C17239 * C1264 + C50866 * C1269 + C17238 * C490 + C17233 * C507) *
                 C10908 +
             (C18011 + C18010) * C50973 + (C18009 + C18008) * C10907) *
                C50678 +
            ((C17686 + C17685) * C50894 + (C17684 + C17683) * C10908 +
             C17996 * C50973 + C17997 * C10907) *
                C50944) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C10907 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50973 +
            (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
               C50944 +
           ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
            C27894 * C10908 + C27895 * C50894) *
               C50678) *
              C1891 -
          ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
            C27897 * C10907) *
               C50678 +
           ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
            (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
               C50944) *
              C1892 +
          ((C22212 * C10907 + C22213 * C50973 + (C22207 + C22206) * C10908 +
            (C22205 + C22204) * C50894) *
               C50944 +
           (C27898 * C10907 + C27899 * C50973 + (C22208 + C22209) * C10908 +
            (C22210 + C22211) * C50894) *
               C50678) *
              C1893 -
          (((C17239 * C6560 + C50866 * C6564 + C17238 * C5582 +
             C17233 * C5586) *
                C50894 +
            (C17239 * C6558 + C50866 * C6561 + C17238 * C5577 +
             C17233 * C5581) *
                C10908 +
            (C22211 + C22210) * C50973 + (C22209 + C22208) * C10907) *
               C50678 +
           ((C24061 + C24060) * C50894 + (C24059 + C24058) * C10908 +
            C24048 * C50973 + C24049 * C10907) *
               C50944) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C51006 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C51007 +
           ((C22212 * C10907 + C22213 * C50973 + (C22207 + C22206) * C10908 +
             (C22205 + C22204) * C50894) *
                C50944 +
            (C27898 * C10907 + C27899 * C50973 + (C22208 + C22209) * C10908 +
             (C22210 + C22211) * C50894) *
                C50678) *
               C2141) *
              C50718 * C50951 +
          (((C27894 * C10907 + C27895 * C50973 + C27898 * C10908 +
             C27899 * C50894) *
                C50944 +
            (C28288 * C10907 + C28289 * C50973 + (C17683 + C17684) * C10908 +
             (C17685 + C17686) * C50894) *
                C50678) *
               C51007 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
             (C17274 + C17273) * C10907) *
                C50944) *
               C51006 -
           (((C17239 * C6141 + C50866 * C6143 + C17238 * C1901 +
              C17233 * C1908) *
                 C50894 +
             (C17239 * C6140 + C50866 * C6142 + C17238 * C1896 +
              C17233 * C1902) *
                 C10908 +
             (C17686 + C17685) * C50973 + (C17684 + C17683) * C10907) *
                C50678 +
            ((C22211 + C22210) * C50894 + (C22209 + C22208) * C10908 +
             C22194 * C50973 + C22195 * C10907) *
                C50944) *
               C2141) *
              C50718 * C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C1725 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C50798) *
              C50718 * C1076 +
          (((C27894 * C10907 + C27895 * C50973 + C27898 * C10908 +
             C27899 * C50894) *
                C50944 +
            (C28288 * C10907 + C28289 * C50973 + (C17683 + C17684) * C10908 +
             (C17685 + C17686) * C50894) *
                C50678) *
               C50798 -
           ((C17996 * C50894 + C17997 * C10908 + (C17280 + C17279) * C50973 +
             (C17278 + C17277) * C10907) *
                C50678 +
            (C27896 * C50894 + C27897 * C10908 + (C17276 + C17275) * C50973 +
             (C17274 + C17273) * C10907) *
                C50944) *
               C1725) *
              C50718 * C1077 +
          (((C17289 * C10907 + C17290 * C50973 + C28288 * C10908 +
             C28289 * C50894) *
                C50944 +
            ((C17284 + C17283) * C10907 + (C17282 + C17281) * C50973 +
             (C18008 + C18009) * C10908 + (C18010 + C18011) * C50894) *
                C50678) *
               C1725 -
           (((C17239 * C1268 + C50866 * C1276 + C17238 * C508 + C17233 * C520) *
                 C50894 +
             (C17239 * C1264 + C50866 * C1269 + C17238 * C490 + C17233 * C507) *
                 C10908 +
             (C18011 + C18010) * C50973 + (C18009 + C18008) * C10907) *
                C50678 +
            ((C17686 + C17685) * C50894 + (C17684 + C17683) * C10908 +
             C17996 * C50973 + C17997 * C10907) *
                C50944) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C10907 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50973 +
             (C22196 + C22197) * C10908 + (C22198 + C22199) * C50894) *
                C50944 +
            ((C17273 + C17274) * C10907 + (C17275 + C17276) * C50973 +
             C27894 * C10908 + C27895 * C50894) *
                C50678) *
               C1725 -
           ((C22194 * C50894 + C22195 * C10908 + C27896 * C50973 +
             C27897 * C10907) *
                C50678 +
            ((C22203 + C22202) * C50894 + (C22201 + C22200) * C10908 +
             (C22199 + C22198) * C50973 + (C22197 + C22196) * C10907) *
                C50944) *
               C50798) *
              C289 +
          ((((C22724 + C22725) * C10907 + (C22726 + C22727) * C50973 +
             (C22728 + C22729) * C10908 + (C22730 + C22731) * C50894) *
                C50944 +
            (C28548 * C10907 + C28549 * C50973 + (C22732 + C22733) * C10908 +
             (C22734 + C22735) * C50894) *
                C50678) *
               C50798 -
           ((C28550 * C50894 + C28551 * C10908 + (C17481 + C17482) * C50973 +
             (C17483 + C17484) * C10907) *
                C50678 +
            ((C22727 + C22726) * C50894 + (C22725 + C22724) * C10908 +
             (C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50973 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C10907) *
                C50944) *
               C1725) *
              C290 +
          ((((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C10907 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50973 +
             (C23646 + C23647) * C10908 + (C23648 + C23649) * C50894) *
                C50944 +
            ((C17485 + C17486) * C10907 + (C17487 + C17488) * C50973 +
             (C27696 + C27697) * C10908 + (C27698 + C27699) * C50894) *
                C50678) *
               C1725 -
           (((C17239 * C3740 + C50866 * C3744 + C17238 * C2746 +
              C17233 * C2750) *
                 C50894 +
             (C17239 * C3738 + C50866 * C3741 + C17238 * C2741 +
              C17233 * C2745) *
                 C10908 +
             (C27699 + C27698) * C50973 + (C27697 + C27696) * C10907) *
                C50678 +
            ((C23653 + C23652) * C50894 + (C23651 + C23650) * C10908 +
             (C23649 + C23648) * C50973 + (C23647 + C23646) * C10907) *
                C50944) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C50959 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C50770) *
              C51002 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
               C50734 * C50770 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C50959) *
              C51003 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C50734 * C50959 -
           (((C17239 * C322 + C50866 * C333 + C17238 * C321 + C17233 * C332) *
                 C50830 +
             (C17239 * C303 + C50866 * C323 + C17238 * C302 + C17233 * C320) *
                 C118) *
                C17237 +
            ((C17848 + C17847) * C50830 + (C17846 + C17845) * C118) * C17236 +
            C17849 * C17235) *
               C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C50959 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C50770) *
              C51002 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C50770 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C50959) *
              C51003 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C50734 * C50959 -
           ((C20056 * C2553 + C20051 * C2557 + C20055 * C1156 + C20050 * C1163 +
             C20054 * C317 + C20049 * C330 + C20053 * C306 + C20048 * C325) *
                C50830 +
            (C20056 * C2548 + C20051 * C2554 + C20055 * C1151 + C20050 * C1157 +
             C20054 * C300 + C20049 * C316 + C20053 * C295 + C20048 * C307) *
                C118) *
               C50673 * C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                  C118 +
              (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                  C50830) *
                 C17235 +
             ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
             C17297 * C17237) *
                C50960 -
            (C18012 * C17237 +
             ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
             ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                  C50830 +
              (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                  C118) *
                 C17235) *
                C50798) *
               C50959 +
           ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 +
               C50866 * C1622) *
                  C118 +
              (C17238 * C938 + C17233 * C947 + C17239 * C1621 +
               C50866 * C1626) *
                  C50830) *
                 C17235 +
             ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
             ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
                C50798 -
            (C17849 * C17237 +
             ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
             ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                  C50830 +
              (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                  C118) *
                 C17235) *
                C50960) *
               C50770) *
              C292 +
          (((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
             ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
             ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
                C50798 -
            (C17298 * C17237 +
             ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
             ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
                C50960) *
               C50959 +
           ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
             ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
             ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
                C50960 -
            (((C17239 * C1615 + C50866 * C1623 + C17238 * C944 +
               C17233 * C950) *
                  C50830 +
              (C17239 * C1611 + C50866 * C1616 + C17238 * C935 +
               C17233 * C943) *
                  C118) *
                 C17237 +
             ((C18230 + C18229) * C50830 + (C18228 + C18227) * C118) * C17236 +
             ((C18226 + C18225) * C50830 + (C18224 + C18223) * C118) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
              C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                 C118 +
             (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
              C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                 C50830) *
                C50673 * C50960 -
            ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 +
              C20050 * C1626 + C20054 * C938 + C20049 * C947 + C20053 * C499 +
              C20048 * C516) *
                 C50830 +
             (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 +
              C20050 * C1622 + C20054 * C932 + C20049 * C937 + C20053 * C486 +
              C20048 * C500) *
                 C118) *
                C50673 * C50798) *
               C50959 +
           (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
              C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
              C20051 * C4237) *
                 C118 +
             (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
              C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
              C20051 * C4239) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 +
              C20050 * C1165 + C20054 * C313 + C20049 * C328 + C20053 * C310 +
              C20048 * C327) *
                 C50830 +
             (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 +
              C20050 * C1161 + C20054 * C298 + C20049 * C312 + C20053 * C297 +
              C20048 * C311) *
                 C118) *
                C50673 * C50960) *
               C50770) *
              C292 +
          ((((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
              C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
              C20051 * C3315) *
                 C118 +
             (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
              C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
              C20051 * C3320) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
              C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                 C50830 +
             (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
              C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                 C118) *
                C50673 * C50960) *
               C50959 +
           (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
              C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
              C20051 * C2551) *
                 C118 +
             (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
              C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
              C20051 * C2556) *
                 C50830) *
                C50673 * C50960 -
            ((C20056 * C4234 + C20051 * C4238 + C20055 * C3316 +
              C20050 * C3320 + C20054 * C1619 + C20049 * C1625 + C20053 * C940 +
              C20048 * C948) *
                 C50830 +
             (C20056 * C4232 + C20051 * C4235 + C20055 * C3311 +
              C20050 * C3315 + C20054 * C1613 + C20049 * C1620 + C20053 * C933 +
              C20048 * C939) *
                 C118) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C289 -
           (((C17477 + C17478) * C50830 + (C17479 + C17480) * C118) * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C290 +
           (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C50734 * C291) *
              C292 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17238 * C294 + C17233 * C305 + C17239 * C301 + C50866 * C318) *
                 C118 +
             (C17238 * C304 + C17233 * C324 + C17239 * C319 + C50866 * C331) *
                 C50830) *
                C17237) *
               C50734 * C290 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C289 -
           (((C17239 * C1154 + C50866 * C1162 + C17238 * C319 + C17233 * C331) *
                 C50830 +
             (C17239 * C1150 + C50866 * C1155 + C17238 * C301 + C17233 * C318) *
                 C118) *
                C17237 +
            ((C17492 + C17491) * C50830 + (C17490 + C17489) * C118) * C17236 +
            ((C17488 + C17487) * C50830 + (C17486 + C17485) * C118) * C17235) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C118 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50830) *
               C17235 +
           ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
           C17297 * C17237) *
              C50734 * C50718 * C113 -
          (C17298 * C17237 +
           ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
           ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
              C50734 * C50718 * C114 +
          (C17297 * C17235 +
           ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
           ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
              C50734 * C50718 * C115 -
          (((C17239 * C675 + C50866 * C677 + C17238 * C137 + C17233 * C145) *
                C50830 +
            (C17239 * C674 + C50866 * C676 + C17238 * C124 + C17233 * C136) *
                C118) *
               C17237 +
           ((C17288 + C17287) * C50830 + (C17286 + C17285) * C118) * C17236 +
           C17298 * C17235) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C480 -
           (((C17671 + C17672) * C50830 + (C17673 + C17674) * C118) * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C481 +
           (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                 C118 +
             (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                 C50830) *
                C17235 +
            ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
            ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
               C482) *
              C50718 * C292 +
          ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
            ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
            ((C17238 * C483 + C17233 * C494 + C17239 * C935 + C50866 * C943) *
                 C118 +
             (C17238 * C493 + C17233 * C513 + C17239 * C944 + C50866 * C950) *
                 C50830) *
                C17237) *
               C481 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C480 -
           (((C17239 * C1268 + C50866 * C1276 + C17238 * C508 + C17233 * C520) *
                 C50830 +
             (C17239 * C1264 + C50866 * C1269 + C17238 * C490 + C17233 * C507) *
                 C118) *
                C17237 +
            ((C17686 + C17685) * C50830 + (C17684 + C17683) * C118) * C17236 +
            ((C17682 + C17681) * C50830 + (C17680 + C17679) * C118) * C17235) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C50734 * C50718 * C113 -
          ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
            C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
               C50830 +
           (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
            C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
               C118) *
              C50673 * C50734 * C50718 * C114 +
          ((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
            C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
               C118 +
           (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
            C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
               C50830) *
              C50673 * C50734 * C50718 * C115 -
          ((C20056 * C1154 + C20051 * C1162 + C20055 * C319 + C20050 * C331 +
            C20054 * C304 + C20049 * C324 + C20053 * C133 + C20048 * C143) *
               C50830 +
           (C20056 * C1150 + C20051 * C1155 + C20055 * C301 + C20050 * C318 +
            C20054 * C294 + C20049 * C305 + C20053 * C122 + C20048 * C132) *
               C118) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C289 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C290 +
           ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C50734 * C291) *
              C292 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C290 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C289 -
           ((C20056 * C3586 + C20051 * C3590 + C20055 * C2552 + C20050 * C2556 +
             C20054 * C1158 + C20049 * C1164 + C20053 * C315 + C20048 * C329) *
                C50830 +
            (C20056 * C3584 + C20051 * C3587 + C20055 * C2547 + C20050 * C2551 +
             C20054 * C1152 + C20049 * C1159 + C20053 * C299 + C20048 * C314) *
                C118) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C480 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C481 +
           ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
             C20055 * C2740 + C20050 * C2743 + C20056 * C3739 +
             C20051 * C3743) *
                C118 +
            (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
             C20055 * C2744 + C20050 * C2749 + C20056 * C3742 +
             C20051 * C3745) *
                C50830) *
               C50673 * C482) *
              C50718 * C292 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C481 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C480 -
           ((C20056 * C3740 + C20051 * C3744 + C20055 * C2746 + C20050 * C2750 +
             C20054 * C1272 + C20049 * C1278 + C20053 * C504 + C20048 * C518) *
                C50830 +
            (C20056 * C3738 + C20051 * C3741 + C20055 * C2741 + C20050 * C2745 +
             C20054 * C1266 + C20049 * C1273 + C20053 * C488 + C20048 * C503) *
                C118) *
               C50673 * C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50960 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C50718 * C51002 +
          ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
            ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
            ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
               C50798 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50960) *
              C50718 * C51003 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C50960 -
           (((C17239 * C945 + C50866 * C951 + C17238 * C510 + C17233 * C521) *
                 C50830 +
             (C17239 * C936 + C50866 * C946 + C17238 * C491 + C17233 * C509) *
                 C118) *
                C17237 +
            ((C18011 + C18010) * C50830 + (C18009 + C18008) * C118) * C17236 +
            C18012 * C17235) *
               C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50960 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C50718 * C51002 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50960) *
              C50718 * C51003 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C50960 -
           ((C20056 * C3317 + C20051 * C3321 + C20055 * C1617 + C20050 * C1624 +
             C20054 * C942 + C20049 * C949 + C20053 * C495 + C20048 * C514) *
                C50830 +
            (C20056 * C3312 + C20051 * C3318 + C20055 * C1612 + C20050 * C1618 +
             C20054 * C934 + C20049 * C941 + C20053 * C484 + C20048 * C496) *
                C118) *
               C50673 * C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C118 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50830) *
               C17235 +
           ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
           C17297 * C17237) *
              C50734 * C50718 * C113 -
          (C17298 * C17237 +
           ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
           ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
              C50734 * C50718 * C114 +
          (C17297 * C17235 +
           ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
           ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
              C50734 * C50718 * C115 -
          (((C17239 * C675 + C50866 * C677 + C17238 * C137 + C17233 * C145) *
                C50830 +
            (C17239 * C674 + C50866 * C676 + C17238 * C124 + C17233 * C136) *
                C118) *
               C17237 +
           ((C17288 + C17287) * C50830 + (C17286 + C17285) * C118) * C17236 +
           C17298 * C17235) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C289 -
           (((C17477 + C17478) * C50830 + (C17479 + C17480) * C118) * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C290 +
           (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C50734 * C291) *
              C292 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17238 * C294 + C17233 * C305 + C17239 * C301 + C50866 * C318) *
                 C118 +
             (C17238 * C304 + C17233 * C324 + C17239 * C319 + C50866 * C331) *
                 C50830) *
                C17237) *
               C50734 * C290 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C289 -
           (((C17239 * C1154 + C50866 * C1162 + C17238 * C319 + C17233 * C331) *
                 C50830 +
             (C17239 * C1150 + C50866 * C1155 + C17238 * C301 + C17233 * C318) *
                 C118) *
                C17237 +
            ((C17492 + C17491) * C50830 + (C17490 + C17489) * C118) * C17236 +
            ((C17488 + C17487) * C50830 + (C17486 + C17485) * C118) * C17235) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C50734 * C50718 * C113 -
          ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
            C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
               C50830 +
           (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
            C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
               C118) *
              C50673 * C50734 * C50718 * C114 +
          ((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
            C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
               C118 +
           (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
            C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
               C50830) *
              C50673 * C50734 * C50718 * C115 -
          ((C20056 * C1154 + C20051 * C1162 + C20055 * C319 + C20050 * C331 +
            C20054 * C304 + C20049 * C324 + C20053 * C133 + C20048 * C143) *
               C50830 +
           (C20056 * C1150 + C20051 * C1155 + C20055 * C301 + C20050 * C318 +
            C20054 * C294 + C20049 * C305 + C20053 * C122 + C20048 * C132) *
               C118) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C289 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C290 +
           ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C50734 * C291) *
              C292 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C290 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C289 -
           ((C20056 * C3586 + C20051 * C3590 + C20055 * C2552 + C20050 * C2556 +
             C20054 * C1158 + C20049 * C1164 + C20053 * C315 + C20048 * C329) *
                C50830 +
            (C20056 * C3584 + C20051 * C3587 + C20055 * C2547 + C20050 * C2551 +
             C20054 * C1152 + C20049 * C1159 + C20053 * C299 + C20048 * C314) *
                C118) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C51004 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C51005 +
           (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C50734 * C1380) *
              C50951 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
               C50734 * C51005 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C51004 -
           (((C17239 * C1154 + C50866 * C1162 + C17238 * C319 + C17233 * C331) *
                 C50830 +
             (C17239 * C1150 + C50866 * C1155 + C17238 * C301 + C17233 * C318) *
                 C118) *
                C17237 +
            ((C17492 + C17491) * C50830 + (C17490 + C17489) * C118) * C17236 +
            ((C17488 + C17487) * C50830 + (C17486 + C17485) * C118) * C17235) *
               C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C51004 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C51005 +
           ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C50734 * C1380) *
              C50951 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C51005 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C51004 -
           ((C20056 * C3586 + C20051 * C3590 + C20055 * C2552 + C20050 * C2556 +
             C20054 * C1158 + C20049 * C1164 + C20053 * C315 + C20048 * C329) *
                C50830 +
            (C20056 * C3584 + C20051 * C3587 + C20055 * C2547 + C20050 * C2551 +
             C20054 * C1152 + C20049 * C1159 + C20053 * C299 + C20048 * C314) *
                C118) *
               C50673 * C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50960 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C51004 +
          ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 + C50866 * C1622) *
                 C118 +
             (C17238 * C938 + C17233 * C947 + C17239 * C1621 + C50866 * C1626) *
                 C50830) *
                C17235 +
            ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
            ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
               C50798 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50960) *
              C51005 +
          ((((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C50960 -
           (((C17239 * C3317 + C50866 * C3321 + C17238 * C1617 +
              C17233 * C1624) *
                 C50830 +
             (C17239 * C3312 + C50866 * C3318 + C17238 * C1612 +
              C17233 * C1618) *
                 C118) *
                C17237 +
            ((C17239 * C3316 + C50866 * C3320 + C17238 * C1619 +
              C17233 * C1625) *
                 C50830 +
             (C17239 * C3311 + C50866 * C3315 + C17238 * C1613 +
              C17233 * C1620) *
                 C118) *
                C17236 +
            ((C17239 * C3314 + C50866 * C3319 + C17238 * C1621 +
              C17233 * C1626) *
                 C50830 +
             (C17239 * C3310 + C50866 * C3313 + C17238 * C1614 +
              C17233 * C1622) *
                 C118) *
                C17235) *
               C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50960 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C51004 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50960) *
              C51005 +
          (((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C50960 -
           ((C20056 * C21176 + C20051 * C21178 + C20055 * C4236 +
             C20050 * C4239 + C20054 * C3314 + C20049 * C3319 + C20053 * C1621 +
             C20048 * C1626) *
                C50830 +
            (C20056 * C21175 + C20051 * C21177 + C20055 * C4233 +
             C20050 * C4237 + C20054 * C3310 + C20049 * C3313 + C20053 * C1614 +
             C20048 * C1622) *
                C118) *
               C50673 * C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C118 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50830) *
               C17235 +
           ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
           C17297 * C17237) *
              C50734 * C1145 -
          (C17849 * C17237 +
           ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
           ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C50830 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C118) *
               C17235) *
              C50734 * C1146 +
          (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C118 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C50830) *
               C17235 +
           ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
           ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
              C50734 * C1147 -
          (((C17239 * C2553 + C50866 * C2557 + C17238 * C1156 +
             C17233 * C1163) *
                C50830 +
            (C17239 * C2548 + C50866 * C2554 + C17238 * C1151 +
             C17233 * C1157) *
                C118) *
               C17237 +
           ((C17239 * C2552 + C50866 * C2556 + C17238 * C1158 +
             C17233 * C1164) *
                C50830 +
            (C17239 * C2547 + C50866 * C2551 + C17238 * C1152 +
             C17233 * C1159) *
                C118) *
               C17236 +
           ((C17239 * C2550 + C50866 * C2555 + C17238 * C1160 +
             C17233 * C1165) *
                C50830 +
            (C17239 * C2546 + C50866 * C2549 + C17238 * C1153 +
             C17233 * C1161) *
                C118) *
               C17235) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C1074 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C50770) *
              C1076 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
               C50734 * C50770 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C1074) *
              C1077 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C50734 * C1074 -
           (((C17239 * C322 + C50866 * C333 + C17238 * C321 + C17233 * C332) *
                 C50830 +
             (C17239 * C303 + C50866 * C323 + C17238 * C302 + C17233 * C320) *
                 C118) *
                C17237 +
            ((C17848 + C17847) * C50830 + (C17846 + C17845) * C118) * C17236 +
            C17849 * C17235) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C480 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C481 +
           (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                 C118 +
             (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                 C50830) *
                C17235 +
            ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
            ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
               C482) *
              C1074 +
          ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 + C50866 * C1622) *
                 C118 +
             (C17238 * C938 + C17233 * C947 + C17239 * C1621 + C50866 * C1626) *
                 C50830) *
                C17235 +
            ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
            ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
               C481 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C480 -
           (((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
              C17233 * C1277) *
                 C50830 +
             (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
              C17233 * C1271) *
                 C118) *
                C17237 +
            ((C17239 * C2746 + C50866 * C2750 + C17238 * C1272 +
              C17233 * C1278) *
                 C50830 +
             (C17239 * C2741 + C50866 * C2745 + C17238 * C1266 +
              C17233 * C1273) *
                 C118) *
                C17236 +
            ((C17239 * C2744 + C50866 * C2749 + C17238 * C1274 +
              C17233 * C1279) *
                 C50830 +
             (C17239 * C2740 + C50866 * C2743 + C17238 * C1267 +
              C17233 * C1275) *
                 C118) *
                C17235) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C1074 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C50770 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C1074) *
              C1077 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C50734 * C1074 -
           ((C20056 * C2553 + C20051 * C2557 + C20055 * C1156 + C20050 * C1163 +
             C20054 * C317 + C20049 * C330 + C20053 * C306 + C20048 * C325) *
                C50830 +
            (C20056 * C2548 + C20051 * C2554 + C20055 * C1151 + C20050 * C1157 +
             C20054 * C300 + C20049 * C316 + C20053 * C295 + C20048 * C307) *
                C118) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C50734 * C1145 -
          ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
            C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
               C50830 +
           (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
            C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
               C118) *
              C50673 * C50734 * C1146 +
          ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
            C20055 * C2546 + C20050 * C2549 + C20056 * C3585 + C20051 * C3589) *
               C118 +
           (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
            C20055 * C2550 + C20050 * C2555 + C20056 * C3588 + C20051 * C3591) *
               C50830) *
              C50673 * C50734 * C1147 -
          ((C20056 * C20744 + C20051 * C20746 + C20055 * C3588 +
            C20050 * C3591 + C20054 * C2550 + C20049 * C2555 + C20053 * C1160 +
            C20048 * C1165) *
               C50830 +
           (C20056 * C20743 + C20051 * C20745 + C20055 * C3585 +
            C20050 * C3589 + C20054 * C2546 + C20049 * C2549 + C20053 * C1153 +
            C20048 * C1161) *
               C118) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C480 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C481 +
           ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
             C20055 * C2740 + C20050 * C2743 + C20056 * C3739 +
             C20051 * C3743) *
                C118 +
            (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
             C20055 * C2744 + C20050 * C2749 + C20056 * C3742 +
             C20051 * C3745) *
                C50830) *
               C50673 * C482) *
              C1074 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C481 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C480 -
           ((C20056 * C20846 + C20051 * C20848 + C20055 * C3742 +
             C20050 * C3745 + C20054 * C2744 + C20049 * C2749 + C20053 * C1274 +
             C20048 * C1279) *
                C50830 +
            (C20056 * C20845 + C20051 * C20847 + C20055 * C3739 +
             C20050 * C3743 + C20054 * C2740 + C20049 * C2743 + C20053 * C1267 +
             C20048 * C1275) *
                C118) *
               C50673 * C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                  C118 +
              (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                  C50830) *
                 C17235 +
             ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
             C17297 * C17237) *
                C50960 -
            (C18012 * C17237 +
             ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
             ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                  C50830 +
              (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                  C118) *
                 C17235) *
                C50798) *
               C1074 +
           ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 +
               C50866 * C1622) *
                  C118 +
              (C17238 * C938 + C17233 * C947 + C17239 * C1621 +
               C50866 * C1626) *
                  C50830) *
                 C17235 +
             ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
             ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
                C50798 -
            (C17849 * C17237 +
             ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
             ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                  C50830 +
              (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                  C118) *
                 C17235) *
                C50960) *
               C50770) *
              C50951 +
          (((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
             ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
             ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
                C50798 -
            (C17298 * C17237 +
             ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
             ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
                C50960) *
               C1074 +
           ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
             ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
             ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
                C50960 -
            (((C17239 * C1615 + C50866 * C1623 + C17238 * C944 +
               C17233 * C950) *
                  C50830 +
              (C17239 * C1611 + C50866 * C1616 + C17238 * C935 +
               C17233 * C943) *
                  C118) *
                 C17237 +
             ((C18230 + C18229) * C50830 + (C18228 + C18227) * C118) * C17236 +
             ((C18226 + C18225) * C50830 + (C18224 + C18223) * C118) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
              C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                 C118 +
             (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
              C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                 C50830) *
                C50673 * C50960 -
            ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 +
              C20050 * C1626 + C20054 * C938 + C20049 * C947 + C20053 * C499 +
              C20048 * C516) *
                 C50830 +
             (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 +
              C20050 * C1622 + C20054 * C932 + C20049 * C937 + C20053 * C486 +
              C20048 * C500) *
                 C118) *
                C50673 * C50798) *
               C1074 +
           (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
              C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
              C20051 * C4237) *
                 C118 +
             (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
              C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
              C20051 * C4239) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 +
              C20050 * C1165 + C20054 * C313 + C20049 * C328 + C20053 * C310 +
              C20048 * C327) *
                 C50830 +
             (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 +
              C20050 * C1161 + C20054 * C298 + C20049 * C312 + C20053 * C297 +
              C20048 * C311) *
                 C118) *
                C50673 * C50960) *
               C50770) *
              C50951 +
          ((((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
              C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
              C20051 * C3315) *
                 C118 +
             (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
              C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
              C20051 * C3320) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
              C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                 C50830 +
             (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
              C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                 C118) *
                C50673 * C50960) *
               C1074 +
           (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
              C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
              C20051 * C2551) *
                 C118 +
             (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
              C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
              C20051 * C2556) *
                 C50830) *
                C50673 * C50960 -
            ((C20056 * C4234 + C20051 * C4238 + C20055 * C3316 +
              C20050 * C3320 + C20054 * C1619 + C20049 * C1625 + C20053 * C940 +
              C20048 * C948) *
                 C50830 +
             (C20056 * C4232 + C20051 * C4235 + C20055 * C3311 +
              C20050 * C3315 + C20054 * C1613 + C20049 * C1620 + C20053 * C933 +
              C20048 * C939) *
                 C118) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C50734 * C1074 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C50734 * C50770) *
              C1076 +
          ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
            ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
            ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
               C50734 * C50770 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C50734 * C1074) *
              C1077 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C50734 * C1074 -
           (((C17239 * C322 + C50866 * C333 + C17238 * C321 + C17233 * C332) *
                 C50830 +
             (C17239 * C303 + C50866 * C323 + C17238 * C302 + C17233 * C320) *
                 C118) *
                C17237 +
            ((C17848 + C17847) * C50830 + (C17846 + C17845) * C118) * C17236 +
            C17849 * C17235) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C118 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50830) *
               C17235 +
           ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
           C17297 * C17237) *
              C50734 * C1145 -
          (C17849 * C17237 +
           ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
           ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                C50830 +
            (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                C118) *
               C17235) *
              C50734 * C1146 +
          (((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                C118 +
            (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                C50830) *
               C17235 +
           ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
           ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
              C50734 * C1147 -
          (((C17239 * C2553 + C50866 * C2557 + C17238 * C1156 +
             C17233 * C1163) *
                C50830 +
            (C17239 * C2548 + C50866 * C2554 + C17238 * C1151 +
             C17233 * C1157) *
                C118) *
               C17237 +
           ((C17239 * C2552 + C50866 * C2556 + C17238 * C1158 +
             C17233 * C1164) *
                C50830 +
            (C17239 * C2547 + C50866 * C2551 + C17238 * C1152 +
             C17233 * C1159) *
                C118) *
               C17236 +
           ((C17239 * C2550 + C50866 * C2555 + C17238 * C1160 +
             C17233 * C1165) *
                C50830 +
            (C17239 * C2546 + C50866 * C2549 + C17238 * C1153 +
             C17233 * C1161) *
                C118) *
               C17235) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C50734 * C1074 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
             C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
             C20051 * C2551) *
                C118 +
            (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
             C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
             C20051 * C2556) *
                C50830) *
               C50673 * C50734 * C50770 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C50734 * C1074) *
              C1077 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C50734 * C1074 -
           ((C20056 * C2553 + C20051 * C2557 + C20055 * C1156 + C20050 * C1163 +
             C20054 * C317 + C20049 * C330 + C20053 * C306 + C20048 * C325) *
                C50830 +
            (C20056 * C2548 + C20051 * C2554 + C20055 * C1151 + C20050 * C1157 +
             C20054 * C300 + C20049 * C316 + C20053 * C295 + C20048 * C307) *
                C118) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C50734 * C1145 -
          ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
            C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
               C50830 +
           (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
            C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
               C118) *
              C50673 * C50734 * C1146 +
          ((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
            C20055 * C2546 + C20050 * C2549 + C20056 * C3585 + C20051 * C3589) *
               C118 +
           (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
            C20055 * C2550 + C20050 * C2555 + C20056 * C3588 + C20051 * C3591) *
               C50830) *
              C50673 * C50734 * C1147 -
          ((C20056 * C20744 + C20051 * C20746 + C20055 * C3588 +
            C20050 * C3591 + C20054 * C2550 + C20049 * C2555 + C20053 * C1160 +
            C20048 * C1165) *
               C50830 +
           (C20056 * C20743 + C20051 * C20745 + C20055 * C3585 +
            C20050 * C3589 + C20054 * C2546 + C20049 * C2549 + C20053 * C1153 +
            C20048 * C1161) *
               C118) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                  C118 +
              (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                  C50830) *
                 C17235 +
             ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
             C17297 * C17237) *
                C1725 -
            (C18012 * C17237 +
             ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
             ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                  C50830 +
              (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                  C118) *
                 C17235) *
                C50798) *
               C50959 +
           ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 +
               C50866 * C1622) *
                  C118 +
              (C17238 * C938 + C17233 * C947 + C17239 * C1621 +
               C50866 * C1626) *
                  C50830) *
                 C17235 +
             ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
             ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
                C50798 -
            (C17849 * C17237 +
             ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
             ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                  C50830 +
              (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                  C118) *
                 C17235) *
                C1725) *
               C50770) *
              C50951 +
          (((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
             ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
             ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
                C50798 -
            (C17298 * C17237 +
             ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
             ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
                C1725) *
               C50959 +
           ((((C17484 + C17483) * C118 + (C17482 + C17481) * C50830) * C17235 +
             ((C17480 + C17479) * C118 + (C17478 + C17477) * C50830) * C17236 +
             ((C17845 + C17846) * C118 + (C17847 + C17848) * C50830) * C17237) *
                C1725 -
            (((C17239 * C1615 + C50866 * C1623 + C17238 * C944 +
               C17233 * C950) *
                  C50830 +
              (C17239 * C1611 + C50866 * C1616 + C17238 * C935 +
               C17233 * C943) *
                  C118) *
                 C17237 +
             ((C18230 + C18229) * C50830 + (C18228 + C18227) * C118) * C17236 +
             ((C18226 + C18225) * C50830 + (C18224 + C18223) * C118) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
              C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                 C118 +
             (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
              C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                 C50830) *
                C50673 * C1725 -
            ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 +
              C20050 * C1626 + C20054 * C938 + C20049 * C947 + C20053 * C499 +
              C20048 * C516) *
                 C50830 +
             (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 +
              C20050 * C1622 + C20054 * C932 + C20049 * C937 + C20053 * C486 +
              C20048 * C500) *
                 C118) *
                C50673 * C50798) *
               C50959 +
           (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
              C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
              C20051 * C4237) *
                 C118 +
             (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
              C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
              C20051 * C4239) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 +
              C20050 * C1165 + C20054 * C313 + C20049 * C328 + C20053 * C310 +
              C20048 * C327) *
                 C50830 +
             (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 +
              C20050 * C1161 + C20054 * C298 + C20049 * C312 + C20053 * C297 +
              C20048 * C311) *
                 C118) *
                C50673 * C1725) *
               C50770) *
              C50951 +
          ((((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
              C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
              C20051 * C3315) *
                 C118 +
             (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
              C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
              C20051 * C3320) *
                 C50830) *
                C50673 * C50798 -
            ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
              C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                 C50830 +
             (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
              C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                 C118) *
                C50673 * C1725) *
               C50959 +
           (((C20053 * C296 + C20048 * C309 + C20054 * C299 + C20049 * C314 +
              C20055 * C1152 + C20050 * C1159 + C20056 * C2547 +
              C20051 * C2551) *
                 C118 +
             (C20053 * C308 + C20048 * C326 + C20054 * C315 + C20049 * C329 +
              C20055 * C1158 + C20050 * C1164 + C20056 * C2552 +
              C20051 * C2556) *
                 C50830) *
                C50673 * C1725 -
            ((C20056 * C4234 + C20051 * C4238 + C20055 * C3316 +
              C20050 * C3320 + C20054 * C1619 + C20049 * C1625 + C20053 * C940 +
              C20048 * C948) *
                 C50830 +
             (C20056 * C4232 + C20051 * C4235 + C20055 * C3311 +
              C20050 * C3315 + C20054 * C1613 + C20049 * C1620 + C20053 * C933 +
              C20048 * C939) *
                 C118) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C51006 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C51007 +
           (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                 C118 +
             (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                 C50830) *
                C17235 +
            ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
            ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
               C2141) *
              C50959 +
          ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 + C50866 * C1622) *
                 C118 +
             (C17238 * C938 + C17233 * C947 + C17239 * C1621 + C50866 * C1626) *
                 C50830) *
                C17235 +
            ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
            ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
               C51007 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C51006 -
           (((C17239 * C2747 + C50866 * C2751 + C17238 * C1270 +
              C17233 * C1277) *
                 C50830 +
             (C17239 * C2742 + C50866 * C2748 + C17238 * C1265 +
              C17233 * C1271) *
                 C118) *
                C17237 +
            ((C17239 * C2746 + C50866 * C2750 + C17238 * C1272 +
              C17233 * C1278) *
                 C50830 +
             (C17239 * C2741 + C50866 * C2745 + C17238 * C1266 +
              C17233 * C1273) *
                 C118) *
                C17236 +
            ((C17239 * C2744 + C50866 * C2749 + C17238 * C1274 +
              C17233 * C1279) *
                 C50830 +
             (C17239 * C2740 + C50866 * C2743 + C17238 * C1267 +
              C17233 * C1275) *
                 C118) *
                C17235) *
               C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C51006 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C51007 +
           ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
             C20055 * C2740 + C20050 * C2743 + C20056 * C3739 +
             C20051 * C3743) *
                C118 +
            (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
             C20055 * C2744 + C20050 * C2749 + C20056 * C3742 +
             C20051 * C3745) *
                C50830) *
               C50673 * C2141) *
              C50959 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C51007 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C51006 -
           ((C20056 * C20846 + C20051 * C20848 + C20055 * C3742 +
             C20050 * C3745 + C20054 * C2744 + C20049 * C2749 + C20053 * C1274 +
             C20048 * C1279) *
                C50830 +
            (C20056 * C20845 + C20051 * C20847 + C20055 * C3739 +
             C20050 * C3743 + C20054 * C2740 + C20049 * C2743 + C20053 * C1267 +
             C20048 * C1275) *
                C118) *
               C50673 * C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C1725 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C289 +
          ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 + C50866 * C1622) *
                 C118 +
             (C17238 * C938 + C17233 * C947 + C17239 * C1621 + C50866 * C1626) *
                 C50830) *
                C17235 +
            ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
            ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
               C50798 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C1725) *
              C290 +
          ((((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C1725 -
           (((C17239 * C3317 + C50866 * C3321 + C17238 * C1617 +
              C17233 * C1624) *
                 C50830 +
             (C17239 * C3312 + C50866 * C3318 + C17238 * C1612 +
              C17233 * C1618) *
                 C118) *
                C17237 +
            ((C17239 * C3316 + C50866 * C3320 + C17238 * C1619 +
              C17233 * C1625) *
                 C50830 +
             (C17239 * C3311 + C50866 * C3315 + C17238 * C1613 +
              C17233 * C1620) *
                 C118) *
                C17236 +
            ((C17239 * C3314 + C50866 * C3319 + C17238 * C1621 +
              C17233 * C1626) *
                 C50830 +
             (C17239 * C3310 + C50866 * C3313 + C17238 * C1614 +
              C17233 * C1622) *
                 C118) *
                C17235) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C1725 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C50718 * C1076 +
          ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
            ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
            ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
               C50798 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C1725) *
              C50718 * C1077 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C1725 -
           (((C17239 * C945 + C50866 * C951 + C17238 * C510 + C17233 * C521) *
                 C50830 +
             (C17239 * C936 + C50866 * C946 + C17238 * C491 + C17233 * C509) *
                 C118) *
                C17237 +
            ((C18011 + C18010) * C50830 + (C18009 + C18008) * C118) * C17236 +
            C18012 * C17235) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                C118 +
            (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                C50830) *
               C17235 +
           ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
           C17297 * C17237) *
              C1891 -
          (C18012 * C17237 +
           ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
           ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                C50830 +
            (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                C118) *
               C17235) *
              C1892 +
          (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                C118 +
            (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                C50830) *
               C17235 +
           ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
           ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
              C1893 -
          (((C17239 * C6141 + C50866 * C6143 + C17238 * C1901 +
             C17233 * C1908) *
                C50830 +
            (C17239 * C6140 + C50866 * C6142 + C17238 * C1896 +
             C17233 * C1902) *
                C118) *
               C17237 +
           ((C17239 * C4635 + C50866 * C4643 + C17238 * C1903 +
             C17233 * C1909) *
                C50830 +
            (C17239 * C4631 + C50866 * C4637 + C17238 * C1897 +
             C17233 * C1904) *
                C118) *
               C17236 +
           ((C17239 * C4639 + C50866 * C4645 + C17238 * C1905 +
             C17233 * C1910) *
                C50830 +
            (C17239 * C4633 + C50866 * C4641 + C17238 * C1898 +
             C17233 * C1906) *
                C118) *
               C17235) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C1725) *
              C50718 * C1077 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3317 + C20051 * C3321 + C20055 * C1617 + C20050 * C1624 +
             C20054 * C942 + C20049 * C949 + C20053 * C495 + C20048 * C514) *
                C50830 +
            (C20056 * C3312 + C20051 * C3318 + C20055 * C1612 + C20050 * C1618 +
             C20054 * C934 + C20049 * C941 + C20053 * C484 + C20048 * C496) *
                C118) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C289 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C1725) *
              C290 +
          (((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C21176 + C20051 * C21178 + C20055 * C4236 +
             C20050 * C4239 + C20054 * C3314 + C20049 * C3319 + C20053 * C1621 +
             C20048 * C1626) *
                C50830 +
            (C20056 * C21175 + C20051 * C21177 + C20055 * C4233 +
             C20050 * C4237 + C20054 * C3310 + C20049 * C3313 + C20053 * C1614 +
             C20048 * C1622) *
                C118) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
            C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
               C118 +
           (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
            C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
               C50830) *
              C50673 * C1891 -
          ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
            C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
               C50830 +
           (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
            C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
               C118) *
              C50673 * C1892 +
          ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
            C20055 * C2740 + C20050 * C2743 + C20056 * C3739 + C20051 * C3743) *
               C118 +
           (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
            C20055 * C2744 + C20050 * C2749 + C20056 * C3742 + C20051 * C3745) *
               C50830) *
              C50673 * C1893 -
          ((C20056 * C21442 + C20051 * C21444 + C20055 * C4638 +
            C20050 * C4644 + C20054 * C4639 + C20049 * C4645 + C20053 * C1905 +
            C20048 * C1910) *
               C50830 +
           (C20056 * C21441 + C20051 * C21443 + C20055 * C4632 +
            C20050 * C4640 + C20054 * C4633 + C20049 * C4641 + C20053 * C1898 +
            C20048 * C1906) *
               C118) *
              C50673 * C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C51006 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C51007 +
           (((C17238 * C487 + C17233 * C501 + C17239 * C1267 + C50866 * C1275) *
                 C118 +
             (C17238 * C502 + C17233 * C517 + C17239 * C1274 + C50866 * C1279) *
                 C50830) *
                C17235 +
            ((C17679 + C17680) * C118 + (C17681 + C17682) * C50830) * C17236 +
            ((C17683 + C17684) * C118 + (C17685 + C17686) * C50830) * C17237) *
               C2141) *
              C50718 * C50951 +
          ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
            ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
            ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
               C51007 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C51006 -
           (((C17239 * C1268 + C50866 * C1276 + C17238 * C508 + C17233 * C520) *
                 C50830 +
             (C17239 * C1264 + C50866 * C1269 + C17238 * C490 + C17233 * C507) *
                 C118) *
                C17237 +
            ((C17686 + C17685) * C50830 + (C17684 + C17683) * C118) * C17236 +
            ((C17682 + C17681) * C50830 + (C17680 + C17679) * C118) * C17235) *
               C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C51006 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C51007 +
           ((C20053 * C487 + C20048 * C501 + C20054 * C1267 + C20049 * C1275 +
             C20055 * C2740 + C20050 * C2743 + C20056 * C3739 +
             C20051 * C3743) *
                C118 +
            (C20053 * C502 + C20048 * C517 + C20054 * C1274 + C20049 * C1279 +
             C20055 * C2744 + C20050 * C2749 + C20056 * C3742 +
             C20051 * C3745) *
                C50830) *
               C50673 * C2141) *
              C50718 * C50951 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C51007 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C51006 -
           ((C20056 * C3740 + C20051 * C3744 + C20055 * C2746 + C20050 * C2750 +
             C20054 * C1272 + C20049 * C1278 + C20053 * C504 + C20048 * C518) *
                C50830 +
            (C20056 * C3738 + C20051 * C3741 + C20055 * C2741 + C20050 * C2745 +
             C20054 * C1266 + C20049 * C1273 + C20053 * C488 + C20048 * C503) *
                C118) *
               C50673 * C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C1725 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C50718 * C1076 +
          ((((C17678 + C17677) * C118 + (C17676 + C17675) * C50830) * C17235 +
            ((C17674 + C17673) * C118 + (C17672 + C17671) * C50830) * C17236 +
            ((C18008 + C18009) * C118 + (C18010 + C18011) * C50830) * C17237) *
               C50798 -
           (C17298 * C17237 +
            ((C17280 + C17279) * C50830 + (C17278 + C17277) * C118) * C17236 +
            ((C17276 + C17275) * C50830 + (C17274 + C17273) * C118) * C17235) *
               C1725) *
              C50718 * C1077 +
          ((C17297 * C17235 +
            ((C17284 + C17283) * C118 + (C17282 + C17281) * C50830) * C17236 +
            ((C17285 + C17286) * C118 + (C17287 + C17288) * C50830) * C17237) *
               C1725 -
           (((C17239 * C945 + C50866 * C951 + C17238 * C510 + C17233 * C521) *
                 C50830 +
             (C17239 * C936 + C50866 * C946 + C17238 * C491 + C17233 * C509) *
                 C118) *
                C17237 +
            ((C18011 + C18010) * C50830 + (C18009 + C18008) * C118) * C17236 +
            C18012 * C17235) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C17238 * C119 + C17233 * C126 + C17239 * C297 + C50866 * C311) *
                 C118 +
             (C17238 * C127 + C17233 * C140 + C17239 * C310 + C50866 * C327) *
                 C50830) *
                C17235 +
            ((C17273 + C17274) * C118 + (C17275 + C17276) * C50830) * C17236 +
            C17297 * C17237) *
               C1725 -
           (C18012 * C17237 +
            ((C17675 + C17676) * C50830 + (C17677 + C17678) * C118) * C17236 +
            ((C17239 * C938 + C50866 * C947 + C17238 * C499 + C17233 * C516) *
                 C50830 +
             (C17239 * C932 + C50866 * C937 + C17238 * C486 + C17233 * C500) *
                 C118) *
                C17235) *
               C50798) *
              C289 +
          ((((C17238 * C932 + C17233 * C937 + C17239 * C1614 + C50866 * C1622) *
                 C118 +
             (C17238 * C938 + C17233 * C947 + C17239 * C1621 + C50866 * C1626) *
                 C50830) *
                C17235 +
            ((C18223 + C18224) * C118 + (C18225 + C18226) * C50830) * C17236 +
            ((C18227 + C18228) * C118 + (C18229 + C18230) * C50830) * C17237) *
               C50798 -
           (C17849 * C17237 +
            ((C17481 + C17482) * C50830 + (C17483 + C17484) * C118) * C17236 +
            ((C17239 * C313 + C50866 * C328 + C17238 * C310 + C17233 * C327) *
                 C50830 +
             (C17239 * C298 + C50866 * C312 + C17238 * C297 + C17233 * C311) *
                 C118) *
                C17235) *
               C1725) *
              C290 +
          ((((C17238 * C298 + C17233 * C312 + C17239 * C1153 + C50866 * C1161) *
                 C118 +
             (C17238 * C313 + C17233 * C328 + C17239 * C1160 + C50866 * C1165) *
                 C50830) *
                C17235 +
            ((C17485 + C17486) * C118 + (C17487 + C17488) * C50830) * C17236 +
            ((C17489 + C17490) * C118 + (C17491 + C17492) * C50830) * C17237) *
               C1725 -
           (((C17239 * C3317 + C50866 * C3321 + C17238 * C1617 +
              C17233 * C1624) *
                 C50830 +
             (C17239 * C3312 + C50866 * C3318 + C17238 * C1612 +
              C17233 * C1618) *
                 C118) *
                C17237 +
            ((C17239 * C3316 + C50866 * C3320 + C17238 * C1619 +
              C17233 * C1625) *
                 C50830 +
             (C17239 * C3311 + C50866 * C3315 + C17238 * C1613 +
              C17233 * C1620) *
                 C118) *
                C17236 +
            ((C17239 * C3314 + C50866 * C3319 + C17238 * C1621 +
              C17233 * C1626) *
                 C50830 +
             (C17239 * C3310 + C50866 * C3313 + C17238 * C1614 +
              C17233 * C1622) *
                 C118) *
                C17235) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C20053 * C485 + C20048 * C498 + C20054 * C933 + C20049 * C939 +
             C20055 * C1613 + C20050 * C1620 + C20056 * C3311 +
             C20051 * C3315) *
                C118 +
            (C20053 * C497 + C20048 * C515 + C20054 * C940 + C20049 * C948 +
             C20055 * C1619 + C20050 * C1625 + C20056 * C3316 +
             C20051 * C3320) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C1158 + C20051 * C1164 + C20055 * C315 + C20050 * C329 +
             C20054 * C308 + C20049 * C326 + C20053 * C129 + C20048 * C141) *
                C50830 +
            (C20056 * C1152 + C20051 * C1159 + C20055 * C299 + C20050 * C314 +
             C20054 * C296 + C20049 * C309 + C20053 * C120 + C20048 * C128) *
                C118) *
               C50673 * C1725) *
              C50718 * C1077 +
          (((C20053 * C121 + C20048 * C130 + C20054 * C295 + C20049 * C307 +
             C20055 * C300 + C20050 * C316 + C20056 * C1151 + C20051 * C1157) *
                C118 +
            (C20053 * C131 + C20048 * C142 + C20054 * C306 + C20049 * C325 +
             C20055 * C317 + C20050 * C330 + C20056 * C1156 + C20051 * C1163) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3317 + C20051 * C3321 + C20055 * C1617 + C20050 * C1624 +
             C20054 * C942 + C20049 * C949 + C20053 * C495 + C20048 * C514) *
                C50830 +
            (C20056 * C3312 + C20051 * C3318 + C20055 * C1612 + C20050 * C1618 +
             C20054 * C934 + C20049 * C941 + C20053 * C484 + C20048 * C496) *
                C118) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C20053 * C119 + C20048 * C126 + C20054 * C297 + C20049 * C311 +
             C20055 * C298 + C20050 * C312 + C20056 * C1153 + C20051 * C1161) *
                C118 +
            (C20053 * C127 + C20048 * C140 + C20054 * C310 + C20049 * C327 +
             C20055 * C313 + C20050 * C328 + C20056 * C1160 + C20051 * C1165) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C3314 + C20051 * C3319 + C20055 * C1621 + C20050 * C1626 +
             C20054 * C938 + C20049 * C947 + C20053 * C499 + C20048 * C516) *
                C50830 +
            (C20056 * C3310 + C20051 * C3313 + C20055 * C1614 + C20050 * C1622 +
             C20054 * C932 + C20049 * C937 + C20053 * C486 + C20048 * C500) *
                C118) *
               C50673 * C50798) *
              C289 +
          (((C20053 * C932 + C20048 * C937 + C20054 * C1614 + C20049 * C1622 +
             C20055 * C3310 + C20050 * C3313 + C20056 * C4233 +
             C20051 * C4237) *
                C118 +
            (C20053 * C938 + C20048 * C947 + C20054 * C1621 + C20049 * C1626 +
             C20055 * C3314 + C20050 * C3319 + C20056 * C4236 +
             C20051 * C4239) *
                C50830) *
               C50673 * C50798 -
           ((C20056 * C2550 + C20051 * C2555 + C20055 * C1160 + C20050 * C1165 +
             C20054 * C313 + C20049 * C328 + C20053 * C310 + C20048 * C327) *
                C50830 +
            (C20056 * C2546 + C20051 * C2549 + C20055 * C1153 + C20050 * C1161 +
             C20054 * C298 + C20049 * C312 + C20053 * C297 + C20048 * C311) *
                C118) *
               C50673 * C1725) *
              C290 +
          (((C20053 * C298 + C20048 * C312 + C20054 * C1153 + C20049 * C1161 +
             C20055 * C2546 + C20050 * C2549 + C20056 * C3585 +
             C20051 * C3589) *
                C118 +
            (C20053 * C313 + C20048 * C328 + C20054 * C1160 + C20049 * C1165 +
             C20055 * C2550 + C20050 * C2555 + C20056 * C3588 +
             C20051 * C3591) *
                C50830) *
               C50673 * C1725 -
           ((C20056 * C21176 + C20051 * C21178 + C20055 * C4236 +
             C20050 * C4239 + C20054 * C3314 + C20049 * C3319 + C20053 * C1621 +
             C20048 * C1626) *
                C50830 +
            (C20056 * C21175 + C20051 * C21177 + C20055 * C4233 +
             C20050 * C4237 + C20054 * C3310 + C20049 * C3313 + C20053 * C1614 +
             C20048 * C1622) *
                C118) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C50734 * C50959 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C50734 * C50770) *
              C51002 +
          ((((C8309 + C8308) * C33715 + (C8307 + C8306) * C33713 +
             C14752 * C33716 + C14753 * C50894) *
                C50944 +
            ((C8305 + C8304) * C33715 + (C8303 + C8302) * C33713 +
             (C9052 + C9053) * C33716 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C50770 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C50734 * C50959) *
              C51003 +
          (((C8114 * C33715 + C8115 * C33713 + C14484 * C33716 +
             C14485 * C50894) *
                C50944 +
            ((C8109 + C8108) * C33715 + (C8107 + C8106) * C33713 +
             (C8833 + C8834) * C33716 + (C8835 + C8836) * C50894) *
                C50678) *
               C50734 * C50959 -
           (((C8064 * C1615 + C50866 * C1623 + C8063 * C944 + C50972 * C950) *
                 C50894 +
             (C8064 * C1611 + C50866 * C1616 + C8063 * C935 + C50972 * C943) *
                 C33716 +
             (C8673 + C8672) * C33713 + (C8671 + C8670) * C33715) *
                C50678 +
            ((C9055 + C9054) * C50894 + (C9053 + C9052) * C33716 +
             C8658 * C33713 + C8659 * C33715) *
                C50944) *
               C50734 * C50770) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                  C33715 +
              (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                  C33713 +
              (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                 C50944 +
             ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
              C14060 * C33716 + C14061 * C50894) *
                 C50678) *
                C50960 -
            ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
              C14065 * C33715) *
                 C50678 +
             ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
              (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                 C50944) *
                C50798) *
               C50959 +
           ((((C14764 + C14765) * C33715 + (C14766 + C14767) * C33713 +
              (C15298 + C15299) * C33716 + (C15300 + C15301) * C50894) *
                 C50944 +
             (C14752 * C33715 + C14753 * C33713 + (C14768 + C14769) * C33716 +
              (C14770 + C14771) * C50894) *
                 C50678) *
                C50798 -
            ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
              (C8308 + C8309) * C33715) *
                 C50678 +
             ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
              (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                  C33713 +
              (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                  C33715) *
                 C50944) *
                C50960) *
               C50770) *
              C292 +
          ((((C14060 * C33715 + C14061 * C33713 + C14074 * C33716 +
              C14075 * C50894) *
                 C50944 +
             (C14484 * C33715 + C14485 * C33713 + (C8508 + C8509) * C33716 +
              (C8510 + C8511) * C50894) *
                 C50678) *
                C50798 -
            ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
              (C8103 + C8102) * C33715) *
                 C50678 +
             (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
              (C8099 + C8098) * C33715) *
                 C50944) *
                C50960) *
               C50959 +
           ((((C8309 + C8308) * C33715 + (C8307 + C8306) * C33713 +
              C14752 * C33716 + C14753 * C50894) *
                 C50944 +
             ((C8305 + C8304) * C33715 + (C8303 + C8302) * C33713 +
              (C9052 + C9053) * C33716 + (C9054 + C9055) * C50894) *
                 C50678) *
                C50960 -
            (((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 +
               C50972 * C1277) *
                  C50894 +
              (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 +
               C50972 * C1271) *
                  C33716 +
              (C9055 + C9054) * C33713 + (C9053 + C9052) * C33715) *
                 C50678 +
             ((C14771 + C14770) * C50894 + (C14769 + C14768) * C33716 +
              C14762 * C33713 + C14763 * C33715) *
                 C50944) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C50734 * C289 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C50734 * C290 +
           (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C33715 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C33713 +
             (C15956 + C15957) * C33716 + (C15958 + C15959) * C50894) *
                C50944 +
            ((C8310 + C8311) * C33715 + (C8312 + C8313) * C33713 +
             (C13854 + C13855) * C33716 + (C13856 + C13857) * C50894) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C8309 + C8308) * C33715 + (C8307 + C8306) * C33713 +
             C14752 * C33716 + C14753 * C50894) *
                C50944 +
            ((C8305 + C8304) * C33715 + (C8303 + C8302) * C33713 +
             (C9052 + C9053) * C33716 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C290 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C50734 * C289 -
           (((C8064 * C3317 + C50866 * C3321 + C8063 * C1617 + C50972 * C1624) *
                 C50894 +
             (C8064 * C3312 + C50866 * C3318 + C8063 * C1612 + C50972 * C1618) *
                 C33716 +
             (C8317 + C8316) * C33713 + (C8315 + C8314) * C33715) *
                C50678 +
            ((C13857 + C13856) * C50894 + (C13855 + C13854) * C33716 +
             (C8313 + C8312) * C33713 + (C8311 + C8310) * C33715) *
                C50944) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C33715 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C33713 +
            (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
               C50944 +
           ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
            C14060 * C33716 + C14061 * C50894) *
               C50678) *
              C50734 * C50718 * C113 -
          ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
            (C8103 + C8102) * C33715) *
               C50678 +
           (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
            (C8099 + C8098) * C33715) *
               C50944) *
              C50734 * C50718 * C114 +
          ((C8114 * C33715 + C8115 * C33713 + C14484 * C33716 +
            C14485 * C50894) *
               C50944 +
           ((C8109 + C8108) * C33715 + (C8107 + C8106) * C33713 +
            (C8833 + C8834) * C33716 + (C8835 + C8836) * C50894) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C8064 * C945 + C50866 * C951 + C8063 * C510 + C50972 * C521) *
                C50894 +
            (C8064 * C936 + C50866 * C946 + C8063 * C491 + C50972 * C509) *
                C33716 +
            (C8113 + C8112) * C33713 + (C8111 + C8110) * C33715) *
               C50678 +
           ((C8836 + C8835) * C50894 + (C8834 + C8833) * C33716 +
            C8116 * C33713 + C8117 * C33715) *
               C50944) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C480 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C481 +
           (((C14091 + C14090) * C33715 + (C14089 + C14088) * C33713 +
             (C16486 + C16487) * C33716 + (C16488 + C16489) * C50894) *
                C50944 +
            (C14074 * C33715 + C14075 * C33713 + (C14092 + C14093) * C33716 +
             (C14094 + C14095) * C50894) *
                C50678) *
               C482) *
              C50718 * C292 +
          (((C14060 * C33715 + C14061 * C33713 + C14074 * C33716 +
             C14075 * C50894) *
                C50944 +
            (C14484 * C33715 + C14485 * C33713 + (C8508 + C8509) * C33716 +
             (C8510 + C8511) * C50894) *
                C50678) *
               C481 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C480 -
           (((C8064 * C6141 + C50866 * C6143 + C8063 * C1901 + C50972 * C1908) *
                 C50894 +
             (C8064 * C6140 + C50866 * C6142 + C8063 * C1896 + C50972 * C1902) *
                 C33716 +
             (C8511 + C8510) * C33713 + (C8509 + C8508) * C33715) *
                C50678 +
            ((C14095 + C14094) * C50894 + (C14093 + C14092) * C33716 +
             C14062 * C33713 + C14063 * C33715) *
                C50944) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C50960 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C50798) *
              C50718 * C51002 +
          (((C14060 * C33715 + C14061 * C33713 + C14074 * C33716 +
             C14075 * C50894) *
                C50944 +
            (C14484 * C33715 + C14485 * C33713 + (C8508 + C8509) * C33716 +
             (C8510 + C8511) * C50894) *
                C50678) *
               C50798 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C50960) *
              C50718 * C51003 +
          (((C8114 * C33715 + C8115 * C33713 + C14484 * C33716 +
             C14485 * C50894) *
                C50944 +
            ((C8109 + C8108) * C33715 + (C8107 + C8106) * C33713 +
             (C8833 + C8834) * C33716 + (C8835 + C8836) * C50894) *
                C50678) *
               C50960 -
           (((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
                 C50894 +
             (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
                 C33716 +
             (C8836 + C8835) * C33713 + (C8834 + C8833) * C33715) *
                C50678 +
            ((C8511 + C8510) * C50894 + (C8509 + C8508) * C33716 +
             C8821 * C33713 + C8822 * C33715) *
                C50944) *
               C50798) *
              C50718 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C33715 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C33713 +
            (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
               C50944 +
           ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
            C14060 * C33716 + C14061 * C50894) *
               C50678) *
              C50734 * C50718 * C113 -
          ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
            (C8103 + C8102) * C33715) *
               C50678 +
           (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
            (C8099 + C8098) * C33715) *
               C50944) *
              C50734 * C50718 * C114 +
          ((C8114 * C33715 + C8115 * C33713 + C14484 * C33716 +
            C14485 * C50894) *
               C50944 +
           ((C8109 + C8108) * C33715 + (C8107 + C8106) * C33713 +
            (C8833 + C8834) * C33716 + (C8835 + C8836) * C50894) *
               C50678) *
              C50734 * C50718 * C115 -
          (((C8064 * C945 + C50866 * C951 + C8063 * C510 + C50972 * C521) *
                C50894 +
            (C8064 * C936 + C50866 * C946 + C8063 * C491 + C50972 * C509) *
                C33716 +
            (C8113 + C8112) * C33713 + (C8111 + C8110) * C33715) *
               C50678 +
           ((C8836 + C8835) * C50894 + (C8834 + C8833) * C33716 +
            C8116 * C33713 + C8117 * C33715) *
               C50944) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C50734 * C289 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C50734 * C290 +
           (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C33715 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C33713 +
             (C15956 + C15957) * C33716 + (C15958 + C15959) * C50894) *
                C50944 +
            ((C8310 + C8311) * C33715 + (C8312 + C8313) * C33713 +
             (C13854 + C13855) * C33716 + (C13856 + C13857) * C50894) *
                C50678) *
               C50734 * C291) *
              C292 +
          ((((C8309 + C8308) * C33715 + (C8307 + C8306) * C33713 +
             C14752 * C33716 + C14753 * C50894) *
                C50944 +
            ((C8305 + C8304) * C33715 + (C8303 + C8302) * C33713 +
             (C9052 + C9053) * C33716 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C290 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C50734 * C289 -
           (((C8064 * C3317 + C50866 * C3321 + C8063 * C1617 + C50972 * C1624) *
                 C50894 +
             (C8064 * C3312 + C50866 * C3318 + C8063 * C1612 + C50972 * C1618) *
                 C33716 +
             (C8317 + C8316) * C33713 + (C8315 + C8314) * C33715) *
                C50678 +
            ((C13857 + C13856) * C50894 + (C13855 + C13854) * C33716 +
             (C8313 + C8312) * C33713 + (C8311 + C8310) * C33715) *
                C50944) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C50734 * C51004 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C50734 * C51005 +
           (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C33715 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C33713 +
             (C15956 + C15957) * C33716 + (C15958 + C15959) * C50894) *
                C50944 +
            ((C8310 + C8311) * C33715 + (C8312 + C8313) * C33713 +
             (C13854 + C13855) * C33716 + (C13856 + C13857) * C50894) *
                C50678) *
               C50734 * C1380) *
              C50951 +
          ((((C8309 + C8308) * C33715 + (C8307 + C8306) * C33713 +
             C14752 * C33716 + C14753 * C50894) *
                C50944 +
            ((C8305 + C8304) * C33715 + (C8303 + C8302) * C33713 +
             (C9052 + C9053) * C33716 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C51005 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C50734 * C51004 -
           (((C8064 * C3317 + C50866 * C3321 + C8063 * C1617 + C50972 * C1624) *
                 C50894 +
             (C8064 * C3312 + C50866 * C3318 + C8063 * C1612 + C50972 * C1618) *
                 C33716 +
             (C8317 + C8316) * C33713 + (C8315 + C8314) * C33715) *
                C50678 +
            ((C13857 + C13856) * C50894 + (C13855 + C13854) * C33716 +
             (C8313 + C8312) * C33713 + (C8311 + C8310) * C33715) *
                C50944) *
               C50734 * C1380) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C50960 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C50798) *
              C51004 +
          ((((C14764 + C14765) * C33715 + (C14766 + C14767) * C33713 +
             (C15298 + C15299) * C33716 + (C15300 + C15301) * C50894) *
                C50944 +
            (C14752 * C33715 + C14753 * C33713 + (C14768 + C14769) * C33716 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C50798 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C50960) *
              C51005 +
          ((((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C33715 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C33713 +
             (C15956 + C15957) * C33716 + (C15958 + C15959) * C50894) *
                C50944 +
            ((C8310 + C8311) * C33715 + (C8312 + C8313) * C33713 +
             (C13854 + C13855) * C33716 + (C13856 + C13857) * C50894) *
                C50678) *
               C50960 -
           (((C8064 * C3740 + C50866 * C3744 + C8063 * C2746 + C50972 * C2750) *
                 C50894 +
             (C8064 * C3738 + C50866 * C3741 + C8063 * C2741 + C50972 * C2745) *
                 C33716 +
             (C13857 + C13856) * C33713 + (C13855 + C13854) * C33715) *
                C50678 +
            ((C8064 * C3742 + C50866 * C3745 + C8063 * C2744 + C50972 * C2749) *
                 C50894 +
             (C8064 * C3739 + C50866 * C3743 + C8063 * C2740 + C50972 * C2743) *
                 C33716 +
             (C15959 + C15958) * C33713 + (C15957 + C15956) * C33715) *
                C50944) *
               C50798) *
              C1380) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C33715 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C33713 +
            (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
               C50944 +
           ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
            C14060 * C33716 + C14061 * C50894) *
               C50678) *
              C50734 * C1145 -
          ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
            (C8308 + C8309) * C33715) *
               C50678 +
           ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C33713 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C33715) *
               C50944) *
              C50734 * C1146 +
          (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C33715 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C33713 +
            (C15956 + C15957) * C33716 + (C15958 + C15959) * C50894) *
               C50944 +
           ((C8310 + C8311) * C33715 + (C8312 + C8313) * C33713 +
            (C13854 + C13855) * C33716 + (C13856 + C13857) * C50894) *
               C50678) *
              C50734 * C1147 -
          (((C8064 * C4234 + C50866 * C4238 + C8063 * C3316 + C50972 * C3320) *
                C50894 +
            (C8064 * C4232 + C50866 * C4235 + C8063 * C3311 + C50972 * C3315) *
                C33716 +
            (C8064 * C2552 + C50866 * C2556 + C8063 * C1158 + C50972 * C1164) *
                C33713 +
            (C8064 * C2547 + C50866 * C2551 + C8063 * C1152 + C50972 * C1159) *
                C33715) *
               C50678 +
           ((C8064 * C4236 + C50866 * C4239 + C8063 * C3314 + C50972 * C3319) *
                C50894 +
            (C8064 * C4233 + C50866 * C4237 + C8063 * C3310 + C50972 * C3313) *
                C33716 +
            (C8064 * C2550 + C50866 * C2555 + C8063 * C1160 + C50972 * C1165) *
                C33713 +
            (C8064 * C2546 + C50866 * C2549 + C8063 * C1153 + C50972 * C1161) *
                C33715) *
               C50944) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C50734 * C1074 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C50734 * C50770) *
              C1076 +
          ((((C8309 + C8308) * C33715 + (C8307 + C8306) * C33713 +
             C14752 * C33716 + C14753 * C50894) *
                C50944 +
            ((C8305 + C8304) * C33715 + (C8303 + C8302) * C33713 +
             (C9052 + C9053) * C33716 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C50770 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C50734 * C1074) *
              C1077 +
          (((C8114 * C33715 + C8115 * C33713 + C14484 * C33716 +
             C14485 * C50894) *
                C50944 +
            ((C8109 + C8108) * C33715 + (C8107 + C8106) * C33713 +
             (C8833 + C8834) * C33716 + (C8835 + C8836) * C50894) *
                C50678) *
               C50734 * C1074 -
           (((C8064 * C1615 + C50866 * C1623 + C8063 * C944 + C50972 * C950) *
                 C50894 +
             (C8064 * C1611 + C50866 * C1616 + C8063 * C935 + C50972 * C943) *
                 C33716 +
             (C8673 + C8672) * C33713 + (C8671 + C8670) * C33715) *
                C50678 +
            ((C9055 + C9054) * C50894 + (C9053 + C9052) * C33716 +
             C8658 * C33713 + C8659 * C33715) *
                C50944) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C480 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C481 +
           (((C14091 + C14090) * C33715 + (C14089 + C14088) * C33713 +
             (C16486 + C16487) * C33716 + (C16488 + C16489) * C50894) *
                C50944 +
            (C14074 * C33715 + C14075 * C33713 + (C14092 + C14093) * C33716 +
             (C14094 + C14095) * C50894) *
                C50678) *
               C482) *
              C1074 +
          ((((C14764 + C14765) * C33715 + (C14766 + C14767) * C33713 +
             (C15298 + C15299) * C33716 + (C15300 + C15301) * C50894) *
                C50944 +
            (C14752 * C33715 + C14753 * C33713 + (C14768 + C14769) * C33716 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C481 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C480 -
           (((C8064 * C4634 + C50866 * C4642 + C8063 * C4635 + C50972 * C4643) *
                 C50894 +
             (C8064 * C4630 + C50866 * C4636 + C8063 * C4631 + C50972 * C4637) *
                 C33716 +
             (C14771 + C14770) * C33713 + (C14769 + C14768) * C33715) *
                C50678 +
            ((C8064 * C4638 + C50866 * C4644 + C8063 * C4639 + C50972 * C4645) *
                 C50894 +
             (C8064 * C4632 + C50866 * C4640 + C8063 * C4633 + C50972 * C4641) *
                 C33716 +
             (C15301 + C15300) * C33713 + (C15299 + C15298) * C33715) *
                C50944) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                  C33715 +
              (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                  C33713 +
              (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                 C50944 +
             ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
              C14060 * C33716 + C14061 * C50894) *
                 C50678) *
                C50960 -
            ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
              C14065 * C33715) *
                 C50678 +
             ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
              (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                 C50944) *
                C50798) *
               C1074 +
           ((((C14764 + C14765) * C33715 + (C14766 + C14767) * C33713 +
              (C15298 + C15299) * C33716 + (C15300 + C15301) * C50894) *
                 C50944 +
             (C14752 * C33715 + C14753 * C33713 + (C14768 + C14769) * C33716 +
              (C14770 + C14771) * C50894) *
                 C50678) *
                C50798 -
            ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
              (C8308 + C8309) * C33715) *
                 C50678 +
             ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
              (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                  C33713 +
              (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                  C33715) *
                 C50944) *
                C50960) *
               C50770) *
              C50951 +
          ((((C14060 * C33715 + C14061 * C33713 + C14074 * C33716 +
              C14075 * C50894) *
                 C50944 +
             (C14484 * C33715 + C14485 * C33713 + (C8508 + C8509) * C33716 +
              (C8510 + C8511) * C50894) *
                 C50678) *
                C50798 -
            ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
              (C8103 + C8102) * C33715) *
                 C50678 +
             (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
              (C8099 + C8098) * C33715) *
                 C50944) *
                C50960) *
               C1074 +
           ((((C8309 + C8308) * C33715 + (C8307 + C8306) * C33713 +
              C14752 * C33716 + C14753 * C50894) *
                 C50944 +
             ((C8305 + C8304) * C33715 + (C8303 + C8302) * C33713 +
              (C9052 + C9053) * C33716 + (C9054 + C9055) * C50894) *
                 C50678) *
                C50960 -
            (((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 +
               C50972 * C1277) *
                  C50894 +
              (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 +
               C50972 * C1271) *
                  C33716 +
              (C9055 + C9054) * C33713 + (C9053 + C9052) * C33715) *
                 C50678 +
             ((C14771 + C14770) * C50894 + (C14769 + C14768) * C33716 +
              C14762 * C33713 + C14763 * C33715) *
                 C50944) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C50734 * C1074 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C50734 * C50770) *
              C1076 +
          ((((C8309 + C8308) * C33715 + (C8307 + C8306) * C33713 +
             C14752 * C33716 + C14753 * C50894) *
                C50944 +
            ((C8305 + C8304) * C33715 + (C8303 + C8302) * C33713 +
             (C9052 + C9053) * C33716 + (C9054 + C9055) * C50894) *
                C50678) *
               C50734 * C50770 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C50734 * C1074) *
              C1077 +
          (((C8114 * C33715 + C8115 * C33713 + C14484 * C33716 +
             C14485 * C50894) *
                C50944 +
            ((C8109 + C8108) * C33715 + (C8107 + C8106) * C33713 +
             (C8833 + C8834) * C33716 + (C8835 + C8836) * C50894) *
                C50678) *
               C50734 * C1074 -
           (((C8064 * C1615 + C50866 * C1623 + C8063 * C944 + C50972 * C950) *
                 C50894 +
             (C8064 * C1611 + C50866 * C1616 + C8063 * C935 + C50972 * C943) *
                 C33716 +
             (C8673 + C8672) * C33713 + (C8671 + C8670) * C33715) *
                C50678 +
            ((C9055 + C9054) * C50894 + (C9053 + C9052) * C33716 +
             C8658 * C33713 + C8659 * C33715) *
                C50944) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C33715 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C33713 +
            (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
               C50944 +
           ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
            C14060 * C33716 + C14061 * C50894) *
               C50678) *
              C50734 * C1145 -
          ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
            (C8308 + C8309) * C33715) *
               C50678 +
           ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C33713 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C33715) *
               C50944) *
              C50734 * C1146 +
          (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C33715 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C33713 +
            (C15956 + C15957) * C33716 + (C15958 + C15959) * C50894) *
               C50944 +
           ((C8310 + C8311) * C33715 + (C8312 + C8313) * C33713 +
            (C13854 + C13855) * C33716 + (C13856 + C13857) * C50894) *
               C50678) *
              C50734 * C1147 -
          (((C8064 * C4234 + C50866 * C4238 + C8063 * C3316 + C50972 * C3320) *
                C50894 +
            (C8064 * C4232 + C50866 * C4235 + C8063 * C3311 + C50972 * C3315) *
                C33716 +
            (C8064 * C2552 + C50866 * C2556 + C8063 * C1158 + C50972 * C1164) *
                C33713 +
            (C8064 * C2547 + C50866 * C2551 + C8063 * C1152 + C50972 * C1159) *
                C33715) *
               C50678 +
           ((C8064 * C4236 + C50866 * C4239 + C8063 * C3314 + C50972 * C3319) *
                C50894 +
            (C8064 * C4233 + C50866 * C4237 + C8063 * C3310 + C50972 * C3313) *
                C33716 +
            (C8064 * C2550 + C50866 * C2555 + C8063 * C1160 + C50972 * C1165) *
                C33713 +
            (C8064 * C2546 + C50866 * C2549 + C8063 * C1153 + C50972 * C1161) *
                C33715) *
               C50944) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                  C33715 +
              (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                  C33713 +
              (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                 C50944 +
             ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
              C14060 * C33716 + C14061 * C50894) *
                 C50678) *
                C1725 -
            ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
              C14065 * C33715) *
                 C50678 +
             ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
              (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                 C50944) *
                C50798) *
               C50959 +
           ((((C14764 + C14765) * C33715 + (C14766 + C14767) * C33713 +
              (C15298 + C15299) * C33716 + (C15300 + C15301) * C50894) *
                 C50944 +
             (C14752 * C33715 + C14753 * C33713 + (C14768 + C14769) * C33716 +
              (C14770 + C14771) * C50894) *
                 C50678) *
                C50798 -
            ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
              (C8308 + C8309) * C33715) *
                 C50678 +
             ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
              (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                  C33713 +
              (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                  C33715) *
                 C50944) *
                C1725) *
               C50770) *
              C50951 +
          ((((C14060 * C33715 + C14061 * C33713 + C14074 * C33716 +
              C14075 * C50894) *
                 C50944 +
             (C14484 * C33715 + C14485 * C33713 + (C8508 + C8509) * C33716 +
              (C8510 + C8511) * C50894) *
                 C50678) *
                C50798 -
            ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
              (C8103 + C8102) * C33715) *
                 C50678 +
             (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
              (C8099 + C8098) * C33715) *
                 C50944) *
                C1725) *
               C50959 +
           ((((C8309 + C8308) * C33715 + (C8307 + C8306) * C33713 +
              C14752 * C33716 + C14753 * C50894) *
                 C50944 +
             ((C8305 + C8304) * C33715 + (C8303 + C8302) * C33713 +
              (C9052 + C9053) * C33716 + (C9054 + C9055) * C50894) *
                 C50678) *
                C1725 -
            (((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 +
               C50972 * C1277) *
                  C50894 +
              (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 +
               C50972 * C1271) *
                  C33716 +
              (C9055 + C9054) * C33713 + (C9053 + C9052) * C33715) *
                 C50678 +
             ((C14771 + C14770) * C50894 + (C14769 + C14768) * C33716 +
              C14762 * C33713 + C14763 * C33715) *
                 C50944) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C51006 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C51007 +
           (((C14091 + C14090) * C33715 + (C14089 + C14088) * C33713 +
             (C16486 + C16487) * C33716 + (C16488 + C16489) * C50894) *
                C50944 +
            (C14074 * C33715 + C14075 * C33713 + (C14092 + C14093) * C33716 +
             (C14094 + C14095) * C50894) *
                C50678) *
               C2141) *
              C50959 +
          ((((C14764 + C14765) * C33715 + (C14766 + C14767) * C33713 +
             (C15298 + C15299) * C33716 + (C15300 + C15301) * C50894) *
                C50944 +
            (C14752 * C33715 + C14753 * C33713 + (C14768 + C14769) * C33716 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C51007 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C51006 -
           (((C8064 * C4634 + C50866 * C4642 + C8063 * C4635 + C50972 * C4643) *
                 C50894 +
             (C8064 * C4630 + C50866 * C4636 + C8063 * C4631 + C50972 * C4637) *
                 C33716 +
             (C14771 + C14770) * C33713 + (C14769 + C14768) * C33715) *
                C50678 +
            ((C8064 * C4638 + C50866 * C4644 + C8063 * C4639 + C50972 * C4645) *
                 C50894 +
             (C8064 * C4632 + C50866 * C4640 + C8063 * C4633 + C50972 * C4641) *
                 C33716 +
             (C15301 + C15300) * C33713 + (C15299 + C15298) * C33715) *
                C50944) *
               C2141) *
              C50770) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C1725 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C50798) *
              C289 +
          ((((C14764 + C14765) * C33715 + (C14766 + C14767) * C33713 +
             (C15298 + C15299) * C33716 + (C15300 + C15301) * C50894) *
                C50944 +
            (C14752 * C33715 + C14753 * C33713 + (C14768 + C14769) * C33716 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C50798 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C1725) *
              C290 +
          ((((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C33715 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C33713 +
             (C15956 + C15957) * C33716 + (C15958 + C15959) * C50894) *
                C50944 +
            ((C8310 + C8311) * C33715 + (C8312 + C8313) * C33713 +
             (C13854 + C13855) * C33716 + (C13856 + C13857) * C50894) *
                C50678) *
               C1725 -
           (((C8064 * C3740 + C50866 * C3744 + C8063 * C2746 + C50972 * C2750) *
                 C50894 +
             (C8064 * C3738 + C50866 * C3741 + C8063 * C2741 + C50972 * C2745) *
                 C33716 +
             (C13857 + C13856) * C33713 + (C13855 + C13854) * C33715) *
                C50678 +
            ((C8064 * C3742 + C50866 * C3745 + C8063 * C2744 + C50972 * C2749) *
                 C50894 +
             (C8064 * C3739 + C50866 * C3743 + C8063 * C2740 + C50972 * C2743) *
                 C33716 +
             (C15959 + C15958) * C33713 + (C15957 + C15956) * C33715) *
                C50944) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C1725 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C50798) *
              C50718 * C1076 +
          (((C14060 * C33715 + C14061 * C33713 + C14074 * C33716 +
             C14075 * C50894) *
                C50944 +
            (C14484 * C33715 + C14485 * C33713 + (C8508 + C8509) * C33716 +
             (C8510 + C8511) * C50894) *
                C50678) *
               C50798 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C1725) *
              C50718 * C1077 +
          (((C8114 * C33715 + C8115 * C33713 + C14484 * C33716 +
             C14485 * C50894) *
                C50944 +
            ((C8109 + C8108) * C33715 + (C8107 + C8106) * C33713 +
             (C8833 + C8834) * C33716 + (C8835 + C8836) * C50894) *
                C50678) *
               C1725 -
           (((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
                 C50894 +
             (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
                 C33716 +
             (C8836 + C8835) * C33713 + (C8834 + C8833) * C33715) *
                C50678 +
            ((C8511 + C8510) * C50894 + (C8509 + C8508) * C33716 +
             C8821 * C33713 + C8822 * C33715) *
                C50944) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C33715 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C33713 +
            (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
               C50944 +
           ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
            C14060 * C33716 + C14061 * C50894) *
               C50678) *
              C1891 -
          ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
            C14065 * C33715) *
               C50678 +
           ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
            (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
               C50944) *
              C1892 +
          (((C14091 + C14090) * C33715 + (C14089 + C14088) * C33713 +
            (C16486 + C16487) * C33716 + (C16488 + C16489) * C50894) *
               C50944 +
           (C14074 * C33715 + C14075 * C33713 + (C14092 + C14093) * C33716 +
            (C14094 + C14095) * C50894) *
               C50678) *
              C1893 -
          (((C8064 * C6560 + C50866 * C6564 + C8063 * C5582 + C50972 * C5586) *
                C50894 +
            (C8064 * C6558 + C50866 * C6561 + C8063 * C5577 + C50972 * C5581) *
                C33716 +
            (C14095 + C14094) * C33713 + (C14093 + C14092) * C33715) *
               C50678 +
           ((C8064 * C6562 + C50866 * C6565 + C8063 * C5580 + C50972 * C5585) *
                C50894 +
            (C8064 * C6559 + C50866 * C6563 + C8063 * C5576 + C50972 * C5579) *
                C33716 +
            (C16489 + C16488) * C33713 + (C16487 + C16486) * C33715) *
               C50944) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C51006 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C51007 +
           (((C14091 + C14090) * C33715 + (C14089 + C14088) * C33713 +
             (C16486 + C16487) * C33716 + (C16488 + C16489) * C50894) *
                C50944 +
            (C14074 * C33715 + C14075 * C33713 + (C14092 + C14093) * C33716 +
             (C14094 + C14095) * C50894) *
                C50678) *
               C2141) *
              C50718 * C50951 +
          (((C14060 * C33715 + C14061 * C33713 + C14074 * C33716 +
             C14075 * C50894) *
                C50944 +
            (C14484 * C33715 + C14485 * C33713 + (C8508 + C8509) * C33716 +
             (C8510 + C8511) * C50894) *
                C50678) *
               C51007 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C51006 -
           (((C8064 * C6141 + C50866 * C6143 + C8063 * C1901 + C50972 * C1908) *
                 C50894 +
             (C8064 * C6140 + C50866 * C6142 + C8063 * C1896 + C50972 * C1902) *
                 C33716 +
             (C8511 + C8510) * C33713 + (C8509 + C8508) * C33715) *
                C50678 +
            ((C14095 + C14094) * C50894 + (C14093 + C14092) * C33716 +
             C14062 * C33713 + C14063 * C33715) *
                C50944) *
               C2141) *
              C50718 * C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C1725 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C50798) *
              C50718 * C1076 +
          (((C14060 * C33715 + C14061 * C33713 + C14074 * C33716 +
             C14075 * C50894) *
                C50944 +
            (C14484 * C33715 + C14485 * C33713 + (C8508 + C8509) * C33716 +
             (C8510 + C8511) * C50894) *
                C50678) *
               C50798 -
           ((C8821 * C50894 + C8822 * C33716 + (C8105 + C8104) * C33713 +
             (C8103 + C8102) * C33715) *
                C50678 +
            (C14064 * C50894 + C14065 * C33716 + (C8101 + C8100) * C33713 +
             (C8099 + C8098) * C33715) *
                C50944) *
               C1725) *
              C50718 * C1077 +
          (((C8114 * C33715 + C8115 * C33713 + C14484 * C33716 +
             C14485 * C50894) *
                C50944 +
            ((C8109 + C8108) * C33715 + (C8107 + C8106) * C33713 +
             (C8833 + C8834) * C33716 + (C8835 + C8836) * C50894) *
                C50678) *
               C1725 -
           (((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
                 C50894 +
             (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
                 C33716 +
             (C8836 + C8835) * C33713 + (C8834 + C8833) * C33715) *
                C50678 +
            ((C8511 + C8510) * C50894 + (C8509 + C8508) * C33716 +
             C8821 * C33713 + C8822 * C33715) *
                C50944) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C33715 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C33713 +
             (C14084 + C14085) * C33716 + (C14086 + C14087) * C50894) *
                C50944 +
            ((C8098 + C8099) * C33715 + (C8100 + C8101) * C33713 +
             C14060 * C33716 + C14061 * C50894) *
                C50678) *
               C1725 -
           ((C14062 * C50894 + C14063 * C33716 + C14064 * C33713 +
             C14065 * C33715) *
                C50678 +
            ((C14088 + C14089) * C50894 + (C14090 + C14091) * C33716 +
             (C14087 + C14086) * C33713 + (C14085 + C14084) * C33715) *
                C50944) *
               C50798) *
              C289 +
          ((((C14764 + C14765) * C33715 + (C14766 + C14767) * C33713 +
             (C15298 + C15299) * C33716 + (C15300 + C15301) * C50894) *
                C50944 +
            (C14752 * C33715 + C14753 * C33713 + (C14768 + C14769) * C33716 +
             (C14770 + C14771) * C50894) *
                C50678) *
               C50798 -
           ((C14762 * C50894 + C14763 * C33716 + (C8306 + C8307) * C33713 +
             (C8308 + C8309) * C33715) *
                C50678 +
            ((C14767 + C14766) * C50894 + (C14765 + C14764) * C33716 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C33713 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C33715) *
                C50944) *
               C1725) *
              C290 +
          ((((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                 C33715 +
             (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                 C33713 +
             (C15956 + C15957) * C33716 + (C15958 + C15959) * C50894) *
                C50944 +
            ((C8310 + C8311) * C33715 + (C8312 + C8313) * C33713 +
             (C13854 + C13855) * C33716 + (C13856 + C13857) * C50894) *
                C50678) *
               C1725 -
           (((C8064 * C3740 + C50866 * C3744 + C8063 * C2746 + C50972 * C2750) *
                 C50894 +
             (C8064 * C3738 + C50866 * C3741 + C8063 * C2741 + C50972 * C2745) *
                 C33716 +
             (C13857 + C13856) * C33713 + (C13855 + C13854) * C33715) *
                C50678 +
            ((C8064 * C3742 + C50866 * C3745 + C8063 * C2744 + C50972 * C2749) *
                 C50894 +
             (C8064 * C3739 + C50866 * C3743 + C8063 * C2740 + C50972 * C2743) *
                 C33716 +
             (C15959 + C15958) * C33713 + (C15957 + C15956) * C33715) *
                C50944) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C50734 * C50959 -
           ((C15301 + C15300) * C44445 + (C15299 + C15298) * C44448 +
            (C14767 + C14766) * C51011 + (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C50734 * C50770) *
              C51002 +
          (((C8309 + C8308) * C44446 + (C8307 + C8306) * C51010 +
            C14752 * C44447 + C14753 * C51011 + (C14768 + C14769) * C44448 +
            (C14770 + C14771) * C44445) *
               C50673 * C50734 * C50770 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C50734 * C50959) *
              C51003 +
          ((C8114 * C44446 + C8115 * C51010 + C14484 * C44447 +
            C14485 * C51011 + (C8508 + C8509) * C44448 +
            (C8510 + C8511) * C44445) *
               C50673 * C50734 * C50959 -
           ((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 + C50972 * C1277) *
                C44445 +
            (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 + C50972 * C1271) *
                C44448 +
            (C9055 + C9054) * C51011 + (C9053 + C9052) * C44447 +
            C8658 * C51010 + C8659 * C44446) *
               C50673 * C50734 * C50770) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C44446 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C51010 +
             (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
             C47430 * C44448 + C47431 * C44445) *
                C50673 * C50960 -
            ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
             (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
             (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
                C50673 * C50798) *
               C50959 +
           (((C14764 + C14765) * C44446 + (C14766 + C14767) * C51010 +
             (C15298 + C15299) * C44447 + (C15300 + C15301) * C51011 +
             (C8063 * C4633 + C50972 * C4641 + C8064 * C4632 + C50866 * C4640) *
                 C44448 +
             (C8063 * C4639 + C50972 * C4645 + C8064 * C4638 + C50866 * C4644) *
                 C44445) *
                C50673 * C50798 -
            ((C15301 + C15300) * C44445 + (C15299 + C15298) * C44448 +
             (C14767 + C14766) * C51011 + (C14765 + C14764) * C44447 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C51010 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C44446) *
                C50673 * C50960) *
               C50770) *
              C292 +
          (((C14060 * C44446 + C14061 * C51010 + C14074 * C44447 +
             C14075 * C51011 + (C14092 + C14093) * C44448 +
             (C14094 + C14095) * C44445) *
                C50673 * C50798 -
            (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
             C14065 * C44447 + (C8101 + C8100) * C51010 +
             (C8099 + C8098) * C44446) *
                C50673 * C50960) *
               C50959 +
           (((C8309 + C8308) * C44446 + (C8307 + C8306) * C51010 +
             C14752 * C44447 + C14753 * C51011 + (C14768 + C14769) * C44448 +
             (C14770 + C14771) * C44445) *
                C50673 * C50960 -
            ((C8064 * C4634 + C50866 * C4642 + C8063 * C4635 + C50972 * C4643) *
                 C44445 +
             (C8064 * C4630 + C50866 * C4636 + C8063 * C4631 + C50972 * C4637) *
                 C44448 +
             (C14771 + C14770) * C51011 + (C14769 + C14768) * C44447 +
             C14762 * C51010 + C14763 * C44446) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            (C14091 + C14090) * C44448 + (C14089 + C14088) * C44445) *
               C50673 * C50734 * C289 -
           ((C15301 + C15300) * C44445 + (C15299 + C15298) * C44448 +
            (C14767 + C14766) * C51011 + (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C50734 * C290 +
           ((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C44446 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C51010 +
            (C15956 + C15957) * C44447 + (C15958 + C15959) * C51011 +
            (C8063 * C2740 + C50972 * C2743 + C8064 * C3739 + C50866 * C3743) *
                C44448 +
            (C8063 * C2744 + C50972 * C2749 + C8064 * C3742 + C50866 * C3745) *
                C44445) *
               C50673 * C50734 * C291) *
              C292 +
          (((C8309 + C8308) * C44446 + (C8307 + C8306) * C51010 +
            C14752 * C44447 + C14753 * C51011 + (C14768 + C14769) * C44448 +
            (C14770 + C14771) * C44445) *
               C50673 * C50734 * C290 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C50734 * C289 -
           ((C8064 * C3740 + C50866 * C3744 + C8063 * C2746 + C50972 * C2750) *
                C44445 +
            (C8064 * C3738 + C50866 * C3741 + C8063 * C2741 + C50972 * C2745) *
                C44448 +
            (C13857 + C13856) * C51011 + (C13855 + C13854) * C44447 +
            (C8313 + C8312) * C51010 + (C8311 + C8310) * C44446) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
               C44446 +
           (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
               C51010 +
           (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
           (C14091 + C14090) * C44448 + (C14089 + C14088) * C44445) *
              C50673 * C50734 * C50718 * C113 -
          (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
           C14065 * C44447 + (C8101 + C8100) * C51010 +
           (C8099 + C8098) * C44446) *
              C50673 * C50734 * C50718 * C114 +
          (C8114 * C44446 + C8115 * C51010 + C14484 * C44447 + C14485 * C51011 +
           (C8508 + C8509) * C44448 + (C8510 + C8511) * C44445) *
              C50673 * C50734 * C50718 * C115 -
          ((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
               C44445 +
           (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
               C44448 +
           (C8836 + C8835) * C51011 + (C8834 + C8833) * C44447 +
           C8116 * C51010 + C8117 * C44446) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C480 -
           ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
            (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
            (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
               C50673 * C481 +
           (C47430 * C44446 + C47431 * C51010 + (C16486 + C16487) * C44447 +
            (C16488 + C16489) * C51011 +
            (C8063 * C5576 + C50972 * C5579 + C8064 * C6559 + C50866 * C6563) *
                C44448 +
            (C8063 * C5580 + C50972 * C5585 + C8064 * C6562 + C50866 * C6565) *
                C44445) *
               C50673 * C482) *
              C50718 * C292 +
          ((C14060 * C44446 + C14061 * C51010 + C14074 * C44447 +
            C14075 * C51011 + (C14092 + C14093) * C44448 +
            (C14094 + C14095) * C44445) *
               C50673 * C481 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C480 -
           ((C8064 * C6560 + C50866 * C6564 + C8063 * C5582 + C50972 * C5586) *
                C44445 +
            (C8064 * C6558 + C50866 * C6561 + C8063 * C5577 + C50972 * C5581) *
                C44448 +
            (C14095 + C14094) * C51011 + (C14093 + C14092) * C44447 +
            C14062 * C51010 + C14063 * C44446) *
               C50673 * C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C50960 -
           ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
            (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
            (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
               C50673 * C50798) *
              C50718 * C51002 +
          ((C14060 * C44446 + C14061 * C51010 + C14074 * C44447 +
            C14075 * C51011 + (C14092 + C14093) * C44448 +
            (C14094 + C14095) * C44445) *
               C50673 * C50798 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C50960) *
              C50718 * C51003 +
          ((C8114 * C44446 + C8115 * C51010 + C14484 * C44447 +
            C14485 * C51011 + (C8508 + C8509) * C44448 +
            (C8510 + C8511) * C44445) *
               C50673 * C50960 -
           ((C8064 * C6141 + C50866 * C6143 + C8063 * C1901 + C50972 * C1908) *
                C44445 +
            (C8064 * C6140 + C50866 * C6142 + C8063 * C1896 + C50972 * C1902) *
                C44448 +
            (C8511 + C8510) * C51011 + (C8509 + C8508) * C44447 +
            C8821 * C51010 + C8822 * C44446) *
               C50673 * C50798) *
              C50718 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
               C44446 +
           (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
               C51010 +
           (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
           (C14091 + C14090) * C44448 + (C14089 + C14088) * C44445) *
              C50673 * C50734 * C50718 * C113 -
          (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
           C14065 * C44447 + (C8101 + C8100) * C51010 +
           (C8099 + C8098) * C44446) *
              C50673 * C50734 * C50718 * C114 +
          (C8114 * C44446 + C8115 * C51010 + C14484 * C44447 + C14485 * C51011 +
           (C8508 + C8509) * C44448 + (C8510 + C8511) * C44445) *
              C50673 * C50734 * C50718 * C115 -
          ((C8064 * C1268 + C50866 * C1276 + C8063 * C508 + C50972 * C520) *
               C44445 +
           (C8064 * C1264 + C50866 * C1269 + C8063 * C490 + C50972 * C507) *
               C44448 +
           (C8836 + C8835) * C51011 + (C8834 + C8833) * C44447 +
           C8116 * C51010 + C8117 * C44446) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            (C14091 + C14090) * C44448 + (C14089 + C14088) * C44445) *
               C50673 * C50734 * C289 -
           ((C15301 + C15300) * C44445 + (C15299 + C15298) * C44448 +
            (C14767 + C14766) * C51011 + (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C50734 * C290 +
           ((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C44446 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C51010 +
            (C15956 + C15957) * C44447 + (C15958 + C15959) * C51011 +
            (C8063 * C2740 + C50972 * C2743 + C8064 * C3739 + C50866 * C3743) *
                C44448 +
            (C8063 * C2744 + C50972 * C2749 + C8064 * C3742 + C50866 * C3745) *
                C44445) *
               C50673 * C50734 * C291) *
              C292 +
          (((C8309 + C8308) * C44446 + (C8307 + C8306) * C51010 +
            C14752 * C44447 + C14753 * C51011 + (C14768 + C14769) * C44448 +
            (C14770 + C14771) * C44445) *
               C50673 * C50734 * C290 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C50734 * C289 -
           ((C8064 * C3740 + C50866 * C3744 + C8063 * C2746 + C50972 * C2750) *
                C44445 +
            (C8064 * C3738 + C50866 * C3741 + C8063 * C2741 + C50972 * C2745) *
                C44448 +
            (C13857 + C13856) * C51011 + (C13855 + C13854) * C44447 +
            (C8313 + C8312) * C51010 + (C8311 + C8310) * C44446) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C50734 * C51004 -
           (C48316 * C44445 + C48317 * C44448 + (C14767 + C14766) * C51011 +
            (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C50734 * C51005 +
           ((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C44446 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C51010 +
            (C15956 + C15957) * C44447 + (C15958 + C15959) * C51011 +
            (C8063 * C2740 + C50972 * C2743 + C8064 * C3739 + C50866 * C3743) *
                C44448 +
            (C8063 * C2744 + C50972 * C2749 + C8064 * C3742 + C50866 * C3745) *
                C44445) *
               C50673 * C50734 * C1380) *
              C50951 +
          (((C8309 + C8308) * C44446 + (C8307 + C8306) * C51010 +
            C14752 * C44447 + C14753 * C51011 + (C14768 + C14769) * C44448 +
            (C14770 + C14771) * C44445) *
               C50673 * C50734 * C51005 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C50734 * C51004 -
           ((C8064 * C3740 + C50866 * C3744 + C8063 * C2746 + C50972 * C2750) *
                C44445 +
            (C8064 * C3738 + C50866 * C3741 + C8063 * C2741 + C50972 * C2745) *
                C44448 +
            (C13857 + C13856) * C51011 + (C13855 + C13854) * C44447 +
            (C8313 + C8312) * C51010 + (C8311 + C8310) * C44446) *
               C50673 * C50734 * C1380) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C50960 -
           ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
            (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
            (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
               C50673 * C50798) *
              C51004 +
          (((C14764 + C14765) * C44446 + (C14766 + C14767) * C51010 +
            (C15298 + C15299) * C44447 + (C15300 + C15301) * C51011 +
            (C48318 + C48319) * C44448 + (C48320 + C48321) * C44445) *
               C50673 * C50798 -
           (C48316 * C44445 + C48317 * C44448 + (C14767 + C14766) * C51011 +
            (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C50960) *
              C51005 +
          (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C44446 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C51010 +
            (C15956 + C15957) * C44447 + (C15958 + C15959) * C51011 +
            (C48816 + C48817) * C44448 + (C48818 + C48819) * C44445) *
               C50673 * C50960 -
           ((C8064 * C21442 + C50866 * C21444 + C8063 * C4638 +
             C50972 * C4644) *
                C44445 +
            (C8064 * C21441 + C50866 * C21443 + C8063 * C4632 +
             C50972 * C4640) *
                C44448 +
            (C48819 + C48818) * C51011 + (C48817 + C48816) * C44447 +
            (C15959 + C15958) * C51010 + (C15957 + C15956) * C44446) *
               C50673 * C50798) *
              C1380) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
               C44446 +
           (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
               C51010 +
           (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
           C47430 * C44448 + C47431 * C44445) *
              C50673 * C50734 * C1145 -
          ((C15301 + C15300) * C44445 + (C15299 + C15298) * C44448 +
           (C14767 + C14766) * C51011 + (C14765 + C14764) * C44447 +
           (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
               C51010 +
           (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
               C44446) *
              C50673 * C50734 * C1146 +
          ((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
               C44446 +
           (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
               C51010 +
           (C15956 + C15957) * C44447 + (C15958 + C15959) * C51011 +
           (C8063 * C2740 + C50972 * C2743 + C8064 * C3739 + C50866 * C3743) *
               C44448 +
           (C8063 * C2744 + C50972 * C2749 + C8064 * C3742 + C50866 * C3745) *
               C44445) *
              C50673 * C50734 * C1147 -
          ((C8064 * C20846 + C50866 * C20848 + C8063 * C3742 + C50972 * C3745) *
               C44445 +
           (C8064 * C20845 + C50866 * C20847 + C8063 * C3739 + C50972 * C3743) *
               C44448 +
           (C8064 * C4236 + C50866 * C4239 + C8063 * C3314 + C50972 * C3319) *
               C51011 +
           (C8064 * C4233 + C50866 * C4237 + C8063 * C3310 + C50972 * C3313) *
               C44447 +
           (C8064 * C2550 + C50866 * C2555 + C8063 * C1160 + C50972 * C1165) *
               C51010 +
           (C8064 * C2546 + C50866 * C2549 + C8063 * C1153 + C50972 * C1161) *
               C44446) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C50734 * C1074 -
           ((C15301 + C15300) * C44445 + (C15299 + C15298) * C44448 +
            (C14767 + C14766) * C51011 + (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C8309 + C8308) * C44446 + (C8307 + C8306) * C51010 +
            C14752 * C44447 + C14753 * C51011 + (C14768 + C14769) * C44448 +
            (C14770 + C14771) * C44445) *
               C50673 * C50734 * C50770 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C50734 * C1074) *
              C1077 +
          ((C8114 * C44446 + C8115 * C51010 + C14484 * C44447 +
            C14485 * C51011 + (C8508 + C8509) * C44448 +
            (C8510 + C8511) * C44445) *
               C50673 * C50734 * C1074 -
           ((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 + C50972 * C1277) *
                C44445 +
            (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 + C50972 * C1271) *
                C44448 +
            (C9055 + C9054) * C51011 + (C9053 + C9052) * C44447 +
            C8658 * C51010 + C8659 * C44446) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C480 -
           ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
            (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
            (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
               C50673 * C481 +
           (C47430 * C44446 + C47431 * C51010 + (C16486 + C16487) * C44447 +
            (C16488 + C16489) * C51011 +
            (C8063 * C5576 + C50972 * C5579 + C8064 * C6559 + C50866 * C6563) *
                C44448 +
            (C8063 * C5580 + C50972 * C5585 + C8064 * C6562 + C50866 * C6565) *
                C44445) *
               C50673 * C482) *
              C1074 +
          (((C14764 + C14765) * C44446 + (C14766 + C14767) * C51010 +
            (C15298 + C15299) * C44447 + (C15300 + C15301) * C51011 +
            (C48318 + C48319) * C44448 + (C48320 + C48321) * C44445) *
               C50673 * C481 -
           (C48316 * C44445 + C48317 * C44448 + (C14767 + C14766) * C51011 +
            (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C480 -
           ((C8064 * C23126 + C50866 * C23128 + C8063 * C6562 +
             C50972 * C6565) *
                C44445 +
            (C8064 * C23125 + C50866 * C23127 + C8063 * C6559 +
             C50972 * C6563) *
                C44448 +
            (C48321 + C48320) * C51011 + (C48319 + C48318) * C44447 +
            C48316 * C51010 + C48317 * C44446) *
               C50673 * C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C44446 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C51010 +
             (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
             C47430 * C44448 + C47431 * C44445) *
                C50673 * C50960 -
            ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
             (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
             (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
                C50673 * C50798) *
               C1074 +
           (((C14764 + C14765) * C44446 + (C14766 + C14767) * C51010 +
             (C15298 + C15299) * C44447 + (C15300 + C15301) * C51011 +
             (C48318 + C48319) * C44448 + (C48320 + C48321) * C44445) *
                C50673 * C50798 -
            (C48316 * C44445 + C48317 * C44448 + (C14767 + C14766) * C51011 +
             (C14765 + C14764) * C44447 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C51010 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C44446) *
                C50673 * C50960) *
               C50770) *
              C50951 +
          (((C14060 * C44446 + C14061 * C51010 + C14074 * C44447 +
             C14075 * C51011 + (C14092 + C14093) * C44448 +
             (C14094 + C14095) * C44445) *
                C50673 * C50798 -
            (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
             C14065 * C44447 + (C8101 + C8100) * C51010 +
             (C8099 + C8098) * C44446) *
                C50673 * C50960) *
               C1074 +
           (((C8309 + C8308) * C44446 + (C8307 + C8306) * C51010 +
             C14752 * C44447 + C14753 * C51011 + (C14768 + C14769) * C44448 +
             (C14770 + C14771) * C44445) *
                C50673 * C50960 -
            ((C8064 * C4634 + C50866 * C4642 + C8063 * C4635 + C50972 * C4643) *
                 C44445 +
             (C8064 * C4630 + C50866 * C4636 + C8063 * C4631 + C50972 * C4637) *
                 C44448 +
             (C14771 + C14770) * C51011 + (C14769 + C14768) * C44447 +
             C14762 * C51010 + C14763 * C44446) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C50734 * C1074 -
           ((C15301 + C15300) * C44445 + (C15299 + C15298) * C44448 +
            (C14767 + C14766) * C51011 + (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C8309 + C8308) * C44446 + (C8307 + C8306) * C51010 +
            C14752 * C44447 + C14753 * C51011 + (C14768 + C14769) * C44448 +
            (C14770 + C14771) * C44445) *
               C50673 * C50734 * C50770 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C50734 * C1074) *
              C1077 +
          ((C8114 * C44446 + C8115 * C51010 + C14484 * C44447 +
            C14485 * C51011 + (C8508 + C8509) * C44448 +
            (C8510 + C8511) * C44445) *
               C50673 * C50734 * C1074 -
           ((C8064 * C2747 + C50866 * C2751 + C8063 * C1270 + C50972 * C1277) *
                C44445 +
            (C8064 * C2742 + C50866 * C2748 + C8063 * C1265 + C50972 * C1271) *
                C44448 +
            (C9055 + C9054) * C51011 + (C9053 + C9052) * C44447 +
            C8658 * C51010 + C8659 * C44446) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
               C44446 +
           (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
               C51010 +
           (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
           C47430 * C44448 + C47431 * C44445) *
              C50673 * C50734 * C1145 -
          ((C15301 + C15300) * C44445 + (C15299 + C15298) * C44448 +
           (C14767 + C14766) * C51011 + (C14765 + C14764) * C44447 +
           (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
               C51010 +
           (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
               C44446) *
              C50673 * C50734 * C1146 +
          ((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
               C44446 +
           (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
               C51010 +
           (C15956 + C15957) * C44447 + (C15958 + C15959) * C51011 +
           (C8063 * C2740 + C50972 * C2743 + C8064 * C3739 + C50866 * C3743) *
               C44448 +
           (C8063 * C2744 + C50972 * C2749 + C8064 * C3742 + C50866 * C3745) *
               C44445) *
              C50673 * C50734 * C1147 -
          ((C8064 * C20846 + C50866 * C20848 + C8063 * C3742 + C50972 * C3745) *
               C44445 +
           (C8064 * C20845 + C50866 * C20847 + C8063 * C3739 + C50972 * C3743) *
               C44448 +
           (C8064 * C4236 + C50866 * C4239 + C8063 * C3314 + C50972 * C3319) *
               C51011 +
           (C8064 * C4233 + C50866 * C4237 + C8063 * C3310 + C50972 * C3313) *
               C44447 +
           (C8064 * C2550 + C50866 * C2555 + C8063 * C1160 + C50972 * C1165) *
               C51010 +
           (C8064 * C2546 + C50866 * C2549 + C8063 * C1153 + C50972 * C1161) *
               C44446) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                 C44446 +
             (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                 C51010 +
             (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
             C47430 * C44448 + C47431 * C44445) *
                C50673 * C1725 -
            (C49210 * C44445 + C49211 * C44448 + (C14088 + C14089) * C51011 +
             (C14090 + C14091) * C44447 + (C14087 + C14086) * C51010 +
             (C14085 + C14084) * C44446) *
                C50673 * C50798) *
               C50959 +
           (((C14764 + C14765) * C44446 + (C14766 + C14767) * C51010 +
             (C15298 + C15299) * C44447 + (C15300 + C15301) * C51011 +
             (C48318 + C48319) * C44448 + (C48320 + C48321) * C44445) *
                C50673 * C50798 -
            (C48316 * C44445 + C48317 * C44448 + (C14767 + C14766) * C51011 +
             (C14765 + C14764) * C44447 +
             (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                 C51010 +
             (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                 C44446) *
                C50673 * C1725) *
               C50770) *
              C50951 +
          (((C14060 * C44446 + C14061 * C51010 + C14074 * C44447 +
             C14075 * C51011 + (C14092 + C14093) * C44448 +
             (C14094 + C14095) * C44445) *
                C50673 * C50798 -
            (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
             C14065 * C44447 + (C8101 + C8100) * C51010 +
             (C8099 + C8098) * C44446) *
                C50673 * C1725) *
               C50959 +
           (((C8309 + C8308) * C44446 + (C8307 + C8306) * C51010 +
             C14752 * C44447 + C14753 * C51011 + (C14768 + C14769) * C44448 +
             (C14770 + C14771) * C44445) *
                C50673 * C1725 -
            ((C8064 * C4634 + C50866 * C4642 + C8063 * C4635 + C50972 * C4643) *
                 C44445 +
             (C8064 * C4630 + C50866 * C4636 + C8063 * C4631 + C50972 * C4637) *
                 C44448 +
             (C14771 + C14770) * C51011 + (C14769 + C14768) * C44447 +
             C14762 * C51010 + C14763 * C44446) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C51006 -
           (C49210 * C44445 + C49211 * C44448 + (C14088 + C14089) * C51011 +
            (C14090 + C14091) * C44447 + (C14087 + C14086) * C51010 +
            (C14085 + C14084) * C44446) *
               C50673 * C51007 +
           (C47430 * C44446 + C47431 * C51010 + (C16486 + C16487) * C44447 +
            (C16488 + C16489) * C51011 + (C49220 + C49221) * C44448 +
            (C49222 + C49223) * C44445) *
               C50673 * C2141) *
              C50959 +
          (((C14764 + C14765) * C44446 + (C14766 + C14767) * C51010 +
            (C15298 + C15299) * C44447 + (C15300 + C15301) * C51011 +
            (C48318 + C48319) * C44448 + (C48320 + C48321) * C44445) *
               C50673 * C51007 -
           (C48316 * C44445 + C48317 * C44448 + (C14767 + C14766) * C51011 +
            (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C51006 -
           ((C8064 * C23126 + C50866 * C23128 + C8063 * C6562 +
             C50972 * C6565) *
                C44445 +
            (C8064 * C23125 + C50866 * C23127 + C8063 * C6559 +
             C50972 * C6563) *
                C44448 +
            (C48321 + C48320) * C51011 + (C48319 + C48318) * C44447 +
            C48316 * C51010 + C48317 * C44446) *
               C50673 * C2141) *
              C50770) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C1725 -
           ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
            (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
            (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
               C50673 * C50798) *
              C289 +
          (((C14764 + C14765) * C44446 + (C14766 + C14767) * C51010 +
            (C15298 + C15299) * C44447 + (C15300 + C15301) * C51011 +
            (C48318 + C48319) * C44448 + (C48320 + C48321) * C44445) *
               C50673 * C50798 -
           (C48316 * C44445 + C48317 * C44448 + (C14767 + C14766) * C51011 +
            (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C1725) *
              C290 +
          (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C44446 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C51010 +
            (C15956 + C15957) * C44447 + (C15958 + C15959) * C51011 +
            (C48816 + C48817) * C44448 + (C48818 + C48819) * C44445) *
               C50673 * C1725 -
           ((C8064 * C21442 + C50866 * C21444 + C8063 * C4638 +
             C50972 * C4644) *
                C44445 +
            (C8064 * C21441 + C50866 * C21443 + C8063 * C4632 +
             C50972 * C4640) *
                C44448 +
            (C48819 + C48818) * C51011 + (C48817 + C48816) * C44447 +
            (C15959 + C15958) * C51010 + (C15957 + C15956) * C44446) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C1725 -
           ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
            (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
            (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
               C50673 * C50798) *
              C50718 * C1076 +
          ((C14060 * C44446 + C14061 * C51010 + C14074 * C44447 +
            C14075 * C51011 + (C14092 + C14093) * C44448 +
            (C14094 + C14095) * C44445) *
               C50673 * C50798 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C1725) *
              C50718 * C1077 +
          ((C8114 * C44446 + C8115 * C51010 + C14484 * C44447 +
            C14485 * C51011 + (C8508 + C8509) * C44448 +
            (C8510 + C8511) * C44445) *
               C50673 * C1725 -
           ((C8064 * C6141 + C50866 * C6143 + C8063 * C1901 + C50972 * C1908) *
                C44445 +
            (C8064 * C6140 + C50866 * C6142 + C8063 * C1896 + C50972 * C1902) *
                C44448 +
            (C8511 + C8510) * C51011 + (C8509 + C8508) * C44447 +
            C8821 * C51010 + C8822 * C44446) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
               C44446 +
           (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
               C51010 +
           (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
           C47430 * C44448 + C47431 * C44445) *
              C50673 * C1891 -
          (C49210 * C44445 + C49211 * C44448 + (C14088 + C14089) * C51011 +
           (C14090 + C14091) * C44447 + (C14087 + C14086) * C51010 +
           (C14085 + C14084) * C44446) *
              C50673 * C1892 +
          (C47430 * C44446 + C47431 * C51010 + (C16486 + C16487) * C44447 +
           (C16488 + C16489) * C51011 + (C49220 + C49221) * C44448 +
           (C49222 + C49223) * C44445) *
              C50673 * C1893 -
          ((C8064 * C24044 + C50866 * C24046 + C8063 * C7464 + C50972 * C7467) *
               C44445 +
           (C8064 * C24043 + C50866 * C24045 + C8063 * C7461 + C50972 * C7465) *
               C44448 +
           (C49223 + C49222) * C51011 + (C49221 + C49220) * C44447 +
           C49210 * C51010 + C49211 * C44446) *
              C50673 * C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C51006 -
           (C49210 * C44445 + C49211 * C44448 + (C14088 + C14089) * C51011 +
            (C14090 + C14091) * C44447 + (C14087 + C14086) * C51010 +
            (C14085 + C14084) * C44446) *
               C50673 * C51007 +
           (C47430 * C44446 + C47431 * C51010 + (C16486 + C16487) * C44447 +
            (C16488 + C16489) * C51011 + (C49220 + C49221) * C44448 +
            (C49222 + C49223) * C44445) *
               C50673 * C2141) *
              C50718 * C50951 +
          ((C14060 * C44446 + C14061 * C51010 + C14074 * C44447 +
            C14075 * C51011 + (C14092 + C14093) * C44448 +
            (C14094 + C14095) * C44445) *
               C50673 * C51007 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C51006 -
           ((C8064 * C6560 + C50866 * C6564 + C8063 * C5582 + C50972 * C5586) *
                C44445 +
            (C8064 * C6558 + C50866 * C6561 + C8063 * C5577 + C50972 * C5581) *
                C44448 +
            (C14095 + C14094) * C51011 + (C14093 + C14092) * C44447 +
            C14062 * C51010 + C14063 * C44446) *
               C50673 * C2141) *
              C50718 * C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C1725 -
           ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
            (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
            (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
               C50673 * C50798) *
              C50718 * C1076 +
          ((C14060 * C44446 + C14061 * C51010 + C14074 * C44447 +
            C14075 * C51011 + (C14092 + C14093) * C44448 +
            (C14094 + C14095) * C44445) *
               C50673 * C50798 -
           (C14062 * C44445 + C14063 * C44448 + C14064 * C51011 +
            C14065 * C44447 + (C8101 + C8100) * C51010 +
            (C8099 + C8098) * C44446) *
               C50673 * C1725) *
              C50718 * C1077 +
          ((C8114 * C44446 + C8115 * C51010 + C14484 * C44447 +
            C14485 * C51011 + (C8508 + C8509) * C44448 +
            (C8510 + C8511) * C44445) *
               C50673 * C1725 -
           ((C8064 * C6141 + C50866 * C6143 + C8063 * C1901 + C50972 * C1908) *
                C44445 +
            (C8064 * C6140 + C50866 * C6142 + C8063 * C1896 + C50972 * C1902) *
                C44448 +
            (C8511 + C8510) * C51011 + (C8509 + C8508) * C44447 +
            C8821 * C51010 + C8822 * C44446) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8063 * C119 + C50972 * C126 + C8064 * C297 + C50866 * C311) *
                C44446 +
            (C8063 * C127 + C50972 * C140 + C8064 * C310 + C50866 * C327) *
                C51010 +
            (C14084 + C14085) * C44447 + (C14086 + C14087) * C51011 +
            C47430 * C44448 + C47431 * C44445) *
               C50673 * C1725 -
           ((C16489 + C16488) * C44445 + (C16487 + C16486) * C44448 +
            (C14088 + C14089) * C51011 + (C14090 + C14091) * C44447 +
            (C14087 + C14086) * C51010 + (C14085 + C14084) * C44446) *
               C50673 * C50798) *
              C289 +
          (((C14764 + C14765) * C44446 + (C14766 + C14767) * C51010 +
            (C15298 + C15299) * C44447 + (C15300 + C15301) * C51011 +
            (C48318 + C48319) * C44448 + (C48320 + C48321) * C44445) *
               C50673 * C50798 -
           (C48316 * C44445 + C48317 * C44448 + (C14767 + C14766) * C51011 +
            (C14765 + C14764) * C44447 +
            (C8064 * C313 + C50866 * C328 + C8063 * C310 + C50972 * C327) *
                C51010 +
            (C8064 * C298 + C50866 * C312 + C8063 * C297 + C50972 * C311) *
                C44446) *
               C50673 * C1725) *
              C290 +
          (((C8063 * C298 + C50972 * C312 + C8064 * C1153 + C50866 * C1161) *
                C44446 +
            (C8063 * C313 + C50972 * C328 + C8064 * C1160 + C50866 * C1165) *
                C51010 +
            (C15956 + C15957) * C44447 + (C15958 + C15959) * C51011 +
            (C48816 + C48817) * C44448 + (C48818 + C48819) * C44445) *
               C50673 * C1725 -
           ((C8064 * C21442 + C50866 * C21444 + C8063 * C4638 +
             C50972 * C4644) *
                C44445 +
            (C8064 * C21441 + C50866 * C21443 + C8063 * C4632 +
             C50972 * C4640) *
                C44448 +
            (C48819 + C48818) * C51011 + (C48817 + C48816) * C44447 +
            (C15959 + C15958) * C51010 + (C15957 + C15956) * C44446) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50734 * C50959 -
           ((C2345 * C3314 + C2340 * C3319 + C2344 * C1621 + C2339 * C1626 +
             C2343 * C938 + C2338 * C947) *
                C50894 +
            (C2345 * C3310 + C2340 * C3313 + C2344 * C1614 + C2339 * C1622 +
             C2343 * C932 + C2338 * C937) *
                C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C50770) *
              C51002 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C50770 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C50959) *
              C51003 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C50734 * C50959 -
           ((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 + C2339 * C1624 +
             C2343 * C942 + C2338 * C949) *
                C50894 +
            (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 + C2339 * C1618 +
             C2343 * C934 + C2338 * C941) *
                C33716 +
            (C2952 + C2951 + C2950) * C33713 +
            (C2949 + C2948 + C2947) * C33715) *
               C50673 * C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C50959 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C50770) *
              C51002 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C34211 + C34212 + C34213 + C34214) * C17237) *
               C50734 * C50770 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C50959) *
              C51003 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C50734 * C50959 -
           (((C117 * C945 + C50815 * C951) * C50894 +
             (C117 * C936 + C50815 * C946) * C33716 + C686 * C33713 +
             C685 * C33715) *
                C17237 +
            (C34214 + C34213 + C34212 + C34211) * C17236 + C34216 * C17235) *
               C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C50734 * C50959 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C50734 * C50770) *
              C51002 +
          ((C364 * C39129 + C363 * C39125 + C965 * C39130 + C966 * C39126 +
            C5420 * C39131 + C5419 * C39127 + C6165 * C39132 + C6166 * C39128) *
               C50673 * C50734 * C50770 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C50734 * C50959) *
              C51003 +
          ((C170 * C39129 + C171 * C39125 + C551 * C39130 + C550 * C39126 +
            C556 * C39131 + C557 * C39127 + C5629 * C39132 + C5630 * C39128) *
               C50673 * C50734 * C50959 -
           ((C117 * C6141 + C50815 * C6143) * C39128 +
            (C117 * C6140 + C50815 * C6142) * C39132 + C5792 * C39127 +
            C5791 * C39131 + C968 * C39126 + C967 * C39130 + C361 * C39125 +
            C362 * C39129) *
               C50673 * C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C33715 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C33713 +
             (C36738 + C36739 + C36740) * C33716 +
             (C36741 + C36742 + C36743) * C50894) *
                C50673 * C50960 -
            ((C36744 + C36745 + C36746) * C50894 +
             (C36747 + C36748 + C36749) * C33716 +
             (C36743 + C36742 + C36741) * C33713 +
             (C36740 + C36739 + C36738) * C33715) *
                C50673 * C50798) *
               C50959 +
           (((C37248 + C37249 + C37250) * C33715 +
             (C37251 + C37252 + C37253) * C33713 +
             (C2343 * C1267 + C2338 * C1275 + C2344 * C2740 + C2339 * C2743 +
              C2345 * C3739 + C2340 * C3743) *
                 C33716 +
             (C2343 * C1274 + C2338 * C1279 + C2344 * C2744 + C2339 * C2749 +
              C2345 * C3742 + C2340 * C3745) *
                 C50894) *
                C50673 * C50798 -
            ((C37253 + C37252 + C37251) * C50894 +
             (C37250 + C37249 + C37248) * C33716 +
             (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C33713 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C33715) *
                C50673 * C50960) *
               C50770) *
              C292 +
          ((((C2782 + C2781 + C2780) * C33715 +
             (C2779 + C2778 + C2777) * C33713 +
             (C2783 + C2784 + C2785) * C33716 +
             (C2786 + C2787 + C2788) * C50894) *
                C50673 * C50798 -
            ((C2777 + C2778 + C2779) * C50894 +
             (C2780 + C2781 + C2782) * C33716 +
             (C2388 + C2387 + C2386) * C33713 +
             (C2385 + C2384 + C2383) * C33715) *
                C50673 * C50960) *
               C50959 +
           (((C2588 + C2587 + C2586) * C33715 +
             (C2585 + C2584 + C2583) * C33713 +
             (C3335 + C3336 + C3337) * C33716 +
             (C3338 + C3339 + C3340) * C50894) *
                C50673 * C50960 -
            ((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 + C2339 * C2750 +
              C2343 * C1272 + C2338 * C1278) *
                 C50894 +
             (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 + C2339 * C2745 +
              C2343 * C1266 + C2338 * C1273) *
                 C33716 +
             (C3340 + C3339 + C3338) * C33713 +
             (C3337 + C3336 + C3335) * C33715) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C33715 +
              (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
              C5620 * C50894) *
                 C17235 +
             (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
                C50960 -
            (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
             (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
              C5619 * C33715) *
                 C17235) *
                C50798) *
               C50959 +
           (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
              C6164 * C50894) *
                 C17235 +
             (C34564 + C34565 + C34566 + C34567) * C17236 +
             (C34568 + C34569 + C34570 + C34571) * C17237) *
                C50798 -
            (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
             (C6162 * C50894 + C6161 * C33716 +
              (C117 * C310 + C50815 * C327) * C33713 +
              (C117 * C297 + C50815 * C311) * C33715) *
                 C17235) *
                C50960) *
               C50770) *
              C292 +
          ((((C34055 + C34054 + C34053 + C34052) * C17235 +
             (C34051 + C34050 + C34049 + C34048) * C17236 +
             (C34364 + C34365 + C34366 + C34367) * C17237) *
                C50798 -
            (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
             (C33721 + C33720 + C33719 + C33718) * C17235) *
                C50960) *
               C50959 +
           (((C33893 + C33892 + C33891 + C33890) * C17235 +
             (C33889 + C33888 + C33887 + C33886) * C17236 +
             (C34211 + C34212 + C34213 + C34214) * C17237) *
                C50960 -
            (((C117 * C1268 + C50815 * C1276) * C50894 +
              (C117 * C1264 + C50815 * C1269) * C33716 + C970 * C33713 +
              C969 * C33715) *
                 C17237 +
             (C34571 + C34570 + C34569 + C34568) * C17236 +
             (C34567 + C34566 + C34565 + C34564) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C39129 +
             (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
             C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
             C5625 * C39128) *
                C50673 * C50960 -
            (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
             C5622 * C39126 + C5621 * C39130 + C5620 * C39125 +
             C5619 * C39129) *
                C50673 * C50798) *
               C50959 +
           ((C6161 * C39129 + C6162 * C39125 + C6163 * C39130 + C6164 * C39126 +
             C6571 * C39131 + C6572 * C39127 +
             (C117 * C6559 + C50815 * C6563) * C39132 +
             (C117 * C6562 + C50815 * C6565) * C39128) *
                C50673 * C50798 -
            (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
             C6162 * C39126 + C6161 * C39130 +
             (C117 * C310 + C50815 * C327) * C39125 +
             (C117 * C297 + C50815 * C311) * C39129) *
                C50673 * C50960) *
               C50770) *
              C292 +
          (((C553 * C39129 + C552 * C39125 + C554 * C39130 + C555 * C39126 +
             C5624 * C39131 + C5623 * C39127 + C5627 * C39132 +
             C5628 * C39128) *
                C50673 * C50798 -
            (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
             C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
                C50673 * C50960) *
               C50959 +
           ((C364 * C39129 + C363 * C39125 + C965 * C39130 + C966 * C39126 +
             C5420 * C39131 + C5419 * C39127 + C6165 * C39132 +
             C6166 * C39128) *
                C50673 * C50960 -
            ((C117 * C6560 + C50815 * C6564) * C39128 +
             (C117 * C6558 + C50815 * C6561) * C39132 + C6166 * C39127 +
             C6165 * C39131 + C5419 * C39126 + C5420 * C39130 + C966 * C39125 +
             C965 * C39129) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50815 * C126) * C33715 +
                (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
                C5620 * C50894) *
                   C17235 +
               (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
                  C50734 * C50718 * C113 -
              (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
               (C33721 + C33720 + C33719 + C33718) * C17235) *
                  C50734 * C50718 * C114 +
              (C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
               (C33730 + C33731 + C33732 + C33733) * C17237) *
                  C50734 * C50718 * C115 -
              (((C117 * C789 + C50815 * C791) * C50894 +
                (C117 * C788 + C50815 * C790) * C33716 + C177 * C33713 +
                C176 * C33715) *
                   C17237 +
               (C33733 + C33732 + C33731 + C33730) * C17236 + C33739 * C17235) *
                  C50734 * C50718 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50815 * C126) * C33715 +
                 (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
                 C5620 * C50894) *
                    C17235 +
                (C33718 + C33719 + C33720 + C33721) * C17236 +
                C33738 * C17237) *
                   C50734 * C289 -
               ((C33886 + C33887 + C33888 + C33889) * C17237 +
                (C33890 + C33891 + C33892 + C33893) * C17236 +
                (C6162 * C50894 + C6161 * C33716 +
                 (C117 * C310 + C50815 * C327) * C33713 +
                 (C117 * C297 + C50815 * C311) * C33715) *
                    C17235) *
                   C50734 * C290 +
               (((C117 * C298 + C50815 * C312) * C33715 +
                 (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
                 C7068 * C50894) *
                    C17235 +
                (C33894 + C33895 + C33896 + C33897) * C17236 +
                (C33898 + C33899 + C33900 + C33901) * C17237) *
                   C50734 * C291) *
                  C292 +
              (((C33893 + C33892 + C33891 + C33890) * C17235 +
                (C33889 + C33888 + C33887 + C33886) * C17236 +
                (C360 * C33715 + C359 * C33713 + C969 * C33716 +
                 C970 * C50894) *
                    C17237) *
                   C50734 * C290 -
               (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
                (C33721 + C33720 + C33719 + C33718) * C17235) *
                   C50734 * C289 -
               (((C117 * C1615 + C50815 * C1623) * C50894 +
                 (C117 * C1611 + C50815 * C1616) * C33716 + C370 * C33713 +
                 C369 * C33715) *
                    C17237 +
                (C33901 + C33900 + C33899 + C33898) * C17236 +
                (C33897 + C33896 + C33895 + C33894) * C17235) *
                   C50734 * C291) *
                  C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C480 -
           ((C34048 + C34049 + C34050 + C34051) * C17237 +
            (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C481 +
           ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 +
             C5625 * C50894) *
                C17235 +
            (C34056 + C34057 + C34058 + C34059) * C17236 +
            (C34060 + C34061 + C34062 + C34063) * C17237) *
               C482) *
              C50718 * C292 +
          (((C34055 + C34054 + C34053 + C34052) * C17235 +
            (C34051 + C34050 + C34049 + C34048) * C17236 +
            (C549 * C33715 + C548 * C33713 + C558 * C33716 + C559 * C50894) *
                C17237) *
               C481 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C480 -
           (((C117 * C1899 + C50815 * C1907) * C50894 +
             (C117 * C1895 + C50815 * C1900) * C33716 + C559 * C33713 +
             C558 * C33715) *
                C17237 +
            (C34063 + C34062 + C34061 + C34060) * C17236 +
            (C34059 + C34058 + C34057 + C34056) * C17235) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C2343 * C486 + C2338 * C500 + C2344 * C932 + C2339 * C937 +
            C2345 * C1614 + C2340 * C1622) *
               C33716 +
           (C2343 * C499 + C2338 * C516 + C2344 * C938 + C2339 * C947 +
            C2345 * C1621 + C2340 * C1626) *
               C50894) *
              C50673 * C50734 * C50718 * C113 -
          ((C2777 + C2778 + C2779) * C50894 + (C2780 + C2781 + C2782) * C33716 +
           (C2388 + C2387 + C2386) * C33713 +
           (C2385 + C2384 + C2383) * C33715) *
              C50673 * C50734 * C50718 * C114 +
          ((C2394 + C2393 + C2392) * C33715 + (C2391 + C2390 + C2389) * C33713 +
           (C3111 + C3112 + C3113) * C33716 +
           (C3114 + C3115 + C3116) * C50894) *
              C50673 * C50734 * C50718 * C115 -
          ((C2345 * C1615 + C2340 * C1623 + C2344 * C944 + C2339 * C950 +
            C2343 * C493 + C2338 * C513) *
               C50894 +
           (C2345 * C1611 + C2340 * C1616 + C2344 * C935 + C2339 * C943 +
            C2343 * C483 + C2338 * C494) *
               C33716 +
           (C2400 + C2399 + C2398) * C33713 +
           (C2397 + C2396 + C2395) * C33715) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C2343 * C486 + C2338 * C500 + C2344 * C932 + C2339 * C937 +
             C2345 * C1614 + C2340 * C1622) *
                C33716 +
            (C2343 * C499 + C2338 * C516 + C2344 * C938 + C2339 * C947 +
             C2345 * C1621 + C2340 * C1626) *
                C50894) *
               C50673 * C50734 * C289 -
           ((C2345 * C3314 + C2340 * C3319 + C2344 * C1621 + C2339 * C1626 +
             C2343 * C938 + C2338 * C947) *
                C50894 +
            (C2345 * C3310 + C2340 * C3313 + C2344 * C1614 + C2339 * C1622 +
             C2343 * C932 + C2338 * C937) *
                C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C290 +
           ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
             C2345 * C4233 + C2340 * C4237) *
                C33716 +
            (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
             C2345 * C4236 + C2340 * C4239) *
                C50894) *
               C50673 * C50734 * C291) *
              C292 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C290 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C289 -
           ((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 + C2339 * C3320 +
             C2343 * C1619 + C2338 * C1625) *
                C50894 +
            (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 + C2339 * C3315 +
             C2343 * C1613 + C2338 * C1620) *
                C33716 +
            (C2594 + C2593 + C2592) * C33713 +
            (C2591 + C2590 + C2589) * C33715) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C480 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C481 +
           ((C36749 + C36748 + C36747) * C33715 +
            (C36746 + C36745 + C36744) * C33713 +
            (C2343 * C1898 + C2338 * C1906 + C2344 * C4633 + C2339 * C4641 +
             C2345 * C4632 + C2340 * C4640) *
                C33716 +
            (C2343 * C1905 + C2338 * C1910 + C2344 * C4639 + C2339 * C4645 +
             C2345 * C4638 + C2340 * C4644) *
                C50894) *
               C50673 * C482) *
              C50718 * C292 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C481 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C480 -
           ((C2345 * C4634 + C2340 * C4642 + C2344 * C4635 + C2339 * C4643 +
             C2343 * C1903 + C2338 * C1909) *
                C50894 +
            (C2345 * C4630 + C2340 * C4636 + C2344 * C4631 + C2339 * C4637 +
             C2343 * C1897 + C2338 * C1904) *
                C33716 +
            (C2788 + C2787 + C2786) * C33713 +
            (C2785 + C2784 + C2783) * C33715) *
               C50673 * C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C119 + C50815 * C126) * C39129 +
           (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
           C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
           C5625 * C39128) *
              C50673 * C50734 * C50718 * C113 -
          (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
           C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
              C50673 * C50734 * C50718 * C114 +
          (C170 * C39129 + C171 * C39125 + C551 * C39130 + C550 * C39126 +
           C556 * C39131 + C557 * C39127 + C5629 * C39132 + C5630 * C39128) *
              C50673 * C50734 * C50718 * C115 -
          ((C117 * C1899 + C50815 * C1907) * C39128 +
           (C117 * C1895 + C50815 * C1900) * C39132 + C559 * C39127 +
           C558 * C39131 + C548 * C39126 + C549 * C39130 + C173 * C39125 +
           C172 * C39129) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C50734 * C289 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C50734 * C290 +
           ((C117 * C298 + C50815 * C312) * C39129 +
            (C117 * C313 + C50815 * C328) * C39125 + C7067 * C39130 +
            C7068 * C39126 + C7069 * C39131 + C7070 * C39127 +
            (C117 * C4632 + C50815 * C4640) * C39132 +
            (C117 * C4638 + C50815 * C4644) * C39128) *
               C50673 * C50734 * C291) *
              C292 +
          ((C364 * C39129 + C363 * C39125 + C965 * C39130 + C966 * C39126 +
            C5420 * C39131 + C5419 * C39127 + C6165 * C39132 + C6166 * C39128) *
               C50673 * C50734 * C290 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C50734 * C289 -
           ((C117 * C4634 + C50815 * C4642) * C39128 +
            (C117 * C4630 + C50815 * C4636) * C39132 + C5424 * C39127 +
            C5423 * C39131 + C5422 * C39126 + C5421 * C39130 + C366 * C39125 +
            C365 * C39129) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C480 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C481 +
           (C5621 * C39129 + C5622 * C39125 + C5626 * C39130 + C5625 * C39126 +
            C7473 * C39131 + C7474 * C39127 +
            (C117 * C7461 + C50815 * C7465) * C39132 +
            (C117 * C7464 + C50815 * C7467) * C39128) *
               C50673 * C482) *
              C50718 * C292 +
          ((C553 * C39129 + C552 * C39125 + C554 * C39130 + C555 * C39126 +
            C5624 * C39131 + C5623 * C39127 + C5627 * C39132 + C5628 * C39128) *
               C50673 * C481 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C480 -
           ((C117 * C7462 + C50815 * C7466) * C39128 +
            (C117 * C7460 + C50815 * C7463) * C39132 + C5628 * C39127 +
            C5627 * C39131 + C5623 * C39126 + C5624 * C39130 + C555 * C39125 +
            C554 * C39129) *
               C50673 * C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50960 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C50718 * C51002 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C50798 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50960) *
              C50718 * C51003 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C50960 -
           ((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 + C2339 * C1277 +
             C2343 * C506 + C2338 * C519) *
                C50894 +
            (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 + C2339 * C1271 +
             C2343 * C489 + C2338 * C505) *
                C33716 +
            (C3116 + C3115 + C3114) * C33713 +
            (C3113 + C3112 + C3111) * C33715) *
               C50673 * C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50960 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C50718 * C51002 +
          (((C34055 + C34054 + C34053 + C34052) * C17235 +
            (C34051 + C34050 + C34049 + C34048) * C17236 +
            (C34364 + C34365 + C34366 + C34367) * C17237) *
               C50798 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50960) *
              C50718 * C51003 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C50960 -
           (((C117 * C511 + C50815 * C522) * C50894 +
             (C117 * C492 + C50815 * C512) * C33716 + C800 * C33713 +
             C799 * C33715) *
                C17237 +
            (C34367 + C34366 + C34365 + C34364) * C17236 + C34369 * C17235) *
               C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C50960 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C50798) *
              C50718 * C51002 +
          ((C553 * C39129 + C552 * C39125 + C554 * C39130 + C555 * C39126 +
            C5624 * C39131 + C5623 * C39127 + C5627 * C39132 + C5628 * C39128) *
               C50673 * C50798 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C50960) *
              C50718 * C51003 +
          ((C170 * C39129 + C171 * C39125 + C551 * C39130 + C550 * C39126 +
            C556 * C39131 + C557 * C39127 + C5629 * C39132 + C5630 * C39128) *
               C50673 * C50960 -
           ((C117 * C5583 + C50815 * C5587) * C39128 +
            (C117 * C5578 + C50815 * C5584) * C39132 + C5630 * C39127 +
            C5629 * C39131 + C557 * C39126 + C556 * C39130 + C550 * C39125 +
            C551 * C39129) *
               C50673 * C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C289 -
           ((C33886 + C33887 + C33888 + C33889) * C17237 +
            (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C50734 * C291) *
              C292 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C360 * C33715 + C359 * C33713 + C969 * C33716 + C970 * C50894) *
                C17237) *
               C50734 * C290 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C289 -
           (((C117 * C1615 + C50815 * C1623) * C50894 +
             (C117 * C1611 + C50815 * C1616) * C33716 + C370 * C33713 +
             C369 * C33715) *
                C17237 +
            (C33901 + C33900 + C33899 + C33898) * C17236 +
            (C33897 + C33896 + C33895 + C33894) * C17235) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C33715 +
            (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
            C5620 * C50894) *
               C17235 +
           (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
              C50734 * C50718 * C113 -
          (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
           (C33721 + C33720 + C33719 + C33718) * C17235) *
              C50734 * C50718 * C114 +
          (C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
           (C33730 + C33731 + C33732 + C33733) * C17237) *
              C50734 * C50718 * C115 -
          (((C117 * C789 + C50815 * C791) * C50894 +
            (C117 * C788 + C50815 * C790) * C33716 + C177 * C33713 +
            C176 * C33715) *
               C17237 +
           (C33733 + C33732 + C33731 + C33730) * C17236 + C33739 * C17235) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C2343 * C486 + C2338 * C500 + C2344 * C932 + C2339 * C937 +
            C2345 * C1614 + C2340 * C1622) *
               C33716 +
           (C2343 * C499 + C2338 * C516 + C2344 * C938 + C2339 * C947 +
            C2345 * C1621 + C2340 * C1626) *
               C50894) *
              C50673 * C50734 * C50718 * C113 -
          ((C2777 + C2778 + C2779) * C50894 + (C2780 + C2781 + C2782) * C33716 +
           (C2388 + C2387 + C2386) * C33713 +
           (C2385 + C2384 + C2383) * C33715) *
              C50673 * C50734 * C50718 * C114 +
          ((C2394 + C2393 + C2392) * C33715 + (C2391 + C2390 + C2389) * C33713 +
           (C3111 + C3112 + C3113) * C33716 +
           (C3114 + C3115 + C3116) * C50894) *
              C50673 * C50734 * C50718 * C115 -
          ((C2345 * C1615 + C2340 * C1623 + C2344 * C944 + C2339 * C950 +
            C2343 * C493 + C2338 * C513) *
               C50894 +
           (C2345 * C1611 + C2340 * C1616 + C2344 * C935 + C2339 * C943 +
            C2343 * C483 + C2338 * C494) *
               C33716 +
           (C2400 + C2399 + C2398) * C33713 +
           (C2397 + C2396 + C2395) * C33715) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C2343 * C486 + C2338 * C500 + C2344 * C932 + C2339 * C937 +
             C2345 * C1614 + C2340 * C1622) *
                C33716 +
            (C2343 * C499 + C2338 * C516 + C2344 * C938 + C2339 * C947 +
             C2345 * C1621 + C2340 * C1626) *
                C50894) *
               C50673 * C50734 * C289 -
           ((C2345 * C3314 + C2340 * C3319 + C2344 * C1621 + C2339 * C1626 +
             C2343 * C938 + C2338 * C947) *
                C50894 +
            (C2345 * C3310 + C2340 * C3313 + C2344 * C1614 + C2339 * C1622 +
             C2343 * C932 + C2338 * C937) *
                C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C290 +
           ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
             C2345 * C4233 + C2340 * C4237) *
                C33716 +
            (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
             C2345 * C4236 + C2340 * C4239) *
                C50894) *
               C50673 * C50734 * C291) *
              C292 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C290 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C289 -
           ((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 + C2339 * C3320 +
             C2343 * C1619 + C2338 * C1625) *
                C50894 +
            (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 + C2339 * C3315 +
             C2343 * C1613 + C2338 * C1620) *
                C33716 +
            (C2594 + C2593 + C2592) * C33713 +
            (C2591 + C2590 + C2589) * C33715) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50815 * C126) * C39129 +
           (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
           C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
           C5625 * C39128) *
              C50673 * C50734 * C50718 * C113 -
          (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
           C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
              C50673 * C50734 * C50718 * C114 +
          (C170 * C39129 + C171 * C39125 + C551 * C39130 + C550 * C39126 +
           C556 * C39131 + C557 * C39127 + C5629 * C39132 + C5630 * C39128) *
              C50673 * C50734 * C50718 * C115 -
          ((C117 * C1899 + C50815 * C1907) * C39128 +
           (C117 * C1895 + C50815 * C1900) * C39132 + C559 * C39127 +
           C558 * C39131 + C548 * C39126 + C549 * C39130 + C173 * C39125 +
           C172 * C39129) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C50734 * C289 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C50734 * C290 +
           ((C117 * C298 + C50815 * C312) * C39129 +
            (C117 * C313 + C50815 * C328) * C39125 + C7067 * C39130 +
            C7068 * C39126 + C7069 * C39131 + C7070 * C39127 +
            (C117 * C4632 + C50815 * C4640) * C39132 +
            (C117 * C4638 + C50815 * C4644) * C39128) *
               C50673 * C50734 * C291) *
              C292 +
          ((C364 * C39129 + C363 * C39125 + C965 * C39130 + C966 * C39126 +
            C5420 * C39131 + C5419 * C39127 + C6165 * C39132 + C6166 * C39128) *
               C50673 * C50734 * C290 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C50734 * C289 -
           ((C117 * C4634 + C50815 * C4642) * C39128 +
            (C117 * C4630 + C50815 * C4636) * C39132 + C5424 * C39127 +
            C5423 * C39131 + C5422 * C39126 + C5421 * C39130 + C366 * C39125 +
            C365 * C39129) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50734 * C51004 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C51005 +
           ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
             C2345 * C4233 + C2340 * C4237) *
                C33716 +
            (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
             C2345 * C4236 + C2340 * C4239) *
                C50894) *
               C50673 * C50734 * C1380) *
              C50951 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C51005 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C51004 -
           ((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 + C2339 * C3320 +
             C2343 * C1619 + C2338 * C1625) *
                C50894 +
            (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 + C2339 * C3315 +
             C2343 * C1613 + C2338 * C1620) *
                C33716 +
            (C2594 + C2593 + C2592) * C33713 +
            (C2591 + C2590 + C2589) * C33715) *
               C50673 * C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C51004 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C51005 +
           (((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C50734 * C1380) *
              C50951 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C34211 + C34212 + C34213 + C34214) * C17237) *
               C50734 * C51005 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C51004 -
           (((C117 * C1615 + C50815 * C1623) * C50894 +
             (C117 * C1611 + C50815 * C1616) * C33716 + C370 * C33713 +
             C369 * C33715) *
                C17237 +
            (C33901 + C33900 + C33899 + C33898) * C17236 +
            (C33897 + C33896 + C33895 + C33894) * C17235) *
               C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C50734 * C51004 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C50734 * C51005 +
           ((C117 * C298 + C50815 * C312) * C39129 +
            (C117 * C313 + C50815 * C328) * C39125 + C7067 * C39130 +
            C7068 * C39126 + C7069 * C39131 + C7070 * C39127 +
            (C117 * C4632 + C50815 * C4640) * C39132 +
            (C117 * C4638 + C50815 * C4644) * C39128) *
               C50673 * C50734 * C1380) *
              C50951 +
          ((C364 * C39129 + C363 * C39125 + C965 * C39130 + C966 * C39126 +
            C5420 * C39131 + C5419 * C39127 + C6165 * C39132 + C6166 * C39128) *
               C50673 * C50734 * C51005 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C50734 * C51004 -
           ((C117 * C4634 + C50815 * C4642) * C39128 +
            (C117 * C4630 + C50815 * C4636) * C39132 + C5424 * C39127 +
            C5423 * C39131 + C5422 * C39126 + C5421 * C39130 + C366 * C39125 +
            C365 * C39129) *
               C50673 * C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50960 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C51004 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C50798 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50960) *
              C51005 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C38160 + C38161 + C38162) * C33716 +
            (C38163 + C38164 + C38165) * C50894) *
               C50673 * C50960 -
           ((C2345 * C20846 + C2340 * C20848 + C2344 * C3742 + C2339 * C3745 +
             C2343 * C2744 + C2338 * C2749) *
                C50894 +
            (C2345 * C20845 + C2340 * C20847 + C2344 * C3739 + C2339 * C3743 +
             C2343 * C2740 + C2338 * C2743) *
                C33716 +
            (C38165 + C38164 + C38163) * C33713 +
            (C38162 + C38161 + C38160) * C33715) *
               C50673 * C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50960 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C51004 +
          (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
             C6164 * C50894) *
                C17235 +
            (C34564 + C34565 + C34566 + C34567) * C17236 +
            (C34568 + C34569 + C34570 + C34571) * C17237) *
               C50798 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50960) *
              C51005 +
          ((((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C50960 -
           (((C117 * C2747 + C50815 * C2751) * C50894 +
             (C117 * C2742 + C50815 * C2748) * C33716 + C11097 * C33713 +
             C11096 * C33715) *
                C17237 +
            (C5424 * C50894 + C5423 * C33716 + C5422 * C33713 +
             C5421 * C33715) *
                C17236 +
            (C7070 * C50894 + C7069 * C33716 + C7068 * C33713 +
             C7067 * C33715) *
                C17235) *
               C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C50960 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C50798) *
              C51004 +
          ((C6161 * C39129 + C6162 * C39125 + C6163 * C39130 + C6164 * C39126 +
            C6571 * C39131 + C6572 * C39127 + C39922 * C39132 +
            C39923 * C39128) *
               C50673 * C50798 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C50960) *
              C51005 +
          (((C117 * C298 + C50815 * C312) * C39129 +
            (C117 * C313 + C50815 * C328) * C39125 + C7067 * C39130 +
            C7068 * C39126 + C7069 * C39131 + C7070 * C39127 + C40254 * C39132 +
            C40255 * C39128) *
               C50673 * C50960 -
           ((C117 * C23126 + C50815 * C23128) * C39128 +
            (C117 * C23125 + C50815 * C23127) * C39132 + C40255 * C39127 +
            C40254 * C39131 + C7070 * C39126 + C7069 * C39130 + C7068 * C39125 +
            C7067 * C39129) *
               C50673 * C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50815 * C126) * C33715 +
                 (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
                 C5620 * C50894) *
                    C17235 +
                (C33718 + C33719 + C33720 + C33721) * C17236 +
                C33738 * C17237) *
                   C50734 * C1074 -
               (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
                (C6162 * C50894 + C6161 * C33716 +
                 (C117 * C310 + C50815 * C327) * C33713 +
                 (C117 * C297 + C50815 * C311) * C33715) *
                    C17235) *
                   C50734 * C50770) *
                  C1076 +
              (((C33893 + C33892 + C33891 + C33890) * C17235 +
                (C33889 + C33888 + C33887 + C33886) * C17236 +
                (C34211 + C34212 + C34213 + C34214) * C17237) *
                   C50734 * C50770 -
               (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
                (C33721 + C33720 + C33719 + C33718) * C17235) *
                   C50734 * C1074) *
                  C1077 +
              ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
                (C33730 + C33731 + C33732 + C33733) * C17237) *
                   C50734 * C1074 -
               (((C117 * C945 + C50815 * C951) * C50894 +
                 (C117 * C936 + C50815 * C946) * C33716 + C686 * C33713 +
                 C685 * C33715) *
                    C17237 +
                (C34214 + C34213 + C34212 + C34211) * C17236 +
                C34216 * C17235) *
                   C50734 * C50770) *
                  C1078) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C119 + C50815 * C126) * C33715 +
                (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
                C5620 * C50894) *
                   C17235 +
               (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
                  C50734 * C1145 -
              (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
               (C6162 * C50894 + C6161 * C33716 +
                (C117 * C310 + C50815 * C327) * C33713 +
                (C117 * C297 + C50815 * C311) * C33715) *
                   C17235) *
                  C50734 * C1146 +
              (((C117 * C298 + C50815 * C312) * C33715 +
                (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
                C7068 * C50894) *
                   C17235 +
               (C33894 + C33895 + C33896 + C33897) * C17236 +
               (C33898 + C33899 + C33900 + C33901) * C17237) *
                  C50734 * C1147 -
              (((C117 * C3317 + C50815 * C3321) * C50894 +
                (C117 * C3312 + C50815 * C3318) * C33716 +
                (C117 * C1156 + C50815 * C1163) * C33713 +
                (C117 * C1151 + C50815 * C1157) * C33715) *
                   C17237 +
               ((C117 * C3316 + C50815 * C3320) * C50894 +
                (C117 * C3311 + C50815 * C3315) * C33716 +
                (C117 * C1158 + C50815 * C1164) * C33713 +
                (C117 * C1152 + C50815 * C1159) * C33715) *
                   C17236 +
               ((C117 * C3314 + C50815 * C3319) * C50894 +
                (C117 * C3310 + C50815 * C3313) * C33716 +
                (C117 * C1160 + C50815 * C1165) * C33713 +
                (C117 * C1153 + C50815 * C1161) * C33715) *
                   C17235) *
                  C50734 * C1148) *
             C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C480 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C481 +
           ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 +
             C5625 * C50894) *
                C17235 +
            (C34056 + C34057 + C34058 + C34059) * C17236 +
            (C34060 + C34061 + C34062 + C34063) * C17237) *
               C482) *
              C1074 +
          (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
             C6164 * C50894) *
                C17235 +
            (C34564 + C34565 + C34566 + C34567) * C17236 +
            (C34568 + C34569 + C34570 + C34571) * C17237) *
               C481 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C480 -
           (((C117 * C6141 + C50815 * C6143) * C50894 +
             (C117 * C6140 + C50815 * C6142) * C33716 + C5792 * C33713 +
             C5791 * C33715) *
                C17237 +
            (C6166 * C50894 + C6165 * C33716 + C5419 * C33713 +
             C5420 * C33715) *
                C17236 +
            (C6572 * C50894 + C6571 * C33716 + C6164 * C33713 +
             C6163 * C33715) *
                C17235) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50734 * C1074 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C50770 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C1074) *
              C1077 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C50734 * C1074 -
           ((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 + C2339 * C1624 +
             C2343 * C942 + C2338 * C949) *
                C50894 +
            (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 + C2339 * C1618 +
             C2343 * C934 + C2338 * C941) *
                C33716 +
            (C2952 + C2951 + C2950) * C33713 +
            (C2949 + C2948 + C2947) * C33715) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C36738 + C36739 + C36740) * C33716 +
           (C36741 + C36742 + C36743) * C50894) *
              C50673 * C50734 * C1145 -
          ((C37253 + C37252 + C37251) * C50894 +
           (C37250 + C37249 + C37248) * C33716 +
           (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
            C2343 * C310 + C2338 * C327) *
               C33713 +
           (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
            C2343 * C297 + C2338 * C311) *
               C33715) *
              C50673 * C50734 * C1146 +
          ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
            C2345 * C2546 + C2340 * C2549) *
               C33715 +
           (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
            C2345 * C2550 + C2340 * C2555) *
               C33713 +
           (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
            C2345 * C4233 + C2340 * C4237) *
               C33716 +
           (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
            C2345 * C4236 + C2340 * C4239) *
               C50894) *
              C50673 * C50734 * C1147 -
          ((C2345 * C21176 + C2340 * C21178 + C2344 * C4236 + C2339 * C4239 +
            C2343 * C3314 + C2338 * C3319) *
               C50894 +
           (C2345 * C21175 + C2340 * C21177 + C2344 * C4233 + C2339 * C4237 +
            C2343 * C3310 + C2338 * C3313) *
               C33716 +
           (C2345 * C3588 + C2340 * C3591 + C2344 * C2550 + C2339 * C2555 +
            C2343 * C1160 + C2338 * C1165) *
               C33713 +
           (C2345 * C3585 + C2340 * C3589 + C2344 * C2546 + C2339 * C2549 +
            C2343 * C1153 + C2338 * C1161) *
               C33715) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C480 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C481 +
           ((C36749 + C36748 + C36747) * C33715 +
            (C36746 + C36745 + C36744) * C33713 +
            (C2343 * C1898 + C2338 * C1906 + C2344 * C4633 + C2339 * C4641 +
             C2345 * C4632 + C2340 * C4640) *
                C33716 +
            (C2343 * C1905 + C2338 * C1910 + C2344 * C4639 + C2339 * C4645 +
             C2345 * C4638 + C2340 * C4644) *
                C50894) *
               C50673 * C482) *
              C1074 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C481 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C480 -
           ((C2345 * C21442 + C2340 * C21444 + C2344 * C4638 + C2339 * C4644 +
             C2343 * C4639 + C2338 * C4645) *
                C50894 +
            (C2345 * C21441 + C2340 * C21443 + C2344 * C4632 + C2339 * C4640 +
             C2343 * C4633 + C2338 * C4641) *
                C33716 +
            (C37661 + C37660 + C37659) * C33713 +
            (C37658 + C37657 + C37656) * C33715) *
               C50673 * C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C50734 * C1074 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C50734 * C50770) *
              C1076 +
          ((C364 * C39129 + C363 * C39125 + C965 * C39130 + C966 * C39126 +
            C5420 * C39131 + C5419 * C39127 + C6165 * C39132 + C6166 * C39128) *
               C50673 * C50734 * C50770 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C50734 * C1074) *
              C1077 +
          ((C170 * C39129 + C171 * C39125 + C551 * C39130 + C550 * C39126 +
            C556 * C39131 + C557 * C39127 + C5629 * C39132 + C5630 * C39128) *
               C50673 * C50734 * C1074 -
           ((C117 * C6141 + C50815 * C6143) * C39128 +
            (C117 * C6140 + C50815 * C6142) * C39132 + C5792 * C39127 +
            C5791 * C39131 + C968 * C39126 + C967 * C39130 + C361 * C39125 +
            C362 * C39129) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C119 + C50815 * C126) * C39129 +
           (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
           C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
           C5625 * C39128) *
              C50673 * C50734 * C1145 -
          (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
           C6162 * C39126 + C6161 * C39130 +
           (C117 * C310 + C50815 * C327) * C39125 +
           (C117 * C297 + C50815 * C311) * C39129) *
              C50673 * C50734 * C1146 +
          ((C117 * C298 + C50815 * C312) * C39129 +
           (C117 * C313 + C50815 * C328) * C39125 + C7067 * C39130 +
           C7068 * C39126 + C7069 * C39131 + C7070 * C39127 +
           (C117 * C4632 + C50815 * C4640) * C39132 +
           (C117 * C4638 + C50815 * C4644) * C39128) *
              C50673 * C50734 * C1147 -
          ((C117 * C21442 + C50815 * C21444) * C39128 +
           (C117 * C21441 + C50815 * C21443) * C39132 +
           (C117 * C3742 + C50815 * C3745) * C39127 +
           (C117 * C3739 + C50815 * C3743) * C39131 +
           (C117 * C3314 + C50815 * C3319) * C39126 +
           (C117 * C3310 + C50815 * C3313) * C39130 +
           (C117 * C1160 + C50815 * C1165) * C39125 +
           (C117 * C1153 + C50815 * C1161) * C39129) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C480 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C481 +
           (C5621 * C39129 + C5622 * C39125 + C5626 * C39130 + C5625 * C39126 +
            C7473 * C39131 + C7474 * C39127 +
            (C117 * C7461 + C50815 * C7465) * C39132 +
            (C117 * C7464 + C50815 * C7467) * C39128) *
               C50673 * C482) *
              C1074 +
          ((C6161 * C39129 + C6162 * C39125 + C6163 * C39130 + C6164 * C39126 +
            C6571 * C39131 + C6572 * C39127 + C39922 * C39132 +
            C39923 * C39128) *
               C50673 * C481 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C480 -
           ((C117 * C24044 + C50815 * C24046) * C39128 +
            (C117 * C24043 + C50815 * C24045) * C39132 + C39923 * C39127 +
            C39922 * C39131 + C6572 * C39126 + C6571 * C39130 + C6164 * C39125 +
            C6163 * C39129) *
               C50673 * C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C33715 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C33713 +
             (C36738 + C36739 + C36740) * C33716 +
             (C36741 + C36742 + C36743) * C50894) *
                C50673 * C50960 -
            ((C36744 + C36745 + C36746) * C50894 +
             (C36747 + C36748 + C36749) * C33716 +
             (C36743 + C36742 + C36741) * C33713 +
             (C36740 + C36739 + C36738) * C33715) *
                C50673 * C50798) *
               C1074 +
           (((C37248 + C37249 + C37250) * C33715 +
             (C37251 + C37252 + C37253) * C33713 +
             (C37656 + C37657 + C37658) * C33716 +
             (C37659 + C37660 + C37661) * C50894) *
                C50673 * C50798 -
            ((C37253 + C37252 + C37251) * C50894 +
             (C37250 + C37249 + C37248) * C33716 +
             (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C33713 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C33715) *
                C50673 * C50960) *
               C50770) *
              C50951 +
          ((((C2782 + C2781 + C2780) * C33715 +
             (C2779 + C2778 + C2777) * C33713 +
             (C2783 + C2784 + C2785) * C33716 +
             (C2786 + C2787 + C2788) * C50894) *
                C50673 * C50798 -
            ((C2777 + C2778 + C2779) * C50894 +
             (C2780 + C2781 + C2782) * C33716 +
             (C2388 + C2387 + C2386) * C33713 +
             (C2385 + C2384 + C2383) * C33715) *
                C50673 * C50960) *
               C1074 +
           (((C2588 + C2587 + C2586) * C33715 +
             (C2585 + C2584 + C2583) * C33713 +
             (C3335 + C3336 + C3337) * C33716 +
             (C3338 + C3339 + C3340) * C50894) *
                C50673 * C50960 -
            ((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 + C2339 * C2750 +
              C2343 * C1272 + C2338 * C1278) *
                 C50894 +
             (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 + C2339 * C2745 +
              C2343 * C1266 + C2338 * C1273) *
                 C33716 +
             (C3340 + C3339 + C3338) * C33713 +
             (C3337 + C3336 + C3335) * C33715) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C33715 +
              (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
              C5620 * C50894) *
                 C17235 +
             (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
                C50960 -
            (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
             (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
              C5619 * C33715) *
                 C17235) *
                C50798) *
               C1074 +
           (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
              C6164 * C50894) *
                 C17235 +
             (C34564 + C34565 + C34566 + C34567) * C17236 +
             (C34568 + C34569 + C34570 + C34571) * C17237) *
                C50798 -
            (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
             (C6162 * C50894 + C6161 * C33716 +
              (C117 * C310 + C50815 * C327) * C33713 +
              (C117 * C297 + C50815 * C311) * C33715) *
                 C17235) *
                C50960) *
               C50770) *
              C50951 +
          ((((C34055 + C34054 + C34053 + C34052) * C17235 +
             (C34051 + C34050 + C34049 + C34048) * C17236 +
             (C34364 + C34365 + C34366 + C34367) * C17237) *
                C50798 -
            (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
             (C33721 + C33720 + C33719 + C33718) * C17235) *
                C50960) *
               C1074 +
           (((C33893 + C33892 + C33891 + C33890) * C17235 +
             (C33889 + C33888 + C33887 + C33886) * C17236 +
             (C34211 + C34212 + C34213 + C34214) * C17237) *
                C50960 -
            (((C117 * C1268 + C50815 * C1276) * C50894 +
              (C117 * C1264 + C50815 * C1269) * C33716 + C970 * C33713 +
              C969 * C33715) *
                 C17237 +
             (C34571 + C34570 + C34569 + C34568) * C17236 +
             (C34567 + C34566 + C34565 + C34564) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C39129 +
             (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
             C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
             C5625 * C39128) *
                C50673 * C50960 -
            (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
             C5622 * C39126 + C5621 * C39130 + C5620 * C39125 +
             C5619 * C39129) *
                C50673 * C50798) *
               C1074 +
           ((C6161 * C39129 + C6162 * C39125 + C6163 * C39130 + C6164 * C39126 +
             C6571 * C39131 + C6572 * C39127 + C39922 * C39132 +
             C39923 * C39128) *
                C50673 * C50798 -
            (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
             C6162 * C39126 + C6161 * C39130 +
             (C117 * C310 + C50815 * C327) * C39125 +
             (C117 * C297 + C50815 * C311) * C39129) *
                C50673 * C50960) *
               C50770) *
              C50951 +
          (((C553 * C39129 + C552 * C39125 + C554 * C39130 + C555 * C39126 +
             C5624 * C39131 + C5623 * C39127 + C5627 * C39132 +
             C5628 * C39128) *
                C50673 * C50798 -
            (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
             C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
                C50673 * C50960) *
               C1074 +
           ((C364 * C39129 + C363 * C39125 + C965 * C39130 + C966 * C39126 +
             C5420 * C39131 + C5419 * C39127 + C6165 * C39132 +
             C6166 * C39128) *
                C50673 * C50960 -
            ((C117 * C6560 + C50815 * C6564) * C39128 +
             (C117 * C6558 + C50815 * C6561) * C39132 + C6166 * C39127 +
             C6165 * C39131 + C5419 * C39126 + C5420 * C39130 + C966 * C39125 +
             C965 * C39129) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C33715 +
            (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
            C5620 * C50894) *
               C17235 +
           (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
              C50734 * C1145 -
          (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
           (C6162 * C50894 + C6161 * C33716 +
            (C117 * C310 + C50815 * C327) * C33713 +
            (C117 * C297 + C50815 * C311) * C33715) *
               C17235) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C33715 +
            (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
            C7068 * C50894) *
               C17235 +
           (C33894 + C33895 + C33896 + C33897) * C17236 +
           (C33898 + C33899 + C33900 + C33901) * C17237) *
              C50734 * C1147 -
          (((C117 * C3317 + C50815 * C3321) * C50894 +
            (C117 * C3312 + C50815 * C3318) * C33716 +
            (C117 * C1156 + C50815 * C1163) * C33713 +
            (C117 * C1151 + C50815 * C1157) * C33715) *
               C17237 +
           ((C117 * C3316 + C50815 * C3320) * C50894 +
            (C117 * C3311 + C50815 * C3315) * C33716 +
            (C117 * C1158 + C50815 * C1164) * C33713 +
            (C117 * C1152 + C50815 * C1159) * C33715) *
               C17236 +
           ((C117 * C3314 + C50815 * C3319) * C50894 +
            (C117 * C3310 + C50815 * C3313) * C33716 +
            (C117 * C1160 + C50815 * C1165) * C33713 +
            (C117 * C1153 + C50815 * C1161) * C33715) *
               C17235) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C1074 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C50770) *
              C1076 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C34211 + C34212 + C34213 + C34214) * C17237) *
               C50734 * C50770 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C1074) *
              C1077 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C50734 * C1074 -
           (((C117 * C945 + C50815 * C951) * C50894 +
             (C117 * C936 + C50815 * C946) * C33716 + C686 * C33713 +
             C685 * C33715) *
                C17237 +
            (C34214 + C34213 + C34212 + C34211) * C17236 + C34216 * C17235) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50734 * C1074 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C50770 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C1074) *
              C1077 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C50734 * C1074 -
           ((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 + C2339 * C1624 +
             C2343 * C942 + C2338 * C949) *
                C50894 +
            (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 + C2339 * C1618 +
             C2343 * C934 + C2338 * C941) *
                C33716 +
            (C2952 + C2951 + C2950) * C33713 +
            (C2949 + C2948 + C2947) * C33715) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C36738 + C36739 + C36740) * C33716 +
           (C36741 + C36742 + C36743) * C50894) *
              C50673 * C50734 * C1145 -
          ((C37253 + C37252 + C37251) * C50894 +
           (C37250 + C37249 + C37248) * C33716 +
           (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
            C2343 * C310 + C2338 * C327) *
               C33713 +
           (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
            C2343 * C297 + C2338 * C311) *
               C33715) *
              C50673 * C50734 * C1146 +
          ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
            C2345 * C2546 + C2340 * C2549) *
               C33715 +
           (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
            C2345 * C2550 + C2340 * C2555) *
               C33713 +
           (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
            C2345 * C4233 + C2340 * C4237) *
               C33716 +
           (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
            C2345 * C4236 + C2340 * C4239) *
               C50894) *
              C50673 * C50734 * C1147 -
          ((C2345 * C21176 + C2340 * C21178 + C2344 * C4236 + C2339 * C4239 +
            C2343 * C3314 + C2338 * C3319) *
               C50894 +
           (C2345 * C21175 + C2340 * C21177 + C2344 * C4233 + C2339 * C4237 +
            C2343 * C3310 + C2338 * C3313) *
               C33716 +
           (C2345 * C3588 + C2340 * C3591 + C2344 * C2550 + C2339 * C2555 +
            C2343 * C1160 + C2338 * C1165) *
               C33713 +
           (C2345 * C3585 + C2340 * C3589 + C2344 * C2546 + C2339 * C2549 +
            C2343 * C1153 + C2338 * C1161) *
               C33715) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C50734 * C1074 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C50734 * C50770) *
              C1076 +
          ((C364 * C39129 + C363 * C39125 + C965 * C39130 + C966 * C39126 +
            C5420 * C39131 + C5419 * C39127 + C6165 * C39132 + C6166 * C39128) *
               C50673 * C50734 * C50770 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C50734 * C1074) *
              C1077 +
          ((C170 * C39129 + C171 * C39125 + C551 * C39130 + C550 * C39126 +
            C556 * C39131 + C557 * C39127 + C5629 * C39132 + C5630 * C39128) *
               C50673 * C50734 * C1074 -
           ((C117 * C6141 + C50815 * C6143) * C39128 +
            (C117 * C6140 + C50815 * C6142) * C39132 + C5792 * C39127 +
            C5791 * C39131 + C968 * C39126 + C967 * C39130 + C361 * C39125 +
            C362 * C39129) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50815 * C126) * C39129 +
           (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
           C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
           C5625 * C39128) *
              C50673 * C50734 * C1145 -
          (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
           C6162 * C39126 + C6161 * C39130 +
           (C117 * C310 + C50815 * C327) * C39125 +
           (C117 * C297 + C50815 * C311) * C39129) *
              C50673 * C50734 * C1146 +
          ((C117 * C298 + C50815 * C312) * C39129 +
           (C117 * C313 + C50815 * C328) * C39125 + C7067 * C39130 +
           C7068 * C39126 + C7069 * C39131 + C7070 * C39127 +
           (C117 * C4632 + C50815 * C4640) * C39132 +
           (C117 * C4638 + C50815 * C4644) * C39128) *
              C50673 * C50734 * C1147 -
          ((C117 * C21442 + C50815 * C21444) * C39128 +
           (C117 * C21441 + C50815 * C21443) * C39132 +
           (C117 * C3742 + C50815 * C3745) * C39127 +
           (C117 * C3739 + C50815 * C3743) * C39131 +
           (C117 * C3314 + C50815 * C3319) * C39126 +
           (C117 * C3310 + C50815 * C3313) * C39130 +
           (C117 * C1160 + C50815 * C1165) * C39125 +
           (C117 * C1153 + C50815 * C1161) * C39129) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C33715 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C33713 +
             (C36738 + C36739 + C36740) * C33716 +
             (C36741 + C36742 + C36743) * C50894) *
                C50673 * C1725 -
            ((C36744 + C36745 + C36746) * C50894 +
             (C36747 + C36748 + C36749) * C33716 +
             (C36743 + C36742 + C36741) * C33713 +
             (C36740 + C36739 + C36738) * C33715) *
                C50673 * C50798) *
               C50959 +
           (((C37248 + C37249 + C37250) * C33715 +
             (C37251 + C37252 + C37253) * C33713 +
             (C37656 + C37657 + C37658) * C33716 +
             (C37659 + C37660 + C37661) * C50894) *
                C50673 * C50798 -
            ((C37253 + C37252 + C37251) * C50894 +
             (C37250 + C37249 + C37248) * C33716 +
             (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C33713 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C33715) *
                C50673 * C1725) *
               C50770) *
              C50951 +
          ((((C2782 + C2781 + C2780) * C33715 +
             (C2779 + C2778 + C2777) * C33713 +
             (C2783 + C2784 + C2785) * C33716 +
             (C2786 + C2787 + C2788) * C50894) *
                C50673 * C50798 -
            ((C2777 + C2778 + C2779) * C50894 +
             (C2780 + C2781 + C2782) * C33716 +
             (C2388 + C2387 + C2386) * C33713 +
             (C2385 + C2384 + C2383) * C33715) *
                C50673 * C1725) *
               C50959 +
           (((C2588 + C2587 + C2586) * C33715 +
             (C2585 + C2584 + C2583) * C33713 +
             (C3335 + C3336 + C3337) * C33716 +
             (C3338 + C3339 + C3340) * C50894) *
                C50673 * C1725 -
            ((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 + C2339 * C2750 +
              C2343 * C1272 + C2338 * C1278) *
                 C50894 +
             (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 + C2339 * C2745 +
              C2343 * C1266 + C2338 * C1273) *
                 C33716 +
             (C3340 + C3339 + C3338) * C33713 +
             (C3337 + C3336 + C3335) * C33715) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C33715 +
              (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
              C5620 * C50894) *
                 C17235 +
             (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
                C1725 -
            (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
             (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
              C5619 * C33715) *
                 C17235) *
                C50798) *
               C50959 +
           (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
              C6164 * C50894) *
                 C17235 +
             (C34564 + C34565 + C34566 + C34567) * C17236 +
             (C34568 + C34569 + C34570 + C34571) * C17237) *
                C50798 -
            (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
             (C6162 * C50894 + C6161 * C33716 +
              (C117 * C310 + C50815 * C327) * C33713 +
              (C117 * C297 + C50815 * C311) * C33715) *
                 C17235) *
                C1725) *
               C50770) *
              C50951 +
          ((((C34055 + C34054 + C34053 + C34052) * C17235 +
             (C34051 + C34050 + C34049 + C34048) * C17236 +
             (C34364 + C34365 + C34366 + C34367) * C17237) *
                C50798 -
            (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
             (C33721 + C33720 + C33719 + C33718) * C17235) *
                C1725) *
               C50959 +
           (((C33893 + C33892 + C33891 + C33890) * C17235 +
             (C33889 + C33888 + C33887 + C33886) * C17236 +
             (C34211 + C34212 + C34213 + C34214) * C17237) *
                C1725 -
            (((C117 * C1268 + C50815 * C1276) * C50894 +
              (C117 * C1264 + C50815 * C1269) * C33716 + C970 * C33713 +
              C969 * C33715) *
                 C17237 +
             (C34571 + C34570 + C34569 + C34568) * C17236 +
             (C34567 + C34566 + C34565 + C34564) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C39129 +
             (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
             C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
             C5625 * C39128) *
                C50673 * C1725 -
            (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
             C5622 * C39126 + C5621 * C39130 + C5620 * C39125 +
             C5619 * C39129) *
                C50673 * C50798) *
               C50959 +
           ((C6161 * C39129 + C6162 * C39125 + C6163 * C39130 + C6164 * C39126 +
             C6571 * C39131 + C6572 * C39127 + C39922 * C39132 +
             C39923 * C39128) *
                C50673 * C50798 -
            (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
             C6162 * C39126 + C6161 * C39130 +
             (C117 * C310 + C50815 * C327) * C39125 +
             (C117 * C297 + C50815 * C311) * C39129) *
                C50673 * C1725) *
               C50770) *
              C50951 +
          (((C553 * C39129 + C552 * C39125 + C554 * C39130 + C555 * C39126 +
             C5624 * C39131 + C5623 * C39127 + C5627 * C39132 +
             C5628 * C39128) *
                C50673 * C50798 -
            (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
             C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
                C50673 * C1725) *
               C50959 +
           ((C364 * C39129 + C363 * C39125 + C965 * C39130 + C966 * C39126 +
             C5420 * C39131 + C5419 * C39127 + C6165 * C39132 +
             C6166 * C39128) *
                C50673 * C1725 -
            ((C117 * C6560 + C50815 * C6564) * C39128 +
             (C117 * C6558 + C50815 * C6561) * C39132 + C6166 * C39127 +
             C6165 * C39131 + C5419 * C39126 + C5420 * C39130 + C966 * C39125 +
             C965 * C39129) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C51006 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C51007 +
           ((C36749 + C36748 + C36747) * C33715 +
            (C36746 + C36745 + C36744) * C33713 +
            (C38568 + C38569 + C38570) * C33716 +
            (C38571 + C38572 + C38573) * C50894) *
               C50673 * C2141) *
              C50959 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C51007 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C51006 -
           ((C2345 * C21442 + C2340 * C21444 + C2344 * C4638 + C2339 * C4644 +
             C2343 * C4639 + C2338 * C4645) *
                C50894 +
            (C2345 * C21441 + C2340 * C21443 + C2344 * C4632 + C2339 * C4640 +
             C2343 * C4633 + C2338 * C4641) *
                C33716 +
            (C37661 + C37660 + C37659) * C33713 +
            (C37658 + C37657 + C37656) * C33715) *
               C50673 * C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C51006 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C51007 +
           ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 +
             C5625 * C50894) *
                C17235 +
            (C34056 + C34057 + C34058 + C34059) * C17236 +
            (C34060 + C34061 + C34062 + C34063) * C17237) *
               C2141) *
              C50959 +
          (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
             C6164 * C50894) *
                C17235 +
            (C34564 + C34565 + C34566 + C34567) * C17236 +
            (C34568 + C34569 + C34570 + C34571) * C17237) *
               C51007 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C51006 -
           (((C117 * C6141 + C50815 * C6143) * C50894 +
             (C117 * C6140 + C50815 * C6142) * C33716 + C5792 * C33713 +
             C5791 * C33715) *
                C17237 +
            (C6166 * C50894 + C6165 * C33716 + C5419 * C33713 +
             C5420 * C33715) *
                C17236 +
            (C6572 * C50894 + C6571 * C33716 + C6164 * C33713 +
             C6163 * C33715) *
                C17235) *
               C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C51006 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C51007 +
           (C5621 * C39129 + C5622 * C39125 + C5626 * C39130 + C5625 * C39126 +
            C7473 * C39131 + C7474 * C39127 + C40526 * C39132 +
            C40527 * C39128) *
               C50673 * C2141) *
              C50959 +
          ((C6161 * C39129 + C6162 * C39125 + C6163 * C39130 + C6164 * C39126 +
            C6571 * C39131 + C6572 * C39127 + C39922 * C39132 +
            C39923 * C39128) *
               C50673 * C51007 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C51006 -
           ((C117 * C24044 + C50815 * C24046) * C39128 +
            (C117 * C24043 + C50815 * C24045) * C39132 + C39923 * C39127 +
            C39922 * C39131 + C6572 * C39126 + C6571 * C39130 + C6164 * C39125 +
            C6163 * C39129) *
               C50673 * C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50815 * C126) * C33715 +
                 (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
                 C5620 * C50894) *
                    C17235 +
                (C33718 + C33719 + C33720 + C33721) * C17236 +
                C33738 * C17237) *
                   C1725 -
               (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
                (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
                 C5619 * C33715) *
                    C17235) *
                   C50798) *
                  C50718 * C1076 +
              (((C34055 + C34054 + C34053 + C34052) * C17235 +
                (C34051 + C34050 + C34049 + C34048) * C17236 +
                (C34364 + C34365 + C34366 + C34367) * C17237) *
                   C50798 -
               (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
                (C33721 + C33720 + C33719 + C33718) * C17235) *
                   C1725) *
                  C50718 * C1077 +
              ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
                (C33730 + C33731 + C33732 + C33733) * C17237) *
                   C1725 -
               (((C117 * C511 + C50815 * C522) * C50894 +
                 (C117 * C492 + C50815 * C512) * C33716 + C800 * C33713 +
                 C799 * C33715) *
                    C17237 +
                (C34367 + C34366 + C34365 + C34364) * C17236 +
                C34369 * C17235) *
                   C50798) *
                  C50718 * C1078) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C119 + C50815 * C126) * C33715 +
                 (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
                 C5620 * C50894) *
                    C17235 +
                (C33718 + C33719 + C33720 + C33721) * C17236 +
                C33738 * C17237) *
                   C1725 -
               (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
                (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
                 C5619 * C33715) *
                    C17235) *
                   C50798) *
                  C289 +
              (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
                 C6164 * C50894) *
                    C17235 +
                (C34564 + C34565 + C34566 + C34567) * C17236 +
                (C34568 + C34569 + C34570 + C34571) * C17237) *
                   C50798 -
               (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
                (C6162 * C50894 + C6161 * C33716 +
                 (C117 * C310 + C50815 * C327) * C33713 +
                 (C117 * C297 + C50815 * C311) * C33715) *
                    C17235) *
                   C1725) *
                  C290 +
              ((((C117 * C298 + C50815 * C312) * C33715 +
                 (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
                 C7068 * C50894) *
                    C17235 +
                (C33894 + C33895 + C33896 + C33897) * C17236 +
                (C33898 + C33899 + C33900 + C33901) * C17237) *
                   C1725 -
               (((C117 * C2747 + C50815 * C2751) * C50894 +
                 (C117 * C2742 + C50815 * C2748) * C33716 + C11097 * C33713 +
                 C11096 * C33715) *
                    C17237 +
                (C5424 * C50894 + C5423 * C33716 + C5422 * C33713 +
                 C5421 * C33715) *
                    C17236 +
                (C7070 * C50894 + C7069 * C33716 + C7068 * C33713 +
                 C7067 * C33715) *
                    C17235) *
                   C50798) *
                  C291) *
             C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C33715 +
            (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
            C5620 * C50894) *
               C17235 +
           (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
              C1891 -
          (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
           (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 + C5619 * C33715) *
               C17235) *
              C1892 +
          ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 + C5625 * C50894) *
               C17235 +
           (C34056 + C34057 + C34058 + C34059) * C17236 +
           (C34060 + C34061 + C34062 + C34063) * C17237) *
              C1893 -
          (((C117 * C5583 + C50815 * C5587) * C50894 +
            (C117 * C5578 + C50815 * C5584) * C33716 + C5630 * C33713 +
            C5629 * C33715) *
               C17237 +
           (C5628 * C50894 + C5627 * C33716 + C5623 * C33713 + C5624 * C33715) *
               C17236 +
           (C7474 * C50894 + C7473 * C33716 + C5625 * C33713 + C5626 * C33715) *
               C17235) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C1725 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C50798 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C1725) *
              C50718 * C1077 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C1725 -
           ((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 + C2339 * C1277 +
             C2343 * C506 + C2338 * C519) *
                C50894 +
            (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 + C2339 * C1271 +
             C2343 * C489 + C2338 * C505) *
                C33716 +
            (C3116 + C3115 + C3114) * C33713 +
            (C3113 + C3112 + C3111) * C33715) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C1725 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C289 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C50798 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C1725) *
              C290 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C38160 + C38161 + C38162) * C33716 +
            (C38163 + C38164 + C38165) * C50894) *
               C50673 * C1725 -
           ((C2345 * C20846 + C2340 * C20848 + C2344 * C3742 + C2339 * C3745 +
             C2343 * C2744 + C2338 * C2749) *
                C50894 +
            (C2345 * C20845 + C2340 * C20847 + C2344 * C3739 + C2339 * C3743 +
             C2343 * C2740 + C2338 * C2743) *
                C33716 +
            (C38165 + C38164 + C38163) * C33713 +
            (C38162 + C38161 + C38160) * C33715) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C36738 + C36739 + C36740) * C33716 +
           (C36741 + C36742 + C36743) * C50894) *
              C50673 * C1891 -
          ((C36744 + C36745 + C36746) * C50894 +
           (C36747 + C36748 + C36749) * C33716 +
           (C36743 + C36742 + C36741) * C33713 +
           (C36740 + C36739 + C36738) * C33715) *
              C50673 * C1892 +
          ((C36749 + C36748 + C36747) * C33715 +
           (C36746 + C36745 + C36744) * C33713 +
           (C38568 + C38569 + C38570) * C33716 +
           (C38571 + C38572 + C38573) * C50894) *
              C50673 * C1893 -
          ((C2345 * C23126 + C2340 * C23128 + C2344 * C6562 + C2339 * C6565 +
            C2343 * C5580 + C2338 * C5585) *
               C50894 +
           (C2345 * C23125 + C2340 * C23127 + C2344 * C6559 + C2339 * C6563 +
            C2343 * C5576 + C2338 * C5579) *
               C33716 +
           (C38573 + C38572 + C38571) * C33713 +
           (C38570 + C38569 + C38568) * C33715) *
              C50673 * C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C1725 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C50798) *
              C50718 * C1076 +
          ((C553 * C39129 + C552 * C39125 + C554 * C39130 + C555 * C39126 +
            C5624 * C39131 + C5623 * C39127 + C5627 * C39132 + C5628 * C39128) *
               C50673 * C50798 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C1725) *
              C50718 * C1077 +
          ((C170 * C39129 + C171 * C39125 + C551 * C39130 + C550 * C39126 +
            C556 * C39131 + C557 * C39127 + C5629 * C39132 + C5630 * C39128) *
               C50673 * C1725 -
           ((C117 * C5583 + C50815 * C5587) * C39128 +
            (C117 * C5578 + C50815 * C5584) * C39132 + C5630 * C39127 +
            C5629 * C39131 + C557 * C39126 + C556 * C39130 + C550 * C39125 +
            C551 * C39129) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C1725 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C50798) *
              C289 +
          ((C6161 * C39129 + C6162 * C39125 + C6163 * C39130 + C6164 * C39126 +
            C6571 * C39131 + C6572 * C39127 + C39922 * C39132 +
            C39923 * C39128) *
               C50673 * C50798 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C1725) *
              C290 +
          (((C117 * C298 + C50815 * C312) * C39129 +
            (C117 * C313 + C50815 * C328) * C39125 + C7067 * C39130 +
            C7068 * C39126 + C7069 * C39131 + C7070 * C39127 + C40254 * C39132 +
            C40255 * C39128) *
               C50673 * C1725 -
           ((C117 * C23126 + C50815 * C23128) * C39128 +
            (C117 * C23125 + C50815 * C23127) * C39132 + C40255 * C39127 +
            C40254 * C39131 + C7070 * C39126 + C7069 * C39130 + C7068 * C39125 +
            C7067 * C39129) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C117 * C119 + C50815 * C126) * C39129 +
           (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
           C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
           C5625 * C39128) *
              C50673 * C1891 -
          (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
           C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
              C50673 * C1892 +
          (C5621 * C39129 + C5622 * C39125 + C5626 * C39130 + C5625 * C39126 +
           C7473 * C39131 + C7474 * C39127 + C40526 * C39132 +
           C40527 * C39128) *
              C50673 * C1893 -
          ((C117 * C40518 + C50815 * C40520) * C39128 +
           (C117 * C40517 + C50815 * C40519) * C39132 + C40527 * C39127 +
           C40526 * C39131 + C7474 * C39126 + C7473 * C39130 + C5625 * C39125 +
           C5626 * C39129) *
              C50673 * C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C51006 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C51007 +
           ((C36749 + C36748 + C36747) * C33715 +
            (C36746 + C36745 + C36744) * C33713 +
            (C38568 + C38569 + C38570) * C33716 +
            (C38571 + C38572 + C38573) * C50894) *
               C50673 * C2141) *
              C50718 * C50951 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C51007 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C51006 -
           ((C2345 * C4634 + C2340 * C4642 + C2344 * C4635 + C2339 * C4643 +
             C2343 * C1903 + C2338 * C1909) *
                C50894 +
            (C2345 * C4630 + C2340 * C4636 + C2344 * C4631 + C2339 * C4637 +
             C2343 * C1897 + C2338 * C1904) *
                C33716 +
            (C2788 + C2787 + C2786) * C33713 +
            (C2785 + C2784 + C2783) * C33715) *
               C50673 * C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C51006 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C51007 +
           ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 +
             C5625 * C50894) *
                C17235 +
            (C34056 + C34057 + C34058 + C34059) * C17236 +
            (C34060 + C34061 + C34062 + C34063) * C17237) *
               C2141) *
              C50718 * C50951 +
          (((C34055 + C34054 + C34053 + C34052) * C17235 +
            (C34051 + C34050 + C34049 + C34048) * C17236 +
            (C34364 + C34365 + C34366 + C34367) * C17237) *
               C51007 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C51006 -
           (((C117 * C1899 + C50815 * C1907) * C50894 +
             (C117 * C1895 + C50815 * C1900) * C33716 + C559 * C33713 +
             C558 * C33715) *
                C17237 +
            (C34063 + C34062 + C34061 + C34060) * C17236 +
            (C34059 + C34058 + C34057 + C34056) * C17235) *
               C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C51006 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C51007 +
           (C5621 * C39129 + C5622 * C39125 + C5626 * C39130 + C5625 * C39126 +
            C7473 * C39131 + C7474 * C39127 + C40526 * C39132 +
            C40527 * C39128) *
               C50673 * C2141) *
              C50718 * C50951 +
          ((C553 * C39129 + C552 * C39125 + C554 * C39130 + C555 * C39126 +
            C5624 * C39131 + C5623 * C39127 + C5627 * C39132 + C5628 * C39128) *
               C50673 * C51007 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C51006 -
           ((C117 * C7462 + C50815 * C7466) * C39128 +
            (C117 * C7460 + C50815 * C7463) * C39132 + C5628 * C39127 +
            C5627 * C39131 + C5623 * C39126 + C5624 * C39130 + C555 * C39125 +
            C554 * C39129) *
               C50673 * C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C1725 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C289 +
          (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
             C6164 * C50894) *
                C17235 +
            (C34564 + C34565 + C34566 + C34567) * C17236 +
            (C34568 + C34569 + C34570 + C34571) * C17237) *
               C50798 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C1725 -
           (((C117 * C2747 + C50815 * C2751) * C50894 +
             (C117 * C2742 + C50815 * C2748) * C33716 + C11097 * C33713 +
             C11096 * C33715) *
                C17237 +
            (C5424 * C50894 + C5423 * C33716 + C5422 * C33713 +
             C5421 * C33715) *
                C17236 +
            (C7070 * C50894 + C7069 * C33716 + C7068 * C33713 +
             C7067 * C33715) *
                C17235) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C1725 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C50718 * C1076 +
          (((C34055 + C34054 + C34053 + C34052) * C17235 +
            (C34051 + C34050 + C34049 + C34048) * C17236 +
            (C34364 + C34365 + C34366 + C34367) * C17237) *
               C50798 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C1725) *
              C50718 * C1077 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C1725 -
           (((C117 * C511 + C50815 * C522) * C50894 +
             (C117 * C492 + C50815 * C512) * C33716 + C800 * C33713 +
             C799 * C33715) *
                C17237 +
            (C34367 + C34366 + C34365 + C34364) * C17236 + C34369 * C17235) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C1725 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C50798 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C1725) *
              C50718 * C1077 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C1725 -
           ((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 + C2339 * C1277 +
             C2343 * C506 + C2338 * C519) *
                C50894 +
            (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 + C2339 * C1271 +
             C2343 * C489 + C2338 * C505) *
                C33716 +
            (C3116 + C3115 + C3114) * C33713 +
            (C3113 + C3112 + C3111) * C33715) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C1725 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C289 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C50798 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C1725) *
              C290 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C38160 + C38161 + C38162) * C33716 +
            (C38163 + C38164 + C38165) * C50894) *
               C50673 * C1725 -
           ((C2345 * C20846 + C2340 * C20848 + C2344 * C3742 + C2339 * C3745 +
             C2343 * C2744 + C2338 * C2749) *
                C50894 +
            (C2345 * C20845 + C2340 * C20847 + C2344 * C3739 + C2339 * C3743 +
             C2343 * C2740 + C2338 * C2743) *
                C33716 +
            (C38165 + C38164 + C38163) * C33713 +
            (C38162 + C38161 + C38160) * C33715) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C1725 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C50798) *
              C50718 * C1076 +
          ((C553 * C39129 + C552 * C39125 + C554 * C39130 + C555 * C39126 +
            C5624 * C39131 + C5623 * C39127 + C5627 * C39132 + C5628 * C39128) *
               C50673 * C50798 -
           (C5623 * C39128 + C5624 * C39132 + C555 * C39127 + C554 * C39131 +
            C552 * C39126 + C553 * C39130 + C169 * C39125 + C168 * C39129) *
               C50673 * C1725) *
              C50718 * C1077 +
          ((C170 * C39129 + C171 * C39125 + C551 * C39130 + C550 * C39126 +
            C556 * C39131 + C557 * C39127 + C5629 * C39132 + C5630 * C39128) *
               C50673 * C1725 -
           ((C117 * C5583 + C50815 * C5587) * C39128 +
            (C117 * C5578 + C50815 * C5584) * C39132 + C5630 * C39127 +
            C5629 * C39131 + C557 * C39126 + C556 * C39130 + C550 * C39125 +
            C551 * C39129) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C39129 +
            (C117 * C127 + C50815 * C140) * C39125 + C5619 * C39130 +
            C5620 * C39126 + C5621 * C39131 + C5622 * C39127 + C5626 * C39132 +
            C5625 * C39128) *
               C50673 * C1725 -
           (C7474 * C39128 + C7473 * C39132 + C5625 * C39127 + C5626 * C39131 +
            C5622 * C39126 + C5621 * C39130 + C5620 * C39125 + C5619 * C39129) *
               C50673 * C50798) *
              C289 +
          ((C6161 * C39129 + C6162 * C39125 + C6163 * C39130 + C6164 * C39126 +
            C6571 * C39131 + C6572 * C39127 + C39922 * C39132 +
            C39923 * C39128) *
               C50673 * C50798 -
           (C6572 * C39128 + C6571 * C39132 + C6164 * C39127 + C6163 * C39131 +
            C6162 * C39126 + C6161 * C39130 +
            (C117 * C310 + C50815 * C327) * C39125 +
            (C117 * C297 + C50815 * C311) * C39129) *
               C50673 * C1725) *
              C290 +
          (((C117 * C298 + C50815 * C312) * C39129 +
            (C117 * C313 + C50815 * C328) * C39125 + C7067 * C39130 +
            C7068 * C39126 + C7069 * C39131 + C7070 * C39127 + C40254 * C39132 +
            C40255 * C39128) *
               C50673 * C1725 -
           ((C117 * C23126 + C50815 * C23128) * C39128 +
            (C117 * C23125 + C50815 * C23127) * C39132 + C40255 * C39127 +
            C40254 * C39131 + C7070 * C39126 + C7069 * C39130 + C7068 * C39125 +
            C7067 * C39129) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C50734 * C50959 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C50734 * C50770) *
              C51002 +
          (((C44619 + C44618 + C44617 + C44616 + C44615 + C44614) * C50944 +
            (C44930 + C44931 + C44932 + C44933 + C44934 + C44935) * C50678) *
               C50734 * C50770 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C50734 * C50959) *
              C51003 +
          (((C44461 + C44460 + C44459 + C44458 + C44457 + C44456) * C50944 +
            (C44462 + C44463 + C44464 + C44465 + C44466 + C44467) * C50678) *
               C50734 * C50959 -
           (((C117 * C1268 + C50815 * C1276) * C44445 +
             (C117 * C1264 + C50815 * C1269) * C44448 + C970 * C51011 +
             C969 * C44447 + C359 * C51010 + C360 * C44446) *
                C50678 +
            (C44935 + C44934 + C44933 + C44932 + C44931 + C44930) * C50944) *
               C50734 * C50770) *
              C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C44446 +
              (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
              C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                 C50944 +
             (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
                C50960 -
            ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
             (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 +
              C5621 * C44447 + C5620 * C51010 + C5619 * C44446) *
                 C50944) *
                C50798) *
               C50959 +
           (((C6161 * C44446 + C6162 * C51010 + C6163 * C44447 +
              C6164 * C51011 + C6571 * C44448 + C6572 * C44445) *
                 C50944 +
             (C45282 + C45283 + C45284 + C45285 + C45286 + C45287) * C50678) *
                C50798 -
            ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
             (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 +
              C6161 * C44447 + (C117 * C310 + C50815 * C327) * C51010 +
              (C117 * C297 + C50815 * C311) * C44446) *
                 C50944) *
                C50960) *
               C50770) *
              C292 +
          ((((C44777 + C44776 + C44775 + C44774 + C44773 + C44772) * C50944 +
             (C45082 + C45083 + C45084 + C45085 + C45086 + C45087) * C50678) *
                C50798 -
            ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
             (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
                C50960) *
               C50959 +
           (((C44619 + C44618 + C44617 + C44616 + C44615 + C44614) * C50944 +
             (C44930 + C44931 + C44932 + C44933 + C44934 + C44935) * C50678) *
                C50960 -
            (((C117 * C6141 + C50815 * C6143) * C44445 +
              (C117 * C6140 + C50815 * C6142) * C44448 + C5792 * C51011 +
              C5791 * C44447 + C968 * C51010 + C967 * C44446) *
                 C50678 +
             (C45287 + C45286 + C45285 + C45284 + C45283 + C45282) * C50944) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C50734 * C289 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C44446 +
             (C117 * C313 + C50815 * C328) * C51010 + C7067 * C44447 +
             C7068 * C51011 + C7069 * C44448 + C7070 * C44445) *
                C50944 +
            (C44620 + C44621 + C44622 + C44623 + C44624 + C44625) * C50678) *
               C50734 * C291) *
              C292 +
          (((C44619 + C44618 + C44617 + C44616 + C44615 + C44614) * C50944 +
            (C362 * C44446 + C361 * C51010 + C967 * C44447 + C968 * C51011 +
             C5791 * C44448 + C5792 * C44445) *
                C50678) *
               C50734 * C290 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C50734 * C289 -
           (((C117 * C2747 + C50815 * C2751) * C44445 +
             (C117 * C2742 + C50815 * C2748) * C44448 + C11097 * C51011 +
             C11096 * C44447 + C368 * C51010 + C367 * C44446) *
                C50678 +
            (C44625 + C44624 + C44623 + C44622 + C44621 + C44620) * C50944) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C44446 +
            (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
            C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
               C50944 +
           (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
              C50734 * C50718 * C113 -
          ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
           (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
              C50734 * C50718 * C114 +
          ((C44461 + C44460 + C44459 + C44458 + C44457 + C44456) * C50944 +
           (C44462 + C44463 + C44464 + C44465 + C44466 + C44467) * C50678) *
              C50734 * C50718 * C115 -
          (((C117 * C511 + C50815 * C522) * C44445 +
            (C117 * C492 + C50815 * C512) * C44448 + C800 * C51011 +
            C799 * C44447 + C174 * C51010 + C175 * C44446) *
               C50678 +
           (C44467 + C44466 + C44465 + C44464 + C44463 + C44462) * C50944) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C480 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C481 +
           ((C5621 * C44446 + C5622 * C51010 + C5626 * C44447 + C5625 * C51011 +
             C7473 * C44448 + C7474 * C44445) *
                C50944 +
            (C44778 + C44779 + C44780 + C44781 + C44782 + C44783) * C50678) *
               C482) *
              C50718 * C292 +
          (((C44777 + C44776 + C44775 + C44774 + C44773 + C44772) * C50944 +
            (C551 * C44446 + C550 * C51010 + C556 * C44447 + C557 * C51011 +
             C5629 * C44448 + C5630 * C44445) *
                C50678) *
               C481 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C480 -
           (((C117 * C5583 + C50815 * C5587) * C44445 +
             (C117 * C5578 + C50815 * C5584) * C44448 + C5630 * C51011 +
             C5629 * C44447 + C557 * C51010 + C556 * C44446) *
                C50678 +
            (C44783 + C44782 + C44781 + C44780 + C44779 + C44778) * C50944) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C50960 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C50798) *
              C50718 * C51002 +
          (((C44777 + C44776 + C44775 + C44774 + C44773 + C44772) * C50944 +
            (C45082 + C45083 + C45084 + C45085 + C45086 + C45087) * C50678) *
               C50798 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C50960) *
              C50718 * C51003 +
          (((C44461 + C44460 + C44459 + C44458 + C44457 + C44456) * C50944 +
            (C44462 + C44463 + C44464 + C44465 + C44466 + C44467) * C50678) *
               C50960 -
           (((C117 * C1899 + C50815 * C1907) * C44445 +
             (C117 * C1895 + C50815 * C1900) * C44448 + C559 * C51011 +
             C558 * C44447 + C548 * C51010 + C549 * C44446) *
                C50678 +
            (C45087 + C45086 + C45085 + C45084 + C45083 + C45082) * C50944) *
               C50798) *
              C50718 * C673)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C44446 +
            (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
            C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
               C50944 +
           (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
              C50734 * C50718 * C113 -
          ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
           (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
              C50734 * C50718 * C114 +
          ((C44461 + C44460 + C44459 + C44458 + C44457 + C44456) * C50944 +
           (C44462 + C44463 + C44464 + C44465 + C44466 + C44467) * C50678) *
              C50734 * C50718 * C115 -
          (((C117 * C511 + C50815 * C522) * C44445 +
            (C117 * C492 + C50815 * C512) * C44448 + C800 * C51011 +
            C799 * C44447 + C174 * C51010 + C175 * C44446) *
               C50678 +
           (C44467 + C44466 + C44465 + C44464 + C44463 + C44462) * C50944) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C50734 * C289 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C44446 +
             (C117 * C313 + C50815 * C328) * C51010 + C7067 * C44447 +
             C7068 * C51011 + C7069 * C44448 + C7070 * C44445) *
                C50944 +
            (C44620 + C44621 + C44622 + C44623 + C44624 + C44625) * C50678) *
               C50734 * C291) *
              C292 +
          (((C44619 + C44618 + C44617 + C44616 + C44615 + C44614) * C50944 +
            (C362 * C44446 + C361 * C51010 + C967 * C44447 + C968 * C51011 +
             C5791 * C44448 + C5792 * C44445) *
                C50678) *
               C50734 * C290 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C50734 * C289 -
           (((C117 * C2747 + C50815 * C2751) * C44445 +
             (C117 * C2742 + C50815 * C2748) * C44448 + C11097 * C51011 +
             C11096 * C44447 + C368 * C51010 + C367 * C44446) *
                C50678 +
            (C44625 + C44624 + C44623 + C44622 + C44621 + C44620) * C50944) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C50734 * C51004 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C50734 * C51005 +
           (((C117 * C298 + C50815 * C312) * C44446 +
             (C117 * C313 + C50815 * C328) * C51010 + C7067 * C44447 +
             C7068 * C51011 + C7069 * C44448 + C7070 * C44445) *
                C50944 +
            (C44620 + C44621 + C44622 + C44623 + C44624 + C44625) * C50678) *
               C50734 * C1380) *
              C50951 +
          (((C44619 + C44618 + C44617 + C44616 + C44615 + C44614) * C50944 +
            (C44930 + C44931 + C44932 + C44933 + C44934 + C44935) * C50678) *
               C50734 * C51005 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C50734 * C51004 -
           (((C117 * C2747 + C50815 * C2751) * C44445 +
             (C117 * C2742 + C50815 * C2748) * C44448 + C11097 * C51011 +
             C11096 * C44447 + C368 * C51010 + C367 * C44446) *
                C50678 +
            (C44625 + C44624 + C44623 + C44622 + C44621 + C44620) * C50944) *
               C50734 * C1380) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C50960 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C50798) *
              C51004 +
          (((C6161 * C44446 + C6162 * C51010 + C6163 * C44447 + C6164 * C51011 +
             C6571 * C44448 + C6572 * C44445) *
                C50944 +
            (C45282 + C45283 + C45284 + C45285 + C45286 + C45287) * C50678) *
               C50798 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C50960) *
              C51005 +
          ((((C117 * C298 + C50815 * C312) * C44446 +
             (C117 * C313 + C50815 * C328) * C51010 + C7067 * C44447 +
             C7068 * C51011 + C7069 * C44448 + C7070 * C44445) *
                C50944 +
            (C44620 + C44621 + C44622 + C44623 + C44624 + C44625) * C50678) *
               C50960 -
           (((C117 * C4634 + C50815 * C4642) * C44445 +
             (C117 * C4630 + C50815 * C4636) * C44448 + C5424 * C51011 +
             C5423 * C44447 + C5422 * C51010 + C5421 * C44446) *
                C50678 +
            (C40255 * C44445 + C40254 * C44448 + C7070 * C51011 +
             C7069 * C44447 + C7068 * C51010 + C7067 * C44446) *
                C50944) *
               C50798) *
              C1380) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C44446 +
            (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
            C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
               C50944 +
           (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
              C50734 * C1145 -
          ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
           (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
            (C117 * C310 + C50815 * C327) * C51010 +
            (C117 * C297 + C50815 * C311) * C44446) *
               C50944) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C44446 +
            (C117 * C313 + C50815 * C328) * C51010 + C7067 * C44447 +
            C7068 * C51011 + C7069 * C44448 + C7070 * C44445) *
               C50944 +
           (C44620 + C44621 + C44622 + C44623 + C44624 + C44625) * C50678) *
              C50734 * C1147 -
          (((C117 * C3740 + C50815 * C3744) * C44445 +
            (C117 * C3738 + C50815 * C3741) * C44448 +
            (C117 * C3316 + C50815 * C3320) * C51011 +
            (C117 * C3311 + C50815 * C3315) * C44447 +
            (C117 * C1158 + C50815 * C1164) * C51010 +
            (C117 * C1152 + C50815 * C1159) * C44446) *
               C50678 +
           ((C117 * C3742 + C50815 * C3745) * C44445 +
            (C117 * C3739 + C50815 * C3743) * C44448 +
            (C117 * C3314 + C50815 * C3319) * C51011 +
            (C117 * C3310 + C50815 * C3313) * C44447 +
            (C117 * C1160 + C50815 * C1165) * C51010 +
            (C117 * C1153 + C50815 * C1161) * C44446) *
               C50944) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C50734 * C1074 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C50734 * C50770) *
              C1076 +
          (((C44619 + C44618 + C44617 + C44616 + C44615 + C44614) * C50944 +
            (C44930 + C44931 + C44932 + C44933 + C44934 + C44935) * C50678) *
               C50734 * C50770 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C50734 * C1074) *
              C1077 +
          (((C44461 + C44460 + C44459 + C44458 + C44457 + C44456) * C50944 +
            (C44462 + C44463 + C44464 + C44465 + C44466 + C44467) * C50678) *
               C50734 * C1074 -
           (((C117 * C1268 + C50815 * C1276) * C44445 +
             (C117 * C1264 + C50815 * C1269) * C44448 + C970 * C51011 +
             C969 * C44447 + C359 * C51010 + C360 * C44446) *
                C50678 +
            (C44935 + C44934 + C44933 + C44932 + C44931 + C44930) * C50944) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C480 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C481 +
           ((C5621 * C44446 + C5622 * C51010 + C5626 * C44447 + C5625 * C51011 +
             C7473 * C44448 + C7474 * C44445) *
                C50944 +
            (C44778 + C44779 + C44780 + C44781 + C44782 + C44783) * C50678) *
               C482) *
              C1074 +
          (((C6161 * C44446 + C6162 * C51010 + C6163 * C44447 + C6164 * C51011 +
             C6571 * C44448 + C6572 * C44445) *
                C50944 +
            (C45282 + C45283 + C45284 + C45285 + C45286 + C45287) * C50678) *
               C481 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C480 -
           (((C117 * C6560 + C50815 * C6564) * C44445 +
             (C117 * C6558 + C50815 * C6561) * C44448 + C6166 * C51011 +
             C6165 * C44447 + C5419 * C51010 + C5420 * C44446) *
                C50678 +
            (C39923 * C44445 + C39922 * C44448 + C6572 * C51011 +
             C6571 * C44447 + C6164 * C51010 + C6163 * C44446) *
                C50944) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C44446 +
              (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
              C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                 C50944 +
             (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
                C50960 -
            ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
             (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 +
              C5621 * C44447 + C5620 * C51010 + C5619 * C44446) *
                 C50944) *
                C50798) *
               C1074 +
           (((C6161 * C44446 + C6162 * C51010 + C6163 * C44447 +
              C6164 * C51011 + C6571 * C44448 + C6572 * C44445) *
                 C50944 +
             (C45282 + C45283 + C45284 + C45285 + C45286 + C45287) * C50678) *
                C50798 -
            ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
             (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 +
              C6161 * C44447 + (C117 * C310 + C50815 * C327) * C51010 +
              (C117 * C297 + C50815 * C311) * C44446) *
                 C50944) *
                C50960) *
               C50770) *
              C50951 +
          ((((C44777 + C44776 + C44775 + C44774 + C44773 + C44772) * C50944 +
             (C45082 + C45083 + C45084 + C45085 + C45086 + C45087) * C50678) *
                C50798 -
            ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
             (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
                C50960) *
               C1074 +
           (((C44619 + C44618 + C44617 + C44616 + C44615 + C44614) * C50944 +
             (C44930 + C44931 + C44932 + C44933 + C44934 + C44935) * C50678) *
                C50960 -
            (((C117 * C6141 + C50815 * C6143) * C44445 +
              (C117 * C6140 + C50815 * C6142) * C44448 + C5792 * C51011 +
              C5791 * C44447 + C968 * C51010 + C967 * C44446) *
                 C50678 +
             (C45287 + C45286 + C45285 + C45284 + C45283 + C45282) * C50944) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C50734 * C1074 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C50734 * C50770) *
              C1076 +
          (((C44619 + C44618 + C44617 + C44616 + C44615 + C44614) * C50944 +
            (C44930 + C44931 + C44932 + C44933 + C44934 + C44935) * C50678) *
               C50734 * C50770 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C50734 * C1074) *
              C1077 +
          (((C44461 + C44460 + C44459 + C44458 + C44457 + C44456) * C50944 +
            (C44462 + C44463 + C44464 + C44465 + C44466 + C44467) * C50678) *
               C50734 * C1074 -
           (((C117 * C1268 + C50815 * C1276) * C44445 +
             (C117 * C1264 + C50815 * C1269) * C44448 + C970 * C51011 +
             C969 * C44447 + C359 * C51010 + C360 * C44446) *
                C50678 +
            (C44935 + C44934 + C44933 + C44932 + C44931 + C44930) * C50944) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C44446 +
            (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
            C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
               C50944 +
           (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
              C50734 * C1145 -
          ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
           (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
            (C117 * C310 + C50815 * C327) * C51010 +
            (C117 * C297 + C50815 * C311) * C44446) *
               C50944) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C44446 +
            (C117 * C313 + C50815 * C328) * C51010 + C7067 * C44447 +
            C7068 * C51011 + C7069 * C44448 + C7070 * C44445) *
               C50944 +
           (C44620 + C44621 + C44622 + C44623 + C44624 + C44625) * C50678) *
              C50734 * C1147 -
          (((C117 * C3740 + C50815 * C3744) * C44445 +
            (C117 * C3738 + C50815 * C3741) * C44448 +
            (C117 * C3316 + C50815 * C3320) * C51011 +
            (C117 * C3311 + C50815 * C3315) * C44447 +
            (C117 * C1158 + C50815 * C1164) * C51010 +
            (C117 * C1152 + C50815 * C1159) * C44446) *
               C50678 +
           ((C117 * C3742 + C50815 * C3745) * C44445 +
            (C117 * C3739 + C50815 * C3743) * C44448 +
            (C117 * C3314 + C50815 * C3319) * C51011 +
            (C117 * C3310 + C50815 * C3313) * C44447 +
            (C117 * C1160 + C50815 * C1165) * C51010 +
            (C117 * C1153 + C50815 * C1161) * C44446) *
               C50944) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C44446 +
              (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
              C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                 C50944 +
             (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
                C1725 -
            ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
             (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 +
              C5621 * C44447 + C5620 * C51010 + C5619 * C44446) *
                 C50944) *
                C50798) *
               C50959 +
           (((C6161 * C44446 + C6162 * C51010 + C6163 * C44447 +
              C6164 * C51011 + C6571 * C44448 + C6572 * C44445) *
                 C50944 +
             (C45282 + C45283 + C45284 + C45285 + C45286 + C45287) * C50678) *
                C50798 -
            ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
             (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 +
              C6161 * C44447 + (C117 * C310 + C50815 * C327) * C51010 +
              (C117 * C297 + C50815 * C311) * C44446) *
                 C50944) *
                C1725) *
               C50770) *
              C50951 +
          ((((C44777 + C44776 + C44775 + C44774 + C44773 + C44772) * C50944 +
             (C45082 + C45083 + C45084 + C45085 + C45086 + C45087) * C50678) *
                C50798 -
            ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
             (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
                C1725) *
               C50959 +
           (((C44619 + C44618 + C44617 + C44616 + C44615 + C44614) * C50944 +
             (C44930 + C44931 + C44932 + C44933 + C44934 + C44935) * C50678) *
                C1725 -
            (((C117 * C6141 + C50815 * C6143) * C44445 +
              (C117 * C6140 + C50815 * C6142) * C44448 + C5792 * C51011 +
              C5791 * C44447 + C968 * C51010 + C967 * C44446) *
                 C50678 +
             (C45287 + C45286 + C45285 + C45284 + C45283 + C45282) * C50944) *
                C50798) *
               C50770) *
              C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C51006 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C51007 +
           ((C5621 * C44446 + C5622 * C51010 + C5626 * C44447 + C5625 * C51011 +
             C7473 * C44448 + C7474 * C44445) *
                C50944 +
            (C44778 + C44779 + C44780 + C44781 + C44782 + C44783) * C50678) *
               C2141) *
              C50959 +
          (((C6161 * C44446 + C6162 * C51010 + C6163 * C44447 + C6164 * C51011 +
             C6571 * C44448 + C6572 * C44445) *
                C50944 +
            (C45282 + C45283 + C45284 + C45285 + C45286 + C45287) * C50678) *
               C51007 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C51006 -
           (((C117 * C6560 + C50815 * C6564) * C44445 +
             (C117 * C6558 + C50815 * C6561) * C44448 + C6166 * C51011 +
             C6165 * C44447 + C5419 * C51010 + C5420 * C44446) *
                C50678 +
            (C39923 * C44445 + C39922 * C44448 + C6572 * C51011 +
             C6571 * C44447 + C6164 * C51010 + C6163 * C44446) *
                C50944) *
               C2141) *
              C50770) *
         C50699) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C1725 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C50798) *
              C289 +
          (((C6161 * C44446 + C6162 * C51010 + C6163 * C44447 + C6164 * C51011 +
             C6571 * C44448 + C6572 * C44445) *
                C50944 +
            (C45282 + C45283 + C45284 + C45285 + C45286 + C45287) * C50678) *
               C50798 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50815 * C312) * C44446 +
             (C117 * C313 + C50815 * C328) * C51010 + C7067 * C44447 +
             C7068 * C51011 + C7069 * C44448 + C7070 * C44445) *
                C50944 +
            (C44620 + C44621 + C44622 + C44623 + C44624 + C44625) * C50678) *
               C1725 -
           (((C117 * C4634 + C50815 * C4642) * C44445 +
             (C117 * C4630 + C50815 * C4636) * C44448 + C5424 * C51011 +
             C5423 * C44447 + C5422 * C51010 + C5421 * C44446) *
                C50678 +
            (C40255 * C44445 + C40254 * C44448 + C7070 * C51011 +
             C7069 * C44447 + C7068 * C51010 + C7067 * C44446) *
                C50944) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C1725 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C50798) *
              C50718 * C1076 +
          (((C44777 + C44776 + C44775 + C44774 + C44773 + C44772) * C50944 +
            (C45082 + C45083 + C45084 + C45085 + C45086 + C45087) * C50678) *
               C50798 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C1725) *
              C50718 * C1077 +
          (((C44461 + C44460 + C44459 + C44458 + C44457 + C44456) * C50944 +
            (C44462 + C44463 + C44464 + C44465 + C44466 + C44467) * C50678) *
               C1725 -
           (((C117 * C1899 + C50815 * C1907) * C44445 +
             (C117 * C1895 + C50815 * C1900) * C44448 + C559 * C51011 +
             C558 * C44447 + C548 * C51010 + C549 * C44446) *
                C50678 +
            (C45087 + C45086 + C45085 + C45084 + C45083 + C45082) * C50944) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C44446 +
            (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
            C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
               C50944 +
           (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
              C1891 -
          ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
           (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
            C5620 * C51010 + C5619 * C44446) *
               C50944) *
              C1892 +
          ((C5621 * C44446 + C5622 * C51010 + C5626 * C44447 + C5625 * C51011 +
            C7473 * C44448 + C7474 * C44445) *
               C50944 +
           (C44778 + C44779 + C44780 + C44781 + C44782 + C44783) * C50678) *
              C1893 -
          (((C117 * C7462 + C50815 * C7466) * C44445 +
            (C117 * C7460 + C50815 * C7463) * C44448 + C5628 * C51011 +
            C5627 * C44447 + C5623 * C51010 + C5624 * C44446) *
               C50678 +
           (C40527 * C44445 + C40526 * C44448 + C7474 * C51011 +
            C7473 * C44447 + C5625 * C51010 + C5626 * C44446) *
               C50944) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C51006 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C51007 +
           ((C5621 * C44446 + C5622 * C51010 + C5626 * C44447 + C5625 * C51011 +
             C7473 * C44448 + C7474 * C44445) *
                C50944 +
            (C44778 + C44779 + C44780 + C44781 + C44782 + C44783) * C50678) *
               C2141) *
              C50718 * C50951 +
          (((C44777 + C44776 + C44775 + C44774 + C44773 + C44772) * C50944 +
            (C45082 + C45083 + C45084 + C45085 + C45086 + C45087) * C50678) *
               C51007 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C51006 -
           (((C117 * C5583 + C50815 * C5587) * C44445 +
             (C117 * C5578 + C50815 * C5584) * C44448 + C5630 * C51011 +
             C5629 * C44447 + C557 * C51010 + C556 * C44446) *
                C50678 +
            (C44783 + C44782 + C44781 + C44780 + C44779 + C44778) * C50944) *
               C2141) *
              C50718 * C50705)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C1725 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C50798) *
              C50718 * C1076 +
          (((C44777 + C44776 + C44775 + C44774 + C44773 + C44772) * C50944 +
            (C45082 + C45083 + C45084 + C45085 + C45086 + C45087) * C50678) *
               C50798 -
           ((C44456 + C44457 + C44458 + C44459 + C44460 + C44461) * C50678 +
            (C44455 + C44454 + C44453 + C44452 + C44451 + C44450) * C50944) *
               C1725) *
              C50718 * C1077 +
          (((C44461 + C44460 + C44459 + C44458 + C44457 + C44456) * C50944 +
            (C44462 + C44463 + C44464 + C44465 + C44466 + C44467) * C50678) *
               C1725 -
           (((C117 * C1899 + C50815 * C1907) * C44445 +
             (C117 * C1895 + C50815 * C1900) * C44448 + C559 * C51011 +
             C558 * C44447 + C548 * C51010 + C549 * C44446) *
                C50678 +
            (C45087 + C45086 + C45085 + C45084 + C45083 + C45082) * C50944) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C44446 +
             (C117 * C127 + C50815 * C140) * C51010 + C5619 * C44447 +
             C5620 * C51011 + C5621 * C44448 + C5622 * C44445) *
                C50944 +
            (C44450 + C44451 + C44452 + C44453 + C44454 + C44455) * C50678) *
               C1725 -
           ((C44772 + C44773 + C44774 + C44775 + C44776 + C44777) * C50678 +
            (C5625 * C44445 + C5626 * C44448 + C5622 * C51011 + C5621 * C44447 +
             C5620 * C51010 + C5619 * C44446) *
                C50944) *
               C50798) *
              C289 +
          (((C6161 * C44446 + C6162 * C51010 + C6163 * C44447 + C6164 * C51011 +
             C6571 * C44448 + C6572 * C44445) *
                C50944 +
            (C45282 + C45283 + C45284 + C45285 + C45286 + C45287) * C50678) *
               C50798 -
           ((C44614 + C44615 + C44616 + C44617 + C44618 + C44619) * C50678 +
            (C6164 * C44445 + C6163 * C44448 + C6162 * C51011 + C6161 * C44447 +
             (C117 * C310 + C50815 * C327) * C51010 +
             (C117 * C297 + C50815 * C311) * C44446) *
                C50944) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50815 * C312) * C44446 +
             (C117 * C313 + C50815 * C328) * C51010 + C7067 * C44447 +
             C7068 * C51011 + C7069 * C44448 + C7070 * C44445) *
                C50944 +
            (C44620 + C44621 + C44622 + C44623 + C44624 + C44625) * C50678) *
               C1725 -
           (((C117 * C4634 + C50815 * C4642) * C44445 +
             (C117 * C4630 + C50815 * C4636) * C44448 + C5424 * C51011 +
             C5423 * C44447 + C5422 * C51010 + C5421 * C44446) *
                C50678 +
            (C40255 * C44445 + C40254 * C44448 + C7070 * C51011 +
             C7069 * C44447 + C7068 * C51010 + C7067 * C44446) *
                C50944) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C50959 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C50770) *
              C51002 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C34211 + C34212 + C34213 + C34214) * C17237) *
               C50734 * C50770 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C50959) *
              C51003 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C50734 * C50959 -
           (((C117 * C945 + C50815 * C951) * C50894 +
             (C117 * C936 + C50815 * C946) * C33716 + C686 * C33713 +
             C685 * C33715) *
                C17237 +
            (C34214 + C34213 + C34212 + C34211) * C17236 + C34216 * C17235) *
               C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50734 * C50959 -
           ((C2345 * C3314 + C2340 * C3319 + C2344 * C1621 + C2339 * C1626 +
             C2343 * C938 + C2338 * C947) *
                C50894 +
            (C2345 * C3310 + C2340 * C3313 + C2344 * C1614 + C2339 * C1622 +
             C2343 * C932 + C2338 * C937) *
                C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C50770) *
              C51002 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C50770 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C50959) *
              C51003 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C50734 * C50959 -
           ((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 + C2339 * C1624 +
             C2343 * C942 + C2338 * C949) *
                C50894 +
            (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 + C2339 * C1618 +
             C2343 * C934 + C2338 * C941) *
                C33716 +
            (C2952 + C2951 + C2950) * C33713 +
            (C2949 + C2948 + C2947) * C33715) *
               C50673 * C50734 * C50770) *
              C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C33715 +
              (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
              C5620 * C50894) *
                 C17235 +
             (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
                C50960 -
            (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
             (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
              C5619 * C33715) *
                 C17235) *
                C50798) *
               C50959 +
           (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
              C6164 * C50894) *
                 C17235 +
             (C34564 + C34565 + C34566 + C34567) * C17236 +
             (C34568 + C34569 + C34570 + C34571) * C17237) *
                C50798 -
            (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
             (C6162 * C50894 + C6161 * C33716 +
              (C117 * C310 + C50815 * C327) * C33713 +
              (C117 * C297 + C50815 * C311) * C33715) *
                 C17235) *
                C50960) *
               C50770) *
              C292 +
          ((((C34055 + C34054 + C34053 + C34052) * C17235 +
             (C34051 + C34050 + C34049 + C34048) * C17236 +
             (C34364 + C34365 + C34366 + C34367) * C17237) *
                C50798 -
            (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
             (C33721 + C33720 + C33719 + C33718) * C17235) *
                C50960) *
               C50959 +
           (((C33893 + C33892 + C33891 + C33890) * C17235 +
             (C33889 + C33888 + C33887 + C33886) * C17236 +
             (C34211 + C34212 + C34213 + C34214) * C17237) *
                C50960 -
            (((C117 * C1268 + C50815 * C1276) * C50894 +
              (C117 * C1264 + C50815 * C1269) * C33716 + C970 * C33713 +
              C969 * C33715) *
                 C17237 +
             (C34571 + C34570 + C34569 + C34568) * C17236 +
             (C34567 + C34566 + C34565 + C34564) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C33715 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C33713 +
             (C36738 + C36739 + C36740) * C33716 +
             (C36741 + C36742 + C36743) * C50894) *
                C50673 * C50960 -
            ((C36744 + C36745 + C36746) * C50894 +
             (C36747 + C36748 + C36749) * C33716 +
             (C36743 + C36742 + C36741) * C33713 +
             (C36740 + C36739 + C36738) * C33715) *
                C50673 * C50798) *
               C50959 +
           (((C37248 + C37249 + C37250) * C33715 +
             (C37251 + C37252 + C37253) * C33713 +
             (C2343 * C1267 + C2338 * C1275 + C2344 * C2740 + C2339 * C2743 +
              C2345 * C3739 + C2340 * C3743) *
                 C33716 +
             (C2343 * C1274 + C2338 * C1279 + C2344 * C2744 + C2339 * C2749 +
              C2345 * C3742 + C2340 * C3745) *
                 C50894) *
                C50673 * C50798 -
            ((C37253 + C37252 + C37251) * C50894 +
             (C37250 + C37249 + C37248) * C33716 +
             (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C33713 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C33715) *
                C50673 * C50960) *
               C50770) *
              C292 +
          ((((C2782 + C2781 + C2780) * C33715 +
             (C2779 + C2778 + C2777) * C33713 +
             (C2783 + C2784 + C2785) * C33716 +
             (C2786 + C2787 + C2788) * C50894) *
                C50673 * C50798 -
            ((C2777 + C2778 + C2779) * C50894 +
             (C2780 + C2781 + C2782) * C33716 +
             (C2388 + C2387 + C2386) * C33713 +
             (C2385 + C2384 + C2383) * C33715) *
                C50673 * C50960) *
               C50959 +
           (((C2588 + C2587 + C2586) * C33715 +
             (C2585 + C2584 + C2583) * C33713 +
             (C3335 + C3336 + C3337) * C33716 +
             (C3338 + C3339 + C3340) * C50894) *
                C50673 * C50960 -
            ((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 + C2339 * C2750 +
              C2343 * C1272 + C2338 * C1278) *
                 C50894 +
             (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 + C2339 * C2745 +
              C2343 * C1266 + C2338 * C1273) *
                 C33716 +
             (C3340 + C3339 + C3338) * C33713 +
             (C3337 + C3336 + C3335) * C33715) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C289 -
           ((C33886 + C33887 + C33888 + C33889) * C17237 +
            (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C50734 * C291) *
              C292 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C360 * C33715 + C359 * C33713 + C969 * C33716 + C970 * C50894) *
                C17237) *
               C50734 * C290 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C289 -
           (((C117 * C1615 + C50815 * C1623) * C50894 +
             (C117 * C1611 + C50815 * C1616) * C33716 + C370 * C33713 +
             C369 * C33715) *
                C17237 +
            (C33901 + C33900 + C33899 + C33898) * C17236 +
            (C33897 + C33896 + C33895 + C33894) * C17235) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C33715 +
            (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
            C5620 * C50894) *
               C17235 +
           (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
              C50734 * C50718 * C113 -
          (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
           (C33721 + C33720 + C33719 + C33718) * C17235) *
              C50734 * C50718 * C114 +
          (C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
           (C33730 + C33731 + C33732 + C33733) * C17237) *
              C50734 * C50718 * C115 -
          (((C117 * C789 + C50815 * C791) * C50894 +
            (C117 * C788 + C50815 * C790) * C33716 + C177 * C33713 +
            C176 * C33715) *
               C17237 +
           (C33733 + C33732 + C33731 + C33730) * C17236 + C33739 * C17235) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C480 -
           ((C34048 + C34049 + C34050 + C34051) * C17237 +
            (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C481 +
           ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 +
             C5625 * C50894) *
                C17235 +
            (C34056 + C34057 + C34058 + C34059) * C17236 +
            (C34060 + C34061 + C34062 + C34063) * C17237) *
               C482) *
              C50718 * C292 +
          (((C34055 + C34054 + C34053 + C34052) * C17235 +
            (C34051 + C34050 + C34049 + C34048) * C17236 +
            (C549 * C33715 + C548 * C33713 + C558 * C33716 + C559 * C50894) *
                C17237) *
               C481 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C480 -
           (((C117 * C1899 + C50815 * C1907) * C50894 +
             (C117 * C1895 + C50815 * C1900) * C33716 + C559 * C33713 +
             C558 * C33715) *
                C17237 +
            (C34063 + C34062 + C34061 + C34060) * C17236 +
            (C34059 + C34058 + C34057 + C34056) * C17235) *
               C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C2343 * C486 + C2338 * C500 + C2344 * C932 + C2339 * C937 +
            C2345 * C1614 + C2340 * C1622) *
               C33716 +
           (C2343 * C499 + C2338 * C516 + C2344 * C938 + C2339 * C947 +
            C2345 * C1621 + C2340 * C1626) *
               C50894) *
              C50673 * C50734 * C50718 * C113 -
          ((C2777 + C2778 + C2779) * C50894 + (C2780 + C2781 + C2782) * C33716 +
           (C2388 + C2387 + C2386) * C33713 +
           (C2385 + C2384 + C2383) * C33715) *
              C50673 * C50734 * C50718 * C114 +
          ((C2394 + C2393 + C2392) * C33715 + (C2391 + C2390 + C2389) * C33713 +
           (C3111 + C3112 + C3113) * C33716 +
           (C3114 + C3115 + C3116) * C50894) *
              C50673 * C50734 * C50718 * C115 -
          ((C2345 * C1615 + C2340 * C1623 + C2344 * C944 + C2339 * C950 +
            C2343 * C493 + C2338 * C513) *
               C50894 +
           (C2345 * C1611 + C2340 * C1616 + C2344 * C935 + C2339 * C943 +
            C2343 * C483 + C2338 * C494) *
               C33716 +
           (C2400 + C2399 + C2398) * C33713 +
           (C2397 + C2396 + C2395) * C33715) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C2343 * C486 + C2338 * C500 + C2344 * C932 + C2339 * C937 +
             C2345 * C1614 + C2340 * C1622) *
                C33716 +
            (C2343 * C499 + C2338 * C516 + C2344 * C938 + C2339 * C947 +
             C2345 * C1621 + C2340 * C1626) *
                C50894) *
               C50673 * C50734 * C289 -
           ((C2345 * C3314 + C2340 * C3319 + C2344 * C1621 + C2339 * C1626 +
             C2343 * C938 + C2338 * C947) *
                C50894 +
            (C2345 * C3310 + C2340 * C3313 + C2344 * C1614 + C2339 * C1622 +
             C2343 * C932 + C2338 * C937) *
                C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C290 +
           ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
             C2345 * C4233 + C2340 * C4237) *
                C33716 +
            (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
             C2345 * C4236 + C2340 * C4239) *
                C50894) *
               C50673 * C50734 * C291) *
              C292 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C290 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C289 -
           ((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 + C2339 * C3320 +
             C2343 * C1619 + C2338 * C1625) *
                C50894 +
            (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 + C2339 * C3315 +
             C2343 * C1613 + C2338 * C1620) *
                C33716 +
            (C2594 + C2593 + C2592) * C33713 +
            (C2591 + C2590 + C2589) * C33715) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C480 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C481 +
           ((C36749 + C36748 + C36747) * C33715 +
            (C36746 + C36745 + C36744) * C33713 +
            (C2343 * C1898 + C2338 * C1906 + C2344 * C4633 + C2339 * C4641 +
             C2345 * C4632 + C2340 * C4640) *
                C33716 +
            (C2343 * C1905 + C2338 * C1910 + C2344 * C4639 + C2339 * C4645 +
             C2345 * C4638 + C2340 * C4644) *
                C50894) *
               C50673 * C482) *
              C50718 * C292 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C481 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C480 -
           ((C2345 * C4634 + C2340 * C4642 + C2344 * C4635 + C2339 * C4643 +
             C2343 * C1903 + C2338 * C1909) *
                C50894 +
            (C2345 * C4630 + C2340 * C4636 + C2344 * C4631 + C2339 * C4637 +
             C2343 * C1897 + C2338 * C1904) *
                C33716 +
            (C2788 + C2787 + C2786) * C33713 +
            (C2785 + C2784 + C2783) * C33715) *
               C50673 * C482) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50960 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C50718 * C51002 +
          (((C34055 + C34054 + C34053 + C34052) * C17235 +
            (C34051 + C34050 + C34049 + C34048) * C17236 +
            (C34364 + C34365 + C34366 + C34367) * C17237) *
               C50798 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50960) *
              C50718 * C51003 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C50960 -
           (((C117 * C511 + C50815 * C522) * C50894 +
             (C117 * C492 + C50815 * C512) * C33716 + C800 * C33713 +
             C799 * C33715) *
                C17237 +
            (C34367 + C34366 + C34365 + C34364) * C17236 + C34369 * C17235) *
               C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50960 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C50718 * C51002 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C50798 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50960) *
              C50718 * C51003 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C50960 -
           ((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 + C2339 * C1277 +
             C2343 * C506 + C2338 * C519) *
                C50894 +
            (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 + C2339 * C1271 +
             C2343 * C489 + C2338 * C505) *
                C33716 +
            (C3116 + C3115 + C3114) * C33713 +
            (C3113 + C3112 + C3111) * C33715) *
               C50673 * C50798) *
              C50718 * C673)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C33715 +
            (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
            C5620 * C50894) *
               C17235 +
           (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
              C50734 * C50718 * C113 -
          (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
           (C33721 + C33720 + C33719 + C33718) * C17235) *
              C50734 * C50718 * C114 +
          (C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
           (C33730 + C33731 + C33732 + C33733) * C17237) *
              C50734 * C50718 * C115 -
          (((C117 * C789 + C50815 * C791) * C50894 +
            (C117 * C788 + C50815 * C790) * C33716 + C177 * C33713 +
            C176 * C33715) *
               C17237 +
           (C33733 + C33732 + C33731 + C33730) * C17236 + C33739 * C17235) *
              C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C289 -
           ((C33886 + C33887 + C33888 + C33889) * C17237 +
            (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C290 +
           (((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C50734 * C291) *
              C292 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C360 * C33715 + C359 * C33713 + C969 * C33716 + C970 * C50894) *
                C17237) *
               C50734 * C290 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C289 -
           (((C117 * C1615 + C50815 * C1623) * C50894 +
             (C117 * C1611 + C50815 * C1616) * C33716 + C370 * C33713 +
             C369 * C33715) *
                C17237 +
            (C33901 + C33900 + C33899 + C33898) * C17236 +
            (C33897 + C33896 + C33895 + C33894) * C17235) *
               C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C2343 * C486 + C2338 * C500 + C2344 * C932 + C2339 * C937 +
            C2345 * C1614 + C2340 * C1622) *
               C33716 +
           (C2343 * C499 + C2338 * C516 + C2344 * C938 + C2339 * C947 +
            C2345 * C1621 + C2340 * C1626) *
               C50894) *
              C50673 * C50734 * C50718 * C113 -
          ((C2777 + C2778 + C2779) * C50894 + (C2780 + C2781 + C2782) * C33716 +
           (C2388 + C2387 + C2386) * C33713 +
           (C2385 + C2384 + C2383) * C33715) *
              C50673 * C50734 * C50718 * C114 +
          ((C2394 + C2393 + C2392) * C33715 + (C2391 + C2390 + C2389) * C33713 +
           (C3111 + C3112 + C3113) * C33716 +
           (C3114 + C3115 + C3116) * C50894) *
              C50673 * C50734 * C50718 * C115 -
          ((C2345 * C1615 + C2340 * C1623 + C2344 * C944 + C2339 * C950 +
            C2343 * C493 + C2338 * C513) *
               C50894 +
           (C2345 * C1611 + C2340 * C1616 + C2344 * C935 + C2339 * C943 +
            C2343 * C483 + C2338 * C494) *
               C33716 +
           (C2400 + C2399 + C2398) * C33713 +
           (C2397 + C2396 + C2395) * C33715) *
              C50673 * C50734 * C50718 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C2343 * C486 + C2338 * C500 + C2344 * C932 + C2339 * C937 +
             C2345 * C1614 + C2340 * C1622) *
                C33716 +
            (C2343 * C499 + C2338 * C516 + C2344 * C938 + C2339 * C947 +
             C2345 * C1621 + C2340 * C1626) *
                C50894) *
               C50673 * C50734 * C289 -
           ((C2345 * C3314 + C2340 * C3319 + C2344 * C1621 + C2339 * C1626 +
             C2343 * C938 + C2338 * C947) *
                C50894 +
            (C2345 * C3310 + C2340 * C3313 + C2344 * C1614 + C2339 * C1622 +
             C2343 * C932 + C2338 * C937) *
                C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C290 +
           ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
             C2345 * C4233 + C2340 * C4237) *
                C33716 +
            (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
             C2345 * C4236 + C2340 * C4239) *
                C50894) *
               C50673 * C50734 * C291) *
              C292 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C290 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C289 -
           ((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 + C2339 * C3320 +
             C2343 * C1619 + C2338 * C1625) *
                C50894 +
            (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 + C2339 * C3315 +
             C2343 * C1613 + C2338 * C1620) *
                C33716 +
            (C2594 + C2593 + C2592) * C33713 +
            (C2591 + C2590 + C2589) * C33715) *
               C50673 * C50734 * C291) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C51004 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C51005 +
           (((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C50734 * C1380) *
              C50951 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C34211 + C34212 + C34213 + C34214) * C17237) *
               C50734 * C51005 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C51004 -
           (((C117 * C1615 + C50815 * C1623) * C50894 +
             (C117 * C1611 + C50815 * C1616) * C33716 + C370 * C33713 +
             C369 * C33715) *
                C17237 +
            (C33901 + C33900 + C33899 + C33898) * C17236 +
            (C33897 + C33896 + C33895 + C33894) * C17235) *
               C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50734 * C51004 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C51005 +
           ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
             C2345 * C4233 + C2340 * C4237) *
                C33716 +
            (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
             C2345 * C4236 + C2340 * C4239) *
                C50894) *
               C50673 * C50734 * C1380) *
              C50951 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C51005 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C51004 -
           ((C2345 * C4234 + C2340 * C4238 + C2344 * C3316 + C2339 * C3320 +
             C2343 * C1619 + C2338 * C1625) *
                C50894 +
            (C2345 * C4232 + C2340 * C4235 + C2344 * C3311 + C2339 * C3315 +
             C2343 * C1613 + C2338 * C1620) *
                C33716 +
            (C2594 + C2593 + C2592) * C33713 +
            (C2591 + C2590 + C2589) * C33715) *
               C50673 * C50734 * C1380) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50960 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C51004 +
          (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
             C6164 * C50894) *
                C17235 +
            (C34564 + C34565 + C34566 + C34567) * C17236 +
            (C34568 + C34569 + C34570 + C34571) * C17237) *
               C50798 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50960) *
              C51005 +
          ((((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C50960 -
           (((C117 * C2747 + C50815 * C2751) * C50894 +
             (C117 * C2742 + C50815 * C2748) * C33716 + C11097 * C33713 +
             C11096 * C33715) *
                C17237 +
            (C5424 * C50894 + C5423 * C33716 + C5422 * C33713 +
             C5421 * C33715) *
                C17236 +
            (C7070 * C50894 + C7069 * C33716 + C7068 * C33713 +
             C7067 * C33715) *
                C17235) *
               C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50960 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C51004 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C50798 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50960) *
              C51005 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C38160 + C38161 + C38162) * C33716 +
            (C38163 + C38164 + C38165) * C50894) *
               C50673 * C50960 -
           ((C2345 * C20846 + C2340 * C20848 + C2344 * C3742 + C2339 * C3745 +
             C2343 * C2744 + C2338 * C2749) *
                C50894 +
            (C2345 * C20845 + C2340 * C20847 + C2344 * C3739 + C2339 * C3743 +
             C2343 * C2740 + C2338 * C2743) *
                C33716 +
            (C38165 + C38164 + C38163) * C33713 +
            (C38162 + C38161 + C38160) * C33715) *
               C50673 * C50798) *
              C1380) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C33715 +
            (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
            C5620 * C50894) *
               C17235 +
           (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
              C50734 * C1145 -
          (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
           (C6162 * C50894 + C6161 * C33716 +
            (C117 * C310 + C50815 * C327) * C33713 +
            (C117 * C297 + C50815 * C311) * C33715) *
               C17235) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C33715 +
            (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
            C7068 * C50894) *
               C17235 +
           (C33894 + C33895 + C33896 + C33897) * C17236 +
           (C33898 + C33899 + C33900 + C33901) * C17237) *
              C50734 * C1147 -
          (((C117 * C3317 + C50815 * C3321) * C50894 +
            (C117 * C3312 + C50815 * C3318) * C33716 +
            (C117 * C1156 + C50815 * C1163) * C33713 +
            (C117 * C1151 + C50815 * C1157) * C33715) *
               C17237 +
           ((C117 * C3316 + C50815 * C3320) * C50894 +
            (C117 * C3311 + C50815 * C3315) * C33716 +
            (C117 * C1158 + C50815 * C1164) * C33713 +
            (C117 * C1152 + C50815 * C1159) * C33715) *
               C17236 +
           ((C117 * C3314 + C50815 * C3319) * C50894 +
            (C117 * C3310 + C50815 * C3313) * C33716 +
            (C117 * C1160 + C50815 * C1165) * C33713 +
            (C117 * C1153 + C50815 * C1161) * C33715) *
               C17235) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C1074 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C50770) *
              C1076 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C34211 + C34212 + C34213 + C34214) * C17237) *
               C50734 * C50770 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C1074) *
              C1077 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C50734 * C1074 -
           (((C117 * C945 + C50815 * C951) * C50894 +
             (C117 * C936 + C50815 * C946) * C33716 + C686 * C33713 +
             C685 * C33715) *
                C17237 +
            (C34214 + C34213 + C34212 + C34211) * C17236 + C34216 * C17235) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C480 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C481 +
           ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 +
             C5625 * C50894) *
                C17235 +
            (C34056 + C34057 + C34058 + C34059) * C17236 +
            (C34060 + C34061 + C34062 + C34063) * C17237) *
               C482) *
              C1074 +
          (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
             C6164 * C50894) *
                C17235 +
            (C34564 + C34565 + C34566 + C34567) * C17236 +
            (C34568 + C34569 + C34570 + C34571) * C17237) *
               C481 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C480 -
           (((C117 * C6141 + C50815 * C6143) * C50894 +
             (C117 * C6140 + C50815 * C6142) * C33716 + C5792 * C33713 +
             C5791 * C33715) *
                C17237 +
            (C6166 * C50894 + C6165 * C33716 + C5419 * C33713 +
             C5420 * C33715) *
                C17236 +
            (C6572 * C50894 + C6571 * C33716 + C6164 * C33713 +
             C6163 * C33715) *
                C17235) *
               C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50734 * C1074 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C50770 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C1074) *
              C1077 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C50734 * C1074 -
           ((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 + C2339 * C1624 +
             C2343 * C942 + C2338 * C949) *
                C50894 +
            (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 + C2339 * C1618 +
             C2343 * C934 + C2338 * C941) *
                C33716 +
            (C2952 + C2951 + C2950) * C33713 +
            (C2949 + C2948 + C2947) * C33715) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C36738 + C36739 + C36740) * C33716 +
           (C36741 + C36742 + C36743) * C50894) *
              C50673 * C50734 * C1145 -
          ((C37253 + C37252 + C37251) * C50894 +
           (C37250 + C37249 + C37248) * C33716 +
           (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
            C2343 * C310 + C2338 * C327) *
               C33713 +
           (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
            C2343 * C297 + C2338 * C311) *
               C33715) *
              C50673 * C50734 * C1146 +
          ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
            C2345 * C2546 + C2340 * C2549) *
               C33715 +
           (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
            C2345 * C2550 + C2340 * C2555) *
               C33713 +
           (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
            C2345 * C4233 + C2340 * C4237) *
               C33716 +
           (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
            C2345 * C4236 + C2340 * C4239) *
               C50894) *
              C50673 * C50734 * C1147 -
          ((C2345 * C21176 + C2340 * C21178 + C2344 * C4236 + C2339 * C4239 +
            C2343 * C3314 + C2338 * C3319) *
               C50894 +
           (C2345 * C21175 + C2340 * C21177 + C2344 * C4233 + C2339 * C4237 +
            C2343 * C3310 + C2338 * C3313) *
               C33716 +
           (C2345 * C3588 + C2340 * C3591 + C2344 * C2550 + C2339 * C2555 +
            C2343 * C1160 + C2338 * C1165) *
               C33713 +
           (C2345 * C3585 + C2340 * C3589 + C2344 * C2546 + C2339 * C2549 +
            C2343 * C1153 + C2338 * C1161) *
               C33715) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C480 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C481 +
           ((C36749 + C36748 + C36747) * C33715 +
            (C36746 + C36745 + C36744) * C33713 +
            (C2343 * C1898 + C2338 * C1906 + C2344 * C4633 + C2339 * C4641 +
             C2345 * C4632 + C2340 * C4640) *
                C33716 +
            (C2343 * C1905 + C2338 * C1910 + C2344 * C4639 + C2339 * C4645 +
             C2345 * C4638 + C2340 * C4644) *
                C50894) *
               C50673 * C482) *
              C1074 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C481 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C480 -
           ((C2345 * C21442 + C2340 * C21444 + C2344 * C4638 + C2339 * C4644 +
             C2343 * C4639 + C2338 * C4645) *
                C50894 +
            (C2345 * C21441 + C2340 * C21443 + C2344 * C4632 + C2339 * C4640 +
             C2343 * C4633 + C2338 * C4641) *
                C33716 +
            (C37661 + C37660 + C37659) * C33713 +
            (C37658 + C37657 + C37656) * C33715) *
               C50673 * C482) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C33715 +
              (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
              C5620 * C50894) *
                 C17235 +
             (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
                C50960 -
            (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
             (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
              C5619 * C33715) *
                 C17235) *
                C50798) *
               C1074 +
           (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
              C6164 * C50894) *
                 C17235 +
             (C34564 + C34565 + C34566 + C34567) * C17236 +
             (C34568 + C34569 + C34570 + C34571) * C17237) *
                C50798 -
            (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
             (C6162 * C50894 + C6161 * C33716 +
              (C117 * C310 + C50815 * C327) * C33713 +
              (C117 * C297 + C50815 * C311) * C33715) *
                 C17235) *
                C50960) *
               C50770) *
              C50951 +
          ((((C34055 + C34054 + C34053 + C34052) * C17235 +
             (C34051 + C34050 + C34049 + C34048) * C17236 +
             (C34364 + C34365 + C34366 + C34367) * C17237) *
                C50798 -
            (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
             (C33721 + C33720 + C33719 + C33718) * C17235) *
                C50960) *
               C1074 +
           (((C33893 + C33892 + C33891 + C33890) * C17235 +
             (C33889 + C33888 + C33887 + C33886) * C17236 +
             (C34211 + C34212 + C34213 + C34214) * C17237) *
                C50960 -
            (((C117 * C1268 + C50815 * C1276) * C50894 +
              (C117 * C1264 + C50815 * C1269) * C33716 + C970 * C33713 +
              C969 * C33715) *
                 C17237 +
             (C34571 + C34570 + C34569 + C34568) * C17236 +
             (C34567 + C34566 + C34565 + C34564) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C33715 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C33713 +
             (C36738 + C36739 + C36740) * C33716 +
             (C36741 + C36742 + C36743) * C50894) *
                C50673 * C50960 -
            ((C36744 + C36745 + C36746) * C50894 +
             (C36747 + C36748 + C36749) * C33716 +
             (C36743 + C36742 + C36741) * C33713 +
             (C36740 + C36739 + C36738) * C33715) *
                C50673 * C50798) *
               C1074 +
           (((C37248 + C37249 + C37250) * C33715 +
             (C37251 + C37252 + C37253) * C33713 +
             (C37656 + C37657 + C37658) * C33716 +
             (C37659 + C37660 + C37661) * C50894) *
                C50673 * C50798 -
            ((C37253 + C37252 + C37251) * C50894 +
             (C37250 + C37249 + C37248) * C33716 +
             (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C33713 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C33715) *
                C50673 * C50960) *
               C50770) *
              C50951 +
          ((((C2782 + C2781 + C2780) * C33715 +
             (C2779 + C2778 + C2777) * C33713 +
             (C2783 + C2784 + C2785) * C33716 +
             (C2786 + C2787 + C2788) * C50894) *
                C50673 * C50798 -
            ((C2777 + C2778 + C2779) * C50894 +
             (C2780 + C2781 + C2782) * C33716 +
             (C2388 + C2387 + C2386) * C33713 +
             (C2385 + C2384 + C2383) * C33715) *
                C50673 * C50960) *
               C1074 +
           (((C2588 + C2587 + C2586) * C33715 +
             (C2585 + C2584 + C2583) * C33713 +
             (C3335 + C3336 + C3337) * C33716 +
             (C3338 + C3339 + C3340) * C50894) *
                C50673 * C50960 -
            ((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 + C2339 * C2750 +
              C2343 * C1272 + C2338 * C1278) *
                 C50894 +
             (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 + C2339 * C2745 +
              C2343 * C1266 + C2338 * C1273) *
                 C33716 +
             (C3340 + C3339 + C3338) * C33713 +
             (C3337 + C3336 + C3335) * C33715) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C50734 * C1074 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C50734 * C50770) *
              C1076 +
          (((C33893 + C33892 + C33891 + C33890) * C17235 +
            (C33889 + C33888 + C33887 + C33886) * C17236 +
            (C34211 + C34212 + C34213 + C34214) * C17237) *
               C50734 * C50770 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C50734 * C1074) *
              C1077 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C50734 * C1074 -
           (((C117 * C945 + C50815 * C951) * C50894 +
             (C117 * C936 + C50815 * C946) * C33716 + C686 * C33713 +
             C685 * C33715) *
                C17237 +
            (C34214 + C34213 + C34212 + C34211) * C17236 + C34216 * C17235) *
               C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C33715 +
            (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
            C5620 * C50894) *
               C17235 +
           (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
              C50734 * C1145 -
          (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
           (C6162 * C50894 + C6161 * C33716 +
            (C117 * C310 + C50815 * C327) * C33713 +
            (C117 * C297 + C50815 * C311) * C33715) *
               C17235) *
              C50734 * C1146 +
          (((C117 * C298 + C50815 * C312) * C33715 +
            (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
            C7068 * C50894) *
               C17235 +
           (C33894 + C33895 + C33896 + C33897) * C17236 +
           (C33898 + C33899 + C33900 + C33901) * C17237) *
              C50734 * C1147 -
          (((C117 * C3317 + C50815 * C3321) * C50894 +
            (C117 * C3312 + C50815 * C3318) * C33716 +
            (C117 * C1156 + C50815 * C1163) * C33713 +
            (C117 * C1151 + C50815 * C1157) * C33715) *
               C17237 +
           ((C117 * C3316 + C50815 * C3320) * C50894 +
            (C117 * C3311 + C50815 * C3315) * C33716 +
            (C117 * C1158 + C50815 * C1164) * C33713 +
            (C117 * C1152 + C50815 * C1159) * C33715) *
               C17236 +
           ((C117 * C3314 + C50815 * C3319) * C50894 +
            (C117 * C3310 + C50815 * C3313) * C33716 +
            (C117 * C1160 + C50815 * C1165) * C33713 +
            (C117 * C1153 + C50815 * C1161) * C33715) *
               C17235) *
              C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C50734 * C1074 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C50734 * C50770) *
              C1076 +
          (((C2588 + C2587 + C2586) * C33715 +
            (C2585 + C2584 + C2583) * C33713 +
            (C3335 + C3336 + C3337) * C33716 +
            (C3338 + C3339 + C3340) * C50894) *
               C50673 * C50734 * C50770 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C50734 * C1074) *
              C1077 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C50734 * C1074 -
           ((C2345 * C3317 + C2340 * C3321 + C2344 * C1617 + C2339 * C1624 +
             C2343 * C942 + C2338 * C949) *
                C50894 +
            (C2345 * C3312 + C2340 * C3318 + C2344 * C1612 + C2339 * C1618 +
             C2343 * C934 + C2338 * C941) *
                C33716 +
            (C2952 + C2951 + C2950) * C33713 +
            (C2949 + C2948 + C2947) * C33715) *
               C50673 * C50734 * C50770) *
              C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C36738 + C36739 + C36740) * C33716 +
           (C36741 + C36742 + C36743) * C50894) *
              C50673 * C50734 * C1145 -
          ((C37253 + C37252 + C37251) * C50894 +
           (C37250 + C37249 + C37248) * C33716 +
           (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
            C2343 * C310 + C2338 * C327) *
               C33713 +
           (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
            C2343 * C297 + C2338 * C311) *
               C33715) *
              C50673 * C50734 * C1146 +
          ((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
            C2345 * C2546 + C2340 * C2549) *
               C33715 +
           (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
            C2345 * C2550 + C2340 * C2555) *
               C33713 +
           (C2343 * C1614 + C2338 * C1622 + C2344 * C3310 + C2339 * C3313 +
            C2345 * C4233 + C2340 * C4237) *
               C33716 +
           (C2343 * C1621 + C2338 * C1626 + C2344 * C3314 + C2339 * C3319 +
            C2345 * C4236 + C2340 * C4239) *
               C50894) *
              C50673 * C50734 * C1147 -
          ((C2345 * C21176 + C2340 * C21178 + C2344 * C4236 + C2339 * C4239 +
            C2343 * C3314 + C2338 * C3319) *
               C50894 +
           (C2345 * C21175 + C2340 * C21177 + C2344 * C4233 + C2339 * C4237 +
            C2343 * C3310 + C2338 * C3313) *
               C33716 +
           (C2345 * C3588 + C2340 * C3591 + C2344 * C2550 + C2339 * C2555 +
            C2343 * C1160 + C2338 * C1165) *
               C33713 +
           (C2345 * C3585 + C2340 * C3589 + C2344 * C2546 + C2339 * C2549 +
            C2343 * C1153 + C2338 * C1161) *
               C33715) *
              C50673 * C50734 * C1148) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C119 + C50815 * C126) * C33715 +
              (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
              C5620 * C50894) *
                 C17235 +
             (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
                C1725 -
            (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
             (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
              C5619 * C33715) *
                 C17235) *
                C50798) *
               C50959 +
           (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
              C6164 * C50894) *
                 C17235 +
             (C34564 + C34565 + C34566 + C34567) * C17236 +
             (C34568 + C34569 + C34570 + C34571) * C17237) *
                C50798 -
            (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
             (C6162 * C50894 + C6161 * C33716 +
              (C117 * C310 + C50815 * C327) * C33713 +
              (C117 * C297 + C50815 * C311) * C33715) *
                 C17235) *
                C1725) *
               C50770) *
              C50951 +
          ((((C34055 + C34054 + C34053 + C34052) * C17235 +
             (C34051 + C34050 + C34049 + C34048) * C17236 +
             (C34364 + C34365 + C34366 + C34367) * C17237) *
                C50798 -
            (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
             (C33721 + C33720 + C33719 + C33718) * C17235) *
                C1725) *
               C50959 +
           (((C33893 + C33892 + C33891 + C33890) * C17235 +
             (C33889 + C33888 + C33887 + C33886) * C17236 +
             (C34211 + C34212 + C34213 + C34214) * C17237) *
                C1725 -
            (((C117 * C1268 + C50815 * C1276) * C50894 +
              (C117 * C1264 + C50815 * C1269) * C33716 + C970 * C33713 +
              C969 * C33715) *
                 C17237 +
             (C34571 + C34570 + C34569 + C34568) * C17236 +
             (C34567 + C34566 + C34565 + C34564) * C17235) *
                C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
              C2345 * C298 + C2340 * C312) *
                 C33715 +
             (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
              C2345 * C313 + C2340 * C328) *
                 C33713 +
             (C36738 + C36739 + C36740) * C33716 +
             (C36741 + C36742 + C36743) * C50894) *
                C50673 * C1725 -
            ((C36744 + C36745 + C36746) * C50894 +
             (C36747 + C36748 + C36749) * C33716 +
             (C36743 + C36742 + C36741) * C33713 +
             (C36740 + C36739 + C36738) * C33715) *
                C50673 * C50798) *
               C50959 +
           (((C37248 + C37249 + C37250) * C33715 +
             (C37251 + C37252 + C37253) * C33713 +
             (C37656 + C37657 + C37658) * C33716 +
             (C37659 + C37660 + C37661) * C50894) *
                C50673 * C50798 -
            ((C37253 + C37252 + C37251) * C50894 +
             (C37250 + C37249 + C37248) * C33716 +
             (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
              C2343 * C310 + C2338 * C327) *
                 C33713 +
             (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
              C2343 * C297 + C2338 * C311) *
                 C33715) *
                C50673 * C1725) *
               C50770) *
              C50951 +
          ((((C2782 + C2781 + C2780) * C33715 +
             (C2779 + C2778 + C2777) * C33713 +
             (C2783 + C2784 + C2785) * C33716 +
             (C2786 + C2787 + C2788) * C50894) *
                C50673 * C50798 -
            ((C2777 + C2778 + C2779) * C50894 +
             (C2780 + C2781 + C2782) * C33716 +
             (C2388 + C2387 + C2386) * C33713 +
             (C2385 + C2384 + C2383) * C33715) *
                C50673 * C1725) *
               C50959 +
           (((C2588 + C2587 + C2586) * C33715 +
             (C2585 + C2584 + C2583) * C33713 +
             (C3335 + C3336 + C3337) * C33716 +
             (C3338 + C3339 + C3340) * C50894) *
                C50673 * C1725 -
            ((C2345 * C3740 + C2340 * C3744 + C2344 * C2746 + C2339 * C2750 +
              C2343 * C1272 + C2338 * C1278) *
                 C50894 +
             (C2345 * C3738 + C2340 * C3741 + C2344 * C2741 + C2339 * C2745 +
              C2343 * C1266 + C2338 * C1273) *
                 C33716 +
             (C3340 + C3339 + C3338) * C33713 +
             (C3337 + C3336 + C3335) * C33715) *
                C50673 * C50798) *
               C50770) *
              C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C51006 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C51007 +
           ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 +
             C5625 * C50894) *
                C17235 +
            (C34056 + C34057 + C34058 + C34059) * C17236 +
            (C34060 + C34061 + C34062 + C34063) * C17237) *
               C2141) *
              C50959 +
          (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
             C6164 * C50894) *
                C17235 +
            (C34564 + C34565 + C34566 + C34567) * C17236 +
            (C34568 + C34569 + C34570 + C34571) * C17237) *
               C51007 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C51006 -
           (((C117 * C6141 + C50815 * C6143) * C50894 +
             (C117 * C6140 + C50815 * C6142) * C33716 + C5792 * C33713 +
             C5791 * C33715) *
                C17237 +
            (C6166 * C50894 + C6165 * C33716 + C5419 * C33713 +
             C5420 * C33715) *
                C17236 +
            (C6572 * C50894 + C6571 * C33716 + C6164 * C33713 +
             C6163 * C33715) *
                C17235) *
               C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C51006 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C51007 +
           ((C36749 + C36748 + C36747) * C33715 +
            (C36746 + C36745 + C36744) * C33713 +
            (C38568 + C38569 + C38570) * C33716 +
            (C38571 + C38572 + C38573) * C50894) *
               C50673 * C2141) *
              C50959 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C51007 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C51006 -
           ((C2345 * C21442 + C2340 * C21444 + C2344 * C4638 + C2339 * C4644 +
             C2343 * C4639 + C2338 * C4645) *
                C50894 +
            (C2345 * C21441 + C2340 * C21443 + C2344 * C4632 + C2339 * C4640 +
             C2343 * C4633 + C2338 * C4641) *
                C33716 +
            (C37661 + C37660 + C37659) * C33713 +
            (C37658 + C37657 + C37656) * C33715) *
               C50673 * C2141) *
              C50770) *
         C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C1725 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C289 +
          (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
             C6164 * C50894) *
                C17235 +
            (C34564 + C34565 + C34566 + C34567) * C17236 +
            (C34568 + C34569 + C34570 + C34571) * C17237) *
               C50798 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C1725 -
           (((C117 * C2747 + C50815 * C2751) * C50894 +
             (C117 * C2742 + C50815 * C2748) * C33716 + C11097 * C33713 +
             C11096 * C33715) *
                C17237 +
            (C5424 * C50894 + C5423 * C33716 + C5422 * C33713 +
             C5421 * C33715) *
                C17236 +
            (C7070 * C50894 + C7069 * C33716 + C7068 * C33713 +
             C7067 * C33715) *
                C17235) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C1725 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C50718 * C1076 +
          (((C34055 + C34054 + C34053 + C34052) * C17235 +
            (C34051 + C34050 + C34049 + C34048) * C17236 +
            (C34364 + C34365 + C34366 + C34367) * C17237) *
               C50798 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C1725) *
              C50718 * C1077 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C1725 -
           (((C117 * C511 + C50815 * C522) * C50894 +
             (C117 * C492 + C50815 * C512) * C33716 + C800 * C33713 +
             C799 * C33715) *
                C17237 +
            (C34367 + C34366 + C34365 + C34364) * C17236 + C34369 * C17235) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C119 + C50815 * C126) * C33715 +
            (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
            C5620 * C50894) *
               C17235 +
           (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
              C1891 -
          (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
           (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 + C5619 * C33715) *
               C17235) *
              C1892 +
          ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 + C5625 * C50894) *
               C17235 +
           (C34056 + C34057 + C34058 + C34059) * C17236 +
           (C34060 + C34061 + C34062 + C34063) * C17237) *
              C1893 -
          (((C117 * C5583 + C50815 * C5587) * C50894 +
            (C117 * C5578 + C50815 * C5584) * C33716 + C5630 * C33713 +
            C5629 * C33715) *
               C17237 +
           (C5628 * C50894 + C5627 * C33716 + C5623 * C33713 + C5624 * C33715) *
               C17236 +
           (C7474 * C50894 + C7473 * C33716 + C5625 * C33713 + C5626 * C33715) *
               C17235) *
              C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C1725 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C50798 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C1725) *
              C50718 * C1077 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C1725 -
           ((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 + C2339 * C1277 +
             C2343 * C506 + C2338 * C519) *
                C50894 +
            (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 + C2339 * C1271 +
             C2343 * C489 + C2338 * C505) *
                C33716 +
            (C3116 + C3115 + C3114) * C33713 +
            (C3113 + C3112 + C3111) * C33715) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C1725 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C289 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C50798 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C1725) *
              C290 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C38160 + C38161 + C38162) * C33716 +
            (C38163 + C38164 + C38165) * C50894) *
               C50673 * C1725 -
           ((C2345 * C20846 + C2340 * C20848 + C2344 * C3742 + C2339 * C3745 +
             C2343 * C2744 + C2338 * C2749) *
                C50894 +
            (C2345 * C20845 + C2340 * C20847 + C2344 * C3739 + C2339 * C3743 +
             C2343 * C2740 + C2338 * C2743) *
                C33716 +
            (C38165 + C38164 + C38163) * C33713 +
            (C38162 + C38161 + C38160) * C33715) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
            C2345 * C298 + C2340 * C312) *
               C33715 +
           (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
            C2345 * C313 + C2340 * C328) *
               C33713 +
           (C36738 + C36739 + C36740) * C33716 +
           (C36741 + C36742 + C36743) * C50894) *
              C50673 * C1891 -
          ((C36744 + C36745 + C36746) * C50894 +
           (C36747 + C36748 + C36749) * C33716 +
           (C36743 + C36742 + C36741) * C33713 +
           (C36740 + C36739 + C36738) * C33715) *
              C50673 * C1892 +
          ((C36749 + C36748 + C36747) * C33715 +
           (C36746 + C36745 + C36744) * C33713 +
           (C38568 + C38569 + C38570) * C33716 +
           (C38571 + C38572 + C38573) * C50894) *
              C50673 * C1893 -
          ((C2345 * C23126 + C2340 * C23128 + C2344 * C6562 + C2339 * C6565 +
            C2343 * C5580 + C2338 * C5585) *
               C50894 +
           (C2345 * C23125 + C2340 * C23127 + C2344 * C6559 + C2339 * C6563 +
            C2343 * C5576 + C2338 * C5579) *
               C33716 +
           (C38573 + C38572 + C38571) * C33713 +
           (C38570 + C38569 + C38568) * C33715) *
              C50673 * C1894) *
         C50718 * C50699) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C51006 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C51007 +
           ((C5621 * C33715 + C5622 * C33713 + C5626 * C33716 +
             C5625 * C50894) *
                C17235 +
            (C34056 + C34057 + C34058 + C34059) * C17236 +
            (C34060 + C34061 + C34062 + C34063) * C17237) *
               C2141) *
              C50718 * C50951 +
          (((C34055 + C34054 + C34053 + C34052) * C17235 +
            (C34051 + C34050 + C34049 + C34048) * C17236 +
            (C34364 + C34365 + C34366 + C34367) * C17237) *
               C51007 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C51006 -
           (((C117 * C1899 + C50815 * C1907) * C50894 +
             (C117 * C1895 + C50815 * C1900) * C33716 + C559 * C33713 +
             C558 * C33715) *
                C17237 +
            (C34063 + C34062 + C34061 + C34060) * C17236 +
            (C34059 + C34058 + C34057 + C34056) * C17235) *
               C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C51006 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C51007 +
           ((C36749 + C36748 + C36747) * C33715 +
            (C36746 + C36745 + C36744) * C33713 +
            (C38568 + C38569 + C38570) * C33716 +
            (C38571 + C38572 + C38573) * C50894) *
               C50673 * C2141) *
              C50718 * C50951 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C51007 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C51006 -
           ((C2345 * C4634 + C2340 * C4642 + C2344 * C4635 + C2339 * C4643 +
             C2343 * C1903 + C2338 * C1909) *
                C50894 +
            (C2345 * C4630 + C2340 * C4636 + C2344 * C4631 + C2339 * C4637 +
             C2343 * C1897 + C2338 * C1904) *
                C33716 +
            (C2788 + C2787 + C2786) * C33713 +
            (C2785 + C2784 + C2783) * C33715) *
               C50673 * C2141) *
              C50718 * C50705)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C1725 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C50718 * C1076 +
          (((C34055 + C34054 + C34053 + C34052) * C17235 +
            (C34051 + C34050 + C34049 + C34048) * C17236 +
            (C34364 + C34365 + C34366 + C34367) * C17237) *
               C50798 -
           (C33739 * C17237 + (C33725 + C33724 + C33723 + C33722) * C17236 +
            (C33721 + C33720 + C33719 + C33718) * C17235) *
               C1725) *
              C50718 * C1077 +
          ((C33738 * C17235 + (C33729 + C33728 + C33727 + C33726) * C17236 +
            (C33730 + C33731 + C33732 + C33733) * C17237) *
               C1725 -
           (((C117 * C511 + C50815 * C522) * C50894 +
             (C117 * C492 + C50815 * C512) * C33716 + C800 * C33713 +
             C799 * C33715) *
                C17237 +
            (C34367 + C34366 + C34365 + C34364) * C17236 + C34369 * C17235) *
               C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C119 + C50815 * C126) * C33715 +
             (C117 * C127 + C50815 * C140) * C33713 + C5619 * C33716 +
             C5620 * C50894) *
                C17235 +
            (C33718 + C33719 + C33720 + C33721) * C17236 + C33738 * C17237) *
               C1725 -
           (C34369 * C17237 + (C34052 + C34053 + C34054 + C34055) * C17236 +
            (C5622 * C50894 + C5621 * C33716 + C5620 * C33713 +
             C5619 * C33715) *
                C17235) *
               C50798) *
              C289 +
          (((C6161 * C33715 + C6162 * C33713 + C6163 * C33716 +
             C6164 * C50894) *
                C17235 +
            (C34564 + C34565 + C34566 + C34567) * C17236 +
            (C34568 + C34569 + C34570 + C34571) * C17237) *
               C50798 -
           (C34216 * C17237 + (C33890 + C33891 + C33892 + C33893) * C17236 +
            (C6162 * C50894 + C6161 * C33716 +
             (C117 * C310 + C50815 * C327) * C33713 +
             (C117 * C297 + C50815 * C311) * C33715) *
                C17235) *
               C1725) *
              C290 +
          ((((C117 * C298 + C50815 * C312) * C33715 +
             (C117 * C313 + C50815 * C328) * C33713 + C7067 * C33716 +
             C7068 * C50894) *
                C17235 +
            (C33894 + C33895 + C33896 + C33897) * C17236 +
            (C33898 + C33899 + C33900 + C33901) * C17237) *
               C1725 -
           (((C117 * C2747 + C50815 * C2751) * C50894 +
             (C117 * C2742 + C50815 * C2748) * C33716 + C11097 * C33713 +
             C11096 * C33715) *
                C17237 +
            (C5424 * C50894 + C5423 * C33716 + C5422 * C33713 +
             C5421 * C33715) *
                C17236 +
            (C7070 * C50894 + C7069 * C33716 + C7068 * C33713 +
             C7067 * C33715) *
                C17235) *
               C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C1725 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C50718 * C1076 +
          (((C2782 + C2781 + C2780) * C33715 +
            (C2779 + C2778 + C2777) * C33713 +
            (C2783 + C2784 + C2785) * C33716 +
            (C2786 + C2787 + C2788) * C50894) *
               C50673 * C50798 -
           ((C2777 + C2778 + C2779) * C50894 +
            (C2780 + C2781 + C2782) * C33716 +
            (C2388 + C2387 + C2386) * C33713 +
            (C2385 + C2384 + C2383) * C33715) *
               C50673 * C1725) *
              C50718 * C1077 +
          (((C2394 + C2393 + C2392) * C33715 +
            (C2391 + C2390 + C2389) * C33713 +
            (C3111 + C3112 + C3113) * C33716 +
            (C3114 + C3115 + C3116) * C50894) *
               C50673 * C1725 -
           ((C2345 * C2747 + C2340 * C2751 + C2344 * C1270 + C2339 * C1277 +
             C2343 * C506 + C2338 * C519) *
                C50894 +
            (C2345 * C2742 + C2340 * C2748 + C2344 * C1265 + C2339 * C1271 +
             C2343 * C489 + C2338 * C505) *
                C33716 +
            (C3116 + C3115 + C3114) * C33713 +
            (C3113 + C3112 + C3111) * C33715) *
               C50673 * C50798) *
              C50718 * C1078)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2343 * C119 + C2338 * C126 + C2344 * C297 + C2339 * C311 +
             C2345 * C298 + C2340 * C312) *
                C33715 +
            (C2343 * C127 + C2338 * C140 + C2344 * C310 + C2339 * C327 +
             C2345 * C313 + C2340 * C328) *
                C33713 +
            (C36738 + C36739 + C36740) * C33716 +
            (C36741 + C36742 + C36743) * C50894) *
               C50673 * C1725 -
           ((C36744 + C36745 + C36746) * C50894 +
            (C36747 + C36748 + C36749) * C33716 +
            (C36743 + C36742 + C36741) * C33713 +
            (C36740 + C36739 + C36738) * C33715) *
               C50673 * C50798) *
              C289 +
          (((C37248 + C37249 + C37250) * C33715 +
            (C37251 + C37252 + C37253) * C33713 +
            (C37656 + C37657 + C37658) * C33716 +
            (C37659 + C37660 + C37661) * C50894) *
               C50673 * C50798 -
           ((C37253 + C37252 + C37251) * C50894 +
            (C37250 + C37249 + C37248) * C33716 +
            (C2345 * C1160 + C2340 * C1165 + C2344 * C313 + C2339 * C328 +
             C2343 * C310 + C2338 * C327) *
                C33713 +
            (C2345 * C1153 + C2340 * C1161 + C2344 * C298 + C2339 * C312 +
             C2343 * C297 + C2338 * C311) *
                C33715) *
               C50673 * C1725) *
              C290 +
          (((C2343 * C298 + C2338 * C312 + C2344 * C1153 + C2339 * C1161 +
             C2345 * C2546 + C2340 * C2549) *
                C33715 +
            (C2343 * C313 + C2338 * C328 + C2344 * C1160 + C2339 * C1165 +
             C2345 * C2550 + C2340 * C2555) *
                C33713 +
            (C38160 + C38161 + C38162) * C33716 +
            (C38163 + C38164 + C38165) * C50894) *
               C50673 * C1725 -
           ((C2345 * C20846 + C2340 * C20848 + C2344 * C3742 + C2339 * C3745 +
             C2343 * C2744 + C2338 * C2749) *
                C50894 +
            (C2345 * C20845 + C2340 * C20847 + C2344 * C3739 + C2339 * C3743 +
             C2343 * C2740 + C2338 * C2743) *
                C33716 +
            (C38165 + C38164 + C38163) * C33713 +
            (C38162 + C38161 + C38160) * C33715) *
               C50673 * C50798) *
              C291) *
         C50699) /
            (p * q * std::sqrt(p + q));
}
