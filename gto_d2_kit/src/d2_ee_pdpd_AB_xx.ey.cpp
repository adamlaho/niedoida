/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AB_xx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_12_11(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49761 = 0 * ae;
    const double C49760 = ae * be;
    const double C49759 = 0 * be;
    const double C49758 = ae + be;
    const double C49757 = 0 * be;
    const double C49756 = xA - xB;
    const double C49858 = p + q;
    const double C49857 = p * q;
    const double C49863 = xP - xQ;
    const double C49862 = bs[2];
    const double C49868 = bs[3];
    const double C49879 = bs[4];
    const double C49900 = bs[5];
    const double C49936 = bs[6];
    const double C49992 = bs[7];
    const double C50057 = yP - yQ;
    const double C50091 = zP - zQ;
    const double C125 = bs[0];
    const double C50578 = ce + de;
    const double C50577 = ce * de;
    const double C50576 = xC - xD;
    const double C50600 = yC - yD;
    const double C50616 = zC - zD;
    const double C50702 = yA - yB;
    const double C50714 = zA - zB;
    const double C49790 = 2 * C49760;
    const double C49788 = -2 * C49759;
    const double C49766 = C49761 / C49758;
    const double C49763 = 2 * C49758;
    const double C49762 = std::pow(C49758, 2);
    const double C49765 = C49760 * C49756;
    const double C49764 = C49756 * C49759;
    const double C50552 = C49756 * be;
    const double C50551 = C49756 * ae;
    const double C50550 = std::pow(C49756, 2);
    const double C49859 = 2 * C49857;
    const double C49871 = C49863 * ae;
    const double C49870 = C49863 * be;
    const double C49867 = std::pow(C49863, 2);
    const double C50064 = std::pow(C50057, 2);
    const double C50098 = std::pow(C50091, 2);
    const double C50580 = 2 * C50578;
    const double C50590 = std::pow(C50578, 2);
    const double C50582 = C50576 * de;
    const double C50581 = C50576 * ce;
    const double C50579 = std::pow(C50576, 2);
    const double C50601 = std::pow(C50600, 2);
    const double C50653 = C50600 * de;
    const double C50652 = C50600 * ce;
    const double C50617 = std::pow(C50616, 2);
    const double C50681 = C50616 * de;
    const double C50680 = C50616 * ce;
    const double C50703 = std::pow(C50702, 2);
    const double C50753 = C50702 * be;
    const double C50752 = C50702 * ae;
    const double C50715 = std::pow(C50714, 2);
    const double C50779 = C50714 * be;
    const double C50778 = C50714 * ae;
    const double C49791 = ae * C49788;
    const double C50560 = std::pow(C49763, -1);
    const double C50841 = std::pow(C49763, -2);
    const double C49767 = 2 * C49762;
    const double C49787 = C49762 * C49763;
    const double C50819 = 4 * C49762;
    const double C49768 = C49764 / C49758;
    const double C50553 = C50550 * C49760;
    const double C49861 = C49859 / C49858;
    const double C146 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C49859 / C49858, 2) -
          (bs[1] * C49859) / C49858) *
         C49760) /
        C49762;
    const double C126 = -(C49863 * bs[1] * C49859) / C49858;
    const double C259 = -(C50057 * bs[1] * C49859) / C49858;
    const double C400 = -(C50091 * bs[1] * C49859) / C49858;
    const double C49874 = C49868 * C49871;
    const double C49885 = C49879 * C49871;
    const double C49908 = C49900 * C49871;
    const double C49948 = C49936 * C49871;
    const double C50008 = C49992 * C49871;
    const double C133 = (-(bs[1] * C49871 * C49859) / C49858) / C49758;
    const double C49873 = C49868 * C49870;
    const double C49882 = C49879 * C49870;
    const double C49904 = C49900 * C49870;
    const double C49944 = C49936 * C49870;
    const double C50004 = C49992 * C49870;
    const double C132 = (-(bs[1] * C49870 * C49859) / C49858) / C49758;
    const double C49881 = C49867 * C49879;
    const double C49903 = C49867 * C49900;
    const double C49943 = C49867 * C49936;
    const double C50003 = C49867 * C49992;
    const double C50591 = std::pow(C50580, -1);
    const double C50828 = std::pow(C50580, -2);
    const double C50595 = 2 * C50590;
    const double C50826 = 4 * C50590;
    const double C50583 = C50579 * C50577;
    const double C50602 = C50601 * C50577;
    const double C50618 = C50617 * C50577;
    const double C50704 = C50703 * C49760;
    const double C50716 = C50715 * C49760;
    const double C49773 = C49759 / C49767;
    const double C49771 = C49757 / C49767;
    const double C49770 = 0 - C49768;
    const double C50554 = C50553 / C49758;
    const double C49864 = std::pow(C49861, 2);
    const double C49869 = -C49861;
    const double C49880 = std::pow(C49861, 4);
    const double C49937 = std::pow(C49861, 6);
    const double C50584 = C50583 / C50578;
    const double C50603 = C50602 / C50578;
    const double C50619 = C50618 / C50578;
    const double C50705 = C50704 / C49758;
    const double C50717 = C50716 / C49758;
    const double C49775 = C49770 * ae;
    const double C50555 = -C50554;
    const double C49866 = C49862 * C49864;
    const double C147 = (ae * C49864 * C49862 * C49863 * be +
                         be * C49864 * C49862 * C49863 * ae +
                         C49863 *
                             (C49862 * C49864 + std::pow(C49863, 2) * bs[3] *
                                                    std::pow(-C49861, 3)) *
                             C49760) /
                        C49762;
    const double C134 = (C49863 * C49864 * C49862 * C49870) / C49758 -
                        (be * bs[1] * C49859) / (C49858 * C49758);
    const double C135 = (C49863 * C49864 * C49862 * C49871) / C49758 -
                        (ae * bs[1] * C49859) / (C49858 * C49758);
    const double C272 = (C50057 * C49864 * C49862 * C49870) / C49758;
    const double C273 = (C50057 * C49864 * C49862 * C49871) / C49758;
    const double C413 = (C50091 * C49864 * C49862 * C49870) / C49758;
    const double C414 = (C50091 * C49864 * C49862 * C49871) / C49758;
    const double C49872 = std::pow(C49869, 3);
    const double C49901 = std::pow(C49869, 5);
    const double C49993 = std::pow(C49869, 7);
    const double C49889 = C49880 * C49885;
    const double C49888 = C49880 * C49882;
    const double C49887 = C49881 * C49880;
    const double C49899 = C49879 * C49880;
    const double C49955 = C49937 * C49948;
    const double C49952 = C49937 * C49944;
    const double C49951 = C49943 * C49937;
    const double C49991 = C49936 * C49937;
    const double C50585 = -C50584;
    const double C50604 = -C50603;
    const double C50620 = -C50619;
    const double C50706 = -C50705;
    const double C50718 = -C50717;
    const double C49778 = C49775 / C49758;
    const double C50556 = std::exp(C50555);
    const double C127 = C49866 * C49867 - (bs[1] * C49859) / C49858;
    const double C258 = C50057 * C49863 * C49866;
    const double C260 = C49866 * C50064 - (bs[1] * C49859) / C49858;
    const double C399 = C50091 * C49863 * C49866;
    const double C401 = C49866 * C50098 - (bs[1] * C49859) / C49858;
    const double C778 = C50091 * C50057 * C49866;
    const double C49876 = C49872 * C49874;
    const double C49875 = C49872 * C49873;
    const double C49878 = C49868 * C49872;
    const double C289 =
        (C50057 * (C49866 + C49867 * C49868 * C49872) * C49760) / C49762;
    const double C430 =
        (C50091 * (C49866 + C49867 * C49868 * C49872) * C49760) / C49762;
    const double C49914 = C49901 * C49908;
    const double C49911 = C49901 * C49904;
    const double C49910 = C49903 * C49901;
    const double C49935 = C49900 * C49901;
    const double C50016 = C49993 * C50008;
    const double C50013 = C49993 * C50004;
    const double C50012 = C50003 * C49993;
    const double C49892 = C49863 * C49889;
    const double C49898 = be * C49889;
    const double C50380 = C50057 * C49889;
    const double C49891 = C49863 * C49888;
    const double C49897 = ae * C49888;
    const double C50378 = C50057 * C49888;
    const double C49909 = C49899 * ae;
    const double C49907 = C49899 * C49867;
    const double C49906 = C49863 * C49899;
    const double C49905 = C49899 * be;
    const double C50500 = C49899 * C50064;
    const double C50520 = C50057 * C49899;
    const double C50525 = C49899 * C50098;
    const double C50542 = C50091 * C49899;
    const double C49961 = C49863 * C49955;
    const double C49990 = be * C49955;
    const double C50080 = C49955 * C50064;
    const double C50114 = C49955 * C50098;
    const double C50128 = C50057 * C49955;
    const double C50145 = C50091 * C49955;
    const double C49958 = C49863 * C49952;
    const double C49989 = ae * C49952;
    const double C50079 = C49952 * C50064;
    const double C50113 = C49952 * C50098;
    const double C50127 = C50057 * C49952;
    const double C50144 = C50091 * C49952;
    const double C50009 = C49991 * ae;
    const double C50007 = C49991 * C49867;
    const double C50006 = C49863 * C49991;
    const double C50005 = C49991 * be;
    const double C50586 = std::exp(C50585);
    const double C50605 = std::exp(C50604);
    const double C50621 = std::exp(C50620);
    const double C50707 = std::exp(C50706);
    const double C50719 = std::exp(C50718);
    const double C49780 = C49778 - C49771;
    const double C49769 = C49765 * C50556;
    const double C50557 = C50556 * C50551;
    const double C50561 = C50560 * C50556;
    const double C50816 = C50556 * C50552;
    const double C50813 = C50556 / C49763;
    const double C17045 = C50841 * C50556;
    const double C137 =
        (C49864 * C49862 * C49871 + C49863 * (C49863 * C49876 + C49866 * ae) +
         C49863 * C49866 * ae) /
        C49758;
    const double C271 = (C50057 * (C49863 * C49876 + C49866 * ae)) / C49758;
    const double C275 = (C49864 * C49862 * C49871 + C49876 * C50064) / C49758;
    const double C412 = (C50091 * (C49863 * C49876 + C49866 * ae)) / C49758;
    const double C416 = (C49864 * C49862 * C49871 + C49876 * C50098) / C49758;
    const double C784 = (C50091 * C50057 * C49876) / C49758;
    const double C983 =
        (2 * C50057 * C49876 + C50057 * (C49876 + C49889 * C50064)) / C49758;
    const double C1097 = (C50057 * C49876 + C50057 * C49889 * C50098) / C49758;
    const double C1444 = (C50091 * (C49876 + C49889 * C50064)) / C49758;
    const double C1728 =
        (2 * C50091 * C49876 + C50091 * (C49876 + C49889 * C50098)) / C49758;
    const double C148 =
        ((C49866 + C49867 * C49868 * C49872) * C49760 +
         ae * (C49863 * C49875 + C49866 * be) +
         be * (C49863 * C49876 + C49866 * ae) +
         C49863 *
             (ae * C49875 + be * C49876 +
              C49863 *
                  (C49868 * C49872 + C49867 * bs[4] * std::pow(C49861, 4)) *
                  C49760)) /
        C49762;
    const double C136 =
        (C49864 * C49862 * C49870 + C49863 * (C49863 * C49875 + C49866 * be) +
         C49863 * C49866 * be) /
        C49758;
    const double C270 = (C50057 * (C49863 * C49875 + C49866 * be)) / C49758;
    const double C274 = (C49864 * C49862 * C49870 + C49875 * C50064) / C49758;
    const double C411 = (C50091 * (C49863 * C49875 + C49866 * be)) / C49758;
    const double C415 = (C49864 * C49862 * C49870 + C49875 * C50098) / C49758;
    const double C783 = (C50091 * C50057 * C49875) / C49758;
    const double C982 =
        (2 * C50057 * C49875 + C50057 * (C49875 + C49888 * C50064)) / C49758;
    const double C1096 = (C50057 * C49875 + C50057 * C49888 * C50098) / C49758;
    const double C1443 = (C50091 * (C49875 + C49888 * C50064)) / C49758;
    const double C1727 =
        (2 * C50091 * C49875 + C50091 * (C49875 + C49888 * C50098)) / C49758;
    const double C49886 = C49878 * ae;
    const double C49884 = C49863 * C49878;
    const double C49883 = C49878 * be;
    const double C49890 = C49878 + C49887;
    const double C50511 = C50057 * C49878;
    const double C128 =
        2 * C49863 * C49866 + C49863 * (C49866 + C49878 * C49867);
    const double C257 = C50057 * (C49866 + C49878 * C49867);
    const double C398 = C50091 * (C49866 + C49878 * C49867);
    const double C975 =
        2 * C50057 * C49866 + C50057 * (C49866 + C49878 * C50064);
    const double C1089 = C50057 * C49866 + C50057 * C49878 * C50098;
    const double C1436 = C50091 * (C49866 + C49878 * C50064);
    const double C1720 =
        2 * C50091 * C49866 + C50091 * (C49866 + C49878 * C50098);
    const double C2315 =
        3 * (C49866 + C49878 * C50064) +
        C50057 * (2 * C50057 * C49878 + C50057 * (C49878 + C49899 * C50064));
    const double C2561 =
        C49866 + C49878 * C50064 + (C49878 + C49899 * C50064) * C50098;
    const double C3087 =
        C50091 * (2 * C50057 * C49878 + C50057 * (C49878 + C49899 * C50064));
    const double C5400 =
        3 * (C49866 + C49878 * C50098) +
        C50091 * (2 * C50091 * C49878 + C50091 * (C49878 + C49899 * C50098));
    const double C19969 = C50556 * C289;
    const double C22177 = C50556 * C430;
    const double C49918 = C49863 * C49914;
    const double C49934 = be * C49914;
    const double C50071 = C50057 * C49914;
    const double C50105 = C50091 * C49914;
    const double C50359 = C49914 * C50064;
    const double C50405 = C49914 * C50098;
    const double C2319 =
        (3 * (C49876 + C49889 * C50064) +
         C50057 * (2 * C50057 * C49889 + C50057 * (C49889 + C49914 * C50064))) /
        C49758;
    const double C2565 =
        (C49876 + C49889 * C50064 + (C49889 + C49914 * C50064) * C50098) /
        C49758;
    const double C3091 =
        (C50091 * (2 * C50057 * C49889 + C50057 * (C49889 + C49914 * C50064))) /
        C49758;
    const double C5404 =
        (3 * (C49876 + C49889 * C50098) +
         C50091 * (2 * C50091 * C49889 + C50091 * (C49889 + C49914 * C50098))) /
        C49758;
    const double C49917 = C49863 * C49911;
    const double C49933 = ae * C49911;
    const double C50070 = C50057 * C49911;
    const double C50104 = C50091 * C49911;
    const double C50356 = C49911 * C50064;
    const double C50402 = C49911 * C50098;
    const double C2318 =
        (3 * (C49875 + C49888 * C50064) +
         C50057 * (2 * C50057 * C49888 + C50057 * (C49888 + C49911 * C50064))) /
        C49758;
    const double C2564 =
        (C49875 + C49888 * C50064 + (C49888 + C49911 * C50064) * C50098) /
        C49758;
    const double C3090 =
        (C50091 * (2 * C50057 * C49888 + C50057 * (C49888 + C49911 * C50064))) /
        C49758;
    const double C5403 =
        (3 * (C49875 + C49888 * C50098) +
         C50091 * (2 * C50091 * C49888 + C50091 * (C49888 + C49911 * C50098))) /
        C49758;
    const double C49916 = C49899 + C49910;
    const double C49949 = C49935 * ae;
    const double C49947 = C49935 * C49867;
    const double C49946 = C49863 * C49935;
    const double C49945 = C49935 * be;
    const double C49957 = C49935 + C49951;
    const double C50529 = C49935 * C50064;
    const double C50538 = C50057 * C49935;
    const double C50543 = C49935 * C50098;
    const double C50022 = C49863 * C50016;
    const double C50019 = C49863 * C50013;
    const double C50018 = C49991 + C50012;
    const double C49902 = C49897 + C49898;
    const double C49913 = C49878 + C49907;
    const double C49915 = C49906 * ae;
    const double C49912 = C49906 * be;
    const double C49939 = 2 * C49906;
    const double C50509 = C50057 * C49906;
    const double C50501 = C49878 + C50500;
    const double C50528 = 2 * C50520;
    const double C50526 = C49878 + C50525;
    const double C50544 = 2 * C50542;
    const double C50083 = C49914 + C50080;
    const double C50117 = C49914 + C50114;
    const double C50133 = be * C50128;
    const double C50165 = C50091 * C50128;
    const double C50427 = C50128 * C50098;
    const double C50150 = be * C50145;
    const double C50002 = C49989 + C49990;
    const double C50082 = C49911 + C50079;
    const double C50116 = C49911 + C50113;
    const double C50132 = ae * C50127;
    const double C50164 = C50091 * C50127;
    const double C50424 = C50127 * C50098;
    const double C50149 = ae * C50144;
    const double C50015 = C49935 + C50007;
    const double C50017 = C50006 * ae;
    const double C50014 = C50006 * be;
    const double C50587 = C50586 * C50581;
    const double C50592 = C50591 * C50586;
    const double C50823 = C50586 * C50582;
    const double C50820 = C50586 / C50580;
    const double C900 = C50828 * C50586;
    const double C50654 = C50605 * C50652;
    const double C50657 = C50591 * C50605;
    const double C50832 = C50605 * C50653;
    const double C50827 = C50605 / C50580;
    const double C253 = C50828 * C50605;
    const double C50682 = C50621 * C50680;
    const double C50685 = C50591 * C50621;
    const double C50836 = C50621 * C50681;
    const double C50829 = C50621 / C50580;
    const double C396 = C50828 * C50621;
    const double C50754 = C50707 * C50752;
    const double C50757 = C50560 * C50707;
    const double C50845 = C50707 * C50753;
    const double C50840 = C50707 / C49763;
    const double C2164 = C50841 * C50707;
    const double C50780 = C50719 * C50778;
    const double C50783 = C50560 * C50719;
    const double C50849 = C50719 * C50779;
    const double C50842 = C50719 / C49763;
    const double C5107 = C50841 * C50719;
    const double C49774 = C49769 / C49762;
    const double C49772 = 2 * C49769;
    const double C49789 = -4 * C49769;
    const double C50817 = C50557 / C49767;
    const double C50815 = C50557 / C49758;
    const double C50814 = C50557 * C50552;
    const double C17044 = (2 * C50560 * C50557) / C49758;
    const double C50818 = C50561 * C50552;
    const double C108 = C50561 / C50819;
    const double C7928 = C50561 / C49763;
    const double C50854 = C50816 / C49758;
    const double C17043 = (C50556 * std::pow(C50551, 2)) / C49762 + C50813;
    const double C49895 = C49892 + C49886;
    const double C261 = C49863 * C49866 + C49884 * C50064;
    const double C402 = C49863 * C49866 + C49884 * C50098;
    const double C779 = C50091 * C50057 * C49884;
    const double C974 =
        2 * C50057 * C49884 + C50057 * (C49884 + C49906 * C50064);
    const double C1088 = C50057 * C49884 + C50057 * C49906 * C50098;
    const double C1435 = C50091 * (C49884 + C49906 * C50064);
    const double C1719 =
        2 * C50091 * C49884 + C50091 * (C49884 + C49906 * C50098);
    const double C49894 = C49891 + C49883;
    const double C49893 = C49890 * C49760;
    const double C4508 =
        2 * C50091 * C50511 + C50091 * (C50511 + C50057 * C49899 * C50098);
    const double C6421 =
        3 * (C50511 + C50520 * C50098) +
        C50091 * (2 * C50091 * C50520 +
                  C50091 * (C50520 + C50057 * C49935 * C50098));
    const double C49921 = C49918 + C49909;
    const double C50074 = be * C50071;
    const double C50412 = 2 * C50071;
    const double C4516 =
        (2 * C50091 * C50380 + C50091 * (C50380 + C50071 * C50098)) / C49758;
    const double C6425 =
        (3 * (C50380 + C50071 * C50098) +
         C50091 * (2 * C50091 * C50071 + C50091 * (C50071 + C50128 * C50098))) /
        C49758;
    const double C50108 = be * C50105;
    const double C50434 = 2 * C50105;
    const double C50360 = C49889 + C50359;
    const double C50406 = C49889 + C50405;
    const double C49920 = C49917 + C49905;
    const double C49942 = C49933 + C49934;
    const double C50073 = ae * C50070;
    const double C50408 = 2 * C50070;
    const double C4515 =
        (2 * C50091 * C50378 + C50091 * (C50378 + C50070 * C50098)) / C49758;
    const double C6424 =
        (3 * (C50378 + C50070 * C50098) +
         C50091 * (2 * C50091 * C50070 + C50091 * (C50070 + C50127 * C50098))) /
        C49758;
    const double C50107 = ae * C50104;
    const double C50430 = 2 * C50104;
    const double C50357 = C49888 + C50356;
    const double C50403 = C49888 + C50402;
    const double C49919 = C49916 * C49760;
    const double C49966 = C49961 + C49949;
    const double C49954 = C49899 + C49947;
    const double C49956 = C49946 * ae;
    const double C49953 = C49946 * be;
    const double C49996 = 2 * C49946;
    const double C50497 = C49946 * C50064;
    const double C50518 = C50057 * C49946;
    const double C50522 = C49946 * C50098;
    const double C2316 =
        3 * (C49884 + C49906 * C50064) +
        C50057 * (2 * C50057 * C49906 + C50057 * (C49906 + C49946 * C50064));
    const double C2562 =
        C49884 + C49906 * C50064 + (C49906 + C49946 * C50064) * C50098;
    const double C3088 =
        C50091 * (2 * C50057 * C49906 + C50057 * (C49906 + C49946 * C50064));
    const double C5401 =
        3 * (C49884 + C49906 * C50098) +
        C50091 * (2 * C50091 * C49906 + C50091 * (C49906 + C49946 * C50098));
    const double C49964 = C49958 + C49945;
    const double C49963 = C49957 * C49760;
    const double C50530 = C49899 + C50529;
    const double C50539 = C50538 * C50098;
    const double C50545 = C49899 + C50543;
    const double C50027 = C50022 + C50009;
    const double C50025 = C50019 + C50005;
    const double C50024 = C50018 * C49760;
    const double C129 = 3 * (C49866 + C49878 * C49867) +
                        C49863 * (2 * C49884 + C49863 * C49913);
    const double C256 = C50057 * (2 * C49884 + C49863 * C49913);
    const double C262 = C49866 + C49878 * C49867 + C49913 * C50064;
    const double C397 = C50091 * (2 * C49884 + C49863 * C49913);
    const double C403 = C49866 + C49878 * C49867 + C49913 * C50098;
    const double C780 = C50091 * C50057 * C49913;
    const double C4507 =
        2 * C50091 * C50509 + C50091 * (C50509 + C50057 * C49946 * C50098);
    const double C3400 =
        4 * (2 * C50057 * C49878 + C50057 * C50501) +
        C50057 * (3 * C50501 + C50057 * (2 * C50057 * C49899 +
                                         C50057 * (C49899 + C49935 * C50064)));
    const double C3570 =
        2 * C50057 * C49878 + C50057 * C50501 +
        (2 * C50057 * C49899 + C50057 * (C49899 + C49935 * C50064)) * C50098;
    const double C4092 =
        C50091 * (3 * C50501 + C50057 * (2 * C50057 * C49899 +
                                         C50057 * (C49899 + C49935 * C50064)));
    const double C4506 =
        2 * C50091 * C50501 +
        C50091 * (C50501 + (C49899 + C49935 * C50064) * C50098);
    const double C7320 =
        4 * (2 * C50091 * C49878 + C50091 * C50526) +
        C50091 * (3 * C50526 + C50091 * (2 * C50091 * C49899 +
                                         C50091 * (C49899 + C49935 * C50098)));
    const double C50086 = be * C50083;
    const double C50413 = C50057 * C50083;
    const double C50120 = be * C50117;
    const double C50435 = C50091 * C50117;
    const double C50168 = be * C50165;
    const double C50428 = C50071 + C50427;
    const double C50085 = ae * C50082;
    const double C50409 = C50057 * C50082;
    const double C50119 = ae * C50116;
    const double C50431 = C50091 * C50116;
    const double C50136 = C50132 + C50133;
    const double C50167 = ae * C50164;
    const double C50425 = C50070 + C50424;
    const double C50153 = C50149 + C50150;
    const double C50023 = C50015 * ae;
    const double C50021 = C49863 * C50015;
    const double C50020 = C50015 * be;
    const double C50824 = C50587 / C50595;
    const double C50822 = C50587 / C50578;
    const double C50821 = C50587 * C50582;
    const double C899 = (2 * C50591 * C50587) / C50578;
    const double C50825 = C50592 * C50582;
    const double C116 = C50592 / C50826;
    const double C539 = C50592 / C50580;
    const double C50857 = C50823 / C50578;
    const double C898 = (C50586 * std::pow(C50581, 2)) / C50590 + C50820;
    const double C50834 = C50654 / C50595;
    const double C50833 = C50654 * C50653;
    const double C50830 = C50654 / C50578;
    const double C252 = (2 * C50591 * C50654) / C50578;
    const double C50835 = C50657 * C50653;
    const double C970 = C50657 / C50826;
    const double C1202 = C50657 / C50580;
    const double C50859 = C50832 / C50578;
    const double C251 = (C50605 * std::pow(C50652, 2)) / C50590 + C50827;
    const double C50838 = C50682 / C50595;
    const double C50837 = C50682 * C50681;
    const double C50831 = C50682 / C50578;
    const double C395 = (2 * C50591 * C50682) / C50578;
    const double C50839 = C50685 * C50681;
    const double C1716 = C50685 / C50826;
    const double C1963 = C50685 / C50580;
    const double C50862 = C50836 / C50578;
    const double C394 = (C50621 * std::pow(C50680, 2)) / C50590 + C50829;
    const double C50847 = C50754 / C49767;
    const double C50846 = C50754 * C50753;
    const double C50843 = C50754 / C49758;
    const double C2163 = (2 * C50560 * C50754) / C49758;
    const double C50848 = C50757 * C50753;
    const double C19864 = C50757 / C50819;
    const double C24644 = C50757 / C49763;
    const double C50865 = C50845 / C49758;
    const double C2162 = (C50707 * std::pow(C50752, 2)) / C49762 + C50840;
    const double C50851 = C50780 / C49767;
    const double C50850 = C50780 * C50779;
    const double C50844 = C50780 / C49758;
    const double C5106 = (2 * C50560 * C50780) / C49758;
    const double C50852 = C50783 * C50779;
    const double C39196 = C50783 / C50819;
    const double C44512 = C50783 / C49763;
    const double C50868 = C50849 / C49758;
    const double C5105 = (C50719 * std::pow(C50778, 2)) / C49762 + C50842;
    const double C49777 = C49766 - C49774;
    const double C49776 = C49756 * C49772;
    const double C2167 = (-C49772 / C49758) / C49763 - (0 * be) / C49758;
    const double C19865 = -C49772 / C49758;
    const double C49792 = C49789 / C49758;
    const double C24799 = C50815 * C289;
    const double C27933 = C50815 * C430;
    const double C50853 = C50814 / C49762;
    const double C50855 = C50818 / C49758;
    const double C2160 = -C50854;
    const double C17204 = C17043 * C289;
    const double C34103 = C17043 * C430;
    const double C139 = (2 * (C49863 * C49876 + C49866 * ae) +
                         C49863 * (C49876 + C49863 * C49895 + C49884 * ae) +
                         (C49866 + C49878 * C49867) * ae) /
                        C49758;
    const double C269 =
        (C50057 * (C49876 + C49863 * C49895 + C49884 * ae)) / C49758;
    const double C277 =
        (C49863 * C49876 + C49866 * ae + C49895 * C50064) / C49758;
    const double C410 =
        (C50091 * (C49876 + C49863 * C49895 + C49884 * ae)) / C49758;
    const double C418 =
        (C49863 * C49876 + C49866 * ae + C49895 * C50098) / C49758;
    const double C786 = (C50091 * C50057 * C49895) / C49758;
    const double C138 = (2 * (C49863 * C49875 + C49866 * be) +
                         C49863 * (C49875 + C49863 * C49894 + C49884 * be) +
                         (C49866 + C49878 * C49867) * be) /
                        C49758;
    const double C268 =
        (C50057 * (C49875 + C49863 * C49894 + C49884 * be)) / C49758;
    const double C276 =
        (C49863 * C49875 + C49866 * be + C49894 * C50064) / C49758;
    const double C409 =
        (C50091 * (C49875 + C49863 * C49894 + C49884 * be)) / C49758;
    const double C417 =
        (C49863 * C49875 + C49866 * be + C49894 * C50098) / C49758;
    const double C785 = (C50091 * C50057 * C49894) / C49758;
    const double C149 =
        (2 * (ae * C49875 + be * C49876 + C49863 * C49893) +
         ae * (C49875 + C49863 * C49894 + C49884 * be) +
         be * (C49876 + C49863 * C49895 + C49884 * ae) +
         C49863 * (C49893 + ae * C49894 + be * C49895 +
                   C49863 * (ae * C49888 + be * C49889 +
                             C49863 *
                                 (C49879 * C49880 +
                                  C49867 * bs[5] * std::pow(C49869, 5)) *
                                 C49760))) /
        C49762;
    const double C288 = (ae * C50057 * C49875 + be * C50057 * C49876 +
                         C49863 * C50057 * C49893) /
                        C49762;
    const double C290 = ((C49866 + C49867 * C49868 * C49872) * C49760 +
                         C49893 * std::pow(C50057, 2)) /
                        C49762;
    const double C429 = (ae * C50091 * C49875 + be * C50091 * C49876 +
                         C49863 * C50091 * C49893) /
                        C49762;
    const double C431 = ((C49866 + C49867 * C49868 * C49872) * C49760 +
                         C49893 * std::pow(C50091, 2)) /
                        C49762;
    const double C793 = (C50091 * C50057 * C49893) / C49762;
    const double C49924 = C49863 * C49921;
    const double C49940 = 2 * C49921;
    const double C49932 = be * C49921;
    const double C50376 = C50057 * C49921;
    const double C981 =
        (2 * C50057 * C49895 + C50057 * (C49895 + C49921 * C50064)) / C49758;
    const double C1095 = (C50057 * C49895 + C50057 * C49921 * C50098) / C49758;
    const double C1442 = (C50091 * (C49895 + C49921 * C50064)) / C49758;
    const double C1726 =
        (2 * C50091 * C49895 + C50091 * (C49895 + C49921 * C50098)) / C49758;
    const double C3404 =
        (4 * (2 * C50057 * C49889 + C50057 * C50360) +
         C50057 * (3 * C50360 + C50057 * (2 * C50071 + C50057 * C50083))) /
        C49758;
    const double C3574 = (2 * C50057 * C49889 + C50057 * C50360 +
                          (2 * C50071 + C50057 * C50083) * C50098) /
                         C49758;
    const double C4096 =
        (C50091 * (3 * C50360 + C50057 * (2 * C50071 + C50057 * C50083))) /
        C49758;
    const double C4512 =
        (2 * C50091 * C50360 + C50091 * (C50360 + C50083 * C50098)) / C49758;
    const double C23147 =
        (3 * (C50360 + C50083 * C50098) +
         C50091 * (2 * C50091 * C50083 +
                   C50091 * (C50083 + (C49955 + C50016 * C50064) * C50098))) /
        C49758;
    const double C7324 =
        (4 * (2 * C50091 * C49889 + C50091 * C50406) +
         C50091 * (3 * C50406 + C50091 * (2 * C50105 + C50091 * C50117))) /
        C49758;
    const double C49923 = C49863 * C49920;
    const double C49938 = 2 * C49920;
    const double C49931 = ae * C49920;
    const double C50374 = C50057 * C49920;
    const double C980 =
        (2 * C50057 * C49894 + C50057 * (C49894 + C49920 * C50064)) / C49758;
    const double C1094 = (C50057 * C49894 + C50057 * C49920 * C50098) / C49758;
    const double C1441 = (C50091 * (C49894 + C49920 * C50064)) / C49758;
    const double C1725 =
        (2 * C50091 * C49894 + C50091 * (C49894 + C49920 * C50098)) / C49758;
    const double C50076 = C50073 + C50074;
    const double C50110 = C50107 + C50108;
    const double C3403 =
        (4 * (2 * C50057 * C49888 + C50057 * C50357) +
         C50057 * (3 * C50357 + C50057 * (2 * C50070 + C50057 * C50082))) /
        C49758;
    const double C3573 = (2 * C50057 * C49888 + C50057 * C50357 +
                          (2 * C50070 + C50057 * C50082) * C50098) /
                         C49758;
    const double C4095 =
        (C50091 * (3 * C50357 + C50057 * (2 * C50070 + C50057 * C50082))) /
        C49758;
    const double C4511 =
        (2 * C50091 * C50357 + C50091 * (C50357 + C50082 * C50098)) / C49758;
    const double C23146 =
        (3 * (C50357 + C50082 * C50098) +
         C50091 * (2 * C50091 * C50082 +
                   C50091 * (C50082 + (C49952 + C50013 * C50064) * C50098))) /
        C49758;
    const double C7323 =
        (4 * (2 * C50091 * C49888 + C50091 * C50403) +
         C50091 * (3 * C50403 + C50091 * (2 * C50104 + C50091 * C50116))) /
        C49758;
    const double C49922 = C49863 * C49919;
    const double C50058 = C50057 * C49919;
    const double C50092 = C50091 * C49919;
    const double C291 =
        (ae * (C49875 + C49888 * C50064) + be * (C49876 + C49889 * C50064) +
         C49863 * (C49893 + C49919 * C50064)) /
        C49762;
    const double C432 =
        (ae * (C49875 + C49888 * C50098) + be * (C49876 + C49889 * C50098) +
         C49863 * (C49893 + C49919 * C50098)) /
        C49762;
    const double C987 =
        (2 * C50057 * C49893 + C50057 * (C49893 + C49919 * C50064)) / C49762;
    const double C1448 = (C50091 * (C49893 + C49919 * C50064)) / C49762;
    const double C1732 =
        (2 * C50091 * C49893 + C50091 * (C49893 + C49919 * C50098)) / C49762;
    const double C49969 = C49863 * C49966;
    const double C49999 = 2 * C49966;
    const double C49988 = be * C49966;
    const double C50126 = C50057 * C49966;
    const double C50143 = C50091 * C49966;
    const double C50353 = C49966 * C50064;
    const double C50399 = C49966 * C50098;
    const double C2321 =
        (3 * (C49895 + C49921 * C50064) +
         C50057 * (2 * C50057 * C49921 + C50057 * (C49921 + C49966 * C50064))) /
        C49758;
    const double C2567 =
        (C49895 + C49921 * C50064 + (C49921 + C49966 * C50064) * C50098) /
        C49758;
    const double C3093 =
        (C50091 * (2 * C50057 * C49921 + C50057 * (C49921 + C49966 * C50064))) /
        C49758;
    const double C5406 =
        (3 * (C49895 + C49921 * C50098) +
         C50091 * (2 * C50091 * C49921 + C50091 * (C49921 + C49966 * C50098))) /
        C49758;
    const double C49962 = C49954 * ae;
    const double C49960 = C49863 * C49954;
    const double C49959 = C49954 * be;
    const double C49997 = 3 * C49954;
    const double C50516 = C50057 * C49954;
    const double C973 =
        2 * C50057 * C49913 + C50057 * (C49913 + C49954 * C50064);
    const double C1087 = C50057 * C49913 + C50057 * C49954 * C50098;
    const double C1434 = C50091 * (C49913 + C49954 * C50064);
    const double C1718 =
        2 * C50091 * C49913 + C50091 * (C49913 + C49954 * C50098);
    const double C2317 =
        3 * (C49913 + C49954 * C50064) +
        C50057 * (2 * C50057 * C49954 + C50057 * (C49954 + C50015 * C50064));
    const double C2563 =
        C49913 + C49954 * C50064 + (C49954 + C50015 * C50064) * C50098;
    const double C3089 =
        C50091 * (2 * C50057 * C49954 + C50057 * (C49954 + C50015 * C50064));
    const double C5402 =
        3 * (C49913 + C49954 * C50098) +
        C50091 * (2 * C50091 * C49954 + C50091 * (C49954 + C50015 * C50098));
    const double C50498 = C49906 + C50497;
    const double C6420 =
        3 * (C50509 + C50518 * C50098) +
        C50091 * (2 * C50091 * C50518 +
                  C50091 * (C50518 + C50057 * C50006 * C50098));
    const double C50523 = C49906 + C50522;
    const double C49968 = C49863 * C49964;
    const double C49995 = 2 * C49964;
    const double C49987 = ae * C49964;
    const double C50125 = C50057 * C49964;
    const double C50142 = C50091 * C49964;
    const double C50350 = C49964 * C50064;
    const double C50396 = C49964 * C50098;
    const double C2320 =
        (3 * (C49894 + C49920 * C50064) +
         C50057 * (2 * C50057 * C49920 + C50057 * (C49920 + C49964 * C50064))) /
        C49758;
    const double C2566 =
        (C49894 + C49920 * C50064 + (C49920 + C49964 * C50064) * C50098) /
        C49758;
    const double C3092 =
        (C50091 * (2 * C50057 * C49920 + C50057 * (C49920 + C49964 * C50064))) /
        C49758;
    const double C5405 =
        (3 * (C49894 + C49920 * C50098) +
         C50091 * (2 * C50091 * C49920 + C50091 * (C49920 + C49964 * C50098))) /
        C49758;
    const double C49967 = C49863 * C49963;
    const double C50067 = C49963 * C50064;
    const double C50072 = C50057 * C49963;
    const double C50101 = C49963 * C50098;
    const double C50106 = C50091 * C49963;
    const double C292 =
        (C49893 + C49919 * C50064 + ae * (C49894 + C49920 * C50064) +
         be * (C49895 + C49921 * C50064) +
         C49863 * (ae * (C49888 + C49911 * C50064) +
                   be * (C49889 + C49914 * C50064) +
                   C49863 * (C49919 + C49963 * C50064))) /
        C49762;
    const double C433 =
        (C49893 + C49919 * C50098 + ae * (C49894 + C49920 * C50098) +
         be * (C49895 + C49921 * C50098) +
         C49863 * (ae * (C49888 + C49911 * C50098) +
                   be * (C49889 + C49914 * C50098) +
                   C49863 * (C49919 + C49963 * C50098))) /
        C49762;
    const double C50531 = C50057 * C50530;
    const double C23145 =
        3 * (C50501 + C50530 * C50098) +
        C50091 * (2 * C50091 * C50530 +
                  C50091 * (C50530 + (C49935 + C49991 * C50064) * C50098));
    const double C50540 = C50520 + C50539;
    const double C50546 = C50091 * C50545;
    const double C50032 = C49863 * C50027;
    const double C50029 = C49863 * C50025;
    const double C50028 = C49863 * C50024;
    const double C50081 = C50024 * C50064;
    const double C50115 = C50024 * C50098;
    const double C50129 = C50057 * C50024;
    const double C50146 = C50091 * C50024;
    const double C50414 = C50412 + C50413;
    const double C50436 = C50434 + C50435;
    const double C24047 =
        (4 * (2 * C50091 * C50071 + C50091 * C50428) +
         C50091 * (3 * C50428 +
                   C50091 * (2 * C50165 +
                             C50091 * (C50128 + C50057 * C50016 * C50098)))) /
        C49758;
    const double C50088 = C50085 + C50086;
    const double C50410 = C50408 + C50409;
    const double C50122 = C50119 + C50120;
    const double C50432 = C50430 + C50431;
    const double C50170 = C50167 + C50168;
    const double C24046 =
        (4 * (2 * C50091 * C50070 + C50091 * C50425) +
         C50091 * (3 * C50425 +
                   C50091 * (2 * C50164 +
                             C50091 * (C50127 + C50057 * C50013 * C50098)))) /
        C49758;
    const double C50026 = C49996 + C50021;
    const double C50856 = C50821 / C50590;
    const double C50858 = C50825 / C50578;
    const double C254 = -C50857;
    const double C50860 = C50833 / C50590;
    const double C50861 = C50835 / C50578;
    const double C896 = -C50859;
    const double C50863 = C50837 / C50590;
    const double C50864 = C50839 / C50578;
    const double C1547 = -C50862;
    const double C50866 = C50846 / C49762;
    const double C50867 = C50848 / C49758;
    const double C17046 = -C50865;
    const double C50869 = C50850 / C49762;
    const double C50870 = C50852 / C49758;
    const double C33805 = -C50868;
    const double C24802 = C49777 * C271;
    const double C24800 = C49777 * C270;
    const double C27936 = C49777 * C412;
    const double C27934 = C49777 * C411;
    const double C123 =
        (C49777 / C49763 - (0 * be) / C49758) / C49763 + (0 * ae) / C49758;
    const double C7935 = C49777 / C49763 - (0 * be) / C49758;
    const double C17052 = C49777 / C49763 + (0 * ae) / C49758;
    const double C49779 = C49776 / C49758;
    const double C2334 = C2167 * C271;
    const double C2332 = C2167 * C270;
    const double C5419 = C2167 * C412;
    const double C5417 = C2167 * C411;
    const double C19984 = C19865 * C271;
    const double C19982 = C19865 * C270;
    const double C19980 = C19865 * C2319;
    const double C19978 = C19865 * C2318;
    const double C19976 = C19865 * C983;
    const double C19974 = C19865 * C982;
    const double C19972 = C19865 * C275;
    const double C19970 = C19865 * C274;
    const double C19968 = C19865 * C273;
    const double C19966 = C19865 * C272;
    const double C20488 = C19865 * C784;
    const double C20486 = C19865 * C783;
    const double C20484 = C19865 * C1444;
    const double C20482 = C19865 * C1443;
    const double C20480 = C19865 * C3091;
    const double C20478 = C19865 * C3090;
    const double C20810 = C19865 * C2565;
    const double C20808 = C19865 * C2564;
    const double C20806 = C19865 * C1097;
    const double C20804 = C19865 * C1096;
    const double C22192 = C19865 * C412;
    const double C22190 = C19865 * C411;
    const double C22188 = C19865 * C1728;
    const double C22186 = C19865 * C1727;
    const double C22184 = C19865 * C4516;
    const double C22182 = C19865 * C4515;
    const double C22180 = C19865 * C416;
    const double C22178 = C19865 * C415;
    const double C22176 = C19865 * C414;
    const double C22174 = C19865 * C413;
    const double C23154 = C19865 * C6425;
    const double C23152 = C19865 * C6424;
    const double C24052 = C19865 * C5404;
    const double C24050 = C19865 * C5403;
    const double C50871 = C50813 - C50853;
    const double C50872 = C50817 - C50855;
    const double C2331 = C2160 * C289;
    const double C5416 = C2160 * C430;
    const double C2358 = C2167 * C269;
    const double C20228 = C19865 * C269;
    const double C24826 = C49777 * C269;
    const double C2342 = C2167 * C277;
    const double C19988 = C19865 * C277;
    const double C24810 = C49777 * C277;
    const double C5443 = C2167 * C410;
    const double C22541 = C19865 * C410;
    const double C27952 = C49777 * C410;
    const double C5427 = C2167 * C418;
    const double C22196 = C19865 * C418;
    const double C27940 = C49777 * C418;
    const double C3110 = C2167 * C786;
    const double C20492 = C19865 * C786;
    const double C25554 = C49777 * C786;
    const double C2356 = C2167 * C268;
    const double C20226 = C19865 * C268;
    const double C24824 = C49777 * C268;
    const double C2340 = C2167 * C276;
    const double C19986 = C19865 * C276;
    const double C24808 = C49777 * C276;
    const double C5441 = C2167 * C409;
    const double C22539 = C19865 * C409;
    const double C27950 = C49777 * C409;
    const double C5425 = C2167 * C417;
    const double C22194 = C19865 * C417;
    const double C27938 = C49777 * C417;
    const double C3108 = C2167 * C785;
    const double C20490 = C19865 * C785;
    const double C25552 = C49777 * C785;
    const double C2355 = C2160 * C288;
    const double C2335 = C50561 * C288;
    const double C17228 = C17043 * C288;
    const double C17208 = C17044 * C288;
    const double C19985 = C50556 * C288;
    const double C24823 = C50815 * C288;
    const double C24803 = C50561 * C288;
    const double C2339 = C2160 * C290;
    const double C17224 = C17043 * C290;
    const double C19973 = C50556 * C290;
    const double C24807 = C50815 * C290;
    const double C5440 = C2160 * C429;
    const double C5420 = C50561 * C429;
    const double C22193 = C50556 * C429;
    const double C27949 = C50815 * C429;
    const double C27937 = C50561 * C429;
    const double C34127 = C17043 * C429;
    const double C34107 = C17044 * C429;
    const double C5424 = C2160 * C431;
    const double C22181 = C50556 * C431;
    const double C27945 = C50815 * C431;
    const double C34123 = C17043 * C431;
    const double C3115 = C2160 * C793;
    const double C17949 = C17043 * C793;
    const double C20489 = C50556 * C793;
    const double C25559 = C50815 * C793;
    const double C49927 = C49889 + C49924;
    const double C2346 = C2167 * C981;
    const double C19992 = C19865 * C981;
    const double C24814 = C49777 * C981;
    const double C3584 = C2167 * C1095;
    const double C22012 = C19865 * C1095;
    const double C26012 = C49777 * C1095;
    const double C3102 = C2167 * C1442;
    const double C20496 = C19865 * C1442;
    const double C25546 = C49777 * C1442;
    const double C5431 = C2167 * C1726;
    const double C22200 = C19865 * C1726;
    const double C30383 = C49777 * C1726;
    const double C20696 = C19865 * C3404;
    const double C20814 = C19865 * C3574;
    const double C21160 = C19865 * C4096;
    const double C23158 = C19865 * C4512;
    const double C40590 = C19865 * C7324;
    const double C49926 = C49888 + C49923;
    const double C49941 = C49919 + C49931;
    const double C2344 = C2167 * C980;
    const double C19990 = C19865 * C980;
    const double C24812 = C49777 * C980;
    const double C3582 = C2167 * C1094;
    const double C22010 = C19865 * C1094;
    const double C26010 = C49777 * C1094;
    const double C3100 = C2167 * C1441;
    const double C20494 = C19865 * C1441;
    const double C25544 = C49777 * C1441;
    const double C5429 = C2167 * C1725;
    const double C22198 = C19865 * C1725;
    const double C30381 = C49777 * C1725;
    const double C20694 = C19865 * C3403;
    const double C20812 = C19865 * C3573;
    const double C21158 = C19865 * C4095;
    const double C23156 = C19865 * C4511;
    const double C40588 = C19865 * C7323;
    const double C49925 = C49902 + C49922;
    const double C287 =
        (C50057 * C49893 + ae * C50057 * C49894 + be * C50057 * C49895 +
         C49863 *
             (ae * C50057 * C49888 + be * C50057 * C49889 + C49863 * C50058)) /
        C49762;
    const double C794 =
        (ae * C50091 * C50057 * C49888 + be * C50091 * C50057 * C49889 +
         C49863 * C50091 * C50058) /
        C49762;
    const double C1101 = (C50057 * C49893 + C50058 * C50098) / C49762;
    const double C428 =
        (C50091 * C49893 + ae * C50091 * C49894 + be * C50091 * C49895 +
         C49863 *
             (ae * C50091 * C49888 + be * C50091 * C49889 + C49863 * C50092)) /
        C49762;
    const double C2363 = C2160 * C291;
    const double C2343 = C50561 * C291;
    const double C17240 = C17043 * C291;
    const double C17220 = C17044 * C291;
    const double C19989 = C50556 * C291;
    const double C24831 = C50815 * C291;
    const double C24811 = C50561 * C291;
    const double C5448 = C2160 * C432;
    const double C5428 = C50561 * C432;
    const double C22197 = C50556 * C432;
    const double C27957 = C50815 * C432;
    const double C27941 = C50561 * C432;
    const double C34139 = C17043 * C432;
    const double C34119 = C17044 * C432;
    const double C2351 = C2160 * C987;
    const double C18227 = C17043 * C987;
    const double C19977 = C50556 * C987;
    const double C24819 = C50815 * C987;
    const double C3107 = C2160 * C1448;
    const double C18901 = C17043 * C1448;
    const double C20485 = C50556 * C1448;
    const double C25551 = C50815 * C1448;
    const double C5436 = C2160 * C1732;
    const double C22189 = C50556 * C1732;
    const double C30380 = C50815 * C1732;
    const double C35960 = C17043 * C1732;
    const double C49972 = C49914 + C49969;
    const double C50131 = be * C50126;
    const double C4514 =
        (2 * C50091 * C50376 + C50091 * (C50376 + C50126 * C50098)) / C49758;
    const double C6423 =
        (3 * (C50376 + C50126 * C50098) +
         C50091 * (2 * C50091 * C50126 +
                   C50091 * (C50126 + C50057 * C50027 * C50098))) /
        C49758;
    const double C50148 = be * C50143;
    const double C50354 = C49921 + C50353;
    const double C50400 = C49921 + C50399;
    const double C3415 = C2167 * C2321;
    const double C19996 = C19865 * C2321;
    const double C25851 = C49777 * C2321;
    const double C3592 = C2167 * C2567;
    const double C22018 = C19865 * C2567;
    const double C26020 = C49777 * C2567;
    const double C4107 = C2167 * C3093;
    const double C20500 = C19865 * C3093;
    const double C26527 = C49777 * C3093;
    const double C7335 = C2167 * C5406;
    const double C39396 = C19865 * C5406;
    const double C46595 = C49777 * C5406;
    const double C49965 = C49939 + C49960;
    const double C6012 =
        2 * C50091 * C50516 + C50091 * (C50516 + C50057 * C50015 * C50098);
    const double C3399 =
        4 * (2 * C50057 * C49906 + C50057 * C50498) +
        C50057 * (3 * C50498 + C50057 * (2 * C50057 * C49946 +
                                         C50057 * (C49946 + C50006 * C50064)));
    const double C3569 =
        2 * C50057 * C49906 + C50057 * C50498 +
        (2 * C50057 * C49946 + C50057 * (C49946 + C50006 * C50064)) * C50098;
    const double C4091 =
        C50091 * (3 * C50498 + C50057 * (2 * C50057 * C49946 +
                                         C50057 * (C49946 + C50006 * C50064)));
    const double C4505 =
        2 * C50091 * C50498 +
        C50091 * (C50498 + (C49946 + C50006 * C50064) * C50098);
    const double C7319 =
        4 * (2 * C50091 * C49906 + C50091 * C50523) +
        C50091 * (3 * C50523 + C50091 * (2 * C50091 * C49946 +
                                         C50091 * (C49946 + C50006 * C50098)));
    const double C49971 = C49911 + C49968;
    const double C50001 = C49963 + C49987;
    const double C50130 = ae * C50125;
    const double C4513 =
        (2 * C50091 * C50374 + C50091 * (C50374 + C50125 * C50098)) / C49758;
    const double C6422 =
        (3 * (C50374 + C50125 * C50098) +
         C50091 * (2 * C50091 * C50125 +
                   C50091 * (C50125 + C50057 * C50025 * C50098))) /
        C49758;
    const double C50147 = ae * C50142;
    const double C50351 = C49920 + C50350;
    const double C50397 = C49920 + C50396;
    const double C3413 = C2167 * C2320;
    const double C19994 = C19865 * C2320;
    const double C25849 = C49777 * C2320;
    const double C3590 = C2167 * C2566;
    const double C22016 = C19865 * C2566;
    const double C26018 = C49777 * C2566;
    const double C4105 = C2167 * C3092;
    const double C20498 = C19865 * C3092;
    const double C26525 = C49777 * C3092;
    const double C7333 = C2167 * C5405;
    const double C39394 = C19865 * C5405;
    const double C46593 = C49777 * C5405;
    const double C49970 = C49942 + C49967;
    const double C50068 = C49919 + C50067;
    const double C50075 = C49863 * C50072;
    const double C50162 = C50091 * C50072;
    const double C50173 = 2 * C50072;
    const double C795 = (C50091 * C50058 + ae * C50091 * C50057 * C49920 +
                         be * C50091 * C50057 * C49921 +
                         C49863 * (ae * C50091 * C50070 + be * C50091 * C50071 +
                                   C49863 * C50091 * C50072)) /
                        C49762;
    const double C1100 = (ae * (C50057 * C49888 + C50070 * C50098) +
                          be * (C50057 * C49889 + C50071 * C50098) +
                          C49863 * (C50058 + C50072 * C50098)) /
                         C49762;
    const double C4520 =
        (2 * C50091 * C50058 + C50091 * (C50058 + C50072 * C50098)) / C49762;
    const double C50102 = C49919 + C50101;
    const double C50109 = C49863 * C50106;
    const double C50191 = 2 * C50106;
    const double C2367 = C50561 * C292;
    const double C2731 = C2160 * C292;
    const double C8099 = C7928 * C292;
    const double C17244 = C17044 * C292;
    const double C17216 = C17045 * C292;
    const double C20233 = C50556 * C292;
    const double C24835 = C50561 * C292;
    const double C25187 = C50815 * C292;
    const double C5452 = C50561 * C433;
    const double C5802 = C2160 * C433;
    const double C11085 = C7928 * C433;
    const double C22546 = C50556 * C433;
    const double C27961 = C50561 * C433;
    const double C34143 = C17044 * C433;
    const double C34115 = C17045 * C433;
    const double C45117 = C50815 * C433;
    const double C50532 = C50528 + C50531;
    const double C24045 =
        4 * (2 * C50091 * C50520 + C50091 * C50540) +
        C50091 * (3 * C50540 +
                  C50091 * (2 * C50091 * C50538 +
                            C50091 * (C50538 + C50057 * C49991 * C50098)));
    const double C50547 = C50544 + C50546;
    const double C50037 = C49955 + C50032;
    const double C50035 = C49952 + C50029;
    const double C50034 = C50002 + C50028;
    const double C50084 = C49963 + C50081;
    const double C50118 = C49963 + C50115;
    const double C50134 = C49863 * C50129;
    const double C50166 = C50091 * C50129;
    const double C50180 = C50129 * C50098;
    const double C50151 = C49863 * C50146;
    const double C20691 =
        (5 * (3 * C50360 + C50057 * C50414) +
         C50057 * (4 * C50414 +
                   C50057 * (3 * C50083 +
                             C50057 * (2 * C50128 +
                                       C50057 * (C49955 + C50016 * C50064))))) /
        C49758;
    const double C20801 =
        (3 * C50360 + C50057 * C50414 +
         (3 * C50083 +
          C50057 * (2 * C50128 + C50057 * (C49955 + C50016 * C50064))) *
             C50098) /
        C49758;
    const double C21155 =
        (C50091 * (4 * C50414 +
                   C50057 * (3 * C50083 +
                             C50057 * (2 * C50128 +
                                       C50057 * (C49955 + C50016 * C50064))))) /
        C49758;
    const double C21429 =
        (2 * C50091 * C50414 +
         C50091 * (C50414 + (2 * C50128 + C50057 * (C49955 + C50016 * C50064)) *
                                C50098)) /
        C49758;
    const double C40585 =
        (5 * (3 * C50406 + C50091 * C50436) +
         C50091 * (4 * C50436 +
                   C50091 * (3 * C50117 +
                             C50091 * (2 * C50145 +
                                       C50091 * (C49955 + C50016 * C50098))))) /
        C49758;
    const double C20690 =
        (5 * (3 * C50357 + C50057 * C50410) +
         C50057 * (4 * C50410 +
                   C50057 * (3 * C50082 +
                             C50057 * (2 * C50127 +
                                       C50057 * (C49952 + C50013 * C50064))))) /
        C49758;
    const double C20800 =
        (3 * C50357 + C50057 * C50410 +
         (3 * C50082 +
          C50057 * (2 * C50127 + C50057 * (C49952 + C50013 * C50064))) *
             C50098) /
        C49758;
    const double C21154 =
        (C50091 * (4 * C50410 +
                   C50057 * (3 * C50082 +
                             C50057 * (2 * C50127 +
                                       C50057 * (C49952 + C50013 * C50064))))) /
        C49758;
    const double C21428 =
        (2 * C50091 * C50410 +
         C50091 * (C50410 + (2 * C50127 + C50057 * (C49952 + C50013 * C50064)) *
                                C50098)) /
        C49758;
    const double C40584 =
        (5 * (3 * C50403 + C50091 * C50432) +
         C50091 * (4 * C50432 +
                   C50091 * (3 * C50116 +
                             C50091 * (2 * C50144 +
                                       C50091 * (C49952 + C50013 * C50098))))) /
        C49758;
    const double C50033 = C50026 * ae;
    const double C50031 = C49863 * C50026;
    const double C50030 = C50026 * be;
    const double C50873 = C50820 - C50856;
    const double C50874 = C50824 - C50858;
    const double C50875 = C50827 - C50860;
    const double C50876 = C50834 - C50861;
    const double C50877 = C50829 - C50863;
    const double C50878 = C50838 - C50864;
    const double C50879 = C50840 - C50866;
    const double C50880 = C50847 - C50867;
    const double C50881 = C50842 - C50869;
    const double C50882 = C50851 - C50870;
    const double C8094 = C7935 * C269;
    const double C8092 = C7935 * C268;
    const double C11080 = C7935 * C410;
    const double C11078 = C7935 * C409;
    const double C17211 = C17052 * C269;
    const double C17209 = C17052 * C268;
    const double C34110 = C17052 * C410;
    const double C34108 = C17052 * C409;
    const double C49781 = C50556 - C49779;
    const double C8123 = C50871 * C291;
    const double C8111 = C50871 * C288;
    const double C8107 = C50871 * C290;
    const double C8087 = C50871 * C289;
    const double C8832 = C50871 * C793;
    const double C9110 = C50871 * C987;
    const double C9784 = C50871 * C1448;
    const double C11109 = C50871 * C432;
    const double C11097 = C50871 * C429;
    const double C11093 = C50871 * C431;
    const double C11073 = C50871 * C430;
    const double C12930 = C50871 * C1732;
    const double C105 = (C50871 * C50551) / C49758 + (C50815 - C50854) / C49763;
    const double C8127 = C50872 * C292;
    const double C8103 = C50872 * C291;
    const double C8091 = C50872 * C288;
    const double C11113 = C50872 * C433;
    const double C11089 = C50872 * C432;
    const double C11077 = C50872 * C429;
    const double C106 =
        (C50872 * C50551) / C49758 + (2 * C50561 + C50871) / C49763;
    const double C107 = (C50551 * C50561) / C49767 + C50872 / C49763;
    const double C49929 = C49927 + C49915;
    const double C49928 = C49926 + C49912;
    const double C49950 = C49941 + C49932;
    const double C2359 = C50561 * C287;
    const double C2723 = C2160 * C287;
    const double C8115 = C50872 * C287;
    const double C8095 = C7928 * C287;
    const double C8463 = C50871 * C287;
    const double C17232 = C17044 * C287;
    const double C17212 = C17045 * C287;
    const double C17580 = C17043 * C287;
    const double C20229 = C50556 * C287;
    const double C24827 = C50561 * C287;
    const double C25179 = C50815 * C287;
    const double C3119 = C2160 * C794;
    const double C3111 = C50561 * C794;
    const double C8836 = C50871 * C794;
    const double C8828 = C50872 * C794;
    const double C17953 = C17043 * C794;
    const double C17945 = C17044 * C794;
    const double C20493 = C50556 * C794;
    const double C25563 = C50815 * C794;
    const double C25555 = C50561 * C794;
    const double C3581 = C2160 * C1101;
    const double C9277 = C50871 * C1101;
    const double C18394 = C17043 * C1101;
    const double C20807 = C50556 * C1101;
    const double C26009 = C50815 * C1101;
    const double C5444 = C50561 * C428;
    const double C5794 = C2160 * C428;
    const double C11101 = C50872 * C428;
    const double C11081 = C7928 * C428;
    const double C11449 = C50871 * C428;
    const double C22542 = C50556 * C428;
    const double C27953 = C50561 * C428;
    const double C28405 = C50815 * C428;
    const double C34131 = C17044 * C428;
    const double C34111 = C17045 * C428;
    const double C34479 = C17043 * C428;
    const double C49975 = C49972 + C49956;
    const double C6435 = C2167 * C4514;
    const double C22204 = C19865 * C4514;
    const double C29204 = C49777 * C4514;
    const double C3402 =
        (4 * (2 * C50057 * C49921 + C50057 * C50354) +
         C50057 *
             (3 * C50354 +
              C50057 * (2 * C50126 + C50057 * (C49966 + C50027 * C50064)))) /
        C49758;
    const double C3572 =
        (2 * C50057 * C49921 + C50057 * C50354 +
         (2 * C50126 + C50057 * (C49966 + C50027 * C50064)) * C50098) /
        C49758;
    const double C4094 =
        (C50091 *
         (3 * C50354 +
          C50057 * (2 * C50126 + C50057 * (C49966 + C50027 * C50064)))) /
        C49758;
    const double C4510 =
        (2 * C50091 * C50354 +
         C50091 * (C50354 + (C49966 + C50027 * C50064) * C50098)) /
        C49758;
    const double C7322 =
        (4 * (2 * C50091 * C49921 + C50091 * C50400) +
         C50091 *
             (3 * C50400 +
              C50091 * (2 * C50143 + C50091 * (C49966 + C50027 * C50098)))) /
        C49758;
    const double C130 = 4 * (2 * C49884 + C49863 * C49913) +
                        C49863 * (3 * C49913 + C49863 * C49965);
    const double C263 = 2 * C49884 + C49863 * C49913 + C49965 * C50064;
    const double C264 = C50057 * (3 * C49913 + C49863 * C49965);
    const double C404 = 2 * C49884 + C49863 * C49913 + C49965 * C50098;
    const double C405 = C50091 * (3 * C49913 + C49863 * C49965);
    const double C781 = C50091 * C50057 * C49965;
    const double C972 =
        2 * C50057 * C49965 + C50057 * (C49965 + C50026 * C50064);
    const double C1086 = C50057 * C49965 + C50057 * C50026 * C50098;
    const double C1433 = C50091 * (C49965 + C50026 * C50064);
    const double C1717 =
        2 * C50091 * C49965 + C50091 * (C49965 + C50026 * C50098);
    const double C49974 = C49971 + C49953;
    const double C50011 = C50001 + C49988;
    const double C50135 = C50072 + C50130;
    const double C6433 = C2167 * C4513;
    const double C22202 = C19865 * C4513;
    const double C29202 = C49777 * C4513;
    const double C50152 = C50106 + C50147;
    const double C3401 =
        (4 * (2 * C50057 * C49920 + C50057 * C50351) +
         C50057 *
             (3 * C50351 +
              C50057 * (2 * C50125 + C50057 * (C49964 + C50025 * C50064)))) /
        C49758;
    const double C3571 =
        (2 * C50057 * C49920 + C50057 * C50351 +
         (2 * C50125 + C50057 * (C49964 + C50025 * C50064)) * C50098) /
        C49758;
    const double C4093 =
        (C50091 *
         (3 * C50351 +
          C50057 * (2 * C50125 + C50057 * (C49964 + C50025 * C50064)))) /
        C49758;
    const double C4509 =
        (2 * C50091 * C50351 +
         C50091 * (C50351 + (C49964 + C50025 * C50064) * C50098)) /
        C49758;
    const double C7321 =
        (4 * (2 * C50091 * C49920 + C50091 * C50397) +
         C50091 *
             (3 * C50397 +
              C50091 * (2 * C50142 + C50091 * (C49964 + C50025 * C50098)))) /
        C49758;
    const double C49973 = C49863 * C49970;
    const double C49984 = 2 * C49970;
    const double C986 =
        (ae * (2 * C50057 * C49888 + C50057 * (C49888 + C49911 * C50064)) +
         be * (2 * C50057 * C49889 + C50057 * (C49889 + C49914 * C50064)) +
         C49863 * (2 * C50058 + C50057 * C50068)) /
        C49762;
    const double C1447 =
        (ae * C50091 * (C49888 + C49911 * C50064) +
         be * C50091 * (C49889 + C49914 * C50064) + C49863 * C50091 * C50068) /
        C49762;
    const double C2324 = (3 * (C49893 + C49919 * C50064) +
                          C50057 * (2 * C50058 + C50057 * C50068)) /
                         C49762;
    const double C2570 = (C49893 + C49919 * C50064 + C50068 * C50098) / C49762;
    const double C3096 = (C50091 * (2 * C50058 + C50057 * C50068)) / C49762;
    const double C50077 = C50076 + C50075;
    const double C3123 = C50561 * C795;
    const double C8840 = C50872 * C795;
    const double C8824 = C7928 * C795;
    const double C14149 = C2160 * C795;
    const double C17957 = C17044 * C795;
    const double C17941 = C17045 * C795;
    const double C22380 = C50556 * C795;
    const double C25567 = C50561 * C795;
    const double C28197 = C50815 * C795;
    const double C3585 = C50561 * C1100;
    const double C6020 = C2160 * C1100;
    const double C9281 = C50872 * C1100;
    const double C18398 = C17044 * C1100;
    const double C22013 = C50556 * C1100;
    const double C26013 = C50561 * C1100;
    const double C27965 = C50815 * C1100;
    const double C6432 = C2160 * C4520;
    const double C22185 = C50556 * C4520;
    const double C29201 = C50815 * C4520;
    const double C1731 =
        (ae * (2 * C50091 * C49888 + C50091 * (C49888 + C49911 * C50098)) +
         be * (2 * C50091 * C49889 + C50091 * (C49889 + C49914 * C50098)) +
         C49863 * (2 * C50092 + C50091 * C50102)) /
        C49762;
    const double C5409 = (3 * (C49893 + C49919 * C50098) +
                          C50091 * (2 * C50092 + C50091 * C50102)) /
                         C49762;
    const double C50111 = C50110 + C50109;
    const double C20689 =
        5 * (3 * C50501 + C50057 * C50532) +
        C50057 * (4 * C50532 +
                  C50057 * (3 * C50530 +
                            C50057 * (2 * C50057 * C49935 +
                                      C50057 * (C49935 + C49991 * C50064))));
    const double C20799 =
        3 * C50501 + C50057 * C50532 +
        (3 * C50530 +
         C50057 * (2 * C50057 * C49935 + C50057 * (C49935 + C49991 * C50064))) *
            C50098;
    const double C21153 =
        C50091 * (4 * C50532 +
                  C50057 * (3 * C50530 +
                            C50057 * (2 * C50057 * C49935 +
                                      C50057 * (C49935 + C49991 * C50064))));
    const double C21427 =
        2 * C50091 * C50532 +
        C50091 * (C50532 +
                  (2 * C50057 * C49935 + C50057 * (C49935 + C49991 * C50064)) *
                      C50098);
    const double C40583 =
        5 * (3 * C50526 + C50091 * C50547) +
        C50091 * (4 * C50547 +
                  C50091 * (3 * C50545 +
                            C50091 * (2 * C50091 * C49935 +
                                      C50091 * (C49935 + C49991 * C50098))));
    const double C50040 = C50037 + C50017;
    const double C50039 = C50035 + C50014;
    const double C50038 = C49863 * C50034;
    const double C50087 = C49863 * C50084;
    const double C50174 = C50057 * C50084;
    const double C50186 = C50091 * C50084;
    const double C2571 = (ae * (C49888 + C49911 * C50064 + C50082 * C50098) +
                          be * (C49889 + C49914 * C50064 + C50083 * C50098) +
                          C49863 * (C50068 + C50084 * C50098)) /
                         C49762;
    const double C2572 =
        (C50068 + C50084 * C50098 +
         ae * (C49920 + C49964 * C50064 + (C49964 + C50025 * C50064) * C50098) +
         be * (C49921 + C49966 * C50064 + (C49966 + C50027 * C50064) * C50098) +
         C49863 * (ae * (C50082 + (C49952 + C50013 * C50064) * C50098) +
                   be * (C50083 + (C49955 + C50016 * C50064) * C50098) +
                   C49863 * (C50084 +
                             (C50024 + (C49992 * C49993 +
                                        C49867 * bs[8] * std::pow(C49861, 8)) *
                                           C49760 * C50064) *
                                 C50098))) /
        C49762;
    const double C4097 =
        (ae * C50091 *
             (3 * C50082 +
              C50057 * (2 * C50127 + C50057 * (C49952 + C50013 * C50064))) +
         be * C50091 *
             (3 * C50083 +
              C50057 * (2 * C50128 + C50057 * (C49955 + C50016 * C50064))) +
         C49863 * C50091 *
             (3 * C50084 +
              C50057 *
                  (2 * C50129 +
                   C50057 * (C50024 + (C49992 * C49993 +
                                       C49867 * bs[8] * std::pow(C49861, 8)) *
                                          C49760 * C50064)))) /
        C49762;
    const double C4518 =
        (2 * C50091 * C50068 + C50091 * (C50068 + C50084 * C50098)) / C49762;
    const double C50121 = C49863 * C50118;
    const double C50192 = C50091 * C50118;
    const double C50138 = C50136 + C50134;
    const double C50169 = C49863 * C50166;
    const double C50181 = C50072 + C50180;
    const double C50155 = C50153 + C50151;
    const double C50036 = C49997 + C50031;
    const double C113 = (C50873 * C50581) / C50578 + (C50822 - C50857) / C50580;
    const double C114 =
        (C50874 * C50581) / C50578 + (2 * C50592 + C50873) / C50580;
    const double C115 = (C50581 * C50592) / C50595 + C50874 / C50580;
    const double C967 = (C50875 * C50652) / C50578 + (C50830 - C50859) / C50580;
    const double C968 =
        (C50876 * C50652) / C50578 + (2 * C50657 + C50875) / C50580;
    const double C969 = (C50652 * C50657) / C50595 + C50876 / C50580;
    const double C1713 =
        (C50877 * C50680) / C50578 + (C50831 - C50862) / C50580;
    const double C1714 =
        (C50878 * C50680) / C50578 + (2 * C50685 + C50877) / C50580;
    const double C1715 = (C50680 * C50685) / C50595 + C50878 / C50580;
    const double C19861 =
        (C50879 * C50752) / C49758 + (C50843 - C50865) / C49763;
    const double C19862 =
        (C50880 * C50752) / C49758 + (2 * C50757 + C50879) / C49763;
    const double C19863 = (C50752 * C50757) / C49767 + C50880 / C49763;
    const double C39193 =
        (C50881 * C50778) / C49758 + (C50844 - C50868) / C49763;
    const double C39194 =
        (C50882 * C50778) / C49758 + (2 * C50783 + C50881) / C49763;
    const double C39195 = (C50778 * C50783) / C49767 + C50882 / C49763;
    const double C49782 = C49781 * ae;
    const double C49793 = C49781 * C49790;
    const double C2165 = (-C49759 / C49758) / C49763 - (C49781 * be) / C49758;
    const double C141 = (3 * (C49876 + C49863 * C49895 + C49884 * ae) +
                         C49863 * (2 * C49895 + C49863 * C49929 + C49913 * ae) +
                         (2 * C49884 + C49863 * C49913) * ae) /
                        C49758;
    const double C267 =
        (C50057 * (2 * C49895 + C49863 * C49929 + C49913 * ae)) / C49758;
    const double C279 =
        (C49876 + C49863 * C49895 + C49884 * ae + C49929 * C50064) / C49758;
    const double C408 =
        (C50091 * (2 * C49895 + C49863 * C49929 + C49913 * ae)) / C49758;
    const double C420 =
        (C49876 + C49863 * C49895 + C49884 * ae + C49929 * C50098) / C49758;
    const double C788 = (C50091 * C50057 * C49929) / C49758;
    const double C150 =
        (3 * (C49893 + ae * C49894 + be * C49895 + C49863 * C49925) +
         ae * (2 * C49894 + C49863 * C49928 + C49913 * be) +
         be * (2 * C49895 + C49863 * C49929 + C49913 * ae) +
         C49863 *
             (2 * C49925 + ae * C49928 + be * C49929 +
              C49863 * (C49919 + ae * C49920 + be * C49921 +
                        C49863 * (ae * C49911 + be * C49914 +
                                  C49863 *
                                      (C49900 * C49901 +
                                       C49867 * bs[6] * std::pow(C49861, 6)) *
                                      C49760)))) /
        C49762;
    const double C286 =
        (2 * (ae * C50057 * C49888 + be * C50057 * C49889 + C49863 * C50058) +
         ae * C50057 * C49928 + be * C50057 * C49929 +
         C49863 * (C50058 + ae * C50057 * C49920 + be * C50057 * C49921 +
                   C49863 * (ae * C50057 * C49911 + be * C50057 * C49914 +
                             C49863 * C50057 * C49963))) /
        C49762;
    const double C427 =
        (2 * (ae * C50091 * C49888 + be * C50091 * C49889 + C49863 * C50092) +
         ae * C50091 * C49928 + be * C50091 * C49929 +
         C49863 * (C50092 + ae * C50091 * C49920 + be * C50091 * C49921 +
                   C49863 * (ae * C50091 * C49911 + be * C50091 * C49914 +
                             C49863 * C50091 * C49963))) /
        C49762;
    const double C140 = (3 * (C49875 + C49863 * C49894 + C49884 * be) +
                         C49863 * (2 * C49894 + C49863 * C49928 + C49913 * be) +
                         (2 * C49884 + C49863 * C49913) * be) /
                        C49758;
    const double C266 =
        (C50057 * (2 * C49894 + C49863 * C49928 + C49913 * be)) / C49758;
    const double C278 =
        (C49875 + C49863 * C49894 + C49884 * be + C49928 * C50064) / C49758;
    const double C407 =
        (C50091 * (2 * C49894 + C49863 * C49928 + C49913 * be)) / C49758;
    const double C419 =
        (C49875 + C49863 * C49894 + C49884 * be + C49928 * C50098) / C49758;
    const double C787 = (C50091 * C50057 * C49928) / C49758;
    const double C49978 = C49863 * C49975;
    const double C49998 = 3 * C49975;
    const double C49986 = be * C49975;
    const double C50390 = C50057 * C49975;
    const double C979 =
        (2 * C50057 * C49929 + C50057 * (C49929 + C49975 * C50064)) / C49758;
    const double C1093 = (C50057 * C49929 + C50057 * C49975 * C50098) / C49758;
    const double C1440 = (C50091 * (C49929 + C49975 * C50064)) / C49758;
    const double C1724 =
        (2 * C50091 * C49929 + C50091 * (C49929 + C49975 * C50098)) / C49758;
    const double C49977 = C49863 * C49974;
    const double C49994 = 3 * C49974;
    const double C49985 = ae * C49974;
    const double C293 =
        (2 * (ae * (C49888 + C49911 * C50064) +
              be * (C49889 + C49914 * C50064) + C49863 * C50068) +
         ae * (C49928 + C49974 * C50064) + be * (C49929 + C49975 * C50064) +
         C49863 * (C50068 + ae * (C49920 + C49964 * C50064) +
                   be * (C49921 + C49966 * C50064) +
                   C49863 * (ae * (C49911 + C49952 * C50064) +
                             be * (C49914 + C49955 * C50064) +
                             C49863 * (C49963 + C50024 * C50064)))) /
        C49762;
    const double C434 =
        (2 * (ae * (C49888 + C49911 * C50098) +
              be * (C49889 + C49914 * C50098) + C49863 * C50102) +
         ae * (C49928 + C49974 * C50098) + be * (C49929 + C49975 * C50098) +
         C49863 * (C50102 + ae * (C49920 + C49964 * C50098) +
                   be * (C49921 + C49966 * C50098) +
                   C49863 * (ae * (C49911 + C49952 * C50098) +
                             be * (C49914 + C49955 * C50098) +
                             C49863 * (C49963 + C50024 * C50098)))) /
        C49762;
    const double C796 =
        (2 * (ae * C50091 * C50070 + be * C50091 * C50071 + C49863 * C50162) +
         ae * C50091 * C50057 * C49974 + be * C50091 * C50057 * C49975 +
         C49863 * (C50162 + ae * C50091 * C50125 + be * C50091 * C50126 +
                   C49863 * (ae * C50091 * C50127 + be * C50091 * C50128 +
                             C49863 * C50091 * C50129))) /
        C49762;
    const double C50388 = C50057 * C49974;
    const double C978 =
        (2 * C50057 * C49928 + C50057 * (C49928 + C49974 * C50064)) / C49758;
    const double C1092 = (C50057 * C49928 + C50057 * C49974 * C50098) / C49758;
    const double C1439 = (C50091 * (C49928 + C49974 * C50064)) / C49758;
    const double C1723 =
        (2 * C50091 * C49928 + C50091 * (C49928 + C49974 * C50098)) / C49758;
    const double C50137 = C50135 + C50131;
    const double C50154 = C50152 + C50148;
    const double C49976 = C49950 + C49973;
    const double C2371 = C2160 * C986;
    const double C2347 = C50561 * C986;
    const double C9114 = C50872 * C986;
    const double C18231 = C17044 * C986;
    const double C19993 = C50556 * C986;
    const double C24839 = C50815 * C986;
    const double C24815 = C50561 * C986;
    const double C3127 = C2160 * C1447;
    const double C3103 = C50561 * C1447;
    const double C9788 = C50872 * C1447;
    const double C18905 = C17044 * C1447;
    const double C20497 = C50556 * C1447;
    const double C25571 = C50815 * C1447;
    const double C25547 = C50561 * C1447;
    const double C3412 = C2160 * C2324;
    const double C19981 = C50556 * C2324;
    const double C25848 = C50815 * C2324;
    const double C3589 = C2160 * C2570;
    const double C20811 = C50556 * C2570;
    const double C26017 = C50815 * C2570;
    const double C4104 = C2160 * C3096;
    const double C20481 = C50556 * C3096;
    const double C26524 = C50815 * C3096;
    const double C5456 = C2160 * C1731;
    const double C5432 = C50561 * C1731;
    const double C12934 = C50872 * C1731;
    const double C22201 = C50556 * C1731;
    const double C30384 = C50561 * C1731;
    const double C35964 = C17044 * C1731;
    const double C44810 = C50815 * C1731;
    const double C7332 = C2160 * C5409;
    const double C24053 = C50556 * C5409;
    const double C46592 = C50815 * C5409;
    const double C50043 = C49863 * C50040;
    const double C2323 =
        (3 * (C49929 + C49975 * C50064) +
         C50057 * (2 * C50057 * C49975 + C50057 * (C49975 + C50040 * C50064))) /
        C49758;
    const double C2569 =
        (C49929 + C49975 * C50064 + (C49975 + C50040 * C50064) * C50098) /
        C49758;
    const double C3095 =
        (C50091 * (2 * C50057 * C49975 + C50057 * (C49975 + C50040 * C50064))) /
        C49758;
    const double C5408 =
        (3 * (C49929 + C49975 * C50098) +
         C50091 * (2 * C50091 * C49975 + C50091 * (C49975 + C50040 * C50098))) /
        C49758;
    const double C50042 = C49863 * C50039;
    const double C2322 =
        (3 * (C49928 + C49974 * C50064) +
         C50057 * (2 * C50057 * C49974 + C50057 * (C49974 + C50039 * C50064))) /
        C49758;
    const double C2568 =
        (C49928 + C49974 * C50064 + (C49974 + C50039 * C50064) * C50098) /
        C49758;
    const double C3094 =
        (C50091 * (2 * C50057 * C49974 + C50057 * (C49974 + C50039 * C50064))) /
        C49758;
    const double C5407 =
        (3 * (C49928 + C49974 * C50098) +
         C50091 * (2 * C50091 * C49974 + C50091 * (C49974 + C50039 * C50098))) /
        C49758;
    const double C50041 = C50011 + C50038;
    const double C50089 = C50088 + C50087;
    const double C50175 = C50173 + C50174;
    const double C1445 =
        (2 * (ae * C50091 * C50082 + be * C50091 * C50083 + C49863 * C50186) +
         ae * C50091 * (C49974 + C50039 * C50064) +
         be * C50091 * (C49975 + C50040 * C50064) +
         C49863 *
             (C50186 + ae * C50091 * (C49964 + C50025 * C50064) +
              be * C50091 * (C49966 + C50027 * C50064) +
              C49863 * (ae * C50091 * (C49952 + C50013 * C50064) +
                        be * C50091 * (C49955 + C50016 * C50064) +
                        C49863 * C50091 *
                            (C50024 + (C49992 * C49993 +
                                       C49867 * bs[8] * std::pow(C49861, 8)) *
                                          C49760 * C50064)))) /
        C49762;
    const double C1446 =
        (C50091 * C50068 + ae * C50091 * (C49920 + C49964 * C50064) +
         be * C50091 * (C49921 + C49966 * C50064) +
         C49863 *
             (ae * C50091 * C50082 + be * C50091 * C50083 + C49863 * C50186)) /
        C49762;
    const double C4517 =
        (ae * (2 * C50091 * C50082 +
               C50091 * (C50082 + (C49952 + C50013 * C50064) * C50098)) +
         be * (2 * C50091 * C50083 +
               C50091 * (C50083 + (C49955 + C50016 * C50064) * C50098)) +
         C49863 * (2 * C50186 +
                   C50091 * (C50084 +
                             (C50024 + (C49992 * C49993 +
                                        C49867 * bs[8] * std::pow(C49861, 8)) *
                                           C49760 * C50064) *
                                 C50098))) /
        C49762;
    const double C23148 =
        (3 * (C50068 + C50084 * C50098) +
         C50091 * (2 * C50186 +
                   C50091 * (C50084 +
                             (C50024 + (C49992 * C49993 +
                                        C49867 * bs[8] * std::pow(C49861, 8)) *
                                           C49760 * C50064) *
                                 C50098))) /
        C49762;
    const double C3593 = C50561 * C2571;
    const double C22019 = C50556 * C2571;
    const double C26021 = C50561 * C2571;
    const double C23159 = C50556 * C4518;
    const double C50123 = C50122 + C50121;
    const double C50193 = C50191 + C50192;
    const double C50139 = C49863 * C50138;
    const double C50171 = C50170 + C50169;
    const double C1098 =
        (2 * (ae * (C50070 + C50127 * C50098) +
              be * (C50071 + C50128 * C50098) + C49863 * C50181) +
         ae * (C50057 * C49974 + C50057 * C50039 * C50098) +
         be * (C50057 * C49975 + C50057 * C50040 * C50098) +
         C49863 * (C50181 + ae * (C50125 + C50057 * C50025 * C50098) +
                   be * (C50126 + C50057 * C50027 * C50098) +
                   C49863 * (ae * (C50127 + C50057 * C50013 * C50098) +
                             be * (C50128 + C50057 * C50016 * C50098) +
                             C49863 * (C50129 + C50057 *
                                                    (C49992 * C49993 +
                                                     C49867 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49760 * C50098)))) /
        C49762;
    const double C1099 =
        (C50058 + C50072 * C50098 + ae * (C50057 * C49920 + C50125 * C50098) +
         be * (C50057 * C49921 + C50126 * C50098) +
         C49863 * (ae * (C50070 + C50127 * C50098) +
                   be * (C50071 + C50128 * C50098) + C49863 * C50181)) /
        C49762;
    const double C4519 =
        (ae * (2 * C50091 * C50070 + C50091 * (C50070 + C50127 * C50098)) +
         be * (2 * C50091 * C50071 + C50091 * (C50071 + C50128 * C50098)) +
         C49863 * (2 * C50162 + C50091 * C50181)) /
        C49762;
    const double C6015 =
        (2 * C50162 + C50091 * C50181 +
         ae * (2 * C50091 * C50125 +
               C50091 * (C50125 + C50057 * C50025 * C50098)) +
         be * (2 * C50091 * C50126 +
               C50091 * (C50126 + C50057 * C50027 * C50098)) +
         C49863 *
             (ae * (2 * C50164 + C50091 * (C50127 + C50057 * C50013 * C50098)) +
              be * (2 * C50165 + C50091 * (C50128 + C50057 * C50016 * C50098)) +
              C49863 * (2 * C50166 +
                        C50091 * (C50129 +
                                  C50057 *
                                      (C49992 * C49993 +
                                       C49867 * bs[8] * std::pow(C49861, 8)) *
                                      C49760 * C50098)))) /
        C49762;
    const double C6426 =
        (ae * (3 * (C50070 + C50127 * C50098) +
               C50091 * (2 * C50164 +
                         C50091 * (C50127 + C50057 * C50013 * C50098))) +
         be * (3 * (C50071 + C50128 * C50098) +
               C50091 * (2 * C50165 +
                         C50091 * (C50128 + C50057 * C50016 * C50098))) +
         C49863 * (3 * C50181 +
                   C50091 * (2 * C50166 +
                             C50091 * (C50129 + C50057 *
                                                    (C49992 * C49993 +
                                                     C49867 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49760 * C50098)))) /
        C49762;
    const double C6427 = (3 * (C50058 + C50072 * C50098) +
                          C50091 * (2 * C50162 + C50091 * C50181)) /
                         C49762;
    const double C24048 =
        (4 * (2 * C50162 + C50091 * C50181) +
         C50091 * (3 * C50181 +
                   C50091 * (2 * C50166 +
                             C50091 * (C50129 + C50057 *
                                                    (C49992 * C49993 +
                                                     C49867 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49760 * C50098)))) /
        C49762;
    const double C50156 = C49863 * C50155;
    const double C131 = 5 * (3 * C49913 + C49863 * C49965) +
                        C49863 * (4 * C49965 + C49863 * C50036);
    const double C265 = 3 * C49913 + C49863 * C49965 + C50036 * C50064;
    const double C406 = 3 * C49913 + C49863 * C49965 + C50036 * C50098;
    const double C540 = C50057 * (4 * C49965 + C49863 * C50036);
    const double C644 = C50091 * (4 * C49965 + C49863 * C50036);
    const double C782 = C50091 * C50057 * C50036;
    const double C49783 = C49782 / C49758;
    const double C49794 = C49756 * C49793;
    const double C124 = (-C49793 / C49758) / (4 * C49787);
    const double C2168 = (-C49793 / C49758) / C49763;
    const double C7936 = (-C49793 / C49758) / (4 * C49762);
    const double C17053 = (-C49793 / C49758) / (4 * C49762);
    const double C19866 = -C49793 / C49758;
    const double C24648 = (-C49793 / C49758) / C49763;
    const double C2370 = C2165 * C981;
    const double C2368 = C2165 * C980;
    const double C2362 = C2165 * C277;
    const double C2360 = C2165 * C276;
    const double C2354 = C2165 * C271;
    const double C2352 = C2165 * C270;
    const double C2350 = C2165 * C983;
    const double C2348 = C2165 * C982;
    const double C2338 = C2165 * C275;
    const double C2336 = C2165 * C274;
    const double C2330 = C2165 * C273;
    const double C2328 = C2165 * C272;
    const double C2722 = C2165 * C269;
    const double C2720 = C2165 * C268;
    const double C3126 = C2165 * C1442;
    const double C3124 = C2165 * C1441;
    const double C3118 = C2165 * C786;
    const double C3116 = C2165 * C785;
    const double C3114 = C2165 * C784;
    const double C3112 = C2165 * C783;
    const double C3106 = C2165 * C1444;
    const double C3104 = C2165 * C1443;
    const double C3411 = C2165 * C2319;
    const double C3409 = C2165 * C2318;
    const double C3588 = C2165 * C2565;
    const double C3586 = C2165 * C2564;
    const double C3580 = C2165 * C1097;
    const double C3578 = C2165 * C1096;
    const double C4103 = C2165 * C3091;
    const double C4101 = C2165 * C3090;
    const double C5455 = C2165 * C1726;
    const double C5453 = C2165 * C1725;
    const double C5447 = C2165 * C418;
    const double C5445 = C2165 * C417;
    const double C5439 = C2165 * C412;
    const double C5437 = C2165 * C411;
    const double C5435 = C2165 * C1728;
    const double C5433 = C2165 * C1727;
    const double C5423 = C2165 * C416;
    const double C5421 = C2165 * C415;
    const double C5415 = C2165 * C414;
    const double C5413 = C2165 * C413;
    const double C5793 = C2165 * C410;
    const double C5791 = C2165 * C409;
    const double C6019 = C2165 * C1095;
    const double C6017 = C2165 * C1094;
    const double C6431 = C2165 * C4516;
    const double C6429 = C2165 * C4515;
    const double C7331 = C2165 * C5404;
    const double C7329 = C2165 * C5403;
    const double C2726 = C2167 * C267;
    const double C8118 = C7935 * C267;
    const double C17235 = C17052 * C267;
    const double C25182 = C49777 * C267;
    const double C2366 = C2167 * C279;
    const double C2730 = C2165 * C279;
    const double C8098 = C7935 * C279;
    const double C17215 = C17052 * C279;
    const double C20232 = C19865 * C279;
    const double C24834 = C49777 * C279;
    const double C5797 = C2167 * C408;
    const double C11104 = C7935 * C408;
    const double C28408 = C49777 * C408;
    const double C34134 = C17052 * C408;
    const double C5451 = C2167 * C420;
    const double C5801 = C2165 * C420;
    const double C11084 = C7935 * C420;
    const double C22545 = C19865 * C420;
    const double C27960 = C49777 * C420;
    const double C34114 = C17052 * C420;
    const double C3122 = C2167 * C788;
    const double C8823 = C7935 * C788;
    const double C14148 = C2165 * C788;
    const double C17940 = C17052 * C788;
    const double C22379 = C19865 * C788;
    const double C25566 = C49777 * C788;
    const double C2727 = C50561 * C286;
    const double C8119 = C7928 * C286;
    const double C8467 = C50872 * C286;
    const double C17236 = C17045 * C286;
    const double C17584 = C17044 * C286;
    const double C25183 = C50561 * C286;
    const double C5798 = C50561 * C427;
    const double C11105 = C7928 * C427;
    const double C11453 = C50872 * C427;
    const double C28409 = C50561 * C427;
    const double C34135 = C17045 * C427;
    const double C34483 = C17044 * C427;
    const double C2724 = C2167 * C266;
    const double C8116 = C7935 * C266;
    const double C17233 = C17052 * C266;
    const double C25180 = C49777 * C266;
    const double C2364 = C2167 * C278;
    const double C2728 = C2165 * C278;
    const double C8096 = C7935 * C278;
    const double C17213 = C17052 * C278;
    const double C20230 = C19865 * C278;
    const double C24832 = C49777 * C278;
    const double C5795 = C2167 * C407;
    const double C11102 = C7935 * C407;
    const double C28406 = C49777 * C407;
    const double C34132 = C17052 * C407;
    const double C5449 = C2167 * C419;
    const double C5799 = C2165 * C419;
    const double C11082 = C7935 * C419;
    const double C22543 = C19865 * C419;
    const double C27958 = C49777 * C419;
    const double C34112 = C17052 * C419;
    const double C3120 = C2167 * C787;
    const double C8821 = C7935 * C787;
    const double C14146 = C2165 * C787;
    const double C17938 = C17052 * C787;
    const double C22377 = C19865 * C787;
    const double C25564 = C49777 * C787;
    const double C49980 = C49940 + C49978;
    const double C6014 =
        (2 * C50091 * C50390 + C50091 * (C50390 + C50057 * C50040 * C50098)) /
        C49758;
    const double C2374 = C2167 * C979;
    const double C9117 = C7935 * C979;
    const double C18234 = C17052 * C979;
    const double C20236 = C19865 * C979;
    const double C24842 = C49777 * C979;
    const double C6023 = C2167 * C1093;
    const double C9284 = C7935 * C1093;
    const double C18401 = C17052 * C1093;
    const double C22383 = C19865 * C1093;
    const double C27968 = C49777 * C1093;
    const double C3130 = C2167 * C1440;
    const double C9791 = C7935 * C1440;
    const double C18908 = C17052 * C1440;
    const double C25574 = C49777 * C1440;
    const double C31592 = C19865 * C1440;
    const double C5459 = C2167 * C1724;
    const double C12937 = C7935 * C1724;
    const double C35967 = C17052 * C1724;
    const double C39599 = C19865 * C1724;
    const double C44813 = C49777 * C1724;
    const double C49979 = C49938 + C49977;
    const double C50000 = C49984 + C49985;
    const double C2735 = C50561 * C293;
    const double C8131 = C7928 * C293;
    const double C17248 = C17045 * C293;
    const double C25191 = C50561 * C293;
    const double C5806 = C50561 * C434;
    const double C11117 = C7928 * C434;
    const double C34147 = C17045 * C434;
    const double C45121 = C50561 * C434;
    const double C8844 = C7928 * C796;
    const double C14153 = C50561 * C796;
    const double C17961 = C17045 * C796;
    const double C28201 = C50561 * C796;
    const double C6013 =
        (2 * C50091 * C50388 + C50091 * (C50388 + C50057 * C50039 * C50098)) /
        C49758;
    const double C2372 = C2167 * C978;
    const double C9115 = C7935 * C978;
    const double C18232 = C17052 * C978;
    const double C20234 = C19865 * C978;
    const double C24840 = C49777 * C978;
    const double C6021 = C2167 * C1092;
    const double C9282 = C7935 * C1092;
    const double C18399 = C17052 * C1092;
    const double C22381 = C19865 * C1092;
    const double C27966 = C49777 * C1092;
    const double C3128 = C2167 * C1439;
    const double C9789 = C7935 * C1439;
    const double C18906 = C17052 * C1439;
    const double C25572 = C49777 * C1439;
    const double C31590 = C19865 * C1439;
    const double C5457 = C2167 * C1723;
    const double C12935 = C7935 * C1723;
    const double C35965 = C17052 * C1723;
    const double C39597 = C19865 * C1723;
    const double C44811 = C49777 * C1723;
    const double C50046 = C49999 + C50043;
    const double C50045 = C49995 + C50042;
    const double C50044 = C49863 * C50041;
    const double C984 =
        (2 * (ae * (2 * C50070 + C50057 * C50082) +
              be * (2 * C50071 + C50057 * C50083) + C49863 * C50175) +
         ae * (2 * C50057 * C49974 + C50057 * (C49974 + C50039 * C50064)) +
         be * (2 * C50057 * C49975 + C50057 * (C49975 + C50040 * C50064)) +
         C49863 *
             (C50175 + ae * (2 * C50125 + C50057 * (C49964 + C50025 * C50064)) +
              be * (2 * C50126 + C50057 * (C49966 + C50027 * C50064)) +
              C49863 *
                  (ae * (2 * C50127 + C50057 * (C49952 + C50013 * C50064)) +
                   be * (2 * C50128 + C50057 * (C49955 + C50016 * C50064)) +
                   C49863 * (2 * C50129 +
                             C50057 * (C50024 +
                                       (C49992 * C49993 +
                                        C49867 * bs[8] * std::pow(C49861, 8)) *
                                           C49760 * C50064))))) /
        C49762;
    const double C985 =
        (2 * C50058 + C50057 * C50068 +
         ae * (2 * C50057 * C49920 + C50057 * (C49920 + C49964 * C50064)) +
         be * (2 * C50057 * C49921 + C50057 * (C49921 + C49966 * C50064)) +
         C49863 * (ae * (2 * C50070 + C50057 * C50082) +
                   be * (2 * C50071 + C50057 * C50083) + C49863 * C50175)) /
        C49762;
    const double C2325 = (ae * (3 * (C49888 + C49911 * C50064) +
                                C50057 * (2 * C50070 + C50057 * C50082)) +
                          be * (3 * (C49889 + C49914 * C50064) +
                                C50057 * (2 * C50071 + C50057 * C50083)) +
                          C49863 * (3 * C50068 + C50057 * C50175)) /
                         C49762;
    const double C2326 =
        (3 * C50068 + C50057 * C50175 +
         ae * (3 * (C49920 + C49964 * C50064) +
               C50057 * (2 * C50125 + C50057 * (C49964 + C50025 * C50064))) +
         be * (3 * (C49921 + C49966 * C50064) +
               C50057 * (2 * C50126 + C50057 * (C49966 + C50027 * C50064))) +
         C49863 *
             (ae * (3 * C50082 +
                    C50057 *
                        (2 * C50127 + C50057 * (C49952 + C50013 * C50064))) +
              be * (3 * C50083 +
                    C50057 *
                        (2 * C50128 + C50057 * (C49955 + C50016 * C50064))) +
              C49863 * (3 * C50084 +
                        C50057 * (2 * C50129 +
                                  C50057 * (C50024 + (C49992 * C49993 +
                                                      C49867 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49760 * C50064))))) /
        C49762;
    const double C3097 = (ae * C50091 * (2 * C50070 + C50057 * C50082) +
                          be * C50091 * (2 * C50071 + C50057 * C50083) +
                          C49863 * C50091 * C50175) /
                         C49762;
    const double C3098 =
        (C50091 * C50175 +
         ae * C50091 * (2 * C50125 + C50057 * (C49964 + C50025 * C50064)) +
         be * C50091 * (2 * C50126 + C50057 * (C49966 + C50027 * C50064)) +
         C49863 *
             (ae * C50091 * (2 * C50127 + C50057 * (C49952 + C50013 * C50064)) +
              be * C50091 * (2 * C50128 + C50057 * (C49955 + C50016 * C50064)) +
              C49863 * C50091 *
                  (2 * C50129 +
                   C50057 * (C50024 + (C49992 * C49993 +
                                       C49867 * bs[8] * std::pow(C49861, 8)) *
                                          C49760 * C50064)))) /
        C49762;
    const double C3405 =
        (ae * (4 * (2 * C50070 + C50057 * C50082) +
               C50057 * (3 * C50082 +
                         C50057 * (2 * C50127 +
                                   C50057 * (C49952 + C50013 * C50064)))) +
         be * (4 * (2 * C50071 + C50057 * C50083) +
               C50057 * (3 * C50083 +
                         C50057 * (2 * C50128 +
                                   C50057 * (C49955 + C50016 * C50064)))) +
         C49863 *
             (4 * C50175 +
              C50057 * (3 * C50084 +
                        C50057 * (2 * C50129 +
                                  C50057 * (C50024 + (C49992 * C49993 +
                                                      C49867 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49760 * C50064))))) /
        C49762;
    const double C3406 = (4 * (2 * C50058 + C50057 * C50068) +
                          C50057 * (3 * C50068 + C50057 * C50175)) /
                         C49762;
    const double C3575 =
        (ae * (2 * C50070 + C50057 * C50082 +
               (2 * C50127 + C50057 * (C49952 + C50013 * C50064)) * C50098) +
         be * (2 * C50071 + C50057 * C50083 +
               (2 * C50128 + C50057 * (C49955 + C50016 * C50064)) * C50098) +
         C49863 * (C50175 +
                   (2 * C50129 +
                    C50057 * (C50024 + (C49992 * C49993 +
                                        C49867 * bs[8] * std::pow(C49861, 8)) *
                                           C49760 * C50064)) *
                       C50098)) /
        C49762;
    const double C3576 =
        (2 * C50058 + C50057 * C50068 + C50175 * C50098) / C49762;
    const double C4098 = (C50091 * (3 * C50068 + C50057 * C50175)) / C49762;
    const double C20692 =
        (5 * (3 * C50068 + C50057 * C50175) +
         C50057 *
             (4 * C50175 +
              C50057 * (3 * C50084 +
                        C50057 * (2 * C50129 +
                                  C50057 * (C50024 + (C49992 * C49993 +
                                                      C49867 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49760 * C50064))))) /
        C49762;
    const double C20802 =
        (3 * C50068 + C50057 * C50175 +
         (3 * C50084 +
          C50057 * (2 * C50129 +
                    C50057 * (C50024 + (C49992 * C49993 +
                                        C49867 * bs[8] * std::pow(C49861, 8)) *
                                           C49760 * C50064))) *
             C50098) /
        C49762;
    const double C21156 =
        (C50091 *
         (4 * C50175 +
          C50057 * (3 * C50084 +
                    C50057 * (2 * C50129 +
                              C50057 * (C50024 +
                                        (C49992 * C49993 +
                                         C49867 * bs[8] * std::pow(C49861, 8)) *
                                            C49760 * C50064))))) /
        C49762;
    const double C21430 =
        (2 * C50091 * C50175 +
         C50091 * (C50175 +
                   (2 * C50129 +
                    C50057 * (C50024 + (C49992 * C49993 +
                                        C49867 * bs[8] * std::pow(C49861, 8)) *
                                           C49760 * C50064)) *
                       C50098)) /
        C49762;
    const double C3131 = C50561 * C1446;
    const double C9792 = C7928 * C1446;
    const double C18909 = C17045 * C1446;
    const double C25575 = C50561 * C1446;
    const double C31593 = C50556 * C1446;
    const double C1729 =
        (2 * (ae * (2 * C50104 + C50091 * C50116) +
              be * (2 * C50105 + C50091 * C50117) + C49863 * C50193) +
         ae * (2 * C50091 * C49974 + C50091 * (C49974 + C50039 * C50098)) +
         be * (2 * C50091 * C49975 + C50091 * (C49975 + C50040 * C50098)) +
         C49863 *
             (C50193 + ae * (2 * C50142 + C50091 * (C49964 + C50025 * C50098)) +
              be * (2 * C50143 + C50091 * (C49966 + C50027 * C50098)) +
              C49863 *
                  (ae * (2 * C50144 + C50091 * (C49952 + C50013 * C50098)) +
                   be * (2 * C50145 + C50091 * (C49955 + C50016 * C50098)) +
                   C49863 * (2 * C50146 +
                             C50091 * (C50024 +
                                       (C49992 * C49993 +
                                        C49867 * bs[8] * std::pow(C49861, 8)) *
                                           C49760 * C50098))))) /
        C49762;
    const double C1730 =
        (2 * C50092 + C50091 * C50102 +
         ae * (2 * C50091 * C49920 + C50091 * (C49920 + C49964 * C50098)) +
         be * (2 * C50091 * C49921 + C50091 * (C49921 + C49966 * C50098)) +
         C49863 * (ae * (2 * C50104 + C50091 * C50116) +
                   be * (2 * C50105 + C50091 * C50117) + C49863 * C50193)) /
        C49762;
    const double C5410 = (ae * (3 * (C49888 + C49911 * C50098) +
                                C50091 * (2 * C50104 + C50091 * C50116)) +
                          be * (3 * (C49889 + C49914 * C50098) +
                                C50091 * (2 * C50105 + C50091 * C50117)) +
                          C49863 * (3 * C50102 + C50091 * C50193)) /
                         C49762;
    const double C5411 =
        (3 * C50102 + C50091 * C50193 +
         ae * (3 * (C49920 + C49964 * C50098) +
               C50091 * (2 * C50142 + C50091 * (C49964 + C50025 * C50098))) +
         be * (3 * (C49921 + C49966 * C50098) +
               C50091 * (2 * C50143 + C50091 * (C49966 + C50027 * C50098))) +
         C49863 *
             (ae * (3 * C50116 +
                    C50091 *
                        (2 * C50144 + C50091 * (C49952 + C50013 * C50098))) +
              be * (3 * C50117 +
                    C50091 *
                        (2 * C50145 + C50091 * (C49955 + C50016 * C50098))) +
              C49863 * (3 * C50118 +
                        C50091 * (2 * C50146 +
                                  C50091 * (C50024 + (C49992 * C49993 +
                                                      C49867 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49760 * C50098))))) /
        C49762;
    const double C7325 =
        (ae * (4 * (2 * C50104 + C50091 * C50116) +
               C50091 * (3 * C50116 +
                         C50091 * (2 * C50144 +
                                   C50091 * (C49952 + C50013 * C50098)))) +
         be * (4 * (2 * C50105 + C50091 * C50117) +
               C50091 * (3 * C50117 +
                         C50091 * (2 * C50145 +
                                   C50091 * (C49955 + C50016 * C50098)))) +
         C49863 *
             (4 * C50193 +
              C50091 * (3 * C50118 +
                        C50091 * (2 * C50146 +
                                  C50091 * (C50024 + (C49992 * C49993 +
                                                      C49867 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49760 * C50098))))) /
        C49762;
    const double C7326 = (4 * (2 * C50092 + C50091 * C50102) +
                          C50091 * (3 * C50102 + C50091 * C50193)) /
                         C49762;
    const double C40586 =
        (5 * (3 * C50102 + C50091 * C50193) +
         C50091 *
             (4 * C50193 +
              C50091 * (3 * C50118 +
                        C50091 * (2 * C50146 +
                                  C50091 * (C50024 + (C49992 * C49993 +
                                                      C49867 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49760 * C50098))))) /
        C49762;
    const double C50140 = C50137 + C50139;
    const double C6024 = C50561 * C1099;
    const double C9285 = C7928 * C1099;
    const double C18402 = C17045 * C1099;
    const double C22384 = C50556 * C1099;
    const double C27969 = C50561 * C1099;
    const double C6436 = C50561 * C4519;
    const double C22205 = C50556 * C4519;
    const double C29205 = C50561 * C4519;
    const double C23155 = C50556 * C6427;
    const double C50157 = C50154 + C50156;
    const double C49784 = C49783 - C49773;
    const double C49795 = C49794 / C49758;
    const double C2373 = C2168 * C973;
    const double C2365 = C2168 * C262;
    const double C2357 = C2168 * C257;
    const double C2345 = C2168 * C974;
    const double C2341 = C2168 * C261;
    const double C2333 = C2168 * C258;
    const double C2733 = C2168 * C263;
    const double C2725 = C2168 * C256;
    const double C3129 = C2168 * C1434;
    const double C3121 = C2168 * C780;
    const double C3109 = C2168 * C779;
    const double C3101 = C2168 * C1435;
    const double C3414 = C2168 * C2316;
    const double C3591 = C2168 * C2562;
    const double C3583 = C2168 * C1088;
    const double C4106 = C2168 * C3088;
    const double C5458 = C2168 * C1718;
    const double C5450 = C2168 * C403;
    const double C5442 = C2168 * C398;
    const double C5430 = C2168 * C1719;
    const double C5426 = C2168 * C402;
    const double C5418 = C2168 * C399;
    const double C5804 = C2168 * C404;
    const double C5796 = C2168 * C397;
    const double C6022 = C2168 * C1087;
    const double C6434 = C2168 * C4507;
    const double C7334 = C2168 * C5401;
    const double C14151 = C2168 * C781;
    const double C8129 = C7936 * C263;
    const double C8117 = C7936 * C256;
    const double C8097 = C7936 * C262;
    const double C8093 = C7936 * C257;
    const double C8469 = C7936 * C264;
    const double C8842 = C7936 * C781;
    const double C8822 = C7936 * C780;
    const double C9116 = C7936 * C973;
    const double C9283 = C7936 * C1087;
    const double C9790 = C7936 * C1434;
    const double C11115 = C7936 * C404;
    const double C11103 = C7936 * C397;
    const double C11083 = C7936 * C403;
    const double C11079 = C7936 * C398;
    const double C11455 = C7936 * C405;
    const double C12936 = C7936 * C1718;
    const double C17246 = C17053 * C263;
    const double C17234 = C17053 * C256;
    const double C17214 = C17053 * C262;
    const double C17210 = C17053 * C257;
    const double C17586 = C17053 * C264;
    const double C17959 = C17053 * C781;
    const double C17939 = C17053 * C780;
    const double C18233 = C17053 * C973;
    const double C18400 = C17053 * C1087;
    const double C18907 = C17053 * C1434;
    const double C34145 = C17053 * C404;
    const double C34133 = C17053 * C397;
    const double C34113 = C17053 * C403;
    const double C34109 = C17053 * C398;
    const double C34485 = C17053 * C405;
    const double C35966 = C17053 * C1718;
    const double C19995 = C19866 * C2316;
    const double C19991 = C19866 * C974;
    const double C19987 = C19866 * C261;
    const double C19983 = C19866 * C258;
    const double C19979 = C19866 * C2315;
    const double C19975 = C19866 * C975;
    const double C19971 = C19866 * C260;
    const double C19967 = C19866 * C259;
    const double C20235 = C19866 * C973;
    const double C20231 = C19866 * C262;
    const double C20227 = C19866 * C257;
    const double C20499 = C19866 * C3088;
    const double C20495 = C19866 * C1435;
    const double C20491 = C19866 * C779;
    const double C20487 = C19866 * C778;
    const double C20483 = C19866 * C1436;
    const double C20479 = C19866 * C3087;
    const double C20695 = C19866 * C3400;
    const double C20813 = C19866 * C3570;
    const double C20809 = C19866 * C2561;
    const double C20805 = C19866 * C1089;
    const double C21159 = C19866 * C4092;
    const double C22017 = C19866 * C2562;
    const double C22011 = C19866 * C1088;
    const double C22203 = C19866 * C4507;
    const double C22199 = C19866 * C1719;
    const double C22195 = C19866 * C402;
    const double C22191 = C19866 * C399;
    const double C22187 = C19866 * C1720;
    const double C22183 = C19866 * C4508;
    const double C22179 = C19866 * C401;
    const double C22175 = C19866 * C400;
    const double C22382 = C19866 * C1087;
    const double C22378 = C19866 * C780;
    const double C22544 = C19866 * C403;
    const double C22540 = C19866 * C398;
    const double C23157 = C19866 * C4506;
    const double C23153 = C19866 * C6421;
    const double C24051 = C19866 * C5400;
    const double C31591 = C19866 * C1434;
    const double C39395 = C19866 * C5401;
    const double C39598 = C19866 * C1718;
    const double C40589 = C19866 * C7320;
    const double C24841 = C24648 * C973;
    const double C24833 = C24648 * C262;
    const double C24825 = C24648 * C257;
    const double C24813 = C24648 * C974;
    const double C24809 = C24648 * C261;
    const double C24801 = C24648 * C258;
    const double C25189 = C24648 * C263;
    const double C25181 = C24648 * C256;
    const double C25573 = C24648 * C1434;
    const double C25565 = C24648 * C780;
    const double C25553 = C24648 * C779;
    const double C25545 = C24648 * C1435;
    const double C25850 = C24648 * C2316;
    const double C26019 = C24648 * C2562;
    const double C26011 = C24648 * C1088;
    const double C26526 = C24648 * C3088;
    const double C27967 = C24648 * C1087;
    const double C27959 = C24648 * C403;
    const double C27951 = C24648 * C398;
    const double C27939 = C24648 * C402;
    const double C27935 = C24648 * C399;
    const double C28199 = C24648 * C781;
    const double C28407 = C24648 * C397;
    const double C29203 = C24648 * C4507;
    const double C30382 = C24648 * C1719;
    const double C44812 = C24648 * C1718;
    const double C45119 = C24648 * C404;
    const double C46594 = C24648 * C5401;
    const double C49982 = C49980 + C49962;
    const double C49981 = C49979 + C49959;
    const double C50010 = C50000 + C49986;
    const double C50049 = C50046 + C50023;
    const double C50048 = C50045 + C50020;
    const double C2375 = C50561 * C985;
    const double C9118 = C7928 * C985;
    const double C18235 = C17045 * C985;
    const double C20237 = C50556 * C985;
    const double C24843 = C50561 * C985;
    const double C3416 = C50561 * C2325;
    const double C19997 = C50556 * C2325;
    const double C25852 = C50561 * C2325;
    const double C4108 = C50561 * C3097;
    const double C20501 = C50556 * C3097;
    const double C26528 = C50561 * C3097;
    const double C20697 = C50556 * C3406;
    const double C20815 = C50556 * C3576;
    const double C21161 = C50556 * C4098;
    const double C5460 = C50561 * C1730;
    const double C12938 = C7928 * C1730;
    const double C35968 = C17045 * C1730;
    const double C39600 = C50556 * C1730;
    const double C44814 = C50561 * C1730;
    const double C7336 = C50561 * C5410;
    const double C39397 = C50556 * C5410;
    const double C46596 = C50561 * C5410;
    const double C40591 = C50556 * C7326;
    const double C24838 = C49784 * C981;
    const double C24836 = C49784 * C980;
    const double C24830 = C49784 * C277;
    const double C24828 = C49784 * C276;
    const double C24822 = C49784 * C271;
    const double C24820 = C49784 * C270;
    const double C24818 = C49784 * C983;
    const double C24816 = C49784 * C982;
    const double C24806 = C49784 * C275;
    const double C24804 = C49784 * C274;
    const double C24798 = C49784 * C273;
    const double C24796 = C49784 * C272;
    const double C25186 = C49784 * C279;
    const double C25184 = C49784 * C278;
    const double C25178 = C49784 * C269;
    const double C25176 = C49784 * C268;
    const double C25570 = C49784 * C1442;
    const double C25568 = C49784 * C1441;
    const double C25562 = C49784 * C786;
    const double C25560 = C49784 * C785;
    const double C25558 = C49784 * C784;
    const double C25556 = C49784 * C783;
    const double C25550 = C49784 * C1444;
    const double C25548 = C49784 * C1443;
    const double C25847 = C49784 * C2319;
    const double C25845 = C49784 * C2318;
    const double C26016 = C49784 * C2565;
    const double C26014 = C49784 * C2564;
    const double C26008 = C49784 * C1097;
    const double C26006 = C49784 * C1096;
    const double C26523 = C49784 * C3091;
    const double C26521 = C49784 * C3090;
    const double C27964 = C49784 * C1095;
    const double C27962 = C49784 * C1094;
    const double C27956 = C49784 * C418;
    const double C27954 = C49784 * C417;
    const double C27948 = C49784 * C412;
    const double C27946 = C49784 * C411;
    const double C27944 = C49784 * C416;
    const double C27942 = C49784 * C415;
    const double C27932 = C49784 * C414;
    const double C27930 = C49784 * C413;
    const double C28196 = C49784 * C788;
    const double C28194 = C49784 * C787;
    const double C28404 = C49784 * C410;
    const double C28402 = C49784 * C409;
    const double C29200 = C49784 * C4516;
    const double C29198 = C49784 * C4515;
    const double C30379 = C49784 * C1728;
    const double C30377 = C49784 * C1727;
    const double C44809 = C49784 * C1726;
    const double C44807 = C49784 * C1725;
    const double C45116 = C49784 * C420;
    const double C45114 = C49784 * C419;
    const double C46591 = C49784 * C5404;
    const double C46589 = C49784 * C5403;
    const double C117 =
        ((((0 - (C49756 * C49757) / C49758) * ae) / C49758 - (0 * be) / C49767 +
          C49759 / C49758) /
             C49763 -
         ((C49756 * C49780 + 0) * be) / C49758) /
            C49763 +
        ((C49756 * (C49780 / C49763 -
                    ((C49756 * C49784 + C50815) * be) / C49758 + C49777) +
          C50871) *
         ae) /
            C49758 +
        C49784 / C49763 - ((C49756 * C49777 + C50561) * be) / C49758;
    const double C119 =
        (C49780 / C49763 - ((C49756 * C49784 + C50815) * be) / C49758 +
         C49777) /
            C49763 +
        ((C49756 *
              (C49784 / C49763 - ((C49756 * C49777 + C50561) * be) / C49758) +
          C50872) *
         ae) /
            C49758 +
        2 * (C49777 / C49763 - (0 * be) / C49758);
    const double C121 =
        (C49784 / C49763 - ((C49756 * C49777 + C50561) * be) / C49758) /
            C49763 +
        ((C49756 * (C49777 / C49763 - (0 * be) / C49758) + C7928) * ae) /
            C49758;
    const double C7931 =
        C49780 / C49763 - ((C49756 * C49784 + C50815) * be) / C49758 + C49777;
    const double C7933 =
        C49784 / C49763 - ((C49756 * C49777 + C50561) * be) / C49758;
    const double C17048 =
        C49780 / C49763 + ((C49756 * C49784 + C50815) * ae) / C49758 + C49777;
    const double C17050 =
        C49784 / C49763 + ((C49756 * C49777 + C50561) * ae) / C49758;
    const double C49796 = C49792 - C49795;
    const double C2387 = C2372 - C2373;
    const double C2385 = C2364 - C2365;
    const double C2383 = C2356 - C2357;
    const double C2380 = C2344 - C2345;
    const double C2379 = C2340 - C2341;
    const double C2377 = C2332 - C2333;
    const double C2737 = C2724 - C2725;
    const double C3139 = C3128 - C3129;
    const double C3137 = C3120 - C3121;
    const double C3134 = C3108 - C3109;
    const double C3132 = C3100 - C3101;
    const double C3419 = C3413 - C3414;
    const double C3597 = C3590 - C3591;
    const double C3595 = C3582 - C3583;
    const double C4111 = C4105 - C4106;
    const double C5472 = C5457 - C5458;
    const double C5470 = C5449 - C5450;
    const double C5468 = C5441 - C5442;
    const double C5465 = C5429 - C5430;
    const double C5464 = C5425 - C5426;
    const double C5462 = C5417 - C5418;
    const double C5808 = C5795 - C5796;
    const double C6026 = C6021 - C6022;
    const double C6439 = C6433 - C6434;
    const double C7338 = C7333 - C7334;
    const double C8140 = C8116 - C8117;
    const double C8135 = C8096 - C8097;
    const double C8134 = C8092 - C8093;
    const double C8845 = C8821 - C8822;
    const double C9121 = C9115 - C9116;
    const double C9288 = C9282 - C9283;
    const double C9795 = C9789 - C9790;
    const double C11126 = C11102 - C11103;
    const double C11121 = C11082 - C11083;
    const double C11120 = C11078 - C11079;
    const double C12941 = C12935 - C12936;
    const double C17257 = C17233 - C17234;
    const double C17252 = C17213 - C17214;
    const double C17251 = C17209 - C17210;
    const double C17962 = C17938 - C17939;
    const double C18238 = C18232 - C18233;
    const double C18405 = C18399 - C18400;
    const double C18912 = C18906 - C18907;
    const double C34156 = C34132 - C34133;
    const double C34151 = C34112 - C34113;
    const double C34150 = C34108 - C34109;
    const double C35971 = C35965 - C35966;
    const double C20005 = C19994 - C19995;
    const double C20004 = C19990 - C19991;
    const double C20003 = C19986 - C19987;
    const double C20002 = C19982 - C19983;
    const double C20001 = C19978 - C19979;
    const double C20000 = C19974 - C19975;
    const double C19999 = C19970 - C19971;
    const double C19998 = C19966 - C19967;
    const double C20240 = C20234 - C20235;
    const double C20239 = C20230 - C20231;
    const double C20238 = C20226 - C20227;
    const double C20507 = C20498 - C20499;
    const double C20506 = C20494 - C20495;
    const double C20505 = C20490 - C20491;
    const double C20504 = C20486 - C20487;
    const double C20503 = C20482 - C20483;
    const double C20502 = C20478 - C20479;
    const double C20698 = C20694 - C20695;
    const double C20818 = C20812 - C20813;
    const double C20817 = C20808 - C20809;
    const double C20816 = C20804 - C20805;
    const double C21162 = C21158 - C21159;
    const double C22021 = C22016 - C22017;
    const double C22020 = C22010 - C22011;
    const double C22213 = C22202 - C22203;
    const double C22212 = C22198 - C22199;
    const double C22211 = C22194 - C22195;
    const double C22210 = C22190 - C22191;
    const double C22209 = C22186 - C22187;
    const double C22208 = C22182 - C22183;
    const double C22207 = C22178 - C22179;
    const double C22206 = C22174 - C22175;
    const double C22386 = C22381 - C22382;
    const double C22385 = C22377 - C22378;
    const double C22548 = C22543 - C22544;
    const double C22547 = C22539 - C22540;
    const double C23161 = C23156 - C23157;
    const double C23160 = C23152 - C23153;
    const double C24054 = C24050 - C24051;
    const double C31594 = C31590 - C31591;
    const double C39398 = C39394 - C39395;
    const double C39601 = C39597 - C39598;
    const double C40592 = C40588 - C40589;
    const double C24855 = C24840 - C24841;
    const double C24853 = C24832 - C24833;
    const double C24851 = C24824 - C24825;
    const double C24848 = C24812 - C24813;
    const double C24847 = C24808 - C24809;
    const double C24845 = C24800 - C24801;
    const double C25193 = C25180 - C25181;
    const double C25583 = C25572 - C25573;
    const double C25581 = C25564 - C25565;
    const double C25578 = C25552 - C25553;
    const double C25576 = C25544 - C25545;
    const double C25855 = C25849 - C25850;
    const double C26025 = C26018 - C26019;
    const double C26023 = C26010 - C26011;
    const double C26531 = C26525 - C26526;
    const double C27979 = C27966 - C27967;
    const double C27977 = C27958 - C27959;
    const double C27975 = C27950 - C27951;
    const double C27972 = C27938 - C27939;
    const double C27971 = C27934 - C27935;
    const double C28411 = C28406 - C28407;
    const double C29207 = C29202 - C29203;
    const double C30386 = C30381 - C30382;
    const double C44817 = C44811 - C44812;
    const double C46598 = C46593 - C46594;
    const double C143 = (4 * (2 * C49895 + C49863 * C49929 + C49913 * ae) +
                         C49863 * (3 * C49929 + C49863 * C49982 + C49965 * ae) +
                         (3 * C49913 + C49863 * C49965) * ae) /
                        C49758;
    const double C281 =
        (2 * C49895 + C49863 * C49929 + C49913 * ae + C49982 * C50064) / C49758;
    const double C283 =
        (C50057 * (3 * C49929 + C49863 * C49982 + C49965 * ae)) / C49758;
    const double C422 =
        (2 * C49895 + C49863 * C49929 + C49913 * ae + C49982 * C50098) / C49758;
    const double C424 =
        (C50091 * (3 * C49929 + C49863 * C49982 + C49965 * ae)) / C49758;
    const double C790 = (C50091 * C50057 * C49982) / C49758;
    const double C151 =
        (4 * (2 * C49925 + ae * C49928 + be * C49929 + C49863 * C49976) +
         ae * (3 * C49928 + C49863 * C49981 + C49965 * be) +
         be * (3 * C49929 + C49863 * C49982 + C49965 * ae) +
         C49863 * (3 * C49976 + ae * C49981 + be * C49982 +
                   C49863 * (2 * C49970 + ae * C49974 + be * C49975 +
                             C49863 * (C49963 + ae * C49964 + be * C49966 +
                                       C49863 * (ae * C49952 + be * C49955 +
                                                 C49863 *
                                                     (C49936 * C49937 +
                                                      C49867 * bs[7] *
                                                          std::pow(C49869, 7)) *
                                                     C49760))))) /
        C49762;
    const double C294 =
        (3 * (C50058 + ae * C50057 * C49920 + be * C50057 * C49921 +
              C49863 * C50077) +
         ae * C50057 * C49981 + be * C50057 * C49982 +
         C49863 *
             (2 * C50077 + ae * C50057 * C49974 + be * C50057 * C49975 +
              C49863 * (C50072 + ae * C50057 * C49964 + be * C50057 * C49966 +
                        C49863 * (ae * C50057 * C49952 + be * C50057 * C49955 +
                                  C49863 * C50057 * C50024)))) /
        C49762;
    const double C435 =
        (3 * (C50092 + ae * C50091 * C49920 + be * C50091 * C49921 +
              C49863 * C50111) +
         ae * C50091 * C49981 + be * C50091 * C49982 +
         C49863 *
             (2 * C50111 + ae * C50091 * C49974 + be * C50091 * C49975 +
              C49863 * (C50106 + ae * C50091 * C49964 + be * C50091 * C49966 +
                        C49863 * (ae * C50091 * C49952 + be * C50091 * C49955 +
                                  C49863 * C50091 * C50024)))) /
        C49762;
    const double C142 = (4 * (2 * C49894 + C49863 * C49928 + C49913 * be) +
                         C49863 * (3 * C49928 + C49863 * C49981 + C49965 * be) +
                         (3 * C49913 + C49863 * C49965) * be) /
                        C49758;
    const double C280 =
        (2 * C49894 + C49863 * C49928 + C49913 * be + C49981 * C50064) / C49758;
    const double C282 =
        (C50057 * (3 * C49928 + C49863 * C49981 + C49965 * be)) / C49758;
    const double C421 =
        (2 * C49894 + C49863 * C49928 + C49913 * be + C49981 * C50098) / C49758;
    const double C423 =
        (C50091 * (3 * C49928 + C49863 * C49981 + C49965 * be)) / C49758;
    const double C789 = (C50091 * C50057 * C49981) / C49758;
    const double C50047 = C50010 + C50044;
    const double C50051 = C49863 * C50049;
    const double C977 =
        (2 * C50057 * C49982 + C50057 * (C49982 + C50049 * C50064)) / C49758;
    const double C1091 = (C50057 * C49982 + C50057 * C50049 * C50098) / C49758;
    const double C1438 = (C50091 * (C49982 + C50049 * C50064)) / C49758;
    const double C1722 =
        (2 * C50091 * C49982 + C50091 * (C49982 + C50049 * C50098)) / C49758;
    const double C50050 = C49863 * C50048;
    const double C295 =
        (3 * (C50068 + ae * (C49920 + C49964 * C50064) +
              be * (C49921 + C49966 * C50064) + C49863 * C50089) +
         ae * (C49981 + C50048 * C50064) + be * (C49982 + C50049 * C50064) +
         C49863 *
             (2 * C50089 + ae * (C49974 + C50039 * C50064) +
              be * (C49975 + C50040 * C50064) +
              C49863 * (C50084 + ae * (C49964 + C50025 * C50064) +
                        be * (C49966 + C50027 * C50064) +
                        C49863 * (ae * (C49952 + C50013 * C50064) +
                                  be * (C49955 + C50016 * C50064) +
                                  C49863 * (C50024 + (C49992 * C49993 +
                                                      C49867 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49760 * C50064))))) /
        C49762;
    const double C436 =
        (3 * (C50102 + ae * (C49920 + C49964 * C50098) +
              be * (C49921 + C49966 * C50098) + C49863 * C50123) +
         ae * (C49981 + C50048 * C50098) + be * (C49982 + C50049 * C50098) +
         C49863 *
             (2 * C50123 + ae * (C49974 + C50039 * C50098) +
              be * (C49975 + C50040 * C50098) +
              C49863 * (C50118 + ae * (C49964 + C50025 * C50098) +
                        be * (C49966 + C50027 * C50098) +
                        C49863 * (ae * (C49952 + C50013 * C50098) +
                                  be * (C49955 + C50016 * C50098) +
                                  C49863 * (C50024 + (C49992 * C49993 +
                                                      C49867 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49760 * C50098))))) /
        C49762;
    const double C797 =
        (3 * (C50162 + ae * C50091 * C50125 + be * C50091 * C50126 +
              C49863 * C50171) +
         ae * C50091 * C50057 * C50048 + be * C50091 * C50057 * C50049 +
         C49863 *
             (2 * C50171 + ae * C50091 * C50057 * C50039 +
              be * C50091 * C50057 * C50040 +
              C49863 * (C50166 + ae * C50091 * C50057 * C50025 +
                        be * C50091 * C50057 * C50027 +
                        C49863 * (ae * C50091 * C50057 * C50013 +
                                  be * C50091 * C50057 * C50016 +
                                  C49863 * C50091 * C50057 *
                                      (C49992 * C49993 +
                                       C49867 * bs[8] * std::pow(C49861, 8)) *
                                      C49760)))) /
        C49762;
    const double C976 =
        (2 * C50057 * C49981 + C50057 * (C49981 + C50048 * C50064)) / C49758;
    const double C1090 = (C50057 * C49981 + C50057 * C50048 * C50098) / C49758;
    const double C1437 = (C50091 * (C49981 + C50048 * C50064)) / C49758;
    const double C1721 =
        (2 * C50091 * C49981 + C50091 * (C49981 + C50048 * C50098)) / C49758;
    const double C8122 = C7931 * C277;
    const double C8120 = C7931 * C276;
    const double C8110 = C7931 * C271;
    const double C8108 = C7931 * C270;
    const double C8106 = C7931 * C275;
    const double C8104 = C7931 * C274;
    const double C8086 = C7931 * C273;
    const double C8084 = C7931 * C272;
    const double C8462 = C7931 * C269;
    const double C8460 = C7931 * C268;
    const double C8835 = C7931 * C786;
    const double C8833 = C7931 * C785;
    const double C8831 = C7931 * C784;
    const double C8829 = C7931 * C783;
    const double C9109 = C7931 * C983;
    const double C9107 = C7931 * C982;
    const double C9276 = C7931 * C1097;
    const double C9274 = C7931 * C1096;
    const double C9783 = C7931 * C1444;
    const double C9781 = C7931 * C1443;
    const double C11108 = C7931 * C418;
    const double C11106 = C7931 * C417;
    const double C11096 = C7931 * C412;
    const double C11094 = C7931 * C411;
    const double C11092 = C7931 * C416;
    const double C11090 = C7931 * C415;
    const double C11072 = C7931 * C414;
    const double C11070 = C7931 * C413;
    const double C11448 = C7931 * C410;
    const double C11446 = C7931 * C409;
    const double C12929 = C7931 * C1728;
    const double C12927 = C7931 * C1727;
    const double C8126 = C7933 * C279;
    const double C8124 = C7933 * C278;
    const double C8114 = C7933 * C269;
    const double C8112 = C7933 * C268;
    const double C8102 = C7933 * C277;
    const double C8100 = C7933 * C276;
    const double C8090 = C7933 * C271;
    const double C8088 = C7933 * C270;
    const double C8466 = C7933 * C267;
    const double C8464 = C7933 * C266;
    const double C8839 = C7933 * C788;
    const double C8837 = C7933 * C787;
    const double C8827 = C7933 * C786;
    const double C8825 = C7933 * C785;
    const double C9113 = C7933 * C981;
    const double C9111 = C7933 * C980;
    const double C9280 = C7933 * C1095;
    const double C9278 = C7933 * C1094;
    const double C9787 = C7933 * C1442;
    const double C9785 = C7933 * C1441;
    const double C11112 = C7933 * C420;
    const double C11110 = C7933 * C419;
    const double C11100 = C7933 * C410;
    const double C11098 = C7933 * C409;
    const double C11088 = C7933 * C418;
    const double C11086 = C7933 * C417;
    const double C11076 = C7933 * C412;
    const double C11074 = C7933 * C411;
    const double C11452 = C7933 * C408;
    const double C11450 = C7933 * C407;
    const double C12933 = C7933 * C1726;
    const double C12931 = C7933 * C1725;
    const double C17239 = C17048 * C277;
    const double C17237 = C17048 * C276;
    const double C17227 = C17048 * C271;
    const double C17225 = C17048 * C270;
    const double C17223 = C17048 * C275;
    const double C17221 = C17048 * C274;
    const double C17203 = C17048 * C273;
    const double C17201 = C17048 * C272;
    const double C17579 = C17048 * C269;
    const double C17577 = C17048 * C268;
    const double C17952 = C17048 * C786;
    const double C17950 = C17048 * C785;
    const double C17948 = C17048 * C784;
    const double C17946 = C17048 * C783;
    const double C18226 = C17048 * C983;
    const double C18224 = C17048 * C982;
    const double C18393 = C17048 * C1097;
    const double C18391 = C17048 * C1096;
    const double C18900 = C17048 * C1444;
    const double C18898 = C17048 * C1443;
    const double C34138 = C17048 * C418;
    const double C34136 = C17048 * C417;
    const double C34126 = C17048 * C412;
    const double C34124 = C17048 * C411;
    const double C34122 = C17048 * C416;
    const double C34120 = C17048 * C415;
    const double C34102 = C17048 * C414;
    const double C34100 = C17048 * C413;
    const double C34478 = C17048 * C410;
    const double C34476 = C17048 * C409;
    const double C35959 = C17048 * C1728;
    const double C35957 = C17048 * C1727;
    const double C17243 = C17050 * C279;
    const double C17241 = C17050 * C278;
    const double C17231 = C17050 * C269;
    const double C17229 = C17050 * C268;
    const double C17219 = C17050 * C277;
    const double C17217 = C17050 * C276;
    const double C17207 = C17050 * C271;
    const double C17205 = C17050 * C270;
    const double C17583 = C17050 * C267;
    const double C17581 = C17050 * C266;
    const double C17956 = C17050 * C788;
    const double C17954 = C17050 * C787;
    const double C17944 = C17050 * C786;
    const double C17942 = C17050 * C785;
    const double C18230 = C17050 * C981;
    const double C18228 = C17050 * C980;
    const double C18397 = C17050 * C1095;
    const double C18395 = C17050 * C1094;
    const double C18904 = C17050 * C1442;
    const double C18902 = C17050 * C1441;
    const double C34142 = C17050 * C420;
    const double C34140 = C17050 * C419;
    const double C34130 = C17050 * C410;
    const double C34128 = C17050 * C409;
    const double C34118 = C17050 * C418;
    const double C34116 = C17050 * C417;
    const double C34106 = C17050 * C412;
    const double C34104 = C17050 * C411;
    const double C34482 = C17050 * C408;
    const double C34480 = C17050 * C407;
    const double C35963 = C17050 * C1726;
    const double C35961 = C17050 * C1725;
    const double C49797 = C49796 * ae;
    const double C2166 = -(C49796 * be) / C49758;
    const double C2399 = C2387 - C2374;
    const double C2397 = C2385 - C2366;
    const double C2395 = C2383 - C2358;
    const double C2392 = C2380 - C2346;
    const double C2391 = C2379 - C2342;
    const double C2389 = C2377 - C2334;
    const double C2741 = C2737 - C2726;
    const double C3147 = C3139 - C3130;
    const double C3145 = C3137 - C3122;
    const double C3142 = C3134 - C3110;
    const double C3140 = C3132 - C3102;
    const double C3421 = C3419 - C3415;
    const double C3601 = C3597 - C3592;
    const double C3599 = C3595 - C3584;
    const double C4113 = C4111 - C4107;
    const double C5484 = C5472 - C5459;
    const double C5482 = C5470 - C5451;
    const double C5480 = C5468 - C5443;
    const double C5477 = C5465 - C5431;
    const double C5476 = C5464 - C5427;
    const double C5474 = C5462 - C5419;
    const double C5812 = C5808 - C5797;
    const double C6028 = C6026 - C6023;
    const double C6441 = C6439 - C6435;
    const double C7340 = C7338 - C7335;
    const double C8152 = C8140 - C8118;
    const double C8147 = C8135 - C8098;
    const double C8146 = C8134 - C8094;
    const double C8851 = C8845 - C8823;
    const double C9124 = C9121 - C9117;
    const double C9291 = C9288 - C9284;
    const double C9798 = C9795 - C9791;
    const double C11138 = C11126 - C11104;
    const double C11133 = C11121 - C11084;
    const double C11132 = C11120 - C11080;
    const double C12944 = C12941 - C12937;
    const double C17269 = C17257 - C17235;
    const double C17264 = C17252 - C17215;
    const double C17263 = C17251 - C17211;
    const double C17968 = C17962 - C17940;
    const double C18241 = C18238 - C18234;
    const double C18408 = C18405 - C18401;
    const double C18915 = C18912 - C18908;
    const double C34168 = C34156 - C34134;
    const double C34163 = C34151 - C34114;
    const double C34162 = C34150 - C34110;
    const double C35974 = C35971 - C35967;
    const double C20013 = C20005 - C19996;
    const double C20012 = C20004 - C19992;
    const double C20011 = C20003 - C19988;
    const double C20010 = C20002 - C19984;
    const double C20009 = C20001 - C19980;
    const double C20008 = C20000 - C19976;
    const double C20007 = C19999 - C19972;
    const double C20006 = C19998 - C19968;
    const double C20243 = C20240 - C20236;
    const double C20242 = C20239 - C20232;
    const double C20241 = C20238 - C20228;
    const double C20513 = C20507 - C20500;
    const double C20512 = C20506 - C20496;
    const double C20511 = C20505 - C20492;
    const double C20510 = C20504 - C20488;
    const double C20509 = C20503 - C20484;
    const double C20508 = C20502 - C20480;
    const double C20699 = C20698 - C20696;
    const double C20821 = C20818 - C20814;
    const double C20820 = C20817 - C20810;
    const double C20819 = C20816 - C20806;
    const double C21163 = C21162 - C21160;
    const double C22023 = C22021 - C22018;
    const double C22022 = C22020 - C22012;
    const double C22221 = C22213 - C22204;
    const double C22220 = C22212 - C22200;
    const double C22219 = C22211 - C22196;
    const double C22218 = C22210 - C22192;
    const double C22217 = C22209 - C22188;
    const double C22216 = C22208 - C22184;
    const double C22215 = C22207 - C22180;
    const double C22214 = C22206 - C22176;
    const double C22388 = C22386 - C22383;
    const double C22387 = C22385 - C22379;
    const double C22550 = C22548 - C22545;
    const double C22549 = C22547 - C22541;
    const double C23163 = C23161 - C23158;
    const double C23162 = C23160 - C23154;
    const double C24055 = C24054 - C24052;
    const double C31595 = C31594 - C31592;
    const double C39399 = C39398 - C39396;
    const double C39602 = C39601 - C39599;
    const double C40593 = C40592 - C40590;
    const double C24867 = C24855 - C24842;
    const double C24865 = C24853 - C24834;
    const double C24863 = C24851 - C24826;
    const double C24860 = C24848 - C24814;
    const double C24859 = C24847 - C24810;
    const double C24857 = C24845 - C24802;
    const double C25197 = C25193 - C25182;
    const double C25591 = C25583 - C25574;
    const double C25589 = C25581 - C25566;
    const double C25586 = C25578 - C25554;
    const double C25584 = C25576 - C25546;
    const double C25857 = C25855 - C25851;
    const double C26029 = C26025 - C26020;
    const double C26027 = C26023 - C26012;
    const double C26533 = C26531 - C26527;
    const double C27989 = C27979 - C27968;
    const double C27987 = C27977 - C27960;
    const double C27985 = C27975 - C27952;
    const double C27982 = C27972 - C27940;
    const double C27981 = C27971 - C27936;
    const double C28413 = C28411 - C28408;
    const double C29209 = C29207 - C29204;
    const double C30388 = C30386 - C30383;
    const double C44819 = C44817 - C44813;
    const double C46600 = C46598 - C46595;
    const double C2734 = C2167 * C281;
    const double C8130 = C7935 * C281;
    const double C17247 = C17052 * C281;
    const double C25190 = C49777 * C281;
    const double C8470 = C7935 * C283;
    const double C17587 = C17052 * C283;
    const double C5805 = C2167 * C422;
    const double C11116 = C7935 * C422;
    const double C34146 = C17052 * C422;
    const double C45120 = C49777 * C422;
    const double C11456 = C7935 * C424;
    const double C34486 = C17052 * C424;
    const double C8843 = C7935 * C790;
    const double C14152 = C2167 * C790;
    const double C17960 = C17052 * C790;
    const double C28200 = C49777 * C790;
    const double C8471 = C7928 * C294;
    const double C17588 = C17045 * C294;
    const double C11457 = C7928 * C435;
    const double C34487 = C17045 * C435;
    const double C2732 = C2167 * C280;
    const double C8128 = C7935 * C280;
    const double C17245 = C17052 * C280;
    const double C25188 = C49777 * C280;
    const double C8468 = C7935 * C282;
    const double C17585 = C17052 * C282;
    const double C5803 = C2167 * C421;
    const double C11114 = C7935 * C421;
    const double C34144 = C17052 * C421;
    const double C45118 = C49777 * C421;
    const double C11454 = C7935 * C423;
    const double C34484 = C17052 * C423;
    const double C8841 = C7935 * C789;
    const double C14150 = C2167 * C789;
    const double C17958 = C17052 * C789;
    const double C28198 = C49777 * C789;
    const double C50053 = C49998 + C50051;
    const double C50052 = C49994 + C50050;
    const double C118 =
        ((ae * -2 * C49757) / C49787 -
         (((C49756 * C49791) / C49762 + 2 * C49780) * be) / C49758) /
            C49763 +
        ((C49756 * (C49791 / C49787 -
                    (((C49756 * C49797) / C49758 + 2 * C49784) * be) / C49758 -
                    C49793 / C49767) +
          2 * (C49780 / C49763 - ((C49756 * C49784 + C50815) * be) / C49758 +
               C49777)) *
         ae) /
            C49758 +
        C49797 / C49767 - ((2 * C49777 - C49794 / C49767) * be) / C49758;
    const double C120 =
        (C49791 / C49787 -
         (((C49756 * C49797) / C49758 + 2 * C49784) * be) / C49758 -
         C49793 / C49767) /
            C49763 +
        ((C49756 * (C49797 / C49767 -
                    ((2 * C49777 - C49794 / C49767) * be) / C49758) +
          2 * (C49784 / C49763 - ((C49756 * C49777 + C50561) * be) / C49758)) *
         ae) /
            C49758 +
        (-2 * C49793) / (C49758 * 4 * C49762);
    const double C122 =
        (C49797 / C49767 - ((2 * C49777 - C49794 / C49767) * be) / C49758) /
            C49763 +
        ((2 * (C49777 / C49763 - (0 * be) / C49758) -
          C49794 / (C49758 * 4 * C49762)) *
         ae) /
            C49758;
    const double C7932 =
        C49791 / C49787 -
        (((C49756 * C49797) / C49758 + 2 * C49784) * be) / C49758 -
        C49793 / C49767;
    const double C7934 =
        C49797 / C49767 - ((2 * C49777 - C49794 / C49767) * be) / C49758;
    const double C17049 =
        C49791 / C49787 +
        (((C49756 * C49797) / C49758 + 2 * C49784) * ae) / C49758 -
        C49793 / C49767;
    const double C17051 =
        C49797 / C49767 + ((2 * C49777 - C49794 / C49767) * ae) / C49758;
    const double C24646 = C49797 / C49758;
    const double C2369 = C2166 * C974;
    const double C2361 = C2166 * C261;
    const double C2353 = C2166 * C258;
    const double C2349 = C2166 * C975;
    const double C2337 = C2166 * C260;
    const double C2329 = C2166 * C259;
    const double C2729 = C2166 * C262;
    const double C2721 = C2166 * C257;
    const double C3125 = C2166 * C1435;
    const double C3117 = C2166 * C779;
    const double C3113 = C2166 * C778;
    const double C3105 = C2166 * C1436;
    const double C3410 = C2166 * C2315;
    const double C3587 = C2166 * C2561;
    const double C3579 = C2166 * C1089;
    const double C4102 = C2166 * C3087;
    const double C5454 = C2166 * C1719;
    const double C5446 = C2166 * C402;
    const double C5438 = C2166 * C399;
    const double C5434 = C2166 * C1720;
    const double C5422 = C2166 * C401;
    const double C5414 = C2166 * C400;
    const double C5800 = C2166 * C403;
    const double C5792 = C2166 * C398;
    const double C6018 = C2166 * C1088;
    const double C6430 = C2166 * C4508;
    const double C7330 = C2166 * C5400;
    const double C14147 = C2166 * C780;
    const double C2411 = C2399 + C2375;
    const double C2409 = C2397 + C2367;
    const double C2407 = C2395 + C2359;
    const double C2404 = C2392 + C2347;
    const double C2403 = C2391 + C2343;
    const double C2401 = C2389 + C2335;
    const double C2745 = C2741 + C2727;
    const double C3155 = C3147 + C3131;
    const double C3153 = C3145 + C3123;
    const double C3150 = C3142 + C3111;
    const double C3148 = C3140 + C3103;
    const double C3423 = C3421 + C3416;
    const double C3605 = C3601 + C3593;
    const double C3603 = C3599 + C3585;
    const double C4115 = C4113 + C4108;
    const double C5496 = C5484 + C5460;
    const double C5494 = C5482 + C5452;
    const double C5492 = C5480 + C5444;
    const double C5489 = C5477 + C5432;
    const double C5488 = C5476 + C5428;
    const double C5486 = C5474 + C5420;
    const double C5816 = C5812 + C5798;
    const double C6030 = C6028 + C6024;
    const double C6443 = C6441 + C6436;
    const double C7342 = C7340 + C7336;
    const double C8164 = C8152 + C8119;
    const double C8159 = C8147 + C8099;
    const double C8158 = C8146 + C8095;
    const double C8857 = C8851 + C8824;
    const double C9127 = C9124 + C9118;
    const double C9294 = C9291 + C9285;
    const double C9801 = C9798 + C9792;
    const double C11150 = C11138 + C11105;
    const double C11145 = C11133 + C11085;
    const double C11144 = C11132 + C11081;
    const double C12947 = C12944 + C12938;
    const double C17281 = C17269 + C17236;
    const double C17276 = C17264 + C17216;
    const double C17275 = C17263 + C17212;
    const double C17974 = C17968 + C17941;
    const double C18244 = C18241 + C18235;
    const double C18411 = C18408 + C18402;
    const double C18918 = C18915 + C18909;
    const double C34180 = C34168 + C34135;
    const double C34175 = C34163 + C34115;
    const double C34174 = C34162 + C34111;
    const double C35977 = C35974 + C35968;
    const double C20021 = C20013 + C19997;
    const double C20020 = C20012 + C19993;
    const double C20019 = C20011 + C19989;
    const double C20018 = C20010 + C19985;
    const double C20017 = C20009 + C19981;
    const double C20016 = C20008 + C19977;
    const double C20015 = C20007 + C19973;
    const double C20014 = C20006 + C19969;
    const double C20246 = C20243 + C20237;
    const double C20245 = C20242 + C20233;
    const double C20244 = C20241 + C20229;
    const double C20519 = C20513 + C20501;
    const double C20518 = C20512 + C20497;
    const double C20517 = C20511 + C20493;
    const double C20516 = C20510 + C20489;
    const double C20515 = C20509 + C20485;
    const double C20514 = C20508 + C20481;
    const double C20700 = C20699 + C20697;
    const double C20824 = C20821 + C20815;
    const double C20823 = C20820 + C20811;
    const double C20822 = C20819 + C20807;
    const double C21164 = C21163 + C21161;
    const double C22025 = C22023 + C22019;
    const double C22024 = C22022 + C22013;
    const double C22229 = C22221 + C22205;
    const double C22228 = C22220 + C22201;
    const double C22227 = C22219 + C22197;
    const double C22226 = C22218 + C22193;
    const double C22225 = C22217 + C22189;
    const double C22224 = C22216 + C22185;
    const double C22223 = C22215 + C22181;
    const double C22222 = C22214 + C22177;
    const double C22390 = C22388 + C22384;
    const double C22389 = C22387 + C22380;
    const double C22552 = C22550 + C22546;
    const double C22551 = C22549 + C22542;
    const double C23165 = C23163 + C23159;
    const double C23164 = C23162 + C23155;
    const double C24056 = C24055 + C24053;
    const double C31596 = C31595 + C31593;
    const double C39400 = C39399 + C39397;
    const double C39603 = C39602 + C39600;
    const double C40594 = C40593 + C40591;
    const double C24879 = C24867 + C24843;
    const double C24877 = C24865 + C24835;
    const double C24875 = C24863 + C24827;
    const double C24872 = C24860 + C24815;
    const double C24871 = C24859 + C24811;
    const double C24869 = C24857 + C24803;
    const double C25201 = C25197 + C25183;
    const double C25599 = C25591 + C25575;
    const double C25597 = C25589 + C25567;
    const double C25594 = C25586 + C25555;
    const double C25592 = C25584 + C25547;
    const double C25859 = C25857 + C25852;
    const double C26033 = C26029 + C26021;
    const double C26031 = C26027 + C26013;
    const double C26535 = C26533 + C26528;
    const double C27999 = C27989 + C27969;
    const double C27997 = C27987 + C27961;
    const double C27995 = C27985 + C27953;
    const double C27992 = C27982 + C27941;
    const double C27991 = C27981 + C27937;
    const double C28415 = C28413 + C28409;
    const double C29211 = C29209 + C29205;
    const double C30390 = C30388 + C30384;
    const double C44821 = C44819 + C44814;
    const double C46602 = C46600 + C46596;
    const double C2739 = C2732 - C2733;
    const double C8143 = C8128 - C8129;
    const double C17260 = C17245 - C17246;
    const double C25195 = C25188 - C25189;
    const double C8474 = C8468 - C8469;
    const double C17591 = C17585 - C17586;
    const double C5810 = C5803 - C5804;
    const double C11129 = C11114 - C11115;
    const double C34159 = C34144 - C34145;
    const double C45123 = C45118 - C45119;
    const double C11460 = C11454 - C11455;
    const double C34490 = C34484 - C34485;
    const double C8850 = C8841 - C8842;
    const double C14155 = C14150 - C14151;
    const double C17967 = C17958 - C17959;
    const double C28203 = C28198 - C28199;
    const double C50055 = C50053 + C50033;
    const double C50054 = C50052 + C50030;
    const double C8121 = C7932 * C261;
    const double C8109 = C7932 * C258;
    const double C8105 = C7932 * C260;
    const double C8085 = C7932 * C259;
    const double C8461 = C7932 * C257;
    const double C8834 = C7932 * C779;
    const double C8830 = C7932 * C778;
    const double C9108 = C7932 * C975;
    const double C9275 = C7932 * C1089;
    const double C9782 = C7932 * C1436;
    const double C11107 = C7932 * C402;
    const double C11095 = C7932 * C399;
    const double C11091 = C7932 * C401;
    const double C11071 = C7932 * C400;
    const double C11447 = C7932 * C398;
    const double C12928 = C7932 * C1720;
    const double C8125 = C7934 * C262;
    const double C8113 = C7934 * C257;
    const double C8101 = C7934 * C261;
    const double C8089 = C7934 * C258;
    const double C8465 = C7934 * C256;
    const double C8838 = C7934 * C780;
    const double C8826 = C7934 * C779;
    const double C9112 = C7934 * C974;
    const double C9279 = C7934 * C1088;
    const double C9786 = C7934 * C1435;
    const double C11111 = C7934 * C403;
    const double C11099 = C7934 * C398;
    const double C11087 = C7934 * C402;
    const double C11075 = C7934 * C399;
    const double C11451 = C7934 * C397;
    const double C12932 = C7934 * C1719;
    const double C17238 = C17049 * C261;
    const double C17226 = C17049 * C258;
    const double C17222 = C17049 * C260;
    const double C17202 = C17049 * C259;
    const double C17578 = C17049 * C257;
    const double C17951 = C17049 * C779;
    const double C17947 = C17049 * C778;
    const double C18225 = C17049 * C975;
    const double C18392 = C17049 * C1089;
    const double C18899 = C17049 * C1436;
    const double C34137 = C17049 * C402;
    const double C34125 = C17049 * C399;
    const double C34121 = C17049 * C401;
    const double C34101 = C17049 * C400;
    const double C34477 = C17049 * C398;
    const double C35958 = C17049 * C1720;
    const double C17242 = C17051 * C262;
    const double C17230 = C17051 * C257;
    const double C17218 = C17051 * C261;
    const double C17206 = C17051 * C258;
    const double C17582 = C17051 * C256;
    const double C17955 = C17051 * C780;
    const double C17943 = C17051 * C779;
    const double C18229 = C17051 * C974;
    const double C18396 = C17051 * C1088;
    const double C18903 = C17051 * C1435;
    const double C34141 = C17051 * C403;
    const double C34129 = C17051 * C398;
    const double C34117 = C17051 * C402;
    const double C34105 = C17051 * C399;
    const double C34481 = C17051 * C397;
    const double C35962 = C17051 * C1719;
    const double C24837 = C24646 * C974;
    const double C24829 = C24646 * C261;
    const double C24821 = C24646 * C258;
    const double C24817 = C24646 * C975;
    const double C24805 = C24646 * C260;
    const double C24797 = C24646 * C259;
    const double C25185 = C24646 * C262;
    const double C25177 = C24646 * C257;
    const double C25569 = C24646 * C1435;
    const double C25561 = C24646 * C779;
    const double C25557 = C24646 * C778;
    const double C25549 = C24646 * C1436;
    const double C25846 = C24646 * C2315;
    const double C26015 = C24646 * C2561;
    const double C26007 = C24646 * C1089;
    const double C26522 = C24646 * C3087;
    const double C27963 = C24646 * C1088;
    const double C27955 = C24646 * C402;
    const double C27947 = C24646 * C399;
    const double C27943 = C24646 * C401;
    const double C27931 = C24646 * C400;
    const double C28195 = C24646 * C780;
    const double C28403 = C24646 * C398;
    const double C29199 = C24646 * C4508;
    const double C30378 = C24646 * C1720;
    const double C44808 = C24646 * C1719;
    const double C45115 = C24646 * C403;
    const double C46590 = C24646 * C5400;
    const double C2386 = C2368 - C2369;
    const double C2384 = C2360 - C2361;
    const double C2382 = C2352 - C2353;
    const double C2381 = C2348 - C2349;
    const double C2378 = C2336 - C2337;
    const double C2376 = C2328 - C2329;
    const double C2738 = C2728 - C2729;
    const double C2736 = C2720 - C2721;
    const double C3138 = C3124 - C3125;
    const double C3136 = C3116 - C3117;
    const double C3135 = C3112 - C3113;
    const double C3133 = C3104 - C3105;
    const double C3418 = C3409 - C3410;
    const double C3596 = C3586 - C3587;
    const double C3594 = C3578 - C3579;
    const double C4110 = C4101 - C4102;
    const double C5471 = C5453 - C5454;
    const double C5469 = C5445 - C5446;
    const double C5467 = C5437 - C5438;
    const double C5466 = C5433 - C5434;
    const double C5463 = C5421 - C5422;
    const double C5461 = C5413 - C5414;
    const double C5809 = C5799 - C5800;
    const double C5807 = C5791 - C5792;
    const double C6025 = C6017 - C6018;
    const double C6438 = C6429 - C6430;
    const double C7337 = C7329 - C7330;
    const double C14154 = C14146 - C14147;
    const double C20029 = C20021 * C50719;
    const double C20028 = C20020 * C50719;
    const double C31291 = C20020 * C50844;
    const double C36718 = C20020 * C33805;
    const double C20027 = C20019 * C50719;
    const double C22014 = C20019 * C5105;
    const double C31289 = C20019 * C50844;
    const double C36716 = C20019 * C33805;
    const double C47342 = C20019 * C50881;
    const double C20026 = C20018 * C50719;
    const double C22008 = C20018 * C5105;
    const double C31287 = C20018 * C50844;
    const double C36714 = C20018 * C33805;
    const double C47339 = C20018 * C50881;
    const double C20025 = C20017 * C50719;
    const double C32191 = C20017 * C50844;
    const double C37611 = C20017 * C33805;
    const double C20024 = C20016 * C50719;
    const double C22997 = C20016 * C5105;
    const double C31286 = C20016 * C50844;
    const double C36713 = C20016 * C33805;
    const double C48230 = C20016 * C50881;
    const double C20023 = C20015 * C50719;
    const double C22007 = C20015 * C5105;
    const double C31283 = C20015 * C50844;
    const double C36710 = C20015 * C33805;
    const double C47338 = C20015 * C50881;
    const double C20022 = C20014 * C50719;
    const double C22002 = C20014 * C5105;
    const double C31281 = C20014 * C50844;
    const double C36708 = C20014 * C33805;
    const double C47333 = C20014 * C50881;
    const double C20249 = C20246 * C50719;
    const double C20248 = C20245 * C50719;
    const double C31589 = C20245 * C50844;
    const double C37016 = C20245 * C33805;
    const double C20247 = C20244 * C50719;
    const double C22376 = C20244 * C5105;
    const double C31587 = C20244 * C50844;
    const double C37014 = C20244 * C33805;
    const double C47637 = C20244 * C50881;
    const double C20525 = C20519 * C50719;
    const double C31292 = C20519 * C50783;
    const double C36719 = C20519 * C50783;
    const double C20524 = C20518 * C50719;
    const double C22015 = C20518 * C5106;
    const double C31290 = C20518 * C50783;
    const double C31944 = C20518 * C50844;
    const double C36717 = C20518 * C50783;
    const double C37364 = C20518 * C33805;
    const double C47343 = C20518 * C50882;
    const double C20523 = C20517 * C50719;
    const double C22009 = C20517 * C5106;
    const double C22750 = C20517 * C5105;
    const double C31288 = C20517 * C50783;
    const double C31942 = C20517 * C50844;
    const double C36715 = C20517 * C50783;
    const double C37362 = C20517 * C33805;
    const double C47340 = C20517 * C50882;
    const double C47983 = C20517 * C50881;
    const double C20522 = C20516 * C50719;
    const double C22003 = C20516 * C5106;
    const double C22749 = C20516 * C5105;
    const double C31282 = C20516 * C50783;
    const double C31941 = C20516 * C50844;
    const double C36709 = C20516 * C50783;
    const double C37361 = C20516 * C33805;
    const double C47334 = C20516 * C50882;
    const double C47982 = C20516 * C50881;
    const double C20521 = C20515 * C50719;
    const double C22006 = C20515 * C5106;
    const double C23653 = C20515 * C5105;
    const double C31284 = C20515 * C50783;
    const double C31939 = C20515 * C50844;
    const double C36711 = C20515 * C50783;
    const double C37359 = C20515 * C33805;
    const double C47337 = C20515 * C50882;
    const double C48868 = C20515 * C50881;
    const double C20520 = C20514 * C50719;
    const double C22998 = C20514 * C5106;
    const double C31285 = C20514 * C50783;
    const double C32830 = C20514 * C50844;
    const double C36712 = C20514 * C50783;
    const double C38250 = C20514 * C33805;
    const double C48231 = C20514 * C50882;
    const double C20701 = C20700 * C50719;
    const double C20827 = C20824 * C50719;
    const double C22999 = C20824 * C5107;
    const double C32831 = C20824 * C50783;
    const double C38251 = C20824 * C50783;
    const double C48232 = C20824 * C44512;
    const double C20826 = C20823 * C50719;
    const double C22005 = C20823 * C5107;
    const double C23654 = C20823 * C5106;
    const double C31938 = C20823 * C50783;
    const double C32341 = C20823 * C50844;
    const double C37358 = C20823 * C50783;
    const double C37761 = C20823 * C33805;
    const double C47336 = C20823 * C44512;
    const double C48869 = C20823 * C50882;
    const double C20825 = C20822 * C50719;
    const double C22004 = C20822 * C5107;
    const double C22748 = C20822 * C5106;
    const double C23150 = C20822 * C5105;
    const double C31940 = C20822 * C50783;
    const double C32339 = C20822 * C50844;
    const double C37360 = C20822 * C50783;
    const double C37759 = C20822 * C33805;
    const double C47335 = C20822 * C44512;
    const double C47981 = C20822 * C50882;
    const double C48379 = C20822 * C50881;
    const double C21165 = C21164 * C50719;
    const double C32192 = C21164 * C50783;
    const double C37612 = C21164 * C50783;
    const double C22027 = C22025 * C5107;
    const double C31945 = C22025 * C50783;
    const double C37365 = C22025 * C50783;
    const double C47344 = C22025 * C44512;
    const double C22026 = C22024 * C5107;
    const double C22751 = C22024 * C5106;
    const double C31943 = C22024 * C50783;
    const double C37363 = C22024 * C50783;
    const double C47341 = C22024 * C44512;
    const double C47984 = C22024 * C50882;
    const double C22752 = C22229 * C5107;
    const double C47985 = C22229 * C44512;
    const double C22747 = C22224 * C5107;
    const double C23151 = C22224 * C5106;
    const double C32340 = C22224 * C50783;
    const double C37760 = C22224 * C50783;
    const double C47980 = C22224 * C44512;
    const double C48380 = C22224 * C50882;
    const double C22392 = C22390 * C5107;
    const double C47639 = C22390 * C44512;
    const double C22391 = C22389 * C5106;
    const double C31588 = C22389 * C50783;
    const double C37015 = C22389 * C50783;
    const double C47638 = C22389 * C50882;
    const double C23655 = C23165 * C5107;
    const double C32342 = C23165 * C50783;
    const double C37762 = C23165 * C50783;
    const double C48870 = C23165 * C44512;
    const double C23166 = C23164 * C5107;
    const double C48381 = C23164 * C44512;
    const double C31597 = C31596 * C50783;
    const double C37017 = C31596 * C50783;
    const double C2743 = C2739 - C2734;
    const double C8155 = C8143 - C8130;
    const double C17272 = C17260 - C17247;
    const double C25199 = C25195 - C25190;
    const double C8477 = C8474 - C8470;
    const double C17594 = C17591 - C17587;
    const double C5814 = C5810 - C5805;
    const double C11141 = C11129 - C11116;
    const double C34171 = C34159 - C34146;
    const double C45125 = C45123 - C45120;
    const double C11463 = C11460 - C11456;
    const double C34493 = C34490 - C34486;
    const double C8856 = C8850 - C8843;
    const double C14157 = C14155 - C14152;
    const double C17973 = C17967 - C17960;
    const double C28205 = C28203 - C28200;
    const double C145 = (5 * (3 * C49929 + C49863 * C49982 + C49965 * ae) +
                         C49863 * (4 * C49982 + C49863 * C50055 + C50036 * ae) +
                         (4 * C49965 + C49863 * C50036) * ae) /
                        C49758;
    const double C285 =
        (3 * C49929 + C49863 * C49982 + C49965 * ae + C50055 * C50064) / C49758;
    const double C426 =
        (3 * C49929 + C49863 * C49982 + C49965 * ae + C50055 * C50098) / C49758;
    const double C542 =
        (C50057 * (4 * C49982 + C49863 * C50055 + C50036 * ae)) / C49758;
    const double C646 =
        (C50091 * (4 * C49982 + C49863 * C50055 + C50036 * ae)) / C49758;
    const double C792 = (C50091 * C50057 * C50055) / C49758;
    const double C152 =
        (5 * (3 * C49976 + ae * C49981 + be * C49982 + C49863 * C50047) +
         ae * (4 * C49981 + C49863 * C50054 + C50036 * be) +
         be * (4 * C49982 + C49863 * C50055 + C50036 * ae) +
         C49863 *
             (4 * C50047 + ae * C50054 + be * C50055 +
              C49863 *
                  (3 * C50041 + ae * C50048 + be * C50049 +
                   C49863 * (2 * C50034 + ae * C50039 + be * C50040 +
                             C49863 * (C50024 + ae * C50025 + be * C50027 +
                                       C49863 * (ae * C50013 + be * C50016 +
                                                 C49863 *
                                                     (C49992 * C49993 +
                                                      C49867 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                     C49760)))))) /
        C49762;
    const double C543 =
        (4 * (2 * C50077 + ae * C50057 * C49974 + be * C50057 * C49975 +
              C49863 * C50140) +
         ae * C50057 * C50054 + be * C50057 * C50055 +
         C49863 *
             (3 * C50140 + ae * C50057 * C50048 + be * C50057 * C50049 +
              C49863 *
                  (2 * C50138 + ae * C50057 * C50039 + be * C50057 * C50040 +
                   C49863 *
                       (C50129 + ae * C50057 * C50025 + be * C50057 * C50027 +
                        C49863 * (ae * C50057 * C50013 + be * C50057 * C50016 +
                                  C49863 * C50057 *
                                      (C49992 * C49993 +
                                       C49867 * bs[8] * std::pow(C49861, 8)) *
                                      C49760))))) /
        C49762;
    const double C647 =
        (4 * (2 * C50111 + ae * C50091 * C49974 + be * C50091 * C49975 +
              C49863 * C50157) +
         ae * C50091 * C50054 + be * C50091 * C50055 +
         C49863 *
             (3 * C50157 + ae * C50091 * C50048 + be * C50091 * C50049 +
              C49863 *
                  (2 * C50155 + ae * C50091 * C50039 + be * C50091 * C50040 +
                   C49863 *
                       (C50146 + ae * C50091 * C50025 + be * C50091 * C50027 +
                        C49863 * (ae * C50091 * C50013 + be * C50091 * C50016 +
                                  C49863 * C50091 *
                                      (C49992 * C49993 +
                                       C49867 * bs[8] * std::pow(C49861, 8)) *
                                      C49760))))) /
        C49762;
    const double C144 = (5 * (3 * C49928 + C49863 * C49981 + C49965 * be) +
                         C49863 * (4 * C49981 + C49863 * C50054 + C50036 * be) +
                         (4 * C49965 + C49863 * C50036) * be) /
                        C49758;
    const double C284 =
        (3 * C49928 + C49863 * C49981 + C49965 * be + C50054 * C50064) / C49758;
    const double C425 =
        (3 * C49928 + C49863 * C49981 + C49965 * be + C50054 * C50098) / C49758;
    const double C541 =
        (C50057 * (4 * C49981 + C49863 * C50054 + C50036 * be)) / C49758;
    const double C645 =
        (C50091 * (4 * C49981 + C49863 * C50054 + C50036 * be)) / C49758;
    const double C791 = (C50091 * C50057 * C50054) / C49758;
    const double C8141 = C8120 - C8121;
    const double C8138 = C8108 - C8109;
    const double C8137 = C8104 - C8105;
    const double C8132 = C8084 - C8085;
    const double C8472 = C8460 - C8461;
    const double C8848 = C8833 - C8834;
    const double C8847 = C8829 - C8830;
    const double C9119 = C9107 - C9108;
    const double C9286 = C9274 - C9275;
    const double C9793 = C9781 - C9782;
    const double C11127 = C11106 - C11107;
    const double C11124 = C11094 - C11095;
    const double C11123 = C11090 - C11091;
    const double C11118 = C11070 - C11071;
    const double C11458 = C11446 - C11447;
    const double C12939 = C12927 - C12928;
    const double C8142 = C8124 - C8125;
    const double C8139 = C8112 - C8113;
    const double C8136 = C8100 - C8101;
    const double C8133 = C8088 - C8089;
    const double C8473 = C8464 - C8465;
    const double C8849 = C8837 - C8838;
    const double C8846 = C8825 - C8826;
    const double C9120 = C9111 - C9112;
    const double C9287 = C9278 - C9279;
    const double C9794 = C9785 - C9786;
    const double C11128 = C11110 - C11111;
    const double C11125 = C11098 - C11099;
    const double C11122 = C11086 - C11087;
    const double C11119 = C11074 - C11075;
    const double C11459 = C11450 - C11451;
    const double C12940 = C12931 - C12932;
    const double C17258 = C17237 - C17238;
    const double C17255 = C17225 - C17226;
    const double C17254 = C17221 - C17222;
    const double C17249 = C17201 - C17202;
    const double C17589 = C17577 - C17578;
    const double C17965 = C17950 - C17951;
    const double C17964 = C17946 - C17947;
    const double C18236 = C18224 - C18225;
    const double C18403 = C18391 - C18392;
    const double C18910 = C18898 - C18899;
    const double C34157 = C34136 - C34137;
    const double C34154 = C34124 - C34125;
    const double C34153 = C34120 - C34121;
    const double C34148 = C34100 - C34101;
    const double C34488 = C34476 - C34477;
    const double C35969 = C35957 - C35958;
    const double C17259 = C17241 - C17242;
    const double C17256 = C17229 - C17230;
    const double C17253 = C17217 - C17218;
    const double C17250 = C17205 - C17206;
    const double C17590 = C17581 - C17582;
    const double C17966 = C17954 - C17955;
    const double C17963 = C17942 - C17943;
    const double C18237 = C18228 - C18229;
    const double C18404 = C18395 - C18396;
    const double C18911 = C18902 - C18903;
    const double C34158 = C34140 - C34141;
    const double C34155 = C34128 - C34129;
    const double C34152 = C34116 - C34117;
    const double C34149 = C34104 - C34105;
    const double C34489 = C34480 - C34481;
    const double C35970 = C35961 - C35962;
    const double C24854 = C24836 - C24837;
    const double C24852 = C24828 - C24829;
    const double C24850 = C24820 - C24821;
    const double C24849 = C24816 - C24817;
    const double C24846 = C24804 - C24805;
    const double C24844 = C24796 - C24797;
    const double C25194 = C25184 - C25185;
    const double C25192 = C25176 - C25177;
    const double C25582 = C25568 - C25569;
    const double C25580 = C25560 - C25561;
    const double C25579 = C25556 - C25557;
    const double C25577 = C25548 - C25549;
    const double C25854 = C25845 - C25846;
    const double C26024 = C26014 - C26015;
    const double C26022 = C26006 - C26007;
    const double C26530 = C26521 - C26522;
    const double C27978 = C27962 - C27963;
    const double C27976 = C27954 - C27955;
    const double C27974 = C27946 - C27947;
    const double C27973 = C27942 - C27943;
    const double C27970 = C27930 - C27931;
    const double C28202 = C28194 - C28195;
    const double C28410 = C28402 - C28403;
    const double C29206 = C29198 - C29199;
    const double C30385 = C30377 - C30378;
    const double C44816 = C44807 - C44808;
    const double C45122 = C45114 - C45115;
    const double C46597 = C46589 - C46590;
    const double C2398 = C2386 - C2370;
    const double C2396 = C2384 - C2362;
    const double C2394 = C2382 - C2354;
    const double C2393 = C2381 - C2350;
    const double C2390 = C2378 - C2338;
    const double C2388 = C2376 - C2330;
    const double C2742 = C2738 - C2730;
    const double C2740 = C2736 - C2722;
    const double C3146 = C3138 - C3126;
    const double C3144 = C3136 - C3118;
    const double C3143 = C3135 - C3114;
    const double C3141 = C3133 - C3106;
    const double C3420 = C3418 - C3411;
    const double C3600 = C3596 - C3588;
    const double C3598 = C3594 - C3580;
    const double C4112 = C4110 - C4103;
    const double C5483 = C5471 - C5455;
    const double C5481 = C5469 - C5447;
    const double C5479 = C5467 - C5439;
    const double C5478 = C5466 - C5435;
    const double C5475 = C5463 - C5423;
    const double C5473 = C5461 - C5415;
    const double C5813 = C5809 - C5801;
    const double C5811 = C5807 - C5793;
    const double C6027 = C6025 - C6019;
    const double C6440 = C6438 - C6431;
    const double C7339 = C7337 - C7331;
    const double C14156 = C14154 - C14148;
    const double C31294 = C31290 + C31289;
    const double C36721 = C36717 + C36716;
    const double C31293 = C31283 + C31284;
    const double C36720 = C36710 + C36711;
    const double C32190 = C31285 + C31286;
    const double C37610 = C36712 + C36713;
    const double C32829 = C31938 + C31939;
    const double C38249 = C37358 + C37359;
    const double C2747 = C2743 + C2735;
    const double C8167 = C8155 + C8131;
    const double C17284 = C17272 + C17248;
    const double C25203 = C25199 + C25191;
    const double C8480 = C8477 + C8471;
    const double C17597 = C17594 + C17588;
    const double C5818 = C5814 + C5806;
    const double C11153 = C11141 + C11117;
    const double C34183 = C34171 + C34147;
    const double C45127 = C45125 + C45121;
    const double C11466 = C11463 + C11457;
    const double C34496 = C34493 + C34487;
    const double C8862 = C8856 + C8844;
    const double C14159 = C14157 + C14153;
    const double C17979 = C17973 + C17961;
    const double C28207 = C28205 + C28201;
    const double C8153 = C8141 - C8122;
    const double C8150 = C8138 - C8110;
    const double C8149 = C8137 - C8106;
    const double C8144 = C8132 - C8086;
    const double C8475 = C8472 - C8462;
    const double C8854 = C8848 - C8835;
    const double C8853 = C8847 - C8831;
    const double C9122 = C9119 - C9109;
    const double C9289 = C9286 - C9276;
    const double C9796 = C9793 - C9783;
    const double C11139 = C11127 - C11108;
    const double C11136 = C11124 - C11096;
    const double C11135 = C11123 - C11092;
    const double C11130 = C11118 - C11072;
    const double C11461 = C11458 - C11448;
    const double C12942 = C12939 - C12929;
    const double C8154 = C8142 - C8126;
    const double C8151 = C8139 - C8114;
    const double C8148 = C8136 - C8102;
    const double C8145 = C8133 - C8090;
    const double C8476 = C8473 - C8466;
    const double C8855 = C8849 - C8839;
    const double C8852 = C8846 - C8827;
    const double C9123 = C9120 - C9113;
    const double C9290 = C9287 - C9280;
    const double C9797 = C9794 - C9787;
    const double C11140 = C11128 - C11112;
    const double C11137 = C11125 - C11100;
    const double C11134 = C11122 - C11088;
    const double C11131 = C11119 - C11076;
    const double C11462 = C11459 - C11452;
    const double C12943 = C12940 - C12933;
    const double C17270 = C17258 - C17239;
    const double C17267 = C17255 - C17227;
    const double C17266 = C17254 - C17223;
    const double C17261 = C17249 - C17203;
    const double C17592 = C17589 - C17579;
    const double C17971 = C17965 - C17952;
    const double C17970 = C17964 - C17948;
    const double C18239 = C18236 - C18226;
    const double C18406 = C18403 - C18393;
    const double C18913 = C18910 - C18900;
    const double C34169 = C34157 - C34138;
    const double C34166 = C34154 - C34126;
    const double C34165 = C34153 - C34122;
    const double C34160 = C34148 - C34102;
    const double C34491 = C34488 - C34478;
    const double C35972 = C35969 - C35959;
    const double C17271 = C17259 - C17243;
    const double C17268 = C17256 - C17231;
    const double C17265 = C17253 - C17219;
    const double C17262 = C17250 - C17207;
    const double C17593 = C17590 - C17583;
    const double C17972 = C17966 - C17956;
    const double C17969 = C17963 - C17944;
    const double C18240 = C18237 - C18230;
    const double C18407 = C18404 - C18397;
    const double C18914 = C18911 - C18904;
    const double C34170 = C34158 - C34142;
    const double C34167 = C34155 - C34130;
    const double C34164 = C34152 - C34118;
    const double C34161 = C34149 - C34106;
    const double C34492 = C34489 - C34482;
    const double C35973 = C35970 - C35963;
    const double C24866 = C24854 - C24838;
    const double C24864 = C24852 - C24830;
    const double C24862 = C24850 - C24822;
    const double C24861 = C24849 - C24818;
    const double C24858 = C24846 - C24806;
    const double C24856 = C24844 - C24798;
    const double C25198 = C25194 - C25186;
    const double C25196 = C25192 - C25178;
    const double C25590 = C25582 - C25570;
    const double C25588 = C25580 - C25562;
    const double C25587 = C25579 - C25558;
    const double C25585 = C25577 - C25550;
    const double C25856 = C25854 - C25847;
    const double C26028 = C26024 - C26016;
    const double C26026 = C26022 - C26008;
    const double C26532 = C26530 - C26523;
    const double C27988 = C27978 - C27964;
    const double C27986 = C27976 - C27956;
    const double C27984 = C27974 - C27948;
    const double C27983 = C27973 - C27944;
    const double C27980 = C27970 - C27932;
    const double C28204 = C28202 - C28196;
    const double C28412 = C28410 - C28404;
    const double C29208 = C29206 - C29200;
    const double C30387 = C30385 - C30379;
    const double C44818 = C44816 - C44809;
    const double C45124 = C45122 - C45116;
    const double C46599 = C46597 - C46591;
    const double C2410 = C2398 + C2371;
    const double C2408 = C2396 + C2363;
    const double C2406 = C2394 + C2355;
    const double C2405 = C2393 + C2351;
    const double C2402 = C2390 + C2339;
    const double C2400 = C2388 + C2331;
    const double C2746 = C2742 + C2731;
    const double C2744 = C2740 + C2723;
    const double C3154 = C3146 + C3127;
    const double C3152 = C3144 + C3119;
    const double C3151 = C3143 + C3115;
    const double C3149 = C3141 + C3107;
    const double C3422 = C3420 + C3412;
    const double C3604 = C3600 + C3589;
    const double C3602 = C3598 + C3581;
    const double C4114 = C4112 + C4104;
    const double C5495 = C5483 + C5456;
    const double C5493 = C5481 + C5448;
    const double C5491 = C5479 + C5440;
    const double C5490 = C5478 + C5436;
    const double C5487 = C5475 + C5424;
    const double C5485 = C5473 + C5416;
    const double C5817 = C5813 + C5802;
    const double C5815 = C5811 + C5794;
    const double C6029 = C6027 + C6020;
    const double C6442 = C6440 + C6432;
    const double C7341 = C7339 + C7332;
    const double C14158 = C14156 + C14149;
    const double C8165 = C8153 + C8123;
    const double C8162 = C8150 + C8111;
    const double C8161 = C8149 + C8107;
    const double C8156 = C8144 + C8087;
    const double C8478 = C8475 + C8463;
    const double C8860 = C8854 + C8836;
    const double C8859 = C8853 + C8832;
    const double C9125 = C9122 + C9110;
    const double C9292 = C9289 + C9277;
    const double C9799 = C9796 + C9784;
    const double C11151 = C11139 + C11109;
    const double C11148 = C11136 + C11097;
    const double C11147 = C11135 + C11093;
    const double C11142 = C11130 + C11073;
    const double C11464 = C11461 + C11449;
    const double C12945 = C12942 + C12930;
    const double C8166 = C8154 + C8127;
    const double C8163 = C8151 + C8115;
    const double C8160 = C8148 + C8103;
    const double C8157 = C8145 + C8091;
    const double C8479 = C8476 + C8467;
    const double C8861 = C8855 + C8840;
    const double C8858 = C8852 + C8828;
    const double C9126 = C9123 + C9114;
    const double C9293 = C9290 + C9281;
    const double C9800 = C9797 + C9788;
    const double C11152 = C11140 + C11113;
    const double C11149 = C11137 + C11101;
    const double C11146 = C11134 + C11089;
    const double C11143 = C11131 + C11077;
    const double C11465 = C11462 + C11453;
    const double C12946 = C12943 + C12934;
    const double C17282 = C17270 + C17240;
    const double C17279 = C17267 + C17228;
    const double C17278 = C17266 + C17224;
    const double C17273 = C17261 + C17204;
    const double C17595 = C17592 + C17580;
    const double C17977 = C17971 + C17953;
    const double C17976 = C17970 + C17949;
    const double C18242 = C18239 + C18227;
    const double C18409 = C18406 + C18394;
    const double C18916 = C18913 + C18901;
    const double C34181 = C34169 + C34139;
    const double C34178 = C34166 + C34127;
    const double C34177 = C34165 + C34123;
    const double C34172 = C34160 + C34103;
    const double C34494 = C34491 + C34479;
    const double C35975 = C35972 + C35960;
    const double C17283 = C17271 + C17244;
    const double C17280 = C17268 + C17232;
    const double C17277 = C17265 + C17220;
    const double C17274 = C17262 + C17208;
    const double C17596 = C17593 + C17584;
    const double C17978 = C17972 + C17957;
    const double C17975 = C17969 + C17945;
    const double C18243 = C18240 + C18231;
    const double C18410 = C18407 + C18398;
    const double C18917 = C18914 + C18905;
    const double C34182 = C34170 + C34143;
    const double C34179 = C34167 + C34131;
    const double C34176 = C34164 + C34119;
    const double C34173 = C34161 + C34107;
    const double C34495 = C34492 + C34483;
    const double C35976 = C35973 + C35964;
    const double C24878 = C24866 + C24839;
    const double C24876 = C24864 + C24831;
    const double C24874 = C24862 + C24823;
    const double C24873 = C24861 + C24819;
    const double C24870 = C24858 + C24807;
    const double C24868 = C24856 + C24799;
    const double C25202 = C25198 + C25187;
    const double C25200 = C25196 + C25179;
    const double C25598 = C25590 + C25571;
    const double C25596 = C25588 + C25563;
    const double C25595 = C25587 + C25559;
    const double C25593 = C25585 + C25551;
    const double C25858 = C25856 + C25848;
    const double C26032 = C26028 + C26017;
    const double C26030 = C26026 + C26009;
    const double C26534 = C26532 + C26524;
    const double C27998 = C27988 + C27965;
    const double C27996 = C27986 + C27957;
    const double C27994 = C27984 + C27949;
    const double C27993 = C27983 + C27945;
    const double C27990 = C27980 + C27933;
    const double C28206 = C28204 + C28197;
    const double C28414 = C28412 + C28405;
    const double C29210 = C29208 + C29201;
    const double C30389 = C30387 + C30380;
    const double C44820 = C44818 + C44810;
    const double C45126 = C45124 + C45117;
    const double C46601 = C46599 + C46592;
    const double C2413 = C2409 + C2408;
    const double C3408 = C2404 + C2405;
    const double C2412 = C2402 + C2403;
    const double C14615 = C3153 + C3152;
    const double C14614 = C3152 + C3153;
    const double C14613 = C3150 + C3151;
    const double C14612 = C3151 + C3150;
    const double C4100 = C3148 + C3149;
    const double C15781 = C3149 + C3148;
    const double C6437 = C3603 + C3602;
    const double C15134 = C3602 + C3603;
    const double C5498 = C5494 + C5493;
    const double C7328 = C5489 + C5490;
    const double C5497 = C5487 + C5488;
    const double C24881 = C24877 + C24876;
    const double C25844 = C24872 + C24873;
    const double C24880 = C24870 + C24871;
    const double C28677 = C25597 + C25596;
    const double C28676 = C25596 + C25597;
    const double C28675 = C25594 + C25595;
    const double C28674 = C25595 + C25594;
    const double C26520 = C25592 + C25593;
    const double C29858 = C25593 + C25592;
    const double C29197 = C26030 + C26031;
    const double C29196 = C26031 + C26030;
    const double C44815 = C27997 + C27996;
    const double C44806 = C27993 + C27992;
    const double C46588 = C30390 + C30389;
    const double C2415 = C2413 * C50719;
    const double C3417 = C3408 * C50719;
    const double C2414 = C2412 * C50719;
    const double C4109 = C4100 * C50719;
    const double C24883 = C24881 * C50719;
    const double C25853 = C25844 * C50719;
    const double C24882 = C24880 * C50719;
    const double C26529 = C26520 * C50719;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50621 * C50830 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C50621 * C50657) *
              C50873 +
          (((C8162 + C8163 + C8164) * C50719 * C50843 +
            (C8165 + C8166 + C8167) * C50719 * C50757) *
               C50621 * C50657 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C50621 * C50830) *
              C50874 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50719 * C50843 +
            (C8478 + C8479 + C8480) * C50719 * C50757) *
               C50621 * C50830 -
           ((C7935 * C284 - C7936 * C265 - C7935 * C285 + C7928 * C295 +
             C7933 * C280 - C7934 * C263 - C7933 * C281 + C50872 * C293 +
             C7931 * C278 - C7932 * C262 - C7931 * C279 + C50871 * C292) *
                C50719 * C50757 +
            (C8480 + C8479 + C8478) * C50719 * C50843) *
               C50621 * C50657) *
              C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
              C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
              C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                 C50719 * C50843 +
             (C8156 + C8157 + C8158) * C50719 * C50757) *
                C50831 -
            ((C8857 + C8858 + C8859) * C50719 * C50757 +
             (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
              C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
              C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                 C50719 * C50843) *
                C50685) *
               C50830 +
           (((C8859 + C8858 + C8857) * C50719 * C50843 +
             (C7931 * C1443 - C7932 * C1436 - C7931 * C1444 + C50871 * C1448 +
              C7933 * C1441 - C7934 * C1435 - C7933 * C1442 + C50872 * C1447 +
              C7935 * C1439 - C7936 * C1434 - C7935 * C1440 + C7928 * C1446) *
                 C50719 * C50757) *
                C50685 -
            ((C8159 + C8160 + C8161) * C50719 * C50757 +
             (C8158 + C8157 + C8156) * C50719 * C50843) *
                C50831) *
               C50657) *
              C254 +
          ((((C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429 +
              C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
              C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427) *
                 C50719 * C50843 +
             (C8860 + C8861 + C8862) * C50719 * C50757) *
                C50685 -
            ((C8164 + C8163 + C8162) * C50719 * C50757 +
             (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
              C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
              C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                 C50719 * C50843) *
                C50831) *
               C50830 +
           (((C8162 + C8163 + C8164) * C50719 * C50843 +
             (C8165 + C8166 + C8167) * C50719 * C50757) *
                C50831 -
            ((C7935 * C1437 - C7936 * C1433 - C7935 * C1438 + C7928 * C1445 +
              C7933 * C1439 - C7934 * C1434 - C7933 * C1440 + C50872 * C1446 +
              C7931 * C1441 - C7932 * C1435 - C7931 * C1442 + C50871 * C1447) *
                 C50719 * C50757 +
             (C8862 + C8861 + C8860) * C50719 * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50621 * C251 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C50621 * C252 +
           ((C8161 + C8160 + C8159) * C50719 * C50843 +
            (C7931 * C982 - C7932 * C975 - C7931 * C983 + C50871 * C987 +
             C7933 * C980 - C7934 * C974 - C7933 * C981 + C50872 * C986 +
             C7935 * C978 - C7936 * C973 - C7935 * C979 + C7928 * C985) *
                C50719 * C50757) *
               C50621 * C253) *
              C254 +
          (((C8162 + C8163 + C8164) * C50719 * C50843 +
            (C8165 + C8166 + C8167) * C50719 * C50757) *
               C50621 * C252 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C50621 * C251 -
           ((C7935 * C976 - C7936 * C972 - C7935 * C977 + C7928 * C984 +
             C7933 * C978 - C7934 * C973 - C7933 * C979 + C50872 * C985 +
             C7931 * C980 - C7932 * C974 - C7931 * C981 + C50871 * C986) *
                C50719 * C50757 +
            (C8167 + C8166 + C8165) * C50719 * C50843) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50719 * C50843 +
           (C7931 * C272 - C7932 * C259 - C7931 * C273 + C50871 * C289 +
            C7933 * C270 - C7934 * C258 - C7933 * C271 + C50872 * C288 +
            C7935 * C268 - C7936 * C257 - C7935 * C269 + C7928 * C287) *
               C50719 * C50757) *
              C50621 * C50605 * C113 -
          ((C7935 * C266 - C7936 * C256 - C7935 * C267 + C7928 * C286 +
            C7933 * C268 - C7934 * C257 - C7933 * C269 + C50872 * C287 +
            C7931 * C270 - C7932 * C258 - C7931 * C271 + C50871 * C288) *
               C50719 * C50757 +
           (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
            C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
            C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
               C50719 * C50843) *
              C50621 * C50605 * C114 +
          ((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
            C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
            C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
               C50719 * C50843 +
           (C7931 * C268 - C7932 * C257 - C7931 * C269 + C50871 * C287 +
            C7933 * C266 - C7934 * C256 - C7933 * C267 + C50872 * C286 +
            C7935 * C282 - C7936 * C264 - C7935 * C283 + C7928 * C294) *
               C50719 * C50757) *
              C50621 * C50605 * C115 -
          ((C7935 * C541 - C7936 * C540 - C7935 * C542 + C7928 * C543 +
            C7933 * C282 - C7934 * C264 - C7933 * C283 + C50872 * C294 +
            C7931 * C266 - C7932 * C256 - C7931 * C267 + C50871 * C286) *
               C50719 * C50757 +
           (C7935 * C142 - C7936 * C130 - C7935 * C143 + C7928 * C151 +
            C7933 * C140 - C7934 * C129 - C7933 * C141 + C50872 * C150 +
            C7931 * C138 - C7932 * C128 - C7931 * C139 + C50871 * C149) *
               C50719 * C50843) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C394 -
           ((C7935 * C787 - C7936 * C780 - C7935 * C788 + C7928 * C795 +
             C7933 * C785 - C7934 * C779 - C7933 * C786 + C50872 * C794 +
             C7931 * C783 - C7932 * C778 - C7931 * C784 + C50871 * C793) *
                C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C395 +
           ((C7931 * C415 - C7932 * C401 - C7931 * C416 + C50871 * C431 +
             C7933 * C417 - C7934 * C402 - C7933 * C418 + C50872 * C432 +
             C7935 * C419 - C7936 * C403 - C7935 * C420 + C7928 * C433) *
                C50719 * C50843 +
            (C7931 * C1096 - C7932 * C1089 - C7931 * C1097 + C50871 * C1101 +
             C7933 * C1094 - C7934 * C1088 - C7933 * C1095 + C50872 * C1100 +
             C7935 * C1092 - C7936 * C1087 - C7935 * C1093 + C7928 * C1099) *
                C50719 * C50757) *
               C396) *
              C50605 * C254 +
          (((C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429 +
             C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
             C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427) *
                C50719 * C50843 +
            (C7931 * C785 - C7932 * C779 - C7931 * C786 + C50871 * C794 +
             C7933 * C787 - C7934 * C780 - C7933 * C788 + C50872 * C795 +
             C7935 * C789 - C7936 * C781 - C7935 * C790 + C7928 * C796) *
                C50719 * C50757) *
               C395 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C394 -
           ((C7935 * C1090 - C7936 * C1086 - C7935 * C1091 + C7928 * C1098 +
             C7933 * C1092 - C7934 * C1087 - C7933 * C1093 + C50872 * C1099 +
             C7931 * C1094 - C7932 * C1088 - C7931 * C1095 + C50871 * C1100) *
                C50719 * C50757 +
            (C7935 * C421 - C7936 * C404 - C7935 * C422 + C7928 * C434 +
             C7933 * C419 - C7934 * C403 - C7933 * C420 + C50872 * C433 +
             C7931 * C417 - C7932 * C402 - C7931 * C418 + C50871 * C432) *
                C50719 * C50843) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50831 -
           ((C7935 * C787 - C7936 * C780 - C7935 * C788 + C7928 * C795 +
             C7933 * C785 - C7934 * C779 - C7933 * C786 + C50872 * C794 +
             C7931 * C783 - C7932 * C778 - C7931 * C784 + C50871 * C793) *
                C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C50685) *
              C50605 * C50873 +
          (((C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429 +
             C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
             C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427) *
                C50719 * C50843 +
            (C7931 * C785 - C7932 * C779 - C7931 * C786 + C50871 * C794 +
             C7933 * C787 - C7934 * C780 - C7933 * C788 + C50872 * C795 +
             C7935 * C789 - C7936 * C781 - C7935 * C790 + C7928 * C796) *
                C50719 * C50757) *
               C50685 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C50831) *
              C50605 * C50874 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50719 * C50843 +
            (C8478 + C8479 + C8480) * C50719 * C50757) *
               C50831 -
           ((C7935 * C791 - C7936 * C782 - C7935 * C792 + C7928 * C797 +
             C7933 * C789 - C7934 * C781 - C7933 * C790 + C50872 * C796 +
             C7931 * C787 - C7932 * C780 - C7931 * C788 + C50871 * C795) *
                C50719 * C50757 +
            (C7935 * C423 - C7936 * C405 - C7935 * C424 + C7928 * C435 +
             C7933 * C407 - C7934 * C397 - C7933 * C408 + C50872 * C427 +
             C7931 * C409 - C7932 * C398 - C7931 * C410 + C50871 * C428) *
                C50719 * C50843) *
               C50685) *
              C50605 * C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50719 * C50843 +
           (C7931 * C272 - C7932 * C259 - C7931 * C273 + C50871 * C289 +
            C7933 * C270 - C7934 * C258 - C7933 * C271 + C50872 * C288 +
            C7935 * C268 - C7936 * C257 - C7935 * C269 + C7928 * C287) *
               C50719 * C50757) *
              C50621 * C50605 * C113 -
          ((C7935 * C266 - C7936 * C256 - C7935 * C267 + C7928 * C286 +
            C7933 * C268 - C7934 * C257 - C7933 * C269 + C50872 * C287 +
            C7931 * C270 - C7932 * C258 - C7931 * C271 + C50871 * C288) *
               C50719 * C50757 +
           (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
            C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
            C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
               C50719 * C50843) *
              C50621 * C50605 * C114 +
          ((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
            C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
            C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
               C50719 * C50843 +
           (C7931 * C268 - C7932 * C257 - C7931 * C269 + C50871 * C287 +
            C7933 * C266 - C7934 * C256 - C7933 * C267 + C50872 * C286 +
            C7935 * C282 - C7936 * C264 - C7935 * C283 + C7928 * C294) *
               C50719 * C50757) *
              C50621 * C50605 * C115 -
          ((C7935 * C541 - C7936 * C540 - C7935 * C542 + C7928 * C543 +
            C7933 * C282 - C7934 * C264 - C7933 * C283 + C50872 * C294 +
            C7931 * C266 - C7932 * C256 - C7931 * C267 + C50871 * C286) *
               C50719 * C50757 +
           (C7935 * C142 - C7936 * C130 - C7935 * C143 + C7928 * C151 +
            C7933 * C140 - C7934 * C129 - C7933 * C141 + C50872 * C150 +
            C7931 * C138 - C7932 * C128 - C7931 * C139 + C50871 * C149) *
               C50719 * C50843) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50621 * C251 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C50621 * C252 +
           ((C8161 + C8160 + C8159) * C50719 * C50843 +
            (C7931 * C982 - C7932 * C975 - C7931 * C983 + C50871 * C987 +
             C7933 * C980 - C7934 * C974 - C7933 * C981 + C50872 * C986 +
             C7935 * C978 - C7936 * C973 - C7935 * C979 + C7928 * C985) *
                C50719 * C50757) *
               C50621 * C253) *
              C254 +
          (((C8162 + C8163 + C8164) * C50719 * C50843 +
            (C8165 + C8166 + C8167) * C50719 * C50757) *
               C50621 * C252 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C50621 * C251 -
           ((C7935 * C976 - C7936 * C972 - C7935 * C977 + C7928 * C984 +
             C7933 * C978 - C7934 * C973 - C7933 * C979 + C50872 * C985 +
             C7931 * C980 - C7932 * C974 - C7931 * C981 + C50871 * C986) *
                C50719 * C50757 +
            (C8167 + C8166 + C8165) * C50719 * C50843) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50621 * C50875 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C50621 * C50876 +
           ((C8161 + C8160 + C8159) * C50719 * C50843 +
            (C9125 + C9126 + C9127) * C50719 * C50757) *
               C50621 * C1202) *
              C50822 +
          (((C8162 + C8163 + C8164) * C50719 * C50843 +
            (C8165 + C8166 + C8167) * C50719 * C50757) *
               C50621 * C50876 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C50621 * C50875 -
           ((C7935 * C976 - C7936 * C972 - C7935 * C977 + C7928 * C984 +
             C7933 * C978 - C7934 * C973 - C7933 * C979 + C50872 * C985 +
             C7931 * C980 - C7932 * C974 - C7931 * C981 + C50871 * C986) *
                C50719 * C50757 +
            (C8167 + C8166 + C8165) * C50719 * C50843) *
               C50621 * C1202) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50831 -
           ((C8857 + C8858 + C8859) * C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C50685) *
              C50875 +
          (((C8859 + C8858 + C8857) * C50719 * C50843 +
            (C9799 + C9800 + C9801) * C50719 * C50757) *
               C50685 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C50831) *
              C50876 +
          (((C8161 + C8160 + C8159) * C50719 * C50843 +
            (C9125 + C9126 + C9127) * C50719 * C50757) *
               C50831 -
           ((C7935 * C3094 - C7936 * C3089 - C7935 * C3095 + C7928 * C3098 +
             C7933 * C3092 - C7934 * C3088 - C7933 * C3093 + C50872 * C3097 +
             C7931 * C3090 - C7932 * C3087 - C7931 * C3091 + C50871 * C3096) *
                C50719 * C50757 +
            (C9801 + C9800 + C9799) * C50719 * C50843) *
               C50685) *
              C1202) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50719 * C50843 +
           (C8156 + C8157 + C8158) * C50719 * C50757) *
              C50621 * C967 -
          ((C8159 + C8160 + C8161) * C50719 * C50757 +
           (C8158 + C8157 + C8156) * C50719 * C50843) *
              C50621 * C968 +
          ((C8161 + C8160 + C8159) * C50719 * C50843 +
           (C9125 + C9126 + C9127) * C50719 * C50757) *
              C50621 * C969 -
          ((C7935 * C2322 - C7936 * C2317 - C7935 * C2323 + C7928 * C2326 +
            C7933 * C2320 - C7934 * C2316 - C7933 * C2321 + C50872 * C2325 +
            C7931 * C2318 - C7932 * C2315 - C7931 * C2319 + C50871 * C2324) *
               C50719 * C50757 +
           (C9127 + C9126 + C9125) * C50719 * C50843) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50621 * C896 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C50621 * C50657) *
              C898 +
          (((C8162 + C8163 + C8164) * C50719 * C50843 +
            (C8165 + C8166 + C8167) * C50719 * C50757) *
               C50621 * C50657 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C50621 * C896) *
              C899 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50719 * C50843 +
            (C8478 + C8479 + C8480) * C50719 * C50757) *
               C50621 * C896 -
           ((C7935 * C284 - C7936 * C265 - C7935 * C285 + C7928 * C295 +
             C7933 * C280 - C7934 * C263 - C7933 * C281 + C50872 * C293 +
             C7931 * C278 - C7932 * C262 - C7931 * C279 + C50871 * C292) *
                C50719 * C50757 +
            (C8480 + C8479 + C8478) * C50719 * C50843) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C394 -
           ((C8857 + C8858 + C8859) * C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C395 +
           ((C7931 * C415 - C7932 * C401 - C7931 * C416 + C50871 * C431 +
             C7933 * C417 - C7934 * C402 - C7933 * C418 + C50872 * C432 +
             C7935 * C419 - C7936 * C403 - C7935 * C420 + C7928 * C433) *
                C50719 * C50843 +
            (C9292 + C9293 + C9294) * C50719 * C50757) *
               C396) *
              C896 +
          (((C8859 + C8858 + C8857) * C50719 * C50843 +
            (C7931 * C1443 - C7932 * C1436 - C7931 * C1444 + C50871 * C1448 +
             C7933 * C1441 - C7934 * C1435 - C7933 * C1442 + C50872 * C1447 +
             C7935 * C1439 - C7936 * C1434 - C7935 * C1440 + C7928 * C1446) *
                C50719 * C50757) *
               C395 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C394 -
           ((C7935 * C2568 - C7936 * C2563 - C7935 * C2569 + C7928 * C2572 +
             C7933 * C2566 - C7934 * C2562 - C7933 * C2567 + C50872 * C2571 +
             C7931 * C2564 - C7932 * C2561 - C7931 * C2565 + C50871 * C2570) *
                C50719 * C50757 +
            (C9294 + C9293 + C9292) * C50719 * C50843) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
              C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
              C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                 C50719 * C50843 +
             (C8156 + C8157 + C8158) * C50719 * C50757) *
                C50831 -
            ((C8857 + C8858 + C8859) * C50719 * C50757 +
             (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
              C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
              C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                 C50719 * C50843) *
                C50685) *
               C896 +
           (((C8859 + C8858 + C8857) * C50719 * C50843 +
             (C7931 * C1443 - C7932 * C1436 - C7931 * C1444 + C50871 * C1448 +
              C7933 * C1441 - C7934 * C1435 - C7933 * C1442 + C50872 * C1447 +
              C7935 * C1439 - C7936 * C1434 - C7935 * C1440 + C7928 * C1446) *
                 C50719 * C50757) *
                C50685 -
            ((C8159 + C8160 + C8161) * C50719 * C50757 +
             (C8158 + C8157 + C8156) * C50719 * C50843) *
                C50831) *
               C50657) *
              C50822 +
          ((((C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429 +
              C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
              C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427) *
                 C50719 * C50843 +
             (C8860 + C8861 + C8862) * C50719 * C50757) *
                C50685 -
            ((C8164 + C8163 + C8162) * C50719 * C50757 +
             (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
              C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
              C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                 C50719 * C50843) *
                C50831) *
               C896 +
           (((C8162 + C8163 + C8164) * C50719 * C50843 +
             (C8165 + C8166 + C8167) * C50719 * C50757) *
                C50831 -
            ((C7935 * C1437 - C7936 * C1433 - C7935 * C1438 + C7928 * C1445 +
              C7933 * C1439 - C7934 * C1434 - C7933 * C1440 + C50872 * C1446 +
              C7931 * C1441 - C7932 * C1435 - C7931 * C1442 + C50871 * C1447) *
                 C50719 * C50757 +
             (C8862 + C8861 + C8860) * C50719 * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50621 * C896 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C50621 * C50657) *
              C898 +
          (((C8162 + C8163 + C8164) * C50719 * C50843 +
            (C8165 + C8166 + C8167) * C50719 * C50757) *
               C50621 * C50657 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C50621 * C896) *
              C899 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50719 * C50843 +
            (C8478 + C8479 + C8480) * C50719 * C50757) *
               C50621 * C896 -
           ((C7935 * C284 - C7936 * C265 - C7935 * C285 + C7928 * C295 +
             C7933 * C280 - C7934 * C263 - C7933 * C281 + C50872 * C293 +
             C7931 * C278 - C7932 * C262 - C7931 * C279 + C50871 * C292) *
                C50719 * C50757 +
            (C8480 + C8479 + C8478) * C50719 * C50843) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50719 * C50843 +
           (C8156 + C8157 + C8158) * C50719 * C50757) *
              C50621 * C967 -
          ((C8159 + C8160 + C8161) * C50719 * C50757 +
           (C8158 + C8157 + C8156) * C50719 * C50843) *
              C50621 * C968 +
          ((C8161 + C8160 + C8159) * C50719 * C50843 +
           (C9125 + C9126 + C9127) * C50719 * C50757) *
              C50621 * C969 -
          ((C7935 * C2322 - C7936 * C2317 - C7935 * C2323 + C7928 * C2326 +
            C7933 * C2320 - C7934 * C2316 - C7933 * C2321 + C50872 * C2325 +
            C7931 * C2318 - C7932 * C2315 - C7931 * C2319 + C50871 * C2324) *
               C50719 * C50757 +
           (C9127 + C9126 + C9125) * C50719 * C50843) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
              C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
              C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                 C50719 * C50843 +
             (C8156 + C8157 + C8158) * C50719 * C50757) *
                C1547 -
            ((C8857 + C8858 + C8859) * C50719 * C50757 +
             (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
              C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
              C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                 C50719 * C50843) *
                C50685) *
               C50830 +
           (((C8859 + C8858 + C8857) * C50719 * C50843 +
             (C9799 + C9800 + C9801) * C50719 * C50757) *
                C50685 -
            ((C8159 + C8160 + C8161) * C50719 * C50757 +
             (C8158 + C8157 + C8156) * C50719 * C50843) *
                C1547) *
               C50657) *
              C50822 +
          ((((C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429 +
              C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
              C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427) *
                 C50719 * C50843 +
             (C8860 + C8861 + C8862) * C50719 * C50757) *
                C50685 -
            ((C8164 + C8163 + C8162) * C50719 * C50757 +
             (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
              C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
              C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                 C50719 * C50843) *
                C1547) *
               C50830 +
           (((C8162 + C8163 + C8164) * C50719 * C50843 +
             (C8165 + C8166 + C8167) * C50719 * C50757) *
                C1547 -
            ((C7935 * C1437 - C7936 * C1433 - C7935 * C1438 + C7928 * C1445 +
              C7933 * C1439 - C7934 * C1434 - C7933 * C1440 + C50872 * C1446 +
              C7931 * C1441 - C7932 * C1435 - C7931 * C1442 + C50871 * C1447) *
                 C50719 * C50757 +
             (C8862 + C8861 + C8860) * C50719 * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50877 -
           ((C8857 + C8858 + C8859) * C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C50878 +
           ((C7931 * C415 - C7932 * C401 - C7931 * C416 + C50871 * C431 +
             C7933 * C417 - C7934 * C402 - C7933 * C418 + C50872 * C432 +
             C7935 * C419 - C7936 * C403 - C7935 * C420 + C7928 * C433) *
                C50719 * C50843 +
            (C9292 + C9293 + C9294) * C50719 * C50757) *
               C1963) *
              C50830 +
          (((C8859 + C8858 + C8857) * C50719 * C50843 +
            (C9799 + C9800 + C9801) * C50719 * C50757) *
               C50878 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C50877 -
           ((C7935 * C2568 - C7936 * C2563 - C7935 * C2569 + C7928 * C2572 +
             C7933 * C2566 - C7934 * C2562 - C7933 * C2567 + C50872 * C2571 +
             C7931 * C2564 - C7932 * C2561 - C7931 * C2565 + C50871 * C2570) *
                C50719 * C50757 +
            (C9294 + C9293 + C9292) * C50719 * C50843) *
               C1963) *
              C50657) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C1547 -
           ((C8857 + C8858 + C8859) * C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C50685) *
              C251 +
          (((C8859 + C8858 + C8857) * C50719 * C50843 +
            (C9799 + C9800 + C9801) * C50719 * C50757) *
               C50685 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C1547) *
              C252 +
          (((C8161 + C8160 + C8159) * C50719 * C50843 +
            (C9125 + C9126 + C9127) * C50719 * C50757) *
               C1547 -
           ((C7935 * C3094 - C7936 * C3089 - C7935 * C3095 + C7928 * C3098 +
             C7933 * C3092 - C7934 * C3088 - C7933 * C3093 + C50872 * C3097 +
             C7931 * C3090 - C7932 * C3087 - C7931 * C3091 + C50871 * C3096) *
                C50719 * C50757 +
            (C9801 + C9800 + C9799) * C50719 * C50843) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C1547 -
           ((C8857 + C8858 + C8859) * C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C50685) *
              C50605 * C898 +
          (((C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429 +
             C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
             C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427) *
                C50719 * C50843 +
            (C8860 + C8861 + C8862) * C50719 * C50757) *
               C50685 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C1547) *
              C50605 * C899 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50719 * C50843 +
            (C8478 + C8479 + C8480) * C50719 * C50757) *
               C1547 -
           ((C7935 * C791 - C7936 * C782 - C7935 * C792 + C7928 * C797 +
             C7933 * C789 - C7934 * C781 - C7933 * C790 + C50872 * C796 +
             C7931 * C787 - C7932 * C780 - C7931 * C788 + C50871 * C795) *
                C50719 * C50757 +
            (C7935 * C423 - C7936 * C405 - C7935 * C424 + C7928 * C435 +
             C7933 * C407 - C7934 * C397 - C7933 * C408 + C50872 * C427 +
             C7931 * C409 - C7932 * C398 - C7931 * C410 + C50871 * C428) *
                C50719 * C50843) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50719 * C50843 +
           (C8156 + C8157 + C8158) * C50719 * C50757) *
              C1713 -
          ((C8857 + C8858 + C8859) * C50719 * C50757 +
           (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
            C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
            C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
               C50719 * C50843) *
              C1714 +
          ((C7931 * C415 - C7932 * C401 - C7931 * C416 + C50871 * C431 +
            C7933 * C417 - C7934 * C402 - C7933 * C418 + C50872 * C432 +
            C7935 * C419 - C7936 * C403 - C7935 * C420 + C7928 * C433) *
               C50719 * C50843 +
           (C9292 + C9293 + C9294) * C50719 * C50757) *
              C1715 -
          ((C7935 * C6013 - C7936 * C6012 - C7935 * C6014 + C7928 * C6015 +
            C7933 * C4513 - C7934 * C4507 - C7933 * C4514 + C50872 * C4519 +
            C7931 * C4515 - C7932 * C4508 - C7931 * C4516 + C50871 * C4520) *
               C50719 * C50757 +
           (C7935 * C1723 - C7936 * C1718 - C7935 * C1724 + C7928 * C1730 +
            C7933 * C1725 - C7934 * C1719 - C7933 * C1726 + C50872 * C1731 +
            C7931 * C1727 - C7932 * C1720 - C7931 * C1728 + C50871 * C1732) *
               C50719 * C50843) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C50877 -
           ((C8857 + C8858 + C8859) * C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C50878 +
           ((C7931 * C415 - C7932 * C401 - C7931 * C416 + C50871 * C431 +
             C7933 * C417 - C7934 * C402 - C7933 * C418 + C50872 * C432 +
             C7935 * C419 - C7936 * C403 - C7935 * C420 + C7928 * C433) *
                C50719 * C50843 +
            (C9292 + C9293 + C9294) * C50719 * C50757) *
               C1963) *
              C50605 * C50822 +
          (((C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429 +
             C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
             C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427) *
                C50719 * C50843 +
            (C8860 + C8861 + C8862) * C50719 * C50757) *
               C50878 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C50877 -
           ((C7935 * C1090 - C7936 * C1086 - C7935 * C1091 + C7928 * C1098 +
             C7933 * C1092 - C7934 * C1087 - C7933 * C1093 + C50872 * C1099 +
             C7931 * C1094 - C7932 * C1088 - C7931 * C1095 + C50871 * C1100) *
                C50719 * C50757 +
            (C7935 * C421 - C7936 * C404 - C7935 * C422 + C7928 * C434 +
             C7933 * C419 - C7934 * C403 - C7933 * C420 + C50872 * C433 +
             C7931 * C417 - C7932 * C402 - C7931 * C418 + C50871 * C432) *
                C50719 * C50843) *
               C1963) *
              C50605 * C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C1547 -
           ((C8857 + C8858 + C8859) * C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C50685) *
              C50605 * C898 +
          (((C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429 +
             C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
             C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427) *
                C50719 * C50843 +
            (C8860 + C8861 + C8862) * C50719 * C50757) *
               C50685 -
           ((C8164 + C8163 + C8162) * C50719 * C50757 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50719 * C50843) *
               C1547) *
              C50605 * C899 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50719 * C50843 +
            (C8478 + C8479 + C8480) * C50719 * C50757) *
               C1547 -
           ((C7935 * C791 - C7936 * C782 - C7935 * C792 + C7928 * C797 +
             C7933 * C789 - C7934 * C781 - C7933 * C790 + C50872 * C796 +
             C7931 * C787 - C7932 * C780 - C7931 * C788 + C50871 * C795) *
                C50719 * C50757 +
            (C7935 * C423 - C7936 * C405 - C7935 * C424 + C7928 * C435 +
             C7933 * C407 - C7934 * C397 - C7933 * C408 + C50872 * C427 +
             C7931 * C409 - C7932 * C398 - C7931 * C410 + C50871 * C428) *
                C50719 * C50843) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50719 * C50843 +
            (C8156 + C8157 + C8158) * C50719 * C50757) *
               C1547 -
           ((C8857 + C8858 + C8859) * C50719 * C50757 +
            (C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430) *
                C50719 * C50843) *
               C50685) *
              C251 +
          (((C8859 + C8858 + C8857) * C50719 * C50843 +
            (C9799 + C9800 + C9801) * C50719 * C50757) *
               C50685 -
           ((C8159 + C8160 + C8161) * C50719 * C50757 +
            (C8158 + C8157 + C8156) * C50719 * C50843) *
               C1547) *
              C252 +
          (((C8161 + C8160 + C8159) * C50719 * C50843 +
            (C9125 + C9126 + C9127) * C50719 * C50757) *
               C1547 -
           ((C7935 * C3094 - C7936 * C3089 - C7935 * C3095 + C7928 * C3098 +
             C7933 * C3092 - C7934 * C3088 - C7933 * C3093 + C50872 * C3097 +
             C7931 * C3090 - C7932 * C3087 - C7931 * C3091 + C50871 * C3096) *
                C50719 * C50757 +
            (C9801 + C9800 + C9799) * C50719 * C50843) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + (C3151 + C3150) * C50783) * C50757) *
               C50621 * C50830 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            ((C3150 + C3151) * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C50621 * C50657) *
              C50873 +
          ((((C2406 + C2407) * C50844 + (C3152 + C3153) * C50783) * C50843 +
            ((C2408 + C2409) * C50844 + (C3154 + C3155) * C50783) * C50757) *
               C50621 * C50657 -
           (((C3153 + C3152) * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C50621 * C50830) *
              C50874 +
          ((((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
              C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                 C50844 +
             (C5815 + C5816) * C50783) *
                C50843 +
            ((C2744 + C2745) * C50844 + (C14158 + C14159) * C50783) * C50757) *
               C50621 * C50830 -
           (((C2167 * C1437 - C2168 * C1433 - C2167 * C1438 + C50561 * C1445 +
              C2165 * C1439 - C2166 * C1434 - C2165 * C1440 + C2160 * C1446) *
                 C50783 +
             (C2747 + C2746) * C50844) *
                C50757 +
            ((C14159 + C14158) * C50783 + (C2745 + C2744) * C50844) * C50843) *
               C50621 * C50657) *
              C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
               C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                  C50844 +
              (C5485 + C5486) * C50783) *
                 C50843 +
             ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
                C50831 -
            ((C6437 * C50783 + C14613 * C50844) * C50757 +
             ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
                C50685) *
               C50830 +
           (((C14612 * C50844 + (C3602 + C3603) * C50783) * C50843 +
             ((C3149 + C3148) * C50844 + (C3604 + C3605) * C50783) * C50757) *
                C50685 -
            ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
             (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
                C50831) *
               C50657) *
              C254 +
          (((((C5491 + C5492) * C50844 + (C5493 + C5494) * C50783) * C50843 +
             (C14614 * C50844 + (C6029 + C6030) * C50783) * C50757) *
                C50685 -
            ((C14615 * C50783 + (C2407 + C2406) * C50844) * C50757 +
             ((C5492 + C5491) * C50783 +
              (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
               C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                  C50844) *
                 C50843) *
                C50831) *
               C50830 +
           ((((C2406 + C2407) * C50844 + C14614 * C50783) * C50843 +
             ((C2408 + C2409) * C50844 + (C3154 + C3155) * C50783) * C50757) *
                C50831 -
            (((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
               C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                  C50783 +
              (C3155 + C3154) * C50844) *
                 C50757 +
             ((C6030 + C6029) * C50783 + C14615 * C50844) * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + (C3151 + C3150) * C50783) * C50757) *
               C50621 * C251 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            ((C3150 + C3151) * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C50621 * C252 +
           ((C2412 * C50844 + (C3149 + C3148) * C50783) * C50843 +
            ((C2405 + C2404) * C50844 + (C4114 + C4115) * C50783) * C50757) *
               C50621 * C253) *
              C254 +
          ((((C2406 + C2407) * C50844 + (C3152 + C3153) * C50783) * C50843 +
            ((C2408 + C2409) * C50844 + (C3154 + C3155) * C50783) * C50757) *
               C50621 * C252 -
           (((C3153 + C3152) * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C50621 * C251 -
           (((C2167 * C3094 - C2168 * C3089 - C2167 * C3095 + C50561 * C3098 +
              C2165 * C3092 - C2166 * C3088 - C2165 * C3093 + C2160 * C3097) *
                 C50783 +
             (C2411 + C2410) * C50844) *
                C50757 +
            ((C3155 + C3154) * C50783 + C2413 * C50844) * C50843) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50844 +
            (C5485 + C5486) * C50783) *
               C50843 +
           ((C2400 + C2401) * C50844 + (C3151 + C3150) * C50783) * C50757) *
              C50621 * C50605 * C113 -
          (((C3153 + C3152) * C50783 + (C2407 + C2406) * C50844) * C50757 +
           ((C5492 + C5491) * C50783 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50844) *
               C50843) *
              C50621 * C50605 * C114 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50844 +
            (C5815 + C5816) * C50783) *
               C50843 +
           ((C2744 + C2745) * C50844 +
            (C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795 +
             C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796) *
                C50783) *
               C50757) *
              C50621 * C50605 * C115 -
          (((C2167 * C791 - C2168 * C782 - C2167 * C792 + C50561 * C797 +
             C2165 * C789 - C2166 * C781 - C2165 * C790 + C2160 * C796) *
                C50783 +
            (C2167 * C282 - C2168 * C264 - C2167 * C283 + C50561 * C294 +
             C2165 * C266 - C2166 * C256 - C2165 * C267 + C2160 * C286) *
                C50844) *
               C50757 +
           ((C2167 * C423 - C2168 * C405 - C2167 * C424 + C50561 * C435 +
             C2165 * C407 - C2166 * C397 - C2165 * C408 + C2160 * C427) *
                C50783 +
            (C2167 * C140 - C2168 * C129 - C2167 * C141 + C50561 * C150 +
             C2165 * C138 - C2166 * C128 - C2165 * C139 + C2160 * C149) *
                C50844) *
               C50843) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + (C3151 + C3150) * C50783) * C50757) *
               C394 -
           ((C6437 * C50783 + (C3150 + C3151) * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C395 +
           ((C5497 * C50844 + (C5490 + C5489) * C50783) * C50843 +
            ((C3602 + C3603) * C50844 + (C6442 + C6443) * C50783) * C50757) *
               C396) *
              C50605 * C254 +
          ((((C5491 + C5492) * C50844 + (C5493 + C5494) * C50783) * C50843 +
            ((C3152 + C3153) * C50844 + (C6029 + C6030) * C50783) * C50757) *
               C395 -
           (((C3153 + C3152) * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C394 -
           (((C2167 * C6013 - C2168 * C6012 - C2167 * C6014 + C50561 * C6015 +
              C2165 * C4513 - C2166 * C4507 - C2165 * C4514 + C2160 * C4519) *
                 C50783 +
             (C6030 + C6029) * C50844) *
                C50757 +
            ((C5496 + C5495) * C50783 + C5498 * C50844) * C50843) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + (C3151 + C3150) * C50783) * C50757) *
               C50831 -
           ((C6437 * C50783 + (C3150 + C3151) * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C50685) *
              C50605 * C50873 +
          ((((C5491 + C5492) * C50844 + (C5493 + C5494) * C50783) * C50843 +
            ((C3152 + C3153) * C50844 + (C6029 + C6030) * C50783) * C50757) *
               C50685 -
           (((C3153 + C3152) * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C50831) *
              C50605 * C50874 +
          ((((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
              C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                 C50844 +
             (C5815 + C5816) * C50783) *
                C50843 +
            ((C2744 + C2745) * C50844 + (C14158 + C14159) * C50783) * C50757) *
               C50831 -
           (((C2167 * C1090 - C2168 * C1086 - C2167 * C1091 + C50561 * C1098 +
              C2165 * C1092 - C2166 * C1087 - C2165 * C1093 + C2160 * C1099) *
                 C50783 +
             (C14159 + C14158) * C50844) *
                C50757 +
            ((C5818 + C5817) * C50783 + (C5816 + C5815) * C50844) * C50843) *
               C50685) *
              C50605 * C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50844 +
            (C5485 + C5486) * C50783) *
               C50843 +
           ((C2400 + C2401) * C50844 + (C3151 + C3150) * C50783) * C50757) *
              C50621 * C50605 * C113 -
          (((C3153 + C3152) * C50783 + (C2407 + C2406) * C50844) * C50757 +
           ((C5492 + C5491) * C50783 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50844) *
               C50843) *
              C50621 * C50605 * C114 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50844 +
            (C5815 + C5816) * C50783) *
               C50843 +
           ((C2744 + C2745) * C50844 +
            (C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795 +
             C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796) *
                C50783) *
               C50757) *
              C50621 * C50605 * C115 -
          (((C2167 * C791 - C2168 * C782 - C2167 * C792 + C50561 * C797 +
             C2165 * C789 - C2166 * C781 - C2165 * C790 + C2160 * C796) *
                C50783 +
            (C2167 * C282 - C2168 * C264 - C2167 * C283 + C50561 * C294 +
             C2165 * C266 - C2166 * C256 - C2165 * C267 + C2160 * C286) *
                C50844) *
               C50757 +
           ((C2167 * C423 - C2168 * C405 - C2167 * C424 + C50561 * C435 +
             C2165 * C407 - C2166 * C397 - C2165 * C408 + C2160 * C427) *
                C50783 +
            (C2167 * C140 - C2168 * C129 - C2167 * C141 + C50561 * C150 +
             C2165 * C138 - C2166 * C128 - C2165 * C139 + C2160 * C149) *
                C50844) *
               C50843) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + (C3151 + C3150) * C50783) * C50757) *
               C50621 * C251 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            ((C3150 + C3151) * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C50621 * C252 +
           ((C2412 * C50844 + (C3149 + C3148) * C50783) * C50843 +
            ((C2405 + C2404) * C50844 + (C4114 + C4115) * C50783) * C50757) *
               C50621 * C253) *
              C254 +
          ((((C2406 + C2407) * C50844 + (C3152 + C3153) * C50783) * C50843 +
            ((C2408 + C2409) * C50844 + (C3154 + C3155) * C50783) * C50757) *
               C50621 * C252 -
           (((C3153 + C3152) * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C50621 * C251 -
           (((C2167 * C3094 - C2168 * C3089 - C2167 * C3095 + C50561 * C3098 +
              C2165 * C3092 - C2166 * C3088 - C2165 * C3093 + C2160 * C3097) *
                 C50783 +
             (C2411 + C2410) * C50844) *
                C50757 +
            ((C3155 + C3154) * C50783 + C2413 * C50844) * C50843) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C50621 * C50875 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C50621 * C50876 +
           ((C2412 * C50844 + (C3149 + C3148) * C50783) * C50843 +
            ((C2405 + C2404) * C50844 + (C4114 + C4115) * C50783) * C50757) *
               C50621 * C1202) *
              C50822 +
          ((((C2406 + C2407) * C50844 + C14614 * C50783) * C50843 +
            ((C2408 + C2409) * C50844 + (C3154 + C3155) * C50783) * C50757) *
               C50621 * C50876 -
           ((C14615 * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C50621 * C50875 -
           (((C2167 * C3094 - C2168 * C3089 - C2167 * C3095 + C50561 * C3098 +
              C2165 * C3092 - C2166 * C3088 - C2165 * C3093 + C2160 * C3097) *
                 C50783 +
             (C2411 + C2410) * C50844) *
                C50757 +
            ((C3155 + C3154) * C50783 + C2413 * C50844) * C50843) *
               C50621 * C1202) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C50831 -
           ((C6437 * C50783 + C14613 * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C50685) *
              C50875 +
          (((C14612 * C50844 + C15134 * C50783) * C50843 +
            (C15781 * C50844 + (C3604 + C3605) * C50783) * C50757) *
               C50685 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C50831) *
              C50876 +
          (((C2412 * C50844 + C15781 * C50783) * C50843 +
            ((C2405 + C2404) * C50844 + (C4114 + C4115) * C50783) * C50757) *
               C50831 -
           (((C2167 * C3571 - C2168 * C3569 - C2167 * C3572 + C50561 * C3575 +
              C2165 * C3573 - C2166 * C3570 - C2165 * C3574 + C2160 * C3576) *
                 C50783 +
             (C4115 + C4114) * C50844) *
                C50757 +
            ((C3605 + C3604) * C50783 + C4100 * C50844) * C50843) *
               C50685) *
              C1202) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50844 +
            (C5485 + C5486) * C50783) *
               C50843 +
           ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
              C50621 * C967 -
          ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
           (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
              C50621 * C968 +
          ((C2412 * C50844 + (C3149 + C3148) * C50783) * C50843 +
           ((C2405 + C2404) * C50844 + (C4114 + C4115) * C50783) * C50757) *
              C50621 * C969 -
          (((C2167 * C4093 - C2168 * C4091 - C2167 * C4094 + C50561 * C4097 +
             C2165 * C4095 - C2166 * C4092 - C2165 * C4096 + C2160 * C4098) *
                C50783 +
            (C3423 + C3422) * C50844) *
               C50757 +
           ((C4115 + C4114) * C50783 + C3408 * C50844) * C50843) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C50621 * C896 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C50621 * C50657) *
              C898 +
          ((((C2406 + C2407) * C50844 + C14614 * C50783) * C50843 +
            ((C2408 + C2409) * C50844 + (C3154 + C3155) * C50783) * C50757) *
               C50621 * C50657 -
           ((C14615 * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C50621 * C896) *
              C899 +
          ((((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
              C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                 C50844 +
             (C5815 + C5816) * C50783) *
                C50843 +
            ((C2744 + C2745) * C50844 + (C14158 + C14159) * C50783) * C50757) *
               C50621 * C896 -
           (((C2167 * C1437 - C2168 * C1433 - C2167 * C1438 + C50561 * C1445 +
              C2165 * C1439 - C2166 * C1434 - C2165 * C1440 + C2160 * C1446) *
                 C50783 +
             (C2747 + C2746) * C50844) *
                C50757 +
            ((C14159 + C14158) * C50783 + (C2745 + C2744) * C50844) * C50843) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C394 -
           ((C6437 * C50783 + C14613 * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C395 +
           ((C5497 * C50844 + (C5490 + C5489) * C50783) * C50843 +
            (C15134 * C50844 + (C6442 + C6443) * C50783) * C50757) *
               C396) *
              C896 +
          (((C14612 * C50844 + C15134 * C50783) * C50843 +
            ((C3149 + C3148) * C50844 + (C3604 + C3605) * C50783) * C50757) *
               C395 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C394 -
           (((C2167 * C4509 - C2168 * C4505 - C2167 * C4510 + C50561 * C4517 +
              C2165 * C4511 - C2166 * C4506 - C2165 * C4512 + C2160 * C4518) *
                 C50783 +
             (C3605 + C3604) * C50844) *
                C50757 +
            ((C6443 + C6442) * C50783 + C6437 * C50844) * C50843) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
               C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                  C50844 +
              (C5485 + C5486) * C50783) *
                 C50843 +
             ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
                C50831 -
            ((C6437 * C50783 + C14613 * C50844) * C50757 +
             ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
                C50685) *
               C896 +
           (((C14612 * C50844 + C15134 * C50783) * C50843 +
             ((C3149 + C3148) * C50844 + (C3604 + C3605) * C50783) * C50757) *
                C50685 -
            ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
             (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
                C50831) *
               C50657) *
              C50822 +
          (((((C5491 + C5492) * C50844 + (C5493 + C5494) * C50783) * C50843 +
             (C14614 * C50844 + (C6029 + C6030) * C50783) * C50757) *
                C50685 -
            ((C14615 * C50783 + (C2407 + C2406) * C50844) * C50757 +
             ((C5492 + C5491) * C50783 +
              (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
               C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                  C50844) *
                 C50843) *
                C50831) *
               C896 +
           ((((C2406 + C2407) * C50844 + C14614 * C50783) * C50843 +
             ((C2408 + C2409) * C50844 + (C3154 + C3155) * C50783) * C50757) *
                C50831 -
            (((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
               C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                  C50783 +
              (C3155 + C3154) * C50844) *
                 C50757 +
             ((C6030 + C6029) * C50783 + C14615 * C50844) * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C50621 * C896 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C50621 * C50657) *
              C898 +
          ((((C2406 + C2407) * C50844 + C14614 * C50783) * C50843 +
            ((C2408 + C2409) * C50844 + (C3154 + C3155) * C50783) * C50757) *
               C50621 * C50657 -
           ((C14615 * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C50621 * C896) *
              C899 +
          ((((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
              C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                 C50844 +
             (C5815 + C5816) * C50783) *
                C50843 +
            ((C2744 + C2745) * C50844 + (C14158 + C14159) * C50783) * C50757) *
               C50621 * C896 -
           (((C2167 * C1437 - C2168 * C1433 - C2167 * C1438 + C50561 * C1445 +
              C2165 * C1439 - C2166 * C1434 - C2165 * C1440 + C2160 * C1446) *
                 C50783 +
             (C2747 + C2746) * C50844) *
                C50757 +
            ((C14159 + C14158) * C50783 + (C2745 + C2744) * C50844) * C50843) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50844 +
            (C5485 + C5486) * C50783) *
               C50843 +
           ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
              C50621 * C967 -
          ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
           (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
              C50621 * C968 +
          ((C2412 * C50844 + (C3149 + C3148) * C50783) * C50843 +
           ((C2405 + C2404) * C50844 + (C4114 + C4115) * C50783) * C50757) *
              C50621 * C969 -
          (((C2167 * C4093 - C2168 * C4091 - C2167 * C4094 + C50561 * C4097 +
             C2165 * C4095 - C2166 * C4092 - C2165 * C4096 + C2160 * C4098) *
                C50783 +
            (C3423 + C3422) * C50844) *
               C50757 +
           ((C4115 + C4114) * C50783 + C3408 * C50844) * C50843) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
               C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                  C50844 +
              (C5485 + C5486) * C50783) *
                 C50843 +
             ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
                C1547 -
            ((C6437 * C50783 + C14613 * C50844) * C50757 +
             ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
                C50685) *
               C50830 +
           (((C14612 * C50844 + C15134 * C50783) * C50843 +
             (C15781 * C50844 + (C3604 + C3605) * C50783) * C50757) *
                C50685 -
            ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
             (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
                C1547) *
               C50657) *
              C50822 +
          (((((C5491 + C5492) * C50844 + (C5493 + C5494) * C50783) * C50843 +
             (C14614 * C50844 + (C6029 + C6030) * C50783) * C50757) *
                C50685 -
            ((C14615 * C50783 + (C2407 + C2406) * C50844) * C50757 +
             ((C5492 + C5491) * C50783 +
              (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
               C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                  C50844) *
                 C50843) *
                C1547) *
               C50830 +
           ((((C2406 + C2407) * C50844 + C14614 * C50783) * C50843 +
             ((C2408 + C2409) * C50844 + (C3154 + C3155) * C50783) * C50757) *
                C1547 -
            (((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
               C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                  C50783 +
              (C3155 + C3154) * C50844) *
                 C50757 +
             ((C6030 + C6029) * C50783 + C14615 * C50844) * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C50877 -
           ((C6437 * C50783 + C14613 * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C50878 +
           ((C5497 * C50844 + (C5490 + C5489) * C50783) * C50843 +
            (C15134 * C50844 + (C6442 + C6443) * C50783) * C50757) *
               C1963) *
              C50830 +
          (((C14612 * C50844 + C15134 * C50783) * C50843 +
            (C15781 * C50844 + (C3604 + C3605) * C50783) * C50757) *
               C50878 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C50877 -
           (((C2167 * C4509 - C2168 * C4505 - C2167 * C4510 + C50561 * C4517 +
              C2165 * C4511 - C2166 * C4506 - C2165 * C4512 + C2160 * C4518) *
                 C50783 +
             (C3605 + C3604) * C50844) *
                C50757 +
            ((C6443 + C6442) * C50783 + C6437 * C50844) * C50843) *
               C1963) *
              C50657) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C1547 -
           ((C6437 * C50783 + C14613 * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C50685) *
              C251 +
          (((C14612 * C50844 + C15134 * C50783) * C50843 +
            (C15781 * C50844 + (C3604 + C3605) * C50783) * C50757) *
               C50685 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C1547) *
              C252 +
          (((C2412 * C50844 + C15781 * C50783) * C50843 +
            ((C2405 + C2404) * C50844 + (C4114 + C4115) * C50783) * C50757) *
               C1547 -
           (((C2167 * C3571 - C2168 * C3569 - C2167 * C3572 + C50561 * C3575 +
              C2165 * C3573 - C2166 * C3570 - C2165 * C3574 + C2160 * C3576) *
                 C50783 +
             (C4115 + C4114) * C50844) *
                C50757 +
            ((C3605 + C3604) * C50783 + C4100 * C50844) * C50843) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C1547 -
           ((C6437 * C50783 + C14613 * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C50685) *
              C50605 * C898 +
          ((((C5491 + C5492) * C50844 + (C5493 + C5494) * C50783) * C50843 +
            (C14614 * C50844 + (C6029 + C6030) * C50783) * C50757) *
               C50685 -
           ((C14615 * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C1547) *
              C50605 * C899 +
          ((((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
              C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                 C50844 +
             (C5815 + C5816) * C50783) *
                C50843 +
            ((C2744 + C2745) * C50844 + (C14158 + C14159) * C50783) * C50757) *
               C1547 -
           (((C2167 * C1090 - C2168 * C1086 - C2167 * C1091 + C50561 * C1098 +
              C2165 * C1092 - C2166 * C1087 - C2165 * C1093 + C2160 * C1099) *
                 C50783 +
             (C14159 + C14158) * C50844) *
                C50757 +
            ((C5818 + C5817) * C50783 + (C5816 + C5815) * C50844) * C50843) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50844 +
            (C5485 + C5486) * C50783) *
               C50843 +
           ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
              C1713 -
          ((C6437 * C50783 + C14613 * C50844) * C50757 +
           ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
              C1714 +
          ((C5497 * C50844 + (C5490 + C5489) * C50783) * C50843 +
           (C15134 * C50844 + (C6442 + C6443) * C50783) * C50757) *
              C1715 -
          (((C2167 * C6422 - C2168 * C6420 - C2167 * C6423 + C50561 * C6426 +
             C2165 * C6424 - C2166 * C6421 - C2165 * C6425 + C2160 * C6427) *
                C50783 +
            (C6443 + C6442) * C50844) *
               C50757 +
           ((C7342 + C7341) * C50783 + C7328 * C50844) * C50843) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C50877 -
           ((C6437 * C50783 + C14613 * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C50878 +
           ((C5497 * C50844 + (C5490 + C5489) * C50783) * C50843 +
            (C15134 * C50844 + (C6442 + C6443) * C50783) * C50757) *
               C1963) *
              C50605 * C50822 +
          ((((C5491 + C5492) * C50844 + (C5493 + C5494) * C50783) * C50843 +
            (C14614 * C50844 + (C6029 + C6030) * C50783) * C50757) *
               C50878 -
           ((C14615 * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C50877 -
           (((C2167 * C6013 - C2168 * C6012 - C2167 * C6014 + C50561 * C6015 +
              C2165 * C4513 - C2166 * C4507 - C2165 * C4514 + C2160 * C4519) *
                 C50783 +
             (C6030 + C6029) * C50844) *
                C50757 +
            ((C5496 + C5495) * C50783 + C5498 * C50844) * C50843) *
               C1963) *
              C50605 * C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C1547 -
           ((C6437 * C50783 + C14613 * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C50685) *
              C50605 * C898 +
          ((((C5491 + C5492) * C50844 + (C5493 + C5494) * C50783) * C50843 +
            (C14614 * C50844 + (C6029 + C6030) * C50783) * C50757) *
               C50685 -
           ((C14615 * C50783 + (C2407 + C2406) * C50844) * C50757 +
            ((C5492 + C5491) * C50783 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50844) *
                C50843) *
               C1547) *
              C50605 * C899 +
          ((((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
              C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                 C50844 +
             (C5815 + C5816) * C50783) *
                C50843 +
            ((C2744 + C2745) * C50844 + (C14158 + C14159) * C50783) * C50757) *
               C1547 -
           (((C2167 * C1090 - C2168 * C1086 - C2167 * C1091 + C50561 * C1098 +
              C2165 * C1092 - C2166 * C1087 - C2165 * C1093 + C2160 * C1099) *
                 C50783 +
             (C14159 + C14158) * C50844) *
                C50757 +
            ((C5818 + C5817) * C50783 + (C5816 + C5815) * C50844) * C50843) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50844 +
             (C5485 + C5486) * C50783) *
                C50843 +
            ((C2400 + C2401) * C50844 + C14612 * C50783) * C50757) *
               C1547 -
           ((C6437 * C50783 + C14613 * C50844) * C50757 +
            ((C5488 + C5487) * C50783 + (C5486 + C5485) * C50844) * C50843) *
               C50685) *
              C251 +
          (((C14612 * C50844 + C15134 * C50783) * C50843 +
            (C15781 * C50844 + (C3604 + C3605) * C50783) * C50757) *
               C50685 -
           ((C4100 * C50783 + (C2403 + C2402) * C50844) * C50757 +
            (C14613 * C50783 + (C2401 + C2400) * C50844) * C50843) *
               C1547) *
              C252 +
          (((C2412 * C50844 + C15781 * C50783) * C50843 +
            ((C2405 + C2404) * C50844 + (C4114 + C4115) * C50783) * C50757) *
               C1547 -
           (((C2167 * C3571 - C2168 * C3569 - C2167 * C3572 + C50561 * C3575 +
              C2165 * C3573 - C2166 * C3570 - C2165 * C3574 + C2160 * C3576) *
                 C50783 +
             (C4115 + C4114) * C50844) *
                C50757 +
            ((C3605 + C3604) * C50783 + C4100 * C50844) * C50843) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C50830 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C50657) *
              C50873 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C50657 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C50830) *
              C50874 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C50621 * C50830 -
           ((C2167 * C976 - C2168 * C972 - C2167 * C977 + C50561 * C984 +
             C2165 * C978 - C2166 * C973 - C2165 * C979 + C2160 * C985) *
                C50719 * C2164 +
            (C2747 + C2746) * C50719 * C2163 +
            (C2745 + C2744) * C50719 * C2162) *
               C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C50830 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C50657) *
              C50873 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C50657 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C50830) *
              C50874 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C50621 * C50830 -
           (C123 * C541 - C124 * C540 - C123 * C542 + C108 * C543 +
            C121 * C282 - C122 * C264 - C121 * C283 + C107 * C294 +
            C119 * C266 - C120 * C256 - C119 * C267 + C106 * C286 +
            C117 * C268 - C118 * C257 - C117 * C269 + C105 * C287) *
               C50719 * C50707 * C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C50621 * C50830 -
           ((C3603 + C3602) * C5107 + (C3150 + C3151) * C5106 +
            (C2401 + C2400) * C5105) *
               C50707 * C50621 * C50657) *
              C50873 +
          (((C2406 + C2407) * C5105 + (C3152 + C3153) * C5106 +
            (C2165 * C1094 - C2166 * C1088 - C2165 * C1095 + C2160 * C1100 +
             C2167 * C1092 - C2168 * C1087 - C2167 * C1093 + C50561 * C1099) *
                C5107) *
               C50707 * C50621 * C50657 -
           (C5498 * C5107 + (C5492 + C5491) * C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C50621 * C50830) *
              C50874 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C5105 +
            (C2165 * C409 - C2166 * C398 - C2165 * C410 + C2160 * C428 +
             C2167 * C407 - C2168 * C397 - C2167 * C408 + C50561 * C427) *
                C5106 +
            (C2165 * C419 - C2166 * C403 - C2165 * C420 + C2160 * C433 +
             C2167 * C421 - C2168 * C404 - C2167 * C422 + C50561 * C434) *
                C5107) *
               C50707 * C50621 * C50830 -
           ((C2167 * C1090 - C2168 * C1086 - C2167 * C1091 + C50561 * C1098 +
             C2165 * C1092 - C2166 * C1087 - C2165 * C1093 + C2160 * C1099) *
                C5107 +
            (C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796 +
             C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795) *
                C5106 +
            (C2745 + C2744) * C5105) *
               C50707 * C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50719 * C2162 +
             (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
                C50831 -
            ((C3148 + C3149) * C50719 * C2164 +
             (C3150 + C3151) * C50719 * C2163 +
             (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
              C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                 C50719 * C2162) *
                C50685) *
               C50830 +
           (((C3151 + C3150) * C50719 * C2162 +
             (C3149 + C3148) * C50719 * C2163 +
             (C2165 * C3090 - C2166 * C3087 - C2165 * C3091 + C2160 * C3096 +
              C2167 * C3092 - C2168 * C3088 - C2167 * C3093 + C50561 * C3097) *
                 C50719 * C2164) *
                C50685 -
            ((C2404 + C2405) * C50719 * C2164 +
             (C2403 + C2402) * C50719 * C2163 +
             (C2401 + C2400) * C50719 * C2162) *
                C50831) *
               C50657) *
              C254 +
          ((((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
              C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                 C50719 * C2162 +
             (C3152 + C3153) * C50719 * C2163 +
             (C3154 + C3155) * C50719 * C2164) *
                C50685 -
            (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50719 * C2162) *
                C50831) *
               C50830 +
           (((C2406 + C2407) * C50719 * C2162 +
             (C2408 + C2409) * C50719 * C2163 +
             (C2410 + C2411) * C50719 * C2164) *
                C50831 -
            ((C2167 * C3094 - C2168 * C3089 - C2167 * C3095 + C50561 * C3098 +
              C2165 * C3092 - C2166 * C3088 - C2165 * C3093 + C2160 * C3097) *
                 C50719 * C2164 +
             (C3155 + C3154) * C50719 * C2163 +
             (C3153 + C3152) * C50719 * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
             C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
             C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
             C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                C50719 * C50707 * C50831 -
            (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
             C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
             C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
             C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
                C50719 * C50707 * C50685) *
               C50830 +
           ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
             C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
             C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
             C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
                C50719 * C50707 * C50685 -
            (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
             C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
             C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
             C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                C50719 * C50707 * C50831) *
               C50657) *
              C254 +
          (((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
             C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
             C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
             C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
                C50719 * C50707 * C50685 -
            (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
             C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
             C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
             C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                C50719 * C50707 * C50831) *
               C50830 +
           ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
             C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
             C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
             C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
                C50719 * C50707 * C50831 -
            (C123 * C791 - C124 * C782 - C123 * C792 + C108 * C797 +
             C121 * C789 - C122 * C781 - C121 * C790 + C107 * C796 +
             C119 * C787 - C120 * C780 - C119 * C788 + C106 * C795 +
             C117 * C785 - C118 * C779 - C117 * C786 + C105 * C794) *
                C50719 * C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C5105 +
             (C5485 + C5486) * C5106 + C5497 * C5107) *
                C50707 * C50831 -
            ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
             (C5486 + C5485) * C5105) *
                C50707 * C50685) *
               C50830 +
           (((C3151 + C3150) * C5105 + (C3602 + C3603) * C5106 +
             (C2165 * C4515 - C2166 * C4508 - C2165 * C4516 + C2160 * C4520 +
              C2167 * C4513 - C2168 * C4507 - C2167 * C4514 + C50561 * C4519) *
                 C5107) *
                C50707 * C50685 -
            ((C3603 + C3602) * C5107 + (C3150 + C3151) * C5106 +
             (C2401 + C2400) * C5105) *
                C50707 * C50831) *
               C50657) *
              C254 +
          ((((C5491 + C5492) * C5105 + (C5493 + C5494) * C5106 +
             (C5495 + C5496) * C5107) *
                C50707 * C50685 -
            (C5498 * C5107 + (C5492 + C5491) * C5106 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C5105) *
                C50707 * C50831) *
               C50830 +
           (((C2406 + C2407) * C5105 + (C3152 + C3153) * C5106 +
             (C6029 + C6030) * C5107) *
                C50707 * C50831 -
            ((C2167 * C6013 - C2168 * C6012 - C2167 * C6014 + C50561 * C6015 +
              C2165 * C4513 - C2166 * C4507 - C2165 * C4514 + C2160 * C4519) *
                 C5107 +
             (C6030 + C6029) * C5106 + (C3153 + C3152) * C5105) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
               C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
               C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
               C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                  C50719 * C50707 * C50621 * C50605 * C113 -
              (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
               C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
               C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
               C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                  C50719 * C50707 * C50621 * C50605 * C114 +
              (C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
               C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
               C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
               C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
                  C50719 * C50707 * C50621 * C50605 * C115 -
              (C123 * C144 - C124 * C131 - C123 * C145 + C108 * C152 +
               C121 * C142 - C122 * C130 - C121 * C143 + C107 * C151 +
               C119 * C140 - C120 * C129 - C119 * C141 + C106 * C150 +
               C117 * C138 - C118 * C128 - C117 * C139 + C105 * C149) *
                  C50719 * C50707 * C50621 * C50605 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
                C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
                C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
                C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                   C50719 * C50707 * C50621 * C251 -
               (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
                C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
                C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
                C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                   C50719 * C50707 * C50621 * C252 +
               (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
                C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
                C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
                C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
                   C50719 * C50707 * C50621 * C253) *
                  C254 +
              ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
                C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
                C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
                C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
                   C50719 * C50707 * C50621 * C252 -
               (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
                C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
                C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
                C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                   C50719 * C50707 * C50621 * C251 -
               (C123 * C284 - C124 * C265 - C123 * C285 + C108 * C295 +
                C121 * C280 - C122 * C263 - C121 * C281 + C107 * C293 +
                C119 * C278 - C120 * C262 - C119 * C279 + C106 * C292 +
                C117 * C276 - C118 * C261 - C117 * C277 + C105 * C291) *
                   C50719 * C50707 * C50621 * C253) *
                  C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C394 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C395 +
           (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 +
            C119 * C417 - C120 * C402 - C119 * C418 + C106 * C432 +
            C121 * C419 - C122 * C403 - C121 * C420 + C107 * C433 +
            C123 * C421 - C124 * C404 - C123 * C422 + C108 * C434) *
               C50719 * C50707 * C396) *
              C50605 * C254 +
          ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
            C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
            C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
            C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
               C50719 * C50707 * C395 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C394 -
           (C123 * C425 - C124 * C406 - C123 * C426 + C108 * C436 +
            C121 * C421 - C122 * C404 - C121 * C422 + C107 * C434 +
            C119 * C419 - C120 * C403 - C119 * C420 + C106 * C433 +
            C117 * C417 - C118 * C402 - C117 * C418 + C105 * C432) *
               C50719 * C50707 * C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2165 * C272 - C2166 * C259 - C2165 * C273 + C2160 * C289 +
            C2167 * C270 - C2168 * C258 - C2167 * C271 + C50561 * C288) *
               C50719 * C2163 +
           (C2165 * C274 - C2166 * C260 - C2165 * C275 + C2160 * C290 +
            C2167 * C276 - C2168 * C261 - C2167 * C277 + C50561 * C291) *
               C50719 * C2164) *
              C50621 * C50605 * C113 -
          ((C2167 * C278 - C2168 * C262 - C2167 * C279 + C50561 * C292 +
            C2165 * C276 - C2166 * C261 - C2165 * C277 + C2160 * C291) *
               C50719 * C2164 +
           (C2167 * C268 - C2168 * C257 - C2167 * C269 + C50561 * C287 +
            C2165 * C270 - C2166 * C258 - C2165 * C271 + C2160 * C288) *
               C50719 * C2163 +
           (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
            C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
               C50719 * C2162) *
              C50621 * C50605 * C114 +
          ((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
            C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
               C50719 * C2162 +
           (C2165 * C268 - C2166 * C257 - C2165 * C269 + C2160 * C287 +
            C2167 * C266 - C2168 * C256 - C2167 * C267 + C50561 * C286) *
               C50719 * C2163 +
           (C2165 * C278 - C2166 * C262 - C2165 * C279 + C2160 * C292 +
            C2167 * C280 - C2168 * C263 - C2167 * C281 + C50561 * C293) *
               C50719 * C2164) *
              C50621 * C50605 * C115 -
          ((C2167 * C284 - C2168 * C265 - C2167 * C285 + C50561 * C295 +
            C2165 * C280 - C2166 * C263 - C2165 * C281 + C2160 * C293) *
               C50719 * C2164 +
           (C2167 * C282 - C2168 * C264 - C2167 * C283 + C50561 * C294 +
            C2165 * C266 - C2166 * C256 - C2165 * C267 + C2160 * C286) *
               C50719 * C2163 +
           (C2167 * C140 - C2168 * C129 - C2167 * C141 + C50561 * C150 +
            C2165 * C138 - C2166 * C128 - C2165 * C139 + C2160 * C149) *
               C50719 * C2162) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C251 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C252 +
           (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C2165 * C2318 - C2166 * C2315 - C2165 * C2319 + C2160 * C2324 +
             C2167 * C2320 - C2168 * C2316 - C2167 * C2321 + C50561 * C2325) *
                C50719 * C2164) *
               C50621 * C253) *
              C254 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C252 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C251 -
           ((C2167 * C2322 - C2168 * C2317 - C2167 * C2323 + C50561 * C2326 +
             C2165 * C2320 - C2166 * C2316 - C2165 * C2321 + C2160 * C2325) *
                C50719 * C2164 +
            (C2411 + C2410) * C50719 * C2163 + C2415 * C2162) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C394 -
           ((C2167 * C1441 - C2168 * C1435 - C2167 * C1442 + C50561 * C1447 +
             C2165 * C1443 - C2166 * C1436 - C2165 * C1444 + C2160 * C1448) *
                C50719 * C2164 +
            (C2167 * C785 - C2168 * C779 - C2167 * C786 + C50561 * C794 +
             C2165 * C783 - C2166 * C778 - C2165 * C784 + C2160 * C793) *
                C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C395 +
           ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C50719 * C2162 +
            (C2165 * C1096 - C2166 * C1089 - C2165 * C1097 + C2160 * C1101 +
             C2167 * C1094 - C2168 * C1088 - C2167 * C1095 + C50561 * C1100) *
                C50719 * C2163 +
            (C2165 * C2564 - C2166 * C2561 - C2165 * C2565 + C2160 * C2570 +
             C2167 * C2566 - C2168 * C2562 - C2167 * C2567 + C50561 * C2571) *
                C50719 * C2164) *
               C396) *
              C50605 * C254 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C2165 * C785 - C2166 * C779 - C2165 * C786 + C2160 * C794 +
             C2167 * C787 - C2168 * C780 - C2167 * C788 + C50561 * C795) *
                C50719 * C2163 +
            (C2165 * C1441 - C2166 * C1435 - C2165 * C1442 + C2160 * C1447 +
             C2167 * C1439 - C2168 * C1434 - C2167 * C1440 + C50561 * C1446) *
                C50719 * C2164) *
               C395 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C394 -
           ((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
             C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                C50719 * C2164 +
            (C2167 * C1092 - C2168 * C1087 - C2167 * C1093 + C50561 * C1099 +
             C2165 * C1094 - C2166 * C1088 - C2165 * C1095 + C2160 * C1100) *
                C50719 * C2163 +
            (C2167 * C419 - C2168 * C403 - C2167 * C420 + C50561 * C433 +
             C2165 * C417 - C2166 * C402 - C2165 * C418 + C2160 * C432) *
                C50719 * C2162) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C5105 +
           (C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430 +
            C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429) *
               C5106 +
           (C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
            C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
               C5107) *
              C50707 * C50621 * C50605 * C113 -
          ((C2167 * C419 - C2168 * C403 - C2167 * C420 + C50561 * C433 +
            C2165 * C417 - C2166 * C402 - C2165 * C418 + C2160 * C432) *
               C5107 +
           (C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428 +
            C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429) *
               C5106 +
           (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
            C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
               C5105) *
              C50707 * C50621 * C50605 * C114 +
          ((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
            C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
               C5105 +
           (C2165 * C409 - C2166 * C398 - C2165 * C410 + C2160 * C428 +
            C2167 * C407 - C2168 * C397 - C2167 * C408 + C50561 * C427) *
               C5106 +
           (C2165 * C419 - C2166 * C403 - C2165 * C420 + C2160 * C433 +
            C2167 * C421 - C2168 * C404 - C2167 * C422 + C50561 * C434) *
               C5107) *
              C50707 * C50621 * C50605 * C115 -
          ((C2167 * C425 - C2168 * C406 - C2167 * C426 + C50561 * C436 +
            C2165 * C421 - C2166 * C404 - C2165 * C422 + C2160 * C434) *
               C5107 +
           (C2167 * C423 - C2168 * C405 - C2167 * C424 + C50561 * C435 +
            C2165 * C407 - C2166 * C397 - C2165 * C408 + C2160 * C427) *
               C5106 +
           (C2167 * C140 - C2168 * C129 - C2167 * C141 + C50561 * C150 +
            C2165 * C138 - C2166 * C128 - C2165 * C139 + C2160 * C149) *
               C5105) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430 +
             C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429) *
                C5106 +
            (C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C5107) *
               C50707 * C50621 * C251 -
           ((C3603 + C3602) * C5107 + (C3150 + C3151) * C5106 +
            (C2401 + C2400) * C5105) *
               C50707 * C50621 * C252 +
           (C2412 * C5105 + (C3149 + C3148) * C5106 + (C3604 + C3605) * C5107) *
               C50707 * C50621 * C253) *
              C254 +
          (((C2406 + C2407) * C5105 + (C3152 + C3153) * C5106 +
            (C2165 * C1094 - C2166 * C1088 - C2165 * C1095 + C2160 * C1100 +
             C2167 * C1092 - C2168 * C1087 - C2167 * C1093 + C50561 * C1099) *
                C5107) *
               C50707 * C50621 * C252 -
           ((C2167 * C419 - C2168 * C403 - C2167 * C420 + C50561 * C433 +
             C2165 * C417 - C2166 * C402 - C2165 * C418 + C2160 * C432) *
                C5107 +
            (C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428 +
             C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429) *
                C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C50621 * C251 -
           ((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
             C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                C5107 +
            (C3155 + C3154) * C5106 + C2413 * C5105) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C394 -
           ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
            (C5486 + C5485) * C5105) *
               C50707 * C395 +
           (C5497 * C5105 + (C5490 + C5489) * C5106 +
            (C2165 * C5403 - C2166 * C5400 - C2165 * C5404 + C2160 * C5409 +
             C2167 * C5405 - C2168 * C5401 - C2167 * C5406 + C50561 * C5410) *
                C5107) *
               C50707 * C396) *
              C50605 * C254 +
          (((C5491 + C5492) * C5105 + (C5493 + C5494) * C5106 +
            (C5495 + C5496) * C5107) *
               C50707 * C395 -
           (C5498 * C5107 + (C5492 + C5491) * C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C394 -
           ((C2167 * C5407 - C2168 * C5402 - C2167 * C5408 + C50561 * C5411 +
             C2165 * C5405 - C2166 * C5401 - C2165 * C5406 + C2160 * C5410) *
                C5107 +
            (C5496 + C5495) * C5106 + C5498 * C5105) *
               C50707 * C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50831 -
           ((C2167 * C1441 - C2168 * C1435 - C2167 * C1442 + C50561 * C1447 +
             C2165 * C1443 - C2166 * C1436 - C2165 * C1444 + C2160 * C1448) *
                C50719 * C2164 +
            (C2167 * C785 - C2168 * C779 - C2167 * C786 + C50561 * C794 +
             C2165 * C783 - C2166 * C778 - C2165 * C784 + C2160 * C793) *
                C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C50605 * C50873 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C2165 * C785 - C2166 * C779 - C2165 * C786 + C2160 * C794 +
             C2167 * C787 - C2168 * C780 - C2167 * C788 + C50561 * C795) *
                C50719 * C2163 +
            (C2165 * C1441 - C2166 * C1435 - C2165 * C1442 + C2160 * C1447 +
             C2167 * C1439 - C2168 * C1434 - C2167 * C1440 + C50561 * C1446) *
                C50719 * C2164) *
               C50685 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50831) *
              C50605 * C50874 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C50831 -
           ((C2167 * C1437 - C2168 * C1433 - C2167 * C1438 + C50561 * C1445 +
             C2165 * C1439 - C2166 * C1434 - C2165 * C1440 + C2160 * C1446) *
                C50719 * C2164 +
            (C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796 +
             C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795) *
                C50719 * C2163 +
            (C2167 * C407 - C2168 * C397 - C2167 * C408 + C50561 * C427 +
             C2165 * C409 - C2166 * C398 - C2165 * C410 + C2160 * C428) *
                C50719 * C2162) *
               C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50831 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C50605 * C50873 +
          ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
            C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
            C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
            C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
               C50719 * C50707 * C50685 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50831) *
              C50605 * C50874 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C50831 -
           (C123 * C645 - C124 * C644 - C123 * C646 + C108 * C647 +
            C121 * C423 - C122 * C405 - C121 * C424 + C107 * C435 +
            C119 * C407 - C120 * C397 - C119 * C408 + C106 * C427 +
            C117 * C409 - C118 * C398 - C117 * C410 + C105 * C428) *
               C50719 * C50707 * C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C50831 -
           ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
            (C5486 + C5485) * C5105) *
               C50707 * C50685) *
              C50605 * C50873 +
          (((C5491 + C5492) * C5105 + (C5493 + C5494) * C5106 +
            (C5495 + C5496) * C5107) *
               C50707 * C50685 -
           (C5498 * C5107 + (C5492 + C5491) * C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C50831) *
              C50605 * C50874 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C5105 +
            (C5815 + C5816) * C5106 + (C5817 + C5818) * C5107) *
               C50707 * C50831 -
           ((C2167 * C1721 - C2168 * C1717 - C2167 * C1722 + C50561 * C1729 +
             C2165 * C1723 - C2166 * C1718 - C2165 * C1724 + C2160 * C1730) *
                C5107 +
            (C5818 + C5817) * C5106 + (C5816 + C5815) * C5105) *
               C50707 * C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C251 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C252 +
           (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C50621 * C253) *
              C254 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C252 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C251 -
           (C123 * C284 - C124 * C265 - C123 * C285 + C108 * C295 +
            C121 * C280 - C122 * C263 - C121 * C281 + C107 * C293 +
            C119 * C278 - C120 * C262 - C119 * C279 + C106 * C292 +
            C117 * C276 - C118 * C261 - C117 * C277 + C105 * C291) *
               C50719 * C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 + C119 * C134 -
           C120 * C126 - C119 * C135 + C106 * C147 + C121 * C136 - C122 * C127 -
           C121 * C137 + C107 * C148 + C123 * C138 - C124 * C128 - C123 * C139 +
           C108 * C149) *
              C50719 * C50707 * C50621 * C50605 * C113 -
          (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 + C121 * C138 -
           C122 * C128 - C121 * C139 + C107 * C149 + C119 * C136 - C120 * C127 -
           C119 * C137 + C106 * C148 + C117 * C134 - C118 * C126 - C117 * C135 +
           C105 * C147) *
              C50719 * C50707 * C50621 * C50605 * C114 +
          (C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 + C119 * C138 -
           C120 * C128 - C119 * C139 + C106 * C149 + C121 * C140 - C122 * C129 -
           C121 * C141 + C107 * C150 + C123 * C142 - C124 * C130 - C123 * C143 +
           C108 * C151) *
              C50719 * C50707 * C50621 * C50605 * C115 -
          (C123 * C144 - C124 * C131 - C123 * C145 + C108 * C152 + C121 * C142 -
           C122 * C130 - C121 * C143 + C107 * C151 + C119 * C140 - C120 * C129 -
           C119 * C141 + C106 * C150 + C117 * C138 - C118 * C128 - C117 * C139 +
           C105 * C149) *
              C50719 * C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2165 * C272 - C2166 * C259 - C2165 * C273 + C2160 * C289 +
            C2167 * C270 - C2168 * C258 - C2167 * C271 + C50561 * C288) *
               C50719 * C2163 +
           (C2165 * C274 - C2166 * C260 - C2165 * C275 + C2160 * C290 +
            C2167 * C276 - C2168 * C261 - C2167 * C277 + C50561 * C291) *
               C50719 * C2164) *
              C50621 * C50605 * C113 -
          ((C2167 * C278 - C2168 * C262 - C2167 * C279 + C50561 * C292 +
            C2165 * C276 - C2166 * C261 - C2165 * C277 + C2160 * C291) *
               C50719 * C2164 +
           (C2167 * C268 - C2168 * C257 - C2167 * C269 + C50561 * C287 +
            C2165 * C270 - C2166 * C258 - C2165 * C271 + C2160 * C288) *
               C50719 * C2163 +
           (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
            C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
               C50719 * C2162) *
              C50621 * C50605 * C114 +
          ((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
            C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
               C50719 * C2162 +
           (C2165 * C268 - C2166 * C257 - C2165 * C269 + C2160 * C287 +
            C2167 * C266 - C2168 * C256 - C2167 * C267 + C50561 * C286) *
               C50719 * C2163 +
           (C2165 * C278 - C2166 * C262 - C2165 * C279 + C2160 * C292 +
            C2167 * C280 - C2168 * C263 - C2167 * C281 + C50561 * C293) *
               C50719 * C2164) *
              C50621 * C50605 * C115 -
          ((C2167 * C284 - C2168 * C265 - C2167 * C285 + C50561 * C295 +
            C2165 * C280 - C2166 * C263 - C2165 * C281 + C2160 * C293) *
               C50719 * C2164 +
           (C2167 * C282 - C2168 * C264 - C2167 * C283 + C50561 * C294 +
            C2165 * C266 - C2166 * C256 - C2165 * C267 + C2160 * C286) *
               C50719 * C2163 +
           (C2167 * C140 - C2168 * C129 - C2167 * C141 + C50561 * C150 +
            C2165 * C138 - C2166 * C128 - C2165 * C139 + C2160 * C149) *
               C50719 * C2162) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C251 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C252 +
           (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C2165 * C2318 - C2166 * C2315 - C2165 * C2319 + C2160 * C2324 +
             C2167 * C2320 - C2168 * C2316 - C2167 * C2321 + C50561 * C2325) *
                C50719 * C2164) *
               C50621 * C253) *
              C254 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C252 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C251 -
           ((C2167 * C2322 - C2168 * C2317 - C2167 * C2323 + C50561 * C2326 +
             C2165 * C2320 - C2166 * C2316 - C2165 * C2321 + C2160 * C2325) *
                C50719 * C2164 +
            (C2411 + C2410) * C50719 * C2163 + C2415 * C2162) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C5105 +
           (C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430 +
            C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429) *
               C5106 +
           (C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
            C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
               C5107) *
              C50707 * C50621 * C50605 * C113 -
          ((C2167 * C419 - C2168 * C403 - C2167 * C420 + C50561 * C433 +
            C2165 * C417 - C2166 * C402 - C2165 * C418 + C2160 * C432) *
               C5107 +
           (C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428 +
            C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429) *
               C5106 +
           (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
            C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
               C5105) *
              C50707 * C50621 * C50605 * C114 +
          ((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
            C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
               C5105 +
           (C2165 * C409 - C2166 * C398 - C2165 * C410 + C2160 * C428 +
            C2167 * C407 - C2168 * C397 - C2167 * C408 + C50561 * C427) *
               C5106 +
           (C2165 * C419 - C2166 * C403 - C2165 * C420 + C2160 * C433 +
            C2167 * C421 - C2168 * C404 - C2167 * C422 + C50561 * C434) *
               C5107) *
              C50707 * C50621 * C50605 * C115 -
          ((C2167 * C425 - C2168 * C406 - C2167 * C426 + C50561 * C436 +
            C2165 * C421 - C2166 * C404 - C2165 * C422 + C2160 * C434) *
               C5107 +
           (C2167 * C423 - C2168 * C405 - C2167 * C424 + C50561 * C435 +
            C2165 * C407 - C2166 * C397 - C2165 * C408 + C2160 * C427) *
               C5106 +
           (C2167 * C140 - C2168 * C129 - C2167 * C141 + C50561 * C150 +
            C2165 * C138 - C2166 * C128 - C2165 * C139 + C2160 * C149) *
               C5105) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430 +
             C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429) *
                C5106 +
            (C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C5107) *
               C50707 * C50621 * C251 -
           ((C3603 + C3602) * C5107 + (C3150 + C3151) * C5106 +
            (C2401 + C2400) * C5105) *
               C50707 * C50621 * C252 +
           (C2412 * C5105 + (C3149 + C3148) * C5106 + (C3604 + C3605) * C5107) *
               C50707 * C50621 * C253) *
              C254 +
          (((C2406 + C2407) * C5105 + (C3152 + C3153) * C5106 +
            (C2165 * C1094 - C2166 * C1088 - C2165 * C1095 + C2160 * C1100 +
             C2167 * C1092 - C2168 * C1087 - C2167 * C1093 + C50561 * C1099) *
                C5107) *
               C50707 * C50621 * C252 -
           ((C2167 * C419 - C2168 * C403 - C2167 * C420 + C50561 * C433 +
             C2165 * C417 - C2166 * C402 - C2165 * C418 + C2160 * C432) *
                C5107 +
            (C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428 +
             C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429) *
                C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C50621 * C251 -
           ((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
             C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                C5107 +
            (C3155 + C3154) * C5106 + C2413 * C5105) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C50875 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C50876 +
           (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C3422 + C3423) * C50719 * C2164) *
               C50621 * C1202) *
              C50822 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C50876 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C50875 -
           ((C2167 * C2322 - C2168 * C2317 - C2167 * C2323 + C50561 * C2326 +
             C2165 * C2320 - C2166 * C2316 - C2165 * C2321 + C2160 * C2325) *
                C50719 * C2164 +
            (C2411 + C2410) * C50719 * C2163 + C2415 * C2162) *
               C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C50875 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C50876 +
           (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C50621 * C1202) *
              C50822 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C50876 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C50875 -
           (C123 * C284 - C124 * C265 - C123 * C285 + C108 * C295 +
            C121 * C280 - C122 * C263 - C121 * C281 + C107 * C293 +
            C119 * C278 - C120 * C262 - C119 * C279 + C106 * C292 +
            C117 * C276 - C118 * C261 - C117 * C277 + C105 * C291) *
               C50719 * C50707 * C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C50621 * C50875 -
           (C6437 * C5107 + (C3150 + C3151) * C5106 + (C2401 + C2400) * C5105) *
               C50707 * C50621 * C50876 +
           (C2412 * C5105 + (C3149 + C3148) * C5106 + (C3604 + C3605) * C5107) *
               C50707 * C50621 * C1202) *
              C50822 +
          (((C2406 + C2407) * C5105 + (C3152 + C3153) * C5106 +
            (C6029 + C6030) * C5107) *
               C50707 * C50621 * C50876 -
           (C5498 * C5107 + (C5492 + C5491) * C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C50621 * C50875 -
           ((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
             C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                C5107 +
            (C3155 + C3154) * C5106 + C2413 * C5105) *
               C50707 * C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50831 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C50875 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C4114 + C4115) * C50719 * C2164) *
               C50685 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50831) *
              C50876 +
          ((C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C3422 + C3423) * C50719 * C2164) *
               C50831 -
           ((C2167 * C4093 - C2168 * C4091 - C2167 * C4094 + C50561 * C4097 +
             C2165 * C4095 - C2166 * C4092 - C2165 * C4096 + C2160 * C4098) *
                C50719 * C2164 +
            (C4115 + C4114) * C50719 * C2163 + C4109 * C2162) *
               C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50831 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C50875 +
          ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
            C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
            C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
            C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
               C50719 * C50707 * C50685 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50831) *
              C50876 +
          ((C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C50831 -
           (C123 * C1437 - C124 * C1433 - C123 * C1438 + C108 * C1445 +
            C121 * C1439 - C122 * C1434 - C121 * C1440 + C107 * C1446 +
            C119 * C1441 - C120 * C1435 - C119 * C1442 + C106 * C1447 +
            C117 * C1443 - C118 * C1436 - C117 * C1444 + C105 * C1448) *
               C50719 * C50707 * C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C50831 -
           ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
            (C5486 + C5485) * C5105) *
               C50707 * C50685) *
              C50875 +
          (((C3151 + C3150) * C5105 + (C3602 + C3603) * C5106 +
            (C6442 + C6443) * C5107) *
               C50707 * C50685 -
           (C6437 * C5107 + (C3150 + C3151) * C5106 + (C2401 + C2400) * C5105) *
               C50707 * C50831) *
              C50876 +
          ((C2412 * C5105 + (C3149 + C3148) * C5106 + (C3604 + C3605) * C5107) *
               C50707 * C50831 -
           ((C2167 * C4509 - C2168 * C4505 - C2167 * C4510 + C50561 * C4517 +
             C2165 * C4511 - C2166 * C4506 - C2165 * C4512 + C2160 * C4518) *
                C5107 +
            (C3605 + C3604) * C5106 + C4100 * C5105) *
               C50707 * C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
                C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
                C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
                C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                   C50719 * C50707 * C50621 * C896 -
               (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
                C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
                C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
                C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                   C50719 * C50707 * C50621 * C50657) *
                  C898 +
              ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
                C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
                C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
                C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
                   C50719 * C50707 * C50621 * C50657 -
               (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
                C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
                C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
                C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                   C50719 * C50707 * C50621 * C896) *
                  C899 +
              ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
                C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
                C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
                C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
                   C50719 * C50707 * C50621 * C896 -
               (C123 * C541 - C124 * C540 - C123 * C542 + C108 * C543 +
                C121 * C282 - C122 * C264 - C121 * C283 + C107 * C294 +
                C119 * C266 - C120 * C256 - C119 * C267 + C106 * C286 +
                C117 * C268 - C118 * C257 - C117 * C269 + C105 * C287) *
                   C50719 * C50707 * C50621 * C50657) *
                  C900) +
         0.5 * std::pow(Pi, 2.5) *
             ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
               C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
               C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
               C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                  C50719 * C50707 * C50621 * C967 -
              (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
               C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
               C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
               C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                  C50719 * C50707 * C50621 * C968 +
              (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
               C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
               C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
               C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
                  C50719 * C50707 * C50621 * C969 -
              (C123 * C976 - C124 * C972 - C123 * C977 + C108 * C984 +
               C121 * C978 - C122 * C973 - C121 * C979 + C107 * C985 +
               C119 * C980 - C120 * C974 - C119 * C981 + C106 * C986 +
               C117 * C982 - C118 * C975 - C117 * C983 + C105 * C987) *
                  C50719 * C50707 * C50621 * C970) *
             C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C394 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C395 +
           (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 +
            C119 * C417 - C120 * C402 - C119 * C418 + C106 * C432 +
            C121 * C419 - C122 * C403 - C121 * C420 + C107 * C433 +
            C123 * C421 - C124 * C404 - C123 * C422 + C108 * C434) *
               C50719 * C50707 * C396) *
              C896 +
          ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
            C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
            C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
            C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
               C50719 * C50707 * C395 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C394 -
           (C123 * C1090 - C124 * C1086 - C123 * C1091 + C108 * C1098 +
            C121 * C1092 - C122 * C1087 - C121 * C1093 + C107 * C1099 +
            C119 * C1094 - C120 * C1088 - C119 * C1095 + C106 * C1100 +
            C117 * C1096 - C118 * C1089 - C117 * C1097 + C105 * C1101) *
               C50719 * C50707 * C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C896 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C50657) *
              C898 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C50657 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C896) *
              C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C50621 * C896 -
           ((C2167 * C976 - C2168 * C972 - C2167 * C977 + C50561 * C984 +
             C2165 * C978 - C2166 * C973 - C2165 * C979 + C2160 * C985) *
                C50719 * C2164 +
            (C2747 + C2746) * C50719 * C2163 +
            (C2745 + C2744) * C50719 * C2162) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
              C50621 * C967 -
          (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
           (C2401 + C2400) * C50719 * C2162) *
              C50621 * C968 +
          (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
           (C3422 + C3423) * C50719 * C2164) *
              C50621 * C969 -
          ((C2167 * C3401 - C2168 * C3399 - C2167 * C3402 + C50561 * C3405 +
            C2165 * C3403 - C2166 * C3400 - C2165 * C3404 + C2160 * C3406) *
               C50719 * C2164 +
           (C3423 + C3422) * C50719 * C2163 + C3417 * C2162) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C394 -
           ((C3148 + C3149) * C50719 * C2164 +
            (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C395 +
           ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C50719 * C2162 +
            (C3602 + C3603) * C50719 * C2163 +
            (C3604 + C3605) * C50719 * C2164) *
               C396) *
              C896 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C2165 * C3090 - C2166 * C3087 - C2165 * C3091 + C2160 * C3096 +
             C2167 * C3092 - C2168 * C3088 - C2167 * C3093 + C50561 * C3097) *
                C50719 * C2164) *
               C395 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C394 -
           ((C2167 * C3571 - C2168 * C3569 - C2167 * C3572 + C50561 * C3575 +
             C2165 * C3573 - C2166 * C3570 - C2165 * C3574 + C2160 * C3576) *
                C50719 * C2164 +
            (C3605 + C3604) * C50719 * C2163 +
            (C3603 + C3602) * C50719 * C2162) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C50621 * C896 -
           ((C3603 + C3602) * C5107 + (C3150 + C3151) * C5106 +
            (C2401 + C2400) * C5105) *
               C50707 * C50621 * C50657) *
              C898 +
          (((C2406 + C2407) * C5105 + (C3152 + C3153) * C5106 +
            (C6029 + C6030) * C5107) *
               C50707 * C50621 * C50657 -
           (C5498 * C5107 + (C5492 + C5491) * C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C50621 * C896) *
              C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C5105 +
            (C5815 + C5816) * C5106 + (C5817 + C5818) * C5107) *
               C50707 * C50621 * C896 -
           ((C2167 * C1090 - C2168 * C1086 - C2167 * C1091 + C50561 * C1098 +
             C2165 * C1092 - C2166 * C1087 - C2165 * C1093 + C2160 * C1099) *
                C5107 +
            (C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796 +
             C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795) *
                C5106 +
            (C2745 + C2744) * C5105) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C5105 +
           (C5485 + C5486) * C5106 + C5497 * C5107) *
              C50707 * C50621 * C967 -
          ((C3603 + C3602) * C5107 + (C3150 + C3151) * C5106 +
           (C2401 + C2400) * C5105) *
              C50707 * C50621 * C968 +
          (C2412 * C5105 + (C3149 + C3148) * C5106 + (C3604 + C3605) * C5107) *
              C50707 * C50621 * C969 -
          ((C2167 * C3571 - C2168 * C3569 - C2167 * C3572 + C50561 * C3575 +
            C2165 * C3573 - C2166 * C3570 - C2165 * C3574 + C2160 * C3576) *
               C5107 +
           (C4115 + C4114) * C5106 + C3408 * C5105) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C394 -
           ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
            (C5486 + C5485) * C5105) *
               C50707 * C395 +
           (C5497 * C5105 + (C5490 + C5489) * C5106 +
            (C2165 * C5403 - C2166 * C5400 - C2165 * C5404 + C2160 * C5409 +
             C2167 * C5405 - C2168 * C5401 - C2167 * C5406 + C50561 * C5410) *
                C5107) *
               C50707 * C396) *
              C896 +
          (((C3151 + C3150) * C5105 + (C3602 + C3603) * C5106 +
            (C6442 + C6443) * C5107) *
               C50707 * C395 -
           (C6437 * C5107 + (C3150 + C3151) * C5106 + (C2401 + C2400) * C5105) *
               C50707 * C394 -
           ((C2167 * C6422 - C2168 * C6420 - C2167 * C6423 + C50561 * C6426 +
             C2165 * C6424 - C2166 * C6421 - C2165 * C6425 + C2160 * C6427) *
                C5107 +
            (C6443 + C6442) * C5106 + C6437 * C5105) *
               C50707 * C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50719 * C2162 +
             (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
                C50831 -
            ((C3148 + C3149) * C50719 * C2164 +
             (C3150 + C3151) * C50719 * C2163 +
             (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
              C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                 C50719 * C2162) *
                C50685) *
               C896 +
           (((C3151 + C3150) * C50719 * C2162 +
             (C3149 + C3148) * C50719 * C2163 +
             (C2165 * C3090 - C2166 * C3087 - C2165 * C3091 + C2160 * C3096 +
              C2167 * C3092 - C2168 * C3088 - C2167 * C3093 + C50561 * C3097) *
                 C50719 * C2164) *
                C50685 -
            (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
             (C2401 + C2400) * C50719 * C2162) *
                C50831) *
               C50657) *
              C50822 +
          ((((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
              C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                 C50719 * C2162 +
             (C3152 + C3153) * C50719 * C2163 +
             (C3154 + C3155) * C50719 * C2164) *
                C50685 -
            (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50719 * C2162) *
                C50831) *
               C896 +
           (((C2406 + C2407) * C50719 * C2162 +
             (C2408 + C2409) * C50719 * C2163 +
             (C2410 + C2411) * C50719 * C2164) *
                C50831 -
            ((C2167 * C3094 - C2168 * C3089 - C2167 * C3095 + C50561 * C3098 +
              C2165 * C3092 - C2166 * C3088 - C2165 * C3093 + C2160 * C3097) *
                 C50719 * C2164 +
             (C3155 + C3154) * C50719 * C2163 +
             (C3153 + C3152) * C50719 * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
             C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
             C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
             C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                C50719 * C50707 * C50831 -
            (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
             C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
             C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
             C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
                C50719 * C50707 * C50685) *
               C896 +
           ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
             C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
             C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
             C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
                C50719 * C50707 * C50685 -
            (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
             C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
             C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
             C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                C50719 * C50707 * C50831) *
               C50657) *
              C50822 +
          (((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
             C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
             C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
             C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
                C50719 * C50707 * C50685 -
            (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
             C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
             C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
             C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                C50719 * C50707 * C50831) *
               C896 +
           ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
             C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
             C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
             C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
                C50719 * C50707 * C50831 -
            (C123 * C791 - C124 * C782 - C123 * C792 + C108 * C797 +
             C121 * C789 - C122 * C781 - C121 * C790 + C107 * C796 +
             C119 * C787 - C120 * C780 - C119 * C788 + C106 * C795 +
             C117 * C785 - C118 * C779 - C117 * C786 + C105 * C794) *
                C50719 * C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C5105 +
             (C5485 + C5486) * C5106 + C5497 * C5107) *
                C50707 * C50831 -
            ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
             (C5486 + C5485) * C5105) *
                C50707 * C50685) *
               C896 +
           (((C3151 + C3150) * C5105 + (C3602 + C3603) * C5106 +
             (C6442 + C6443) * C5107) *
                C50707 * C50685 -
            (C6437 * C5107 + (C3150 + C3151) * C5106 +
             (C2401 + C2400) * C5105) *
                C50707 * C50831) *
               C50657) *
              C50822 +
          ((((C5491 + C5492) * C5105 + (C5493 + C5494) * C5106 +
             (C5495 + C5496) * C5107) *
                C50707 * C50685 -
            (C5498 * C5107 + (C5492 + C5491) * C5106 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C5105) *
                C50707 * C50831) *
               C896 +
           (((C2406 + C2407) * C5105 + (C3152 + C3153) * C5106 +
             (C6029 + C6030) * C5107) *
                C50707 * C50831 -
            ((C2167 * C6013 - C2168 * C6012 - C2167 * C6014 + C50561 * C6015 +
              C2165 * C4513 - C2166 * C4507 - C2165 * C4514 + C2160 * C4519) *
                 C5107 +
             (C6030 + C6029) * C5106 + (C3153 + C3152) * C5105) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 + C119 * C134 -
           C120 * C126 - C119 * C135 + C106 * C147 + C121 * C136 - C122 * C127 -
           C121 * C137 + C107 * C148 + C123 * C138 - C124 * C128 - C123 * C139 +
           C108 * C149) *
              C50719 * C50707 * C50621 * C967 -
          (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 + C121 * C268 -
           C122 * C257 - C121 * C269 + C107 * C287 + C119 * C270 - C120 * C258 -
           C119 * C271 + C106 * C288 + C117 * C272 - C118 * C259 - C117 * C273 +
           C105 * C289) *
              C50719 * C50707 * C50621 * C968 +
          (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 + C119 * C276 -
           C120 * C261 - C119 * C277 + C106 * C291 + C121 * C278 - C122 * C262 -
           C121 * C279 + C107 * C292 + C123 * C280 - C124 * C263 - C123 * C281 +
           C108 * C293) *
              C50719 * C50707 * C50621 * C969 -
          (C123 * C976 - C124 * C972 - C123 * C977 + C108 * C984 + C121 * C978 -
           C122 * C973 - C121 * C979 + C107 * C985 + C119 * C980 - C120 * C974 -
           C119 * C981 + C106 * C986 + C117 * C982 - C118 * C975 - C117 * C983 +
           C105 * C987) *
              C50719 * C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C896 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C50657) *
              C898 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C50657 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C896) *
              C899 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C50621 * C896 -
           (C123 * C541 - C124 * C540 - C123 * C542 + C108 * C543 +
            C121 * C282 - C122 * C264 - C121 * C283 + C107 * C294 +
            C119 * C266 - C120 * C256 - C119 * C267 + C106 * C286 +
            C117 * C268 - C118 * C257 - C117 * C269 + C105 * C287) *
               C50719 * C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C896 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C50657) *
              C898 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C50657 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C896) *
              C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C50621 * C896 -
           ((C2167 * C976 - C2168 * C972 - C2167 * C977 + C50561 * C984 +
             C2165 * C978 - C2166 * C973 - C2165 * C979 + C2160 * C985) *
                C50719 * C2164 +
            (C2747 + C2746) * C50719 * C2163 +
            (C2745 + C2744) * C50719 * C2162) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
              C50621 * C967 -
          (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
           (C2401 + C2400) * C50719 * C2162) *
              C50621 * C968 +
          (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
           (C3422 + C3423) * C50719 * C2164) *
              C50621 * C969 -
          ((C2167 * C3401 - C2168 * C3399 - C2167 * C3402 + C50561 * C3405 +
            C2165 * C3403 - C2166 * C3400 - C2165 * C3404 + C2160 * C3406) *
               C50719 * C2164 +
           (C3423 + C3422) * C50719 * C2163 + C3417 * C2162) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C50621 * C896 -
           ((C3603 + C3602) * C5107 + (C3150 + C3151) * C5106 +
            (C2401 + C2400) * C5105) *
               C50707 * C50621 * C50657) *
              C898 +
          (((C2406 + C2407) * C5105 + (C3152 + C3153) * C5106 +
            (C6029 + C6030) * C5107) *
               C50707 * C50621 * C50657 -
           (C5498 * C5107 + (C5492 + C5491) * C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C50621 * C896) *
              C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C5105 +
            (C5815 + C5816) * C5106 + (C5817 + C5818) * C5107) *
               C50707 * C50621 * C896 -
           ((C2167 * C1090 - C2168 * C1086 - C2167 * C1091 + C50561 * C1098 +
             C2165 * C1092 - C2166 * C1087 - C2165 * C1093 + C2160 * C1099) *
                C5107 +
            (C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796 +
             C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795) *
                C5106 +
            (C2745 + C2744) * C5105) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C5105 +
           (C5485 + C5486) * C5106 + C5497 * C5107) *
              C50707 * C50621 * C967 -
          ((C3603 + C3602) * C5107 + (C3150 + C3151) * C5106 +
           (C2401 + C2400) * C5105) *
              C50707 * C50621 * C968 +
          (C2412 * C5105 + (C3149 + C3148) * C5106 + (C3604 + C3605) * C5107) *
              C50707 * C50621 * C969 -
          ((C2167 * C3571 - C2168 * C3569 - C2167 * C3572 + C50561 * C3575 +
            C2165 * C3573 - C2166 * C3570 - C2165 * C3574 + C2160 * C3576) *
               C5107 +
           (C4115 + C4114) * C5106 + C3408 * C5105) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50719 * C2162 +
             (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
                C1547 -
            (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
             (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
              C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                 C50719 * C2162) *
                C50685) *
               C50830 +
           (((C3151 + C3150) * C50719 * C2162 +
             (C3149 + C3148) * C50719 * C2163 +
             (C4114 + C4115) * C50719 * C2164) *
                C50685 -
            (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
             (C2401 + C2400) * C50719 * C2162) *
                C1547) *
               C50657) *
              C50822 +
          ((((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
              C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                 C50719 * C2162 +
             (C3152 + C3153) * C50719 * C2163 +
             (C3154 + C3155) * C50719 * C2164) *
                C50685 -
            (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50719 * C2162) *
                C1547) *
               C50830 +
           (((C2406 + C2407) * C50719 * C2162 +
             (C2408 + C2409) * C50719 * C2163 +
             (C2410 + C2411) * C50719 * C2164) *
                C1547 -
            ((C2167 * C3094 - C2168 * C3089 - C2167 * C3095 + C50561 * C3098 +
              C2165 * C3092 - C2166 * C3088 - C2165 * C3093 + C2160 * C3097) *
                 C50719 * C2164 +
             (C3155 + C3154) * C50719 * C2163 +
             (C3153 + C3152) * C50719 * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
             C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
             C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
             C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                C50719 * C50707 * C1547 -
            (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
             C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
             C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
             C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
                C50719 * C50707 * C50685) *
               C50830 +
           ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
             C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
             C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
             C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
                C50719 * C50707 * C50685 -
            (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
             C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
             C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
             C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                C50719 * C50707 * C1547) *
               C50657) *
              C50822 +
          (((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
             C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
             C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
             C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
                C50719 * C50707 * C50685 -
            (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
             C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
             C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
             C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                C50719 * C50707 * C1547) *
               C50830 +
           ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
             C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
             C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
             C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
                C50719 * C50707 * C1547 -
            (C123 * C791 - C124 * C782 - C123 * C792 + C108 * C797 +
             C121 * C789 - C122 * C781 - C121 * C790 + C107 * C796 +
             C119 * C787 - C120 * C780 - C119 * C788 + C106 * C795 +
             C117 * C785 - C118 * C779 - C117 * C786 + C105 * C794) *
                C50719 * C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C5105 +
             (C5485 + C5486) * C5106 + C5497 * C5107) *
                C50707 * C1547 -
            (C7328 * C5107 + (C5488 + C5487) * C5106 +
             (C5486 + C5485) * C5105) *
                C50707 * C50685) *
               C50830 +
           (((C3151 + C3150) * C5105 + (C3602 + C3603) * C5106 +
             (C6442 + C6443) * C5107) *
                C50707 * C50685 -
            (C6437 * C5107 + (C3150 + C3151) * C5106 +
             (C2401 + C2400) * C5105) *
                C50707 * C1547) *
               C50657) *
              C50822 +
          ((((C5491 + C5492) * C5105 + (C5493 + C5494) * C5106 +
             (C5495 + C5496) * C5107) *
                C50707 * C50685 -
            (C5498 * C5107 + (C5492 + C5491) * C5106 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C5105) *
                C50707 * C1547) *
               C50830 +
           (((C2406 + C2407) * C5105 + (C3152 + C3153) * C5106 +
             (C6029 + C6030) * C5107) *
                C50707 * C1547 -
            ((C2167 * C6013 - C2168 * C6012 - C2167 * C6014 + C50561 * C6015 +
              C2165 * C4513 - C2166 * C4507 - C2165 * C4514 + C2160 * C4519) *
                 C5107 +
             (C6030 + C6029) * C5106 + (C3153 + C3152) * C5105) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50877 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50878 +
           ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C50719 * C2162 +
            (C3602 + C3603) * C50719 * C2163 +
            (C3604 + C3605) * C50719 * C2164) *
               C1963) *
              C50830 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C4114 + C4115) * C50719 * C2164) *
               C50878 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50877 -
           ((C2167 * C3571 - C2168 * C3569 - C2167 * C3572 + C50561 * C3575 +
             C2165 * C3573 - C2166 * C3570 - C2165 * C3574 + C2160 * C3576) *
                C50719 * C2164 +
            (C3605 + C3604) * C50719 * C2163 +
            (C3603 + C3602) * C50719 * C2162) *
               C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50877 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50878 +
           (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 +
            C119 * C417 - C120 * C402 - C119 * C418 + C106 * C432 +
            C121 * C419 - C122 * C403 - C121 * C420 + C107 * C433 +
            C123 * C421 - C124 * C404 - C123 * C422 + C108 * C434) *
               C50719 * C50707 * C1963) *
              C50830 +
          ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
            C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
            C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
            C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
               C50719 * C50707 * C50878 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50877 -
           (C123 * C1090 - C124 * C1086 - C123 * C1091 + C108 * C1098 +
            C121 * C1092 - C122 * C1087 - C121 * C1093 + C107 * C1099 +
            C119 * C1094 - C120 * C1088 - C119 * C1095 + C106 * C1100 +
            C117 * C1096 - C118 * C1089 - C117 * C1097 + C105 * C1101) *
               C50719 * C50707 * C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C50877 -
           (C7328 * C5107 + (C5488 + C5487) * C5106 + (C5486 + C5485) * C5105) *
               C50707 * C50878 +
           (C5497 * C5105 + (C5490 + C5489) * C5106 + (C7341 + C7342) * C5107) *
               C50707 * C1963) *
              C50830 +
          (((C3151 + C3150) * C5105 + (C3602 + C3603) * C5106 +
            (C6442 + C6443) * C5107) *
               C50707 * C50878 -
           (C6437 * C5107 + (C3150 + C3151) * C5106 + (C2401 + C2400) * C5105) *
               C50707 * C50877 -
           ((C2167 * C6422 - C2168 * C6420 - C2167 * C6423 + C50561 * C6426 +
             C2165 * C6424 - C2166 * C6421 - C2165 * C6425 + C2160 * C6427) *
                C5107 +
            (C6443 + C6442) * C5106 + C6437 * C5105) *
               C50707 * C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
                C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
                C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
                C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                   C50719 * C50707 * C1547 -
               (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
                C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
                C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
                C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
                   C50719 * C50707 * C50685) *
                  C50605 * C898 +
              ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
                C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
                C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
                C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
                   C50719 * C50707 * C50685 -
               (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
                C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
                C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
                C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                   C50719 * C50707 * C1547) *
                  C50605 * C899 +
              ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
                C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
                C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
                C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
                   C50719 * C50707 * C1547 -
               (C123 * C645 - C124 * C644 - C123 * C646 + C108 * C647 +
                C121 * C423 - C122 * C405 - C121 * C424 + C107 * C435 +
                C119 * C407 - C120 * C397 - C119 * C408 + C106 * C427 +
                C117 * C409 - C118 * C398 - C117 * C410 + C105 * C428) *
                   C50719 * C50707 * C50685) *
                  C50605 * C900) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
                C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
                C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
                C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                   C50719 * C50707 * C1547 -
               (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
                C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
                C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
                C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
                   C50719 * C50707 * C50685) *
                  C251 +
              ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
                C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
                C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
                C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
                   C50719 * C50707 * C50685 -
               (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
                C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
                C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
                C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                   C50719 * C50707 * C1547) *
                  C252 +
              ((C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
                C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
                C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
                C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
                   C50719 * C50707 * C1547 -
               (C123 * C1437 - C124 * C1433 - C123 * C1438 + C108 * C1445 +
                C121 * C1439 - C122 * C1434 - C121 * C1440 + C107 * C1446 +
                C119 * C1441 - C120 * C1435 - C119 * C1442 + C106 * C1447 +
                C117 * C1443 - C118 * C1436 - C117 * C1444 + C105 * C1448) *
                   C50719 * C50707 * C50685) *
                  C253) *
             C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 + C119 * C134 -
           C120 * C126 - C119 * C135 + C106 * C147 + C121 * C136 - C122 * C127 -
           C121 * C137 + C107 * C148 + C123 * C138 - C124 * C128 - C123 * C139 +
           C108 * C149) *
              C50719 * C50707 * C1713 -
          (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 + C121 * C409 -
           C122 * C398 - C121 * C410 + C107 * C428 + C119 * C411 - C120 * C399 -
           C119 * C412 + C106 * C429 + C117 * C413 - C118 * C400 - C117 * C414 +
           C105 * C430) *
              C50719 * C50707 * C1714 +
          (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 + C119 * C417 -
           C120 * C402 - C119 * C418 + C106 * C432 + C121 * C419 - C122 * C403 -
           C121 * C420 + C107 * C433 + C123 * C421 - C124 * C404 - C123 * C422 +
           C108 * C434) *
              C50719 * C50707 * C1715 -
          (C123 * C1721 - C124 * C1717 - C123 * C1722 + C108 * C1729 +
           C121 * C1723 - C122 * C1718 - C121 * C1724 + C107 * C1730 +
           C119 * C1725 - C120 * C1719 - C119 * C1726 + C106 * C1731 +
           C117 * C1727 - C118 * C1720 - C117 * C1728 + C105 * C1732) *
              C50719 * C50707 * C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C1547 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C50605 * C898 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C3152 + C3153) * C50719 * C2163 +
            (C3154 + C3155) * C50719 * C2164) *
               C50685 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C1547) *
              C50605 * C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C1547 -
           ((C2167 * C1437 - C2168 * C1433 - C2167 * C1438 + C50561 * C1445 +
             C2165 * C1439 - C2166 * C1434 - C2165 * C1440 + C2160 * C1446) *
                C50719 * C2164 +
            (C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796 +
             C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795) *
                C50719 * C2163 +
            (C2167 * C407 - C2168 * C397 - C2167 * C408 + C50561 * C427 +
             C2165 * C409 - C2166 * C398 - C2165 * C410 + C2160 * C428) *
                C50719 * C2162) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C1547 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C251 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C4114 + C4115) * C50719 * C2164) *
               C50685 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C1547) *
              C252 +
          ((C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C3422 + C3423) * C50719 * C2164) *
               C1547 -
           ((C2167 * C4093 - C2168 * C4091 - C2167 * C4094 + C50561 * C4097 +
             C2165 * C4095 - C2166 * C4092 - C2165 * C4096 + C2160 * C4098) *
                C50719 * C2164 +
            (C4115 + C4114) * C50719 * C2163 + C4109 * C2162) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
              C1713 -
          (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
           (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
            C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
               C50719 * C2162) *
              C1714 +
          ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
            C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
               C50719 * C2162 +
           (C3602 + C3603) * C50719 * C2163 +
           (C3604 + C3605) * C50719 * C2164) *
              C1715 -
          ((C2167 * C4509 - C2168 * C4505 - C2167 * C4510 + C50561 * C4517 +
            C2165 * C4511 - C2166 * C4506 - C2165 * C4512 + C2160 * C4518) *
               C50719 * C2164 +
           (C2167 * C4513 - C2168 * C4507 - C2167 * C4514 + C50561 * C4519 +
            C2165 * C4515 - C2166 * C4508 - C2165 * C4516 + C2160 * C4520) *
               C50719 * C2163 +
           (C2167 * C1725 - C2168 * C1719 - C2167 * C1726 + C50561 * C1731 +
            C2165 * C1727 - C2166 * C1720 - C2165 * C1728 + C2160 * C1732) *
               C50719 * C2162) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C1547 -
           ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
            (C5486 + C5485) * C5105) *
               C50707 * C50685) *
              C50605 * C898 +
          (((C5491 + C5492) * C5105 + (C5493 + C5494) * C5106 +
            (C5495 + C5496) * C5107) *
               C50707 * C50685 -
           (C5498 * C5107 + (C5492 + C5491) * C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C5105 +
            (C5815 + C5816) * C5106 + (C5817 + C5818) * C5107) *
               C50707 * C1547 -
           ((C2167 * C1721 - C2168 * C1717 - C2167 * C1722 + C50561 * C1729 +
             C2165 * C1723 - C2166 * C1718 - C2165 * C1724 + C2160 * C1730) *
                C5107 +
            (C5818 + C5817) * C5106 + (C5816 + C5815) * C5105) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C1547 -
           ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
            (C5486 + C5485) * C5105) *
               C50707 * C50685) *
              C251 +
          (((C3151 + C3150) * C5105 + (C3602 + C3603) * C5106 +
            (C6442 + C6443) * C5107) *
               C50707 * C50685 -
           (C6437 * C5107 + (C3150 + C3151) * C5106 + (C2401 + C2400) * C5105) *
               C50707 * C1547) *
              C252 +
          ((C2412 * C5105 + (C3149 + C3148) * C5106 + (C3604 + C3605) * C5107) *
               C50707 * C1547 -
           ((C2167 * C4509 - C2168 * C4505 - C2167 * C4510 + C50561 * C4517 +
             C2165 * C4511 - C2166 * C4506 - C2165 * C4512 + C2160 * C4518) *
                C5107 +
            (C3605 + C3604) * C5106 + C4100 * C5105) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C5105 +
           (C5485 + C5486) * C5106 + C5497 * C5107) *
              C50707 * C1713 -
          (C7328 * C5107 + (C5488 + C5487) * C5106 + (C5486 + C5485) * C5105) *
              C50707 * C1714 +
          (C5497 * C5105 + (C5490 + C5489) * C5106 + (C7341 + C7342) * C5107) *
              C50707 * C1715 -
          ((C2167 * C7321 - C2168 * C7319 - C2167 * C7322 + C50561 * C7325 +
            C2165 * C7323 - C2166 * C7320 - C2165 * C7324 + C2160 * C7326) *
               C5107 +
           (C7342 + C7341) * C5106 + C7328 * C5105) *
              C50707 * C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50877 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50878 +
           ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C50719 * C2162 +
            (C3602 + C3603) * C50719 * C2163 +
            (C3604 + C3605) * C50719 * C2164) *
               C1963) *
              C50605 * C50822 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C3152 + C3153) * C50719 * C2163 +
            (C3154 + C3155) * C50719 * C2164) *
               C50878 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50877 -
           ((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
             C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                C50719 * C2164 +
            (C2167 * C1092 - C2168 * C1087 - C2167 * C1093 + C50561 * C1099 +
             C2165 * C1094 - C2166 * C1088 - C2165 * C1095 + C2160 * C1100) *
                C50719 * C2163 +
            (C2167 * C419 - C2168 * C403 - C2167 * C420 + C50561 * C433 +
             C2165 * C417 - C2166 * C402 - C2165 * C418 + C2160 * C432) *
                C50719 * C2162) *
               C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50877 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50878 +
           (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 +
            C119 * C417 - C120 * C402 - C119 * C418 + C106 * C432 +
            C121 * C419 - C122 * C403 - C121 * C420 + C107 * C433 +
            C123 * C421 - C124 * C404 - C123 * C422 + C108 * C434) *
               C50719 * C50707 * C1963) *
              C50605 * C50822 +
          ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
            C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
            C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
            C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
               C50719 * C50707 * C50878 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50877 -
           (C123 * C425 - C124 * C406 - C123 * C426 + C108 * C436 +
            C121 * C421 - C122 * C404 - C121 * C422 + C107 * C434 +
            C119 * C419 - C120 * C403 - C119 * C420 + C106 * C433 +
            C117 * C417 - C118 * C402 - C117 * C418 + C105 * C432) *
               C50719 * C50707 * C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C50877 -
           (C7328 * C5107 + (C5488 + C5487) * C5106 + (C5486 + C5485) * C5105) *
               C50707 * C50878 +
           (C5497 * C5105 + (C5490 + C5489) * C5106 + (C7341 + C7342) * C5107) *
               C50707 * C1963) *
              C50605 * C50822 +
          (((C5491 + C5492) * C5105 + (C5493 + C5494) * C5106 +
            (C5495 + C5496) * C5107) *
               C50707 * C50878 -
           (C5498 * C5107 + (C5492 + C5491) * C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C50877 -
           ((C2167 * C5407 - C2168 * C5402 - C2167 * C5408 + C50561 * C5411 +
             C2165 * C5405 - C2166 * C5401 - C2165 * C5406 + C2160 * C5410) *
                C5107 +
            (C5496 + C5495) * C5106 + C5498 * C5105) *
               C50707 * C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C1547 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C251 +
          ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
            C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
            C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
            C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
               C50719 * C50707 * C50685 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C1547) *
              C252 +
          ((C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C1547 -
           (C123 * C1437 - C124 * C1433 - C123 * C1438 + C108 * C1445 +
            C121 * C1439 - C122 * C1434 - C121 * C1440 + C107 * C1446 +
            C119 * C1441 - C120 * C1435 - C119 * C1442 + C106 * C1447 +
            C117 * C1443 - C118 * C1436 - C117 * C1444 + C105 * C1448) *
               C50719 * C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C1547 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C50605 * C898 +
          ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
            C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
            C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
            C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
               C50719 * C50707 * C50685 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C1547) *
              C50605 * C899 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C1547 -
           (C123 * C645 - C124 * C644 - C123 * C646 + C108 * C647 +
            C121 * C423 - C122 * C405 - C121 * C424 + C107 * C435 +
            C119 * C407 - C120 * C397 - C119 * C408 + C106 * C427 +
            C117 * C409 - C118 * C398 - C117 * C410 + C105 * C428) *
               C50719 * C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C1547 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C50605 * C898 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C3152 + C3153) * C50719 * C2163 +
            (C3154 + C3155) * C50719 * C2164) *
               C50685 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C1547) *
              C50605 * C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C1547 -
           ((C2167 * C1437 - C2168 * C1433 - C2167 * C1438 + C50561 * C1445 +
             C2165 * C1439 - C2166 * C1434 - C2165 * C1440 + C2160 * C1446) *
                C50719 * C2164 +
            (C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796 +
             C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795) *
                C50719 * C2163 +
            (C2167 * C407 - C2168 * C397 - C2167 * C408 + C50561 * C427 +
             C2165 * C409 - C2166 * C398 - C2165 * C410 + C2160 * C428) *
                C50719 * C2162) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C1547 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C251 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C4114 + C4115) * C50719 * C2164) *
               C50685 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C1547) *
              C252 +
          ((C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C3422 + C3423) * C50719 * C2164) *
               C1547 -
           ((C2167 * C4093 - C2168 * C4091 - C2167 * C4094 + C50561 * C4097 +
             C2165 * C4095 - C2166 * C4092 - C2165 * C4096 + C2160 * C4098) *
                C50719 * C2164 +
            (C4115 + C4114) * C50719 * C2163 + C4109 * C2162) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C1547 -
           ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
            (C5486 + C5485) * C5105) *
               C50707 * C50685) *
              C50605 * C898 +
          (((C5491 + C5492) * C5105 + (C5493 + C5494) * C5106 +
            (C5495 + C5496) * C5107) *
               C50707 * C50685 -
           (C5498 * C5107 + (C5492 + C5491) * C5106 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C5105) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C5105 +
            (C5815 + C5816) * C5106 + (C5817 + C5818) * C5107) *
               C50707 * C1547 -
           ((C2167 * C1721 - C2168 * C1717 - C2167 * C1722 + C50561 * C1729 +
             C2165 * C1723 - C2166 * C1718 - C2165 * C1724 + C2160 * C1730) *
                C5107 +
            (C5818 + C5817) * C5106 + (C5816 + C5815) * C5105) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C5105 +
            (C5485 + C5486) * C5106 + C5497 * C5107) *
               C50707 * C1547 -
           ((C5489 + C5490) * C5107 + (C5488 + C5487) * C5106 +
            (C5486 + C5485) * C5105) *
               C50707 * C50685) *
              C251 +
          (((C3151 + C3150) * C5105 + (C3602 + C3603) * C5106 +
            (C6442 + C6443) * C5107) *
               C50707 * C50685 -
           (C6437 * C5107 + (C3150 + C3151) * C5106 + (C2401 + C2400) * C5105) *
               C50707 * C1547) *
              C252 +
          ((C2412 * C5105 + (C3149 + C3148) * C5106 + (C3604 + C3605) * C5107) *
               C50707 * C1547 -
           ((C2167 * C4509 - C2168 * C4505 - C2167 * C4510 + C50561 * C4517 +
             C2165 * C4511 - C2166 * C4506 - C2165 * C4512 + C2160 * C4518) *
                C5107 +
            (C3605 + C3604) * C5106 + C4100 * C5105) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C50621 * C50830 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C50621 * C50657) *
              C50873 +
          (((C8162 + C8163 + C8164) * C50844 +
            (C8860 + C8861 + C8862) * C50783) *
               C50707 * C50621 * C50657 -
           ((C11150 + C11149 + C11148) * C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C50621 * C50830) *
              C50874 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50844 +
            (C7931 * C409 - C7932 * C398 - C7931 * C410 + C50871 * C428 +
             C7933 * C407 - C7934 * C397 - C7933 * C408 + C50872 * C427 +
             C7935 * C423 - C7936 * C405 - C7935 * C424 + C7928 * C435) *
                C50783) *
               C50707 * C50621 * C50830 -
           ((C7935 * C791 - C7936 * C782 - C7935 * C792 + C7928 * C797 +
             C7933 * C789 - C7934 * C781 - C7933 * C790 + C50872 * C796 +
             C7931 * C787 - C7932 * C780 - C7931 * C788 + C50871 * C795) *
                C50783 +
            (C8480 + C8479 + C8478) * C50844) *
               C50707 * C50621 * C50657) *
              C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
              C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
              C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                 C50844 +
             (C11142 + C11143 + C11144) * C50783) *
                C50707 * C50831 -
            ((C11145 + C11146 + C11147) * C50783 +
             (C11144 + C11143 + C11142) * C50844) *
                C50707 * C50685) *
               C50830 +
           (((C8859 + C8858 + C8857) * C50844 +
             (C9292 + C9293 + C9294) * C50783) *
                C50707 * C50685 -
            ((C8857 + C8858 + C8859) * C50783 +
             (C8158 + C8157 + C8156) * C50844) *
                C50707 * C50831) *
               C50657) *
              C254 +
          ((((C11148 + C11149 + C11150) * C50844 +
             (C11151 + C11152 + C11153) * C50783) *
                C50707 * C50685 -
            ((C11150 + C11149 + C11148) * C50783 +
             (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
              C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
              C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                 C50844) *
                C50707 * C50831) *
               C50830 +
           (((C8162 + C8163 + C8164) * C50844 +
             (C8860 + C8861 + C8862) * C50783) *
                C50707 * C50831 -
            ((C7935 * C1090 - C7936 * C1086 - C7935 * C1091 + C7928 * C1098 +
              C7933 * C1092 - C7934 * C1087 - C7933 * C1093 + C50872 * C1099 +
              C7931 * C1094 - C7932 * C1088 - C7931 * C1095 + C50871 * C1100) *
                 C50783 +
             (C8862 + C8861 + C8860) * C50844) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428) *
                C50783) *
               C50707 * C50621 * C251 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C50621 * C252 +
           ((C8161 + C8160 + C8159) * C50844 +
            (C9799 + C9800 + C9801) * C50783) *
               C50707 * C50621 * C253) *
              C254 +
          (((C8162 + C8163 + C8164) * C50844 +
            (C8860 + C8861 + C8862) * C50783) *
               C50707 * C50621 * C252 -
           ((C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427 +
             C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
             C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429) *
                C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C50621 * C251 -
           ((C7935 * C1437 - C7936 * C1433 - C7935 * C1438 + C7928 * C1445 +
             C7933 * C1439 - C7934 * C1434 - C7933 * C1440 + C50872 * C1446 +
             C7931 * C1441 - C7932 * C1435 - C7931 * C1442 + C50871 * C1447) *
                C50783 +
            (C8167 + C8166 + C8165) * C50844) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50844 +
           (C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430 +
            C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
            C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428) *
               C50783) *
              C50707 * C50621 * C50605 * C113 -
          ((C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427 +
            C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
            C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429) *
               C50783 +
           (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
            C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
            C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
               C50844) *
              C50707 * C50621 * C50605 * C114 +
          ((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
            C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
            C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
               C50844 +
           (C7931 * C409 - C7932 * C398 - C7931 * C410 + C50871 * C428 +
            C7933 * C407 - C7934 * C397 - C7933 * C408 + C50872 * C427 +
            C7935 * C423 - C7936 * C405 - C7935 * C424 + C7928 * C435) *
               C50783) *
              C50707 * C50621 * C50605 * C115 -
          ((C7935 * C645 - C7936 * C644 - C7935 * C646 + C7928 * C647 +
            C7933 * C423 - C7934 * C405 - C7933 * C424 + C50872 * C435 +
            C7931 * C407 - C7932 * C397 - C7931 * C408 + C50871 * C427) *
               C50783 +
           (C7935 * C142 - C7936 * C130 - C7935 * C143 + C7928 * C151 +
            C7933 * C140 - C7934 * C129 - C7933 * C141 + C50872 * C150 +
            C7931 * C138 - C7932 * C128 - C7931 * C139 + C50871 * C149) *
               C50844) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C394 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C395 +
           ((C11147 + C11146 + C11145) * C50844 +
            (C7931 * C1727 - C7932 * C1720 - C7931 * C1728 + C50871 * C1732 +
             C7933 * C1725 - C7934 * C1719 - C7933 * C1726 + C50872 * C1731 +
             C7935 * C1723 - C7936 * C1718 - C7935 * C1724 + C7928 * C1730) *
                C50783) *
               C50707 * C396) *
              C50605 * C254 +
          (((C11148 + C11149 + C11150) * C50844 +
            (C11151 + C11152 + C11153) * C50783) *
               C50707 * C395 -
           ((C11150 + C11149 + C11148) * C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C394 -
           ((C7935 * C1721 - C7936 * C1717 - C7935 * C1722 + C7928 * C1729 +
             C7933 * C1723 - C7934 * C1718 - C7933 * C1724 + C50872 * C1730 +
             C7931 * C1725 - C7932 * C1719 - C7931 * C1726 + C50871 * C1731) *
                C50783 +
            (C11153 + C11152 + C11151) * C50844) *
               C50707 * C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C50831 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C50685) *
              C50605 * C50873 +
          (((C11148 + C11149 + C11150) * C50844 +
            (C11151 + C11152 + C11153) * C50783) *
               C50707 * C50685 -
           ((C11150 + C11149 + C11148) * C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C50831) *
              C50605 * C50874 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50844 +
            (C11464 + C11465 + C11466) * C50783) *
               C50707 * C50831 -
           ((C7935 * C425 - C7936 * C406 - C7935 * C426 + C7928 * C436 +
             C7933 * C421 - C7934 * C404 - C7933 * C422 + C50872 * C434 +
             C7931 * C419 - C7932 * C403 - C7931 * C420 + C50871 * C433) *
                C50783 +
            (C11466 + C11465 + C11464) * C50844) *
               C50707 * C50685) *
              C50605 * C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50844 +
           (C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430 +
            C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
            C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428) *
               C50783) *
              C50707 * C50621 * C50605 * C113 -
          ((C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427 +
            C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
            C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429) *
               C50783 +
           (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
            C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
            C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
               C50844) *
              C50707 * C50621 * C50605 * C114 +
          ((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
            C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
            C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
               C50844 +
           (C7931 * C409 - C7932 * C398 - C7931 * C410 + C50871 * C428 +
            C7933 * C407 - C7934 * C397 - C7933 * C408 + C50872 * C427 +
            C7935 * C423 - C7936 * C405 - C7935 * C424 + C7928 * C435) *
               C50783) *
              C50707 * C50621 * C50605 * C115 -
          ((C7935 * C645 - C7936 * C644 - C7935 * C646 + C7928 * C647 +
            C7933 * C423 - C7934 * C405 - C7933 * C424 + C50872 * C435 +
            C7931 * C407 - C7932 * C397 - C7931 * C408 + C50871 * C427) *
               C50783 +
           (C7935 * C142 - C7936 * C130 - C7935 * C143 + C7928 * C151 +
            C7933 * C140 - C7934 * C129 - C7933 * C141 + C50872 * C150 +
            C7931 * C138 - C7932 * C128 - C7931 * C139 + C50871 * C149) *
               C50844) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C7931 * C413 - C7932 * C400 - C7931 * C414 + C50871 * C430 +
             C7933 * C411 - C7934 * C399 - C7933 * C412 + C50872 * C429 +
             C7935 * C409 - C7936 * C398 - C7935 * C410 + C7928 * C428) *
                C50783) *
               C50707 * C50621 * C251 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C50621 * C252 +
           ((C8161 + C8160 + C8159) * C50844 +
            (C9799 + C9800 + C9801) * C50783) *
               C50707 * C50621 * C253) *
              C254 +
          (((C8162 + C8163 + C8164) * C50844 +
            (C8860 + C8861 + C8862) * C50783) *
               C50707 * C50621 * C252 -
           ((C7935 * C407 - C7936 * C397 - C7935 * C408 + C7928 * C427 +
             C7933 * C409 - C7934 * C398 - C7933 * C410 + C50872 * C428 +
             C7931 * C411 - C7932 * C399 - C7931 * C412 + C50871 * C429) *
                C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C50621 * C251 -
           ((C7935 * C1437 - C7936 * C1433 - C7935 * C1438 + C7928 * C1445 +
             C7933 * C1439 - C7934 * C1434 - C7933 * C1440 + C50872 * C1446 +
             C7931 * C1441 - C7932 * C1435 - C7931 * C1442 + C50871 * C1447) *
                C50783 +
            (C8167 + C8166 + C8165) * C50844) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C50621 * C50875 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C50621 * C50876 +
           ((C8161 + C8160 + C8159) * C50844 +
            (C9799 + C9800 + C9801) * C50783) *
               C50707 * C50621 * C1202) *
              C50822 +
          (((C8162 + C8163 + C8164) * C50844 +
            (C8860 + C8861 + C8862) * C50783) *
               C50707 * C50621 * C50876 -
           ((C11150 + C11149 + C11148) * C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C50621 * C50875 -
           ((C7935 * C1437 - C7936 * C1433 - C7935 * C1438 + C7928 * C1445 +
             C7933 * C1439 - C7934 * C1434 - C7933 * C1440 + C50872 * C1446 +
             C7931 * C1441 - C7932 * C1435 - C7931 * C1442 + C50871 * C1447) *
                C50783 +
            (C8167 + C8166 + C8165) * C50844) *
               C50707 * C50621 * C1202) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C50831 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C50685) *
              C50875 +
          (((C8859 + C8858 + C8857) * C50844 +
            (C9292 + C9293 + C9294) * C50783) *
               C50707 * C50685 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C50831) *
              C50876 +
          (((C8161 + C8160 + C8159) * C50844 +
            (C9799 + C9800 + C9801) * C50783) *
               C50707 * C50831 -
           ((C7935 * C2568 - C7936 * C2563 - C7935 * C2569 + C7928 * C2572 +
             C7933 * C2566 - C7934 * C2562 - C7933 * C2567 + C50872 * C2571 +
             C7931 * C2564 - C7932 * C2561 - C7931 * C2565 + C50871 * C2570) *
                C50783 +
            (C9801 + C9800 + C9799) * C50844) *
               C50707 * C50685) *
              C1202) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50844 +
           (C11142 + C11143 + C11144) * C50783) *
              C50707 * C50621 * C967 -
          ((C8857 + C8858 + C8859) * C50783 +
           (C8158 + C8157 + C8156) * C50844) *
              C50707 * C50621 * C968 +
          ((C8161 + C8160 + C8159) * C50844 +
           (C9799 + C9800 + C9801) * C50783) *
              C50707 * C50621 * C969 -
          ((C7935 * C3094 - C7936 * C3089 - C7935 * C3095 + C7928 * C3098 +
            C7933 * C3092 - C7934 * C3088 - C7933 * C3093 + C50872 * C3097 +
            C7931 * C3090 - C7932 * C3087 - C7931 * C3091 + C50871 * C3096) *
               C50783 +
           (C9127 + C9126 + C9125) * C50844) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C50621 * C896 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C50621 * C50657) *
              C898 +
          (((C8162 + C8163 + C8164) * C50844 +
            (C8860 + C8861 + C8862) * C50783) *
               C50707 * C50621 * C50657 -
           ((C11150 + C11149 + C11148) * C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C50621 * C896) *
              C899 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50844 +
            (C11464 + C11465 + C11466) * C50783) *
               C50707 * C50621 * C896 -
           ((C7935 * C791 - C7936 * C782 - C7935 * C792 + C7928 * C797 +
             C7933 * C789 - C7934 * C781 - C7933 * C790 + C50872 * C796 +
             C7931 * C787 - C7932 * C780 - C7931 * C788 + C50871 * C795) *
                C50783 +
            (C8480 + C8479 + C8478) * C50844) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C394 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C395 +
           ((C11147 + C11146 + C11145) * C50844 +
            (C7931 * C1727 - C7932 * C1720 - C7931 * C1728 + C50871 * C1732 +
             C7933 * C1725 - C7934 * C1719 - C7933 * C1726 + C50872 * C1731 +
             C7935 * C1723 - C7936 * C1718 - C7935 * C1724 + C7928 * C1730) *
                C50783) *
               C50707 * C396) *
              C896 +
          (((C8859 + C8858 + C8857) * C50844 +
            (C9292 + C9293 + C9294) * C50783) *
               C50707 * C395 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C394 -
           ((C7935 * C6013 - C7936 * C6012 - C7935 * C6014 + C7928 * C6015 +
             C7933 * C4513 - C7934 * C4507 - C7933 * C4514 + C50872 * C4519 +
             C7931 * C4515 - C7932 * C4508 - C7931 * C4516 + C50871 * C4520) *
                C50783 +
            (C9294 + C9293 + C9292) * C50844) *
               C50707 * C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
              C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
              C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                 C50844 +
             (C11142 + C11143 + C11144) * C50783) *
                C50707 * C50831 -
            ((C11145 + C11146 + C11147) * C50783 +
             (C11144 + C11143 + C11142) * C50844) *
                C50707 * C50685) *
               C896 +
           (((C8859 + C8858 + C8857) * C50844 +
             (C9292 + C9293 + C9294) * C50783) *
                C50707 * C50685 -
            ((C8857 + C8858 + C8859) * C50783 +
             (C8158 + C8157 + C8156) * C50844) *
                C50707 * C50831) *
               C50657) *
              C50822 +
          ((((C11148 + C11149 + C11150) * C50844 +
             (C11151 + C11152 + C11153) * C50783) *
                C50707 * C50685 -
            ((C11150 + C11149 + C11148) * C50783 +
             (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
              C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
              C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                 C50844) *
                C50707 * C50831) *
               C896 +
           (((C8162 + C8163 + C8164) * C50844 +
             (C8860 + C8861 + C8862) * C50783) *
                C50707 * C50831 -
            ((C7935 * C1090 - C7936 * C1086 - C7935 * C1091 + C7928 * C1098 +
              C7933 * C1092 - C7934 * C1087 - C7933 * C1093 + C50872 * C1099 +
              C7931 * C1094 - C7932 * C1088 - C7931 * C1095 + C50871 * C1100) *
                 C50783 +
             (C8862 + C8861 + C8860) * C50844) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C50621 * C896 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C50621 * C50657) *
              C898 +
          (((C8162 + C8163 + C8164) * C50844 +
            (C8860 + C8861 + C8862) * C50783) *
               C50707 * C50621 * C50657 -
           ((C11150 + C11149 + C11148) * C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C50621 * C896) *
              C899 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50844 +
            (C11464 + C11465 + C11466) * C50783) *
               C50707 * C50621 * C896 -
           ((C7935 * C791 - C7936 * C782 - C7935 * C792 + C7928 * C797 +
             C7933 * C789 - C7934 * C781 - C7933 * C790 + C50872 * C796 +
             C7931 * C787 - C7932 * C780 - C7931 * C788 + C50871 * C795) *
                C50783 +
            (C8480 + C8479 + C8478) * C50844) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50844 +
           (C11142 + C11143 + C11144) * C50783) *
              C50707 * C50621 * C967 -
          ((C8857 + C8858 + C8859) * C50783 +
           (C8158 + C8157 + C8156) * C50844) *
              C50707 * C50621 * C968 +
          ((C8161 + C8160 + C8159) * C50844 +
           (C9799 + C9800 + C9801) * C50783) *
              C50707 * C50621 * C969 -
          ((C7935 * C3094 - C7936 * C3089 - C7935 * C3095 + C7928 * C3098 +
            C7933 * C3092 - C7934 * C3088 - C7933 * C3093 + C50872 * C3097 +
            C7931 * C3090 - C7932 * C3087 - C7931 * C3091 + C50871 * C3096) *
               C50783 +
           (C9127 + C9126 + C9125) * C50844) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
              C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
              C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                 C50844 +
             (C11142 + C11143 + C11144) * C50783) *
                C50707 * C1547 -
            ((C11145 + C11146 + C11147) * C50783 +
             (C11144 + C11143 + C11142) * C50844) *
                C50707 * C50685) *
               C50830 +
           (((C8859 + C8858 + C8857) * C50844 +
             (C9292 + C9293 + C9294) * C50783) *
                C50707 * C50685 -
            ((C8857 + C8858 + C8859) * C50783 +
             (C8158 + C8157 + C8156) * C50844) *
                C50707 * C1547) *
               C50657) *
              C50822 +
          ((((C11148 + C11149 + C11150) * C50844 +
             (C11151 + C11152 + C11153) * C50783) *
                C50707 * C50685 -
            ((C11150 + C11149 + C11148) * C50783 +
             (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
              C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
              C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                 C50844) *
                C50707 * C1547) *
               C50830 +
           (((C8162 + C8163 + C8164) * C50844 +
             (C8860 + C8861 + C8862) * C50783) *
                C50707 * C1547 -
            ((C7935 * C1090 - C7936 * C1086 - C7935 * C1091 + C7928 * C1098 +
              C7933 * C1092 - C7934 * C1087 - C7933 * C1093 + C50872 * C1099 +
              C7931 * C1094 - C7932 * C1088 - C7931 * C1095 + C50871 * C1100) *
                 C50783 +
             (C8862 + C8861 + C8860) * C50844) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C50877 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C50878 +
           ((C11147 + C11146 + C11145) * C50844 +
            (C12945 + C12946 + C12947) * C50783) *
               C50707 * C1963) *
              C50830 +
          (((C8859 + C8858 + C8857) * C50844 +
            (C9292 + C9293 + C9294) * C50783) *
               C50707 * C50878 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C50877 -
           ((C7935 * C6013 - C7936 * C6012 - C7935 * C6014 + C7928 * C6015 +
             C7933 * C4513 - C7934 * C4507 - C7933 * C4514 + C50872 * C4519 +
             C7931 * C4515 - C7932 * C4508 - C7931 * C4516 + C50871 * C4520) *
                C50783 +
            (C9294 + C9293 + C9292) * C50844) *
               C50707 * C1963) *
              C50657) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C1547 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C50685) *
              C251 +
          (((C8859 + C8858 + C8857) * C50844 +
            (C9292 + C9293 + C9294) * C50783) *
               C50707 * C50685 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C1547) *
              C252 +
          (((C8161 + C8160 + C8159) * C50844 +
            (C9799 + C9800 + C9801) * C50783) *
               C50707 * C1547 -
           ((C7935 * C2568 - C7936 * C2563 - C7935 * C2569 + C7928 * C2572 +
             C7933 * C2566 - C7934 * C2562 - C7933 * C2567 + C50872 * C2571 +
             C7931 * C2564 - C7932 * C2561 - C7931 * C2565 + C50871 * C2570) *
                C50783 +
            (C9801 + C9800 + C9799) * C50844) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C1547 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C50685) *
              C50605 * C898 +
          (((C11148 + C11149 + C11150) * C50844 +
            (C11151 + C11152 + C11153) * C50783) *
               C50707 * C50685 -
           ((C11150 + C11149 + C11148) * C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50844 +
            (C11464 + C11465 + C11466) * C50783) *
               C50707 * C1547 -
           ((C7935 * C425 - C7936 * C406 - C7935 * C426 + C7928 * C436 +
             C7933 * C421 - C7934 * C404 - C7933 * C422 + C50872 * C434 +
             C7931 * C419 - C7932 * C403 - C7931 * C420 + C50871 * C433) *
                C50783 +
            (C11466 + C11465 + C11464) * C50844) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
            C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
            C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
               C50844 +
           (C11142 + C11143 + C11144) * C50783) *
              C50707 * C1713 -
          ((C11145 + C11146 + C11147) * C50783 +
           (C11144 + C11143 + C11142) * C50844) *
              C50707 * C1714 +
          ((C11147 + C11146 + C11145) * C50844 +
           (C12945 + C12946 + C12947) * C50783) *
              C50707 * C1715 -
          ((C7935 * C5407 - C7936 * C5402 - C7935 * C5408 + C7928 * C5411 +
            C7933 * C5405 - C7934 * C5401 - C7933 * C5406 + C50872 * C5410 +
            C7931 * C5403 - C7932 * C5400 - C7931 * C5404 + C50871 * C5409) *
               C50783 +
           (C12947 + C12946 + C12945) * C50844) *
              C50707 * C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C50877 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C50878 +
           ((C11147 + C11146 + C11145) * C50844 +
            (C12945 + C12946 + C12947) * C50783) *
               C50707 * C1963) *
              C50605 * C50822 +
          (((C11148 + C11149 + C11150) * C50844 +
            (C11151 + C11152 + C11153) * C50783) *
               C50707 * C50878 -
           ((C11150 + C11149 + C11148) * C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C50877 -
           ((C7935 * C1721 - C7936 * C1717 - C7935 * C1722 + C7928 * C1729 +
             C7933 * C1723 - C7934 * C1718 - C7933 * C1724 + C50872 * C1730 +
             C7931 * C1725 - C7932 * C1719 - C7931 * C1726 + C50871 * C1731) *
                C50783 +
            (C11153 + C11152 + C11151) * C50844) *
               C50707 * C1963) *
              C50605 * C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C1547 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C50685) *
              C50605 * C898 +
          (((C11148 + C11149 + C11150) * C50844 +
            (C11151 + C11152 + C11153) * C50783) *
               C50707 * C50685 -
           ((C11150 + C11149 + C11148) * C50783 +
            (C7935 * C138 - C7936 * C128 - C7935 * C139 + C7928 * C149 +
             C7933 * C136 - C7934 * C127 - C7933 * C137 + C50872 * C148 +
             C7931 * C134 - C7932 * C126 - C7931 * C135 + C50871 * C147) *
                C50844) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C7931 * C136 - C7932 * C127 - C7931 * C137 + C50871 * C148 +
             C7933 * C138 - C7934 * C128 - C7933 * C139 + C50872 * C149 +
             C7935 * C140 - C7936 * C129 - C7935 * C141 + C7928 * C150) *
                C50844 +
            (C11464 + C11465 + C11466) * C50783) *
               C50707 * C1547 -
           ((C7935 * C425 - C7936 * C406 - C7935 * C426 + C7928 * C436 +
             C7933 * C421 - C7934 * C404 - C7933 * C422 + C50872 * C434 +
             C7931 * C419 - C7932 * C403 - C7931 * C420 + C50871 * C433) *
                C50783 +
            (C11466 + C11465 + C11464) * C50844) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C7931 * C132 - C7932 * C125 - C7931 * C133 + C50871 * C146 +
             C7933 * C134 - C7934 * C126 - C7933 * C135 + C50872 * C147 +
             C7935 * C136 - C7936 * C127 - C7935 * C137 + C7928 * C148) *
                C50844 +
            (C11142 + C11143 + C11144) * C50783) *
               C50707 * C1547 -
           ((C11145 + C11146 + C11147) * C50783 +
            (C11144 + C11143 + C11142) * C50844) *
               C50707 * C50685) *
              C251 +
          (((C8859 + C8858 + C8857) * C50844 +
            (C9292 + C9293 + C9294) * C50783) *
               C50707 * C50685 -
           ((C8857 + C8858 + C8859) * C50783 +
            (C8158 + C8157 + C8156) * C50844) *
               C50707 * C1547) *
              C252 +
          (((C8161 + C8160 + C8159) * C50844 +
            (C9799 + C9800 + C9801) * C50783) *
               C50707 * C1547 -
           ((C7935 * C2568 - C7936 * C2563 - C7935 * C2569 + C7928 * C2572 +
             C7933 * C2566 - C7934 * C2562 - C7933 * C2567 + C50872 * C2571 +
             C7931 * C2564 - C7932 * C2561 - C7931 * C2565 + C50871 * C2570) *
                C50783 +
            (C9801 + C9800 + C9799) * C50844) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C50830 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C50657) *
              C50873 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C50657 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C50830) *
              C50874 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C50621 * C50830 -
           (C123 * C541 - C124 * C540 - C123 * C542 + C108 * C543 +
            C121 * C282 - C122 * C264 - C121 * C283 + C107 * C294 +
            C119 * C266 - C120 * C256 - C119 * C267 + C106 * C286 +
            C117 * C268 - C118 * C257 - C117 * C269 + C105 * C287) *
               C50719 * C50707 * C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C50830 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C50657) *
              C50873 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C50657 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C50830) *
              C50874 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C50621 * C50830 -
           ((C2167 * C976 - C2168 * C972 - C2167 * C977 + C50561 * C984 +
             C2165 * C978 - C2166 * C973 - C2165 * C979 + C2160 * C985) *
                C50719 * C2164 +
            (C2747 + C2746) * C50719 * C2163 +
            (C2745 + C2744) * C50719 * C2162) *
               C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
             C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
             C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
             C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                C50719 * C50707 * C50831 -
            (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
             C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
             C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
             C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
                C50719 * C50707 * C50685) *
               C50830 +
           ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
             C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
             C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
             C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
                C50719 * C50707 * C50685 -
            (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
             C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
             C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
             C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                C50719 * C50707 * C50831) *
               C50657) *
              C254 +
          (((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
             C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
             C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
             C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
                C50719 * C50707 * C50685 -
            (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
             C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
             C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
             C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                C50719 * C50707 * C50831) *
               C50830 +
           ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
             C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
             C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
             C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
                C50719 * C50707 * C50831 -
            (C123 * C791 - C124 * C782 - C123 * C792 + C108 * C797 +
             C121 * C789 - C122 * C781 - C121 * C790 + C107 * C796 +
             C119 * C787 - C120 * C780 - C119 * C788 + C106 * C795 +
             C117 * C785 - C118 * C779 - C117 * C786 + C105 * C794) *
                C50719 * C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50719 * C2162 +
             (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
                C50831 -
            ((C3148 + C3149) * C50719 * C2164 +
             (C3150 + C3151) * C50719 * C2163 +
             (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
              C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                 C50719 * C2162) *
                C50685) *
               C50830 +
           (((C3151 + C3150) * C50719 * C2162 +
             (C3149 + C3148) * C50719 * C2163 +
             (C2165 * C3090 - C2166 * C3087 - C2165 * C3091 + C2160 * C3096 +
              C2167 * C3092 - C2168 * C3088 - C2167 * C3093 + C50561 * C3097) *
                 C50719 * C2164) *
                C50685 -
            ((C2404 + C2405) * C50719 * C2164 +
             (C2403 + C2402) * C50719 * C2163 +
             (C2401 + C2400) * C50719 * C2162) *
                C50831) *
               C50657) *
              C254 +
          ((((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
              C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                 C50719 * C2162 +
             (C3152 + C3153) * C50719 * C2163 +
             (C3154 + C3155) * C50719 * C2164) *
                C50685 -
            (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50719 * C2162) *
                C50831) *
               C50830 +
           (((C2406 + C2407) * C50719 * C2162 +
             (C2408 + C2409) * C50719 * C2163 +
             (C2410 + C2411) * C50719 * C2164) *
                C50831 -
            ((C2167 * C3094 - C2168 * C3089 - C2167 * C3095 + C50561 * C3098 +
              C2165 * C3092 - C2166 * C3088 - C2165 * C3093 + C2160 * C3097) *
                 C50719 * C2164 +
             (C3155 + C3154) * C50719 * C2163 +
             (C3153 + C3152) * C50719 * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C251 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C252 +
           (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C50621 * C253) *
              C254 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C252 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C251 -
           (C123 * C284 - C124 * C265 - C123 * C285 + C108 * C295 +
            C121 * C280 - C122 * C263 - C121 * C281 + C107 * C293 +
            C119 * C278 - C120 * C262 - C119 * C279 + C106 * C292 +
            C117 * C276 - C118 * C261 - C117 * C277 + C105 * C291) *
               C50719 * C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 + C119 * C134 -
           C120 * C126 - C119 * C135 + C106 * C147 + C121 * C136 - C122 * C127 -
           C121 * C137 + C107 * C148 + C123 * C138 - C124 * C128 - C123 * C139 +
           C108 * C149) *
              C50719 * C50707 * C50621 * C50605 * C113 -
          (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 + C121 * C138 -
           C122 * C128 - C121 * C139 + C107 * C149 + C119 * C136 - C120 * C127 -
           C119 * C137 + C106 * C148 + C117 * C134 - C118 * C126 - C117 * C135 +
           C105 * C147) *
              C50719 * C50707 * C50621 * C50605 * C114 +
          (C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 + C119 * C138 -
           C120 * C128 - C119 * C139 + C106 * C149 + C121 * C140 - C122 * C129 -
           C121 * C141 + C107 * C150 + C123 * C142 - C124 * C130 - C123 * C143 +
           C108 * C151) *
              C50719 * C50707 * C50621 * C50605 * C115 -
          (C123 * C144 - C124 * C131 - C123 * C145 + C108 * C152 + C121 * C142 -
           C122 * C130 - C121 * C143 + C107 * C151 + C119 * C140 - C120 * C129 -
           C119 * C141 + C106 * C150 + C117 * C138 - C118 * C128 - C117 * C139 +
           C105 * C149) *
              C50719 * C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C394 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C395 +
           (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 +
            C119 * C417 - C120 * C402 - C119 * C418 + C106 * C432 +
            C121 * C419 - C122 * C403 - C121 * C420 + C107 * C433 +
            C123 * C421 - C124 * C404 - C123 * C422 + C108 * C434) *
               C50719 * C50707 * C396) *
              C50605 * C254 +
          ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
            C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
            C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
            C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
               C50719 * C50707 * C395 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C394 -
           (C123 * C425 - C124 * C406 - C123 * C426 + C108 * C436 +
            C121 * C421 - C122 * C404 - C121 * C422 + C107 * C434 +
            C119 * C419 - C120 * C403 - C119 * C420 + C106 * C433 +
            C117 * C417 - C118 * C402 - C117 * C418 + C105 * C432) *
               C50719 * C50707 * C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2165 * C272 - C2166 * C259 - C2165 * C273 + C2160 * C289 +
            C2167 * C270 - C2168 * C258 - C2167 * C271 + C50561 * C288) *
               C50719 * C2163 +
           (C2165 * C274 - C2166 * C260 - C2165 * C275 + C2160 * C290 +
            C2167 * C276 - C2168 * C261 - C2167 * C277 + C50561 * C291) *
               C50719 * C2164) *
              C50621 * C50605 * C113 -
          ((C2167 * C278 - C2168 * C262 - C2167 * C279 + C50561 * C292 +
            C2165 * C276 - C2166 * C261 - C2165 * C277 + C2160 * C291) *
               C50719 * C2164 +
           (C2167 * C268 - C2168 * C257 - C2167 * C269 + C50561 * C287 +
            C2165 * C270 - C2166 * C258 - C2165 * C271 + C2160 * C288) *
               C50719 * C2163 +
           (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
            C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
               C50719 * C2162) *
              C50621 * C50605 * C114 +
          ((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
            C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
               C50719 * C2162 +
           (C2165 * C268 - C2166 * C257 - C2165 * C269 + C2160 * C287 +
            C2167 * C266 - C2168 * C256 - C2167 * C267 + C50561 * C286) *
               C50719 * C2163 +
           (C2165 * C278 - C2166 * C262 - C2165 * C279 + C2160 * C292 +
            C2167 * C280 - C2168 * C263 - C2167 * C281 + C50561 * C293) *
               C50719 * C2164) *
              C50621 * C50605 * C115 -
          ((C2167 * C284 - C2168 * C265 - C2167 * C285 + C50561 * C295 +
            C2165 * C280 - C2166 * C263 - C2165 * C281 + C2160 * C293) *
               C50719 * C2164 +
           (C2167 * C282 - C2168 * C264 - C2167 * C283 + C50561 * C294 +
            C2165 * C266 - C2166 * C256 - C2165 * C267 + C2160 * C286) *
               C50719 * C2163 +
           (C2167 * C140 - C2168 * C129 - C2167 * C141 + C50561 * C150 +
            C2165 * C138 - C2166 * C128 - C2165 * C139 + C2160 * C149) *
               C50719 * C2162) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C251 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C252 +
           (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C2165 * C2318 - C2166 * C2315 - C2165 * C2319 + C2160 * C2324 +
             C2167 * C2320 - C2168 * C2316 - C2167 * C2321 + C50561 * C2325) *
                C50719 * C2164) *
               C50621 * C253) *
              C254 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C252 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C251 -
           ((C2167 * C2322 - C2168 * C2317 - C2167 * C2323 + C50561 * C2326 +
             C2165 * C2320 - C2166 * C2316 - C2165 * C2321 + C2160 * C2325) *
                C50719 * C2164 +
            (C2411 + C2410) * C50719 * C2163 + C2415 * C2162) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C394 -
           ((C2167 * C1441 - C2168 * C1435 - C2167 * C1442 + C50561 * C1447 +
             C2165 * C1443 - C2166 * C1436 - C2165 * C1444 + C2160 * C1448) *
                C50719 * C2164 +
            (C2167 * C785 - C2168 * C779 - C2167 * C786 + C50561 * C794 +
             C2165 * C783 - C2166 * C778 - C2165 * C784 + C2160 * C793) *
                C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C395 +
           ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C50719 * C2162 +
            (C2165 * C1096 - C2166 * C1089 - C2165 * C1097 + C2160 * C1101 +
             C2167 * C1094 - C2168 * C1088 - C2167 * C1095 + C50561 * C1100) *
                C50719 * C2163 +
            (C2165 * C2564 - C2166 * C2561 - C2165 * C2565 + C2160 * C2570 +
             C2167 * C2566 - C2168 * C2562 - C2167 * C2567 + C50561 * C2571) *
                C50719 * C2164) *
               C396) *
              C50605 * C254 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C2165 * C785 - C2166 * C779 - C2165 * C786 + C2160 * C794 +
             C2167 * C787 - C2168 * C780 - C2167 * C788 + C50561 * C795) *
                C50719 * C2163 +
            (C2165 * C1441 - C2166 * C1435 - C2165 * C1442 + C2160 * C1447 +
             C2167 * C1439 - C2168 * C1434 - C2167 * C1440 + C50561 * C1446) *
                C50719 * C2164) *
               C395 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C394 -
           ((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
             C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                C50719 * C2164 +
            (C2167 * C1092 - C2168 * C1087 - C2167 * C1093 + C50561 * C1099 +
             C2165 * C1094 - C2166 * C1088 - C2165 * C1095 + C2160 * C1100) *
                C50719 * C2163 +
            (C2167 * C419 - C2168 * C403 - C2167 * C420 + C50561 * C433 +
             C2165 * C417 - C2166 * C402 - C2165 * C418 + C2160 * C432) *
                C50719 * C2162) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50831 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C50605 * C50873 +
          ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
            C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
            C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
            C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
               C50719 * C50707 * C50685 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50831) *
              C50605 * C50874 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C50831 -
           (C123 * C645 - C124 * C644 - C123 * C646 + C108 * C647 +
            C121 * C423 - C122 * C405 - C121 * C424 + C107 * C435 +
            C119 * C407 - C120 * C397 - C119 * C408 + C106 * C427 +
            C117 * C409 - C118 * C398 - C117 * C410 + C105 * C428) *
               C50719 * C50707 * C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50831 -
           ((C2167 * C1441 - C2168 * C1435 - C2167 * C1442 + C50561 * C1447 +
             C2165 * C1443 - C2166 * C1436 - C2165 * C1444 + C2160 * C1448) *
                C50719 * C2164 +
            (C2167 * C785 - C2168 * C779 - C2167 * C786 + C50561 * C794 +
             C2165 * C783 - C2166 * C778 - C2165 * C784 + C2160 * C793) *
                C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C50605 * C50873 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C2165 * C785 - C2166 * C779 - C2165 * C786 + C2160 * C794 +
             C2167 * C787 - C2168 * C780 - C2167 * C788 + C50561 * C795) *
                C50719 * C2163 +
            (C2165 * C1441 - C2166 * C1435 - C2165 * C1442 + C2160 * C1447 +
             C2167 * C1439 - C2168 * C1434 - C2167 * C1440 + C50561 * C1446) *
                C50719 * C2164) *
               C50685 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50831) *
              C50605 * C50874 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C50831 -
           ((C2167 * C1437 - C2168 * C1433 - C2167 * C1438 + C50561 * C1445 +
             C2165 * C1439 - C2166 * C1434 - C2165 * C1440 + C2160 * C1446) *
                C50719 * C2164 +
            (C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796 +
             C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795) *
                C50719 * C2163 +
            (C2167 * C407 - C2168 * C397 - C2167 * C408 + C50561 * C427 +
             C2165 * C409 - C2166 * C398 - C2165 * C410 + C2160 * C428) *
                C50719 * C2162) *
               C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 + C119 * C134 -
           C120 * C126 - C119 * C135 + C106 * C147 + C121 * C136 - C122 * C127 -
           C121 * C137 + C107 * C148 + C123 * C138 - C124 * C128 - C123 * C139 +
           C108 * C149) *
              C50719 * C50707 * C50621 * C50605 * C113 -
          (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 + C121 * C138 -
           C122 * C128 - C121 * C139 + C107 * C149 + C119 * C136 - C120 * C127 -
           C119 * C137 + C106 * C148 + C117 * C134 - C118 * C126 - C117 * C135 +
           C105 * C147) *
              C50719 * C50707 * C50621 * C50605 * C114 +
          (C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 + C119 * C138 -
           C120 * C128 - C119 * C139 + C106 * C149 + C121 * C140 - C122 * C129 -
           C121 * C141 + C107 * C150 + C123 * C142 - C124 * C130 - C123 * C143 +
           C108 * C151) *
              C50719 * C50707 * C50621 * C50605 * C115 -
          (C123 * C144 - C124 * C131 - C123 * C145 + C108 * C152 + C121 * C142 -
           C122 * C130 - C121 * C143 + C107 * C151 + C119 * C140 - C120 * C129 -
           C119 * C141 + C106 * C150 + C117 * C138 - C118 * C128 - C117 * C139 +
           C105 * C149) *
              C50719 * C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C251 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C252 +
           (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C50621 * C253) *
              C254 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C252 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C251 -
           (C123 * C284 - C124 * C265 - C123 * C285 + C108 * C295 +
            C121 * C280 - C122 * C263 - C121 * C281 + C107 * C293 +
            C119 * C278 - C120 * C262 - C119 * C279 + C106 * C292 +
            C117 * C276 - C118 * C261 - C117 * C277 + C105 * C291) *
               C50719 * C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2165 * C272 - C2166 * C259 - C2165 * C273 + C2160 * C289 +
            C2167 * C270 - C2168 * C258 - C2167 * C271 + C50561 * C288) *
               C50719 * C2163 +
           (C2165 * C274 - C2166 * C260 - C2165 * C275 + C2160 * C290 +
            C2167 * C276 - C2168 * C261 - C2167 * C277 + C50561 * C291) *
               C50719 * C2164) *
              C50621 * C50605 * C113 -
          ((C2167 * C278 - C2168 * C262 - C2167 * C279 + C50561 * C292 +
            C2165 * C276 - C2166 * C261 - C2165 * C277 + C2160 * C291) *
               C50719 * C2164 +
           (C2167 * C268 - C2168 * C257 - C2167 * C269 + C50561 * C287 +
            C2165 * C270 - C2166 * C258 - C2165 * C271 + C2160 * C288) *
               C50719 * C2163 +
           (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
            C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
               C50719 * C2162) *
              C50621 * C50605 * C114 +
          ((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
            C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
               C50719 * C2162 +
           (C2165 * C268 - C2166 * C257 - C2165 * C269 + C2160 * C287 +
            C2167 * C266 - C2168 * C256 - C2167 * C267 + C50561 * C286) *
               C50719 * C2163 +
           (C2165 * C278 - C2166 * C262 - C2165 * C279 + C2160 * C292 +
            C2167 * C280 - C2168 * C263 - C2167 * C281 + C50561 * C293) *
               C50719 * C2164) *
              C50621 * C50605 * C115 -
          ((C2167 * C284 - C2168 * C265 - C2167 * C285 + C50561 * C295 +
            C2165 * C280 - C2166 * C263 - C2165 * C281 + C2160 * C293) *
               C50719 * C2164 +
           (C2167 * C282 - C2168 * C264 - C2167 * C283 + C50561 * C294 +
            C2165 * C266 - C2166 * C256 - C2165 * C267 + C2160 * C286) *
               C50719 * C2163 +
           (C2167 * C140 - C2168 * C129 - C2167 * C141 + C50561 * C150 +
            C2165 * C138 - C2166 * C128 - C2165 * C139 + C2160 * C149) *
               C50719 * C2162) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C251 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C252 +
           (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C2165 * C2318 - C2166 * C2315 - C2165 * C2319 + C2160 * C2324 +
             C2167 * C2320 - C2168 * C2316 - C2167 * C2321 + C50561 * C2325) *
                C50719 * C2164) *
               C50621 * C253) *
              C254 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C252 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C251 -
           ((C2167 * C2322 - C2168 * C2317 - C2167 * C2323 + C50561 * C2326 +
             C2165 * C2320 - C2166 * C2316 - C2165 * C2321 + C2160 * C2325) *
                C50719 * C2164 +
            (C2411 + C2410) * C50719 * C2163 + C2415 * C2162) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C50875 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C50876 +
           (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C50621 * C1202) *
              C50822 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C50876 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C50875 -
           (C123 * C284 - C124 * C265 - C123 * C285 + C108 * C295 +
            C121 * C280 - C122 * C263 - C121 * C281 + C107 * C293 +
            C119 * C278 - C120 * C262 - C119 * C279 + C106 * C292 +
            C117 * C276 - C118 * C261 - C117 * C277 + C105 * C291) *
               C50719 * C50707 * C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C50875 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C50876 +
           (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C3422 + C3423) * C50719 * C2164) *
               C50621 * C1202) *
              C50822 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C50876 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C50875 -
           ((C2167 * C2322 - C2168 * C2317 - C2167 * C2323 + C50561 * C2326 +
             C2165 * C2320 - C2166 * C2316 - C2165 * C2321 + C2160 * C2325) *
                C50719 * C2164 +
            (C2411 + C2410) * C50719 * C2163 + C2415 * C2162) *
               C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50831 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C50875 +
          ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
            C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
            C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
            C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
               C50719 * C50707 * C50685 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50831) *
              C50876 +
          ((C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C50831 -
           (C123 * C1437 - C124 * C1433 - C123 * C1438 + C108 * C1445 +
            C121 * C1439 - C122 * C1434 - C121 * C1440 + C107 * C1446 +
            C119 * C1441 - C120 * C1435 - C119 * C1442 + C106 * C1447 +
            C117 * C1443 - C118 * C1436 - C117 * C1444 + C105 * C1448) *
               C50719 * C50707 * C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50831 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C50875 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C4114 + C4115) * C50719 * C2164) *
               C50685 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50831) *
              C50876 +
          ((C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C3422 + C3423) * C50719 * C2164) *
               C50831 -
           ((C2167 * C4093 - C2168 * C4091 - C2167 * C4094 + C50561 * C4097 +
             C2165 * C4095 - C2166 * C4092 - C2165 * C4096 + C2160 * C4098) *
                C50719 * C2164 +
            (C4115 + C4114) * C50719 * C2163 + C4109 * C2162) *
               C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 + C119 * C134 -
           C120 * C126 - C119 * C135 + C106 * C147 + C121 * C136 - C122 * C127 -
           C121 * C137 + C107 * C148 + C123 * C138 - C124 * C128 - C123 * C139 +
           C108 * C149) *
              C50719 * C50707 * C50621 * C967 -
          (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 + C121 * C268 -
           C122 * C257 - C121 * C269 + C107 * C287 + C119 * C270 - C120 * C258 -
           C119 * C271 + C106 * C288 + C117 * C272 - C118 * C259 - C117 * C273 +
           C105 * C289) *
              C50719 * C50707 * C50621 * C968 +
          (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 + C119 * C276 -
           C120 * C261 - C119 * C277 + C106 * C291 + C121 * C278 - C122 * C262 -
           C121 * C279 + C107 * C292 + C123 * C280 - C124 * C263 - C123 * C281 +
           C108 * C293) *
              C50719 * C50707 * C50621 * C969 -
          (C123 * C976 - C124 * C972 - C123 * C977 + C108 * C984 + C121 * C978 -
           C122 * C973 - C121 * C979 + C107 * C985 + C119 * C980 - C120 * C974 -
           C119 * C981 + C106 * C986 + C117 * C982 - C118 * C975 - C117 * C983 +
           C105 * C987) *
              C50719 * C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C896 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C50657) *
              C898 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C50657 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C896) *
              C899 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C50621 * C896 -
           (C123 * C541 - C124 * C540 - C123 * C542 + C108 * C543 +
            C121 * C282 - C122 * C264 - C121 * C283 + C107 * C294 +
            C119 * C266 - C120 * C256 - C119 * C267 + C106 * C286 +
            C117 * C268 - C118 * C257 - C117 * C269 + C105 * C287) *
               C50719 * C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C394 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C395 +
           (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 +
            C119 * C417 - C120 * C402 - C119 * C418 + C106 * C432 +
            C121 * C419 - C122 * C403 - C121 * C420 + C107 * C433 +
            C123 * C421 - C124 * C404 - C123 * C422 + C108 * C434) *
               C50719 * C50707 * C396) *
              C896 +
          ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
            C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
            C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
            C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
               C50719 * C50707 * C395 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C394 -
           (C123 * C1090 - C124 * C1086 - C123 * C1091 + C108 * C1098 +
            C121 * C1092 - C122 * C1087 - C121 * C1093 + C107 * C1099 +
            C119 * C1094 - C120 * C1088 - C119 * C1095 + C106 * C1100 +
            C117 * C1096 - C118 * C1089 - C117 * C1097 + C105 * C1101) *
               C50719 * C50707 * C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C896 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C50657) *
              C898 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C50657 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C896) *
              C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C50621 * C896 -
           ((C2167 * C976 - C2168 * C972 - C2167 * C977 + C50561 * C984 +
             C2165 * C978 - C2166 * C973 - C2165 * C979 + C2160 * C985) *
                C50719 * C2164 +
            (C2747 + C2746) * C50719 * C2163 +
            (C2745 + C2744) * C50719 * C2162) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
              C50621 * C967 -
          (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
           (C2401 + C2400) * C50719 * C2162) *
              C50621 * C968 +
          (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
           (C3422 + C3423) * C50719 * C2164) *
              C50621 * C969 -
          ((C2167 * C3401 - C2168 * C3399 - C2167 * C3402 + C50561 * C3405 +
            C2165 * C3403 - C2166 * C3400 - C2165 * C3404 + C2160 * C3406) *
               C50719 * C2164 +
           (C3423 + C3422) * C50719 * C2163 + C3417 * C2162) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C394 -
           ((C3148 + C3149) * C50719 * C2164 +
            (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C395 +
           ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C50719 * C2162 +
            (C3602 + C3603) * C50719 * C2163 +
            (C3604 + C3605) * C50719 * C2164) *
               C396) *
              C896 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C2165 * C3090 - C2166 * C3087 - C2165 * C3091 + C2160 * C3096 +
             C2167 * C3092 - C2168 * C3088 - C2167 * C3093 + C50561 * C3097) *
                C50719 * C2164) *
               C395 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C394 -
           ((C2167 * C3571 - C2168 * C3569 - C2167 * C3572 + C50561 * C3575 +
             C2165 * C3573 - C2166 * C3570 - C2165 * C3574 + C2160 * C3576) *
                C50719 * C2164 +
            (C3605 + C3604) * C50719 * C2163 +
            (C3603 + C3602) * C50719 * C2162) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
             C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
             C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
             C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                C50719 * C50707 * C50831 -
            (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
             C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
             C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
             C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
                C50719 * C50707 * C50685) *
               C896 +
           ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
             C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
             C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
             C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
                C50719 * C50707 * C50685 -
            (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
             C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
             C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
             C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                C50719 * C50707 * C50831) *
               C50657) *
              C50822 +
          (((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
             C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
             C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
             C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
                C50719 * C50707 * C50685 -
            (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
             C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
             C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
             C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                C50719 * C50707 * C50831) *
               C896 +
           ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
             C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
             C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
             C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
                C50719 * C50707 * C50831 -
            (C123 * C791 - C124 * C782 - C123 * C792 + C108 * C797 +
             C121 * C789 - C122 * C781 - C121 * C790 + C107 * C796 +
             C119 * C787 - C120 * C780 - C119 * C788 + C106 * C795 +
             C117 * C785 - C118 * C779 - C117 * C786 + C105 * C794) *
                C50719 * C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50719 * C2162 +
             (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
                C50831 -
            ((C3148 + C3149) * C50719 * C2164 +
             (C3150 + C3151) * C50719 * C2163 +
             (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
              C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                 C50719 * C2162) *
                C50685) *
               C896 +
           (((C3151 + C3150) * C50719 * C2162 +
             (C3149 + C3148) * C50719 * C2163 +
             (C2165 * C3090 - C2166 * C3087 - C2165 * C3091 + C2160 * C3096 +
              C2167 * C3092 - C2168 * C3088 - C2167 * C3093 + C50561 * C3097) *
                 C50719 * C2164) *
                C50685 -
            (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
             (C2401 + C2400) * C50719 * C2162) *
                C50831) *
               C50657) *
              C50822 +
          ((((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
              C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                 C50719 * C2162 +
             (C3152 + C3153) * C50719 * C2163 +
             (C3154 + C3155) * C50719 * C2164) *
                C50685 -
            (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50719 * C2162) *
                C50831) *
               C896 +
           (((C2406 + C2407) * C50719 * C2162 +
             (C2408 + C2409) * C50719 * C2163 +
             (C2410 + C2411) * C50719 * C2164) *
                C50831 -
            ((C2167 * C3094 - C2168 * C3089 - C2167 * C3095 + C50561 * C3098 +
              C2165 * C3092 - C2166 * C3088 - C2165 * C3093 + C2160 * C3097) *
                 C50719 * C2164 +
             (C3155 + C3154) * C50719 * C2163 +
             (C3153 + C3152) * C50719 * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50621 * C896 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50621 * C50657) *
              C898 +
          ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
            C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
            C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
            C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
               C50719 * C50707 * C50621 * C50657 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50621 * C896) *
              C899 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C50621 * C896 -
           (C123 * C541 - C124 * C540 - C123 * C542 + C108 * C543 +
            C121 * C282 - C122 * C264 - C121 * C283 + C107 * C294 +
            C119 * C266 - C120 * C256 - C119 * C267 + C106 * C286 +
            C117 * C268 - C118 * C257 - C117 * C269 + C105 * C287) *
               C50719 * C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 + C119 * C134 -
           C120 * C126 - C119 * C135 + C106 * C147 + C121 * C136 - C122 * C127 -
           C121 * C137 + C107 * C148 + C123 * C138 - C124 * C128 - C123 * C139 +
           C108 * C149) *
              C50719 * C50707 * C50621 * C967 -
          (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 + C121 * C268 -
           C122 * C257 - C121 * C269 + C107 * C287 + C119 * C270 - C120 * C258 -
           C119 * C271 + C106 * C288 + C117 * C272 - C118 * C259 - C117 * C273 +
           C105 * C289) *
              C50719 * C50707 * C50621 * C968 +
          (C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 + C119 * C276 -
           C120 * C261 - C119 * C277 + C106 * C291 + C121 * C278 - C122 * C262 -
           C121 * C279 + C107 * C292 + C123 * C280 - C124 * C263 - C123 * C281 +
           C108 * C293) *
              C50719 * C50707 * C50621 * C969 -
          (C123 * C976 - C124 * C972 - C123 * C977 + C108 * C984 + C121 * C978 -
           C122 * C973 - C121 * C979 + C107 * C985 + C119 * C980 - C120 * C974 -
           C119 * C981 + C106 * C986 + C117 * C982 - C118 * C975 - C117 * C983 +
           C105 * C987) *
              C50719 * C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50621 * C896 -
           ((C2404 + C2405) * C50719 * C2164 +
            (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50621 * C50657) *
              C898 +
          (((C2406 + C2407) * C50719 * C2162 +
            (C2408 + C2409) * C50719 * C2163 +
            (C2410 + C2411) * C50719 * C2164) *
               C50621 * C50657 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50621 * C896) *
              C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C50621 * C896 -
           ((C2167 * C976 - C2168 * C972 - C2167 * C977 + C50561 * C984 +
             C2165 * C978 - C2166 * C973 - C2165 * C979 + C2160 * C985) *
                C50719 * C2164 +
            (C2747 + C2746) * C50719 * C2163 +
            (C2745 + C2744) * C50719 * C2162) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
              C50621 * C967 -
          (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
           (C2401 + C2400) * C50719 * C2162) *
              C50621 * C968 +
          (C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
           (C3422 + C3423) * C50719 * C2164) *
              C50621 * C969 -
          ((C2167 * C3401 - C2168 * C3399 - C2167 * C3402 + C50561 * C3405 +
            C2165 * C3403 - C2166 * C3400 - C2165 * C3404 + C2160 * C3406) *
               C50719 * C2164 +
           (C3423 + C3422) * C50719 * C2163 + C3417 * C2162) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
             C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
             C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
             C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
                C50719 * C50707 * C1547 -
            (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
             C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
             C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
             C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
                C50719 * C50707 * C50685) *
               C50830 +
           ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
             C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
             C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
             C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
                C50719 * C50707 * C50685 -
            (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
             C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
             C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
             C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
                C50719 * C50707 * C1547) *
               C50657) *
              C50822 +
          (((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
             C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
             C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
             C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
                C50719 * C50707 * C50685 -
            (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
             C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
             C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
             C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
                C50719 * C50707 * C1547) *
               C50830 +
           ((C117 * C270 - C118 * C258 - C117 * C271 + C105 * C288 +
             C119 * C268 - C120 * C257 - C119 * C269 + C106 * C287 +
             C121 * C266 - C122 * C256 - C121 * C267 + C107 * C286 +
             C123 * C282 - C124 * C264 - C123 * C283 + C108 * C294) *
                C50719 * C50707 * C1547 -
            (C123 * C791 - C124 * C782 - C123 * C792 + C108 * C797 +
             C121 * C789 - C122 * C781 - C121 * C790 + C107 * C796 +
             C119 * C787 - C120 * C780 - C119 * C788 + C106 * C795 +
             C117 * C785 - C118 * C779 - C117 * C786 + C105 * C794) *
                C50719 * C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
              C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                 C50719 * C2162 +
             (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
                C1547 -
            (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
             (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
              C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                 C50719 * C2162) *
                C50685) *
               C50830 +
           (((C3151 + C3150) * C50719 * C2162 +
             (C3149 + C3148) * C50719 * C2163 +
             (C4114 + C4115) * C50719 * C2164) *
                C50685 -
            (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
             (C2401 + C2400) * C50719 * C2162) *
                C1547) *
               C50657) *
              C50822 +
          ((((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
              C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                 C50719 * C2162 +
             (C3152 + C3153) * C50719 * C2163 +
             (C3154 + C3155) * C50719 * C2164) *
                C50685 -
            (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
             (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
              C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                 C50719 * C2162) *
                C1547) *
               C50830 +
           (((C2406 + C2407) * C50719 * C2162 +
             (C2408 + C2409) * C50719 * C2163 +
             (C2410 + C2411) * C50719 * C2164) *
                C1547 -
            ((C2167 * C3094 - C2168 * C3089 - C2167 * C3095 + C50561 * C3098 +
              C2165 * C3092 - C2166 * C3088 - C2165 * C3093 + C2160 * C3097) *
                 C50719 * C2164 +
             (C3155 + C3154) * C50719 * C2163 +
             (C3153 + C3152) * C50719 * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50877 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50878 +
           (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 +
            C119 * C417 - C120 * C402 - C119 * C418 + C106 * C432 +
            C121 * C419 - C122 * C403 - C121 * C420 + C107 * C433 +
            C123 * C421 - C124 * C404 - C123 * C422 + C108 * C434) *
               C50719 * C50707 * C1963) *
              C50830 +
          ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
            C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
            C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
            C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
               C50719 * C50707 * C50878 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C50877 -
           (C123 * C1090 - C124 * C1086 - C123 * C1091 + C108 * C1098 +
            C121 * C1092 - C122 * C1087 - C121 * C1093 + C107 * C1099 +
            C119 * C1094 - C120 * C1088 - C119 * C1095 + C106 * C1100 +
            C117 * C1096 - C118 * C1089 - C117 * C1097 + C105 * C1101) *
               C50719 * C50707 * C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50877 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50878 +
           ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C50719 * C2162 +
            (C3602 + C3603) * C50719 * C2163 +
            (C3604 + C3605) * C50719 * C2164) *
               C1963) *
              C50830 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C4114 + C4115) * C50719 * C2164) *
               C50878 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C50877 -
           ((C2167 * C3571 - C2168 * C3569 - C2167 * C3572 + C50561 * C3575 +
             C2165 * C3573 - C2166 * C3570 - C2165 * C3574 + C2160 * C3576) *
                C50719 * C2164 +
            (C3605 + C3604) * C50719 * C2163 +
            (C3603 + C3602) * C50719 * C2162) *
               C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C1547 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C251 +
          ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
            C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
            C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
            C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
               C50719 * C50707 * C50685 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C1547) *
              C252 +
          ((C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C1547 -
           (C123 * C1437 - C124 * C1433 - C123 * C1438 + C108 * C1445 +
            C121 * C1439 - C122 * C1434 - C121 * C1440 + C107 * C1446 +
            C119 * C1441 - C120 * C1435 - C119 * C1442 + C106 * C1447 +
            C117 * C1443 - C118 * C1436 - C117 * C1444 + C105 * C1448) *
               C50719 * C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C1547 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C50605 * C898 +
          ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
            C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
            C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
            C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
               C50719 * C50707 * C50685 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C1547) *
              C50605 * C899 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C1547 -
           (C123 * C645 - C124 * C644 - C123 * C646 + C108 * C647 +
            C121 * C423 - C122 * C405 - C121 * C424 + C107 * C435 +
            C119 * C407 - C120 * C397 - C119 * C408 + C106 * C427 +
            C117 * C409 - C118 * C398 - C117 * C410 + C105 * C428) *
               C50719 * C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 + C119 * C134 -
           C120 * C126 - C119 * C135 + C106 * C147 + C121 * C136 - C122 * C127 -
           C121 * C137 + C107 * C148 + C123 * C138 - C124 * C128 - C123 * C139 +
           C108 * C149) *
              C50719 * C50707 * C1713 -
          (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 + C121 * C409 -
           C122 * C398 - C121 * C410 + C107 * C428 + C119 * C411 - C120 * C399 -
           C119 * C412 + C106 * C429 + C117 * C413 - C118 * C400 - C117 * C414 +
           C105 * C430) *
              C50719 * C50707 * C1714 +
          (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 + C119 * C417 -
           C120 * C402 - C119 * C418 + C106 * C432 + C121 * C419 - C122 * C403 -
           C121 * C420 + C107 * C433 + C123 * C421 - C124 * C404 - C123 * C422 +
           C108 * C434) *
              C50719 * C50707 * C1715 -
          (C123 * C1721 - C124 * C1717 - C123 * C1722 + C108 * C1729 +
           C121 * C1723 - C122 * C1718 - C121 * C1724 + C107 * C1730 +
           C119 * C1725 - C120 * C1719 - C119 * C1726 + C106 * C1731 +
           C117 * C1727 - C118 * C1720 - C117 * C1728 + C105 * C1732) *
              C50719 * C50707 * C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C1547 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C50605 * C898 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C3152 + C3153) * C50719 * C2163 +
            (C3154 + C3155) * C50719 * C2164) *
               C50685 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C1547) *
              C50605 * C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C1547 -
           ((C2167 * C1437 - C2168 * C1433 - C2167 * C1438 + C50561 * C1445 +
             C2165 * C1439 - C2166 * C1434 - C2165 * C1440 + C2160 * C1446) *
                C50719 * C2164 +
            (C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796 +
             C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795) *
                C50719 * C2163 +
            (C2167 * C407 - C2168 * C397 - C2167 * C408 + C50561 * C427 +
             C2165 * C409 - C2166 * C398 - C2165 * C410 + C2160 * C428) *
                C50719 * C2162) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C1547 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C251 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C4114 + C4115) * C50719 * C2164) *
               C50685 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C1547) *
              C252 +
          ((C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C3422 + C3423) * C50719 * C2164) *
               C1547 -
           ((C2167 * C4093 - C2168 * C4091 - C2167 * C4094 + C50561 * C4097 +
             C2165 * C4095 - C2166 * C4092 - C2165 * C4096 + C2160 * C4098) *
                C50719 * C2164 +
            (C4115 + C4114) * C50719 * C2163 + C4109 * C2162) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
            C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
               C50719 * C2162 +
           (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
              C1713 -
          (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
           (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
            C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
               C50719 * C2162) *
              C1714 +
          ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
            C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
               C50719 * C2162 +
           (C3602 + C3603) * C50719 * C2163 +
           (C3604 + C3605) * C50719 * C2164) *
              C1715 -
          ((C2167 * C4509 - C2168 * C4505 - C2167 * C4510 + C50561 * C4517 +
            C2165 * C4511 - C2166 * C4506 - C2165 * C4512 + C2160 * C4518) *
               C50719 * C2164 +
           (C2167 * C4513 - C2168 * C4507 - C2167 * C4514 + C50561 * C4519 +
            C2165 * C4515 - C2166 * C4508 - C2165 * C4516 + C2160 * C4520) *
               C50719 * C2163 +
           (C2167 * C1725 - C2168 * C1719 - C2167 * C1726 + C50561 * C1731 +
            C2165 * C1727 - C2166 * C1720 - C2165 * C1728 + C2160 * C1732) *
               C50719 * C2162) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C50877 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50878 +
           (C117 * C415 - C118 * C401 - C117 * C416 + C105 * C431 +
            C119 * C417 - C120 * C402 - C119 * C418 + C106 * C432 +
            C121 * C419 - C122 * C403 - C121 * C420 + C107 * C433 +
            C123 * C421 - C124 * C404 - C123 * C422 + C108 * C434) *
               C50719 * C50707 * C1963) *
              C50605 * C50822 +
          ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
            C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
            C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
            C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
               C50719 * C50707 * C50878 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C50877 -
           (C123 * C425 - C124 * C406 - C123 * C426 + C108 * C436 +
            C121 * C421 - C122 * C404 - C121 * C422 + C107 * C434 +
            C119 * C419 - C120 * C403 - C119 * C420 + C106 * C433 +
            C117 * C417 - C118 * C402 - C117 * C418 + C105 * C432) *
               C50719 * C50707 * C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C50877 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50878 +
           ((C2165 * C415 - C2166 * C401 - C2165 * C416 + C2160 * C431 +
             C2167 * C417 - C2168 * C402 - C2167 * C418 + C50561 * C432) *
                C50719 * C2162 +
            (C3602 + C3603) * C50719 * C2163 +
            (C3604 + C3605) * C50719 * C2164) *
               C1963) *
              C50605 * C50822 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C3152 + C3153) * C50719 * C2163 +
            (C3154 + C3155) * C50719 * C2164) *
               C50878 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C50877 -
           ((C2167 * C2568 - C2168 * C2563 - C2167 * C2569 + C50561 * C2572 +
             C2165 * C2566 - C2166 * C2562 - C2165 * C2567 + C2160 * C2571) *
                C50719 * C2164 +
            (C2167 * C1092 - C2168 * C1087 - C2167 * C1093 + C50561 * C1099 +
             C2165 * C1094 - C2166 * C1088 - C2165 * C1095 + C2160 * C1100) *
                C50719 * C2163 +
            (C2167 * C419 - C2168 * C403 - C2167 * C420 + C50561 * C433 +
             C2165 * C417 - C2166 * C402 - C2165 * C418 + C2160 * C432) *
                C50719 * C2162) *
               C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C1547 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C50605 * C898 +
          ((C117 * C411 - C118 * C399 - C117 * C412 + C105 * C429 +
            C119 * C409 - C120 * C398 - C119 * C410 + C106 * C428 +
            C121 * C407 - C122 * C397 - C121 * C408 + C107 * C427 +
            C123 * C423 - C124 * C405 - C123 * C424 + C108 * C435) *
               C50719 * C50707 * C50685 -
           (C123 * C140 - C124 * C129 - C123 * C141 + C108 * C150 +
            C121 * C138 - C122 * C128 - C121 * C139 + C107 * C149 +
            C119 * C136 - C120 * C127 - C119 * C137 + C106 * C148 +
            C117 * C134 - C118 * C126 - C117 * C135 + C105 * C147) *
               C50719 * C50707 * C1547) *
              C50605 * C899 +
          ((C117 * C136 - C118 * C127 - C117 * C137 + C105 * C148 +
            C119 * C138 - C120 * C128 - C119 * C139 + C106 * C149 +
            C121 * C140 - C122 * C129 - C121 * C141 + C107 * C150 +
            C123 * C142 - C124 * C130 - C123 * C143 + C108 * C151) *
               C50719 * C50707 * C1547 -
           (C123 * C645 - C124 * C644 - C123 * C646 + C108 * C647 +
            C121 * C423 - C122 * C405 - C121 * C424 + C107 * C435 +
            C119 * C407 - C120 * C397 - C119 * C408 + C106 * C427 +
            C117 * C409 - C118 * C398 - C117 * C410 + C105 * C428) *
               C50719 * C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C132 - C118 * C125 - C117 * C133 + C105 * C146 +
            C119 * C134 - C120 * C126 - C119 * C135 + C106 * C147 +
            C121 * C136 - C122 * C127 - C121 * C137 + C107 * C148 +
            C123 * C138 - C124 * C128 - C123 * C139 + C108 * C149) *
               C50719 * C50707 * C1547 -
           (C123 * C407 - C124 * C397 - C123 * C408 + C108 * C427 +
            C121 * C409 - C122 * C398 - C121 * C410 + C107 * C428 +
            C119 * C411 - C120 * C399 - C119 * C412 + C106 * C429 +
            C117 * C413 - C118 * C400 - C117 * C414 + C105 * C430) *
               C50719 * C50707 * C50685) *
              C251 +
          ((C117 * C783 - C118 * C778 - C117 * C784 + C105 * C793 +
            C119 * C785 - C120 * C779 - C119 * C786 + C106 * C794 +
            C121 * C787 - C122 * C780 - C121 * C788 + C107 * C795 +
            C123 * C789 - C124 * C781 - C123 * C790 + C108 * C796) *
               C50719 * C50707 * C50685 -
           (C123 * C266 - C124 * C256 - C123 * C267 + C108 * C286 +
            C121 * C268 - C122 * C257 - C121 * C269 + C107 * C287 +
            C119 * C270 - C120 * C258 - C119 * C271 + C106 * C288 +
            C117 * C272 - C118 * C259 - C117 * C273 + C105 * C289) *
               C50719 * C50707 * C1547) *
              C252 +
          ((C117 * C274 - C118 * C260 - C117 * C275 + C105 * C290 +
            C119 * C276 - C120 * C261 - C119 * C277 + C106 * C291 +
            C121 * C278 - C122 * C262 - C121 * C279 + C107 * C292 +
            C123 * C280 - C124 * C263 - C123 * C281 + C108 * C293) *
               C50719 * C50707 * C1547 -
           (C123 * C1437 - C124 * C1433 - C123 * C1438 + C108 * C1445 +
            C121 * C1439 - C122 * C1434 - C121 * C1440 + C107 * C1446 +
            C119 * C1441 - C120 * C1435 - C119 * C1442 + C106 * C1447 +
            C117 * C1443 - C118 * C1436 - C117 * C1444 + C105 * C1448) *
               C50719 * C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C1547 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C50605 * C898 +
          (((C2165 * C411 - C2166 * C399 - C2165 * C412 + C2160 * C429 +
             C2167 * C409 - C2168 * C398 - C2167 * C410 + C50561 * C428) *
                C50719 * C2162 +
            (C3152 + C3153) * C50719 * C2163 +
            (C3154 + C3155) * C50719 * C2164) *
               C50685 -
           (C2415 * C2164 + (C2407 + C2406) * C50719 * C2163 +
            (C2167 * C136 - C2168 * C127 - C2167 * C137 + C50561 * C148 +
             C2165 * C134 - C2166 * C126 - C2165 * C135 + C2160 * C147) *
                C50719 * C2162) *
               C1547) *
              C50605 * C899 +
          (((C2165 * C136 - C2166 * C127 - C2165 * C137 + C2160 * C148 +
             C2167 * C138 - C2168 * C128 - C2167 * C139 + C50561 * C149) *
                C50719 * C2162 +
            (C2744 + C2745) * C50719 * C2163 +
            (C2746 + C2747) * C50719 * C2164) *
               C1547 -
           ((C2167 * C1437 - C2168 * C1433 - C2167 * C1438 + C50561 * C1445 +
             C2165 * C1439 - C2166 * C1434 - C2165 * C1440 + C2160 * C1446) *
                C50719 * C2164 +
            (C2167 * C789 - C2168 * C781 - C2167 * C790 + C50561 * C796 +
             C2165 * C787 - C2166 * C780 - C2165 * C788 + C2160 * C795) *
                C50719 * C2163 +
            (C2167 * C407 - C2168 * C397 - C2167 * C408 + C50561 * C427 +
             C2165 * C409 - C2166 * C398 - C2165 * C410 + C2160 * C428) *
                C50719 * C2162) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2165 * C132 - C2166 * C125 - C2165 * C133 + C2160 * C146 +
             C2167 * C134 - C2168 * C126 - C2167 * C135 + C50561 * C147) *
                C50719 * C2162 +
            (C2400 + C2401) * C50719 * C2163 + C2414 * C2164) *
               C1547 -
           (C4109 * C2164 + (C3150 + C3151) * C50719 * C2163 +
            (C2167 * C411 - C2168 * C399 - C2167 * C412 + C50561 * C429 +
             C2165 * C413 - C2166 * C400 - C2165 * C414 + C2160 * C430) *
                C50719 * C2162) *
               C50685) *
              C251 +
          (((C3151 + C3150) * C50719 * C2162 +
            (C3149 + C3148) * C50719 * C2163 +
            (C4114 + C4115) * C50719 * C2164) *
               C50685 -
           (C3417 * C2164 + (C2403 + C2402) * C50719 * C2163 +
            (C2401 + C2400) * C50719 * C2162) *
               C1547) *
              C252 +
          ((C2414 * C2162 + (C2405 + C2404) * C50719 * C2163 +
            (C3422 + C3423) * C50719 * C2164) *
               C1547 -
           ((C2167 * C4093 - C2168 * C4091 - C2167 * C4094 + C50561 * C4097 +
             C2165 * C4095 - C2166 * C4092 - C2165 * C4096 + C2160 * C4098) *
                C50719 * C2164 +
            (C4115 + C4114) * C50719 * C2163 + C4109 * C2162) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50621 * C50830 -
           ((C24872 + C24873) * C50719 * C24644 +
            (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C50621 * C50657) *
              C50873 +
          (((C24874 + C24875) * C50719 * C50879 +
            (C24876 + C24877) * C50719 * C50880 +
            (C24878 + C24879) * C50719 * C24644) *
               C50621 * C50657 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C50621 * C50830) *
              C50874 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50719 * C50879 +
            (C25200 + C25201) * C50719 * C50880 +
            (C25202 + C25203) * C50719 * C24644) *
               C50621 * C50830 -
           ((C49777 * C976 - C24648 * C972 - C49777 * C977 + C50561 * C984 +
             C49784 * C978 - C24646 * C973 - C49784 * C979 + C50815 * C985) *
                C50719 * C24644 +
            (C25203 + C25202) * C50719 * C50880 +
            (C25201 + C25200) * C50719 * C50879) *
               C50621 * C50657) *
              C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50719 * C50879 +
             (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
                C50831 -
            ((C25592 + C25593) * C50719 * C24644 +
             (C25594 + C25595) * C50719 * C50880 +
             (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
              C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                 C50719 * C50879) *
                C50685) *
               C50830 +
           (((C25595 + C25594) * C50719 * C50879 +
             (C25593 + C25592) * C50719 * C50880 +
             (C49784 * C3090 - C24646 * C3087 - C49784 * C3091 +
              C50815 * C3096 + C49777 * C3092 - C24648 * C3088 -
              C49777 * C3093 + C50561 * C3097) *
                 C50719 * C24644) *
                C50685 -
            ((C24872 + C24873) * C50719 * C24644 +
             (C24871 + C24870) * C50719 * C50880 +
             (C24869 + C24868) * C50719 * C50879) *
                C50831) *
               C50657) *
              C254 +
          ((((C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429 +
              C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428) *
                 C50719 * C50879 +
             (C25596 + C25597) * C50719 * C50880 +
             (C25598 + C25599) * C50719 * C24644) *
                C50685 -
            (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50719 * C50879) *
                C50831) *
               C50830 +
           (((C24874 + C24875) * C50719 * C50879 +
             (C24876 + C24877) * C50719 * C50880 +
             (C24878 + C24879) * C50719 * C24644) *
                C50831 -
            ((C49777 * C3094 - C24648 * C3089 - C49777 * C3095 +
              C50561 * C3098 + C49784 * C3092 - C24646 * C3088 -
              C49784 * C3093 + C50815 * C3097) *
                 C50719 * C24644 +
             (C25599 + C25598) * C50719 * C50880 +
             (C25597 + C25596) * C50719 * C50879) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50621 * C251 -
           ((C24872 + C24873) * C50719 * C24644 +
            (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C50621 * C252 +
           (C24882 * C50879 + (C24873 + C24872) * C50719 * C50880 +
            (C49784 * C2318 - C24646 * C2315 - C49784 * C2319 + C50815 * C2324 +
             C49777 * C2320 - C24648 * C2316 - C49777 * C2321 +
             C50561 * C2325) *
                C50719 * C24644) *
               C50621 * C253) *
              C254 +
          (((C24874 + C24875) * C50719 * C50879 +
            (C24876 + C24877) * C50719 * C50880 +
            (C24878 + C24879) * C50719 * C24644) *
               C50621 * C252 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C50621 * C251 -
           ((C49777 * C2322 - C24648 * C2317 - C49777 * C2323 + C50561 * C2326 +
             C49784 * C2320 - C24646 * C2316 - C49784 * C2321 +
             C50815 * C2325) *
                C50719 * C24644 +
            (C24879 + C24878) * C50719 * C50880 + C24883 * C50879) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50719 * C50879 +
           (C49784 * C272 - C24646 * C259 - C49784 * C273 + C50815 * C289 +
            C49777 * C270 - C24648 * C258 - C49777 * C271 + C50561 * C288) *
               C50719 * C50880 +
           (C49784 * C274 - C24646 * C260 - C49784 * C275 + C50815 * C290 +
            C49777 * C276 - C24648 * C261 - C49777 * C277 + C50561 * C291) *
               C50719 * C24644) *
              C50621 * C50605 * C113 -
          ((C49777 * C278 - C24648 * C262 - C49777 * C279 + C50561 * C292 +
            C49784 * C276 - C24646 * C261 - C49784 * C277 + C50815 * C291) *
               C50719 * C24644 +
           (C49777 * C268 - C24648 * C257 - C49777 * C269 + C50561 * C287 +
            C49784 * C270 - C24646 * C258 - C49784 * C271 + C50815 * C288) *
               C50719 * C50880 +
           (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
            C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
               C50719 * C50879) *
              C50621 * C50605 * C114 +
          ((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
            C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
               C50719 * C50879 +
           (C49784 * C268 - C24646 * C257 - C49784 * C269 + C50815 * C287 +
            C49777 * C266 - C24648 * C256 - C49777 * C267 + C50561 * C286) *
               C50719 * C50880 +
           (C49784 * C278 - C24646 * C262 - C49784 * C279 + C50815 * C292 +
            C49777 * C280 - C24648 * C263 - C49777 * C281 + C50561 * C293) *
               C50719 * C24644) *
              C50621 * C50605 * C115 -
          ((C49777 * C284 - C24648 * C265 - C49777 * C285 + C50561 * C295 +
            C49784 * C280 - C24646 * C263 - C49784 * C281 + C50815 * C293) *
               C50719 * C24644 +
           (C49777 * C282 - C24648 * C264 - C49777 * C283 + C50561 * C294 +
            C49784 * C266 - C24646 * C256 - C49784 * C267 + C50815 * C286) *
               C50719 * C50880 +
           (C49777 * C140 - C24648 * C129 - C49777 * C141 + C50561 * C150 +
            C49784 * C138 - C24646 * C128 - C49784 * C139 + C50815 * C149) *
               C50719 * C50879) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C394 -
           ((C49777 * C1441 - C24648 * C1435 - C49777 * C1442 + C50561 * C1447 +
             C49784 * C1443 - C24646 * C1436 - C49784 * C1444 +
             C50815 * C1448) *
                C50719 * C24644 +
            (C49777 * C785 - C24648 * C779 - C49777 * C786 + C50561 * C794 +
             C49784 * C783 - C24646 * C778 - C49784 * C784 + C50815 * C793) *
                C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C395 +
           ((C49784 * C415 - C24646 * C401 - C49784 * C416 + C50815 * C431 +
             C49777 * C417 - C24648 * C402 - C49777 * C418 + C50561 * C432) *
                C50719 * C50879 +
            (C49784 * C1096 - C24646 * C1089 - C49784 * C1097 + C50815 * C1101 +
             C49777 * C1094 - C24648 * C1088 - C49777 * C1095 +
             C50561 * C1100) *
                C50719 * C50880 +
            (C49784 * C2564 - C24646 * C2561 - C49784 * C2565 + C50815 * C2570 +
             C49777 * C2566 - C24648 * C2562 - C49777 * C2567 +
             C50561 * C2571) *
                C50719 * C24644) *
               C396) *
              C50605 * C254 +
          (((C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429 +
             C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428) *
                C50719 * C50879 +
            (C49784 * C785 - C24646 * C779 - C49784 * C786 + C50815 * C794 +
             C49777 * C787 - C24648 * C780 - C49777 * C788 + C50561 * C795) *
                C50719 * C50880 +
            (C49784 * C1441 - C24646 * C1435 - C49784 * C1442 + C50815 * C1447 +
             C49777 * C1439 - C24648 * C1434 - C49777 * C1440 +
             C50561 * C1446) *
                C50719 * C24644) *
               C395 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C394 -
           ((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 + C50561 * C2572 +
             C49784 * C2566 - C24646 * C2562 - C49784 * C2567 +
             C50815 * C2571) *
                C50719 * C24644 +
            (C49777 * C1092 - C24648 * C1087 - C49777 * C1093 + C50561 * C1099 +
             C49784 * C1094 - C24646 * C1088 - C49784 * C1095 +
             C50815 * C1100) *
                C50719 * C50880 +
            (C49777 * C419 - C24648 * C403 - C49777 * C420 + C50561 * C433 +
             C49784 * C417 - C24646 * C402 - C49784 * C418 + C50815 * C432) *
                C50719 * C50879) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50831 -
           ((C49777 * C1441 - C24648 * C1435 - C49777 * C1442 + C50561 * C1447 +
             C49784 * C1443 - C24646 * C1436 - C49784 * C1444 +
             C50815 * C1448) *
                C50719 * C24644 +
            (C49777 * C785 - C24648 * C779 - C49777 * C786 + C50561 * C794 +
             C49784 * C783 - C24646 * C778 - C49784 * C784 + C50815 * C793) *
                C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C50685) *
              C50605 * C50873 +
          (((C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429 +
             C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428) *
                C50719 * C50879 +
            (C49784 * C785 - C24646 * C779 - C49784 * C786 + C50815 * C794 +
             C49777 * C787 - C24648 * C780 - C49777 * C788 + C50561 * C795) *
                C50719 * C50880 +
            (C49784 * C1441 - C24646 * C1435 - C49784 * C1442 + C50815 * C1447 +
             C49777 * C1439 - C24648 * C1434 - C49777 * C1440 +
             C50561 * C1446) *
                C50719 * C24644) *
               C50685 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C50831) *
              C50605 * C50874 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50719 * C50879 +
            (C25200 + C25201) * C50719 * C50880 +
            (C25202 + C25203) * C50719 * C24644) *
               C50831 -
           ((C49777 * C1437 - C24648 * C1433 - C49777 * C1438 + C50561 * C1445 +
             C49784 * C1439 - C24646 * C1434 - C49784 * C1440 +
             C50815 * C1446) *
                C50719 * C24644 +
            (C49777 * C789 - C24648 * C781 - C49777 * C790 + C50561 * C796 +
             C49784 * C787 - C24646 * C780 - C49784 * C788 + C50815 * C795) *
                C50719 * C50880 +
            (C49777 * C407 - C24648 * C397 - C49777 * C408 + C50561 * C427 +
             C49784 * C409 - C24646 * C398 - C49784 * C410 + C50815 * C428) *
                C50719 * C50879) *
               C50685) *
              C50605 * C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50719 * C50879 +
           (C49784 * C272 - C24646 * C259 - C49784 * C273 + C50815 * C289 +
            C49777 * C270 - C24648 * C258 - C49777 * C271 + C50561 * C288) *
               C50719 * C50880 +
           (C49784 * C274 - C24646 * C260 - C49784 * C275 + C50815 * C290 +
            C49777 * C276 - C24648 * C261 - C49777 * C277 + C50561 * C291) *
               C50719 * C24644) *
              C50621 * C50605 * C113 -
          ((C49777 * C278 - C24648 * C262 - C49777 * C279 + C50561 * C292 +
            C49784 * C276 - C24646 * C261 - C49784 * C277 + C50815 * C291) *
               C50719 * C24644 +
           (C49777 * C268 - C24648 * C257 - C49777 * C269 + C50561 * C287 +
            C49784 * C270 - C24646 * C258 - C49784 * C271 + C50815 * C288) *
               C50719 * C50880 +
           (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
            C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
               C50719 * C50879) *
              C50621 * C50605 * C114 +
          ((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
            C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
               C50719 * C50879 +
           (C49784 * C268 - C24646 * C257 - C49784 * C269 + C50815 * C287 +
            C49777 * C266 - C24648 * C256 - C49777 * C267 + C50561 * C286) *
               C50719 * C50880 +
           (C49784 * C278 - C24646 * C262 - C49784 * C279 + C50815 * C292 +
            C49777 * C280 - C24648 * C263 - C49777 * C281 + C50561 * C293) *
               C50719 * C24644) *
              C50621 * C50605 * C115 -
          ((C49777 * C284 - C24648 * C265 - C49777 * C285 + C50561 * C295 +
            C49784 * C280 - C24646 * C263 - C49784 * C281 + C50815 * C293) *
               C50719 * C24644 +
           (C49777 * C282 - C24648 * C264 - C49777 * C283 + C50561 * C294 +
            C49784 * C266 - C24646 * C256 - C49784 * C267 + C50815 * C286) *
               C50719 * C50880 +
           (C49777 * C140 - C24648 * C129 - C49777 * C141 + C50561 * C150 +
            C49784 * C138 - C24646 * C128 - C49784 * C139 + C50815 * C149) *
               C50719 * C50879) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50621 * C251 -
           ((C24872 + C24873) * C50719 * C24644 +
            (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C50621 * C252 +
           (C24882 * C50879 + (C24873 + C24872) * C50719 * C50880 +
            (C49784 * C2318 - C24646 * C2315 - C49784 * C2319 + C50815 * C2324 +
             C49777 * C2320 - C24648 * C2316 - C49777 * C2321 +
             C50561 * C2325) *
                C50719 * C24644) *
               C50621 * C253) *
              C254 +
          (((C24874 + C24875) * C50719 * C50879 +
            (C24876 + C24877) * C50719 * C50880 +
            (C24878 + C24879) * C50719 * C24644) *
               C50621 * C252 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C50621 * C251 -
           ((C49777 * C2322 - C24648 * C2317 - C49777 * C2323 + C50561 * C2326 +
             C49784 * C2320 - C24646 * C2316 - C49784 * C2321 +
             C50815 * C2325) *
                C50719 * C24644 +
            (C24879 + C24878) * C50719 * C50880 + C24883 * C50879) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50621 * C50875 -
           (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C50621 * C50876 +
           (C24882 * C50879 + (C24873 + C24872) * C50719 * C50880 +
            (C25858 + C25859) * C50719 * C24644) *
               C50621 * C1202) *
              C50822 +
          (((C24874 + C24875) * C50719 * C50879 +
            (C24876 + C24877) * C50719 * C50880 +
            (C24878 + C24879) * C50719 * C24644) *
               C50621 * C50876 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C50621 * C50875 -
           ((C49777 * C2322 - C24648 * C2317 - C49777 * C2323 + C50561 * C2326 +
             C49784 * C2320 - C24646 * C2316 - C49784 * C2321 +
             C50815 * C2325) *
                C50719 * C24644 +
            (C24879 + C24878) * C50719 * C50880 + C24883 * C50879) *
               C50621 * C1202) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50831 -
           (C26529 * C24644 + (C25594 + C25595) * C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C50685) *
              C50875 +
          (((C25595 + C25594) * C50719 * C50879 +
            (C25593 + C25592) * C50719 * C50880 +
            (C26534 + C26535) * C50719 * C24644) *
               C50685 -
           (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C50831) *
              C50876 +
          ((C24882 * C50879 + (C24873 + C24872) * C50719 * C50880 +
            (C25858 + C25859) * C50719 * C24644) *
               C50831 -
           ((C49777 * C4093 - C24648 * C4091 - C49777 * C4094 + C50561 * C4097 +
             C49784 * C4095 - C24646 * C4092 - C49784 * C4096 +
             C50815 * C4098) *
                C50719 * C24644 +
            (C26535 + C26534) * C50719 * C50880 + C26529 * C50879) *
               C50685) *
              C1202) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50719 * C50879 +
           (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
              C50621 * C967 -
          (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
           (C24869 + C24868) * C50719 * C50879) *
              C50621 * C968 +
          (C24882 * C50879 + (C24873 + C24872) * C50719 * C50880 +
           (C25858 + C25859) * C50719 * C24644) *
              C50621 * C969 -
          ((C49777 * C3401 - C24648 * C3399 - C49777 * C3402 + C50561 * C3405 +
            C49784 * C3403 - C24646 * C3400 - C49784 * C3404 + C50815 * C3406) *
               C50719 * C24644 +
           (C25859 + C25858) * C50719 * C50880 + C25853 * C50879) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50621 * C896 -
           ((C24872 + C24873) * C50719 * C24644 +
            (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C50621 * C50657) *
              C898 +
          (((C24874 + C24875) * C50719 * C50879 +
            (C24876 + C24877) * C50719 * C50880 +
            (C24878 + C24879) * C50719 * C24644) *
               C50621 * C50657 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C50621 * C896) *
              C899 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50719 * C50879 +
            (C25200 + C25201) * C50719 * C50880 +
            (C25202 + C25203) * C50719 * C24644) *
               C50621 * C896 -
           ((C49777 * C976 - C24648 * C972 - C49777 * C977 + C50561 * C984 +
             C49784 * C978 - C24646 * C973 - C49784 * C979 + C50815 * C985) *
                C50719 * C24644 +
            (C25203 + C25202) * C50719 * C50880 +
            (C25201 + C25200) * C50719 * C50879) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C394 -
           ((C25592 + C25593) * C50719 * C24644 +
            (C25594 + C25595) * C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C395 +
           ((C49784 * C415 - C24646 * C401 - C49784 * C416 + C50815 * C431 +
             C49777 * C417 - C24648 * C402 - C49777 * C418 + C50561 * C432) *
                C50719 * C50879 +
            (C26030 + C26031) * C50719 * C50880 +
            (C26032 + C26033) * C50719 * C24644) *
               C396) *
              C896 +
          (((C25595 + C25594) * C50719 * C50879 +
            (C25593 + C25592) * C50719 * C50880 +
            (C49784 * C3090 - C24646 * C3087 - C49784 * C3091 + C50815 * C3096 +
             C49777 * C3092 - C24648 * C3088 - C49777 * C3093 +
             C50561 * C3097) *
                C50719 * C24644) *
               C395 -
           (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C394 -
           ((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 + C50561 * C3575 +
             C49784 * C3573 - C24646 * C3570 - C49784 * C3574 +
             C50815 * C3576) *
                C50719 * C24644 +
            (C26033 + C26032) * C50719 * C50880 +
            (C26031 + C26030) * C50719 * C50879) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50719 * C50879 +
             (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
                C50831 -
            ((C25592 + C25593) * C50719 * C24644 +
             (C25594 + C25595) * C50719 * C50880 +
             (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
              C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                 C50719 * C50879) *
                C50685) *
               C896 +
           (((C25595 + C25594) * C50719 * C50879 +
             (C25593 + C25592) * C50719 * C50880 +
             (C49784 * C3090 - C24646 * C3087 - C49784 * C3091 +
              C50815 * C3096 + C49777 * C3092 - C24648 * C3088 -
              C49777 * C3093 + C50561 * C3097) *
                 C50719 * C24644) *
                C50685 -
            (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
             (C24869 + C24868) * C50719 * C50879) *
                C50831) *
               C50657) *
              C50822 +
          ((((C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429 +
              C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428) *
                 C50719 * C50879 +
             (C25596 + C25597) * C50719 * C50880 +
             (C25598 + C25599) * C50719 * C24644) *
                C50685 -
            (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50719 * C50879) *
                C50831) *
               C896 +
           (((C24874 + C24875) * C50719 * C50879 +
             (C24876 + C24877) * C50719 * C50880 +
             (C24878 + C24879) * C50719 * C24644) *
                C50831 -
            ((C49777 * C3094 - C24648 * C3089 - C49777 * C3095 +
              C50561 * C3098 + C49784 * C3092 - C24646 * C3088 -
              C49784 * C3093 + C50815 * C3097) *
                 C50719 * C24644 +
             (C25599 + C25598) * C50719 * C50880 +
             (C25597 + C25596) * C50719 * C50879) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50621 * C896 -
           ((C24872 + C24873) * C50719 * C24644 +
            (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C50621 * C50657) *
              C898 +
          (((C24874 + C24875) * C50719 * C50879 +
            (C24876 + C24877) * C50719 * C50880 +
            (C24878 + C24879) * C50719 * C24644) *
               C50621 * C50657 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C50621 * C896) *
              C899 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50719 * C50879 +
            (C25200 + C25201) * C50719 * C50880 +
            (C25202 + C25203) * C50719 * C24644) *
               C50621 * C896 -
           ((C49777 * C976 - C24648 * C972 - C49777 * C977 + C50561 * C984 +
             C49784 * C978 - C24646 * C973 - C49784 * C979 + C50815 * C985) *
                C50719 * C24644 +
            (C25203 + C25202) * C50719 * C50880 +
            (C25201 + C25200) * C50719 * C50879) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50719 * C50879 +
           (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
              C50621 * C967 -
          (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
           (C24869 + C24868) * C50719 * C50879) *
              C50621 * C968 +
          (C24882 * C50879 + (C24873 + C24872) * C50719 * C50880 +
           (C25858 + C25859) * C50719 * C24644) *
              C50621 * C969 -
          ((C49777 * C3401 - C24648 * C3399 - C49777 * C3402 + C50561 * C3405 +
            C49784 * C3403 - C24646 * C3400 - C49784 * C3404 + C50815 * C3406) *
               C50719 * C24644 +
           (C25859 + C25858) * C50719 * C50880 + C25853 * C50879) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50719 * C50879 +
             (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
                C1547 -
            (C26529 * C24644 + (C25594 + C25595) * C50719 * C50880 +
             (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
              C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                 C50719 * C50879) *
                C50685) *
               C50830 +
           (((C25595 + C25594) * C50719 * C50879 +
             (C25593 + C25592) * C50719 * C50880 +
             (C26534 + C26535) * C50719 * C24644) *
                C50685 -
            (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
             (C24869 + C24868) * C50719 * C50879) *
                C1547) *
               C50657) *
              C50822 +
          ((((C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429 +
              C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428) *
                 C50719 * C50879 +
             (C25596 + C25597) * C50719 * C50880 +
             (C25598 + C25599) * C50719 * C24644) *
                C50685 -
            (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50719 * C50879) *
                C1547) *
               C50830 +
           (((C24874 + C24875) * C50719 * C50879 +
             (C24876 + C24877) * C50719 * C50880 +
             (C24878 + C24879) * C50719 * C24644) *
                C1547 -
            ((C49777 * C3094 - C24648 * C3089 - C49777 * C3095 +
              C50561 * C3098 + C49784 * C3092 - C24646 * C3088 -
              C49784 * C3093 + C50815 * C3097) *
                 C50719 * C24644 +
             (C25599 + C25598) * C50719 * C50880 +
             (C25597 + C25596) * C50719 * C50879) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50877 -
           (C26529 * C24644 + (C25594 + C25595) * C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C50878 +
           ((C49784 * C415 - C24646 * C401 - C49784 * C416 + C50815 * C431 +
             C49777 * C417 - C24648 * C402 - C49777 * C418 + C50561 * C432) *
                C50719 * C50879 +
            (C26030 + C26031) * C50719 * C50880 +
            (C26032 + C26033) * C50719 * C24644) *
               C1963) *
              C50830 +
          (((C25595 + C25594) * C50719 * C50879 +
            (C25593 + C25592) * C50719 * C50880 +
            (C26534 + C26535) * C50719 * C24644) *
               C50878 -
           (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C50877 -
           ((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 + C50561 * C3575 +
             C49784 * C3573 - C24646 * C3570 - C49784 * C3574 +
             C50815 * C3576) *
                C50719 * C24644 +
            (C26033 + C26032) * C50719 * C50880 +
            (C26031 + C26030) * C50719 * C50879) *
               C1963) *
              C50657) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C1547 -
           (C26529 * C24644 + (C25594 + C25595) * C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C50685) *
              C251 +
          (((C25595 + C25594) * C50719 * C50879 +
            (C25593 + C25592) * C50719 * C50880 +
            (C26534 + C26535) * C50719 * C24644) *
               C50685 -
           (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C1547) *
              C252 +
          ((C24882 * C50879 + (C24873 + C24872) * C50719 * C50880 +
            (C25858 + C25859) * C50719 * C24644) *
               C1547 -
           ((C49777 * C4093 - C24648 * C4091 - C49777 * C4094 + C50561 * C4097 +
             C49784 * C4095 - C24646 * C4092 - C49784 * C4096 +
             C50815 * C4098) *
                C50719 * C24644 +
            (C26535 + C26534) * C50719 * C50880 + C26529 * C50879) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C1547 -
           (C26529 * C24644 + (C25594 + C25595) * C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C50685) *
              C50605 * C898 +
          (((C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429 +
             C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428) *
                C50719 * C50879 +
            (C25596 + C25597) * C50719 * C50880 +
            (C25598 + C25599) * C50719 * C24644) *
               C50685 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C1547) *
              C50605 * C899 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50719 * C50879 +
            (C25200 + C25201) * C50719 * C50880 +
            (C25202 + C25203) * C50719 * C24644) *
               C1547 -
           ((C49777 * C1437 - C24648 * C1433 - C49777 * C1438 + C50561 * C1445 +
             C49784 * C1439 - C24646 * C1434 - C49784 * C1440 +
             C50815 * C1446) *
                C50719 * C24644 +
            (C49777 * C789 - C24648 * C781 - C49777 * C790 + C50561 * C796 +
             C49784 * C787 - C24646 * C780 - C49784 * C788 + C50815 * C795) *
                C50719 * C50880 +
            (C49777 * C407 - C24648 * C397 - C49777 * C408 + C50561 * C427 +
             C49784 * C409 - C24646 * C398 - C49784 * C410 + C50815 * C428) *
                C50719 * C50879) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50719 * C50879 +
           (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
              C1713 -
          (C26529 * C24644 + (C25594 + C25595) * C50719 * C50880 +
           (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
            C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
               C50719 * C50879) *
              C1714 +
          ((C49784 * C415 - C24646 * C401 - C49784 * C416 + C50815 * C431 +
            C49777 * C417 - C24648 * C402 - C49777 * C418 + C50561 * C432) *
               C50719 * C50879 +
           (C26030 + C26031) * C50719 * C50880 +
           (C26032 + C26033) * C50719 * C24644) *
              C1715 -
          ((C49777 * C4509 - C24648 * C4505 - C49777 * C4510 + C50561 * C4517 +
            C49784 * C4511 - C24646 * C4506 - C49784 * C4512 + C50815 * C4518) *
               C50719 * C24644 +
           (C49777 * C4513 - C24648 * C4507 - C49777 * C4514 + C50561 * C4519 +
            C49784 * C4515 - C24646 * C4508 - C49784 * C4516 + C50815 * C4520) *
               C50719 * C50880 +
           (C49777 * C1725 - C24648 * C1719 - C49777 * C1726 + C50561 * C1731 +
            C49784 * C1727 - C24646 * C1720 - C49784 * C1728 + C50815 * C1732) *
               C50719 * C50879) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C50877 -
           (C26529 * C24644 + (C25594 + C25595) * C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C50878 +
           ((C49784 * C415 - C24646 * C401 - C49784 * C416 + C50815 * C431 +
             C49777 * C417 - C24648 * C402 - C49777 * C418 + C50561 * C432) *
                C50719 * C50879 +
            (C26030 + C26031) * C50719 * C50880 +
            (C26032 + C26033) * C50719 * C24644) *
               C1963) *
              C50605 * C50822 +
          (((C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429 +
             C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428) *
                C50719 * C50879 +
            (C25596 + C25597) * C50719 * C50880 +
            (C25598 + C25599) * C50719 * C24644) *
               C50878 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C50877 -
           ((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 + C50561 * C2572 +
             C49784 * C2566 - C24646 * C2562 - C49784 * C2567 +
             C50815 * C2571) *
                C50719 * C24644 +
            (C49777 * C1092 - C24648 * C1087 - C49777 * C1093 + C50561 * C1099 +
             C49784 * C1094 - C24646 * C1088 - C49784 * C1095 +
             C50815 * C1100) *
                C50719 * C50880 +
            (C49777 * C419 - C24648 * C403 - C49777 * C420 + C50561 * C433 +
             C49784 * C417 - C24646 * C402 - C49784 * C418 + C50815 * C432) *
                C50719 * C50879) *
               C1963) *
              C50605 * C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C1547 -
           (C26529 * C24644 + (C25594 + C25595) * C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C50685) *
              C50605 * C898 +
          (((C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429 +
             C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428) *
                C50719 * C50879 +
            (C25596 + C25597) * C50719 * C50880 +
            (C25598 + C25599) * C50719 * C24644) *
               C50685 -
           (C24883 * C24644 + (C24875 + C24874) * C50719 * C50880 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50719 * C50879) *
               C1547) *
              C50605 * C899 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50719 * C50879 +
            (C25200 + C25201) * C50719 * C50880 +
            (C25202 + C25203) * C50719 * C24644) *
               C1547 -
           ((C49777 * C1437 - C24648 * C1433 - C49777 * C1438 + C50561 * C1445 +
             C49784 * C1439 - C24646 * C1434 - C49784 * C1440 +
             C50815 * C1446) *
                C50719 * C24644 +
            (C49777 * C789 - C24648 * C781 - C49777 * C790 + C50561 * C796 +
             C49784 * C787 - C24646 * C780 - C49784 * C788 + C50815 * C795) *
                C50719 * C50880 +
            (C49777 * C407 - C24648 * C397 - C49777 * C408 + C50561 * C427 +
             C49784 * C409 - C24646 * C398 - C49784 * C410 + C50815 * C428) *
                C50719 * C50879) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50719 * C50879 +
            (C24868 + C24869) * C50719 * C50880 + C24882 * C24644) *
               C1547 -
           (C26529 * C24644 + (C25594 + C25595) * C50719 * C50880 +
            (C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429 +
             C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430) *
                C50719 * C50879) *
               C50685) *
              C251 +
          (((C25595 + C25594) * C50719 * C50879 +
            (C25593 + C25592) * C50719 * C50880 +
            (C26534 + C26535) * C50719 * C24644) *
               C50685 -
           (C25853 * C24644 + (C24871 + C24870) * C50719 * C50880 +
            (C24869 + C24868) * C50719 * C50879) *
               C1547) *
              C252 +
          ((C24882 * C50879 + (C24873 + C24872) * C50719 * C50880 +
            (C25858 + C25859) * C50719 * C24644) *
               C1547 -
           ((C49777 * C4093 - C24648 * C4091 - C49777 * C4094 + C50561 * C4097 +
             C49784 * C4095 - C24646 * C4092 - C49784 * C4096 +
             C50815 * C4098) *
                C50719 * C24644 +
            (C26535 + C26534) * C50719 * C50880 + C26529 * C50879) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50621 * C50830 -
           ((C31285 + C31286) * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C50621 * C50657) *
              C50873 +
          (((C31287 + C31288) * C50879 + (C31289 + C31290) * C50880 +
            (C31291 + C31292) * C24644) *
               C50621 * C50657 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C50621 * C50830) *
              C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50844 +
             C22551 * C50783) *
                C50879 +
            (C31587 + C31588) * C50880 + (C31589 + C31597) * C24644) *
               C50621 * C50830 -
           (((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
              C50556 * C3098) *
                 C50783 +
             C20246 * C50844) *
                C24644 +
            (C31597 + C31589) * C50880 + (C31588 + C31587) * C50879) *
               C50621 * C50657) *
              C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C50844 +
              C22222 * C50783) *
                 C50879 +
             (C31281 + C31282) * C50880 + C31293 * C24644) *
                C50831 -
            ((C31938 + C31939) * C24644 + (C31940 + C31941) * C50880 +
             (C22223 * C50783 + C22222 * C50844) * C50879) *
                C50685) *
               C50830 +
           (((C31941 + C31940) * C50879 + (C31939 + C31938) * C50880 +
             (C20514 * C50844 + C20824 * C50783) * C24644) *
                C50685 -
            ((C31285 + C31286) * C24644 + (C31284 + C31283) * C50880 +
             (C31282 + C31281) * C50879) *
                C50831) *
               C50657) *
              C254 +
          ((((C22226 * C50844 + C22227 * C50783) * C50879 +
             (C31942 + C31943) * C50880 + (C31944 + C31945) * C24644) *
                C50685 -
            (C31294 * C24644 + (C31288 + C31287) * C50880 +
             (C22226 * C50783 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C50844) *
                 C50879) *
                C50831) *
               C50830 +
           (((C31287 + C31288) * C50879 + (C31289 + C31290) * C50880 +
             (C31291 + C31292) * C24644) *
                C50831 -
            (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
               C50556 * C3575) *
                  C50783 +
              C20519 * C50844) *
                 C24644 +
             (C31945 + C31944) * C50880 + (C31943 + C31942) * C50879) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50621 * C251 -
           ((C31285 + C31286) * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C50621 * C252 +
           (C31293 * C50879 + (C31286 + C31285) * C50880 +
            (C20017 * C50844 + C21164 * C50783) * C24644) *
               C50621 * C253) *
              C254 +
          (((C31287 + C31288) * C50879 + (C31289 + C31290) * C50880 +
            (C31291 + C31292) * C24644) *
               C50621 * C252 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C50621 * C251 -
           (((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50783 +
             C20021 * C50844) *
                C24644 +
            (C31292 + C31291) * C50880 + C31294 * C50879) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50844 +
            C22222 * C50783) *
               C50879 +
           (C20014 * C50844 + C20516 * C50783) * C50880 +
           (C20015 * C50844 + C20515 * C50783) * C24644) *
              C50621 * C50605 * C113 -
          ((C20518 * C50783 + C20019 * C50844) * C24644 +
           (C20517 * C50783 + C20018 * C50844) * C50880 +
           (C22226 * C50783 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50844) *
               C50879) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50844 +
            C22551 * C50783) *
               C50879 +
           (C20244 * C50844 + C22389 * C50783) * C50880 +
           (C20245 * C50844 + (C19865 * C1439 - C19866 * C1434 -
                               C19865 * C1440 + C50556 * C1446) *
                                  C50783) *
               C24644) *
              C50621 * C50605 * C115 -
          (((C19865 * C1437 - C19866 * C1433 - C19865 * C1438 +
             C50556 * C1445) *
                C50783 +
            (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
                C50844) *
               C24644 +
           ((C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C50783 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C50844) *
               C50880 +
           ((C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C50783 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C50844) *
               C50879) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C394 -
           ((C20823 * C50783 + C20515 * C50844) * C24644 +
            (C20822 * C50783 + C20516 * C50844) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C395 +
           ((C22223 * C50844 + C22225 * C50783) * C50879 +
            (C20822 * C50844 + C22224 * C50783) * C50880 +
            (C20823 * C50844 + C23165 * C50783) * C24644) *
               C396) *
              C50605 * C254 +
          (((C22226 * C50844 + C22227 * C50783) * C50879 +
            (C20517 * C50844 + C22024 * C50783) * C50880 +
            (C20518 * C50844 + C22025 * C50783) * C24644) *
               C395 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C394 -
           (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
              C50556 * C4517) *
                 C50783 +
             C22025 * C50844) *
                C24644 +
            (C22229 * C50783 + C22024 * C50844) * C50880 +
            (C22228 * C50783 + C22227 * C50844) * C50879) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50831 -
           ((C20823 * C50783 + C20515 * C50844) * C24644 +
            (C20822 * C50783 + C20516 * C50844) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C50685) *
              C50605 * C50873 +
          (((C22226 * C50844 + C22227 * C50783) * C50879 +
            (C20517 * C50844 + C22024 * C50783) * C50880 +
            (C20518 * C50844 + C22025 * C50783) * C24644) *
               C50685 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C50831) *
              C50605 * C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50844 +
             C22551 * C50783) *
                C50879 +
            (C31587 + C31588) * C50880 + (C31589 + C31597) * C24644) *
               C50831 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C50783 +
             C31596 * C50844) *
                C24644 +
            (C22390 * C50783 + C22389 * C50844) * C50880 +
            (C22552 * C50783 + C22551 * C50844) * C50879) *
               C50685) *
              C50605 * C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50844 +
            C22222 * C50783) *
               C50879 +
           (C20014 * C50844 + C20516 * C50783) * C50880 +
           (C20015 * C50844 + C20515 * C50783) * C24644) *
              C50621 * C50605 * C113 -
          ((C20518 * C50783 + C20019 * C50844) * C24644 +
           (C20517 * C50783 + C20018 * C50844) * C50880 +
           (C22226 * C50783 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50844) *
               C50879) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50844 +
            C22551 * C50783) *
               C50879 +
           (C20244 * C50844 + C22389 * C50783) * C50880 +
           (C20245 * C50844 + (C19865 * C1439 - C19866 * C1434 -
                               C19865 * C1440 + C50556 * C1446) *
                                  C50783) *
               C24644) *
              C50621 * C50605 * C115 -
          (((C19865 * C1437 - C19866 * C1433 - C19865 * C1438 +
             C50556 * C1445) *
                C50783 +
            (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
                C50844) *
               C24644 +
           ((C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C50783 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C50844) *
               C50880 +
           ((C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C50783 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C50844) *
               C50879) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50621 * C251 -
           ((C31285 + C31286) * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C50621 * C252 +
           (C31293 * C50879 + (C31286 + C31285) * C50880 +
            (C20017 * C50844 + C21164 * C50783) * C24644) *
               C50621 * C253) *
              C254 +
          (((C31287 + C31288) * C50879 + (C31289 + C31290) * C50880 +
            (C31291 + C31292) * C24644) *
               C50621 * C252 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C50621 * C251 -
           (((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50783 +
             C20021 * C50844) *
                C24644 +
            (C31292 + C31291) * C50880 + C31294 * C50879) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50621 * C50875 -
           (C32190 * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C50621 * C50876 +
           (C31293 * C50879 + (C31286 + C31285) * C50880 +
            (C32191 + C32192) * C24644) *
               C50621 * C1202) *
              C50822 +
          (((C31287 + C31288) * C50879 + (C31289 + C31290) * C50880 +
            (C31291 + C31292) * C24644) *
               C50621 * C50876 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C50621 * C50875 -
           (((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50783 +
             C20021 * C50844) *
                C24644 +
            (C31292 + C31291) * C50880 + C31294 * C50879) *
               C50621 * C1202) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50831 -
           (C32829 * C24644 + (C31940 + C31941) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C50685) *
              C50875 +
          (((C31941 + C31940) * C50879 + (C31939 + C31938) * C50880 +
            (C32830 + C32831) * C24644) *
               C50685 -
           (C32190 * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C50831) *
              C50876 +
          ((C31293 * C50879 + (C31286 + C31285) * C50880 +
            (C32191 + C32192) * C24644) *
               C50831 -
           (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
              C50556 * C20802) *
                 C50783 +
             C21164 * C50844) *
                C24644 +
            (C32831 + C32830) * C50880 + C32829 * C50879) *
               C50685) *
              C1202) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50844 +
            C22222 * C50783) *
               C50879 +
           (C31281 + C31282) * C50880 + C31293 * C24644) *
              C50621 * C967 -
          (C32190 * C24644 + (C31284 + C31283) * C50880 +
           (C31282 + C31281) * C50879) *
              C50621 * C968 +
          (C31293 * C50879 + (C31286 + C31285) * C50880 +
           (C32191 + C32192) * C24644) *
              C50621 * C969 -
          (((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50783 +
            C20700 * C50844) *
               C24644 +
           (C32192 + C32191) * C50880 + C32190 * C50879) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50621 * C896 -
           ((C31285 + C31286) * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C50621 * C50657) *
              C898 +
          (((C31287 + C31288) * C50879 + (C31289 + C31290) * C50880 +
            (C31291 + C31292) * C24644) *
               C50621 * C50657 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50844 +
             C22551 * C50783) *
                C50879 +
            (C31587 + C31588) * C50880 + (C31589 + C31597) * C24644) *
               C50621 * C896 -
           (((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
              C50556 * C3098) *
                 C50783 +
             C20246 * C50844) *
                C24644 +
            (C31597 + C31589) * C50880 + (C31588 + C31587) * C50879) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C394 -
           ((C31938 + C31939) * C24644 + (C31940 + C31941) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C395 +
           ((C22223 * C50844 + C22225 * C50783) * C50879 +
            (C32339 + C32340) * C50880 + (C32341 + C32342) * C24644) *
               C396) *
              C896 +
          (((C31941 + C31940) * C50879 + (C31939 + C31938) * C50880 +
            (C20514 * C50844 + C20824 * C50783) * C24644) *
               C395 -
           (C32190 * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C394 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C50783 +
             C20824 * C50844) *
                C24644 +
            (C32342 + C32341) * C50880 + (C32340 + C32339) * C50879) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C50844 +
              C22222 * C50783) *
                 C50879 +
             (C31281 + C31282) * C50880 + C31293 * C24644) *
                C50831 -
            ((C31938 + C31939) * C24644 + (C31940 + C31941) * C50880 +
             (C22223 * C50783 + C22222 * C50844) * C50879) *
                C50685) *
               C896 +
           (((C31941 + C31940) * C50879 + (C31939 + C31938) * C50880 +
             (C20514 * C50844 + C20824 * C50783) * C24644) *
                C50685 -
            (C32190 * C24644 + (C31284 + C31283) * C50880 +
             (C31282 + C31281) * C50879) *
                C50831) *
               C50657) *
              C50822 +
          ((((C22226 * C50844 + C22227 * C50783) * C50879 +
             (C31942 + C31943) * C50880 + (C31944 + C31945) * C24644) *
                C50685 -
            (C31294 * C24644 + (C31288 + C31287) * C50880 +
             (C22226 * C50783 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C50844) *
                 C50879) *
                C50831) *
               C896 +
           (((C31287 + C31288) * C50879 + (C31289 + C31290) * C50880 +
             (C31291 + C31292) * C24644) *
                C50831 -
            (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
               C50556 * C3575) *
                  C50783 +
              C20519 * C50844) *
                 C24644 +
             (C31945 + C31944) * C50880 + (C31943 + C31942) * C50879) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50621 * C896 -
           ((C31285 + C31286) * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C50621 * C50657) *
              C898 +
          (((C31287 + C31288) * C50879 + (C31289 + C31290) * C50880 +
            (C31291 + C31292) * C24644) *
               C50621 * C50657 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50844 +
             C22551 * C50783) *
                C50879 +
            (C31587 + C31588) * C50880 + (C31589 + C31597) * C24644) *
               C50621 * C896 -
           (((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
              C50556 * C3098) *
                 C50783 +
             C20246 * C50844) *
                C24644 +
            (C31597 + C31589) * C50880 + (C31588 + C31587) * C50879) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50844 +
            C22222 * C50783) *
               C50879 +
           (C31281 + C31282) * C50880 + C31293 * C24644) *
              C50621 * C967 -
          (C32190 * C24644 + (C31284 + C31283) * C50880 +
           (C31282 + C31281) * C50879) *
              C50621 * C968 +
          (C31293 * C50879 + (C31286 + C31285) * C50880 +
           (C32191 + C32192) * C24644) *
              C50621 * C969 -
          (((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50783 +
            C20700 * C50844) *
               C24644 +
           (C32192 + C32191) * C50880 + C32190 * C50879) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C50844 +
              C22222 * C50783) *
                 C50879 +
             (C31281 + C31282) * C50880 + C31293 * C24644) *
                C1547 -
            (C32829 * C24644 + (C31940 + C31941) * C50880 +
             (C22223 * C50783 + C22222 * C50844) * C50879) *
                C50685) *
               C50830 +
           (((C31941 + C31940) * C50879 + (C31939 + C31938) * C50880 +
             (C32830 + C32831) * C24644) *
                C50685 -
            (C32190 * C24644 + (C31284 + C31283) * C50880 +
             (C31282 + C31281) * C50879) *
                C1547) *
               C50657) *
              C50822 +
          ((((C22226 * C50844 + C22227 * C50783) * C50879 +
             (C31942 + C31943) * C50880 + (C31944 + C31945) * C24644) *
                C50685 -
            (C31294 * C24644 + (C31288 + C31287) * C50880 +
             (C22226 * C50783 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C50844) *
                 C50879) *
                C1547) *
               C50830 +
           (((C31287 + C31288) * C50879 + (C31289 + C31290) * C50880 +
             (C31291 + C31292) * C24644) *
                C1547 -
            (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
               C50556 * C3575) *
                  C50783 +
              C20519 * C50844) *
                 C24644 +
             (C31945 + C31944) * C50880 + (C31943 + C31942) * C50879) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50877 -
           (C32829 * C24644 + (C31940 + C31941) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C50878 +
           ((C22223 * C50844 + C22225 * C50783) * C50879 +
            (C32339 + C32340) * C50880 + (C32341 + C32342) * C24644) *
               C1963) *
              C50830 +
          (((C31941 + C31940) * C50879 + (C31939 + C31938) * C50880 +
            (C32830 + C32831) * C24644) *
               C50878 -
           (C32190 * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C50877 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C50783 +
             C20824 * C50844) *
                C24644 +
            (C32342 + C32341) * C50880 + (C32340 + C32339) * C50879) *
               C1963) *
              C50657) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C1547 -
           (C32829 * C24644 + (C31940 + C31941) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C50685) *
              C251 +
          (((C31941 + C31940) * C50879 + (C31939 + C31938) * C50880 +
            (C32830 + C32831) * C24644) *
               C50685 -
           (C32190 * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C1547) *
              C252 +
          ((C31293 * C50879 + (C31286 + C31285) * C50880 +
            (C32191 + C32192) * C24644) *
               C1547 -
           (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
              C50556 * C20802) *
                 C50783 +
             C21164 * C50844) *
                C24644 +
            (C32831 + C32830) * C50880 + C32829 * C50879) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C1547 -
           (C32829 * C24644 + (C31940 + C31941) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C50844 + C22227 * C50783) * C50879 +
            (C31942 + C31943) * C50880 + (C31944 + C31945) * C24644) *
               C50685 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50844 +
             C22551 * C50783) *
                C50879 +
            (C31587 + C31588) * C50880 + (C31589 + C31597) * C24644) *
               C1547 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C50783 +
             C31596 * C50844) *
                C24644 +
            (C22390 * C50783 + C22389 * C50844) * C50880 +
            (C22552 * C50783 + C22551 * C50844) * C50879) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50844 +
            C22222 * C50783) *
               C50879 +
           (C31281 + C31282) * C50880 + C31293 * C24644) *
              C1713 -
          (C32829 * C24644 + (C31940 + C31941) * C50880 +
           (C22223 * C50783 + C22222 * C50844) * C50879) *
              C1714 +
          ((C22223 * C50844 + C22225 * C50783) * C50879 +
           (C32339 + C32340) * C50880 + (C32341 + C32342) * C24644) *
              C1715 -
          (((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
             C50556 * C23148) *
                C50783 +
            C23165 * C50844) *
               C24644 +
           (C23164 * C50783 + C22224 * C50844) * C50880 +
           (C24056 * C50783 + C22225 * C50844) * C50879) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C50877 -
           (C32829 * C24644 + (C31940 + C31941) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C50878 +
           ((C22223 * C50844 + C22225 * C50783) * C50879 +
            (C32339 + C32340) * C50880 + (C32341 + C32342) * C24644) *
               C1963) *
              C50605 * C50822 +
          (((C22226 * C50844 + C22227 * C50783) * C50879 +
            (C31942 + C31943) * C50880 + (C31944 + C31945) * C24644) *
               C50878 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C50877 -
           (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
              C50556 * C4517) *
                 C50783 +
             C22025 * C50844) *
                C24644 +
            (C22229 * C50783 + C22024 * C50844) * C50880 +
            (C22228 * C50783 + C22227 * C50844) * C50879) *
               C1963) *
              C50605 * C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C1547 -
           (C32829 * C24644 + (C31940 + C31941) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C50844 + C22227 * C50783) * C50879 +
            (C31942 + C31943) * C50880 + (C31944 + C31945) * C24644) *
               C50685 -
           (C31294 * C24644 + (C31288 + C31287) * C50880 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50844) *
                C50879) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50844 +
             C22551 * C50783) *
                C50879 +
            (C31587 + C31588) * C50880 + (C31589 + C31597) * C24644) *
               C1547 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C50783 +
             C31596 * C50844) *
                C24644 +
            (C22390 * C50783 + C22389 * C50844) * C50880 +
            (C22552 * C50783 + C22551 * C50844) * C50879) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50844 +
             C22222 * C50783) *
                C50879 +
            (C31281 + C31282) * C50880 + C31293 * C24644) *
               C1547 -
           (C32829 * C24644 + (C31940 + C31941) * C50880 +
            (C22223 * C50783 + C22222 * C50844) * C50879) *
               C50685) *
              C251 +
          (((C31941 + C31940) * C50879 + (C31939 + C31938) * C50880 +
            (C32830 + C32831) * C24644) *
               C50685 -
           (C32190 * C24644 + (C31284 + C31283) * C50880 +
            (C31282 + C31281) * C50879) *
               C1547) *
              C252 +
          ((C31293 * C50879 + (C31286 + C31285) * C50880 +
            (C32191 + C32192) * C24644) *
               C1547 -
           (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
              C50556 * C20802) *
                 C50783 +
             C21164 * C50844) *
                C24644 +
            (C32831 + C32830) * C50880 + C32829 * C50879) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C50830 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C50657) *
              C50873 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C50657 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C50830) *
              C50874 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C50621 * C50830 -
           ((C19865 * C2322 - C19866 * C2317 - C19865 * C2323 +
             C50556 * C2326) *
                C50719 * C19864 +
            C20249 * C19863 + C20248 * C19862 + C20247 * C19861) *
               C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C50830 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C50657) *
              C50873 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C50657 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C50830) *
              C50874 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C50621 * C50830 -
           ((C17052 * C284 - C17053 * C265 - C17052 * C285 + C17045 * C295 +
             C17050 * C280 - C17051 * C263 - C17050 * C281 + C17044 * C293 +
             C17048 * C278 - C17049 * C262 - C17048 * C279 + C17043 * C292) *
                C50719 * C50757 +
            (C17597 + C17596 + C17595) * C50719 * C17046) *
               C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50621 * C50830 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C50621 * C50657) *
              C50873 +
          (((C22008 + C22009 + C22026) * C17046 +
            (C22014 + C22015 + C22027) * C50757) *
               C50621 * C50657 -
           ((C22026 + C22009 + C22008) * C50757 +
            (C22227 * C5107 + C22226 * C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C50621 * C50830) *
              C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C5105 +
             (C19865 * C409 - C19866 * C398 - C19865 * C410 + C50556 * C428) *
                 C5106 +
             (C19865 * C419 - C19866 * C403 - C19865 * C420 + C50556 * C433) *
                 C5107) *
                C17046 +
            (C22376 + C22391 + C22392) * C50757) *
               C50621 * C50830 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C5107 +
             (C19865 * C1439 - C19866 * C1434 - C19865 * C1440 +
              C50556 * C1446) *
                 C5106 +
             C20245 * C5105) *
                C50757 +
            (C22392 + C22391 + C22376) * C17046) *
               C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50719 * C19861 +
             C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
                C50831 -
            (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
             (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                 C50719 * C19861) *
                C50685) *
               C50830 +
           ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
             (C19865 * C4095 - C19866 * C4092 - C19865 * C4096 +
              C50556 * C4098) *
                 C50719 * C19864) *
                C50685 -
            (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
             C20022 * C19861) *
                C50831) *
               C50657) *
              C254 +
          ((((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                 C50719 * C19861 +
             C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
                C50685 -
            (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50719 * C19861) *
                C50831) *
               C50830 +
           ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
             C20029 * C19864) *
                C50831 -
            ((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50719 * C19864 +
             C20525 * C19863 + C20524 * C19862 + C20523 * C19861) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C50719 * C17046 +
             (C17273 + C17274 + C17275) * C50719 * C50757) *
                C50831 -
            ((C17974 + C17975 + C17976) * C50719 * C50757 +
             (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
              C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
              C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                 C50719 * C17046) *
                C50685) *
               C50830 +
           (((C17976 + C17975 + C17974) * C50719 * C17046 +
             (C17048 * C1443 - C17049 * C1436 - C17048 * C1444 +
              C17043 * C1448 + C17050 * C1441 - C17051 * C1435 -
              C17050 * C1442 + C17044 * C1447 + C17052 * C1439 -
              C17053 * C1434 - C17052 * C1440 + C17045 * C1446) *
                 C50719 * C50757) *
                C50685 -
            ((C17276 + C17277 + C17278) * C50719 * C50757 +
             (C17275 + C17274 + C17273) * C50719 * C17046) *
                C50831) *
               C50657) *
              C254 +
          ((((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
              C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
              C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                 C50719 * C17046 +
             (C17977 + C17978 + C17979) * C50719 * C50757) *
                C50685 -
            ((C17281 + C17280 + C17279) * C50719 * C50757 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C50719 * C17046) *
                C50831) *
               C50830 +
           (((C17279 + C17280 + C17281) * C50719 * C17046 +
             (C17282 + C17283 + C17284) * C50719 * C50757) *
                C50831 -
            ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 +
              C17045 * C1445 + C17050 * C1439 - C17051 * C1434 -
              C17050 * C1440 + C17044 * C1446 + C17048 * C1441 -
              C17049 * C1435 - C17048 * C1442 + C17043 * C1447) *
                 C50719 * C50757 +
             (C17979 + C17978 + C17977) * C50719 * C17046) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C5105 +
              C22222 * C5106 + C22223 * C5107) *
                 C17046 +
             (C22002 + C22003 + C22004) * C50757) *
                C50831 -
            ((C22747 + C22748 + C22749) * C50757 +
             (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
                C50685) *
               C50830 +
           (((C22749 + C22748 + C22747) * C17046 +
             (C20515 * C5105 + C20823 * C5106 +
              (C19865 * C4511 - C19866 * C4506 - C19865 * C4512 +
               C50556 * C4518) *
                  C5107) *
                 C50757) *
                C50685 -
            ((C22005 + C22006 + C22007) * C50757 +
             (C22004 + C22003 + C22002) * C17046) *
                C50831) *
               C50657) *
              C254 +
          ((((C22226 * C5105 + C22227 * C5106 + C22228 * C5107) * C17046 +
             (C22750 + C22751 + C22752) * C50757) *
                C50685 -
            ((C22026 + C22009 + C22008) * C50757 +
             (C22227 * C5107 + C22226 * C5106 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C5105) *
                 C17046) *
                C50831) *
               C50830 +
           (((C22008 + C22009 + C22026) * C17046 +
             (C22014 + C22015 + C22027) * C50757) *
                C50831 -
            (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
               C50556 * C4517) *
                  C5107 +
              C22025 * C5106 + C20518 * C5105) *
                 C50757 +
             (C22752 + C22751 + C22750) * C17046) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                   C50719 * C17046 +
               (C17048 * C272 - C17049 * C259 - C17048 * C273 + C17043 * C289 +
                C17050 * C270 - C17051 * C258 - C17050 * C271 + C17044 * C288 +
                C17052 * C268 - C17053 * C257 - C17052 * C269 + C17045 * C287) *
                   C50719 * C50757) *
                  C50621 * C50605 * C113 -
              ((C17052 * C266 - C17053 * C256 - C17052 * C267 + C17045 * C286 +
                C17050 * C268 - C17051 * C257 - C17050 * C269 + C17044 * C287 +
                C17048 * C270 - C17049 * C258 - C17048 * C271 + C17043 * C288) *
                   C50719 * C50757 +
               (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
                C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
                C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                   C50719 * C17046) *
                  C50621 * C50605 * C114 +
              ((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
                C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
                C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                   C50719 * C17046 +
               (C17048 * C268 - C17049 * C257 - C17048 * C269 + C17043 * C287 +
                C17050 * C266 - C17051 * C256 - C17050 * C267 + C17044 * C286 +
                C17052 * C282 - C17053 * C264 - C17052 * C283 + C17045 * C294) *
                   C50719 * C50757) *
                  C50621 * C50605 * C115 -
              ((C17052 * C541 - C17053 * C540 - C17052 * C542 + C17045 * C543 +
                C17050 * C282 - C17051 * C264 - C17050 * C283 + C17044 * C294 +
                C17048 * C266 - C17049 * C256 - C17048 * C267 + C17043 * C286) *
                   C50719 * C50757 +
               (C17052 * C142 - C17053 * C130 - C17052 * C143 + C17045 * C151 +
                C17050 * C140 - C17051 * C129 - C17050 * C141 + C17044 * C150 +
                C17048 * C138 - C17049 * C128 - C17048 * C139 + C17043 * C149) *
                   C50719 * C17046) *
                  C50621 * C50605 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                 C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                 C17052 * C136 - C17053 * C127 - C17052 * C137 +
                 C17045 * C148) *
                    C50719 * C17046 +
                (C17273 + C17274 + C17275) * C50719 * C50757) *
                   C50621 * C251 -
               ((C17276 + C17277 + C17278) * C50719 * C50757 +
                (C17275 + C17274 + C17273) * C50719 * C17046) *
                   C50621 * C252 +
               ((C17278 + C17277 + C17276) * C50719 * C17046 +
                (C17048 * C982 - C17049 * C975 - C17048 * C983 + C17043 * C987 +
                 C17050 * C980 - C17051 * C974 - C17050 * C981 + C17044 * C986 +
                 C17052 * C978 - C17053 * C973 - C17052 * C979 +
                 C17045 * C985) *
                    C50719 * C50757) *
                   C50621 * C253) *
                  C254 +
              (((C17279 + C17280 + C17281) * C50719 * C17046 +
                (C17282 + C17283 + C17284) * C50719 * C50757) *
                   C50621 * C252 -
               ((C17281 + C17280 + C17279) * C50719 * C50757 +
                (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
                 C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
                 C17048 * C134 - C17049 * C126 - C17048 * C135 +
                 C17043 * C147) *
                    C50719 * C17046) *
                   C50621 * C251 -
               ((C17052 * C976 - C17053 * C972 - C17052 * C977 + C17045 * C984 +
                 C17050 * C978 - C17051 * C973 - C17050 * C979 + C17044 * C985 +
                 C17048 * C980 - C17049 * C974 - C17048 * C981 +
                 C17043 * C986) *
                    C50719 * C50757 +
                (C17284 + C17283 + C17282) * C50719 * C17046) *
                   C50621 * C253) *
                  C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C394 -
           ((C17052 * C787 - C17053 * C780 - C17052 * C788 + C17045 * C795 +
             C17050 * C785 - C17051 * C779 - C17050 * C786 + C17044 * C794 +
             C17048 * C783 - C17049 * C778 - C17048 * C784 + C17043 * C793) *
                C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C395 +
           ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
             C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
             C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
                C50719 * C17046 +
            (C17048 * C1096 - C17049 * C1089 - C17048 * C1097 + C17043 * C1101 +
             C17050 * C1094 - C17051 * C1088 - C17050 * C1095 + C17044 * C1100 +
             C17052 * C1092 - C17053 * C1087 - C17052 * C1093 +
             C17045 * C1099) *
                C50719 * C50757) *
               C396) *
              C50605 * C254 +
          (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                C50719 * C17046 +
            (C17048 * C785 - C17049 * C779 - C17048 * C786 + C17043 * C794 +
             C17050 * C787 - C17051 * C780 - C17050 * C788 + C17044 * C795 +
             C17052 * C789 - C17053 * C781 - C17052 * C790 + C17045 * C796) *
                C50719 * C50757) *
               C395 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C394 -
           ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 + C17045 * C1098 +
             C17050 * C1092 - C17051 * C1087 - C17050 * C1093 + C17044 * C1099 +
             C17048 * C1094 - C17049 * C1088 - C17048 * C1095 +
             C17043 * C1100) *
                C50719 * C50757 +
            (C17052 * C421 - C17053 * C404 - C17052 * C422 + C17045 * C434 +
             C17050 * C419 - C17051 * C403 - C17050 * C420 + C17044 * C433 +
             C17048 * C417 - C17049 * C402 - C17048 * C418 + C17043 * C432) *
                C50719 * C17046) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           (C19865 * C272 - C19866 * C259 - C19865 * C273 + C50556 * C289) *
               C50719 * C19862 +
           (C19865 * C274 - C19866 * C260 - C19865 * C275 + C50556 * C290) *
               C50719 * C19863 +
           (C19865 * C982 - C19866 * C975 - C19865 * C983 + C50556 * C987) *
               C50719 * C19864) *
              C50621 * C50605 * C113 -
          ((C19865 * C980 - C19866 * C974 - C19865 * C981 + C50556 * C986) *
               C50719 * C19864 +
           (C19865 * C276 - C19866 * C261 - C19865 * C277 + C50556 * C291) *
               C50719 * C19863 +
           (C19865 * C270 - C19866 * C258 - C19865 * C271 + C50556 * C288) *
               C50719 * C19862 +
           (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
               C50719 * C19861) *
              C50621 * C50605 * C114 +
          ((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
               C50719 * C19861 +
           (C19865 * C268 - C19866 * C257 - C19865 * C269 + C50556 * C287) *
               C50719 * C19862 +
           (C19865 * C278 - C19866 * C262 - C19865 * C279 + C50556 * C292) *
               C50719 * C19863 +
           (C19865 * C978 - C19866 * C973 - C19865 * C979 + C50556 * C985) *
               C50719 * C19864) *
              C50621 * C50605 * C115 -
          ((C19865 * C976 - C19866 * C972 - C19865 * C977 + C50556 * C984) *
               C50719 * C19864 +
           (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
               C50719 * C19863 +
           (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
               C50719 * C19862 +
           (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
               C50719 * C19861) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C251 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C252 +
           (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            (C19865 * C3403 - C19866 * C3400 - C19865 * C3404 +
             C50556 * C3406) *
                C50719 * C19864) *
               C50621 * C253) *
              C254 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C252 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C251 -
           ((C19865 * C3401 - C19866 * C3399 - C19865 * C3402 +
             C50556 * C3405) *
                C50719 * C19864 +
            C20029 * C19863 + C20028 * C19862 + C20027 * C19861) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C394 -
           ((C19865 * C3090 - C19866 * C3087 - C19865 * C3091 +
             C50556 * C3096) *
                C50719 * C19864 +
            (C19865 * C1443 - C19866 * C1436 - C19865 * C1444 +
             C50556 * C1448) *
                C50719 * C19863 +
            (C19865 * C783 - C19866 * C778 - C19865 * C784 + C50556 * C793) *
                C50719 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C395 +
           ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C50719 * C19861 +
            (C19865 * C1096 - C19866 * C1089 - C19865 * C1097 +
             C50556 * C1101) *
                C50719 * C19862 +
            (C19865 * C2564 - C19866 * C2561 - C19865 * C2565 +
             C50556 * C2570) *
                C50719 * C19863 +
            (C19865 * C3573 - C19866 * C3570 - C19865 * C3574 +
             C50556 * C3576) *
                C50719 * C19864) *
               C396) *
              C50605 * C254 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            (C19865 * C785 - C19866 * C779 - C19865 * C786 + C50556 * C794) *
                C50719 * C19862 +
            (C19865 * C1441 - C19866 * C1435 - C19865 * C1442 +
             C50556 * C1447) *
                C50719 * C19863 +
            (C19865 * C3092 - C19866 * C3088 - C19865 * C3093 +
             C50556 * C3097) *
                C50719 * C19864) *
               C395 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C394 -
           ((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
             C50556 * C3575) *
                C50719 * C19864 +
            (C19865 * C2566 - C19866 * C2562 - C19865 * C2567 +
             C50556 * C2571) *
                C50719 * C19863 +
            (C19865 * C1094 - C19866 * C1088 - C19865 * C1095 +
             C50556 * C1100) *
                C50719 * C19862 +
            (C19865 * C417 - C19866 * C402 - C19865 * C418 + C50556 * C432) *
                C50719 * C19861) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C5105 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C5106 +
            (C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C5107) *
               C17046 +
           (C20014 * C5105 + C20516 * C5106 + C20822 * C5107) * C50757) *
              C50621 * C50605 * C113 -
          (((C19865 * C1094 - C19866 * C1088 - C19865 * C1095 +
             C50556 * C1100) *
                C5107 +
            C20517 * C5106 + C20018 * C5105) *
               C50757 +
           ((C19865 * C417 - C19866 * C402 - C19865 * C418 + C50556 * C432) *
                C5107 +
            (C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C5106 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C5105) *
               C17046) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C5105 +
            (C19865 * C409 - C19866 * C398 - C19865 * C410 + C50556 * C428) *
                C5106 +
            (C19865 * C419 - C19866 * C403 - C19865 * C420 + C50556 * C433) *
                C5107) *
               C17046 +
           (C20244 * C5105 +
            (C19865 * C787 - C19866 * C780 - C19865 * C788 + C50556 * C795) *
                C5106 +
            (C19865 * C1092 - C19866 * C1087 - C19865 * C1093 +
             C50556 * C1099) *
                C5107) *
               C50757) *
              C50621 * C50605 * C115 -
          (((C19865 * C1090 - C19866 * C1086 - C19865 * C1091 +
             C50556 * C1098) *
                C5107 +
            (C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C5106 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C5105) *
               C50757 +
           ((C19865 * C421 - C19866 * C404 - C19865 * C422 + C50556 * C434) *
                C5107 +
            (C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C5106 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C5105) *
               C17046) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                 C5106 +
             (C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                 C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50621 * C251 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C50621 * C252 +
           ((C22007 + C22006 + C22005) * C17046 +
            (C20016 * C5105 + C20514 * C5106 + C20824 * C5107) * C50757) *
               C50621 * C253) *
              C254 +
          (((C22008 + C22009 + C22026) * C17046 +
            (C22014 + C22015 + C22027) * C50757) *
               C50621 * C252 -
           ((C22026 + C22009 + C22008) * C50757 +
            ((C19865 * C417 - C19866 * C402 - C19865 * C418 + C50556 * C432) *
                 C5107 +
             (C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                 C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C50621 * C251 -
           (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
              C50556 * C3575) *
                 C5107 +
             C20519 * C5106 + C20020 * C5105) *
                C50757 +
            (C22027 + C22015 + C22014) * C17046) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C394 -
           ((C22224 * C5107 + C20822 * C5106 + C20516 * C5105) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C395 +
           ((C22223 * C5105 + C22225 * C5106 +
             (C19865 * C5403 - C19866 * C5400 - C19865 * C5404 +
              C50556 * C5409) *
                 C5107) *
                C17046 +
            (C20822 * C5105 + C22224 * C5106 +
             (C19865 * C6424 - C19866 * C6421 - C19865 * C6425 +
              C50556 * C6427) *
                 C5107) *
                C50757) *
               C396) *
              C50605 * C254 +
          (((C22226 * C5105 + C22227 * C5106 + C22228 * C5107) * C17046 +
            (C20517 * C5105 + C22024 * C5106 + C22229 * C5107) * C50757) *
               C395 -
           ((C22026 + C22009 + C22008) * C50757 +
            (C22227 * C5107 + C22226 * C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C394 -
           (((C19865 * C6422 - C19866 * C6420 - C19865 * C6423 +
              C50556 * C6426) *
                 C5107 +
             C22229 * C5106 + C22024 * C5105) *
                C50757 +
            ((C19865 * C5405 - C19866 * C5401 - C19865 * C5406 +
              C50556 * C5410) *
                 C5107 +
             C22228 * C5106 + C22227 * C5105) *
                C17046) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50831 -
           ((C19865 * C3090 - C19866 * C3087 - C19865 * C3091 +
             C50556 * C3096) *
                C50719 * C19864 +
            (C19865 * C1443 - C19866 * C1436 - C19865 * C1444 +
             C50556 * C1448) *
                C50719 * C19863 +
            (C19865 * C783 - C19866 * C778 - C19865 * C784 + C50556 * C793) *
                C50719 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C50605 * C50873 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            (C19865 * C785 - C19866 * C779 - C19865 * C786 + C50556 * C794) *
                C50719 * C19862 +
            (C19865 * C1441 - C19866 * C1435 - C19865 * C1442 +
             C50556 * C1447) *
                C50719 * C19863 +
            (C19865 * C3092 - C19866 * C3088 - C19865 * C3093 +
             C50556 * C3097) *
                C50719 * C19864) *
               C50685 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50831) *
              C50605 * C50874 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C50831 -
           ((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
             C50556 * C3098) *
                C50719 * C19864 +
            (C19865 * C1439 - C19866 * C1434 - C19865 * C1440 +
             C50556 * C1446) *
                C50719 * C19863 +
            (C19865 * C787 - C19866 * C780 - C19865 * C788 + C50556 * C795) *
                C50719 * C19862 +
            (C19865 * C409 - C19866 * C398 - C19865 * C410 + C50556 * C428) *
                C50719 * C19861) *
               C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50831 -
           ((C17052 * C787 - C17053 * C780 - C17052 * C788 + C17045 * C795 +
             C17050 * C785 - C17051 * C779 - C17050 * C786 + C17044 * C794 +
             C17048 * C783 - C17049 * C778 - C17048 * C784 + C17043 * C793) *
                C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C50605 * C50873 +
          (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                C50719 * C17046 +
            (C17048 * C785 - C17049 * C779 - C17048 * C786 + C17043 * C794 +
             C17050 * C787 - C17051 * C780 - C17050 * C788 + C17044 * C795 +
             C17052 * C789 - C17053 * C781 - C17052 * C790 + C17045 * C796) *
                C50719 * C50757) *
               C50685 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50831) *
              C50605 * C50874 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C50831 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50719 * C50757 +
            (C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435 +
             C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
             C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428) *
                C50719 * C17046) *
               C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50831 -
           ((C22224 * C5107 + C20822 * C5106 + C20516 * C5105) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C50685) *
              C50605 * C50873 +
          (((C22226 * C5105 + C22227 * C5106 + C22228 * C5107) * C17046 +
            (C20517 * C5105 + C22024 * C5106 + C22229 * C5107) * C50757) *
               C50685 -
           ((C22026 + C22009 + C22008) * C50757 +
            (C22227 * C5107 + C22226 * C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C50831) *
              C50605 * C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C5105 +
             C22551 * C5106 + C22552 * C5107) *
                C17046 +
            (C22376 + C22391 + C22392) * C50757) *
               C50831 -
           (((C19865 * C6013 - C19866 * C6012 - C19865 * C6014 +
              C50556 * C6015) *
                 C5107 +
             C22390 * C5106 + C22389 * C5105) *
                C50757 +
            ((C19865 * C1723 - C19866 * C1718 - C19865 * C1724 +
              C50556 * C1730) *
                 C5107 +
             C22552 * C5106 + C22551 * C5105) *
                C17046) *
               C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C251 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C252 +
           ((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C17048 * C982 - C17049 * C975 - C17048 * C983 + C17043 * C987 +
             C17050 * C980 - C17051 * C974 - C17050 * C981 + C17044 * C986 +
             C17052 * C978 - C17053 * C973 - C17052 * C979 + C17045 * C985) *
                C50719 * C50757) *
               C50621 * C253) *
              C254 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C252 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C251 -
           ((C17052 * C976 - C17053 * C972 - C17052 * C977 + C17045 * C984 +
             C17050 * C978 - C17051 * C973 - C17050 * C979 + C17044 * C985 +
             C17048 * C980 - C17049 * C974 - C17048 * C981 + C17043 * C986) *
                C50719 * C50757 +
            (C17284 + C17283 + C17282) * C50719 * C17046) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C50719 * C17046 +
           (C17048 * C272 - C17049 * C259 - C17048 * C273 + C17043 * C289 +
            C17050 * C270 - C17051 * C258 - C17050 * C271 + C17044 * C288 +
            C17052 * C268 - C17053 * C257 - C17052 * C269 + C17045 * C287) *
               C50719 * C50757) *
              C50621 * C50605 * C113 -
          ((C17052 * C266 - C17053 * C256 - C17052 * C267 + C17045 * C286 +
            C17050 * C268 - C17051 * C257 - C17050 * C269 + C17044 * C287 +
            C17048 * C270 - C17049 * C258 - C17048 * C271 + C17043 * C288) *
               C50719 * C50757 +
           (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
            C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
            C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
               C50719 * C17046) *
              C50621 * C50605 * C114 +
          ((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
            C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
            C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
               C50719 * C17046 +
           (C17048 * C268 - C17049 * C257 - C17048 * C269 + C17043 * C287 +
            C17050 * C266 - C17051 * C256 - C17050 * C267 + C17044 * C286 +
            C17052 * C282 - C17053 * C264 - C17052 * C283 + C17045 * C294) *
               C50719 * C50757) *
              C50621 * C50605 * C115 -
          ((C17052 * C541 - C17053 * C540 - C17052 * C542 + C17045 * C543 +
            C17050 * C282 - C17051 * C264 - C17050 * C283 + C17044 * C294 +
            C17048 * C266 - C17049 * C256 - C17048 * C267 + C17043 * C286) *
               C50719 * C50757 +
           (C17052 * C142 - C17053 * C130 - C17052 * C143 + C17045 * C151 +
            C17050 * C140 - C17051 * C129 - C17050 * C141 + C17044 * C150 +
            C17048 * C138 - C17049 * C128 - C17048 * C139 + C17043 * C149) *
               C50719 * C17046) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           (C19865 * C272 - C19866 * C259 - C19865 * C273 + C50556 * C289) *
               C50719 * C19862 +
           (C19865 * C274 - C19866 * C260 - C19865 * C275 + C50556 * C290) *
               C50719 * C19863 +
           (C19865 * C982 - C19866 * C975 - C19865 * C983 + C50556 * C987) *
               C50719 * C19864) *
              C50621 * C50605 * C113 -
          ((C19865 * C980 - C19866 * C974 - C19865 * C981 + C50556 * C986) *
               C50719 * C19864 +
           (C19865 * C276 - C19866 * C261 - C19865 * C277 + C50556 * C291) *
               C50719 * C19863 +
           (C19865 * C270 - C19866 * C258 - C19865 * C271 + C50556 * C288) *
               C50719 * C19862 +
           (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
               C50719 * C19861) *
              C50621 * C50605 * C114 +
          ((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
               C50719 * C19861 +
           (C19865 * C268 - C19866 * C257 - C19865 * C269 + C50556 * C287) *
               C50719 * C19862 +
           (C19865 * C278 - C19866 * C262 - C19865 * C279 + C50556 * C292) *
               C50719 * C19863 +
           (C19865 * C978 - C19866 * C973 - C19865 * C979 + C50556 * C985) *
               C50719 * C19864) *
              C50621 * C50605 * C115 -
          ((C19865 * C976 - C19866 * C972 - C19865 * C977 + C50556 * C984) *
               C50719 * C19864 +
           (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
               C50719 * C19863 +
           (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
               C50719 * C19862 +
           (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
               C50719 * C19861) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C251 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C252 +
           (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            (C19865 * C3403 - C19866 * C3400 - C19865 * C3404 +
             C50556 * C3406) *
                C50719 * C19864) *
               C50621 * C253) *
              C254 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C252 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C251 -
           ((C19865 * C3401 - C19866 * C3399 - C19865 * C3402 +
             C50556 * C3405) *
                C50719 * C19864 +
            C20029 * C19863 + C20028 * C19862 + C20027 * C19861) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C5105 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C5106 +
            (C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C5107) *
               C17046 +
           (C20014 * C5105 + C20516 * C5106 + C20822 * C5107) * C50757) *
              C50621 * C50605 * C113 -
          (((C19865 * C1094 - C19866 * C1088 - C19865 * C1095 +
             C50556 * C1100) *
                C5107 +
            C20517 * C5106 + C20018 * C5105) *
               C50757 +
           ((C19865 * C417 - C19866 * C402 - C19865 * C418 + C50556 * C432) *
                C5107 +
            (C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C5106 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C5105) *
               C17046) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C5105 +
            (C19865 * C409 - C19866 * C398 - C19865 * C410 + C50556 * C428) *
                C5106 +
            (C19865 * C419 - C19866 * C403 - C19865 * C420 + C50556 * C433) *
                C5107) *
               C17046 +
           (C20244 * C5105 +
            (C19865 * C787 - C19866 * C780 - C19865 * C788 + C50556 * C795) *
                C5106 +
            (C19865 * C1092 - C19866 * C1087 - C19865 * C1093 +
             C50556 * C1099) *
                C5107) *
               C50757) *
              C50621 * C50605 * C115 -
          (((C19865 * C1090 - C19866 * C1086 - C19865 * C1091 +
             C50556 * C1098) *
                C5107 +
            (C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C5106 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C5105) *
               C50757 +
           ((C19865 * C421 - C19866 * C404 - C19865 * C422 + C50556 * C434) *
                C5107 +
            (C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C5106 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C5105) *
               C17046) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                 C5106 +
             (C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                 C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50621 * C251 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C50621 * C252 +
           ((C22007 + C22006 + C22005) * C17046 +
            (C20016 * C5105 + C20514 * C5106 + C20824 * C5107) * C50757) *
               C50621 * C253) *
              C254 +
          (((C22008 + C22009 + C22026) * C17046 +
            (C22014 + C22015 + C22027) * C50757) *
               C50621 * C252 -
           ((C22026 + C22009 + C22008) * C50757 +
            ((C19865 * C417 - C19866 * C402 - C19865 * C418 + C50556 * C432) *
                 C5107 +
             (C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                 C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C50621 * C251 -
           (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
              C50556 * C3575) *
                 C5107 +
             C20519 * C5106 + C20020 * C5105) *
                C50757 +
            (C22027 + C22015 + C22014) * C17046) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C50875 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C50876 +
           (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            C20701 * C19864) *
               C50621 * C1202) *
              C50822 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C50876 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C50875 -
           ((C19865 * C3401 - C19866 * C3399 - C19865 * C3402 +
             C50556 * C3405) *
                C50719 * C19864 +
            C20029 * C19863 + C20028 * C19862 + C20027 * C19861) *
               C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C50875 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C50876 +
           ((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C18242 + C18243 + C18244) * C50719 * C50757) *
               C50621 * C1202) *
              C50822 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C50876 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C50875 -
           ((C17052 * C976 - C17053 * C972 - C17052 * C977 + C17045 * C984 +
             C17050 * C978 - C17051 * C973 - C17050 * C979 + C17044 * C985 +
             C17048 * C980 - C17049 * C974 - C17048 * C981 + C17043 * C986) *
                C50719 * C50757 +
            (C17284 + C17283 + C17282) * C50719 * C17046) *
               C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50621 * C50875 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C50621 * C50876 +
           ((C22007 + C22006 + C22005) * C17046 +
            (C22997 + C22998 + C22999) * C50757) *
               C50621 * C1202) *
              C50822 +
          (((C22008 + C22009 + C22026) * C17046 +
            (C22014 + C22015 + C22027) * C50757) *
               C50621 * C50876 -
           ((C22026 + C22009 + C22008) * C50757 +
            (C22227 * C5107 + C22226 * C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C50621 * C50875 -
           (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
              C50556 * C3575) *
                 C5107 +
             C20519 * C5106 + C20020 * C5105) *
                C50757 +
            (C22027 + C22015 + C22014) * C17046) *
               C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50831 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C50875 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            C21165 * C19864) *
               C50685 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50831) *
              C50876 +
          ((C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            C20701 * C19864) *
               C50831 -
           ((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50719 * C19864 +
            C21165 * C19863 + C20520 * C19862 + C20521 * C19861) *
               C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50831 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C50875 +
          (((C17976 + C17975 + C17974) * C50719 * C17046 +
            (C18916 + C18917 + C18918) * C50719 * C50757) *
               C50685 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50831) *
              C50876 +
          (((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C18242 + C18243 + C18244) * C50719 * C50757) *
               C50831 -
           ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 + C17045 * C3098 +
             C17050 * C3092 - C17051 * C3088 - C17050 * C3093 + C17044 * C3097 +
             C17048 * C3090 - C17049 * C3087 - C17048 * C3091 +
             C17043 * C3096) *
                C50719 * C50757 +
            (C18918 + C18917 + C18916) * C50719 * C17046) *
               C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50831 -
           ((C22747 + C22748 + C22749) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C50685) *
              C50875 +
          (((C22749 + C22748 + C22747) * C17046 +
            (C23653 + C23654 + C23655) * C50757) *
               C50685 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C50831) *
              C50876 +
          (((C22007 + C22006 + C22005) * C17046 +
            (C22997 + C22998 + C22999) * C50757) *
               C50831 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C5107 +
             C20824 * C5106 + C20514 * C5105) *
                C50757 +
            (C23655 + C23654 + C23653) * C17046) *
               C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                 C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                 C17052 * C136 - C17053 * C127 - C17052 * C137 +
                 C17045 * C148) *
                    C50719 * C17046 +
                (C17273 + C17274 + C17275) * C50719 * C50757) *
                   C50621 * C896 -
               ((C17276 + C17277 + C17278) * C50719 * C50757 +
                (C17275 + C17274 + C17273) * C50719 * C17046) *
                   C50621 * C50657) *
                  C898 +
              (((C17279 + C17280 + C17281) * C50719 * C17046 +
                (C17282 + C17283 + C17284) * C50719 * C50757) *
                   C50621 * C50657 -
               ((C17281 + C17280 + C17279) * C50719 * C50757 +
                (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
                 C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
                 C17048 * C134 - C17049 * C126 - C17048 * C135 +
                 C17043 * C147) *
                    C50719 * C17046) *
                   C50621 * C896) *
                  C899 +
              (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
                 C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
                 C17052 * C140 - C17053 * C129 - C17052 * C141 +
                 C17045 * C150) *
                    C50719 * C17046 +
                (C17595 + C17596 + C17597) * C50719 * C50757) *
                   C50621 * C896 -
               ((C17052 * C284 - C17053 * C265 - C17052 * C285 + C17045 * C295 +
                 C17050 * C280 - C17051 * C263 - C17050 * C281 + C17044 * C293 +
                 C17048 * C278 - C17049 * C262 - C17048 * C279 +
                 C17043 * C292) *
                    C50719 * C50757 +
                (C17597 + C17596 + C17595) * C50719 * C17046) *
                   C50621 * C50657) *
                  C900) +
         0.5 * std::pow(Pi, 2.5) *
             (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                   C50719 * C17046 +
               (C17273 + C17274 + C17275) * C50719 * C50757) *
                  C50621 * C967 -
              ((C17276 + C17277 + C17278) * C50719 * C50757 +
               (C17275 + C17274 + C17273) * C50719 * C17046) *
                  C50621 * C968 +
              ((C17278 + C17277 + C17276) * C50719 * C17046 +
               (C18242 + C18243 + C18244) * C50719 * C50757) *
                  C50621 * C969 -
              ((C17052 * C2322 - C17053 * C2317 - C17052 * C2323 +
                C17045 * C2326 + C17050 * C2320 - C17051 * C2316 -
                C17050 * C2321 + C17044 * C2325 + C17048 * C2318 -
                C17049 * C2315 - C17048 * C2319 + C17043 * C2324) *
                   C50719 * C50757 +
               (C18244 + C18243 + C18242) * C50719 * C17046) *
                  C50621 * C970) *
             C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C394 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C395 +
           ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
             C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
             C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
                C50719 * C17046 +
            (C18409 + C18410 + C18411) * C50719 * C50757) *
               C396) *
              C896 +
          (((C17976 + C17975 + C17974) * C50719 * C17046 +
            (C17048 * C1443 - C17049 * C1436 - C17048 * C1444 + C17043 * C1448 +
             C17050 * C1441 - C17051 * C1435 - C17050 * C1442 + C17044 * C1447 +
             C17052 * C1439 - C17053 * C1434 - C17052 * C1440 +
             C17045 * C1446) *
                C50719 * C50757) *
               C395 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C394 -
           ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 + C17045 * C2572 +
             C17050 * C2566 - C17051 * C2562 - C17050 * C2567 + C17044 * C2571 +
             C17048 * C2564 - C17049 * C2561 - C17048 * C2565 +
             C17043 * C2570) *
                C50719 * C50757 +
            (C18411 + C18410 + C18409) * C50719 * C17046) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C896 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C50657) *
              C898 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C50657 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C896) *
              C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C50621 * C896 -
           ((C19865 * C2322 - C19866 * C2317 - C19865 * C2323 +
             C50556 * C2326) *
                C50719 * C19864 +
            C20249 * C19863 + C20248 * C19862 + C20247 * C19861) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
              C50621 * C967 -
          (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
           C20022 * C19861) *
              C50621 * C968 +
          (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
           C20701 * C19864) *
              C50621 * C969 -
          ((C19865 * C20690 - C19866 * C20689 - C19865 * C20691 +
            C50556 * C20692) *
               C50719 * C19864 +
           C20701 * C19863 + C20025 * C19862 + C20024 * C19861) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C394 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C395 +
           ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C50719 * C19861 +
            C20825 * C19862 + C20826 * C19863 + C20827 * C19864) *
               C396) *
              C896 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            (C19865 * C4095 - C19866 * C4092 - C19865 * C4096 +
             C50556 * C4098) *
                C50719 * C19864) *
               C395 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C394 -
           ((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
             C50556 * C20802) *
                C50719 * C19864 +
            C20827 * C19863 + C20826 * C19862 + C20825 * C19861) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50621 * C896 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C50621 * C50657) *
              C898 +
          (((C22008 + C22009 + C22026) * C17046 +
            (C22014 + C22015 + C22027) * C50757) *
               C50621 * C50657 -
           ((C22026 + C22009 + C22008) * C50757 +
            (C22227 * C5107 + C22226 * C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C5105 +
             C22551 * C5106 + C22552 * C5107) *
                C17046 +
            (C22376 + C22391 + C22392) * C50757) *
               C50621 * C896 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C5107 +
             (C19865 * C1439 - C19866 * C1434 - C19865 * C1440 +
              C50556 * C1446) *
                 C5106 +
             C20245 * C5105) *
                C50757 +
            (C22392 + C22391 + C22376) * C17046) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C5105 +
            C22222 * C5106 + C22223 * C5107) *
               C17046 +
           (C22002 + C22003 + C22004) * C50757) *
              C50621 * C967 -
          ((C22005 + C22006 + C22007) * C50757 +
           (C22004 + C22003 + C22002) * C17046) *
              C50621 * C968 +
          ((C22007 + C22006 + C22005) * C17046 +
           (C22997 + C22998 + C22999) * C50757) *
              C50621 * C969 -
          (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
             C50556 * C20802) *
                C5107 +
            C21164 * C5106 + C20017 * C5105) *
               C50757 +
           (C22999 + C22998 + C22997) * C17046) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C394 -
           ((C22747 + C22748 + C22749) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C395 +
           ((C22223 * C5105 + C22225 * C5106 +
             (C19865 * C5403 - C19866 * C5400 - C19865 * C5404 +
              C50556 * C5409) *
                 C5107) *
                C17046 +
            (C23150 + C23151 + C23166) * C50757) *
               C396) *
              C896 +
          (((C22749 + C22748 + C22747) * C17046 +
            (C20515 * C5105 + C20823 * C5106 + C23165 * C5107) * C50757) *
               C395 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C394 -
           (((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
              C50556 * C23148) *
                 C5107 +
             C23165 * C5106 + C20823 * C5105) *
                C50757 +
            (C23166 + C23151 + C23150) * C17046) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50719 * C19861 +
             C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
                C50831 -
            (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
             (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                 C50719 * C19861) *
                C50685) *
               C896 +
           ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
             (C19865 * C4095 - C19866 * C4092 - C19865 * C4096 +
              C50556 * C4098) *
                 C50719 * C19864) *
                C50685 -
            (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
             C20022 * C19861) *
                C50831) *
               C50657) *
              C50822 +
          ((((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                 C50719 * C19861 +
             C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
                C50685 -
            (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50719 * C19861) *
                C50831) *
               C896 +
           ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
             C20029 * C19864) *
                C50831 -
            ((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50719 * C19864 +
             C20525 * C19863 + C20524 * C19862 + C20523 * C19861) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C50719 * C17046 +
             (C17273 + C17274 + C17275) * C50719 * C50757) *
                C50831 -
            ((C17974 + C17975 + C17976) * C50719 * C50757 +
             (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
              C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
              C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                 C50719 * C17046) *
                C50685) *
               C896 +
           (((C17976 + C17975 + C17974) * C50719 * C17046 +
             (C17048 * C1443 - C17049 * C1436 - C17048 * C1444 +
              C17043 * C1448 + C17050 * C1441 - C17051 * C1435 -
              C17050 * C1442 + C17044 * C1447 + C17052 * C1439 -
              C17053 * C1434 - C17052 * C1440 + C17045 * C1446) *
                 C50719 * C50757) *
                C50685 -
            ((C17276 + C17277 + C17278) * C50719 * C50757 +
             (C17275 + C17274 + C17273) * C50719 * C17046) *
                C50831) *
               C50657) *
              C50822 +
          ((((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
              C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
              C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                 C50719 * C17046 +
             (C17977 + C17978 + C17979) * C50719 * C50757) *
                C50685 -
            ((C17281 + C17280 + C17279) * C50719 * C50757 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C50719 * C17046) *
                C50831) *
               C896 +
           (((C17279 + C17280 + C17281) * C50719 * C17046 +
             (C17282 + C17283 + C17284) * C50719 * C50757) *
                C50831 -
            ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 +
              C17045 * C1445 + C17050 * C1439 - C17051 * C1434 -
              C17050 * C1440 + C17044 * C1446 + C17048 * C1441 -
              C17049 * C1435 - C17048 * C1442 + C17043 * C1447) *
                 C50719 * C50757 +
             (C17979 + C17978 + C17977) * C50719 * C17046) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C5105 +
              C22222 * C5106 + C22223 * C5107) *
                 C17046 +
             (C22002 + C22003 + C22004) * C50757) *
                C50831 -
            ((C22747 + C22748 + C22749) * C50757 +
             (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
                C50685) *
               C896 +
           (((C22749 + C22748 + C22747) * C17046 +
             (C20515 * C5105 + C20823 * C5106 + C23165 * C5107) * C50757) *
                C50685 -
            ((C22005 + C22006 + C22007) * C50757 +
             (C22004 + C22003 + C22002) * C17046) *
                C50831) *
               C50657) *
              C50822 +
          ((((C22226 * C5105 + C22227 * C5106 + C22228 * C5107) * C17046 +
             (C22750 + C22751 + C22752) * C50757) *
                C50685 -
            ((C22026 + C22009 + C22008) * C50757 +
             (C22227 * C5107 + C22226 * C5106 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C5105) *
                 C17046) *
                C50831) *
               C896 +
           (((C22008 + C22009 + C22026) * C17046 +
             (C22014 + C22015 + C22027) * C50757) *
                C50831 -
            (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
               C50556 * C4517) *
                  C5107 +
              C22025 * C5106 + C20518 * C5105) *
                 C50757 +
             (C22752 + C22751 + C22750) * C17046) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C50719 * C17046 +
           (C17273 + C17274 + C17275) * C50719 * C50757) *
              C50621 * C967 -
          ((C17276 + C17277 + C17278) * C50719 * C50757 +
           (C17275 + C17274 + C17273) * C50719 * C17046) *
              C50621 * C968 +
          ((C17278 + C17277 + C17276) * C50719 * C17046 +
           (C18242 + C18243 + C18244) * C50719 * C50757) *
              C50621 * C969 -
          ((C17052 * C2322 - C17053 * C2317 - C17052 * C2323 + C17045 * C2326 +
            C17050 * C2320 - C17051 * C2316 - C17050 * C2321 + C17044 * C2325 +
            C17048 * C2318 - C17049 * C2315 - C17048 * C2319 + C17043 * C2324) *
               C50719 * C50757 +
           (C18244 + C18243 + C18242) * C50719 * C17046) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C896 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C50657) *
              C898 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C50657 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C896) *
              C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C50621 * C896 -
           ((C17052 * C284 - C17053 * C265 - C17052 * C285 + C17045 * C295 +
             C17050 * C280 - C17051 * C263 - C17050 * C281 + C17044 * C293 +
             C17048 * C278 - C17049 * C262 - C17048 * C279 + C17043 * C292) *
                C50719 * C50757 +
            (C17597 + C17596 + C17595) * C50719 * C17046) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C896 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C50657) *
              C898 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C50657 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C896) *
              C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C50621 * C896 -
           ((C19865 * C2322 - C19866 * C2317 - C19865 * C2323 +
             C50556 * C2326) *
                C50719 * C19864 +
            C20249 * C19863 + C20248 * C19862 + C20247 * C19861) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
              C50621 * C967 -
          (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
           C20022 * C19861) *
              C50621 * C968 +
          (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
           C20701 * C19864) *
              C50621 * C969 -
          ((C19865 * C20690 - C19866 * C20689 - C19865 * C20691 +
            C50556 * C20692) *
               C50719 * C19864 +
           C20701 * C19863 + C20025 * C19862 + C20024 * C19861) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50621 * C896 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C50621 * C50657) *
              C898 +
          (((C22008 + C22009 + C22026) * C17046 +
            (C22014 + C22015 + C22027) * C50757) *
               C50621 * C50657 -
           ((C22026 + C22009 + C22008) * C50757 +
            (C22227 * C5107 + C22226 * C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C5105 +
             C22551 * C5106 + C22552 * C5107) *
                C17046 +
            (C22376 + C22391 + C22392) * C50757) *
               C50621 * C896 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C5107 +
             (C19865 * C1439 - C19866 * C1434 - C19865 * C1440 +
              C50556 * C1446) *
                 C5106 +
             C20245 * C5105) *
                C50757 +
            (C22392 + C22391 + C22376) * C17046) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C5105 +
            C22222 * C5106 + C22223 * C5107) *
               C17046 +
           (C22002 + C22003 + C22004) * C50757) *
              C50621 * C967 -
          ((C22005 + C22006 + C22007) * C50757 +
           (C22004 + C22003 + C22002) * C17046) *
              C50621 * C968 +
          ((C22007 + C22006 + C22005) * C17046 +
           (C22997 + C22998 + C22999) * C50757) *
              C50621 * C969 -
          (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
             C50556 * C20802) *
                C5107 +
            C21164 * C5106 + C20017 * C5105) *
               C50757 +
           (C22999 + C22998 + C22997) * C17046) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50719 * C19861 +
             C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
                C1547 -
            (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
             (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                 C50719 * C19861) *
                C50685) *
               C50830 +
           ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
             C21165 * C19864) *
                C50685 -
            (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
             C20022 * C19861) *
                C1547) *
               C50657) *
              C50822 +
          ((((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                 C50719 * C19861 +
             C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
                C50685 -
            (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50719 * C19861) *
                C1547) *
               C50830 +
           ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
             C20029 * C19864) *
                C1547 -
            ((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50719 * C19864 +
             C20525 * C19863 + C20524 * C19862 + C20523 * C19861) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C50719 * C17046 +
             (C17273 + C17274 + C17275) * C50719 * C50757) *
                C1547 -
            ((C17974 + C17975 + C17976) * C50719 * C50757 +
             (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
              C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
              C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                 C50719 * C17046) *
                C50685) *
               C50830 +
           (((C17976 + C17975 + C17974) * C50719 * C17046 +
             (C18916 + C18917 + C18918) * C50719 * C50757) *
                C50685 -
            ((C17276 + C17277 + C17278) * C50719 * C50757 +
             (C17275 + C17274 + C17273) * C50719 * C17046) *
                C1547) *
               C50657) *
              C50822 +
          ((((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
              C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
              C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                 C50719 * C17046 +
             (C17977 + C17978 + C17979) * C50719 * C50757) *
                C50685 -
            ((C17281 + C17280 + C17279) * C50719 * C50757 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C50719 * C17046) *
                C1547) *
               C50830 +
           (((C17279 + C17280 + C17281) * C50719 * C17046 +
             (C17282 + C17283 + C17284) * C50719 * C50757) *
                C1547 -
            ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 +
              C17045 * C1445 + C17050 * C1439 - C17051 * C1434 -
              C17050 * C1440 + C17044 * C1446 + C17048 * C1441 -
              C17049 * C1435 - C17048 * C1442 + C17043 * C1447) *
                 C50719 * C50757 +
             (C17979 + C17978 + C17977) * C50719 * C17046) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C5105 +
              C22222 * C5106 + C22223 * C5107) *
                 C17046 +
             (C22002 + C22003 + C22004) * C50757) *
                C1547 -
            ((C22747 + C22748 + C22749) * C50757 +
             (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
                C50685) *
               C50830 +
           (((C22749 + C22748 + C22747) * C17046 +
             (C23653 + C23654 + C23655) * C50757) *
                C50685 -
            ((C22005 + C22006 + C22007) * C50757 +
             (C22004 + C22003 + C22002) * C17046) *
                C1547) *
               C50657) *
              C50822 +
          ((((C22226 * C5105 + C22227 * C5106 + C22228 * C5107) * C17046 +
             (C22750 + C22751 + C22752) * C50757) *
                C50685 -
            ((C22026 + C22009 + C22008) * C50757 +
             (C22227 * C5107 + C22226 * C5106 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C5105) *
                 C17046) *
                C1547) *
               C50830 +
           (((C22008 + C22009 + C22026) * C17046 +
             (C22014 + C22015 + C22027) * C50757) *
                C1547 -
            (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
               C50556 * C4517) *
                  C5107 +
              C22025 * C5106 + C20518 * C5105) *
                 C50757 +
             (C22752 + C22751 + C22750) * C17046) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50877 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50878 +
           ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C50719 * C19861 +
            C20825 * C19862 + C20826 * C19863 + C20827 * C19864) *
               C1963) *
              C50830 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            C21165 * C19864) *
               C50878 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50877 -
           ((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
             C50556 * C20802) *
                C50719 * C19864 +
            C20827 * C19863 + C20826 * C19862 + C20825 * C19861) *
               C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50877 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50878 +
           ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
             C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
             C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
                C50719 * C17046 +
            (C18409 + C18410 + C18411) * C50719 * C50757) *
               C1963) *
              C50830 +
          (((C17976 + C17975 + C17974) * C50719 * C17046 +
            (C18916 + C18917 + C18918) * C50719 * C50757) *
               C50878 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50877 -
           ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 + C17045 * C2572 +
             C17050 * C2566 - C17051 * C2562 - C17050 * C2567 + C17044 * C2571 +
             C17048 * C2564 - C17049 * C2561 - C17048 * C2565 +
             C17043 * C2570) *
                C50719 * C50757 +
            (C18411 + C18410 + C18409) * C50719 * C17046) *
               C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50877 -
           ((C22747 + C22748 + C22749) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C50878 +
           ((C22223 * C5105 + C22225 * C5106 + C24056 * C5107) * C17046 +
            (C23150 + C23151 + C23166) * C50757) *
               C1963) *
              C50830 +
          (((C22749 + C22748 + C22747) * C17046 +
            (C23653 + C23654 + C23655) * C50757) *
               C50878 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C50877 -
           (((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
              C50556 * C23148) *
                 C5107 +
             C23165 * C5106 + C20823 * C5105) *
                C50757 +
            (C23166 + C23151 + C23150) * C17046) *
               C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                 C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                 C17052 * C136 - C17053 * C127 - C17052 * C137 +
                 C17045 * C148) *
                    C50719 * C17046 +
                (C17273 + C17274 + C17275) * C50719 * C50757) *
                   C1547 -
               ((C17974 + C17975 + C17976) * C50719 * C50757 +
                (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
                 C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
                 C17048 * C413 - C17049 * C400 - C17048 * C414 +
                 C17043 * C430) *
                    C50719 * C17046) *
                   C50685) *
                  C50605 * C898 +
              (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
                 C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
                 C17052 * C407 - C17053 * C397 - C17052 * C408 +
                 C17045 * C427) *
                    C50719 * C17046 +
                (C17977 + C17978 + C17979) * C50719 * C50757) *
                   C50685 -
               ((C17281 + C17280 + C17279) * C50719 * C50757 +
                (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
                 C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
                 C17048 * C134 - C17049 * C126 - C17048 * C135 +
                 C17043 * C147) *
                    C50719 * C17046) *
                   C1547) *
                  C50605 * C899 +
              (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
                 C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
                 C17052 * C140 - C17053 * C129 - C17052 * C141 +
                 C17045 * C150) *
                    C50719 * C17046 +
                (C17595 + C17596 + C17597) * C50719 * C50757) *
                   C1547 -
               ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
                 C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
                 C17048 * C787 - C17049 * C780 - C17048 * C788 +
                 C17043 * C795) *
                    C50719 * C50757 +
                (C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435 +
                 C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
                 C17048 * C409 - C17049 * C398 - C17048 * C410 +
                 C17043 * C428) *
                    C50719 * C17046) *
                   C50685) *
                  C50605 * C900) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                 C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                 C17052 * C136 - C17053 * C127 - C17052 * C137 +
                 C17045 * C148) *
                    C50719 * C17046 +
                (C17273 + C17274 + C17275) * C50719 * C50757) *
                   C1547 -
               ((C17974 + C17975 + C17976) * C50719 * C50757 +
                (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
                 C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
                 C17048 * C413 - C17049 * C400 - C17048 * C414 +
                 C17043 * C430) *
                    C50719 * C17046) *
                   C50685) *
                  C251 +
              (((C17976 + C17975 + C17974) * C50719 * C17046 +
                (C18916 + C18917 + C18918) * C50719 * C50757) *
                   C50685 -
               ((C17276 + C17277 + C17278) * C50719 * C50757 +
                (C17275 + C17274 + C17273) * C50719 * C17046) *
                   C1547) *
                  C252 +
              (((C17278 + C17277 + C17276) * C50719 * C17046 +
                (C18242 + C18243 + C18244) * C50719 * C50757) *
                   C1547 -
               ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 +
                 C17045 * C3098 + C17050 * C3092 - C17051 * C3088 -
                 C17050 * C3093 + C17044 * C3097 + C17048 * C3090 -
                 C17049 * C3087 - C17048 * C3091 + C17043 * C3096) *
                    C50719 * C50757 +
                (C18918 + C18917 + C18916) * C50719 * C17046) *
                   C50685) *
                  C253) *
             C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C50719 * C17046 +
           (C17273 + C17274 + C17275) * C50719 * C50757) *
              C1713 -
          ((C17974 + C17975 + C17976) * C50719 * C50757 +
           (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
            C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
            C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
               C50719 * C17046) *
              C1714 +
          ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
            C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
            C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
               C50719 * C17046 +
           (C18409 + C18410 + C18411) * C50719 * C50757) *
              C1715 -
          ((C17052 * C6013 - C17053 * C6012 - C17052 * C6014 + C17045 * C6015 +
            C17050 * C4513 - C17051 * C4507 - C17050 * C4514 + C17044 * C4519 +
            C17048 * C4515 - C17049 * C4508 - C17048 * C4516 + C17043 * C4520) *
               C50719 * C50757 +
           (C17052 * C1723 - C17053 * C1718 - C17052 * C1724 + C17045 * C1730 +
            C17050 * C1725 - C17051 * C1719 - C17050 * C1726 + C17044 * C1731 +
            C17048 * C1727 - C17049 * C1720 - C17048 * C1728 + C17043 * C1732) *
               C50719 * C17046) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C1547 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C50605 * C898 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
               C50685 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C1547) *
              C50605 * C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C1547 -
           ((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
             C50556 * C3098) *
                C50719 * C19864 +
            (C19865 * C1439 - C19866 * C1434 - C19865 * C1440 +
             C50556 * C1446) *
                C50719 * C19863 +
            (C19865 * C787 - C19866 * C780 - C19865 * C788 + C50556 * C795) *
                C50719 * C19862 +
            (C19865 * C409 - C19866 * C398 - C19865 * C410 + C50556 * C428) *
                C50719 * C19861) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C1547 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C251 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            C21165 * C19864) *
               C50685 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C1547) *
              C252 +
          ((C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            C20701 * C19864) *
               C1547 -
           ((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50719 * C19864 +
            C21165 * C19863 + C20520 * C19862 + C20521 * C19861) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
              C1713 -
          (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
           (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
               C50719 * C19861) *
              C1714 +
          ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
               C50719 * C19861 +
           C20825 * C19862 + C20826 * C19863 + C20827 * C19864) *
              C1715 -
          ((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
            C50556 * C21430) *
               C50719 * C19864 +
           (C19865 * C4511 - C19866 * C4506 - C19865 * C4512 + C50556 * C4518) *
               C50719 * C19863 +
           (C19865 * C4515 - C19866 * C4508 - C19865 * C4516 + C50556 * C4520) *
               C50719 * C19862 +
           (C19865 * C1727 - C19866 * C1720 - C19865 * C1728 + C50556 * C1732) *
               C50719 * C19861) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C1547 -
           ((C22747 + C22748 + C22749) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C5105 + C22227 * C5106 + C22228 * C5107) * C17046 +
            (C22750 + C22751 + C22752) * C50757) *
               C50685 -
           ((C22026 + C22009 + C22008) * C50757 +
            (C22227 * C5107 + C22226 * C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C5105 +
             C22551 * C5106 + C22552 * C5107) *
                C17046 +
            (C22376 + C22391 + C22392) * C50757) *
               C1547 -
           (((C19865 * C6013 - C19866 * C6012 - C19865 * C6014 +
              C50556 * C6015) *
                 C5107 +
             C22390 * C5106 + C22389 * C5105) *
                C50757 +
            ((C19865 * C1723 - C19866 * C1718 - C19865 * C1724 +
              C50556 * C1730) *
                 C5107 +
             C22552 * C5106 + C22551 * C5105) *
                C17046) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C1547 -
           ((C22747 + C22748 + C22749) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C50685) *
              C251 +
          (((C22749 + C22748 + C22747) * C17046 +
            (C23653 + C23654 + C23655) * C50757) *
               C50685 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C1547) *
              C252 +
          (((C22007 + C22006 + C22005) * C17046 +
            (C22997 + C22998 + C22999) * C50757) *
               C1547 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C5107 +
             C20824 * C5106 + C20514 * C5105) *
                C50757 +
            (C23655 + C23654 + C23653) * C17046) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C5105 +
            C22222 * C5106 + C22223 * C5107) *
               C17046 +
           (C22002 + C22003 + C22004) * C50757) *
              C1713 -
          ((C22747 + C22748 + C22749) * C50757 +
           (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
              C1714 +
          ((C22223 * C5105 + C22225 * C5106 + C24056 * C5107) * C17046 +
           (C23150 + C23151 + C23166) * C50757) *
              C1715 -
          (((C19865 * C24046 - C19866 * C24045 - C19865 * C24047 +
             C50556 * C24048) *
                C5107 +
            C23164 * C5106 + C22224 * C5105) *
               C50757 +
           ((C19865 * C7323 - C19866 * C7320 - C19865 * C7324 +
             C50556 * C7326) *
                C5107 +
            C24056 * C5106 + C22225 * C5105) *
               C17046) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50877 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50878 +
           ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C50719 * C19861 +
            C20825 * C19862 + C20826 * C19863 + C20827 * C19864) *
               C1963) *
              C50605 * C50822 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
               C50878 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50877 -
           ((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
             C50556 * C3575) *
                C50719 * C19864 +
            (C19865 * C2566 - C19866 * C2562 - C19865 * C2567 +
             C50556 * C2571) *
                C50719 * C19863 +
            (C19865 * C1094 - C19866 * C1088 - C19865 * C1095 +
             C50556 * C1100) *
                C50719 * C19862 +
            (C19865 * C417 - C19866 * C402 - C19865 * C418 + C50556 * C432) *
                C50719 * C19861) *
               C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50877 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50878 +
           ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
             C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
             C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
                C50719 * C17046 +
            (C18409 + C18410 + C18411) * C50719 * C50757) *
               C1963) *
              C50605 * C50822 +
          (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                C50719 * C17046 +
            (C17977 + C17978 + C17979) * C50719 * C50757) *
               C50878 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50877 -
           ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 + C17045 * C1098 +
             C17050 * C1092 - C17051 * C1087 - C17050 * C1093 + C17044 * C1099 +
             C17048 * C1094 - C17049 * C1088 - C17048 * C1095 +
             C17043 * C1100) *
                C50719 * C50757 +
            (C17052 * C421 - C17053 * C404 - C17052 * C422 + C17045 * C434 +
             C17050 * C419 - C17051 * C403 - C17050 * C420 + C17044 * C433 +
             C17048 * C417 - C17049 * C402 - C17048 * C418 + C17043 * C432) *
                C50719 * C17046) *
               C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C50877 -
           ((C22747 + C22748 + C22749) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C50878 +
           ((C22223 * C5105 + C22225 * C5106 + C24056 * C5107) * C17046 +
            (C23150 + C23151 + C23166) * C50757) *
               C1963) *
              C50605 * C50822 +
          (((C22226 * C5105 + C22227 * C5106 + C22228 * C5107) * C17046 +
            (C22750 + C22751 + C22752) * C50757) *
               C50878 -
           ((C22026 + C22009 + C22008) * C50757 +
            (C22227 * C5107 + C22226 * C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C50877 -
           (((C19865 * C6422 - C19866 * C6420 - C19865 * C6423 +
              C50556 * C6426) *
                 C5107 +
             C22229 * C5106 + C22024 * C5105) *
                C50757 +
            ((C19865 * C5405 - C19866 * C5401 - C19865 * C5406 +
              C50556 * C5410) *
                 C5107 +
             C22228 * C5106 + C22227 * C5105) *
                C17046) *
               C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C1547 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C251 +
          (((C17976 + C17975 + C17974) * C50719 * C17046 +
            (C18916 + C18917 + C18918) * C50719 * C50757) *
               C50685 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C1547) *
              C252 +
          (((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C18242 + C18243 + C18244) * C50719 * C50757) *
               C1547 -
           ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 + C17045 * C3098 +
             C17050 * C3092 - C17051 * C3088 - C17050 * C3093 + C17044 * C3097 +
             C17048 * C3090 - C17049 * C3087 - C17048 * C3091 +
             C17043 * C3096) *
                C50719 * C50757 +
            (C18918 + C18917 + C18916) * C50719 * C17046) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C1547 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C50605 * C898 +
          (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                C50719 * C17046 +
            (C17977 + C17978 + C17979) * C50719 * C50757) *
               C50685 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C1547) *
              C50605 * C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C1547 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50719 * C50757 +
            (C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435 +
             C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
             C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428) *
                C50719 * C17046) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C1547 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C50605 * C898 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
               C50685 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C1547) *
              C50605 * C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C1547 -
           ((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
             C50556 * C3098) *
                C50719 * C19864 +
            (C19865 * C1439 - C19866 * C1434 - C19865 * C1440 +
             C50556 * C1446) *
                C50719 * C19863 +
            (C19865 * C787 - C19866 * C780 - C19865 * C788 + C50556 * C795) *
                C50719 * C19862 +
            (C19865 * C409 - C19866 * C398 - C19865 * C410 + C50556 * C428) *
                C50719 * C19861) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C1547 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C251 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            C21165 * C19864) *
               C50685 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C1547) *
              C252 +
          ((C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            C20701 * C19864) *
               C1547 -
           ((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50719 * C19864 +
            C21165 * C19863 + C20520 * C19862 + C20521 * C19861) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C1547 -
           ((C22747 + C22748 + C22749) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C5105 + C22227 * C5106 + C22228 * C5107) * C17046 +
            (C22750 + C22751 + C22752) * C50757) *
               C50685 -
           ((C22026 + C22009 + C22008) * C50757 +
            (C22227 * C5107 + C22226 * C5106 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C5105) *
                C17046) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C5105 +
             C22551 * C5106 + C22552 * C5107) *
                C17046 +
            (C22376 + C22391 + C22392) * C50757) *
               C1547 -
           (((C19865 * C6013 - C19866 * C6012 - C19865 * C6014 +
              C50556 * C6015) *
                 C5107 +
             C22390 * C5106 + C22389 * C5105) *
                C50757 +
            ((C19865 * C1723 - C19866 * C1718 - C19865 * C1724 +
              C50556 * C1730) *
                 C5107 +
             C22552 * C5106 + C22551 * C5105) *
                C17046) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C5105 +
             C22222 * C5106 + C22223 * C5107) *
                C17046 +
            (C22002 + C22003 + C22004) * C50757) *
               C1547 -
           ((C22747 + C22748 + C22749) * C50757 +
            (C22225 * C5107 + C22223 * C5106 + C22222 * C5105) * C17046) *
               C50685) *
              C251 +
          (((C22749 + C22748 + C22747) * C17046 +
            (C23653 + C23654 + C23655) * C50757) *
               C50685 -
           ((C22005 + C22006 + C22007) * C50757 +
            (C22004 + C22003 + C22002) * C17046) *
               C1547) *
              C252 +
          (((C22007 + C22006 + C22005) * C17046 +
            (C22997 + C22998 + C22999) * C50757) *
               C1547 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C5107 +
             C20824 * C5106 + C20514 * C5105) *
                C50757 +
            (C23655 + C23654 + C23653) * C17046) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + (C25595 + C25594) * C50783) *
                C50757) *
               C50621 * C50830 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            ((C25594 + C25595) * C50783 + (C24869 + C24868) * C50844) *
                C17046) *
               C50621 * C50657) *
              C50873 +
          ((((C24874 + C24875) * C50844 + (C25596 + C25597) * C50783) * C17046 +
            ((C24876 + C24877) * C50844 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C50657 -
           (((C25597 + C25596) * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C50621 * C50830) *
              C50874 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C50844 +
             (C49784 * C409 - C24646 * C398 - C49784 * C410 + C50815 * C428 +
              C49777 * C407 - C24648 * C397 - C49777 * C408 + C50561 * C427) *
                 C50783) *
                C17046 +
            ((C25200 + C25201) * C50844 + (C28206 + C28207) * C50783) *
                C50757) *
               C50621 * C50830 -
           (((C49777 * C1437 - C24648 * C1433 - C49777 * C1438 +
              C50561 * C1445 + C49784 * C1439 - C24646 * C1434 -
              C49784 * C1440 + C50815 * C1446) *
                 C50783 +
             (C25203 + C25202) * C50844) *
                C50757 +
            ((C28207 + C28206) * C50783 + (C25201 + C25200) * C50844) *
                C17046) *
               C50621 * C50657) *
              C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
               C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                  C50844 +
              (C27990 + C27991) * C50783) *
                 C17046 +
             ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
                C50831 -
            (((C26031 + C26030) * C50783 + C28675 * C50844) * C50757 +
             ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                 C17046) *
                C50685) *
               C50830 +
           (((C28674 * C50844 + (C26030 + C26031) * C50783) * C17046 +
             ((C25593 + C25592) * C50844 + (C26032 + C26033) * C50783) *
                 C50757) *
                C50685 -
            ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
             (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
                C50831) *
               C50657) *
              C254 +
          (((((C27994 + C27995) * C50844 + (C27996 + C27997) * C50783) *
                 C17046 +
             (C28676 * C50844 + (C27998 + C27999) * C50783) * C50757) *
                C50685 -
            ((C28677 * C50783 + (C24875 + C24874) * C50844) * C50757 +
             ((C27995 + C27994) * C50783 +
              (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
               C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                  C50844) *
                 C17046) *
                C50831) *
               C50830 +
           ((((C24874 + C24875) * C50844 + C28676 * C50783) * C17046 +
             ((C24876 + C24877) * C50844 + (C25598 + C25599) * C50783) *
                 C50757) *
                C50831 -
            (((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 +
               C50561 * C2572 + C49784 * C2566 - C24646 * C2562 -
               C49784 * C2567 + C50815 * C2571) *
                  C50783 +
              (C25599 + C25598) * C50844) *
                 C50757 +
             ((C27999 + C27998) * C50783 + C28677 * C50844) * C17046) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430 +
              C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429) *
                 C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + (C25595 + C25594) * C50783) *
                C50757) *
               C50621 * C251 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            ((C25594 + C25595) * C50783 + (C24869 + C24868) * C50844) *
                C17046) *
               C50621 * C252 +
           ((C24880 * C50844 + (C25593 + C25592) * C50783) * C17046 +
            ((C24873 + C24872) * C50844 + (C26534 + C26535) * C50783) *
                C50757) *
               C50621 * C253) *
              C254 +
          ((((C24874 + C24875) * C50844 + (C25596 + C25597) * C50783) * C17046 +
            ((C24876 + C24877) * C50844 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C252 -
           (((C25597 + C25596) * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428 +
              C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429) *
                 C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C50621 * C251 -
           (((C49777 * C3094 - C24648 * C3089 - C49777 * C3095 +
              C50561 * C3098 + C49784 * C3092 - C24646 * C3088 -
              C49784 * C3093 + C50815 * C3097) *
                 C50783 +
             (C24879 + C24878) * C50844) *
                C50757 +
            ((C25599 + C25598) * C50783 + C24881 * C50844) * C17046) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50844 +
            (C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430 +
             C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429) *
                C50783) *
               C17046 +
           ((C24868 + C24869) * C50844 + (C25595 + C25594) * C50783) * C50757) *
              C50621 * C50605 * C113 -
          (((C25597 + C25596) * C50783 + (C24875 + C24874) * C50844) * C50757 +
           ((C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428 +
             C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429) *
                C50783 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50844) *
               C17046) *
              C50621 * C50605 * C114 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50844 +
            (C49784 * C409 - C24646 * C398 - C49784 * C410 + C50815 * C428 +
             C49777 * C407 - C24648 * C397 - C49777 * C408 + C50561 * C427) *
                C50783) *
               C17046 +
           ((C25200 + C25201) * C50844 +
            (C49784 * C787 - C24646 * C780 - C49784 * C788 + C50815 * C795 +
             C49777 * C789 - C24648 * C781 - C49777 * C790 + C50561 * C796) *
                C50783) *
               C50757) *
              C50621 * C50605 * C115 -
          (((C49777 * C791 - C24648 * C782 - C49777 * C792 + C50561 * C797 +
             C49784 * C789 - C24646 * C781 - C49784 * C790 + C50815 * C796) *
                C50783 +
            (C49777 * C282 - C24648 * C264 - C49777 * C283 + C50561 * C294 +
             C49784 * C266 - C24646 * C256 - C49784 * C267 + C50815 * C286) *
                C50844) *
               C50757 +
           ((C49777 * C423 - C24648 * C405 - C49777 * C424 + C50561 * C435 +
             C49784 * C407 - C24646 * C397 - C49784 * C408 + C50815 * C427) *
                C50783 +
            (C49777 * C140 - C24648 * C129 - C49777 * C141 + C50561 * C150 +
             C49784 * C138 - C24646 * C128 - C49784 * C139 + C50815 * C149) *
                C50844) *
               C17046) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + (C25595 + C25594) * C50783) *
                C50757) *
               C394 -
           (((C26031 + C26030) * C50783 + (C25594 + C25595) * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C395 +
           (((C27993 + C27992) * C50844 +
             (C49784 * C1727 - C24646 * C1720 - C49784 * C1728 +
              C50815 * C1732 + C49777 * C1725 - C24648 * C1719 -
              C49777 * C1726 + C50561 * C1731) *
                 C50783) *
                C17046 +
            ((C26030 + C26031) * C50844 +
             (C49784 * C4515 - C24646 * C4508 - C49784 * C4516 +
              C50815 * C4520 + C49777 * C4513 - C24648 * C4507 -
              C49777 * C4514 + C50561 * C4519) *
                 C50783) *
                C50757) *
               C396) *
              C50605 * C254 +
          ((((C27994 + C27995) * C50844 + (C27996 + C27997) * C50783) * C17046 +
            ((C25596 + C25597) * C50844 + (C27998 + C27999) * C50783) *
                C50757) *
               C395 -
           (((C25597 + C25596) * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C394 -
           (((C49777 * C6013 - C24648 * C6012 - C49777 * C6014 +
              C50561 * C6015 + C49784 * C4513 - C24646 * C4507 -
              C49784 * C4514 + C50815 * C4519) *
                 C50783 +
             (C27999 + C27998) * C50844) *
                C50757 +
            ((C49777 * C1723 - C24648 * C1718 - C49777 * C1724 +
              C50561 * C1730 + C49784 * C1725 - C24646 * C1719 -
              C49784 * C1726 + C50815 * C1731) *
                 C50783 +
             (C27997 + C27996) * C50844) *
                C17046) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + (C25595 + C25594) * C50783) *
                C50757) *
               C50831 -
           (((C26031 + C26030) * C50783 + (C25594 + C25595) * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C50685) *
              C50605 * C50873 +
          ((((C27994 + C27995) * C50844 + (C27996 + C27997) * C50783) * C17046 +
            ((C25596 + C25597) * C50844 + (C27998 + C27999) * C50783) *
                C50757) *
               C50685 -
           (((C25597 + C25596) * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C50831) *
              C50605 * C50874 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C50844 +
             (C28414 + C28415) * C50783) *
                C17046 +
            ((C25200 + C25201) * C50844 + (C28206 + C28207) * C50783) *
                C50757) *
               C50831 -
           (((C49777 * C1090 - C24648 * C1086 - C49777 * C1091 +
              C50561 * C1098 + C49784 * C1092 - C24646 * C1087 -
              C49784 * C1093 + C50815 * C1099) *
                 C50783 +
             (C28207 + C28206) * C50844) *
                C50757 +
            ((C49777 * C421 - C24648 * C404 - C49777 * C422 + C50561 * C434 +
              C49784 * C419 - C24646 * C403 - C49784 * C420 + C50815 * C433) *
                 C50783 +
             (C28415 + C28414) * C50844) *
                C17046) *
               C50685) *
              C50605 * C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50844 +
            (C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430 +
             C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429) *
                C50783) *
               C17046 +
           ((C24868 + C24869) * C50844 + (C25595 + C25594) * C50783) * C50757) *
              C50621 * C50605 * C113 -
          (((C25597 + C25596) * C50783 + (C24875 + C24874) * C50844) * C50757 +
           ((C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428 +
             C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429) *
                C50783 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50844) *
               C17046) *
              C50621 * C50605 * C114 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50844 +
            (C49784 * C409 - C24646 * C398 - C49784 * C410 + C50815 * C428 +
             C49777 * C407 - C24648 * C397 - C49777 * C408 + C50561 * C427) *
                C50783) *
               C17046 +
           ((C25200 + C25201) * C50844 +
            (C49784 * C787 - C24646 * C780 - C49784 * C788 + C50815 * C795 +
             C49777 * C789 - C24648 * C781 - C49777 * C790 + C50561 * C796) *
                C50783) *
               C50757) *
              C50621 * C50605 * C115 -
          (((C49777 * C791 - C24648 * C782 - C49777 * C792 + C50561 * C797 +
             C49784 * C789 - C24646 * C781 - C49784 * C790 + C50815 * C796) *
                C50783 +
            (C49777 * C282 - C24648 * C264 - C49777 * C283 + C50561 * C294 +
             C49784 * C266 - C24646 * C256 - C49784 * C267 + C50815 * C286) *
                C50844) *
               C50757 +
           ((C49777 * C423 - C24648 * C405 - C49777 * C424 + C50561 * C435 +
             C49784 * C407 - C24646 * C397 - C49784 * C408 + C50815 * C427) *
                C50783 +
            (C49777 * C140 - C24648 * C129 - C49777 * C141 + C50561 * C150 +
             C49784 * C138 - C24646 * C128 - C49784 * C139 + C50815 * C149) *
                C50844) *
               C17046) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C49784 * C413 - C24646 * C400 - C49784 * C414 + C50815 * C430 +
              C49777 * C411 - C24648 * C399 - C49777 * C412 + C50561 * C429) *
                 C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + (C25595 + C25594) * C50783) *
                C50757) *
               C50621 * C251 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            ((C25594 + C25595) * C50783 + (C24869 + C24868) * C50844) *
                C17046) *
               C50621 * C252 +
           ((C24880 * C50844 + (C25593 + C25592) * C50783) * C17046 +
            ((C24873 + C24872) * C50844 + (C26534 + C26535) * C50783) *
                C50757) *
               C50621 * C253) *
              C254 +
          ((((C24874 + C24875) * C50844 + (C25596 + C25597) * C50783) * C17046 +
            ((C24876 + C24877) * C50844 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C252 -
           (((C25597 + C25596) * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C49777 * C409 - C24648 * C398 - C49777 * C410 + C50561 * C428 +
              C49784 * C411 - C24646 * C399 - C49784 * C412 + C50815 * C429) *
                 C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C50621 * C251 -
           (((C49777 * C3094 - C24648 * C3089 - C49777 * C3095 +
              C50561 * C3098 + C49784 * C3092 - C24646 * C3088 -
              C49784 * C3093 + C50815 * C3097) *
                 C50783 +
             (C24879 + C24878) * C50844) *
                C50757 +
            ((C25599 + C25598) * C50783 + C24881 * C50844) * C17046) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C50621 * C50875 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
               C50621 * C50876 +
           ((C24880 * C50844 + (C25593 + C25592) * C50783) * C17046 +
            ((C24873 + C24872) * C50844 + (C26534 + C26535) * C50783) *
                C50757) *
               C50621 * C1202) *
              C50822 +
          ((((C24874 + C24875) * C50844 + C28676 * C50783) * C17046 +
            ((C24876 + C24877) * C50844 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C50876 -
           ((C28677 * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C50621 * C50875 -
           (((C49777 * C3094 - C24648 * C3089 - C49777 * C3095 +
              C50561 * C3098 + C49784 * C3092 - C24646 * C3088 -
              C49784 * C3093 + C50815 * C3097) *
                 C50783 +
             (C24879 + C24878) * C50844) *
                C50757 +
            ((C25599 + C25598) * C50783 + C24881 * C50844) * C17046) *
               C50621 * C1202) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C50831 -
           ((C29196 * C50783 + C28675 * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C50685) *
              C50875 +
          (((C28674 * C50844 + C29197 * C50783) * C17046 +
            (C29858 * C50844 + (C26032 + C26033) * C50783) * C50757) *
               C50685 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
               C50831) *
              C50876 +
          (((C24880 * C50844 + C29858 * C50783) * C17046 +
            ((C24873 + C24872) * C50844 + (C26534 + C26535) * C50783) *
                C50757) *
               C50831 -
           (((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 +
              C50561 * C3575 + C49784 * C3573 - C24646 * C3570 -
              C49784 * C3574 + C50815 * C3576) *
                 C50783 +
             (C26535 + C26534) * C50844) *
                C50757 +
            ((C26033 + C26032) * C50783 + C26520 * C50844) * C17046) *
               C50685) *
              C1202) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50844 +
            (C27990 + C27991) * C50783) *
               C17046 +
           ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
              C50621 * C967 -
          ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
           (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
              C50621 * C968 +
          ((C24880 * C50844 + (C25593 + C25592) * C50783) * C17046 +
           ((C24873 + C24872) * C50844 + (C26534 + C26535) * C50783) * C50757) *
              C50621 * C969 -
          (((C49777 * C4093 - C24648 * C4091 - C49777 * C4094 + C50561 * C4097 +
             C49784 * C4095 - C24646 * C4092 - C49784 * C4096 +
             C50815 * C4098) *
                C50783 +
            (C25859 + C25858) * C50844) *
               C50757 +
           ((C26535 + C26534) * C50783 + C25844 * C50844) * C17046) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C50621 * C896 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
               C50621 * C50657) *
              C898 +
          ((((C24874 + C24875) * C50844 + C28676 * C50783) * C17046 +
            ((C24876 + C24877) * C50844 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C50657 -
           ((C28677 * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C50621 * C896) *
              C899 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C50844 +
             (C28414 + C28415) * C50783) *
                C17046 +
            ((C25200 + C25201) * C50844 + (C28206 + C28207) * C50783) *
                C50757) *
               C50621 * C896 -
           (((C49777 * C1437 - C24648 * C1433 - C49777 * C1438 +
              C50561 * C1445 + C49784 * C1439 - C24646 * C1434 -
              C49784 * C1440 + C50815 * C1446) *
                 C50783 +
             (C25203 + C25202) * C50844) *
                C50757 +
            ((C28207 + C28206) * C50783 + (C25201 + C25200) * C50844) *
                C17046) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C394 -
           ((C29196 * C50783 + C28675 * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C395 +
           (((C27993 + C27992) * C50844 +
             (C49784 * C1727 - C24646 * C1720 - C49784 * C1728 +
              C50815 * C1732 + C49777 * C1725 - C24648 * C1719 -
              C49777 * C1726 + C50561 * C1731) *
                 C50783) *
                C17046 +
            (C29197 * C50844 + (C29210 + C29211) * C50783) * C50757) *
               C396) *
              C896 +
          (((C28674 * C50844 + C29197 * C50783) * C17046 +
            ((C25593 + C25592) * C50844 + (C26032 + C26033) * C50783) *
                C50757) *
               C395 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
               C394 -
           (((C49777 * C4509 - C24648 * C4505 - C49777 * C4510 +
              C50561 * C4517 + C49784 * C4511 - C24646 * C4506 -
              C49784 * C4512 + C50815 * C4518) *
                 C50783 +
             (C26033 + C26032) * C50844) *
                C50757 +
            ((C29211 + C29210) * C50783 + C29196 * C50844) * C17046) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
               C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                  C50844 +
              (C27990 + C27991) * C50783) *
                 C17046 +
             ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
                C50831 -
            ((C29196 * C50783 + C28675 * C50844) * C50757 +
             ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                 C17046) *
                C50685) *
               C896 +
           (((C28674 * C50844 + C29197 * C50783) * C17046 +
             ((C25593 + C25592) * C50844 + (C26032 + C26033) * C50783) *
                 C50757) *
                C50685 -
            ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
             (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
                C50831) *
               C50657) *
              C50822 +
          (((((C27994 + C27995) * C50844 + (C27996 + C27997) * C50783) *
                 C17046 +
             (C28676 * C50844 + (C27998 + C27999) * C50783) * C50757) *
                C50685 -
            ((C28677 * C50783 + (C24875 + C24874) * C50844) * C50757 +
             ((C27995 + C27994) * C50783 +
              (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
               C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                  C50844) *
                 C17046) *
                C50831) *
               C896 +
           ((((C24874 + C24875) * C50844 + C28676 * C50783) * C17046 +
             ((C24876 + C24877) * C50844 + (C25598 + C25599) * C50783) *
                 C50757) *
                C50831 -
            (((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 +
               C50561 * C2572 + C49784 * C2566 - C24646 * C2562 -
               C49784 * C2567 + C50815 * C2571) *
                  C50783 +
              (C25599 + C25598) * C50844) *
                 C50757 +
             ((C27999 + C27998) * C50783 + C28677 * C50844) * C17046) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C50621 * C896 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
               C50621 * C50657) *
              C898 +
          ((((C24874 + C24875) * C50844 + C28676 * C50783) * C17046 +
            ((C24876 + C24877) * C50844 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C50657 -
           ((C28677 * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C50621 * C896) *
              C899 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C50844 +
             (C28414 + C28415) * C50783) *
                C17046 +
            ((C25200 + C25201) * C50844 + (C28206 + C28207) * C50783) *
                C50757) *
               C50621 * C896 -
           (((C49777 * C1437 - C24648 * C1433 - C49777 * C1438 +
              C50561 * C1445 + C49784 * C1439 - C24646 * C1434 -
              C49784 * C1440 + C50815 * C1446) *
                 C50783 +
             (C25203 + C25202) * C50844) *
                C50757 +
            ((C28207 + C28206) * C50783 + (C25201 + C25200) * C50844) *
                C17046) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50844 +
            (C27990 + C27991) * C50783) *
               C17046 +
           ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
              C50621 * C967 -
          ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
           (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
              C50621 * C968 +
          ((C24880 * C50844 + (C25593 + C25592) * C50783) * C17046 +
           ((C24873 + C24872) * C50844 + (C26534 + C26535) * C50783) * C50757) *
              C50621 * C969 -
          (((C49777 * C4093 - C24648 * C4091 - C49777 * C4094 + C50561 * C4097 +
             C49784 * C4095 - C24646 * C4092 - C49784 * C4096 +
             C50815 * C4098) *
                C50783 +
            (C25859 + C25858) * C50844) *
               C50757 +
           ((C26535 + C26534) * C50783 + C25844 * C50844) * C17046) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
               C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                  C50844 +
              (C27990 + C27991) * C50783) *
                 C17046 +
             ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
                C1547 -
            ((C29196 * C50783 + C28675 * C50844) * C50757 +
             ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                 C17046) *
                C50685) *
               C50830 +
           (((C28674 * C50844 + C29197 * C50783) * C17046 +
             (C29858 * C50844 + (C26032 + C26033) * C50783) * C50757) *
                C50685 -
            ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
             (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
                C1547) *
               C50657) *
              C50822 +
          (((((C27994 + C27995) * C50844 + (C27996 + C27997) * C50783) *
                 C17046 +
             (C28676 * C50844 + (C27998 + C27999) * C50783) * C50757) *
                C50685 -
            ((C28677 * C50783 + (C24875 + C24874) * C50844) * C50757 +
             ((C27995 + C27994) * C50783 +
              (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
               C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                  C50844) *
                 C17046) *
                C1547) *
               C50830 +
           ((((C24874 + C24875) * C50844 + C28676 * C50783) * C17046 +
             ((C24876 + C24877) * C50844 + (C25598 + C25599) * C50783) *
                 C50757) *
                C1547 -
            (((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 +
               C50561 * C2572 + C49784 * C2566 - C24646 * C2562 -
               C49784 * C2567 + C50815 * C2571) *
                  C50783 +
              (C25599 + C25598) * C50844) *
                 C50757 +
             ((C27999 + C27998) * C50783 + C28677 * C50844) * C17046) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C50877 -
           ((C29196 * C50783 + C28675 * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C50878 +
           (((C27993 + C27992) * C50844 + (C30389 + C30390) * C50783) * C17046 +
            (C29197 * C50844 + (C29210 + C29211) * C50783) * C50757) *
               C1963) *
              C50830 +
          (((C28674 * C50844 + C29197 * C50783) * C17046 +
            (C29858 * C50844 + (C26032 + C26033) * C50783) * C50757) *
               C50878 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
               C50877 -
           (((C49777 * C4509 - C24648 * C4505 - C49777 * C4510 +
              C50561 * C4517 + C49784 * C4511 - C24646 * C4506 -
              C49784 * C4512 + C50815 * C4518) *
                 C50783 +
             (C26033 + C26032) * C50844) *
                C50757 +
            ((C29211 + C29210) * C50783 + C29196 * C50844) * C17046) *
               C1963) *
              C50657) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C1547 -
           ((C29196 * C50783 + C28675 * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C50685) *
              C251 +
          (((C28674 * C50844 + C29197 * C50783) * C17046 +
            (C29858 * C50844 + (C26032 + C26033) * C50783) * C50757) *
               C50685 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
               C1547) *
              C252 +
          (((C24880 * C50844 + C29858 * C50783) * C17046 +
            ((C24873 + C24872) * C50844 + (C26534 + C26535) * C50783) *
                C50757) *
               C1547 -
           (((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 +
              C50561 * C3575 + C49784 * C3573 - C24646 * C3570 -
              C49784 * C3574 + C50815 * C3576) *
                 C50783 +
             (C26535 + C26534) * C50844) *
                C50757 +
            ((C26033 + C26032) * C50783 + C26520 * C50844) * C17046) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C1547 -
           ((C29196 * C50783 + C28675 * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C50685) *
              C50605 * C898 +
          ((((C27994 + C27995) * C50844 + (C27996 + C27997) * C50783) * C17046 +
            (C28676 * C50844 + (C27998 + C27999) * C50783) * C50757) *
               C50685 -
           ((C28677 * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C1547) *
              C50605 * C899 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C50844 +
             (C28414 + C28415) * C50783) *
                C17046 +
            ((C25200 + C25201) * C50844 + (C28206 + C28207) * C50783) *
                C50757) *
               C1547 -
           (((C49777 * C1090 - C24648 * C1086 - C49777 * C1091 +
              C50561 * C1098 + C49784 * C1092 - C24646 * C1087 -
              C49784 * C1093 + C50815 * C1099) *
                 C50783 +
             (C28207 + C28206) * C50844) *
                C50757 +
            ((C49777 * C421 - C24648 * C404 - C49777 * C422 + C50561 * C434 +
              C49784 * C419 - C24646 * C403 - C49784 * C420 + C50815 * C433) *
                 C50783 +
             (C28415 + C28414) * C50844) *
                C17046) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50844 +
            (C27990 + C27991) * C50783) *
               C17046 +
           ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
              C1713 -
          ((C29196 * C50783 + C28675 * C50844) * C50757 +
           ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) * C17046) *
              C1714 +
          (((C27993 + C27992) * C50844 + (C30389 + C30390) * C50783) * C17046 +
           (C29197 * C50844 + (C29210 + C29211) * C50783) * C50757) *
              C1715 -
          (((C49777 * C6422 - C24648 * C6420 - C49777 * C6423 + C50561 * C6426 +
             C49784 * C6424 - C24646 * C6421 - C49784 * C6425 +
             C50815 * C6427) *
                C50783 +
            (C29211 + C29210) * C50844) *
               C50757 +
           ((C49777 * C5405 - C24648 * C5401 - C49777 * C5406 + C50561 * C5410 +
             C49784 * C5403 - C24646 * C5400 - C49784 * C5404 +
             C50815 * C5409) *
                C50783 +
            (C30390 + C30389) * C50844) *
               C17046) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C50877 -
           ((C29196 * C50783 + C28675 * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C50878 +
           (((C27993 + C27992) * C50844 + (C30389 + C30390) * C50783) * C17046 +
            (C29197 * C50844 + (C29210 + C29211) * C50783) * C50757) *
               C1963) *
              C50605 * C50822 +
          ((((C27994 + C27995) * C50844 + (C27996 + C27997) * C50783) * C17046 +
            (C28676 * C50844 + (C27998 + C27999) * C50783) * C50757) *
               C50878 -
           ((C28677 * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C50877 -
           (((C49777 * C6013 - C24648 * C6012 - C49777 * C6014 +
              C50561 * C6015 + C49784 * C4513 - C24646 * C4507 -
              C49784 * C4514 + C50815 * C4519) *
                 C50783 +
             (C27999 + C27998) * C50844) *
                C50757 +
            ((C49777 * C1723 - C24648 * C1718 - C49777 * C1724 +
              C50561 * C1730 + C49784 * C1725 - C24646 * C1719 -
              C49784 * C1726 + C50815 * C1731) *
                 C50783 +
             (C27997 + C27996) * C50844) *
                C17046) *
               C1963) *
              C50605 * C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C1547 -
           ((C29196 * C50783 + C28675 * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C50685) *
              C50605 * C898 +
          ((((C27994 + C27995) * C50844 + (C27996 + C27997) * C50783) * C17046 +
            (C28676 * C50844 + (C27998 + C27999) * C50783) * C50757) *
               C50685 -
           ((C28677 * C50783 + (C24875 + C24874) * C50844) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50844) *
                C17046) *
               C1547) *
              C50605 * C899 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C50844 +
             (C28414 + C28415) * C50783) *
                C17046 +
            ((C25200 + C25201) * C50844 + (C28206 + C28207) * C50783) *
                C50757) *
               C1547 -
           (((C49777 * C1090 - C24648 * C1086 - C49777 * C1091 +
              C50561 * C1098 + C49784 * C1092 - C24646 * C1087 -
              C49784 * C1093 + C50815 * C1099) *
                 C50783 +
             (C28207 + C28206) * C50844) *
                C50757 +
            ((C49777 * C421 - C24648 * C404 - C49777 * C422 + C50561 * C434 +
              C49784 * C419 - C24646 * C403 - C49784 * C420 + C50815 * C433) *
                 C50783 +
             (C28415 + C28414) * C50844) *
                C17046) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50844 +
             (C27990 + C27991) * C50783) *
                C17046 +
            ((C24868 + C24869) * C50844 + C28674 * C50783) * C50757) *
               C1547 -
           ((C29196 * C50783 + C28675 * C50844) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C50844) *
                C17046) *
               C50685) *
              C251 +
          (((C28674 * C50844 + C29197 * C50783) * C17046 +
            (C29858 * C50844 + (C26032 + C26033) * C50783) * C50757) *
               C50685 -
           ((C26520 * C50783 + (C24871 + C24870) * C50844) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C50844) * C17046) *
               C1547) *
              C252 +
          (((C24880 * C50844 + C29858 * C50783) * C17046 +
            ((C24873 + C24872) * C50844 + (C26534 + C26535) * C50783) *
                C50757) *
               C1547 -
           (((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 +
              C50561 * C3575 + C49784 * C3573 - C24646 * C3570 -
              C49784 * C3574 + C50815 * C3576) *
                 C50783 +
             (C26535 + C26534) * C50844) *
                C50757 +
            ((C26033 + C26032) * C50783 + C26520 * C50844) * C17046) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C50830 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C50657) *
              C50873 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C50657 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C50830) *
              C50874 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C50621 * C50830 -
           ((C17052 * C284 - C17053 * C265 - C17052 * C285 + C17045 * C295 +
             C17050 * C280 - C17051 * C263 - C17050 * C281 + C17044 * C293 +
             C17048 * C278 - C17049 * C262 - C17048 * C279 + C17043 * C292) *
                C50719 * C50757 +
            (C17597 + C17596 + C17595) * C50719 * C17046) *
               C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C50830 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C50657) *
              C50873 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C50657 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C50830) *
              C50874 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C50621 * C50830 -
           ((C19865 * C2322 - C19866 * C2317 - C19865 * C2323 +
             C50556 * C2326) *
                C50719 * C19864 +
            C20249 * C19863 + C20248 * C19862 + C20247 * C19861) *
               C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C50719 * C17046 +
             (C17273 + C17274 + C17275) * C50719 * C50757) *
                C50831 -
            ((C17974 + C17975 + C17976) * C50719 * C50757 +
             (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
              C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
              C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                 C50719 * C17046) *
                C50685) *
               C50830 +
           (((C17976 + C17975 + C17974) * C50719 * C17046 +
             (C17048 * C1443 - C17049 * C1436 - C17048 * C1444 +
              C17043 * C1448 + C17050 * C1441 - C17051 * C1435 -
              C17050 * C1442 + C17044 * C1447 + C17052 * C1439 -
              C17053 * C1434 - C17052 * C1440 + C17045 * C1446) *
                 C50719 * C50757) *
                C50685 -
            ((C17276 + C17277 + C17278) * C50719 * C50757 +
             (C17275 + C17274 + C17273) * C50719 * C17046) *
                C50831) *
               C50657) *
              C254 +
          ((((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
              C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
              C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                 C50719 * C17046 +
             (C17977 + C17978 + C17979) * C50719 * C50757) *
                C50685 -
            ((C17281 + C17280 + C17279) * C50719 * C50757 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C50719 * C17046) *
                C50831) *
               C50830 +
           (((C17279 + C17280 + C17281) * C50719 * C17046 +
             (C17282 + C17283 + C17284) * C50719 * C50757) *
                C50831 -
            ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 +
              C17045 * C1445 + C17050 * C1439 - C17051 * C1434 -
              C17050 * C1440 + C17044 * C1446 + C17048 * C1441 -
              C17049 * C1435 - C17048 * C1442 + C17043 * C1447) *
                 C50719 * C50757 +
             (C17979 + C17978 + C17977) * C50719 * C17046) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50719 * C19861 +
             C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
                C50831 -
            (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
             (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                 C50719 * C19861) *
                C50685) *
               C50830 +
           ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
             (C19865 * C4095 - C19866 * C4092 - C19865 * C4096 +
              C50556 * C4098) *
                 C50719 * C19864) *
                C50685 -
            (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
             C20022 * C19861) *
                C50831) *
               C50657) *
              C254 +
          ((((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                 C50719 * C19861 +
             C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
                C50685 -
            (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50719 * C19861) *
                C50831) *
               C50830 +
           ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
             C20029 * C19864) *
                C50831 -
            ((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50719 * C19864 +
             C20525 * C19863 + C20524 * C19862 + C20523 * C19861) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C251 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C252 +
           ((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C17048 * C982 - C17049 * C975 - C17048 * C983 + C17043 * C987 +
             C17050 * C980 - C17051 * C974 - C17050 * C981 + C17044 * C986 +
             C17052 * C978 - C17053 * C973 - C17052 * C979 + C17045 * C985) *
                C50719 * C50757) *
               C50621 * C253) *
              C254 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C252 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C251 -
           ((C17052 * C976 - C17053 * C972 - C17052 * C977 + C17045 * C984 +
             C17050 * C978 - C17051 * C973 - C17050 * C979 + C17044 * C985 +
             C17048 * C980 - C17049 * C974 - C17048 * C981 + C17043 * C986) *
                C50719 * C50757 +
            (C17284 + C17283 + C17282) * C50719 * C17046) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C50719 * C17046 +
           (C17048 * C272 - C17049 * C259 - C17048 * C273 + C17043 * C289 +
            C17050 * C270 - C17051 * C258 - C17050 * C271 + C17044 * C288 +
            C17052 * C268 - C17053 * C257 - C17052 * C269 + C17045 * C287) *
               C50719 * C50757) *
              C50621 * C50605 * C113 -
          ((C17052 * C266 - C17053 * C256 - C17052 * C267 + C17045 * C286 +
            C17050 * C268 - C17051 * C257 - C17050 * C269 + C17044 * C287 +
            C17048 * C270 - C17049 * C258 - C17048 * C271 + C17043 * C288) *
               C50719 * C50757 +
           (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
            C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
            C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
               C50719 * C17046) *
              C50621 * C50605 * C114 +
          ((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
            C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
            C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
               C50719 * C17046 +
           (C17048 * C268 - C17049 * C257 - C17048 * C269 + C17043 * C287 +
            C17050 * C266 - C17051 * C256 - C17050 * C267 + C17044 * C286 +
            C17052 * C282 - C17053 * C264 - C17052 * C283 + C17045 * C294) *
               C50719 * C50757) *
              C50621 * C50605 * C115 -
          ((C17052 * C541 - C17053 * C540 - C17052 * C542 + C17045 * C543 +
            C17050 * C282 - C17051 * C264 - C17050 * C283 + C17044 * C294 +
            C17048 * C266 - C17049 * C256 - C17048 * C267 + C17043 * C286) *
               C50719 * C50757 +
           (C17052 * C142 - C17053 * C130 - C17052 * C143 + C17045 * C151 +
            C17050 * C140 - C17051 * C129 - C17050 * C141 + C17044 * C150 +
            C17048 * C138 - C17049 * C128 - C17048 * C139 + C17043 * C149) *
               C50719 * C17046) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C394 -
           ((C17052 * C787 - C17053 * C780 - C17052 * C788 + C17045 * C795 +
             C17050 * C785 - C17051 * C779 - C17050 * C786 + C17044 * C794 +
             C17048 * C783 - C17049 * C778 - C17048 * C784 + C17043 * C793) *
                C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C395 +
           ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
             C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
             C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
                C50719 * C17046 +
            (C17048 * C1096 - C17049 * C1089 - C17048 * C1097 + C17043 * C1101 +
             C17050 * C1094 - C17051 * C1088 - C17050 * C1095 + C17044 * C1100 +
             C17052 * C1092 - C17053 * C1087 - C17052 * C1093 +
             C17045 * C1099) *
                C50719 * C50757) *
               C396) *
              C50605 * C254 +
          (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                C50719 * C17046 +
            (C17048 * C785 - C17049 * C779 - C17048 * C786 + C17043 * C794 +
             C17050 * C787 - C17051 * C780 - C17050 * C788 + C17044 * C795 +
             C17052 * C789 - C17053 * C781 - C17052 * C790 + C17045 * C796) *
                C50719 * C50757) *
               C395 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C394 -
           ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 + C17045 * C1098 +
             C17050 * C1092 - C17051 * C1087 - C17050 * C1093 + C17044 * C1099 +
             C17048 * C1094 - C17049 * C1088 - C17048 * C1095 +
             C17043 * C1100) *
                C50719 * C50757 +
            (C17052 * C421 - C17053 * C404 - C17052 * C422 + C17045 * C434 +
             C17050 * C419 - C17051 * C403 - C17050 * C420 + C17044 * C433 +
             C17048 * C417 - C17049 * C402 - C17048 * C418 + C17043 * C432) *
                C50719 * C17046) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           (C19865 * C272 - C19866 * C259 - C19865 * C273 + C50556 * C289) *
               C50719 * C19862 +
           (C19865 * C274 - C19866 * C260 - C19865 * C275 + C50556 * C290) *
               C50719 * C19863 +
           (C19865 * C982 - C19866 * C975 - C19865 * C983 + C50556 * C987) *
               C50719 * C19864) *
              C50621 * C50605 * C113 -
          ((C19865 * C980 - C19866 * C974 - C19865 * C981 + C50556 * C986) *
               C50719 * C19864 +
           (C19865 * C276 - C19866 * C261 - C19865 * C277 + C50556 * C291) *
               C50719 * C19863 +
           (C19865 * C270 - C19866 * C258 - C19865 * C271 + C50556 * C288) *
               C50719 * C19862 +
           (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
               C50719 * C19861) *
              C50621 * C50605 * C114 +
          ((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
               C50719 * C19861 +
           (C19865 * C268 - C19866 * C257 - C19865 * C269 + C50556 * C287) *
               C50719 * C19862 +
           (C19865 * C278 - C19866 * C262 - C19865 * C279 + C50556 * C292) *
               C50719 * C19863 +
           (C19865 * C978 - C19866 * C973 - C19865 * C979 + C50556 * C985) *
               C50719 * C19864) *
              C50621 * C50605 * C115 -
          ((C19865 * C976 - C19866 * C972 - C19865 * C977 + C50556 * C984) *
               C50719 * C19864 +
           (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
               C50719 * C19863 +
           (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
               C50719 * C19862 +
           (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
               C50719 * C19861) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C251 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C252 +
           (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            (C19865 * C3403 - C19866 * C3400 - C19865 * C3404 +
             C50556 * C3406) *
                C50719 * C19864) *
               C50621 * C253) *
              C254 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C252 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C251 -
           ((C19865 * C3401 - C19866 * C3399 - C19865 * C3402 +
             C50556 * C3405) *
                C50719 * C19864 +
            C20029 * C19863 + C20028 * C19862 + C20027 * C19861) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C394 -
           ((C19865 * C3090 - C19866 * C3087 - C19865 * C3091 +
             C50556 * C3096) *
                C50719 * C19864 +
            (C19865 * C1443 - C19866 * C1436 - C19865 * C1444 +
             C50556 * C1448) *
                C50719 * C19863 +
            (C19865 * C783 - C19866 * C778 - C19865 * C784 + C50556 * C793) *
                C50719 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C395 +
           ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C50719 * C19861 +
            (C19865 * C1096 - C19866 * C1089 - C19865 * C1097 +
             C50556 * C1101) *
                C50719 * C19862 +
            (C19865 * C2564 - C19866 * C2561 - C19865 * C2565 +
             C50556 * C2570) *
                C50719 * C19863 +
            (C19865 * C3573 - C19866 * C3570 - C19865 * C3574 +
             C50556 * C3576) *
                C50719 * C19864) *
               C396) *
              C50605 * C254 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            (C19865 * C785 - C19866 * C779 - C19865 * C786 + C50556 * C794) *
                C50719 * C19862 +
            (C19865 * C1441 - C19866 * C1435 - C19865 * C1442 +
             C50556 * C1447) *
                C50719 * C19863 +
            (C19865 * C3092 - C19866 * C3088 - C19865 * C3093 +
             C50556 * C3097) *
                C50719 * C19864) *
               C395 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C394 -
           ((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
             C50556 * C3575) *
                C50719 * C19864 +
            (C19865 * C2566 - C19866 * C2562 - C19865 * C2567 +
             C50556 * C2571) *
                C50719 * C19863 +
            (C19865 * C1094 - C19866 * C1088 - C19865 * C1095 +
             C50556 * C1100) *
                C50719 * C19862 +
            (C19865 * C417 - C19866 * C402 - C19865 * C418 + C50556 * C432) *
                C50719 * C19861) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50831 -
           ((C17052 * C787 - C17053 * C780 - C17052 * C788 + C17045 * C795 +
             C17050 * C785 - C17051 * C779 - C17050 * C786 + C17044 * C794 +
             C17048 * C783 - C17049 * C778 - C17048 * C784 + C17043 * C793) *
                C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C50605 * C50873 +
          (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                C50719 * C17046 +
            (C17048 * C785 - C17049 * C779 - C17048 * C786 + C17043 * C794 +
             C17050 * C787 - C17051 * C780 - C17050 * C788 + C17044 * C795 +
             C17052 * C789 - C17053 * C781 - C17052 * C790 + C17045 * C796) *
                C50719 * C50757) *
               C50685 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50831) *
              C50605 * C50874 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C50831 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50719 * C50757 +
            (C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435 +
             C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
             C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428) *
                C50719 * C17046) *
               C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50831 -
           ((C19865 * C3090 - C19866 * C3087 - C19865 * C3091 +
             C50556 * C3096) *
                C50719 * C19864 +
            (C19865 * C1443 - C19866 * C1436 - C19865 * C1444 +
             C50556 * C1448) *
                C50719 * C19863 +
            (C19865 * C783 - C19866 * C778 - C19865 * C784 + C50556 * C793) *
                C50719 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C50605 * C50873 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            (C19865 * C785 - C19866 * C779 - C19865 * C786 + C50556 * C794) *
                C50719 * C19862 +
            (C19865 * C1441 - C19866 * C1435 - C19865 * C1442 +
             C50556 * C1447) *
                C50719 * C19863 +
            (C19865 * C3092 - C19866 * C3088 - C19865 * C3093 +
             C50556 * C3097) *
                C50719 * C19864) *
               C50685 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50831) *
              C50605 * C50874 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C50831 -
           ((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
             C50556 * C3098) *
                C50719 * C19864 +
            (C19865 * C1439 - C19866 * C1434 - C19865 * C1440 +
             C50556 * C1446) *
                C50719 * C19863 +
            (C19865 * C787 - C19866 * C780 - C19865 * C788 + C50556 * C795) *
                C50719 * C19862 +
            (C19865 * C409 - C19866 * C398 - C19865 * C410 + C50556 * C428) *
                C50719 * C19861) *
               C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C50719 * C17046 +
           (C17048 * C272 - C17049 * C259 - C17048 * C273 + C17043 * C289 +
            C17050 * C270 - C17051 * C258 - C17050 * C271 + C17044 * C288 +
            C17052 * C268 - C17053 * C257 - C17052 * C269 + C17045 * C287) *
               C50719 * C50757) *
              C50621 * C50605 * C113 -
          ((C17052 * C266 - C17053 * C256 - C17052 * C267 + C17045 * C286 +
            C17050 * C268 - C17051 * C257 - C17050 * C269 + C17044 * C287 +
            C17048 * C270 - C17049 * C258 - C17048 * C271 + C17043 * C288) *
               C50719 * C50757 +
           (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
            C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
            C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
               C50719 * C17046) *
              C50621 * C50605 * C114 +
          ((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
            C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
            C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
               C50719 * C17046 +
           (C17048 * C268 - C17049 * C257 - C17048 * C269 + C17043 * C287 +
            C17050 * C266 - C17051 * C256 - C17050 * C267 + C17044 * C286 +
            C17052 * C282 - C17053 * C264 - C17052 * C283 + C17045 * C294) *
               C50719 * C50757) *
              C50621 * C50605 * C115 -
          ((C17052 * C541 - C17053 * C540 - C17052 * C542 + C17045 * C543 +
            C17050 * C282 - C17051 * C264 - C17050 * C283 + C17044 * C294 +
            C17048 * C266 - C17049 * C256 - C17048 * C267 + C17043 * C286) *
               C50719 * C50757 +
           (C17052 * C142 - C17053 * C130 - C17052 * C143 + C17045 * C151 +
            C17050 * C140 - C17051 * C129 - C17050 * C141 + C17044 * C150 +
            C17048 * C138 - C17049 * C128 - C17048 * C139 + C17043 * C149) *
               C50719 * C17046) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C251 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C252 +
           ((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C17048 * C982 - C17049 * C975 - C17048 * C983 + C17043 * C987 +
             C17050 * C980 - C17051 * C974 - C17050 * C981 + C17044 * C986 +
             C17052 * C978 - C17053 * C973 - C17052 * C979 + C17045 * C985) *
                C50719 * C50757) *
               C50621 * C253) *
              C254 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C252 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C251 -
           ((C17052 * C976 - C17053 * C972 - C17052 * C977 + C17045 * C984 +
             C17050 * C978 - C17051 * C973 - C17050 * C979 + C17044 * C985 +
             C17048 * C980 - C17049 * C974 - C17048 * C981 + C17043 * C986) *
                C50719 * C50757 +
            (C17284 + C17283 + C17282) * C50719 * C17046) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           (C19865 * C272 - C19866 * C259 - C19865 * C273 + C50556 * C289) *
               C50719 * C19862 +
           (C19865 * C274 - C19866 * C260 - C19865 * C275 + C50556 * C290) *
               C50719 * C19863 +
           (C19865 * C982 - C19866 * C975 - C19865 * C983 + C50556 * C987) *
               C50719 * C19864) *
              C50621 * C50605 * C113 -
          ((C19865 * C980 - C19866 * C974 - C19865 * C981 + C50556 * C986) *
               C50719 * C19864 +
           (C19865 * C276 - C19866 * C261 - C19865 * C277 + C50556 * C291) *
               C50719 * C19863 +
           (C19865 * C270 - C19866 * C258 - C19865 * C271 + C50556 * C288) *
               C50719 * C19862 +
           (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
               C50719 * C19861) *
              C50621 * C50605 * C114 +
          ((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
               C50719 * C19861 +
           (C19865 * C268 - C19866 * C257 - C19865 * C269 + C50556 * C287) *
               C50719 * C19862 +
           (C19865 * C278 - C19866 * C262 - C19865 * C279 + C50556 * C292) *
               C50719 * C19863 +
           (C19865 * C978 - C19866 * C973 - C19865 * C979 + C50556 * C985) *
               C50719 * C19864) *
              C50621 * C50605 * C115 -
          ((C19865 * C976 - C19866 * C972 - C19865 * C977 + C50556 * C984) *
               C50719 * C19864 +
           (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
               C50719 * C19863 +
           (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
               C50719 * C19862 +
           (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
               C50719 * C19861) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C251 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C252 +
           (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            (C19865 * C3403 - C19866 * C3400 - C19865 * C3404 +
             C50556 * C3406) *
                C50719 * C19864) *
               C50621 * C253) *
              C254 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C252 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C251 -
           ((C19865 * C3401 - C19866 * C3399 - C19865 * C3402 +
             C50556 * C3405) *
                C50719 * C19864 +
            C20029 * C19863 + C20028 * C19862 + C20027 * C19861) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C50875 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C50876 +
           ((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C18242 + C18243 + C18244) * C50719 * C50757) *
               C50621 * C1202) *
              C50822 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C50876 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C50875 -
           ((C17052 * C976 - C17053 * C972 - C17052 * C977 + C17045 * C984 +
             C17050 * C978 - C17051 * C973 - C17050 * C979 + C17044 * C985 +
             C17048 * C980 - C17049 * C974 - C17048 * C981 + C17043 * C986) *
                C50719 * C50757 +
            (C17284 + C17283 + C17282) * C50719 * C17046) *
               C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C50875 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C50876 +
           (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            C20701 * C19864) *
               C50621 * C1202) *
              C50822 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C50876 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C50875 -
           ((C19865 * C3401 - C19866 * C3399 - C19865 * C3402 +
             C50556 * C3405) *
                C50719 * C19864 +
            C20029 * C19863 + C20028 * C19862 + C20027 * C19861) *
               C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50831 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C50875 +
          (((C17976 + C17975 + C17974) * C50719 * C17046 +
            (C18916 + C18917 + C18918) * C50719 * C50757) *
               C50685 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50831) *
              C50876 +
          (((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C18242 + C18243 + C18244) * C50719 * C50757) *
               C50831 -
           ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 + C17045 * C3098 +
             C17050 * C3092 - C17051 * C3088 - C17050 * C3093 + C17044 * C3097 +
             C17048 * C3090 - C17049 * C3087 - C17048 * C3091 +
             C17043 * C3096) *
                C50719 * C50757 +
            (C18918 + C18917 + C18916) * C50719 * C17046) *
               C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50831 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C50875 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            C21165 * C19864) *
               C50685 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50831) *
              C50876 +
          ((C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            C20701 * C19864) *
               C50831 -
           ((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50719 * C19864 +
            C21165 * C19863 + C20520 * C19862 + C20521 * C19861) *
               C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C50719 * C17046 +
           (C17273 + C17274 + C17275) * C50719 * C50757) *
              C50621 * C967 -
          ((C17276 + C17277 + C17278) * C50719 * C50757 +
           (C17275 + C17274 + C17273) * C50719 * C17046) *
              C50621 * C968 +
          ((C17278 + C17277 + C17276) * C50719 * C17046 +
           (C18242 + C18243 + C18244) * C50719 * C50757) *
              C50621 * C969 -
          ((C17052 * C2322 - C17053 * C2317 - C17052 * C2323 + C17045 * C2326 +
            C17050 * C2320 - C17051 * C2316 - C17050 * C2321 + C17044 * C2325 +
            C17048 * C2318 - C17049 * C2315 - C17048 * C2319 + C17043 * C2324) *
               C50719 * C50757 +
           (C18244 + C18243 + C18242) * C50719 * C17046) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C896 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C50657) *
              C898 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C50657 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C896) *
              C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C50621 * C896 -
           ((C17052 * C284 - C17053 * C265 - C17052 * C285 + C17045 * C295 +
             C17050 * C280 - C17051 * C263 - C17050 * C281 + C17044 * C293 +
             C17048 * C278 - C17049 * C262 - C17048 * C279 + C17043 * C292) *
                C50719 * C50757 +
            (C17597 + C17596 + C17595) * C50719 * C17046) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C394 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C395 +
           ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
             C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
             C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
                C50719 * C17046 +
            (C18409 + C18410 + C18411) * C50719 * C50757) *
               C396) *
              C896 +
          (((C17976 + C17975 + C17974) * C50719 * C17046 +
            (C17048 * C1443 - C17049 * C1436 - C17048 * C1444 + C17043 * C1448 +
             C17050 * C1441 - C17051 * C1435 - C17050 * C1442 + C17044 * C1447 +
             C17052 * C1439 - C17053 * C1434 - C17052 * C1440 +
             C17045 * C1446) *
                C50719 * C50757) *
               C395 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C394 -
           ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 + C17045 * C2572 +
             C17050 * C2566 - C17051 * C2562 - C17050 * C2567 + C17044 * C2571 +
             C17048 * C2564 - C17049 * C2561 - C17048 * C2565 +
             C17043 * C2570) *
                C50719 * C50757 +
            (C18411 + C18410 + C18409) * C50719 * C17046) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C896 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C50657) *
              C898 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C50657 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C896) *
              C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C50621 * C896 -
           ((C19865 * C2322 - C19866 * C2317 - C19865 * C2323 +
             C50556 * C2326) *
                C50719 * C19864 +
            C20249 * C19863 + C20248 * C19862 + C20247 * C19861) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
              C50621 * C967 -
          (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
           C20022 * C19861) *
              C50621 * C968 +
          (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
           C20701 * C19864) *
              C50621 * C969 -
          ((C19865 * C20690 - C19866 * C20689 - C19865 * C20691 +
            C50556 * C20692) *
               C50719 * C19864 +
           C20701 * C19863 + C20025 * C19862 + C20024 * C19861) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C394 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C395 +
           ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C50719 * C19861 +
            C20825 * C19862 + C20826 * C19863 + C20827 * C19864) *
               C396) *
              C896 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            (C19865 * C4095 - C19866 * C4092 - C19865 * C4096 +
             C50556 * C4098) *
                C50719 * C19864) *
               C395 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C394 -
           ((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
             C50556 * C20802) *
                C50719 * C19864 +
            C20827 * C19863 + C20826 * C19862 + C20825 * C19861) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C50719 * C17046 +
             (C17273 + C17274 + C17275) * C50719 * C50757) *
                C50831 -
            ((C17974 + C17975 + C17976) * C50719 * C50757 +
             (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
              C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
              C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                 C50719 * C17046) *
                C50685) *
               C896 +
           (((C17976 + C17975 + C17974) * C50719 * C17046 +
             (C17048 * C1443 - C17049 * C1436 - C17048 * C1444 +
              C17043 * C1448 + C17050 * C1441 - C17051 * C1435 -
              C17050 * C1442 + C17044 * C1447 + C17052 * C1439 -
              C17053 * C1434 - C17052 * C1440 + C17045 * C1446) *
                 C50719 * C50757) *
                C50685 -
            ((C17276 + C17277 + C17278) * C50719 * C50757 +
             (C17275 + C17274 + C17273) * C50719 * C17046) *
                C50831) *
               C50657) *
              C50822 +
          ((((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
              C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
              C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                 C50719 * C17046 +
             (C17977 + C17978 + C17979) * C50719 * C50757) *
                C50685 -
            ((C17281 + C17280 + C17279) * C50719 * C50757 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C50719 * C17046) *
                C50831) *
               C896 +
           (((C17279 + C17280 + C17281) * C50719 * C17046 +
             (C17282 + C17283 + C17284) * C50719 * C50757) *
                C50831 -
            ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 +
              C17045 * C1445 + C17050 * C1439 - C17051 * C1434 -
              C17050 * C1440 + C17044 * C1446 + C17048 * C1441 -
              C17049 * C1435 - C17048 * C1442 + C17043 * C1447) *
                 C50719 * C50757 +
             (C17979 + C17978 + C17977) * C50719 * C17046) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50719 * C19861 +
             C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
                C50831 -
            (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
             (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                 C50719 * C19861) *
                C50685) *
               C896 +
           ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
             (C19865 * C4095 - C19866 * C4092 - C19865 * C4096 +
              C50556 * C4098) *
                 C50719 * C19864) *
                C50685 -
            (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
             C20022 * C19861) *
                C50831) *
               C50657) *
              C50822 +
          ((((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                 C50719 * C19861 +
             C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
                C50685 -
            (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50719 * C19861) *
                C50831) *
               C896 +
           ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
             C20029 * C19864) *
                C50831 -
            ((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50719 * C19864 +
             C20525 * C19863 + C20524 * C19862 + C20523 * C19861) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50621 * C896 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50621 * C50657) *
              C898 +
          (((C17279 + C17280 + C17281) * C50719 * C17046 +
            (C17282 + C17283 + C17284) * C50719 * C50757) *
               C50621 * C50657 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50621 * C896) *
              C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C50621 * C896 -
           ((C17052 * C284 - C17053 * C265 - C17052 * C285 + C17045 * C295 +
             C17050 * C280 - C17051 * C263 - C17050 * C281 + C17044 * C293 +
             C17048 * C278 - C17049 * C262 - C17048 * C279 + C17043 * C292) *
                C50719 * C50757 +
            (C17597 + C17596 + C17595) * C50719 * C17046) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C50719 * C17046 +
           (C17273 + C17274 + C17275) * C50719 * C50757) *
              C50621 * C967 -
          ((C17276 + C17277 + C17278) * C50719 * C50757 +
           (C17275 + C17274 + C17273) * C50719 * C17046) *
              C50621 * C968 +
          ((C17278 + C17277 + C17276) * C50719 * C17046 +
           (C18242 + C18243 + C18244) * C50719 * C50757) *
              C50621 * C969 -
          ((C17052 * C2322 - C17053 * C2317 - C17052 * C2323 + C17045 * C2326 +
            C17050 * C2320 - C17051 * C2316 - C17050 * C2321 + C17044 * C2325 +
            C17048 * C2318 - C17049 * C2315 - C17048 * C2319 + C17043 * C2324) *
               C50719 * C50757 +
           (C18244 + C18243 + C18242) * C50719 * C17046) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50621 * C896 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50621 * C50657) *
              C898 +
          ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
            C20029 * C19864) *
               C50621 * C50657 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50621 * C896) *
              C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C50621 * C896 -
           ((C19865 * C2322 - C19866 * C2317 - C19865 * C2323 +
             C50556 * C2326) *
                C50719 * C19864 +
            C20249 * C19863 + C20248 * C19862 + C20247 * C19861) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
              C50621 * C967 -
          (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
           C20022 * C19861) *
              C50621 * C968 +
          (C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
           C20701 * C19864) *
              C50621 * C969 -
          ((C19865 * C20690 - C19866 * C20689 - C19865 * C20691 +
            C50556 * C20692) *
               C50719 * C19864 +
           C20701 * C19863 + C20025 * C19862 + C20024 * C19861) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C50719 * C17046 +
             (C17273 + C17274 + C17275) * C50719 * C50757) *
                C1547 -
            ((C17974 + C17975 + C17976) * C50719 * C50757 +
             (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
              C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
              C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                 C50719 * C17046) *
                C50685) *
               C50830 +
           (((C17976 + C17975 + C17974) * C50719 * C17046 +
             (C18916 + C18917 + C18918) * C50719 * C50757) *
                C50685 -
            ((C17276 + C17277 + C17278) * C50719 * C50757 +
             (C17275 + C17274 + C17273) * C50719 * C17046) *
                C1547) *
               C50657) *
              C50822 +
          ((((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
              C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
              C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                 C50719 * C17046 +
             (C17977 + C17978 + C17979) * C50719 * C50757) *
                C50685 -
            ((C17281 + C17280 + C17279) * C50719 * C50757 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C50719 * C17046) *
                C1547) *
               C50830 +
           (((C17279 + C17280 + C17281) * C50719 * C17046 +
             (C17282 + C17283 + C17284) * C50719 * C50757) *
                C1547 -
            ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 +
              C17045 * C1445 + C17050 * C1439 - C17051 * C1434 -
              C17050 * C1440 + C17044 * C1446 + C17048 * C1441 -
              C17049 * C1435 - C17048 * C1442 + C17043 * C1447) *
                 C50719 * C50757 +
             (C17979 + C17978 + C17977) * C50719 * C17046) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50719 * C19861 +
             C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
                C1547 -
            (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
             (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                 C50719 * C19861) *
                C50685) *
               C50830 +
           ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
             C21165 * C19864) *
                C50685 -
            (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
             C20022 * C19861) *
                C1547) *
               C50657) *
              C50822 +
          ((((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                 C50719 * C19861 +
             C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
                C50685 -
            (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50719 * C19861) *
                C1547) *
               C50830 +
           ((C20026 * C19861 + C20027 * C19862 + C20028 * C19863 +
             C20029 * C19864) *
                C1547 -
            ((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50719 * C19864 +
             C20525 * C19863 + C20524 * C19862 + C20523 * C19861) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50877 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50878 +
           ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
             C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
             C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
                C50719 * C17046 +
            (C18409 + C18410 + C18411) * C50719 * C50757) *
               C1963) *
              C50830 +
          (((C17976 + C17975 + C17974) * C50719 * C17046 +
            (C18916 + C18917 + C18918) * C50719 * C50757) *
               C50878 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C50877 -
           ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 + C17045 * C2572 +
             C17050 * C2566 - C17051 * C2562 - C17050 * C2567 + C17044 * C2571 +
             C17048 * C2564 - C17049 * C2561 - C17048 * C2565 +
             C17043 * C2570) *
                C50719 * C50757 +
            (C18411 + C18410 + C18409) * C50719 * C17046) *
               C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50877 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50878 +
           ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C50719 * C19861 +
            C20825 * C19862 + C20826 * C19863 + C20827 * C19864) *
               C1963) *
              C50830 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            C21165 * C19864) *
               C50878 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C50877 -
           ((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
             C50556 * C20802) *
                C50719 * C19864 +
            C20827 * C19863 + C20826 * C19862 + C20825 * C19861) *
               C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C1547 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C251 +
          (((C17976 + C17975 + C17974) * C50719 * C17046 +
            (C18916 + C18917 + C18918) * C50719 * C50757) *
               C50685 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C1547) *
              C252 +
          (((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C18242 + C18243 + C18244) * C50719 * C50757) *
               C1547 -
           ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 + C17045 * C3098 +
             C17050 * C3092 - C17051 * C3088 - C17050 * C3093 + C17044 * C3097 +
             C17048 * C3090 - C17049 * C3087 - C17048 * C3091 +
             C17043 * C3096) *
                C50719 * C50757 +
            (C18918 + C18917 + C18916) * C50719 * C17046) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C1547 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C50605 * C898 +
          (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                C50719 * C17046 +
            (C17977 + C17978 + C17979) * C50719 * C50757) *
               C50685 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C1547) *
              C50605 * C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C1547 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50719 * C50757 +
            (C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435 +
             C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
             C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428) *
                C50719 * C17046) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C50719 * C17046 +
           (C17273 + C17274 + C17275) * C50719 * C50757) *
              C1713 -
          ((C17974 + C17975 + C17976) * C50719 * C50757 +
           (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
            C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
            C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
               C50719 * C17046) *
              C1714 +
          ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
            C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
            C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
               C50719 * C17046 +
           (C18409 + C18410 + C18411) * C50719 * C50757) *
              C1715 -
          ((C17052 * C6013 - C17053 * C6012 - C17052 * C6014 + C17045 * C6015 +
            C17050 * C4513 - C17051 * C4507 - C17050 * C4514 + C17044 * C4519 +
            C17048 * C4515 - C17049 * C4508 - C17048 * C4516 + C17043 * C4520) *
               C50719 * C50757 +
           (C17052 * C1723 - C17053 * C1718 - C17052 * C1724 + C17045 * C1730 +
            C17050 * C1725 - C17051 * C1719 - C17050 * C1726 + C17044 * C1731 +
            C17048 * C1727 - C17049 * C1720 - C17048 * C1728 + C17043 * C1732) *
               C50719 * C17046) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C1547 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C50605 * C898 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
               C50685 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C1547) *
              C50605 * C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C1547 -
           ((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
             C50556 * C3098) *
                C50719 * C19864 +
            (C19865 * C1439 - C19866 * C1434 - C19865 * C1440 +
             C50556 * C1446) *
                C50719 * C19863 +
            (C19865 * C787 - C19866 * C780 - C19865 * C788 + C50556 * C795) *
                C50719 * C19862 +
            (C19865 * C409 - C19866 * C398 - C19865 * C410 + C50556 * C428) *
                C50719 * C19861) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C1547 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C251 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            C21165 * C19864) *
               C50685 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C1547) *
              C252 +
          ((C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            C20701 * C19864) *
               C1547 -
           ((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50719 * C19864 +
            C21165 * C19863 + C20520 * C19862 + C20521 * C19861) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C50719 * C19861 +
           C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
              C1713 -
          (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
           (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
               C50719 * C19861) *
              C1714 +
          ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
               C50719 * C19861 +
           C20825 * C19862 + C20826 * C19863 + C20827 * C19864) *
              C1715 -
          ((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
            C50556 * C21430) *
               C50719 * C19864 +
           (C19865 * C4511 - C19866 * C4506 - C19865 * C4512 + C50556 * C4518) *
               C50719 * C19863 +
           (C19865 * C4515 - C19866 * C4508 - C19865 * C4516 + C50556 * C4520) *
               C50719 * C19862 +
           (C19865 * C1727 - C19866 * C1720 - C19865 * C1728 + C50556 * C1732) *
               C50719 * C19861) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C50877 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50878 +
           ((C17048 * C415 - C17049 * C401 - C17048 * C416 + C17043 * C431 +
             C17050 * C417 - C17051 * C402 - C17050 * C418 + C17044 * C432 +
             C17052 * C419 - C17053 * C403 - C17052 * C420 + C17045 * C433) *
                C50719 * C17046 +
            (C18409 + C18410 + C18411) * C50719 * C50757) *
               C1963) *
              C50605 * C50822 +
          (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                C50719 * C17046 +
            (C17977 + C17978 + C17979) * C50719 * C50757) *
               C50878 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C50877 -
           ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 + C17045 * C1098 +
             C17050 * C1092 - C17051 * C1087 - C17050 * C1093 + C17044 * C1099 +
             C17048 * C1094 - C17049 * C1088 - C17048 * C1095 +
             C17043 * C1100) *
                C50719 * C50757 +
            (C17052 * C421 - C17053 * C404 - C17052 * C422 + C17045 * C434 +
             C17050 * C419 - C17051 * C403 - C17050 * C420 + C17044 * C433 +
             C17048 * C417 - C17049 * C402 - C17048 * C418 + C17043 * C432) *
                C50719 * C17046) *
               C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C50877 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50878 +
           ((C19865 * C415 - C19866 * C401 - C19865 * C416 + C50556 * C431) *
                C50719 * C19861 +
            C20825 * C19862 + C20826 * C19863 + C20827 * C19864) *
               C1963) *
              C50605 * C50822 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
               C50878 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C50877 -
           ((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
             C50556 * C3575) *
                C50719 * C19864 +
            (C19865 * C2566 - C19866 * C2562 - C19865 * C2567 +
             C50556 * C2571) *
                C50719 * C19863 +
            (C19865 * C1094 - C19866 * C1088 - C19865 * C1095 +
             C50556 * C1100) *
                C50719 * C19862 +
            (C19865 * C417 - C19866 * C402 - C19865 * C418 + C50556 * C432) *
                C50719 * C19861) *
               C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C1547 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C50605 * C898 +
          (((C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427) *
                C50719 * C17046 +
            (C17977 + C17978 + C17979) * C50719 * C50757) *
               C50685 -
           ((C17281 + C17280 + C17279) * C50719 * C50757 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C50719 * C17046) *
               C1547) *
              C50605 * C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C50719 * C17046 +
            (C17595 + C17596 + C17597) * C50719 * C50757) *
               C1547 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50719 * C50757 +
            (C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435 +
             C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
             C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428) *
                C50719 * C17046) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C50719 * C17046 +
            (C17273 + C17274 + C17275) * C50719 * C50757) *
               C1547 -
           ((C17974 + C17975 + C17976) * C50719 * C50757 +
            (C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430) *
                C50719 * C17046) *
               C50685) *
              C251 +
          (((C17976 + C17975 + C17974) * C50719 * C17046 +
            (C18916 + C18917 + C18918) * C50719 * C50757) *
               C50685 -
           ((C17276 + C17277 + C17278) * C50719 * C50757 +
            (C17275 + C17274 + C17273) * C50719 * C17046) *
               C1547) *
              C252 +
          (((C17278 + C17277 + C17276) * C50719 * C17046 +
            (C18242 + C18243 + C18244) * C50719 * C50757) *
               C1547 -
           ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 + C17045 * C3098 +
             C17050 * C3092 - C17051 * C3088 - C17050 * C3093 + C17044 * C3097 +
             C17048 * C3090 - C17049 * C3087 - C17048 * C3091 +
             C17043 * C3096) *
                C50719 * C50757 +
            (C18918 + C18917 + C18916) * C50719 * C17046) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C1547 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C50605 * C898 +
          (((C19865 * C411 - C19866 * C399 - C19865 * C412 + C50556 * C429) *
                C50719 * C19861 +
            C20523 * C19862 + C20524 * C19863 + C20525 * C19864) *
               C50685 -
           (C20028 * C19864 + C20027 * C19863 + C20026 * C19862 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50719 * C19861) *
               C1547) *
              C50605 * C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50719 * C19861 +
            C20247 * C19862 + C20248 * C19863 + C20249 * C19864) *
               C1547 -
           ((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
             C50556 * C3098) *
                C50719 * C19864 +
            (C19865 * C1439 - C19866 * C1434 - C19865 * C1440 +
             C50556 * C1446) *
                C50719 * C19863 +
            (C19865 * C787 - C19866 * C780 - C19865 * C788 + C50556 * C795) *
                C50719 * C19862 +
            (C19865 * C409 - C19866 * C398 - C19865 * C410 + C50556 * C428) *
                C50719 * C19861) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50719 * C19861 +
            C20022 * C19862 + C20023 * C19863 + C20024 * C19864) *
               C1547 -
           (C20520 * C19864 + C20521 * C19863 + C20522 * C19862 +
            (C19865 * C413 - C19866 * C400 - C19865 * C414 + C50556 * C430) *
                C50719 * C19861) *
               C50685) *
              C251 +
          ((C20522 * C19861 + C20521 * C19862 + C20520 * C19863 +
            C21165 * C19864) *
               C50685 -
           (C20025 * C19864 + C20024 * C19863 + C20023 * C19862 +
            C20022 * C19861) *
               C1547) *
              C252 +
          ((C20023 * C19861 + C20024 * C19862 + C20025 * C19863 +
            C20701 * C19864) *
               C1547 -
           ((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50719 * C19864 +
            C21165 * C19863 + C20520 * C19862 + C20521 * C19861) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50621 * C50830 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C50621 * C50657) *
              C50873 +
          ((((C24874 + C24875) * C33805 + C28676 * C50783) * C50843 +
            ((C24876 + C24877) * C33805 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C50657 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C50621 * C50830) *
              C50874 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C33805 +
             (C28414 + C28415) * C50783) *
                C50843 +
            ((C25200 + C25201) * C33805 + (C28206 + C28207) * C50783) *
                C50757) *
               C50621 * C50830 -
           (((C49777 * C1437 - C24648 * C1433 - C49777 * C1438 +
              C50561 * C1445 + C49784 * C1439 - C24646 * C1434 -
              C49784 * C1440 + C50815 * C1446) *
                 C50783 +
             (C25203 + C25202) * C33805) *
                C50757 +
            ((C28207 + C28206) * C50783 + (C25201 + C25200) * C33805) *
                C50843) *
               C50621 * C50657) *
              C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
               C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                  C33805 +
              (C27990 + C27991) * C50783) *
                 C50843 +
             ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
                C50831 -
            ((C29196 * C50783 + C28675 * C33805) * C50757 +
             ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                 C50843) *
                C50685) *
               C50830 +
           (((C28674 * C33805 + C29197 * C50783) * C50843 +
             (C29858 * C33805 + (C26032 + C26033) * C50783) * C50757) *
                C50685 -
            ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
             (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
                C50831) *
               C50657) *
              C254 +
          (((((C27994 + C27995) * C33805 + (C27996 + C27997) * C50783) *
                 C50843 +
             (C28676 * C33805 + (C27998 + C27999) * C50783) * C50757) *
                C50685 -
            ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
             ((C27995 + C27994) * C50783 +
              (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
               C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                  C33805) *
                 C50843) *
                C50831) *
               C50830 +
           ((((C24874 + C24875) * C33805 + C28676 * C50783) * C50843 +
             ((C24876 + C24877) * C33805 + (C25598 + C25599) * C50783) *
                 C50757) *
                C50831 -
            (((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 +
               C50561 * C2572 + C49784 * C2566 - C24646 * C2562 -
               C49784 * C2567 + C50815 * C2571) *
                  C50783 +
              (C25599 + C25598) * C33805) *
                 C50757 +
             ((C27999 + C27998) * C50783 + C28677 * C33805) * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50621 * C251 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C50621 * C252 +
           ((C24880 * C33805 + C29858 * C50783) * C50843 +
            ((C24873 + C24872) * C33805 + (C26534 + C26535) * C50783) *
                C50757) *
               C50621 * C253) *
              C254 +
          ((((C24874 + C24875) * C33805 + C28676 * C50783) * C50843 +
            ((C24876 + C24877) * C33805 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C252 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C50621 * C251 -
           (((C49777 * C3094 - C24648 * C3089 - C49777 * C3095 +
              C50561 * C3098 + C49784 * C3092 - C24646 * C3088 -
              C49784 * C3093 + C50815 * C3097) *
                 C50783 +
             (C24879 + C24878) * C33805) *
                C50757 +
            ((C25599 + C25598) * C50783 + C24881 * C33805) * C50843) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C33805 +
            (C27990 + C27991) * C50783) *
               C50843 +
           ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
              C50621 * C50605 * C113 -
          ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
           ((C27995 + C27994) * C50783 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C33805) *
               C50843) *
              C50621 * C50605 * C114 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C33805 +
            (C28414 + C28415) * C50783) *
               C50843 +
           ((C25200 + C25201) * C33805 + (C28206 + C28207) * C50783) * C50757) *
              C50621 * C50605 * C115 -
          (((C49777 * C791 - C24648 * C782 - C49777 * C792 + C50561 * C797 +
             C49784 * C789 - C24646 * C781 - C49784 * C790 + C50815 * C796) *
                C50783 +
            (C49777 * C282 - C24648 * C264 - C49777 * C283 + C50561 * C294 +
             C49784 * C266 - C24646 * C256 - C49784 * C267 + C50815 * C286) *
                C33805) *
               C50757 +
           ((C49777 * C423 - C24648 * C405 - C49777 * C424 + C50561 * C435 +
             C49784 * C407 - C24646 * C397 - C49784 * C408 + C50815 * C427) *
                C50783 +
            (C49777 * C140 - C24648 * C129 - C49777 * C141 + C50561 * C150 +
             C49784 * C138 - C24646 * C128 - C49784 * C139 + C50815 * C149) *
                C33805) *
               C50843) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C394 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C395 +
           (((C27993 + C27992) * C33805 + (C30389 + C30390) * C50783) * C50843 +
            (C29197 * C33805 + (C29210 + C29211) * C50783) * C50757) *
               C396) *
              C50605 * C254 +
          ((((C27994 + C27995) * C33805 + (C27996 + C27997) * C50783) * C50843 +
            (C28676 * C33805 + (C27998 + C27999) * C50783) * C50757) *
               C395 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C394 -
           (((C49777 * C6013 - C24648 * C6012 - C49777 * C6014 +
              C50561 * C6015 + C49784 * C4513 - C24646 * C4507 -
              C49784 * C4514 + C50815 * C4519) *
                 C50783 +
             (C27999 + C27998) * C33805) *
                C50757 +
            ((C49777 * C1723 - C24648 * C1718 - C49777 * C1724 +
              C50561 * C1730 + C49784 * C1725 - C24646 * C1719 -
              C49784 * C1726 + C50815 * C1731) *
                 C50783 +
             (C27997 + C27996) * C33805) *
                C50843) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50831 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C50685) *
              C50605 * C50873 +
          ((((C27994 + C27995) * C33805 + (C27996 + C27997) * C50783) * C50843 +
            (C28676 * C33805 + (C27998 + C27999) * C50783) * C50757) *
               C50685 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C50831) *
              C50605 * C50874 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C33805 +
             (C28414 + C28415) * C50783) *
                C50843 +
            ((C25200 + C25201) * C33805 + (C28206 + C28207) * C50783) *
                C50757) *
               C50831 -
           (((C49777 * C1090 - C24648 * C1086 - C49777 * C1091 +
              C50561 * C1098 + C49784 * C1092 - C24646 * C1087 -
              C49784 * C1093 + C50815 * C1099) *
                 C50783 +
             (C28207 + C28206) * C33805) *
                C50757 +
            ((C49777 * C421 - C24648 * C404 - C49777 * C422 + C50561 * C434 +
              C49784 * C419 - C24646 * C403 - C49784 * C420 + C50815 * C433) *
                 C50783 +
             (C28415 + C28414) * C33805) *
                C50843) *
               C50685) *
              C50605 * C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C33805 +
            (C27990 + C27991) * C50783) *
               C50843 +
           ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
              C50621 * C50605 * C113 -
          ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
           ((C27995 + C27994) * C50783 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C33805) *
               C50843) *
              C50621 * C50605 * C114 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C33805 +
            (C28414 + C28415) * C50783) *
               C50843 +
           ((C25200 + C25201) * C33805 + (C28206 + C28207) * C50783) * C50757) *
              C50621 * C50605 * C115 -
          (((C49777 * C791 - C24648 * C782 - C49777 * C792 + C50561 * C797 +
             C49784 * C789 - C24646 * C781 - C49784 * C790 + C50815 * C796) *
                C50783 +
            (C49777 * C282 - C24648 * C264 - C49777 * C283 + C50561 * C294 +
             C49784 * C266 - C24646 * C256 - C49784 * C267 + C50815 * C286) *
                C33805) *
               C50757 +
           ((C49777 * C423 - C24648 * C405 - C49777 * C424 + C50561 * C435 +
             C49784 * C407 - C24646 * C397 - C49784 * C408 + C50815 * C427) *
                C50783 +
            (C49777 * C140 - C24648 * C129 - C49777 * C141 + C50561 * C150 +
             C49784 * C138 - C24646 * C128 - C49784 * C139 + C50815 * C149) *
                C33805) *
               C50843) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50621 * C251 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C50621 * C252 +
           ((C24880 * C33805 + C29858 * C50783) * C50843 +
            ((C24873 + C24872) * C33805 + (C26534 + C26535) * C50783) *
                C50757) *
               C50621 * C253) *
              C254 +
          ((((C24874 + C24875) * C33805 + C28676 * C50783) * C50843 +
            ((C24876 + C24877) * C33805 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C252 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C50621 * C251 -
           (((C49777 * C3094 - C24648 * C3089 - C49777 * C3095 +
              C50561 * C3098 + C49784 * C3092 - C24646 * C3088 -
              C49784 * C3093 + C50815 * C3097) *
                 C50783 +
             (C24879 + C24878) * C33805) *
                C50757 +
            ((C25599 + C25598) * C50783 + C24881 * C33805) * C50843) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50621 * C50875 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C50621 * C50876 +
           ((C24880 * C33805 + C29858 * C50783) * C50843 +
            ((C24873 + C24872) * C33805 + (C26534 + C26535) * C50783) *
                C50757) *
               C50621 * C1202) *
              C50822 +
          ((((C24874 + C24875) * C33805 + C28676 * C50783) * C50843 +
            ((C24876 + C24877) * C33805 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C50876 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C50621 * C50875 -
           (((C49777 * C3094 - C24648 * C3089 - C49777 * C3095 +
              C50561 * C3098 + C49784 * C3092 - C24646 * C3088 -
              C49784 * C3093 + C50815 * C3097) *
                 C50783 +
             (C24879 + C24878) * C33805) *
                C50757 +
            ((C25599 + C25598) * C50783 + C24881 * C33805) * C50843) *
               C50621 * C1202) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50831 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C50685) *
              C50875 +
          (((C28674 * C33805 + C29197 * C50783) * C50843 +
            (C29858 * C33805 + (C26032 + C26033) * C50783) * C50757) *
               C50685 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C50831) *
              C50876 +
          (((C24880 * C33805 + C29858 * C50783) * C50843 +
            ((C24873 + C24872) * C33805 + (C26534 + C26535) * C50783) *
                C50757) *
               C50831 -
           (((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 +
              C50561 * C3575 + C49784 * C3573 - C24646 * C3570 -
              C49784 * C3574 + C50815 * C3576) *
                 C50783 +
             (C26535 + C26534) * C33805) *
                C50757 +
            ((C26033 + C26032) * C50783 + C26520 * C33805) * C50843) *
               C50685) *
              C1202) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C33805 +
            (C27990 + C27991) * C50783) *
               C50843 +
           ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
              C50621 * C967 -
          ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
           (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
              C50621 * C968 +
          ((C24880 * C33805 + C29858 * C50783) * C50843 +
           ((C24873 + C24872) * C33805 + (C26534 + C26535) * C50783) * C50757) *
              C50621 * C969 -
          (((C49777 * C4093 - C24648 * C4091 - C49777 * C4094 + C50561 * C4097 +
             C49784 * C4095 - C24646 * C4092 - C49784 * C4096 +
             C50815 * C4098) *
                C50783 +
            (C25859 + C25858) * C33805) *
               C50757 +
           ((C26535 + C26534) * C50783 + C25844 * C33805) * C50843) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50621 * C896 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C50621 * C50657) *
              C898 +
          ((((C24874 + C24875) * C33805 + C28676 * C50783) * C50843 +
            ((C24876 + C24877) * C33805 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C50657 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C50621 * C896) *
              C899 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C33805 +
             (C28414 + C28415) * C50783) *
                C50843 +
            ((C25200 + C25201) * C33805 + (C28206 + C28207) * C50783) *
                C50757) *
               C50621 * C896 -
           (((C49777 * C1437 - C24648 * C1433 - C49777 * C1438 +
              C50561 * C1445 + C49784 * C1439 - C24646 * C1434 -
              C49784 * C1440 + C50815 * C1446) *
                 C50783 +
             (C25203 + C25202) * C33805) *
                C50757 +
            ((C28207 + C28206) * C50783 + (C25201 + C25200) * C33805) *
                C50843) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C394 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C395 +
           (((C27993 + C27992) * C33805 + (C30389 + C30390) * C50783) * C50843 +
            (C29197 * C33805 + (C29210 + C29211) * C50783) * C50757) *
               C396) *
              C896 +
          (((C28674 * C33805 + C29197 * C50783) * C50843 +
            (C29858 * C33805 + (C26032 + C26033) * C50783) * C50757) *
               C395 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C394 -
           (((C49777 * C4509 - C24648 * C4505 - C49777 * C4510 +
              C50561 * C4517 + C49784 * C4511 - C24646 * C4506 -
              C49784 * C4512 + C50815 * C4518) *
                 C50783 +
             (C26033 + C26032) * C33805) *
                C50757 +
            ((C29211 + C29210) * C50783 + C29196 * C33805) * C50843) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
               C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                  C33805 +
              (C27990 + C27991) * C50783) *
                 C50843 +
             ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
                C50831 -
            ((C29196 * C50783 + C28675 * C33805) * C50757 +
             ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                 C50843) *
                C50685) *
               C896 +
           (((C28674 * C33805 + C29197 * C50783) * C50843 +
             (C29858 * C33805 + (C26032 + C26033) * C50783) * C50757) *
                C50685 -
            ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
             (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
                C50831) *
               C50657) *
              C50822 +
          (((((C27994 + C27995) * C33805 + (C27996 + C27997) * C50783) *
                 C50843 +
             (C28676 * C33805 + (C27998 + C27999) * C50783) * C50757) *
                C50685 -
            ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
             ((C27995 + C27994) * C50783 +
              (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
               C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                  C33805) *
                 C50843) *
                C50831) *
               C896 +
           ((((C24874 + C24875) * C33805 + C28676 * C50783) * C50843 +
             ((C24876 + C24877) * C33805 + (C25598 + C25599) * C50783) *
                 C50757) *
                C50831 -
            (((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 +
               C50561 * C2572 + C49784 * C2566 - C24646 * C2562 -
               C49784 * C2567 + C50815 * C2571) *
                  C50783 +
              (C25599 + C25598) * C33805) *
                 C50757 +
             ((C27999 + C27998) * C50783 + C28677 * C33805) * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50621 * C896 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C50621 * C50657) *
              C898 +
          ((((C24874 + C24875) * C33805 + C28676 * C50783) * C50843 +
            ((C24876 + C24877) * C33805 + (C25598 + C25599) * C50783) *
                C50757) *
               C50621 * C50657 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C50621 * C896) *
              C899 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C33805 +
             (C28414 + C28415) * C50783) *
                C50843 +
            ((C25200 + C25201) * C33805 + (C28206 + C28207) * C50783) *
                C50757) *
               C50621 * C896 -
           (((C49777 * C1437 - C24648 * C1433 - C49777 * C1438 +
              C50561 * C1445 + C49784 * C1439 - C24646 * C1434 -
              C49784 * C1440 + C50815 * C1446) *
                 C50783 +
             (C25203 + C25202) * C33805) *
                C50757 +
            ((C28207 + C28206) * C50783 + (C25201 + C25200) * C33805) *
                C50843) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C33805 +
            (C27990 + C27991) * C50783) *
               C50843 +
           ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
              C50621 * C967 -
          ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
           (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
              C50621 * C968 +
          ((C24880 * C33805 + C29858 * C50783) * C50843 +
           ((C24873 + C24872) * C33805 + (C26534 + C26535) * C50783) * C50757) *
              C50621 * C969 -
          (((C49777 * C4093 - C24648 * C4091 - C49777 * C4094 + C50561 * C4097 +
             C49784 * C4095 - C24646 * C4092 - C49784 * C4096 +
             C50815 * C4098) *
                C50783 +
            (C25859 + C25858) * C33805) *
               C50757 +
           ((C26535 + C26534) * C50783 + C25844 * C33805) * C50843) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
               C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                  C33805 +
              (C27990 + C27991) * C50783) *
                 C50843 +
             ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
                C1547 -
            ((C29196 * C50783 + C28675 * C33805) * C50757 +
             ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                 C50843) *
                C50685) *
               C50830 +
           (((C28674 * C33805 + C29197 * C50783) * C50843 +
             (C29858 * C33805 + (C26032 + C26033) * C50783) * C50757) *
                C50685 -
            ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
             (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
                C1547) *
               C50657) *
              C50822 +
          (((((C27994 + C27995) * C33805 + (C27996 + C27997) * C50783) *
                 C50843 +
             (C28676 * C33805 + (C27998 + C27999) * C50783) * C50757) *
                C50685 -
            ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
             ((C27995 + C27994) * C50783 +
              (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
               C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                  C33805) *
                 C50843) *
                C1547) *
               C50830 +
           ((((C24874 + C24875) * C33805 + C28676 * C50783) * C50843 +
             ((C24876 + C24877) * C33805 + (C25598 + C25599) * C50783) *
                 C50757) *
                C1547 -
            (((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 +
               C50561 * C2572 + C49784 * C2566 - C24646 * C2562 -
               C49784 * C2567 + C50815 * C2571) *
                  C50783 +
              (C25599 + C25598) * C33805) *
                 C50757 +
             ((C27999 + C27998) * C50783 + C28677 * C33805) * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50877 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C50878 +
           (((C27993 + C27992) * C33805 + (C30389 + C30390) * C50783) * C50843 +
            (C29197 * C33805 + (C29210 + C29211) * C50783) * C50757) *
               C1963) *
              C50830 +
          (((C28674 * C33805 + C29197 * C50783) * C50843 +
            (C29858 * C33805 + (C26032 + C26033) * C50783) * C50757) *
               C50878 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C50877 -
           (((C49777 * C4509 - C24648 * C4505 - C49777 * C4510 +
              C50561 * C4517 + C49784 * C4511 - C24646 * C4506 -
              C49784 * C4512 + C50815 * C4518) *
                 C50783 +
             (C26033 + C26032) * C33805) *
                C50757 +
            ((C29211 + C29210) * C50783 + C29196 * C33805) * C50843) *
               C1963) *
              C50657) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C1547 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C50685) *
              C251 +
          (((C28674 * C33805 + C29197 * C50783) * C50843 +
            (C29858 * C33805 + (C26032 + C26033) * C50783) * C50757) *
               C50685 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C1547) *
              C252 +
          (((C24880 * C33805 + C29858 * C50783) * C50843 +
            ((C24873 + C24872) * C33805 + (C26534 + C26535) * C50783) *
                C50757) *
               C1547 -
           (((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 +
              C50561 * C3575 + C49784 * C3573 - C24646 * C3570 -
              C49784 * C3574 + C50815 * C3576) *
                 C50783 +
             (C26535 + C26534) * C33805) *
                C50757 +
            ((C26033 + C26032) * C50783 + C26520 * C33805) * C50843) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C1547 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C50685) *
              C50605 * C898 +
          ((((C27994 + C27995) * C33805 + (C27996 + C27997) * C50783) * C50843 +
            (C28676 * C33805 + (C27998 + C27999) * C50783) * C50757) *
               C50685 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C1547) *
              C50605 * C899 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C33805 +
             (C28414 + C28415) * C50783) *
                C50843 +
            ((C25200 + C25201) * C33805 + (C28206 + C28207) * C50783) *
                C50757) *
               C1547 -
           (((C49777 * C1090 - C24648 * C1086 - C49777 * C1091 +
              C50561 * C1098 + C49784 * C1092 - C24646 * C1087 -
              C49784 * C1093 + C50815 * C1099) *
                 C50783 +
             (C28207 + C28206) * C33805) *
                C50757 +
            ((C49777 * C421 - C24648 * C404 - C49777 * C422 + C50561 * C434 +
              C49784 * C419 - C24646 * C403 - C49784 * C420 + C50815 * C433) *
                 C50783 +
             (C28415 + C28414) * C33805) *
                C50843) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C33805 +
            (C27990 + C27991) * C50783) *
               C50843 +
           ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
              C1713 -
          ((C29196 * C50783 + C28675 * C33805) * C50757 +
           ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) * C50843) *
              C1714 +
          (((C27993 + C27992) * C33805 + (C30389 + C30390) * C50783) * C50843 +
           (C29197 * C33805 + (C29210 + C29211) * C50783) * C50757) *
              C1715 -
          (((C49777 * C6422 - C24648 * C6420 - C49777 * C6423 + C50561 * C6426 +
             C49784 * C6424 - C24646 * C6421 - C49784 * C6425 +
             C50815 * C6427) *
                C50783 +
            (C29211 + C29210) * C33805) *
               C50757 +
           ((C49777 * C5405 - C24648 * C5401 - C49777 * C5406 + C50561 * C5410 +
             C49784 * C5403 - C24646 * C5400 - C49784 * C5404 +
             C50815 * C5409) *
                C50783 +
            (C30390 + C30389) * C33805) *
               C50843) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C50877 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C50878 +
           (((C27993 + C27992) * C33805 + (C30389 + C30390) * C50783) * C50843 +
            (C29197 * C33805 + (C29210 + C29211) * C50783) * C50757) *
               C1963) *
              C50605 * C50822 +
          ((((C27994 + C27995) * C33805 + (C27996 + C27997) * C50783) * C50843 +
            (C28676 * C33805 + (C27998 + C27999) * C50783) * C50757) *
               C50878 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C50877 -
           (((C49777 * C6013 - C24648 * C6012 - C49777 * C6014 +
              C50561 * C6015 + C49784 * C4513 - C24646 * C4507 -
              C49784 * C4514 + C50815 * C4519) *
                 C50783 +
             (C27999 + C27998) * C33805) *
                C50757 +
            ((C49777 * C1723 - C24648 * C1718 - C49777 * C1724 +
              C50561 * C1730 + C49784 * C1725 - C24646 * C1719 -
              C49784 * C1726 + C50815 * C1731) *
                 C50783 +
             (C27997 + C27996) * C33805) *
                C50843) *
               C1963) *
              C50605 * C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C1547 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C50685) *
              C50605 * C898 +
          ((((C27994 + C27995) * C33805 + (C27996 + C27997) * C50783) * C50843 +
            (C28676 * C33805 + (C27998 + C27999) * C50783) * C50757) *
               C50685 -
           ((C28677 * C50783 + (C24875 + C24874) * C33805) * C50757 +
            ((C27995 + C27994) * C50783 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C33805) *
                C50843) *
               C1547) *
              C50605 * C899 +
          ((((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
              C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                 C33805 +
             (C28414 + C28415) * C50783) *
                C50843 +
            ((C25200 + C25201) * C33805 + (C28206 + C28207) * C50783) *
                C50757) *
               C1547 -
           (((C49777 * C1090 - C24648 * C1086 - C49777 * C1091 +
              C50561 * C1098 + C49784 * C1092 - C24646 * C1087 -
              C49784 * C1093 + C50815 * C1099) *
                 C50783 +
             (C28207 + C28206) * C33805) *
                C50757 +
            ((C49777 * C421 - C24648 * C404 - C49777 * C422 + C50561 * C434 +
              C49784 * C419 - C24646 * C403 - C49784 * C420 + C50815 * C433) *
                 C50783 +
             (C28415 + C28414) * C33805) *
                C50843) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C33805 +
             (C27990 + C27991) * C50783) *
                C50843 +
            ((C24868 + C24869) * C33805 + C28674 * C50783) * C50757) *
               C1547 -
           ((C29196 * C50783 + C28675 * C33805) * C50757 +
            ((C27992 + C27993) * C50783 + (C27991 + C27990) * C33805) *
                C50843) *
               C50685) *
              C251 +
          (((C28674 * C33805 + C29197 * C50783) * C50843 +
            (C29858 * C33805 + (C26032 + C26033) * C50783) * C50757) *
               C50685 -
           ((C26520 * C50783 + (C24871 + C24870) * C33805) * C50757 +
            (C28675 * C50783 + (C24869 + C24868) * C33805) * C50843) *
               C1547) *
              C252 +
          (((C24880 * C33805 + C29858 * C50783) * C50843 +
            ((C24873 + C24872) * C33805 + (C26534 + C26535) * C50783) *
                C50757) *
               C1547 -
           (((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 +
              C50561 * C3575 + C49784 * C3573 - C24646 * C3570 -
              C49784 * C3574 + C50815 * C3576) *
                 C50783 +
             (C26535 + C26534) * C33805) *
                C50757 +
            ((C26033 + C26032) * C50783 + C26520 * C33805) * C50843) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50621 * C50830 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C50621 * C50657) *
              C50873 +
          (((C47339 + C47340 + C47341) * C50843 +
            (C47342 + C47343 + C47344) * C50757) *
               C50621 * C50657 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C50621 * C50830) *
              C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50881 +
             C22551 * C50882 + C22552 * C44512) *
                C50843 +
            (C47637 + C47638 + C47639) * C50757) *
               C50621 * C50830 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C44512 +
             C31596 * C50882 + C20245 * C50881) *
                C50757 +
            (C47639 + C47638 + C47637) * C50843) *
               C50621 * C50657) *
              C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C50881 +
              C22222 * C50882 + C22223 * C44512) *
                 C50843 +
             (C47333 + C47334 + C47335) * C50757) *
                C50831 -
            ((C47980 + C47981 + C47982) * C50757 +
             (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
                C50685) *
               C50830 +
           (((C47982 + C47981 + C47980) * C50843 +
             (C20515 * C50881 + C20823 * C50882 + C23165 * C44512) * C50757) *
                C50685 -
            ((C47336 + C47337 + C47338) * C50757 +
             (C47335 + C47334 + C47333) * C50843) *
                C50831) *
               C50657) *
              C254 +
          ((((C22226 * C50881 + C22227 * C50882 + C22228 * C44512) * C50843 +
             (C47983 + C47984 + C47985) * C50757) *
                C50685 -
            ((C47341 + C47340 + C47339) * C50757 +
             (C22227 * C44512 + C22226 * C50882 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C50881) *
                 C50843) *
                C50831) *
               C50830 +
           (((C47339 + C47340 + C47341) * C50843 +
             (C47342 + C47343 + C47344) * C50757) *
                C50831 -
            (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
               C50556 * C4517) *
                  C44512 +
              C22025 * C50882 + C20518 * C50881) *
                 C50757 +
             (C47985 + C47984 + C47983) * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50621 * C251 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C50621 * C252 +
           ((C47338 + C47337 + C47336) * C50843 +
            (C20016 * C50881 + C20514 * C50882 + C20824 * C44512) * C50757) *
               C50621 * C253) *
              C254 +
          (((C47339 + C47340 + C47341) * C50843 +
            (C47342 + C47343 + C47344) * C50757) *
               C50621 * C252 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C50621 * C251 -
           (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
              C50556 * C3575) *
                 C44512 +
             C20519 * C50882 + C20020 * C50881) *
                C50757 +
            (C47344 + C47343 + C47342) * C50843) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50881 +
            C22222 * C50882 + C22223 * C44512) *
               C50843 +
           (C20014 * C50881 + C20516 * C50882 + C20822 * C44512) * C50757) *
              C50621 * C50605 * C113 -
          ((C22024 * C44512 + C20517 * C50882 + C20018 * C50881) * C50757 +
           (C22227 * C44512 + C22226 * C50882 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50881) *
               C50843) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50881 +
            C22551 * C50882 + C22552 * C44512) *
               C50843 +
           (C20244 * C50881 + C22389 * C50882 + C22390 * C44512) * C50757) *
              C50621 * C50605 * C115 -
          (((C19865 * C1090 - C19866 * C1086 - C19865 * C1091 +
             C50556 * C1098) *
                C44512 +
            (C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C50882 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C50881) *
               C50757 +
           ((C19865 * C421 - C19866 * C404 - C19865 * C422 + C50556 * C434) *
                C44512 +
            (C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C50882 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C50881) *
               C50843) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C394 -
           ((C22224 * C44512 + C20822 * C50882 + C20516 * C50881) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C395 +
           ((C22223 * C50881 + C22225 * C50882 + C24056 * C44512) * C50843 +
            (C20822 * C50881 + C22224 * C50882 + C23164 * C44512) * C50757) *
               C396) *
              C50605 * C254 +
          (((C22226 * C50881 + C22227 * C50882 + C22228 * C44512) * C50843 +
            (C20517 * C50881 + C22024 * C50882 + C22229 * C44512) * C50757) *
               C395 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C394 -
           (((C19865 * C6422 - C19866 * C6420 - C19865 * C6423 +
              C50556 * C6426) *
                 C44512 +
             C22229 * C50882 + C22024 * C50881) *
                C50757 +
            (C39400 * C44512 + C22228 * C50882 + C22227 * C50881) * C50843) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50831 -
           ((C22224 * C44512 + C20822 * C50882 + C20516 * C50881) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C50685) *
              C50605 * C50873 +
          (((C22226 * C50881 + C22227 * C50882 + C22228 * C44512) * C50843 +
            (C20517 * C50881 + C22024 * C50882 + C22229 * C44512) * C50757) *
               C50685 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C50831) *
              C50605 * C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50881 +
             C22551 * C50882 + C22552 * C44512) *
                C50843 +
            (C47637 + C47638 + C47639) * C50757) *
               C50831 -
           (((C19865 * C6013 - C19866 * C6012 - C19865 * C6014 +
              C50556 * C6015) *
                 C44512 +
             C22390 * C50882 + C22389 * C50881) *
                C50757 +
            (C39603 * C44512 + C22552 * C50882 + C22551 * C50881) * C50843) *
               C50685) *
              C50605 * C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50881 +
            C22222 * C50882 + C22223 * C44512) *
               C50843 +
           (C20014 * C50881 + C20516 * C50882 + C20822 * C44512) * C50757) *
              C50621 * C50605 * C113 -
          ((C22024 * C44512 + C20517 * C50882 + C20018 * C50881) * C50757 +
           (C22227 * C44512 + C22226 * C50882 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C50881) *
               C50843) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C50881 +
            C22551 * C50882 + C22552 * C44512) *
               C50843 +
           (C20244 * C50881 + C22389 * C50882 + C22390 * C44512) * C50757) *
              C50621 * C50605 * C115 -
          (((C19865 * C1090 - C19866 * C1086 - C19865 * C1091 +
             C50556 * C1098) *
                C44512 +
            (C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C50882 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C50881) *
               C50757 +
           ((C19865 * C421 - C19866 * C404 - C19865 * C422 + C50556 * C434) *
                C44512 +
            (C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C50882 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C50881) *
               C50843) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50621 * C251 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C50621 * C252 +
           ((C47338 + C47337 + C47336) * C50843 +
            (C20016 * C50881 + C20514 * C50882 + C20824 * C44512) * C50757) *
               C50621 * C253) *
              C254 +
          (((C47339 + C47340 + C47341) * C50843 +
            (C47342 + C47343 + C47344) * C50757) *
               C50621 * C252 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C50621 * C251 -
           (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
              C50556 * C3575) *
                 C44512 +
             C20519 * C50882 + C20020 * C50881) *
                C50757 +
            (C47344 + C47343 + C47342) * C50843) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50621 * C50875 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C50621 * C50876 +
           ((C47338 + C47337 + C47336) * C50843 +
            (C48230 + C48231 + C48232) * C50757) *
               C50621 * C1202) *
              C50822 +
          (((C47339 + C47340 + C47341) * C50843 +
            (C47342 + C47343 + C47344) * C50757) *
               C50621 * C50876 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C50621 * C50875 -
           (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
              C50556 * C3575) *
                 C44512 +
             C20519 * C50882 + C20020 * C50881) *
                C50757 +
            (C47344 + C47343 + C47342) * C50843) *
               C50621 * C1202) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50831 -
           ((C47980 + C47981 + C47982) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C50685) *
              C50875 +
          (((C47982 + C47981 + C47980) * C50843 +
            (C48868 + C48869 + C48870) * C50757) *
               C50685 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C50831) *
              C50876 +
          (((C47338 + C47337 + C47336) * C50843 +
            (C48230 + C48231 + C48232) * C50757) *
               C50831 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C44512 +
             C20824 * C50882 + C20514 * C50881) *
                C50757 +
            (C48870 + C48869 + C48868) * C50843) *
               C50685) *
              C1202) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50881 +
            C22222 * C50882 + C22223 * C44512) *
               C50843 +
           (C47333 + C47334 + C47335) * C50757) *
              C50621 * C967 -
          ((C47336 + C47337 + C47338) * C50757 +
           (C47335 + C47334 + C47333) * C50843) *
              C50621 * C968 +
          ((C47338 + C47337 + C47336) * C50843 +
           (C48230 + C48231 + C48232) * C50757) *
              C50621 * C969 -
          (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
             C50556 * C20802) *
                C44512 +
            C21164 * C50882 + C20017 * C50881) *
               C50757 +
           (C48232 + C48231 + C48230) * C50843) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50621 * C896 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C50621 * C50657) *
              C898 +
          (((C47339 + C47340 + C47341) * C50843 +
            (C47342 + C47343 + C47344) * C50757) *
               C50621 * C50657 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50881 +
             C22551 * C50882 + C22552 * C44512) *
                C50843 +
            (C47637 + C47638 + C47639) * C50757) *
               C50621 * C896 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C44512 +
             C31596 * C50882 + C20245 * C50881) *
                C50757 +
            (C47639 + C47638 + C47637) * C50843) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C394 -
           ((C47980 + C47981 + C47982) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C395 +
           ((C22223 * C50881 + C22225 * C50882 + C24056 * C44512) * C50843 +
            (C48379 + C48380 + C48381) * C50757) *
               C396) *
              C896 +
          (((C47982 + C47981 + C47980) * C50843 +
            (C20515 * C50881 + C20823 * C50882 + C23165 * C44512) * C50757) *
               C395 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C394 -
           (((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
              C50556 * C23148) *
                 C44512 +
             C23165 * C50882 + C20823 * C50881) *
                C50757 +
            (C48381 + C48380 + C48379) * C50843) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C50881 +
              C22222 * C50882 + C22223 * C44512) *
                 C50843 +
             (C47333 + C47334 + C47335) * C50757) *
                C50831 -
            ((C47980 + C47981 + C47982) * C50757 +
             (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
                C50685) *
               C896 +
           (((C47982 + C47981 + C47980) * C50843 +
             (C20515 * C50881 + C20823 * C50882 + C23165 * C44512) * C50757) *
                C50685 -
            ((C47336 + C47337 + C47338) * C50757 +
             (C47335 + C47334 + C47333) * C50843) *
                C50831) *
               C50657) *
              C50822 +
          ((((C22226 * C50881 + C22227 * C50882 + C22228 * C44512) * C50843 +
             (C47983 + C47984 + C47985) * C50757) *
                C50685 -
            ((C47341 + C47340 + C47339) * C50757 +
             (C22227 * C44512 + C22226 * C50882 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C50881) *
                 C50843) *
                C50831) *
               C896 +
           (((C47339 + C47340 + C47341) * C50843 +
             (C47342 + C47343 + C47344) * C50757) *
                C50831 -
            (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
               C50556 * C4517) *
                  C44512 +
              C22025 * C50882 + C20518 * C50881) *
                 C50757 +
             (C47985 + C47984 + C47983) * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50621 * C896 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C50621 * C50657) *
              C898 +
          (((C47339 + C47340 + C47341) * C50843 +
            (C47342 + C47343 + C47344) * C50757) *
               C50621 * C50657 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50881 +
             C22551 * C50882 + C22552 * C44512) *
                C50843 +
            (C47637 + C47638 + C47639) * C50757) *
               C50621 * C896 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C44512 +
             C31596 * C50882 + C20245 * C50881) *
                C50757 +
            (C47639 + C47638 + C47637) * C50843) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50881 +
            C22222 * C50882 + C22223 * C44512) *
               C50843 +
           (C47333 + C47334 + C47335) * C50757) *
              C50621 * C967 -
          ((C47336 + C47337 + C47338) * C50757 +
           (C47335 + C47334 + C47333) * C50843) *
              C50621 * C968 +
          ((C47338 + C47337 + C47336) * C50843 +
           (C48230 + C48231 + C48232) * C50757) *
              C50621 * C969 -
          (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
             C50556 * C20802) *
                C44512 +
            C21164 * C50882 + C20017 * C50881) *
               C50757 +
           (C48232 + C48231 + C48230) * C50843) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C50881 +
              C22222 * C50882 + C22223 * C44512) *
                 C50843 +
             (C47333 + C47334 + C47335) * C50757) *
                C1547 -
            ((C47980 + C47981 + C47982) * C50757 +
             (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
                C50685) *
               C50830 +
           (((C47982 + C47981 + C47980) * C50843 +
             (C48868 + C48869 + C48870) * C50757) *
                C50685 -
            ((C47336 + C47337 + C47338) * C50757 +
             (C47335 + C47334 + C47333) * C50843) *
                C1547) *
               C50657) *
              C50822 +
          ((((C22226 * C50881 + C22227 * C50882 + C22228 * C44512) * C50843 +
             (C47983 + C47984 + C47985) * C50757) *
                C50685 -
            ((C47341 + C47340 + C47339) * C50757 +
             (C22227 * C44512 + C22226 * C50882 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C50881) *
                 C50843) *
                C1547) *
               C50830 +
           (((C47339 + C47340 + C47341) * C50843 +
             (C47342 + C47343 + C47344) * C50757) *
                C1547 -
            (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
               C50556 * C4517) *
                  C44512 +
              C22025 * C50882 + C20518 * C50881) *
                 C50757 +
             (C47985 + C47984 + C47983) * C50843) *
                C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50877 -
           ((C47980 + C47981 + C47982) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C50878 +
           ((C22223 * C50881 + C22225 * C50882 + C24056 * C44512) * C50843 +
            (C48379 + C48380 + C48381) * C50757) *
               C1963) *
              C50830 +
          (((C47982 + C47981 + C47980) * C50843 +
            (C48868 + C48869 + C48870) * C50757) *
               C50878 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C50877 -
           (((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
              C50556 * C23148) *
                 C44512 +
             C23165 * C50882 + C20823 * C50881) *
                C50757 +
            (C48381 + C48380 + C48379) * C50843) *
               C1963) *
              C50657) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C1547 -
           ((C47980 + C47981 + C47982) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C50685) *
              C251 +
          (((C47982 + C47981 + C47980) * C50843 +
            (C48868 + C48869 + C48870) * C50757) *
               C50685 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C1547) *
              C252 +
          (((C47338 + C47337 + C47336) * C50843 +
            (C48230 + C48231 + C48232) * C50757) *
               C1547 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C44512 +
             C20824 * C50882 + C20514 * C50881) *
                C50757 +
            (C48870 + C48869 + C48868) * C50843) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C1547 -
           ((C47980 + C47981 + C47982) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C50881 + C22227 * C50882 + C22228 * C44512) * C50843 +
            (C47983 + C47984 + C47985) * C50757) *
               C50685 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50881 +
             C22551 * C50882 + C22552 * C44512) *
                C50843 +
            (C47637 + C47638 + C47639) * C50757) *
               C1547 -
           (((C19865 * C6013 - C19866 * C6012 - C19865 * C6014 +
              C50556 * C6015) *
                 C44512 +
             C22390 * C50882 + C22389 * C50881) *
                C50757 +
            (C39603 * C44512 + C22552 * C50882 + C22551 * C50881) * C50843) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C50881 +
            C22222 * C50882 + C22223 * C44512) *
               C50843 +
           (C47333 + C47334 + C47335) * C50757) *
              C1713 -
          ((C47980 + C47981 + C47982) * C50757 +
           (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
              C1714 +
          ((C22223 * C50881 + C22225 * C50882 + C24056 * C44512) * C50843 +
           (C48379 + C48380 + C48381) * C50757) *
              C1715 -
          (((C19865 * C24046 - C19866 * C24045 - C19865 * C24047 +
             C50556 * C24048) *
                C44512 +
            C23164 * C50882 + C22224 * C50881) *
               C50757 +
           (C40594 * C44512 + C24056 * C50882 + C22225 * C50881) * C50843) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C50877 -
           ((C47980 + C47981 + C47982) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C50878 +
           ((C22223 * C50881 + C22225 * C50882 + C24056 * C44512) * C50843 +
            (C48379 + C48380 + C48381) * C50757) *
               C1963) *
              C50605 * C50822 +
          (((C22226 * C50881 + C22227 * C50882 + C22228 * C44512) * C50843 +
            (C47983 + C47984 + C47985) * C50757) *
               C50878 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C50877 -
           (((C19865 * C6422 - C19866 * C6420 - C19865 * C6423 +
              C50556 * C6426) *
                 C44512 +
             C22229 * C50882 + C22024 * C50881) *
                C50757 +
            (C39400 * C44512 + C22228 * C50882 + C22227 * C50881) * C50843) *
               C1963) *
              C50605 * C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C1547 -
           ((C47980 + C47981 + C47982) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C50881 + C22227 * C50882 + C22228 * C44512) * C50843 +
            (C47983 + C47984 + C47985) * C50757) *
               C50685 -
           ((C47341 + C47340 + C47339) * C50757 +
            (C22227 * C44512 + C22226 * C50882 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C50881) *
                C50843) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C50881 +
             C22551 * C50882 + C22552 * C44512) *
                C50843 +
            (C47637 + C47638 + C47639) * C50757) *
               C1547 -
           (((C19865 * C6013 - C19866 * C6012 - C19865 * C6014 +
              C50556 * C6015) *
                 C44512 +
             C22390 * C50882 + C22389 * C50881) *
                C50757 +
            (C39603 * C44512 + C22552 * C50882 + C22551 * C50881) * C50843) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C50881 +
             C22222 * C50882 + C22223 * C44512) *
                C50843 +
            (C47333 + C47334 + C47335) * C50757) *
               C1547 -
           ((C47980 + C47981 + C47982) * C50757 +
            (C22225 * C44512 + C22223 * C50882 + C22222 * C50881) * C50843) *
               C50685) *
              C251 +
          (((C47982 + C47981 + C47980) * C50843 +
            (C48868 + C48869 + C48870) * C50757) *
               C50685 -
           ((C47336 + C47337 + C47338) * C50757 +
            (C47335 + C47334 + C47333) * C50843) *
               C1547) *
              C252 +
          (((C47338 + C47337 + C47336) * C50843 +
            (C48230 + C48231 + C48232) * C50757) *
               C1547 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C44512 +
             C20824 * C50882 + C20514 * C50881) *
                C50757 +
            (C48870 + C48869 + C48868) * C50843) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C50830 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C50657) *
              C50873 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C50657 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C50830) *
              C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C50621 * C50830 -
           (((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
              C50556 * C3098) *
                 C50783 +
             C20246 * C33805) *
                C2164 +
            (C37017 + C37016) * C2163 + (C37015 + C37014) * C2162) *
               C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50621 * C50830 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C50657) *
              C50873 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C50657 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C50830) *
              C50874 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428 +
             C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
             C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435) *
                C50783) *
               C50707 * C50621 * C50830 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50783 +
            (C17597 + C17596 + C17595) * C33805) *
               C50707 * C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50621 * C50830 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C50621 * C50657) *
              C50873 +
          ((C20018 * C39193 + C20517 * C39194 + C22024 * C39195 +
            C22229 * C39196) *
               C50707 * C50621 * C50657 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C50621 * C50830) *
              C50874 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C39193 +
            C22551 * C39194 + C22552 * C39195 +
            (C19865 * C1723 - C19866 * C1718 - C19865 * C1724 +
             C50556 * C1730) *
                C39196) *
               C50707 * C50621 * C50830 -
           ((C19865 * C6013 - C19866 * C6012 - C19865 * C6014 +
             C50556 * C6015) *
                C39196 +
            C22390 * C39195 + C22389 * C39194 + C20244 * C39193) *
               C50707 * C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C33805 +
              C22222 * C50783) *
                 C2162 +
             (C36708 + C36709) * C2163 + C36720 * C2164) *
                C50831 -
            ((C37358 + C37359) * C2164 + (C37360 + C37361) * C2163 +
             (C22223 * C50783 + C22222 * C33805) * C2162) *
                C50685) *
               C50830 +
           (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
             (C20514 * C33805 + C20824 * C50783) * C2164) *
                C50685 -
            ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
             (C36709 + C36708) * C2162) *
                C50831) *
               C50657) *
              C254 +
          ((((C22226 * C33805 + C22227 * C50783) * C2162 +
             (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
                C50685 -
            (C36721 * C2164 + (C36715 + C36714) * C2163 +
             (C22226 * C50783 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C33805) *
                 C2162) *
                C50831) *
               C50830 +
           (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
             (C36718 + C36719) * C2164) *
                C50831 -
            (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
               C50556 * C3575) *
                  C50783 +
              C20519 * C33805) *
                 C2164 +
             (C37365 + C37364) * C2163 + (C37363 + C37362) * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C33805 +
             (C34172 + C34173 + C34174) * C50783) *
                C50707 * C50831 -
            ((C34175 + C34176 + C34177) * C50783 +
             (C34174 + C34173 + C34172) * C33805) *
                C50707 * C50685) *
               C50830 +
           (((C17976 + C17975 + C17974) * C33805 +
             (C18409 + C18410 + C18411) * C50783) *
                C50707 * C50685 -
            ((C17974 + C17975 + C17976) * C50783 +
             (C17275 + C17274 + C17273) * C33805) *
                C50707 * C50831) *
               C50657) *
              C254 +
          ((((C34178 + C34179 + C34180) * C33805 +
             (C34181 + C34182 + C34183) * C50783) *
                C50707 * C50685 -
            ((C34180 + C34179 + C34178) * C50783 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C33805) *
                C50707 * C50831) *
               C50830 +
           (((C17279 + C17280 + C17281) * C33805 +
             (C17977 + C17978 + C17979) * C50783) *
                C50707 * C50831 -
            ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 +
              C17045 * C1098 + C17050 * C1092 - C17051 * C1087 -
              C17050 * C1093 + C17044 * C1099 + C17048 * C1094 -
              C17049 * C1088 - C17048 * C1095 + C17043 * C1100) *
                 C50783 +
             (C17979 + C17978 + C17977) * C33805) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C39193 +
             C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
                C50707 * C50831 -
            (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
             C22222 * C39193) *
                C50707 * C50685) *
               C50830 +
           ((C20516 * C39193 + C20822 * C39194 + C22224 * C39195 +
             C23164 * C39196) *
                C50707 * C50685 -
            (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
             C20014 * C39193) *
                C50707 * C50831) *
               C50657) *
              C254 +
          (((C22226 * C39193 + C22227 * C39194 + C22228 * C39195 +
             C39400 * C39196) *
                C50707 * C50685 -
            (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C39193) *
                C50707 * C50831) *
               C50830 +
           ((C20018 * C39193 + C20517 * C39194 + C22024 * C39195 +
             C22229 * C39196) *
                C50707 * C50831 -
            ((C19865 * C6422 - C19866 * C6420 - C19865 * C6423 +
              C50556 * C6426) *
                 C39196 +
             C22229 * C39195 + C22024 * C39194 + C20517 * C39193) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                   C33805 +
               (C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430 +
                C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
                C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428) *
                   C50783) *
                  C50707 * C50621 * C50605 * C113 -
              ((C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427 +
                C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
                C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429) *
                   C50783 +
               (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
                C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
                C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                   C33805) *
                  C50707 * C50621 * C50605 * C114 +
              ((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
                C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
                C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                   C33805 +
               (C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428 +
                C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
                C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435) *
                   C50783) *
                  C50707 * C50621 * C50605 * C115 -
              ((C17052 * C645 - C17053 * C644 - C17052 * C646 + C17045 * C647 +
                C17050 * C423 - C17051 * C405 - C17050 * C424 + C17044 * C435 +
                C17048 * C407 - C17049 * C397 - C17048 * C408 + C17043 * C427) *
                   C50783 +
               (C17052 * C142 - C17053 * C130 - C17052 * C143 + C17045 * C151 +
                C17050 * C140 - C17051 * C129 - C17050 * C141 + C17044 * C150 +
                C17048 * C138 - C17049 * C128 - C17048 * C139 + C17043 * C149) *
                   C33805) *
                  C50707 * C50621 * C50605 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                 C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                 C17052 * C136 - C17053 * C127 - C17052 * C137 +
                 C17045 * C148) *
                    C33805 +
                (C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430 +
                 C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
                 C17052 * C409 - C17053 * C398 - C17052 * C410 +
                 C17045 * C428) *
                    C50783) *
                   C50707 * C50621 * C251 -
               ((C17974 + C17975 + C17976) * C50783 +
                (C17275 + C17274 + C17273) * C33805) *
                   C50707 * C50621 * C252 +
               ((C17278 + C17277 + C17276) * C33805 +
                (C18916 + C18917 + C18918) * C50783) *
                   C50707 * C50621 * C253) *
                  C254 +
              (((C17279 + C17280 + C17281) * C33805 +
                (C17977 + C17978 + C17979) * C50783) *
                   C50707 * C50621 * C252 -
               ((C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427 +
                 C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
                 C17048 * C411 - C17049 * C399 - C17048 * C412 +
                 C17043 * C429) *
                    C50783 +
                (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
                 C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
                 C17048 * C134 - C17049 * C126 - C17048 * C135 +
                 C17043 * C147) *
                    C33805) *
                   C50707 * C50621 * C251 -
               ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 +
                 C17045 * C1445 + C17050 * C1439 - C17051 * C1434 -
                 C17050 * C1440 + C17044 * C1446 + C17048 * C1441 -
                 C17049 * C1435 - C17048 * C1442 + C17043 * C1447) *
                    C50783 +
                (C17284 + C17283 + C17282) * C33805) *
                   C50707 * C50621 * C253) *
                  C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C394 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C395 +
           ((C34177 + C34176 + C34175) * C33805 +
            (C17048 * C1727 - C17049 * C1720 - C17048 * C1728 + C17043 * C1732 +
             C17050 * C1725 - C17051 * C1719 - C17050 * C1726 + C17044 * C1731 +
             C17052 * C1723 - C17053 * C1718 - C17052 * C1724 +
             C17045 * C1730) *
                C50783) *
               C50707 * C396) *
              C50605 * C254 +
          (((C34178 + C34179 + C34180) * C33805 +
            (C34181 + C34182 + C34183) * C50783) *
               C50707 * C395 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C394 -
           ((C17052 * C1721 - C17053 * C1717 - C17052 * C1722 + C17045 * C1729 +
             C17050 * C1723 - C17051 * C1718 - C17050 * C1724 + C17044 * C1730 +
             C17048 * C1725 - C17049 * C1719 - C17048 * C1726 +
             C17043 * C1731) *
                C50783 +
            (C34183 + C34182 + C34181) * C33805) *
               C50707 * C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C20014 * C33805 + C20516 * C50783) * C2163 +
           (C20015 * C33805 + C20515 * C50783) * C2164) *
              C50621 * C50605 * C113 -
          ((C20518 * C50783 + C20019 * C33805) * C2164 +
           (C20517 * C50783 + C20018 * C33805) * C2163 +
           (C22226 * C50783 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C33805) *
               C2162) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C33805 +
            C22551 * C50783) *
               C2162 +
           (C20244 * C33805 + C22389 * C50783) * C2163 +
           (C20245 * C33805 + C31596 * C50783) * C2164) *
              C50621 * C50605 * C115 -
          (((C19865 * C1437 - C19866 * C1433 - C19865 * C1438 +
             C50556 * C1445) *
                C50783 +
            (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
                C33805) *
               C2164 +
           ((C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C50783 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C33805) *
               C2163 +
           ((C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C50783 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C33805) *
               C2162) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C251 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C252 +
           (C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C20017 * C33805 + C21164 * C50783) * C2164) *
               C50621 * C253) *
              C254 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C252 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C251 -
           (((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50783 +
             C20021 * C33805) *
                C2164 +
            (C36719 + C36718) * C2163 + C36721 * C2162) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C394 -
           ((C20823 * C50783 + C20515 * C33805) * C2164 +
            (C20822 * C50783 + C20516 * C33805) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C395 +
           ((C22223 * C33805 + C22225 * C50783) * C2162 +
            (C20822 * C33805 + C22224 * C50783) * C2163 +
            (C20823 * C33805 + C23165 * C50783) * C2164) *
               C396) *
              C50605 * C254 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C20517 * C33805 + C22024 * C50783) * C2163 +
            (C20518 * C33805 + C22025 * C50783) * C2164) *
               C395 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C394 -
           (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
              C50556 * C4517) *
                 C50783 +
             C22025 * C33805) *
                C2164 +
            (C22229 * C50783 + C22024 * C33805) * C2163 +
            (C22228 * C50783 + C22227 * C33805) * C2162) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C39193 +
           C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
              C50707 * C50621 * C50605 * C113 -
          (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
           (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
               C39193) *
              C50707 * C50621 * C50605 * C114 +
          ((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
               C39193 +
           C22551 * C39194 + C22552 * C39195 +
           (C19865 * C1723 - C19866 * C1718 - C19865 * C1724 + C50556 * C1730) *
               C39196) *
              C50707 * C50621 * C50605 * C115 -
          ((C19865 * C1721 - C19866 * C1717 - C19865 * C1722 + C50556 * C1729) *
               C39196 +
           (C19865 * C421 - C19866 * C404 - C19865 * C422 + C50556 * C434) *
               C39195 +
           (C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
               C39194 +
           (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
               C39193) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50621 * C251 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C50621 * C252 +
           (C20015 * C39193 + C20515 * C39194 + C20823 * C39195 +
            C23165 * C39196) *
               C50707 * C50621 * C253) *
              C254 +
          ((C20018 * C39193 + C20517 * C39194 + C22024 * C39195 +
            C22229 * C39196) *
               C50707 * C50621 * C252 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C50621 * C251 -
           ((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
             C50556 * C4517) *
                C39196 +
            C22025 * C39195 + C20518 * C39194 + C20019 * C39193) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C394 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C395 +
           (C22223 * C39193 + C22225 * C39194 + C24056 * C39195 +
            (C19865 * C7323 - C19866 * C7320 - C19865 * C7324 +
             C50556 * C7326) *
                C39196) *
               C50707 * C396) *
              C50605 * C254 +
          ((C22226 * C39193 + C22227 * C39194 + C22228 * C39195 +
            C39400 * C39196) *
               C50707 * C395 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C394 -
           ((C19865 * C7321 - C19866 * C7319 - C19865 * C7322 +
             C50556 * C7325) *
                C39196 +
            C39400 * C39195 + C22228 * C39194 + C22227 * C39193) *
               C50707 * C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50831 -
           ((C20823 * C50783 + C20515 * C33805) * C2164 +
            (C20822 * C50783 + C20516 * C33805) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C50605 * C50873 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C20517 * C33805 + C22024 * C50783) * C2163 +
            (C20518 * C33805 + C22025 * C50783) * C2164) *
               C50685 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50831) *
              C50605 * C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C50831 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C50783 +
             C31596 * C33805) *
                C2164 +
            (C22390 * C50783 + C22389 * C33805) * C2163 +
            (C22552 * C50783 + C22551 * C33805) * C2162) *
               C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50831 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C50605 * C50873 +
          (((C34178 + C34179 + C34180) * C33805 +
            (C34181 + C34182 + C34183) * C50783) *
               C50707 * C50685 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50831) *
              C50605 * C50874 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C34494 + C34495 + C34496) * C50783) *
               C50707 * C50831 -
           ((C17052 * C425 - C17053 * C406 - C17052 * C426 + C17045 * C436 +
             C17050 * C421 - C17051 * C404 - C17050 * C422 + C17044 * C434 +
             C17048 * C419 - C17049 * C403 - C17048 * C420 + C17043 * C433) *
                C50783 +
            (C34496 + C34495 + C34494) * C33805) *
               C50707 * C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50831 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C50685) *
              C50605 * C50873 +
          ((C22226 * C39193 + C22227 * C39194 + C22228 * C39195 +
            C39400 * C39196) *
               C50707 * C50685 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C50831) *
              C50605 * C50874 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C39193 +
            C22551 * C39194 + C22552 * C39195 + C39603 * C39196) *
               C50707 * C50831 -
           ((C19865 * C5407 - C19866 * C5402 - C19865 * C5408 +
             C50556 * C5411) *
                C39196 +
            C39603 * C39195 + C22552 * C39194 + C22551 * C39193) *
               C50707 * C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428) *
                C50783) *
               C50707 * C50621 * C251 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C252 +
           ((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C50621 * C253) *
              C254 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C252 -
           ((C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429) *
                C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C251 -
           ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 + C17045 * C1445 +
             C17050 * C1439 - C17051 * C1434 - C17050 * C1440 + C17044 * C1446 +
             C17048 * C1441 - C17049 * C1435 - C17048 * C1442 +
             C17043 * C1447) *
                C50783 +
            (C17284 + C17283 + C17282) * C33805) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C33805 +
           (C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430 +
            C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
            C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428) *
               C50783) *
              C50707 * C50621 * C50605 * C113 -
          ((C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427 +
            C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
            C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429) *
               C50783 +
           (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
            C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
            C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
               C33805) *
              C50707 * C50621 * C50605 * C114 +
          ((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
            C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
            C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
               C33805 +
           (C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428 +
            C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
            C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435) *
               C50783) *
              C50707 * C50621 * C50605 * C115 -
          ((C17052 * C645 - C17053 * C644 - C17052 * C646 + C17045 * C647 +
            C17050 * C423 - C17051 * C405 - C17050 * C424 + C17044 * C435 +
            C17048 * C407 - C17049 * C397 - C17048 * C408 + C17043 * C427) *
               C50783 +
           (C17052 * C142 - C17053 * C130 - C17052 * C143 + C17045 * C151 +
            C17050 * C140 - C17051 * C129 - C17050 * C141 + C17044 * C150 +
            C17048 * C138 - C17049 * C128 - C17048 * C139 + C17043 * C149) *
               C33805) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C20014 * C33805 + C20516 * C50783) * C2163 +
           (C20015 * C33805 + C20515 * C50783) * C2164) *
              C50621 * C50605 * C113 -
          ((C20518 * C50783 + C20019 * C33805) * C2164 +
           (C20517 * C50783 + C20018 * C33805) * C2163 +
           (C22226 * C50783 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C33805) *
               C2162) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C33805 +
            C22551 * C50783) *
               C2162 +
           (C20244 * C33805 + C22389 * C50783) * C2163 +
           (C20245 * C33805 + C31596 * C50783) * C2164) *
              C50621 * C50605 * C115 -
          (((C19865 * C1437 - C19866 * C1433 - C19865 * C1438 +
             C50556 * C1445) *
                C50783 +
            (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
                C33805) *
               C2164 +
           ((C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C50783 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C33805) *
               C2163 +
           ((C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C50783 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C33805) *
               C2162) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C251 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C252 +
           (C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C20017 * C33805 + C21164 * C50783) * C2164) *
               C50621 * C253) *
              C254 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C252 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C251 -
           (((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50783 +
             C20021 * C33805) *
                C2164 +
            (C36719 + C36718) * C2163 + C36721 * C2162) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C39193 +
           C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
              C50707 * C50621 * C50605 * C113 -
          (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
           (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
               C39193) *
              C50707 * C50621 * C50605 * C114 +
          ((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
               C39193 +
           C22551 * C39194 + C22552 * C39195 +
           (C19865 * C1723 - C19866 * C1718 - C19865 * C1724 + C50556 * C1730) *
               C39196) *
              C50707 * C50621 * C50605 * C115 -
          ((C19865 * C1721 - C19866 * C1717 - C19865 * C1722 + C50556 * C1729) *
               C39196 +
           (C19865 * C421 - C19866 * C404 - C19865 * C422 + C50556 * C434) *
               C39195 +
           (C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
               C39194 +
           (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
               C39193) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50621 * C251 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C50621 * C252 +
           (C20015 * C39193 + C20515 * C39194 + C20823 * C39195 +
            C23165 * C39196) *
               C50707 * C50621 * C253) *
              C254 +
          ((C20018 * C39193 + C20517 * C39194 + C22024 * C39195 +
            C22229 * C39196) *
               C50707 * C50621 * C252 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C50621 * C251 -
           ((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
             C50556 * C4517) *
                C39196 +
            C22025 * C39195 + C20518 * C39194 + C20019 * C39193) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C50875 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C50876 +
           (C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C37611 + C37612) * C2164) *
               C50621 * C1202) *
              C50822 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C50876 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C50875 -
           (((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50783 +
             C20021 * C33805) *
                C2164 +
            (C36719 + C36718) * C2163 + C36721 * C2162) *
               C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50621 * C50875 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C50876 +
           ((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C50621 * C1202) *
              C50822 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C50876 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C50875 -
           ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 + C17045 * C1445 +
             C17050 * C1439 - C17051 * C1434 - C17050 * C1440 + C17044 * C1446 +
             C17048 * C1441 - C17049 * C1435 - C17048 * C1442 +
             C17043 * C1447) *
                C50783 +
            (C17284 + C17283 + C17282) * C33805) *
               C50707 * C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50621 * C50875 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C50621 * C50876 +
           (C20015 * C39193 + C20515 * C39194 + C20823 * C39195 +
            C23165 * C39196) *
               C50707 * C50621 * C1202) *
              C50822 +
          ((C20018 * C39193 + C20517 * C39194 + C22024 * C39195 +
            C22229 * C39196) *
               C50707 * C50621 * C50876 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C50621 * C50875 -
           ((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
             C50556 * C4517) *
                C39196 +
            C22025 * C39195 + C20518 * C39194 + C20019 * C39193) *
               C50707 * C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50831 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C50875 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C38250 + C38251) * C2164) *
               C50685 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50831) *
              C50876 +
          ((C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C37611 + C37612) * C2164) *
               C50831 -
           (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
              C50556 * C20802) *
                 C50783 +
             C21164 * C33805) *
                C2164 +
            (C38251 + C38250) * C2163 + C38249 * C2162) *
               C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50831 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C50875 +
          (((C17976 + C17975 + C17974) * C33805 +
            (C18409 + C18410 + C18411) * C50783) *
               C50707 * C50685 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50831) *
              C50876 +
          (((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C50831 -
           ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 + C17045 * C2572 +
             C17050 * C2566 - C17051 * C2562 - C17050 * C2567 + C17044 * C2571 +
             C17048 * C2564 - C17049 * C2561 - C17048 * C2565 +
             C17043 * C2570) *
                C50783 +
            (C18918 + C18917 + C18916) * C33805) *
               C50707 * C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50831 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C50685) *
              C50875 +
          ((C20516 * C39193 + C20822 * C39194 + C22224 * C39195 +
            C23164 * C39196) *
               C50707 * C50685 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C50831) *
              C50876 +
          ((C20015 * C39193 + C20515 * C39194 + C20823 * C39195 +
            C23165 * C39196) *
               C50707 * C50831 -
           ((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
             C50556 * C23148) *
                C39196 +
            C23165 * C39195 + C20823 * C39194 + C20515 * C39193) *
               C50707 * C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                 C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                 C17052 * C136 - C17053 * C127 - C17052 * C137 +
                 C17045 * C148) *
                    C33805 +
                (C34172 + C34173 + C34174) * C50783) *
                   C50707 * C50621 * C896 -
               ((C17974 + C17975 + C17976) * C50783 +
                (C17275 + C17274 + C17273) * C33805) *
                   C50707 * C50621 * C50657) *
                  C898 +
              (((C17279 + C17280 + C17281) * C33805 +
                (C17977 + C17978 + C17979) * C50783) *
                   C50707 * C50621 * C50657 -
               ((C34180 + C34179 + C34178) * C50783 +
                (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
                 C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
                 C17048 * C134 - C17049 * C126 - C17048 * C135 +
                 C17043 * C147) *
                    C33805) *
                   C50707 * C50621 * C896) *
                  C899 +
              (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
                 C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
                 C17052 * C140 - C17053 * C129 - C17052 * C141 +
                 C17045 * C150) *
                    C33805 +
                (C34494 + C34495 + C34496) * C50783) *
                   C50707 * C50621 * C896 -
               ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
                 C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
                 C17048 * C787 - C17049 * C780 - C17048 * C788 +
                 C17043 * C795) *
                    C50783 +
                (C17597 + C17596 + C17595) * C33805) *
                   C50707 * C50621 * C50657) *
                  C900) +
         0.5 * std::pow(Pi, 2.5) *
             (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                   C33805 +
               (C34172 + C34173 + C34174) * C50783) *
                  C50707 * C50621 * C967 -
              ((C17974 + C17975 + C17976) * C50783 +
               (C17275 + C17274 + C17273) * C33805) *
                  C50707 * C50621 * C968 +
              ((C17278 + C17277 + C17276) * C33805 +
               (C18916 + C18917 + C18918) * C50783) *
                  C50707 * C50621 * C969 -
              ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 +
                C17045 * C3098 + C17050 * C3092 - C17051 * C3088 -
                C17050 * C3093 + C17044 * C3097 + C17048 * C3090 -
                C17049 * C3087 - C17048 * C3091 + C17043 * C3096) *
                   C50783 +
               (C18244 + C18243 + C18242) * C33805) *
                  C50707 * C50621 * C970) *
             C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C394 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C395 +
           ((C34177 + C34176 + C34175) * C33805 +
            (C17048 * C1727 - C17049 * C1720 - C17048 * C1728 + C17043 * C1732 +
             C17050 * C1725 - C17051 * C1719 - C17050 * C1726 + C17044 * C1731 +
             C17052 * C1723 - C17053 * C1718 - C17052 * C1724 +
             C17045 * C1730) *
                C50783) *
               C50707 * C396) *
              C896 +
          (((C17976 + C17975 + C17974) * C33805 +
            (C18409 + C18410 + C18411) * C50783) *
               C50707 * C395 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C394 -
           ((C17052 * C6013 - C17053 * C6012 - C17052 * C6014 + C17045 * C6015 +
             C17050 * C4513 - C17051 * C4507 - C17050 * C4514 + C17044 * C4519 +
             C17048 * C4515 - C17049 * C4508 - C17048 * C4516 +
             C17043 * C4520) *
                C50783 +
            (C18411 + C18410 + C18409) * C33805) *
               C50707 * C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C896 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C50657) *
              C898 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C50657 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C50621 * C896 -
           (((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
              C50556 * C3098) *
                 C50783 +
             C20246 * C33805) *
                C2164 +
            (C37017 + C37016) * C2163 + (C37015 + C37014) * C2162) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C36708 + C36709) * C2163 + C36720 * C2164) *
              C50621 * C967 -
          (C37610 * C2164 + (C36711 + C36710) * C2163 +
           (C36709 + C36708) * C2162) *
              C50621 * C968 +
          (C36720 * C2162 + (C36713 + C36712) * C2163 +
           (C37611 + C37612) * C2164) *
              C50621 * C969 -
          (((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50783 +
            C20700 * C33805) *
               C2164 +
           (C37612 + C37611) * C2163 + C37610 * C2162) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C394 -
           ((C37358 + C37359) * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C395 +
           ((C22223 * C33805 + C22225 * C50783) * C2162 +
            (C37759 + C37760) * C2163 + (C37761 + C37762) * C2164) *
               C396) *
              C896 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C20514 * C33805 + C20824 * C50783) * C2164) *
               C395 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C394 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C50783 +
             C20824 * C33805) *
                C2164 +
            (C37762 + C37761) * C2163 + (C37760 + C37759) * C2162) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50621 * C896 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C50621 * C50657) *
              C898 +
          ((C20018 * C39193 + C20517 * C39194 + C22024 * C39195 +
            C22229 * C39196) *
               C50707 * C50621 * C50657 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C50621 * C896) *
              C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C39193 +
            C22551 * C39194 + C22552 * C39195 + C39603 * C39196) *
               C50707 * C50621 * C896 -
           ((C19865 * C6013 - C19866 * C6012 - C19865 * C6014 +
             C50556 * C6015) *
                C39196 +
            C22390 * C39195 + C22389 * C39194 + C20244 * C39193) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C39193 +
           C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
              C50707 * C50621 * C967 -
          (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
           C20014 * C39193) *
              C50707 * C50621 * C968 +
          (C20015 * C39193 + C20515 * C39194 + C20823 * C39195 +
           C23165 * C39196) *
              C50707 * C50621 * C969 -
          ((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
            C50556 * C21430) *
               C39196 +
           C20824 * C39195 + C20514 * C39194 + C20016 * C39193) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C394 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C395 +
           (C22223 * C39193 + C22225 * C39194 + C24056 * C39195 +
            (C19865 * C7323 - C19866 * C7320 - C19865 * C7324 +
             C50556 * C7326) *
                C39196) *
               C50707 * C396) *
              C896 +
          ((C20516 * C39193 + C20822 * C39194 + C22224 * C39195 +
            C23164 * C39196) *
               C50707 * C395 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C394 -
           ((C19865 * C24046 - C19866 * C24045 - C19865 * C24047 +
             C50556 * C24048) *
                C39196 +
            C23164 * C39195 + C22224 * C39194 + C20822 * C39193) *
               C50707 * C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C33805 +
              C22222 * C50783) *
                 C2162 +
             (C36708 + C36709) * C2163 + C36720 * C2164) *
                C50831 -
            ((C37358 + C37359) * C2164 + (C37360 + C37361) * C2163 +
             (C22223 * C50783 + C22222 * C33805) * C2162) *
                C50685) *
               C896 +
           (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
             (C20514 * C33805 + C20824 * C50783) * C2164) *
                C50685 -
            (C37610 * C2164 + (C36711 + C36710) * C2163 +
             (C36709 + C36708) * C2162) *
                C50831) *
               C50657) *
              C50822 +
          ((((C22226 * C33805 + C22227 * C50783) * C2162 +
             (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
                C50685 -
            (C36721 * C2164 + (C36715 + C36714) * C2163 +
             (C22226 * C50783 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C33805) *
                 C2162) *
                C50831) *
               C896 +
           (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
             (C36718 + C36719) * C2164) *
                C50831 -
            (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
               C50556 * C3575) *
                  C50783 +
              C20519 * C33805) *
                 C2164 +
             (C37365 + C37364) * C2163 + (C37363 + C37362) * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C33805 +
             (C34172 + C34173 + C34174) * C50783) *
                C50707 * C50831 -
            ((C34175 + C34176 + C34177) * C50783 +
             (C34174 + C34173 + C34172) * C33805) *
                C50707 * C50685) *
               C896 +
           (((C17976 + C17975 + C17974) * C33805 +
             (C18409 + C18410 + C18411) * C50783) *
                C50707 * C50685 -
            ((C17974 + C17975 + C17976) * C50783 +
             (C17275 + C17274 + C17273) * C33805) *
                C50707 * C50831) *
               C50657) *
              C50822 +
          ((((C34178 + C34179 + C34180) * C33805 +
             (C34181 + C34182 + C34183) * C50783) *
                C50707 * C50685 -
            ((C34180 + C34179 + C34178) * C50783 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C33805) *
                C50707 * C50831) *
               C896 +
           (((C17279 + C17280 + C17281) * C33805 +
             (C17977 + C17978 + C17979) * C50783) *
                C50707 * C50831 -
            ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 +
              C17045 * C1098 + C17050 * C1092 - C17051 * C1087 -
              C17050 * C1093 + C17044 * C1099 + C17048 * C1094 -
              C17049 * C1088 - C17048 * C1095 + C17043 * C1100) *
                 C50783 +
             (C17979 + C17978 + C17977) * C33805) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C39193 +
             C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
                C50707 * C50831 -
            (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
             C22222 * C39193) *
                C50707 * C50685) *
               C896 +
           ((C20516 * C39193 + C20822 * C39194 + C22224 * C39195 +
             C23164 * C39196) *
                C50707 * C50685 -
            (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
             C20014 * C39193) *
                C50707 * C50831) *
               C50657) *
              C50822 +
          (((C22226 * C39193 + C22227 * C39194 + C22228 * C39195 +
             C39400 * C39196) *
                C50707 * C50685 -
            (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C39193) *
                C50707 * C50831) *
               C896 +
           ((C20018 * C39193 + C20517 * C39194 + C22024 * C39195 +
             C22229 * C39196) *
                C50707 * C50831 -
            ((C19865 * C6422 - C19866 * C6420 - C19865 * C6423 +
              C50556 * C6426) *
                 C39196 +
             C22229 * C39195 + C22024 * C39194 + C20517 * C39193) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C33805 +
           (C34172 + C34173 + C34174) * C50783) *
              C50707 * C50621 * C967 -
          ((C17974 + C17975 + C17976) * C50783 +
           (C17275 + C17274 + C17273) * C33805) *
              C50707 * C50621 * C968 +
          ((C17278 + C17277 + C17276) * C33805 +
           (C18916 + C18917 + C18918) * C50783) *
              C50707 * C50621 * C969 -
          ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 + C17045 * C3098 +
            C17050 * C3092 - C17051 * C3088 - C17050 * C3093 + C17044 * C3097 +
            C17048 * C3090 - C17049 * C3087 - C17048 * C3091 + C17043 * C3096) *
               C50783 +
           (C18244 + C18243 + C18242) * C33805) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50621 * C896 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C50657) *
              C898 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C50657 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C896) *
              C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C34494 + C34495 + C34496) * C50783) *
               C50707 * C50621 * C896 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50783 +
            (C17597 + C17596 + C17595) * C33805) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C896 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C50657) *
              C898 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C50657 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C50621 * C896 -
           (((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
              C50556 * C3098) *
                 C50783 +
             C20246 * C33805) *
                C2164 +
            (C37017 + C37016) * C2163 + (C37015 + C37014) * C2162) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C36708 + C36709) * C2163 + C36720 * C2164) *
              C50621 * C967 -
          (C37610 * C2164 + (C36711 + C36710) * C2163 +
           (C36709 + C36708) * C2162) *
              C50621 * C968 +
          (C36720 * C2162 + (C36713 + C36712) * C2163 +
           (C37611 + C37612) * C2164) *
              C50621 * C969 -
          (((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50783 +
            C20700 * C33805) *
               C2164 +
           (C37612 + C37611) * C2163 + C37610 * C2162) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50621 * C896 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C50621 * C50657) *
              C898 +
          ((C20018 * C39193 + C20517 * C39194 + C22024 * C39195 +
            C22229 * C39196) *
               C50707 * C50621 * C50657 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C50621 * C896) *
              C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C39193 +
            C22551 * C39194 + C22552 * C39195 + C39603 * C39196) *
               C50707 * C50621 * C896 -
           ((C19865 * C6013 - C19866 * C6012 - C19865 * C6014 +
             C50556 * C6015) *
                C39196 +
            C22390 * C39195 + C22389 * C39194 + C20244 * C39193) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C39193 +
           C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
              C50707 * C50621 * C967 -
          (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
           C20014 * C39193) *
              C50707 * C50621 * C968 +
          (C20015 * C39193 + C20515 * C39194 + C20823 * C39195 +
           C23165 * C39196) *
              C50707 * C50621 * C969 -
          ((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
            C50556 * C21430) *
               C39196 +
           C20824 * C39195 + C20514 * C39194 + C20016 * C39193) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C33805 +
              C22222 * C50783) *
                 C2162 +
             (C36708 + C36709) * C2163 + C36720 * C2164) *
                C1547 -
            (C38249 * C2164 + (C37360 + C37361) * C2163 +
             (C22223 * C50783 + C22222 * C33805) * C2162) *
                C50685) *
               C50830 +
           (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
             (C38250 + C38251) * C2164) *
                C50685 -
            (C37610 * C2164 + (C36711 + C36710) * C2163 +
             (C36709 + C36708) * C2162) *
                C1547) *
               C50657) *
              C50822 +
          ((((C22226 * C33805 + C22227 * C50783) * C2162 +
             (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
                C50685 -
            (C36721 * C2164 + (C36715 + C36714) * C2163 +
             (C22226 * C50783 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C33805) *
                 C2162) *
                C1547) *
               C50830 +
           (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
             (C36718 + C36719) * C2164) *
                C1547 -
            (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
               C50556 * C3575) *
                  C50783 +
              C20519 * C33805) *
                 C2164 +
             (C37365 + C37364) * C2163 + (C37363 + C37362) * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C33805 +
             (C34172 + C34173 + C34174) * C50783) *
                C50707 * C1547 -
            ((C34175 + C34176 + C34177) * C50783 +
             (C34174 + C34173 + C34172) * C33805) *
                C50707 * C50685) *
               C50830 +
           (((C17976 + C17975 + C17974) * C33805 +
             (C18409 + C18410 + C18411) * C50783) *
                C50707 * C50685 -
            ((C17974 + C17975 + C17976) * C50783 +
             (C17275 + C17274 + C17273) * C33805) *
                C50707 * C1547) *
               C50657) *
              C50822 +
          ((((C34178 + C34179 + C34180) * C33805 +
             (C34181 + C34182 + C34183) * C50783) *
                C50707 * C50685 -
            ((C34180 + C34179 + C34178) * C50783 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C33805) *
                C50707 * C1547) *
               C50830 +
           (((C17279 + C17280 + C17281) * C33805 +
             (C17977 + C17978 + C17979) * C50783) *
                C50707 * C1547 -
            ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 +
              C17045 * C1098 + C17050 * C1092 - C17051 * C1087 -
              C17050 * C1093 + C17044 * C1099 + C17048 * C1094 -
              C17049 * C1088 - C17048 * C1095 + C17043 * C1100) *
                 C50783 +
             (C17979 + C17978 + C17977) * C33805) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C39193 +
             C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
                C50707 * C1547 -
            (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
             C22222 * C39193) *
                C50707 * C50685) *
               C50830 +
           ((C20516 * C39193 + C20822 * C39194 + C22224 * C39195 +
             C23164 * C39196) *
                C50707 * C50685 -
            (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
             C20014 * C39193) *
                C50707 * C1547) *
               C50657) *
              C50822 +
          (((C22226 * C39193 + C22227 * C39194 + C22228 * C39195 +
             C39400 * C39196) *
                C50707 * C50685 -
            (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C39193) *
                C50707 * C1547) *
               C50830 +
           ((C20018 * C39193 + C20517 * C39194 + C22024 * C39195 +
             C22229 * C39196) *
                C50707 * C1547 -
            ((C19865 * C6422 - C19866 * C6420 - C19865 * C6423 +
              C50556 * C6426) *
                 C39196 +
             C22229 * C39195 + C22024 * C39194 + C20517 * C39193) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50877 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50878 +
           ((C22223 * C33805 + C22225 * C50783) * C2162 +
            (C37759 + C37760) * C2163 + (C37761 + C37762) * C2164) *
               C1963) *
              C50830 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C38250 + C38251) * C2164) *
               C50878 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50877 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C50783 +
             C20824 * C33805) *
                C2164 +
            (C37762 + C37761) * C2163 + (C37760 + C37759) * C2162) *
               C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50877 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50878 +
           ((C34177 + C34176 + C34175) * C33805 +
            (C35975 + C35976 + C35977) * C50783) *
               C50707 * C1963) *
              C50830 +
          (((C17976 + C17975 + C17974) * C33805 +
            (C18409 + C18410 + C18411) * C50783) *
               C50707 * C50878 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50877 -
           ((C17052 * C6013 - C17053 * C6012 - C17052 * C6014 + C17045 * C6015 +
             C17050 * C4513 - C17051 * C4507 - C17050 * C4514 + C17044 * C4519 +
             C17048 * C4515 - C17049 * C4508 - C17048 * C4516 +
             C17043 * C4520) *
                C50783 +
            (C18411 + C18410 + C18409) * C33805) *
               C50707 * C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50877 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C50878 +
           (C22223 * C39193 + C22225 * C39194 + C24056 * C39195 +
            C40594 * C39196) *
               C50707 * C1963) *
              C50830 +
          ((C20516 * C39193 + C20822 * C39194 + C22224 * C39195 +
            C23164 * C39196) *
               C50707 * C50878 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C50877 -
           ((C19865 * C24046 - C19866 * C24045 - C19865 * C24047 +
             C50556 * C24048) *
                C39196 +
            C23164 * C39195 + C22224 * C39194 + C20822 * C39193) *
               C50707 * C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                 C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                 C17052 * C136 - C17053 * C127 - C17052 * C137 +
                 C17045 * C148) *
                    C33805 +
                (C34172 + C34173 + C34174) * C50783) *
                   C50707 * C1547 -
               ((C34175 + C34176 + C34177) * C50783 +
                (C34174 + C34173 + C34172) * C33805) *
                   C50707 * C50685) *
                  C50605 * C898 +
              (((C34178 + C34179 + C34180) * C33805 +
                (C34181 + C34182 + C34183) * C50783) *
                   C50707 * C50685 -
               ((C34180 + C34179 + C34178) * C50783 +
                (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
                 C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
                 C17048 * C134 - C17049 * C126 - C17048 * C135 +
                 C17043 * C147) *
                    C33805) *
                   C50707 * C1547) *
                  C50605 * C899 +
              (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
                 C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
                 C17052 * C140 - C17053 * C129 - C17052 * C141 +
                 C17045 * C150) *
                    C33805 +
                (C34494 + C34495 + C34496) * C50783) *
                   C50707 * C1547 -
               ((C17052 * C425 - C17053 * C406 - C17052 * C426 + C17045 * C436 +
                 C17050 * C421 - C17051 * C404 - C17050 * C422 + C17044 * C434 +
                 C17048 * C419 - C17049 * C403 - C17048 * C420 +
                 C17043 * C433) *
                    C50783 +
                (C34496 + C34495 + C34494) * C33805) *
                   C50707 * C50685) *
                  C50605 * C900) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
                 C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
                 C17052 * C136 - C17053 * C127 - C17052 * C137 +
                 C17045 * C148) *
                    C33805 +
                (C34172 + C34173 + C34174) * C50783) *
                   C50707 * C1547 -
               ((C34175 + C34176 + C34177) * C50783 +
                (C34174 + C34173 + C34172) * C33805) *
                   C50707 * C50685) *
                  C251 +
              (((C17976 + C17975 + C17974) * C33805 +
                (C18409 + C18410 + C18411) * C50783) *
                   C50707 * C50685 -
               ((C17974 + C17975 + C17976) * C50783 +
                (C17275 + C17274 + C17273) * C33805) *
                   C50707 * C1547) *
                  C252 +
              (((C17278 + C17277 + C17276) * C33805 +
                (C18916 + C18917 + C18918) * C50783) *
                   C50707 * C1547 -
               ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 +
                 C17045 * C2572 + C17050 * C2566 - C17051 * C2562 -
                 C17050 * C2567 + C17044 * C2571 + C17048 * C2564 -
                 C17049 * C2561 - C17048 * C2565 + C17043 * C2570) *
                    C50783 +
                (C18918 + C18917 + C18916) * C33805) *
                   C50707 * C50685) *
                  C253) *
             C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C33805 +
           (C34172 + C34173 + C34174) * C50783) *
              C50707 * C1713 -
          ((C34175 + C34176 + C34177) * C50783 +
           (C34174 + C34173 + C34172) * C33805) *
              C50707 * C1714 +
          ((C34177 + C34176 + C34175) * C33805 +
           (C35975 + C35976 + C35977) * C50783) *
              C50707 * C1715 -
          ((C17052 * C5407 - C17053 * C5402 - C17052 * C5408 + C17045 * C5411 +
            C17050 * C5405 - C17051 * C5401 - C17050 * C5406 + C17044 * C5410 +
            C17048 * C5403 - C17049 * C5400 - C17048 * C5404 + C17043 * C5409) *
               C50783 +
           (C35977 + C35976 + C35975) * C33805) *
              C50707 * C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C1547 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
               C50685 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C1547 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C50783 +
             C31596 * C33805) *
                C2164 +
            (C22390 * C50783 + C22389 * C33805) * C2163 +
            (C22552 * C50783 + C22551 * C33805) * C2162) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C1547 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C251 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C38250 + C38251) * C2164) *
               C50685 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C1547) *
              C252 +
          ((C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C37611 + C37612) * C2164) *
               C1547 -
           (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
              C50556 * C20802) *
                 C50783 +
             C21164 * C33805) *
                C2164 +
            (C38251 + C38250) * C2163 + C38249 * C2162) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C36708 + C36709) * C2163 + C36720 * C2164) *
              C1713 -
          (C38249 * C2164 + (C37360 + C37361) * C2163 +
           (C22223 * C50783 + C22222 * C33805) * C2162) *
              C1714 +
          ((C22223 * C33805 + C22225 * C50783) * C2162 +
           (C37759 + C37760) * C2163 + (C37761 + C37762) * C2164) *
              C1715 -
          (((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
             C50556 * C23148) *
                C50783 +
            C23165 * C33805) *
               C2164 +
           (C23164 * C50783 + C22224 * C33805) * C2163 +
           (C24056 * C50783 + C22225 * C33805) * C2162) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C1547 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C50685) *
              C50605 * C898 +
          ((C22226 * C39193 + C22227 * C39194 + C22228 * C39195 +
            C39400 * C39196) *
               C50707 * C50685 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C39193 +
            C22551 * C39194 + C22552 * C39195 + C39603 * C39196) *
               C50707 * C1547 -
           ((C19865 * C5407 - C19866 * C5402 - C19865 * C5408 +
             C50556 * C5411) *
                C39196 +
            C39603 * C39195 + C22552 * C39194 + C22551 * C39193) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C1547 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C50685) *
              C251 +
          ((C20516 * C39193 + C20822 * C39194 + C22224 * C39195 +
            C23164 * C39196) *
               C50707 * C50685 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C1547) *
              C252 +
          ((C20015 * C39193 + C20515 * C39194 + C20823 * C39195 +
            C23165 * C39196) *
               C50707 * C1547 -
           ((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
             C50556 * C23148) *
                C39196 +
            C23165 * C39195 + C20823 * C39194 + C20515 * C39193) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
               C39193 +
           C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
              C50707 * C1713 -
          (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
           C22222 * C39193) *
              C50707 * C1714 +
          (C22223 * C39193 + C22225 * C39194 + C24056 * C39195 +
           C40594 * C39196) *
              C50707 * C1715 -
          ((C19865 * C40584 - C19866 * C40583 - C19865 * C40585 +
            C50556 * C40586) *
               C39196 +
           C40594 * C39195 + C24056 * C39194 + C22225 * C39193) *
              C50707 * C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50877 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50878 +
           ((C22223 * C33805 + C22225 * C50783) * C2162 +
            (C37759 + C37760) * C2163 + (C37761 + C37762) * C2164) *
               C1963) *
              C50605 * C50822 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
               C50878 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50877 -
           (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
              C50556 * C4517) *
                 C50783 +
             C22025 * C33805) *
                C2164 +
            (C22229 * C50783 + C22024 * C33805) * C2163 +
            (C22228 * C50783 + C22227 * C33805) * C2162) *
               C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50877 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50878 +
           ((C34177 + C34176 + C34175) * C33805 +
            (C35975 + C35976 + C35977) * C50783) *
               C50707 * C1963) *
              C50605 * C50822 +
          (((C34178 + C34179 + C34180) * C33805 +
            (C34181 + C34182 + C34183) * C50783) *
               C50707 * C50878 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50877 -
           ((C17052 * C1721 - C17053 * C1717 - C17052 * C1722 + C17045 * C1729 +
             C17050 * C1723 - C17051 * C1718 - C17050 * C1724 + C17044 * C1730 +
             C17048 * C1725 - C17049 * C1719 - C17048 * C1726 +
             C17043 * C1731) *
                C50783 +
            (C34183 + C34182 + C34181) * C33805) *
               C50707 * C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C50877 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C50878 +
           (C22223 * C39193 + C22225 * C39194 + C24056 * C39195 +
            C40594 * C39196) *
               C50707 * C1963) *
              C50605 * C50822 +
          ((C22226 * C39193 + C22227 * C39194 + C22228 * C39195 +
            C39400 * C39196) *
               C50707 * C50878 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C50877 -
           ((C19865 * C7321 - C19866 * C7319 - C19865 * C7322 +
             C50556 * C7325) *
                C39196 +
            C39400 * C39195 + C22228 * C39194 + C22227 * C39193) *
               C50707 * C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C1547 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C251 +
          (((C17976 + C17975 + C17974) * C33805 +
            (C18409 + C18410 + C18411) * C50783) *
               C50707 * C50685 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C1547) *
              C252 +
          (((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C1547 -
           ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 + C17045 * C2572 +
             C17050 * C2566 - C17051 * C2562 - C17050 * C2567 + C17044 * C2571 +
             C17048 * C2564 - C17049 * C2561 - C17048 * C2565 +
             C17043 * C2570) *
                C50783 +
            (C18918 + C18917 + C18916) * C33805) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C1547 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C50605 * C898 +
          (((C34178 + C34179 + C34180) * C33805 +
            (C34181 + C34182 + C34183) * C50783) *
               C50707 * C50685 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C34494 + C34495 + C34496) * C50783) *
               C50707 * C1547 -
           ((C17052 * C425 - C17053 * C406 - C17052 * C426 + C17045 * C436 +
             C17050 * C421 - C17051 * C404 - C17050 * C422 + C17044 * C434 +
             C17048 * C419 - C17049 * C403 - C17048 * C420 + C17043 * C433) *
                C50783 +
            (C34496 + C34495 + C34494) * C33805) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C1547 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
               C50685 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C1547 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C50783 +
             C31596 * C33805) *
                C2164 +
            (C22390 * C50783 + C22389 * C33805) * C2163 +
            (C22552 * C50783 + C22551 * C33805) * C2162) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C1547 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C251 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C38250 + C38251) * C2164) *
               C50685 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C1547) *
              C252 +
          ((C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C37611 + C37612) * C2164) *
               C1547 -
           (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
              C50556 * C20802) *
                 C50783 +
             C21164 * C33805) *
                C2164 +
            (C38251 + C38250) * C2163 + C38249 * C2162) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C1547 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C50685) *
              C50605 * C898 +
          ((C22226 * C39193 + C22227 * C39194 + C22228 * C39195 +
            C39400 * C39196) *
               C50707 * C50685 -
           (C22228 * C39196 + C22227 * C39195 + C22226 * C39194 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C39193) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C39193 +
            C22551 * C39194 + C22552 * C39195 + C39603 * C39196) *
               C50707 * C1547 -
           ((C19865 * C5407 - C19866 * C5402 - C19865 * C5408 +
             C50556 * C5411) *
                C39196 +
            C39603 * C39195 + C22552 * C39194 + C22551 * C39193) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C39193 +
            C22222 * C39194 + C22223 * C39195 + C22225 * C39196) *
               C50707 * C1547 -
           (C24056 * C39196 + C22225 * C39195 + C22223 * C39194 +
            C22222 * C39193) *
               C50707 * C50685) *
              C251 +
          ((C20516 * C39193 + C20822 * C39194 + C22224 * C39195 +
            C23164 * C39196) *
               C50707 * C50685 -
           (C22224 * C39196 + C20822 * C39195 + C20516 * C39194 +
            C20014 * C39193) *
               C50707 * C1547) *
              C252 +
          ((C20015 * C39193 + C20515 * C39194 + C20823 * C39195 +
            C23165 * C39196) *
               C50707 * C1547 -
           ((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
             C50556 * C23148) *
                C39196 +
            C23165 * C39195 + C20823 * C39194 + C20515 * C39193) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C50621 * C50830 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C50621 * C50657) *
              C50873 +
          (((C24874 + C24875) * C50881 + C28676 * C50882 +
            (C27998 + C27999) * C44512) *
               C50707 * C50621 * C50657 -
           (C44815 * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C50621 * C50830) *
              C50874 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50881 +
            (C28414 + C28415) * C50882 +
            (C49784 * C419 - C24646 * C403 - C49784 * C420 + C50815 * C433 +
             C49777 * C421 - C24648 * C404 - C49777 * C422 + C50561 * C434) *
                C44512) *
               C50707 * C50621 * C50830 -
           ((C49777 * C1090 - C24648 * C1086 - C49777 * C1091 + C50561 * C1098 +
             C49784 * C1092 - C24646 * C1087 - C49784 * C1093 +
             C50815 * C1099) *
                C44512 +
            (C28207 + C28206) * C50882 + (C25201 + C25200) * C50881) *
               C50707 * C50621 * C50657) *
              C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50881 +
             (C27990 + C27991) * C50882 + C44806 * C44512) *
                C50707 * C50831 -
            ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
             (C27991 + C27990) * C50881) *
                C50707 * C50685) *
               C50830 +
           ((C28674 * C50881 + C29197 * C50882 + (C29210 + C29211) * C44512) *
                C50707 * C50685 -
            (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
                C50707 * C50831) *
               C50657) *
              C254 +
          ((((C27994 + C27995) * C50881 + (C27996 + C27997) * C50882 +
             (C44820 + C44821) * C44512) *
                C50707 * C50685 -
            (C44815 * C44512 + (C27995 + C27994) * C50882 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50881) *
                C50707 * C50831) *
               C50830 +
           (((C24874 + C24875) * C50881 + C28676 * C50882 +
             (C27998 + C27999) * C44512) *
                C50707 * C50831 -
            ((C49777 * C6013 - C24648 * C6012 - C49777 * C6014 +
              C50561 * C6015 + C49784 * C4513 - C24646 * C4507 -
              C49784 * C4514 + C50815 * C4519) *
                 C44512 +
             (C27999 + C27998) * C50882 + C28677 * C50881) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + (C27993 + C27992) * C44512) *
               C50707 * C50621 * C251 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C50621 * C252 +
           (C24880 * C50881 + C29858 * C50882 + (C26032 + C26033) * C44512) *
               C50707 * C50621 * C253) *
              C254 +
          (((C24874 + C24875) * C50881 + C28676 * C50882 +
            (C27998 + C27999) * C44512) *
               C50707 * C50621 * C252 -
           ((C27997 + C27996) * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C50621 * C251 -
           ((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 + C50561 * C2572 +
             C49784 * C2566 - C24646 * C2562 - C49784 * C2567 +
             C50815 * C2571) *
                C44512 +
            (C25599 + C25598) * C50882 + C24881 * C50881) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50881 +
           (C27990 + C27991) * C50882 + (C27993 + C27992) * C44512) *
              C50707 * C50621 * C50605 * C113 -
          ((C27997 + C27996) * C44512 + (C27995 + C27994) * C50882 +
           (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
            C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
               C50881) *
              C50707 * C50621 * C50605 * C114 +
          ((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
            C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
               C50881 +
           (C28414 + C28415) * C50882 +
           (C49784 * C419 - C24646 * C403 - C49784 * C420 + C50815 * C433 +
            C49777 * C421 - C24648 * C404 - C49777 * C422 + C50561 * C434) *
               C44512) *
              C50707 * C50621 * C50605 * C115 -
          ((C49777 * C425 - C24648 * C406 - C49777 * C426 + C50561 * C436 +
            C49784 * C421 - C24646 * C404 - C49784 * C422 + C50815 * C434) *
               C44512 +
           (C49777 * C423 - C24648 * C405 - C49777 * C424 + C50561 * C435 +
            C49784 * C407 - C24646 * C397 - C49784 * C408 + C50815 * C427) *
               C50882 +
           (C49777 * C140 - C24648 * C129 - C49777 * C141 + C50561 * C150 +
            C49784 * C138 - C24646 * C128 - C49784 * C139 + C50815 * C149) *
               C50881) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C394 -
           ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C395 +
           (C44806 * C50881 + (C30389 + C30390) * C50882 +
            (C49784 * C5403 - C24646 * C5400 - C49784 * C5404 + C50815 * C5409 +
             C49777 * C5405 - C24648 * C5401 - C49777 * C5406 +
             C50561 * C5410) *
                C44512) *
               C50707 * C396) *
              C50605 * C254 +
          (((C27994 + C27995) * C50881 + (C27996 + C27997) * C50882 +
            (C44820 + C44821) * C44512) *
               C50707 * C395 -
           (C44815 * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C394 -
           ((C49777 * C5407 - C24648 * C5402 - C49777 * C5408 + C50561 * C5411 +
             C49784 * C5405 - C24646 * C5401 - C49784 * C5406 +
             C50815 * C5410) *
                C44512 +
            (C44821 + C44820) * C50882 + C44815 * C50881) *
               C50707 * C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C50831 -
           ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C50685) *
              C50605 * C50873 +
          (((C27994 + C27995) * C50881 + (C27996 + C27997) * C50882 +
            (C44820 + C44821) * C44512) *
               C50707 * C50685 -
           (C44815 * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C50831) *
              C50605 * C50874 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50881 +
            (C28414 + C28415) * C50882 + (C45126 + C45127) * C44512) *
               C50707 * C50831 -
           ((C49777 * C1721 - C24648 * C1717 - C49777 * C1722 + C50561 * C1729 +
             C49784 * C1723 - C24646 * C1718 - C49784 * C1724 +
             C50815 * C1730) *
                C44512 +
            (C45127 + C45126) * C50882 + (C28415 + C28414) * C50881) *
               C50707 * C50685) *
              C50605 * C539)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50881 +
           (C27990 + C27991) * C50882 + (C27993 + C27992) * C44512) *
              C50707 * C50621 * C50605 * C113 -
          ((C27997 + C27996) * C44512 + (C27995 + C27994) * C50882 +
           (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
            C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
               C50881) *
              C50707 * C50621 * C50605 * C114 +
          ((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
            C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
               C50881 +
           (C28414 + C28415) * C50882 +
           (C49784 * C419 - C24646 * C403 - C49784 * C420 + C50815 * C433 +
            C49777 * C421 - C24648 * C404 - C49777 * C422 + C50561 * C434) *
               C44512) *
              C50707 * C50621 * C50605 * C115 -
          ((C49777 * C425 - C24648 * C406 - C49777 * C426 + C50561 * C436 +
            C49784 * C421 - C24646 * C404 - C49784 * C422 + C50815 * C434) *
               C44512 +
           (C49777 * C423 - C24648 * C405 - C49777 * C424 + C50561 * C435 +
            C49784 * C407 - C24646 * C397 - C49784 * C408 + C50815 * C427) *
               C50882 +
           (C49777 * C140 - C24648 * C129 - C49777 * C141 + C50561 * C150 +
            C49784 * C138 - C24646 * C128 - C49784 * C139 + C50815 * C149) *
               C50881) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + (C27993 + C27992) * C44512) *
               C50707 * C50621 * C251 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C50621 * C252 +
           (C24880 * C50881 + C29858 * C50882 + (C26032 + C26033) * C44512) *
               C50707 * C50621 * C253) *
              C254 +
          (((C24874 + C24875) * C50881 + C28676 * C50882 +
            (C27998 + C27999) * C44512) *
               C50707 * C50621 * C252 -
           ((C27997 + C27996) * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C50621 * C251 -
           ((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 + C50561 * C2572 +
             C49784 * C2566 - C24646 * C2562 - C49784 * C2567 +
             C50815 * C2571) *
                C44512 +
            (C25599 + C25598) * C50882 + C24881 * C50881) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C50621 * C50875 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C50621 * C50876 +
           (C24880 * C50881 + C29858 * C50882 + (C26032 + C26033) * C44512) *
               C50707 * C50621 * C1202) *
              C50822 +
          (((C24874 + C24875) * C50881 + C28676 * C50882 +
            (C27998 + C27999) * C44512) *
               C50707 * C50621 * C50876 -
           (C44815 * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C50621 * C50875 -
           ((C49777 * C2568 - C24648 * C2563 - C49777 * C2569 + C50561 * C2572 +
             C49784 * C2566 - C24646 * C2562 - C49784 * C2567 +
             C50815 * C2571) *
                C44512 +
            (C25599 + C25598) * C50882 + C24881 * C50881) *
               C50707 * C50621 * C1202) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C50831 -
           ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C50685) *
              C50875 +
          ((C28674 * C50881 + C29197 * C50882 + (C29210 + C29211) * C44512) *
               C50707 * C50685 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C50831) *
              C50876 +
          ((C24880 * C50881 + C29858 * C50882 + (C26032 + C26033) * C44512) *
               C50707 * C50831 -
           ((C49777 * C4509 - C24648 * C4505 - C49777 * C4510 + C50561 * C4517 +
             C49784 * C4511 - C24646 * C4506 - C49784 * C4512 +
             C50815 * C4518) *
                C44512 +
            (C26033 + C26032) * C50882 + C26520 * C50881) *
               C50707 * C50685) *
              C1202) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50881 +
           (C27990 + C27991) * C50882 + C44806 * C44512) *
              C50707 * C50621 * C967 -
          (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
              C50707 * C50621 * C968 +
          (C24880 * C50881 + C29858 * C50882 + (C26032 + C26033) * C44512) *
              C50707 * C50621 * C969 -
          ((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 + C50561 * C3575 +
            C49784 * C3573 - C24646 * C3570 - C49784 * C3574 + C50815 * C3576) *
               C44512 +
           (C26535 + C26534) * C50882 + C25844 * C50881) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C50621 * C896 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C50621 * C50657) *
              C898 +
          (((C24874 + C24875) * C50881 + C28676 * C50882 +
            (C27998 + C27999) * C44512) *
               C50707 * C50621 * C50657 -
           (C44815 * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C50621 * C896) *
              C899 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50881 +
            (C28414 + C28415) * C50882 + (C45126 + C45127) * C44512) *
               C50707 * C50621 * C896 -
           ((C49777 * C1090 - C24648 * C1086 - C49777 * C1091 + C50561 * C1098 +
             C49784 * C1092 - C24646 * C1087 - C49784 * C1093 +
             C50815 * C1099) *
                C44512 +
            (C28207 + C28206) * C50882 + (C25201 + C25200) * C50881) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C394 -
           ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C395 +
           (C44806 * C50881 + (C30389 + C30390) * C50882 +
            (C49784 * C5403 - C24646 * C5400 - C49784 * C5404 + C50815 * C5409 +
             C49777 * C5405 - C24648 * C5401 - C49777 * C5406 +
             C50561 * C5410) *
                C44512) *
               C50707 * C396) *
              C896 +
          ((C28674 * C50881 + C29197 * C50882 + (C29210 + C29211) * C44512) *
               C50707 * C395 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C394 -
           ((C49777 * C6422 - C24648 * C6420 - C49777 * C6423 + C50561 * C6426 +
             C49784 * C6424 - C24646 * C6421 - C49784 * C6425 +
             C50815 * C6427) *
                C44512 +
            (C29211 + C29210) * C50882 + C29196 * C50881) *
               C50707 * C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50881 +
             (C27990 + C27991) * C50882 + C44806 * C44512) *
                C50707 * C50831 -
            ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
             (C27991 + C27990) * C50881) *
                C50707 * C50685) *
               C896 +
           ((C28674 * C50881 + C29197 * C50882 + (C29210 + C29211) * C44512) *
                C50707 * C50685 -
            (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
                C50707 * C50831) *
               C50657) *
              C50822 +
          ((((C27994 + C27995) * C50881 + (C27996 + C27997) * C50882 +
             (C44820 + C44821) * C44512) *
                C50707 * C50685 -
            (C44815 * C44512 + (C27995 + C27994) * C50882 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50881) *
                C50707 * C50831) *
               C896 +
           (((C24874 + C24875) * C50881 + C28676 * C50882 +
             (C27998 + C27999) * C44512) *
                C50707 * C50831 -
            ((C49777 * C6013 - C24648 * C6012 - C49777 * C6014 +
              C50561 * C6015 + C49784 * C4513 - C24646 * C4507 -
              C49784 * C4514 + C50815 * C4519) *
                 C44512 +
             (C27999 + C27998) * C50882 + C28677 * C50881) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C50621 * C896 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C50621 * C50657) *
              C898 +
          (((C24874 + C24875) * C50881 + C28676 * C50882 +
            (C27998 + C27999) * C44512) *
               C50707 * C50621 * C50657 -
           (C44815 * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C50621 * C896) *
              C899 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50881 +
            (C28414 + C28415) * C50882 + (C45126 + C45127) * C44512) *
               C50707 * C50621 * C896 -
           ((C49777 * C1090 - C24648 * C1086 - C49777 * C1091 + C50561 * C1098 +
             C49784 * C1092 - C24646 * C1087 - C49784 * C1093 +
             C50815 * C1099) *
                C44512 +
            (C28207 + C28206) * C50882 + (C25201 + C25200) * C50881) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50881 +
           (C27990 + C27991) * C50882 + C44806 * C44512) *
              C50707 * C50621 * C967 -
          (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
              C50707 * C50621 * C968 +
          (C24880 * C50881 + C29858 * C50882 + (C26032 + C26033) * C44512) *
              C50707 * C50621 * C969 -
          ((C49777 * C3571 - C24648 * C3569 - C49777 * C3572 + C50561 * C3575 +
            C49784 * C3573 - C24646 * C3570 - C49784 * C3574 + C50815 * C3576) *
               C44512 +
           (C26535 + C26534) * C50882 + C25844 * C50881) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
              C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                 C50881 +
             (C27990 + C27991) * C50882 + C44806 * C44512) *
                C50707 * C1547 -
            (C46588 * C44512 + (C27992 + C27993) * C50882 +
             (C27991 + C27990) * C50881) *
                C50707 * C50685) *
               C50830 +
           ((C28674 * C50881 + C29197 * C50882 + (C29210 + C29211) * C44512) *
                C50707 * C50685 -
            (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
                C50707 * C1547) *
               C50657) *
              C50822 +
          ((((C27994 + C27995) * C50881 + (C27996 + C27997) * C50882 +
             (C44820 + C44821) * C44512) *
                C50707 * C50685 -
            (C44815 * C44512 + (C27995 + C27994) * C50882 +
             (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
              C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                 C50881) *
                C50707 * C1547) *
               C50830 +
           (((C24874 + C24875) * C50881 + C28676 * C50882 +
             (C27998 + C27999) * C44512) *
                C50707 * C1547 -
            ((C49777 * C6013 - C24648 * C6012 - C49777 * C6014 +
              C50561 * C6015 + C49784 * C4513 - C24646 * C4507 -
              C49784 * C4514 + C50815 * C4519) *
                 C44512 +
             (C27999 + C27998) * C50882 + C28677 * C50881) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C50877 -
           (C46588 * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C50878 +
           (C44806 * C50881 + (C30389 + C30390) * C50882 +
            (C46601 + C46602) * C44512) *
               C50707 * C1963) *
              C50830 +
          ((C28674 * C50881 + C29197 * C50882 + (C29210 + C29211) * C44512) *
               C50707 * C50878 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C50877 -
           ((C49777 * C6422 - C24648 * C6420 - C49777 * C6423 + C50561 * C6426 +
             C49784 * C6424 - C24646 * C6421 - C49784 * C6425 +
             C50815 * C6427) *
                C44512 +
            (C29211 + C29210) * C50882 + C29196 * C50881) *
               C50707 * C1963) *
              C50657) *
         C50586) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C1547 -
           ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C50685) *
              C251 +
          ((C28674 * C50881 + C29197 * C50882 + (C29210 + C29211) * C44512) *
               C50707 * C50685 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C1547) *
              C252 +
          ((C24880 * C50881 + C29858 * C50882 + (C26032 + C26033) * C44512) *
               C50707 * C1547 -
           ((C49777 * C4509 - C24648 * C4505 - C49777 * C4510 + C50561 * C4517 +
             C49784 * C4511 - C24646 * C4506 - C49784 * C4512 +
             C50815 * C4518) *
                C44512 +
            (C26033 + C26032) * C50882 + C26520 * C50881) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C1547 -
           ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C50685) *
              C50605 * C898 +
          (((C27994 + C27995) * C50881 + (C27996 + C27997) * C50882 +
            (C44820 + C44821) * C44512) *
               C50707 * C50685 -
           (C44815 * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50881 +
            (C28414 + C28415) * C50882 + (C45126 + C45127) * C44512) *
               C50707 * C1547 -
           ((C49777 * C1721 - C24648 * C1717 - C49777 * C1722 + C50561 * C1729 +
             C49784 * C1723 - C24646 * C1718 - C49784 * C1724 +
             C50815 * C1730) *
                C44512 +
            (C45127 + C45126) * C50882 + (C28415 + C28414) * C50881) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
            C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
               C50881 +
           (C27990 + C27991) * C50882 + C44806 * C44512) *
              C50707 * C1713 -
          (C46588 * C44512 + (C27992 + C27993) * C50882 +
           (C27991 + C27990) * C50881) *
              C50707 * C1714 +
          (C44806 * C50881 + (C30389 + C30390) * C50882 +
           (C46601 + C46602) * C44512) *
              C50707 * C1715 -
          ((C49777 * C7321 - C24648 * C7319 - C49777 * C7322 + C50561 * C7325 +
            C49784 * C7323 - C24646 * C7320 - C49784 * C7324 + C50815 * C7326) *
               C44512 +
           (C46602 + C46601) * C50882 + C46588 * C50881) *
              C50707 * C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C50877 -
           (C46588 * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C50878 +
           (C44806 * C50881 + (C30389 + C30390) * C50882 +
            (C46601 + C46602) * C44512) *
               C50707 * C1963) *
              C50605 * C50822 +
          (((C27994 + C27995) * C50881 + (C27996 + C27997) * C50882 +
            (C44820 + C44821) * C44512) *
               C50707 * C50878 -
           (C44815 * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C50877 -
           ((C49777 * C5407 - C24648 * C5402 - C49777 * C5408 + C50561 * C5411 +
             C49784 * C5405 - C24646 * C5401 - C49784 * C5406 +
             C50815 * C5410) *
                C44512 +
            (C44821 + C44820) * C50882 + C44815 * C50881) *
               C50707 * C1963) *
              C50605 * C50592)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C1547 -
           ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C50685) *
              C50605 * C898 +
          (((C27994 + C27995) * C50881 + (C27996 + C27997) * C50882 +
            (C44820 + C44821) * C44512) *
               C50707 * C50685 -
           (C44815 * C44512 + (C27995 + C27994) * C50882 +
            (C49777 * C136 - C24648 * C127 - C49777 * C137 + C50561 * C148 +
             C49784 * C134 - C24646 * C126 - C49784 * C135 + C50815 * C147) *
                C50881) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C49784 * C136 - C24646 * C127 - C49784 * C137 + C50815 * C148 +
             C49777 * C138 - C24648 * C128 - C49777 * C139 + C50561 * C149) *
                C50881 +
            (C28414 + C28415) * C50882 + (C45126 + C45127) * C44512) *
               C50707 * C1547 -
           ((C49777 * C1721 - C24648 * C1717 - C49777 * C1722 + C50561 * C1729 +
             C49784 * C1723 - C24646 * C1718 - C49784 * C1724 +
             C50815 * C1730) *
                C44512 +
            (C45127 + C45126) * C50882 + (C28415 + C28414) * C50881) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C49784 * C132 - C24646 * C125 - C49784 * C133 + C50815 * C146 +
             C49777 * C134 - C24648 * C126 - C49777 * C135 + C50561 * C147) *
                C50881 +
            (C27990 + C27991) * C50882 + C44806 * C44512) *
               C50707 * C1547 -
           ((C30390 + C30389) * C44512 + (C27992 + C27993) * C50882 +
            (C27991 + C27990) * C50881) *
               C50707 * C50685) *
              C251 +
          ((C28674 * C50881 + C29197 * C50882 + (C29210 + C29211) * C44512) *
               C50707 * C50685 -
           (C29196 * C44512 + C28675 * C50882 + (C24869 + C24868) * C50881) *
               C50707 * C1547) *
              C252 +
          ((C24880 * C50881 + C29858 * C50882 + (C26032 + C26033) * C44512) *
               C50707 * C1547 -
           ((C49777 * C4509 - C24648 * C4505 - C49777 * C4510 + C50561 * C4517 +
             C49784 * C4511 - C24646 * C4506 - C49784 * C4512 +
             C50815 * C4518) *
                C44512 +
            (C26033 + C26032) * C50882 + C26520 * C50881) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50621 * C50830 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C50657) *
              C50873 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C50657 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C50830) *
              C50874 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428 +
             C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
             C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435) *
                C50783) *
               C50707 * C50621 * C50830 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50783 +
            (C17597 + C17596 + C17595) * C33805) *
               C50707 * C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C50830 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C50657) *
              C50873 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C50657 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C50830) *
              C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C50621 * C50830 -
           (((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
              C50556 * C3098) *
                 C50783 +
             C20246 * C33805) *
                C2164 +
            (C37017 + C37016) * C2163 + (C37015 + C37014) * C2162) *
               C50621 * C50657) *
              C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C33805 +
             (C34172 + C34173 + C34174) * C50783) *
                C50707 * C50831 -
            ((C34175 + C34176 + C34177) * C50783 +
             (C34174 + C34173 + C34172) * C33805) *
                C50707 * C50685) *
               C50830 +
           (((C17976 + C17975 + C17974) * C33805 +
             (C18409 + C18410 + C18411) * C50783) *
                C50707 * C50685 -
            ((C17974 + C17975 + C17976) * C50783 +
             (C17275 + C17274 + C17273) * C33805) *
                C50707 * C50831) *
               C50657) *
              C254 +
          ((((C34178 + C34179 + C34180) * C33805 +
             (C34181 + C34182 + C34183) * C50783) *
                C50707 * C50685 -
            ((C34180 + C34179 + C34178) * C50783 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C33805) *
                C50707 * C50831) *
               C50830 +
           (((C17279 + C17280 + C17281) * C33805 +
             (C17977 + C17978 + C17979) * C50783) *
                C50707 * C50831 -
            ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 +
              C17045 * C1098 + C17050 * C1092 - C17051 * C1087 -
              C17050 * C1093 + C17044 * C1099 + C17048 * C1094 -
              C17049 * C1088 - C17048 * C1095 + C17043 * C1100) *
                 C50783 +
             (C17979 + C17978 + C17977) * C33805) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C33805 +
              C22222 * C50783) *
                 C2162 +
             (C36708 + C36709) * C2163 + C36720 * C2164) *
                C50831 -
            ((C37358 + C37359) * C2164 + (C37360 + C37361) * C2163 +
             (C22223 * C50783 + C22222 * C33805) * C2162) *
                C50685) *
               C50830 +
           (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
             (C20514 * C33805 + C20824 * C50783) * C2164) *
                C50685 -
            ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
             (C36709 + C36708) * C2162) *
                C50831) *
               C50657) *
              C254 +
          ((((C22226 * C33805 + C22227 * C50783) * C2162 +
             (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
                C50685 -
            (C36721 * C2164 + (C36715 + C36714) * C2163 +
             (C22226 * C50783 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C33805) *
                 C2162) *
                C50831) *
               C50830 +
           (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
             (C36718 + C36719) * C2164) *
                C50831 -
            (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
               C50556 * C3575) *
                  C50783 +
              C20519 * C33805) *
                 C2164 +
             (C37365 + C37364) * C2163 + (C37363 + C37362) * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428) *
                C50783) *
               C50707 * C50621 * C251 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C252 +
           ((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C50621 * C253) *
              C254 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C252 -
           ((C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429) *
                C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C251 -
           ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 + C17045 * C1445 +
             C17050 * C1439 - C17051 * C1434 - C17050 * C1440 + C17044 * C1446 +
             C17048 * C1441 - C17049 * C1435 - C17048 * C1442 +
             C17043 * C1447) *
                C50783 +
            (C17284 + C17283 + C17282) * C33805) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C33805 +
           (C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430 +
            C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
            C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428) *
               C50783) *
              C50707 * C50621 * C50605 * C113 -
          ((C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427 +
            C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
            C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429) *
               C50783 +
           (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
            C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
            C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
               C33805) *
              C50707 * C50621 * C50605 * C114 +
          ((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
            C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
            C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
               C33805 +
           (C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428 +
            C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
            C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435) *
               C50783) *
              C50707 * C50621 * C50605 * C115 -
          ((C17052 * C645 - C17053 * C644 - C17052 * C646 + C17045 * C647 +
            C17050 * C423 - C17051 * C405 - C17050 * C424 + C17044 * C435 +
            C17048 * C407 - C17049 * C397 - C17048 * C408 + C17043 * C427) *
               C50783 +
           (C17052 * C142 - C17053 * C130 - C17052 * C143 + C17045 * C151 +
            C17050 * C140 - C17051 * C129 - C17050 * C141 + C17044 * C150 +
            C17048 * C138 - C17049 * C128 - C17048 * C139 + C17043 * C149) *
               C33805) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C394 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C395 +
           ((C34177 + C34176 + C34175) * C33805 +
            (C17048 * C1727 - C17049 * C1720 - C17048 * C1728 + C17043 * C1732 +
             C17050 * C1725 - C17051 * C1719 - C17050 * C1726 + C17044 * C1731 +
             C17052 * C1723 - C17053 * C1718 - C17052 * C1724 +
             C17045 * C1730) *
                C50783) *
               C50707 * C396) *
              C50605 * C254 +
          (((C34178 + C34179 + C34180) * C33805 +
            (C34181 + C34182 + C34183) * C50783) *
               C50707 * C395 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C394 -
           ((C17052 * C1721 - C17053 * C1717 - C17052 * C1722 + C17045 * C1729 +
             C17050 * C1723 - C17051 * C1718 - C17050 * C1724 + C17044 * C1730 +
             C17048 * C1725 - C17049 * C1719 - C17048 * C1726 +
             C17043 * C1731) *
                C50783 +
            (C34183 + C34182 + C34181) * C33805) *
               C50707 * C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C20014 * C33805 + C20516 * C50783) * C2163 +
           (C20015 * C33805 + C20515 * C50783) * C2164) *
              C50621 * C50605 * C113 -
          ((C20518 * C50783 + C20019 * C33805) * C2164 +
           (C20517 * C50783 + C20018 * C33805) * C2163 +
           (C22226 * C50783 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C33805) *
               C2162) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C33805 +
            C22551 * C50783) *
               C2162 +
           (C20244 * C33805 + C22389 * C50783) * C2163 +
           (C20245 * C33805 + C31596 * C50783) * C2164) *
              C50621 * C50605 * C115 -
          (((C19865 * C1437 - C19866 * C1433 - C19865 * C1438 +
             C50556 * C1445) *
                C50783 +
            (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
                C33805) *
               C2164 +
           ((C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C50783 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C33805) *
               C2163 +
           ((C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C50783 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C33805) *
               C2162) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C251 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C252 +
           (C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C20017 * C33805 + C21164 * C50783) * C2164) *
               C50621 * C253) *
              C254 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C252 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C251 -
           (((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50783 +
             C20021 * C33805) *
                C2164 +
            (C36719 + C36718) * C2163 + C36721 * C2162) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C394 -
           ((C20823 * C50783 + C20515 * C33805) * C2164 +
            (C20822 * C50783 + C20516 * C33805) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C395 +
           ((C22223 * C33805 + C22225 * C50783) * C2162 +
            (C20822 * C33805 + C22224 * C50783) * C2163 +
            (C20823 * C33805 + C23165 * C50783) * C2164) *
               C396) *
              C50605 * C254 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C20517 * C33805 + C22024 * C50783) * C2163 +
            (C20518 * C33805 + C22025 * C50783) * C2164) *
               C395 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C394 -
           (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
              C50556 * C4517) *
                 C50783 +
             C22025 * C33805) *
                C2164 +
            (C22229 * C50783 + C22024 * C33805) * C2163 +
            (C22228 * C50783 + C22227 * C33805) * C2162) *
               C396) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50831 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C50605 * C50873 +
          (((C34178 + C34179 + C34180) * C33805 +
            (C34181 + C34182 + C34183) * C50783) *
               C50707 * C50685 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50831) *
              C50605 * C50874 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C34494 + C34495 + C34496) * C50783) *
               C50707 * C50831 -
           ((C17052 * C425 - C17053 * C406 - C17052 * C426 + C17045 * C436 +
             C17050 * C421 - C17051 * C404 - C17050 * C422 + C17044 * C434 +
             C17048 * C419 - C17049 * C403 - C17048 * C420 + C17043 * C433) *
                C50783 +
            (C34496 + C34495 + C34494) * C33805) *
               C50707 * C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50831 -
           ((C20823 * C50783 + C20515 * C33805) * C2164 +
            (C20822 * C50783 + C20516 * C33805) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C50605 * C50873 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C20517 * C33805 + C22024 * C50783) * C2163 +
            (C20518 * C33805 + C22025 * C50783) * C2164) *
               C50685 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50831) *
              C50605 * C50874 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C50831 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C50783 +
             C31596 * C33805) *
                C2164 +
            (C22390 * C50783 + C22389 * C33805) * C2163 +
            (C22552 * C50783 + C22551 * C33805) * C2162) *
               C50685) *
              C50605 * C539)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C33805 +
           (C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430 +
            C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
            C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428) *
               C50783) *
              C50707 * C50621 * C50605 * C113 -
          ((C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427 +
            C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
            C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429) *
               C50783 +
           (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
            C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
            C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
               C33805) *
              C50707 * C50621 * C50605 * C114 +
          ((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
            C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
            C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
               C33805 +
           (C17048 * C409 - C17049 * C398 - C17048 * C410 + C17043 * C428 +
            C17050 * C407 - C17051 * C397 - C17050 * C408 + C17044 * C427 +
            C17052 * C423 - C17053 * C405 - C17052 * C424 + C17045 * C435) *
               C50783) *
              C50707 * C50621 * C50605 * C115 -
          ((C17052 * C645 - C17053 * C644 - C17052 * C646 + C17045 * C647 +
            C17050 * C423 - C17051 * C405 - C17050 * C424 + C17044 * C435 +
            C17048 * C407 - C17049 * C397 - C17048 * C408 + C17043 * C427) *
               C50783 +
           (C17052 * C142 - C17053 * C130 - C17052 * C143 + C17045 * C151 +
            C17050 * C140 - C17051 * C129 - C17050 * C141 + C17044 * C150 +
            C17048 * C138 - C17049 * C128 - C17048 * C139 + C17043 * C149) *
               C33805) *
              C50707 * C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C17048 * C413 - C17049 * C400 - C17048 * C414 + C17043 * C430 +
             C17050 * C411 - C17051 * C399 - C17050 * C412 + C17044 * C429 +
             C17052 * C409 - C17053 * C398 - C17052 * C410 + C17045 * C428) *
                C50783) *
               C50707 * C50621 * C251 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C252 +
           ((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C50621 * C253) *
              C254 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C252 -
           ((C17052 * C407 - C17053 * C397 - C17052 * C408 + C17045 * C427 +
             C17050 * C409 - C17051 * C398 - C17050 * C410 + C17044 * C428 +
             C17048 * C411 - C17049 * C399 - C17048 * C412 + C17043 * C429) *
                C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C251 -
           ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 + C17045 * C1445 +
             C17050 * C1439 - C17051 * C1434 - C17050 * C1440 + C17044 * C1446 +
             C17048 * C1441 - C17049 * C1435 - C17048 * C1442 +
             C17043 * C1447) *
                C50783 +
            (C17284 + C17283 + C17282) * C33805) *
               C50707 * C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C20014 * C33805 + C20516 * C50783) * C2163 +
           (C20015 * C33805 + C20515 * C50783) * C2164) *
              C50621 * C50605 * C113 -
          ((C20518 * C50783 + C20019 * C33805) * C2164 +
           (C20517 * C50783 + C20018 * C33805) * C2163 +
           (C22226 * C50783 +
            (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                C33805) *
               C2162) *
              C50621 * C50605 * C114 +
          (((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                C33805 +
            C22551 * C50783) *
               C2162 +
           (C20244 * C33805 + C22389 * C50783) * C2163 +
           (C20245 * C33805 + C31596 * C50783) * C2164) *
              C50621 * C50605 * C115 -
          (((C19865 * C1437 - C19866 * C1433 - C19865 * C1438 +
             C50556 * C1445) *
                C50783 +
            (C19865 * C280 - C19866 * C263 - C19865 * C281 + C50556 * C293) *
                C33805) *
               C2164 +
           ((C19865 * C789 - C19866 * C781 - C19865 * C790 + C50556 * C796) *
                C50783 +
            (C19865 * C266 - C19866 * C256 - C19865 * C267 + C50556 * C286) *
                C33805) *
               C2163 +
           ((C19865 * C407 - C19866 * C397 - C19865 * C408 + C50556 * C427) *
                C50783 +
            (C19865 * C138 - C19866 * C128 - C19865 * C139 + C50556 * C149) *
                C33805) *
               C2162) *
              C50621 * C50605 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C251 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C252 +
           (C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C20017 * C33805 + C21164 * C50783) * C2164) *
               C50621 * C253) *
              C254 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C252 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C251 -
           (((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50783 +
             C20021 * C33805) *
                C2164 +
            (C36719 + C36718) * C2163 + C36721 * C2162) *
               C50621 * C253) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50621 * C50875 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C50876 +
           ((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C50621 * C1202) *
              C50822 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C50876 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C50875 -
           ((C17052 * C1437 - C17053 * C1433 - C17052 * C1438 + C17045 * C1445 +
             C17050 * C1439 - C17051 * C1434 - C17050 * C1440 + C17044 * C1446 +
             C17048 * C1441 - C17049 * C1435 - C17048 * C1442 +
             C17043 * C1447) *
                C50783 +
            (C17284 + C17283 + C17282) * C33805) *
               C50707 * C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C50875 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C50876 +
           (C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C37611 + C37612) * C2164) *
               C50621 * C1202) *
              C50822 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C50876 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C50875 -
           (((C19865 * C4093 - C19866 * C4091 - C19865 * C4094 +
              C50556 * C4097) *
                 C50783 +
             C20021 * C33805) *
                C2164 +
            (C36719 + C36718) * C2163 + C36721 * C2162) *
               C50621 * C1202) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50831 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C50875 +
          (((C17976 + C17975 + C17974) * C33805 +
            (C18409 + C18410 + C18411) * C50783) *
               C50707 * C50685 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50831) *
              C50876 +
          (((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C50831 -
           ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 + C17045 * C2572 +
             C17050 * C2566 - C17051 * C2562 - C17050 * C2567 + C17044 * C2571 +
             C17048 * C2564 - C17049 * C2561 - C17048 * C2565 +
             C17043 * C2570) *
                C50783 +
            (C18918 + C18917 + C18916) * C33805) *
               C50707 * C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50831 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C50875 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C38250 + C38251) * C2164) *
               C50685 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50831) *
              C50876 +
          ((C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C37611 + C37612) * C2164) *
               C50831 -
           (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
              C50556 * C20802) *
                 C50783 +
             C21164 * C33805) *
                C2164 +
            (C38251 + C38250) * C2163 + C38249 * C2162) *
               C50685) *
              C1202) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C33805 +
           (C34172 + C34173 + C34174) * C50783) *
              C50707 * C50621 * C967 -
          ((C17974 + C17975 + C17976) * C50783 +
           (C17275 + C17274 + C17273) * C33805) *
              C50707 * C50621 * C968 +
          ((C17278 + C17277 + C17276) * C33805 +
           (C18916 + C18917 + C18918) * C50783) *
              C50707 * C50621 * C969 -
          ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 + C17045 * C3098 +
            C17050 * C3092 - C17051 * C3088 - C17050 * C3093 + C17044 * C3097 +
            C17048 * C3090 - C17049 * C3087 - C17048 * C3091 + C17043 * C3096) *
               C50783 +
           (C18244 + C18243 + C18242) * C33805) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50621 * C896 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C50657) *
              C898 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C50657 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C896) *
              C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C34494 + C34495 + C34496) * C50783) *
               C50707 * C50621 * C896 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50783 +
            (C17597 + C17596 + C17595) * C33805) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C394 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C395 +
           ((C34177 + C34176 + C34175) * C33805 +
            (C17048 * C1727 - C17049 * C1720 - C17048 * C1728 + C17043 * C1732 +
             C17050 * C1725 - C17051 * C1719 - C17050 * C1726 + C17044 * C1731 +
             C17052 * C1723 - C17053 * C1718 - C17052 * C1724 +
             C17045 * C1730) *
                C50783) *
               C50707 * C396) *
              C896 +
          (((C17976 + C17975 + C17974) * C33805 +
            (C18409 + C18410 + C18411) * C50783) *
               C50707 * C395 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C394 -
           ((C17052 * C6013 - C17053 * C6012 - C17052 * C6014 + C17045 * C6015 +
             C17050 * C4513 - C17051 * C4507 - C17050 * C4514 + C17044 * C4519 +
             C17048 * C4515 - C17049 * C4508 - C17048 * C4516 +
             C17043 * C4520) *
                C50783 +
            (C18411 + C18410 + C18409) * C33805) *
               C50707 * C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C896 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C50657) *
              C898 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C50657 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C50621 * C896 -
           (((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
              C50556 * C3098) *
                 C50783 +
             C20246 * C33805) *
                C2164 +
            (C37017 + C37016) * C2163 + (C37015 + C37014) * C2162) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C36708 + C36709) * C2163 + C36720 * C2164) *
              C50621 * C967 -
          (C37610 * C2164 + (C36711 + C36710) * C2163 +
           (C36709 + C36708) * C2162) *
              C50621 * C968 +
          (C36720 * C2162 + (C36713 + C36712) * C2163 +
           (C37611 + C37612) * C2164) *
              C50621 * C969 -
          (((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50783 +
            C20700 * C33805) *
               C2164 +
           (C37612 + C37611) * C2163 + C37610 * C2162) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C394 -
           ((C37358 + C37359) * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C395 +
           ((C22223 * C33805 + C22225 * C50783) * C2162 +
            (C37759 + C37760) * C2163 + (C37761 + C37762) * C2164) *
               C396) *
              C896 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C20514 * C33805 + C20824 * C50783) * C2164) *
               C395 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C394 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C50783 +
             C20824 * C33805) *
                C2164 +
            (C37762 + C37761) * C2163 + (C37760 + C37759) * C2162) *
               C396) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C33805 +
             (C34172 + C34173 + C34174) * C50783) *
                C50707 * C50831 -
            ((C34175 + C34176 + C34177) * C50783 +
             (C34174 + C34173 + C34172) * C33805) *
                C50707 * C50685) *
               C896 +
           (((C17976 + C17975 + C17974) * C33805 +
             (C18409 + C18410 + C18411) * C50783) *
                C50707 * C50685 -
            ((C17974 + C17975 + C17976) * C50783 +
             (C17275 + C17274 + C17273) * C33805) *
                C50707 * C50831) *
               C50657) *
              C50822 +
          ((((C34178 + C34179 + C34180) * C33805 +
             (C34181 + C34182 + C34183) * C50783) *
                C50707 * C50685 -
            ((C34180 + C34179 + C34178) * C50783 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C33805) *
                C50707 * C50831) *
               C896 +
           (((C17279 + C17280 + C17281) * C33805 +
             (C17977 + C17978 + C17979) * C50783) *
                C50707 * C50831 -
            ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 +
              C17045 * C1098 + C17050 * C1092 - C17051 * C1087 -
              C17050 * C1093 + C17044 * C1099 + C17048 * C1094 -
              C17049 * C1088 - C17048 * C1095 + C17043 * C1100) *
                 C50783 +
             (C17979 + C17978 + C17977) * C33805) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C33805 +
              C22222 * C50783) *
                 C2162 +
             (C36708 + C36709) * C2163 + C36720 * C2164) *
                C50831 -
            ((C37358 + C37359) * C2164 + (C37360 + C37361) * C2163 +
             (C22223 * C50783 + C22222 * C33805) * C2162) *
                C50685) *
               C896 +
           (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
             (C20514 * C33805 + C20824 * C50783) * C2164) *
                C50685 -
            (C37610 * C2164 + (C36711 + C36710) * C2163 +
             (C36709 + C36708) * C2162) *
                C50831) *
               C50657) *
              C50822 +
          ((((C22226 * C33805 + C22227 * C50783) * C2162 +
             (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
                C50685 -
            (C36721 * C2164 + (C36715 + C36714) * C2163 +
             (C22226 * C50783 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C33805) *
                 C2162) *
                C50831) *
               C896 +
           (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
             (C36718 + C36719) * C2164) *
                C50831 -
            (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
               C50556 * C3575) *
                  C50783 +
              C20519 * C33805) *
                 C2164 +
             (C37365 + C37364) * C2163 + (C37363 + C37362) * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50621 * C896 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50621 * C50657) *
              C898 +
          (((C17279 + C17280 + C17281) * C33805 +
            (C17977 + C17978 + C17979) * C50783) *
               C50707 * C50621 * C50657 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50621 * C896) *
              C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C34494 + C34495 + C34496) * C50783) *
               C50707 * C50621 * C896 -
           ((C17052 * C791 - C17053 * C782 - C17052 * C792 + C17045 * C797 +
             C17050 * C789 - C17051 * C781 - C17050 * C790 + C17044 * C796 +
             C17048 * C787 - C17049 * C780 - C17048 * C788 + C17043 * C795) *
                C50783 +
            (C17597 + C17596 + C17595) * C33805) *
               C50707 * C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C33805 +
           (C34172 + C34173 + C34174) * C50783) *
              C50707 * C50621 * C967 -
          ((C17974 + C17975 + C17976) * C50783 +
           (C17275 + C17274 + C17273) * C33805) *
              C50707 * C50621 * C968 +
          ((C17278 + C17277 + C17276) * C33805 +
           (C18916 + C18917 + C18918) * C50783) *
              C50707 * C50621 * C969 -
          ((C17052 * C3094 - C17053 * C3089 - C17052 * C3095 + C17045 * C3098 +
            C17050 * C3092 - C17051 * C3088 - C17050 * C3093 + C17044 * C3097 +
            C17048 * C3090 - C17049 * C3087 - C17048 * C3091 + C17043 * C3096) *
               C50783 +
           (C18244 + C18243 + C18242) * C33805) *
              C50707 * C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50621 * C896 -
           ((C36712 + C36713) * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50621 * C50657) *
              C898 +
          (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
            (C36718 + C36719) * C2164) *
               C50621 * C50657 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50621 * C896) *
              C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C50621 * C896 -
           (((C19865 * C3094 - C19866 * C3089 - C19865 * C3095 +
              C50556 * C3098) *
                 C50783 +
             C20246 * C33805) *
                C2164 +
            (C37017 + C37016) * C2163 + (C37015 + C37014) * C2162) *
               C50621 * C50657) *
              C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C36708 + C36709) * C2163 + C36720 * C2164) *
              C50621 * C967 -
          (C37610 * C2164 + (C36711 + C36710) * C2163 +
           (C36709 + C36708) * C2162) *
              C50621 * C968 +
          (C36720 * C2162 + (C36713 + C36712) * C2163 +
           (C37611 + C37612) * C2164) *
              C50621 * C969 -
          (((C19865 * C21154 - C19866 * C21153 - C19865 * C21155 +
             C50556 * C21156) *
                C50783 +
            C20700 * C33805) *
               C2164 +
           (C37612 + C37611) * C2163 + C37610 * C2162) *
              C50621 * C970) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
              C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
              C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                 C33805 +
             (C34172 + C34173 + C34174) * C50783) *
                C50707 * C1547 -
            ((C34175 + C34176 + C34177) * C50783 +
             (C34174 + C34173 + C34172) * C33805) *
                C50707 * C50685) *
               C50830 +
           (((C17976 + C17975 + C17974) * C33805 +
             (C18409 + C18410 + C18411) * C50783) *
                C50707 * C50685 -
            ((C17974 + C17975 + C17976) * C50783 +
             (C17275 + C17274 + C17273) * C33805) *
                C50707 * C1547) *
               C50657) *
              C50822 +
          ((((C34178 + C34179 + C34180) * C33805 +
             (C34181 + C34182 + C34183) * C50783) *
                C50707 * C50685 -
            ((C34180 + C34179 + C34178) * C50783 +
             (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
              C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
              C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                 C33805) *
                C50707 * C1547) *
               C50830 +
           (((C17279 + C17280 + C17281) * C33805 +
             (C17977 + C17978 + C17979) * C50783) *
                C50707 * C1547 -
            ((C17052 * C1090 - C17053 * C1086 - C17052 * C1091 +
              C17045 * C1098 + C17050 * C1092 - C17051 * C1087 -
              C17050 * C1093 + C17044 * C1099 + C17048 * C1094 -
              C17049 * C1088 - C17048 * C1095 + C17043 * C1100) *
                 C50783 +
             (C17979 + C17978 + C17977) * C33805) *
                C50707 * C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                  C33805 +
              C22222 * C50783) *
                 C2162 +
             (C36708 + C36709) * C2163 + C36720 * C2164) *
                C1547 -
            (C38249 * C2164 + (C37360 + C37361) * C2163 +
             (C22223 * C50783 + C22222 * C33805) * C2162) *
                C50685) *
               C50830 +
           (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
             (C38250 + C38251) * C2164) *
                C50685 -
            (C37610 * C2164 + (C36711 + C36710) * C2163 +
             (C36709 + C36708) * C2162) *
                C1547) *
               C50657) *
              C50822 +
          ((((C22226 * C33805 + C22227 * C50783) * C2162 +
             (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
                C50685 -
            (C36721 * C2164 + (C36715 + C36714) * C2163 +
             (C22226 * C50783 +
              (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                  C33805) *
                 C2162) *
                C1547) *
               C50830 +
           (((C36714 + C36715) * C2162 + (C36716 + C36717) * C2163 +
             (C36718 + C36719) * C2164) *
                C1547 -
            (((C19865 * C3571 - C19866 * C3569 - C19865 * C3572 +
               C50556 * C3575) *
                  C50783 +
              C20519 * C33805) *
                 C2164 +
             (C37365 + C37364) * C2163 + (C37363 + C37362) * C2162) *
                C50685) *
               C50657) *
              C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50877 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50878 +
           ((C34177 + C34176 + C34175) * C33805 +
            (C35975 + C35976 + C35977) * C50783) *
               C50707 * C1963) *
              C50830 +
          (((C17976 + C17975 + C17974) * C33805 +
            (C18409 + C18410 + C18411) * C50783) *
               C50707 * C50878 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C50877 -
           ((C17052 * C6013 - C17053 * C6012 - C17052 * C6014 + C17045 * C6015 +
             C17050 * C4513 - C17051 * C4507 - C17050 * C4514 + C17044 * C4519 +
             C17048 * C4515 - C17049 * C4508 - C17048 * C4516 +
             C17043 * C4520) *
                C50783 +
            (C18411 + C18410 + C18409) * C33805) *
               C50707 * C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50877 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50878 +
           ((C22223 * C33805 + C22225 * C50783) * C2162 +
            (C37759 + C37760) * C2163 + (C37761 + C37762) * C2164) *
               C1963) *
              C50830 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C38250 + C38251) * C2164) *
               C50878 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C50877 -
           (((C19865 * C21428 - C19866 * C21427 - C19865 * C21429 +
              C50556 * C21430) *
                 C50783 +
             C20824 * C33805) *
                C2164 +
            (C37762 + C37761) * C2163 + (C37760 + C37759) * C2162) *
               C1963) *
              C50657) *
         C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C1547 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C251 +
          (((C17976 + C17975 + C17974) * C33805 +
            (C18409 + C18410 + C18411) * C50783) *
               C50707 * C50685 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C1547) *
              C252 +
          (((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C1547 -
           ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 + C17045 * C2572 +
             C17050 * C2566 - C17051 * C2562 - C17050 * C2567 + C17044 * C2571 +
             C17048 * C2564 - C17049 * C2561 - C17048 * C2565 +
             C17043 * C2570) *
                C50783 +
            (C18918 + C18917 + C18916) * C33805) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C1547 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C50605 * C898 +
          (((C34178 + C34179 + C34180) * C33805 +
            (C34181 + C34182 + C34183) * C50783) *
               C50707 * C50685 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C34494 + C34495 + C34496) * C50783) *
               C50707 * C1547 -
           ((C17052 * C425 - C17053 * C406 - C17052 * C426 + C17045 * C436 +
             C17050 * C421 - C17051 * C404 - C17050 * C422 + C17044 * C434 +
             C17048 * C419 - C17049 * C403 - C17048 * C420 + C17043 * C433) *
                C50783 +
            (C34496 + C34495 + C34494) * C33805) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
            C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
            C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
               C33805 +
           (C34172 + C34173 + C34174) * C50783) *
              C50707 * C1713 -
          ((C34175 + C34176 + C34177) * C50783 +
           (C34174 + C34173 + C34172) * C33805) *
              C50707 * C1714 +
          ((C34177 + C34176 + C34175) * C33805 +
           (C35975 + C35976 + C35977) * C50783) *
              C50707 * C1715 -
          ((C17052 * C5407 - C17053 * C5402 - C17052 * C5408 + C17045 * C5411 +
            C17050 * C5405 - C17051 * C5401 - C17050 * C5406 + C17044 * C5410 +
            C17048 * C5403 - C17049 * C5400 - C17048 * C5404 + C17043 * C5409) *
               C50783 +
           (C35977 + C35976 + C35975) * C33805) *
              C50707 * C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C1547 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
               C50685 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C1547 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C50783 +
             C31596 * C33805) *
                C2164 +
            (C22390 * C50783 + C22389 * C33805) * C2163 +
            (C22552 * C50783 + C22551 * C33805) * C2162) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C1547 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C251 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C38250 + C38251) * C2164) *
               C50685 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C1547) *
              C252 +
          ((C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C37611 + C37612) * C2164) *
               C1547 -
           (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
              C50556 * C20802) *
                 C50783 +
             C21164 * C33805) *
                C2164 +
            (C38251 + C38250) * C2163 + C38249 * C2162) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                C33805 +
            C22222 * C50783) *
               C2162 +
           (C36708 + C36709) * C2163 + C36720 * C2164) *
              C1713 -
          (C38249 * C2164 + (C37360 + C37361) * C2163 +
           (C22223 * C50783 + C22222 * C33805) * C2162) *
              C1714 +
          ((C22223 * C33805 + C22225 * C50783) * C2162 +
           (C37759 + C37760) * C2163 + (C37761 + C37762) * C2164) *
              C1715 -
          (((C19865 * C23146 - C19866 * C23145 - C19865 * C23147 +
             C50556 * C23148) *
                C50783 +
            C23165 * C33805) *
               C2164 +
           (C23164 * C50783 + C22224 * C33805) * C2163 +
           (C24056 * C50783 + C22225 * C33805) * C2162) *
              C1716) *
         C50605 * C50586) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C50877 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50878 +
           ((C34177 + C34176 + C34175) * C33805 +
            (C35975 + C35976 + C35977) * C50783) *
               C50707 * C1963) *
              C50605 * C50822 +
          (((C34178 + C34179 + C34180) * C33805 +
            (C34181 + C34182 + C34183) * C50783) *
               C50707 * C50878 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C50877 -
           ((C17052 * C1721 - C17053 * C1717 - C17052 * C1722 + C17045 * C1729 +
             C17050 * C1723 - C17051 * C1718 - C17050 * C1724 + C17044 * C1730 +
             C17048 * C1725 - C17049 * C1719 - C17048 * C1726 +
             C17043 * C1731) *
                C50783 +
            (C34183 + C34182 + C34181) * C33805) *
               C50707 * C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C50877 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50878 +
           ((C22223 * C33805 + C22225 * C50783) * C2162 +
            (C37759 + C37760) * C2163 + (C37761 + C37762) * C2164) *
               C1963) *
              C50605 * C50822 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
               C50878 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C50877 -
           (((C19865 * C4509 - C19866 * C4505 - C19865 * C4510 +
              C50556 * C4517) *
                 C50783 +
             C22025 * C33805) *
                C2164 +
            (C22229 * C50783 + C22024 * C33805) * C2163 +
            (C22228 * C50783 + C22227 * C33805) * C2162) *
               C1963) *
              C50605 * C50592)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C1547 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C50605 * C898 +
          (((C34178 + C34179 + C34180) * C33805 +
            (C34181 + C34182 + C34183) * C50783) *
               C50707 * C50685 -
           ((C34180 + C34179 + C34178) * C50783 +
            (C17052 * C138 - C17053 * C128 - C17052 * C139 + C17045 * C149 +
             C17050 * C136 - C17051 * C127 - C17050 * C137 + C17044 * C148 +
             C17048 * C134 - C17049 * C126 - C17048 * C135 + C17043 * C147) *
                C33805) *
               C50707 * C1547) *
              C50605 * C899 +
          (((C17048 * C136 - C17049 * C127 - C17048 * C137 + C17043 * C148 +
             C17050 * C138 - C17051 * C128 - C17050 * C139 + C17044 * C149 +
             C17052 * C140 - C17053 * C129 - C17052 * C141 + C17045 * C150) *
                C33805 +
            (C34494 + C34495 + C34496) * C50783) *
               C50707 * C1547 -
           ((C17052 * C425 - C17053 * C406 - C17052 * C426 + C17045 * C436 +
             C17050 * C421 - C17051 * C404 - C17050 * C422 + C17044 * C434 +
             C17048 * C419 - C17049 * C403 - C17048 * C420 + C17043 * C433) *
                C50783 +
            (C34496 + C34495 + C34494) * C33805) *
               C50707 * C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17048 * C132 - C17049 * C125 - C17048 * C133 + C17043 * C146 +
             C17050 * C134 - C17051 * C126 - C17050 * C135 + C17044 * C147 +
             C17052 * C136 - C17053 * C127 - C17052 * C137 + C17045 * C148) *
                C33805 +
            (C34172 + C34173 + C34174) * C50783) *
               C50707 * C1547 -
           ((C34175 + C34176 + C34177) * C50783 +
            (C34174 + C34173 + C34172) * C33805) *
               C50707 * C50685) *
              C251 +
          (((C17976 + C17975 + C17974) * C33805 +
            (C18409 + C18410 + C18411) * C50783) *
               C50707 * C50685 -
           ((C17974 + C17975 + C17976) * C50783 +
            (C17275 + C17274 + C17273) * C33805) *
               C50707 * C1547) *
              C252 +
          (((C17278 + C17277 + C17276) * C33805 +
            (C18916 + C18917 + C18918) * C50783) *
               C50707 * C1547 -
           ((C17052 * C2568 - C17053 * C2563 - C17052 * C2569 + C17045 * C2572 +
             C17050 * C2566 - C17051 * C2562 - C17050 * C2567 + C17044 * C2571 +
             C17048 * C2564 - C17049 * C2561 - C17048 * C2565 +
             C17043 * C2570) *
                C50783 +
            (C18918 + C18917 + C18916) * C33805) *
               C50707 * C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C1547 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C50605 * C898 +
          (((C22226 * C33805 + C22227 * C50783) * C2162 +
            (C37362 + C37363) * C2163 + (C37364 + C37365) * C2164) *
               C50685 -
           (C36721 * C2164 + (C36715 + C36714) * C2163 +
            (C22226 * C50783 +
             (C19865 * C134 - C19866 * C126 - C19865 * C135 + C50556 * C147) *
                 C33805) *
                C2162) *
               C1547) *
              C50605 * C899 +
          ((((C19865 * C136 - C19866 * C127 - C19865 * C137 + C50556 * C148) *
                 C33805 +
             C22551 * C50783) *
                C2162 +
            (C37014 + C37015) * C2163 + (C37016 + C37017) * C2164) *
               C1547 -
           (((C19865 * C2568 - C19866 * C2563 - C19865 * C2569 +
              C50556 * C2572) *
                 C50783 +
             C31596 * C33805) *
                C2164 +
            (C22390 * C50783 + C22389 * C33805) * C2163 +
            (C22552 * C50783 + C22551 * C33805) * C2162) *
               C50685) *
              C50605 * C900)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C19865 * C132 - C19866 * C125 - C19865 * C133 + C50556 * C146) *
                 C33805 +
             C22222 * C50783) *
                C2162 +
            (C36708 + C36709) * C2163 + C36720 * C2164) *
               C1547 -
           (C38249 * C2164 + (C37360 + C37361) * C2163 +
            (C22223 * C50783 + C22222 * C33805) * C2162) *
               C50685) *
              C251 +
          (((C37361 + C37360) * C2162 + (C37359 + C37358) * C2163 +
            (C38250 + C38251) * C2164) *
               C50685 -
           (C37610 * C2164 + (C36711 + C36710) * C2163 +
            (C36709 + C36708) * C2162) *
               C1547) *
              C252 +
          ((C36720 * C2162 + (C36713 + C36712) * C2163 +
            (C37611 + C37612) * C2164) *
               C1547 -
           (((C19865 * C20800 - C19866 * C20799 - C19865 * C20801 +
              C50556 * C20802) *
                 C50783 +
             C21164 * C33805) *
                C2164 +
            (C38251 + C38250) * C2163 + C38249 * C2162) *
               C50685) *
              C253) *
         C50586) /
            (p * q * std::sqrt(p + q));
}
