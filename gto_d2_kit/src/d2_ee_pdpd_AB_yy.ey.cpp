/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pdpd_AB_yy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1212_12_22(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C49753 = ae + be;
    const double C49752 = ae * be;
    const double C49751 = yA - yB;
    const double C49760 = 0 * be;
    const double C49809 = 0 * ae;
    const double C49804 = 0 * be;
    const double C49858 = p + q;
    const double C49857 = p * q;
    const double C49864 = bs[3];
    const double C49863 = yP - yQ;
    const double C49871 = bs[4];
    const double C49869 = xP - xQ;
    const double C49879 = bs[5];
    const double C49888 = bs[6];
    const double C49899 = bs[7];
    const double C49921 = bs[2];
    const double C50012 = zP - zQ;
    const double C119 = bs[0];
    const double C50649 = xA - xB;
    const double C50676 = ce + de;
    const double C50675 = ce * de;
    const double C50674 = xC - xD;
    const double C50698 = yC - yD;
    const double C50714 = zC - zD;
    const double C50811 = zA - zB;
    const double C49761 = std::pow(C49753, 2);
    const double C49805 = 2 * C49753;
    const double C49768 = 2 * C49752;
    const double C49762 = C49752 * C49751;
    const double C50796 = std::pow(C49751, 2);
    const double C50848 = C49751 * be;
    const double C50847 = C49751 * ae;
    const double C49806 = C49751 * C49760;
    const double C49824 = -2 * C49760;
    const double C49814 = C49809 / C49753;
    const double C49859 = 2 * C49857;
    const double C49866 = std::pow(C49863, 2);
    const double C49912 = C49863 * ae;
    const double C49911 = C49863 * be;
    const double C49881 = std::pow(C49869, 2);
    const double C50051 = std::pow(C50012, 2);
    const double C50652 = C50649 * be;
    const double C50651 = C50649 * ae;
    const double C50650 = std::pow(C50649, 2);
    const double C50678 = 2 * C50676;
    const double C50688 = std::pow(C50676, 2);
    const double C50680 = C50674 * de;
    const double C50679 = C50674 * ce;
    const double C50677 = std::pow(C50674, 2);
    const double C50699 = std::pow(C50698, 2);
    const double C50751 = C50698 * de;
    const double C50750 = C50698 * ce;
    const double C50715 = std::pow(C50714, 2);
    const double C50779 = C50714 * de;
    const double C50778 = C50714 * ce;
    const double C50812 = std::pow(C50811, 2);
    const double C50876 = C50811 * be;
    const double C50875 = C50811 * ae;
    const double C49763 = 2 * C49761;
    const double C50916 = 4 * C49761;
    const double C49823 = C49761 * C49805;
    const double C50660 = std::pow(C49805, -1);
    const double C50938 = std::pow(C49805, -2);
    const double C50797 = C50796 * C49752;
    const double C49811 = C49806 / C49753;
    const double C49827 = ae * C49824;
    const double C49861 = C49859 / C49858;
    const double C140 =
        ((std::pow(yP - yQ, 2) * bs[2] * std::pow(C49859 / C49858, 2) -
          (bs[1] * C49859) / C49858) *
         C49752) /
        C49761;
    const double C120 = -(C49869 * bs[1] * C49859) / C49858;
    const double C288 = -(C49863 * bs[1] * C49859) / C49858;
    const double C471 = -(C50012 * bs[1] * C49859) / C49858;
    const double C49873 = C49866 * C49871;
    const double C49882 = C49866 * C49879;
    const double C49890 = C49866 * C49888;
    const double C49902 = C49866 * C49899;
    const double C49914 = C49871 * C49912;
    const double C49925 = C49864 * C49912;
    const double C49935 = C49879 * C49912;
    const double C49949 = C49888 * C49912;
    const double C49976 = C49899 * C49912;
    const double C127 = (-(bs[1] * C49912 * C49859) / C49858) / C49753;
    const double C49913 = C49871 * C49911;
    const double C49924 = C49864 * C49911;
    const double C49933 = C49879 * C49911;
    const double C49945 = C49888 * C49911;
    const double C49970 = C49899 * C49911;
    const double C126 = (-(bs[1] * C49911 * C49859) / C49858) / C49753;
    const double C50653 = C50650 * C49752;
    const double C50689 = std::pow(C50678, -1);
    const double C50925 = std::pow(C50678, -2);
    const double C50693 = 2 * C50688;
    const double C50923 = 4 * C50688;
    const double C50681 = C50677 * C50675;
    const double C50700 = C50699 * C50675;
    const double C50716 = C50715 * C50675;
    const double C50813 = C50812 * C49752;
    const double C49808 = C49760 / C49763;
    const double C49812 = C49804 / C49763;
    const double C50798 = C50797 / C49753;
    const double C49815 = 0 - C49811;
    const double C49865 = -C49861;
    const double C49872 = std::pow(C49861, 4);
    const double C49889 = std::pow(C49861, 6);
    const double C49920 = std::pow(C49861, 2);
    const double C141 = ((xP - xQ) *
                         (bs[2] * std::pow(C49861, 2) +
                          std::pow(yP - yQ, 2) * bs[3] * std::pow(-C49861, 3)) *
                         C49752) /
                        C49761;
    const double C50654 = C50653 / C49753;
    const double C50682 = C50681 / C50676;
    const double C50701 = C50700 / C50676;
    const double C50717 = C50716 / C50676;
    const double C50814 = C50813 / C49753;
    const double C50799 = -C50798;
    const double C49818 = C49815 * ae;
    const double C49867 = std::pow(C49865, 3);
    const double C49880 = std::pow(C49865, 5);
    const double C49900 = std::pow(C49865, 7);
    const double C49874 = C49873 * C49872;
    const double C49878 = C49871 * C49872;
    const double C49916 = C49872 * C49914;
    const double C49915 = C49872 * C49913;
    const double C49891 = C49890 * C49889;
    const double C49898 = C49888 * C49889;
    const double C49955 = C49889 * C49949;
    const double C49951 = C49889 * C49945;
    const double C49923 = C49921 * C49920;
    const double C128 = (C49869 * C49920 * C49921 * C49911) / C49753;
    const double C129 = (C49869 * C49920 * C49921 * C49912) / C49753;
    const double C301 = (C49863 * C49920 * C49921 * C49911) / C49753 -
                        (be * bs[1] * C49859) / (C49858 * C49753);
    const double C302 = (C49863 * C49920 * C49921 * C49912) / C49753 -
                        (ae * bs[1] * C49859) / (C49858 * C49753);
    const double C484 = (C50012 * C49920 * C49921 * C49911) / C49753;
    const double C485 = (C50012 * C49920 * C49921 * C49912) / C49753;
    const double C50655 = -C50654;
    const double C50683 = -C50682;
    const double C50702 = -C50701;
    const double C50718 = -C50717;
    const double C50815 = -C50814;
    const double C50800 = std::exp(C50799);
    const double C49819 = C49818 / C49753;
    const double C49870 = C49864 * C49867;
    const double C49927 = C49867 * C49925;
    const double C49926 = C49867 * C49924;
    const double C142 =
        ((bs[2] * std::pow(C49861, 2) + C49866 * C49864 * C49867) * C49752 +
         (C49864 * C49867 + C49866 * bs[4] * std::pow(C49861, 4)) * C49752 *
             std::pow(xP - xQ, 2)) /
        C49761;
    const double C318 =
        (ae * C49920 * C49921 * C49911 + be * C49920 * C49921 * C49912 +
         C49863 * (C49921 * C49920 + C49866 * C49864 * C49867) * C49752) /
        C49761;
    const double C49883 = C49882 * C49880;
    const double C49887 = C49879 * C49880;
    const double C49938 = C49880 * C49935;
    const double C49936 = C49880 * C49933;
    const double C49903 = C49902 * C49900;
    const double C49982 = C49900 * C49976;
    const double C49978 = C49900 * C49970;
    const double C49934 = C49878 * C49881;
    const double C49946 = C49869 * C49878;
    const double C50072 = C49878 * ae;
    const double C50070 = C49878 * C49866;
    const double C50069 = C49863 * C49878;
    const double C50068 = C49878 * be;
    const double C50628 = C49878 * C50051;
    const double C50639 = C50012 * C49878;
    const double C49931 = C49869 * C49916;
    const double C50046 = C49863 * C49916;
    const double C50065 = be * C49916;
    const double C49929 = C49869 * C49915;
    const double C50043 = C49863 * C49915;
    const double C50064 = ae * C49915;
    const double C49973 = C49898 * C49881;
    const double C50149 = C49869 * C49898;
    const double C50285 = C49898 * ae;
    const double C50279 = C49898 * C49866;
    const double C50278 = C49863 * C49898;
    const double C50277 = C49898 * be;
    const double C49958 = C49955 * C49881;
    const double C49975 = C49869 * C49955;
    const double C50200 = C49863 * C49955;
    const double C50272 = be * C49955;
    const double C50329 = C49955 * C50051;
    const double C50343 = C50012 * C49955;
    const double C49956 = C49951 * C49881;
    const double C49969 = C49869 * C49951;
    const double C50194 = C49863 * C49951;
    const double C50271 = ae * C49951;
    const double C50328 = C49951 * C50051;
    const double C50342 = C50012 * C49951;
    const double C501 =
        ((zP - zQ) * (C49923 + C49866 * C49864 * C49867) * C49752) / C49761;
    const double C121 = C49923 * C49881 - (bs[1] * C49859) / C49858;
    const double C287 = C49863 * C49869 * C49923;
    const double C289 = C49923 * C49866 - (bs[1] * C49859) / C49858;
    const double C470 = C50012 * C49869 * C49923;
    const double C472 = C49923 * C50051 - (bs[1] * C49859) / C49858;
    const double C905 = C50012 * C49863 * C49923;
    const double C50656 = std::exp(C50655);
    const double C50684 = std::exp(C50683);
    const double C50703 = std::exp(C50702);
    const double C50719 = std::exp(C50718);
    const double C50816 = std::exp(C50815);
    const double C151 = C50800 * C141;
    const double C49764 = C49762 * C50800;
    const double C117 = -(2 * ae * be * (yA - yB) * C50800) / (ae + be);
    const double C118 =
        -((C50800 - (C49751 * 2 * C49752 * C49751 * C50800) / C49753) * 2 *
          C49752) /
        C49753;
    const double C50849 = C50800 * C50847;
    const double C50852 = C50660 * C50800;
    const double C50942 = C50800 * C50848;
    const double C50937 = C50800 / C49805;
    const double C2310 = C50938 * C50800;
    const double C49820 = C49819 - C49812;
    const double C49875 = C49870 + C49874;
    const double C49930 = C49869 * C49870;
    const double C50047 = C49870 * ae;
    const double C50045 = C49863 * C49870;
    const double C50044 = C49870 * be;
    const double C122 =
        2 * C49869 * C49923 + C49869 * (C49923 + C49870 * C49881);
    const double C286 = C49863 * (C49923 + C49870 * C49881);
    const double C469 = C50012 * (C49923 + C49870 * C49881);
    const double C1123 =
        2 * C49863 * C49923 + C49863 * (C49923 + C49870 * C49866);
    const double C1584 = C50012 * (C49923 + C49870 * C49866);
    const double C1868 =
        2 * C50012 * C49923 + C50012 * (C49923 + C49870 * C50051);
    const double C5549 =
        3 * (C49923 + C49870 * C50051) +
        C50012 * (2 * C50012 * C49870 + C50012 * (C49870 + C49878 * C50051));
    const double C131 = (C49920 * C49921 * C49912 + C49927 * C49881) / C49753;
    const double C133 =
        (2 * C49869 * C49927 + C49869 * (C49927 + C49916 * C49881)) / C49753;
    const double C298 = (C49863 * (C49927 + C49916 * C49881) +
                         (C49923 + C49870 * C49881) * ae) /
                        C49753;
    const double C300 =
        (C49863 * C49869 * C49927 + C49869 * C49923 * ae) / C49753;
    const double C304 =
        (C49920 * C49921 * C49912 + C49863 * (C49863 * C49927 + C49923 * ae) +
         C49863 * C49923 * ae) /
        C49753;
    const double C481 = (C50012 * (C49927 + C49916 * C49881)) / C49753;
    const double C483 = (C50012 * C49869 * C49927) / C49753;
    const double C487 = (C49920 * C49921 * C49912 + C49927 * C50051) / C49753;
    const double C911 = (C50012 * (C49863 * C49927 + C49923 * ae)) / C49753;
    const double C1876 =
        (2 * C50012 * C49927 + C50012 * (C49927 + C49916 * C50051)) / C49753;
    const double C130 = (C49920 * C49921 * C49911 + C49926 * C49881) / C49753;
    const double C132 =
        (2 * C49869 * C49926 + C49869 * (C49926 + C49915 * C49881)) / C49753;
    const double C297 = (C49863 * (C49926 + C49915 * C49881) +
                         (C49923 + C49870 * C49881) * be) /
                        C49753;
    const double C299 =
        (C49863 * C49869 * C49926 + C49869 * C49923 * be) / C49753;
    const double C303 =
        (C49920 * C49921 * C49911 + C49863 * (C49863 * C49926 + C49923 * be) +
         C49863 * C49923 * be) /
        C49753;
    const double C480 = (C50012 * (C49926 + C49915 * C49881)) / C49753;
    const double C482 = (C50012 * C49869 * C49926) / C49753;
    const double C486 = (C49920 * C49921 * C49911 + C49926 * C50051) / C49753;
    const double C910 = (C50012 * (C49863 * C49926 + C49923 * be)) / C49753;
    const double C1875 =
        (2 * C50012 * C49926 + C50012 * (C49926 + C49915 * C50051)) / C49753;
    const double C155 = C50800 * C142;
    const double C49884 = C49878 + C49883;
    const double C49892 = C49887 + C49891;
    const double C49947 = C49887 * C49881;
    const double C49972 = C49869 * C49887;
    const double C50201 = C49887 * ae;
    const double C50197 = C49887 * C49866;
    const double C50196 = C49863 * C49887;
    const double C50195 = C49887 * be;
    const double C50640 = C49887 * C50051;
    const double C49940 = C49938 * C49881;
    const double C49948 = C49869 * C49938;
    const double C50071 = C49863 * C49938;
    const double C50191 = be * C49938;
    const double C50246 = C50012 * C49938;
    const double C50523 = C49938 * C50051;
    const double C5553 =
        (3 * (C49927 + C49916 * C50051) +
         C50012 * (2 * C50012 * C49916 + C50012 * (C49916 + C49938 * C50051))) /
        C49753;
    const double C49939 = C49936 * C49881;
    const double C49944 = C49869 * C49936;
    const double C50067 = C49863 * C49936;
    const double C50190 = ae * C49936;
    const double C50245 = C50012 * C49936;
    const double C50520 = C49936 * C50051;
    const double C5552 =
        (3 * (C49926 + C49915 * C50051) +
         C50012 * (2 * C50012 * C49915 + C50012 * (C49915 + C49936 * C50051))) /
        C49753;
    const double C49904 = C49898 + C49903;
    const double C49985 = C49982 * C49881;
    const double C50152 = C49869 * C49982;
    const double C50284 = C49863 * C49982;
    const double C49983 = C49978 * C49881;
    const double C50148 = C49869 * C49978;
    const double C50276 = C49863 * C49978;
    const double C49937 = C49870 + C49934;
    const double C49952 = 2 * C49946;
    const double C50039 = C49946 * ae;
    const double C50037 = C49863 * C49946;
    const double C50036 = C49946 * be;
    const double C50076 = C49870 + C50070;
    const double C50078 = C50069 * ae;
    const double C50075 = C50069 * be;
    const double C50198 = 2 * C50069;
    const double C50629 = C49870 + C50628;
    const double C50641 = 2 * C50639;
    const double C489 = (C49869 * C49927 + C49931 * C50051) / C49753;
    const double C488 = (C49869 * C49926 + C49929 * C50051) / C49753;
    const double C50073 = C50064 + C50065;
    const double C49980 = C49887 + C49973;
    const double C50161 = C50149 * ae;
    const double C50159 = C50149 * C49866;
    const double C50158 = C49863 * C50149;
    const double C50157 = C50149 * be;
    const double C50291 = C49887 + C50279;
    const double C50293 = C50278 * ae;
    const double C50290 = C50278 * be;
    const double C49961 = C49938 + C49958;
    const double C49981 = 2 * C49975;
    const double C50094 = C49863 * C49975;
    const double C50145 = be * C49975;
    const double C50237 = C50012 * C49975;
    const double C50517 = C49975 * C50051;
    const double C50332 = C49938 + C50329;
    const double C50348 = be * C50343;
    const double C49959 = C49936 + C49956;
    const double C49977 = 2 * C49969;
    const double C50090 = C49863 * C49969;
    const double C50144 = ae * C49969;
    const double C50236 = C50012 * C49969;
    const double C50514 = C49969 * C50051;
    const double C50288 = C50271 + C50272;
    const double C50331 = C49936 + C50328;
    const double C50347 = ae * C50342;
    const double C5565 = C50800 * C501;
    const double C50657 = C50656 * C50651;
    const double C50661 = C50660 * C50656;
    const double C50913 = C50656 * C50652;
    const double C50910 = C50656 / C49805;
    const double C17212 = C50938 * C50656;
    const double C50685 = C50684 * C50679;
    const double C50690 = C50689 * C50684;
    const double C50920 = C50684 * C50680;
    const double C50917 = C50684 / C50678;
    const double C1048 = C50925 * C50684;
    const double C50752 = C50703 * C50750;
    const double C50755 = C50689 * C50703;
    const double C50929 = C50703 * C50751;
    const double C50924 = C50703 / C50678;
    const double C282 = C50925 * C50703;
    const double C50780 = C50719 * C50778;
    const double C50783 = C50689 * C50719;
    const double C50933 = C50719 * C50779;
    const double C50926 = C50719 / C50678;
    const double C467 = C50925 * C50719;
    const double C50877 = C50816 * C50875;
    const double C50880 = C50660 * C50816;
    const double C50946 = C50816 * C50876;
    const double C50939 = C50816 / C49805;
    const double C5235 = C50938 * C50816;
    const double C49767 = 2 * C49764;
    const double C49810 = C49764 / C49761;
    const double C49825 = -4 * C49764;
    const double C2317 = ((0 * ae) / C49753 - C49764 / C49761) / (2 * C49753) +
                         (0 * ae) / C49753;
    const double C8058 = (0 * ae) / C49753 - C49764 / C49761;
    const double C150 = C117 * C129;
    const double C148 = C117 * C128;
    const double C5564 = C117 * C485;
    const double C5562 = C117 * C484;
    const double C153 = C118 * C121;
    const double C149 = C118 * C120;
    const double C335 = C118 * C287;
    const double C518 = C118 * C470;
    const double C5568 = C118 * C472;
    const double C5563 = C118 * C471;
    const double C6120 = C118 * C905;
    const double C50944 = C50849 / C49763;
    const double C50943 = C50849 * C50848;
    const double C50940 = C50849 / C49753;
    const double C2309 = (2 * C50660 * C50849) / C49753;
    const double C50945 = C50852 * C50848;
    const double C20044 = C50852 / C50916;
    const double C24666 = C50852 / C49805;
    const double C50962 = C50942 / C49753;
    const double C2308 = (C50800 * std::pow(C50847, 2)) / C49761 + C50937;
    const double C49876 = C49875 * C49752;
    const double C305 =
        (C49869 * C49926 + C49863 * (C49863 * C49929 + C49930 * be) +
         C49863 * C49930 * be) /
        C49753;
    const double C306 =
        (C49869 * C49927 + C49863 * (C49863 * C49931 + C49930 * ae) +
         C49863 * C49930 * ae) /
        C49753;
    const double C912 = (C50012 * (C49863 * C49929 + C49930 * be)) / C49753;
    const double C913 = (C50012 * (C49863 * C49931 + C49930 * ae)) / C49753;
    const double C290 = C49869 * C49923 + C49930 * C49866;
    const double C473 = C49869 * C49923 + C49930 * C50051;
    const double C906 = C50012 * C49863 * C49930;
    const double C1122 =
        2 * C49863 * C49930 + C49863 * (C49930 + C49946 * C49866);
    const double C1583 = C50012 * (C49930 + C49946 * C49866);
    const double C1867 =
        2 * C50012 * C49930 + C50012 * (C49930 + C49946 * C50051);
    const double C50049 = C50046 + C50047;
    const double C1237 = C49863 * C49923 + C50045 * C50051;
    const double C4636 =
        2 * C50012 * C50045 + C50012 * (C50045 + C50069 * C50051);
    const double C50048 = C50043 + C50044;
    const double C157 = C118 * C122;
    const double C331 = C118 * C286;
    const double C514 = C118 * C469;
    const double C7043 = C118 * C1584;
    const double C5577 = C118 * C1868;
    const double C7460 = C118 * C5549;
    const double C154 = C117 * C131;
    const double C158 = C117 * C133;
    const double C332 = C117 * C298;
    const double C336 = C117 * C300;
    const double C515 = C117 * C481;
    const double C519 = C117 * C483;
    const double C5569 = C117 * C487;
    const double C6121 = C117 * C911;
    const double C5578 = C117 * C1876;
    const double C152 = C117 * C130;
    const double C156 = C117 * C132;
    const double C330 = C117 * C297;
    const double C334 = C117 * C299;
    const double C513 = C117 * C480;
    const double C517 = C117 * C482;
    const double C5567 = C117 * C486;
    const double C6119 = C117 * C910;
    const double C5576 = C117 * C1875;
    const double C49885 = C49884 * C49752;
    const double C49893 = C49892 * C49752;
    const double C49953 = C49878 + C49947;
    const double C49979 = 2 * C49972;
    const double C50095 = C49972 * ae;
    const double C50093 = C49972 * C49866;
    const double C50092 = C49863 * C49972;
    const double C50091 = C49972 * be;
    const double C50625 = C49972 * C50051;
    const double C5550 =
        3 * (C49930 + C49946 * C50051) +
        C50012 * (2 * C50012 * C49946 + C50012 * (C49946 + C49972 * C50051));
    const double C50207 = C50200 + C50201;
    const double C50206 = C49878 + C50197;
    const double C50208 = C50196 * ae;
    const double C50205 = C50196 * be;
    const double C50280 = 2 * C50196;
    const double C50636 = C50196 * C50051;
    const double C6538 =
        3 * (C50045 + C50069 * C50051) +
        C50012 * (2 * C50012 * C50069 + C50012 * (C50069 + C50196 * C50051));
    const double C50204 = C50194 + C50195;
    const double C50642 = C49878 + C50640;
    const double C49942 = C49916 + C49940;
    const double C49954 = 2 * C49948;
    const double C50038 = C49863 * C49948;
    const double C50088 = be * C49948;
    const double C1874 =
        (2 * C50012 * C49931 + C50012 * (C49931 + C49948 * C50051)) / C49753;
    const double C5555 =
        (3 * (C49931 + C49948 * C50051) +
         C50012 * (2 * C50012 * C49948 + C50012 * (C49948 + C49975 * C50051))) /
        C49753;
    const double C50077 = C50071 + C50072;
    const double C50249 = be * C50246;
    const double C50546 = 2 * C50246;
    const double C50524 = C49916 + C50523;
    const double C7461 = C117 * C5553;
    const double C49941 = C49915 + C49939;
    const double C49950 = 2 * C49944;
    const double C50035 = C49863 * C49944;
    const double C50087 = ae * C49944;
    const double C1873 =
        (2 * C50012 * C49929 + C50012 * (C49929 + C49944 * C50051)) / C49753;
    const double C5554 =
        (3 * (C49929 + C49944 * C50051) +
         C50012 * (2 * C50012 * C49944 + C50012 * (C49944 + C49969 * C50051))) /
        C49753;
    const double C50074 = C50067 + C50068;
    const double C50203 = C50190 + C50191;
    const double C50248 = ae * C50245;
    const double C50542 = 2 * C50245;
    const double C50521 = C49915 + C50520;
    const double C7459 = C117 * C5552;
    const double C49905 = C49904 * C49752;
    const double C49988 = C49955 + C49985;
    const double C50160 = C49863 * C50152;
    const double C50292 = C50284 + C50285;
    const double C49986 = C49951 + C49983;
    const double C50156 = C49863 * C50148;
    const double C50289 = C50276 + C50277;
    const double C123 = 3 * (C49923 + C49870 * C49881) +
                        C49869 * (2 * C49930 + C49869 * C49937);
    const double C285 = C49863 * (2 * C49930 + C49869 * C49937);
    const double C291 = C49923 + C49870 * C49881 + C49937 * C49866;
    const double C468 = C50012 * (2 * C49930 + C49869 * C49937);
    const double C474 = C49923 + C49870 * C49881 + C49937 * C50051;
    const double C907 = C50012 * C49863 * C49937;
    const double C1236 = C49863 * C49930 + C50037 * C50051;
    const double C2528 = 3 * (C49923 + C49870 * C49866) +
                         C49863 * (2 * C50045 + C49863 * C50076);
    const double C2728 = C49923 + C49870 * C49866 + C50076 * C50051;
    const double C3310 = C50012 * (2 * C50045 + C49863 * C50076);
    const double C7450 =
        4 * (2 * C50012 * C49870 + C50012 * C50629) +
        C50012 * (3 * C50629 + C50012 * (2 * C50012 * C49878 +
                                         C50012 * (C49878 + C49887 * C50051)));
    const double C523 = C117 * C489;
    const double C521 = C117 * C488;
    const double C49984 = C49869 * C49980;
    const double C50118 = C49980 * ae;
    const double C50116 = C49980 * C49866;
    const double C50115 = C49863 * C49980;
    const double C50114 = C49980 * be;
    const double C50166 = C49972 + C50159;
    const double C50168 = C50158 * ae;
    const double C50165 = C50158 * be;
    const double C50301 = C50291 * ae;
    const double C50299 = C49863 * C50291;
    const double C50298 = C50291 * be;
    const double C49963 = C49869 * C49961;
    const double C49974 = 3 * C49961;
    const double C50029 = C49863 * C49961;
    const double C50111 = be * C49961;
    const double C50240 = be * C50237;
    const double C50518 = C49948 + C50517;
    const double C50335 = be * C50332;
    const double C50547 = C50012 * C50332;
    const double C49962 = C49869 * C49959;
    const double C49968 = 3 * C49959;
    const double C50026 = C49863 * C49959;
    const double C50110 = ae * C49959;
    const double C50154 = C50144 + C50145;
    const double C50239 = ae * C50236;
    const double C50515 = C49944 + C50514;
    const double C50334 = ae * C50331;
    const double C50543 = C50012 * C50331;
    const double C50351 = C50347 + C50348;
    const double C50914 = C50657 / C49763;
    const double C50912 = C50657 / C49753;
    const double C50911 = C50657 * C50652;
    const double C17211 = (2 * C50660 * C50657) / C49753;
    const double C50915 = C50661 * C50652;
    const double C109 = C50661 / C50916;
    const double C8055 = C50661 / C49805;
    const double C50951 = C50913 / C49753;
    const double C17210 = (C50656 * std::pow(C50651, 2)) / C49761 + C50910;
    const double C50921 = C50685 / C50693;
    const double C50919 = C50685 / C50676;
    const double C50918 = C50685 * C50680;
    const double C1047 = (2 * C50689 * C50685) / C50676;
    const double C50922 = C50690 * C50680;
    const double C116 = C50690 / C50923;
    const double C652 = C50690 / C50678;
    const double C50954 = C50920 / C50676;
    const double C1046 = (C50684 * std::pow(C50679, 2)) / C50688 + C50917;
    const double C50931 = C50752 / C50693;
    const double C50930 = C50752 * C50751;
    const double C50927 = C50752 / C50676;
    const double C281 = (2 * C50689 * C50752) / C50676;
    const double C50932 = C50755 * C50751;
    const double C1118 = C50755 / C50923;
    const double C1350 = C50755 / C50678;
    const double C50956 = C50929 / C50676;
    const double C280 = (C50703 * std::pow(C50750, 2)) / C50688 + C50924;
    const double C50935 = C50780 / C50693;
    const double C50934 = C50780 * C50779;
    const double C50928 = C50780 / C50676;
    const double C466 = (2 * C50689 * C50780) / C50676;
    const double C50936 = C50783 * C50779;
    const double C1864 = C50783 / C50923;
    const double C2111 = C50783 / C50678;
    const double C50959 = C50933 / C50676;
    const double C465 = (C50719 * std::pow(C50778, 2)) / C50688 + C50926;
    const double C50948 = C50877 / C49763;
    const double C50947 = C50877 * C50876;
    const double C50941 = C50877 / C49753;
    const double C5234 = (2 * C50660 * C50877) / C49753;
    const double C50949 = C50880 * C50876;
    const double C39164 = C50880 / C50916;
    const double C44502 = C50880 / C49805;
    const double C50965 = C50946 / C49753;
    const double C5233 = (C50816 * std::pow(C50875, 2)) / C49761 + C50939;
    const double C49769 = C49751 * C49767;
    const double C17215 = (-C49767 / C49753) / (2 * C49753) - (0 * be) / C49753;
    const double C49817 = C49814 - C49810;
    const double C49828 = C49825 / C49753;
    const double C8075 = C8058 * C298;
    const double C8073 = C8058 * C297;
    const double C8067 = C8058 * C300;
    const double C8065 = C8058 * C299;
    const double C14024 = C8058 * C911;
    const double C14022 = C8058 * C910;
    const double C168 = C148 - C149;
    const double C5592 = C5562 - C5563;
    const double C50963 = C50943 / C49761;
    const double C8072 = C50940 * C142;
    const double C8064 = C50940 * C141;
    const double C14021 = C50940 * C501;
    const double C2313 =
        (((0 - (C49751 * C49760) / C49753) * ae) / C49753 - (0 * be) / C49763) /
            (2 * C49753) +
        ((C49751 * (((C50800 - (C49751 * 2 * C49764) / C49753) * ae) / C49753 -
                    C49760 / C49763) +
          C50940) *
         ae) /
            C49753 +
        (0 * ae) / C49753 - C49764 / C49761;
    const double C50964 = C50945 / C49753;
    const double C17208 = -C50962;
    const double C2343 = C2308 * C142;
    const double C2323 = C2308 * C141;
    const double C36735 = C2308 * C501;
    const double C143 =
        (2 * C49869 * C49876 +
         C49869 * (C49876 +
                   (C49871 * C49872 + C49866 * bs[5] * std::pow(C49865, 5)) *
                       C49752 * std::pow(C49869, 2))) /
        C49761;
    const double C317 =
        (ae * C49869 * C49867 * C49864 * C49911 +
         be * C49869 * C49867 * C49864 * C49912 + C49863 * C49869 * C49876) /
        C49761;
    const double C319 =
        ((C49923 + C49866 * C49864 * C49867) * C49752 +
         ae * (C49863 * C49926 + C49923 * be) +
         be * (C49863 * C49927 + C49923 * ae) +
         C49863 * (ae * C49926 + be * C49927 + C49863 * C49876)) /
        C49761;
    const double C500 = ((zP - zQ) * C49869 * C49876) / C49761;
    const double C502 = ((C49923 + C49866 * C49864 * C49867) * C49752 +
                         C49876 * std::pow(zP - zQ, 2)) /
                        C49761;
    const double C920 = (ae * C50012 * C49926 + be * C50012 * C49927 +
                         C49863 * C50012 * C49876) /
                        C49761;
    const double C338 = C117 * C305;
    const double C2328 = C2317 * C305;
    const double C8273 = C8058 * C305;
    const double C340 = C117 * C306;
    const double C2330 = C2317 * C306;
    const double C8275 = C8058 * C306;
    const double C926 = C117 * C912;
    const double C8475 = C8058 * C912;
    const double C928 = C117 * C913;
    const double C8477 = C8058 * C913;
    const double C339 = C118 * C290;
    const double C522 = C118 * C473;
    const double C927 = C118 * C906;
    const double C5388 = C118 * C1583;
    const double C5573 = C118 * C1867;
    const double C1131 = (2 * (C49863 * C49927 + C49923 * ae) +
                          C49863 * (C49927 + C49863 * C50049 + C50045 * ae) +
                          (C49923 + C49870 * C49866) * ae) /
                         C49753;
    const double C1245 =
        (C49863 * C49927 + C49923 * ae + C50049 * C50051) / C49753;
    const double C1592 =
        (C50012 * (C49927 + C49863 * C50049 + C50045 * ae)) / C49753;
    const double C6125 = C118 * C1237;
    const double C6547 = C118 * C4636;
    const double C1130 = (2 * (C49863 * C49926 + C49923 * be) +
                          C49863 * (C49926 + C49863 * C50048 + C50045 * be) +
                          (C49923 + C49870 * C49866) * be) /
                         C49753;
    const double C1244 =
        (C49863 * C49926 + C49923 * be + C50048 * C50051) / C49753;
    const double C1591 =
        (C50012 * (C49926 + C49863 * C50048 + C50045 * be)) / C49753;
    const double C169 = C152 - C153;
    const double C170 = C156 - C157;
    const double C351 = C330 - C331;
    const double C352 = C334 - C335;
    const double C534 = C513 - C514;
    const double C535 = C517 - C518;
    const double C5593 = C5567 - C5568;
    const double C6137 = C6119 - C6120;
    const double C5595 = C5576 - C5577;
    const double C50034 = C49869 * C49885;
    const double C50066 = C49863 * C49885;
    const double C50136 = C50012 * C49885;
    const double C144 =
        (3 * (C49876 + C49885 * C49881) +
         C49869 * (2 * C49869 * C49885 +
                   C49869 * (C49885 + (C49879 * C49880 +
                                       C49866 * bs[6] * std::pow(C49861, 6)) *
                                          C49752 * C49881))) /
        C49761;
    const double C316 = (ae * (C49867 * C49864 * C49911 + C49915 * C49881) +
                         be * (C49867 * C49864 * C49912 + C49916 * C49881) +
                         C49863 * (C49876 + C49885 * C49881)) /
                        C49761;
    const double C320 =
        (C49869 * C49876 + ae * (C49863 * C49929 + C49930 * be) +
         be * (C49863 * C49931 + C49930 * ae) +
         C49863 * (ae * C49929 + be * C49931 + C49863 * C49869 * C49885)) /
        C49761;
    const double C499 = ((zP - zQ) * (C49876 + C49885 * C49881)) / C49761;
    const double C503 =
        (C49869 * C49876 + C49869 * C49885 * std::pow(zP - zQ, 2)) / C49761;
    const double C921 = (ae * C50012 * C49929 + be * C50012 * C49931 +
                         C49863 * C50012 * C49869 * C49885) /
                        C49761;
    const double C1135 =
        (2 * (ae * C49926 + be * C49927 + C49863 * C49876) +
         ae * (C49926 + C49863 * C50048 + C50045 * be) +
         be * (C49927 + C49863 * C50049 + C50045 * ae) +
         C49863 * (C49876 + ae * C50048 + be * C50049 +
                   C49863 * (ae * C49915 + be * C49916 + C49863 * C49885))) /
        C49761;
    const double C1249 =
        (ae * (C49926 + C49915 * C50051) + be * (C49927 + C49916 * C50051) +
         C49863 * (C49876 + C49885 * C50051)) /
        C49761;
    const double C1596 =
        (C50012 * C49876 + ae * C50012 * C50048 + be * C50012 * C50049 +
         C49863 * (ae * C50012 * C49915 + be * C50012 * C49916 +
                   C49863 * C50012 * C49885)) /
        C49761;
    const double C1880 =
        (2 * C50012 * C49876 + C50012 * (C49876 + C49885 * C50051)) / C49761;
    const double C49894 = C49893 * C49881;
    const double C49897 = C49869 * C49893;
    const double C50192 = C49863 * C49893;
    const double C50233 = C49893 * C50051;
    const double C50247 = C50012 * C49893;
    const double C49957 = C49869 * C49953;
    const double C49971 = 3 * C49953;
    const double C50030 = C49953 * ae;
    const double C50028 = C49863 * C49953;
    const double C50027 = C49953 * be;
    const double C1121 =
        2 * C49863 * C49937 + C49863 * (C49937 + C49953 * C49866);
    const double C1582 = C50012 * (C49937 + C49953 * C49866);
    const double C1866 =
        2 * C50012 * C49937 + C50012 * (C49937 + C49953 * C50051);
    const double C5551 =
        3 * (C49937 + C49953 * C50051) +
        C50012 * (2 * C50012 * C49953 + C50012 * (C49953 + C49980 * C50051));
    const double C50100 = C50094 + C50095;
    const double C50099 = C49946 + C50093;
    const double C50101 = C50092 * ae;
    const double C50098 = C50092 * be;
    const double C50150 = 2 * C50092;
    const double C4634 =
        2 * C50012 * C50037 + C50012 * (C50037 + C50092 * C50051);
    const double C6537 =
        3 * (C50037 + C50092 * C50051) +
        C50012 * (2 * C50012 * C50092 + C50012 * (C50092 + C50158 * C50051));
    const double C50097 = C50090 + C50091;
    const double C50626 = C49946 + C50625;
    const double C5581 = C118 * C5550;
    const double C50214 = C49863 * C50207;
    const double C50283 = 2 * C50207;
    const double C50270 = be * C50207;
    const double C50341 = C50012 * C50207;
    const double C50539 = C50207 * C50051;
    const double C50215 = C50206 * ae;
    const double C50213 = C49863 * C50206;
    const double C50212 = C50206 * be;
    const double C50281 = 3 * C50206;
    const double C4635 =
        2 * C50012 * C50076 + C50012 * (C50076 + C50206 * C50051);
    const double C23136 =
        3 * (C50076 + C50206 * C50051) +
        C50012 * (2 * C50012 * C50206 + C50012 * (C50206 + C50291 * C50051));
    const double C50637 = C50069 + C50636;
    const double C39968 = C118 * C6538;
    const double C50211 = C49863 * C50204;
    const double C50275 = 2 * C50204;
    const double C50269 = ae * C50204;
    const double C50340 = C50012 * C50204;
    const double C50536 = C50204 * C50051;
    const double C50643 = C50012 * C50642;
    const double C135 = (3 * (C49927 + C49916 * C49881) +
                         C49869 * (2 * C49931 + C49869 * C49942)) /
                        C49753;
    const double C296 = (C49863 * (2 * C49931 + C49869 * C49942) +
                         (2 * C49930 + C49869 * C49937) * ae) /
                        C49753;
    const double C308 =
        (C49927 + C49916 * C49881 + C49863 * (C49863 * C49942 + C49937 * ae) +
         C49863 * C49937 * ae) /
        C49753;
    const double C479 = (C50012 * (2 * C49931 + C49869 * C49942)) / C49753;
    const double C491 = (C49927 + C49916 * C49881 + C49942 * C50051) / C49753;
    const double C915 = (C50012 * (C49863 * C49942 + C49937 * ae)) / C49753;
    const double C1872 =
        (2 * C50012 * C49942 + C50012 * (C49942 + C49961 * C50051)) / C49753;
    const double C50041 = C50038 + C50039;
    const double C5574 = C117 * C1874;
    const double C5582 = C117 * C5555;
    const double C50081 = C49863 * C50077;
    const double C50199 = 2 * C50077;
    const double C50189 = be * C50077;
    const double C4644 =
        (2 * C50012 * C50049 + C50012 * (C50049 + C50077 * C50051)) / C49753;
    const double C6542 =
        (3 * (C50049 + C50077 * C50051) +
         C50012 * (2 * C50012 * C50077 + C50012 * (C50077 + C50207 * C50051))) /
        C49753;
    const double C7454 =
        (4 * (2 * C50012 * C49916 + C50012 * C50524) +
         C50012 * (3 * C50524 + C50012 * (2 * C50246 + C50012 * C50332))) /
        C49753;
    const double C134 = (3 * (C49926 + C49915 * C49881) +
                         C49869 * (2 * C49929 + C49869 * C49941)) /
                        C49753;
    const double C295 = (C49863 * (2 * C49929 + C49869 * C49941) +
                         (2 * C49930 + C49869 * C49937) * be) /
                        C49753;
    const double C307 =
        (C49926 + C49915 * C49881 + C49863 * (C49863 * C49941 + C49937 * be) +
         C49863 * C49937 * be) /
        C49753;
    const double C478 = (C50012 * (2 * C49929 + C49869 * C49941)) / C49753;
    const double C490 = (C49926 + C49915 * C49881 + C49941 * C50051) / C49753;
    const double C914 = (C50012 * (C49863 * C49941 + C49937 * be)) / C49753;
    const double C1871 =
        (2 * C50012 * C49941 + C50012 * (C49941 + C49959 * C50051)) / C49753;
    const double C50040 = C50035 + C50036;
    const double C50096 = C50087 + C50088;
    const double C5572 = C117 * C1873;
    const double C5580 = C117 * C5554;
    const double C50080 = C49863 * C50074;
    const double C50193 = 2 * C50074;
    const double C50188 = ae * C50074;
    const double C2737 =
        (C49876 + C49885 * C50051 + ae * (C50048 + C50074 * C50051) +
         be * (C50049 + C50077 * C50051) +
         C49863 * (ae * (C49915 + C49936 * C50051) +
                   be * (C49916 + C49938 * C50051) +
                   C49863 * (C49885 + C49893 * C50051))) /
        C49761;
    const double C4643 =
        (2 * C50012 * C50048 + C50012 * (C50048 + C50074 * C50051)) / C49753;
    const double C6541 =
        (3 * (C50048 + C50074 * C50051) +
         C50012 * (2 * C50012 * C50074 + C50012 * (C50074 + C50204 * C50051))) /
        C49753;
    const double C50251 = C50248 + C50249;
    const double C7453 =
        (4 * (2 * C50012 * C49915 + C50012 * C50521) +
         C50012 * (3 * C50521 + C50012 * (2 * C50245 + C50012 * C50331))) /
        C49753;
    const double C7464 = C7459 - C7460;
    const double C49906 = C49905 * C49881;
    const double C50146 = C49869 * C49905;
    const double C50273 = C49863 * C49905;
    const double C50330 = C49905 * C50051;
    const double C50344 = C50012 * C49905;
    const double C49991 = C49869 * C49988;
    const double C50117 = C49863 * C49988;
    const double C5557 =
        (3 * (C49942 + C49961 * C50051) +
         C50012 * (2 * C50012 * C49961 + C50012 * (C49961 + C49988 * C50051))) /
        C49753;
    const double C50167 = C50160 + C50161;
    const double C50300 = C49863 * C50292;
    const double C49989 = C49869 * C49986;
    const double C50113 = C49863 * C49986;
    const double C5556 =
        (3 * (C49941 + C49959 * C50051) +
         C50012 * (2 * C50012 * C49959 + C50012 * (C49959 + C49986 * C50051))) /
        C49753;
    const double C50164 = C50156 + C50157;
    const double C50297 = C49863 * C50289;
    const double C161 = C118 * C123;
    const double C327 = C118 * C285;
    const double C343 = C118 * C291;
    const double C510 = C118 * C468;
    const double C526 = C118 * C474;
    const double C931 = C118 * C907;
    const double C5384 = C118 * C1236;
    const double C7048 = C118 * C2728;
    const double C40578 = C118 * C7450;
    const double C49987 = C49979 + C49984;
    const double C50122 = C49953 + C50116;
    const double C50124 = C50115 * ae;
    const double C50121 = C50115 * be;
    const double C50174 = C50166 * ae;
    const double C50172 = C49863 * C50166;
    const double C50171 = C50166 * be;
    const double C50304 = C50280 + C50299;
    const double C49965 = C49954 + C49963;
    const double C7452 =
        (4 * (2 * C50012 * C49948 + C50012 * C50518) +
         C50012 *
             (3 * C50518 +
              C50012 * (2 * C50237 + C50012 * (C49975 + C50152 * C50051)))) /
        C49753;
    const double C50548 = C50546 + C50547;
    const double C49964 = C49950 + C49962;
    const double C50119 = C50110 + C50111;
    const double C50242 = C50239 + C50240;
    const double C7451 =
        (4 * (2 * C50012 * C49944 + C50012 * C50515) +
         C50012 *
             (3 * C50515 +
              C50012 * (2 * C50236 + C50012 * (C49969 + C50148 * C50051)))) /
        C49753;
    const double C50337 = C50334 + C50335;
    const double C50544 = C50542 + C50543;
    const double C50950 = C50911 / C49761;
    const double C50952 = C50915 / C49753;
    const double C2311 = -C50951;
    const double C50953 = C50918 / C50688;
    const double C50955 = C50922 / C50676;
    const double C283 = -C50954;
    const double C50957 = C50930 / C50688;
    const double C50958 = C50932 / C50676;
    const double C1044 = -C50956;
    const double C50960 = C50934 / C50688;
    const double C50961 = C50936 / C50676;
    const double C1695 = -C50959;
    const double C50966 = C50947 / C49761;
    const double C50967 = C50949 / C49753;
    const double C33779 = -C50965;
    const double C49770 = C49769 / C49753;
    const double C17232 = C17215 * C298;
    const double C17230 = C17215 * C297;
    const double C17224 = C17215 * C300;
    const double C17222 = C17215 * C299;
    const double C17432 = C17215 * C306;
    const double C17430 = C17215 * C305;
    const double C17634 = C17215 * C913;
    const double C17632 = C17215 * C912;
    const double C22165 = C17215 * C911;
    const double C22163 = C17215 * C910;
    const double C20052 =
        (C49817 / C49805 - (0 * be) / C49753) / C49805 + (0 * ae) / C49753;
    const double C24673 = C49817 / C49805 - (0 * be) / C49753;
    const double C173 = C168 - C150;
    const double C5599 = C5592 - C5564;
    const double C50976 = C50937 - C50963;
    const double C2346 = C2313 * C133;
    const double C2344 = C2313 * C132;
    const double C2342 = C2313 * C131;
    const double C2340 = C2313 * C130;
    const double C2322 = C2313 * C129;
    const double C2320 = C2313 * C128;
    const double C2555 = C2313 * C306;
    const double C2553 = C2313 * C305;
    const double C2551 = C2313 * C300;
    const double C2549 = C2313 * C299;
    const double C2755 = C2313 * C489;
    const double C2753 = C2313 * C488;
    const double C2751 = C2313 * C483;
    const double C2749 = C2313 * C482;
    const double C2931 = C2313 * C298;
    const double C2929 = C2313 * C297;
    const double C3098 = C2313 * C481;
    const double C3096 = C2313 * C480;
    const double C3325 = C2313 * C913;
    const double C3323 = C2313 * C912;
    const double C36754 = C2313 * C487;
    const double C36752 = C2313 * C486;
    const double C36734 = C2313 * C485;
    const double C36732 = C2313 * C484;
    const double C37262 = C2313 * C911;
    const double C37260 = C2313 * C910;
    const double C38591 = C2313 * C1876;
    const double C38589 = C2313 * C1875;
    const double C50977 = C50944 - C50964;
    const double C17229 = C17208 * C142;
    const double C17221 = C17208 * C141;
    const double C22162 = C17208 * C501;
    const double C159 = C50800 * C143;
    const double C2347 = C2308 * C143;
    const double C8084 = C50940 * C143;
    const double C17241 = C17208 * C143;
    const double C337 = C50800 * C317;
    const double C2327 = C2309 * C317;
    const double C2552 = C2308 * C317;
    const double C8068 = C50852 * C317;
    const double C8280 = C50940 * C317;
    const double C17225 = C50852 * C317;
    const double C17437 = C17208 * C317;
    const double C520 = C50800 * C500;
    const double C2752 = C2308 * C500;
    const double C8482 = C50940 * C500;
    const double C17639 = C17208 * C500;
    const double C5570 = C50800 * C502;
    const double C14035 = C50940 * C502;
    const double C22170 = C17208 * C502;
    const double C36755 = C2308 * C502;
    const double C6122 = C50800 * C920;
    const double C14025 = C50852 * C920;
    const double C14714 = C50940 * C920;
    const double C22166 = C50852 * C920;
    const double C22708 = C17208 * C920;
    const double C36739 = C2309 * C920;
    const double C37263 = C2308 * C920;
    const double C353 = C338 - C339;
    const double C536 = C521 - C522;
    const double C938 = C926 - C927;
    const double C6126 = C117 * C1245;
    const double C14030 = C8058 * C1245;
    const double C22173 = C17215 * C1245;
    const double C37673 = C2313 * C1245;
    const double C7044 = C117 * C1592;
    const double C14717 = C8058 * C1592;
    const double C22711 = C17215 * C1592;
    const double C36742 = C2317 * C1592;
    const double C38180 = C2313 * C1592;
    const double C6124 = C117 * C1244;
    const double C14028 = C8058 * C1244;
    const double C22171 = C17215 * C1244;
    const double C37671 = C2313 * C1244;
    const double C7042 = C117 * C1591;
    const double C14715 = C8058 * C1591;
    const double C22709 = C17215 * C1591;
    const double C36740 = C2317 * C1591;
    const double C38178 = C2313 * C1591;
    const double C174 = C169 - C154;
    const double C175 = C170 - C158;
    const double C357 = C351 - C332;
    const double C358 = C352 - C336;
    const double C540 = C534 - C515;
    const double C541 = C535 - C519;
    const double C5600 = C5593 - C5569;
    const double C6140 = C6137 - C6121;
    const double C5602 = C5595 - C5578;
    const double C50079 = C50073 + C50066;
    const double C163 = C50800 * C144;
    const double C8088 = C50940 * C144;
    const double C17245 = C17208 * C144;
    const double C333 = C50800 * C316;
    const double C2339 = C2309 * C316;
    const double C2932 = C2308 * C316;
    const double C8076 = C50852 * C316;
    const double C8272 = C50940 * C316;
    const double C17233 = C50852 * C316;
    const double C17429 = C17208 * C316;
    const double C341 = C50800 * C320;
    const double C2331 = C2310 * C320;
    const double C2556 = C2308 * C320;
    const double C2548 = C2309 * C320;
    const double C8284 = C50940 * C320;
    const double C8276 = C50852 * C320;
    const double C17441 = C17208 * C320;
    const double C17433 = C50852 * C320;
    const double C24687 = C24666 * C320;
    const double C516 = C50800 * C499;
    const double C3099 = C2308 * C499;
    const double C8474 = C50940 * C499;
    const double C17631 = C17208 * C499;
    const double C524 = C50800 * C503;
    const double C2756 = C2308 * C503;
    const double C8486 = C50940 * C503;
    const double C17643 = C17208 * C503;
    const double C929 = C50800 * C921;
    const double C2748 = C2309 * C921;
    const double C3326 = C2308 * C921;
    const double C8478 = C50852 * C921;
    const double C9042 = C50940 * C921;
    const double C17635 = C50852 * C921;
    const double C18199 = C17208 * C921;
    const double C6127 = C50800 * C1249;
    const double C14031 = C50852 * C1249;
    const double C15262 = C50940 * C1249;
    const double C22174 = C50852 * C1249;
    const double C22716 = C17208 * C1249;
    const double C36751 = C2309 * C1249;
    const double C37674 = C2308 * C1249;
    const double C7045 = C50800 * C1596;
    const double C14718 = C50852 * C1596;
    const double C15922 = C50940 * C1596;
    const double C22712 = C50852 * C1596;
    const double C23646 = C17208 * C1596;
    const double C31329 = C24666 * C1596;
    const double C36743 = C2310 * C1596;
    const double C37267 = C2309 * C1596;
    const double C38181 = C2308 * C1596;
    const double C5579 = C50800 * C1880;
    const double C16454 = C50940 * C1880;
    const double C22182 = C17208 * C1880;
    const double C38592 = C2308 * C1880;
    const double C49895 = C49885 + C49894;
    const double C49901 = 2 * C49897;
    const double C50089 = C49863 * C49897;
    const double C50138 = C50012 * C49897;
    const double C1248 =
        (ae * (C49929 + C49944 * C50051) + be * (C49931 + C49948 * C50051) +
         C49863 * (C50034 + C49897 * C50051)) /
        C49761;
    const double C1879 =
        (2 * C50012 * C50034 + C50012 * (C50034 + C49897 * C50051)) / C49761;
    const double C50210 = C50203 + C50192;
    const double C50234 = C49885 + C50233;
    const double C50250 = C49863 * C50247;
    const double C50357 = 2 * C50247;
    const double C49960 = C49952 + C49957;
    const double C50032 = C50029 + C50030;
    const double C1235 = C49863 * C49937 + C50028 * C50051;
    const double C6114 =
        2 * C50012 * C50028 + C50012 * (C50028 + C50115 * C50051);
    const double C50031 = C50026 + C50027;
    const double C11066 = C118 * C1582;
    const double C5589 = C118 * C1866;
    const double C50104 = C49863 * C50100;
    const double C50151 = 2 * C50100;
    const double C50143 = be * C50100;
    const double C2529 = 3 * (C49930 + C49946 * C49866) +
                         C49863 * (2 * C50037 + C49863 * C50099);
    const double C2729 = C49930 + C49946 * C49866 + C50099 * C50051;
    const double C3311 = C50012 * (2 * C50037 + C49863 * C50099);
    const double C4633 =
        2 * C50012 * C50099 + C50012 * (C50099 + C50166 * C50051);
    const double C6130 = C118 * C4634;
    const double C50103 = C49863 * C50097;
    const double C50147 = 2 * C50097;
    const double C50142 = ae * C50097;
    const double C7449 =
        4 * (2 * C50012 * C49946 + C50012 * C50626) +
        C50012 * (3 * C50626 + C50012 * (2 * C50012 * C49972 +
                                         C50012 * (C49972 + C50149 * C50051)));
    const double C50219 = C49938 + C50214;
    const double C50346 = be * C50341;
    const double C50540 = C50077 + C50539;
    const double C50218 = C50198 + C50213;
    const double C40304 = C118 * C4635;
    const double C24060 =
        4 * (2 * C50012 * C50069 + C50012 * C50637) +
        C50012 * (3 * C50637 + C50012 * (2 * C50012 * C50196 +
                                         C50012 * (C50196 + C50278 * C50051)));
    const double C50217 = C49936 + C50211;
    const double C50287 = C49893 + C50269;
    const double C50345 = ae * C50340;
    const double C50537 = C50074 + C50536;
    const double C50644 = C50641 + C50643;
    const double C162 = C117 * C135;
    const double C328 = C117 * C296;
    const double C8079 = C8058 * C296;
    const double C17236 = C17215 * C296;
    const double C344 = C117 * C308;
    const double C2334 = C2317 * C308;
    const double C8267 = C8058 * C308;
    const double C17424 = C17215 * C308;
    const double C511 = C117 * C479;
    const double C527 = C117 * C491;
    const double C932 = C117 * C915;
    const double C8469 = C8058 * C915;
    const double C17626 = C17215 * C915;
    const double C5590 = C117 * C1872;
    const double C1129 = (2 * (C49863 * C49931 + C49930 * ae) +
                          C49863 * (C49931 + C49863 * C50041 + C50037 * ae) +
                          (C49930 + C49946 * C49866) * ae) /
                         C49753;
    const double C1243 =
        (C49863 * C49931 + C49930 * ae + C50041 * C50051) / C49753;
    const double C1590 =
        (C50012 * (C49931 + C49863 * C50041 + C50037 * ae)) / C49753;
    const double C4640 =
        (2 * C50012 * C50041 + C50012 * (C50041 + C50100 * C50051)) / C49753;
    const double C50083 = C49916 + C50081;
    const double C6548 = C117 * C4644;
    const double C16457 = C8058 * C4644;
    const double C22177 = C17215 * C4644;
    const double C24072 = C17215 * C6542;
    const double C39969 = C117 * C6542;
    const double C49252 = C8058 * C6542;
    const double C40579 = C117 * C7454;
    const double C160 = C117 * C134;
    const double C326 = C117 * C295;
    const double C8077 = C8058 * C295;
    const double C17234 = C17215 * C295;
    const double C342 = C117 * C307;
    const double C2332 = C2317 * C307;
    const double C8265 = C8058 * C307;
    const double C17422 = C17215 * C307;
    const double C509 = C117 * C478;
    const double C525 = C117 * C490;
    const double C930 = C117 * C914;
    const double C8467 = C8058 * C914;
    const double C17624 = C17215 * C914;
    const double C5588 = C117 * C1871;
    const double C1134 =
        (2 * (ae * C49929 + be * C49931 + C49863 * C50034) +
         ae * (C49929 + C49863 * C50040 + C50037 * be) +
         be * (C49931 + C49863 * C50041 + C50037 * ae) +
         C49863 * (C50034 + ae * C50040 + be * C50041 +
                   C49863 * (ae * C49944 + be * C49948 + C49863 * C49897))) /
        C49761;
    const double C1595 =
        (C50012 * C50034 + ae * C50012 * C50040 + be * C50012 * C50041 +
         C49863 * (ae * C50012 * C49944 + be * C50012 * C49948 +
                   C49863 * C50012 * C49897)) /
        C49761;
    const double C2738 =
        (C50034 + C49897 * C50051 + ae * (C50040 + C50097 * C50051) +
         be * (C50041 + C50100 * C50051) +
         C49863 * (ae * (C49944 + C49969 * C50051) +
                   be * (C49948 + C49975 * C50051) +
                   C49863 * (C49897 + C49869 * C49905 * C50051))) /
        C49761;
    const double C1128 = (2 * (C49863 * C49929 + C49930 * be) +
                          C49863 * (C49929 + C49863 * C50040 + C50037 * be) +
                          (C49930 + C49946 * C49866) * be) /
                         C49753;
    const double C1242 =
        (C49863 * C49929 + C49930 * be + C50040 * C50051) / C49753;
    const double C1589 =
        (C50012 * (C49929 + C49863 * C50040 + C50037 * be)) / C49753;
    const double C4639 =
        (2 * C50012 * C50040 + C50012 * (C50040 + C50097 * C50051)) / C49753;
    const double C5594 = C5572 - C5573;
    const double C5596 = C5580 - C5581;
    const double C50082 = C49915 + C50080;
    const double C50202 = C49885 + C50188;
    const double C7050 = C50800 * C2737;
    const double C15266 = C50852 * C2737;
    const double C22720 = C50852 * C2737;
    const double C23654 = C17208 * C2737;
    const double C31333 = C24666 * C2737;
    const double C36747 = C2310 * C2737;
    const double C37678 = C2309 * C2737;
    const double C48844 = C50940 * C2737;
    const double C6546 = C117 * C4643;
    const double C16455 = C8058 * C4643;
    const double C22175 = C17215 * C4643;
    const double C24070 = C17215 * C6541;
    const double C39967 = C117 * C6541;
    const double C49250 = C8058 * C6541;
    const double C40577 = C117 * C7453;
    const double C7465 = C7464 - C7461;
    const double C49907 = C49893 + C49906;
    const double C50155 = C49863 * C50146;
    const double C50230 = C50146 * C50051;
    const double C50238 = C50012 * C50146;
    const double C50296 = C50288 + C50273;
    const double C50333 = C49893 + C50330;
    const double C50349 = C49863 * C50344;
    const double C49994 = C49981 + C49991;
    const double C50123 = C50117 + C50118;
    const double C50173 = C49863 * C50167;
    const double C6540 =
        (3 * (C50041 + C50100 * C50051) +
         C50012 * (2 * C50012 * C50100 + C50012 * (C50100 + C50167 * C50051))) /
        C49753;
    const double C50305 = C49955 + C50300;
    const double C49992 = C49977 + C49989;
    const double C50120 = C50113 + C50114;
    const double C50170 = C49863 * C50164;
    const double C6539 =
        (3 * (C50040 + C50097 * C50051) +
         C50012 * (2 * C50012 * C50097 + C50012 * (C50097 + C50164 * C50051))) /
        C49753;
    const double C50303 = C49951 + C50297;
    const double C49990 = C49869 * C49987;
    const double C50022 = C49987 * ae;
    const double C50020 = C49863 * C49987;
    const double C50019 = C49987 * be;
    const double C2530 = 3 * (C49937 + C49953 * C49866) +
                         C49863 * (2 * C50028 + C49863 * C50122);
    const double C2730 = C49937 + C49953 * C49866 + C50122 * C50051;
    const double C3312 = C50012 * (2 * C50028 + C49863 * C50122);
    const double C50177 = C50150 + C50172;
    const double C50311 = C50304 * ae;
    const double C50309 = C49863 * C50304;
    const double C50308 = C50304 * be;
    const double C137 = (4 * (2 * C49931 + C49869 * C49942) +
                         C49869 * (3 * C49942 + C49869 * C49965)) /
                        C49753;
    const double C493 =
        (2 * C49931 + C49869 * C49942 + C49965 * C50051) / C49753;
    const double C495 = (C50012 * (3 * C49942 + C49869 * C49965)) / C49753;
    const double C40574 =
        (5 * (3 * C50524 + C50012 * C50548) +
         C50012 * (4 * C50548 +
                   C50012 * (3 * C50332 +
                             C50012 * (2 * C50343 +
                                       C50012 * (C49955 + C49982 * C50051))))) /
        C49753;
    const double C136 = (4 * (2 * C49929 + C49869 * C49941) +
                         C49869 * (3 * C49941 + C49869 * C49964)) /
                        C49753;
    const double C492 =
        (2 * C49929 + C49869 * C49941 + C49964 * C50051) / C49753;
    const double C494 = (C50012 * (3 * C49941 + C49869 * C49964)) / C49753;
    const double C40573 =
        (5 * (3 * C50521 + C50012 * C50544) +
         C50012 * (4 * C50544 +
                   C50012 * (3 * C50331 +
                             C50012 * (2 * C50342 +
                                       C50012 * (C49951 + C49978 * C50051))))) /
        C49753;
    const double C50968 = C50910 - C50950;
    const double C50969 = C50914 - C50952;
    const double C50970 = C50917 - C50953;
    const double C50971 = C50921 - C50955;
    const double C50972 = C50924 - C50957;
    const double C50973 = C50931 - C50958;
    const double C50974 = C50926 - C50960;
    const double C50975 = C50935 - C50961;
    const double C50978 = C50939 - C50966;
    const double C50979 = C50948 - C50967;
    const double C49771 = C50800 - C49770;
    const double C24690 = C24673 * C308;
    const double C24688 = C24673 * C307;
    const double C24686 = C24673 * C306;
    const double C24684 = C24673 * C305;
    const double C31328 = C24673 * C1592;
    const double C31326 = C24673 * C1591;
    const double C178 = C173 + C151;
    const double C5605 = C5599 + C5565;
    const double C24703 = C50976 * C143;
    const double C24699 = C50976 * C142;
    const double C24679 = C50976 * C141;
    const double C24900 = C50976 * C320;
    const double C24896 = C50976 * C317;
    const double C25088 = C50976 * C503;
    const double C25084 = C50976 * C500;
    const double C25264 = C50976 * C316;
    const double C25431 = C50976 * C499;
    const double C25646 = C50976 * C921;
    const double C31341 = C50976 * C502;
    const double C31321 = C50976 * C501;
    const double C31849 = C50976 * C920;
    const double C32260 = C50976 * C1249;
    const double C32767 = C50976 * C1596;
    const double C33178 = C50976 * C1880;
    const double C20041 =
        (C50976 * C50847) / C49753 + (C50940 - C50962) / C49805;
    const double C24695 = C50977 * C316;
    const double C24683 = C50977 * C317;
    const double C24892 = C50977 * C320;
    const double C25080 = C50977 * C921;
    const double C31337 = C50977 * C1249;
    const double C31325 = C50977 * C920;
    const double C31853 = C50977 * C1596;
    const double C32264 = C50977 * C2737;
    const double C20042 =
        (C50977 * C50847) / C49753 + (2 * C50852 + C50976) / C49805;
    const double C20043 = (C50847 * C50852) / C49763 + C50977 / C49805;
    const double C359 = C353 - C340;
    const double C542 = C536 - C523;
    const double C941 = C938 - C928;
    const double C6138 = C6124 - C6125;
    const double C7052 = C7042 - C7043;
    const double C179 = C174 + C155;
    const double C180 = C175 + C159;
    const double C364 = C358 + C337;
    const double C547 = C541 + C520;
    const double C5606 = C5600 + C5570;
    const double C6143 = C6140 + C6122;
    const double C363 = C357 + C333;
    const double C546 = C540 + C516;
    const double C5608 = C5602 + C5579;
    const double C145 =
        (4 * (2 * C49869 * C49885 + C49869 * C49895) +
         C49869 * (3 * C49895 +
                   C49869 * (2 * C49869 * C49893 +
                             C49869 * (C49893 +
                                       (C49888 * C49889 +
                                        C49866 * bs[7] * std::pow(C49865, 7)) *
                                           C49752 * C49881)))) /
        C49761;
    const double C315 =
        (ae * (2 * C49869 * C49915 +
               C49869 * (C49915 + C49880 * C49879 * C49911 * C49881)) +
         be * (2 * C49869 * C49916 +
               C49869 * (C49916 + C49880 * C49879 * C49912 * C49881)) +
         C49863 * (2 * C49869 * C49885 + C49869 * C49895)) /
        C49761;
    const double C321 =
        (C49876 + C49885 * C49881 + ae * (C49863 * C49941 + C49937 * be) +
         be * (C49863 * C49942 + C49937 * ae) +
         C49863 * (ae * C49941 + be * C49942 + C49863 * C49895)) /
        C49761;
    const double C498 =
        ((zP - zQ) * (2 * C49869 * C49885 + C49869 * C49895)) / C49761;
    const double C504 =
        (C49876 + C49885 * C49881 + C49895 * std::pow(zP - zQ, 2)) / C49761;
    const double C922 = (ae * C50012 * C49941 + be * C50012 * C49942 +
                         C49863 * C50012 * C49895) /
                        C49761;
    const double C50102 = C50096 + C50089;
    const double C2760 = C2309 * C1248;
    const double C5386 = C50800 * C1248;
    const double C8490 = C50852 * C1248;
    const double C14723 = C50940 * C1248;
    const double C17647 = C50852 * C1248;
    const double C22724 = C17208 * C1248;
    const double C25092 = C50977 * C1248;
    const double C5575 = C50800 * C1879;
    const double C14041 = C50940 * C1879;
    const double C22186 = C17208 * C1879;
    const double C50216 = C49863 * C50210;
    const double C50266 = 2 * C50210;
    const double C4647 =
        (2 * C50136 + C50012 * C50234 +
         ae * (2 * C50012 * C50074 + C50012 * (C50074 + C50204 * C50051)) +
         be * (2 * C50012 * C50077 + C50012 * (C50077 + C50207 * C50051)) +
         C49863 *
             (ae * (2 * C50245 + C50012 * (C49936 + C49951 * C50051)) +
              be * (2 * C50246 + C50012 * (C49938 + C49955 * C50051)) +
              C49863 * (2 * C50247 + C50012 * (C49893 + C49905 * C50051)))) /
        C49761;
    const double C4648 =
        (ae * (2 * C50012 * C49915 + C50012 * (C49915 + C49936 * C50051)) +
         be * (2 * C50012 * C49916 + C50012 * (C49916 + C49938 * C50051)) +
         C49863 * (2 * C50136 + C50012 * C50234)) /
        C49761;
    const double C5558 = (3 * (C49876 + C49885 * C50051) +
                          C50012 * (2 * C50136 + C50012 * C50234)) /
                         C49761;
    const double C6544 =
        (ae * (3 * (C49915 + C49936 * C50051) +
               C50012 * (2 * C50245 + C50012 * (C49936 + C49951 * C50051))) +
         be * (3 * (C49916 + C49938 * C50051) +
               C50012 * (2 * C50246 + C50012 * (C49938 + C49955 * C50051))) +
         C49863 *
             (3 * C50234 +
              C50012 * (2 * C50247 + C50012 * (C49893 + C49905 * C50051)))) /
        C49761;
    const double C7456 =
        (4 * (2 * C50136 + C50012 * C50234) +
         C50012 *
             (3 * C50234 +
              C50012 * (2 * C50247 + C50012 * (C49893 + C49905 * C50051)))) /
        C49761;
    const double C50252 = C50251 + C50250;
    const double C309 =
        (2 * C49929 + C49869 * C49941 +
         C49863 * (C49863 * C49964 + C49960 * be) + C49863 * C49960 * be) /
        C49753;
    const double C310 =
        (2 * C49931 + C49869 * C49942 +
         C49863 * (C49863 * C49965 + C49960 * ae) + C49863 * C49960 * ae) /
        C49753;
    const double C311 = (C49863 * (3 * C49941 + C49869 * C49964) +
                         (3 * C49937 + C49869 * C49960) * be) /
                        C49753;
    const double C312 = (C49863 * (3 * C49942 + C49869 * C49965) +
                         (3 * C49937 + C49869 * C49960) * ae) /
                        C49753;
    const double C916 = (C50012 * (C49863 * C49964 + C49960 * be)) / C49753;
    const double C917 = (C50012 * (C49863 * C49965 + C49960 * ae)) / C49753;
    const double C124 = 4 * (2 * C49930 + C49869 * C49937) +
                        C49869 * (3 * C49937 + C49869 * C49960);
    const double C292 = 2 * C49930 + C49869 * C49937 + C49960 * C49866;
    const double C293 = C49863 * (3 * C49937 + C49869 * C49960);
    const double C475 = 2 * C49930 + C49869 * C49937 + C49960 * C50051;
    const double C476 = C50012 * (3 * C49937 + C49869 * C49960);
    const double C908 = C50012 * C49863 * C49960;
    const double C1120 =
        2 * C49863 * C49960 + C49863 * (C49960 + C49987 * C49866);
    const double C1581 = C50012 * (C49960 + C49987 * C49866);
    const double C1865 =
        2 * C50012 * C49960 + C50012 * (C49960 + C49987 * C50051);
    const double C1127 = (2 * (C49863 * C49942 + C49937 * ae) +
                          C49863 * (C49942 + C49863 * C50032 + C50028 * ae) +
                          (C49937 + C49953 * C49866) * ae) /
                         C49753;
    const double C1241 =
        (C49863 * C49942 + C49937 * ae + C50032 * C50051) / C49753;
    const double C1588 =
        (C50012 * (C49942 + C49863 * C50032 + C50028 * ae)) / C49753;
    const double C5765 = C118 * C1235;
    const double C1126 = (2 * (C49863 * C49941 + C49937 * be) +
                          C49863 * (C49941 + C49863 * C50031 + C50028 * be) +
                          (C49937 + C49953 * C49866) * be) /
                         C49753;
    const double C1240 =
        (C49863 * C49941 + C49937 * be + C50031 * C50051) / C49753;
    const double C1587 =
        (C50012 * (C49941 + C49863 * C50031 + C50028 * be)) / C49753;
    const double C50106 = C49948 + C50104;
    const double C5392 = C118 * C2729;
    const double C50105 = C49944 + C50103;
    const double C50153 = C49897 + C50142;
    const double C50222 = C50219 + C50208;
    const double C24062 =
        (4 * (2 * C50012 * C50077 + C50012 * C50540) +
         C50012 *
             (3 * C50540 +
              C50012 * (2 * C50341 + C50012 * (C50207 + C50292 * C50051)))) /
        C49753;
    const double C3588 = 4 * (2 * C50045 + C49863 * C50076) +
                         C49863 * (3 * C50076 + C49863 * C50218);
    const double C3742 = 2 * C50045 + C49863 * C50076 + C50218 * C50051;
    const double C4236 = C50012 * (3 * C50076 + C49863 * C50218);
    const double C21438 =
        2 * C50012 * C50218 + C50012 * (C50218 + C50304 * C50051);
    const double C50221 = C50217 + C50205;
    const double C50295 = C50287 + C50270;
    const double C50350 = C50247 + C50345;
    const double C24061 =
        (4 * (2 * C50012 * C50074 + C50012 * C50537) +
         C50012 *
             (3 * C50537 +
              C50012 * (2 * C50340 + C50012 * (C50204 + C50289 * C50051)))) /
        C49753;
    const double C40572 =
        5 * (3 * C50629 + C50012 * C50644) +
        C50012 * (4 * C50644 +
                  C50012 * (3 * C50642 +
                            C50012 * (2 * C50012 * C49887 +
                                      C50012 * (C49887 + C49898 * C50051))));
    const double C2543 = C2317 * C1129;
    const double C8287 = C8058 * C1129;
    const double C17444 = C17215 * C1129;
    const double C24887 = C24673 * C1129;
    const double C5385 = C117 * C1243;
    const double C8489 = C8058 * C1243;
    const double C17646 = C17215 * C1243;
    const double C2743 = C2317 * C1590;
    const double C5389 = C117 * C1590;
    const double C9045 = C8058 * C1590;
    const double C18202 = C17215 * C1590;
    const double C25075 = C24673 * C1590;
    const double C6131 = C117 * C4640;
    const double C14044 = C8058 * C4640;
    const double C22189 = C17215 * C4640;
    const double C50085 = C50083 + C50078;
    const double C171 = C160 - C161;
    const double C350 = C326 - C327;
    const double C354 = C342 - C343;
    const double C533 = C509 - C510;
    const double C537 = C525 - C526;
    const double C939 = C930 - C931;
    const double C5597 = C5588 - C5589;
    const double C2560 = C2309 * C1134;
    const double C2544 = C2310 * C1134;
    const double C8288 = C50852 * C1134;
    const double C17445 = C50852 * C1134;
    const double C24904 = C50977 * C1134;
    const double C24888 = C24666 * C1134;
    const double C2744 = C2310 * C1595;
    const double C3330 = C2309 * C1595;
    const double C5390 = C50800 * C1595;
    const double C9046 = C50852 * C1595;
    const double C13813 = C50940 * C1595;
    const double C18203 = C50852 * C1595;
    const double C25076 = C24666 * C1595;
    const double C25650 = C50977 * C1595;
    const double C27743 = C17208 * C1595;
    const double C2764 = C2310 * C2738;
    const double C5394 = C50800 * C2738;
    const double C14727 = C50852 * C2738;
    const double C22728 = C50852 * C2738;
    const double C25096 = C24666 * C2738;
    const double C2541 = C2317 * C1128;
    const double C8285 = C8058 * C1128;
    const double C17442 = C17215 * C1128;
    const double C24885 = C24673 * C1128;
    const double C5383 = C117 * C1242;
    const double C8487 = C8058 * C1242;
    const double C17644 = C17215 * C1242;
    const double C2741 = C2317 * C1589;
    const double C5387 = C117 * C1589;
    const double C9043 = C8058 * C1589;
    const double C18200 = C17215 * C1589;
    const double C25073 = C24673 * C1589;
    const double C6129 = C117 * C4639;
    const double C14042 = C8058 * C4639;
    const double C22187 = C17215 * C4639;
    const double C5601 = C5594 - C5574;
    const double C5603 = C5596 - C5582;
    const double C50084 = C50082 + C50075;
    const double C50209 = C50202 + C50189;
    const double C6552 = C6546 - C6547;
    const double C39971 = C39967 - C39968;
    const double C40581 = C40577 - C40578;
    const double C49908 = C49869 * C49907;
    const double C50112 = C49863 * C49907;
    const double C50140 = C50012 * C49907;
    const double C1133 =
        (2 * (ae * C49941 + be * C49942 + C49863 * C49895) +
         ae * (C49941 + C49863 * C50031 + C50028 * be) +
         be * (C49942 + C49863 * C50032 + C50028 * ae) +
         C49863 * (C49895 + ae * C50031 + be * C50032 +
                   C49863 * (ae * C49959 + be * C49961 + C49863 * C49907))) /
        C49761;
    const double C1247 =
        (ae * (C49941 + C49959 * C50051) + be * (C49942 + C49961 * C50051) +
         C49863 * (C49895 + C49907 * C50051)) /
        C49761;
    const double C1594 =
        (C50012 * C49895 + ae * C50012 * C50031 + be * C50012 * C50032 +
         C49863 * (ae * C50012 * C49959 + be * C50012 * C49961 +
                   C49863 * C50012 * C49907)) /
        C49761;
    const double C1878 =
        (2 * C50012 * C49895 + C50012 * (C49895 + C49907 * C50051)) / C49761;
    const double C50163 = C50154 + C50155;
    const double C50231 = C49897 + C50230;
    const double C50241 = C49863 * C50238;
    const double C50302 = C49863 * C50296;
    const double C50336 = C49863 * C50333;
    const double C50358 = C50012 * C50333;
    const double C50353 = C50351 + C50349;
    const double C49996 = C49869 * C49994;
    const double C50021 = C49863 * C49994;
    const double C1870 =
        (2 * C50012 * C49965 + C50012 * (C49965 + C49994 * C50051)) / C49753;
    const double C50127 = C49863 * C50123;
    const double C6116 =
        (2 * C50012 * C50032 + C50012 * (C50032 + C50123 * C50051)) / C49753;
    const double C50178 = C49975 + C50173;
    const double C50310 = C50305 + C50293;
    const double C49995 = C49869 * C49992;
    const double C50018 = C49863 * C49992;
    const double C1869 =
        (2 * C50012 * C49964 + C50012 * (C49964 + C49992 * C50051)) / C49753;
    const double C50126 = C49863 * C50120;
    const double C2739 =
        (C49895 + C49907 * C50051 + ae * (C50031 + C50120 * C50051) +
         be * (C50032 + C50123 * C50051) +
         C49863 * (ae * (C49959 + C49986 * C50051) +
                   be * (C49961 + C49988 * C50051) +
                   C49863 * (C49907 +
                             (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881) *
                                 C50051))) /
        C49761;
    const double C6115 =
        (2 * C50012 * C50031 + C50012 * (C50031 + C50120 * C50051)) / C49753;
    const double C50176 = C49969 + C50170;
    const double C50307 = C50303 + C50290;
    const double C49993 = C49971 + C49990;
    const double C1234 = C49863 * C49960 + C50020 * C50051;
    const double C3587 = 4 * (2 * C50037 + C49863 * C50099) +
                         C49863 * (3 * C50099 + C49863 * C50177);
    const double C3741 = 2 * C50037 + C49863 * C50099 + C50177 * C50051;
    const double C4235 = C50012 * (3 * C50099 + C49863 * C50177);
    const double C50314 = C50281 + C50309;
    const double C166 = C117 * C137;
    const double C531 = C117 * C493;
    const double C771 = C117 * C495;
    const double C164 = C117 * C136;
    const double C529 = C117 * C492;
    const double C769 = C117 * C494;
    const double C106 = (C50968 * C50651) / C49753 + (C50912 - C50951) / C49805;
    const double C107 =
        (C50969 * C50651) / C49753 + (2 * C50661 + C50968) / C49805;
    const double C108 = (C50651 * C50661) / C49763 + C50969 / C49805;
    const double C113 = (C50970 * C50679) / C50676 + (C50919 - C50954) / C50678;
    const double C114 =
        (C50971 * C50679) / C50676 + (2 * C50690 + C50970) / C50678;
    const double C115 = (C50679 * C50690) / C50693 + C50971 / C50678;
    const double C1115 =
        (C50972 * C50750) / C50676 + (C50927 - C50956) / C50678;
    const double C1116 =
        (C50973 * C50750) / C50676 + (2 * C50755 + C50972) / C50678;
    const double C1117 = (C50750 * C50755) / C50693 + C50973 / C50678;
    const double C1861 =
        (C50974 * C50778) / C50676 + (C50928 - C50959) / C50678;
    const double C1862 =
        (C50975 * C50778) / C50676 + (2 * C50783 + C50974) / C50678;
    const double C1863 = (C50778 * C50783) / C50693 + C50975 / C50678;
    const double C39161 =
        (C50978 * C50875) / C49753 + (C50941 - C50965) / C49805;
    const double C39162 =
        (C50979 * C50875) / C49753 + (2 * C50880 + C50978) / C49805;
    const double C39163 = (C50875 * C50880) / C49763 + C50979 / C49805;
    const double C49772 = C49771 * C49768;
    const double C49807 = C49771 * ae;
    const double C2315 =
        ((C49771 * ae) / C49753 - C49760 / C49763) / (2 * C49753) +
        ((C49751 * ((0 * ae) / C49753 - C49764 / C49761) + C50852) * ae) /
            C49753;
    const double C8056 = (C49771 * ae) / C49753 - C49760 / C49763;
    const double C17213 =
        (-C49760 / C49753) / (2 * C49753) - (C49771 * be) / C49753;
    const double C5611 = C5605 * C2311;
    const double C11218 = C5605 * C50968;
    const double C34074 = C5605 * C17210;
    const double C39362 = C5605 * C50656;
    const double C44796 = C5605 * C50912;
    const double C365 = C359 + C341;
    const double C548 = C542 + C524;
    const double C944 = C941 + C929;
    const double C6141 = C6138 - C6126;
    const double C7054 = C7052 - C7044;
    const double C5584 = C547 * C2311;
    const double C5566 = C547 * C50661;
    const double C11224 = C547 * C50968;
    const double C11219 = C547 * C50969;
    const double C34080 = C547 * C17210;
    const double C34075 = C547 * C17211;
    const double C39366 = C547 * C50656;
    const double C44802 = C547 * C50912;
    const double C44797 = C547 * C50661;
    const double C5612 = C5606 * C2311;
    const double C11223 = C5606 * C50968;
    const double C34079 = C5606 * C17210;
    const double C39363 = C5606 * C50656;
    const double C44798 = C5606 * C50912;
    const double C6146 = C6143 * C2311;
    const double C11719 = C6143 * C50968;
    const double C34575 = C6143 * C17210;
    const double C39699 = C6143 * C50656;
    const double C45300 = C6143 * C50912;
    const double C5585 = C546 * C50661;
    const double C5917 = C546 * C2311;
    const double C11225 = C546 * C50969;
    const double C11220 = C546 * C8055;
    const double C11522 = C546 * C50968;
    const double C34081 = C546 * C17211;
    const double C34076 = C546 * C17212;
    const double C34378 = C546 * C17210;
    const double C39566 = C546 * C50656;
    const double C44803 = C546 * C50661;
    const double C45102 = C546 * C50912;
    const double C5614 = C5608 * C2311;
    const double C12997 = C5608 * C50968;
    const double C35853 = C5608 * C17210;
    const double C39364 = C5608 * C50656;
    const double C44801 = C5608 * C50912;
    const double C167 = C50800 * C145;
    const double C329 = C50800 * C315;
    const double C2351 = C2309 * C315;
    const double C8080 = C50852 * C315;
    const double C8673 = C50940 * C315;
    const double C17237 = C50852 * C315;
    const double C17830 = C17208 * C315;
    const double C24707 = C50977 * C315;
    const double C345 = C50800 * C321;
    const double C2335 = C2310 * C321;
    const double C2936 = C2309 * C321;
    const double C8292 = C50940 * C321;
    const double C8268 = C50852 * C321;
    const double C17449 = C17208 * C321;
    const double C17425 = C50852 * C321;
    const double C24691 = C24666 * C321;
    const double C25268 = C50977 * C321;
    const double C512 = C50800 * C498;
    const double C8834 = C50940 * C498;
    const double C17991 = C17208 * C498;
    const double C528 = C50800 * C504;
    const double C8494 = C50940 * C504;
    const double C17651 = C17208 * C504;
    const double C933 = C50800 * C922;
    const double C3103 = C2309 * C922;
    const double C8470 = C50852 * C922;
    const double C9050 = C50940 * C922;
    const double C17627 = C50852 * C922;
    const double C18207 = C17208 * C922;
    const double C25435 = C50977 * C922;
    const double C23148 = C50852 * C4647;
    const double C33186 = C24666 * C4647;
    const double C38600 = C2310 * C4647;
    const double C40306 = C50800 * C4647;
    const double C48346 = C50852 * C4647;
    const double C6549 = C50800 * C4648;
    const double C16458 = C50852 * C4648;
    const double C22178 = C50852 * C4648;
    const double C23144 = C17208 * C4648;
    const double C33182 = C50977 * C4648;
    const double C38596 = C2309 * C4648;
    const double C48342 = C50940 * C4648;
    const double C7462 = C50800 * C5558;
    const double C24069 = C17208 * C5558;
    const double C49249 = C50940 * C5558;
    const double C24073 = C50852 * C6544;
    const double C39970 = C50800 * C6544;
    const double C49253 = C50852 * C6544;
    const double C40580 = C50800 * C7456;
    const double C346 = C117 * C309;
    const double C2352 = C2317 * C309;
    const double C8674 = C8058 * C309;
    const double C17831 = C17215 * C309;
    const double C24708 = C24673 * C309;
    const double C348 = C117 * C310;
    const double C2354 = C2317 * C310;
    const double C8676 = C8058 * C310;
    const double C17833 = C17215 * C310;
    const double C24710 = C24673 * C310;
    const double C658 = C117 * C311;
    const double C8089 = C8058 * C311;
    const double C17246 = C17215 * C311;
    const double C660 = C117 * C312;
    const double C8091 = C8058 * C312;
    const double C17248 = C17215 * C312;
    const double C934 = C117 * C916;
    const double C8835 = C8058 * C916;
    const double C17992 = C17215 * C916;
    const double C936 = C117 * C917;
    const double C8837 = C8058 * C917;
    const double C17994 = C17215 * C917;
    const double C165 = C118 * C124;
    const double C347 = C118 * C292;
    const double C659 = C118 * C293;
    const double C530 = C118 * C475;
    const double C770 = C118 * C476;
    const double C935 = C118 * C908;
    const double C2939 = C2317 * C1127;
    const double C8295 = C8058 * C1127;
    const double C17452 = C17215 * C1127;
    const double C25271 = C24673 * C1127;
    const double C5766 = C117 * C1241;
    const double C8497 = C8058 * C1241;
    const double C17654 = C17215 * C1241;
    const double C3106 = C2317 * C1588;
    const double C9053 = C8058 * C1588;
    const double C11067 = C117 * C1588;
    const double C18210 = C17215 * C1588;
    const double C25438 = C24673 * C1588;
    const double C2937 = C2317 * C1126;
    const double C8293 = C8058 * C1126;
    const double C17450 = C17215 * C1126;
    const double C25269 = C24673 * C1126;
    const double C5764 = C117 * C1240;
    const double C8495 = C8058 * C1240;
    const double C17652 = C17215 * C1240;
    const double C3104 = C2317 * C1587;
    const double C9051 = C8058 * C1587;
    const double C11065 = C117 * C1587;
    const double C18208 = C17215 * C1587;
    const double C25436 = C24673 * C1587;
    const double C50108 = C50106 + C50101;
    const double C50107 = C50105 + C50098;
    const double C50162 = C50153 + C50143;
    const double C50224 = C49863 * C50222;
    const double C50282 = 3 * C50222;
    const double C50268 = be * C50222;
    const double C50223 = C49863 * C50221;
    const double C50274 = 3 * C50221;
    const double C50267 = ae * C50221;
    const double C50352 = C50350 + C50346;
    const double C2532 =
        (3 * (C49927 + C49863 * C50049 + C50045 * ae) +
         C49863 * (2 * C50049 + C49863 * C50085 + C50076 * ae) +
         (2 * C50045 + C49863 * C50076) * ae) /
        C49753;
    const double C2732 =
        (C49927 + C49863 * C50049 + C50045 * ae + C50085 * C50051) / C49753;
    const double C3314 =
        (C50012 * (2 * C50049 + C49863 * C50085 + C50076 * ae)) / C49753;
    const double C4642 =
        (2 * C50012 * C50085 + C50012 * (C50085 + C50222 * C50051)) / C49753;
    const double C176 = C171 - C162;
    const double C356 = C350 - C328;
    const double C360 = C354 - C344;
    const double C539 = C533 - C511;
    const double C543 = C537 - C527;
    const double C942 = C939 - C932;
    const double C5604 = C5597 - C5590;
    const double C5395 = C5383 - C5384;
    const double C5396 = C5387 - C5388;
    const double C6139 = C6129 - C6130;
    const double C5607 = C5601 + C5575;
    const double C2537 =
        (3 * (C49876 + ae * C50048 + be * C50049 + C49863 * C50079) +
         ae * (2 * C50048 + C49863 * C50084 + C50076 * be) +
         be * (2 * C50049 + C49863 * C50085 + C50076 * ae) +
         C49863 * (2 * C50079 + ae * C50084 + be * C50085 +
                   C49863 * (C49885 + ae * C50074 + be * C50077 +
                             C49863 * (ae * C49936 + be * C49938 +
                                       C49863 * C49893)))) /
        C49761;
    const double C3319 =
        (2 * (ae * C50012 * C49915 + be * C50012 * C49916 + C49863 * C50136) +
         ae * C50012 * C50084 + be * C50012 * C50085 +
         C49863 * (C50136 + ae * C50012 * C50074 + be * C50012 * C50077 +
                   C49863 * (ae * C50012 * C49936 + be * C50012 * C49938 +
                             C49863 * C50012 * C49893))) /
        C49761;
    const double C3748 =
        (2 * (ae * (C49915 + C49936 * C50051) +
              be * (C49916 + C49938 * C50051) + C49863 * C50234) +
         ae * (C50084 + C50221 * C50051) + be * (C50085 + C50222 * C50051) +
         C49863 * (C50234 + ae * (C50074 + C50204 * C50051) +
                   be * (C50077 + C50207 * C50051) +
                   C49863 * (ae * (C49936 + C49951 * C50051) +
                             be * (C49938 + C49955 * C50051) +
                             C49863 * (C49893 + C49905 * C50051)))) /
        C49761;
    const double C2531 =
        (3 * (C49926 + C49863 * C50048 + C50045 * be) +
         C49863 * (2 * C50048 + C49863 * C50084 + C50076 * be) +
         (2 * C50045 + C49863 * C50076) * be) /
        C49753;
    const double C2731 =
        (C49926 + C49863 * C50048 + C50045 * be + C50084 * C50051) / C49753;
    const double C3313 =
        (C50012 * (2 * C50048 + C49863 * C50084 + C50076 * be)) / C49753;
    const double C4641 =
        (2 * C50012 * C50084 + C50012 * (C50084 + C50221 * C50051)) / C49753;
    const double C50220 = C50209 + C50216;
    const double C6553 = C6552 - C6548;
    const double C39972 = C39971 - C39969;
    const double C40582 = C40581 - C40579;
    const double C49909 = C49901 + C49908;
    const double C50125 = C50119 + C50112;
    const double C5560 =
        (3 * (C49895 + C49907 * C50051) +
         C50012 * (2 * C50140 +
                   C50012 * (C49907 +
                             (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881) *
                                 C50051))) /
        C49761;
    const double C6117 =
        (ae * (2 * C50012 * C49959 + C50012 * (C49959 + C49986 * C50051)) +
         be * (2 * C50012 * C49961 + C50012 * (C49961 + C49988 * C50051)) +
         C49863 * (2 * C50140 +
                   C50012 * (C49907 +
                             (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881) *
                                 C50051))) /
        C49761;
    const double C2940 = C2310 * C1133;
    const double C8296 = C50852 * C1133;
    const double C17453 = C50852 * C1133;
    const double C25272 = C24666 * C1133;
    const double C5767 = C50800 * C1247;
    const double C8498 = C50852 * C1247;
    const double C17655 = C50852 * C1247;
    const double C3107 = C2310 * C1594;
    const double C9054 = C50852 * C1594;
    const double C11068 = C50800 * C1594;
    const double C18211 = C50852 * C1594;
    const double C25439 = C24666 * C1594;
    const double C5591 = C50800 * C1878;
    const double C50169 = C49863 * C50163;
    const double C4645 =
        (2 * C50138 + C50012 * C50231 +
         ae * (2 * C50012 * C50097 + C50012 * (C50097 + C50164 * C50051)) +
         be * (2 * C50012 * C50100 + C50012 * (C50100 + C50167 * C50051)) +
         C49863 * (ae * (2 * C50236 + C50012 * (C49969 + C50148 * C50051)) +
                   be * (2 * C50237 + C50012 * (C49975 + C50152 * C50051)) +
                   C49863 * (2 * C50238 +
                             C50012 * (C50146 + C49869 *
                                                    (C49899 * C49900 +
                                                     C49866 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49752 * C50051)))) /
        C49761;
    const double C4646 =
        (ae * (2 * C50012 * C49944 + C50012 * (C49944 + C49969 * C50051)) +
         be * (2 * C50012 * C49948 + C50012 * (C49948 + C49975 * C50051)) +
         C49863 * (2 * C50138 + C50012 * C50231)) /
        C49761;
    const double C5559 = (3 * (C50034 + C49897 * C50051) +
                          C50012 * (2 * C50138 + C50012 * C50231)) /
                         C49761;
    const double C6543 =
        (ae * (3 * (C49944 + C49969 * C50051) +
               C50012 * (2 * C50236 + C50012 * (C49969 + C50148 * C50051))) +
         be * (3 * (C49948 + C49975 * C50051) +
               C50012 * (2 * C50237 + C50012 * (C49975 + C50152 * C50051))) +
         C49863 * (3 * C50231 +
                   C50012 * (2 * C50238 +
                             C50012 * (C50146 + C49869 *
                                                    (C49899 * C49900 +
                                                     C49866 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49752 * C50051)))) /
        C49761;
    const double C7455 =
        (4 * (2 * C50138 + C50012 * C50231) +
         C50012 * (3 * C50231 +
                   C50012 * (2 * C50238 +
                             C50012 * (C50146 + C49869 *
                                                    (C49899 * C49900 +
                                                     C49866 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49752 * C50051)))) /
        C49761;
    const double C50243 = C50242 + C50241;
    const double C50306 = C50295 + C50302;
    const double C50338 = C50337 + C50336;
    const double C50359 = C50357 + C50358;
    const double C50354 = C49863 * C50353;
    const double C49998 = C49974 + C49996;
    const double C50024 = C50021 + C50022;
    const double C50129 = C49961 + C50127;
    const double C50180 = C50178 + C50168;
    const double C50315 = C49863 * C50310;
    const double C23138 =
        (3 * (C50085 + C50222 * C50051) +
         C50012 * (2 * C50012 * C50222 + C50012 * (C50222 + C50310 * C50051))) /
        C49753;
    const double C49997 = C49968 + C49995;
    const double C50023 = C50018 + C50019;
    const double C50128 = C49959 + C50126;
    const double C50179 = C50176 + C50165;
    const double C50313 = C49863 * C50307;
    const double C23137 =
        (3 * (C50084 + C50221 * C50051) +
         C50012 * (2 * C50012 * C50221 + C50012 * (C50221 + C50307 * C50051))) /
        C49753;
    const double C125 = 5 * (3 * C49937 + C49869 * C49960) +
                        C49869 * (4 * C49960 + C49869 * C49993);
    const double C294 = 3 * C49937 + C49869 * C49960 + C49993 * C49866;
    const double C477 = 3 * C49937 + C49869 * C49960 + C49993 * C50051;
    const double C653 = C49863 * (4 * C49960 + C49869 * C49993);
    const double C764 = C50012 * (4 * C49960 + C49869 * C49993);
    const double C909 = C50012 * C49863 * C49993;
    const double C20740 = 5 * (3 * C50076 + C49863 * C50218) +
                          C49863 * (4 * C50218 + C49863 * C50314);
    const double C20842 = 3 * C50076 + C49863 * C50218 + C50314 * C50051;
    const double C21172 = C50012 * (4 * C50218 + C49863 * C50314);
    const double C49777 = C49751 * C49772;
    const double C2314 =
        (ae * -2 * C49760) / (C49761 * 2 * C49753) +
        (((C49751 * ((-4 * C49764) / C49753 - (C49751 * C49772) / C49753) *
           ae) /
              C49753 +
          2 * ((C49771 * ae) / C49753 - C49760 / C49763)) *
         ae) /
            C49753 -
        C49772 / C49763;
    const double C2318 = (-C49772 / C49753) / (4 * C49761);
    const double C8059 = (-C49772 / C49753) / (2 * C49753);
    const double C17216 = (-C49772 / C49753) / (2 * C49753);
    const double C20053 = (-C49772 / C49753) / (4 * C49823);
    const double C24674 = (-C49772 / C49753) / (4 * C49761);
    const double C49813 = C49807 / C49753;
    const double C2350 = C2315 * C296;
    const double C2348 = C2315 * C295;
    const double C2338 = C2315 * C298;
    const double C2336 = C2315 * C297;
    const double C2326 = C2315 * C300;
    const double C2324 = C2315 * C299;
    const double C2559 = C2315 * C1129;
    const double C2557 = C2315 * C1128;
    const double C2547 = C2315 * C306;
    const double C2545 = C2315 * C305;
    const double C2759 = C2315 * C1243;
    const double C2757 = C2315 * C1242;
    const double C2747 = C2315 * C913;
    const double C2745 = C2315 * C912;
    const double C2935 = C2315 * C308;
    const double C2933 = C2315 * C307;
    const double C3102 = C2315 * C915;
    const double C3100 = C2315 * C914;
    const double C3329 = C2315 * C1590;
    const double C3327 = C2315 * C1589;
    const double C36750 = C2315 * C1245;
    const double C36748 = C2315 * C1244;
    const double C36738 = C2315 * C911;
    const double C36736 = C2315 * C910;
    const double C37266 = C2315 * C1592;
    const double C37264 = C2315 * C1591;
    const double C38595 = C2315 * C4644;
    const double C38593 = C2315 * C4643;
    const double C8087 = C8056 * C135;
    const double C8085 = C8056 * C134;
    const double C8083 = C8056 * C133;
    const double C8081 = C8056 * C132;
    const double C8071 = C8056 * C131;
    const double C8069 = C8056 * C130;
    const double C8063 = C8056 * C129;
    const double C8061 = C8056 * C128;
    const double C8291 = C8056 * C308;
    const double C8289 = C8056 * C307;
    const double C8283 = C8056 * C306;
    const double C8281 = C8056 * C305;
    const double C8279 = C8056 * C300;
    const double C8277 = C8056 * C299;
    const double C8271 = C8056 * C298;
    const double C8269 = C8056 * C297;
    const double C8493 = C8056 * C491;
    const double C8491 = C8056 * C490;
    const double C8485 = C8056 * C489;
    const double C8483 = C8056 * C488;
    const double C8481 = C8056 * C483;
    const double C8479 = C8056 * C482;
    const double C8473 = C8056 * C481;
    const double C8471 = C8056 * C480;
    const double C8672 = C8056 * C296;
    const double C8670 = C8056 * C295;
    const double C8833 = C8056 * C479;
    const double C8831 = C8056 * C478;
    const double C9049 = C8056 * C915;
    const double C9047 = C8056 * C914;
    const double C9041 = C8056 * C913;
    const double C9039 = C8056 * C912;
    const double C13812 = C8056 * C1590;
    const double C13810 = C8056 * C1589;
    const double C14040 = C8056 * C1874;
    const double C14038 = C8056 * C1873;
    const double C14034 = C8056 * C487;
    const double C14032 = C8056 * C486;
    const double C14020 = C8056 * C485;
    const double C14018 = C8056 * C484;
    const double C14722 = C8056 * C1243;
    const double C14720 = C8056 * C1242;
    const double C14713 = C8056 * C911;
    const double C14711 = C8056 * C910;
    const double C15261 = C8056 * C1245;
    const double C15259 = C8056 * C1244;
    const double C15921 = C8056 * C1592;
    const double C15919 = C8056 * C1591;
    const double C16453 = C8056 * C1876;
    const double C16451 = C8056 * C1875;
    const double C48341 = C8056 * C4644;
    const double C48339 = C8056 * C4643;
    const double C49248 = C8056 * C5553;
    const double C49246 = C8056 * C5552;
    const double C17244 = C17213 * C135;
    const double C17242 = C17213 * C134;
    const double C17240 = C17213 * C133;
    const double C17238 = C17213 * C132;
    const double C17228 = C17213 * C131;
    const double C17226 = C17213 * C130;
    const double C17220 = C17213 * C129;
    const double C17218 = C17213 * C128;
    const double C17448 = C17213 * C308;
    const double C17446 = C17213 * C307;
    const double C17440 = C17213 * C306;
    const double C17438 = C17213 * C305;
    const double C17436 = C17213 * C300;
    const double C17434 = C17213 * C299;
    const double C17428 = C17213 * C298;
    const double C17426 = C17213 * C297;
    const double C17650 = C17213 * C491;
    const double C17648 = C17213 * C490;
    const double C17642 = C17213 * C489;
    const double C17640 = C17213 * C488;
    const double C17638 = C17213 * C483;
    const double C17636 = C17213 * C482;
    const double C17630 = C17213 * C481;
    const double C17628 = C17213 * C480;
    const double C17829 = C17213 * C296;
    const double C17827 = C17213 * C295;
    const double C17990 = C17213 * C479;
    const double C17988 = C17213 * C478;
    const double C18206 = C17213 * C915;
    const double C18204 = C17213 * C914;
    const double C18198 = C17213 * C913;
    const double C18196 = C17213 * C912;
    const double C22185 = C17213 * C1874;
    const double C22183 = C17213 * C1873;
    const double C22181 = C17213 * C1876;
    const double C22179 = C17213 * C1875;
    const double C22169 = C17213 * C487;
    const double C22167 = C17213 * C486;
    const double C22161 = C17213 * C485;
    const double C22159 = C17213 * C484;
    const double C22723 = C17213 * C1243;
    const double C22721 = C17213 * C1242;
    const double C22715 = C17213 * C1245;
    const double C22713 = C17213 * C1244;
    const double C22707 = C17213 * C911;
    const double C22705 = C17213 * C910;
    const double C23143 = C17213 * C4644;
    const double C23141 = C17213 * C4643;
    const double C23645 = C17213 * C1592;
    const double C23643 = C17213 * C1591;
    const double C24068 = C17213 * C5553;
    const double C24066 = C17213 * C5552;
    const double C27742 = C17213 * C1590;
    const double C27740 = C17213 * C1589;
    const double C5586 = C548 * C2311;
    const double C5571 = C548 * C50661;
    const double C11227 = C548 * C50968;
    const double C11222 = C548 * C50969;
    const double C34083 = C548 * C17210;
    const double C34078 = C548 * C17211;
    const double C39367 = C548 * C50656;
    const double C44804 = C548 * C50912;
    const double C44799 = C548 * C50661;
    const double C6133 = C944 * C2311;
    const double C6123 = C944 * C50661;
    const double C11722 = C944 * C50968;
    const double C11720 = C944 * C50969;
    const double C34578 = C944 * C17210;
    const double C34576 = C944 * C17211;
    const double C39702 = C944 * C50656;
    const double C45304 = C944 * C50912;
    const double C45301 = C944 * C50661;
    const double C6144 = C6141 + C6127;
    const double C7056 = C7054 + C7045;
    const double C7466 = C7465 + C7462;
    const double C172 = C164 - C165;
    const double C355 = C346 - C347;
    const double C662 = C658 - C659;
    const double C538 = C529 - C530;
    const double C773 = C769 - C770;
    const double C940 = C934 - C935;
    const double C5768 = C5764 - C5765;
    const double C11069 = C11065 - C11066;
    const double C2534 =
        (3 * (C49931 + C49863 * C50041 + C50037 * ae) +
         C49863 * (2 * C50041 + C49863 * C50108 + C50099 * ae) +
         (2 * C50037 + C49863 * C50099) * ae) /
        C49753;
    const double C2734 =
        (C49931 + C49863 * C50041 + C50037 * ae + C50108 * C50051) / C49753;
    const double C3316 =
        (C50012 * (2 * C50041 + C49863 * C50108 + C50099 * ae)) / C49753;
    const double C2538 =
        (3 * (C50034 + ae * C50040 + be * C50041 + C49863 * C50102) +
         ae * (2 * C50040 + C49863 * C50107 + C50099 * be) +
         be * (2 * C50041 + C49863 * C50108 + C50099 * ae) +
         C49863 * (2 * C50102 + ae * C50107 + be * C50108 +
                   C49863 * (C49897 + ae * C50097 + be * C50100 +
                             C49863 * (ae * C49969 + be * C49975 +
                                       C49863 * C49869 * C49905)))) /
        C49761;
    const double C3320 =
        (2 * (ae * C50012 * C49944 + be * C50012 * C49948 + C49863 * C50138) +
         ae * C50012 * C50107 + be * C50012 * C50108 +
         C49863 * (C50138 + ae * C50012 * C50097 + be * C50012 * C50100 +
                   C49863 * (ae * C50012 * C49969 + be * C50012 * C49975 +
                             C49863 * C50012 * C49869 * C49905))) /
        C49761;
    const double C2533 =
        (3 * (C49929 + C49863 * C50040 + C50037 * be) +
         C49863 * (2 * C50040 + C49863 * C50107 + C50099 * be) +
         (2 * C50037 + C49863 * C50099) * be) /
        C49753;
    const double C2733 =
        (C49929 + C49863 * C50040 + C50037 * be + C50107 * C50051) / C49753;
    const double C3315 =
        (C50012 * (2 * C50040 + C49863 * C50107 + C50099 * be)) / C49753;
    const double C50226 = C50199 + C50224;
    const double C50225 = C50193 + C50223;
    const double C50286 = C50266 + C50267;
    const double C7049 = C117 * C2732;
    const double C15265 = C8058 * C2732;
    const double C22719 = C17215 * C2732;
    const double C23653 = C17213 * C2732;
    const double C31332 = C24673 * C2732;
    const double C36746 = C2317 * C2732;
    const double C37677 = C2315 * C2732;
    const double C48843 = C8056 * C2732;
    const double C15925 = C8058 * C3314;
    const double C23649 = C17215 * C3314;
    const double C31856 = C24673 * C3314;
    const double C37270 = C2317 * C3314;
    const double C38184 = C2315 * C3314;
    const double C23147 = C17215 * C4642;
    const double C33185 = C24673 * C4642;
    const double C38599 = C2317 * C4642;
    const double C40305 = C117 * C4642;
    const double C48345 = C8058 * C4642;
    const double C181 = C176 + C163;
    const double C362 = C356 + C329;
    const double C366 = C360 + C345;
    const double C545 = C539 + C512;
    const double C549 = C543 + C528;
    const double C945 = C942 + C933;
    const double C5398 = C5395 - C5385;
    const double C5399 = C5396 - C5389;
    const double C6142 = C6139 - C6131;
    const double C5615 = C5607 * C2311;
    const double C5613 = C5607 * C50661;
    const double C12998 = C5607 * C50969;
    const double C35854 = C5607 * C17211;
    const double C39368 = C5607 * C50656;
    const double C44806 = C5607 * C50912;
    const double C44800 = C5607 * C50661;
    const double C15926 = C50852 * C3319;
    const double C23650 = C50852 * C3319;
    const double C31857 = C24666 * C3319;
    const double C32771 = C50977 * C3319;
    const double C37271 = C2310 * C3319;
    const double C38185 = C2309 * C3319;
    const double C23658 = C50852 * C3748;
    const double C32268 = C24666 * C3748;
    const double C37682 = C2310 * C3748;
    const double C48848 = C50852 * C3748;
    const double C7047 = C117 * C2731;
    const double C15263 = C8058 * C2731;
    const double C22717 = C17215 * C2731;
    const double C23651 = C17213 * C2731;
    const double C31330 = C24673 * C2731;
    const double C36744 = C2317 * C2731;
    const double C37675 = C2315 * C2731;
    const double C48841 = C8056 * C2731;
    const double C15923 = C8058 * C3313;
    const double C23647 = C17215 * C3313;
    const double C31854 = C24673 * C3313;
    const double C37268 = C2317 * C3313;
    const double C38182 = C2315 * C3313;
    const double C23145 = C17215 * C4641;
    const double C33183 = C24673 * C4641;
    const double C38597 = C2317 * C4641;
    const double C40303 = C117 * C4641;
    const double C48343 = C8058 * C4641;
    const double C6554 = C6553 + C6549;
    const double C39973 = C39972 + C39970;
    const double C40583 = C40582 + C40580;
    const double C146 =
        (5 * (3 * C49895 + C49869 * C49909) +
         C49869 *
             (4 * C49909 +
              C49869 * (3 * C49907 +
                        C49869 * (2 * C49869 * C49905 +
                                  C49869 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C322 =
        (2 * C49869 * C49885 + C49869 * C49895 +
         ae * (C49863 * C49964 + C49960 * be) +
         be * (C49863 * C49965 + C49960 * ae) +
         C49863 * (ae * C49964 + be * C49965 + C49863 * C49909)) /
        C49761;
    const double C323 = (ae * (3 * C49941 + C49869 * C49964) +
                         be * (3 * C49942 + C49869 * C49965) +
                         C49863 * (3 * C49895 + C49869 * C49909)) /
                        C49761;
    const double C505 = (2 * C49869 * C49885 + C49869 * C49895 +
                         C49909 * std::pow(zP - zQ, 2)) /
                        C49761;
    const double C506 = ((zP - zQ) * (3 * C49895 + C49869 * C49909)) / C49761;
    const double C507 =
        (3 * C49895 + C49869 * C49909 +
         (3 * C49907 +
          C49869 * (2 * C49869 * C49905 +
                    C49869 * (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881))) *
             std::pow(zP - zQ, 2)) /
        C49761;
    const double C767 =
        ((zP - zQ) *
         (4 * C49909 +
          C49869 * (3 * C49907 +
                    C49869 * (2 * C49869 * C49905 +
                              C49869 * (C49905 +
                                        (C49899 * C49900 +
                                         C49866 * bs[8] * std::pow(C49861, 8)) *
                                            C49752 * C49881))))) /
        C49761;
    const double C923 = (ae * C50012 * C49964 + be * C50012 * C49965 +
                         C49863 * C50012 * C49909) /
                        C49761;
    const double C1246 =
        (ae * (C49964 + C49992 * C50051) + be * (C49965 + C49994 * C50051) +
         C49863 * (C49909 +
                   (2 * C49869 * C49905 +
                    C49869 * (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881)) *
                       C50051)) /
        C49761;
    const double C1877 =
        (2 * C50012 * C49909 +
         C50012 * (C49909 +
                   (2 * C49869 * C49905 +
                    C49869 * (C49905 + (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C49881)) *
                       C50051)) /
        C49761;
    const double C5610 = C5604 + C5591;
    const double C50175 = C50162 + C50169;
    const double C6132 = C50800 * C4646;
    const double C14045 = C50852 * C4646;
    const double C22190 = C50852 * C4646;
    const double C5583 = C50800 * C5559;
    const double C50312 = C49863 * C50306;
    const double C21441 =
        (2 * (ae * (2 * C50245 + C50012 * C50331) +
              be * (2 * C50246 + C50012 * C50332) + C49863 * C50359) +
         ae * (2 * C50012 * C50221 + C50012 * (C50221 + C50307 * C50051)) +
         be * (2 * C50012 * C50222 + C50012 * (C50222 + C50310 * C50051)) +
         C49863 *
             (C50359 + ae * (2 * C50340 + C50012 * (C50204 + C50289 * C50051)) +
              be * (2 * C50341 + C50012 * (C50207 + C50292 * C50051)) +
              C49863 *
                  (ae * (2 * C50342 + C50012 * (C49951 + C49978 * C50051)) +
                   be * (2 * C50343 + C50012 * (C49955 + C49982 * C50051)) +
                   C49863 * (2 * C50344 +
                             C50012 * (C49905 +
                                       (C49899 * C49900 +
                                        C49866 * bs[8] * std::pow(C49861, 8)) *
                                           C49752 * C50051))))) /
        C49761;
    const double C23139 =
        (3 * C50234 + C50012 * C50359 +
         ae * (3 * (C50074 + C50204 * C50051) +
               C50012 * (2 * C50340 + C50012 * (C50204 + C50289 * C50051))) +
         be * (3 * (C50077 + C50207 * C50051) +
               C50012 * (2 * C50341 + C50012 * (C50207 + C50292 * C50051))) +
         C49863 *
             (ae * (3 * C50331 +
                    C50012 *
                        (2 * C50342 + C50012 * (C49951 + C49978 * C50051))) +
              be * (3 * C50332 +
                    C50012 *
                        (2 * C50343 + C50012 * (C49955 + C49982 * C50051))) +
              C49863 * (3 * C50333 +
                        C50012 * (2 * C50344 +
                                  C50012 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C50051))))) /
        C49761;
    const double C24063 =
        (ae * (4 * (2 * C50245 + C50012 * C50331) +
               C50012 * (3 * C50331 +
                         C50012 * (2 * C50342 +
                                   C50012 * (C49951 + C49978 * C50051)))) +
         be * (4 * (2 * C50246 + C50012 * C50332) +
               C50012 * (3 * C50332 +
                         C50012 * (2 * C50343 +
                                   C50012 * (C49955 + C49982 * C50051)))) +
         C49863 *
             (4 * C50359 +
              C50012 * (3 * C50333 +
                        C50012 * (2 * C50344 +
                                  C50012 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C50051))))) /
        C49761;
    const double C40575 =
        (5 * (3 * C50234 + C50012 * C50359) +
         C50012 *
             (4 * C50359 +
              C50012 * (3 * C50333 +
                        C50012 * (2 * C50344 +
                                  C50012 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C50051))))) /
        C49761;
    const double C50355 = C50352 + C50354;
    const double C139 = (5 * (3 * C49942 + C49869 * C49965) +
                         C49869 * (4 * C49965 + C49869 * C49998)) /
                        C49753;
    const double C314 =
        (3 * C49942 + C49869 * C49965 +
         C49863 * (C49863 * C49998 + C49993 * ae) + C49863 * C49993 * ae) /
        C49753;
    const double C497 =
        (3 * C49942 + C49869 * C49965 + C49998 * C50051) / C49753;
    const double C655 = (C49863 * (4 * C49965 + C49869 * C49998) +
                         (4 * C49960 + C49869 * C49993) * ae) /
                        C49753;
    const double C766 = (C50012 * (4 * C49965 + C49869 * C49998)) / C49753;
    const double C919 = (C50012 * (C49863 * C49998 + C49993 * ae)) / C49753;
    const double C1125 = (2 * (C49863 * C49965 + C49960 * ae) +
                          C49863 * (C49965 + C49863 * C50024 + C50020 * ae) +
                          (C49960 + C49987 * C49866) * ae) /
                         C49753;
    const double C1239 =
        (C49863 * C49965 + C49960 * ae + C50024 * C50051) / C49753;
    const double C1586 =
        (C50012 * (C49965 + C49863 * C50024 + C50020 * ae)) / C49753;
    const double C50131 = C50129 + C50124;
    const double C50182 = C49863 * C50180;
    const double C4638 =
        (2 * C50012 * C50108 + C50012 * (C50108 + C50180 * C50051)) / C49753;
    const double C50318 = C50283 + C50315;
    const double C324 =
        (3 * C49895 + C49869 * C49909 + ae * (C49863 * C49997 + C49993 * be) +
         be * (C49863 * C49998 + C49993 * ae) +
         C49863 *
             (ae * C49997 + be * C49998 +
              C49863 * (3 * C49907 +
                        C49869 * (2 * C49869 * C49905 +
                                  C49869 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C656 =
        (ae * (4 * C49964 + C49869 * C49997) +
         be * (4 * C49965 + C49869 * C49998) +
         C49863 *
             (4 * C49909 +
              C49869 * (3 * C49907 +
                        C49869 * (2 * C49869 * C49905 +
                                  C49869 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C924 =
        (ae * C50012 * C49997 + be * C50012 * C49998 +
         C49863 * C50012 *
             (3 * C49907 +
              C49869 *
                  (2 * C49869 * C49905 +
                   C49869 * (C49905 + (C49899 * C49900 +
                                       C49866 * bs[8] * std::pow(C49861, 8)) *
                                          C49752 * C49881)))) /
        C49761;
    const double C138 = (5 * (3 * C49941 + C49869 * C49964) +
                         C49869 * (4 * C49964 + C49869 * C49997)) /
                        C49753;
    const double C313 =
        (3 * C49941 + C49869 * C49964 +
         C49863 * (C49863 * C49997 + C49993 * be) + C49863 * C49993 * be) /
        C49753;
    const double C496 =
        (3 * C49941 + C49869 * C49964 + C49997 * C50051) / C49753;
    const double C654 = (C49863 * (4 * C49964 + C49869 * C49997) +
                         (4 * C49960 + C49869 * C49993) * be) /
                        C49753;
    const double C765 = (C50012 * (4 * C49964 + C49869 * C49997)) / C49753;
    const double C918 = (C50012 * (C49863 * C49997 + C49993 * be)) / C49753;
    const double C1132 =
        (2 * (ae * C49964 + be * C49965 + C49863 * C49909) +
         ae * (C49964 + C49863 * C50023 + C50020 * be) +
         be * (C49965 + C49863 * C50024 + C50020 * ae) +
         C49863 *
             (C49909 + ae * C50023 + be * C50024 +
              C49863 * (ae * C49992 + be * C49994 +
                        C49863 * (2 * C49869 * C49905 +
                                  C49869 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C1593 =
        (C50012 * C49909 + ae * C50012 * C50023 + be * C50012 * C50024 +
         C49863 *
             (ae * C50012 * C49992 + be * C50012 * C49994 +
              C49863 * C50012 *
                  (2 * C49869 * C49905 +
                   C49869 * (C49905 + (C49899 * C49900 +
                                       C49866 * bs[8] * std::pow(C49861, 8)) *
                                          C49752 * C49881)))) /
        C49761;
    const double C1124 = (2 * (C49863 * C49964 + C49960 * be) +
                          C49863 * (C49964 + C49863 * C50023 + C50020 * be) +
                          (C49960 + C49987 * C49866) * be) /
                         C49753;
    const double C1238 =
        (C49863 * C49964 + C49960 * be + C50023 * C50051) / C49753;
    const double C1585 =
        (C50012 * (C49964 + C49863 * C50023 + C50020 * be)) / C49753;
    const double C50130 = C50128 + C50121;
    const double C50181 = C49863 * C50179;
    const double C3747 =
        (2 * (ae * (C49944 + C49969 * C50051) +
              be * (C49948 + C49975 * C50051) + C49863 * C50231) +
         ae * (C50107 + C50179 * C50051) + be * (C50108 + C50180 * C50051) +
         C49863 * (C50231 + ae * (C50097 + C50164 * C50051) +
                   be * (C50100 + C50167 * C50051) +
                   C49863 * (ae * (C49969 + C50148 * C50051) +
                             be * (C49975 + C50152 * C50051) +
                             C49863 * (C50146 + C49869 *
                                                    (C49899 * C49900 +
                                                     C49866 * bs[8] *
                                                         std::pow(C49861, 8)) *
                                                    C49752 * C50051)))) /
        C49761;
    const double C4637 =
        (2 * C50012 * C50107 + C50012 * (C50107 + C50179 * C50051)) / C49753;
    const double C50317 = C50275 + C50313;
    const double C49826 = C49777 / C49753;
    const double C2316 =
        (((-4 * C49764) / C49753 - C49777 / C49753) * ae) / C49763 +
        ((2 * ((0 * ae) / C49753 - C49764 / C49761) - C49777 / C49763) * ae) /
            C49753;
    const double C8057 =
        (((-4 * C49764) / C49753 - C49777 / C49753) * ae) / C49753;
    const double C17214 =
        -(((-4 * C49764) / C49753 - C49777 / C49753) * be) / C49753;
    const double C2345 = C2314 * C122;
    const double C2341 = C2314 * C121;
    const double C2321 = C2314 * C120;
    const double C2554 = C2314 * C290;
    const double C2550 = C2314 * C287;
    const double C2754 = C2314 * C473;
    const double C2750 = C2314 * C470;
    const double C2930 = C2314 * C286;
    const double C3097 = C2314 * C469;
    const double C3324 = C2314 * C906;
    const double C36753 = C2314 * C472;
    const double C36733 = C2314 * C471;
    const double C37261 = C2314 * C905;
    const double C37672 = C2314 * C1237;
    const double C38179 = C2314 * C1584;
    const double C38590 = C2314 * C1868;
    const double C2353 = C2318 * C292;
    const double C2333 = C2318 * C291;
    const double C2329 = C2318 * C290;
    const double C2562 = C2318 * C2529;
    const double C2542 = C2318 * C1122;
    const double C2762 = C2318 * C2729;
    const double C2742 = C2318 * C1583;
    const double C2938 = C2318 * C1121;
    const double C3105 = C2318 * C1582;
    const double C3332 = C2318 * C3311;
    const double C36745 = C2318 * C2728;
    const double C36741 = C2318 * C1584;
    const double C37269 = C2318 * C3310;
    const double C37680 = C2318 * C3742;
    const double C38187 = C2318 * C4236;
    const double C38598 = C2318 * C4635;
    const double C8090 = C8059 * C293;
    const double C8078 = C8059 * C285;
    const double C8074 = C8059 * C286;
    const double C8066 = C8059 * C287;
    const double C8294 = C8059 * C1121;
    const double C8286 = C8059 * C1122;
    const double C8274 = C8059 * C290;
    const double C8266 = C8059 * C291;
    const double C8496 = C8059 * C1235;
    const double C8488 = C8059 * C1236;
    const double C8476 = C8059 * C906;
    const double C8468 = C8059 * C907;
    const double C8675 = C8059 * C292;
    const double C8836 = C8059 * C908;
    const double C9052 = C8059 * C1582;
    const double C9044 = C8059 * C1583;
    const double C13815 = C8059 * C3311;
    const double C14043 = C8059 * C4634;
    const double C14029 = C8059 * C1237;
    const double C14023 = C8059 * C905;
    const double C14725 = C8059 * C2729;
    const double C14716 = C8059 * C1584;
    const double C15264 = C8059 * C2728;
    const double C15924 = C8059 * C3310;
    const double C16456 = C8059 * C4636;
    const double C48344 = C8059 * C4635;
    const double C48846 = C8059 * C3742;
    const double C49251 = C8059 * C6538;
    const double C17247 = C17216 * C293;
    const double C17235 = C17216 * C285;
    const double C17231 = C17216 * C286;
    const double C17223 = C17216 * C287;
    const double C17451 = C17216 * C1121;
    const double C17443 = C17216 * C1122;
    const double C17431 = C17216 * C290;
    const double C17423 = C17216 * C291;
    const double C17653 = C17216 * C1235;
    const double C17645 = C17216 * C1236;
    const double C17633 = C17216 * C906;
    const double C17625 = C17216 * C907;
    const double C17832 = C17216 * C292;
    const double C17993 = C17216 * C908;
    const double C18209 = C17216 * C1582;
    const double C18201 = C17216 * C1583;
    const double C22188 = C17216 * C4634;
    const double C22176 = C17216 * C4636;
    const double C22172 = C17216 * C1237;
    const double C22164 = C17216 * C905;
    const double C22726 = C17216 * C2729;
    const double C22718 = C17216 * C2728;
    const double C22710 = C17216 * C1584;
    const double C23146 = C17216 * C4635;
    const double C23656 = C17216 * C3742;
    const double C23648 = C17216 * C3310;
    const double C24071 = C17216 * C6538;
    const double C27745 = C17216 * C3311;
    const double C24709 = C24674 * C292;
    const double C24689 = C24674 * C291;
    const double C24685 = C24674 * C290;
    const double C24906 = C24674 * C2529;
    const double C24886 = C24674 * C1122;
    const double C25094 = C24674 * C2729;
    const double C25074 = C24674 * C1583;
    const double C25270 = C24674 * C1121;
    const double C25437 = C24674 * C1582;
    const double C25652 = C24674 * C3311;
    const double C31331 = C24674 * C2728;
    const double C31327 = C24674 * C1584;
    const double C31855 = C24674 * C3310;
    const double C32266 = C24674 * C3742;
    const double C32773 = C24674 * C4236;
    const double C33184 = C24674 * C4635;
    const double C49816 = C49813 - C49808;
    const double C5617 = C5612 + C5571;
    const double C44808 = C44798 + C44799;
    const double C6147 = C6144 * C2311;
    const double C12115 = C6144 * C50968;
    const double C34971 = C6144 * C17210;
    const double C39700 = C6144 * C50656;
    const double C45302 = C6144 * C50912;
    const double C7058 = C7056 * C2311;
    const double C12604 = C7056 * C50968;
    const double C35460 = C7056 * C17210;
    const double C40301 = C7056 * C50656;
    const double C46187 = C7056 * C50912;
    const double C7467 = C7466 * C2311;
    const double C39365 = C7466 * C50656;
    const double C46582 = C7466 * C50912;
    const double C177 = C172 - C166;
    const double C361 = C355 - C348;
    const double C663 = C662 - C660;
    const double C544 = C538 - C531;
    const double C774 = C773 - C771;
    const double C943 = C940 - C936;
    const double C5769 = C5768 - C5766;
    const double C11070 = C11069 - C11067;
    const double C2563 = C2317 * C2534;
    const double C24907 = C24673 * C2534;
    const double C2763 = C2317 * C2734;
    const double C5393 = C117 * C2734;
    const double C14726 = C8058 * C2734;
    const double C22727 = C17215 * C2734;
    const double C25095 = C24673 * C2734;
    const double C3333 = C2317 * C3316;
    const double C13816 = C8058 * C3316;
    const double C25653 = C24673 * C3316;
    const double C27746 = C17215 * C3316;
    const double C2564 = C2310 * C2538;
    const double C24908 = C24666 * C2538;
    const double C3334 = C2310 * C3320;
    const double C13817 = C50852 * C3320;
    const double C25654 = C24666 * C3320;
    const double C27747 = C50852 * C3320;
    const double C2561 = C2317 * C2533;
    const double C24905 = C24673 * C2533;
    const double C2761 = C2317 * C2733;
    const double C5391 = C117 * C2733;
    const double C14724 = C8058 * C2733;
    const double C22725 = C17215 * C2733;
    const double C25093 = C24673 * C2733;
    const double C3331 = C2317 * C3315;
    const double C13814 = C8058 * C3315;
    const double C25651 = C24673 * C3315;
    const double C27744 = C17215 * C3315;
    const double C50228 = C50226 + C50215;
    const double C50227 = C50225 + C50212;
    const double C50294 = C50286 + C50268;
    const double C5918 = C545 * C50661;
    const double C11226 = C545 * C8055;
    const double C11523 = C545 * C50969;
    const double C34082 = C545 * C17212;
    const double C34379 = C545 * C17211;
    const double C45103 = C545 * C50661;
    const double C5587 = C549 * C50661;
    const double C5919 = C549 * C2311;
    const double C11228 = C549 * C50969;
    const double C11221 = C549 * C8055;
    const double C34084 = C549 * C17211;
    const double C34077 = C549 * C17212;
    const double C39567 = C549 * C50656;
    const double C44805 = C549 * C50661;
    const double C45104 = C549 * C50912;
    const double C6134 = C945 * C50661;
    const double C11723 = C945 * C50969;
    const double C11721 = C945 * C8055;
    const double C34579 = C945 * C17211;
    const double C34577 = C945 * C17212;
    const double C45305 = C945 * C50661;
    const double C5401 = C5398 + C5386;
    const double C5402 = C5399 + C5390;
    const double C7458 = C5613 + C5614;
    const double C46581 = C44800 + C44801;
    const double C7053 = C7047 - C7048;
    const double C40307 = C40303 - C40304;
    const double C6555 = C6554 * C2311;
    const double C39701 = C6554 * C50656;
    const double C45698 = C6554 * C50912;
    const double C39974 = C39973 * C50656;
    const double C40584 = C40583 * C50656;
    const double C349 = C50800 * C322;
    const double C2355 = C2310 * C322;
    const double C8677 = C50852 * C322;
    const double C17834 = C50852 * C322;
    const double C24711 = C24666 * C322;
    const double C661 = C50800 * C323;
    const double C8092 = C50852 * C323;
    const double C17249 = C50852 * C323;
    const double C532 = C50800 * C505;
    const double C772 = C50800 * C506;
    const double C937 = C50800 * C923;
    const double C8838 = C50852 * C923;
    const double C17995 = C50852 * C923;
    const double C5616 = C5610 * C50661;
    const double C12999 = C5610 * C8055;
    const double C35855 = C5610 * C17212;
    const double C39568 = C5610 * C50656;
    const double C44807 = C5610 * C50661;
    const double C6145 = C6142 + C6132;
    const double C5609 = C5603 + C5583;
    const double C2536 =
        (3 * (C49942 + C49863 * C50032 + C50028 * ae) +
         C49863 * (2 * C50032 + C49863 * C50131 + C50122 * ae) +
         (2 * C50028 + C49863 * C50122) * ae) /
        C49753;
    const double C2736 =
        (C49942 + C49863 * C50032 + C50028 * ae + C50131 * C50051) / C49753;
    const double C3318 =
        (C50012 * (2 * C50032 + C49863 * C50131 + C50122 * ae)) / C49753;
    const double C50184 = C50151 + C50182;
    const double C50320 = C50318 + C50301;
    const double C2539 =
        (3 * (C49895 + ae * C50031 + be * C50032 + C49863 * C50125) +
         ae * (2 * C50031 + C49863 * C50130 + C50122 * be) +
         be * (2 * C50032 + C49863 * C50131 + C50122 * ae) +
         C49863 *
             (2 * C50125 + ae * C50130 + be * C50131 +
              C49863 * (C49907 + ae * C50120 + be * C50123 +
                        C49863 * (ae * C49986 + be * C49988 +
                                  C49863 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C49881))))) /
        C49761;
    const double C3321 =
        (2 * (ae * C50012 * C49959 + be * C50012 * C49961 + C49863 * C50140) +
         ae * C50012 * C50130 + be * C50012 * C50131 +
         C49863 *
             (C50140 + ae * C50012 * C50120 + be * C50012 * C50123 +
              C49863 * (ae * C50012 * C49986 + be * C50012 * C49988 +
                        C49863 * C50012 *
                            (C49905 + (C49899 * C49900 +
                                       C49866 * bs[8] * std::pow(C49861, 8)) *
                                          C49752 * C49881)))) /
        C49761;
    const double C2535 =
        (3 * (C49941 + C49863 * C50031 + C50028 * be) +
         C49863 * (2 * C50031 + C49863 * C50130 + C50122 * be) +
         (2 * C50028 + C49863 * C50122) * be) /
        C49753;
    const double C2735 =
        (C49941 + C49863 * C50031 + C50028 * be + C50130 * C50051) / C49753;
    const double C3317 =
        (C50012 * (2 * C50031 + C49863 * C50130 + C50122 * be)) / C49753;
    const double C50183 = C50147 + C50181;
    const double C50319 = C50317 + C50298;
    const double C49829 = C49828 - C49826;
    const double C2349 = C2316 * C285;
    const double C2337 = C2316 * C286;
    const double C2325 = C2316 * C287;
    const double C2558 = C2316 * C1122;
    const double C2546 = C2316 * C290;
    const double C2758 = C2316 * C1236;
    const double C2746 = C2316 * C906;
    const double C2934 = C2316 * C291;
    const double C3101 = C2316 * C907;
    const double C3328 = C2316 * C1583;
    const double C36749 = C2316 * C1237;
    const double C36737 = C2316 * C905;
    const double C37265 = C2316 * C1584;
    const double C37676 = C2316 * C2728;
    const double C38183 = C2316 * C3310;
    const double C38594 = C2316 * C4636;
    const double C8086 = C8057 * C123;
    const double C8082 = C8057 * C122;
    const double C8070 = C8057 * C121;
    const double C8062 = C8057 * C120;
    const double C8290 = C8057 * C291;
    const double C8282 = C8057 * C290;
    const double C8278 = C8057 * C287;
    const double C8270 = C8057 * C286;
    const double C8492 = C8057 * C474;
    const double C8484 = C8057 * C473;
    const double C8480 = C8057 * C470;
    const double C8472 = C8057 * C469;
    const double C8671 = C8057 * C285;
    const double C8832 = C8057 * C468;
    const double C9048 = C8057 * C907;
    const double C9040 = C8057 * C906;
    const double C13811 = C8057 * C1583;
    const double C14039 = C8057 * C1867;
    const double C14033 = C8057 * C472;
    const double C14019 = C8057 * C471;
    const double C14721 = C8057 * C1236;
    const double C14712 = C8057 * C905;
    const double C15260 = C8057 * C1237;
    const double C15920 = C8057 * C1584;
    const double C16452 = C8057 * C1868;
    const double C48340 = C8057 * C4636;
    const double C48842 = C8057 * C2728;
    const double C49247 = C8057 * C5549;
    const double C17243 = C17214 * C123;
    const double C17239 = C17214 * C122;
    const double C17227 = C17214 * C121;
    const double C17219 = C17214 * C120;
    const double C17447 = C17214 * C291;
    const double C17439 = C17214 * C290;
    const double C17435 = C17214 * C287;
    const double C17427 = C17214 * C286;
    const double C17649 = C17214 * C474;
    const double C17641 = C17214 * C473;
    const double C17637 = C17214 * C470;
    const double C17629 = C17214 * C469;
    const double C17828 = C17214 * C285;
    const double C17989 = C17214 * C468;
    const double C18205 = C17214 * C907;
    const double C18197 = C17214 * C906;
    const double C22184 = C17214 * C1867;
    const double C22180 = C17214 * C1868;
    const double C22168 = C17214 * C472;
    const double C22160 = C17214 * C471;
    const double C22722 = C17214 * C1236;
    const double C22714 = C17214 * C1237;
    const double C22706 = C17214 * C905;
    const double C23142 = C17214 * C4636;
    const double C23652 = C17214 * C2728;
    const double C23644 = C17214 * C1584;
    const double C24067 = C17214 * C5549;
    const double C27741 = C17214 * C1583;
    const double C2362 = C2344 - C2345;
    const double C2361 = C2340 - C2341;
    const double C2356 = C2320 - C2321;
    const double C2568 = C2553 - C2554;
    const double C2567 = C2549 - C2550;
    const double C2768 = C2753 - C2754;
    const double C2767 = C2749 - C2750;
    const double C2941 = C2929 - C2930;
    const double C3108 = C3096 - C3097;
    const double C3335 = C3323 - C3324;
    const double C36761 = C36752 - C36753;
    const double C36756 = C36732 - C36733;
    const double C37272 = C37260 - C37261;
    const double C37683 = C37671 - C37672;
    const double C38190 = C38178 - C38179;
    const double C38601 = C38589 - C38590;
    const double C2364 = C2352 - C2353;
    const double C2359 = C2332 - C2333;
    const double C2358 = C2328 - C2329;
    const double C2565 = C2541 - C2542;
    const double C2765 = C2741 - C2742;
    const double C2943 = C2937 - C2938;
    const double C3110 = C3104 - C3105;
    const double C36759 = C36744 - C36745;
    const double C36758 = C36740 - C36741;
    const double C37274 = C37268 - C37269;
    const double C38603 = C38597 - C38598;
    const double C8100 = C8089 - C8090;
    const double C8097 = C8077 - C8078;
    const double C8096 = C8073 - C8074;
    const double C8094 = C8065 - C8066;
    const double C8304 = C8293 - C8294;
    const double C8302 = C8285 - C8286;
    const double C8299 = C8273 - C8274;
    const double C8297 = C8265 - C8266;
    const double C8506 = C8495 - C8496;
    const double C8504 = C8487 - C8488;
    const double C8501 = C8475 - C8476;
    const double C8499 = C8467 - C8468;
    const double C8679 = C8674 - C8675;
    const double C8840 = C8835 - C8836;
    const double C9058 = C9051 - C9052;
    const double C9056 = C9043 - C9044;
    const double C14051 = C14042 - C14043;
    const double C14048 = C14028 - C14029;
    const double C14047 = C14022 - C14023;
    const double C14730 = C14715 - C14716;
    const double C15268 = C15263 - C15264;
    const double C15928 = C15923 - C15924;
    const double C16460 = C16455 - C16456;
    const double C48349 = C48343 - C48344;
    const double C49256 = C49250 - C49251;
    const double C17257 = C17246 - C17247;
    const double C17254 = C17234 - C17235;
    const double C17253 = C17230 - C17231;
    const double C17251 = C17222 - C17223;
    const double C17461 = C17450 - C17451;
    const double C17459 = C17442 - C17443;
    const double C17456 = C17430 - C17431;
    const double C17454 = C17422 - C17423;
    const double C17663 = C17652 - C17653;
    const double C17661 = C17644 - C17645;
    const double C17658 = C17632 - C17633;
    const double C17656 = C17624 - C17625;
    const double C17836 = C17831 - C17832;
    const double C17997 = C17992 - C17993;
    const double C18215 = C18208 - C18209;
    const double C18213 = C18200 - C18201;
    const double C22199 = C22187 - C22188;
    const double C22196 = C22175 - C22176;
    const double C22195 = C22171 - C22172;
    const double C22193 = C22163 - C22164;
    const double C22732 = C22717 - C22718;
    const double C22730 = C22709 - C22710;
    const double C23151 = C23145 - C23146;
    const double C23660 = C23647 - C23648;
    const double C24076 = C24070 - C24071;
    const double C24720 = C24708 - C24709;
    const double C24715 = C24688 - C24689;
    const double C24714 = C24684 - C24685;
    const double C24909 = C24885 - C24886;
    const double C25097 = C25073 - C25074;
    const double C25275 = C25269 - C25270;
    const double C25442 = C25436 - C25437;
    const double C31345 = C31330 - C31331;
    const double C31344 = C31326 - C31327;
    const double C31860 = C31854 - C31855;
    const double C33189 = C33183 - C33184;
    const double C20046 =
        ((((0 - (C49751 * C49804) / C49753) * ae) / C49753 - (0 * be) / C49763 +
          C49760 / C49753) /
             C49805 -
         ((C49751 * C49820 + 0) * be) / C49753) /
            C49805 +
        ((C49751 * (C49820 / C49805 -
                    ((C49751 * C49816 + C50940) * be) / C49753 + C49817) +
          C50976) *
         ae) /
            C49753 +
        C49816 / C49805 - ((C49751 * C49817 + C50852) * be) / C49753;
    const double C20048 =
        (C49820 / C49805 - ((C49751 * C49816 + C50940) * be) / C49753 +
         C49817) /
            C49805 +
        ((C49751 *
              (C49816 / C49805 - ((C49751 * C49817 + C50852) * be) / C49753) +
          C50977) *
         ae) /
            C49753 +
        2 * (C49817 / C49805 - (0 * be) / C49753);
    const double C20050 =
        (C49816 / C49805 - ((C49751 * C49817 + C50852) * be) / C49753) /
            C49805 +
        ((C49751 * (C49817 / C49805 - (0 * be) / C49753) + C24666) * ae) /
            C49753;
    const double C24669 =
        C49820 / C49805 - ((C49751 * C49816 + C50940) * be) / C49753 + C49817;
    const double C24671 =
        C49816 / C49805 - ((C49751 * C49817 + C50852) * be) / C49753;
    const double C182 = C177 + C167;
    const double C5770 = C5769 + C5767;
    const double C11071 = C11070 + C11068;
    const double C2570 = C2561 - C2562;
    const double C24914 = C24905 - C24906;
    const double C2770 = C2761 - C2762;
    const double C5397 = C5391 - C5392;
    const double C14732 = C14724 - C14725;
    const double C22734 = C22725 - C22726;
    const double C25102 = C25093 - C25094;
    const double C3337 = C3331 - C3332;
    const double C13819 = C13814 - C13815;
    const double C25657 = C25651 - C25652;
    const double C27749 = C27744 - C27745;
    const double C3592 =
        (4 * (2 * C50049 + C49863 * C50085 + C50076 * ae) +
         C49863 * (3 * C50085 + C49863 * C50228 + C50218 * ae) +
         (3 * C50076 + C49863 * C50218) * ae) /
        C49753;
    const double C3746 =
        (2 * C50049 + C49863 * C50085 + C50076 * ae + C50228 * C50051) / C49753;
    const double C4240 =
        (C50012 * (3 * C50085 + C49863 * C50228 + C50218 * ae)) / C49753;
    const double C3594 =
        (4 * (2 * C50079 + ae * C50084 + be * C50085 + C49863 * C50220) +
         ae * (3 * C50084 + C49863 * C50227 + C50218 * be) +
         be * (3 * C50085 + C49863 * C50228 + C50218 * ae) +
         C49863 * (3 * C50220 + ae * C50227 + be * C50228 +
                   C49863 * (2 * C50210 + ae * C50221 + be * C50222 +
                             C49863 * (C49893 + ae * C50204 + be * C50207 +
                                       C49863 * (ae * C49951 + be * C49955 +
                                                 C49863 * C49905))))) /
        C49761;
    const double C4242 =
        (3 * (C50136 + ae * C50012 * C50074 + be * C50012 * C50077 +
              C49863 * C50252) +
         ae * C50012 * C50227 + be * C50012 * C50228 +
         C49863 *
             (2 * C50252 + ae * C50012 * C50221 + be * C50012 * C50222 +
              C49863 * (C50247 + ae * C50012 * C50204 + be * C50012 * C50207 +
                        C49863 * (ae * C50012 * C49951 + be * C50012 * C49955 +
                                  C49863 * C50012 * C49905)))) /
        C49761;
    const double C3591 =
        (4 * (2 * C50048 + C49863 * C50084 + C50076 * be) +
         C49863 * (3 * C50084 + C49863 * C50227 + C50218 * be) +
         (3 * C50076 + C49863 * C50218) * be) /
        C49753;
    const double C3745 =
        (2 * C50048 + C49863 * C50084 + C50076 * be + C50227 * C50051) / C49753;
    const double C4239 =
        (C50012 * (3 * C50084 + C49863 * C50227 + C50218 * be)) / C49753;
    const double C50316 = C50294 + C50312;
    const double C5598 = C5587 + C5586;
    const double C44809 = C44805 + C44804;
    const double C6135 = C5401 * C2311;
    const double C6128 = C5401 * C50661;
    const double C12116 = C5401 * C50969;
    const double C34972 = C5401 * C17211;
    const double C39703 = C5401 * C50656;
    const double C45306 = C5401 * C50912;
    const double C45303 = C5401 * C50661;
    const double C7046 = C5402 * C50661;
    const double C12605 = C5402 * C50969;
    const double C35461 = C5402 * C17211;
    const double C46188 = C5402 * C50661;
    const double C7055 = C7053 - C7049;
    const double C40308 = C40307 - C40305;
    const double C367 = C361 + C349;
    const double C664 = C663 + C661;
    const double C550 = C544 + C532;
    const double C775 = C774 + C772;
    const double C946 = C943 + C937;
    const double C6550 = C6145 * C50661;
    const double C39704 = C6145 * C50656;
    const double C45699 = C6145 * C50661;
    const double C7463 = C5609 * C50661;
    const double C39369 = C5609 * C50656;
    const double C46583 = C5609 * C50661;
    const double C50186 = C50184 + C50174;
    const double C50322 = C49863 * C50320;
    const double C21440 =
        (2 * C50012 * C50228 + C50012 * (C50228 + C50320 * C50051)) / C49753;
    const double C50185 = C50183 + C50171;
    const double C50321 = C49863 * C50319;
    const double C20845 =
        (3 * (C50234 + ae * (C50074 + C50204 * C50051) +
              be * (C50077 + C50207 * C50051) + C49863 * C50338) +
         ae * (C50227 + C50319 * C50051) + be * (C50228 + C50320 * C50051) +
         C49863 *
             (2 * C50338 + ae * (C50221 + C50307 * C50051) +
              be * (C50222 + C50310 * C50051) +
              C49863 * (C50333 + ae * (C50204 + C50289 * C50051) +
                        be * (C50207 + C50292 * C50051) +
                        C49863 * (ae * (C49951 + C49978 * C50051) +
                                  be * (C49955 + C49982 * C50051) +
                                  C49863 * (C49905 + (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                         C49752 * C50051))))) /
        C49761;
    const double C21439 =
        (2 * C50012 * C50227 + C50012 * (C50227 + C50319 * C50051)) / C49753;
    const double C49830 = C49829 * ae;
    const double C2363 = C2348 - C2349;
    const double C2360 = C2336 - C2337;
    const double C2357 = C2324 - C2325;
    const double C2569 = C2557 - C2558;
    const double C2566 = C2545 - C2546;
    const double C2769 = C2757 - C2758;
    const double C2766 = C2745 - C2746;
    const double C2942 = C2933 - C2934;
    const double C3109 = C3100 - C3101;
    const double C3336 = C3327 - C3328;
    const double C36760 = C36748 - C36749;
    const double C36757 = C36736 - C36737;
    const double C37273 = C37264 - C37265;
    const double C37684 = C37675 - C37676;
    const double C38191 = C38182 - C38183;
    const double C38602 = C38593 - C38594;
    const double C8099 = C8085 - C8086;
    const double C8098 = C8081 - C8082;
    const double C8095 = C8069 - C8070;
    const double C8093 = C8061 - C8062;
    const double C8303 = C8289 - C8290;
    const double C8301 = C8281 - C8282;
    const double C8300 = C8277 - C8278;
    const double C8298 = C8269 - C8270;
    const double C8505 = C8491 - C8492;
    const double C8503 = C8483 - C8484;
    const double C8502 = C8479 - C8480;
    const double C8500 = C8471 - C8472;
    const double C8678 = C8670 - C8671;
    const double C8839 = C8831 - C8832;
    const double C9057 = C9047 - C9048;
    const double C9055 = C9039 - C9040;
    const double C13818 = C13810 - C13811;
    const double C14050 = C14038 - C14039;
    const double C14049 = C14032 - C14033;
    const double C14046 = C14018 - C14019;
    const double C14731 = C14720 - C14721;
    const double C14729 = C14711 - C14712;
    const double C15267 = C15259 - C15260;
    const double C15927 = C15919 - C15920;
    const double C16459 = C16451 - C16452;
    const double C48348 = C48339 - C48340;
    const double C48849 = C48841 - C48842;
    const double C49255 = C49246 - C49247;
    const double C17256 = C17242 - C17243;
    const double C17255 = C17238 - C17239;
    const double C17252 = C17226 - C17227;
    const double C17250 = C17218 - C17219;
    const double C17460 = C17446 - C17447;
    const double C17458 = C17438 - C17439;
    const double C17457 = C17434 - C17435;
    const double C17455 = C17426 - C17427;
    const double C17662 = C17648 - C17649;
    const double C17660 = C17640 - C17641;
    const double C17659 = C17636 - C17637;
    const double C17657 = C17628 - C17629;
    const double C17835 = C17827 - C17828;
    const double C17996 = C17988 - C17989;
    const double C18214 = C18204 - C18205;
    const double C18212 = C18196 - C18197;
    const double C22198 = C22183 - C22184;
    const double C22197 = C22179 - C22180;
    const double C22194 = C22167 - C22168;
    const double C22192 = C22159 - C22160;
    const double C22733 = C22721 - C22722;
    const double C22731 = C22713 - C22714;
    const double C22729 = C22705 - C22706;
    const double C23150 = C23141 - C23142;
    const double C23661 = C23651 - C23652;
    const double C23659 = C23643 - C23644;
    const double C24075 = C24066 - C24067;
    const double C27748 = C27740 - C27741;
    const double C2371 = C2362 - C2346;
    const double C2370 = C2361 - C2342;
    const double C2365 = C2356 - C2322;
    const double C2574 = C2568 - C2555;
    const double C2573 = C2567 - C2551;
    const double C2774 = C2768 - C2755;
    const double C2773 = C2767 - C2751;
    const double C2944 = C2941 - C2931;
    const double C3111 = C3108 - C3098;
    const double C3338 = C3335 - C3325;
    const double C36767 = C36761 - C36754;
    const double C36762 = C36756 - C36734;
    const double C37275 = C37272 - C37262;
    const double C37686 = C37683 - C37673;
    const double C38193 = C38190 - C38180;
    const double C38604 = C38601 - C38591;
    const double C2373 = C2364 - C2354;
    const double C2368 = C2359 - C2334;
    const double C2367 = C2358 - C2330;
    const double C2571 = C2565 - C2543;
    const double C2771 = C2765 - C2743;
    const double C2946 = C2943 - C2939;
    const double C3113 = C3110 - C3106;
    const double C36765 = C36759 - C36746;
    const double C36764 = C36758 - C36742;
    const double C37277 = C37274 - C37270;
    const double C38606 = C38603 - C38599;
    const double C8108 = C8100 - C8091;
    const double C8105 = C8097 - C8079;
    const double C8104 = C8096 - C8075;
    const double C8102 = C8094 - C8067;
    const double C8312 = C8304 - C8295;
    const double C8310 = C8302 - C8287;
    const double C8307 = C8299 - C8275;
    const double C8305 = C8297 - C8267;
    const double C8514 = C8506 - C8497;
    const double C8512 = C8504 - C8489;
    const double C8509 = C8501 - C8477;
    const double C8507 = C8499 - C8469;
    const double C8681 = C8679 - C8676;
    const double C8842 = C8840 - C8837;
    const double C9062 = C9058 - C9053;
    const double C9060 = C9056 - C9045;
    const double C14057 = C14051 - C14044;
    const double C14054 = C14048 - C14030;
    const double C14053 = C14047 - C14024;
    const double C14734 = C14730 - C14717;
    const double C15270 = C15268 - C15265;
    const double C15930 = C15928 - C15925;
    const double C16462 = C16460 - C16457;
    const double C48352 = C48349 - C48345;
    const double C49258 = C49256 - C49252;
    const double C17265 = C17257 - C17248;
    const double C17262 = C17254 - C17236;
    const double C17261 = C17253 - C17232;
    const double C17259 = C17251 - C17224;
    const double C17469 = C17461 - C17452;
    const double C17467 = C17459 - C17444;
    const double C17464 = C17456 - C17432;
    const double C17462 = C17454 - C17424;
    const double C17671 = C17663 - C17654;
    const double C17669 = C17661 - C17646;
    const double C17666 = C17658 - C17634;
    const double C17664 = C17656 - C17626;
    const double C17838 = C17836 - C17833;
    const double C17999 = C17997 - C17994;
    const double C18219 = C18215 - C18210;
    const double C18217 = C18213 - C18202;
    const double C22208 = C22199 - C22189;
    const double C22205 = C22196 - C22177;
    const double C22204 = C22195 - C22173;
    const double C22202 = C22193 - C22165;
    const double C22738 = C22732 - C22719;
    const double C22736 = C22730 - C22711;
    const double C23154 = C23151 - C23147;
    const double C23664 = C23660 - C23649;
    const double C24078 = C24076 - C24072;
    const double C24729 = C24720 - C24710;
    const double C24724 = C24715 - C24690;
    const double C24723 = C24714 - C24686;
    const double C24915 = C24909 - C24887;
    const double C25103 = C25097 - C25075;
    const double C25278 = C25275 - C25271;
    const double C25445 = C25442 - C25438;
    const double C31351 = C31345 - C31332;
    const double C31350 = C31344 - C31328;
    const double C31863 = C31860 - C31856;
    const double C33192 = C33189 - C33185;
    const double C24702 = C24669 * C133;
    const double C24700 = C24669 * C132;
    const double C24698 = C24669 * C131;
    const double C24696 = C24669 * C130;
    const double C24678 = C24669 * C129;
    const double C24676 = C24669 * C128;
    const double C24899 = C24669 * C306;
    const double C24897 = C24669 * C305;
    const double C24895 = C24669 * C300;
    const double C24893 = C24669 * C299;
    const double C25087 = C24669 * C489;
    const double C25085 = C24669 * C488;
    const double C25083 = C24669 * C483;
    const double C25081 = C24669 * C482;
    const double C25263 = C24669 * C298;
    const double C25261 = C24669 * C297;
    const double C25430 = C24669 * C481;
    const double C25428 = C24669 * C480;
    const double C25645 = C24669 * C913;
    const double C25643 = C24669 * C912;
    const double C31340 = C24669 * C487;
    const double C31338 = C24669 * C486;
    const double C31320 = C24669 * C485;
    const double C31318 = C24669 * C484;
    const double C31848 = C24669 * C911;
    const double C31846 = C24669 * C910;
    const double C32259 = C24669 * C1245;
    const double C32257 = C24669 * C1244;
    const double C32766 = C24669 * C1592;
    const double C32764 = C24669 * C1591;
    const double C33177 = C24669 * C1876;
    const double C33175 = C24669 * C1875;
    const double C24706 = C24671 * C296;
    const double C24704 = C24671 * C295;
    const double C24694 = C24671 * C298;
    const double C24692 = C24671 * C297;
    const double C24682 = C24671 * C300;
    const double C24680 = C24671 * C299;
    const double C24903 = C24671 * C1129;
    const double C24901 = C24671 * C1128;
    const double C24891 = C24671 * C306;
    const double C24889 = C24671 * C305;
    const double C25091 = C24671 * C1243;
    const double C25089 = C24671 * C1242;
    const double C25079 = C24671 * C913;
    const double C25077 = C24671 * C912;
    const double C25267 = C24671 * C308;
    const double C25265 = C24671 * C307;
    const double C25434 = C24671 * C915;
    const double C25432 = C24671 * C914;
    const double C25649 = C24671 * C1590;
    const double C25647 = C24671 * C1589;
    const double C31336 = C24671 * C1245;
    const double C31334 = C24671 * C1244;
    const double C31324 = C24671 * C911;
    const double C31322 = C24671 * C910;
    const double C31852 = C24671 * C1592;
    const double C31850 = C24671 * C1591;
    const double C32263 = C24671 * C2732;
    const double C32261 = C24671 * C2731;
    const double C32770 = C24671 * C3314;
    const double C32768 = C24671 * C3313;
    const double C33181 = C24671 * C4644;
    const double C33179 = C24671 * C4643;
    const double C6136 = C5770 * C50661;
    const double C12117 = C5770 * C8055;
    const double C34973 = C5770 * C17212;
    const double C45307 = C5770 * C50661;
    const double C12606 = C11071 * C8055;
    const double C35462 = C11071 * C17212;
    const double C2576 = C2570 - C2563;
    const double C24920 = C24914 - C24907;
    const double C2776 = C2770 - C2763;
    const double C5400 = C5397 - C5393;
    const double C14736 = C14732 - C14726;
    const double C22740 = C22734 - C22727;
    const double C25108 = C25102 - C25095;
    const double C3340 = C3337 - C3333;
    const double C13821 = C13819 - C13816;
    const double C25660 = C25657 - C25653;
    const double C27751 = C27749 - C27746;
    const double C23657 = C17215 * C3746;
    const double C32267 = C24673 * C3746;
    const double C37681 = C2317 * C3746;
    const double C48847 = C8058 * C3746;
    const double C32774 = C24673 * C4240;
    const double C38188 = C2317 * C4240;
    const double C32775 = C24666 * C4242;
    const double C38189 = C2310 * C4242;
    const double C23655 = C17215 * C3745;
    const double C32265 = C24673 * C3745;
    const double C37679 = C2317 * C3745;
    const double C48845 = C8058 * C3745;
    const double C32772 = C24673 * C4239;
    const double C38186 = C2317 * C4239;
    const double C6551 = C6128 + C6147;
    const double C45700 = C45303 + C45302;
    const double C7057 = C7055 + C7050;
    const double C40309 = C40308 + C40306;
    const double C5920 = C550 * C50661;
    const double C11229 = C550 * C8055;
    const double C34085 = C550 * C17212;
    const double C45105 = C550 * C50661;
    const double C11524 = C775 * C8055;
    const double C34380 = C775 * C17212;
    const double C11724 = C946 * C8055;
    const double C34580 = C946 * C17212;
    const double C3590 =
        (4 * (2 * C50041 + C49863 * C50108 + C50099 * ae) +
         C49863 * (3 * C50108 + C49863 * C50186 + C50177 * ae) +
         (3 * C50099 + C49863 * C50177) * ae) /
        C49753;
    const double C3744 =
        (2 * C50041 + C49863 * C50108 + C50099 * ae + C50186 * C50051) / C49753;
    const double C4238 =
        (C50012 * (3 * C50108 + C49863 * C50186 + C50177 * ae)) / C49753;
    const double C50324 = C50282 + C50322;
    const double C3593 =
        (4 * (2 * C50102 + ae * C50107 + be * C50108 + C49863 * C50175) +
         ae * (3 * C50107 + C49863 * C50185 + C50177 * be) +
         be * (3 * C50108 + C49863 * C50186 + C50177 * ae) +
         C49863 * (3 * C50175 + ae * C50185 + be * C50186 +
                   C49863 * (2 * C50163 + ae * C50179 + be * C50180 +
                             C49863 * (C50146 + ae * C50164 + be * C50167 +
                                       C49863 * (ae * C50148 + be * C50152 +
                                                 C49863 * C49869 *
                                                     (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                     C49752))))) /
        C49761;
    const double C4241 =
        (3 * (C50138 + ae * C50012 * C50097 + be * C50012 * C50100 +
              C49863 * C50243) +
         ae * C50012 * C50185 + be * C50012 * C50186 +
         C49863 *
             (2 * C50243 + ae * C50012 * C50179 + be * C50012 * C50180 +
              C49863 * (C50238 + ae * C50012 * C50164 + be * C50012 * C50167 +
                        C49863 * (ae * C50012 * C50148 + be * C50012 * C50152 +
                                  C49863 * C50012 * C49869 *
                                      (C49899 * C49900 +
                                       C49866 * bs[8] * std::pow(C49861, 8)) *
                                      C49752)))) /
        C49761;
    const double C3589 =
        (4 * (2 * C50040 + C49863 * C50107 + C50099 * be) +
         C49863 * (3 * C50107 + C49863 * C50185 + C50177 * be) +
         (3 * C50099 + C49863 * C50177) * be) /
        C49753;
    const double C3743 =
        (2 * C50040 + C49863 * C50107 + C50099 * be + C50185 * C50051) / C49753;
    const double C4237 =
        (C50012 * (3 * C50107 + C49863 * C50185 + C50177 * be)) / C49753;
    const double C50323 = C50274 + C50321;
    const double C20047 =
        ((ae * -2 * C49804) / C49823 -
         (((C49751 * C49827) / C49761 + 2 * C49820) * be) / C49753) /
            C49805 +
        ((C49751 * (C49827 / C49823 -
                    (((C49751 * C49830) / C49753 + 2 * C49816) * be) / C49753 -
                    C49772 / C49763) +
          2 * (C49820 / C49805 - ((C49751 * C49816 + C50940) * be) / C49753 +
               C49817)) *
         ae) /
            C49753 +
        C49830 / C49763 - ((2 * C49817 - C49777 / C49763) * be) / C49753;
    const double C20049 =
        (C49827 / C49823 -
         (((C49751 * C49830) / C49753 + 2 * C49816) * be) / C49753 -
         C49772 / C49763) /
            C49805 +
        ((C49751 * (C49830 / C49763 -
                    ((2 * C49817 - C49777 / C49763) * be) / C49753) +
          2 * (C49816 / C49805 - ((C49751 * C49817 + C50852) * be) / C49753)) *
         ae) /
            C49753 +
        (-2 * C49772) / (C49753 * 4 * C49761);
    const double C20051 =
        (C49830 / C49763 - ((2 * C49817 - C49777 / C49763) * be) / C49753) /
            C49805 +
        ((2 * (C49817 / C49805 - (0 * be) / C49753) -
          C49777 / (C49753 * 4 * C49761)) *
         ae) /
            C49753;
    const double C24670 =
        C49827 / C49823 -
        (((C49751 * C49830) / C49753 + 2 * C49816) * be) / C49753 -
        C49772 / C49763;
    const double C24672 =
        C49830 / C49763 - ((2 * C49817 - C49777 / C49763) * be) / C49753;
    const double C2372 = C2363 - C2350;
    const double C2369 = C2360 - C2338;
    const double C2366 = C2357 - C2326;
    const double C2575 = C2569 - C2559;
    const double C2572 = C2566 - C2547;
    const double C2775 = C2769 - C2759;
    const double C2772 = C2766 - C2747;
    const double C2945 = C2942 - C2935;
    const double C3112 = C3109 - C3102;
    const double C3339 = C3336 - C3329;
    const double C36766 = C36760 - C36750;
    const double C36763 = C36757 - C36738;
    const double C37276 = C37273 - C37266;
    const double C37687 = C37684 - C37677;
    const double C38194 = C38191 - C38184;
    const double C38605 = C38602 - C38595;
    const double C8107 = C8099 - C8087;
    const double C8106 = C8098 - C8083;
    const double C8103 = C8095 - C8071;
    const double C8101 = C8093 - C8063;
    const double C8311 = C8303 - C8291;
    const double C8309 = C8301 - C8283;
    const double C8308 = C8300 - C8279;
    const double C8306 = C8298 - C8271;
    const double C8513 = C8505 - C8493;
    const double C8511 = C8503 - C8485;
    const double C8510 = C8502 - C8481;
    const double C8508 = C8500 - C8473;
    const double C8680 = C8678 - C8672;
    const double C8841 = C8839 - C8833;
    const double C9061 = C9057 - C9049;
    const double C9059 = C9055 - C9041;
    const double C13820 = C13818 - C13812;
    const double C14056 = C14050 - C14040;
    const double C14055 = C14049 - C14034;
    const double C14052 = C14046 - C14020;
    const double C14735 = C14731 - C14722;
    const double C14733 = C14729 - C14713;
    const double C15269 = C15267 - C15261;
    const double C15929 = C15927 - C15921;
    const double C16461 = C16459 - C16453;
    const double C48351 = C48348 - C48341;
    const double C48851 = C48849 - C48843;
    const double C49257 = C49255 - C49248;
    const double C17264 = C17256 - C17244;
    const double C17263 = C17255 - C17240;
    const double C17260 = C17252 - C17228;
    const double C17258 = C17250 - C17220;
    const double C17468 = C17460 - C17448;
    const double C17466 = C17458 - C17440;
    const double C17465 = C17457 - C17436;
    const double C17463 = C17455 - C17428;
    const double C17670 = C17662 - C17650;
    const double C17668 = C17660 - C17642;
    const double C17667 = C17659 - C17638;
    const double C17665 = C17657 - C17630;
    const double C17837 = C17835 - C17829;
    const double C17998 = C17996 - C17990;
    const double C18218 = C18214 - C18206;
    const double C18216 = C18212 - C18198;
    const double C22207 = C22198 - C22185;
    const double C22206 = C22197 - C22181;
    const double C22203 = C22194 - C22169;
    const double C22201 = C22192 - C22161;
    const double C22739 = C22733 - C22723;
    const double C22737 = C22731 - C22715;
    const double C22735 = C22729 - C22707;
    const double C23153 = C23150 - C23143;
    const double C23665 = C23661 - C23653;
    const double C23663 = C23659 - C23645;
    const double C24077 = C24075 - C24068;
    const double C27750 = C27748 - C27742;
    const double C2380 = C2371 + C2347;
    const double C2379 = C2370 + C2343;
    const double C2374 = C2365 + C2323;
    const double C2580 = C2574 + C2556;
    const double C2579 = C2573 + C2552;
    const double C2780 = C2774 + C2756;
    const double C2779 = C2773 + C2752;
    const double C2947 = C2944 + C2932;
    const double C3114 = C3111 + C3099;
    const double C3341 = C3338 + C3326;
    const double C36773 = C36767 + C36755;
    const double C36768 = C36762 + C36735;
    const double C37278 = C37275 + C37263;
    const double C37689 = C37686 + C37674;
    const double C38196 = C38193 + C38181;
    const double C38607 = C38604 + C38592;
    const double C2382 = C2373 + C2355;
    const double C2377 = C2368 + C2335;
    const double C2376 = C2367 + C2331;
    const double C2577 = C2571 + C2544;
    const double C2777 = C2771 + C2744;
    const double C2949 = C2946 + C2940;
    const double C3116 = C3113 + C3107;
    const double C36771 = C36765 + C36747;
    const double C36770 = C36764 + C36743;
    const double C37280 = C37277 + C37271;
    const double C38609 = C38606 + C38600;
    const double C8116 = C8108 + C8092;
    const double C8113 = C8105 + C8080;
    const double C8112 = C8104 + C8076;
    const double C8110 = C8102 + C8068;
    const double C8320 = C8312 + C8296;
    const double C8318 = C8310 + C8288;
    const double C8315 = C8307 + C8276;
    const double C8313 = C8305 + C8268;
    const double C8522 = C8514 + C8498;
    const double C8520 = C8512 + C8490;
    const double C8517 = C8509 + C8478;
    const double C8515 = C8507 + C8470;
    const double C8683 = C8681 + C8677;
    const double C8844 = C8842 + C8838;
    const double C9066 = C9062 + C9054;
    const double C9064 = C9060 + C9046;
    const double C14063 = C14057 + C14045;
    const double C14060 = C14054 + C14031;
    const double C14059 = C14053 + C14025;
    const double C14738 = C14734 + C14718;
    const double C15272 = C15270 + C15266;
    const double C15932 = C15930 + C15926;
    const double C16464 = C16462 + C16458;
    const double C48354 = C48352 + C48346;
    const double C49260 = C49258 + C49253;
    const double C17273 = C17265 + C17249;
    const double C17270 = C17262 + C17237;
    const double C17269 = C17261 + C17233;
    const double C17267 = C17259 + C17225;
    const double C17477 = C17469 + C17453;
    const double C17475 = C17467 + C17445;
    const double C17472 = C17464 + C17433;
    const double C17470 = C17462 + C17425;
    const double C17679 = C17671 + C17655;
    const double C17677 = C17669 + C17647;
    const double C17674 = C17666 + C17635;
    const double C17672 = C17664 + C17627;
    const double C17840 = C17838 + C17834;
    const double C18001 = C17999 + C17995;
    const double C18223 = C18219 + C18211;
    const double C18221 = C18217 + C18203;
    const double C22216 = C22208 + C22190;
    const double C22213 = C22205 + C22178;
    const double C22212 = C22204 + C22174;
    const double C22210 = C22202 + C22166;
    const double C22744 = C22738 + C22720;
    const double C22742 = C22736 + C22712;
    const double C23156 = C23154 + C23148;
    const double C23668 = C23664 + C23650;
    const double C24080 = C24078 + C24073;
    const double C24738 = C24729 + C24711;
    const double C24733 = C24724 + C24691;
    const double C24732 = C24723 + C24687;
    const double C24921 = C24915 + C24888;
    const double C25109 = C25103 + C25076;
    const double C25281 = C25278 + C25272;
    const double C25448 = C25445 + C25439;
    const double C31357 = C31351 + C31333;
    const double C31356 = C31350 + C31329;
    const double C31866 = C31863 + C31857;
    const double C33195 = C33192 + C33186;
    const double C2582 = C2576 + C2564;
    const double C24926 = C24920 + C24908;
    const double C2782 = C2776 + C2764;
    const double C5403 = C5400 + C5394;
    const double C14740 = C14736 + C14727;
    const double C22746 = C22740 + C22728;
    const double C25114 = C25108 + C25096;
    const double C3343 = C3340 + C3334;
    const double C13823 = C13821 + C13817;
    const double C25663 = C25660 + C25654;
    const double C27753 = C27751 + C27747;
    const double C23662 = C23655 - C23656;
    const double C32271 = C32265 - C32266;
    const double C37685 = C37679 - C37680;
    const double C48850 = C48845 - C48846;
    const double C32778 = C32772 - C32773;
    const double C38192 = C38186 - C38187;
    const double C7059 = C7057 * C2311;
    const double C40302 = C7057 * C50656;
    const double C46189 = C7057 * C50912;
    const double C40310 = C40309 * C50656;
    const double C50326 = C50324 + C50311;
    const double C50325 = C50323 + C50308;
    const double C24701 = C24670 * C122;
    const double C24697 = C24670 * C121;
    const double C24677 = C24670 * C120;
    const double C24898 = C24670 * C290;
    const double C24894 = C24670 * C287;
    const double C25086 = C24670 * C473;
    const double C25082 = C24670 * C470;
    const double C25262 = C24670 * C286;
    const double C25429 = C24670 * C469;
    const double C25644 = C24670 * C906;
    const double C31339 = C24670 * C472;
    const double C31319 = C24670 * C471;
    const double C31847 = C24670 * C905;
    const double C32258 = C24670 * C1237;
    const double C32765 = C24670 * C1584;
    const double C33176 = C24670 * C1868;
    const double C24705 = C24672 * C285;
    const double C24693 = C24672 * C286;
    const double C24681 = C24672 * C287;
    const double C24902 = C24672 * C1122;
    const double C24890 = C24672 * C290;
    const double C25090 = C24672 * C1236;
    const double C25078 = C24672 * C906;
    const double C25266 = C24672 * C291;
    const double C25433 = C24672 * C907;
    const double C25648 = C24672 * C1583;
    const double C31335 = C24672 * C1237;
    const double C31323 = C24672 * C905;
    const double C31851 = C24672 * C1584;
    const double C32262 = C24672 * C2728;
    const double C32769 = C24672 * C3310;
    const double C33180 = C24672 * C4636;
    const double C2381 = C2372 + C2351;
    const double C2378 = C2369 + C2339;
    const double C2375 = C2366 + C2327;
    const double C2581 = C2575 + C2560;
    const double C2578 = C2572 + C2548;
    const double C2781 = C2775 + C2760;
    const double C2778 = C2772 + C2748;
    const double C2948 = C2945 + C2936;
    const double C3115 = C3112 + C3103;
    const double C3342 = C3339 + C3330;
    const double C36772 = C36766 + C36751;
    const double C36769 = C36763 + C36739;
    const double C37279 = C37276 + C37267;
    const double C37690 = C37687 + C37678;
    const double C38197 = C38194 + C38185;
    const double C38608 = C38605 + C38596;
    const double C8115 = C8107 + C8088;
    const double C8114 = C8106 + C8084;
    const double C8111 = C8103 + C8072;
    const double C8109 = C8101 + C8064;
    const double C8319 = C8311 + C8292;
    const double C8317 = C8309 + C8284;
    const double C8316 = C8308 + C8280;
    const double C8314 = C8306 + C8272;
    const double C8521 = C8513 + C8494;
    const double C8519 = C8511 + C8486;
    const double C8518 = C8510 + C8482;
    const double C8516 = C8508 + C8474;
    const double C8682 = C8680 + C8673;
    const double C8843 = C8841 + C8834;
    const double C9065 = C9061 + C9050;
    const double C9063 = C9059 + C9042;
    const double C13822 = C13820 + C13813;
    const double C14062 = C14056 + C14041;
    const double C14061 = C14055 + C14035;
    const double C14058 = C14052 + C14021;
    const double C14739 = C14735 + C14723;
    const double C14737 = C14733 + C14714;
    const double C15271 = C15269 + C15262;
    const double C15931 = C15929 + C15922;
    const double C16463 = C16461 + C16454;
    const double C48353 = C48351 + C48342;
    const double C48853 = C48851 + C48844;
    const double C49259 = C49257 + C49249;
    const double C17272 = C17264 + C17245;
    const double C17271 = C17263 + C17241;
    const double C17268 = C17260 + C17229;
    const double C17266 = C17258 + C17221;
    const double C17476 = C17468 + C17449;
    const double C17474 = C17466 + C17441;
    const double C17473 = C17465 + C17437;
    const double C17471 = C17463 + C17429;
    const double C17678 = C17670 + C17651;
    const double C17676 = C17668 + C17643;
    const double C17675 = C17667 + C17639;
    const double C17673 = C17665 + C17631;
    const double C17839 = C17837 + C17830;
    const double C18000 = C17998 + C17991;
    const double C18222 = C18218 + C18207;
    const double C18220 = C18216 + C18199;
    const double C22215 = C22207 + C22186;
    const double C22214 = C22206 + C22182;
    const double C22211 = C22203 + C22170;
    const double C22209 = C22201 + C22162;
    const double C22745 = C22739 + C22724;
    const double C22743 = C22737 + C22716;
    const double C22741 = C22735 + C22708;
    const double C23155 = C23153 + C23144;
    const double C23669 = C23665 + C23654;
    const double C23667 = C23663 + C23646;
    const double C24079 = C24077 + C24069;
    const double C27752 = C27750 + C27743;
    const double C7051 = C5403 * C50661;
    const double C46190 = C5403 * C50661;
    const double C23666 = C23662 - C23657;
    const double C32274 = C32271 - C32267;
    const double C37688 = C37685 - C37681;
    const double C48852 = C48850 - C48847;
    const double C32781 = C32778 - C32774;
    const double C38195 = C38192 - C38188;
    const double C20742 =
        (5 * (3 * C50085 + C49863 * C50228 + C50218 * ae) +
         C49863 * (4 * C50228 + C49863 * C50326 + C50314 * ae) +
         (4 * C50218 + C49863 * C50314) * ae) /
        C49753;
    const double C20844 =
        (3 * C50085 + C49863 * C50228 + C50218 * ae + C50326 * C50051) / C49753;
    const double C21174 =
        (C50012 * (4 * C50228 + C49863 * C50326 + C50314 * ae)) / C49753;
    const double C20743 =
        (5 * (3 * C50220 + ae * C50227 + be * C50228 + C49863 * C50316) +
         ae * (4 * C50227 + C49863 * C50325 + C50314 * be) +
         be * (4 * C50228 + C49863 * C50326 + C50314 * ae) +
         C49863 *
             (4 * C50316 + ae * C50325 + be * C50326 +
              C49863 *
                  (3 * C50306 + ae * C50319 + be * C50320 +
                   C49863 * (2 * C50296 + ae * C50307 + be * C50310 +
                             C49863 * (C49905 + ae * C50289 + be * C50292 +
                                       C49863 * (ae * C49978 + be * C49982 +
                                                 C49863 *
                                                     (C49899 * C49900 +
                                                      C49866 * bs[8] *
                                                          std::pow(C49861, 8)) *
                                                     C49752)))))) /
        C49761;
    const double C21175 =
        (4 * (2 * C50252 + ae * C50012 * C50221 + be * C50012 * C50222 +
              C49863 * C50355) +
         ae * C50012 * C50325 + be * C50012 * C50326 +
         C49863 *
             (3 * C50355 + ae * C50012 * C50319 + be * C50012 * C50320 +
              C49863 *
                  (2 * C50353 + ae * C50012 * C50307 + be * C50012 * C50310 +
                   C49863 *
                       (C50344 + ae * C50012 * C50289 + be * C50012 * C50292 +
                        C49863 * (ae * C50012 * C49978 + be * C50012 * C49982 +
                                  C49863 * C50012 *
                                      (C49899 * C49900 +
                                       C49866 * bs[8] * std::pow(C49861, 8)) *
                                      C49752))))) /
        C49761;
    const double C20741 =
        (5 * (3 * C50084 + C49863 * C50227 + C50218 * be) +
         C49863 * (4 * C50227 + C49863 * C50325 + C50314 * be) +
         (4 * C50218 + C49863 * C50314) * be) /
        C49753;
    const double C20843 =
        (3 * C50084 + C49863 * C50227 + C50218 * be + C50325 * C50051) / C49753;
    const double C21173 =
        (C50012 * (4 * C50227 + C49863 * C50325 + C50314 * be)) / C49753;
    const double C24718 = C24700 - C24701;
    const double C24717 = C24696 - C24697;
    const double C24712 = C24676 - C24677;
    const double C24912 = C24897 - C24898;
    const double C24911 = C24893 - C24894;
    const double C25100 = C25085 - C25086;
    const double C25099 = C25081 - C25082;
    const double C25273 = C25261 - C25262;
    const double C25440 = C25428 - C25429;
    const double C25655 = C25643 - C25644;
    const double C31347 = C31338 - C31339;
    const double C31342 = C31318 - C31319;
    const double C31858 = C31846 - C31847;
    const double C32269 = C32257 - C32258;
    const double C32776 = C32764 - C32765;
    const double C33187 = C33175 - C33176;
    const double C24719 = C24704 - C24705;
    const double C24716 = C24692 - C24693;
    const double C24713 = C24680 - C24681;
    const double C24913 = C24901 - C24902;
    const double C24910 = C24889 - C24890;
    const double C25101 = C25089 - C25090;
    const double C25098 = C25077 - C25078;
    const double C25274 = C25265 - C25266;
    const double C25441 = C25432 - C25433;
    const double C25656 = C25647 - C25648;
    const double C31346 = C31334 - C31335;
    const double C31343 = C31322 - C31323;
    const double C31859 = C31850 - C31851;
    const double C32270 = C32261 - C32262;
    const double C32777 = C32768 - C32769;
    const double C33188 = C33179 - C33180;
    const double C8118 = C8113 + C8114;
    const double C8117 = C8111 + C8112;
    const double C8669 = C8313 + C8314;
    const double C14037 = C8519 + C8520;
    const double C14027 = C8520 + C8519;
    const double C14036 = C8517 + C8518;
    const double C14026 = C8518 + C8517;
    const double C8830 = C8515 + C8516;
    const double C14452 = C8516 + C8515;
    const double C14728 = C9064 + C9063;
    const double C14719 = C9063 + C9064;
    const double C47460 = C14061 + C14060;
    const double C48347 = C15272 + C15271;
    const double C49245 = C16464 + C16463;
    const double C17275 = C17270 + C17271;
    const double C17274 = C17268 + C17269;
    const double C17826 = C17470 + C17471;
    const double C22191 = C17677 + C17676;
    const double C27950 = C17676 + C17677;
    const double C27949 = C17674 + C17675;
    const double C27948 = C17675 + C17674;
    const double C17987 = C17672 + C17673;
    const double C28339 = C17673 + C17672;
    const double C28599 = C18221 + C18220;
    const double C28598 = C18220 + C18221;
    const double C24065 = C22213 + C22214;
    const double C22217 = C22211 + C22212;
    const double C23149 = C22744 + C22743;
    const double C23670 = C23666 + C23658;
    const double C32277 = C32274 + C32268;
    const double C37691 = C37688 + C37682;
    const double C48854 = C48852 + C48848;
    const double C32784 = C32781 + C32775;
    const double C38198 = C38195 + C38189;
    const double C24727 = C24718 - C24702;
    const double C24726 = C24717 - C24698;
    const double C24721 = C24712 - C24678;
    const double C24918 = C24912 - C24899;
    const double C24917 = C24911 - C24895;
    const double C25106 = C25100 - C25087;
    const double C25105 = C25099 - C25083;
    const double C25276 = C25273 - C25263;
    const double C25443 = C25440 - C25430;
    const double C25658 = C25655 - C25645;
    const double C31353 = C31347 - C31340;
    const double C31348 = C31342 - C31320;
    const double C31861 = C31858 - C31848;
    const double C32272 = C32269 - C32259;
    const double C32779 = C32776 - C32766;
    const double C33190 = C33187 - C33177;
    const double C24728 = C24719 - C24706;
    const double C24725 = C24716 - C24694;
    const double C24722 = C24713 - C24682;
    const double C24919 = C24913 - C24903;
    const double C24916 = C24910 - C24891;
    const double C25107 = C25101 - C25091;
    const double C25104 = C25098 - C25079;
    const double C25277 = C25274 - C25267;
    const double C25444 = C25441 - C25434;
    const double C25659 = C25656 - C25649;
    const double C31352 = C31346 - C31336;
    const double C31349 = C31343 - C31324;
    const double C31862 = C31859 - C31852;
    const double C32273 = C32270 - C32263;
    const double C32780 = C32777 - C32770;
    const double C33191 = C33188 - C33181;
    const double C47461 = C14027 * C50656;
    const double C47462 = C47460 * C50656;
    const double C48350 = C48347 * C50656;
    const double C49254 = C49245 * C50656;
    const double C22200 = C22191 * C50656;
    const double C24074 = C24065 * C50656;
    const double C22218 = C22217 * C50656;
    const double C23152 = C23149 * C50656;
    const double C24736 = C24727 + C24703;
    const double C24735 = C24726 + C24699;
    const double C24730 = C24721 + C24679;
    const double C24924 = C24918 + C24900;
    const double C24923 = C24917 + C24896;
    const double C25112 = C25106 + C25088;
    const double C25111 = C25105 + C25084;
    const double C25279 = C25276 + C25264;
    const double C25446 = C25443 + C25431;
    const double C25661 = C25658 + C25646;
    const double C31359 = C31353 + C31341;
    const double C31354 = C31348 + C31321;
    const double C31864 = C31861 + C31849;
    const double C32275 = C32272 + C32260;
    const double C32782 = C32779 + C32767;
    const double C33193 = C33190 + C33178;
    const double C24737 = C24728 + C24707;
    const double C24734 = C24725 + C24695;
    const double C24731 = C24722 + C24683;
    const double C24925 = C24919 + C24904;
    const double C24922 = C24916 + C24892;
    const double C25113 = C25107 + C25092;
    const double C25110 = C25104 + C25080;
    const double C25280 = C25277 + C25268;
    const double C25447 = C25444 + C25435;
    const double C25662 = C25659 + C25650;
    const double C31358 = C31352 + C31337;
    const double C31355 = C31349 + C31325;
    const double C31865 = C31862 + C31853;
    const double C32276 = C32273 + C32264;
    const double C32783 = C32780 + C32771;
    const double C33194 = C33191 + C33182;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50719 * C50927 -
           (C8669 * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C50719 * C50755) *
              C50970 +
          (((C8316 + C8315) * C50968 + (C8314 + C8313) * C50969 +
            (C8682 + C8683) * C8055) *
               C50816 * C50719 * C50755 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C50719 * C50927) *
              C50971 +
          ((C8117 * C50968 + (C8114 + C8113) * C50969 +
            (C8115 + C8116) * C8055) *
               C50816 * C50719 * C50927 -
           ((C8058 * C313 - C8059 * C294 - C8058 * C314 + C50852 * C324 +
             C8056 * C311 - C8057 * C293 - C8056 * C312 + C50940 * C323) *
                C8055 +
            (C8683 + C8682) * C50969 + C8669 * C50968) *
               C50816 * C50719 * C50755) *
              C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50968 +
             (C8109 + C8110) * C50969 + C8117 * C8055) *
                C50816 * C50928 -
            (C8830 * C8055 + (C8517 + C8518) * C50969 +
             (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
              C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                 C50968) *
                C50816 * C50783) *
               C50927 +
           (((C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920 +
              C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596) *
                 C50968 +
             (C9063 + C9064) * C50969 + (C9065 + C9066) * C8055) *
                C50816 * C50783 -
            (C8669 * C8055 + (C8315 + C8316) * C50969 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50968) *
                C50816 * C50928) *
               C50755) *
              C283 +
          ((((C8518 + C8517) * C50968 + (C8516 + C8515) * C50969 +
             (C8843 + C8844) * C8055) *
                C50816 * C50783 -
            (C8118 * C8055 + (C8112 + C8111) * C50969 +
             (C8110 + C8109) * C50968) *
                C50816 * C50928) *
               C50927 +
           (((C8316 + C8315) * C50968 + (C8314 + C8313) * C50969 +
             (C8682 + C8683) * C8055) *
                C50816 * C50928 -
            ((C8058 * C1585 - C8059 * C1581 - C8058 * C1586 + C50852 * C1593 +
              C8056 * C916 - C8057 * C908 - C8056 * C917 + C50940 * C923) *
                 C8055 +
             (C9066 + C9065) * C50969 + (C9064 + C9063) * C50968) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50719 * C280 -
           ((C8313 + C8314) * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C50719 * C281 +
           ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50968 +
            (C8317 + C8318) * C50969 + (C8319 + C8320) * C8055) *
               C50816 * C50719 * C282) *
              C283 +
          (((C8316 + C8315) * C50968 + (C8314 + C8313) * C50969 +
            (C8056 * C295 - C8057 * C285 - C8056 * C296 + C50940 * C315 +
             C8058 * C309 - C8059 * C292 - C8058 * C310 + C50852 * C322) *
                C8055) *
               C50816 * C50719 * C281 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C50719 * C280 -
           ((C8058 * C1124 - C8059 * C1120 - C8058 * C1125 + C50852 * C1132 +
             C8056 * C309 - C8057 * C292 - C8056 * C310 + C50940 * C322) *
                C8055 +
            (C8320 + C8319) * C50969 + (C8318 + C8317) * C50968) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50968 +
           (C8109 + C8110) * C50969 + C8117 * C8055) *
              C50816 * C50719 * C50703 * C113 -
          (C8118 * C8055 + (C8112 + C8111) * C50969 +
           (C8110 + C8109) * C50968) *
              C50816 * C50719 * C50703 * C114 +
          (C8117 * C50968 + (C8114 + C8113) * C50969 +
           (C8115 + C8116) * C8055) *
              C50816 * C50719 * C50703 * C115 -
          ((C8058 * C654 - C8059 * C653 - C8058 * C655 + C50852 * C656 +
            C8056 * C136 - C8057 * C124 - C8056 * C137 + C50940 * C145) *
               C8055 +
           (C8116 + C8115) * C50969 + C8118 * C50968) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C465 -
           ((C8515 + C8516) * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C466 +
           ((C8056 * C486 - C8057 * C472 - C8056 * C487 + C50940 * C502 +
             C8058 * C1244 - C8059 * C1237 - C8058 * C1245 + C50852 * C1249) *
                C50968 +
            (C8519 + C8520) * C50969 + (C8521 + C8522) * C8055) *
               C50816 * C467) *
              C50703 * C283 +
          (((C8518 + C8517) * C50968 + (C8516 + C8515) * C50969 +
            (C8056 * C478 - C8057 * C468 - C8056 * C479 + C50940 * C498 +
             C8058 * C916 - C8059 * C908 - C8058 * C917 + C50852 * C923) *
                C8055) *
               C50816 * C466 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C465 -
           ((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
             C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
                C8055 +
            (C8522 + C8521) * C50969 + (C8520 + C8519) * C50968) *
               C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50928 -
           (C8830 * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C50783) *
              C50703 * C50970 +
          (((C8518 + C8517) * C50968 + (C8516 + C8515) * C50969 +
            (C8843 + C8844) * C8055) *
               C50816 * C50783 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C50928) *
              C50703 * C50971 +
          ((C8117 * C50968 + (C8114 + C8113) * C50969 +
            (C8115 + C8116) * C8055) *
               C50816 * C50928 -
           ((C8058 * C918 - C8059 * C909 - C8058 * C919 + C50852 * C924 +
             C8056 * C494 - C8057 * C476 - C8056 * C495 + C50940 * C506) *
                C8055 +
            (C8844 + C8843) * C50969 + C8830 * C50968) *
               C50816 * C50783) *
              C50703 * C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50968 +
           (C8109 + C8110) * C50969 + C8117 * C8055) *
              C50816 * C50719 * C50703 * C113 -
          (C8118 * C8055 + (C8112 + C8111) * C50969 +
           (C8110 + C8109) * C50968) *
              C50816 * C50719 * C50703 * C114 +
          (C8117 * C50968 + (C8114 + C8113) * C50969 +
           (C8115 + C8116) * C8055) *
              C50816 * C50719 * C50703 * C115 -
          ((C8058 * C654 - C8059 * C653 - C8058 * C655 + C50852 * C656 +
            C8056 * C136 - C8057 * C124 - C8056 * C137 + C50940 * C145) *
               C8055 +
           (C8116 + C8115) * C50969 + C8118 * C50968) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50719 * C280 -
           ((C8313 + C8314) * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C50719 * C281 +
           ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50968 +
            (C8317 + C8318) * C50969 + (C8319 + C8320) * C8055) *
               C50816 * C50719 * C282) *
              C283 +
          (((C8316 + C8315) * C50968 + (C8314 + C8313) * C50969 +
            (C8056 * C295 - C8057 * C285 - C8056 * C296 + C50940 * C315 +
             C8058 * C309 - C8059 * C292 - C8058 * C310 + C50852 * C322) *
                C8055) *
               C50816 * C50719 * C281 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C50719 * C280 -
           ((C8058 * C1124 - C8059 * C1120 - C8058 * C1125 + C50852 * C1132 +
             C8056 * C309 - C8057 * C292 - C8056 * C310 + C50940 * C322) *
                C8055 +
            (C8320 + C8319) * C50969 + (C8318 + C8317) * C50968) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50719 * C50972 -
           (C8669 * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C50719 * C50973 +
           ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50968 +
            (C8317 + C8318) * C50969 + (C8319 + C8320) * C8055) *
               C50816 * C50719 * C1350) *
              C50919 +
          (((C8316 + C8315) * C50968 + (C8314 + C8313) * C50969 +
            (C8682 + C8683) * C8055) *
               C50816 * C50719 * C50973 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C50719 * C50972 -
           ((C8058 * C1124 - C8059 * C1120 - C8058 * C1125 + C50852 * C1132 +
             C8056 * C309 - C8057 * C292 - C8056 * C310 + C50940 * C322) *
                C8055 +
            (C8320 + C8319) * C50969 + (C8318 + C8317) * C50968) *
               C50816 * C50719 * C1350) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50928 -
           (C8830 * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C50783) *
              C50972 +
          (((C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920 +
             C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596) *
                C50968 +
            (C9063 + C9064) * C50969 + (C9065 + C9066) * C8055) *
               C50816 * C50783 -
           (C8669 * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C50928) *
              C50973 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50968 +
            (C8317 + C8318) * C50969 + (C8319 + C8320) * C8055) *
               C50816 * C50928 -
           ((C8058 * C3317 - C8059 * C3312 - C8058 * C3318 + C50852 * C3321 +
             C8056 * C1587 - C8057 * C1582 - C8056 * C1588 + C50940 * C1594) *
                C8055 +
            (C8058 * C3315 - C8059 * C3311 - C8058 * C3316 + C50852 * C3320 +
             C8056 * C1589 - C8057 * C1583 - C8056 * C1590 + C50940 * C1595) *
                C50969 +
            (C8058 * C3313 - C8059 * C3310 - C8058 * C3314 + C50852 * C3319 +
             C8056 * C1591 - C8057 * C1584 - C8056 * C1592 + C50940 * C1596) *
                C50968) *
               C50816 * C50783) *
              C1350) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50968 +
           (C8109 + C8110) * C50969 + C8117 * C8055) *
              C50816 * C50719 * C1115 -
          (C8669 * C8055 + (C8315 + C8316) * C50969 +
           (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
            C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
               C50968) *
              C50816 * C50719 * C1116 +
          ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
            C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
               C50968 +
           (C8317 + C8318) * C50969 + (C8319 + C8320) * C8055) *
              C50816 * C50719 * C1117 -
          ((C8058 * C2535 - C8059 * C2530 - C8058 * C2536 + C50852 * C2539 +
            C8056 * C1126 - C8057 * C1121 - C8056 * C1127 + C50940 * C1133) *
               C8055 +
           (C8058 * C2533 - C8059 * C2529 - C8058 * C2534 + C50852 * C2538 +
            C8056 * C1128 - C8057 * C1122 - C8056 * C1129 + C50940 * C1134) *
               C50969 +
           (C8058 * C2531 - C8059 * C2528 - C8058 * C2532 + C50852 * C2537 +
            C8056 * C1130 - C8057 * C1123 - C8056 * C1131 + C50940 * C1135) *
               C50968) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50719 * C1044 -
           (C8669 * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C8316 + C8315) * C50968 + (C8314 + C8313) * C50969 +
            (C8682 + C8683) * C8055) *
               C50816 * C50719 * C50755 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C50719 * C1044) *
              C1047 +
          ((C8117 * C50968 + (C8114 + C8113) * C50969 +
            (C8115 + C8116) * C8055) *
               C50816 * C50719 * C1044 -
           ((C8058 * C313 - C8059 * C294 - C8058 * C314 + C50852 * C324 +
             C8056 * C311 - C8057 * C293 - C8056 * C312 + C50940 * C323) *
                C8055 +
            (C8683 + C8682) * C50969 + C8669 * C50968) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C465 -
           (C8830 * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C466 +
           ((C8056 * C486 - C8057 * C472 - C8056 * C487 + C50940 * C502 +
             C8058 * C1244 - C8059 * C1237 - C8058 * C1245 + C50852 * C1249) *
                C50968 +
            (C8519 + C8520) * C50969 + (C8521 + C8522) * C8055) *
               C50816 * C467) *
              C1044 +
          (((C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920 +
             C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596) *
                C50968 +
            (C9063 + C9064) * C50969 + (C9065 + C9066) * C8055) *
               C50816 * C466 -
           (C8669 * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C465 -
           ((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
             C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                C8055 +
            (C8058 * C2733 - C8059 * C2729 - C8058 * C2734 + C50852 * C2738 +
             C8056 * C1242 - C8057 * C1236 - C8056 * C1243 + C50940 * C1248) *
                C50969 +
            (C8058 * C2731 - C8059 * C2728 - C8058 * C2732 + C50852 * C2737 +
             C8056 * C1244 - C8057 * C1237 - C8056 * C1245 + C50940 * C1249) *
                C50968) *
               C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50968 +
             (C8109 + C8110) * C50969 + C8117 * C8055) *
                C50816 * C50928 -
            (C8830 * C8055 + (C8517 + C8518) * C50969 +
             (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
              C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                 C50968) *
                C50816 * C50783) *
               C1044 +
           (((C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920 +
              C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596) *
                 C50968 +
             (C9063 + C9064) * C50969 + (C9065 + C9066) * C8055) *
                C50816 * C50783 -
            (C8669 * C8055 + (C8315 + C8316) * C50969 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50968) *
                C50816 * C50928) *
               C50755) *
              C50919 +
          ((((C8518 + C8517) * C50968 + (C8516 + C8515) * C50969 +
             (C8843 + C8844) * C8055) *
                C50816 * C50783 -
            (C8118 * C8055 + (C8112 + C8111) * C50969 +
             (C8110 + C8109) * C50968) *
                C50816 * C50928) *
               C1044 +
           (((C8316 + C8315) * C50968 + (C8314 + C8313) * C50969 +
             (C8682 + C8683) * C8055) *
                C50816 * C50928 -
            ((C8058 * C1585 - C8059 * C1581 - C8058 * C1586 + C50852 * C1593 +
              C8056 * C916 - C8057 * C908 - C8056 * C917 + C50940 * C923) *
                 C8055 +
             (C9066 + C9065) * C50969 + (C9064 + C9063) * C50968) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50719 * C1044 -
           (C8669 * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C8316 + C8315) * C50968 + (C8314 + C8313) * C50969 +
            (C8682 + C8683) * C8055) *
               C50816 * C50719 * C50755 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C50719 * C1044) *
              C1047 +
          ((C8117 * C50968 + (C8114 + C8113) * C50969 +
            (C8115 + C8116) * C8055) *
               C50816 * C50719 * C1044 -
           ((C8058 * C313 - C8059 * C294 - C8058 * C314 + C50852 * C324 +
             C8056 * C311 - C8057 * C293 - C8056 * C312 + C50940 * C323) *
                C8055 +
            (C8683 + C8682) * C50969 + C8669 * C50968) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50968 +
           (C8109 + C8110) * C50969 + C8117 * C8055) *
              C50816 * C50719 * C1115 -
          (C8669 * C8055 + (C8315 + C8316) * C50969 +
           (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
            C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
               C50968) *
              C50816 * C50719 * C1116 +
          ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
            C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
               C50968 +
           (C8317 + C8318) * C50969 + (C8319 + C8320) * C8055) *
              C50816 * C50719 * C1117 -
          ((C8058 * C2535 - C8059 * C2530 - C8058 * C2536 + C50852 * C2539 +
            C8056 * C1126 - C8057 * C1121 - C8056 * C1127 + C50940 * C1133) *
               C8055 +
           (C8058 * C2533 - C8059 * C2529 - C8058 * C2534 + C50852 * C2538 +
            C8056 * C1128 - C8057 * C1122 - C8056 * C1129 + C50940 * C1134) *
               C50969 +
           (C8058 * C2531 - C8059 * C2528 - C8058 * C2532 + C50852 * C2537 +
            C8056 * C1130 - C8057 * C1123 - C8056 * C1131 + C50940 * C1135) *
               C50968) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50968 +
             (C8109 + C8110) * C50969 + C8117 * C8055) *
                C50816 * C1695 -
            (C8830 * C8055 + (C8517 + C8518) * C50969 +
             (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
              C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                 C50968) *
                C50816 * C50783) *
               C50927 +
           (((C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920 +
              C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596) *
                 C50968 +
             (C9063 + C9064) * C50969 + (C9065 + C9066) * C8055) *
                C50816 * C50783 -
            (C8669 * C8055 + (C8315 + C8316) * C50969 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50968) *
                C50816 * C1695) *
               C50755) *
              C50919 +
          ((((C8518 + C8517) * C50968 + (C8516 + C8515) * C50969 +
             (C8843 + C8844) * C8055) *
                C50816 * C50783 -
            (C8118 * C8055 + (C8112 + C8111) * C50969 +
             (C8110 + C8109) * C50968) *
                C50816 * C1695) *
               C50927 +
           (((C8316 + C8315) * C50968 + (C8314 + C8313) * C50969 +
             (C8682 + C8683) * C8055) *
                C50816 * C1695 -
            ((C8058 * C1585 - C8059 * C1581 - C8058 * C1586 + C50852 * C1593 +
              C8056 * C916 - C8057 * C908 - C8056 * C917 + C50940 * C923) *
                 C8055 +
             (C9066 + C9065) * C50969 + (C9064 + C9063) * C50968) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50974 -
           (C8830 * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C50975 +
           ((C8056 * C486 - C8057 * C472 - C8056 * C487 + C50940 * C502 +
             C8058 * C1244 - C8059 * C1237 - C8058 * C1245 + C50852 * C1249) *
                C50968 +
            (C8519 + C8520) * C50969 + (C8521 + C8522) * C8055) *
               C50816 * C2111) *
              C50927 +
          (((C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920 +
             C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596) *
                C50968 +
            (C9063 + C9064) * C50969 + (C9065 + C9066) * C8055) *
               C50816 * C50975 -
           (C8669 * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C50974 -
           ((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
             C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                C8055 +
            (C8058 * C2733 - C8059 * C2729 - C8058 * C2734 + C50852 * C2738 +
             C8056 * C1242 - C8057 * C1236 - C8056 * C1243 + C50940 * C1248) *
                C50969 +
            (C8058 * C2731 - C8059 * C2728 - C8058 * C2732 + C50852 * C2737 +
             C8056 * C1244 - C8057 * C1237 - C8056 * C1245 + C50940 * C1249) *
                C50968) *
               C50816 * C2111) *
              C50755) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C1695 -
           (C8830 * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C50783) *
              C280 +
          (((C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920 +
             C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596) *
                C50968 +
            (C9063 + C9064) * C50969 + (C9065 + C9066) * C8055) *
               C50816 * C50783 -
           (C8669 * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C1695) *
              C281 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50968 +
            (C8317 + C8318) * C50969 + (C8319 + C8320) * C8055) *
               C50816 * C1695 -
           ((C8058 * C3317 - C8059 * C3312 - C8058 * C3318 + C50852 * C3321 +
             C8056 * C1587 - C8057 * C1582 - C8056 * C1588 + C50940 * C1594) *
                C8055 +
            (C8058 * C3315 - C8059 * C3311 - C8058 * C3316 + C50852 * C3320 +
             C8056 * C1589 - C8057 * C1583 - C8056 * C1590 + C50940 * C1595) *
                C50969 +
            (C8058 * C3313 - C8059 * C3310 - C8058 * C3314 + C50852 * C3319 +
             C8056 * C1591 - C8057 * C1584 - C8056 * C1592 + C50940 * C1596) *
                C50968) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C1695 -
           (C8830 * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C8518 + C8517) * C50968 + (C8516 + C8515) * C50969 +
            (C8843 + C8844) * C8055) *
               C50816 * C50783 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C1695) *
              C50703 * C1047 +
          ((C8117 * C50968 + (C8114 + C8113) * C50969 +
            (C8115 + C8116) * C8055) *
               C50816 * C1695 -
           ((C8058 * C918 - C8059 * C909 - C8058 * C919 + C50852 * C924 +
             C8056 * C494 - C8057 * C476 - C8056 * C495 + C50940 * C506) *
                C8055 +
            (C8844 + C8843) * C50969 + C8830 * C50968) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50968 +
           (C8109 + C8110) * C50969 + C8117 * C8055) *
              C50816 * C1861 -
          (C8830 * C8055 + (C8517 + C8518) * C50969 +
           (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
            C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
               C50968) *
              C50816 * C1862 +
          ((C8056 * C486 - C8057 * C472 - C8056 * C487 + C50940 * C502 +
            C8058 * C1244 - C8059 * C1237 - C8058 * C1245 + C50852 * C1249) *
               C50968 +
           (C8519 + C8520) * C50969 + (C8521 + C8522) * C8055) *
              C50816 * C1863 -
          ((C8058 * C6115 - C8059 * C6114 - C8058 * C6116 + C50852 * C6117 +
            C8056 * C1871 - C8057 * C1866 - C8056 * C1872 + C50940 * C1878) *
               C8055 +
           (C8058 * C4639 - C8059 * C4634 - C8058 * C4640 + C50852 * C4646 +
            C8056 * C1873 - C8057 * C1867 - C8056 * C1874 + C50940 * C1879) *
               C50969 +
           (C8058 * C4643 - C8059 * C4636 - C8058 * C4644 + C50852 * C4648 +
            C8056 * C1875 - C8057 * C1868 - C8056 * C1876 + C50940 * C1880) *
               C50968) *
              C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C50974 -
           (C8830 * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C50975 +
           ((C8056 * C486 - C8057 * C472 - C8056 * C487 + C50940 * C502 +
             C8058 * C1244 - C8059 * C1237 - C8058 * C1245 + C50852 * C1249) *
                C50968 +
            (C8519 + C8520) * C50969 + (C8521 + C8522) * C8055) *
               C50816 * C2111) *
              C50703 * C50919 +
          (((C8518 + C8517) * C50968 + (C8516 + C8515) * C50969 +
            (C8843 + C8844) * C8055) *
               C50816 * C50975 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C50974 -
           ((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
             C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
                C8055 +
            (C8522 + C8521) * C50969 + (C8520 + C8519) * C50968) *
               C50816 * C2111) *
              C50703 * C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C1695 -
           (C8830 * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C8518 + C8517) * C50968 + (C8516 + C8515) * C50969 +
            (C8843 + C8844) * C8055) *
               C50816 * C50783 -
           (C8118 * C8055 + (C8112 + C8111) * C50969 +
            (C8110 + C8109) * C50968) *
               C50816 * C1695) *
              C50703 * C1047 +
          ((C8117 * C50968 + (C8114 + C8113) * C50969 +
            (C8115 + C8116) * C8055) *
               C50816 * C1695 -
           ((C8058 * C918 - C8059 * C909 - C8058 * C919 + C50852 * C924 +
             C8056 * C494 - C8057 * C476 - C8056 * C495 + C50940 * C506) *
                C8055 +
            (C8844 + C8843) * C50969 + C8830 * C50968) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50968 +
            (C8109 + C8110) * C50969 + C8117 * C8055) *
               C50816 * C1695 -
           (C8830 * C8055 + (C8517 + C8518) * C50969 +
            (C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920 +
             C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501) *
                C50968) *
               C50816 * C50783) *
              C280 +
          (((C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920 +
             C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596) *
                C50968 +
            (C9063 + C9064) * C50969 + (C9065 + C9066) * C8055) *
               C50816 * C50783 -
           (C8669 * C8055 + (C8315 + C8316) * C50969 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50968) *
               C50816 * C1695) *
              C281 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50968 +
            (C8317 + C8318) * C50969 + (C8319 + C8320) * C8055) *
               C50816 * C1695 -
           ((C8058 * C3317 - C8059 * C3312 - C8058 * C3318 + C50852 * C3321 +
             C8056 * C1587 - C8057 * C1582 - C8056 * C1588 + C50940 * C1594) *
                C8055 +
            (C8058 * C3315 - C8059 * C3311 - C8058 * C3316 + C50852 * C3320 +
             C8056 * C1589 - C8057 * C1583 - C8056 * C1590 + C50940 * C1595) *
                C50969 +
            (C8058 * C3313 - C8059 * C3310 - C8058 * C3314 + C50852 * C3319 +
             C8056 * C1591 - C8057 * C1584 - C8056 * C1592 + C50940 * C1596) *
                C50968) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C50719 * C50927 -
           (((C9064 + C9063) * C50661 +
             (C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596 +
              C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920) *
                 C2311) *
                C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C50719 * C50755) *
              C50970 +
          ((((C8316 + C8315) * C2311 + (C8314 + C8313) * C50661) * C50941 +
            ((C9063 + C9064) * C2311 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C50755 -
           ((C8830 * C50661 + C14036 * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C50719 * C50927) *
              C50971 +
          (((C8117 * C2311 + (C8114 + C8113) * C50661) * C50941 +
            ((C8516 + C8515) * C2311 + (C8843 + C8844) * C50661) * C50880) *
               C50719 * C50927 -
           (((C8058 * C1585 - C8059 * C1581 - C8058 * C1586 + C50852 * C1593 +
              C8056 * C916 - C8057 * C908 - C8056 * C917 + C50940 * C923) *
                 C50661 +
             (C9066 + C9065) * C2311) *
                C50880 +
            ((C8683 + C8682) * C50661 + C8669 * C2311) * C50941) *
               C50719 * C50755) *
              C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
               C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                  C2311 +
              (C8109 + C8110) * C50661) *
                 C50941 +
             ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
                C50928 -
            ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
             (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
                C50783) *
               C50927 +
           ((((C14737 + C14738) * C2311 + C14719 * C50661) * C50941 +
             ((C8056 * C1244 - C8057 * C1237 - C8056 * C1245 + C50940 * C1249 +
               C8058 * C2731 - C8059 * C2728 - C8058 * C2732 + C50852 * C2737) *
                  C2311 +
              (C14739 + C14740) * C50661) *
                 C50880) *
                C50783 -
            ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
             ((C8315 + C8316) * C50661 +
              (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
               C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                  C2311) *
                 C50941) *
                C50928) *
               C50755) *
              C283 +
          ((((C14026 * C2311 + C14452 * C50661) * C50941 +
             (C14037 * C2311 + (C8521 + C8522) * C50661) * C50880) *
                C50783 -
            ((C8830 * C50661 + C14036 * C2311) * C50880 +
             ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
                C50928) *
               C50927 +
           ((((C8316 + C8315) * C2311 + (C8314 + C8313) * C50661) * C50941 +
             (C14719 * C2311 + (C9065 + C9066) * C50661) * C50880) *
                C50928 -
            (((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
               C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                  C50661 +
              (C14740 + C14739) * C2311) *
                 C50880 +
             ((C9066 + C9065) * C50661 + C14728 * C2311) * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501 +
              C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920) *
                 C2311 +
             (C8518 + C8517) * C50661) *
                C50880) *
               C50719 * C280 -
           (((C9064 + C9063) * C50661 +
             (C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596 +
              C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920) *
                 C2311) *
                C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C50719 * C281 +
           (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C2311 +
             (C8317 + C8318) * C50661) *
                C50941 +
            ((C8056 * C1591 - C8057 * C1584 - C8056 * C1592 + C50940 * C1596 +
              C8058 * C3313 - C8059 * C3310 - C8058 * C3314 + C50852 * C3319) *
                 C2311 +
             (C13822 + C13823) * C50661) *
                C50880) *
               C50719 * C282) *
              C283 +
          ((((C8316 + C8315) * C2311 + (C8314 + C8313) * C50661) * C50941 +
            ((C9063 + C9064) * C2311 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C281 -
           ((C8830 * C50661 + (C8517 + C8518) * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C50719 * C280 -
           (((C8058 * C3317 - C8059 * C3312 - C8058 * C3318 + C50852 * C3321 +
              C8056 * C1587 - C8057 * C1582 - C8056 * C1588 + C50940 * C1594) *
                 C50661 +
             (C13823 + C13822) * C2311) *
                C50880 +
            ((C8320 + C8319) * C50661 + (C8318 + C8317) * C2311) * C50941) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C2311 +
            (C8109 + C8110) * C50661) *
               C50941 +
           ((C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501 +
             C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920) *
                C2311 +
            (C8518 + C8517) * C50661) *
               C50880) *
              C50719 * C50703 * C113 -
          ((C8830 * C50661 + (C8517 + C8518) * C2311) * C50880 +
           ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
              C50719 * C50703 * C114 +
          ((C8117 * C2311 + (C8114 + C8113) * C50661) * C50941 +
           ((C8516 + C8515) * C2311 + (C8843 + C8844) * C50661) * C50880) *
              C50719 * C50703 * C115 -
          (((C8058 * C918 - C8059 * C909 - C8058 * C919 + C50852 * C924 +
             C8056 * C494 - C8057 * C476 - C8056 * C495 + C50940 * C506) *
                C50661 +
            (C8844 + C8843) * C2311) *
               C50880 +
           ((C8116 + C8115) * C50661 + C8118 * C2311) * C50941) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C465 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C466 +
           (((C14061 + C14060) * C2311 + C14037 * C50661) * C50941 +
            ((C8056 * C1875 - C8057 * C1868 - C8056 * C1876 + C50940 * C1880 +
              C8058 * C4643 - C8059 * C4636 - C8058 * C4644 + C50852 * C4648) *
                 C2311 +
             (C14062 + C14063) * C50661) *
                C50880) *
               C467) *
              C50703 * C283 +
          (((C14026 * C2311 + (C8516 + C8515) * C50661) * C50941 +
            (C14037 * C2311 + (C8521 + C8522) * C50661) * C50880) *
               C466 -
           ((C8830 * C50661 + C14036 * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C465 -
           (((C8058 * C6115 - C8059 * C6114 - C8058 * C6116 + C50852 * C6117 +
              C8056 * C1871 - C8057 * C1866 - C8056 * C1872 + C50940 * C1878) *
                 C50661 +
             (C14063 + C14062) * C2311) *
                C50880 +
            ((C8522 + C8521) * C50661 + C14027 * C2311) * C50941) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C50928 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C50783) *
              C50703 * C50970 +
          (((C14026 * C2311 + C14452 * C50661) * C50941 +
            (C14037 * C2311 + (C8521 + C8522) * C50661) * C50880) *
               C50783 -
           ((C8830 * C50661 + C14036 * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C50928) *
              C50703 * C50971 +
          (((C8117 * C2311 + (C8114 + C8113) * C50661) * C50941 +
            (C14452 * C2311 + (C8843 + C8844) * C50661) * C50880) *
               C50928 -
           (((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
              C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
                 C50661 +
             (C8522 + C8521) * C2311) *
                C50880 +
            ((C8844 + C8843) * C50661 + C8830 * C2311) * C50941) *
               C50783) *
              C50703 * C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C2311 +
            (C8109 + C8110) * C50661) *
               C50941 +
           ((C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501 +
             C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920) *
                C2311 +
            (C8518 + C8517) * C50661) *
               C50880) *
              C50719 * C50703 * C113 -
          ((C8830 * C50661 + (C8517 + C8518) * C2311) * C50880 +
           ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
              C50719 * C50703 * C114 +
          ((C8117 * C2311 + (C8114 + C8113) * C50661) * C50941 +
           ((C8516 + C8515) * C2311 + (C8843 + C8844) * C50661) * C50880) *
              C50719 * C50703 * C115 -
          (((C8058 * C918 - C8059 * C909 - C8058 * C919 + C50852 * C924 +
             C8056 * C494 - C8057 * C476 - C8056 * C495 + C50940 * C506) *
                C50661 +
            (C8844 + C8843) * C2311) *
               C50880 +
           ((C8116 + C8115) * C50661 + C8118 * C2311) * C50941) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C8056 * C484 - C8057 * C471 - C8056 * C485 + C50940 * C501 +
              C8058 * C910 - C8059 * C905 - C8058 * C911 + C50852 * C920) *
                 C2311 +
             (C8518 + C8517) * C50661) *
                C50880) *
               C50719 * C280 -
           (((C9064 + C9063) * C50661 +
             (C8058 * C1591 - C8059 * C1584 - C8058 * C1592 + C50852 * C1596 +
              C8056 * C910 - C8057 * C905 - C8056 * C911 + C50940 * C920) *
                 C2311) *
                C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C50719 * C281 +
           (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C2311 +
             (C8317 + C8318) * C50661) *
                C50941 +
            ((C8056 * C1591 - C8057 * C1584 - C8056 * C1592 + C50940 * C1596 +
              C8058 * C3313 - C8059 * C3310 - C8058 * C3314 + C50852 * C3319) *
                 C2311 +
             (C13822 + C13823) * C50661) *
                C50880) *
               C50719 * C282) *
              C283 +
          ((((C8316 + C8315) * C2311 + (C8314 + C8313) * C50661) * C50941 +
            ((C9063 + C9064) * C2311 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C281 -
           ((C8830 * C50661 + (C8517 + C8518) * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C50719 * C280 -
           (((C8058 * C3317 - C8059 * C3312 - C8058 * C3318 + C50852 * C3321 +
              C8056 * C1587 - C8057 * C1582 - C8056 * C1588 + C50940 * C1594) *
                 C50661 +
             (C13823 + C13822) * C2311) *
                C50880 +
            ((C8320 + C8319) * C50661 + (C8318 + C8317) * C2311) * C50941) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C50719 * C50972 -
           ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C50719 * C50973 +
           (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C2311 +
             (C8317 + C8318) * C50661) *
                C50941 +
            ((C8056 * C1591 - C8057 * C1584 - C8056 * C1592 + C50940 * C1596 +
              C8058 * C3313 - C8059 * C3310 - C8058 * C3314 + C50852 * C3319) *
                 C2311 +
             (C13822 + C13823) * C50661) *
                C50880) *
               C50719 * C1350) *
              C50919 +
          ((((C8316 + C8315) * C2311 + (C8314 + C8313) * C50661) * C50941 +
            (C14719 * C2311 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C50973 -
           ((C8830 * C50661 + C14036 * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C50719 * C50972 -
           (((C8058 * C3317 - C8059 * C3312 - C8058 * C3318 + C50852 * C3321 +
              C8056 * C1587 - C8057 * C1582 - C8056 * C1588 + C50940 * C1594) *
                 C50661 +
             (C13823 + C13822) * C2311) *
                C50880 +
            ((C8320 + C8319) * C50661 + (C8318 + C8317) * C2311) * C50941) *
               C50719 * C1350) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C50928 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C50783) *
              C50972 +
          ((((C14737 + C14738) * C2311 + C14719 * C50661) * C50941 +
            ((C15271 + C15272) * C2311 + (C14739 + C14740) * C50661) * C50880) *
               C50783 -
           ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C50928) *
              C50973 +
          ((((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C2311 +
             (C8317 + C8318) * C50661) *
                C50941 +
            ((C15931 + C15932) * C2311 + (C13822 + C13823) * C50661) * C50880) *
               C50928 -
           (((C8058 * C3743 - C8059 * C3741 - C8058 * C3744 + C50852 * C3747 +
              C8056 * C2733 - C8057 * C2729 - C8056 * C2734 + C50940 * C2738) *
                 C50661 +
             (C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748 +
              C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737) *
                 C2311) *
                C50880 +
            ((C13823 + C13822) * C50661 + (C15932 + C15931) * C2311) * C50941) *
               C50783) *
              C1350) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C2311 +
            (C8109 + C8110) * C50661) *
               C50941 +
           ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
              C50719 * C1115 -
          ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
           ((C8315 + C8316) * C50661 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C2311) *
               C50941) *
              C50719 * C1116 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C2311 +
            (C8317 + C8318) * C50661) *
               C50941 +
           ((C8056 * C1591 - C8057 * C1584 - C8056 * C1592 + C50940 * C1596 +
             C8058 * C3313 - C8059 * C3310 - C8058 * C3314 + C50852 * C3319) *
                C2311 +
            (C13822 + C13823) * C50661) *
               C50880) *
              C50719 * C1117 -
          (((C8058 * C4237 - C8059 * C4235 - C8058 * C4238 + C50852 * C4241 +
             C8056 * C3315 - C8057 * C3311 - C8056 * C3316 + C50940 * C3320) *
                C50661 +
            (C8058 * C4239 - C8059 * C4236 - C8058 * C4240 + C50852 * C4242 +
             C8056 * C3313 - C8057 * C3310 - C8056 * C3314 + C50940 * C3319) *
                C2311) *
               C50880 +
           ((C8058 * C2533 - C8059 * C2529 - C8058 * C2534 + C50852 * C2538 +
             C8056 * C1128 - C8057 * C1122 - C8056 * C1129 + C50940 * C1134) *
                C50661 +
            (C8058 * C2531 - C8059 * C2528 - C8058 * C2532 + C50852 * C2537 +
             C8056 * C1130 - C8057 * C1123 - C8056 * C1131 + C50940 * C1135) *
                C2311) *
               C50941) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C50719 * C1044 -
           ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C50719 * C50755) *
              C1046 +
          ((((C8316 + C8315) * C2311 + (C8314 + C8313) * C50661) * C50941 +
            (C14719 * C2311 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C50755 -
           ((C8830 * C50661 + C14036 * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C50719 * C1044) *
              C1047 +
          (((C8117 * C2311 + (C8114 + C8113) * C50661) * C50941 +
            (C14452 * C2311 + (C8843 + C8844) * C50661) * C50880) *
               C50719 * C1044 -
           (((C8058 * C1585 - C8059 * C1581 - C8058 * C1586 + C50852 * C1593 +
              C8056 * C916 - C8057 * C908 - C8056 * C917 + C50940 * C923) *
                 C50661 +
             (C9066 + C9065) * C2311) *
                C50880 +
            ((C8683 + C8682) * C50661 + C8669 * C2311) * C50941) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C465 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C466 +
           (((C14061 + C14060) * C2311 + C14037 * C50661) * C50941 +
            ((C8056 * C1875 - C8057 * C1868 - C8056 * C1876 + C50940 * C1880 +
              C8058 * C4643 - C8059 * C4636 - C8058 * C4644 + C50852 * C4648) *
                 C2311 +
             (C14062 + C14063) * C50661) *
                C50880) *
               C467) *
              C1044 +
          ((((C14737 + C14738) * C2311 + C14719 * C50661) * C50941 +
            ((C15271 + C15272) * C2311 + (C14739 + C14740) * C50661) * C50880) *
               C466 -
           ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C465 -
           (((C8058 * C4637 - C8059 * C4633 - C8058 * C4638 + C50852 * C4645 +
              C8056 * C4639 - C8057 * C4634 - C8056 * C4640 + C50940 * C4646) *
                 C50661 +
             (C8058 * C4641 - C8059 * C4635 - C8058 * C4642 + C50852 * C4647 +
              C8056 * C4643 - C8057 * C4636 - C8056 * C4644 + C50940 * C4648) *
                 C2311) *
                C50880 +
            ((C14740 + C14739) * C50661 + (C15272 + C15271) * C2311) * C50941) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
               C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                  C2311 +
              (C8109 + C8110) * C50661) *
                 C50941 +
             ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
                C50928 -
            ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
             (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
                C50783) *
               C1044 +
           ((((C14737 + C14738) * C2311 + C14719 * C50661) * C50941 +
             ((C15271 + C15272) * C2311 + (C14739 + C14740) * C50661) *
                 C50880) *
                C50783 -
            ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
             ((C8315 + C8316) * C50661 +
              (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
               C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                  C2311) *
                 C50941) *
                C50928) *
               C50755) *
              C50919 +
          ((((C14026 * C2311 + C14452 * C50661) * C50941 +
             (C14037 * C2311 + (C8521 + C8522) * C50661) * C50880) *
                C50783 -
            ((C8830 * C50661 + C14036 * C2311) * C50880 +
             ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
                C50928) *
               C1044 +
           ((((C8316 + C8315) * C2311 + (C8314 + C8313) * C50661) * C50941 +
             (C14719 * C2311 + (C9065 + C9066) * C50661) * C50880) *
                C50928 -
            (((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
               C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                  C50661 +
              (C14740 + C14739) * C2311) *
                 C50880 +
             ((C9066 + C9065) * C50661 + C14728 * C2311) * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C50719 * C1044 -
           ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C50719 * C50755) *
              C1046 +
          ((((C8316 + C8315) * C2311 + (C8314 + C8313) * C50661) * C50941 +
            (C14719 * C2311 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C50755 -
           ((C8830 * C50661 + C14036 * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C50719 * C1044) *
              C1047 +
          (((C8117 * C2311 + (C8114 + C8113) * C50661) * C50941 +
            (C14452 * C2311 + (C8843 + C8844) * C50661) * C50880) *
               C50719 * C1044 -
           (((C8058 * C1585 - C8059 * C1581 - C8058 * C1586 + C50852 * C1593 +
              C8056 * C916 - C8057 * C908 - C8056 * C917 + C50940 * C923) *
                 C50661 +
             (C9066 + C9065) * C2311) *
                C50880 +
            ((C8683 + C8682) * C50661 + C8669 * C2311) * C50941) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C2311 +
            (C8109 + C8110) * C50661) *
               C50941 +
           ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
              C50719 * C1115 -
          ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
           ((C8315 + C8316) * C50661 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C2311) *
               C50941) *
              C50719 * C1116 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C2311 +
            (C8317 + C8318) * C50661) *
               C50941 +
           ((C8056 * C1591 - C8057 * C1584 - C8056 * C1592 + C50940 * C1596 +
             C8058 * C3313 - C8059 * C3310 - C8058 * C3314 + C50852 * C3319) *
                C2311 +
            (C13822 + C13823) * C50661) *
               C50880) *
              C50719 * C1117 -
          (((C8058 * C4237 - C8059 * C4235 - C8058 * C4238 + C50852 * C4241 +
             C8056 * C3315 - C8057 * C3311 - C8056 * C3316 + C50940 * C3320) *
                C50661 +
            (C8058 * C4239 - C8059 * C4236 - C8058 * C4240 + C50852 * C4242 +
             C8056 * C3313 - C8057 * C3310 - C8056 * C3314 + C50940 * C3319) *
                C2311) *
               C50880 +
           ((C8058 * C2533 - C8059 * C2529 - C8058 * C2534 + C50852 * C2538 +
             C8056 * C1128 - C8057 * C1122 - C8056 * C1129 + C50940 * C1134) *
                C50661 +
            (C8058 * C2531 - C8059 * C2528 - C8058 * C2532 + C50852 * C2537 +
             C8056 * C1130 - C8057 * C1123 - C8056 * C1131 + C50940 * C1135) *
                C2311) *
               C50941) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
               C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                  C2311 +
              (C8109 + C8110) * C50661) *
                 C50941 +
             ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
                C1695 -
            ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
             (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
                C50783) *
               C50927 +
           ((((C14737 + C14738) * C2311 + C14719 * C50661) * C50941 +
             ((C15271 + C15272) * C2311 + (C14739 + C14740) * C50661) *
                 C50880) *
                C50783 -
            ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
             ((C8315 + C8316) * C50661 +
              (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
               C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                  C2311) *
                 C50941) *
                C1695) *
               C50755) *
              C50919 +
          ((((C14026 * C2311 + C14452 * C50661) * C50941 +
             (C14037 * C2311 + (C8521 + C8522) * C50661) * C50880) *
                C50783 -
            ((C8830 * C50661 + C14036 * C2311) * C50880 +
             ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
                C1695) *
               C50927 +
           ((((C8316 + C8315) * C2311 + (C8314 + C8313) * C50661) * C50941 +
             (C14719 * C2311 + (C9065 + C9066) * C50661) * C50880) *
                C1695 -
            (((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
               C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                  C50661 +
              (C14740 + C14739) * C2311) *
                 C50880 +
             ((C9066 + C9065) * C50661 + C14728 * C2311) * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C50974 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C50975 +
           (((C14061 + C14060) * C2311 + C14037 * C50661) * C50941 +
            ((C16463 + C16464) * C2311 + (C14062 + C14063) * C50661) * C50880) *
               C2111) *
              C50927 +
          ((((C14737 + C14738) * C2311 + C14719 * C50661) * C50941 +
            ((C15271 + C15272) * C2311 + (C14739 + C14740) * C50661) * C50880) *
               C50975 -
           ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C50974 -
           (((C8058 * C4637 - C8059 * C4633 - C8058 * C4638 + C50852 * C4645 +
              C8056 * C4639 - C8057 * C4634 - C8056 * C4640 + C50940 * C4646) *
                 C50661 +
             (C8058 * C4641 - C8059 * C4635 - C8058 * C4642 + C50852 * C4647 +
              C8056 * C4643 - C8057 * C4636 - C8056 * C4644 + C50940 * C4648) *
                 C2311) *
                C50880 +
            ((C14740 + C14739) * C50661 + (C15272 + C15271) * C2311) * C50941) *
               C2111) *
              C50755) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C1695 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C50783) *
              C280 +
          ((((C14737 + C14738) * C2311 + C14719 * C50661) * C50941 +
            ((C15271 + C15272) * C2311 + (C14739 + C14740) * C50661) * C50880) *
               C50783 -
           ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C1695) *
              C281 +
          ((((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C2311 +
             (C8317 + C8318) * C50661) *
                C50941 +
            ((C15931 + C15932) * C2311 + (C13822 + C13823) * C50661) * C50880) *
               C1695 -
           (((C8058 * C3743 - C8059 * C3741 - C8058 * C3744 + C50852 * C3747 +
              C8056 * C2733 - C8057 * C2729 - C8056 * C2734 + C50940 * C2738) *
                 C50661 +
             (C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748 +
              C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737) *
                 C2311) *
                C50880 +
            ((C13823 + C13822) * C50661 + (C15932 + C15931) * C2311) * C50941) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C1695 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C50783) *
              C50703 * C1046 +
          (((C14026 * C2311 + C14452 * C50661) * C50941 +
            (C14037 * C2311 + (C8521 + C8522) * C50661) * C50880) *
               C50783 -
           ((C8830 * C50661 + C14036 * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C1695) *
              C50703 * C1047 +
          (((C8117 * C2311 + (C8114 + C8113) * C50661) * C50941 +
            (C14452 * C2311 + (C8843 + C8844) * C50661) * C50880) *
               C1695 -
           (((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
              C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
                 C50661 +
             (C8522 + C8521) * C2311) *
                C50880 +
            ((C8844 + C8843) * C50661 + C8830 * C2311) * C50941) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C2311 +
            (C8109 + C8110) * C50661) *
               C50941 +
           ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
              C1861 -
          ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
           (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
              C1862 +
          (((C14061 + C14060) * C2311 + C14037 * C50661) * C50941 +
           ((C16463 + C16464) * C2311 + (C14062 + C14063) * C50661) * C50880) *
              C1863 -
          (((C8058 * C6539 - C8059 * C6537 - C8058 * C6540 + C50852 * C6543 +
             C8056 * C5554 - C8057 * C5550 - C8056 * C5555 + C50940 * C5559) *
                C50661 +
            (C8058 * C6541 - C8059 * C6538 - C8058 * C6542 + C50852 * C6544 +
             C8056 * C5552 - C8057 * C5549 - C8056 * C5553 + C50940 * C5558) *
                C2311) *
               C50880 +
           ((C14063 + C14062) * C50661 + (C16464 + C16463) * C2311) * C50941) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C50974 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C50975 +
           (((C14061 + C14060) * C2311 + C14037 * C50661) * C50941 +
            ((C16463 + C16464) * C2311 + (C14062 + C14063) * C50661) * C50880) *
               C2111) *
              C50703 * C50919 +
          (((C14026 * C2311 + C14452 * C50661) * C50941 +
            (C14037 * C2311 + (C8521 + C8522) * C50661) * C50880) *
               C50975 -
           ((C8830 * C50661 + C14036 * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C50974 -
           (((C8058 * C6115 - C8059 * C6114 - C8058 * C6116 + C50852 * C6117 +
              C8056 * C1871 - C8057 * C1866 - C8056 * C1872 + C50940 * C1878) *
                 C50661 +
             (C14063 + C14062) * C2311) *
                C50880 +
            ((C8522 + C8521) * C50661 + C14027 * C2311) * C50941) *
               C2111) *
              C50703 * C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C1695 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C50783) *
              C50703 * C1046 +
          (((C14026 * C2311 + C14452 * C50661) * C50941 +
            (C14037 * C2311 + (C8521 + C8522) * C50661) * C50880) *
               C50783 -
           ((C8830 * C50661 + C14036 * C2311) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C2311) * C50941) *
               C1695) *
              C50703 * C1047 +
          (((C8117 * C2311 + (C8114 + C8113) * C50661) * C50941 +
            (C14452 * C2311 + (C8843 + C8844) * C50661) * C50880) *
               C1695 -
           (((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
              C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
                 C50661 +
             (C8522 + C8521) * C2311) *
                C50880 +
            ((C8844 + C8843) * C50661 + C8830 * C2311) * C50941) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C2311 +
             (C8109 + C8110) * C50661) *
                C50941 +
            ((C14058 + C14059) * C2311 + C14026 * C50661) * C50880) *
               C1695 -
           ((C14027 * C50661 + (C14060 + C14061) * C2311) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C2311) * C50941) *
               C50783) *
              C280 +
          ((((C14737 + C14738) * C2311 + C14719 * C50661) * C50941 +
            ((C15271 + C15272) * C2311 + (C14739 + C14740) * C50661) * C50880) *
               C50783 -
           ((C14728 * C50661 + (C14738 + C14737) * C2311) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C2311) *
                C50941) *
               C1695) *
              C281 +
          ((((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C2311 +
             (C8317 + C8318) * C50661) *
                C50941 +
            ((C15931 + C15932) * C2311 + (C13822 + C13823) * C50661) * C50880) *
               C1695 -
           (((C8058 * C3743 - C8059 * C3741 - C8058 * C3744 + C50852 * C3747 +
              C8056 * C2733 - C8057 * C2729 - C8056 * C2734 + C50940 * C2738) *
                 C50661 +
             (C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748 +
              C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737) *
                 C2311) *
                C50880 +
            ((C13823 + C13822) * C50661 + (C15932 + C15931) * C2311) * C50941) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C50927 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C50755) *
              C50970 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2947 + C2948 + C2949) * C50661) *
               C50816 * C50719 * C50755 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C50927) *
              C50971 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C50719 * C50927 -
           ((C2317 * C1124 - C2318 * C1120 - C2317 * C1125 + C2310 * C1132 +
             C2315 * C309 - C2316 * C292 - C2315 * C310 + C2309 * C322 +
             C2313 * C295 - C2314 * C285 - C2313 * C296 + C2308 * C315) *
                C50661 +
            (C2949 + C2948 + C2947) * C2311) *
               C50816 * C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C50927 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C50755) *
              C50970 +
          ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
               C50719 * C50755 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C50927) *
              C50971 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C50719 * C50927 -
           ((C117 * C654 - C118 * C653 - C117 * C655 + C50800 * C656) * C109 +
            C664 * C108 + C362 * C107 + C363 * C106) *
               C50816 * C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C50719 * C50927 -
           ((C5401 * C50661 +
             (C117 * C1244 - C118 * C1237 - C117 * C1245 + C50800 * C1249) *
                 C2311) *
                C5235 +
            (C944 * C50661 +
             (C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) *
                 C2311) *
                C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C50719 * C50755) *
              C50970 +
          (((C364 * C2311 + C363 * C50661) * C5233 +
            (C944 * C2311 + C945 * C50661) * C5234 +
            (C5401 * C2311 + C5770 * C50661) * C5235) *
               C50719 * C50755 -
           (C5598 * C5235 + (C5585 + C5584) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C50719 * C50927) *
              C50971 +
          (((C179 * C2311 + C180 * C50661) * C5233 +
            (C546 * C2311 + C545 * C50661) * C5234 +
            (C549 * C2311 + C550 * C50661) * C5235) *
               C50719 * C50927 -
           (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                 C50661 +
             C5770 * C2311) *
                C5235 +
            (C946 * C50661 + C945 * C2311) * C5234 +
            (C362 * C50661 + C363 * C2311) * C5233) *
               C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C2311 +
             (C2374 + C2375 + C2376) * C50661) *
                C50816 * C50928 -
            ((C2777 + C2778 + C2779) * C50661 +
             (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
              C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
              C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                 C2311) *
                C50816 * C50783) *
               C50927 +
           (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
              C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
              C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                 C2311 +
             (C3341 + C3342 + C3343) * C50661) *
                C50816 * C50783 -
            ((C2577 + C2578 + C2579) * C50661 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C2311) *
                C50816 * C50928) *
               C50755) *
              C283 +
          ((((C2779 + C2778 + C2777) * C2311 +
             (C3114 + C3115 + C3116) * C50661) *
                C50816 * C50783 -
            ((C2377 + C2378 + C2379) * C50661 +
             (C2376 + C2375 + C2374) * C2311) *
                C50816 * C50928) *
               C50927 +
           (((C2579 + C2578 + C2577) * C2311 +
             (C2947 + C2948 + C2949) * C50661) *
                C50816 * C50928 -
            ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
              C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
              C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                 C50661 +
             (C3343 + C3342 + C3341) * C2311) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
             C178 * C107 + C179 * C108 + C180 * C109) *
                C50816 * C50928 -
            (C545 * C109 + C546 * C108 + C547 * C107 +
             (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
                C50816 * C50783) *
               C50927 +
           (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
             C944 * C107 + C945 * C108 + C946 * C109) *
                C50816 * C50783 -
            (C362 * C109 + C363 * C108 + C364 * C107 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
                C50816 * C50928) *
               C50755) *
              C283 +
          (((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
                C50783 -
            (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
                C50928) *
               C50927 +
           ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
                C50928 -
            ((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) * C109 +
             C946 * C108 + C945 * C107 + C944 * C106) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C2311 +
              C178 * C50661) *
                 C5233 +
             (C5611 + C5566) * C5234 + C5617 * C5235) *
                C50928 -
            ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
             (C5566 + C5611) * C5233) *
                C50783) *
               C50927 +
           (((C6146 + C6123) * C5233 + (C6147 + C6128) * C5234 +
             ((C117 * C4643 - C118 * C4636 - C117 * C4644 + C50800 * C4648) *
                  C2311 +
              C6145 * C50661) *
                 C5235) *
                C50783 -
            ((C6128 + C6147) * C5235 + (C6123 + C6146) * C5234 +
             (C364 * C50661 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C2311) *
                 C5233) *
                C50928) *
               C50755) *
              C283 +
          ((((C5584 + C5585) * C5233 + (C5586 + C5587) * C5234 +
             (C5615 + C5616) * C5235) *
                C50783 -
            (C5598 * C5235 + (C5585 + C5584) * C5234 +
             (C179 * C50661 + C178 * C2311) * C5233) *
                C50928) *
               C50927 +
           (((C364 * C2311 + C363 * C50661) * C5233 + (C6133 + C6134) * C5234 +
             (C6135 + C6136) * C5235) *
                C50928 -
            (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                  C50661 +
              C6145 * C2311) *
                 C5235 +
             (C6136 + C6135) * C5234 + (C6134 + C6133) * C5233) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                   C106 +
               C178 * C107 + C179 * C108 + C180 * C109) *
                  C50816 * C50719 * C50703 * C113 -
              (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
                  C50719 * C50703 * C114 +
              (C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
                  C50719 * C50703 * C115 -
              ((C117 * C138 - C118 * C125 - C117 * C139 + C50800 * C146) *
                   C109 +
               C182 * C108 + C181 * C107 + C180 * C106) *
                  C50816 * C50719 * C50703 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                    C106 +
                C178 * C107 + C179 * C108 + C180 * C109) *
                   C50816 * C50719 * C280 -
               (C362 * C109 + C363 * C108 + C364 * C107 +
                (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                    C106) *
                   C50816 * C50719 * C281 +
               ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                    C106 +
                C365 * C107 + C366 * C108 + C367 * C109) *
                   C50816 * C50719 * C282) *
                  C283 +
              ((C364 * C106 + C363 * C107 + C362 * C108 +
                (C117 * C311 - C118 * C293 - C117 * C312 + C50800 * C323) *
                    C109) *
                   C50816 * C50719 * C281 -
               (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) *
                   C50816 * C50719 * C280 -
               ((C117 * C313 - C118 * C294 - C117 * C314 + C50800 * C324) *
                    C109 +
                C367 * C108 + C366 * C107 + C365 * C106) *
                   C50816 * C50719 * C282) *
                  C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C465 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C466 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
            C548 * C107 + C549 * C108 + C550 * C109) *
               C50816 * C467) *
              C50703 * C283 +
          ((C547 * C106 + C546 * C107 + C545 * C108 +
            (C117 * C494 - C118 * C476 - C117 * C495 + C50800 * C506) * C109) *
               C50816 * C466 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C465 -
           ((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C109 +
            C550 * C108 + C549 * C107 + C548 * C106) *
               C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C50719 * C50703 * C113 -
          ((C2377 + C2378 + C2379) * C50661 + (C2376 + C2375 + C2374) * C2311) *
              C50816 * C50719 * C50703 * C114 +
          ((C2379 + C2378 + C2377) * C2311 + (C2380 + C2381 + C2382) * C50661) *
              C50816 * C50719 * C50703 * C115 -
          ((C2317 * C313 - C2318 * C294 - C2317 * C314 + C2310 * C324 +
            C2315 * C311 - C2316 * C293 - C2315 * C312 + C2309 * C323 +
            C2313 * C134 - C2314 * C123 - C2313 * C135 + C2308 * C144) *
               C50661 +
           (C2382 + C2381 + C2380) * C2311) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C280 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C281 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C50719 * C282) *
              C283 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2313 * C297 - C2314 * C286 - C2313 * C298 + C2308 * C316 +
             C2315 * C307 - C2316 * C291 - C2315 * C308 + C2309 * C321 +
             C2317 * C1126 - C2318 * C1121 - C2317 * C1127 + C2310 * C1133) *
                C50661) *
               C50816 * C50719 * C281 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C280 -
           ((C2317 * C2535 - C2318 * C2530 - C2317 * C2536 + C2310 * C2539 +
             C2315 * C1126 - C2316 * C1121 - C2315 * C1127 + C2309 * C1133 +
             C2313 * C307 - C2314 * C291 - C2313 * C308 + C2308 * C321) *
                C50661 +
            (C2582 + C2581 + C2580) * C2311) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C465 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C466 +
           ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
             C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
             C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
                C2311 +
            (C2780 + C2781 + C2782) * C50661) *
               C50816 * C467) *
              C50703 * C283 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C2313 * C480 - C2314 * C469 - C2313 * C481 + C2308 * C499 +
             C2315 * C914 - C2316 * C907 - C2315 * C915 + C2309 * C922 +
             C2317 * C1587 - C2318 * C1582 - C2317 * C1588 + C2310 * C1594) *
                C50661) *
               C50816 * C466 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C465 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50661 +
            (C2782 + C2781 + C2780) * C2311) *
               C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
            C178 * C50661) *
               C5233 +
           ((C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C2311 +
            C547 * C50661) *
               C5234 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C2311 +
            C548 * C50661) *
               C5235) *
              C50719 * C50703 * C113 -
          ((C549 * C50661 + C548 * C2311) * C5235 +
           (C546 * C50661 + C547 * C2311) * C5234 +
           (C179 * C50661 + C178 * C2311) * C5233) *
              C50719 * C50703 * C114 +
          ((C179 * C2311 + C180 * C50661) * C5233 +
           (C546 * C2311 + C545 * C50661) * C5234 +
           (C549 * C2311 + C550 * C50661) * C5235) *
              C50719 * C50703 * C115 -
          (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C50661 +
            C550 * C2311) *
               C5235 +
           (C775 * C50661 + C545 * C2311) * C5234 +
           (C181 * C50661 + C180 * C2311) * C5233) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            ((C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C2311 +
             C547 * C50661) *
                C5234 +
            ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C2311 +
             C548 * C50661) *
                C5235) *
               C50719 * C280 -
           ((C5401 * C50661 +
             (C117 * C1244 - C118 * C1237 - C117 * C1245 + C50800 * C1249) *
                 C2311) *
                C5235 +
            (C944 * C50661 +
             (C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) *
                 C2311) *
                C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C50719 * C281 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C2311 +
             C365 * C50661) *
                C5233 +
            ((C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                 C2311 +
             C5402 * C50661) *
                C5234 +
            ((C117 * C2731 - C118 * C2728 - C117 * C2732 + C50800 * C2737) *
                 C2311 +
             C5403 * C50661) *
                C5235) *
               C50719 * C282) *
              C283 +
          (((C364 * C2311 + C363 * C50661) * C5233 +
            (C944 * C2311 + C945 * C50661) * C5234 +
            (C5401 * C2311 +
             (C117 * C1240 - C118 * C1235 - C117 * C1241 + C50800 * C1247) *
                 C50661) *
                C5235) *
               C50719 * C281 -
           ((C549 * C50661 + C548 * C2311) * C5235 +
            (C546 * C50661 + C547 * C2311) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C50719 * C280 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C50661 +
             C5403 * C2311) *
                C5235 +
            ((C117 * C1587 - C118 * C1582 - C117 * C1588 + C50800 * C1594) *
                 C50661 +
             C5402 * C2311) *
                C5234 +
            (C366 * C50661 + C365 * C2311) * C5233) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C465 -
           ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
            (C5566 + C5611) * C5233) *
               C466 +
           (C5617 * C5233 + (C5614 + C5613) * C5234 +
            ((C117 * C5552 - C118 * C5549 - C117 * C5553 + C50800 * C5558) *
                 C2311 +
             C5609 * C50661) *
                C5235) *
               C467) *
              C50703 * C283 +
          (((C5584 + C5585) * C5233 + (C5586 + C5587) * C5234 +
            (C5615 + C5616) * C5235) *
               C466 -
           (C5598 * C5235 + (C5585 + C5584) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C465 -
           (((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                 C50661 +
             C5609 * C2311) *
                C5235 +
            (C5616 + C5615) * C5234 + C5598 * C5233) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50928 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C50703 * C50970 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C3114 + C3115 + C3116) * C50661) *
               C50816 * C50783 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50928) *
              C50703 * C50971 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C50928 -
           ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
             C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
             C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
                C50661 +
            (C3116 + C3115 + C3114) * C2311) *
               C50816 * C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50928 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C50703 * C50970 +
          ((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
               C50783 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50928) *
              C50703 * C50971 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C50928 -
           ((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C109 +
            C775 * C108 + C545 * C107 + C546 * C106) *
               C50816 * C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C50928 -
           ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
            (C5566 + C5611) * C5233) *
               C50783) *
              C50703 * C50970 +
          (((C5584 + C5585) * C5233 + (C5586 + C5587) * C5234 +
            (C5615 + C5616) * C5235) *
               C50783 -
           (C5598 * C5235 + (C5585 + C5584) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C50928) *
              C50703 * C50971 +
          (((C179 * C2311 + C180 * C50661) * C5233 + (C5917 + C5918) * C5234 +
            (C5919 + C5920) * C5235) *
               C50928 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C50661 +
             C5610 * C2311) *
                C5235 +
            (C5920 + C5919) * C5234 + (C5918 + C5917) * C5233) *
               C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C280 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C281 +
           ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C50719 * C282) *
              C283 +
          ((C364 * C106 + C363 * C107 + C362 * C108 +
            (C117 * C311 - C118 * C293 - C117 * C312 + C50800 * C323) * C109) *
               C50816 * C50719 * C281 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C280 -
           ((C117 * C313 - C118 * C294 - C117 * C314 + C50800 * C324) * C109 +
            C367 * C108 + C366 * C107 + C365 * C106) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
           C178 * C107 + C179 * C108 + C180 * C109) *
              C50816 * C50719 * C50703 * C113 -
          (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
              C50719 * C50703 * C114 +
          (C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
              C50719 * C50703 * C115 -
          ((C117 * C138 - C118 * C125 - C117 * C139 + C50800 * C146) * C109 +
           C182 * C108 + C181 * C107 + C180 * C106) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C50719 * C50703 * C113 -
          ((C2377 + C2378 + C2379) * C50661 + (C2376 + C2375 + C2374) * C2311) *
              C50816 * C50719 * C50703 * C114 +
          ((C2379 + C2378 + C2377) * C2311 + (C2380 + C2381 + C2382) * C50661) *
              C50816 * C50719 * C50703 * C115 -
          ((C2317 * C313 - C2318 * C294 - C2317 * C314 + C2310 * C324 +
            C2315 * C311 - C2316 * C293 - C2315 * C312 + C2309 * C323 +
            C2313 * C134 - C2314 * C123 - C2313 * C135 + C2308 * C144) *
               C50661 +
           (C2382 + C2381 + C2380) * C2311) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C280 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C281 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C50719 * C282) *
              C283 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2313 * C297 - C2314 * C286 - C2313 * C298 + C2308 * C316 +
             C2315 * C307 - C2316 * C291 - C2315 * C308 + C2309 * C321 +
             C2317 * C1126 - C2318 * C1121 - C2317 * C1127 + C2310 * C1133) *
                C50661) *
               C50816 * C50719 * C281 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C280 -
           ((C2317 * C2535 - C2318 * C2530 - C2317 * C2536 + C2310 * C2539 +
             C2315 * C1126 - C2316 * C1121 - C2315 * C1127 + C2309 * C1133 +
             C2313 * C307 - C2314 * C291 - C2313 * C308 + C2308 * C321) *
                C50661 +
            (C2582 + C2581 + C2580) * C2311) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
            C178 * C50661) *
               C5233 +
           ((C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C2311 +
            C547 * C50661) *
               C5234 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C2311 +
            C548 * C50661) *
               C5235) *
              C50719 * C50703 * C113 -
          ((C549 * C50661 + C548 * C2311) * C5235 +
           (C546 * C50661 + C547 * C2311) * C5234 +
           (C179 * C50661 + C178 * C2311) * C5233) *
              C50719 * C50703 * C114 +
          ((C179 * C2311 + C180 * C50661) * C5233 +
           (C546 * C2311 + C545 * C50661) * C5234 +
           (C549 * C2311 + C550 * C50661) * C5235) *
              C50719 * C50703 * C115 -
          (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C50661 +
            C550 * C2311) *
               C5235 +
           (C775 * C50661 + C545 * C2311) * C5234 +
           (C181 * C50661 + C180 * C2311) * C5233) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            ((C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C2311 +
             C547 * C50661) *
                C5234 +
            ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C2311 +
             C548 * C50661) *
                C5235) *
               C50719 * C280 -
           ((C5401 * C50661 +
             (C117 * C1244 - C118 * C1237 - C117 * C1245 + C50800 * C1249) *
                 C2311) *
                C5235 +
            (C944 * C50661 +
             (C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) *
                 C2311) *
                C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C50719 * C281 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C2311 +
             C365 * C50661) *
                C5233 +
            ((C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                 C2311 +
             C5402 * C50661) *
                C5234 +
            ((C117 * C2731 - C118 * C2728 - C117 * C2732 + C50800 * C2737) *
                 C2311 +
             C5403 * C50661) *
                C5235) *
               C50719 * C282) *
              C283 +
          (((C364 * C2311 + C363 * C50661) * C5233 +
            (C944 * C2311 + C945 * C50661) * C5234 +
            (C5401 * C2311 +
             (C117 * C1240 - C118 * C1235 - C117 * C1241 + C50800 * C1247) *
                 C50661) *
                C5235) *
               C50719 * C281 -
           ((C549 * C50661 + C548 * C2311) * C5235 +
            (C546 * C50661 + C547 * C2311) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C50719 * C280 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C50661 +
             C5403 * C2311) *
                C5235 +
            ((C117 * C1587 - C118 * C1582 - C117 * C1588 + C50800 * C1594) *
                 C50661 +
             C5402 * C2311) *
                C5234 +
            (C366 * C50661 + C365 * C2311) * C5233) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C50972 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C50973 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C50719 * C1350) *
              C50919 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2947 + C2948 + C2949) * C50661) *
               C50816 * C50719 * C50973 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C50972 -
           ((C2317 * C2535 - C2318 * C2530 - C2317 * C2536 + C2310 * C2539 +
             C2315 * C1126 - C2316 * C1121 - C2315 * C1127 + C2309 * C1133 +
             C2313 * C307 - C2314 * C291 - C2313 * C308 + C2308 * C321) *
                C50661 +
            (C2582 + C2581 + C2580) * C2311) *
               C50816 * C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C50972 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C50973 +
           ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C50719 * C1350) *
              C50919 +
          ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
               C50719 * C50973 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C50972 -
           ((C117 * C313 - C118 * C294 - C117 * C314 + C50800 * C324) * C109 +
            C367 * C108 + C366 * C107 + C365 * C106) *
               C50816 * C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C50719 * C50972 -
           (C6551 * C5235 + (C6123 + C6146) * C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C50719 * C50973 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C2311 +
             C365 * C50661) *
                C5233 +
            ((C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                 C2311 +
             C5402 * C50661) *
                C5234 +
            ((C117 * C2731 - C118 * C2728 - C117 * C2732 + C50800 * C2737) *
                 C2311 +
             C5403 * C50661) *
                C5235) *
               C50719 * C1350) *
              C50919 +
          (((C364 * C2311 + C363 * C50661) * C5233 + (C6133 + C6134) * C5234 +
            (C6135 + C6136) * C5235) *
               C50719 * C50973 -
           (C5598 * C5235 + (C5585 + C5584) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C50719 * C50972 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C50661 +
             C5403 * C2311) *
                C5235 +
            ((C117 * C1587 - C118 * C1582 - C117 * C1588 + C50800 * C1594) *
                 C50661 +
             C5402 * C2311) *
                C5234 +
            (C366 * C50661 + C365 * C2311) * C5233) *
               C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50928 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C50972 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C50783 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50928) *
              C50973 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C50928 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50661 +
            (C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596) *
                C2311) *
               C50816 * C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50928 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C50972 +
          (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
            C944 * C107 + C945 * C108 + C946 * C109) *
               C50816 * C50783 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50928) *
              C50973 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C50928 -
           ((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                C109 +
            (C117 * C1587 - C118 * C1582 - C117 * C1588 + C50800 * C1594) *
                C108 +
            (C117 * C1589 - C118 * C1583 - C117 * C1590 + C50800 * C1595) *
                C107 +
            (C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                C106) *
               C50816 * C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C50928 -
           ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
            (C5566 + C5611) * C5233) *
               C50783) *
              C50972 +
          (((C6146 + C6123) * C5233 + (C6147 + C6128) * C5234 +
            (C6555 + C6550) * C5235) *
               C50783 -
           (C6551 * C5235 + (C6123 + C6146) * C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C50928) *
              C50973 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C2311 +
             C365 * C50661) *
                C5233 +
            (C7058 + C7046) * C5234 + (C7059 + C7051) * C5235) *
               C50928 -
           (((C117 * C4637 - C118 * C4633 - C117 * C4638 + C50800 * C4645) *
                 C50661 +
             (C117 * C4641 - C118 * C4635 - C117 * C4642 + C50800 * C4647) *
                 C2311) *
                C5235 +
            (C7051 + C7059) * C5234 + (C7046 + C7058) * C5233) *
               C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                    C106 +
                C178 * C107 + C179 * C108 + C180 * C109) *
                   C50816 * C50719 * C1044 -
               (C362 * C109 + C363 * C108 + C364 * C107 +
                (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                    C106) *
                   C50816 * C50719 * C50755) *
                  C1046 +
              ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) *
                   C50816 * C50719 * C50755 -
               (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) *
                   C50816 * C50719 * C1044) *
                  C1047 +
              ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) *
                   C50816 * C50719 * C1044 -
               ((C117 * C654 - C118 * C653 - C117 * C655 + C50800 * C656) *
                    C109 +
                C664 * C108 + C362 * C107 + C363 * C106) *
                   C50816 * C50719 * C50755) *
                  C1048) +
         0.5 * std::pow(Pi, 2.5) *
             (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                   C106 +
               C178 * C107 + C179 * C108 + C180 * C109) *
                  C50816 * C50719 * C1115 -
              (C362 * C109 + C363 * C108 + C364 * C107 +
               (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                   C106) *
                  C50816 * C50719 * C1116 +
              ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                   C106 +
               C365 * C107 + C366 * C108 + C367 * C109) *
                  C50816 * C50719 * C1117 -
              ((C117 * C1124 - C118 * C1120 - C117 * C1125 + C50800 * C1132) *
                   C109 +
               (C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
                   C108 +
               (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                   C107 +
               (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                   C106) *
                  C50816 * C50719 * C1118) *
             C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C465 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C466 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
            C548 * C107 + C549 * C108 + C550 * C109) *
               C50816 * C467) *
              C1044 +
          (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
            C944 * C107 + C945 * C108 + C946 * C109) *
               C50816 * C466 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C465 -
           ((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                C109 +
            (C117 * C1240 - C118 * C1235 - C117 * C1241 + C50800 * C1247) *
                C108 +
            (C117 * C1242 - C118 * C1236 - C117 * C1243 + C50800 * C1248) *
                C107 +
            (C117 * C1244 - C118 * C1237 - C117 * C1245 + C50800 * C1249) *
                C106) *
               C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C1044 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2947 + C2948 + C2949) * C50661) *
               C50816 * C50719 * C50755 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C1044) *
              C1047 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C50719 * C1044 -
           ((C2317 * C1124 - C2318 * C1120 - C2317 * C1125 + C2310 * C1132 +
             C2315 * C309 - C2316 * C292 - C2315 * C310 + C2309 * C322 +
             C2313 * C295 - C2314 * C285 - C2313 * C296 + C2308 * C315) *
                C50661 +
            (C2949 + C2948 + C2947) * C2311) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C50719 * C1115 -
          ((C2577 + C2578 + C2579) * C50661 +
           (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
            C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
            C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
               C2311) *
              C50816 * C50719 * C1116 +
          ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
            C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
            C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
               C2311 +
           (C2580 + C2581 + C2582) * C50661) *
              C50816 * C50719 * C1117 -
          ((C2317 * C3589 - C2318 * C3587 - C2317 * C3590 + C2310 * C3593 +
            C2315 * C2533 - C2316 * C2529 - C2315 * C2534 + C2309 * C2538 +
            C2313 * C1128 - C2314 * C1122 - C2313 * C1129 + C2308 * C1134) *
               C50661 +
           (C2317 * C3591 - C2318 * C3588 - C2317 * C3592 + C2310 * C3594 +
            C2315 * C2531 - C2316 * C2528 - C2315 * C2532 + C2309 * C2537 +
            C2313 * C1130 - C2314 * C1123 - C2313 * C1131 + C2308 * C1135) *
               C2311) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C465 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C466 +
           ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
             C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
             C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
                C2311 +
            (C2780 + C2781 + C2782) * C50661) *
               C50816 * C467) *
              C1044 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C466 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C465 -
           ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
             C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
             C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                C50661 +
            (C2317 * C3745 - C2318 * C3742 - C2317 * C3746 + C2310 * C3748 +
             C2315 * C2731 - C2316 * C2728 - C2315 * C2732 + C2309 * C2737 +
             C2313 * C1244 - C2314 * C1237 - C2313 * C1245 + C2308 * C1249) *
                C2311) *
               C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C50719 * C1044 -
           ((C6128 + C6147) * C5235 + (C6123 + C6146) * C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C50719 * C50755) *
              C1046 +
          (((C364 * C2311 + C363 * C50661) * C5233 + (C6133 + C6134) * C5234 +
            (C6135 + C6136) * C5235) *
               C50719 * C50755 -
           (C5598 * C5235 + (C5585 + C5584) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C50719 * C1044) *
              C1047 +
          (((C179 * C2311 + C180 * C50661) * C5233 + (C5917 + C5918) * C5234 +
            (C5919 + C5920) * C5235) *
               C50719 * C1044 -
           (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                 C50661 +
             C5770 * C2311) *
                C5235 +
            (C946 * C50661 + C945 * C2311) * C5234 +
            (C362 * C50661 + C363 * C2311) * C5233) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
            C178 * C50661) *
               C5233 +
           (C5611 + C5566) * C5234 + C5617 * C5235) *
              C50719 * C1115 -
          ((C6128 + C6147) * C5235 + (C6123 + C6146) * C5234 +
           (C364 * C50661 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C2311) *
               C5233) *
              C50719 * C1116 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C2311 +
            C365 * C50661) *
               C5233 +
           ((C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                C2311 +
            C5402 * C50661) *
               C5234 +
           ((C117 * C2731 - C118 * C2728 - C117 * C2732 + C50800 * C2737) *
                C2311 +
            C5403 * C50661) *
               C5235) *
              C50719 * C1117 -
          (((C117 * C3743 - C118 * C3741 - C117 * C3744 + C50800 * C3747) *
                C50661 +
            (C117 * C3745 - C118 * C3742 - C117 * C3746 + C50800 * C3748) *
                C2311) *
               C5235 +
           ((C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                C50661 +
            (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                C2311) *
               C5234 +
           ((C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                C50661 +
            (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                C2311) *
               C5233) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C465 -
           ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
            (C5566 + C5611) * C5233) *
               C466 +
           (C5617 * C5233 + (C5614 + C5613) * C5234 +
            ((C117 * C5552 - C118 * C5549 - C117 * C5553 + C50800 * C5558) *
                 C2311 +
             C5609 * C50661) *
                C5235) *
               C467) *
              C1044 +
          (((C6146 + C6123) * C5233 + (C6147 + C6128) * C5234 +
            (C6555 + C6550) * C5235) *
               C466 -
           (C6551 * C5235 + (C6123 + C6146) * C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C465 -
           (((C117 * C6539 - C118 * C6537 - C117 * C6540 + C50800 * C6543) *
                 C50661 +
             (C117 * C6541 - C118 * C6538 - C117 * C6542 + C50800 * C6544) *
                 C2311) *
                C5235 +
            (C6550 + C6555) * C5234 + C6551 * C5233) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C2311 +
             (C2374 + C2375 + C2376) * C50661) *
                C50816 * C50928 -
            ((C2777 + C2778 + C2779) * C50661 +
             (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
              C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
              C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                 C2311) *
                C50816 * C50783) *
               C1044 +
           (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
              C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
              C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                 C2311 +
             (C3341 + C3342 + C3343) * C50661) *
                C50816 * C50783 -
            ((C2577 + C2578 + C2579) * C50661 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C2311) *
                C50816 * C50928) *
               C50755) *
              C50919 +
          ((((C2779 + C2778 + C2777) * C2311 +
             (C3114 + C3115 + C3116) * C50661) *
                C50816 * C50783 -
            ((C2377 + C2378 + C2379) * C50661 +
             (C2376 + C2375 + C2374) * C2311) *
                C50816 * C50928) *
               C1044 +
           (((C2579 + C2578 + C2577) * C2311 +
             (C2947 + C2948 + C2949) * C50661) *
                C50816 * C50928 -
            ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
              C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
              C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                 C50661 +
             (C3343 + C3342 + C3341) * C2311) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
             C178 * C107 + C179 * C108 + C180 * C109) *
                C50816 * C50928 -
            (C545 * C109 + C546 * C108 + C547 * C107 +
             (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
                C50816 * C50783) *
               C1044 +
           (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
             C944 * C107 + C945 * C108 + C946 * C109) *
                C50816 * C50783 -
            (C362 * C109 + C363 * C108 + C364 * C107 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
                C50816 * C50928) *
               C50755) *
              C50919 +
          (((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
                C50783 -
            (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
                C50928) *
               C1044 +
           ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
                C50928 -
            ((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) * C109 +
             C946 * C108 + C945 * C107 + C944 * C106) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C2311 +
              C178 * C50661) *
                 C5233 +
             (C5611 + C5566) * C5234 + C5617 * C5235) *
                C50928 -
            ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
             (C5566 + C5611) * C5233) *
                C50783) *
               C1044 +
           (((C6146 + C6123) * C5233 + (C6147 + C6128) * C5234 +
             (C6555 + C6550) * C5235) *
                C50783 -
            (C6551 * C5235 + (C6123 + C6146) * C5234 +
             (C364 * C50661 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C2311) *
                 C5233) *
                C50928) *
               C50755) *
              C50919 +
          ((((C5584 + C5585) * C5233 + (C5586 + C5587) * C5234 +
             (C5615 + C5616) * C5235) *
                C50783 -
            (C5598 * C5235 + (C5585 + C5584) * C5234 +
             (C179 * C50661 + C178 * C2311) * C5233) *
                C50928) *
               C1044 +
           (((C364 * C2311 + C363 * C50661) * C5233 + (C6133 + C6134) * C5234 +
             (C6135 + C6136) * C5235) *
                C50928 -
            (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                  C50661 +
              C6145 * C2311) *
                 C5235 +
             (C6136 + C6135) * C5234 + (C6134 + C6133) * C5233) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
           C178 * C107 + C179 * C108 + C180 * C109) *
              C50816 * C50719 * C1115 -
          (C362 * C109 + C363 * C108 + C364 * C107 +
           (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
              C50816 * C50719 * C1116 +
          ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
           C365 * C107 + C366 * C108 + C367 * C109) *
              C50816 * C50719 * C1117 -
          ((C117 * C1124 - C118 * C1120 - C117 * C1125 + C50800 * C1132) *
               C109 +
           (C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
               C108 +
           (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
               C107 +
           (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
               C106) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C1044 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C50755) *
              C1046 +
          ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
               C50719 * C50755 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C1044) *
              C1047 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C50719 * C1044 -
           ((C117 * C654 - C118 * C653 - C117 * C655 + C50800 * C656) * C109 +
            C664 * C108 + C362 * C107 + C363 * C106) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C1044 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2947 + C2948 + C2949) * C50661) *
               C50816 * C50719 * C50755 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C1044) *
              C1047 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C50719 * C1044 -
           ((C2317 * C1124 - C2318 * C1120 - C2317 * C1125 + C2310 * C1132 +
             C2315 * C309 - C2316 * C292 - C2315 * C310 + C2309 * C322 +
             C2313 * C295 - C2314 * C285 - C2313 * C296 + C2308 * C315) *
                C50661 +
            (C2949 + C2948 + C2947) * C2311) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C50719 * C1115 -
          ((C2577 + C2578 + C2579) * C50661 +
           (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
            C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
            C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
               C2311) *
              C50816 * C50719 * C1116 +
          ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
            C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
            C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
               C2311 +
           (C2580 + C2581 + C2582) * C50661) *
              C50816 * C50719 * C1117 -
          ((C2317 * C3589 - C2318 * C3587 - C2317 * C3590 + C2310 * C3593 +
            C2315 * C2533 - C2316 * C2529 - C2315 * C2534 + C2309 * C2538 +
            C2313 * C1128 - C2314 * C1122 - C2313 * C1129 + C2308 * C1134) *
               C50661 +
           (C2317 * C3591 - C2318 * C3588 - C2317 * C3592 + C2310 * C3594 +
            C2315 * C2531 - C2316 * C2528 - C2315 * C2532 + C2309 * C2537 +
            C2313 * C1130 - C2314 * C1123 - C2313 * C1131 + C2308 * C1135) *
               C2311) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C50719 * C1044 -
           ((C6128 + C6147) * C5235 + (C6123 + C6146) * C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C50719 * C50755) *
              C1046 +
          (((C364 * C2311 + C363 * C50661) * C5233 + (C6133 + C6134) * C5234 +
            (C6135 + C6136) * C5235) *
               C50719 * C50755 -
           (C5598 * C5235 + (C5585 + C5584) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C50719 * C1044) *
              C1047 +
          (((C179 * C2311 + C180 * C50661) * C5233 + (C5917 + C5918) * C5234 +
            (C5919 + C5920) * C5235) *
               C50719 * C1044 -
           (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                 C50661 +
             C5770 * C2311) *
                C5235 +
            (C946 * C50661 + C945 * C2311) * C5234 +
            (C362 * C50661 + C363 * C2311) * C5233) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
            C178 * C50661) *
               C5233 +
           (C5611 + C5566) * C5234 + C5617 * C5235) *
              C50719 * C1115 -
          ((C6128 + C6147) * C5235 + (C6123 + C6146) * C5234 +
           (C364 * C50661 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C2311) *
               C5233) *
              C50719 * C1116 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C2311 +
            C365 * C50661) *
               C5233 +
           ((C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                C2311 +
            C5402 * C50661) *
               C5234 +
           ((C117 * C2731 - C118 * C2728 - C117 * C2732 + C50800 * C2737) *
                C2311 +
            C5403 * C50661) *
               C5235) *
              C50719 * C1117 -
          (((C117 * C3743 - C118 * C3741 - C117 * C3744 + C50800 * C3747) *
                C50661 +
            (C117 * C3745 - C118 * C3742 - C117 * C3746 + C50800 * C3748) *
                C2311) *
               C5235 +
           ((C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                C50661 +
            (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                C2311) *
               C5234 +
           ((C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                C50661 +
            (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                C2311) *
               C5233) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C2311 +
             (C2374 + C2375 + C2376) * C50661) *
                C50816 * C1695 -
            ((C2777 + C2778 + C2779) * C50661 +
             (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
              C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
              C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                 C2311) *
                C50816 * C50783) *
               C50927 +
           (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
              C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
              C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                 C2311 +
             (C3341 + C3342 + C3343) * C50661) *
                C50816 * C50783 -
            ((C2577 + C2578 + C2579) * C50661 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C2311) *
                C50816 * C1695) *
               C50755) *
              C50919 +
          ((((C2779 + C2778 + C2777) * C2311 +
             (C3114 + C3115 + C3116) * C50661) *
                C50816 * C50783 -
            ((C2377 + C2378 + C2379) * C50661 +
             (C2376 + C2375 + C2374) * C2311) *
                C50816 * C1695) *
               C50927 +
           (((C2579 + C2578 + C2577) * C2311 +
             (C2947 + C2948 + C2949) * C50661) *
                C50816 * C1695 -
            ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
              C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
              C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                 C50661 +
             (C3343 + C3342 + C3341) * C2311) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
             C178 * C107 + C179 * C108 + C180 * C109) *
                C50816 * C1695 -
            (C545 * C109 + C546 * C108 + C547 * C107 +
             (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
                C50816 * C50783) *
               C50927 +
           (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
             C944 * C107 + C945 * C108 + C946 * C109) *
                C50816 * C50783 -
            (C362 * C109 + C363 * C108 + C364 * C107 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
                C50816 * C1695) *
               C50755) *
              C50919 +
          (((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
                C50783 -
            (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
                C1695) *
               C50927 +
           ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
                C1695 -
            ((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) * C109 +
             C946 * C108 + C945 * C107 + C944 * C106) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C2311 +
              C178 * C50661) *
                 C5233 +
             (C5611 + C5566) * C5234 + C5617 * C5235) *
                C1695 -
            (C7458 * C5235 + (C5571 + C5612) * C5234 +
             (C5566 + C5611) * C5233) *
                C50783) *
               C50927 +
           (((C6146 + C6123) * C5233 + (C6147 + C6128) * C5234 +
             (C6555 + C6550) * C5235) *
                C50783 -
            (C6551 * C5235 + (C6123 + C6146) * C5234 +
             (C364 * C50661 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C2311) *
                 C5233) *
                C1695) *
               C50755) *
              C50919 +
          ((((C5584 + C5585) * C5233 + (C5586 + C5587) * C5234 +
             (C5615 + C5616) * C5235) *
                C50783 -
            (C5598 * C5235 + (C5585 + C5584) * C5234 +
             (C179 * C50661 + C178 * C2311) * C5233) *
                C1695) *
               C50927 +
           (((C364 * C2311 + C363 * C50661) * C5233 + (C6133 + C6134) * C5234 +
             (C6135 + C6136) * C5235) *
                C1695 -
            (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                  C50661 +
              C6145 * C2311) *
                 C5235 +
             (C6136 + C6135) * C5234 + (C6134 + C6133) * C5233) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50974 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50975 +
           ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
             C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
             C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
                C2311 +
            (C2780 + C2781 + C2782) * C50661) *
               C50816 * C2111) *
              C50927 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C50975 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50974 -
           ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
             C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
             C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                C50661 +
            (C2317 * C3745 - C2318 * C3742 - C2317 * C3746 + C2310 * C3748 +
             C2315 * C2731 - C2316 * C2728 - C2315 * C2732 + C2309 * C2737 +
             C2313 * C1244 - C2314 * C1237 - C2313 * C1245 + C2308 * C1249) *
                C2311) *
               C50816 * C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50974 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50975 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
            C548 * C107 + C549 * C108 + C550 * C109) *
               C50816 * C2111) *
              C50927 +
          (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
            C944 * C107 + C945 * C108 + C946 * C109) *
               C50816 * C50975 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50974 -
           ((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                C109 +
            (C117 * C1240 - C118 * C1235 - C117 * C1241 + C50800 * C1247) *
                C108 +
            (C117 * C1242 - C118 * C1236 - C117 * C1243 + C50800 * C1248) *
                C107 +
            (C117 * C1244 - C118 * C1237 - C117 * C1245 + C50800 * C1249) *
                C106) *
               C50816 * C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C50974 -
           (C7458 * C5235 + (C5571 + C5612) * C5234 + (C5566 + C5611) * C5233) *
               C50975 +
           (C5617 * C5233 + (C5614 + C5613) * C5234 + (C7467 + C7463) * C5235) *
               C2111) *
              C50927 +
          (((C6146 + C6123) * C5233 + (C6147 + C6128) * C5234 +
            (C6555 + C6550) * C5235) *
               C50975 -
           (C6551 * C5235 + (C6123 + C6146) * C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C50974 -
           (((C117 * C6539 - C118 * C6537 - C117 * C6540 + C50800 * C6543) *
                 C50661 +
             (C117 * C6541 - C118 * C6538 - C117 * C6542 + C50800 * C6544) *
                 C2311) *
                C5235 +
            (C6550 + C6555) * C5234 + C6551 * C5233) *
               C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                    C106 +
                C178 * C107 + C179 * C108 + C180 * C109) *
                   C50816 * C1695 -
               (C545 * C109 + C546 * C108 + C547 * C107 +
                (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) *
                    C106) *
                   C50816 * C50783) *
                  C50703 * C1046 +
              ((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) *
                   C50816 * C50783 -
               (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) *
                   C50816 * C1695) *
                  C50703 * C1047 +
              ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) *
                   C50816 * C1695 -
               ((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) *
                    C109 +
                C775 * C108 + C545 * C107 + C546 * C106) *
                   C50816 * C50783) *
                  C50703 * C1048) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                    C106 +
                C178 * C107 + C179 * C108 + C180 * C109) *
                   C50816 * C1695 -
               (C545 * C109 + C546 * C108 + C547 * C107 +
                (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) *
                    C106) *
                   C50816 * C50783) *
                  C280 +
              (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) *
                    C106 +
                C944 * C107 + C945 * C108 + C946 * C109) *
                   C50816 * C50783 -
               (C362 * C109 + C363 * C108 + C364 * C107 +
                (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                    C106) *
                   C50816 * C1695) *
                  C281 +
              (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                    C106 +
                C365 * C107 + C366 * C108 + C367 * C109) *
                   C50816 * C1695 -
               ((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                    C109 +
                (C117 * C1587 - C118 * C1582 - C117 * C1588 + C50800 * C1594) *
                    C108 +
                (C117 * C1589 - C118 * C1583 - C117 * C1590 + C50800 * C1595) *
                    C107 +
                (C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                    C106) *
                   C50816 * C50783) *
                  C282) *
             C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
           C178 * C107 + C179 * C108 + C180 * C109) *
              C50816 * C1861 -
          (C545 * C109 + C546 * C108 + C547 * C107 +
           (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
              C50816 * C1862 +
          ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
           C548 * C107 + C549 * C108 + C550 * C109) *
              C50816 * C1863 -
          ((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
               C109 +
           (C117 * C1871 - C118 * C1866 - C117 * C1872 + C50800 * C1878) *
               C108 +
           (C117 * C1873 - C118 * C1867 - C117 * C1874 + C50800 * C1879) *
               C107 +
           (C117 * C1875 - C118 * C1868 - C117 * C1876 + C50800 * C1880) *
               C106) *
              C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C1695 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C3114 + C3115 + C3116) * C50661) *
               C50816 * C50783 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C1695) *
              C50703 * C1047 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C1695 -
           ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
             C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
             C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
                C50661 +
            (C3116 + C3115 + C3114) * C2311) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C1695 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C280 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C50783 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C1695) *
              C281 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C1695 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50661 +
            (C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596) *
                C2311) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C1861 -
          ((C2777 + C2778 + C2779) * C50661 +
           (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
            C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
            C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
               C2311) *
              C50816 * C1862 +
          ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
            C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
            C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
               C2311 +
           (C2780 + C2781 + C2782) * C50661) *
              C50816 * C1863 -
          ((C2317 * C4637 - C2318 * C4633 - C2317 * C4638 + C2310 * C4645 +
            C2315 * C4639 - C2316 * C4634 - C2315 * C4640 + C2309 * C4646 +
            C2313 * C1873 - C2314 * C1867 - C2313 * C1874 + C2308 * C1879) *
               C50661 +
           (C2317 * C4641 - C2318 * C4635 - C2317 * C4642 + C2310 * C4647 +
            C2315 * C4643 - C2316 * C4636 - C2315 * C4644 + C2309 * C4648 +
            C2313 * C1875 - C2314 * C1868 - C2313 * C1876 + C2308 * C1880) *
               C2311) *
              C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C1695 -
           ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
            (C5566 + C5611) * C5233) *
               C50783) *
              C50703 * C1046 +
          (((C5584 + C5585) * C5233 + (C5586 + C5587) * C5234 +
            (C5615 + C5616) * C5235) *
               C50783 -
           (C5598 * C5235 + (C5585 + C5584) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C1695) *
              C50703 * C1047 +
          (((C179 * C2311 + C180 * C50661) * C5233 + (C5917 + C5918) * C5234 +
            (C5919 + C5920) * C5235) *
               C1695 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C50661 +
             C5610 * C2311) *
                C5235 +
            (C5920 + C5919) * C5234 + (C5918 + C5917) * C5233) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C1695 -
           ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
            (C5566 + C5611) * C5233) *
               C50783) *
              C280 +
          (((C6146 + C6123) * C5233 + (C6147 + C6128) * C5234 +
            (C6555 + C6550) * C5235) *
               C50783 -
           (C6551 * C5235 + (C6123 + C6146) * C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C1695) *
              C281 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C2311 +
             C365 * C50661) *
                C5233 +
            (C7058 + C7046) * C5234 + (C7059 + C7051) * C5235) *
               C1695 -
           (((C117 * C4637 - C118 * C4633 - C117 * C4638 + C50800 * C4645) *
                 C50661 +
             (C117 * C4641 - C118 * C4635 - C117 * C4642 + C50800 * C4647) *
                 C2311) *
                C5235 +
            (C7051 + C7059) * C5234 + (C7046 + C7058) * C5233) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
            C178 * C50661) *
               C5233 +
           (C5611 + C5566) * C5234 + C5617 * C5235) *
              C1861 -
          (C7458 * C5235 + (C5571 + C5612) * C5234 + (C5566 + C5611) * C5233) *
              C1862 +
          (C5617 * C5233 + (C5614 + C5613) * C5234 + (C7467 + C7463) * C5235) *
              C1863 -
          (((C117 * C7451 - C118 * C7449 - C117 * C7452 + C50800 * C7455) *
                C50661 +
            (C117 * C7453 - C118 * C7450 - C117 * C7454 + C50800 * C7456) *
                C2311) *
               C5235 +
           (C7463 + C7467) * C5234 + C7458 * C5233) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50974 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50975 +
           ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
             C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
             C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
                C2311 +
            (C2780 + C2781 + C2782) * C50661) *
               C50816 * C2111) *
              C50703 * C50919 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C3114 + C3115 + C3116) * C50661) *
               C50816 * C50975 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50974 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50661 +
            (C2782 + C2781 + C2780) * C2311) *
               C50816 * C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50974 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50975 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
            C548 * C107 + C549 * C108 + C550 * C109) *
               C50816 * C2111) *
              C50703 * C50919 +
          ((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
               C50975 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50974 -
           ((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C109 +
            C550 * C108 + C549 * C107 + C548 * C106) *
               C50816 * C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C50974 -
           (C7458 * C5235 + (C5571 + C5612) * C5234 + (C5566 + C5611) * C5233) *
               C50975 +
           (C5617 * C5233 + (C5614 + C5613) * C5234 + (C7467 + C7463) * C5235) *
               C2111) *
              C50703 * C50919 +
          (((C5584 + C5585) * C5233 + (C5586 + C5587) * C5234 +
            (C5615 + C5616) * C5235) *
               C50975 -
           (C5598 * C5235 + (C5585 + C5584) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C50974 -
           (((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                 C50661 +
             C5609 * C2311) *
                C5235 +
            (C5616 + C5615) * C5234 + C5598 * C5233) *
               C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C1695 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C280 +
          (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
            C944 * C107 + C945 * C108 + C946 * C109) *
               C50816 * C50783 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C1695) *
              C281 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C1695 -
           ((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                C109 +
            (C117 * C1587 - C118 * C1582 - C117 * C1588 + C50800 * C1594) *
                C108 +
            (C117 * C1589 - C118 * C1583 - C117 * C1590 + C50800 * C1595) *
                C107 +
            (C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                C106) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C1695 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C50703 * C1046 +
          ((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
               C50783 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C1695) *
              C50703 * C1047 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C1695 -
           ((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C109 +
            C775 * C108 + C545 * C107 + C546 * C106) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C1695 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C3114 + C3115 + C3116) * C50661) *
               C50816 * C50783 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C1695) *
              C50703 * C1047 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C1695 -
           ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
             C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
             C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
                C50661 +
            (C3116 + C3115 + C3114) * C2311) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C1695 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C280 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C50783 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C1695) *
              C281 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C1695 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50661 +
            (C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596) *
                C2311) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C1695 -
           ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
            (C5566 + C5611) * C5233) *
               C50783) *
              C50703 * C1046 +
          (((C5584 + C5585) * C5233 + (C5586 + C5587) * C5234 +
            (C5615 + C5616) * C5235) *
               C50783 -
           (C5598 * C5235 + (C5585 + C5584) * C5234 +
            (C179 * C50661 + C178 * C2311) * C5233) *
               C1695) *
              C50703 * C1047 +
          (((C179 * C2311 + C180 * C50661) * C5233 + (C5917 + C5918) * C5234 +
            (C5919 + C5920) * C5235) *
               C1695 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C50661 +
             C5610 * C2311) *
                C5235 +
            (C5920 + C5919) * C5234 + (C5918 + C5917) * C5233) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C2311 +
             C178 * C50661) *
                C5233 +
            (C5611 + C5566) * C5234 + C5617 * C5235) *
               C1695 -
           ((C5613 + C5614) * C5235 + (C5571 + C5612) * C5234 +
            (C5566 + C5611) * C5233) *
               C50783) *
              C280 +
          (((C6146 + C6123) * C5233 + (C6147 + C6128) * C5234 +
            (C6555 + C6550) * C5235) *
               C50783 -
           (C6551 * C5235 + (C6123 + C6146) * C5234 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C2311) *
                C5233) *
               C1695) *
              C281 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C2311 +
             C365 * C50661) *
                C5233 +
            (C7058 + C7046) * C5234 + (C7059 + C7051) * C5235) *
               C1695 -
           (((C117 * C4637 - C118 * C4633 - C117 * C4638 + C50800 * C4645) *
                 C50661 +
             (C117 * C4641 - C118 * C4635 - C117 * C4642 + C50800 * C4647) *
                 C2311) *
                C5235 +
            (C7051 + C7059) * C5234 + (C7046 + C7058) * C5233) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C50719 * C50927 -
           ((C945 * C8055 + C944 * C50969 + C6143 * C50968) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C50719 * C50755) *
              C50970 +
          (((C364 * C50968 + C363 * C50969 + C362 * C8055) * C50941 +
            (C944 * C50968 + C945 * C50969 + C946 * C8055) * C50880) *
               C50719 * C50755 -
           ((C11226 + C11225 + C11224) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C50719 * C50927) *
              C50971 +
          (((C179 * C50968 + C180 * C50969 + C181 * C8055) * C50941 +
            (C546 * C50968 + C545 * C50969 + C775 * C8055) * C50880) *
               C50719 * C50927 -
           (((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) * C8055 +
             C946 * C50969 + C945 * C50968) *
                C50880 +
            (C664 * C8055 + C362 * C50969 + C363 * C50968) * C50941) *
               C50719 * C50755) *
              C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C50968 +
              C178 * C50969 + C179 * C8055) *
                 C50941 +
             (C11218 + C11219 + C11220) * C50880) *
                C50928 -
            ((C11221 + C11222 + C11223) * C50880 +
             (C11220 + C11219 + C11218) * C50941) *
                C50783) *
               C50927 +
           (((C11719 + C11720 + C11721) * C50941 +
             (C6144 * C50968 + C5401 * C50969 + C5770 * C8055) * C50880) *
                C50783 -
            ((C11721 + C11720 + C11719) * C50880 +
             (C363 * C8055 + C364 * C50969 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C50968) *
                 C50941) *
                C50928) *
               C50755) *
              C283 +
          ((((C11224 + C11225 + C11226) * C50941 +
             (C11227 + C11228 + C11229) * C50880) *
                C50783 -
            ((C11226 + C11225 + C11224) * C50880 +
             (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
                C50928) *
               C50927 +
           (((C364 * C50968 + C363 * C50969 + C362 * C8055) * C50941 +
             (C11722 + C11723 + C11724) * C50880) *
                C50928 -
            (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                  C8055 +
              C5770 * C50969 + C5401 * C50968) *
                 C50880 +
             (C11724 + C11723 + C11722) * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C5605 * C50968 + C547 * C50969 + C546 * C8055) * C50880) *
               C50719 * C280 -
           ((C945 * C8055 + C944 * C50969 + C6143 * C50968) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C50719 * C281 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50968 +
             C365 * C50969 + C366 * C8055) *
                C50941 +
            (C7056 * C50968 + C5402 * C50969 + C11071 * C8055) * C50880) *
               C50719 * C282) *
              C283 +
          (((C364 * C50968 + C363 * C50969 + C362 * C8055) * C50941 +
            (C944 * C50968 + C945 * C50969 + C946 * C8055) * C50880) *
               C50719 * C281 -
           ((C545 * C8055 + C546 * C50969 + C547 * C50968) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C50719 * C280 -
           (((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                 C8055 +
             C11071 * C50969 + C5402 * C50968) *
                C50880 +
            (C367 * C8055 + C366 * C50969 + C365 * C50968) * C50941) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50968 +
            C178 * C50969 + C179 * C8055) *
               C50941 +
           (C5605 * C50968 + C547 * C50969 + C546 * C8055) * C50880) *
              C50719 * C50703 * C113 -
          ((C545 * C8055 + C546 * C50969 + C547 * C50968) * C50880 +
           (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
              C50719 * C50703 * C114 +
          ((C179 * C50968 + C180 * C50969 + C181 * C8055) * C50941 +
           (C546 * C50968 + C545 * C50969 + C775 * C8055) * C50880) *
              C50719 * C50703 * C115 -
          (((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C8055 +
            C775 * C50969 + C545 * C50968) *
               C50880 +
           (C182 * C8055 + C181 * C50969 + C180 * C50968) * C50941) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C465 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C466 +
           ((C11223 + C11222 + C11221) * C50941 +
            (C5608 * C50968 + C5607 * C50969 + C5610 * C8055) * C50880) *
               C467) *
              C50703 * C283 +
          (((C11224 + C11225 + C11226) * C50941 +
            (C11227 + C11228 + C11229) * C50880) *
               C466 -
           ((C11226 + C11225 + C11224) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C465 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C8055 +
             C5610 * C50969 + C5607 * C50968) *
                C50880 +
            (C11229 + C11228 + C11227) * C50941) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C50928 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C50783) *
              C50703 * C50970 +
          (((C11224 + C11225 + C11226) * C50941 +
            (C11227 + C11228 + C11229) * C50880) *
               C50783 -
           ((C11226 + C11225 + C11224) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C50928) *
              C50703 * C50971 +
          (((C179 * C50968 + C180 * C50969 + C181 * C8055) * C50941 +
            (C11522 + C11523 + C11524) * C50880) *
               C50928 -
           (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C8055 +
             C550 * C50969 + C549 * C50968) *
                C50880 +
            (C11524 + C11523 + C11522) * C50941) *
               C50783) *
              C50703 * C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50968 +
            C178 * C50969 + C179 * C8055) *
               C50941 +
           (C5605 * C50968 + C547 * C50969 + C546 * C8055) * C50880) *
              C50719 * C50703 * C113 -
          ((C545 * C8055 + C546 * C50969 + C547 * C50968) * C50880 +
           (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
              C50719 * C50703 * C114 +
          ((C179 * C50968 + C180 * C50969 + C181 * C8055) * C50941 +
           (C546 * C50968 + C545 * C50969 + C775 * C8055) * C50880) *
              C50719 * C50703 * C115 -
          (((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C8055 +
            C775 * C50969 + C545 * C50968) *
               C50880 +
           (C182 * C8055 + C181 * C50969 + C180 * C50968) * C50941) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C5605 * C50968 + C547 * C50969 + C546 * C8055) * C50880) *
               C50719 * C280 -
           ((C945 * C8055 + C944 * C50969 + C6143 * C50968) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C50719 * C281 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50968 +
             C365 * C50969 + C366 * C8055) *
                C50941 +
            (C7056 * C50968 + C5402 * C50969 + C11071 * C8055) * C50880) *
               C50719 * C282) *
              C283 +
          (((C364 * C50968 + C363 * C50969 + C362 * C8055) * C50941 +
            (C944 * C50968 + C945 * C50969 + C946 * C8055) * C50880) *
               C50719 * C281 -
           ((C545 * C8055 + C546 * C50969 + C547 * C50968) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C50719 * C280 -
           (((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                 C8055 +
             C11071 * C50969 + C5402 * C50968) *
                C50880 +
            (C367 * C8055 + C366 * C50969 + C365 * C50968) * C50941) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C50719 * C50972 -
           ((C11721 + C11720 + C11719) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C50719 * C50973 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50968 +
             C365 * C50969 + C366 * C8055) *
                C50941 +
            (C7056 * C50968 + C5402 * C50969 + C11071 * C8055) * C50880) *
               C50719 * C1350) *
              C50919 +
          (((C364 * C50968 + C363 * C50969 + C362 * C8055) * C50941 +
            (C11722 + C11723 + C11724) * C50880) *
               C50719 * C50973 -
           ((C11226 + C11225 + C11224) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C50719 * C50972 -
           (((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                 C8055 +
             C11071 * C50969 + C5402 * C50968) *
                C50880 +
            (C367 * C8055 + C366 * C50969 + C365 * C50968) * C50941) *
               C50719 * C1350) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C50928 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C50783) *
              C50972 +
          (((C11719 + C11720 + C11721) * C50941 +
            (C12115 + C12116 + C12117) * C50880) *
               C50783 -
           ((C11721 + C11720 + C11719) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C50928) *
              C50973 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50968 +
             C365 * C50969 + C366 * C8055) *
                C50941 +
            (C12604 + C12605 + C12606) * C50880) *
               C50928 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C8055 +
             C5403 * C50969 + C7057 * C50968) *
                C50880 +
            (C12606 + C12605 + C12604) * C50941) *
               C50783) *
              C1350) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50968 +
            C178 * C50969 + C179 * C8055) *
               C50941 +
           (C11218 + C11219 + C11220) * C50880) *
              C50719 * C1115 -
          ((C11721 + C11720 + C11719) * C50880 +
           (C363 * C8055 + C364 * C50969 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                C50968) *
               C50941) *
              C50719 * C1116 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50968 +
            C365 * C50969 + C366 * C8055) *
               C50941 +
           (C7056 * C50968 + C5402 * C50969 + C11071 * C8055) * C50880) *
              C50719 * C1117 -
          (((C117 * C3317 - C118 * C3312 - C117 * C3318 + C50800 * C3321) *
                C8055 +
            (C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                C50969 +
            (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                C50968) *
               C50880 +
           ((C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
                C8055 +
            (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                C50969 +
            (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                C50968) *
               C50941) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C50719 * C1044 -
           ((C11721 + C11720 + C11719) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C50719 * C50755) *
              C1046 +
          (((C364 * C50968 + C363 * C50969 + C362 * C8055) * C50941 +
            (C11722 + C11723 + C11724) * C50880) *
               C50719 * C50755 -
           ((C11226 + C11225 + C11224) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C50719 * C1044) *
              C1047 +
          (((C179 * C50968 + C180 * C50969 + C181 * C8055) * C50941 +
            (C11522 + C11523 + C11524) * C50880) *
               C50719 * C1044 -
           (((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) * C8055 +
             C946 * C50969 + C945 * C50968) *
                C50880 +
            (C664 * C8055 + C362 * C50969 + C363 * C50968) * C50941) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C465 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C466 +
           ((C11223 + C11222 + C11221) * C50941 +
            (C5608 * C50968 + C5607 * C50969 + C5610 * C8055) * C50880) *
               C467) *
              C1044 +
          (((C11719 + C11720 + C11721) * C50941 +
            (C12115 + C12116 + C12117) * C50880) *
               C466 -
           ((C11721 + C11720 + C11719) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C465 -
           (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                 C8055 +
             C6145 * C50969 + C6554 * C50968) *
                C50880 +
            (C12117 + C12116 + C12115) * C50941) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C50968 +
              C178 * C50969 + C179 * C8055) *
                 C50941 +
             (C11218 + C11219 + C11220) * C50880) *
                C50928 -
            ((C11221 + C11222 + C11223) * C50880 +
             (C11220 + C11219 + C11218) * C50941) *
                C50783) *
               C1044 +
           (((C11719 + C11720 + C11721) * C50941 +
             (C12115 + C12116 + C12117) * C50880) *
                C50783 -
            ((C11721 + C11720 + C11719) * C50880 +
             (C363 * C8055 + C364 * C50969 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C50968) *
                 C50941) *
                C50928) *
               C50755) *
              C50919 +
          ((((C11224 + C11225 + C11226) * C50941 +
             (C11227 + C11228 + C11229) * C50880) *
                C50783 -
            ((C11226 + C11225 + C11224) * C50880 +
             (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
                C50928) *
               C1044 +
           (((C364 * C50968 + C363 * C50969 + C362 * C8055) * C50941 +
             (C11722 + C11723 + C11724) * C50880) *
                C50928 -
            (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                  C8055 +
              C5770 * C50969 + C5401 * C50968) *
                 C50880 +
             (C11724 + C11723 + C11722) * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C50719 * C1044 -
           ((C11721 + C11720 + C11719) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C50719 * C50755) *
              C1046 +
          (((C364 * C50968 + C363 * C50969 + C362 * C8055) * C50941 +
            (C11722 + C11723 + C11724) * C50880) *
               C50719 * C50755 -
           ((C11226 + C11225 + C11224) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C50719 * C1044) *
              C1047 +
          (((C179 * C50968 + C180 * C50969 + C181 * C8055) * C50941 +
            (C11522 + C11523 + C11524) * C50880) *
               C50719 * C1044 -
           (((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) * C8055 +
             C946 * C50969 + C945 * C50968) *
                C50880 +
            (C664 * C8055 + C362 * C50969 + C363 * C50968) * C50941) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50968 +
            C178 * C50969 + C179 * C8055) *
               C50941 +
           (C11218 + C11219 + C11220) * C50880) *
              C50719 * C1115 -
          ((C11721 + C11720 + C11719) * C50880 +
           (C363 * C8055 + C364 * C50969 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                C50968) *
               C50941) *
              C50719 * C1116 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50968 +
            C365 * C50969 + C366 * C8055) *
               C50941 +
           (C7056 * C50968 + C5402 * C50969 + C11071 * C8055) * C50880) *
              C50719 * C1117 -
          (((C117 * C3317 - C118 * C3312 - C117 * C3318 + C50800 * C3321) *
                C8055 +
            (C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                C50969 +
            (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                C50968) *
               C50880 +
           ((C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
                C8055 +
            (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                C50969 +
            (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                C50968) *
               C50941) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C50968 +
              C178 * C50969 + C179 * C8055) *
                 C50941 +
             (C11218 + C11219 + C11220) * C50880) *
                C1695 -
            ((C11221 + C11222 + C11223) * C50880 +
             (C11220 + C11219 + C11218) * C50941) *
                C50783) *
               C50927 +
           (((C11719 + C11720 + C11721) * C50941 +
             (C12115 + C12116 + C12117) * C50880) *
                C50783 -
            ((C11721 + C11720 + C11719) * C50880 +
             (C363 * C8055 + C364 * C50969 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C50968) *
                 C50941) *
                C1695) *
               C50755) *
              C50919 +
          ((((C11224 + C11225 + C11226) * C50941 +
             (C11227 + C11228 + C11229) * C50880) *
                C50783 -
            ((C11226 + C11225 + C11224) * C50880 +
             (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
                C1695) *
               C50927 +
           (((C364 * C50968 + C363 * C50969 + C362 * C8055) * C50941 +
             (C11722 + C11723 + C11724) * C50880) *
                C1695 -
            (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                  C8055 +
              C5770 * C50969 + C5401 * C50968) *
                 C50880 +
             (C11724 + C11723 + C11722) * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C50974 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C50975 +
           ((C11223 + C11222 + C11221) * C50941 +
            (C12997 + C12998 + C12999) * C50880) *
               C2111) *
              C50927 +
          (((C11719 + C11720 + C11721) * C50941 +
            (C12115 + C12116 + C12117) * C50880) *
               C50975 -
           ((C11721 + C11720 + C11719) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C50974 -
           (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                 C8055 +
             C6145 * C50969 + C6554 * C50968) *
                C50880 +
            (C12117 + C12116 + C12115) * C50941) *
               C2111) *
              C50755) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C1695 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C50783) *
              C280 +
          (((C11719 + C11720 + C11721) * C50941 +
            (C12115 + C12116 + C12117) * C50880) *
               C50783 -
           ((C11721 + C11720 + C11719) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C1695) *
              C281 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50968 +
             C365 * C50969 + C366 * C8055) *
                C50941 +
            (C12604 + C12605 + C12606) * C50880) *
               C1695 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C8055 +
             C5403 * C50969 + C7057 * C50968) *
                C50880 +
            (C12606 + C12605 + C12604) * C50941) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C1695 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C50783) *
              C50703 * C1046 +
          (((C11224 + C11225 + C11226) * C50941 +
            (C11227 + C11228 + C11229) * C50880) *
               C50783 -
           ((C11226 + C11225 + C11224) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C1695) *
              C50703 * C1047 +
          (((C179 * C50968 + C180 * C50969 + C181 * C8055) * C50941 +
            (C11522 + C11523 + C11524) * C50880) *
               C1695 -
           (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C8055 +
             C550 * C50969 + C549 * C50968) *
                C50880 +
            (C11524 + C11523 + C11522) * C50941) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50968 +
            C178 * C50969 + C179 * C8055) *
               C50941 +
           (C11218 + C11219 + C11220) * C50880) *
              C1861 -
          ((C11221 + C11222 + C11223) * C50880 +
           (C11220 + C11219 + C11218) * C50941) *
              C1862 +
          ((C11223 + C11222 + C11221) * C50941 +
           (C12997 + C12998 + C12999) * C50880) *
              C1863 -
          (((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                C8055 +
            C5609 * C50969 + C7466 * C50968) *
               C50880 +
           (C12999 + C12998 + C12997) * C50941) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C50974 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C50975 +
           ((C11223 + C11222 + C11221) * C50941 +
            (C12997 + C12998 + C12999) * C50880) *
               C2111) *
              C50703 * C50919 +
          (((C11224 + C11225 + C11226) * C50941 +
            (C11227 + C11228 + C11229) * C50880) *
               C50975 -
           ((C11226 + C11225 + C11224) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C50974 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C8055 +
             C5610 * C50969 + C5607 * C50968) *
                C50880 +
            (C11229 + C11228 + C11227) * C50941) *
               C2111) *
              C50703 * C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C1695 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C50783) *
              C50703 * C1046 +
          (((C11224 + C11225 + C11226) * C50941 +
            (C11227 + C11228 + C11229) * C50880) *
               C50783 -
           ((C11226 + C11225 + C11224) * C50880 +
            (C180 * C8055 + C179 * C50969 + C178 * C50968) * C50941) *
               C1695) *
              C50703 * C1047 +
          (((C179 * C50968 + C180 * C50969 + C181 * C8055) * C50941 +
            (C11522 + C11523 + C11524) * C50880) *
               C1695 -
           (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C8055 +
             C550 * C50969 + C549 * C50968) *
                C50880 +
            (C11524 + C11523 + C11522) * C50941) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50968 +
             C178 * C50969 + C179 * C8055) *
                C50941 +
            (C11218 + C11219 + C11220) * C50880) *
               C1695 -
           ((C11221 + C11222 + C11223) * C50880 +
            (C11220 + C11219 + C11218) * C50941) *
               C50783) *
              C280 +
          (((C11719 + C11720 + C11721) * C50941 +
            (C12115 + C12116 + C12117) * C50880) *
               C50783 -
           ((C11721 + C11720 + C11719) * C50880 +
            (C363 * C8055 + C364 * C50969 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50968) *
                C50941) *
               C1695) *
              C281 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50968 +
             C365 * C50969 + C366 * C8055) *
                C50941 +
            (C12604 + C12605 + C12606) * C50880) *
               C1695 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C8055 +
             C5403 * C50969 + C7057 * C50968) *
                C50880 +
            (C12606 + C12605 + C12604) * C50941) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C50927 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C50755) *
              C50970 +
          ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
               C50719 * C50755 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C50927) *
              C50971 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C50719 * C50927 -
           ((C117 * C654 - C118 * C653 - C117 * C655 + C50800 * C656) * C109 +
            C664 * C108 + C362 * C107 + C363 * C106) *
               C50816 * C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C50927 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C50755) *
              C50970 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2947 + C2948 + C2949) * C50661) *
               C50816 * C50719 * C50755 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C50927) *
              C50971 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C50719 * C50927 -
           ((C2317 * C1124 - C2318 * C1120 - C2317 * C1125 + C2310 * C1132 +
             C2315 * C309 - C2316 * C292 - C2315 * C310 + C2309 * C322 +
             C2313 * C295 - C2314 * C285 - C2313 * C296 + C2308 * C315) *
                C50661 +
            (C2949 + C2948 + C2947) * C2311) *
               C50816 * C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
             C178 * C107 + C179 * C108 + C180 * C109) *
                C50816 * C50928 -
            (C545 * C109 + C546 * C108 + C547 * C107 +
             (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
                C50816 * C50783) *
               C50927 +
           (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
             C944 * C107 + C945 * C108 + C946 * C109) *
                C50816 * C50783 -
            (C362 * C109 + C363 * C108 + C364 * C107 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
                C50816 * C50928) *
               C50755) *
              C283 +
          (((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
                C50783 -
            (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
                C50928) *
               C50927 +
           ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
                C50928 -
            ((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) * C109 +
             C946 * C108 + C945 * C107 + C944 * C106) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C2311 +
             (C2374 + C2375 + C2376) * C50661) *
                C50816 * C50928 -
            ((C2777 + C2778 + C2779) * C50661 +
             (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
              C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
              C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                 C2311) *
                C50816 * C50783) *
               C50927 +
           (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
              C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
              C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                 C2311 +
             (C3341 + C3342 + C3343) * C50661) *
                C50816 * C50783 -
            ((C2577 + C2578 + C2579) * C50661 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C2311) *
                C50816 * C50928) *
               C50755) *
              C283 +
          ((((C2779 + C2778 + C2777) * C2311 +
             (C3114 + C3115 + C3116) * C50661) *
                C50816 * C50783 -
            ((C2377 + C2378 + C2379) * C50661 +
             (C2376 + C2375 + C2374) * C2311) *
                C50816 * C50928) *
               C50927 +
           (((C2579 + C2578 + C2577) * C2311 +
             (C2947 + C2948 + C2949) * C50661) *
                C50816 * C50928 -
            ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
              C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
              C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                 C50661 +
             (C3343 + C3342 + C3341) * C2311) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C280 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C281 +
           ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C50719 * C282) *
              C283 +
          ((C364 * C106 + C363 * C107 + C362 * C108 +
            (C117 * C311 - C118 * C293 - C117 * C312 + C50800 * C323) * C109) *
               C50816 * C50719 * C281 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C280 -
           ((C117 * C313 - C118 * C294 - C117 * C314 + C50800 * C324) * C109 +
            C367 * C108 + C366 * C107 + C365 * C106) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
           C178 * C107 + C179 * C108 + C180 * C109) *
              C50816 * C50719 * C50703 * C113 -
          (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
              C50719 * C50703 * C114 +
          (C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
              C50719 * C50703 * C115 -
          ((C117 * C138 - C118 * C125 - C117 * C139 + C50800 * C146) * C109 +
           C182 * C108 + C181 * C107 + C180 * C106) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C465 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C466 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
            C548 * C107 + C549 * C108 + C550 * C109) *
               C50816 * C467) *
              C50703 * C283 +
          ((C547 * C106 + C546 * C107 + C545 * C108 +
            (C117 * C494 - C118 * C476 - C117 * C495 + C50800 * C506) * C109) *
               C50816 * C466 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C465 -
           ((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C109 +
            C550 * C108 + C549 * C107 + C548 * C106) *
               C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C50719 * C50703 * C113 -
          ((C2377 + C2378 + C2379) * C50661 + (C2376 + C2375 + C2374) * C2311) *
              C50816 * C50719 * C50703 * C114 +
          ((C2379 + C2378 + C2377) * C2311 + (C2380 + C2381 + C2382) * C50661) *
              C50816 * C50719 * C50703 * C115 -
          ((C2317 * C313 - C2318 * C294 - C2317 * C314 + C2310 * C324 +
            C2315 * C311 - C2316 * C293 - C2315 * C312 + C2309 * C323 +
            C2313 * C134 - C2314 * C123 - C2313 * C135 + C2308 * C144) *
               C50661 +
           (C2382 + C2381 + C2380) * C2311) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C280 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C281 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C50719 * C282) *
              C283 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2313 * C297 - C2314 * C286 - C2313 * C298 + C2308 * C316 +
             C2315 * C307 - C2316 * C291 - C2315 * C308 + C2309 * C321 +
             C2317 * C1126 - C2318 * C1121 - C2317 * C1127 + C2310 * C1133) *
                C50661) *
               C50816 * C50719 * C281 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C280 -
           ((C2317 * C2535 - C2318 * C2530 - C2317 * C2536 + C2310 * C2539 +
             C2315 * C1126 - C2316 * C1121 - C2315 * C1127 + C2309 * C1133 +
             C2313 * C307 - C2314 * C291 - C2313 * C308 + C2308 * C321) *
                C50661 +
            (C2582 + C2581 + C2580) * C2311) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C465 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C466 +
           ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
             C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
             C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
                C2311 +
            (C2780 + C2781 + C2782) * C50661) *
               C50816 * C467) *
              C50703 * C283 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C2313 * C480 - C2314 * C469 - C2313 * C481 + C2308 * C499 +
             C2315 * C914 - C2316 * C907 - C2315 * C915 + C2309 * C922 +
             C2317 * C1587 - C2318 * C1582 - C2317 * C1588 + C2310 * C1594) *
                C50661) *
               C50816 * C466 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C465 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50661 +
            (C2782 + C2781 + C2780) * C2311) *
               C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50928 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C50703 * C50970 +
          ((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
               C50783 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50928) *
              C50703 * C50971 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C50928 -
           ((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C109 +
            C775 * C108 + C545 * C107 + C546 * C106) *
               C50816 * C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50928 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C50703 * C50970 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C3114 + C3115 + C3116) * C50661) *
               C50816 * C50783 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50928) *
              C50703 * C50971 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C50928 -
           ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
             C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
             C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
                C50661 +
            (C3116 + C3115 + C3114) * C2311) *
               C50816 * C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
           C178 * C107 + C179 * C108 + C180 * C109) *
              C50816 * C50719 * C50703 * C113 -
          (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
              C50719 * C50703 * C114 +
          (C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
              C50719 * C50703 * C115 -
          ((C117 * C138 - C118 * C125 - C117 * C139 + C50800 * C146) * C109 +
           C182 * C108 + C181 * C107 + C180 * C106) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C280 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C281 +
           ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C50719 * C282) *
              C283 +
          ((C364 * C106 + C363 * C107 + C362 * C108 +
            (C117 * C311 - C118 * C293 - C117 * C312 + C50800 * C323) * C109) *
               C50816 * C50719 * C281 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C280 -
           ((C117 * C313 - C118 * C294 - C117 * C314 + C50800 * C324) * C109 +
            C367 * C108 + C366 * C107 + C365 * C106) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C50719 * C50703 * C113 -
          ((C2377 + C2378 + C2379) * C50661 + (C2376 + C2375 + C2374) * C2311) *
              C50816 * C50719 * C50703 * C114 +
          ((C2379 + C2378 + C2377) * C2311 + (C2380 + C2381 + C2382) * C50661) *
              C50816 * C50719 * C50703 * C115 -
          ((C2317 * C313 - C2318 * C294 - C2317 * C314 + C2310 * C324 +
            C2315 * C311 - C2316 * C293 - C2315 * C312 + C2309 * C323 +
            C2313 * C134 - C2314 * C123 - C2313 * C135 + C2308 * C144) *
               C50661 +
           (C2382 + C2381 + C2380) * C2311) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C280 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C281 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C50719 * C282) *
              C283 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2313 * C297 - C2314 * C286 - C2313 * C298 + C2308 * C316 +
             C2315 * C307 - C2316 * C291 - C2315 * C308 + C2309 * C321 +
             C2317 * C1126 - C2318 * C1121 - C2317 * C1127 + C2310 * C1133) *
                C50661) *
               C50816 * C50719 * C281 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C280 -
           ((C2317 * C2535 - C2318 * C2530 - C2317 * C2536 + C2310 * C2539 +
             C2315 * C1126 - C2316 * C1121 - C2315 * C1127 + C2309 * C1133 +
             C2313 * C307 - C2314 * C291 - C2313 * C308 + C2308 * C321) *
                C50661 +
            (C2582 + C2581 + C2580) * C2311) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C50972 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C50973 +
           ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C50719 * C1350) *
              C50919 +
          ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
               C50719 * C50973 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C50972 -
           ((C117 * C313 - C118 * C294 - C117 * C314 + C50800 * C324) * C109 +
            C367 * C108 + C366 * C107 + C365 * C106) *
               C50816 * C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C50972 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C50973 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C50719 * C1350) *
              C50919 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2947 + C2948 + C2949) * C50661) *
               C50816 * C50719 * C50973 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C50972 -
           ((C2317 * C2535 - C2318 * C2530 - C2317 * C2536 + C2310 * C2539 +
             C2315 * C1126 - C2316 * C1121 - C2315 * C1127 + C2309 * C1133 +
             C2313 * C307 - C2314 * C291 - C2313 * C308 + C2308 * C321) *
                C50661 +
            (C2582 + C2581 + C2580) * C2311) *
               C50816 * C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50928 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C50972 +
          (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
            C944 * C107 + C945 * C108 + C946 * C109) *
               C50816 * C50783 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50928) *
              C50973 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C50928 -
           ((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                C109 +
            (C117 * C1587 - C118 * C1582 - C117 * C1588 + C50800 * C1594) *
                C108 +
            (C117 * C1589 - C118 * C1583 - C117 * C1590 + C50800 * C1595) *
                C107 +
            (C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                C106) *
               C50816 * C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50928 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C50972 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C50783 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50928) *
              C50973 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C50928 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50661 +
            (C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596) *
                C2311) *
               C50816 * C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
           C178 * C107 + C179 * C108 + C180 * C109) *
              C50816 * C50719 * C1115 -
          (C362 * C109 + C363 * C108 + C364 * C107 +
           (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
              C50816 * C50719 * C1116 +
          ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
           C365 * C107 + C366 * C108 + C367 * C109) *
              C50816 * C50719 * C1117 -
          ((C117 * C1124 - C118 * C1120 - C117 * C1125 + C50800 * C1132) *
               C109 +
           (C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
               C108 +
           (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
               C107 +
           (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
               C106) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C1044 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C50755) *
              C1046 +
          ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
               C50719 * C50755 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C1044) *
              C1047 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C50719 * C1044 -
           ((C117 * C654 - C118 * C653 - C117 * C655 + C50800 * C656) * C109 +
            C664 * C108 + C362 * C107 + C363 * C106) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C465 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C466 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
            C548 * C107 + C549 * C108 + C550 * C109) *
               C50816 * C467) *
              C1044 +
          (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
            C944 * C107 + C945 * C108 + C946 * C109) *
               C50816 * C466 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C465 -
           ((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                C109 +
            (C117 * C1240 - C118 * C1235 - C117 * C1241 + C50800 * C1247) *
                C108 +
            (C117 * C1242 - C118 * C1236 - C117 * C1243 + C50800 * C1248) *
                C107 +
            (C117 * C1244 - C118 * C1237 - C117 * C1245 + C50800 * C1249) *
                C106) *
               C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C1044 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2947 + C2948 + C2949) * C50661) *
               C50816 * C50719 * C50755 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C1044) *
              C1047 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C50719 * C1044 -
           ((C2317 * C1124 - C2318 * C1120 - C2317 * C1125 + C2310 * C1132 +
             C2315 * C309 - C2316 * C292 - C2315 * C310 + C2309 * C322 +
             C2313 * C295 - C2314 * C285 - C2313 * C296 + C2308 * C315) *
                C50661 +
            (C2949 + C2948 + C2947) * C2311) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C50719 * C1115 -
          ((C2577 + C2578 + C2579) * C50661 +
           (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
            C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
            C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
               C2311) *
              C50816 * C50719 * C1116 +
          ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
            C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
            C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
               C2311 +
           (C2580 + C2581 + C2582) * C50661) *
              C50816 * C50719 * C1117 -
          ((C2317 * C3589 - C2318 * C3587 - C2317 * C3590 + C2310 * C3593 +
            C2315 * C2533 - C2316 * C2529 - C2315 * C2534 + C2309 * C2538 +
            C2313 * C1128 - C2314 * C1122 - C2313 * C1129 + C2308 * C1134) *
               C50661 +
           (C2317 * C3591 - C2318 * C3588 - C2317 * C3592 + C2310 * C3594 +
            C2315 * C2531 - C2316 * C2528 - C2315 * C2532 + C2309 * C2537 +
            C2313 * C1130 - C2314 * C1123 - C2313 * C1131 + C2308 * C1135) *
               C2311) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C465 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C466 +
           ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
             C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
             C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
                C2311 +
            (C2780 + C2781 + C2782) * C50661) *
               C50816 * C467) *
              C1044 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C466 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C465 -
           ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
             C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
             C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                C50661 +
            (C2317 * C3745 - C2318 * C3742 - C2317 * C3746 + C2310 * C3748 +
             C2315 * C2731 - C2316 * C2728 - C2315 * C2732 + C2309 * C2737 +
             C2313 * C1244 - C2314 * C1237 - C2313 * C1245 + C2308 * C1249) *
                C2311) *
               C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
             C178 * C107 + C179 * C108 + C180 * C109) *
                C50816 * C50928 -
            (C545 * C109 + C546 * C108 + C547 * C107 +
             (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
                C50816 * C50783) *
               C1044 +
           (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
             C944 * C107 + C945 * C108 + C946 * C109) *
                C50816 * C50783 -
            (C362 * C109 + C363 * C108 + C364 * C107 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
                C50816 * C50928) *
               C50755) *
              C50919 +
          (((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
                C50783 -
            (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
                C50928) *
               C1044 +
           ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
                C50928 -
            ((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) * C109 +
             C946 * C108 + C945 * C107 + C944 * C106) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C2311 +
             (C2374 + C2375 + C2376) * C50661) *
                C50816 * C50928 -
            ((C2777 + C2778 + C2779) * C50661 +
             (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
              C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
              C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                 C2311) *
                C50816 * C50783) *
               C1044 +
           (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
              C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
              C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                 C2311 +
             (C3341 + C3342 + C3343) * C50661) *
                C50816 * C50783 -
            ((C2577 + C2578 + C2579) * C50661 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C2311) *
                C50816 * C50928) *
               C50755) *
              C50919 +
          ((((C2779 + C2778 + C2777) * C2311 +
             (C3114 + C3115 + C3116) * C50661) *
                C50816 * C50783 -
            ((C2377 + C2378 + C2379) * C50661 +
             (C2376 + C2375 + C2374) * C2311) *
                C50816 * C50928) *
               C1044 +
           (((C2579 + C2578 + C2577) * C2311 +
             (C2947 + C2948 + C2949) * C50661) *
                C50816 * C50928 -
            ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
              C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
              C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                 C50661 +
             (C3343 + C3342 + C3341) * C2311) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50719 * C1044 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50719 * C50755) *
              C1046 +
          ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
               C50719 * C50755 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50719 * C1044) *
              C1047 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C50719 * C1044 -
           ((C117 * C654 - C118 * C653 - C117 * C655 + C50800 * C656) * C109 +
            C664 * C108 + C362 * C107 + C363 * C106) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
           C178 * C107 + C179 * C108 + C180 * C109) *
              C50816 * C50719 * C1115 -
          (C362 * C109 + C363 * C108 + C364 * C107 +
           (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
              C50816 * C50719 * C1116 +
          ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
           C365 * C107 + C366 * C108 + C367 * C109) *
              C50816 * C50719 * C1117 -
          ((C117 * C1124 - C118 * C1120 - C117 * C1125 + C50800 * C1132) *
               C109 +
           (C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
               C108 +
           (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
               C107 +
           (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
               C106) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50719 * C1044 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C2579 + C2578 + C2577) * C2311 +
            (C2947 + C2948 + C2949) * C50661) *
               C50816 * C50719 * C50755 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50719 * C1044) *
              C1047 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C50719 * C1044 -
           ((C2317 * C1124 - C2318 * C1120 - C2317 * C1125 + C2310 * C1132 +
             C2315 * C309 - C2316 * C292 - C2315 * C310 + C2309 * C322 +
             C2313 * C295 - C2314 * C285 - C2313 * C296 + C2308 * C315) *
                C50661 +
            (C2949 + C2948 + C2947) * C2311) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C50719 * C1115 -
          ((C2577 + C2578 + C2579) * C50661 +
           (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
            C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
            C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
               C2311) *
              C50816 * C50719 * C1116 +
          ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
            C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
            C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
               C2311 +
           (C2580 + C2581 + C2582) * C50661) *
              C50816 * C50719 * C1117 -
          ((C2317 * C3589 - C2318 * C3587 - C2317 * C3590 + C2310 * C3593 +
            C2315 * C2533 - C2316 * C2529 - C2315 * C2534 + C2309 * C2538 +
            C2313 * C1128 - C2314 * C1122 - C2313 * C1129 + C2308 * C1134) *
               C50661 +
           (C2317 * C3591 - C2318 * C3588 - C2317 * C3592 + C2310 * C3594 +
            C2315 * C2531 - C2316 * C2528 - C2315 * C2532 + C2309 * C2537 +
            C2313 * C1130 - C2314 * C1123 - C2313 * C1131 + C2308 * C1135) *
               C2311) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
             C178 * C107 + C179 * C108 + C180 * C109) *
                C50816 * C1695 -
            (C545 * C109 + C546 * C108 + C547 * C107 +
             (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
                C50816 * C50783) *
               C50927 +
           (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
             C944 * C107 + C945 * C108 + C946 * C109) *
                C50816 * C50783 -
            (C362 * C109 + C363 * C108 + C364 * C107 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
                C50816 * C1695) *
               C50755) *
              C50919 +
          (((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
                C50783 -
            (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
                C1695) *
               C50927 +
           ((C364 * C106 + C363 * C107 + C362 * C108 + C664 * C109) * C50816 *
                C1695 -
            ((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) * C109 +
             C946 * C108 + C945 * C107 + C944 * C106) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C2311 +
             (C2374 + C2375 + C2376) * C50661) *
                C50816 * C1695 -
            ((C2777 + C2778 + C2779) * C50661 +
             (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
              C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
              C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                 C2311) *
                C50816 * C50783) *
               C50927 +
           (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
              C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
              C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                 C2311 +
             (C3341 + C3342 + C3343) * C50661) *
                C50816 * C50783 -
            ((C2577 + C2578 + C2579) * C50661 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C2311) *
                C50816 * C1695) *
               C50755) *
              C50919 +
          ((((C2779 + C2778 + C2777) * C2311 +
             (C3114 + C3115 + C3116) * C50661) *
                C50816 * C50783 -
            ((C2377 + C2378 + C2379) * C50661 +
             (C2376 + C2375 + C2374) * C2311) *
                C50816 * C1695) *
               C50927 +
           (((C2579 + C2578 + C2577) * C2311 +
             (C2947 + C2948 + C2949) * C50661) *
                C50816 * C1695 -
            ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
              C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
              C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                 C50661 +
             (C3343 + C3342 + C3341) * C2311) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50974 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50975 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
            C548 * C107 + C549 * C108 + C550 * C109) *
               C50816 * C2111) *
              C50927 +
          (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
            C944 * C107 + C945 * C108 + C946 * C109) *
               C50816 * C50975 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C50974 -
           ((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                C109 +
            (C117 * C1240 - C118 * C1235 - C117 * C1241 + C50800 * C1247) *
                C108 +
            (C117 * C1242 - C118 * C1236 - C117 * C1243 + C50800 * C1248) *
                C107 +
            (C117 * C1244 - C118 * C1237 - C117 * C1245 + C50800 * C1249) *
                C106) *
               C50816 * C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50974 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50975 +
           ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
             C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
             C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
                C2311 +
            (C2780 + C2781 + C2782) * C50661) *
               C50816 * C2111) *
              C50927 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C50975 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C50974 -
           ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
             C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
             C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                C50661 +
            (C2317 * C3745 - C2318 * C3742 - C2317 * C3746 + C2310 * C3748 +
             C2315 * C2731 - C2316 * C2728 - C2315 * C2732 + C2309 * C2737 +
             C2313 * C1244 - C2314 * C1237 - C2313 * C1245 + C2308 * C1249) *
                C2311) *
               C50816 * C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C1695 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C280 +
          (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
            C944 * C107 + C945 * C108 + C946 * C109) *
               C50816 * C50783 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C1695) *
              C281 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C1695 -
           ((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                C109 +
            (C117 * C1587 - C118 * C1582 - C117 * C1588 + C50800 * C1594) *
                C108 +
            (C117 * C1589 - C118 * C1583 - C117 * C1590 + C50800 * C1595) *
                C107 +
            (C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                C106) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C1695 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C50703 * C1046 +
          ((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
               C50783 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C1695) *
              C50703 * C1047 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C1695 -
           ((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C109 +
            C775 * C108 + C545 * C107 + C546 * C106) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
           C178 * C107 + C179 * C108 + C180 * C109) *
              C50816 * C1861 -
          (C545 * C109 + C546 * C108 + C547 * C107 +
           (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
              C50816 * C1862 +
          ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
           C548 * C107 + C549 * C108 + C550 * C109) *
              C50816 * C1863 -
          ((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
               C109 +
           (C117 * C1871 - C118 * C1866 - C117 * C1872 + C50800 * C1878) *
               C108 +
           (C117 * C1873 - C118 * C1867 - C117 * C1874 + C50800 * C1879) *
               C107 +
           (C117 * C1875 - C118 * C1868 - C117 * C1876 + C50800 * C1880) *
               C106) *
              C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C1695 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C3114 + C3115 + C3116) * C50661) *
               C50816 * C50783 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C1695) *
              C50703 * C1047 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C1695 -
           ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
             C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
             C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
                C50661 +
            (C3116 + C3115 + C3114) * C2311) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C1695 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C280 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C50783 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C1695) *
              C281 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C1695 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50661 +
            (C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596) *
                C2311) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C2311 +
           (C2374 + C2375 + C2376) * C50661) *
              C50816 * C1861 -
          ((C2777 + C2778 + C2779) * C50661 +
           (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
            C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
            C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
               C2311) *
              C50816 * C1862 +
          ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
            C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
            C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
               C2311 +
           (C2780 + C2781 + C2782) * C50661) *
              C50816 * C1863 -
          ((C2317 * C4637 - C2318 * C4633 - C2317 * C4638 + C2310 * C4645 +
            C2315 * C4639 - C2316 * C4634 - C2315 * C4640 + C2309 * C4646 +
            C2313 * C1873 - C2314 * C1867 - C2313 * C1874 + C2308 * C1879) *
               C50661 +
           (C2317 * C4641 - C2318 * C4635 - C2317 * C4642 + C2310 * C4647 +
            C2315 * C4643 - C2316 * C4636 - C2315 * C4644 + C2309 * C4648 +
            C2313 * C1875 - C2314 * C1868 - C2313 * C1876 + C2308 * C1880) *
               C2311) *
              C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C50974 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50975 +
           ((C117 * C486 - C118 * C472 - C117 * C487 + C50800 * C502) * C106 +
            C548 * C107 + C549 * C108 + C550 * C109) *
               C50816 * C2111) *
              C50703 * C50919 +
          ((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
               C50975 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C50974 -
           ((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C109 +
            C550 * C108 + C549 * C107 + C548 * C106) *
               C50816 * C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C50974 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50975 +
           ((C2313 * C486 - C2314 * C472 - C2313 * C487 + C2308 * C502 +
             C2315 * C1244 - C2316 * C1237 - C2315 * C1245 + C2309 * C1249 +
             C2317 * C2731 - C2318 * C2728 - C2317 * C2732 + C2310 * C2737) *
                C2311 +
            (C2780 + C2781 + C2782) * C50661) *
               C50816 * C2111) *
              C50703 * C50919 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C3114 + C3115 + C3116) * C50661) *
               C50816 * C50975 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C50974 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50661 +
            (C2782 + C2781 + C2780) * C2311) *
               C50816 * C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C1695 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C50703 * C1046 +
          ((C547 * C106 + C546 * C107 + C545 * C108 + C775 * C109) * C50816 *
               C50783 -
           (C181 * C109 + C180 * C108 + C179 * C107 + C178 * C106) * C50816 *
               C1695) *
              C50703 * C1047 +
          ((C179 * C106 + C180 * C107 + C181 * C108 + C182 * C109) * C50816 *
               C1695 -
           ((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C109 +
            C775 * C108 + C545 * C107 + C546 * C106) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C106 +
            C178 * C107 + C179 * C108 + C180 * C109) *
               C50816 * C1695 -
           (C545 * C109 + C546 * C108 + C547 * C107 +
            (C117 * C484 - C118 * C471 - C117 * C485 + C50800 * C501) * C106) *
               C50816 * C50783) *
              C280 +
          (((C117 * C910 - C118 * C905 - C117 * C911 + C50800 * C920) * C106 +
            C944 * C107 + C945 * C108 + C946 * C109) *
               C50816 * C50783 -
           (C362 * C109 + C363 * C108 + C364 * C107 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C106) *
               C50816 * C1695) *
              C281 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C106 +
            C365 * C107 + C366 * C108 + C367 * C109) *
               C50816 * C1695 -
           ((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                C109 +
            (C117 * C1587 - C118 * C1582 - C117 * C1588 + C50800 * C1594) *
                C108 +
            (C117 * C1589 - C118 * C1583 - C117 * C1590 + C50800 * C1595) *
                C107 +
            (C117 * C1591 - C118 * C1584 - C117 * C1592 + C50800 * C1596) *
                C106) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C1695 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C2779 + C2778 + C2777) * C2311 +
            (C3114 + C3115 + C3116) * C50661) *
               C50816 * C50783 -
           ((C2377 + C2378 + C2379) * C50661 +
            (C2376 + C2375 + C2374) * C2311) *
               C50816 * C1695) *
              C50703 * C1047 +
          (((C2379 + C2378 + C2377) * C2311 +
            (C2380 + C2381 + C2382) * C50661) *
               C50816 * C1695 -
           ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
             C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
             C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
                C50661 +
            (C3116 + C3115 + C3114) * C2311) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C2311 +
            (C2374 + C2375 + C2376) * C50661) *
               C50816 * C1695 -
           ((C2777 + C2778 + C2779) * C50661 +
            (C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501) *
                C2311) *
               C50816 * C50783) *
              C280 +
          (((C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319) *
                C2311 +
            (C3341 + C3342 + C3343) * C50661) *
               C50816 * C50783 -
           ((C2577 + C2578 + C2579) * C50661 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C2311) *
               C50816 * C1695) *
              C281 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C2311 +
            (C2580 + C2581 + C2582) * C50661) *
               C50816 * C1695 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50661 +
            (C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596) *
                C2311) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50719 * C50927 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C50719 * C50755) *
              C50970 +
          (((C24923 + C24922 + C24921) * C50912 +
            (C25279 + C25280 + C25281) * C50661) *
               C50816 * C50719 * C50755 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C50719 * C50927) *
              C50971 +
          (((C24735 + C24734 + C24733) * C50912 +
            (C24736 + C24737 + C24738) * C50661) *
               C50816 * C50719 * C50927 -
           ((C24673 * C1124 - C24674 * C1120 - C24673 * C1125 + C24666 * C1132 +
             C24671 * C309 - C24672 * C292 - C24671 * C310 + C50977 * C322 +
             C24669 * C295 - C24670 * C285 - C24669 * C296 + C50976 * C315) *
                C50661 +
            (C25281 + C25280 + C25279) * C50912) *
               C50816 * C50719 * C50755) *
              C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
              C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
              C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                 C50912 +
             (C24730 + C24731 + C24732) * C50661) *
                C50816 * C50928 -
            ((C25109 + C25110 + C25111) * C50661 +
             (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 +
              C24666 * C1596 + C24671 * C910 - C24672 * C905 - C24671 * C911 +
              C50977 * C920 + C24669 * C484 - C24670 * C471 - C24669 * C485 +
              C50976 * C501) *
                 C50912) *
                C50816 * C50783) *
               C50927 +
           (((C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920 +
              C24671 * C1591 - C24672 * C1584 - C24671 * C1592 +
              C50977 * C1596 + C24673 * C3313 - C24674 * C3310 -
              C24673 * C3314 + C24666 * C3319) *
                 C50912 +
             (C25661 + C25662 + C25663) * C50661) *
                C50816 * C50783 -
            ((C24921 + C24922 + C24923) * C50661 +
             (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 +
              C24666 * C1135 + C24671 * C303 - C24672 * C289 - C24671 * C304 +
              C50977 * C319 + C24669 * C301 - C24670 * C288 - C24669 * C302 +
              C50976 * C318) *
                 C50912) *
                C50816 * C50928) *
               C50755) *
              C283 +
          ((((C25111 + C25110 + C25109) * C50912 +
             (C25446 + C25447 + C25448) * C50661) *
                C50816 * C50783 -
            ((C24733 + C24734 + C24735) * C50661 +
             (C24732 + C24731 + C24730) * C50912) *
                C50816 * C50928) *
               C50927 +
           (((C24923 + C24922 + C24921) * C50912 +
             (C25279 + C25280 + C25281) * C50661) *
                C50816 * C50928 -
            ((C24673 * C3317 - C24674 * C3312 - C24673 * C3318 +
              C24666 * C3321 + C24671 * C1587 - C24672 * C1582 -
              C24671 * C1588 + C50977 * C1594 + C24669 * C914 - C24670 * C907 -
              C24669 * C915 + C50976 * C922) *
                 C50661 +
             (C25663 + C25662 + C25661) * C50912) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50719 * C280 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C50719 * C281 +
           ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50912 +
            (C24924 + C24925 + C24926) * C50661) *
               C50816 * C50719 * C282) *
              C283 +
          (((C24923 + C24922 + C24921) * C50912 +
            (C24669 * C297 - C24670 * C286 - C24669 * C298 + C50976 * C316 +
             C24671 * C307 - C24672 * C291 - C24671 * C308 + C50977 * C321 +
             C24673 * C1126 - C24674 * C1121 - C24673 * C1127 +
             C24666 * C1133) *
                C50661) *
               C50816 * C50719 * C281 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C50719 * C280 -
           ((C24673 * C2535 - C24674 * C2530 - C24673 * C2536 + C24666 * C2539 +
             C24671 * C1126 - C24672 * C1121 - C24671 * C1127 + C50977 * C1133 +
             C24669 * C307 - C24670 * C291 - C24669 * C308 + C50976 * C321) *
                C50661 +
            (C24926 + C24925 + C24924) * C50912) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50912 +
           (C24730 + C24731 + C24732) * C50661) *
              C50816 * C50719 * C50703 * C113 -
          ((C24733 + C24734 + C24735) * C50661 +
           (C24732 + C24731 + C24730) * C50912) *
              C50816 * C50719 * C50703 * C114 +
          ((C24735 + C24734 + C24733) * C50912 +
           (C24736 + C24737 + C24738) * C50661) *
              C50816 * C50719 * C50703 * C115 -
          ((C24673 * C313 - C24674 * C294 - C24673 * C314 + C24666 * C324 +
            C24671 * C311 - C24672 * C293 - C24671 * C312 + C50977 * C323 +
            C24669 * C134 - C24670 * C123 - C24669 * C135 + C50976 * C144) *
               C50661 +
           (C24738 + C24737 + C24736) * C50912) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C465 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C466 +
           ((C24669 * C486 - C24670 * C472 - C24669 * C487 + C50976 * C502 +
             C24671 * C1244 - C24672 * C1237 - C24671 * C1245 + C50977 * C1249 +
             C24673 * C2731 - C24674 * C2728 - C24673 * C2732 +
             C24666 * C2737) *
                C50912 +
            (C25112 + C25113 + C25114) * C50661) *
               C50816 * C467) *
              C50703 * C283 +
          (((C25111 + C25110 + C25109) * C50912 +
            (C24669 * C480 - C24670 * C469 - C24669 * C481 + C50976 * C499 +
             C24671 * C914 - C24672 * C907 - C24671 * C915 + C50977 * C922 +
             C24673 * C1587 - C24674 * C1582 - C24673 * C1588 +
             C24666 * C1594) *
                C50661) *
               C50816 * C466 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C465 -
           ((C24673 * C2735 - C24674 * C2730 - C24673 * C2736 + C24666 * C2739 +
             C24671 * C1240 - C24672 * C1235 - C24671 * C1241 + C50977 * C1247 +
             C24669 * C490 - C24670 * C474 - C24669 * C491 + C50976 * C504) *
                C50661 +
            (C25114 + C25113 + C25112) * C50912) *
               C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50928 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C50783) *
              C50703 * C50970 +
          (((C25111 + C25110 + C25109) * C50912 +
            (C25446 + C25447 + C25448) * C50661) *
               C50816 * C50783 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C50928) *
              C50703 * C50971 +
          (((C24735 + C24734 + C24733) * C50912 +
            (C24736 + C24737 + C24738) * C50661) *
               C50816 * C50928 -
           ((C24673 * C1585 - C24674 * C1581 - C24673 * C1586 + C24666 * C1593 +
             C24671 * C916 - C24672 * C908 - C24671 * C917 + C50977 * C923 +
             C24669 * C478 - C24670 * C468 - C24669 * C479 + C50976 * C498) *
                C50661 +
            (C25448 + C25447 + C25446) * C50912) *
               C50816 * C50783) *
              C50703 * C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50912 +
           (C24730 + C24731 + C24732) * C50661) *
              C50816 * C50719 * C50703 * C113 -
          ((C24733 + C24734 + C24735) * C50661 +
           (C24732 + C24731 + C24730) * C50912) *
              C50816 * C50719 * C50703 * C114 +
          ((C24735 + C24734 + C24733) * C50912 +
           (C24736 + C24737 + C24738) * C50661) *
              C50816 * C50719 * C50703 * C115 -
          ((C24673 * C313 - C24674 * C294 - C24673 * C314 + C24666 * C324 +
            C24671 * C311 - C24672 * C293 - C24671 * C312 + C50977 * C323 +
            C24669 * C134 - C24670 * C123 - C24669 * C135 + C50976 * C144) *
               C50661 +
           (C24738 + C24737 + C24736) * C50912) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50719 * C280 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C50719 * C281 +
           ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50912 +
            (C24924 + C24925 + C24926) * C50661) *
               C50816 * C50719 * C282) *
              C283 +
          (((C24923 + C24922 + C24921) * C50912 +
            (C24669 * C297 - C24670 * C286 - C24669 * C298 + C50976 * C316 +
             C24671 * C307 - C24672 * C291 - C24671 * C308 + C50977 * C321 +
             C24673 * C1126 - C24674 * C1121 - C24673 * C1127 +
             C24666 * C1133) *
                C50661) *
               C50816 * C50719 * C281 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C50719 * C280 -
           ((C24673 * C2535 - C24674 * C2530 - C24673 * C2536 + C24666 * C2539 +
             C24671 * C1126 - C24672 * C1121 - C24671 * C1127 + C50977 * C1133 +
             C24669 * C307 - C24670 * C291 - C24669 * C308 + C50976 * C321) *
                C50661 +
            (C24926 + C24925 + C24924) * C50912) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50719 * C50972 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C50719 * C50973 +
           ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50912 +
            (C24924 + C24925 + C24926) * C50661) *
               C50816 * C50719 * C1350) *
              C50919 +
          (((C24923 + C24922 + C24921) * C50912 +
            (C25279 + C25280 + C25281) * C50661) *
               C50816 * C50719 * C50973 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C50719 * C50972 -
           ((C24673 * C2535 - C24674 * C2530 - C24673 * C2536 + C24666 * C2539 +
             C24671 * C1126 - C24672 * C1121 - C24671 * C1127 + C50977 * C1133 +
             C24669 * C307 - C24670 * C291 - C24669 * C308 + C50976 * C321) *
                C50661 +
            (C24926 + C24925 + C24924) * C50912) *
               C50816 * C50719 * C1350) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50928 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C50783) *
              C50972 +
          (((C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920 +
             C24671 * C1591 - C24672 * C1584 - C24671 * C1592 + C50977 * C1596 +
             C24673 * C3313 - C24674 * C3310 - C24673 * C3314 +
             C24666 * C3319) *
                C50912 +
            (C25661 + C25662 + C25663) * C50661) *
               C50816 * C50783 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C50928) *
              C50973 +
          (((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50912 +
            (C24924 + C24925 + C24926) * C50661) *
               C50816 * C50928 -
           ((C24673 * C4237 - C24674 * C4235 - C24673 * C4238 + C24666 * C4241 +
             C24671 * C3315 - C24672 * C3311 - C24671 * C3316 + C50977 * C3320 +
             C24669 * C1589 - C24670 * C1583 - C24669 * C1590 +
             C50976 * C1595) *
                C50661 +
            (C24673 * C4239 - C24674 * C4236 - C24673 * C4240 + C24666 * C4242 +
             C24671 * C3313 - C24672 * C3310 - C24671 * C3314 + C50977 * C3319 +
             C24669 * C1591 - C24670 * C1584 - C24669 * C1592 +
             C50976 * C1596) *
                C50912) *
               C50816 * C50783) *
              C1350) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50912 +
           (C24730 + C24731 + C24732) * C50661) *
              C50816 * C50719 * C1115 -
          ((C24921 + C24922 + C24923) * C50661 +
           (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
            C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
            C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
               C50912) *
              C50816 * C50719 * C1116 +
          ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
            C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
            C24673 * C2531 - C24674 * C2528 - C24673 * C2532 + C24666 * C2537) *
               C50912 +
           (C24924 + C24925 + C24926) * C50661) *
              C50816 * C50719 * C1117 -
          ((C24673 * C3589 - C24674 * C3587 - C24673 * C3590 + C24666 * C3593 +
            C24671 * C2533 - C24672 * C2529 - C24671 * C2534 + C50977 * C2538 +
            C24669 * C1128 - C24670 * C1122 - C24669 * C1129 + C50976 * C1134) *
               C50661 +
           (C24673 * C3591 - C24674 * C3588 - C24673 * C3592 + C24666 * C3594 +
            C24671 * C2531 - C24672 * C2528 - C24671 * C2532 + C50977 * C2537 +
            C24669 * C1130 - C24670 * C1123 - C24669 * C1131 + C50976 * C1135) *
               C50912) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50719 * C1044 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C24923 + C24922 + C24921) * C50912 +
            (C25279 + C25280 + C25281) * C50661) *
               C50816 * C50719 * C50755 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C50719 * C1044) *
              C1047 +
          (((C24735 + C24734 + C24733) * C50912 +
            (C24736 + C24737 + C24738) * C50661) *
               C50816 * C50719 * C1044 -
           ((C24673 * C1124 - C24674 * C1120 - C24673 * C1125 + C24666 * C1132 +
             C24671 * C309 - C24672 * C292 - C24671 * C310 + C50977 * C322 +
             C24669 * C295 - C24670 * C285 - C24669 * C296 + C50976 * C315) *
                C50661 +
            (C25281 + C25280 + C25279) * C50912) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C465 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C466 +
           ((C24669 * C486 - C24670 * C472 - C24669 * C487 + C50976 * C502 +
             C24671 * C1244 - C24672 * C1237 - C24671 * C1245 + C50977 * C1249 +
             C24673 * C2731 - C24674 * C2728 - C24673 * C2732 +
             C24666 * C2737) *
                C50912 +
            (C25112 + C25113 + C25114) * C50661) *
               C50816 * C467) *
              C1044 +
          (((C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920 +
             C24671 * C1591 - C24672 * C1584 - C24671 * C1592 + C50977 * C1596 +
             C24673 * C3313 - C24674 * C3310 - C24673 * C3314 +
             C24666 * C3319) *
                C50912 +
            (C25661 + C25662 + C25663) * C50661) *
               C50816 * C466 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C465 -
           ((C24673 * C3743 - C24674 * C3741 - C24673 * C3744 + C24666 * C3747 +
             C24671 * C2733 - C24672 * C2729 - C24671 * C2734 + C50977 * C2738 +
             C24669 * C1242 - C24670 * C1236 - C24669 * C1243 +
             C50976 * C1248) *
                C50661 +
            (C24673 * C3745 - C24674 * C3742 - C24673 * C3746 + C24666 * C3748 +
             C24671 * C2731 - C24672 * C2728 - C24671 * C2732 + C50977 * C2737 +
             C24669 * C1244 - C24670 * C1237 - C24669 * C1245 +
             C50976 * C1249) *
                C50912) *
               C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
              C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
              C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                 C50912 +
             (C24730 + C24731 + C24732) * C50661) *
                C50816 * C50928 -
            ((C25109 + C25110 + C25111) * C50661 +
             (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 +
              C24666 * C1596 + C24671 * C910 - C24672 * C905 - C24671 * C911 +
              C50977 * C920 + C24669 * C484 - C24670 * C471 - C24669 * C485 +
              C50976 * C501) *
                 C50912) *
                C50816 * C50783) *
               C1044 +
           (((C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920 +
              C24671 * C1591 - C24672 * C1584 - C24671 * C1592 +
              C50977 * C1596 + C24673 * C3313 - C24674 * C3310 -
              C24673 * C3314 + C24666 * C3319) *
                 C50912 +
             (C25661 + C25662 + C25663) * C50661) *
                C50816 * C50783 -
            ((C24921 + C24922 + C24923) * C50661 +
             (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 +
              C24666 * C1135 + C24671 * C303 - C24672 * C289 - C24671 * C304 +
              C50977 * C319 + C24669 * C301 - C24670 * C288 - C24669 * C302 +
              C50976 * C318) *
                 C50912) *
                C50816 * C50928) *
               C50755) *
              C50919 +
          ((((C25111 + C25110 + C25109) * C50912 +
             (C25446 + C25447 + C25448) * C50661) *
                C50816 * C50783 -
            ((C24733 + C24734 + C24735) * C50661 +
             (C24732 + C24731 + C24730) * C50912) *
                C50816 * C50928) *
               C1044 +
           (((C24923 + C24922 + C24921) * C50912 +
             (C25279 + C25280 + C25281) * C50661) *
                C50816 * C50928 -
            ((C24673 * C3317 - C24674 * C3312 - C24673 * C3318 +
              C24666 * C3321 + C24671 * C1587 - C24672 * C1582 -
              C24671 * C1588 + C50977 * C1594 + C24669 * C914 - C24670 * C907 -
              C24669 * C915 + C50976 * C922) *
                 C50661 +
             (C25663 + C25662 + C25661) * C50912) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50719 * C1044 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C24923 + C24922 + C24921) * C50912 +
            (C25279 + C25280 + C25281) * C50661) *
               C50816 * C50719 * C50755 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C50719 * C1044) *
              C1047 +
          (((C24735 + C24734 + C24733) * C50912 +
            (C24736 + C24737 + C24738) * C50661) *
               C50816 * C50719 * C1044 -
           ((C24673 * C1124 - C24674 * C1120 - C24673 * C1125 + C24666 * C1132 +
             C24671 * C309 - C24672 * C292 - C24671 * C310 + C50977 * C322 +
             C24669 * C295 - C24670 * C285 - C24669 * C296 + C50976 * C315) *
                C50661 +
            (C25281 + C25280 + C25279) * C50912) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50912 +
           (C24730 + C24731 + C24732) * C50661) *
              C50816 * C50719 * C1115 -
          ((C24921 + C24922 + C24923) * C50661 +
           (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
            C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
            C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
               C50912) *
              C50816 * C50719 * C1116 +
          ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
            C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
            C24673 * C2531 - C24674 * C2528 - C24673 * C2532 + C24666 * C2537) *
               C50912 +
           (C24924 + C24925 + C24926) * C50661) *
              C50816 * C50719 * C1117 -
          ((C24673 * C3589 - C24674 * C3587 - C24673 * C3590 + C24666 * C3593 +
            C24671 * C2533 - C24672 * C2529 - C24671 * C2534 + C50977 * C2538 +
            C24669 * C1128 - C24670 * C1122 - C24669 * C1129 + C50976 * C1134) *
               C50661 +
           (C24673 * C3591 - C24674 * C3588 - C24673 * C3592 + C24666 * C3594 +
            C24671 * C2531 - C24672 * C2528 - C24671 * C2532 + C50977 * C2537 +
            C24669 * C1130 - C24670 * C1123 - C24669 * C1131 + C50976 * C1135) *
               C50912) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
              C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
              C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                 C50912 +
             (C24730 + C24731 + C24732) * C50661) *
                C50816 * C1695 -
            ((C25109 + C25110 + C25111) * C50661 +
             (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 +
              C24666 * C1596 + C24671 * C910 - C24672 * C905 - C24671 * C911 +
              C50977 * C920 + C24669 * C484 - C24670 * C471 - C24669 * C485 +
              C50976 * C501) *
                 C50912) *
                C50816 * C50783) *
               C50927 +
           (((C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920 +
              C24671 * C1591 - C24672 * C1584 - C24671 * C1592 +
              C50977 * C1596 + C24673 * C3313 - C24674 * C3310 -
              C24673 * C3314 + C24666 * C3319) *
                 C50912 +
             (C25661 + C25662 + C25663) * C50661) *
                C50816 * C50783 -
            ((C24921 + C24922 + C24923) * C50661 +
             (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 +
              C24666 * C1135 + C24671 * C303 - C24672 * C289 - C24671 * C304 +
              C50977 * C319 + C24669 * C301 - C24670 * C288 - C24669 * C302 +
              C50976 * C318) *
                 C50912) *
                C50816 * C1695) *
               C50755) *
              C50919 +
          ((((C25111 + C25110 + C25109) * C50912 +
             (C25446 + C25447 + C25448) * C50661) *
                C50816 * C50783 -
            ((C24733 + C24734 + C24735) * C50661 +
             (C24732 + C24731 + C24730) * C50912) *
                C50816 * C1695) *
               C50927 +
           (((C24923 + C24922 + C24921) * C50912 +
             (C25279 + C25280 + C25281) * C50661) *
                C50816 * C1695 -
            ((C24673 * C3317 - C24674 * C3312 - C24673 * C3318 +
              C24666 * C3321 + C24671 * C1587 - C24672 * C1582 -
              C24671 * C1588 + C50977 * C1594 + C24669 * C914 - C24670 * C907 -
              C24669 * C915 + C50976 * C922) *
                 C50661 +
             (C25663 + C25662 + C25661) * C50912) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50974 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C50975 +
           ((C24669 * C486 - C24670 * C472 - C24669 * C487 + C50976 * C502 +
             C24671 * C1244 - C24672 * C1237 - C24671 * C1245 + C50977 * C1249 +
             C24673 * C2731 - C24674 * C2728 - C24673 * C2732 +
             C24666 * C2737) *
                C50912 +
            (C25112 + C25113 + C25114) * C50661) *
               C50816 * C2111) *
              C50927 +
          (((C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920 +
             C24671 * C1591 - C24672 * C1584 - C24671 * C1592 + C50977 * C1596 +
             C24673 * C3313 - C24674 * C3310 - C24673 * C3314 +
             C24666 * C3319) *
                C50912 +
            (C25661 + C25662 + C25663) * C50661) *
               C50816 * C50975 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C50974 -
           ((C24673 * C3743 - C24674 * C3741 - C24673 * C3744 + C24666 * C3747 +
             C24671 * C2733 - C24672 * C2729 - C24671 * C2734 + C50977 * C2738 +
             C24669 * C1242 - C24670 * C1236 - C24669 * C1243 +
             C50976 * C1248) *
                C50661 +
            (C24673 * C3745 - C24674 * C3742 - C24673 * C3746 + C24666 * C3748 +
             C24671 * C2731 - C24672 * C2728 - C24671 * C2732 + C50977 * C2737 +
             C24669 * C1244 - C24670 * C1237 - C24669 * C1245 +
             C50976 * C1249) *
                C50912) *
               C50816 * C2111) *
              C50755) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C1695 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C50783) *
              C280 +
          (((C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920 +
             C24671 * C1591 - C24672 * C1584 - C24671 * C1592 + C50977 * C1596 +
             C24673 * C3313 - C24674 * C3310 - C24673 * C3314 +
             C24666 * C3319) *
                C50912 +
            (C25661 + C25662 + C25663) * C50661) *
               C50816 * C50783 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C1695) *
              C281 +
          (((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50912 +
            (C24924 + C24925 + C24926) * C50661) *
               C50816 * C1695 -
           ((C24673 * C4237 - C24674 * C4235 - C24673 * C4238 + C24666 * C4241 +
             C24671 * C3315 - C24672 * C3311 - C24671 * C3316 + C50977 * C3320 +
             C24669 * C1589 - C24670 * C1583 - C24669 * C1590 +
             C50976 * C1595) *
                C50661 +
            (C24673 * C4239 - C24674 * C4236 - C24673 * C4240 + C24666 * C4242 +
             C24671 * C3313 - C24672 * C3310 - C24671 * C3314 + C50977 * C3319 +
             C24669 * C1591 - C24670 * C1584 - C24669 * C1592 +
             C50976 * C1596) *
                C50912) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C1695 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C25111 + C25110 + C25109) * C50912 +
            (C25446 + C25447 + C25448) * C50661) *
               C50816 * C50783 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C1695) *
              C50703 * C1047 +
          (((C24735 + C24734 + C24733) * C50912 +
            (C24736 + C24737 + C24738) * C50661) *
               C50816 * C1695 -
           ((C24673 * C1585 - C24674 * C1581 - C24673 * C1586 + C24666 * C1593 +
             C24671 * C916 - C24672 * C908 - C24671 * C917 + C50977 * C923 +
             C24669 * C478 - C24670 * C468 - C24669 * C479 + C50976 * C498) *
                C50661 +
            (C25448 + C25447 + C25446) * C50912) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50912 +
           (C24730 + C24731 + C24732) * C50661) *
              C50816 * C1861 -
          ((C25109 + C25110 + C25111) * C50661 +
           (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
            C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
            C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
               C50912) *
              C50816 * C1862 +
          ((C24669 * C486 - C24670 * C472 - C24669 * C487 + C50976 * C502 +
            C24671 * C1244 - C24672 * C1237 - C24671 * C1245 + C50977 * C1249 +
            C24673 * C2731 - C24674 * C2728 - C24673 * C2732 + C24666 * C2737) *
               C50912 +
           (C25112 + C25113 + C25114) * C50661) *
              C50816 * C1863 -
          ((C24673 * C4637 - C24674 * C4633 - C24673 * C4638 + C24666 * C4645 +
            C24671 * C4639 - C24672 * C4634 - C24671 * C4640 + C50977 * C4646 +
            C24669 * C1873 - C24670 * C1867 - C24669 * C1874 + C50976 * C1879) *
               C50661 +
           (C24673 * C4641 - C24674 * C4635 - C24673 * C4642 + C24666 * C4647 +
            C24671 * C4643 - C24672 * C4636 - C24671 * C4644 + C50977 * C4648 +
            C24669 * C1875 - C24670 * C1868 - C24669 * C1876 + C50976 * C1880) *
               C50912) *
              C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C50974 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C50975 +
           ((C24669 * C486 - C24670 * C472 - C24669 * C487 + C50976 * C502 +
             C24671 * C1244 - C24672 * C1237 - C24671 * C1245 + C50977 * C1249 +
             C24673 * C2731 - C24674 * C2728 - C24673 * C2732 +
             C24666 * C2737) *
                C50912 +
            (C25112 + C25113 + C25114) * C50661) *
               C50816 * C2111) *
              C50703 * C50919 +
          (((C25111 + C25110 + C25109) * C50912 +
            (C25446 + C25447 + C25448) * C50661) *
               C50816 * C50975 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C50974 -
           ((C24673 * C2735 - C24674 * C2730 - C24673 * C2736 + C24666 * C2739 +
             C24671 * C1240 - C24672 * C1235 - C24671 * C1241 + C50977 * C1247 +
             C24669 * C490 - C24670 * C474 - C24669 * C491 + C50976 * C504) *
                C50661 +
            (C25114 + C25113 + C25112) * C50912) *
               C50816 * C2111) *
              C50703 * C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C1695 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C25111 + C25110 + C25109) * C50912 +
            (C25446 + C25447 + C25448) * C50661) *
               C50816 * C50783 -
           ((C24733 + C24734 + C24735) * C50661 +
            (C24732 + C24731 + C24730) * C50912) *
               C50816 * C1695) *
              C50703 * C1047 +
          (((C24735 + C24734 + C24733) * C50912 +
            (C24736 + C24737 + C24738) * C50661) *
               C50816 * C1695 -
           ((C24673 * C1585 - C24674 * C1581 - C24673 * C1586 + C24666 * C1593 +
             C24671 * C916 - C24672 * C908 - C24671 * C917 + C50977 * C923 +
             C24669 * C478 - C24670 * C468 - C24669 * C479 + C50976 * C498) *
                C50661 +
            (C25448 + C25447 + C25446) * C50912) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50912 +
            (C24730 + C24731 + C24732) * C50661) *
               C50816 * C1695 -
           ((C25109 + C25110 + C25111) * C50661 +
            (C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501) *
                C50912) *
               C50816 * C50783) *
              C280 +
          (((C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920 +
             C24671 * C1591 - C24672 * C1584 - C24671 * C1592 + C50977 * C1596 +
             C24673 * C3313 - C24674 * C3310 - C24673 * C3314 +
             C24666 * C3319) *
                C50912 +
            (C25661 + C25662 + C25663) * C50661) *
               C50816 * C50783 -
           ((C24921 + C24922 + C24923) * C50661 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50912) *
               C50816 * C1695) *
              C281 +
          (((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50912 +
            (C24924 + C24925 + C24926) * C50661) *
               C50816 * C1695 -
           ((C24673 * C4237 - C24674 * C4235 - C24673 * C4238 + C24666 * C4241 +
             C24671 * C3315 - C24672 * C3311 - C24671 * C3316 + C50977 * C3320 +
             C24669 * C1589 - C24670 * C1583 - C24669 * C1590 +
             C50976 * C1595) *
                C50661 +
            (C24673 * C4239 - C24674 * C4236 - C24673 * C4240 + C24666 * C4242 +
             C24671 * C3313 - C24672 * C3310 - C24671 * C3314 + C50977 * C3319 +
             C24669 * C1591 - C24670 * C1584 - C24669 * C1592 +
             C50976 * C1596) *
                C50912) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C50719 * C50927 -
           ((C24673 * C3313 - C24674 * C3310 - C24673 * C3314 + C24666 * C3319 +
             C24671 * C1591 - C24672 * C1584 - C24671 * C1592 + C50977 * C1596 +
             C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920) *
                C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C50719 * C50755) *
              C50970 +
          (((C24923 + C24922 + C24921) * C50656 * C50941 +
            (C25661 + C25662 + C25663) * C50656 * C50880) *
               C50719 * C50755 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C50719 * C50927) *
              C50971 +
          (((C24735 + C24734 + C24733) * C50656 * C50941 +
            (C25446 + C25447 + C25448) * C50656 * C50880) *
               C50719 * C50927 -
           ((C24673 * C3317 - C24674 * C3312 - C24673 * C3318 + C24666 * C3321 +
             C24671 * C1587 - C24672 * C1582 - C24671 * C1588 + C50977 * C1594 +
             C24669 * C914 - C24670 * C907 - C24669 * C915 + C50976 * C922) *
                C50656 * C50880 +
            (C25281 + C25280 + C25279) * C50656 * C50941) *
               C50719 * C50755) *
              C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
              C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
              C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                 C50656 * C50941 +
             (C31354 + C31355 + C31356) * C50656 * C50880) *
                C50928 -
            ((C31357 + C31358 + C31359) * C50656 * C50880 +
             (C31356 + C31355 + C31354) * C50656 * C50941) *
                C50783) *
               C50927 +
           (((C31864 + C31865 + C31866) * C50656 * C50941 +
             (C24669 * C1244 - C24670 * C1237 - C24669 * C1245 +
              C50976 * C1249 + C24671 * C2731 - C24672 * C2728 -
              C24671 * C2732 + C50977 * C2737 + C24673 * C3745 -
              C24674 * C3742 - C24673 * C3746 + C24666 * C3748) *
                 C50656 * C50880) *
                C50783 -
            ((C31866 + C31865 + C31864) * C50656 * C50880 +
             (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 +
              C24666 * C1135 + C24671 * C303 - C24672 * C289 - C24671 * C304 +
              C50977 * C319 + C24669 * C301 - C24670 * C288 - C24669 * C302 +
              C50976 * C318) *
                 C50656 * C50941) *
                C50928) *
               C50755) *
              C283 +
          ((((C25111 + C25110 + C25109) * C50656 * C50941 +
             (C25112 + C25113 + C25114) * C50656 * C50880) *
                C50783 -
            ((C25109 + C25110 + C25111) * C50656 * C50880 +
             (C24732 + C24731 + C24730) * C50656 * C50941) *
                C50928) *
               C50927 +
           (((C24923 + C24922 + C24921) * C50656 * C50941 +
             (C25661 + C25662 + C25663) * C50656 * C50880) *
                C50928 -
            ((C24673 * C3743 - C24674 * C3741 - C24673 * C3744 +
              C24666 * C3747 + C24671 * C2733 - C24672 * C2729 -
              C24671 * C2734 + C50977 * C2738 + C24669 * C1242 -
              C24670 * C1236 - C24669 * C1243 + C50976 * C1248) *
                 C50656 * C50880 +
             (C25663 + C25662 + C25661) * C50656 * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24673 * C1591 - C24674 * C1584 - C24673 * C1592 +
             C24666 * C1596) *
                C50656 * C50880) *
               C50719 * C280 -
           ((C24673 * C3313 - C24674 * C3310 - C24673 * C3314 + C24666 * C3319 +
             C24671 * C1591 - C24672 * C1584 - C24671 * C1592 + C50977 * C1596 +
             C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920) *
                C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C50719 * C281 +
           ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50656 * C50941 +
            (C24669 * C1591 - C24670 * C1584 - C24669 * C1592 + C50976 * C1596 +
             C24671 * C3313 - C24672 * C3310 - C24671 * C3314 + C50977 * C3319 +
             C24673 * C4239 - C24674 * C4236 - C24673 * C4240 +
             C24666 * C4242) *
                C50656 * C50880) *
               C50719 * C282) *
              C283 +
          (((C24923 + C24922 + C24921) * C50656 * C50941 +
            (C25661 + C25662 + C25663) * C50656 * C50880) *
               C50719 * C281 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C50719 * C280 -
           ((C24673 * C4237 - C24674 * C4235 - C24673 * C4238 + C24666 * C4241 +
             C24671 * C3315 - C24672 * C3311 - C24671 * C3316 + C50977 * C3320 +
             C24669 * C1589 - C24670 * C1583 - C24669 * C1590 +
             C50976 * C1595) *
                C50656 * C50880 +
            (C24926 + C24925 + C24924) * C50656 * C50941) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50656 * C50941 +
           (C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501 +
            C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
            C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596) *
               C50656 * C50880) *
              C50719 * C50703 * C113 -
          ((C25109 + C25110 + C25111) * C50656 * C50880 +
           (C24732 + C24731 + C24730) * C50656 * C50941) *
              C50719 * C50703 * C114 +
          ((C24735 + C24734 + C24733) * C50656 * C50941 +
           (C25446 + C25447 + C25448) * C50656 * C50880) *
              C50719 * C50703 * C115 -
          ((C24673 * C1585 - C24674 * C1581 - C24673 * C1586 + C24666 * C1593 +
            C24671 * C916 - C24672 * C908 - C24671 * C917 + C50977 * C923 +
            C24669 * C478 - C24670 * C468 - C24669 * C479 + C50976 * C498) *
               C50656 * C50880 +
           (C24738 + C24737 + C24736) * C50656 * C50941) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C465 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C466 +
           ((C31359 + C31358 + C31357) * C50656 * C50941 +
            (C24669 * C1875 - C24670 * C1868 - C24669 * C1876 + C50976 * C1880 +
             C24671 * C4643 - C24672 * C4636 - C24671 * C4644 + C50977 * C4648 +
             C24673 * C4641 - C24674 * C4635 - C24673 * C4642 +
             C24666 * C4647) *
                C50656 * C50880) *
               C467) *
              C50703 * C283 +
          (((C25111 + C25110 + C25109) * C50656 * C50941 +
            (C25112 + C25113 + C25114) * C50656 * C50880) *
               C466 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C465 -
           ((C24673 * C4637 - C24674 * C4633 - C24673 * C4638 + C24666 * C4645 +
             C24671 * C4639 - C24672 * C4634 - C24671 * C4640 + C50977 * C4646 +
             C24669 * C1873 - C24670 * C1867 - C24669 * C1874 +
             C50976 * C1879) *
                C50656 * C50880 +
            (C25114 + C25113 + C25112) * C50656 * C50941) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C50928 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C50783) *
              C50703 * C50970 +
          (((C25111 + C25110 + C25109) * C50656 * C50941 +
            (C25112 + C25113 + C25114) * C50656 * C50880) *
               C50783 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C50928) *
              C50703 * C50971 +
          (((C24735 + C24734 + C24733) * C50656 * C50941 +
            (C25446 + C25447 + C25448) * C50656 * C50880) *
               C50928 -
           ((C24673 * C2735 - C24674 * C2730 - C24673 * C2736 + C24666 * C2739 +
             C24671 * C1240 - C24672 * C1235 - C24671 * C1241 + C50977 * C1247 +
             C24669 * C490 - C24670 * C474 - C24669 * C491 + C50976 * C504) *
                C50656 * C50880 +
            (C25448 + C25447 + C25446) * C50656 * C50941) *
               C50783) *
              C50703 * C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50656 * C50941 +
           (C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501 +
            C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
            C24673 * C1591 - C24674 * C1584 - C24673 * C1592 + C24666 * C1596) *
               C50656 * C50880) *
              C50719 * C50703 * C113 -
          ((C25109 + C25110 + C25111) * C50656 * C50880 +
           (C24732 + C24731 + C24730) * C50656 * C50941) *
              C50719 * C50703 * C114 +
          ((C24735 + C24734 + C24733) * C50656 * C50941 +
           (C25446 + C25447 + C25448) * C50656 * C50880) *
              C50719 * C50703 * C115 -
          ((C24673 * C1585 - C24674 * C1581 - C24673 * C1586 + C24666 * C1593 +
            C24671 * C916 - C24672 * C908 - C24671 * C917 + C50977 * C923 +
            C24669 * C478 - C24670 * C468 - C24669 * C479 + C50976 * C498) *
               C50656 * C50880 +
           (C24738 + C24737 + C24736) * C50656 * C50941) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C24669 * C484 - C24670 * C471 - C24669 * C485 + C50976 * C501 +
             C24671 * C910 - C24672 * C905 - C24671 * C911 + C50977 * C920 +
             C24673 * C1591 - C24674 * C1584 - C24673 * C1592 +
             C24666 * C1596) *
                C50656 * C50880) *
               C50719 * C280 -
           ((C24673 * C3313 - C24674 * C3310 - C24673 * C3314 + C24666 * C3319 +
             C24671 * C1591 - C24672 * C1584 - C24671 * C1592 + C50977 * C1596 +
             C24669 * C910 - C24670 * C905 - C24669 * C911 + C50976 * C920) *
                C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C50719 * C281 +
           ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50656 * C50941 +
            (C24669 * C1591 - C24670 * C1584 - C24669 * C1592 + C50976 * C1596 +
             C24671 * C3313 - C24672 * C3310 - C24671 * C3314 + C50977 * C3319 +
             C24673 * C4239 - C24674 * C4236 - C24673 * C4240 +
             C24666 * C4242) *
                C50656 * C50880) *
               C50719 * C282) *
              C283 +
          (((C24923 + C24922 + C24921) * C50656 * C50941 +
            (C25661 + C25662 + C25663) * C50656 * C50880) *
               C50719 * C281 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C50719 * C280 -
           ((C24673 * C4237 - C24674 * C4235 - C24673 * C4238 + C24666 * C4241 +
             C24671 * C3315 - C24672 * C3311 - C24671 * C3316 + C50977 * C3320 +
             C24669 * C1589 - C24670 * C1583 - C24669 * C1590 +
             C50976 * C1595) *
                C50656 * C50880 +
            (C24926 + C24925 + C24924) * C50656 * C50941) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C50719 * C50972 -
           ((C31866 + C31865 + C31864) * C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C50719 * C50973 +
           ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50656 * C50941 +
            (C24669 * C1591 - C24670 * C1584 - C24669 * C1592 + C50976 * C1596 +
             C24671 * C3313 - C24672 * C3310 - C24671 * C3314 + C50977 * C3319 +
             C24673 * C4239 - C24674 * C4236 - C24673 * C4240 +
             C24666 * C4242) *
                C50656 * C50880) *
               C50719 * C1350) *
              C50919 +
          (((C24923 + C24922 + C24921) * C50656 * C50941 +
            (C25661 + C25662 + C25663) * C50656 * C50880) *
               C50719 * C50973 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C50719 * C50972 -
           ((C24673 * C4237 - C24674 * C4235 - C24673 * C4238 + C24666 * C4241 +
             C24671 * C3315 - C24672 * C3311 - C24671 * C3316 + C50977 * C3320 +
             C24669 * C1589 - C24670 * C1583 - C24669 * C1590 +
             C50976 * C1595) *
                C50656 * C50880 +
            (C24926 + C24925 + C24924) * C50656 * C50941) *
               C50719 * C1350) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C50928 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C50783) *
              C50972 +
          (((C31864 + C31865 + C31866) * C50656 * C50941 +
            (C32275 + C32276 + C32277) * C50656 * C50880) *
               C50783 -
           ((C31866 + C31865 + C31864) * C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C50928) *
              C50973 +
          (((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50656 * C50941 +
            (C32782 + C32783 + C32784) * C50656 * C50880) *
               C50928 -
           ((C24673 * C20843 - C24674 * C20842 - C24673 * C20844 +
             C24666 * C20845 + C24671 * C3745 - C24672 * C3742 -
             C24671 * C3746 + C50977 * C3748 + C24669 * C2731 - C24670 * C2728 -
             C24669 * C2732 + C50976 * C2737) *
                C50656 * C50880 +
            (C32784 + C32783 + C32782) * C50656 * C50941) *
               C50783) *
              C1350) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50656 * C50941 +
           (C31354 + C31355 + C31356) * C50656 * C50880) *
              C50719 * C1115 -
          ((C31866 + C31865 + C31864) * C50656 * C50880 +
           (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
            C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
            C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
               C50656 * C50941) *
              C50719 * C1116 +
          ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
            C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
            C24673 * C2531 - C24674 * C2528 - C24673 * C2532 + C24666 * C2537) *
               C50656 * C50941 +
           (C24669 * C1591 - C24670 * C1584 - C24669 * C1592 + C50976 * C1596 +
            C24671 * C3313 - C24672 * C3310 - C24671 * C3314 + C50977 * C3319 +
            C24673 * C4239 - C24674 * C4236 - C24673 * C4240 + C24666 * C4242) *
               C50656 * C50880) *
              C50719 * C1117 -
          ((C24673 * C21173 - C24674 * C21172 - C24673 * C21174 +
            C24666 * C21175 + C24671 * C4239 - C24672 * C4236 - C24671 * C4240 +
            C50977 * C4242 + C24669 * C3313 - C24670 * C3310 - C24669 * C3314 +
            C50976 * C3319) *
               C50656 * C50880 +
           (C24673 * C3591 - C24674 * C3588 - C24673 * C3592 + C24666 * C3594 +
            C24671 * C2531 - C24672 * C2528 - C24671 * C2532 + C50977 * C2537 +
            C24669 * C1130 - C24670 * C1123 - C24669 * C1131 + C50976 * C1135) *
               C50656 * C50941) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C50719 * C1044 -
           ((C31866 + C31865 + C31864) * C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C50719 * C50755) *
              C1046 +
          (((C24923 + C24922 + C24921) * C50656 * C50941 +
            (C25661 + C25662 + C25663) * C50656 * C50880) *
               C50719 * C50755 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C50719 * C1044) *
              C1047 +
          (((C24735 + C24734 + C24733) * C50656 * C50941 +
            (C25446 + C25447 + C25448) * C50656 * C50880) *
               C50719 * C1044 -
           ((C24673 * C3317 - C24674 * C3312 - C24673 * C3318 + C24666 * C3321 +
             C24671 * C1587 - C24672 * C1582 - C24671 * C1588 + C50977 * C1594 +
             C24669 * C914 - C24670 * C907 - C24669 * C915 + C50976 * C922) *
                C50656 * C50880 +
            (C25281 + C25280 + C25279) * C50656 * C50941) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C465 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C466 +
           ((C31359 + C31358 + C31357) * C50656 * C50941 +
            (C24669 * C1875 - C24670 * C1868 - C24669 * C1876 + C50976 * C1880 +
             C24671 * C4643 - C24672 * C4636 - C24671 * C4644 + C50977 * C4648 +
             C24673 * C4641 - C24674 * C4635 - C24673 * C4642 +
             C24666 * C4647) *
                C50656 * C50880) *
               C467) *
              C1044 +
          (((C31864 + C31865 + C31866) * C50656 * C50941 +
            (C32275 + C32276 + C32277) * C50656 * C50880) *
               C466 -
           ((C31866 + C31865 + C31864) * C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C465 -
           ((C24673 * C21439 - C24674 * C21438 - C24673 * C21440 +
             C24666 * C21441 + C24671 * C4641 - C24672 * C4635 -
             C24671 * C4642 + C50977 * C4647 + C24669 * C4643 - C24670 * C4636 -
             C24669 * C4644 + C50976 * C4648) *
                C50656 * C50880 +
            (C32277 + C32276 + C32275) * C50656 * C50941) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
              C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
              C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                 C50656 * C50941 +
             (C31354 + C31355 + C31356) * C50656 * C50880) *
                C50928 -
            ((C31357 + C31358 + C31359) * C50656 * C50880 +
             (C31356 + C31355 + C31354) * C50656 * C50941) *
                C50783) *
               C1044 +
           (((C31864 + C31865 + C31866) * C50656 * C50941 +
             (C32275 + C32276 + C32277) * C50656 * C50880) *
                C50783 -
            ((C31866 + C31865 + C31864) * C50656 * C50880 +
             (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 +
              C24666 * C1135 + C24671 * C303 - C24672 * C289 - C24671 * C304 +
              C50977 * C319 + C24669 * C301 - C24670 * C288 - C24669 * C302 +
              C50976 * C318) *
                 C50656 * C50941) *
                C50928) *
               C50755) *
              C50919 +
          ((((C25111 + C25110 + C25109) * C50656 * C50941 +
             (C25112 + C25113 + C25114) * C50656 * C50880) *
                C50783 -
            ((C25109 + C25110 + C25111) * C50656 * C50880 +
             (C24732 + C24731 + C24730) * C50656 * C50941) *
                C50928) *
               C1044 +
           (((C24923 + C24922 + C24921) * C50656 * C50941 +
             (C25661 + C25662 + C25663) * C50656 * C50880) *
                C50928 -
            ((C24673 * C3743 - C24674 * C3741 - C24673 * C3744 +
              C24666 * C3747 + C24671 * C2733 - C24672 * C2729 -
              C24671 * C2734 + C50977 * C2738 + C24669 * C1242 -
              C24670 * C1236 - C24669 * C1243 + C50976 * C1248) *
                 C50656 * C50880 +
             (C25663 + C25662 + C25661) * C50656 * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C50719 * C1044 -
           ((C31866 + C31865 + C31864) * C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C50719 * C50755) *
              C1046 +
          (((C24923 + C24922 + C24921) * C50656 * C50941 +
            (C25661 + C25662 + C25663) * C50656 * C50880) *
               C50719 * C50755 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C50719 * C1044) *
              C1047 +
          (((C24735 + C24734 + C24733) * C50656 * C50941 +
            (C25446 + C25447 + C25448) * C50656 * C50880) *
               C50719 * C1044 -
           ((C24673 * C3317 - C24674 * C3312 - C24673 * C3318 + C24666 * C3321 +
             C24671 * C1587 - C24672 * C1582 - C24671 * C1588 + C50977 * C1594 +
             C24669 * C914 - C24670 * C907 - C24669 * C915 + C50976 * C922) *
                C50656 * C50880 +
            (C25281 + C25280 + C25279) * C50656 * C50941) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50656 * C50941 +
           (C31354 + C31355 + C31356) * C50656 * C50880) *
              C50719 * C1115 -
          ((C31866 + C31865 + C31864) * C50656 * C50880 +
           (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
            C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
            C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
               C50656 * C50941) *
              C50719 * C1116 +
          ((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
            C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
            C24673 * C2531 - C24674 * C2528 - C24673 * C2532 + C24666 * C2537) *
               C50656 * C50941 +
           (C24669 * C1591 - C24670 * C1584 - C24669 * C1592 + C50976 * C1596 +
            C24671 * C3313 - C24672 * C3310 - C24671 * C3314 + C50977 * C3319 +
            C24673 * C4239 - C24674 * C4236 - C24673 * C4240 + C24666 * C4242) *
               C50656 * C50880) *
              C50719 * C1117 -
          ((C24673 * C21173 - C24674 * C21172 - C24673 * C21174 +
            C24666 * C21175 + C24671 * C4239 - C24672 * C4236 - C24671 * C4240 +
            C50977 * C4242 + C24669 * C3313 - C24670 * C3310 - C24669 * C3314 +
            C50976 * C3319) *
               C50656 * C50880 +
           (C24673 * C3591 - C24674 * C3588 - C24673 * C3592 + C24666 * C3594 +
            C24671 * C2531 - C24672 * C2528 - C24671 * C2532 + C50977 * C2537 +
            C24669 * C1130 - C24670 * C1123 - C24669 * C1131 + C50976 * C1135) *
               C50656 * C50941) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
              C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
              C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                 C50656 * C50941 +
             (C31354 + C31355 + C31356) * C50656 * C50880) *
                C1695 -
            ((C31357 + C31358 + C31359) * C50656 * C50880 +
             (C31356 + C31355 + C31354) * C50656 * C50941) *
                C50783) *
               C50927 +
           (((C31864 + C31865 + C31866) * C50656 * C50941 +
             (C32275 + C32276 + C32277) * C50656 * C50880) *
                C50783 -
            ((C31866 + C31865 + C31864) * C50656 * C50880 +
             (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 +
              C24666 * C1135 + C24671 * C303 - C24672 * C289 - C24671 * C304 +
              C50977 * C319 + C24669 * C301 - C24670 * C288 - C24669 * C302 +
              C50976 * C318) *
                 C50656 * C50941) *
                C1695) *
               C50755) *
              C50919 +
          ((((C25111 + C25110 + C25109) * C50656 * C50941 +
             (C25112 + C25113 + C25114) * C50656 * C50880) *
                C50783 -
            ((C25109 + C25110 + C25111) * C50656 * C50880 +
             (C24732 + C24731 + C24730) * C50656 * C50941) *
                C1695) *
               C50927 +
           (((C24923 + C24922 + C24921) * C50656 * C50941 +
             (C25661 + C25662 + C25663) * C50656 * C50880) *
                C1695 -
            ((C24673 * C3743 - C24674 * C3741 - C24673 * C3744 +
              C24666 * C3747 + C24671 * C2733 - C24672 * C2729 -
              C24671 * C2734 + C50977 * C2738 + C24669 * C1242 -
              C24670 * C1236 - C24669 * C1243 + C50976 * C1248) *
                 C50656 * C50880 +
             (C25663 + C25662 + C25661) * C50656 * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C50974 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C50975 +
           ((C31359 + C31358 + C31357) * C50656 * C50941 +
            (C33193 + C33194 + C33195) * C50656 * C50880) *
               C2111) *
              C50927 +
          (((C31864 + C31865 + C31866) * C50656 * C50941 +
            (C32275 + C32276 + C32277) * C50656 * C50880) *
               C50975 -
           ((C31866 + C31865 + C31864) * C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C50974 -
           ((C24673 * C21439 - C24674 * C21438 - C24673 * C21440 +
             C24666 * C21441 + C24671 * C4641 - C24672 * C4635 -
             C24671 * C4642 + C50977 * C4647 + C24669 * C4643 - C24670 * C4636 -
             C24669 * C4644 + C50976 * C4648) *
                C50656 * C50880 +
            (C32277 + C32276 + C32275) * C50656 * C50941) *
               C2111) *
              C50755) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C1695 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C50783) *
              C280 +
          (((C31864 + C31865 + C31866) * C50656 * C50941 +
            (C32275 + C32276 + C32277) * C50656 * C50880) *
               C50783 -
           ((C31866 + C31865 + C31864) * C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C1695) *
              C281 +
          (((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50656 * C50941 +
            (C32782 + C32783 + C32784) * C50656 * C50880) *
               C1695 -
           ((C24673 * C20843 - C24674 * C20842 - C24673 * C20844 +
             C24666 * C20845 + C24671 * C3745 - C24672 * C3742 -
             C24671 * C3746 + C50977 * C3748 + C24669 * C2731 - C24670 * C2728 -
             C24669 * C2732 + C50976 * C2737) *
                C50656 * C50880 +
            (C32784 + C32783 + C32782) * C50656 * C50941) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C1695 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C50783) *
              C50703 * C1046 +
          (((C25111 + C25110 + C25109) * C50656 * C50941 +
            (C25112 + C25113 + C25114) * C50656 * C50880) *
               C50783 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C1695) *
              C50703 * C1047 +
          (((C24735 + C24734 + C24733) * C50656 * C50941 +
            (C25446 + C25447 + C25448) * C50656 * C50880) *
               C1695 -
           ((C24673 * C2735 - C24674 * C2730 - C24673 * C2736 + C24666 * C2739 +
             C24671 * C1240 - C24672 * C1235 - C24671 * C1241 + C50977 * C1247 +
             C24669 * C490 - C24670 * C474 - C24669 * C491 + C50976 * C504) *
                C50656 * C50880 +
            (C25448 + C25447 + C25446) * C50656 * C50941) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
            C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
            C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
               C50656 * C50941 +
           (C31354 + C31355 + C31356) * C50656 * C50880) *
              C1861 -
          ((C31357 + C31358 + C31359) * C50656 * C50880 +
           (C31356 + C31355 + C31354) * C50656 * C50941) *
              C1862 +
          ((C31359 + C31358 + C31357) * C50656 * C50941 +
           (C33193 + C33194 + C33195) * C50656 * C50880) *
              C1863 -
          ((C24673 * C23137 - C24674 * C23136 - C24673 * C23138 +
            C24666 * C23139 + C24671 * C6541 - C24672 * C6538 - C24671 * C6542 +
            C50977 * C6544 + C24669 * C5552 - C24670 * C5549 - C24669 * C5553 +
            C50976 * C5558) *
               C50656 * C50880 +
           (C33195 + C33194 + C33193) * C50656 * C50941) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C50974 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C50975 +
           ((C31359 + C31358 + C31357) * C50656 * C50941 +
            (C33193 + C33194 + C33195) * C50656 * C50880) *
               C2111) *
              C50703 * C50919 +
          (((C25111 + C25110 + C25109) * C50656 * C50941 +
            (C25112 + C25113 + C25114) * C50656 * C50880) *
               C50975 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C50974 -
           ((C24673 * C4637 - C24674 * C4633 - C24673 * C4638 + C24666 * C4645 +
             C24671 * C4639 - C24672 * C4634 - C24671 * C4640 + C50977 * C4646 +
             C24669 * C1873 - C24670 * C1867 - C24669 * C1874 +
             C50976 * C1879) *
                C50656 * C50880 +
            (C25114 + C25113 + C25112) * C50656 * C50941) *
               C2111) *
              C50703 * C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C1695 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C50783) *
              C50703 * C1046 +
          (((C25111 + C25110 + C25109) * C50656 * C50941 +
            (C25112 + C25113 + C25114) * C50656 * C50880) *
               C50783 -
           ((C25109 + C25110 + C25111) * C50656 * C50880 +
            (C24732 + C24731 + C24730) * C50656 * C50941) *
               C1695) *
              C50703 * C1047 +
          (((C24735 + C24734 + C24733) * C50656 * C50941 +
            (C25446 + C25447 + C25448) * C50656 * C50880) *
               C1695 -
           ((C24673 * C2735 - C24674 * C2730 - C24673 * C2736 + C24666 * C2739 +
             C24671 * C1240 - C24672 * C1235 - C24671 * C1241 + C50977 * C1247 +
             C24669 * C490 - C24670 * C474 - C24669 * C491 + C50976 * C504) *
                C50656 * C50880 +
            (C25448 + C25447 + C25446) * C50656 * C50941) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C24669 * C126 - C24670 * C119 - C24669 * C127 + C50976 * C140 +
             C24671 * C301 - C24672 * C288 - C24671 * C302 + C50977 * C318 +
             C24673 * C303 - C24674 * C289 - C24673 * C304 + C24666 * C319) *
                C50656 * C50941 +
            (C31354 + C31355 + C31356) * C50656 * C50880) *
               C1695 -
           ((C31357 + C31358 + C31359) * C50656 * C50880 +
            (C31356 + C31355 + C31354) * C50656 * C50941) *
               C50783) *
              C280 +
          (((C31864 + C31865 + C31866) * C50656 * C50941 +
            (C32275 + C32276 + C32277) * C50656 * C50880) *
               C50783 -
           ((C31866 + C31865 + C31864) * C50656 * C50880 +
            (C24673 * C1130 - C24674 * C1123 - C24673 * C1131 + C24666 * C1135 +
             C24671 * C303 - C24672 * C289 - C24671 * C304 + C50977 * C319 +
             C24669 * C301 - C24670 * C288 - C24669 * C302 + C50976 * C318) *
                C50656 * C50941) *
               C1695) *
              C281 +
          (((C24669 * C303 - C24670 * C289 - C24669 * C304 + C50976 * C319 +
             C24671 * C1130 - C24672 * C1123 - C24671 * C1131 + C50977 * C1135 +
             C24673 * C2531 - C24674 * C2528 - C24673 * C2532 +
             C24666 * C2537) *
                C50656 * C50941 +
            (C32782 + C32783 + C32784) * C50656 * C50880) *
               C1695 -
           ((C24673 * C20843 - C24674 * C20842 - C24673 * C20844 +
             C24666 * C20845 + C24671 * C3745 - C24672 * C3742 -
             C24671 * C3746 + C50977 * C3748 + C24669 * C2731 - C24670 * C2728 -
             C24669 * C2732 + C50976 * C2737) *
                C50656 * C50880 +
            (C32784 + C32783 + C32782) * C50656 * C50941) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C50927 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C50755) *
              C50970 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C50755 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C50927) *
              C50971 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C50719 * C50927 -
           (C20052 * C2535 - C20053 * C2530 - C20052 * C2536 + C20044 * C2539 +
            C20050 * C1126 - C20051 * C1121 - C20050 * C1127 + C20043 * C1133 +
            C20048 * C307 - C20049 * C291 - C20048 * C308 + C20042 * C321 +
            C20046 * C297 - C20047 * C286 - C20046 * C298 + C20041 * C316) *
               C50656 * C50816 * C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C50927 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C50755) *
              C50970 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17839 + C17840) * C17212) *
               C50816 * C50719 * C50755 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C50927) *
              C50971 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C50719 * C50927 -
           ((C17215 * C313 - C17216 * C294 - C17215 * C314 + C50852 * C324 +
             C17213 * C311 - C17214 * C293 - C17213 * C312 + C17208 * C323) *
                C17212 +
            (C17840 + C17839) * C17211 + C17826 * C17210) *
               C50816 * C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C50719 * C50927 -
           ((C17215 * C2731 - C17216 * C2728 - C17215 * C2732 + C50852 * C2737 +
             C17213 * C1244 - C17214 * C1237 - C17213 * C1245 +
             C17208 * C1249) *
                C50656 * C5235 +
            (C17215 * C1591 - C17216 * C1584 - C17215 * C1592 + C50852 * C1596 +
             C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920) *
                C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C50719 * C50755) *
              C50970 +
          (((C17473 + C17472) * C50656 * C5233 +
            (C18220 + C18221) * C50656 * C5234 +
            (C17213 * C1242 - C17214 * C1236 - C17213 * C1243 + C17208 * C1248 +
             C17215 * C2733 - C17216 * C2729 - C17215 * C2734 +
             C50852 * C2738) *
                C50656 * C5235) *
               C50719 * C50755 -
           (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C50719 * C50927) *
              C50971 +
          ((C17274 * C50656 * C5233 + (C17673 + C17672) * C50656 * C5234 +
            (C17678 + C17679) * C50656 * C5235) *
               C50719 * C50927 -
           ((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 + C50852 * C2739 +
             C17213 * C1240 - C17214 * C1235 - C17213 * C1241 +
             C17208 * C1247) *
                C50656 * C5235 +
            (C18223 + C18222) * C50656 * C5234 + C17826 * C50656 * C5233) *
               C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
             C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
             C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
             C20052 * C1130 - C20053 * C1123 - C20052 * C1131 +
             C20044 * C1135) *
                C50656 * C50816 * C50928 -
            (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
             C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
             C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
             C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
                C50656 * C50816 * C50783) *
               C50927 +
           ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
             C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
             C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
             C20052 * C4239 - C20053 * C4236 - C20052 * C4240 +
             C20044 * C4242) *
                C50656 * C50816 * C50783 -
            (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
             C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
             C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
             C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
                C50656 * C50816 * C50928) *
               C50755) *
              C283 +
          (((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
             C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
             C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
             C20052 * C3315 - C20053 * C3311 - C20052 * C3316 +
             C20044 * C3320) *
                C50656 * C50816 * C50783 -
            (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
             C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
             C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
             C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
                C50656 * C50816 * C50928) *
               C50927 +
           ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
             C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
             C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
             C20052 * C2533 - C20053 * C2529 - C20052 * C2534 +
             C20044 * C2538) *
                C50656 * C50816 * C50928 -
            (C20052 * C4237 - C20053 * C4235 - C20052 * C4238 + C20044 * C4241 +
             C20050 * C3315 - C20051 * C3311 - C20050 * C3316 + C20043 * C3320 +
             C20048 * C1589 - C20049 * C1583 - C20048 * C1590 + C20042 * C1595 +
             C20046 * C912 - C20047 * C906 - C20046 * C913 + C20041 * C921) *
                C50656 * C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C17210 +
             (C17266 + C17267) * C17211 + C17274 * C17212) *
                C50816 * C50928 -
            (C17987 * C17212 + (C17674 + C17675) * C17211 +
             (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
              C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                 C17210) *
                C50816 * C50783) *
               C50927 +
           (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
              C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
              C50852 * C1596) *
                 C17210 +
             (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
                C50816 * C50783 -
            (C17826 * C17212 + (C17472 + C17473) * C17211 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C17210) *
                C50816 * C50928) *
               C50755) *
              C283 +
          ((((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
             (C18000 + C18001) * C17212) *
                C50816 * C50783 -
            (C17275 * C17212 + (C17269 + C17268) * C17211 +
             (C17267 + C17266) * C17210) *
                C50816 * C50928) *
               C50927 +
           (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
             (C17839 + C17840) * C17212) *
                C50816 * C50928 -
            ((C17215 * C1585 - C17216 * C1581 - C17215 * C1586 +
              C50852 * C1593 + C17213 * C916 - C17214 * C908 - C17213 * C917 +
              C17208 * C923) *
                 C17212 +
             (C18223 + C18222) * C17211 + (C18221 + C18220) * C17210) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50656 * C5233 +
             (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
                C50928 -
            ((C22213 + C22214) * C50656 * C5235 +
             (C22212 + C22211) * C50656 * C5234 +
             (C22210 + C22209) * C50656 * C5233) *
                C50783) *
               C50927 +
           (((C22741 + C22742) * C50656 * C5233 +
             (C22743 + C22744) * C50656 * C5234 +
             (C17213 * C4643 - C17214 * C4636 - C17213 * C4644 +
              C17208 * C4648 + C17215 * C4641 - C17216 * C4635 -
              C17215 * C4642 + C50852 * C4647) *
                 C50656 * C5235) *
                C50783 -
            ((C22744 + C22743) * C50656 * C5235 +
             (C22742 + C22741) * C50656 * C5234 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50656 * C5233) *
                C50928) *
               C50755) *
              C283 +
          ((((C17675 + C17674) * C50656 * C5233 +
             (C17676 + C17677) * C50656 * C5234 +
             (C22215 + C22216) * C50656 * C5235) *
                C50783 -
            (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
             (C17267 + C17266) * C50656 * C5233) *
                C50928) *
               C50927 +
           (((C17473 + C17472) * C50656 * C5233 +
             (C18220 + C18221) * C50656 * C5234 +
             (C22745 + C22746) * C50656 * C5235) *
                C50928 -
            ((C17215 * C4637 - C17216 * C4633 - C17215 * C4638 +
              C50852 * C4645 + C17213 * C4639 - C17214 * C4634 -
              C17213 * C4640 + C17208 * C4646) *
                 C50656 * C5235 +
             (C22746 + C22745) * C50656 * C5234 +
             (C18221 + C18220) * C50656 * C5233) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
                C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                   C17210 +
               (C17266 + C17267) * C17211 + C17274 * C17212) *
                  C50816 * C50719 * C50703 * C113 -
              (C17275 * C17212 + (C17269 + C17268) * C17211 +
               (C17267 + C17266) * C17210) *
                  C50816 * C50719 * C50703 * C114 +
              (C17274 * C17210 + (C17271 + C17270) * C17211 +
               (C17272 + C17273) * C17212) *
                  C50816 * C50719 * C50703 * C115 -
              ((C17215 * C654 - C17216 * C653 - C17215 * C655 + C50852 * C656 +
                C17213 * C136 - C17214 * C124 - C17213 * C137 + C17208 * C145) *
                   C17212 +
               (C17273 + C17272) * C17211 + C17275 * C17210) *
                  C50816 * C50719 * C50703 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
                 C17215 * C301 - C17216 * C288 - C17215 * C302 +
                 C50852 * C318) *
                    C17210 +
                (C17266 + C17267) * C17211 + C17274 * C17212) *
                   C50816 * C50719 * C280 -
               ((C17470 + C17471) * C17212 + (C17472 + C17473) * C17211 +
                (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
                 C17213 * C301 - C17214 * C288 - C17213 * C302 +
                 C17208 * C318) *
                    C17210) *
                   C50816 * C50719 * C281 +
               ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
                 C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
                 C50852 * C1135) *
                    C17210 +
                (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
                   C50816 * C50719 * C282) *
                  C283 +
              (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
                (C17213 * C295 - C17214 * C285 - C17213 * C296 + C17208 * C315 +
                 C17215 * C309 - C17216 * C292 - C17215 * C310 +
                 C50852 * C322) *
                    C17212) *
                   C50816 * C50719 * C281 -
               (C17275 * C17212 + (C17269 + C17268) * C17211 +
                (C17267 + C17266) * C17210) *
                   C50816 * C50719 * C280 -
               ((C17215 * C1124 - C17216 * C1120 - C17215 * C1125 +
                 C50852 * C1132 + C17213 * C309 - C17214 * C292 -
                 C17213 * C310 + C17208 * C322) *
                    C17212 +
                (C17477 + C17476) * C17211 + (C17475 + C17474) * C17210) *
                   C50816 * C50719 * C282) *
                  C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C465 -
           ((C17672 + C17673) * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C466 +
           ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C17210 +
            (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
               C50816 * C467) *
              C50703 * C283 +
          (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
            (C17213 * C478 - C17214 * C468 - C17213 * C479 + C17208 * C498 +
             C17215 * C916 - C17216 * C908 - C17215 * C917 + C50852 * C923) *
                C17212) *
               C50816 * C466 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C465 -
           ((C17215 * C1238 - C17216 * C1234 - C17215 * C1239 + C50852 * C1246 +
             C17213 * C492 - C17214 * C475 - C17213 * C493 + C17208 * C505) *
                C17212 +
            (C17679 + C17678) * C17211 + (C17677 + C17676) * C17210) *
               C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C50719 * C50703 * C113 -
          (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
           C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
           C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
           C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
              C50656 * C50816 * C50719 * C50703 * C114 +
          (C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
           C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
           C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
           C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
              C50656 * C50816 * C50719 * C50703 * C115 -
          (C20052 * C1124 - C20053 * C1120 - C20052 * C1125 + C20044 * C1132 +
           C20050 * C309 - C20051 * C292 - C20050 * C310 + C20043 * C322 +
           C20048 * C295 - C20049 * C285 - C20048 * C296 + C20042 * C315 +
           C20046 * C132 - C20047 * C122 - C20046 * C133 + C20041 * C143) *
              C50656 * C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C280 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C281 +
           (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C50719 * C282) *
              C283 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C281 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C280 -
           (C20052 * C3589 - C20053 * C3587 - C20052 * C3590 + C20044 * C3593 +
            C20050 * C2533 - C20051 * C2529 - C20050 * C2534 + C20043 * C2538 +
            C20048 * C1128 - C20049 * C1122 - C20048 * C1129 + C20042 * C1134 +
            C20046 * C305 - C20047 * C290 - C20046 * C306 + C20041 * C320) *
               C50656 * C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C465 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C466 +
           (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
            C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
            C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
            C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
               C50656 * C50816 * C467) *
              C50703 * C283 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C466 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C465 -
           (C20052 * C3743 - C20053 * C3741 - C20052 * C3744 + C20044 * C3747 +
            C20050 * C2733 - C20051 * C2729 - C20050 * C2734 + C20043 * C2738 +
            C20048 * C1242 - C20049 * C1236 - C20048 * C1243 + C20042 * C1248 +
            C20046 * C488 - C20047 * C473 - C20046 * C489 + C20041 * C503) *
               C50656 * C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C50656 * C5233 +
           (C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501 +
            C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920) *
               C50656 * C5234 +
           (C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
            C17215 * C1244 - C17216 * C1237 - C17215 * C1245 + C50852 * C1249) *
               C50656 * C5235) *
              C50719 * C50703 * C113 -
          ((C17677 + C17676) * C50656 * C5235 +
           (C17674 + C17675) * C50656 * C5234 +
           (C17267 + C17266) * C50656 * C5233) *
              C50719 * C50703 * C114 +
          (C17274 * C50656 * C5233 + (C17673 + C17672) * C50656 * C5234 +
           (C17678 + C17679) * C50656 * C5235) *
              C50719 * C50703 * C115 -
          ((C17215 * C1238 - C17216 * C1234 - C17215 * C1239 + C50852 * C1246 +
            C17213 * C492 - C17214 * C475 - C17213 * C493 + C17208 * C505) *
               C50656 * C5235 +
           (C18001 + C18000) * C50656 * C5234 + C17275 * C50656 * C5233) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501 +
             C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920) *
                C50656 * C5234 +
            (C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C50656 * C5235) *
               C50719 * C280 -
           ((C17215 * C2731 - C17216 * C2728 - C17215 * C2732 + C50852 * C2737 +
             C17213 * C1244 - C17214 * C1237 - C17213 * C1245 +
             C17208 * C1249) *
                C50656 * C5235 +
            (C17215 * C1591 - C17216 * C1584 - C17215 * C1592 + C50852 * C1596 +
             C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920) *
                C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C50719 * C281 +
           ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C50656 * C5233 +
            (C17213 * C1591 - C17214 * C1584 - C17213 * C1592 + C17208 * C1596 +
             C17215 * C3313 - C17216 * C3310 - C17215 * C3314 +
             C50852 * C3319) *
                C50656 * C5234 +
            (C17213 * C2731 - C17214 * C2728 - C17213 * C2732 + C17208 * C2737 +
             C17215 * C3745 - C17216 * C3742 - C17215 * C3746 +
             C50852 * C3748) *
                C50656 * C5235) *
               C50719 * C282) *
              C283 +
          (((C17473 + C17472) * C50656 * C5233 +
            (C18220 + C18221) * C50656 * C5234 +
            (C17213 * C1242 - C17214 * C1236 - C17213 * C1243 + C17208 * C1248 +
             C17215 * C2733 - C17216 * C2729 - C17215 * C2734 +
             C50852 * C2738) *
                C50656 * C5235) *
               C50719 * C281 -
           ((C17677 + C17676) * C50656 * C5235 +
            (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C50719 * C280 -
           ((C17215 * C3743 - C17216 * C3741 - C17215 * C3744 + C50852 * C3747 +
             C17213 * C2733 - C17214 * C2729 - C17213 * C2734 +
             C17208 * C2738) *
                C50656 * C5235 +
            (C17215 * C3315 - C17216 * C3311 - C17215 * C3316 + C50852 * C3320 +
             C17213 * C1589 - C17214 * C1583 - C17213 * C1590 +
             C17208 * C1595) *
                C50656 * C5234 +
            (C17475 + C17474) * C50656 * C5233) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C465 -
           ((C22213 + C22214) * C50656 * C5235 +
            (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C466 +
           (C22218 * C5233 + (C22214 + C22213) * C50656 * C5234 +
            (C17213 * C5552 - C17214 * C5549 - C17213 * C5553 + C17208 * C5558 +
             C17215 * C6541 - C17216 * C6538 - C17215 * C6542 +
             C50852 * C6544) *
                C50656 * C5235) *
               C467) *
              C50703 * C283 +
          (((C17675 + C17674) * C50656 * C5233 +
            (C17676 + C17677) * C50656 * C5234 +
            (C22215 + C22216) * C50656 * C5235) *
               C466 -
           (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C465 -
           ((C17215 * C6539 - C17216 * C6537 - C17215 * C6540 + C50852 * C6543 +
             C17213 * C5554 - C17214 * C5550 - C17213 * C5555 +
             C17208 * C5559) *
                C50656 * C5235 +
            (C22216 + C22215) * C50656 * C5234 + C22200 * C5233) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50928 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C50703 * C50970 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C50783 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50928) *
              C50703 * C50971 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C50928 -
           (C20052 * C3317 - C20053 * C3312 - C20052 * C3318 + C20044 * C3321 +
            C20050 * C1587 - C20051 * C1582 - C20050 * C1588 + C20043 * C1594 +
            C20048 * C914 - C20049 * C907 - C20048 * C915 + C20042 * C922 +
            C20046 * C480 - C20047 * C469 - C20046 * C481 + C20041 * C499) *
               C50656 * C50816 * C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50928 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C50703 * C50970 +
          (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
            (C18000 + C18001) * C17212) *
               C50816 * C50783 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50928) *
              C50703 * C50971 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C50928 -
           ((C17215 * C918 - C17216 * C909 - C17215 * C919 + C50852 * C924 +
             C17213 * C494 - C17214 * C476 - C17213 * C495 + C17208 * C506) *
                C17212 +
            (C18001 + C18000) * C17211 + C17987 * C17210) *
               C50816 * C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C50928 -
           ((C22213 + C22214) * C50656 * C5235 +
            (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C50783) *
              C50703 * C50970 +
          (((C17675 + C17674) * C50656 * C5233 +
            (C17676 + C17677) * C50656 * C5234 +
            (C22215 + C22216) * C50656 * C5235) *
               C50783 -
           (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C50928) *
              C50703 * C50971 +
          ((C17274 * C50656 * C5233 + (C17673 + C17672) * C50656 * C5234 +
            (C17678 + C17679) * C50656 * C5235) *
               C50928 -
           ((C17215 * C6115 - C17216 * C6114 - C17215 * C6116 + C50852 * C6117 +
             C17213 * C1871 - C17214 * C1866 - C17213 * C1872 +
             C17208 * C1878) *
                C50656 * C5235 +
            (C17679 + C17678) * C50656 * C5234 + C17987 * C50656 * C5233) *
               C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C280 -
           ((C17470 + C17471) * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C281 +
           ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C50719 * C282) *
              C283 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17213 * C295 - C17214 * C285 - C17213 * C296 + C17208 * C315 +
             C17215 * C309 - C17216 * C292 - C17215 * C310 + C50852 * C322) *
                C17212) *
               C50816 * C50719 * C281 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C280 -
           ((C17215 * C1124 - C17216 * C1120 - C17215 * C1125 + C50852 * C1132 +
             C17213 * C309 - C17214 * C292 - C17213 * C310 + C17208 * C322) *
                C17212 +
            (C17477 + C17476) * C17211 + (C17475 + C17474) * C17210) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C17210 +
           (C17266 + C17267) * C17211 + C17274 * C17212) *
              C50816 * C50719 * C50703 * C113 -
          (C17275 * C17212 + (C17269 + C17268) * C17211 +
           (C17267 + C17266) * C17210) *
              C50816 * C50719 * C50703 * C114 +
          (C17274 * C17210 + (C17271 + C17270) * C17211 +
           (C17272 + C17273) * C17212) *
              C50816 * C50719 * C50703 * C115 -
          ((C17215 * C654 - C17216 * C653 - C17215 * C655 + C50852 * C656 +
            C17213 * C136 - C17214 * C124 - C17213 * C137 + C17208 * C145) *
               C17212 +
           (C17273 + C17272) * C17211 + C17275 * C17210) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C50719 * C50703 * C113 -
          (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
           C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
           C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
           C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
              C50656 * C50816 * C50719 * C50703 * C114 +
          (C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
           C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
           C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
           C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
              C50656 * C50816 * C50719 * C50703 * C115 -
          (C20052 * C1124 - C20053 * C1120 - C20052 * C1125 + C20044 * C1132 +
           C20050 * C309 - C20051 * C292 - C20050 * C310 + C20043 * C322 +
           C20048 * C295 - C20049 * C285 - C20048 * C296 + C20042 * C315 +
           C20046 * C132 - C20047 * C122 - C20046 * C133 + C20041 * C143) *
              C50656 * C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C280 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C281 +
           (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C50719 * C282) *
              C283 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C281 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C280 -
           (C20052 * C3589 - C20053 * C3587 - C20052 * C3590 + C20044 * C3593 +
            C20050 * C2533 - C20051 * C2529 - C20050 * C2534 + C20043 * C2538 +
            C20048 * C1128 - C20049 * C1122 - C20048 * C1129 + C20042 * C1134 +
            C20046 * C305 - C20047 * C290 - C20046 * C306 + C20041 * C320) *
               C50656 * C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C50656 * C5233 +
           (C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501 +
            C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920) *
               C50656 * C5234 +
           (C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
            C17215 * C1244 - C17216 * C1237 - C17215 * C1245 + C50852 * C1249) *
               C50656 * C5235) *
              C50719 * C50703 * C113 -
          ((C17677 + C17676) * C50656 * C5235 +
           (C17674 + C17675) * C50656 * C5234 +
           (C17267 + C17266) * C50656 * C5233) *
              C50719 * C50703 * C114 +
          (C17274 * C50656 * C5233 + (C17673 + C17672) * C50656 * C5234 +
           (C17678 + C17679) * C50656 * C5235) *
              C50719 * C50703 * C115 -
          ((C17215 * C1238 - C17216 * C1234 - C17215 * C1239 + C50852 * C1246 +
            C17213 * C492 - C17214 * C475 - C17213 * C493 + C17208 * C505) *
               C50656 * C5235 +
           (C18001 + C18000) * C50656 * C5234 + C17275 * C50656 * C5233) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501 +
             C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920) *
                C50656 * C5234 +
            (C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C50656 * C5235) *
               C50719 * C280 -
           ((C17215 * C2731 - C17216 * C2728 - C17215 * C2732 + C50852 * C2737 +
             C17213 * C1244 - C17214 * C1237 - C17213 * C1245 +
             C17208 * C1249) *
                C50656 * C5235 +
            (C17215 * C1591 - C17216 * C1584 - C17215 * C1592 + C50852 * C1596 +
             C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920) *
                C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C50719 * C281 +
           ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C50656 * C5233 +
            (C17213 * C1591 - C17214 * C1584 - C17213 * C1592 + C17208 * C1596 +
             C17215 * C3313 - C17216 * C3310 - C17215 * C3314 +
             C50852 * C3319) *
                C50656 * C5234 +
            (C17213 * C2731 - C17214 * C2728 - C17213 * C2732 + C17208 * C2737 +
             C17215 * C3745 - C17216 * C3742 - C17215 * C3746 +
             C50852 * C3748) *
                C50656 * C5235) *
               C50719 * C282) *
              C283 +
          (((C17473 + C17472) * C50656 * C5233 +
            (C18220 + C18221) * C50656 * C5234 +
            (C17213 * C1242 - C17214 * C1236 - C17213 * C1243 + C17208 * C1248 +
             C17215 * C2733 - C17216 * C2729 - C17215 * C2734 +
             C50852 * C2738) *
                C50656 * C5235) *
               C50719 * C281 -
           ((C17677 + C17676) * C50656 * C5235 +
            (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C50719 * C280 -
           ((C17215 * C3743 - C17216 * C3741 - C17215 * C3744 + C50852 * C3747 +
             C17213 * C2733 - C17214 * C2729 - C17213 * C2734 +
             C17208 * C2738) *
                C50656 * C5235 +
            (C17215 * C3315 - C17216 * C3311 - C17215 * C3316 + C50852 * C3320 +
             C17213 * C1589 - C17214 * C1583 - C17213 * C1590 +
             C17208 * C1595) *
                C50656 * C5234 +
            (C17475 + C17474) * C50656 * C5233) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C50972 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C50973 +
           (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C50719 * C1350) *
              C50919 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C50973 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C50972 -
           (C20052 * C3589 - C20053 * C3587 - C20052 * C3590 + C20044 * C3593 +
            C20050 * C2533 - C20051 * C2529 - C20050 * C2534 + C20043 * C2538 +
            C20048 * C1128 - C20049 * C1122 - C20048 * C1129 + C20042 * C1134 +
            C20046 * C305 - C20047 * C290 - C20046 * C306 + C20041 * C320) *
               C50656 * C50816 * C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C50972 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C50973 +
           ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C50719 * C1350) *
              C50919 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17839 + C17840) * C17212) *
               C50816 * C50719 * C50973 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C50972 -
           ((C17215 * C1124 - C17216 * C1120 - C17215 * C1125 + C50852 * C1132 +
             C17213 * C309 - C17214 * C292 - C17213 * C310 + C17208 * C322) *
                C17212 +
            (C17477 + C17476) * C17211 + (C17475 + C17474) * C17210) *
               C50816 * C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C50719 * C50972 -
           (C23152 * C5235 + (C22742 + C22741) * C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C50719 * C50973 +
           ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C50656 * C5233 +
            (C17213 * C1591 - C17214 * C1584 - C17213 * C1592 + C17208 * C1596 +
             C17215 * C3313 - C17216 * C3310 - C17215 * C3314 +
             C50852 * C3319) *
                C50656 * C5234 +
            (C17213 * C2731 - C17214 * C2728 - C17213 * C2732 + C17208 * C2737 +
             C17215 * C3745 - C17216 * C3742 - C17215 * C3746 +
             C50852 * C3748) *
                C50656 * C5235) *
               C50719 * C1350) *
              C50919 +
          (((C17473 + C17472) * C50656 * C5233 +
            (C18220 + C18221) * C50656 * C5234 +
            (C22745 + C22746) * C50656 * C5235) *
               C50719 * C50973 -
           (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C50719 * C50972 -
           ((C17215 * C3743 - C17216 * C3741 - C17215 * C3744 + C50852 * C3747 +
             C17213 * C2733 - C17214 * C2729 - C17213 * C2734 +
             C17208 * C2738) *
                C50656 * C5235 +
            (C17215 * C3315 - C17216 * C3311 - C17215 * C3316 + C50852 * C3320 +
             C17213 * C1589 - C17214 * C1583 - C17213 * C1590 +
             C17208 * C1595) *
                C50656 * C5234 +
            (C17475 + C17474) * C50656 * C5233) *
               C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50928 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C50972 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C50783 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50928) *
              C50973 +
          ((C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C50928 -
           (C20052 * C21173 - C20053 * C21172 - C20052 * C21174 +
            C20044 * C21175 + C20050 * C4239 - C20051 * C4236 - C20050 * C4240 +
            C20043 * C4242 + C20048 * C3313 - C20049 * C3310 - C20048 * C3314 +
            C20042 * C3319 + C20046 * C1591 - C20047 * C1584 - C20046 * C1592 +
            C20041 * C1596) *
               C50656 * C50816 * C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50928 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C50972 +
          (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
             C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
             C50852 * C1596) *
                C17210 +
            (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
               C50816 * C50783 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50928) *
              C50973 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C50928 -
           ((C17215 * C3317 - C17216 * C3312 - C17215 * C3318 + C50852 * C3321 +
             C17213 * C1587 - C17214 * C1582 - C17213 * C1588 +
             C17208 * C1594) *
                C17212 +
            (C17215 * C3315 - C17216 * C3311 - C17215 * C3316 + C50852 * C3320 +
             C17213 * C1589 - C17214 * C1583 - C17213 * C1590 +
             C17208 * C1595) *
                C17211 +
            (C17215 * C3313 - C17216 * C3310 - C17215 * C3314 + C50852 * C3319 +
             C17213 * C1591 - C17214 * C1584 - C17213 * C1592 +
             C17208 * C1596) *
                C17210) *
               C50816 * C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C50928 -
           ((C22213 + C22214) * C50656 * C5235 +
            (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C50783) *
              C50972 +
          (((C22741 + C22742) * C50656 * C5233 +
            (C22743 + C22744) * C50656 * C5234 +
            (C23155 + C23156) * C50656 * C5235) *
               C50783 -
           (C23152 * C5235 + (C22742 + C22741) * C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C50928) *
              C50973 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C50656 * C5233 +
            (C23667 + C23668) * C50656 * C5234 +
            (C23669 + C23670) * C50656 * C5235) *
               C50928 -
           ((C17215 * C21439 - C17216 * C21438 - C17215 * C21440 +
             C50852 * C21441 + C17213 * C4641 - C17214 * C4635 -
             C17213 * C4642 + C17208 * C4647) *
                C50656 * C5235 +
            (C23670 + C23669) * C50656 * C5234 +
            (C23668 + C23667) * C50656 * C5233) *
               C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
                 C17215 * C301 - C17216 * C288 - C17215 * C302 +
                 C50852 * C318) *
                    C17210 +
                (C17266 + C17267) * C17211 + C17274 * C17212) *
                   C50816 * C50719 * C1044 -
               (C17826 * C17212 + (C17472 + C17473) * C17211 +
                (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
                 C17213 * C301 - C17214 * C288 - C17213 * C302 +
                 C17208 * C318) *
                    C17210) *
                   C50816 * C50719 * C50755) *
                  C1046 +
              (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
                (C17839 + C17840) * C17212) *
                   C50816 * C50719 * C50755 -
               (C17275 * C17212 + (C17269 + C17268) * C17211 +
                (C17267 + C17266) * C17210) *
                   C50816 * C50719 * C1044) *
                  C1047 +
              ((C17274 * C17210 + (C17271 + C17270) * C17211 +
                (C17272 + C17273) * C17212) *
                   C50816 * C50719 * C1044 -
               ((C17215 * C313 - C17216 * C294 - C17215 * C314 + C50852 * C324 +
                 C17213 * C311 - C17214 * C293 - C17213 * C312 +
                 C17208 * C323) *
                    C17212 +
                (C17840 + C17839) * C17211 + C17826 * C17210) *
                   C50816 * C50719 * C50755) *
                  C1048) +
         0.5 * std::pow(Pi, 2.5) *
             (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
                C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                   C17210 +
               (C17266 + C17267) * C17211 + C17274 * C17212) *
                  C50816 * C50719 * C1115 -
              (C17826 * C17212 + (C17472 + C17473) * C17211 +
               (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
                C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                   C17210) *
                  C50816 * C50719 * C1116 +
              ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
                C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
                C50852 * C1135) *
                   C17210 +
               (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
                  C50816 * C50719 * C1117 -
              ((C17215 * C2535 - C17216 * C2530 - C17215 * C2536 +
                C50852 * C2539 + C17213 * C1126 - C17214 * C1121 -
                C17213 * C1127 + C17208 * C1133) *
                   C17212 +
               (C17215 * C2533 - C17216 * C2529 - C17215 * C2534 +
                C50852 * C2538 + C17213 * C1128 - C17214 * C1122 -
                C17213 * C1129 + C17208 * C1134) *
                   C17211 +
               (C17215 * C2531 - C17216 * C2528 - C17215 * C2532 +
                C50852 * C2537 + C17213 * C1130 - C17214 * C1123 -
                C17213 * C1131 + C17208 * C1135) *
                   C17210) *
                  C50816 * C50719 * C1118) *
             C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C465 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C466 +
           ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C17210 +
            (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
               C50816 * C467) *
              C1044 +
          (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
             C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
             C50852 * C1596) *
                C17210 +
            (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
               C50816 * C466 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C465 -
           ((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 + C50852 * C2739 +
             C17213 * C1240 - C17214 * C1235 - C17213 * C1241 +
             C17208 * C1247) *
                C17212 +
            (C17215 * C2733 - C17216 * C2729 - C17215 * C2734 + C50852 * C2738 +
             C17213 * C1242 - C17214 * C1236 - C17213 * C1243 +
             C17208 * C1248) *
                C17211 +
            (C17215 * C2731 - C17216 * C2728 - C17215 * C2732 + C50852 * C2737 +
             C17213 * C1244 - C17214 * C1237 - C17213 * C1245 +
             C17208 * C1249) *
                C17210) *
               C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C1044 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C50755) *
              C1046 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C50755 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C1044) *
              C1047 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C50719 * C1044 -
           (C20052 * C2535 - C20053 * C2530 - C20052 * C2536 + C20044 * C2539 +
            C20050 * C1126 - C20051 * C1121 - C20050 * C1127 + C20043 * C1133 +
            C20048 * C307 - C20049 * C291 - C20048 * C308 + C20042 * C321 +
            C20046 * C297 - C20047 * C286 - C20046 * C298 + C20041 * C316) *
               C50656 * C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C50719 * C1115 -
          (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
           C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
           C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
           C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
              C50656 * C50816 * C50719 * C1116 +
          (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
           C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
           C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
           C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
              C50656 * C50816 * C50719 * C1117 -
          (C20052 * C20741 - C20053 * C20740 - C20052 * C20742 +
           C20044 * C20743 + C20050 * C3591 - C20051 * C3588 - C20050 * C3592 +
           C20043 * C3594 + C20048 * C2531 - C20049 * C2528 - C20048 * C2532 +
           C20042 * C2537 + C20046 * C1130 - C20047 * C1123 - C20046 * C1131 +
           C20041 * C1135) *
              C50656 * C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C465 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C466 +
           (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
            C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
            C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
            C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
               C50656 * C50816 * C467) *
              C1044 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C466 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C465 -
           (C20052 * C20843 - C20053 * C20842 - C20052 * C20844 +
            C20044 * C20845 + C20050 * C3745 - C20051 * C3742 - C20050 * C3746 +
            C20043 * C3748 + C20048 * C2731 - C20049 * C2728 - C20048 * C2732 +
            C20042 * C2737 + C20046 * C1244 - C20047 * C1237 - C20046 * C1245 +
            C20041 * C1249) *
               C50656 * C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C50719 * C1044 -
           ((C22744 + C22743) * C50656 * C5235 +
            (C22742 + C22741) * C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C50719 * C50755) *
              C1046 +
          (((C17473 + C17472) * C50656 * C5233 +
            (C18220 + C18221) * C50656 * C5234 +
            (C22745 + C22746) * C50656 * C5235) *
               C50719 * C50755 -
           (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C50719 * C1044) *
              C1047 +
          ((C17274 * C50656 * C5233 + (C17673 + C17672) * C50656 * C5234 +
            (C17678 + C17679) * C50656 * C5235) *
               C50719 * C1044 -
           ((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 + C50852 * C2739 +
             C17213 * C1240 - C17214 * C1235 - C17213 * C1241 +
             C17208 * C1247) *
                C50656 * C5235 +
            (C18223 + C18222) * C50656 * C5234 + C17826 * C50656 * C5233) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C50656 * C5233 +
           (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
              C50719 * C1115 -
          ((C22744 + C22743) * C50656 * C5235 +
           (C22742 + C22741) * C50656 * C5234 +
           (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
            C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
               C50656 * C5233) *
              C50719 * C1116 +
          ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
            C17215 * C1130 - C17216 * C1123 - C17215 * C1131 + C50852 * C1135) *
               C50656 * C5233 +
           (C17213 * C1591 - C17214 * C1584 - C17213 * C1592 + C17208 * C1596 +
            C17215 * C3313 - C17216 * C3310 - C17215 * C3314 + C50852 * C3319) *
               C50656 * C5234 +
           (C17213 * C2731 - C17214 * C2728 - C17213 * C2732 + C17208 * C2737 +
            C17215 * C3745 - C17216 * C3742 - C17215 * C3746 + C50852 * C3748) *
               C50656 * C5235) *
              C50719 * C1117 -
          ((C17215 * C20843 - C17216 * C20842 - C17215 * C20844 +
            C50852 * C20845 + C17213 * C3745 - C17214 * C3742 - C17213 * C3746 +
            C17208 * C3748) *
               C50656 * C5235 +
           (C17215 * C4239 - C17216 * C4236 - C17215 * C4240 + C50852 * C4242 +
            C17213 * C3313 - C17214 * C3310 - C17213 * C3314 + C17208 * C3319) *
               C50656 * C5234 +
           (C17215 * C2531 - C17216 * C2528 - C17215 * C2532 + C50852 * C2537 +
            C17213 * C1130 - C17214 * C1123 - C17213 * C1131 + C17208 * C1135) *
               C50656 * C5233) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C465 -
           ((C22213 + C22214) * C50656 * C5235 +
            (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C466 +
           (C22218 * C5233 + (C22214 + C22213) * C50656 * C5234 +
            (C17213 * C5552 - C17214 * C5549 - C17213 * C5553 + C17208 * C5558 +
             C17215 * C6541 - C17216 * C6538 - C17215 * C6542 +
             C50852 * C6544) *
                C50656 * C5235) *
               C467) *
              C1044 +
          (((C22741 + C22742) * C50656 * C5233 +
            (C22743 + C22744) * C50656 * C5234 +
            (C23155 + C23156) * C50656 * C5235) *
               C466 -
           (C23152 * C5235 + (C22742 + C22741) * C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C465 -
           ((C17215 * C23137 - C17216 * C23136 - C17215 * C23138 +
             C50852 * C23139 + C17213 * C6541 - C17214 * C6538 -
             C17213 * C6542 + C17208 * C6544) *
                C50656 * C5235 +
            (C23156 + C23155) * C50656 * C5234 + C23152 * C5233) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
             C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
             C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
             C20052 * C1130 - C20053 * C1123 - C20052 * C1131 +
             C20044 * C1135) *
                C50656 * C50816 * C50928 -
            (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
             C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
             C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
             C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
                C50656 * C50816 * C50783) *
               C1044 +
           ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
             C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
             C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
             C20052 * C4239 - C20053 * C4236 - C20052 * C4240 +
             C20044 * C4242) *
                C50656 * C50816 * C50783 -
            (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
             C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
             C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
             C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
                C50656 * C50816 * C50928) *
               C50755) *
              C50919 +
          (((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
             C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
             C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
             C20052 * C3315 - C20053 * C3311 - C20052 * C3316 +
             C20044 * C3320) *
                C50656 * C50816 * C50783 -
            (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
             C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
             C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
             C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
                C50656 * C50816 * C50928) *
               C1044 +
           ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
             C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
             C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
             C20052 * C2533 - C20053 * C2529 - C20052 * C2534 +
             C20044 * C2538) *
                C50656 * C50816 * C50928 -
            (C20052 * C4237 - C20053 * C4235 - C20052 * C4238 + C20044 * C4241 +
             C20050 * C3315 - C20051 * C3311 - C20050 * C3316 + C20043 * C3320 +
             C20048 * C1589 - C20049 * C1583 - C20048 * C1590 + C20042 * C1595 +
             C20046 * C912 - C20047 * C906 - C20046 * C913 + C20041 * C921) *
                C50656 * C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C17210 +
             (C17266 + C17267) * C17211 + C17274 * C17212) *
                C50816 * C50928 -
            (C17987 * C17212 + (C17674 + C17675) * C17211 +
             (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
              C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                 C17210) *
                C50816 * C50783) *
               C1044 +
           (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
              C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
              C50852 * C1596) *
                 C17210 +
             (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
                C50816 * C50783 -
            (C17826 * C17212 + (C17472 + C17473) * C17211 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C17210) *
                C50816 * C50928) *
               C50755) *
              C50919 +
          ((((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
             (C18000 + C18001) * C17212) *
                C50816 * C50783 -
            (C17275 * C17212 + (C17269 + C17268) * C17211 +
             (C17267 + C17266) * C17210) *
                C50816 * C50928) *
               C1044 +
           (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
             (C17839 + C17840) * C17212) *
                C50816 * C50928 -
            ((C17215 * C1585 - C17216 * C1581 - C17215 * C1586 +
              C50852 * C1593 + C17213 * C916 - C17214 * C908 - C17213 * C917 +
              C17208 * C923) *
                 C17212 +
             (C18223 + C18222) * C17211 + (C18221 + C18220) * C17210) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50656 * C5233 +
             (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
                C50928 -
            ((C22213 + C22214) * C50656 * C5235 +
             (C22212 + C22211) * C50656 * C5234 +
             (C22210 + C22209) * C50656 * C5233) *
                C50783) *
               C1044 +
           (((C22741 + C22742) * C50656 * C5233 +
             (C22743 + C22744) * C50656 * C5234 +
             (C23155 + C23156) * C50656 * C5235) *
                C50783 -
            (C23152 * C5235 + (C22742 + C22741) * C50656 * C5234 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50656 * C5233) *
                C50928) *
               C50755) *
              C50919 +
          ((((C17675 + C17674) * C50656 * C5233 +
             (C17676 + C17677) * C50656 * C5234 +
             (C22215 + C22216) * C50656 * C5235) *
                C50783 -
            (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
             (C17267 + C17266) * C50656 * C5233) *
                C50928) *
               C1044 +
           (((C17473 + C17472) * C50656 * C5233 +
             (C18220 + C18221) * C50656 * C5234 +
             (C22745 + C22746) * C50656 * C5235) *
                C50928 -
            ((C17215 * C4637 - C17216 * C4633 - C17215 * C4638 +
              C50852 * C4645 + C17213 * C4639 - C17214 * C4634 -
              C17213 * C4640 + C17208 * C4646) *
                 C50656 * C5235 +
             (C22746 + C22745) * C50656 * C5234 +
             (C18221 + C18220) * C50656 * C5233) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C17210 +
           (C17266 + C17267) * C17211 + C17274 * C17212) *
              C50816 * C50719 * C1115 -
          (C17826 * C17212 + (C17472 + C17473) * C17211 +
           (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
            C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
               C17210) *
              C50816 * C50719 * C1116 +
          ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
            C17215 * C1130 - C17216 * C1123 - C17215 * C1131 + C50852 * C1135) *
               C17210 +
           (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
              C50816 * C50719 * C1117 -
          ((C17215 * C2535 - C17216 * C2530 - C17215 * C2536 + C50852 * C2539 +
            C17213 * C1126 - C17214 * C1121 - C17213 * C1127 + C17208 * C1133) *
               C17212 +
           (C17215 * C2533 - C17216 * C2529 - C17215 * C2534 + C50852 * C2538 +
            C17213 * C1128 - C17214 * C1122 - C17213 * C1129 + C17208 * C1134) *
               C17211 +
           (C17215 * C2531 - C17216 * C2528 - C17215 * C2532 + C50852 * C2537 +
            C17213 * C1130 - C17214 * C1123 - C17213 * C1131 + C17208 * C1135) *
               C17210) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C1044 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17839 + C17840) * C17212) *
               C50816 * C50719 * C50755 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C1044) *
              C1047 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C50719 * C1044 -
           ((C17215 * C313 - C17216 * C294 - C17215 * C314 + C50852 * C324 +
             C17213 * C311 - C17214 * C293 - C17213 * C312 + C17208 * C323) *
                C17212 +
            (C17840 + C17839) * C17211 + C17826 * C17210) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C1044 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C50755) *
              C1046 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C50755 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C1044) *
              C1047 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C50719 * C1044 -
           (C20052 * C2535 - C20053 * C2530 - C20052 * C2536 + C20044 * C2539 +
            C20050 * C1126 - C20051 * C1121 - C20050 * C1127 + C20043 * C1133 +
            C20048 * C307 - C20049 * C291 - C20048 * C308 + C20042 * C321 +
            C20046 * C297 - C20047 * C286 - C20046 * C298 + C20041 * C316) *
               C50656 * C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C50719 * C1115 -
          (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
           C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
           C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
           C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
              C50656 * C50816 * C50719 * C1116 +
          (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
           C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
           C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
           C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
              C50656 * C50816 * C50719 * C1117 -
          (C20052 * C20741 - C20053 * C20740 - C20052 * C20742 +
           C20044 * C20743 + C20050 * C3591 - C20051 * C3588 - C20050 * C3592 +
           C20043 * C3594 + C20048 * C2531 - C20049 * C2528 - C20048 * C2532 +
           C20042 * C2537 + C20046 * C1130 - C20047 * C1123 - C20046 * C1131 +
           C20041 * C1135) *
              C50656 * C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C50719 * C1044 -
           ((C22744 + C22743) * C50656 * C5235 +
            (C22742 + C22741) * C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C50719 * C50755) *
              C1046 +
          (((C17473 + C17472) * C50656 * C5233 +
            (C18220 + C18221) * C50656 * C5234 +
            (C22745 + C22746) * C50656 * C5235) *
               C50719 * C50755 -
           (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C50719 * C1044) *
              C1047 +
          ((C17274 * C50656 * C5233 + (C17673 + C17672) * C50656 * C5234 +
            (C17678 + C17679) * C50656 * C5235) *
               C50719 * C1044 -
           ((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 + C50852 * C2739 +
             C17213 * C1240 - C17214 * C1235 - C17213 * C1241 +
             C17208 * C1247) *
                C50656 * C5235 +
            (C18223 + C18222) * C50656 * C5234 + C17826 * C50656 * C5233) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C50656 * C5233 +
           (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
              C50719 * C1115 -
          ((C22744 + C22743) * C50656 * C5235 +
           (C22742 + C22741) * C50656 * C5234 +
           (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
            C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
               C50656 * C5233) *
              C50719 * C1116 +
          ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
            C17215 * C1130 - C17216 * C1123 - C17215 * C1131 + C50852 * C1135) *
               C50656 * C5233 +
           (C17213 * C1591 - C17214 * C1584 - C17213 * C1592 + C17208 * C1596 +
            C17215 * C3313 - C17216 * C3310 - C17215 * C3314 + C50852 * C3319) *
               C50656 * C5234 +
           (C17213 * C2731 - C17214 * C2728 - C17213 * C2732 + C17208 * C2737 +
            C17215 * C3745 - C17216 * C3742 - C17215 * C3746 + C50852 * C3748) *
               C50656 * C5235) *
              C50719 * C1117 -
          ((C17215 * C20843 - C17216 * C20842 - C17215 * C20844 +
            C50852 * C20845 + C17213 * C3745 - C17214 * C3742 - C17213 * C3746 +
            C17208 * C3748) *
               C50656 * C5235 +
           (C17215 * C4239 - C17216 * C4236 - C17215 * C4240 + C50852 * C4242 +
            C17213 * C3313 - C17214 * C3310 - C17213 * C3314 + C17208 * C3319) *
               C50656 * C5234 +
           (C17215 * C2531 - C17216 * C2528 - C17215 * C2532 + C50852 * C2537 +
            C17213 * C1130 - C17214 * C1123 - C17213 * C1131 + C17208 * C1135) *
               C50656 * C5233) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
             C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
             C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
             C20052 * C1130 - C20053 * C1123 - C20052 * C1131 +
             C20044 * C1135) *
                C50656 * C50816 * C1695 -
            (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
             C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
             C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
             C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
                C50656 * C50816 * C50783) *
               C50927 +
           ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
             C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
             C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
             C20052 * C4239 - C20053 * C4236 - C20052 * C4240 +
             C20044 * C4242) *
                C50656 * C50816 * C50783 -
            (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
             C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
             C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
             C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
                C50656 * C50816 * C1695) *
               C50755) *
              C50919 +
          (((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
             C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
             C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
             C20052 * C3315 - C20053 * C3311 - C20052 * C3316 +
             C20044 * C3320) *
                C50656 * C50816 * C50783 -
            (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
             C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
             C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
             C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
                C50656 * C50816 * C1695) *
               C50927 +
           ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
             C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
             C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
             C20052 * C2533 - C20053 * C2529 - C20052 * C2534 +
             C20044 * C2538) *
                C50656 * C50816 * C1695 -
            (C20052 * C4237 - C20053 * C4235 - C20052 * C4238 + C20044 * C4241 +
             C20050 * C3315 - C20051 * C3311 - C20050 * C3316 + C20043 * C3320 +
             C20048 * C1589 - C20049 * C1583 - C20048 * C1590 + C20042 * C1595 +
             C20046 * C912 - C20047 * C906 - C20046 * C913 + C20041 * C921) *
                C50656 * C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C17210 +
             (C17266 + C17267) * C17211 + C17274 * C17212) *
                C50816 * C1695 -
            (C17987 * C17212 + (C17674 + C17675) * C17211 +
             (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
              C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                 C17210) *
                C50816 * C50783) *
               C50927 +
           (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
              C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
              C50852 * C1596) *
                 C17210 +
             (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
                C50816 * C50783 -
            (C17826 * C17212 + (C17472 + C17473) * C17211 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C17210) *
                C50816 * C1695) *
               C50755) *
              C50919 +
          ((((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
             (C18000 + C18001) * C17212) *
                C50816 * C50783 -
            (C17275 * C17212 + (C17269 + C17268) * C17211 +
             (C17267 + C17266) * C17210) *
                C50816 * C1695) *
               C50927 +
           (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
             (C17839 + C17840) * C17212) *
                C50816 * C1695 -
            ((C17215 * C1585 - C17216 * C1581 - C17215 * C1586 +
              C50852 * C1593 + C17213 * C916 - C17214 * C908 - C17213 * C917 +
              C17208 * C923) *
                 C17212 +
             (C18223 + C18222) * C17211 + (C18221 + C18220) * C17210) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50656 * C5233 +
             (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
                C1695 -
            (C24074 * C5235 + (C22212 + C22211) * C50656 * C5234 +
             (C22210 + C22209) * C50656 * C5233) *
                C50783) *
               C50927 +
           (((C22741 + C22742) * C50656 * C5233 +
             (C22743 + C22744) * C50656 * C5234 +
             (C23155 + C23156) * C50656 * C5235) *
                C50783 -
            (C23152 * C5235 + (C22742 + C22741) * C50656 * C5234 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50656 * C5233) *
                C1695) *
               C50755) *
              C50919 +
          ((((C17675 + C17674) * C50656 * C5233 +
             (C17676 + C17677) * C50656 * C5234 +
             (C22215 + C22216) * C50656 * C5235) *
                C50783 -
            (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
             (C17267 + C17266) * C50656 * C5233) *
                C1695) *
               C50927 +
           (((C17473 + C17472) * C50656 * C5233 +
             (C18220 + C18221) * C50656 * C5234 +
             (C22745 + C22746) * C50656 * C5235) *
                C1695 -
            ((C17215 * C4637 - C17216 * C4633 - C17215 * C4638 +
              C50852 * C4645 + C17213 * C4639 - C17214 * C4634 -
              C17213 * C4640 + C17208 * C4646) *
                 C50656 * C5235 +
             (C22746 + C22745) * C50656 * C5234 +
             (C18221 + C18220) * C50656 * C5233) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50974 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50975 +
           (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
            C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
            C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
            C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
               C50656 * C50816 * C2111) *
              C50927 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C50975 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50974 -
           (C20052 * C20843 - C20053 * C20842 - C20052 * C20844 +
            C20044 * C20845 + C20050 * C3745 - C20051 * C3742 - C20050 * C3746 +
            C20043 * C3748 + C20048 * C2731 - C20049 * C2728 - C20048 * C2732 +
            C20042 * C2737 + C20046 * C1244 - C20047 * C1237 - C20046 * C1245 +
            C20041 * C1249) *
               C50656 * C50816 * C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50974 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50975 +
           ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C17210 +
            (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
               C50816 * C2111) *
              C50927 +
          (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
             C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
             C50852 * C1596) *
                C17210 +
            (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
               C50816 * C50975 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50974 -
           ((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 + C50852 * C2739 +
             C17213 * C1240 - C17214 * C1235 - C17213 * C1241 +
             C17208 * C1247) *
                C17212 +
            (C17215 * C2733 - C17216 * C2729 - C17215 * C2734 + C50852 * C2738 +
             C17213 * C1242 - C17214 * C1236 - C17213 * C1243 +
             C17208 * C1248) *
                C17211 +
            (C17215 * C2731 - C17216 * C2728 - C17215 * C2732 + C50852 * C2737 +
             C17213 * C1244 - C17214 * C1237 - C17213 * C1245 +
             C17208 * C1249) *
                C17210) *
               C50816 * C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C50974 -
           (C24074 * C5235 + (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C50975 +
           (C22218 * C5233 + (C22214 + C22213) * C50656 * C5234 +
            (C24079 + C24080) * C50656 * C5235) *
               C2111) *
              C50927 +
          (((C22741 + C22742) * C50656 * C5233 +
            (C22743 + C22744) * C50656 * C5234 +
            (C23155 + C23156) * C50656 * C5235) *
               C50975 -
           (C23152 * C5235 + (C22742 + C22741) * C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C50974 -
           ((C17215 * C23137 - C17216 * C23136 - C17215 * C23138 +
             C50852 * C23139 + C17213 * C6541 - C17214 * C6538 -
             C17213 * C6542 + C17208 * C6544) *
                C50656 * C5235 +
            (C23156 + C23155) * C50656 * C5234 + C23152 * C5233) *
               C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
                 C17215 * C301 - C17216 * C288 - C17215 * C302 +
                 C50852 * C318) *
                    C17210 +
                (C17266 + C17267) * C17211 + C17274 * C17212) *
                   C50816 * C1695 -
               (C17987 * C17212 + (C17674 + C17675) * C17211 +
                (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
                 C17213 * C484 - C17214 * C471 - C17213 * C485 +
                 C17208 * C501) *
                    C17210) *
                   C50816 * C50783) *
                  C50703 * C1046 +
              (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
                (C18000 + C18001) * C17212) *
                   C50816 * C50783 -
               (C17275 * C17212 + (C17269 + C17268) * C17211 +
                (C17267 + C17266) * C17210) *
                   C50816 * C1695) *
                  C50703 * C1047 +
              ((C17274 * C17210 + (C17271 + C17270) * C17211 +
                (C17272 + C17273) * C17212) *
                   C50816 * C1695 -
               ((C17215 * C918 - C17216 * C909 - C17215 * C919 + C50852 * C924 +
                 C17213 * C494 - C17214 * C476 - C17213 * C495 +
                 C17208 * C506) *
                    C17212 +
                (C18001 + C18000) * C17211 + C17987 * C17210) *
                   C50816 * C50783) *
                  C50703 * C1048) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
                 C17215 * C301 - C17216 * C288 - C17215 * C302 +
                 C50852 * C318) *
                    C17210 +
                (C17266 + C17267) * C17211 + C17274 * C17212) *
                   C50816 * C1695 -
               (C17987 * C17212 + (C17674 + C17675) * C17211 +
                (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
                 C17213 * C484 - C17214 * C471 - C17213 * C485 +
                 C17208 * C501) *
                    C17210) *
                   C50816 * C50783) *
                  C280 +
              (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
                 C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
                 C50852 * C1596) *
                    C17210 +
                (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
                   C50816 * C50783 -
               (C17826 * C17212 + (C17472 + C17473) * C17211 +
                (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
                 C17213 * C301 - C17214 * C288 - C17213 * C302 +
                 C17208 * C318) *
                    C17210) *
                   C50816 * C1695) *
                  C281 +
              (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
                 C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
                 C50852 * C1135) *
                    C17210 +
                (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
                   C50816 * C1695 -
               ((C17215 * C3317 - C17216 * C3312 - C17215 * C3318 +
                 C50852 * C3321 + C17213 * C1587 - C17214 * C1582 -
                 C17213 * C1588 + C17208 * C1594) *
                    C17212 +
                (C17215 * C3315 - C17216 * C3311 - C17215 * C3316 +
                 C50852 * C3320 + C17213 * C1589 - C17214 * C1583 -
                 C17213 * C1590 + C17208 * C1595) *
                    C17211 +
                (C17215 * C3313 - C17216 * C3310 - C17215 * C3314 +
                 C50852 * C3319 + C17213 * C1591 - C17214 * C1584 -
                 C17213 * C1592 + C17208 * C1596) *
                    C17210) *
                   C50816 * C50783) *
                  C282) *
             C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C17210 +
           (C17266 + C17267) * C17211 + C17274 * C17212) *
              C50816 * C1861 -
          (C17987 * C17212 + (C17674 + C17675) * C17211 +
           (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
            C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
               C17210) *
              C50816 * C1862 +
          ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
            C17215 * C1244 - C17216 * C1237 - C17215 * C1245 + C50852 * C1249) *
               C17210 +
           (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
              C50816 * C1863 -
          ((C17215 * C6115 - C17216 * C6114 - C17215 * C6116 + C50852 * C6117 +
            C17213 * C1871 - C17214 * C1866 - C17213 * C1872 + C17208 * C1878) *
               C17212 +
           (C17215 * C4639 - C17216 * C4634 - C17215 * C4640 + C50852 * C4646 +
            C17213 * C1873 - C17214 * C1867 - C17213 * C1874 + C17208 * C1879) *
               C17211 +
           (C17215 * C4643 - C17216 * C4636 - C17215 * C4644 + C50852 * C4648 +
            C17213 * C1875 - C17214 * C1868 - C17213 * C1876 + C17208 * C1880) *
               C17210) *
              C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C1695 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C50703 * C1046 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C50783 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C1695) *
              C50703 * C1047 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C1695 -
           (C20052 * C3317 - C20053 * C3312 - C20052 * C3318 + C20044 * C3321 +
            C20050 * C1587 - C20051 * C1582 - C20050 * C1588 + C20043 * C1594 +
            C20048 * C914 - C20049 * C907 - C20048 * C915 + C20042 * C922 +
            C20046 * C480 - C20047 * C469 - C20046 * C481 + C20041 * C499) *
               C50656 * C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C1695 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C280 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C50783 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C1695) *
              C281 +
          ((C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C1695 -
           (C20052 * C21173 - C20053 * C21172 - C20052 * C21174 +
            C20044 * C21175 + C20050 * C4239 - C20051 * C4236 - C20050 * C4240 +
            C20043 * C4242 + C20048 * C3313 - C20049 * C3310 - C20048 * C3314 +
            C20042 * C3319 + C20046 * C1591 - C20047 * C1584 - C20046 * C1592 +
            C20041 * C1596) *
               C50656 * C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C1861 -
          (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
           C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
           C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
           C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
              C50656 * C50816 * C1862 +
          (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
           C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
           C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
           C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
              C50656 * C50816 * C1863 -
          (C20052 * C21439 - C20053 * C21438 - C20052 * C21440 +
           C20044 * C21441 + C20050 * C4641 - C20051 * C4635 - C20050 * C4642 +
           C20043 * C4647 + C20048 * C4643 - C20049 * C4636 - C20048 * C4644 +
           C20042 * C4648 + C20046 * C1875 - C20047 * C1868 - C20046 * C1876 +
           C20041 * C1880) *
              C50656 * C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C1695 -
           ((C22213 + C22214) * C50656 * C5235 +
            (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C50783) *
              C50703 * C1046 +
          (((C17675 + C17674) * C50656 * C5233 +
            (C17676 + C17677) * C50656 * C5234 +
            (C22215 + C22216) * C50656 * C5235) *
               C50783 -
           (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C1695) *
              C50703 * C1047 +
          ((C17274 * C50656 * C5233 + (C17673 + C17672) * C50656 * C5234 +
            (C17678 + C17679) * C50656 * C5235) *
               C1695 -
           ((C17215 * C6115 - C17216 * C6114 - C17215 * C6116 + C50852 * C6117 +
             C17213 * C1871 - C17214 * C1866 - C17213 * C1872 +
             C17208 * C1878) *
                C50656 * C5235 +
            (C17679 + C17678) * C50656 * C5234 + C17987 * C50656 * C5233) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C1695 -
           ((C22213 + C22214) * C50656 * C5235 +
            (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C50783) *
              C280 +
          (((C22741 + C22742) * C50656 * C5233 +
            (C22743 + C22744) * C50656 * C5234 +
            (C23155 + C23156) * C50656 * C5235) *
               C50783 -
           (C23152 * C5235 + (C22742 + C22741) * C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C1695) *
              C281 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C50656 * C5233 +
            (C23667 + C23668) * C50656 * C5234 +
            (C23669 + C23670) * C50656 * C5235) *
               C1695 -
           ((C17215 * C21439 - C17216 * C21438 - C17215 * C21440 +
             C50852 * C21441 + C17213 * C4641 - C17214 * C4635 -
             C17213 * C4642 + C17208 * C4647) *
                C50656 * C5235 +
            (C23670 + C23669) * C50656 * C5234 +
            (C23668 + C23667) * C50656 * C5233) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C50656 * C5233 +
           (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
              C1861 -
          (C24074 * C5235 + (C22212 + C22211) * C50656 * C5234 +
           (C22210 + C22209) * C50656 * C5233) *
              C1862 +
          (C22218 * C5233 + (C22214 + C22213) * C50656 * C5234 +
           (C24079 + C24080) * C50656 * C5235) *
              C1863 -
          ((C17215 * C24061 - C17216 * C24060 - C17215 * C24062 +
            C50852 * C24063 + C17213 * C7453 - C17214 * C7450 - C17213 * C7454 +
            C17208 * C7456) *
               C50656 * C5235 +
           (C24080 + C24079) * C50656 * C5234 + C24074 * C5233) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50974 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50975 +
           (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
            C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
            C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
            C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
               C50656 * C50816 * C2111) *
              C50703 * C50919 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C50975 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50974 -
           (C20052 * C3743 - C20053 * C3741 - C20052 * C3744 + C20044 * C3747 +
            C20050 * C2733 - C20051 * C2729 - C20050 * C2734 + C20043 * C2738 +
            C20048 * C1242 - C20049 * C1236 - C20048 * C1243 + C20042 * C1248 +
            C20046 * C488 - C20047 * C473 - C20046 * C489 + C20041 * C503) *
               C50656 * C50816 * C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50974 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50975 +
           ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C17210 +
            (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
               C50816 * C2111) *
              C50703 * C50919 +
          (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
            (C18000 + C18001) * C17212) *
               C50816 * C50975 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50974 -
           ((C17215 * C1238 - C17216 * C1234 - C17215 * C1239 + C50852 * C1246 +
             C17213 * C492 - C17214 * C475 - C17213 * C493 + C17208 * C505) *
                C17212 +
            (C17679 + C17678) * C17211 + (C17677 + C17676) * C17210) *
               C50816 * C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C50974 -
           (C24074 * C5235 + (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C50975 +
           (C22218 * C5233 + (C22214 + C22213) * C50656 * C5234 +
            (C24079 + C24080) * C50656 * C5235) *
               C2111) *
              C50703 * C50919 +
          (((C17675 + C17674) * C50656 * C5233 +
            (C17676 + C17677) * C50656 * C5234 +
            (C22215 + C22216) * C50656 * C5235) *
               C50975 -
           (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C50974 -
           ((C17215 * C6539 - C17216 * C6537 - C17215 * C6540 + C50852 * C6543 +
             C17213 * C5554 - C17214 * C5550 - C17213 * C5555 +
             C17208 * C5559) *
                C50656 * C5235 +
            (C22216 + C22215) * C50656 * C5234 + C22200 * C5233) *
               C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C1695 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C280 +
          (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
             C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
             C50852 * C1596) *
                C17210 +
            (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
               C50816 * C50783 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C1695) *
              C281 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C1695 -
           ((C17215 * C3317 - C17216 * C3312 - C17215 * C3318 + C50852 * C3321 +
             C17213 * C1587 - C17214 * C1582 - C17213 * C1588 +
             C17208 * C1594) *
                C17212 +
            (C17215 * C3315 - C17216 * C3311 - C17215 * C3316 + C50852 * C3320 +
             C17213 * C1589 - C17214 * C1583 - C17213 * C1590 +
             C17208 * C1595) *
                C17211 +
            (C17215 * C3313 - C17216 * C3310 - C17215 * C3314 + C50852 * C3319 +
             C17213 * C1591 - C17214 * C1584 - C17213 * C1592 +
             C17208 * C1596) *
                C17210) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C1695 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
            (C18000 + C18001) * C17212) *
               C50816 * C50783 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C1695) *
              C50703 * C1047 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C1695 -
           ((C17215 * C918 - C17216 * C909 - C17215 * C919 + C50852 * C924 +
             C17213 * C494 - C17214 * C476 - C17213 * C495 + C17208 * C506) *
                C17212 +
            (C18001 + C18000) * C17211 + C17987 * C17210) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C1695 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C50703 * C1046 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C50783 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C1695) *
              C50703 * C1047 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C1695 -
           (C20052 * C3317 - C20053 * C3312 - C20052 * C3318 + C20044 * C3321 +
            C20050 * C1587 - C20051 * C1582 - C20050 * C1588 + C20043 * C1594 +
            C20048 * C914 - C20049 * C907 - C20048 * C915 + C20042 * C922 +
            C20046 * C480 - C20047 * C469 - C20046 * C481 + C20041 * C499) *
               C50656 * C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C1695 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C280 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C50783 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C1695) *
              C281 +
          ((C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C1695 -
           (C20052 * C21173 - C20053 * C21172 - C20052 * C21174 +
            C20044 * C21175 + C20050 * C4239 - C20051 * C4236 - C20050 * C4240 +
            C20043 * C4242 + C20048 * C3313 - C20049 * C3310 - C20048 * C3314 +
            C20042 * C3319 + C20046 * C1591 - C20047 * C1584 - C20046 * C1592 +
            C20041 * C1596) *
               C50656 * C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C1695 -
           ((C22213 + C22214) * C50656 * C5235 +
            (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C50783) *
              C50703 * C1046 +
          (((C17675 + C17674) * C50656 * C5233 +
            (C17676 + C17677) * C50656 * C5234 +
            (C22215 + C22216) * C50656 * C5235) *
               C50783 -
           (C22200 * C5235 + (C17674 + C17675) * C50656 * C5234 +
            (C17267 + C17266) * C50656 * C5233) *
               C1695) *
              C50703 * C1047 +
          ((C17274 * C50656 * C5233 + (C17673 + C17672) * C50656 * C5234 +
            (C17678 + C17679) * C50656 * C5235) *
               C1695 -
           ((C17215 * C6115 - C17216 * C6114 - C17215 * C6116 + C50852 * C6117 +
             C17213 * C1871 - C17214 * C1866 - C17213 * C1872 +
             C17208 * C1878) *
                C50656 * C5235 +
            (C17679 + C17678) * C50656 * C5234 + C17987 * C50656 * C5233) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50656 * C5233 +
            (C22209 + C22210) * C50656 * C5234 + C22218 * C5235) *
               C1695 -
           ((C22213 + C22214) * C50656 * C5235 +
            (C22212 + C22211) * C50656 * C5234 +
            (C22210 + C22209) * C50656 * C5233) *
               C50783) *
              C280 +
          (((C22741 + C22742) * C50656 * C5233 +
            (C22743 + C22744) * C50656 * C5234 +
            (C23155 + C23156) * C50656 * C5235) *
               C50783 -
           (C23152 * C5235 + (C22742 + C22741) * C50656 * C5234 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50656 * C5233) *
               C1695) *
              C281 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C50656 * C5233 +
            (C23667 + C23668) * C50656 * C5234 +
            (C23669 + C23670) * C50656 * C5235) *
               C1695 -
           ((C17215 * C21439 - C17216 * C21438 - C17215 * C21440 +
             C50852 * C21441 + C17213 * C4641 - C17214 * C4635 -
             C17213 * C4642 + C17208 * C4647) *
                C50656 * C5235 +
            (C23670 + C23669) * C50656 * C5234 +
            (C23668 + C23667) * C50656 * C5233) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C50719 * C50927 -
           (((C18221 + C18220) * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C50719 * C50755) *
              C50970 +
          ((((C17473 + C17472) * C50912 + (C17471 + C17470) * C50661) * C50941 +
            ((C18220 + C18221) * C50912 + (C18222 + C18223) * C50661) *
                C50880) *
               C50719 * C50755 -
           ((C17987 * C50661 + C27949 * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C50719 * C50927) *
              C50971 +
          (((C17274 * C50912 + (C17271 + C17270) * C50661) * C50941 +
            ((C17673 + C17672) * C50912 + (C18000 + C18001) * C50661) *
                C50880) *
               C50719 * C50927 -
           (((C17215 * C1585 - C17216 * C1581 - C17215 * C1586 +
              C50852 * C1593 + C17213 * C916 - C17214 * C908 - C17213 * C917 +
              C17208 * C923) *
                 C50661 +
             (C18223 + C18222) * C50912) *
                C50880 +
            ((C17840 + C17839) * C50661 + C17826 * C50912) * C50941) *
               C50719 * C50755) *
              C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
               C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                  C50912 +
              (C17266 + C17267) * C50661) *
                 C50941 +
             ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
                C50928 -
            ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
             (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
                C50783) *
               C50927 +
           ((((C22741 + C22742) * C50912 + C28598 * C50661) * C50941 +
             ((C22743 + C22744) * C50912 + (C22745 + C22746) * C50661) *
                 C50880) *
                C50783 -
            ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
             ((C17472 + C17473) * C50661 +
              (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
               C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                  C50912) *
                 C50941) *
                C50928) *
               C50755) *
              C283 +
          ((((C27948 * C50912 + C28339 * C50661) * C50941 +
             (C27950 * C50912 + (C17678 + C17679) * C50661) * C50880) *
                C50783 -
            ((C17987 * C50661 + C27949 * C50912) * C50880 +
             ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                 C50941) *
                C50928) *
               C50927 +
           ((((C17473 + C17472) * C50912 + (C17471 + C17470) * C50661) *
                 C50941 +
             (C28598 * C50912 + (C18222 + C18223) * C50661) * C50880) *
                C50928 -
            (((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 +
               C50852 * C2739 + C17213 * C1240 - C17214 * C1235 -
               C17213 * C1241 + C17208 * C1247) *
                  C50661 +
              (C22746 + C22745) * C50912) *
                 C50880 +
             ((C18223 + C18222) * C50661 + C28599 * C50912) * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + (C17675 + C17674) * C50661) *
                C50880) *
               C50719 * C280 -
           (((C18221 + C18220) * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C50719 * C281 +
           (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
              C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
              C50852 * C1135) *
                 C50912 +
             (C17474 + C17475) * C50661) *
                C50941 +
            ((C23667 + C23668) * C50912 + (C27752 + C27753) * C50661) *
                C50880) *
               C50719 * C282) *
              C283 +
          ((((C17473 + C17472) * C50912 + (C17471 + C17470) * C50661) * C50941 +
            ((C18220 + C18221) * C50912 + (C18222 + C18223) * C50661) *
                C50880) *
               C50719 * C281 -
           ((C17987 * C50661 + (C17674 + C17675) * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C50719 * C280 -
           (((C17215 * C3317 - C17216 * C3312 - C17215 * C3318 +
              C50852 * C3321 + C17213 * C1587 - C17214 * C1582 -
              C17213 * C1588 + C17208 * C1594) *
                 C50661 +
             (C27753 + C27752) * C50912) *
                C50880 +
            ((C17477 + C17476) * C50661 + (C17475 + C17474) * C50912) *
                C50941) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50912 +
            (C17266 + C17267) * C50661) *
               C50941 +
           ((C22209 + C22210) * C50912 + (C17675 + C17674) * C50661) * C50880) *
              C50719 * C50703 * C113 -
          ((C17987 * C50661 + (C17674 + C17675) * C50912) * C50880 +
           ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) * C50941) *
              C50719 * C50703 * C114 +
          ((C17274 * C50912 + (C17271 + C17270) * C50661) * C50941 +
           ((C17673 + C17672) * C50912 + (C18000 + C18001) * C50661) * C50880) *
              C50719 * C50703 * C115 -
          (((C17215 * C918 - C17216 * C909 - C17215 * C919 + C50852 * C924 +
             C17213 * C494 - C17214 * C476 - C17213 * C495 + C17208 * C506) *
                C50661 +
            (C18001 + C18000) * C50912) *
               C50880 +
           ((C17273 + C17272) * C50661 + C17275 * C50912) * C50941) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C465 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C466 +
           ((C22217 * C50912 + C27950 * C50661) * C50941 +
            ((C22214 + C22213) * C50912 + (C22215 + C22216) * C50661) *
                C50880) *
               C467) *
              C50703 * C283 +
          (((C27948 * C50912 + (C17673 + C17672) * C50661) * C50941 +
            (C27950 * C50912 + (C17678 + C17679) * C50661) * C50880) *
               C466 -
           ((C17987 * C50661 + C27949 * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C465 -
           (((C17215 * C6115 - C17216 * C6114 - C17215 * C6116 +
              C50852 * C6117 + C17213 * C1871 - C17214 * C1866 -
              C17213 * C1872 + C17208 * C1878) *
                 C50661 +
             (C22216 + C22215) * C50912) *
                C50880 +
            ((C17679 + C17678) * C50661 + C22191 * C50912) * C50941) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C50928 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C50783) *
              C50703 * C50970 +
          (((C27948 * C50912 + C28339 * C50661) * C50941 +
            (C27950 * C50912 + (C17678 + C17679) * C50661) * C50880) *
               C50783 -
           ((C17987 * C50661 + C27949 * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C50928) *
              C50703 * C50971 +
          (((C17274 * C50912 + (C17271 + C17270) * C50661) * C50941 +
            (C28339 * C50912 + (C18000 + C18001) * C50661) * C50880) *
               C50928 -
           (((C17215 * C1238 - C17216 * C1234 - C17215 * C1239 +
              C50852 * C1246 + C17213 * C492 - C17214 * C475 - C17213 * C493 +
              C17208 * C505) *
                 C50661 +
             (C17679 + C17678) * C50912) *
                C50880 +
            ((C18001 + C18000) * C50661 + C17987 * C50912) * C50941) *
               C50783) *
              C50703 * C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50912 +
            (C17266 + C17267) * C50661) *
               C50941 +
           ((C22209 + C22210) * C50912 + (C17675 + C17674) * C50661) * C50880) *
              C50719 * C50703 * C113 -
          ((C17987 * C50661 + (C17674 + C17675) * C50912) * C50880 +
           ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) * C50941) *
              C50719 * C50703 * C114 +
          ((C17274 * C50912 + (C17271 + C17270) * C50661) * C50941 +
           ((C17673 + C17672) * C50912 + (C18000 + C18001) * C50661) * C50880) *
              C50719 * C50703 * C115 -
          (((C17215 * C918 - C17216 * C909 - C17215 * C919 + C50852 * C924 +
             C17213 * C494 - C17214 * C476 - C17213 * C495 + C17208 * C506) *
                C50661 +
            (C18001 + C18000) * C50912) *
               C50880 +
           ((C17273 + C17272) * C50661 + C17275 * C50912) * C50941) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + (C17675 + C17674) * C50661) *
                C50880) *
               C50719 * C280 -
           (((C18221 + C18220) * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C50719 * C281 +
           (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
              C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
              C50852 * C1135) *
                 C50912 +
             (C17474 + C17475) * C50661) *
                C50941 +
            ((C23667 + C23668) * C50912 + (C27752 + C27753) * C50661) *
                C50880) *
               C50719 * C282) *
              C283 +
          ((((C17473 + C17472) * C50912 + (C17471 + C17470) * C50661) * C50941 +
            ((C18220 + C18221) * C50912 + (C18222 + C18223) * C50661) *
                C50880) *
               C50719 * C281 -
           ((C17987 * C50661 + (C17674 + C17675) * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C50719 * C280 -
           (((C17215 * C3317 - C17216 * C3312 - C17215 * C3318 +
              C50852 * C3321 + C17213 * C1587 - C17214 * C1582 -
              C17213 * C1588 + C17208 * C1594) *
                 C50661 +
             (C27753 + C27752) * C50912) *
                C50880 +
            ((C17477 + C17476) * C50661 + (C17475 + C17474) * C50912) *
                C50941) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C50719 * C50972 -
           ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C50719 * C50973 +
           (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
              C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
              C50852 * C1135) *
                 C50912 +
             (C17474 + C17475) * C50661) *
                C50941 +
            ((C23667 + C23668) * C50912 + (C27752 + C27753) * C50661) *
                C50880) *
               C50719 * C1350) *
              C50919 +
          ((((C17473 + C17472) * C50912 + (C17471 + C17470) * C50661) * C50941 +
            (C28598 * C50912 + (C18222 + C18223) * C50661) * C50880) *
               C50719 * C50973 -
           ((C17987 * C50661 + C27949 * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C50719 * C50972 -
           (((C17215 * C3317 - C17216 * C3312 - C17215 * C3318 +
              C50852 * C3321 + C17213 * C1587 - C17214 * C1582 -
              C17213 * C1588 + C17208 * C1594) *
                 C50661 +
             (C27753 + C27752) * C50912) *
                C50880 +
            ((C17477 + C17476) * C50661 + (C17475 + C17474) * C50912) *
                C50941) *
               C50719 * C1350) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C50928 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C50783) *
              C50972 +
          ((((C22741 + C22742) * C50912 + C28598 * C50661) * C50941 +
            ((C22743 + C22744) * C50912 + (C22745 + C22746) * C50661) *
                C50880) *
               C50783 -
           ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C50928) *
              C50973 +
          ((((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
              C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
              C50852 * C1135) *
                 C50912 +
             (C17474 + C17475) * C50661) *
                C50941 +
            ((C23667 + C23668) * C50912 + (C27752 + C27753) * C50661) *
                C50880) *
               C50928 -
           (((C17215 * C3743 - C17216 * C3741 - C17215 * C3744 +
              C50852 * C3747 + C17213 * C2733 - C17214 * C2729 -
              C17213 * C2734 + C17208 * C2738) *
                 C50661 +
             (C23670 + C23669) * C50912) *
                C50880 +
            ((C27753 + C27752) * C50661 + (C23668 + C23667) * C50912) *
                C50941) *
               C50783) *
              C1350) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50912 +
            (C17266 + C17267) * C50661) *
               C50941 +
           ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
              C50719 * C1115 -
          ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
           ((C17472 + C17473) * C50661 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50912) *
               C50941) *
              C50719 * C1116 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C50912 +
            (C17474 + C17475) * C50661) *
               C50941 +
           ((C23667 + C23668) * C50912 + (C27752 + C27753) * C50661) * C50880) *
              C50719 * C1117 -
          (((C17215 * C4237 - C17216 * C4235 - C17215 * C4238 + C50852 * C4241 +
             C17213 * C3315 - C17214 * C3311 - C17213 * C3316 +
             C17208 * C3320) *
                C50661 +
            (C17215 * C4239 - C17216 * C4236 - C17215 * C4240 + C50852 * C4242 +
             C17213 * C3313 - C17214 * C3310 - C17213 * C3314 +
             C17208 * C3319) *
                C50912) *
               C50880 +
           ((C17215 * C2533 - C17216 * C2529 - C17215 * C2534 + C50852 * C2538 +
             C17213 * C1128 - C17214 * C1122 - C17213 * C1129 +
             C17208 * C1134) *
                C50661 +
            (C17215 * C2531 - C17216 * C2528 - C17215 * C2532 + C50852 * C2537 +
             C17213 * C1130 - C17214 * C1123 - C17213 * C1131 +
             C17208 * C1135) *
                C50912) *
               C50941) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C50719 * C1044 -
           ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C50719 * C50755) *
              C1046 +
          ((((C17473 + C17472) * C50912 + (C17471 + C17470) * C50661) * C50941 +
            (C28598 * C50912 + (C18222 + C18223) * C50661) * C50880) *
               C50719 * C50755 -
           ((C17987 * C50661 + C27949 * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C50719 * C1044) *
              C1047 +
          (((C17274 * C50912 + (C17271 + C17270) * C50661) * C50941 +
            (C28339 * C50912 + (C18000 + C18001) * C50661) * C50880) *
               C50719 * C1044 -
           (((C17215 * C1585 - C17216 * C1581 - C17215 * C1586 +
              C50852 * C1593 + C17213 * C916 - C17214 * C908 - C17213 * C917 +
              C17208 * C923) *
                 C50661 +
             (C18223 + C18222) * C50912) *
                C50880 +
            ((C17840 + C17839) * C50661 + C17826 * C50912) * C50941) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C465 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C466 +
           ((C22217 * C50912 + C27950 * C50661) * C50941 +
            ((C22214 + C22213) * C50912 + (C22215 + C22216) * C50661) *
                C50880) *
               C467) *
              C1044 +
          ((((C22741 + C22742) * C50912 + C28598 * C50661) * C50941 +
            ((C22743 + C22744) * C50912 + (C22745 + C22746) * C50661) *
                C50880) *
               C466 -
           ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C465 -
           (((C17215 * C4637 - C17216 * C4633 - C17215 * C4638 +
              C50852 * C4645 + C17213 * C4639 - C17214 * C4634 -
              C17213 * C4640 + C17208 * C4646) *
                 C50661 +
             (C23156 + C23155) * C50912) *
                C50880 +
            ((C22746 + C22745) * C50661 + C23149 * C50912) * C50941) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
               C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                  C50912 +
              (C17266 + C17267) * C50661) *
                 C50941 +
             ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
                C50928 -
            ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
             (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
                C50783) *
               C1044 +
           ((((C22741 + C22742) * C50912 + C28598 * C50661) * C50941 +
             ((C22743 + C22744) * C50912 + (C22745 + C22746) * C50661) *
                 C50880) *
                C50783 -
            ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
             ((C17472 + C17473) * C50661 +
              (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
               C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                  C50912) *
                 C50941) *
                C50928) *
               C50755) *
              C50919 +
          ((((C27948 * C50912 + C28339 * C50661) * C50941 +
             (C27950 * C50912 + (C17678 + C17679) * C50661) * C50880) *
                C50783 -
            ((C17987 * C50661 + C27949 * C50912) * C50880 +
             ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                 C50941) *
                C50928) *
               C1044 +
           ((((C17473 + C17472) * C50912 + (C17471 + C17470) * C50661) *
                 C50941 +
             (C28598 * C50912 + (C18222 + C18223) * C50661) * C50880) *
                C50928 -
            (((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 +
               C50852 * C2739 + C17213 * C1240 - C17214 * C1235 -
               C17213 * C1241 + C17208 * C1247) *
                  C50661 +
              (C22746 + C22745) * C50912) *
                 C50880 +
             ((C18223 + C18222) * C50661 + C28599 * C50912) * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C50719 * C1044 -
           ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C50719 * C50755) *
              C1046 +
          ((((C17473 + C17472) * C50912 + (C17471 + C17470) * C50661) * C50941 +
            (C28598 * C50912 + (C18222 + C18223) * C50661) * C50880) *
               C50719 * C50755 -
           ((C17987 * C50661 + C27949 * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C50719 * C1044) *
              C1047 +
          (((C17274 * C50912 + (C17271 + C17270) * C50661) * C50941 +
            (C28339 * C50912 + (C18000 + C18001) * C50661) * C50880) *
               C50719 * C1044 -
           (((C17215 * C1585 - C17216 * C1581 - C17215 * C1586 +
              C50852 * C1593 + C17213 * C916 - C17214 * C908 - C17213 * C917 +
              C17208 * C923) *
                 C50661 +
             (C18223 + C18222) * C50912) *
                C50880 +
            ((C17840 + C17839) * C50661 + C17826 * C50912) * C50941) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50912 +
            (C17266 + C17267) * C50661) *
               C50941 +
           ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
              C50719 * C1115 -
          ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
           ((C17472 + C17473) * C50661 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C50912) *
               C50941) *
              C50719 * C1116 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C50912 +
            (C17474 + C17475) * C50661) *
               C50941 +
           ((C23667 + C23668) * C50912 + (C27752 + C27753) * C50661) * C50880) *
              C50719 * C1117 -
          (((C17215 * C4237 - C17216 * C4235 - C17215 * C4238 + C50852 * C4241 +
             C17213 * C3315 - C17214 * C3311 - C17213 * C3316 +
             C17208 * C3320) *
                C50661 +
            (C17215 * C4239 - C17216 * C4236 - C17215 * C4240 + C50852 * C4242 +
             C17213 * C3313 - C17214 * C3310 - C17213 * C3314 +
             C17208 * C3319) *
                C50912) *
               C50880 +
           ((C17215 * C2533 - C17216 * C2529 - C17215 * C2534 + C50852 * C2538 +
             C17213 * C1128 - C17214 * C1122 - C17213 * C1129 +
             C17208 * C1134) *
                C50661 +
            (C17215 * C2531 - C17216 * C2528 - C17215 * C2532 + C50852 * C2537 +
             C17213 * C1130 - C17214 * C1123 - C17213 * C1131 +
             C17208 * C1135) *
                C50912) *
               C50941) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
               C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                  C50912 +
              (C17266 + C17267) * C50661) *
                 C50941 +
             ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
                C1695 -
            ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
             (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
                C50783) *
               C50927 +
           ((((C22741 + C22742) * C50912 + C28598 * C50661) * C50941 +
             ((C22743 + C22744) * C50912 + (C22745 + C22746) * C50661) *
                 C50880) *
                C50783 -
            ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
             ((C17472 + C17473) * C50661 +
              (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
               C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                  C50912) *
                 C50941) *
                C1695) *
               C50755) *
              C50919 +
          ((((C27948 * C50912 + C28339 * C50661) * C50941 +
             (C27950 * C50912 + (C17678 + C17679) * C50661) * C50880) *
                C50783 -
            ((C17987 * C50661 + C27949 * C50912) * C50880 +
             ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                 C50941) *
                C1695) *
               C50927 +
           ((((C17473 + C17472) * C50912 + (C17471 + C17470) * C50661) *
                 C50941 +
             (C28598 * C50912 + (C18222 + C18223) * C50661) * C50880) *
                C1695 -
            (((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 +
               C50852 * C2739 + C17213 * C1240 - C17214 * C1235 -
               C17213 * C1241 + C17208 * C1247) *
                  C50661 +
              (C22746 + C22745) * C50912) *
                 C50880 +
             ((C18223 + C18222) * C50661 + C28599 * C50912) * C50941) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C50974 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C50975 +
           ((C22217 * C50912 + C27950 * C50661) * C50941 +
            ((C22214 + C22213) * C50912 + (C22215 + C22216) * C50661) *
                C50880) *
               C2111) *
              C50927 +
          ((((C22741 + C22742) * C50912 + C28598 * C50661) * C50941 +
            ((C22743 + C22744) * C50912 + (C22745 + C22746) * C50661) *
                C50880) *
               C50975 -
           ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C50974 -
           (((C17215 * C4637 - C17216 * C4633 - C17215 * C4638 +
              C50852 * C4645 + C17213 * C4639 - C17214 * C4634 -
              C17213 * C4640 + C17208 * C4646) *
                 C50661 +
             (C23156 + C23155) * C50912) *
                C50880 +
            ((C22746 + C22745) * C50661 + C23149 * C50912) * C50941) *
               C2111) *
              C50755) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C1695 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C50783) *
              C280 +
          ((((C22741 + C22742) * C50912 + C28598 * C50661) * C50941 +
            ((C22743 + C22744) * C50912 + (C22745 + C22746) * C50661) *
                C50880) *
               C50783 -
           ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C1695) *
              C281 +
          ((((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
              C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
              C50852 * C1135) *
                 C50912 +
             (C17474 + C17475) * C50661) *
                C50941 +
            ((C23667 + C23668) * C50912 + (C27752 + C27753) * C50661) *
                C50880) *
               C1695 -
           (((C17215 * C3743 - C17216 * C3741 - C17215 * C3744 +
              C50852 * C3747 + C17213 * C2733 - C17214 * C2729 -
              C17213 * C2734 + C17208 * C2738) *
                 C50661 +
             (C23670 + C23669) * C50912) *
                C50880 +
            ((C27753 + C27752) * C50661 + (C23668 + C23667) * C50912) *
                C50941) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C1695 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C50783) *
              C50703 * C1046 +
          (((C27948 * C50912 + C28339 * C50661) * C50941 +
            (C27950 * C50912 + (C17678 + C17679) * C50661) * C50880) *
               C50783 -
           ((C17987 * C50661 + C27949 * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C1695) *
              C50703 * C1047 +
          (((C17274 * C50912 + (C17271 + C17270) * C50661) * C50941 +
            (C28339 * C50912 + (C18000 + C18001) * C50661) * C50880) *
               C1695 -
           (((C17215 * C1238 - C17216 * C1234 - C17215 * C1239 +
              C50852 * C1246 + C17213 * C492 - C17214 * C475 - C17213 * C493 +
              C17208 * C505) *
                 C50661 +
             (C17679 + C17678) * C50912) *
                C50880 +
            ((C18001 + C18000) * C50661 + C17987 * C50912) * C50941) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C50912 +
            (C17266 + C17267) * C50661) *
               C50941 +
           ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
              C1861 -
          ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
           (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
              C1862 +
          ((C22217 * C50912 + C27950 * C50661) * C50941 +
           ((C22214 + C22213) * C50912 + (C22215 + C22216) * C50661) * C50880) *
              C1863 -
          (((C17215 * C6539 - C17216 * C6537 - C17215 * C6540 + C50852 * C6543 +
             C17213 * C5554 - C17214 * C5550 - C17213 * C5555 +
             C17208 * C5559) *
                C50661 +
            (C24080 + C24079) * C50912) *
               C50880 +
           ((C22216 + C22215) * C50661 + C24065 * C50912) * C50941) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C50974 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C50975 +
           ((C22217 * C50912 + C27950 * C50661) * C50941 +
            ((C22214 + C22213) * C50912 + (C22215 + C22216) * C50661) *
                C50880) *
               C2111) *
              C50703 * C50919 +
          (((C27948 * C50912 + C28339 * C50661) * C50941 +
            (C27950 * C50912 + (C17678 + C17679) * C50661) * C50880) *
               C50975 -
           ((C17987 * C50661 + C27949 * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C50974 -
           (((C17215 * C6115 - C17216 * C6114 - C17215 * C6116 +
              C50852 * C6117 + C17213 * C1871 - C17214 * C1866 -
              C17213 * C1872 + C17208 * C1878) *
                 C50661 +
             (C22216 + C22215) * C50912) *
                C50880 +
            ((C17679 + C17678) * C50661 + C22191 * C50912) * C50941) *
               C2111) *
              C50703 * C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C1695 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C50783) *
              C50703 * C1046 +
          (((C27948 * C50912 + C28339 * C50661) * C50941 +
            (C27950 * C50912 + (C17678 + C17679) * C50661) * C50880) *
               C50783 -
           ((C17987 * C50661 + C27949 * C50912) * C50880 +
            ((C17269 + C17268) * C50661 + (C17267 + C17266) * C50912) *
                C50941) *
               C1695) *
              C50703 * C1047 +
          (((C17274 * C50912 + (C17271 + C17270) * C50661) * C50941 +
            (C28339 * C50912 + (C18000 + C18001) * C50661) * C50880) *
               C1695 -
           (((C17215 * C1238 - C17216 * C1234 - C17215 * C1239 +
              C50852 * C1246 + C17213 * C492 - C17214 * C475 - C17213 * C493 +
              C17208 * C505) *
                 C50661 +
             (C17679 + C17678) * C50912) *
                C50880 +
            ((C18001 + C18000) * C50661 + C17987 * C50912) * C50941) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C50912 +
             (C17266 + C17267) * C50661) *
                C50941 +
            ((C22209 + C22210) * C50912 + C27948 * C50661) * C50880) *
               C1695 -
           ((C22191 * C50661 + (C22212 + C22211) * C50912) * C50880 +
            (C27949 * C50661 + (C22210 + C22209) * C50912) * C50941) *
               C50783) *
              C280 +
          ((((C22741 + C22742) * C50912 + C28598 * C50661) * C50941 +
            ((C22743 + C22744) * C50912 + (C22745 + C22746) * C50661) *
                C50880) *
               C50783 -
           ((C28599 * C50661 + (C22742 + C22741) * C50912) * C50880 +
            ((C17472 + C17473) * C50661 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C50912) *
                C50941) *
               C1695) *
              C281 +
          ((((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
              C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
              C50852 * C1135) *
                 C50912 +
             (C17474 + C17475) * C50661) *
                C50941 +
            ((C23667 + C23668) * C50912 + (C27752 + C27753) * C50661) *
                C50880) *
               C1695 -
           (((C17215 * C3743 - C17216 * C3741 - C17215 * C3744 +
              C50852 * C3747 + C17213 * C2733 - C17214 * C2729 -
              C17213 * C2734 + C17208 * C2738) *
                 C50661 +
             (C23670 + C23669) * C50912) *
                C50880 +
            ((C27753 + C27752) * C50661 + (C23668 + C23667) * C50912) *
                C50941) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C50927 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C50755) *
              C50970 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17839 + C17840) * C17212) *
               C50816 * C50719 * C50755 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C50927) *
              C50971 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C50719 * C50927 -
           ((C17215 * C313 - C17216 * C294 - C17215 * C314 + C50852 * C324 +
             C17213 * C311 - C17214 * C293 - C17213 * C312 + C17208 * C323) *
                C17212 +
            (C17840 + C17839) * C17211 + C17826 * C17210) *
               C50816 * C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C50927 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C50755) *
              C50970 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C50755 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C50927) *
              C50971 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C50719 * C50927 -
           (C20052 * C2535 - C20053 * C2530 - C20052 * C2536 + C20044 * C2539 +
            C20050 * C1126 - C20051 * C1121 - C20050 * C1127 + C20043 * C1133 +
            C20048 * C307 - C20049 * C291 - C20048 * C308 + C20042 * C321 +
            C20046 * C297 - C20047 * C286 - C20046 * C298 + C20041 * C316) *
               C50656 * C50816 * C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C17210 +
             (C17266 + C17267) * C17211 + C17274 * C17212) *
                C50816 * C50928 -
            (C17987 * C17212 + (C17674 + C17675) * C17211 +
             (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
              C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                 C17210) *
                C50816 * C50783) *
               C50927 +
           (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
              C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
              C50852 * C1596) *
                 C17210 +
             (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
                C50816 * C50783 -
            (C17826 * C17212 + (C17472 + C17473) * C17211 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C17210) *
                C50816 * C50928) *
               C50755) *
              C283 +
          ((((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
             (C18000 + C18001) * C17212) *
                C50816 * C50783 -
            (C17275 * C17212 + (C17269 + C17268) * C17211 +
             (C17267 + C17266) * C17210) *
                C50816 * C50928) *
               C50927 +
           (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
             (C17839 + C17840) * C17212) *
                C50816 * C50928 -
            ((C17215 * C1585 - C17216 * C1581 - C17215 * C1586 +
              C50852 * C1593 + C17213 * C916 - C17214 * C908 - C17213 * C917 +
              C17208 * C923) *
                 C17212 +
             (C18223 + C18222) * C17211 + (C18221 + C18220) * C17210) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
             C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
             C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
             C20052 * C1130 - C20053 * C1123 - C20052 * C1131 +
             C20044 * C1135) *
                C50656 * C50816 * C50928 -
            (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
             C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
             C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
             C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
                C50656 * C50816 * C50783) *
               C50927 +
           ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
             C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
             C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
             C20052 * C4239 - C20053 * C4236 - C20052 * C4240 +
             C20044 * C4242) *
                C50656 * C50816 * C50783 -
            (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
             C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
             C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
             C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
                C50656 * C50816 * C50928) *
               C50755) *
              C283 +
          (((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
             C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
             C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
             C20052 * C3315 - C20053 * C3311 - C20052 * C3316 +
             C20044 * C3320) *
                C50656 * C50816 * C50783 -
            (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
             C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
             C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
             C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
                C50656 * C50816 * C50928) *
               C50927 +
           ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
             C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
             C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
             C20052 * C2533 - C20053 * C2529 - C20052 * C2534 +
             C20044 * C2538) *
                C50656 * C50816 * C50928 -
            (C20052 * C4237 - C20053 * C4235 - C20052 * C4238 + C20044 * C4241 +
             C20050 * C3315 - C20051 * C3311 - C20050 * C3316 + C20043 * C3320 +
             C20048 * C1589 - C20049 * C1583 - C20048 * C1590 + C20042 * C1595 +
             C20046 * C912 - C20047 * C906 - C20046 * C913 + C20041 * C921) *
                C50656 * C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C280 -
           ((C17470 + C17471) * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C281 +
           ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C50719 * C282) *
              C283 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17213 * C295 - C17214 * C285 - C17213 * C296 + C17208 * C315 +
             C17215 * C309 - C17216 * C292 - C17215 * C310 + C50852 * C322) *
                C17212) *
               C50816 * C50719 * C281 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C280 -
           ((C17215 * C1124 - C17216 * C1120 - C17215 * C1125 + C50852 * C1132 +
             C17213 * C309 - C17214 * C292 - C17213 * C310 + C17208 * C322) *
                C17212 +
            (C17477 + C17476) * C17211 + (C17475 + C17474) * C17210) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C17210 +
           (C17266 + C17267) * C17211 + C17274 * C17212) *
              C50816 * C50719 * C50703 * C113 -
          (C17275 * C17212 + (C17269 + C17268) * C17211 +
           (C17267 + C17266) * C17210) *
              C50816 * C50719 * C50703 * C114 +
          (C17274 * C17210 + (C17271 + C17270) * C17211 +
           (C17272 + C17273) * C17212) *
              C50816 * C50719 * C50703 * C115 -
          ((C17215 * C654 - C17216 * C653 - C17215 * C655 + C50852 * C656 +
            C17213 * C136 - C17214 * C124 - C17213 * C137 + C17208 * C145) *
               C17212 +
           (C17273 + C17272) * C17211 + C17275 * C17210) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C465 -
           ((C17672 + C17673) * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C466 +
           ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C17210 +
            (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
               C50816 * C467) *
              C50703 * C283 +
          (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
            (C17213 * C478 - C17214 * C468 - C17213 * C479 + C17208 * C498 +
             C17215 * C916 - C17216 * C908 - C17215 * C917 + C50852 * C923) *
                C17212) *
               C50816 * C466 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C465 -
           ((C17215 * C1238 - C17216 * C1234 - C17215 * C1239 + C50852 * C1246 +
             C17213 * C492 - C17214 * C475 - C17213 * C493 + C17208 * C505) *
                C17212 +
            (C17679 + C17678) * C17211 + (C17677 + C17676) * C17210) *
               C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C50719 * C50703 * C113 -
          (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
           C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
           C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
           C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
              C50656 * C50816 * C50719 * C50703 * C114 +
          (C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
           C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
           C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
           C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
              C50656 * C50816 * C50719 * C50703 * C115 -
          (C20052 * C1124 - C20053 * C1120 - C20052 * C1125 + C20044 * C1132 +
           C20050 * C309 - C20051 * C292 - C20050 * C310 + C20043 * C322 +
           C20048 * C295 - C20049 * C285 - C20048 * C296 + C20042 * C315 +
           C20046 * C132 - C20047 * C122 - C20046 * C133 + C20041 * C143) *
              C50656 * C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C280 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C281 +
           (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C50719 * C282) *
              C283 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C281 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C280 -
           (C20052 * C3589 - C20053 * C3587 - C20052 * C3590 + C20044 * C3593 +
            C20050 * C2533 - C20051 * C2529 - C20050 * C2534 + C20043 * C2538 +
            C20048 * C1128 - C20049 * C1122 - C20048 * C1129 + C20042 * C1134 +
            C20046 * C305 - C20047 * C290 - C20046 * C306 + C20041 * C320) *
               C50656 * C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C465 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C466 +
           (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
            C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
            C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
            C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
               C50656 * C50816 * C467) *
              C50703 * C283 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C466 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C465 -
           (C20052 * C3743 - C20053 * C3741 - C20052 * C3744 + C20044 * C3747 +
            C20050 * C2733 - C20051 * C2729 - C20050 * C2734 + C20043 * C2738 +
            C20048 * C1242 - C20049 * C1236 - C20048 * C1243 + C20042 * C1248 +
            C20046 * C488 - C20047 * C473 - C20046 * C489 + C20041 * C503) *
               C50656 * C50816 * C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50928 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C50703 * C50970 +
          (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
            (C18000 + C18001) * C17212) *
               C50816 * C50783 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50928) *
              C50703 * C50971 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C50928 -
           ((C17215 * C918 - C17216 * C909 - C17215 * C919 + C50852 * C924 +
             C17213 * C494 - C17214 * C476 - C17213 * C495 + C17208 * C506) *
                C17212 +
            (C18001 + C18000) * C17211 + C17987 * C17210) *
               C50816 * C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50928 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C50703 * C50970 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C50783 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50928) *
              C50703 * C50971 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C50928 -
           (C20052 * C3317 - C20053 * C3312 - C20052 * C3318 + C20044 * C3321 +
            C20050 * C1587 - C20051 * C1582 - C20050 * C1588 + C20043 * C1594 +
            C20048 * C914 - C20049 * C907 - C20048 * C915 + C20042 * C922 +
            C20046 * C480 - C20047 * C469 - C20046 * C481 + C20041 * C499) *
               C50656 * C50816 * C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C17210 +
           (C17266 + C17267) * C17211 + C17274 * C17212) *
              C50816 * C50719 * C50703 * C113 -
          (C17275 * C17212 + (C17269 + C17268) * C17211 +
           (C17267 + C17266) * C17210) *
              C50816 * C50719 * C50703 * C114 +
          (C17274 * C17210 + (C17271 + C17270) * C17211 +
           (C17272 + C17273) * C17212) *
              C50816 * C50719 * C50703 * C115 -
          ((C17215 * C654 - C17216 * C653 - C17215 * C655 + C50852 * C656 +
            C17213 * C136 - C17214 * C124 - C17213 * C137 + C17208 * C145) *
               C17212 +
           (C17273 + C17272) * C17211 + C17275 * C17210) *
              C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C280 -
           ((C17470 + C17471) * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C281 +
           ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C50719 * C282) *
              C283 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17213 * C295 - C17214 * C285 - C17213 * C296 + C17208 * C315 +
             C17215 * C309 - C17216 * C292 - C17215 * C310 + C50852 * C322) *
                C17212) *
               C50816 * C50719 * C281 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C280 -
           ((C17215 * C1124 - C17216 * C1120 - C17215 * C1125 + C50852 * C1132 +
             C17213 * C309 - C17214 * C292 - C17213 * C310 + C17208 * C322) *
                C17212 +
            (C17477 + C17476) * C17211 + (C17475 + C17474) * C17210) *
               C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C50719 * C50703 * C113 -
          (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
           C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
           C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
           C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
              C50656 * C50816 * C50719 * C50703 * C114 +
          (C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
           C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
           C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
           C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
              C50656 * C50816 * C50719 * C50703 * C115 -
          (C20052 * C1124 - C20053 * C1120 - C20052 * C1125 + C20044 * C1132 +
           C20050 * C309 - C20051 * C292 - C20050 * C310 + C20043 * C322 +
           C20048 * C295 - C20049 * C285 - C20048 * C296 + C20042 * C315 +
           C20046 * C132 - C20047 * C122 - C20046 * C133 + C20041 * C143) *
              C50656 * C50816 * C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C280 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C281 +
           (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C50719 * C282) *
              C283 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C281 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C280 -
           (C20052 * C3589 - C20053 * C3587 - C20052 * C3590 + C20044 * C3593 +
            C20050 * C2533 - C20051 * C2529 - C20050 * C2534 + C20043 * C2538 +
            C20048 * C1128 - C20049 * C1122 - C20048 * C1129 + C20042 * C1134 +
            C20046 * C305 - C20047 * C290 - C20046 * C306 + C20041 * C320) *
               C50656 * C50816 * C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C50972 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C50973 +
           ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C50719 * C1350) *
              C50919 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17839 + C17840) * C17212) *
               C50816 * C50719 * C50973 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C50972 -
           ((C17215 * C1124 - C17216 * C1120 - C17215 * C1125 + C50852 * C1132 +
             C17213 * C309 - C17214 * C292 - C17213 * C310 + C17208 * C322) *
                C17212 +
            (C17477 + C17476) * C17211 + (C17475 + C17474) * C17210) *
               C50816 * C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C50972 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C50973 +
           (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C50719 * C1350) *
              C50919 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C50973 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C50972 -
           (C20052 * C3589 - C20053 * C3587 - C20052 * C3590 + C20044 * C3593 +
            C20050 * C2533 - C20051 * C2529 - C20050 * C2534 + C20043 * C2538 +
            C20048 * C1128 - C20049 * C1122 - C20048 * C1129 + C20042 * C1134 +
            C20046 * C305 - C20047 * C290 - C20046 * C306 + C20041 * C320) *
               C50656 * C50816 * C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50928 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C50972 +
          (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
             C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
             C50852 * C1596) *
                C17210 +
            (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
               C50816 * C50783 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50928) *
              C50973 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C50928 -
           ((C17215 * C3317 - C17216 * C3312 - C17215 * C3318 + C50852 * C3321 +
             C17213 * C1587 - C17214 * C1582 - C17213 * C1588 +
             C17208 * C1594) *
                C17212 +
            (C17215 * C3315 - C17216 * C3311 - C17215 * C3316 + C50852 * C3320 +
             C17213 * C1589 - C17214 * C1583 - C17213 * C1590 +
             C17208 * C1595) *
                C17211 +
            (C17215 * C3313 - C17216 * C3310 - C17215 * C3314 + C50852 * C3319 +
             C17213 * C1591 - C17214 * C1584 - C17213 * C1592 +
             C17208 * C1596) *
                C17210) *
               C50816 * C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50928 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C50972 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C50783 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50928) *
              C50973 +
          ((C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C50928 -
           (C20052 * C21173 - C20053 * C21172 - C20052 * C21174 +
            C20044 * C21175 + C20050 * C4239 - C20051 * C4236 - C20050 * C4240 +
            C20043 * C4242 + C20048 * C3313 - C20049 * C3310 - C20048 * C3314 +
            C20042 * C3319 + C20046 * C1591 - C20047 * C1584 - C20046 * C1592 +
            C20041 * C1596) *
               C50656 * C50816 * C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C17210 +
           (C17266 + C17267) * C17211 + C17274 * C17212) *
              C50816 * C50719 * C1115 -
          (C17826 * C17212 + (C17472 + C17473) * C17211 +
           (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
            C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
               C17210) *
              C50816 * C50719 * C1116 +
          ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
            C17215 * C1130 - C17216 * C1123 - C17215 * C1131 + C50852 * C1135) *
               C17210 +
           (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
              C50816 * C50719 * C1117 -
          ((C17215 * C2535 - C17216 * C2530 - C17215 * C2536 + C50852 * C2539 +
            C17213 * C1126 - C17214 * C1121 - C17213 * C1127 + C17208 * C1133) *
               C17212 +
           (C17215 * C2533 - C17216 * C2529 - C17215 * C2534 + C50852 * C2538 +
            C17213 * C1128 - C17214 * C1122 - C17213 * C1129 + C17208 * C1134) *
               C17211 +
           (C17215 * C2531 - C17216 * C2528 - C17215 * C2532 + C50852 * C2537 +
            C17213 * C1130 - C17214 * C1123 - C17213 * C1131 + C17208 * C1135) *
               C17210) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C1044 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17839 + C17840) * C17212) *
               C50816 * C50719 * C50755 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C1044) *
              C1047 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C50719 * C1044 -
           ((C17215 * C313 - C17216 * C294 - C17215 * C314 + C50852 * C324 +
             C17213 * C311 - C17214 * C293 - C17213 * C312 + C17208 * C323) *
                C17212 +
            (C17840 + C17839) * C17211 + C17826 * C17210) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C465 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C466 +
           ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C17210 +
            (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
               C50816 * C467) *
              C1044 +
          (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
             C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
             C50852 * C1596) *
                C17210 +
            (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
               C50816 * C466 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C465 -
           ((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 + C50852 * C2739 +
             C17213 * C1240 - C17214 * C1235 - C17213 * C1241 +
             C17208 * C1247) *
                C17212 +
            (C17215 * C2733 - C17216 * C2729 - C17215 * C2734 + C50852 * C2738 +
             C17213 * C1242 - C17214 * C1236 - C17213 * C1243 +
             C17208 * C1248) *
                C17211 +
            (C17215 * C2731 - C17216 * C2728 - C17215 * C2732 + C50852 * C2737 +
             C17213 * C1244 - C17214 * C1237 - C17213 * C1245 +
             C17208 * C1249) *
                C17210) *
               C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C1044 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C50755) *
              C1046 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C50755 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C1044) *
              C1047 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C50719 * C1044 -
           (C20052 * C2535 - C20053 * C2530 - C20052 * C2536 + C20044 * C2539 +
            C20050 * C1126 - C20051 * C1121 - C20050 * C1127 + C20043 * C1133 +
            C20048 * C307 - C20049 * C291 - C20048 * C308 + C20042 * C321 +
            C20046 * C297 - C20047 * C286 - C20046 * C298 + C20041 * C316) *
               C50656 * C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C50719 * C1115 -
          (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
           C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
           C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
           C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
              C50656 * C50816 * C50719 * C1116 +
          (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
           C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
           C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
           C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
              C50656 * C50816 * C50719 * C1117 -
          (C20052 * C20741 - C20053 * C20740 - C20052 * C20742 +
           C20044 * C20743 + C20050 * C3591 - C20051 * C3588 - C20050 * C3592 +
           C20043 * C3594 + C20048 * C2531 - C20049 * C2528 - C20048 * C2532 +
           C20042 * C2537 + C20046 * C1130 - C20047 * C1123 - C20046 * C1131 +
           C20041 * C1135) *
              C50656 * C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C465 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C466 +
           (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
            C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
            C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
            C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
               C50656 * C50816 * C467) *
              C1044 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C466 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C465 -
           (C20052 * C20843 - C20053 * C20842 - C20052 * C20844 +
            C20044 * C20845 + C20050 * C3745 - C20051 * C3742 - C20050 * C3746 +
            C20043 * C3748 + C20048 * C2731 - C20049 * C2728 - C20048 * C2732 +
            C20042 * C2737 + C20046 * C1244 - C20047 * C1237 - C20046 * C1245 +
            C20041 * C1249) *
               C50656 * C50816 * C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C17210 +
             (C17266 + C17267) * C17211 + C17274 * C17212) *
                C50816 * C50928 -
            (C17987 * C17212 + (C17674 + C17675) * C17211 +
             (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
              C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                 C17210) *
                C50816 * C50783) *
               C1044 +
           (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
              C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
              C50852 * C1596) *
                 C17210 +
             (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
                C50816 * C50783 -
            (C17826 * C17212 + (C17472 + C17473) * C17211 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C17210) *
                C50816 * C50928) *
               C50755) *
              C50919 +
          ((((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
             (C18000 + C18001) * C17212) *
                C50816 * C50783 -
            (C17275 * C17212 + (C17269 + C17268) * C17211 +
             (C17267 + C17266) * C17210) *
                C50816 * C50928) *
               C1044 +
           (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
             (C17839 + C17840) * C17212) *
                C50816 * C50928 -
            ((C17215 * C1585 - C17216 * C1581 - C17215 * C1586 +
              C50852 * C1593 + C17213 * C916 - C17214 * C908 - C17213 * C917 +
              C17208 * C923) *
                 C17212 +
             (C18223 + C18222) * C17211 + (C18221 + C18220) * C17210) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
             C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
             C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
             C20052 * C1130 - C20053 * C1123 - C20052 * C1131 +
             C20044 * C1135) *
                C50656 * C50816 * C50928 -
            (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
             C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
             C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
             C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
                C50656 * C50816 * C50783) *
               C1044 +
           ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
             C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
             C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
             C20052 * C4239 - C20053 * C4236 - C20052 * C4240 +
             C20044 * C4242) *
                C50656 * C50816 * C50783 -
            (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
             C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
             C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
             C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
                C50656 * C50816 * C50928) *
               C50755) *
              C50919 +
          (((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
             C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
             C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
             C20052 * C3315 - C20053 * C3311 - C20052 * C3316 +
             C20044 * C3320) *
                C50656 * C50816 * C50783 -
            (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
             C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
             C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
             C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
                C50656 * C50816 * C50928) *
               C1044 +
           ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
             C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
             C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
             C20052 * C2533 - C20053 * C2529 - C20052 * C2534 +
             C20044 * C2538) *
                C50656 * C50816 * C50928 -
            (C20052 * C4237 - C20053 * C4235 - C20052 * C4238 + C20044 * C4241 +
             C20050 * C3315 - C20051 * C3311 - C20050 * C3316 + C20043 * C3320 +
             C20048 * C1589 - C20049 * C1583 - C20048 * C1590 + C20042 * C1595 +
             C20046 * C912 - C20047 * C906 - C20046 * C913 + C20041 * C921) *
                C50656 * C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50719 * C1044 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50719 * C50755) *
              C1046 +
          (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
            (C17839 + C17840) * C17212) *
               C50816 * C50719 * C50755 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50719 * C1044) *
              C1047 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C50719 * C1044 -
           ((C17215 * C313 - C17216 * C294 - C17215 * C314 + C50852 * C324 +
             C17213 * C311 - C17214 * C293 - C17213 * C312 + C17208 * C323) *
                C17212 +
            (C17840 + C17839) * C17211 + C17826 * C17210) *
               C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C17210 +
           (C17266 + C17267) * C17211 + C17274 * C17212) *
              C50816 * C50719 * C1115 -
          (C17826 * C17212 + (C17472 + C17473) * C17211 +
           (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
            C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
               C17210) *
              C50816 * C50719 * C1116 +
          ((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
            C17215 * C1130 - C17216 * C1123 - C17215 * C1131 + C50852 * C1135) *
               C17210 +
           (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
              C50816 * C50719 * C1117 -
          ((C17215 * C2535 - C17216 * C2530 - C17215 * C2536 + C50852 * C2539 +
            C17213 * C1126 - C17214 * C1121 - C17213 * C1127 + C17208 * C1133) *
               C17212 +
           (C17215 * C2533 - C17216 * C2529 - C17215 * C2534 + C50852 * C2538 +
            C17213 * C1128 - C17214 * C1122 - C17213 * C1129 + C17208 * C1134) *
               C17211 +
           (C17215 * C2531 - C17216 * C2528 - C17215 * C2532 + C50852 * C2537 +
            C17213 * C1130 - C17214 * C1123 - C17213 * C1131 + C17208 * C1135) *
               C17210) *
              C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50719 * C1044 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50719 * C50755) *
              C1046 +
          ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
            C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
            C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
            C20052 * C2533 - C20053 * C2529 - C20052 * C2534 + C20044 * C2538) *
               C50656 * C50816 * C50719 * C50755 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50719 * C1044) *
              C1047 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C50719 * C1044 -
           (C20052 * C2535 - C20053 * C2530 - C20052 * C2536 + C20044 * C2539 +
            C20050 * C1126 - C20051 * C1121 - C20050 * C1127 + C20043 * C1133 +
            C20048 * C307 - C20049 * C291 - C20048 * C308 + C20042 * C321 +
            C20046 * C297 - C20047 * C286 - C20046 * C298 + C20041 * C316) *
               C50656 * C50816 * C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C50719 * C1115 -
          (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
           C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
           C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
           C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
              C50656 * C50816 * C50719 * C1116 +
          (C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
           C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
           C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
           C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
              C50656 * C50816 * C50719 * C1117 -
          (C20052 * C20741 - C20053 * C20740 - C20052 * C20742 +
           C20044 * C20743 + C20050 * C3591 - C20051 * C3588 - C20050 * C3592 +
           C20043 * C3594 + C20048 * C2531 - C20049 * C2528 - C20048 * C2532 +
           C20042 * C2537 + C20046 * C1130 - C20047 * C1123 - C20046 * C1131 +
           C20041 * C1135) *
              C50656 * C50816 * C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
              C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                 C17210 +
             (C17266 + C17267) * C17211 + C17274 * C17212) *
                C50816 * C1695 -
            (C17987 * C17212 + (C17674 + C17675) * C17211 +
             (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
              C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                 C17210) *
                C50816 * C50783) *
               C50927 +
           (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
              C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
              C50852 * C1596) *
                 C17210 +
             (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
                C50816 * C50783 -
            (C17826 * C17212 + (C17472 + C17473) * C17211 +
             (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
              C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                 C17210) *
                C50816 * C1695) *
               C50755) *
              C50919 +
          ((((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
             (C18000 + C18001) * C17212) *
                C50816 * C50783 -
            (C17275 * C17212 + (C17269 + C17268) * C17211 +
             (C17267 + C17266) * C17210) *
                C50816 * C1695) *
               C50927 +
           (((C17473 + C17472) * C17210 + (C17471 + C17470) * C17211 +
             (C17839 + C17840) * C17212) *
                C50816 * C1695 -
            ((C17215 * C1585 - C17216 * C1581 - C17215 * C1586 +
              C50852 * C1593 + C17213 * C916 - C17214 * C908 - C17213 * C917 +
              C17208 * C923) *
                 C17212 +
             (C18223 + C18222) * C17211 + (C18221 + C18220) * C17210) *
                C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
             C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
             C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
             C20052 * C1130 - C20053 * C1123 - C20052 * C1131 +
             C20044 * C1135) *
                C50656 * C50816 * C1695 -
            (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
             C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
             C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
             C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
                C50656 * C50816 * C50783) *
               C50927 +
           ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
             C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
             C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
             C20052 * C4239 - C20053 * C4236 - C20052 * C4240 +
             C20044 * C4242) *
                C50656 * C50816 * C50783 -
            (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
             C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
             C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
             C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
                C50656 * C50816 * C1695) *
               C50755) *
              C50919 +
          (((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
             C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
             C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
             C20052 * C3315 - C20053 * C3311 - C20052 * C3316 +
             C20044 * C3320) *
                C50656 * C50816 * C50783 -
            (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
             C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
             C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
             C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
                C50656 * C50816 * C1695) *
               C50927 +
           ((C20046 * C299 - C20047 * C287 - C20046 * C300 + C20041 * C317 +
             C20048 * C305 - C20049 * C290 - C20048 * C306 + C20042 * C320 +
             C20050 * C1128 - C20051 * C1122 - C20050 * C1129 + C20043 * C1134 +
             C20052 * C2533 - C20053 * C2529 - C20052 * C2534 +
             C20044 * C2538) *
                C50656 * C50816 * C1695 -
            (C20052 * C4237 - C20053 * C4235 - C20052 * C4238 + C20044 * C4241 +
             C20050 * C3315 - C20051 * C3311 - C20050 * C3316 + C20043 * C3320 +
             C20048 * C1589 - C20049 * C1583 - C20048 * C1590 + C20042 * C1595 +
             C20046 * C912 - C20047 * C906 - C20046 * C913 + C20041 * C921) *
                C50656 * C50816 * C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50974 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50975 +
           ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C17210 +
            (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
               C50816 * C2111) *
              C50927 +
          (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
             C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
             C50852 * C1596) *
                C17210 +
            (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
               C50816 * C50975 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C50974 -
           ((C17215 * C2735 - C17216 * C2730 - C17215 * C2736 + C50852 * C2739 +
             C17213 * C1240 - C17214 * C1235 - C17213 * C1241 +
             C17208 * C1247) *
                C17212 +
            (C17215 * C2733 - C17216 * C2729 - C17215 * C2734 + C50852 * C2738 +
             C17213 * C1242 - C17214 * C1236 - C17213 * C1243 +
             C17208 * C1248) *
                C17211 +
            (C17215 * C2731 - C17216 * C2728 - C17215 * C2732 + C50852 * C2737 +
             C17213 * C1244 - C17214 * C1237 - C17213 * C1245 +
             C17208 * C1249) *
                C17210) *
               C50816 * C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50974 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50975 +
           (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
            C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
            C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
            C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
               C50656 * C50816 * C2111) *
              C50927 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C50975 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C50974 -
           (C20052 * C20843 - C20053 * C20842 - C20052 * C20844 +
            C20044 * C20845 + C20050 * C3745 - C20051 * C3742 - C20050 * C3746 +
            C20043 * C3748 + C20048 * C2731 - C20049 * C2728 - C20048 * C2732 +
            C20042 * C2737 + C20046 * C1244 - C20047 * C1237 - C20046 * C1245 +
            C20041 * C1249) *
               C50656 * C50816 * C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C1695 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C280 +
          (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
             C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
             C50852 * C1596) *
                C17210 +
            (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
               C50816 * C50783 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C1695) *
              C281 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C1695 -
           ((C17215 * C3317 - C17216 * C3312 - C17215 * C3318 + C50852 * C3321 +
             C17213 * C1587 - C17214 * C1582 - C17213 * C1588 +
             C17208 * C1594) *
                C17212 +
            (C17215 * C3315 - C17216 * C3311 - C17215 * C3316 + C50852 * C3320 +
             C17213 * C1589 - C17214 * C1583 - C17213 * C1590 +
             C17208 * C1595) *
                C17211 +
            (C17215 * C3313 - C17216 * C3310 - C17215 * C3314 + C50852 * C3319 +
             C17213 * C1591 - C17214 * C1584 - C17213 * C1592 +
             C17208 * C1596) *
                C17210) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C1695 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
            (C18000 + C18001) * C17212) *
               C50816 * C50783 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C1695) *
              C50703 * C1047 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C1695 -
           ((C17215 * C918 - C17216 * C909 - C17215 * C919 + C50852 * C924 +
             C17213 * C494 - C17214 * C476 - C17213 * C495 + C17208 * C506) *
                C17212 +
            (C18001 + C18000) * C17211 + C17987 * C17210) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
            C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
               C17210 +
           (C17266 + C17267) * C17211 + C17274 * C17212) *
              C50816 * C1861 -
          (C17987 * C17212 + (C17674 + C17675) * C17211 +
           (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
            C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
               C17210) *
              C50816 * C1862 +
          ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
            C17215 * C1244 - C17216 * C1237 - C17215 * C1245 + C50852 * C1249) *
               C17210 +
           (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
              C50816 * C1863 -
          ((C17215 * C6115 - C17216 * C6114 - C17215 * C6116 + C50852 * C6117 +
            C17213 * C1871 - C17214 * C1866 - C17213 * C1872 + C17208 * C1878) *
               C17212 +
           (C17215 * C4639 - C17216 * C4634 - C17215 * C4640 + C50852 * C4646 +
            C17213 * C1873 - C17214 * C1867 - C17213 * C1874 + C17208 * C1879) *
               C17211 +
           (C17215 * C4643 - C17216 * C4636 - C17215 * C4644 + C50852 * C4648 +
            C17213 * C1875 - C17214 * C1868 - C17213 * C1876 + C17208 * C1880) *
               C17210) *
              C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C1695 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C50703 * C1046 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C50783 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C1695) *
              C50703 * C1047 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C1695 -
           (C20052 * C3317 - C20053 * C3312 - C20052 * C3318 + C20044 * C3321 +
            C20050 * C1587 - C20051 * C1582 - C20050 * C1588 + C20043 * C1594 +
            C20048 * C914 - C20049 * C907 - C20048 * C915 + C20042 * C922 +
            C20046 * C480 - C20047 * C469 - C20046 * C481 + C20041 * C499) *
               C50656 * C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C1695 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C280 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C50783 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C1695) *
              C281 +
          ((C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C1695 -
           (C20052 * C21173 - C20053 * C21172 - C20052 * C21174 +
            C20044 * C21175 + C20050 * C4239 - C20051 * C4236 - C20050 * C4240 +
            C20043 * C4242 + C20048 * C3313 - C20049 * C3310 - C20048 * C3314 +
            C20042 * C3319 + C20046 * C1591 - C20047 * C1584 - C20046 * C1592 +
            C20041 * C1596) *
               C50656 * C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
           C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
           C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
           C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
              C50656 * C50816 * C1861 -
          (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
           C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
           C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
           C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
              C50656 * C50816 * C1862 +
          (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
           C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
           C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
           C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
              C50656 * C50816 * C1863 -
          (C20052 * C21439 - C20053 * C21438 - C20052 * C21440 +
           C20044 * C21441 + C20050 * C4641 - C20051 * C4635 - C20050 * C4642 +
           C20043 * C4647 + C20048 * C4643 - C20049 * C4636 - C20048 * C4644 +
           C20042 * C4648 + C20046 * C1875 - C20047 * C1868 - C20046 * C1876 +
           C20041 * C1880) *
              C50656 * C50816 * C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C50974 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50975 +
           ((C17213 * C486 - C17214 * C472 - C17213 * C487 + C17208 * C502 +
             C17215 * C1244 - C17216 * C1237 - C17215 * C1245 +
             C50852 * C1249) *
                C17210 +
            (C17676 + C17677) * C17211 + (C17678 + C17679) * C17212) *
               C50816 * C2111) *
              C50703 * C50919 +
          (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
            (C18000 + C18001) * C17212) *
               C50816 * C50975 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C50974 -
           ((C17215 * C1238 - C17216 * C1234 - C17215 * C1239 + C50852 * C1246 +
             C17213 * C492 - C17214 * C475 - C17213 * C493 + C17208 * C505) *
                C17212 +
            (C17679 + C17678) * C17211 + (C17677 + C17676) * C17210) *
               C50816 * C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C50974 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50975 +
           (C20046 * C486 - C20047 * C472 - C20046 * C487 + C20041 * C502 +
            C20048 * C1244 - C20049 * C1237 - C20048 * C1245 + C20042 * C1249 +
            C20050 * C2731 - C20051 * C2728 - C20050 * C2732 + C20043 * C2737 +
            C20052 * C3745 - C20053 * C3742 - C20052 * C3746 + C20044 * C3748) *
               C50656 * C50816 * C2111) *
              C50703 * C50919 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C50975 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C50974 -
           (C20052 * C3743 - C20053 * C3741 - C20052 * C3744 + C20044 * C3747 +
            C20050 * C2733 - C20051 * C2729 - C20050 * C2734 + C20043 * C2738 +
            C20048 * C1242 - C20049 * C1236 - C20048 * C1243 + C20042 * C1248 +
            C20046 * C488 - C20047 * C473 - C20046 * C489 + C20041 * C503) *
               C50656 * C50816 * C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C1695 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C50703 * C1046 +
          (((C17675 + C17674) * C17210 + (C17673 + C17672) * C17211 +
            (C18000 + C18001) * C17212) *
               C50816 * C50783 -
           (C17275 * C17212 + (C17269 + C17268) * C17211 +
            (C17267 + C17266) * C17210) *
               C50816 * C1695) *
              C50703 * C1047 +
          ((C17274 * C17210 + (C17271 + C17270) * C17211 +
            (C17272 + C17273) * C17212) *
               C50816 * C1695 -
           ((C17215 * C918 - C17216 * C909 - C17215 * C919 + C50852 * C924 +
             C17213 * C494 - C17214 * C476 - C17213 * C495 + C17208 * C506) *
                C17212 +
            (C18001 + C18000) * C17211 + C17987 * C17210) *
               C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C17213 * C126 - C17214 * C119 - C17213 * C127 + C17208 * C140 +
             C17215 * C301 - C17216 * C288 - C17215 * C302 + C50852 * C318) *
                C17210 +
            (C17266 + C17267) * C17211 + C17274 * C17212) *
               C50816 * C1695 -
           (C17987 * C17212 + (C17674 + C17675) * C17211 +
            (C17215 * C910 - C17216 * C905 - C17215 * C911 + C50852 * C920 +
             C17213 * C484 - C17214 * C471 - C17213 * C485 + C17208 * C501) *
                C17210) *
               C50816 * C50783) *
              C280 +
          (((C17213 * C910 - C17214 * C905 - C17213 * C911 + C17208 * C920 +
             C17215 * C1591 - C17216 * C1584 - C17215 * C1592 +
             C50852 * C1596) *
                C17210 +
            (C18220 + C18221) * C17211 + (C18222 + C18223) * C17212) *
               C50816 * C50783 -
           (C17826 * C17212 + (C17472 + C17473) * C17211 +
            (C17215 * C303 - C17216 * C289 - C17215 * C304 + C50852 * C319 +
             C17213 * C301 - C17214 * C288 - C17213 * C302 + C17208 * C318) *
                C17210) *
               C50816 * C1695) *
              C281 +
          (((C17213 * C303 - C17214 * C289 - C17213 * C304 + C17208 * C319 +
             C17215 * C1130 - C17216 * C1123 - C17215 * C1131 +
             C50852 * C1135) *
                C17210 +
            (C17474 + C17475) * C17211 + (C17476 + C17477) * C17212) *
               C50816 * C1695 -
           ((C17215 * C3317 - C17216 * C3312 - C17215 * C3318 + C50852 * C3321 +
             C17213 * C1587 - C17214 * C1582 - C17213 * C1588 +
             C17208 * C1594) *
                C17212 +
            (C17215 * C3315 - C17216 * C3311 - C17215 * C3316 + C50852 * C3320 +
             C17213 * C1589 - C17214 * C1583 - C17213 * C1590 +
             C17208 * C1595) *
                C17211 +
            (C17215 * C3313 - C17216 * C3310 - C17215 * C3314 + C50852 * C3319 +
             C17213 * C1591 - C17214 * C1584 - C17213 * C1592 +
             C17208 * C1596) *
                C17210) *
               C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C1695 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C50703 * C1046 +
          ((C20046 * C482 - C20047 * C470 - C20046 * C483 + C20041 * C500 +
            C20048 * C912 - C20049 * C906 - C20048 * C913 + C20042 * C921 +
            C20050 * C1589 - C20051 * C1583 - C20050 * C1590 + C20043 * C1595 +
            C20052 * C3315 - C20053 * C3311 - C20052 * C3316 + C20044 * C3320) *
               C50656 * C50816 * C50783 -
           (C20052 * C1128 - C20053 * C1122 - C20052 * C1129 + C20044 * C1134 +
            C20050 * C305 - C20051 * C290 - C20050 * C306 + C20043 * C320 +
            C20048 * C299 - C20049 * C287 - C20048 * C300 + C20042 * C317 +
            C20046 * C128 - C20047 * C120 - C20046 * C129 + C20041 * C141) *
               C50656 * C50816 * C1695) *
              C50703 * C1047 +
          ((C20046 * C130 - C20047 * C121 - C20046 * C131 + C20041 * C142 +
            C20048 * C297 - C20049 * C286 - C20048 * C298 + C20042 * C316 +
            C20050 * C307 - C20051 * C291 - C20050 * C308 + C20043 * C321 +
            C20052 * C1126 - C20053 * C1121 - C20052 * C1127 + C20044 * C1133) *
               C50656 * C50816 * C1695 -
           (C20052 * C3317 - C20053 * C3312 - C20052 * C3318 + C20044 * C3321 +
            C20050 * C1587 - C20051 * C1582 - C20050 * C1588 + C20043 * C1594 +
            C20048 * C914 - C20049 * C907 - C20048 * C915 + C20042 * C922 +
            C20046 * C480 - C20047 * C469 - C20046 * C481 + C20041 * C499) *
               C50656 * C50816 * C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C20046 * C126 - C20047 * C119 - C20046 * C127 + C20041 * C140 +
            C20048 * C301 - C20049 * C288 - C20048 * C302 + C20042 * C318 +
            C20050 * C303 - C20051 * C289 - C20050 * C304 + C20043 * C319 +
            C20052 * C1130 - C20053 * C1123 - C20052 * C1131 + C20044 * C1135) *
               C50656 * C50816 * C1695 -
           (C20052 * C3313 - C20053 * C3310 - C20052 * C3314 + C20044 * C3319 +
            C20050 * C1591 - C20051 * C1584 - C20050 * C1592 + C20043 * C1596 +
            C20048 * C910 - C20049 * C905 - C20048 * C911 + C20042 * C920 +
            C20046 * C484 - C20047 * C471 - C20046 * C485 + C20041 * C501) *
               C50656 * C50816 * C50783) *
              C280 +
          ((C20046 * C910 - C20047 * C905 - C20046 * C911 + C20041 * C920 +
            C20048 * C1591 - C20049 * C1584 - C20048 * C1592 + C20042 * C1596 +
            C20050 * C3313 - C20051 * C3310 - C20050 * C3314 + C20043 * C3319 +
            C20052 * C4239 - C20053 * C4236 - C20052 * C4240 + C20044 * C4242) *
               C50656 * C50816 * C50783 -
           (C20052 * C2531 - C20053 * C2528 - C20052 * C2532 + C20044 * C2537 +
            C20050 * C1130 - C20051 * C1123 - C20050 * C1131 + C20043 * C1135 +
            C20048 * C303 - C20049 * C289 - C20048 * C304 + C20042 * C319 +
            C20046 * C301 - C20047 * C288 - C20046 * C302 + C20041 * C318) *
               C50656 * C50816 * C1695) *
              C281 +
          ((C20046 * C303 - C20047 * C289 - C20046 * C304 + C20041 * C319 +
            C20048 * C1130 - C20049 * C1123 - C20048 * C1131 + C20042 * C1135 +
            C20050 * C2531 - C20051 * C2528 - C20050 * C2532 + C20043 * C2537 +
            C20052 * C3591 - C20053 * C3588 - C20052 * C3592 + C20044 * C3594) *
               C50656 * C50816 * C1695 -
           (C20052 * C21173 - C20053 * C21172 - C20052 * C21174 +
            C20044 * C21175 + C20050 * C4239 - C20051 * C4236 - C20050 * C4240 +
            C20043 * C4242 + C20048 * C3313 - C20049 * C3310 - C20048 * C3314 +
            C20042 * C3319 + C20046 * C1591 - C20047 * C1584 - C20046 * C1592 +
            C20041 * C1596) *
               C50656 * C50816 * C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50719 * C50927 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C50719 * C50755) *
              C50970 +
          ((((C8316 + C8315) * C50912 + (C8314 + C8313) * C50661) * C33779 +
            (C14719 * C50912 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C50755 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C50719 * C50927) *
              C50971 +
          (((C8117 * C50912 + (C8114 + C8113) * C50661) * C33779 +
            (C14452 * C50912 + (C8843 + C8844) * C50661) * C50880) *
               C50719 * C50927 -
           (((C8058 * C1585 - C8059 * C1581 - C8058 * C1586 + C50852 * C1593 +
              C8056 * C916 - C8057 * C908 - C8056 * C917 + C50940 * C923) *
                 C50661 +
             (C9066 + C9065) * C50912) *
                C50880 +
            ((C8683 + C8682) * C50661 + C8669 * C50912) * C33779) *
               C50719 * C50755) *
              C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
               C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                  C50912 +
              (C8109 + C8110) * C50661) *
                 C33779 +
             ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
                C50928 -
            ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
             (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
                C50783) *
               C50927 +
           ((((C14737 + C14738) * C50912 + C14719 * C50661) * C33779 +
             ((C15271 + C15272) * C50912 + (C14739 + C14740) * C50661) *
                 C50880) *
                C50783 -
            ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
             ((C8315 + C8316) * C50661 +
              (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
               C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                  C50912) *
                 C33779) *
                C50928) *
               C50755) *
              C283 +
          ((((C14026 * C50912 + C14452 * C50661) * C33779 +
             (C14037 * C50912 + (C8521 + C8522) * C50661) * C50880) *
                C50783 -
            ((C8830 * C50661 + C14036 * C50912) * C50880 +
             ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
                C50928) *
               C50927 +
           ((((C8316 + C8315) * C50912 + (C8314 + C8313) * C50661) * C33779 +
             (C14719 * C50912 + (C9065 + C9066) * C50661) * C50880) *
                C50928 -
            (((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
               C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                  C50661 +
              (C14740 + C14739) * C50912) *
                 C50880 +
             ((C9066 + C9065) * C50661 + C14728 * C50912) * C33779) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50719 * C280 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C50719 * C281 +
           (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C50912 +
             (C8317 + C8318) * C50661) *
                C33779 +
            ((C15931 + C15932) * C50912 + (C13822 + C13823) * C50661) *
                C50880) *
               C50719 * C282) *
              C283 +
          ((((C8316 + C8315) * C50912 + (C8314 + C8313) * C50661) * C33779 +
            (C14719 * C50912 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C281 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C50719 * C280 -
           (((C8058 * C3317 - C8059 * C3312 - C8058 * C3318 + C50852 * C3321 +
              C8056 * C1587 - C8057 * C1582 - C8056 * C1588 + C50940 * C1594) *
                 C50661 +
             (C13823 + C13822) * C50912) *
                C50880 +
            ((C8320 + C8319) * C50661 + (C8318 + C8317) * C50912) * C33779) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50912 +
            (C8109 + C8110) * C50661) *
               C33779 +
           ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
              C50719 * C50703 * C113 -
          ((C8830 * C50661 + C14036 * C50912) * C50880 +
           ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
              C50719 * C50703 * C114 +
          ((C8117 * C50912 + (C8114 + C8113) * C50661) * C33779 +
           (C14452 * C50912 + (C8843 + C8844) * C50661) * C50880) *
              C50719 * C50703 * C115 -
          (((C8058 * C918 - C8059 * C909 - C8058 * C919 + C50852 * C924 +
             C8056 * C494 - C8057 * C476 - C8056 * C495 + C50940 * C506) *
                C50661 +
            (C8844 + C8843) * C50912) *
               C50880 +
           ((C8116 + C8115) * C50661 + C8118 * C50912) * C33779) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C465 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C466 +
           (((C14061 + C14060) * C50912 + C14037 * C50661) * C33779 +
            ((C16463 + C16464) * C50912 + (C14062 + C14063) * C50661) *
                C50880) *
               C467) *
              C50703 * C283 +
          (((C14026 * C50912 + C14452 * C50661) * C33779 +
            (C14037 * C50912 + (C8521 + C8522) * C50661) * C50880) *
               C466 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C465 -
           (((C8058 * C6115 - C8059 * C6114 - C8058 * C6116 + C50852 * C6117 +
              C8056 * C1871 - C8057 * C1866 - C8056 * C1872 + C50940 * C1878) *
                 C50661 +
             (C14063 + C14062) * C50912) *
                C50880 +
            ((C8522 + C8521) * C50661 + C14027 * C50912) * C33779) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50928 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C50783) *
              C50703 * C50970 +
          (((C14026 * C50912 + C14452 * C50661) * C33779 +
            (C14037 * C50912 + (C8521 + C8522) * C50661) * C50880) *
               C50783 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C50928) *
              C50703 * C50971 +
          (((C8117 * C50912 + (C8114 + C8113) * C50661) * C33779 +
            (C14452 * C50912 + (C8843 + C8844) * C50661) * C50880) *
               C50928 -
           (((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
              C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
                 C50661 +
             (C8522 + C8521) * C50912) *
                C50880 +
            ((C8844 + C8843) * C50661 + C8830 * C50912) * C33779) *
               C50783) *
              C50703 * C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50912 +
            (C8109 + C8110) * C50661) *
               C33779 +
           ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
              C50719 * C50703 * C113 -
          ((C8830 * C50661 + C14036 * C50912) * C50880 +
           ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
              C50719 * C50703 * C114 +
          ((C8117 * C50912 + (C8114 + C8113) * C50661) * C33779 +
           (C14452 * C50912 + (C8843 + C8844) * C50661) * C50880) *
              C50719 * C50703 * C115 -
          (((C8058 * C918 - C8059 * C909 - C8058 * C919 + C50852 * C924 +
             C8056 * C494 - C8057 * C476 - C8056 * C495 + C50940 * C506) *
                C50661 +
            (C8844 + C8843) * C50912) *
               C50880 +
           ((C8116 + C8115) * C50661 + C8118 * C50912) * C33779) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50719 * C280 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C50719 * C281 +
           (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C50912 +
             (C8317 + C8318) * C50661) *
                C33779 +
            ((C15931 + C15932) * C50912 + (C13822 + C13823) * C50661) *
                C50880) *
               C50719 * C282) *
              C283 +
          ((((C8316 + C8315) * C50912 + (C8314 + C8313) * C50661) * C33779 +
            (C14719 * C50912 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C281 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C50719 * C280 -
           (((C8058 * C3317 - C8059 * C3312 - C8058 * C3318 + C50852 * C3321 +
              C8056 * C1587 - C8057 * C1582 - C8056 * C1588 + C50940 * C1594) *
                 C50661 +
             (C13823 + C13822) * C50912) *
                C50880 +
            ((C8320 + C8319) * C50661 + (C8318 + C8317) * C50912) * C33779) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50719 * C50972 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C50719 * C50973 +
           (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C50912 +
             (C8317 + C8318) * C50661) *
                C33779 +
            ((C15931 + C15932) * C50912 + (C13822 + C13823) * C50661) *
                C50880) *
               C50719 * C1350) *
              C50919 +
          ((((C8316 + C8315) * C50912 + (C8314 + C8313) * C50661) * C33779 +
            (C14719 * C50912 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C50973 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C50719 * C50972 -
           (((C8058 * C3317 - C8059 * C3312 - C8058 * C3318 + C50852 * C3321 +
              C8056 * C1587 - C8057 * C1582 - C8056 * C1588 + C50940 * C1594) *
                 C50661 +
             (C13823 + C13822) * C50912) *
                C50880 +
            ((C8320 + C8319) * C50661 + (C8318 + C8317) * C50912) * C33779) *
               C50719 * C1350) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50928 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C50783) *
              C50972 +
          ((((C14737 + C14738) * C50912 + C14719 * C50661) * C33779 +
            ((C15271 + C15272) * C50912 + (C14739 + C14740) * C50661) *
                C50880) *
               C50783 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C50928) *
              C50973 +
          ((((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C50912 +
             (C8317 + C8318) * C50661) *
                C33779 +
            ((C15931 + C15932) * C50912 + (C13822 + C13823) * C50661) *
                C50880) *
               C50928 -
           (((C8058 * C3743 - C8059 * C3741 - C8058 * C3744 + C50852 * C3747 +
              C8056 * C2733 - C8057 * C2729 - C8056 * C2734 + C50940 * C2738) *
                 C50661 +
             (C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748 +
              C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737) *
                 C50912) *
                C50880 +
            ((C13823 + C13822) * C50661 + (C15932 + C15931) * C50912) *
                C33779) *
               C50783) *
              C1350) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50912 +
            (C8109 + C8110) * C50661) *
               C33779 +
           ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
              C50719 * C1115 -
          ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
           ((C8315 + C8316) * C50661 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50912) *
               C33779) *
              C50719 * C1116 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50912 +
            (C8317 + C8318) * C50661) *
               C33779 +
           ((C15931 + C15932) * C50912 + (C13822 + C13823) * C50661) * C50880) *
              C50719 * C1117 -
          (((C8058 * C4237 - C8059 * C4235 - C8058 * C4238 + C50852 * C4241 +
             C8056 * C3315 - C8057 * C3311 - C8056 * C3316 + C50940 * C3320) *
                C50661 +
            (C8058 * C4239 - C8059 * C4236 - C8058 * C4240 + C50852 * C4242 +
             C8056 * C3313 - C8057 * C3310 - C8056 * C3314 + C50940 * C3319) *
                C50912) *
               C50880 +
           ((C8058 * C2533 - C8059 * C2529 - C8058 * C2534 + C50852 * C2538 +
             C8056 * C1128 - C8057 * C1122 - C8056 * C1129 + C50940 * C1134) *
                C50661 +
            (C8058 * C2531 - C8059 * C2528 - C8058 * C2532 + C50852 * C2537 +
             C8056 * C1130 - C8057 * C1123 - C8056 * C1131 + C50940 * C1135) *
                C50912) *
               C33779) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50719 * C1044 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C50719 * C50755) *
              C1046 +
          ((((C8316 + C8315) * C50912 + (C8314 + C8313) * C50661) * C33779 +
            (C14719 * C50912 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C50755 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C50719 * C1044) *
              C1047 +
          (((C8117 * C50912 + (C8114 + C8113) * C50661) * C33779 +
            (C14452 * C50912 + (C8843 + C8844) * C50661) * C50880) *
               C50719 * C1044 -
           (((C8058 * C1585 - C8059 * C1581 - C8058 * C1586 + C50852 * C1593 +
              C8056 * C916 - C8057 * C908 - C8056 * C917 + C50940 * C923) *
                 C50661 +
             (C9066 + C9065) * C50912) *
                C50880 +
            ((C8683 + C8682) * C50661 + C8669 * C50912) * C33779) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C465 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C466 +
           (((C14061 + C14060) * C50912 + C14037 * C50661) * C33779 +
            ((C16463 + C16464) * C50912 + (C14062 + C14063) * C50661) *
                C50880) *
               C467) *
              C1044 +
          ((((C14737 + C14738) * C50912 + C14719 * C50661) * C33779 +
            ((C15271 + C15272) * C50912 + (C14739 + C14740) * C50661) *
                C50880) *
               C466 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C465 -
           (((C8058 * C4637 - C8059 * C4633 - C8058 * C4638 + C50852 * C4645 +
              C8056 * C4639 - C8057 * C4634 - C8056 * C4640 + C50940 * C4646) *
                 C50661 +
             (C8058 * C4641 - C8059 * C4635 - C8058 * C4642 + C50852 * C4647 +
              C8056 * C4643 - C8057 * C4636 - C8056 * C4644 + C50940 * C4648) *
                 C50912) *
                C50880 +
            ((C14740 + C14739) * C50661 + (C15272 + C15271) * C50912) *
                C33779) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
               C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                  C50912 +
              (C8109 + C8110) * C50661) *
                 C33779 +
             ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
                C50928 -
            ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
             (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
                C50783) *
               C1044 +
           ((((C14737 + C14738) * C50912 + C14719 * C50661) * C33779 +
             ((C15271 + C15272) * C50912 + (C14739 + C14740) * C50661) *
                 C50880) *
                C50783 -
            ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
             ((C8315 + C8316) * C50661 +
              (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
               C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                  C50912) *
                 C33779) *
                C50928) *
               C50755) *
              C50919 +
          ((((C14026 * C50912 + C14452 * C50661) * C33779 +
             (C14037 * C50912 + (C8521 + C8522) * C50661) * C50880) *
                C50783 -
            ((C8830 * C50661 + C14036 * C50912) * C50880 +
             ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
                C50928) *
               C1044 +
           ((((C8316 + C8315) * C50912 + (C8314 + C8313) * C50661) * C33779 +
             (C14719 * C50912 + (C9065 + C9066) * C50661) * C50880) *
                C50928 -
            (((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
               C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                  C50661 +
              (C14740 + C14739) * C50912) *
                 C50880 +
             ((C9066 + C9065) * C50661 + C14728 * C50912) * C33779) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50719 * C1044 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C50719 * C50755) *
              C1046 +
          ((((C8316 + C8315) * C50912 + (C8314 + C8313) * C50661) * C33779 +
            (C14719 * C50912 + (C9065 + C9066) * C50661) * C50880) *
               C50719 * C50755 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C50719 * C1044) *
              C1047 +
          (((C8117 * C50912 + (C8114 + C8113) * C50661) * C33779 +
            (C14452 * C50912 + (C8843 + C8844) * C50661) * C50880) *
               C50719 * C1044 -
           (((C8058 * C1585 - C8059 * C1581 - C8058 * C1586 + C50852 * C1593 +
              C8056 * C916 - C8057 * C908 - C8056 * C917 + C50940 * C923) *
                 C50661 +
             (C9066 + C9065) * C50912) *
                C50880 +
            ((C8683 + C8682) * C50661 + C8669 * C50912) * C33779) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50912 +
            (C8109 + C8110) * C50661) *
               C33779 +
           ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
              C50719 * C1115 -
          ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
           ((C8315 + C8316) * C50661 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50912) *
               C33779) *
              C50719 * C1116 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50912 +
            (C8317 + C8318) * C50661) *
               C33779 +
           ((C15931 + C15932) * C50912 + (C13822 + C13823) * C50661) * C50880) *
              C50719 * C1117 -
          (((C8058 * C4237 - C8059 * C4235 - C8058 * C4238 + C50852 * C4241 +
             C8056 * C3315 - C8057 * C3311 - C8056 * C3316 + C50940 * C3320) *
                C50661 +
            (C8058 * C4239 - C8059 * C4236 - C8058 * C4240 + C50852 * C4242 +
             C8056 * C3313 - C8057 * C3310 - C8056 * C3314 + C50940 * C3319) *
                C50912) *
               C50880 +
           ((C8058 * C2533 - C8059 * C2529 - C8058 * C2534 + C50852 * C2538 +
             C8056 * C1128 - C8057 * C1122 - C8056 * C1129 + C50940 * C1134) *
                C50661 +
            (C8058 * C2531 - C8059 * C2528 - C8058 * C2532 + C50852 * C2537 +
             C8056 * C1130 - C8057 * C1123 - C8056 * C1131 + C50940 * C1135) *
                C50912) *
               C33779) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
               C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                  C50912 +
              (C8109 + C8110) * C50661) *
                 C33779 +
             ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
                C1695 -
            ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
             (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
                C50783) *
               C50927 +
           ((((C14737 + C14738) * C50912 + C14719 * C50661) * C33779 +
             ((C15271 + C15272) * C50912 + (C14739 + C14740) * C50661) *
                 C50880) *
                C50783 -
            ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
             ((C8315 + C8316) * C50661 +
              (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
               C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                  C50912) *
                 C33779) *
                C1695) *
               C50755) *
              C50919 +
          ((((C14026 * C50912 + C14452 * C50661) * C33779 +
             (C14037 * C50912 + (C8521 + C8522) * C50661) * C50880) *
                C50783 -
            ((C8830 * C50661 + C14036 * C50912) * C50880 +
             ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
                C1695) *
               C50927 +
           ((((C8316 + C8315) * C50912 + (C8314 + C8313) * C50661) * C33779 +
             (C14719 * C50912 + (C9065 + C9066) * C50661) * C50880) *
                C1695 -
            (((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
               C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                  C50661 +
              (C14740 + C14739) * C50912) *
                 C50880 +
             ((C9066 + C9065) * C50661 + C14728 * C50912) * C33779) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50974 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C50975 +
           (((C14061 + C14060) * C50912 + C14037 * C50661) * C33779 +
            ((C16463 + C16464) * C50912 + (C14062 + C14063) * C50661) *
                C50880) *
               C2111) *
              C50927 +
          ((((C14737 + C14738) * C50912 + C14719 * C50661) * C33779 +
            ((C15271 + C15272) * C50912 + (C14739 + C14740) * C50661) *
                C50880) *
               C50975 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C50974 -
           (((C8058 * C4637 - C8059 * C4633 - C8058 * C4638 + C50852 * C4645 +
              C8056 * C4639 - C8057 * C4634 - C8056 * C4640 + C50940 * C4646) *
                 C50661 +
             (C8058 * C4641 - C8059 * C4635 - C8058 * C4642 + C50852 * C4647 +
              C8056 * C4643 - C8057 * C4636 - C8056 * C4644 + C50940 * C4648) *
                 C50912) *
                C50880 +
            ((C14740 + C14739) * C50661 + (C15272 + C15271) * C50912) *
                C33779) *
               C2111) *
              C50755) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C1695 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C50783) *
              C280 +
          ((((C14737 + C14738) * C50912 + C14719 * C50661) * C33779 +
            ((C15271 + C15272) * C50912 + (C14739 + C14740) * C50661) *
                C50880) *
               C50783 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C1695) *
              C281 +
          ((((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C50912 +
             (C8317 + C8318) * C50661) *
                C33779 +
            ((C15931 + C15932) * C50912 + (C13822 + C13823) * C50661) *
                C50880) *
               C1695 -
           (((C8058 * C3743 - C8059 * C3741 - C8058 * C3744 + C50852 * C3747 +
              C8056 * C2733 - C8057 * C2729 - C8056 * C2734 + C50940 * C2738) *
                 C50661 +
             (C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748 +
              C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737) *
                 C50912) *
                C50880 +
            ((C13823 + C13822) * C50661 + (C15932 + C15931) * C50912) *
                C33779) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C1695 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C50783) *
              C50703 * C1046 +
          (((C14026 * C50912 + C14452 * C50661) * C33779 +
            (C14037 * C50912 + (C8521 + C8522) * C50661) * C50880) *
               C50783 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C1695) *
              C50703 * C1047 +
          (((C8117 * C50912 + (C8114 + C8113) * C50661) * C33779 +
            (C14452 * C50912 + (C8843 + C8844) * C50661) * C50880) *
               C1695 -
           (((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
              C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
                 C50661 +
             (C8522 + C8521) * C50912) *
                C50880 +
            ((C8844 + C8843) * C50661 + C8830 * C50912) * C33779) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50912 +
            (C8109 + C8110) * C50661) *
               C33779 +
           ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
              C1861 -
          ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
           (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
              C1862 +
          (((C14061 + C14060) * C50912 + C14037 * C50661) * C33779 +
           ((C16463 + C16464) * C50912 + (C14062 + C14063) * C50661) * C50880) *
              C1863 -
          (((C8058 * C6539 - C8059 * C6537 - C8058 * C6540 + C50852 * C6543 +
             C8056 * C5554 - C8057 * C5550 - C8056 * C5555 + C50940 * C5559) *
                C50661 +
            (C8058 * C6541 - C8059 * C6538 - C8058 * C6542 + C50852 * C6544 +
             C8056 * C5552 - C8057 * C5549 - C8056 * C5553 + C50940 * C5558) *
                C50912) *
               C50880 +
           ((C14063 + C14062) * C50661 + (C16464 + C16463) * C50912) * C33779) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C50974 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C50975 +
           (((C14061 + C14060) * C50912 + C14037 * C50661) * C33779 +
            ((C16463 + C16464) * C50912 + (C14062 + C14063) * C50661) *
                C50880) *
               C2111) *
              C50703 * C50919 +
          (((C14026 * C50912 + C14452 * C50661) * C33779 +
            (C14037 * C50912 + (C8521 + C8522) * C50661) * C50880) *
               C50975 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C50974 -
           (((C8058 * C6115 - C8059 * C6114 - C8058 * C6116 + C50852 * C6117 +
              C8056 * C1871 - C8057 * C1866 - C8056 * C1872 + C50940 * C1878) *
                 C50661 +
             (C14063 + C14062) * C50912) *
                C50880 +
            ((C8522 + C8521) * C50661 + C14027 * C50912) * C33779) *
               C2111) *
              C50703 * C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C1695 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C50783) *
              C50703 * C1046 +
          (((C14026 * C50912 + C14452 * C50661) * C33779 +
            (C14037 * C50912 + (C8521 + C8522) * C50661) * C50880) *
               C50783 -
           ((C8830 * C50661 + C14036 * C50912) * C50880 +
            ((C8112 + C8111) * C50661 + (C8110 + C8109) * C50912) * C33779) *
               C1695) *
              C50703 * C1047 +
          (((C8117 * C50912 + (C8114 + C8113) * C50661) * C33779 +
            (C14452 * C50912 + (C8843 + C8844) * C50661) * C50880) *
               C1695 -
           (((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
              C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
                 C50661 +
             (C8522 + C8521) * C50912) *
                C50880 +
            ((C8844 + C8843) * C50661 + C8830 * C50912) * C33779) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50912 +
             (C8109 + C8110) * C50661) *
                C33779 +
            ((C14058 + C14059) * C50912 + C14026 * C50661) * C50880) *
               C1695 -
           ((C14027 * C50661 + (C14060 + C14061) * C50912) * C50880 +
            (C14036 * C50661 + (C14059 + C14058) * C50912) * C33779) *
               C50783) *
              C280 +
          ((((C14737 + C14738) * C50912 + C14719 * C50661) * C33779 +
            ((C15271 + C15272) * C50912 + (C14739 + C14740) * C50661) *
                C50880) *
               C50783 -
           ((C14728 * C50661 + (C14738 + C14737) * C50912) * C50880 +
            ((C8315 + C8316) * C50661 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50912) *
                C33779) *
               C1695) *
              C281 +
          ((((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
              C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                 C50912 +
             (C8317 + C8318) * C50661) *
                C33779 +
            ((C15931 + C15932) * C50912 + (C13822 + C13823) * C50661) *
                C50880) *
               C1695 -
           (((C8058 * C3743 - C8059 * C3741 - C8058 * C3744 + C50852 * C3747 +
              C8056 * C2733 - C8057 * C2729 - C8056 * C2734 + C50940 * C2738) *
                 C50661 +
             (C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748 +
              C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737) *
                 C50912) *
                C50880 +
            ((C13823 + C13822) * C50661 + (C15932 + C15931) * C50912) *
                C33779) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C50719 * C50927 -
           ((C15272 + C15271) * C50656 * C44502 +
            (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C50719 * C50755) *
              C50970 +
          (((C8316 + C8315) * C50656 * C50978 + C14719 * C50656 * C50979 +
            (C14739 + C14740) * C50656 * C44502) *
               C50719 * C50755 -
           (C47461 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C50719 * C50927) *
              C50971 +
          ((C8117 * C50656 * C50978 + C14452 * C50656 * C50979 +
            (C8521 + C8522) * C50656 * C44502) *
               C50719 * C50927 -
           ((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
             C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                C50656 * C44502 +
            (C9066 + C9065) * C50656 * C50979 + C8669 * C50656 * C50978) *
               C50719 * C50755) *
              C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50656 * C50978 +
             (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
                C50928 -
            ((C16464 + C16463) * C50656 * C44502 +
             (C14060 + C14061) * C50656 * C50979 +
             (C14059 + C14058) * C50656 * C50978) *
                C50783) *
               C50927 +
           (((C14737 + C14738) * C50656 * C50978 +
             (C15271 + C15272) * C50656 * C50979 +
             (C8056 * C4643 - C8057 * C4636 - C8056 * C4644 + C50940 * C4648 +
              C8058 * C4641 - C8059 * C4635 - C8058 * C4642 + C50852 * C4647) *
                 C50656 * C44502) *
                C50783 -
            ((C15272 + C15271) * C50656 * C44502 +
             (C14738 + C14737) * C50656 * C50979 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50656 * C50978) *
                C50928) *
               C50755) *
              C283 +
          (((C14026 * C50656 * C50978 + C14037 * C50656 * C50979 +
             (C14062 + C14063) * C50656 * C44502) *
                C50783 -
            (C47461 * C44502 + C14036 * C50656 * C50979 +
             (C8110 + C8109) * C50656 * C50978) *
                C50928) *
               C50927 +
           (((C8316 + C8315) * C50656 * C50978 + C14719 * C50656 * C50979 +
             (C14739 + C14740) * C50656 * C44502) *
                C50928 -
            ((C8058 * C4637 - C8059 * C4633 - C8058 * C4638 + C50852 * C4645 +
              C8056 * C4639 - C8057 * C4634 - C8056 * C4640 + C50940 * C4646) *
                 C50656 * C44502 +
             (C14740 + C14739) * C50656 * C50979 + C14728 * C50656 * C50978) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 +
            (C14061 + C14060) * C50656 * C44502) *
               C50719 * C280 -
           ((C15272 + C15271) * C50656 * C44502 +
            (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C50719 * C281 +
           ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50656 * C50978 +
            (C15931 + C15932) * C50656 * C50979 +
            (C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737 +
             C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748) *
                C50656 * C44502) *
               C50719 * C282) *
              C283 +
          (((C8316 + C8315) * C50656 * C50978 + C14719 * C50656 * C50979 +
            (C14739 + C14740) * C50656 * C44502) *
               C50719 * C281 -
           (C14027 * C50656 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C50719 * C280 -
           ((C8058 * C3743 - C8059 * C3741 - C8058 * C3744 + C50852 * C3747 +
             C8056 * C2733 - C8057 * C2729 - C8056 * C2734 + C50940 * C2738) *
                C50656 * C44502 +
            (C13823 + C13822) * C50656 * C50979 +
            (C8318 + C8317) * C50656 * C50978) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50656 * C50978 +
           (C14058 + C14059) * C50656 * C50979 +
           (C14061 + C14060) * C50656 * C44502) *
              C50719 * C50703 * C113 -
          (C14027 * C50656 * C44502 + C14036 * C50656 * C50979 +
           (C8110 + C8109) * C50656 * C50978) *
              C50719 * C50703 * C114 +
          (C8117 * C50656 * C50978 + C14452 * C50656 * C50979 +
           (C8521 + C8522) * C50656 * C44502) *
              C50719 * C50703 * C115 -
          ((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
            C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
               C50656 * C44502 +
           (C8844 + C8843) * C50656 * C50979 + C8118 * C50656 * C50978) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C465 -
           ((C16464 + C16463) * C50656 * C44502 +
            (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C466 +
           (C47462 * C50978 + (C16463 + C16464) * C50656 * C50979 +
            (C8056 * C5552 - C8057 * C5549 - C8056 * C5553 + C50940 * C5558 +
             C8058 * C6541 - C8059 * C6538 - C8058 * C6542 + C50852 * C6544) *
                C50656 * C44502) *
               C467) *
              C50703 * C283 +
          ((C14026 * C50656 * C50978 + C14037 * C50656 * C50979 +
            (C14062 + C14063) * C50656 * C44502) *
               C466 -
           (C47461 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C465 -
           ((C8058 * C6539 - C8059 * C6537 - C8058 * C6540 + C50852 * C6543 +
             C8056 * C5554 - C8057 * C5550 - C8056 * C5555 + C50940 * C5559) *
                C50656 * C44502 +
            (C14063 + C14062) * C50656 * C50979 + C47461 * C50978) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C50928 -
           ((C16464 + C16463) * C50656 * C44502 +
            (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C50783) *
              C50703 * C50970 +
          ((C14026 * C50656 * C50978 + C14037 * C50656 * C50979 +
            (C14062 + C14063) * C50656 * C44502) *
               C50783 -
           (C47461 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C50928) *
              C50703 * C50971 +
          ((C8117 * C50656 * C50978 + C14452 * C50656 * C50979 +
            (C8521 + C8522) * C50656 * C44502) *
               C50928 -
           ((C8058 * C6115 - C8059 * C6114 - C8058 * C6116 + C50852 * C6117 +
             C8056 * C1871 - C8057 * C1866 - C8056 * C1872 + C50940 * C1878) *
                C50656 * C44502 +
            (C8522 + C8521) * C50656 * C50979 + C8830 * C50656 * C50978) *
               C50783) *
              C50703 * C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50656 * C50978 +
           (C14058 + C14059) * C50656 * C50979 +
           (C14061 + C14060) * C50656 * C44502) *
              C50719 * C50703 * C113 -
          (C14027 * C50656 * C44502 + C14036 * C50656 * C50979 +
           (C8110 + C8109) * C50656 * C50978) *
              C50719 * C50703 * C114 +
          (C8117 * C50656 * C50978 + C14452 * C50656 * C50979 +
           (C8521 + C8522) * C50656 * C44502) *
              C50719 * C50703 * C115 -
          ((C8058 * C1238 - C8059 * C1234 - C8058 * C1239 + C50852 * C1246 +
            C8056 * C492 - C8057 * C475 - C8056 * C493 + C50940 * C505) *
               C50656 * C44502 +
           (C8844 + C8843) * C50656 * C50979 + C8118 * C50656 * C50978) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 +
            (C14061 + C14060) * C50656 * C44502) *
               C50719 * C280 -
           ((C15272 + C15271) * C50656 * C44502 +
            (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C50719 * C281 +
           ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50656 * C50978 +
            (C15931 + C15932) * C50656 * C50979 +
            (C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737 +
             C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748) *
                C50656 * C44502) *
               C50719 * C282) *
              C283 +
          (((C8316 + C8315) * C50656 * C50978 + C14719 * C50656 * C50979 +
            (C14739 + C14740) * C50656 * C44502) *
               C50719 * C281 -
           (C14027 * C50656 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C50719 * C280 -
           ((C8058 * C3743 - C8059 * C3741 - C8058 * C3744 + C50852 * C3747 +
             C8056 * C2733 - C8057 * C2729 - C8056 * C2734 + C50940 * C2738) *
                C50656 * C44502 +
            (C13823 + C13822) * C50656 * C50979 +
            (C8318 + C8317) * C50656 * C50978) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C50719 * C50972 -
           (C48350 * C44502 + (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C50719 * C50973 +
           ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50656 * C50978 +
            (C15931 + C15932) * C50656 * C50979 +
            (C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737 +
             C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748) *
                C50656 * C44502) *
               C50719 * C1350) *
              C50919 +
          (((C8316 + C8315) * C50656 * C50978 + C14719 * C50656 * C50979 +
            (C14739 + C14740) * C50656 * C44502) *
               C50719 * C50973 -
           (C47461 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C50719 * C50972 -
           ((C8058 * C3743 - C8059 * C3741 - C8058 * C3744 + C50852 * C3747 +
             C8056 * C2733 - C8057 * C2729 - C8056 * C2734 + C50940 * C2738) *
                C50656 * C44502 +
            (C13823 + C13822) * C50656 * C50979 +
            (C8318 + C8317) * C50656 * C50978) *
               C50719 * C1350) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C50928 -
           ((C16464 + C16463) * C50656 * C44502 +
            (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C50783) *
              C50972 +
          (((C14737 + C14738) * C50656 * C50978 +
            (C15271 + C15272) * C50656 * C50979 +
            (C48353 + C48354) * C50656 * C44502) *
               C50783 -
           (C48350 * C44502 + (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C50928) *
              C50973 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50656 * C50978 +
            (C15931 + C15932) * C50656 * C50979 +
            (C48853 + C48854) * C50656 * C44502) *
               C50928 -
           ((C8058 * C21439 - C8059 * C21438 - C8058 * C21440 +
             C50852 * C21441 + C8056 * C4641 - C8057 * C4635 - C8056 * C4642 +
             C50940 * C4647) *
                C50656 * C44502 +
            (C48854 + C48853) * C50656 * C50979 +
            (C15932 + C15931) * C50656 * C50978) *
               C50783) *
              C1350) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50656 * C50978 +
           (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
              C50719 * C1115 -
          ((C15272 + C15271) * C50656 * C44502 +
           (C14738 + C14737) * C50656 * C50979 +
           (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
            C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
               C50656 * C50978) *
              C50719 * C1116 +
          ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
            C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
               C50656 * C50978 +
           (C15931 + C15932) * C50656 * C50979 +
           (C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737 +
            C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748) *
               C50656 * C44502) *
              C50719 * C1117 -
          ((C8058 * C20843 - C8059 * C20842 - C8058 * C20844 + C50852 * C20845 +
            C8056 * C3745 - C8057 * C3742 - C8056 * C3746 + C50940 * C3748) *
               C50656 * C44502 +
           (C8058 * C4239 - C8059 * C4236 - C8058 * C4240 + C50852 * C4242 +
            C8056 * C3313 - C8057 * C3310 - C8056 * C3314 + C50940 * C3319) *
               C50656 * C50979 +
           (C8058 * C2531 - C8059 * C2528 - C8058 * C2532 + C50852 * C2537 +
            C8056 * C1130 - C8057 * C1123 - C8056 * C1131 + C50940 * C1135) *
               C50656 * C50978) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C50719 * C1044 -
           ((C15272 + C15271) * C50656 * C44502 +
            (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C50719 * C50755) *
              C1046 +
          (((C8316 + C8315) * C50656 * C50978 + C14719 * C50656 * C50979 +
            (C14739 + C14740) * C50656 * C44502) *
               C50719 * C50755 -
           (C47461 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C50719 * C1044) *
              C1047 +
          ((C8117 * C50656 * C50978 + C14452 * C50656 * C50979 +
            (C8521 + C8522) * C50656 * C44502) *
               C50719 * C1044 -
           ((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
             C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                C50656 * C44502 +
            (C9066 + C9065) * C50656 * C50979 + C8669 * C50656 * C50978) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C465 -
           ((C16464 + C16463) * C50656 * C44502 +
            (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C466 +
           (C47462 * C50978 + (C16463 + C16464) * C50656 * C50979 +
            (C8056 * C5552 - C8057 * C5549 - C8056 * C5553 + C50940 * C5558 +
             C8058 * C6541 - C8059 * C6538 - C8058 * C6542 + C50852 * C6544) *
                C50656 * C44502) *
               C467) *
              C1044 +
          (((C14737 + C14738) * C50656 * C50978 +
            (C15271 + C15272) * C50656 * C50979 +
            (C48353 + C48354) * C50656 * C44502) *
               C466 -
           (C48350 * C44502 + (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C465 -
           ((C8058 * C23137 - C8059 * C23136 - C8058 * C23138 +
             C50852 * C23139 + C8056 * C6541 - C8057 * C6538 - C8056 * C6542 +
             C50940 * C6544) *
                C50656 * C44502 +
            (C48354 + C48353) * C50656 * C50979 + C48350 * C50978) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50656 * C50978 +
             (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
                C50928 -
            ((C16464 + C16463) * C50656 * C44502 +
             (C14060 + C14061) * C50656 * C50979 +
             (C14059 + C14058) * C50656 * C50978) *
                C50783) *
               C1044 +
           (((C14737 + C14738) * C50656 * C50978 +
             (C15271 + C15272) * C50656 * C50979 +
             (C48353 + C48354) * C50656 * C44502) *
                C50783 -
            (C48350 * C44502 + (C14738 + C14737) * C50656 * C50979 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50656 * C50978) *
                C50928) *
               C50755) *
              C50919 +
          (((C14026 * C50656 * C50978 + C14037 * C50656 * C50979 +
             (C14062 + C14063) * C50656 * C44502) *
                C50783 -
            (C47461 * C44502 + C14036 * C50656 * C50979 +
             (C8110 + C8109) * C50656 * C50978) *
                C50928) *
               C1044 +
           (((C8316 + C8315) * C50656 * C50978 + C14719 * C50656 * C50979 +
             (C14739 + C14740) * C50656 * C44502) *
                C50928 -
            ((C8058 * C4637 - C8059 * C4633 - C8058 * C4638 + C50852 * C4645 +
              C8056 * C4639 - C8057 * C4634 - C8056 * C4640 + C50940 * C4646) *
                 C50656 * C44502 +
             (C14740 + C14739) * C50656 * C50979 + C14728 * C50656 * C50978) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C50719 * C1044 -
           ((C15272 + C15271) * C50656 * C44502 +
            (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C50719 * C50755) *
              C1046 +
          (((C8316 + C8315) * C50656 * C50978 + C14719 * C50656 * C50979 +
            (C14739 + C14740) * C50656 * C44502) *
               C50719 * C50755 -
           (C47461 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C50719 * C1044) *
              C1047 +
          ((C8117 * C50656 * C50978 + C14452 * C50656 * C50979 +
            (C8521 + C8522) * C50656 * C44502) *
               C50719 * C1044 -
           ((C8058 * C2735 - C8059 * C2730 - C8058 * C2736 + C50852 * C2739 +
             C8056 * C1240 - C8057 * C1235 - C8056 * C1241 + C50940 * C1247) *
                C50656 * C44502 +
            (C9066 + C9065) * C50656 * C50979 + C8669 * C50656 * C50978) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50656 * C50978 +
           (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
              C50719 * C1115 -
          ((C15272 + C15271) * C50656 * C44502 +
           (C14738 + C14737) * C50656 * C50979 +
           (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
            C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
               C50656 * C50978) *
              C50719 * C1116 +
          ((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
            C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
               C50656 * C50978 +
           (C15931 + C15932) * C50656 * C50979 +
           (C8056 * C2731 - C8057 * C2728 - C8056 * C2732 + C50940 * C2737 +
            C8058 * C3745 - C8059 * C3742 - C8058 * C3746 + C50852 * C3748) *
               C50656 * C44502) *
              C50719 * C1117 -
          ((C8058 * C20843 - C8059 * C20842 - C8058 * C20844 + C50852 * C20845 +
            C8056 * C3745 - C8057 * C3742 - C8056 * C3746 + C50940 * C3748) *
               C50656 * C44502 +
           (C8058 * C4239 - C8059 * C4236 - C8058 * C4240 + C50852 * C4242 +
            C8056 * C3313 - C8057 * C3310 - C8056 * C3314 + C50940 * C3319) *
               C50656 * C50979 +
           (C8058 * C2531 - C8059 * C2528 - C8058 * C2532 + C50852 * C2537 +
            C8056 * C1130 - C8057 * C1123 - C8056 * C1131 + C50940 * C1135) *
               C50656 * C50978) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
              C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                 C50656 * C50978 +
             (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
                C1695 -
            (C49254 * C44502 + (C14060 + C14061) * C50656 * C50979 +
             (C14059 + C14058) * C50656 * C50978) *
                C50783) *
               C50927 +
           (((C14737 + C14738) * C50656 * C50978 +
             (C15271 + C15272) * C50656 * C50979 +
             (C48353 + C48354) * C50656 * C44502) *
                C50783 -
            (C48350 * C44502 + (C14738 + C14737) * C50656 * C50979 +
             (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
              C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                 C50656 * C50978) *
                C1695) *
               C50755) *
              C50919 +
          (((C14026 * C50656 * C50978 + C14037 * C50656 * C50979 +
             (C14062 + C14063) * C50656 * C44502) *
                C50783 -
            (C47461 * C44502 + C14036 * C50656 * C50979 +
             (C8110 + C8109) * C50656 * C50978) *
                C1695) *
               C50927 +
           (((C8316 + C8315) * C50656 * C50978 + C14719 * C50656 * C50979 +
             (C14739 + C14740) * C50656 * C44502) *
                C1695 -
            ((C8058 * C4637 - C8059 * C4633 - C8058 * C4638 + C50852 * C4645 +
              C8056 * C4639 - C8057 * C4634 - C8056 * C4640 + C50940 * C4646) *
                 C50656 * C44502 +
             (C14740 + C14739) * C50656 * C50979 + C14728 * C50656 * C50978) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C50974 -
           (C49254 * C44502 + (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C50975 +
           (C47462 * C50978 + (C16463 + C16464) * C50656 * C50979 +
            (C49259 + C49260) * C50656 * C44502) *
               C2111) *
              C50927 +
          (((C14737 + C14738) * C50656 * C50978 +
            (C15271 + C15272) * C50656 * C50979 +
            (C48353 + C48354) * C50656 * C44502) *
               C50975 -
           (C48350 * C44502 + (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C50974 -
           ((C8058 * C23137 - C8059 * C23136 - C8058 * C23138 +
             C50852 * C23139 + C8056 * C6541 - C8057 * C6538 - C8056 * C6542 +
             C50940 * C6544) *
                C50656 * C44502 +
            (C48354 + C48353) * C50656 * C50979 + C48350 * C50978) *
               C2111) *
              C50755) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C1695 -
           ((C16464 + C16463) * C50656 * C44502 +
            (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C50783) *
              C280 +
          (((C14737 + C14738) * C50656 * C50978 +
            (C15271 + C15272) * C50656 * C50979 +
            (C48353 + C48354) * C50656 * C44502) *
               C50783 -
           (C48350 * C44502 + (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C1695) *
              C281 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50656 * C50978 +
            (C15931 + C15932) * C50656 * C50979 +
            (C48853 + C48854) * C50656 * C44502) *
               C1695 -
           ((C8058 * C21439 - C8059 * C21438 - C8058 * C21440 +
             C50852 * C21441 + C8056 * C4641 - C8057 * C4635 - C8056 * C4642 +
             C50940 * C4647) *
                C50656 * C44502 +
            (C48854 + C48853) * C50656 * C50979 +
            (C15932 + C15931) * C50656 * C50978) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C1695 -
           ((C16464 + C16463) * C50656 * C44502 +
            (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C50783) *
              C50703 * C1046 +
          ((C14026 * C50656 * C50978 + C14037 * C50656 * C50979 +
            (C14062 + C14063) * C50656 * C44502) *
               C50783 -
           (C47461 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C1695) *
              C50703 * C1047 +
          ((C8117 * C50656 * C50978 + C14452 * C50656 * C50979 +
            (C8521 + C8522) * C50656 * C44502) *
               C1695 -
           ((C8058 * C6115 - C8059 * C6114 - C8058 * C6116 + C50852 * C6117 +
             C8056 * C1871 - C8057 * C1866 - C8056 * C1872 + C50940 * C1878) *
                C50656 * C44502 +
            (C8522 + C8521) * C50656 * C50979 + C8830 * C50656 * C50978) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
            C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
               C50656 * C50978 +
           (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
              C1861 -
          (C49254 * C44502 + (C14060 + C14061) * C50656 * C50979 +
           (C14059 + C14058) * C50656 * C50978) *
              C1862 +
          (C47462 * C50978 + (C16463 + C16464) * C50656 * C50979 +
           (C49259 + C49260) * C50656 * C44502) *
              C1863 -
          ((C8058 * C24061 - C8059 * C24060 - C8058 * C24062 + C50852 * C24063 +
            C8056 * C7453 - C8057 * C7450 - C8056 * C7454 + C50940 * C7456) *
               C50656 * C44502 +
           (C49260 + C49259) * C50656 * C50979 + C49254 * C50978) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C50974 -
           (C49254 * C44502 + (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C50975 +
           (C47462 * C50978 + (C16463 + C16464) * C50656 * C50979 +
            (C49259 + C49260) * C50656 * C44502) *
               C2111) *
              C50703 * C50919 +
          ((C14026 * C50656 * C50978 + C14037 * C50656 * C50979 +
            (C14062 + C14063) * C50656 * C44502) *
               C50975 -
           (C47461 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C50974 -
           ((C8058 * C6539 - C8059 * C6537 - C8058 * C6540 + C50852 * C6543 +
             C8056 * C5554 - C8057 * C5550 - C8056 * C5555 + C50940 * C5559) *
                C50656 * C44502 +
            (C14063 + C14062) * C50656 * C50979 + C47461 * C50978) *
               C2111) *
              C50703 * C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C1695 -
           ((C16464 + C16463) * C50656 * C44502 +
            (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C50783) *
              C50703 * C1046 +
          ((C14026 * C50656 * C50978 + C14037 * C50656 * C50979 +
            (C14062 + C14063) * C50656 * C44502) *
               C50783 -
           (C47461 * C44502 + C14036 * C50656 * C50979 +
            (C8110 + C8109) * C50656 * C50978) *
               C1695) *
              C50703 * C1047 +
          ((C8117 * C50656 * C50978 + C14452 * C50656 * C50979 +
            (C8521 + C8522) * C50656 * C44502) *
               C1695 -
           ((C8058 * C6115 - C8059 * C6114 - C8058 * C6116 + C50852 * C6117 +
             C8056 * C1871 - C8057 * C1866 - C8056 * C1872 + C50940 * C1878) *
                C50656 * C44502 +
            (C8522 + C8521) * C50656 * C50979 + C8830 * C50656 * C50978) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C8056 * C126 - C8057 * C119 - C8056 * C127 + C50940 * C140 +
             C8058 * C301 - C8059 * C288 - C8058 * C302 + C50852 * C318) *
                C50656 * C50978 +
            (C14058 + C14059) * C50656 * C50979 + C47462 * C44502) *
               C1695 -
           ((C16464 + C16463) * C50656 * C44502 +
            (C14060 + C14061) * C50656 * C50979 +
            (C14059 + C14058) * C50656 * C50978) *
               C50783) *
              C280 +
          (((C14737 + C14738) * C50656 * C50978 +
            (C15271 + C15272) * C50656 * C50979 +
            (C48353 + C48354) * C50656 * C44502) *
               C50783 -
           (C48350 * C44502 + (C14738 + C14737) * C50656 * C50979 +
            (C8058 * C303 - C8059 * C289 - C8058 * C304 + C50852 * C319 +
             C8056 * C301 - C8057 * C288 - C8056 * C302 + C50940 * C318) *
                C50656 * C50978) *
               C1695) *
              C281 +
          (((C8056 * C303 - C8057 * C289 - C8056 * C304 + C50940 * C319 +
             C8058 * C1130 - C8059 * C1123 - C8058 * C1131 + C50852 * C1135) *
                C50656 * C50978 +
            (C15931 + C15932) * C50656 * C50979 +
            (C48853 + C48854) * C50656 * C44502) *
               C1695 -
           ((C8058 * C21439 - C8059 * C21438 - C8058 * C21440 +
             C50852 * C21441 + C8056 * C4641 - C8057 * C4635 - C8056 * C4642 +
             C50940 * C4647) *
                C50656 * C44502 +
            (C48854 + C48853) * C50656 * C50979 +
            (C15932 + C15931) * C50656 * C50978) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50719 * C50927 -
           ((C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920) *
                C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C50755) *
              C50970 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C50755 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C50927) *
              C50971 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C50719 * C50927 -
           ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
             C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
             C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                C50656 * C50880 +
            (C2949 + C2948 + C2947) * C50656 * C33779) *
               C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50719 * C50927 -
           ((C945 * C17212 + C944 * C17211 + C6143 * C17210) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C50755) *
              C50970 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C944 * C17210 + C945 * C17211 + C946 * C17212) * C50880) *
               C50719 * C50755 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C50927) *
              C50971 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C546 * C17210 + C545 * C17211 + C775 * C17212) * C50880) *
               C50719 * C50927 -
           (((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) *
                 C17212 +
             C946 * C17211 + C945 * C17210) *
                C50880 +
            (C664 * C17212 + C362 * C17211 + C363 * C17210) * C33779) *
               C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C50719 * C50927 -
           (C6554 * C50656 * C39164 + C6144 * C50656 * C39163 +
            C6143 * C50656 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C50719 * C50755) *
              C50970 +
          ((C364 * C50656 * C39161 + C944 * C50656 * C39162 +
            C5401 * C50656 * C39163 + C6145 * C50656 * C39164) *
               C50719 * C50755 -
           (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
            C178 * C50656 * C39161) *
               C50719 * C50927) *
              C50971 +
          ((C179 * C50656 * C39161 + C546 * C50656 * C39162 +
            C549 * C50656 * C39163 + C5610 * C50656 * C39164) *
               C50719 * C50927 -
           ((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                C50656 * C39164 +
            C5770 * C50656 * C39163 + C945 * C50656 * C39162 +
            C363 * C50656 * C39161) *
               C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C50656 * C33779 +
             (C36768 + C36769 + C36770) * C50656 * C50880) *
                C50928 -
            ((C36771 + C36772 + C36773) * C50656 * C50880 +
             (C36770 + C36769 + C36768) * C50656 * C33779) *
                C50783) *
               C50927 +
           (((C37278 + C37279 + C37280) * C50656 * C33779 +
             (C2313 * C1244 - C2314 * C1237 - C2313 * C1245 + C2308 * C1249 +
              C2315 * C2731 - C2316 * C2728 - C2315 * C2732 + C2309 * C2737 +
              C2317 * C3745 - C2318 * C3742 - C2317 * C3746 + C2310 * C3748) *
                 C50656 * C50880) *
                C50783 -
            ((C37280 + C37279 + C37278) * C50656 * C50880 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C50656 * C33779) *
                C50928) *
               C50755) *
              C283 +
          ((((C2779 + C2778 + C2777) * C50656 * C33779 +
             (C2780 + C2781 + C2782) * C50656 * C50880) *
                C50783 -
            ((C2777 + C2778 + C2779) * C50656 * C50880 +
             (C2376 + C2375 + C2374) * C50656 * C33779) *
                C50928) *
               C50927 +
           (((C2579 + C2578 + C2577) * C50656 * C33779 +
             (C3341 + C3342 + C3343) * C50656 * C50880) *
                C50928 -
            ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
              C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
              C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                 C50656 * C50880 +
             (C3343 + C3342 + C3341) * C50656 * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C17210 +
              C178 * C17211 + C179 * C17212) *
                 C33779 +
             (C34074 + C34075 + C34076) * C50880) *
                C50928 -
            ((C34077 + C34078 + C34079) * C50880 +
             (C34076 + C34075 + C34074) * C33779) *
                C50783) *
               C50927 +
           (((C34575 + C34576 + C34577) * C33779 +
             (C6144 * C17210 + C5401 * C17211 + C5770 * C17212) * C50880) *
                C50783 -
            ((C34577 + C34576 + C34575) * C50880 +
             (C363 * C17212 + C364 * C17211 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C17210) *
                 C33779) *
                C50928) *
               C50755) *
              C283 +
          ((((C34080 + C34081 + C34082) * C33779 +
             (C34083 + C34084 + C34085) * C50880) *
                C50783 -
            ((C34082 + C34081 + C34080) * C50880 +
             (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                C50928) *
               C50927 +
           (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
             (C34578 + C34579 + C34580) * C50880) *
                C50928 -
            (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                  C17212 +
              C5770 * C17211 + C5401 * C17210) *
                 C50880 +
             (C34580 + C34579 + C34578) * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50656 * C39161 +
             C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
                C50928 -
            (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
             C39362 * C39161) *
                C50783) *
               C50927 +
           ((C39699 * C39161 + C39700 * C39162 + C39701 * C39163 +
             (C117 * C6541 - C118 * C6538 - C117 * C6542 + C50800 * C6544) *
                 C50656 * C39164) *
                C50783 -
            (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50656 * C39161) *
                C50928) *
               C50755) *
              C283 +
          (((C39366 * C39161 + C39367 * C39162 + C39368 * C39163 +
             C39369 * C39164) *
                C50783 -
            (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
             C178 * C50656 * C39161) *
                C50928) *
               C50927 +
           ((C364 * C50656 * C39161 + C39702 * C39162 + C39703 * C39163 +
             C39704 * C39164) *
                C50928 -
            ((C117 * C6539 - C118 * C6537 - C117 * C6540 + C50800 * C6543) *
                 C50656 * C39164 +
             C39704 * C39163 + C39703 * C39162 + C39702 * C39161) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                    C17210 +
                C178 * C17211 + C179 * C17212) *
                   C33779 +
               (C5605 * C17210 + C547 * C17211 + C546 * C17212) * C50880) *
                  C50719 * C50703 * C113 -
              ((C545 * C17212 + C546 * C17211 + C547 * C17210) * C50880 +
               (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                  C50719 * C50703 * C114 +
              ((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
               (C546 * C17210 + C545 * C17211 + C775 * C17212) * C50880) *
                  C50719 * C50703 * C115 -
              (((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) *
                    C17212 +
                C775 * C17211 + C545 * C17210) *
                   C50880 +
               (C182 * C17212 + C181 * C17211 + C180 * C17210) * C33779) *
                  C50719 * C50703 * C116) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                     C17210 +
                 C178 * C17211 + C179 * C17212) *
                    C33779 +
                (C5605 * C17210 + C547 * C17211 + C546 * C17212) * C50880) *
                   C50719 * C280 -
               ((C945 * C17212 + C944 * C17211 + C6143 * C17210) * C50880 +
                (C363 * C17212 + C364 * C17211 +
                 (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                     C17210) *
                    C33779) *
                   C50719 * C281 +
               (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                     C17210 +
                 C365 * C17211 + C366 * C17212) *
                    C33779 +
                (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
                   C50719 * C282) *
                  C283 +
              (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
                (C944 * C17210 + C945 * C17211 + C946 * C17212) * C50880) *
                   C50719 * C281 -
               ((C545 * C17212 + C546 * C17211 + C547 * C17210) * C50880 +
                (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                   C50719 * C280 -
               (((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                     C17212 +
                 C11071 * C17211 + C5402 * C17210) *
                    C50880 +
                (C367 * C17212 + C366 * C17211 + C365 * C17210) * C33779) *
                   C50719 * C282) *
                  C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C465 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C466 +
           ((C34079 + C34078 + C34077) * C33779 +
            (C5608 * C17210 + C5607 * C17211 + C5610 * C17212) * C50880) *
               C467) *
              C50703 * C283 +
          (((C34080 + C34081 + C34082) * C33779 +
            (C34083 + C34084 + C34085) * C50880) *
               C466 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C465 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C17212 +
             C5610 * C17211 + C5607 * C17210) *
                C50880 +
            (C34085 + C34084 + C34083) * C33779) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501 +
            C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
            C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596) *
               C50656 * C50880) *
              C50719 * C50703 * C113 -
          ((C2777 + C2778 + C2779) * C50656 * C50880 +
           (C2376 + C2375 + C2374) * C50656 * C33779) *
              C50719 * C50703 * C114 +
          ((C2379 + C2378 + C2377) * C50656 * C33779 +
           (C3114 + C3115 + C3116) * C50656 * C50880) *
              C50719 * C50703 * C115 -
          ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
            C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
            C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
               C50656 * C50880 +
           (C2382 + C2381 + C2380) * C50656 * C33779) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596) *
                C50656 * C50880) *
               C50719 * C280 -
           ((C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920) *
                C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C281 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
                C50656 * C50880) *
               C50719 * C282) *
              C283 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C281 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C280 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50656 * C50880 +
            (C2582 + C2581 + C2580) * C50656 * C33779) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C465 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C466 +
           ((C36773 + C36772 + C36771) * C50656 * C33779 +
            (C2313 * C1875 - C2314 * C1868 - C2313 * C1876 + C2308 * C1880 +
             C2315 * C4643 - C2316 * C4636 - C2315 * C4644 + C2309 * C4648 +
             C2317 * C4641 - C2318 * C4635 - C2317 * C4642 + C2310 * C4647) *
                C50656 * C50880) *
               C467) *
              C50703 * C283 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C466 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C465 -
           ((C2317 * C4637 - C2318 * C4633 - C2317 * C4638 + C2310 * C4645 +
             C2315 * C4639 - C2316 * C4634 - C2315 * C4640 + C2309 * C4646 +
             C2313 * C1873 - C2314 * C1867 - C2313 * C1874 + C2308 * C1879) *
                C50656 * C50880 +
            (C2782 + C2781 + C2780) * C50656 * C33779) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
               C39161 +
           C5605 * C50656 * C39162 + C5606 * C50656 * C39163 +
           C5608 * C50656 * C39164) *
              C50719 * C50703 * C113 -
          (C5607 * C50656 * C39164 + C548 * C50656 * C39163 +
           C547 * C50656 * C39162 + C178 * C50656 * C39161) *
              C50719 * C50703 * C114 +
          (C179 * C50656 * C39161 + C546 * C50656 * C39162 +
           C549 * C50656 * C39163 + C5610 * C50656 * C39164) *
              C50719 * C50703 * C115 -
          ((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
               C50656 * C39164 +
           C550 * C50656 * C39163 + C545 * C50656 * C39162 +
           C180 * C50656 * C39161) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C5605 * C50656 * C39162 + C5606 * C50656 * C39163 +
            C5608 * C50656 * C39164) *
               C50719 * C280 -
           (C6554 * C50656 * C39164 + C6144 * C50656 * C39163 +
            C6143 * C50656 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C50719 * C281 +
           ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50656 *
                C39161 +
            C7056 * C50656 * C39162 + C7057 * C50656 * C39163 +
            (C117 * C4641 - C118 * C4635 - C117 * C4642 + C50800 * C4647) *
                C50656 * C39164) *
               C50719 * C282) *
              C283 +
          ((C364 * C50656 * C39161 + C944 * C50656 * C39162 +
            C5401 * C50656 * C39163 + C6145 * C50656 * C39164) *
               C50719 * C281 -
           (C5607 * C50656 * C39164 + C548 * C50656 * C39163 +
            C547 * C50656 * C39162 + C178 * C50656 * C39161) *
               C50719 * C280 -
           ((C117 * C4637 - C118 * C4633 - C117 * C4638 + C50800 * C4645) *
                C50656 * C39164 +
            C5403 * C50656 * C39163 + C5402 * C50656 * C39162 +
            C365 * C50656 * C39161) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C465 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C466 +
           (C39363 * C39161 + C39364 * C39162 + C39365 * C39163 +
            (C117 * C7453 - C118 * C7450 - C117 * C7454 + C50800 * C7456) *
                C50656 * C39164) *
               C467) *
              C50703 * C283 +
          ((C39366 * C39161 + C39367 * C39162 + C39368 * C39163 +
            C39369 * C39164) *
               C466 -
           (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
            C178 * C50656 * C39161) *
               C465 -
           ((C117 * C7451 - C118 * C7449 - C117 * C7452 + C50800 * C7455) *
                C50656 * C39164 +
            C39369 * C39163 + C39368 * C39162 + C39367 * C39161) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50928 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C50703 * C50970 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C50783 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50928) *
              C50703 * C50971 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C50928 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50656 * C50880 +
            (C3116 + C3115 + C3114) * C50656 * C33779) *
               C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50928 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C50703 * C50970 +
          (((C34080 + C34081 + C34082) * C33779 +
            (C34083 + C34084 + C34085) * C50880) *
               C50783 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50928) *
              C50703 * C50971 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C34378 + C34379 + C34380) * C50880) *
               C50928 -
           (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) *
                 C17212 +
             C550 * C17211 + C549 * C17210) *
                C50880 +
            (C34380 + C34379 + C34378) * C33779) *
               C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C50928 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C50783) *
              C50703 * C50970 +
          ((C39366 * C39161 + C39367 * C39162 + C39368 * C39163 +
            C39369 * C39164) *
               C50783 -
           (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
            C178 * C50656 * C39161) *
               C50928) *
              C50703 * C50971 +
          ((C179 * C50656 * C39161 + C39566 * C39162 + C39567 * C39163 +
            C39568 * C39164) *
               C50928 -
           ((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                C50656 * C39164 +
            C39568 * C39163 + C39567 * C39162 + C39566 * C39161) *
               C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C5605 * C17210 + C547 * C17211 + C546 * C17212) * C50880) *
               C50719 * C280 -
           ((C945 * C17212 + C944 * C17211 + C6143 * C17210) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C281 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
               C50719 * C282) *
              C283 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C944 * C17210 + C945 * C17211 + C946 * C17212) * C50880) *
               C50719 * C281 -
           ((C545 * C17212 + C546 * C17211 + C547 * C17210) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C280 -
           (((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                 C17212 +
             C11071 * C17211 + C5402 * C17210) *
                C50880 +
            (C367 * C17212 + C366 * C17211 + C365 * C17210) * C33779) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C17210 +
            C178 * C17211 + C179 * C17212) *
               C33779 +
           (C5605 * C17210 + C547 * C17211 + C546 * C17212) * C50880) *
              C50719 * C50703 * C113 -
          ((C545 * C17212 + C546 * C17211 + C547 * C17210) * C50880 +
           (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
              C50719 * C50703 * C114 +
          ((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
           (C546 * C17210 + C545 * C17211 + C775 * C17212) * C50880) *
              C50719 * C50703 * C115 -
          (((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C17212 +
            C775 * C17211 + C545 * C17210) *
               C50880 +
           (C182 * C17212 + C181 * C17211 + C180 * C17210) * C33779) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501 +
            C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
            C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596) *
               C50656 * C50880) *
              C50719 * C50703 * C113 -
          ((C2777 + C2778 + C2779) * C50656 * C50880 +
           (C2376 + C2375 + C2374) * C50656 * C33779) *
              C50719 * C50703 * C114 +
          ((C2379 + C2378 + C2377) * C50656 * C33779 +
           (C3114 + C3115 + C3116) * C50656 * C50880) *
              C50719 * C50703 * C115 -
          ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
            C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
            C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
               C50656 * C50880 +
           (C2382 + C2381 + C2380) * C50656 * C33779) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596) *
                C50656 * C50880) *
               C50719 * C280 -
           ((C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920) *
                C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C281 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
                C50656 * C50880) *
               C50719 * C282) *
              C283 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C281 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C280 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50656 * C50880 +
            (C2582 + C2581 + C2580) * C50656 * C33779) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
               C39161 +
           C5605 * C50656 * C39162 + C5606 * C50656 * C39163 +
           C5608 * C50656 * C39164) *
              C50719 * C50703 * C113 -
          (C5607 * C50656 * C39164 + C548 * C50656 * C39163 +
           C547 * C50656 * C39162 + C178 * C50656 * C39161) *
              C50719 * C50703 * C114 +
          (C179 * C50656 * C39161 + C546 * C50656 * C39162 +
           C549 * C50656 * C39163 + C5610 * C50656 * C39164) *
              C50719 * C50703 * C115 -
          ((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
               C50656 * C39164 +
           C550 * C50656 * C39163 + C545 * C50656 * C39162 +
           C180 * C50656 * C39161) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C5605 * C50656 * C39162 + C5606 * C50656 * C39163 +
            C5608 * C50656 * C39164) *
               C50719 * C280 -
           (C6554 * C50656 * C39164 + C6144 * C50656 * C39163 +
            C6143 * C50656 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C50719 * C281 +
           ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50656 *
                C39161 +
            C7056 * C50656 * C39162 + C7057 * C50656 * C39163 +
            (C117 * C4641 - C118 * C4635 - C117 * C4642 + C50800 * C4647) *
                C50656 * C39164) *
               C50719 * C282) *
              C283 +
          ((C364 * C50656 * C39161 + C944 * C50656 * C39162 +
            C5401 * C50656 * C39163 + C6145 * C50656 * C39164) *
               C50719 * C281 -
           (C5607 * C50656 * C39164 + C548 * C50656 * C39163 +
            C547 * C50656 * C39162 + C178 * C50656 * C39161) *
               C50719 * C280 -
           ((C117 * C4637 - C118 * C4633 - C117 * C4638 + C50800 * C4645) *
                C50656 * C39164 +
            C5403 * C50656 * C39163 + C5402 * C50656 * C39162 +
            C365 * C50656 * C39161) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50719 * C50972 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C50973 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
                C50656 * C50880) *
               C50719 * C1350) *
              C50919 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C50973 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C50972 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50656 * C50880 +
            (C2582 + C2581 + C2580) * C50656 * C33779) *
               C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50719 * C50972 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C50973 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
               C50719 * C1350) *
              C50919 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C34578 + C34579 + C34580) * C50880) *
               C50719 * C50973 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C50972 -
           (((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                 C17212 +
             C11071 * C17211 + C5402 * C17210) *
                C50880 +
            (C367 * C17212 + C366 * C17211 + C365 * C17210) * C33779) *
               C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C50719 * C50972 -
           (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C50719 * C50973 +
           ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50656 *
                C39161 +
            C7056 * C50656 * C39162 + C7057 * C50656 * C39163 +
            (C117 * C4641 - C118 * C4635 - C117 * C4642 + C50800 * C4647) *
                C50656 * C39164) *
               C50719 * C1350) *
              C50919 +
          ((C364 * C50656 * C39161 + C39702 * C39162 + C39703 * C39163 +
            C39704 * C39164) *
               C50719 * C50973 -
           (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
            C178 * C50656 * C39161) *
               C50719 * C50972 -
           ((C117 * C4637 - C118 * C4633 - C117 * C4638 + C50800 * C4645) *
                C50656 * C39164 +
            C5403 * C50656 * C39163 + C5402 * C50656 * C39162 +
            C365 * C50656 * C39161) *
               C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50928 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C50972 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C50783 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50928) *
              C50973 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C38196 + C38197 + C38198) * C50656 * C50880) *
               C50928 -
           ((C2317 * C20843 - C2318 * C20842 - C2317 * C20844 + C2310 * C20845 +
             C2315 * C3745 - C2316 * C3742 - C2315 * C3746 + C2309 * C3748 +
             C2313 * C2731 - C2314 * C2728 - C2313 * C2732 + C2308 * C2737) *
                C50656 * C50880 +
            (C38198 + C38197 + C38196) * C50656 * C33779) *
               C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50928 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C50972 +
          (((C34575 + C34576 + C34577) * C33779 +
            (C34971 + C34972 + C34973) * C50880) *
               C50783 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50928) *
              C50973 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C35460 + C35461 + C35462) * C50880) *
               C50928 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C17212 +
             C5403 * C17211 + C7057 * C17210) *
                C50880 +
            (C35462 + C35461 + C35460) * C33779) *
               C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C50928 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C50783) *
              C50972 +
          ((C39699 * C39161 + C39700 * C39162 + C39701 * C39163 +
            C39974 * C39164) *
               C50783 -
           (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C50928) *
              C50973 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50656 *
                C39161 +
            C40301 * C39162 + C40302 * C39163 + C40310 * C39164) *
               C50928 -
           ((C117 * C23137 - C118 * C23136 - C117 * C23138 + C50800 * C23139) *
                C50656 * C39164 +
            C40310 * C39163 + C40302 * C39162 + C40301 * C39161) *
               C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                     C17210 +
                 C178 * C17211 + C179 * C17212) *
                    C33779 +
                (C34074 + C34075 + C34076) * C50880) *
                   C50719 * C1044 -
               ((C34577 + C34576 + C34575) * C50880 +
                (C363 * C17212 + C364 * C17211 +
                 (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                     C17210) *
                    C33779) *
                   C50719 * C50755) *
                  C1046 +
              (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
                (C34578 + C34579 + C34580) * C50880) *
                   C50719 * C50755 -
               ((C34082 + C34081 + C34080) * C50880 +
                (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                   C50719 * C1044) *
                  C1047 +
              (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
                (C34378 + C34379 + C34380) * C50880) *
                   C50719 * C1044 -
               (((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) *
                     C17212 +
                 C946 * C17211 + C945 * C17210) *
                    C50880 +
                (C664 * C17212 + C362 * C17211 + C363 * C17210) * C33779) *
                   C50719 * C50755) *
                  C1048) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                    C17210 +
                C178 * C17211 + C179 * C17212) *
                   C33779 +
               (C34074 + C34075 + C34076) * C50880) *
                  C50719 * C1115 -
              ((C34577 + C34576 + C34575) * C50880 +
               (C363 * C17212 + C364 * C17211 +
                (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                    C17210) *
                   C33779) *
                  C50719 * C1116 +
              (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                    C17210 +
                C365 * C17211 + C366 * C17212) *
                   C33779 +
               (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
                  C50719 * C1117 -
              (((C117 * C3317 - C118 * C3312 - C117 * C3318 + C50800 * C3321) *
                    C17212 +
                (C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                    C17211 +
                (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                    C17210) *
                   C50880 +
               ((C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
                    C17212 +
                (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                    C17211 +
                (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                    C17210) *
                   C33779) *
                  C50719 * C1118) *
             C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C465 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C466 +
           ((C34079 + C34078 + C34077) * C33779 +
            (C5608 * C17210 + C5607 * C17211 + C5610 * C17212) * C50880) *
               C467) *
              C1044 +
          (((C34575 + C34576 + C34577) * C33779 +
            (C34971 + C34972 + C34973) * C50880) *
               C466 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C465 -
           (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                 C17212 +
             C6145 * C17211 + C6554 * C17210) *
                C50880 +
            (C34973 + C34972 + C34971) * C33779) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50719 * C1044 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C50755) *
              C1046 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C50755 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C1044) *
              C1047 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C50719 * C1044 -
           ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
             C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
             C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                C50656 * C50880 +
            (C2949 + C2948 + C2947) * C50656 * C33779) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C36768 + C36769 + C36770) * C50656 * C50880) *
              C50719 * C1115 -
          ((C37280 + C37279 + C37278) * C50656 * C50880 +
           (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
            C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
            C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
               C50656 * C33779) *
              C50719 * C1116 +
          ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
            C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
            C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
               C50656 * C33779 +
           (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
            C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
            C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
               C50656 * C50880) *
              C50719 * C1117 -
          ((C2317 * C21173 - C2318 * C21172 - C2317 * C21174 + C2310 * C21175 +
            C2315 * C4239 - C2316 * C4236 - C2315 * C4240 + C2309 * C4242 +
            C2313 * C3313 - C2314 * C3310 - C2313 * C3314 + C2308 * C3319) *
               C50656 * C50880 +
           (C2317 * C3591 - C2318 * C3588 - C2317 * C3592 + C2310 * C3594 +
            C2315 * C2531 - C2316 * C2528 - C2315 * C2532 + C2309 * C2537 +
            C2313 * C1130 - C2314 * C1123 - C2313 * C1131 + C2308 * C1135) *
               C50656 * C33779) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C465 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C466 +
           ((C36773 + C36772 + C36771) * C50656 * C33779 +
            (C2313 * C1875 - C2314 * C1868 - C2313 * C1876 + C2308 * C1880 +
             C2315 * C4643 - C2316 * C4636 - C2315 * C4644 + C2309 * C4648 +
             C2317 * C4641 - C2318 * C4635 - C2317 * C4642 + C2310 * C4647) *
                C50656 * C50880) *
               C467) *
              C1044 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C466 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C465 -
           ((C2317 * C21439 - C2318 * C21438 - C2317 * C21440 + C2310 * C21441 +
             C2315 * C4641 - C2316 * C4635 - C2315 * C4642 + C2309 * C4647 +
             C2313 * C4643 - C2314 * C4636 - C2313 * C4644 + C2308 * C4648) *
                C50656 * C50880 +
            (C37691 + C37690 + C37689) * C50656 * C33779) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C50719 * C1044 -
           (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C50719 * C50755) *
              C1046 +
          ((C364 * C50656 * C39161 + C39702 * C39162 + C39703 * C39163 +
            C39704 * C39164) *
               C50719 * C50755 -
           (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
            C178 * C50656 * C39161) *
               C50719 * C1044) *
              C1047 +
          ((C179 * C50656 * C39161 + C39566 * C39162 + C39567 * C39163 +
            C39568 * C39164) *
               C50719 * C1044 -
           ((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                C50656 * C39164 +
            C5770 * C50656 * C39163 + C945 * C50656 * C39162 +
            C363 * C50656 * C39161) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
               C39161 +
           C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
              C50719 * C1115 -
          (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
           (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
               C39161) *
              C50719 * C1116 +
          ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50656 *
               C39161 +
           C7056 * C50656 * C39162 + C7057 * C50656 * C39163 +
           (C117 * C4641 - C118 * C4635 - C117 * C4642 + C50800 * C4647) *
               C50656 * C39164) *
              C50719 * C1117 -
          ((C117 * C21439 - C118 * C21438 - C117 * C21440 + C50800 * C21441) *
               C50656 * C39164 +
           (C117 * C3745 - C118 * C3742 - C117 * C3746 + C50800 * C3748) *
               C50656 * C39163 +
           (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
               C50656 * C39162 +
           (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
               C50656 * C39161) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C465 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C466 +
           (C39363 * C39161 + C39364 * C39162 + C39365 * C39163 +
            (C117 * C7453 - C118 * C7450 - C117 * C7454 + C50800 * C7456) *
                C50656 * C39164) *
               C467) *
              C1044 +
          ((C39699 * C39161 + C39700 * C39162 + C39701 * C39163 +
            C39974 * C39164) *
               C466 -
           (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C465 -
           ((C117 * C24061 - C118 * C24060 - C117 * C24062 + C50800 * C24063) *
                C50656 * C39164 +
            C39974 * C39163 + C39701 * C39162 + C39700 * C39161) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C50656 * C33779 +
             (C36768 + C36769 + C36770) * C50656 * C50880) *
                C50928 -
            ((C36771 + C36772 + C36773) * C50656 * C50880 +
             (C36770 + C36769 + C36768) * C50656 * C33779) *
                C50783) *
               C1044 +
           (((C37278 + C37279 + C37280) * C50656 * C33779 +
             (C37689 + C37690 + C37691) * C50656 * C50880) *
                C50783 -
            ((C37280 + C37279 + C37278) * C50656 * C50880 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C50656 * C33779) *
                C50928) *
               C50755) *
              C50919 +
          ((((C2779 + C2778 + C2777) * C50656 * C33779 +
             (C2780 + C2781 + C2782) * C50656 * C50880) *
                C50783 -
            ((C2777 + C2778 + C2779) * C50656 * C50880 +
             (C2376 + C2375 + C2374) * C50656 * C33779) *
                C50928) *
               C1044 +
           (((C2579 + C2578 + C2577) * C50656 * C33779 +
             (C3341 + C3342 + C3343) * C50656 * C50880) *
                C50928 -
            ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
              C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
              C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                 C50656 * C50880 +
             (C3343 + C3342 + C3341) * C50656 * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C17210 +
              C178 * C17211 + C179 * C17212) *
                 C33779 +
             (C34074 + C34075 + C34076) * C50880) *
                C50928 -
            ((C34077 + C34078 + C34079) * C50880 +
             (C34076 + C34075 + C34074) * C33779) *
                C50783) *
               C1044 +
           (((C34575 + C34576 + C34577) * C33779 +
             (C34971 + C34972 + C34973) * C50880) *
                C50783 -
            ((C34577 + C34576 + C34575) * C50880 +
             (C363 * C17212 + C364 * C17211 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C17210) *
                 C33779) *
                C50928) *
               C50755) *
              C50919 +
          ((((C34080 + C34081 + C34082) * C33779 +
             (C34083 + C34084 + C34085) * C50880) *
                C50783 -
            ((C34082 + C34081 + C34080) * C50880 +
             (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                C50928) *
               C1044 +
           (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
             (C34578 + C34579 + C34580) * C50880) *
                C50928 -
            (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                  C17212 +
              C5770 * C17211 + C5401 * C17210) *
                 C50880 +
             (C34580 + C34579 + C34578) * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50656 * C39161 +
             C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
                C50928 -
            (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
             C39362 * C39161) *
                C50783) *
               C1044 +
           ((C39699 * C39161 + C39700 * C39162 + C39701 * C39163 +
             C39974 * C39164) *
                C50783 -
            (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50656 * C39161) *
                C50928) *
               C50755) *
              C50919 +
          (((C39366 * C39161 + C39367 * C39162 + C39368 * C39163 +
             C39369 * C39164) *
                C50783 -
            (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
             C178 * C50656 * C39161) *
                C50928) *
               C1044 +
           ((C364 * C50656 * C39161 + C39702 * C39162 + C39703 * C39163 +
             C39704 * C39164) *
                C50928 -
            ((C117 * C6539 - C118 * C6537 - C117 * C6540 + C50800 * C6543) *
                 C50656 * C39164 +
             C39704 * C39163 + C39703 * C39162 + C39702 * C39161) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C17210 +
            C178 * C17211 + C179 * C17212) *
               C33779 +
           (C34074 + C34075 + C34076) * C50880) *
              C50719 * C1115 -
          ((C34577 + C34576 + C34575) * C50880 +
           (C363 * C17212 + C364 * C17211 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                C17210) *
               C33779) *
              C50719 * C1116 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C17210 +
            C365 * C17211 + C366 * C17212) *
               C33779 +
           (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
              C50719 * C1117 -
          (((C117 * C3317 - C118 * C3312 - C117 * C3318 + C50800 * C3321) *
                C17212 +
            (C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                C17211 +
            (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                C17210) *
               C50880 +
           ((C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
                C17212 +
            (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                C17211 +
            (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                C17210) *
               C33779) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50719 * C1044 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C50755) *
              C1046 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C34578 + C34579 + C34580) * C50880) *
               C50719 * C50755 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C1044) *
              C1047 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C34378 + C34379 + C34380) * C50880) *
               C50719 * C1044 -
           (((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) *
                 C17212 +
             C946 * C17211 + C945 * C17210) *
                C50880 +
            (C664 * C17212 + C362 * C17211 + C363 * C17210) * C33779) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50719 * C1044 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C50755) *
              C1046 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C50755 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C1044) *
              C1047 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C50719 * C1044 -
           ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
             C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
             C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                C50656 * C50880 +
            (C2949 + C2948 + C2947) * C50656 * C33779) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C36768 + C36769 + C36770) * C50656 * C50880) *
              C50719 * C1115 -
          ((C37280 + C37279 + C37278) * C50656 * C50880 +
           (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
            C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
            C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
               C50656 * C33779) *
              C50719 * C1116 +
          ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
            C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
            C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
               C50656 * C33779 +
           (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
            C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
            C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
               C50656 * C50880) *
              C50719 * C1117 -
          ((C2317 * C21173 - C2318 * C21172 - C2317 * C21174 + C2310 * C21175 +
            C2315 * C4239 - C2316 * C4236 - C2315 * C4240 + C2309 * C4242 +
            C2313 * C3313 - C2314 * C3310 - C2313 * C3314 + C2308 * C3319) *
               C50656 * C50880 +
           (C2317 * C3591 - C2318 * C3588 - C2317 * C3592 + C2310 * C3594 +
            C2315 * C2531 - C2316 * C2528 - C2315 * C2532 + C2309 * C2537 +
            C2313 * C1130 - C2314 * C1123 - C2313 * C1131 + C2308 * C1135) *
               C50656 * C33779) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C50719 * C1044 -
           (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C50719 * C50755) *
              C1046 +
          ((C364 * C50656 * C39161 + C39702 * C39162 + C39703 * C39163 +
            C39704 * C39164) *
               C50719 * C50755 -
           (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
            C178 * C50656 * C39161) *
               C50719 * C1044) *
              C1047 +
          ((C179 * C50656 * C39161 + C39566 * C39162 + C39567 * C39163 +
            C39568 * C39164) *
               C50719 * C1044 -
           ((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                C50656 * C39164 +
            C5770 * C50656 * C39163 + C945 * C50656 * C39162 +
            C363 * C50656 * C39161) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
               C39161 +
           C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
              C50719 * C1115 -
          (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
           (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
               C39161) *
              C50719 * C1116 +
          ((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50656 *
               C39161 +
           C7056 * C50656 * C39162 + C7057 * C50656 * C39163 +
           (C117 * C4641 - C118 * C4635 - C117 * C4642 + C50800 * C4647) *
               C50656 * C39164) *
              C50719 * C1117 -
          ((C117 * C21439 - C118 * C21438 - C117 * C21440 + C50800 * C21441) *
               C50656 * C39164 +
           (C117 * C3745 - C118 * C3742 - C117 * C3746 + C50800 * C3748) *
               C50656 * C39163 +
           (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
               C50656 * C39162 +
           (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
               C50656 * C39161) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C50656 * C33779 +
             (C36768 + C36769 + C36770) * C50656 * C50880) *
                C1695 -
            ((C36771 + C36772 + C36773) * C50656 * C50880 +
             (C36770 + C36769 + C36768) * C50656 * C33779) *
                C50783) *
               C50927 +
           (((C37278 + C37279 + C37280) * C50656 * C33779 +
             (C37689 + C37690 + C37691) * C50656 * C50880) *
                C50783 -
            ((C37280 + C37279 + C37278) * C50656 * C50880 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C50656 * C33779) *
                C1695) *
               C50755) *
              C50919 +
          ((((C2779 + C2778 + C2777) * C50656 * C33779 +
             (C2780 + C2781 + C2782) * C50656 * C50880) *
                C50783 -
            ((C2777 + C2778 + C2779) * C50656 * C50880 +
             (C2376 + C2375 + C2374) * C50656 * C33779) *
                C1695) *
               C50927 +
           (((C2579 + C2578 + C2577) * C50656 * C33779 +
             (C3341 + C3342 + C3343) * C50656 * C50880) *
                C1695 -
            ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
              C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
              C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                 C50656 * C50880 +
             (C3343 + C3342 + C3341) * C50656 * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C17210 +
              C178 * C17211 + C179 * C17212) *
                 C33779 +
             (C34074 + C34075 + C34076) * C50880) *
                C1695 -
            ((C34077 + C34078 + C34079) * C50880 +
             (C34076 + C34075 + C34074) * C33779) *
                C50783) *
               C50927 +
           (((C34575 + C34576 + C34577) * C33779 +
             (C34971 + C34972 + C34973) * C50880) *
                C50783 -
            ((C34577 + C34576 + C34575) * C50880 +
             (C363 * C17212 + C364 * C17211 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C17210) *
                 C33779) *
                C1695) *
               C50755) *
              C50919 +
          ((((C34080 + C34081 + C34082) * C33779 +
             (C34083 + C34084 + C34085) * C50880) *
                C50783 -
            ((C34082 + C34081 + C34080) * C50880 +
             (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                C1695) *
               C50927 +
           (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
             (C34578 + C34579 + C34580) * C50880) *
                C1695 -
            (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                  C17212 +
              C5770 * C17211 + C5401 * C17210) *
                 C50880 +
             (C34580 + C34579 + C34578) * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50656 * C39161 +
             C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
                C1695 -
            (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
             C39362 * C39161) *
                C50783) *
               C50927 +
           ((C39699 * C39161 + C39700 * C39162 + C39701 * C39163 +
             C39974 * C39164) *
                C50783 -
            (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50656 * C39161) *
                C1695) *
               C50755) *
              C50919 +
          (((C39366 * C39161 + C39367 * C39162 + C39368 * C39163 +
             C39369 * C39164) *
                C50783 -
            (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
             C178 * C50656 * C39161) *
                C1695) *
               C50927 +
           ((C364 * C50656 * C39161 + C39702 * C39162 + C39703 * C39163 +
             C39704 * C39164) *
                C1695 -
            ((C117 * C6539 - C118 * C6537 - C117 * C6540 + C50800 * C6543) *
                 C50656 * C39164 +
             C39704 * C39163 + C39703 * C39162 + C39702 * C39161) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50974 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50975 +
           ((C36773 + C36772 + C36771) * C50656 * C33779 +
            (C38607 + C38608 + C38609) * C50656 * C50880) *
               C2111) *
              C50927 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C50975 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50974 -
           ((C2317 * C21439 - C2318 * C21438 - C2317 * C21440 + C2310 * C21441 +
             C2315 * C4641 - C2316 * C4635 - C2315 * C4642 + C2309 * C4647 +
             C2313 * C4643 - C2314 * C4636 - C2313 * C4644 + C2308 * C4648) *
                C50656 * C50880 +
            (C37691 + C37690 + C37689) * C50656 * C33779) *
               C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50974 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50975 +
           ((C34079 + C34078 + C34077) * C33779 +
            (C35853 + C35854 + C35855) * C50880) *
               C2111) *
              C50927 +
          (((C34575 + C34576 + C34577) * C33779 +
            (C34971 + C34972 + C34973) * C50880) *
               C50975 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50974 -
           (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                 C17212 +
             C6145 * C17211 + C6554 * C17210) *
                C50880 +
            (C34973 + C34972 + C34971) * C33779) *
               C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C50974 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C50975 +
           (C39363 * C39161 + C39364 * C39162 + C39365 * C39163 +
            C40584 * C39164) *
               C2111) *
              C50927 +
          ((C39699 * C39161 + C39700 * C39162 + C39701 * C39163 +
            C39974 * C39164) *
               C50975 -
           (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C50974 -
           ((C117 * C24061 - C118 * C24060 - C117 * C24062 + C50800 * C24063) *
                C50656 * C39164 +
            C39974 * C39163 + C39701 * C39162 + C39700 * C39161) *
               C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                     C17210 +
                 C178 * C17211 + C179 * C17212) *
                    C33779 +
                (C34074 + C34075 + C34076) * C50880) *
                   C1695 -
               ((C34077 + C34078 + C34079) * C50880 +
                (C34076 + C34075 + C34074) * C33779) *
                   C50783) *
                  C50703 * C1046 +
              (((C34080 + C34081 + C34082) * C33779 +
                (C34083 + C34084 + C34085) * C50880) *
                   C50783 -
               ((C34082 + C34081 + C34080) * C50880 +
                (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                   C1695) *
                  C50703 * C1047 +
              (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
                (C34378 + C34379 + C34380) * C50880) *
                   C1695 -
               (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) *
                     C17212 +
                 C550 * C17211 + C549 * C17210) *
                    C50880 +
                (C34380 + C34379 + C34378) * C33779) *
                   C50783) *
                  C50703 * C1048) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                     C17210 +
                 C178 * C17211 + C179 * C17212) *
                    C33779 +
                (C34074 + C34075 + C34076) * C50880) *
                   C1695 -
               ((C34077 + C34078 + C34079) * C50880 +
                (C34076 + C34075 + C34074) * C33779) *
                   C50783) *
                  C280 +
              (((C34575 + C34576 + C34577) * C33779 +
                (C34971 + C34972 + C34973) * C50880) *
                   C50783 -
               ((C34577 + C34576 + C34575) * C50880 +
                (C363 * C17212 + C364 * C17211 +
                 (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                     C17210) *
                    C33779) *
                   C1695) *
                  C281 +
              ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                     C17210 +
                 C365 * C17211 + C366 * C17212) *
                    C33779 +
                (C35460 + C35461 + C35462) * C50880) *
                   C1695 -
               (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                     C17212 +
                 C5403 * C17211 + C7057 * C17210) *
                    C50880 +
                (C35462 + C35461 + C35460) * C33779) *
                   C50783) *
                  C282) *
             C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C17210 +
            C178 * C17211 + C179 * C17212) *
               C33779 +
           (C34074 + C34075 + C34076) * C50880) *
              C1861 -
          ((C34077 + C34078 + C34079) * C50880 +
           (C34076 + C34075 + C34074) * C33779) *
              C1862 +
          ((C34079 + C34078 + C34077) * C33779 +
           (C35853 + C35854 + C35855) * C50880) *
              C1863 -
          (((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                C17212 +
            C5609 * C17211 + C7466 * C17210) *
               C50880 +
           (C35855 + C35854 + C35853) * C33779) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C1695 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C50703 * C1046 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C50783 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C1695) *
              C50703 * C1047 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C1695 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50656 * C50880 +
            (C3116 + C3115 + C3114) * C50656 * C33779) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C1695 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C280 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C50783 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C1695) *
              C281 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C38196 + C38197 + C38198) * C50656 * C50880) *
               C1695 -
           ((C2317 * C20843 - C2318 * C20842 - C2317 * C20844 + C2310 * C20845 +
             C2315 * C3745 - C2316 * C3742 - C2315 * C3746 + C2309 * C3748 +
             C2313 * C2731 - C2314 * C2728 - C2313 * C2732 + C2308 * C2737) *
                C50656 * C50880 +
            (C38198 + C38197 + C38196) * C50656 * C33779) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C36768 + C36769 + C36770) * C50656 * C50880) *
              C1861 -
          ((C36771 + C36772 + C36773) * C50656 * C50880 +
           (C36770 + C36769 + C36768) * C50656 * C33779) *
              C1862 +
          ((C36773 + C36772 + C36771) * C50656 * C33779 +
           (C38607 + C38608 + C38609) * C50656 * C50880) *
              C1863 -
          ((C2317 * C23137 - C2318 * C23136 - C2317 * C23138 + C2310 * C23139 +
            C2315 * C6541 - C2316 * C6538 - C2315 * C6542 + C2309 * C6544 +
            C2313 * C5552 - C2314 * C5549 - C2313 * C5553 + C2308 * C5558) *
               C50656 * C50880 +
           (C38609 + C38608 + C38607) * C50656 * C33779) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C1695 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C50783) *
              C50703 * C1046 +
          ((C39366 * C39161 + C39367 * C39162 + C39368 * C39163 +
            C39369 * C39164) *
               C50783 -
           (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
            C178 * C50656 * C39161) *
               C1695) *
              C50703 * C1047 +
          ((C179 * C50656 * C39161 + C39566 * C39162 + C39567 * C39163 +
            C39568 * C39164) *
               C1695 -
           ((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                C50656 * C39164 +
            C39568 * C39163 + C39567 * C39162 + C39566 * C39161) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C1695 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C50783) *
              C280 +
          ((C39699 * C39161 + C39700 * C39162 + C39701 * C39163 +
            C39974 * C39164) *
               C50783 -
           (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C1695) *
              C281 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50656 *
                C39161 +
            C40301 * C39162 + C40302 * C39163 + C40310 * C39164) *
               C1695 -
           ((C117 * C23137 - C118 * C23136 - C117 * C23138 + C50800 * C23139) *
                C50656 * C39164 +
            C40310 * C39163 + C40302 * C39162 + C40301 * C39161) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
               C39161 +
           C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
              C1861 -
          (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
           C39362 * C39161) *
              C1862 +
          (C39363 * C39161 + C39364 * C39162 + C39365 * C39163 +
           C40584 * C39164) *
              C1863 -
          ((C117 * C40573 - C118 * C40572 - C117 * C40574 + C50800 * C40575) *
               C50656 * C39164 +
           C40584 * C39163 + C39365 * C39162 + C39364 * C39161) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50974 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50975 +
           ((C36773 + C36772 + C36771) * C50656 * C33779 +
            (C38607 + C38608 + C38609) * C50656 * C50880) *
               C2111) *
              C50703 * C50919 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C50975 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50974 -
           ((C2317 * C4637 - C2318 * C4633 - C2317 * C4638 + C2310 * C4645 +
             C2315 * C4639 - C2316 * C4634 - C2315 * C4640 + C2309 * C4646 +
             C2313 * C1873 - C2314 * C1867 - C2313 * C1874 + C2308 * C1879) *
                C50656 * C50880 +
            (C2782 + C2781 + C2780) * C50656 * C33779) *
               C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50974 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50975 +
           ((C34079 + C34078 + C34077) * C33779 +
            (C35853 + C35854 + C35855) * C50880) *
               C2111) *
              C50703 * C50919 +
          (((C34080 + C34081 + C34082) * C33779 +
            (C34083 + C34084 + C34085) * C50880) *
               C50975 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50974 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C17212 +
             C5610 * C17211 + C5607 * C17210) *
                C50880 +
            (C34085 + C34084 + C34083) * C33779) *
               C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C50974 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C50975 +
           (C39363 * C39161 + C39364 * C39162 + C39365 * C39163 +
            C40584 * C39164) *
               C2111) *
              C50703 * C50919 +
          ((C39366 * C39161 + C39367 * C39162 + C39368 * C39163 +
            C39369 * C39164) *
               C50975 -
           (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
            C178 * C50656 * C39161) *
               C50974 -
           ((C117 * C7451 - C118 * C7449 - C117 * C7452 + C50800 * C7455) *
                C50656 * C39164 +
            C39369 * C39163 + C39368 * C39162 + C39367 * C39161) *
               C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C1695 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C280 +
          (((C34575 + C34576 + C34577) * C33779 +
            (C34971 + C34972 + C34973) * C50880) *
               C50783 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C1695) *
              C281 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C35460 + C35461 + C35462) * C50880) *
               C1695 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C17212 +
             C5403 * C17211 + C7057 * C17210) *
                C50880 +
            (C35462 + C35461 + C35460) * C33779) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C1695 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C50703 * C1046 +
          (((C34080 + C34081 + C34082) * C33779 +
            (C34083 + C34084 + C34085) * C50880) *
               C50783 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C1695) *
              C50703 * C1047 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C34378 + C34379 + C34380) * C50880) *
               C1695 -
           (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) *
                 C17212 +
             C550 * C17211 + C549 * C17210) *
                C50880 +
            (C34380 + C34379 + C34378) * C33779) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C1695 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C50703 * C1046 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C50783 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C1695) *
              C50703 * C1047 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C1695 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50656 * C50880 +
            (C3116 + C3115 + C3114) * C50656 * C33779) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C1695 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C280 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C50783 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C1695) *
              C281 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C38196 + C38197 + C38198) * C50656 * C50880) *
               C1695 -
           ((C2317 * C20843 - C2318 * C20842 - C2317 * C20844 + C2310 * C20845 +
             C2315 * C3745 - C2316 * C3742 - C2315 * C3746 + C2309 * C3748 +
             C2313 * C2731 - C2314 * C2728 - C2313 * C2732 + C2308 * C2737) *
                C50656 * C50880 +
            (C38198 + C38197 + C38196) * C50656 * C33779) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C1695 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C50783) *
              C50703 * C1046 +
          ((C39366 * C39161 + C39367 * C39162 + C39368 * C39163 +
            C39369 * C39164) *
               C50783 -
           (C39368 * C39164 + C39367 * C39163 + C39366 * C39162 +
            C178 * C50656 * C39161) *
               C1695) *
              C50703 * C1047 +
          ((C179 * C50656 * C39161 + C39566 * C39162 + C39567 * C39163 +
            C39568 * C39164) *
               C1695 -
           ((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                C50656 * C39164 +
            C39568 * C39163 + C39567 * C39162 + C39566 * C39161) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50656 *
                C39161 +
            C39362 * C39162 + C39363 * C39163 + C39364 * C39164) *
               C1695 -
           (C39365 * C39164 + C39364 * C39163 + C39363 * C39162 +
            C39362 * C39161) *
               C50783) *
              C280 +
          ((C39699 * C39161 + C39700 * C39162 + C39701 * C39163 +
            C39974 * C39164) *
               C50783 -
           (C39701 * C39164 + C39700 * C39163 + C39699 * C39162 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) * C50656 *
                C39161) *
               C1695) *
              C281 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50656 *
                C39161 +
            C40301 * C39162 + C40302 * C39163 + C40310 * C39164) *
               C1695 -
           ((C117 * C23137 - C118 * C23136 - C117 * C23138 + C50800 * C23139) *
                C50656 * C39164 +
            C40310 * C39163 + C40302 * C39162 + C40301 * C39161) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C50719 * C50927 -
           ((C5401 * C50661 + C6144 * C50912) * C44502 +
            (C944 * C50661 + C6143 * C50912) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C50719 * C50755) *
              C50970 +
          (((C364 * C50912 + C363 * C50661) * C50978 +
            (C944 * C50912 + C945 * C50661) * C50979 +
            (C5401 * C50912 + C5770 * C50661) * C44502) *
               C50719 * C50755 -
           (C44809 * C44502 + (C44803 + C44802) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C50719 * C50927) *
              C50971 +
          (((C179 * C50912 + C180 * C50661) * C50978 +
            (C546 * C50912 + C545 * C50661) * C50979 +
            (C549 * C50912 + C550 * C50661) * C44502) *
               C50719 * C50927 -
           (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                 C50661 +
             C5770 * C50912) *
                C44502 +
            (C946 * C50661 + C945 * C50912) * C50979 +
            (C362 * C50661 + C363 * C50912) * C50978) *
               C50719 * C50755) *
              C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C50912 +
              C178 * C50661) *
                 C50978 +
             (C44796 + C44797) * C50979 + C44808 * C44502) *
                C50928 -
            ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
             (C44797 + C44796) * C50978) *
                C50783) *
               C50927 +
           (((C45300 + C45301) * C50978 + (C45302 + C45303) * C50979 +
             (C6554 * C50912 + C6145 * C50661) * C44502) *
                C50783 -
            ((C45303 + C45302) * C44502 + (C45301 + C45300) * C50979 +
             (C364 * C50661 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C50912) *
                 C50978) *
                C50928) *
               C50755) *
              C283 +
          ((((C44802 + C44803) * C50978 + (C44804 + C44805) * C50979 +
             (C44806 + C44807) * C44502) *
                C50783 -
            (C44809 * C44502 + (C44803 + C44802) * C50979 +
             (C179 * C50661 + C178 * C50912) * C50978) *
                C50928) *
               C50927 +
           (((C364 * C50912 + C363 * C50661) * C50978 +
             (C45304 + C45305) * C50979 + (C45306 + C45307) * C44502) *
                C50928 -
            (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                  C50661 +
              C6145 * C50912) *
                 C44502 +
             (C45307 + C45306) * C50979 + (C45305 + C45304) * C50978) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C5605 * C50912 + C547 * C50661) * C50979 +
            (C5606 * C50912 + C548 * C50661) * C44502) *
               C50719 * C280 -
           ((C5401 * C50661 + C6144 * C50912) * C44502 +
            (C944 * C50661 + C6143 * C50912) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C50719 * C281 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50912 +
             C365 * C50661) *
                C50978 +
            (C7056 * C50912 + C5402 * C50661) * C50979 +
            (C7057 * C50912 + C5403 * C50661) * C44502) *
               C50719 * C282) *
              C283 +
          (((C364 * C50912 + C363 * C50661) * C50978 +
            (C944 * C50912 + C945 * C50661) * C50979 +
            (C5401 * C50912 + C5770 * C50661) * C44502) *
               C50719 * C281 -
           ((C549 * C50661 + C548 * C50912) * C44502 +
            (C546 * C50661 + C547 * C50912) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C50719 * C280 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C50661 +
             C5403 * C50912) *
                C44502 +
            (C11071 * C50661 + C5402 * C50912) * C50979 +
            (C366 * C50661 + C365 * C50912) * C50978) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50912 +
            C178 * C50661) *
               C50978 +
           (C5605 * C50912 + C547 * C50661) * C50979 +
           (C5606 * C50912 + C548 * C50661) * C44502) *
              C50719 * C50703 * C113 -
          ((C549 * C50661 + C548 * C50912) * C44502 +
           (C546 * C50661 + C547 * C50912) * C50979 +
           (C179 * C50661 + C178 * C50912) * C50978) *
              C50719 * C50703 * C114 +
          ((C179 * C50912 + C180 * C50661) * C50978 +
           (C546 * C50912 + C545 * C50661) * C50979 +
           (C549 * C50912 + C550 * C50661) * C44502) *
              C50719 * C50703 * C115 -
          (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C50661 +
            C550 * C50912) *
               C44502 +
           (C775 * C50661 + C545 * C50912) * C50979 +
           (C181 * C50661 + C180 * C50912) * C50978) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C465 -
           ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C466 +
           (C44808 * C50978 + (C44801 + C44800) * C50979 +
            (C7466 * C50912 + C5609 * C50661) * C44502) *
               C467) *
              C50703 * C283 +
          (((C44802 + C44803) * C50978 + (C44804 + C44805) * C50979 +
            (C44806 + C44807) * C44502) *
               C466 -
           (C44809 * C44502 + (C44803 + C44802) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C465 -
           (((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                 C50661 +
             C5609 * C50912) *
                C44502 +
            (C44807 + C44806) * C50979 + C44809 * C50978) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C50928 -
           ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C50783) *
              C50703 * C50970 +
          (((C44802 + C44803) * C50978 + (C44804 + C44805) * C50979 +
            (C44806 + C44807) * C44502) *
               C50783 -
           (C44809 * C44502 + (C44803 + C44802) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C50928) *
              C50703 * C50971 +
          (((C179 * C50912 + C180 * C50661) * C50978 +
            (C45102 + C45103) * C50979 + (C45104 + C45105) * C44502) *
               C50928 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C50661 +
             C5610 * C50912) *
                C44502 +
            (C45105 + C45104) * C50979 + (C45103 + C45102) * C50978) *
               C50783) *
              C50703 * C652)) /
        (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50912 +
            C178 * C50661) *
               C50978 +
           (C5605 * C50912 + C547 * C50661) * C50979 +
           (C5606 * C50912 + C548 * C50661) * C44502) *
              C50719 * C50703 * C113 -
          ((C549 * C50661 + C548 * C50912) * C44502 +
           (C546 * C50661 + C547 * C50912) * C50979 +
           (C179 * C50661 + C178 * C50912) * C50978) *
              C50719 * C50703 * C114 +
          ((C179 * C50912 + C180 * C50661) * C50978 +
           (C546 * C50912 + C545 * C50661) * C50979 +
           (C549 * C50912 + C550 * C50661) * C44502) *
              C50719 * C50703 * C115 -
          (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) * C50661 +
            C550 * C50912) *
               C44502 +
           (C775 * C50661 + C545 * C50912) * C50979 +
           (C181 * C50661 + C180 * C50912) * C50978) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C5605 * C50912 + C547 * C50661) * C50979 +
            (C5606 * C50912 + C548 * C50661) * C44502) *
               C50719 * C280 -
           ((C5401 * C50661 + C6144 * C50912) * C44502 +
            (C944 * C50661 + C6143 * C50912) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C50719 * C281 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50912 +
             C365 * C50661) *
                C50978 +
            (C7056 * C50912 + C5402 * C50661) * C50979 +
            (C7057 * C50912 + C5403 * C50661) * C44502) *
               C50719 * C282) *
              C283 +
          (((C364 * C50912 + C363 * C50661) * C50978 +
            (C944 * C50912 + C945 * C50661) * C50979 +
            (C5401 * C50912 + C5770 * C50661) * C44502) *
               C50719 * C281 -
           ((C549 * C50661 + C548 * C50912) * C44502 +
            (C546 * C50661 + C547 * C50912) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C50719 * C280 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C50661 +
             C5403 * C50912) *
                C44502 +
            (C11071 * C50661 + C5402 * C50912) * C50979 +
            (C366 * C50661 + C365 * C50912) * C50978) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C50719 * C50972 -
           (C45700 * C44502 + (C45301 + C45300) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C50719 * C50973 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50912 +
             C365 * C50661) *
                C50978 +
            (C7056 * C50912 + C5402 * C50661) * C50979 +
            (C7057 * C50912 + C5403 * C50661) * C44502) *
               C50719 * C1350) *
              C50919 +
          (((C364 * C50912 + C363 * C50661) * C50978 +
            (C45304 + C45305) * C50979 + (C45306 + C45307) * C44502) *
               C50719 * C50973 -
           (C44809 * C44502 + (C44803 + C44802) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C50719 * C50972 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C50661 +
             C5403 * C50912) *
                C44502 +
            (C11071 * C50661 + C5402 * C50912) * C50979 +
            (C366 * C50661 + C365 * C50912) * C50978) *
               C50719 * C1350) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C50928 -
           ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C50783) *
              C50972 +
          (((C45300 + C45301) * C50978 + (C45302 + C45303) * C50979 +
            (C45698 + C45699) * C44502) *
               C50783 -
           (C45700 * C44502 + (C45301 + C45300) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C50928) *
              C50973 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50912 +
             C365 * C50661) *
                C50978 +
            (C46187 + C46188) * C50979 + (C46189 + C46190) * C44502) *
               C50928 -
           (((C117 * C4637 - C118 * C4633 - C117 * C4638 + C50800 * C4645) *
                 C50661 +
             C40309 * C50912) *
                C44502 +
            (C46190 + C46189) * C50979 + (C46188 + C46187) * C50978) *
               C50783) *
              C1350) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50912 +
            C178 * C50661) *
               C50978 +
           (C44796 + C44797) * C50979 + C44808 * C44502) *
              C50719 * C1115 -
          ((C45303 + C45302) * C44502 + (C45301 + C45300) * C50979 +
           (C364 * C50661 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                C50912) *
               C50978) *
              C50719 * C1116 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50912 +
            C365 * C50661) *
               C50978 +
           (C7056 * C50912 + C5402 * C50661) * C50979 +
           (C7057 * C50912 + C5403 * C50661) * C44502) *
              C50719 * C1117 -
          (((C117 * C3743 - C118 * C3741 - C117 * C3744 + C50800 * C3747) *
                C50661 +
            (C117 * C3745 - C118 * C3742 - C117 * C3746 + C50800 * C3748) *
                C50912) *
               C44502 +
           ((C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                C50661 +
            (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                C50912) *
               C50979 +
           ((C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                C50661 +
            (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                C50912) *
               C50978) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C50719 * C1044 -
           ((C45303 + C45302) * C44502 + (C45301 + C45300) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C50719 * C50755) *
              C1046 +
          (((C364 * C50912 + C363 * C50661) * C50978 +
            (C45304 + C45305) * C50979 + (C45306 + C45307) * C44502) *
               C50719 * C50755 -
           (C44809 * C44502 + (C44803 + C44802) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C50719 * C1044) *
              C1047 +
          (((C179 * C50912 + C180 * C50661) * C50978 +
            (C45102 + C45103) * C50979 + (C45104 + C45105) * C44502) *
               C50719 * C1044 -
           (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                 C50661 +
             C5770 * C50912) *
                C44502 +
            (C946 * C50661 + C945 * C50912) * C50979 +
            (C362 * C50661 + C363 * C50912) * C50978) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C465 -
           ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C466 +
           (C44808 * C50978 + (C44801 + C44800) * C50979 +
            (C7466 * C50912 + C5609 * C50661) * C44502) *
               C467) *
              C1044 +
          (((C45300 + C45301) * C50978 + (C45302 + C45303) * C50979 +
            (C45698 + C45699) * C44502) *
               C466 -
           (C45700 * C44502 + (C45301 + C45300) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C465 -
           (((C117 * C6539 - C118 * C6537 - C117 * C6540 + C50800 * C6543) *
                 C50661 +
             C39973 * C50912) *
                C44502 +
            (C45699 + C45698) * C50979 + C45700 * C50978) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C50912 +
              C178 * C50661) *
                 C50978 +
             (C44796 + C44797) * C50979 + C44808 * C44502) *
                C50928 -
            ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
             (C44797 + C44796) * C50978) *
                C50783) *
               C1044 +
           (((C45300 + C45301) * C50978 + (C45302 + C45303) * C50979 +
             (C45698 + C45699) * C44502) *
                C50783 -
            (C45700 * C44502 + (C45301 + C45300) * C50979 +
             (C364 * C50661 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C50912) *
                 C50978) *
                C50928) *
               C50755) *
              C50919 +
          ((((C44802 + C44803) * C50978 + (C44804 + C44805) * C50979 +
             (C44806 + C44807) * C44502) *
                C50783 -
            (C44809 * C44502 + (C44803 + C44802) * C50979 +
             (C179 * C50661 + C178 * C50912) * C50978) *
                C50928) *
               C1044 +
           (((C364 * C50912 + C363 * C50661) * C50978 +
             (C45304 + C45305) * C50979 + (C45306 + C45307) * C44502) *
                C50928 -
            (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                  C50661 +
              C6145 * C50912) *
                 C44502 +
             (C45307 + C45306) * C50979 + (C45305 + C45304) * C50978) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C50719 * C1044 -
           ((C45303 + C45302) * C44502 + (C45301 + C45300) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C50719 * C50755) *
              C1046 +
          (((C364 * C50912 + C363 * C50661) * C50978 +
            (C45304 + C45305) * C50979 + (C45306 + C45307) * C44502) *
               C50719 * C50755 -
           (C44809 * C44502 + (C44803 + C44802) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C50719 * C1044) *
              C1047 +
          (((C179 * C50912 + C180 * C50661) * C50978 +
            (C45102 + C45103) * C50979 + (C45104 + C45105) * C44502) *
               C50719 * C1044 -
           (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                 C50661 +
             C5770 * C50912) *
                C44502 +
            (C946 * C50661 + C945 * C50912) * C50979 +
            (C362 * C50661 + C363 * C50912) * C50978) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50912 +
            C178 * C50661) *
               C50978 +
           (C44796 + C44797) * C50979 + C44808 * C44502) *
              C50719 * C1115 -
          ((C45303 + C45302) * C44502 + (C45301 + C45300) * C50979 +
           (C364 * C50661 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                C50912) *
               C50978) *
              C50719 * C1116 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C50912 +
            C365 * C50661) *
               C50978 +
           (C7056 * C50912 + C5402 * C50661) * C50979 +
           (C7057 * C50912 + C5403 * C50661) * C44502) *
              C50719 * C1117 -
          (((C117 * C3743 - C118 * C3741 - C117 * C3744 + C50800 * C3747) *
                C50661 +
            (C117 * C3745 - C118 * C3742 - C117 * C3746 + C50800 * C3748) *
                C50912) *
               C44502 +
           ((C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                C50661 +
            (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                C50912) *
               C50979 +
           ((C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                C50661 +
            (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                C50912) *
               C50978) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C50912 +
              C178 * C50661) *
                 C50978 +
             (C44796 + C44797) * C50979 + C44808 * C44502) *
                C1695 -
            (C46581 * C44502 + (C44799 + C44798) * C50979 +
             (C44797 + C44796) * C50978) *
                C50783) *
               C50927 +
           (((C45300 + C45301) * C50978 + (C45302 + C45303) * C50979 +
             (C45698 + C45699) * C44502) *
                C50783 -
            (C45700 * C44502 + (C45301 + C45300) * C50979 +
             (C364 * C50661 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C50912) *
                 C50978) *
                C1695) *
               C50755) *
              C50919 +
          ((((C44802 + C44803) * C50978 + (C44804 + C44805) * C50979 +
             (C44806 + C44807) * C44502) *
                C50783 -
            (C44809 * C44502 + (C44803 + C44802) * C50979 +
             (C179 * C50661 + C178 * C50912) * C50978) *
                C1695) *
               C50927 +
           (((C364 * C50912 + C363 * C50661) * C50978 +
             (C45304 + C45305) * C50979 + (C45306 + C45307) * C44502) *
                C1695 -
            (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                  C50661 +
              C6145 * C50912) *
                 C44502 +
             (C45307 + C45306) * C50979 + (C45305 + C45304) * C50978) *
                C50783) *
               C50755) *
              C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C50974 -
           (C46581 * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C50975 +
           (C44808 * C50978 + (C44801 + C44800) * C50979 +
            (C46582 + C46583) * C44502) *
               C2111) *
              C50927 +
          (((C45300 + C45301) * C50978 + (C45302 + C45303) * C50979 +
            (C45698 + C45699) * C44502) *
               C50975 -
           (C45700 * C44502 + (C45301 + C45300) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C50974 -
           (((C117 * C6539 - C118 * C6537 - C117 * C6540 + C50800 * C6543) *
                 C50661 +
             C39973 * C50912) *
                C44502 +
            (C45699 + C45698) * C50979 + C45700 * C50978) *
               C2111) *
              C50755) *
         C50684) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C1695 -
           ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C50783) *
              C280 +
          (((C45300 + C45301) * C50978 + (C45302 + C45303) * C50979 +
            (C45698 + C45699) * C44502) *
               C50783 -
           (C45700 * C44502 + (C45301 + C45300) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C1695) *
              C281 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50912 +
             C365 * C50661) *
                C50978 +
            (C46187 + C46188) * C50979 + (C46189 + C46190) * C44502) *
               C1695 -
           (((C117 * C4637 - C118 * C4633 - C117 * C4638 + C50800 * C4645) *
                 C50661 +
             C40309 * C50912) *
                C44502 +
            (C46190 + C46189) * C50979 + (C46188 + C46187) * C50978) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C1695 -
           ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C50783) *
              C50703 * C1046 +
          (((C44802 + C44803) * C50978 + (C44804 + C44805) * C50979 +
            (C44806 + C44807) * C44502) *
               C50783 -
           (C44809 * C44502 + (C44803 + C44802) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C1695) *
              C50703 * C1047 +
          (((C179 * C50912 + C180 * C50661) * C50978 +
            (C45102 + C45103) * C50979 + (C45104 + C45105) * C44502) *
               C1695 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C50661 +
             C5610 * C50912) *
                C44502 +
            (C45105 + C45104) * C50979 + (C45103 + C45102) * C50978) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C50912 +
            C178 * C50661) *
               C50978 +
           (C44796 + C44797) * C50979 + C44808 * C44502) *
              C1861 -
          (C46581 * C44502 + (C44799 + C44798) * C50979 +
           (C44797 + C44796) * C50978) *
              C1862 +
          (C44808 * C50978 + (C44801 + C44800) * C50979 +
           (C46582 + C46583) * C44502) *
              C1863 -
          (((C117 * C7451 - C118 * C7449 - C117 * C7452 + C50800 * C7455) *
                C50661 +
            C40583 * C50912) *
               C44502 +
           (C46583 + C46582) * C50979 + C46581 * C50978) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C50974 -
           (C46581 * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C50975 +
           (C44808 * C50978 + (C44801 + C44800) * C50979 +
            (C46582 + C46583) * C44502) *
               C2111) *
              C50703 * C50919 +
          (((C44802 + C44803) * C50978 + (C44804 + C44805) * C50979 +
            (C44806 + C44807) * C44502) *
               C50975 -
           (C44809 * C44502 + (C44803 + C44802) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C50974 -
           (((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                 C50661 +
             C5609 * C50912) *
                C44502 +
            (C44807 + C44806) * C50979 + C44809 * C50978) *
               C2111) *
              C50703 * C50690)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C1695 -
           ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C50783) *
              C50703 * C1046 +
          (((C44802 + C44803) * C50978 + (C44804 + C44805) * C50979 +
            (C44806 + C44807) * C44502) *
               C50783 -
           (C44809 * C44502 + (C44803 + C44802) * C50979 +
            (C179 * C50661 + C178 * C50912) * C50978) *
               C1695) *
              C50703 * C1047 +
          (((C179 * C50912 + C180 * C50661) * C50978 +
            (C45102 + C45103) * C50979 + (C45104 + C45105) * C44502) *
               C1695 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C50661 +
             C5610 * C50912) *
                C44502 +
            (C45105 + C45104) * C50979 + (C45103 + C45102) * C50978) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C50912 +
             C178 * C50661) *
                C50978 +
            (C44796 + C44797) * C50979 + C44808 * C44502) *
               C1695 -
           ((C44800 + C44801) * C44502 + (C44799 + C44798) * C50979 +
            (C44797 + C44796) * C50978) *
               C50783) *
              C280 +
          (((C45300 + C45301) * C50978 + (C45302 + C45303) * C50979 +
            (C45698 + C45699) * C44502) *
               C50783 -
           (C45700 * C44502 + (C45301 + C45300) * C50979 +
            (C364 * C50661 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C50912) *
                C50978) *
               C1695) *
              C281 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C50912 +
             C365 * C50661) *
                C50978 +
            (C46187 + C46188) * C50979 + (C46189 + C46190) * C44502) *
               C1695 -
           (((C117 * C4637 - C118 * C4633 - C117 * C4638 + C50800 * C4645) *
                 C50661 +
             C40309 * C50912) *
                C44502 +
            (C46190 + C46189) * C50979 + (C46188 + C46187) * C50978) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50719 * C50927 -
           ((C945 * C17212 + C944 * C17211 + C6143 * C17210) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C50755) *
              C50970 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C944 * C17210 + C945 * C17211 + C946 * C17212) * C50880) *
               C50719 * C50755 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C50927) *
              C50971 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C546 * C17210 + C545 * C17211 + C775 * C17212) * C50880) *
               C50719 * C50927 -
           (((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) *
                 C17212 +
             C946 * C17211 + C945 * C17210) *
                C50880 +
            (C664 * C17212 + C362 * C17211 + C363 * C17210) * C33779) *
               C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50719 * C50927 -
           ((C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920) *
                C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C50755) *
              C50970 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C50755 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C50927) *
              C50971 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C50719 * C50927 -
           ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
             C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
             C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                C50656 * C50880 +
            (C2949 + C2948 + C2947) * C50656 * C33779) *
               C50719 * C50755) *
              C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C17210 +
              C178 * C17211 + C179 * C17212) *
                 C33779 +
             (C34074 + C34075 + C34076) * C50880) *
                C50928 -
            ((C34077 + C34078 + C34079) * C50880 +
             (C34076 + C34075 + C34074) * C33779) *
                C50783) *
               C50927 +
           (((C34575 + C34576 + C34577) * C33779 +
             (C6144 * C17210 + C5401 * C17211 + C5770 * C17212) * C50880) *
                C50783 -
            ((C34577 + C34576 + C34575) * C50880 +
             (C363 * C17212 + C364 * C17211 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C17210) *
                 C33779) *
                C50928) *
               C50755) *
              C283 +
          ((((C34080 + C34081 + C34082) * C33779 +
             (C34083 + C34084 + C34085) * C50880) *
                C50783 -
            ((C34082 + C34081 + C34080) * C50880 +
             (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                C50928) *
               C50927 +
           (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
             (C34578 + C34579 + C34580) * C50880) *
                C50928 -
            (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                  C17212 +
              C5770 * C17211 + C5401 * C17210) *
                 C50880 +
             (C34580 + C34579 + C34578) * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C50656 * C33779 +
             (C36768 + C36769 + C36770) * C50656 * C50880) *
                C50928 -
            ((C36771 + C36772 + C36773) * C50656 * C50880 +
             (C36770 + C36769 + C36768) * C50656 * C33779) *
                C50783) *
               C50927 +
           (((C37278 + C37279 + C37280) * C50656 * C33779 +
             (C2313 * C1244 - C2314 * C1237 - C2313 * C1245 + C2308 * C1249 +
              C2315 * C2731 - C2316 * C2728 - C2315 * C2732 + C2309 * C2737 +
              C2317 * C3745 - C2318 * C3742 - C2317 * C3746 + C2310 * C3748) *
                 C50656 * C50880) *
                C50783 -
            ((C37280 + C37279 + C37278) * C50656 * C50880 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C50656 * C33779) *
                C50928) *
               C50755) *
              C283 +
          ((((C2779 + C2778 + C2777) * C50656 * C33779 +
             (C2780 + C2781 + C2782) * C50656 * C50880) *
                C50783 -
            ((C2777 + C2778 + C2779) * C50656 * C50880 +
             (C2376 + C2375 + C2374) * C50656 * C33779) *
                C50928) *
               C50927 +
           (((C2579 + C2578 + C2577) * C50656 * C33779 +
             (C3341 + C3342 + C3343) * C50656 * C50880) *
                C50928 -
            ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
              C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
              C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                 C50656 * C50880 +
             (C3343 + C3342 + C3341) * C50656 * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C5605 * C17210 + C547 * C17211 + C546 * C17212) * C50880) *
               C50719 * C280 -
           ((C945 * C17212 + C944 * C17211 + C6143 * C17210) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C281 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
               C50719 * C282) *
              C283 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C944 * C17210 + C945 * C17211 + C946 * C17212) * C50880) *
               C50719 * C281 -
           ((C545 * C17212 + C546 * C17211 + C547 * C17210) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C280 -
           (((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                 C17212 +
             C11071 * C17211 + C5402 * C17210) *
                C50880 +
            (C367 * C17212 + C366 * C17211 + C365 * C17210) * C33779) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C17210 +
            C178 * C17211 + C179 * C17212) *
               C33779 +
           (C5605 * C17210 + C547 * C17211 + C546 * C17212) * C50880) *
              C50719 * C50703 * C113 -
          ((C545 * C17212 + C546 * C17211 + C547 * C17210) * C50880 +
           (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
              C50719 * C50703 * C114 +
          ((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
           (C546 * C17210 + C545 * C17211 + C775 * C17212) * C50880) *
              C50719 * C50703 * C115 -
          (((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C17212 +
            C775 * C17211 + C545 * C17210) *
               C50880 +
           (C182 * C17212 + C181 * C17211 + C180 * C17210) * C33779) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C465 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C466 +
           ((C34079 + C34078 + C34077) * C33779 +
            (C5608 * C17210 + C5607 * C17211 + C5610 * C17212) * C50880) *
               C467) *
              C50703 * C283 +
          (((C34080 + C34081 + C34082) * C33779 +
            (C34083 + C34084 + C34085) * C50880) *
               C466 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C465 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C17212 +
             C5610 * C17211 + C5607 * C17210) *
                C50880 +
            (C34085 + C34084 + C34083) * C33779) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501 +
            C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
            C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596) *
               C50656 * C50880) *
              C50719 * C50703 * C113 -
          ((C2777 + C2778 + C2779) * C50656 * C50880 +
           (C2376 + C2375 + C2374) * C50656 * C33779) *
              C50719 * C50703 * C114 +
          ((C2379 + C2378 + C2377) * C50656 * C33779 +
           (C3114 + C3115 + C3116) * C50656 * C50880) *
              C50719 * C50703 * C115 -
          ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
            C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
            C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
               C50656 * C50880 +
           (C2382 + C2381 + C2380) * C50656 * C33779) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596) *
                C50656 * C50880) *
               C50719 * C280 -
           ((C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920) *
                C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C281 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
                C50656 * C50880) *
               C50719 * C282) *
              C283 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C281 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C280 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50656 * C50880 +
            (C2582 + C2581 + C2580) * C50656 * C33779) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C465 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C466 +
           ((C36773 + C36772 + C36771) * C50656 * C33779 +
            (C2313 * C1875 - C2314 * C1868 - C2313 * C1876 + C2308 * C1880 +
             C2315 * C4643 - C2316 * C4636 - C2315 * C4644 + C2309 * C4648 +
             C2317 * C4641 - C2318 * C4635 - C2317 * C4642 + C2310 * C4647) *
                C50656 * C50880) *
               C467) *
              C50703 * C283 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C466 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C465 -
           ((C2317 * C4637 - C2318 * C4633 - C2317 * C4638 + C2310 * C4645 +
             C2315 * C4639 - C2316 * C4634 - C2315 * C4640 + C2309 * C4646 +
             C2313 * C1873 - C2314 * C1867 - C2313 * C1874 + C2308 * C1879) *
                C50656 * C50880 +
            (C2782 + C2781 + C2780) * C50656 * C33779) *
               C467) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50928 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C50703 * C50970 +
          (((C34080 + C34081 + C34082) * C33779 +
            (C34083 + C34084 + C34085) * C50880) *
               C50783 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50928) *
              C50703 * C50971 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C34378 + C34379 + C34380) * C50880) *
               C50928 -
           (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) *
                 C17212 +
             C550 * C17211 + C549 * C17210) *
                C50880 +
            (C34380 + C34379 + C34378) * C33779) *
               C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50928 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C50703 * C50970 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C50783 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50928) *
              C50703 * C50971 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C50928 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50656 * C50880 +
            (C3116 + C3115 + C3114) * C50656 * C33779) *
               C50783) *
              C50703 * C652)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C17210 +
            C178 * C17211 + C179 * C17212) *
               C33779 +
           (C5605 * C17210 + C547 * C17211 + C546 * C17212) * C50880) *
              C50719 * C50703 * C113 -
          ((C545 * C17212 + C546 * C17211 + C547 * C17210) * C50880 +
           (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
              C50719 * C50703 * C114 +
          ((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
           (C546 * C17210 + C545 * C17211 + C775 * C17212) * C50880) *
              C50719 * C50703 * C115 -
          (((C117 * C765 - C118 * C764 - C117 * C766 + C50800 * C767) * C17212 +
            C775 * C17211 + C545 * C17210) *
               C50880 +
           (C182 * C17212 + C181 * C17211 + C180 * C17210) * C33779) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C5605 * C17210 + C547 * C17211 + C546 * C17212) * C50880) *
               C50719 * C280 -
           ((C945 * C17212 + C944 * C17211 + C6143 * C17210) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C281 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
               C50719 * C282) *
              C283 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C944 * C17210 + C945 * C17211 + C946 * C17212) * C50880) *
               C50719 * C281 -
           ((C545 * C17212 + C546 * C17211 + C547 * C17210) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C280 -
           (((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                 C17212 +
             C11071 * C17211 + C5402 * C17210) *
                C50880 +
            (C367 * C17212 + C366 * C17211 + C365 * C17210) * C33779) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501 +
            C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
            C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596) *
               C50656 * C50880) *
              C50719 * C50703 * C113 -
          ((C2777 + C2778 + C2779) * C50656 * C50880 +
           (C2376 + C2375 + C2374) * C50656 * C33779) *
              C50719 * C50703 * C114 +
          ((C2379 + C2378 + C2377) * C50656 * C33779 +
           (C3114 + C3115 + C3116) * C50656 * C50880) *
              C50719 * C50703 * C115 -
          ((C2317 * C1585 - C2318 * C1581 - C2317 * C1586 + C2310 * C1593 +
            C2315 * C916 - C2316 * C908 - C2315 * C917 + C2309 * C923 +
            C2313 * C478 - C2314 * C468 - C2313 * C479 + C2308 * C498) *
               C50656 * C50880 +
           (C2382 + C2381 + C2380) * C50656 * C33779) *
              C50719 * C50703 * C116)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C2313 * C484 - C2314 * C471 - C2313 * C485 + C2308 * C501 +
             C2315 * C910 - C2316 * C905 - C2315 * C911 + C2309 * C920 +
             C2317 * C1591 - C2318 * C1584 - C2317 * C1592 + C2310 * C1596) *
                C50656 * C50880) *
               C50719 * C280 -
           ((C2317 * C3313 - C2318 * C3310 - C2317 * C3314 + C2310 * C3319 +
             C2315 * C1591 - C2316 * C1584 - C2315 * C1592 + C2309 * C1596 +
             C2313 * C910 - C2314 * C905 - C2313 * C911 + C2308 * C920) *
                C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C281 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
                C50656 * C50880) *
               C50719 * C282) *
              C283 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C281 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C280 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50656 * C50880 +
            (C2582 + C2581 + C2580) * C50656 * C33779) *
               C50719 * C282) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50719 * C50972 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C50973 +
           (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
               C50719 * C1350) *
              C50919 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C34578 + C34579 + C34580) * C50880) *
               C50719 * C50973 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C50972 -
           (((C117 * C1585 - C118 * C1581 - C117 * C1586 + C50800 * C1593) *
                 C17212 +
             C11071 * C17211 + C5402 * C17210) *
                C50880 +
            (C367 * C17212 + C366 * C17211 + C365 * C17210) * C33779) *
               C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50719 * C50972 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C50973 +
           ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
             C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
             C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
                C50656 * C50880) *
               C50719 * C1350) *
              C50919 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C50973 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C50972 -
           ((C2317 * C4237 - C2318 * C4235 - C2317 * C4238 + C2310 * C4241 +
             C2315 * C3315 - C2316 * C3311 - C2315 * C3316 + C2309 * C3320 +
             C2313 * C1589 - C2314 * C1583 - C2313 * C1590 + C2308 * C1595) *
                C50656 * C50880 +
            (C2582 + C2581 + C2580) * C50656 * C33779) *
               C50719 * C1350) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50928 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C50972 +
          (((C34575 + C34576 + C34577) * C33779 +
            (C34971 + C34972 + C34973) * C50880) *
               C50783 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50928) *
              C50973 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C35460 + C35461 + C35462) * C50880) *
               C50928 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C17212 +
             C5403 * C17211 + C7057 * C17210) *
                C50880 +
            (C35462 + C35461 + C35460) * C33779) *
               C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50928 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C50972 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C50783 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50928) *
              C50973 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C38196 + C38197 + C38198) * C50656 * C50880) *
               C50928 -
           ((C2317 * C20843 - C2318 * C20842 - C2317 * C20844 + C2310 * C20845 +
             C2315 * C3745 - C2316 * C3742 - C2315 * C3746 + C2309 * C3748 +
             C2313 * C2731 - C2314 * C2728 - C2313 * C2732 + C2308 * C2737) *
                C50656 * C50880 +
            (C38198 + C38197 + C38196) * C50656 * C33779) *
               C50783) *
              C1350) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C17210 +
            C178 * C17211 + C179 * C17212) *
               C33779 +
           (C34074 + C34075 + C34076) * C50880) *
              C50719 * C1115 -
          ((C34577 + C34576 + C34575) * C50880 +
           (C363 * C17212 + C364 * C17211 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                C17210) *
               C33779) *
              C50719 * C1116 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C17210 +
            C365 * C17211 + C366 * C17212) *
               C33779 +
           (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
              C50719 * C1117 -
          (((C117 * C3317 - C118 * C3312 - C117 * C3318 + C50800 * C3321) *
                C17212 +
            (C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                C17211 +
            (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                C17210) *
               C50880 +
           ((C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
                C17212 +
            (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                C17211 +
            (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                C17210) *
               C33779) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50719 * C1044 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C50755) *
              C1046 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C34578 + C34579 + C34580) * C50880) *
               C50719 * C50755 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C1044) *
              C1047 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C34378 + C34379 + C34380) * C50880) *
               C50719 * C1044 -
           (((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) *
                 C17212 +
             C946 * C17211 + C945 * C17210) *
                C50880 +
            (C664 * C17212 + C362 * C17211 + C363 * C17210) * C33779) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C465 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C466 +
           ((C34079 + C34078 + C34077) * C33779 +
            (C5608 * C17210 + C5607 * C17211 + C5610 * C17212) * C50880) *
               C467) *
              C1044 +
          (((C34575 + C34576 + C34577) * C33779 +
            (C34971 + C34972 + C34973) * C50880) *
               C466 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C465 -
           (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                 C17212 +
             C6145 * C17211 + C6554 * C17210) *
                C50880 +
            (C34973 + C34972 + C34971) * C33779) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50719 * C1044 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C50755) *
              C1046 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C50755 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C1044) *
              C1047 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C50719 * C1044 -
           ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
             C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
             C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                C50656 * C50880 +
            (C2949 + C2948 + C2947) * C50656 * C33779) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C36768 + C36769 + C36770) * C50656 * C50880) *
              C50719 * C1115 -
          ((C37280 + C37279 + C37278) * C50656 * C50880 +
           (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
            C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
            C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
               C50656 * C33779) *
              C50719 * C1116 +
          ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
            C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
            C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
               C50656 * C33779 +
           (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
            C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
            C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
               C50656 * C50880) *
              C50719 * C1117 -
          ((C2317 * C21173 - C2318 * C21172 - C2317 * C21174 + C2310 * C21175 +
            C2315 * C4239 - C2316 * C4236 - C2315 * C4240 + C2309 * C4242 +
            C2313 * C3313 - C2314 * C3310 - C2313 * C3314 + C2308 * C3319) *
               C50656 * C50880 +
           (C2317 * C3591 - C2318 * C3588 - C2317 * C3592 + C2310 * C3594 +
            C2315 * C2531 - C2316 * C2528 - C2315 * C2532 + C2309 * C2537 +
            C2313 * C1130 - C2314 * C1123 - C2313 * C1131 + C2308 * C1135) *
               C50656 * C33779) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C465 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C466 +
           ((C36773 + C36772 + C36771) * C50656 * C33779 +
            (C2313 * C1875 - C2314 * C1868 - C2313 * C1876 + C2308 * C1880 +
             C2315 * C4643 - C2316 * C4636 - C2315 * C4644 + C2309 * C4648 +
             C2317 * C4641 - C2318 * C4635 - C2317 * C4642 + C2310 * C4647) *
                C50656 * C50880) *
               C467) *
              C1044 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C466 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C465 -
           ((C2317 * C21439 - C2318 * C21438 - C2317 * C21440 + C2310 * C21441 +
             C2315 * C4641 - C2316 * C4635 - C2315 * C4642 + C2309 * C4647 +
             C2313 * C4643 - C2314 * C4636 - C2313 * C4644 + C2308 * C4648) *
                C50656 * C50880 +
            (C37691 + C37690 + C37689) * C50656 * C33779) *
               C467) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C17210 +
              C178 * C17211 + C179 * C17212) *
                 C33779 +
             (C34074 + C34075 + C34076) * C50880) *
                C50928 -
            ((C34077 + C34078 + C34079) * C50880 +
             (C34076 + C34075 + C34074) * C33779) *
                C50783) *
               C1044 +
           (((C34575 + C34576 + C34577) * C33779 +
             (C34971 + C34972 + C34973) * C50880) *
                C50783 -
            ((C34577 + C34576 + C34575) * C50880 +
             (C363 * C17212 + C364 * C17211 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C17210) *
                 C33779) *
                C50928) *
               C50755) *
              C50919 +
          ((((C34080 + C34081 + C34082) * C33779 +
             (C34083 + C34084 + C34085) * C50880) *
                C50783 -
            ((C34082 + C34081 + C34080) * C50880 +
             (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                C50928) *
               C1044 +
           (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
             (C34578 + C34579 + C34580) * C50880) *
                C50928 -
            (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                  C17212 +
              C5770 * C17211 + C5401 * C17210) *
                 C50880 +
             (C34580 + C34579 + C34578) * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C50656 * C33779 +
             (C36768 + C36769 + C36770) * C50656 * C50880) *
                C50928 -
            ((C36771 + C36772 + C36773) * C50656 * C50880 +
             (C36770 + C36769 + C36768) * C50656 * C33779) *
                C50783) *
               C1044 +
           (((C37278 + C37279 + C37280) * C50656 * C33779 +
             (C37689 + C37690 + C37691) * C50656 * C50880) *
                C50783 -
            ((C37280 + C37279 + C37278) * C50656 * C50880 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C50656 * C33779) *
                C50928) *
               C50755) *
              C50919 +
          ((((C2779 + C2778 + C2777) * C50656 * C33779 +
             (C2780 + C2781 + C2782) * C50656 * C50880) *
                C50783 -
            ((C2777 + C2778 + C2779) * C50656 * C50880 +
             (C2376 + C2375 + C2374) * C50656 * C33779) *
                C50928) *
               C1044 +
           (((C2579 + C2578 + C2577) * C50656 * C33779 +
             (C3341 + C3342 + C3343) * C50656 * C50880) *
                C50928 -
            ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
              C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
              C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                 C50656 * C50880 +
             (C3343 + C3342 + C3341) * C50656 * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50719 * C1044 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50719 * C50755) *
              C1046 +
          (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
            (C34578 + C34579 + C34580) * C50880) *
               C50719 * C50755 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50719 * C1044) *
              C1047 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C34378 + C34379 + C34380) * C50880) *
               C50719 * C1044 -
           (((C117 * C918 - C118 * C909 - C117 * C919 + C50800 * C924) *
                 C17212 +
             C946 * C17211 + C945 * C17210) *
                C50880 +
            (C664 * C17212 + C362 * C17211 + C363 * C17210) * C33779) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C17210 +
            C178 * C17211 + C179 * C17212) *
               C33779 +
           (C34074 + C34075 + C34076) * C50880) *
              C50719 * C1115 -
          ((C34577 + C34576 + C34575) * C50880 +
           (C363 * C17212 + C364 * C17211 +
            (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                C17210) *
               C33779) *
              C50719 * C1116 +
          (((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) * C17210 +
            C365 * C17211 + C366 * C17212) *
               C33779 +
           (C7056 * C17210 + C5402 * C17211 + C11071 * C17212) * C50880) *
              C50719 * C1117 -
          (((C117 * C3317 - C118 * C3312 - C117 * C3318 + C50800 * C3321) *
                C17212 +
            (C117 * C3315 - C118 * C3311 - C117 * C3316 + C50800 * C3320) *
                C17211 +
            (C117 * C3313 - C118 * C3310 - C117 * C3314 + C50800 * C3319) *
                C17210) *
               C50880 +
           ((C117 * C1126 - C118 * C1121 - C117 * C1127 + C50800 * C1133) *
                C17212 +
            (C117 * C1128 - C118 * C1122 - C117 * C1129 + C50800 * C1134) *
                C17211 +
            (C117 * C1130 - C118 * C1123 - C117 * C1131 + C50800 * C1135) *
                C17210) *
               C33779) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50719 * C1044 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50719 * C50755) *
              C1046 +
          (((C2579 + C2578 + C2577) * C50656 * C33779 +
            (C3341 + C3342 + C3343) * C50656 * C50880) *
               C50719 * C50755 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50719 * C1044) *
              C1047 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C50719 * C1044 -
           ((C2317 * C3317 - C2318 * C3312 - C2317 * C3318 + C2310 * C3321 +
             C2315 * C1587 - C2316 * C1582 - C2315 * C1588 + C2309 * C1594 +
             C2313 * C914 - C2314 * C907 - C2313 * C915 + C2308 * C922) *
                C50656 * C50880 +
            (C2949 + C2948 + C2947) * C50656 * C33779) *
               C50719 * C50755) *
              C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C36768 + C36769 + C36770) * C50656 * C50880) *
              C50719 * C1115 -
          ((C37280 + C37279 + C37278) * C50656 * C50880 +
           (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
            C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
            C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
               C50656 * C33779) *
              C50719 * C1116 +
          ((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
            C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
            C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
               C50656 * C33779 +
           (C2313 * C1591 - C2314 * C1584 - C2313 * C1592 + C2308 * C1596 +
            C2315 * C3313 - C2316 * C3310 - C2315 * C3314 + C2309 * C3319 +
            C2317 * C4239 - C2318 * C4236 - C2317 * C4240 + C2310 * C4242) *
               C50656 * C50880) *
              C50719 * C1117 -
          ((C2317 * C21173 - C2318 * C21172 - C2317 * C21174 + C2310 * C21175 +
            C2315 * C4239 - C2316 * C4236 - C2315 * C4240 + C2309 * C4242 +
            C2313 * C3313 - C2314 * C3310 - C2313 * C3314 + C2308 * C3319) *
               C50656 * C50880 +
           (C2317 * C3591 - C2318 * C3588 - C2317 * C3592 + C2310 * C3594 +
            C2315 * C2531 - C2316 * C2528 - C2315 * C2532 + C2309 * C2537 +
            C2313 * C1130 - C2314 * C1123 - C2313 * C1131 + C2308 * C1135) *
               C50656 * C33779) *
              C50719 * C1118) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                  C17210 +
              C178 * C17211 + C179 * C17212) *
                 C33779 +
             (C34074 + C34075 + C34076) * C50880) *
                C1695 -
            ((C34077 + C34078 + C34079) * C50880 +
             (C34076 + C34075 + C34074) * C33779) *
                C50783) *
               C50927 +
           (((C34575 + C34576 + C34577) * C33779 +
             (C34971 + C34972 + C34973) * C50880) *
                C50783 -
            ((C34577 + C34576 + C34575) * C50880 +
             (C363 * C17212 + C364 * C17211 +
              (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                  C17210) *
                 C33779) *
                C1695) *
               C50755) *
              C50919 +
          ((((C34080 + C34081 + C34082) * C33779 +
             (C34083 + C34084 + C34085) * C50880) *
                C50783 -
            ((C34082 + C34081 + C34080) * C50880 +
             (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
                C1695) *
               C50927 +
           (((C364 * C17210 + C363 * C17211 + C362 * C17212) * C33779 +
             (C34578 + C34579 + C34580) * C50880) *
                C1695 -
            (((C117 * C1238 - C118 * C1234 - C117 * C1239 + C50800 * C1246) *
                  C17212 +
              C5770 * C17211 + C5401 * C17210) *
                 C50880 +
             (C34580 + C34579 + C34578) * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
              C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
              C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                 C50656 * C33779 +
             (C36768 + C36769 + C36770) * C50656 * C50880) *
                C1695 -
            ((C36771 + C36772 + C36773) * C50656 * C50880 +
             (C36770 + C36769 + C36768) * C50656 * C33779) *
                C50783) *
               C50927 +
           (((C37278 + C37279 + C37280) * C50656 * C33779 +
             (C37689 + C37690 + C37691) * C50656 * C50880) *
                C50783 -
            ((C37280 + C37279 + C37278) * C50656 * C50880 +
             (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
              C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
              C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                 C50656 * C33779) *
                C1695) *
               C50755) *
              C50919 +
          ((((C2779 + C2778 + C2777) * C50656 * C33779 +
             (C2780 + C2781 + C2782) * C50656 * C50880) *
                C50783 -
            ((C2777 + C2778 + C2779) * C50656 * C50880 +
             (C2376 + C2375 + C2374) * C50656 * C33779) *
                C1695) *
               C50927 +
           (((C2579 + C2578 + C2577) * C50656 * C33779 +
             (C3341 + C3342 + C3343) * C50656 * C50880) *
                C1695 -
            ((C2317 * C3743 - C2318 * C3741 - C2317 * C3744 + C2310 * C3747 +
              C2315 * C2733 - C2316 * C2729 - C2315 * C2734 + C2309 * C2738 +
              C2313 * C1242 - C2314 * C1236 - C2313 * C1243 + C2308 * C1248) *
                 C50656 * C50880 +
             (C3343 + C3342 + C3341) * C50656 * C33779) *
                C50783) *
               C50755) *
              C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50974 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50975 +
           ((C34079 + C34078 + C34077) * C33779 +
            (C35853 + C35854 + C35855) * C50880) *
               C2111) *
              C50927 +
          (((C34575 + C34576 + C34577) * C33779 +
            (C34971 + C34972 + C34973) * C50880) *
               C50975 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C50974 -
           (((C117 * C6115 - C118 * C6114 - C117 * C6116 + C50800 * C6117) *
                 C17212 +
             C6145 * C17211 + C6554 * C17210) *
                C50880 +
            (C34973 + C34972 + C34971) * C33779) *
               C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50974 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50975 +
           ((C36773 + C36772 + C36771) * C50656 * C33779 +
            (C38607 + C38608 + C38609) * C50656 * C50880) *
               C2111) *
              C50927 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C50975 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C50974 -
           ((C2317 * C21439 - C2318 * C21438 - C2317 * C21440 + C2310 * C21441 +
             C2315 * C4641 - C2316 * C4635 - C2315 * C4642 + C2309 * C4647 +
             C2313 * C4643 - C2314 * C4636 - C2313 * C4644 + C2308 * C4648) *
                C50656 * C50880 +
            (C37691 + C37690 + C37689) * C50656 * C33779) *
               C2111) *
              C50755) *
         C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C1695 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C280 +
          (((C34575 + C34576 + C34577) * C33779 +
            (C34971 + C34972 + C34973) * C50880) *
               C50783 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C1695) *
              C281 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C35460 + C35461 + C35462) * C50880) *
               C1695 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C17212 +
             C5403 * C17211 + C7057 * C17210) *
                C50880 +
            (C35462 + C35461 + C35460) * C33779) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C1695 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C50703 * C1046 +
          (((C34080 + C34081 + C34082) * C33779 +
            (C34083 + C34084 + C34085) * C50880) *
               C50783 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C1695) *
              C50703 * C1047 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C34378 + C34379 + C34380) * C50880) *
               C1695 -
           (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) *
                 C17212 +
             C550 * C17211 + C549 * C17210) *
                C50880 +
            (C34380 + C34379 + C34378) * C33779) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) * C17210 +
            C178 * C17211 + C179 * C17212) *
               C33779 +
           (C34074 + C34075 + C34076) * C50880) *
              C1861 -
          ((C34077 + C34078 + C34079) * C50880 +
           (C34076 + C34075 + C34074) * C33779) *
              C1862 +
          ((C34079 + C34078 + C34077) * C33779 +
           (C35853 + C35854 + C35855) * C50880) *
              C1863 -
          (((C117 * C5556 - C118 * C5551 - C117 * C5557 + C50800 * C5560) *
                C17212 +
            C5609 * C17211 + C7466 * C17210) *
               C50880 +
           (C35855 + C35854 + C35853) * C33779) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C1695 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C50703 * C1046 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C50783 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C1695) *
              C50703 * C1047 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C1695 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50656 * C50880 +
            (C3116 + C3115 + C3114) * C50656 * C33779) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C1695 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C280 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C50783 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C1695) *
              C281 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C38196 + C38197 + C38198) * C50656 * C50880) *
               C1695 -
           ((C2317 * C20843 - C2318 * C20842 - C2317 * C20844 + C2310 * C20845 +
             C2315 * C3745 - C2316 * C3742 - C2315 * C3746 + C2309 * C3748 +
             C2313 * C2731 - C2314 * C2728 - C2313 * C2732 + C2308 * C2737) *
                C50656 * C50880 +
            (C38198 + C38197 + C38196) * C50656 * C33779) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
            C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
            C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
               C50656 * C33779 +
           (C36768 + C36769 + C36770) * C50656 * C50880) *
              C1861 -
          ((C36771 + C36772 + C36773) * C50656 * C50880 +
           (C36770 + C36769 + C36768) * C50656 * C33779) *
              C1862 +
          ((C36773 + C36772 + C36771) * C50656 * C33779 +
           (C38607 + C38608 + C38609) * C50656 * C50880) *
              C1863 -
          ((C2317 * C23137 - C2318 * C23136 - C2317 * C23138 + C2310 * C23139 +
            C2315 * C6541 - C2316 * C6538 - C2315 * C6542 + C2309 * C6544 +
            C2313 * C5552 - C2314 * C5549 - C2313 * C5553 + C2308 * C5558) *
               C50656 * C50880 +
           (C38609 + C38608 + C38607) * C50656 * C33779) *
              C1864) *
         C50703 * C50684) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C50974 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50975 +
           ((C34079 + C34078 + C34077) * C33779 +
            (C35853 + C35854 + C35855) * C50880) *
               C2111) *
              C50703 * C50919 +
          (((C34080 + C34081 + C34082) * C33779 +
            (C34083 + C34084 + C34085) * C50880) *
               C50975 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C50974 -
           (((C117 * C1869 - C118 * C1865 - C117 * C1870 + C50800 * C1877) *
                 C17212 +
             C5610 * C17211 + C5607 * C17210) *
                C50880 +
            (C34085 + C34084 + C34083) * C33779) *
               C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C50974 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50975 +
           ((C36773 + C36772 + C36771) * C50656 * C33779 +
            (C38607 + C38608 + C38609) * C50656 * C50880) *
               C2111) *
              C50703 * C50919 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C50975 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C50974 -
           ((C2317 * C4637 - C2318 * C4633 - C2317 * C4638 + C2310 * C4645 +
             C2315 * C4639 - C2316 * C4634 - C2315 * C4640 + C2309 * C4646 +
             C2313 * C1873 - C2314 * C1867 - C2313 * C1874 + C2308 * C1879) *
                C50656 * C50880 +
            (C2782 + C2781 + C2780) * C50656 * C33779) *
               C2111) *
              C50703 * C50690)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C1695 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C50703 * C1046 +
          (((C34080 + C34081 + C34082) * C33779 +
            (C34083 + C34084 + C34085) * C50880) *
               C50783 -
           ((C34082 + C34081 + C34080) * C50880 +
            (C180 * C17212 + C179 * C17211 + C178 * C17210) * C33779) *
               C1695) *
              C50703 * C1047 +
          (((C179 * C17210 + C180 * C17211 + C181 * C17212) * C33779 +
            (C34378 + C34379 + C34380) * C50880) *
               C1695 -
           (((C117 * C496 - C118 * C477 - C117 * C497 + C50800 * C507) *
                 C17212 +
             C550 * C17211 + C549 * C17210) *
                C50880 +
            (C34380 + C34379 + C34378) * C33779) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C117 * C126 - C118 * C119 - C117 * C127 + C50800 * C140) *
                 C17210 +
             C178 * C17211 + C179 * C17212) *
                C33779 +
            (C34074 + C34075 + C34076) * C50880) *
               C1695 -
           ((C34077 + C34078 + C34079) * C50880 +
            (C34076 + C34075 + C34074) * C33779) *
               C50783) *
              C280 +
          (((C34575 + C34576 + C34577) * C33779 +
            (C34971 + C34972 + C34973) * C50880) *
               C50783 -
           ((C34577 + C34576 + C34575) * C50880 +
            (C363 * C17212 + C364 * C17211 +
             (C117 * C301 - C118 * C288 - C117 * C302 + C50800 * C318) *
                 C17210) *
                C33779) *
               C1695) *
              C281 +
          ((((C117 * C303 - C118 * C289 - C117 * C304 + C50800 * C319) *
                 C17210 +
             C365 * C17211 + C366 * C17212) *
                C33779 +
            (C35460 + C35461 + C35462) * C50880) *
               C1695 -
           (((C117 * C2735 - C118 * C2730 - C117 * C2736 + C50800 * C2739) *
                 C17212 +
             C5403 * C17211 + C7057 * C17210) *
                C50880 +
            (C35462 + C35461 + C35460) * C33779) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C1695 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C50703 * C1046 +
          (((C2779 + C2778 + C2777) * C50656 * C33779 +
            (C2780 + C2781 + C2782) * C50656 * C50880) *
               C50783 -
           ((C2777 + C2778 + C2779) * C50656 * C50880 +
            (C2376 + C2375 + C2374) * C50656 * C33779) *
               C1695) *
              C50703 * C1047 +
          (((C2379 + C2378 + C2377) * C50656 * C33779 +
            (C3114 + C3115 + C3116) * C50656 * C50880) *
               C1695 -
           ((C2317 * C2735 - C2318 * C2730 - C2317 * C2736 + C2310 * C2739 +
             C2315 * C1240 - C2316 * C1235 - C2315 * C1241 + C2309 * C1247 +
             C2313 * C490 - C2314 * C474 - C2313 * C491 + C2308 * C504) *
                C50656 * C50880 +
            (C3116 + C3115 + C3114) * C50656 * C33779) *
               C50783) *
              C50703 * C1048)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C2313 * C126 - C2314 * C119 - C2313 * C127 + C2308 * C140 +
             C2315 * C301 - C2316 * C288 - C2315 * C302 + C2309 * C318 +
             C2317 * C303 - C2318 * C289 - C2317 * C304 + C2310 * C319) *
                C50656 * C33779 +
            (C36768 + C36769 + C36770) * C50656 * C50880) *
               C1695 -
           ((C36771 + C36772 + C36773) * C50656 * C50880 +
            (C36770 + C36769 + C36768) * C50656 * C33779) *
               C50783) *
              C280 +
          (((C37278 + C37279 + C37280) * C50656 * C33779 +
            (C37689 + C37690 + C37691) * C50656 * C50880) *
               C50783 -
           ((C37280 + C37279 + C37278) * C50656 * C50880 +
            (C2317 * C1130 - C2318 * C1123 - C2317 * C1131 + C2310 * C1135 +
             C2315 * C303 - C2316 * C289 - C2315 * C304 + C2309 * C319 +
             C2313 * C301 - C2314 * C288 - C2313 * C302 + C2308 * C318) *
                C50656 * C33779) *
               C1695) *
              C281 +
          (((C2313 * C303 - C2314 * C289 - C2313 * C304 + C2308 * C319 +
             C2315 * C1130 - C2316 * C1123 - C2315 * C1131 + C2309 * C1135 +
             C2317 * C2531 - C2318 * C2528 - C2317 * C2532 + C2310 * C2537) *
                C50656 * C33779 +
            (C38196 + C38197 + C38198) * C50656 * C50880) *
               C1695 -
           ((C2317 * C20843 - C2318 * C20842 - C2317 * C20844 + C2310 * C20845 +
             C2315 * C3745 - C2316 * C3742 - C2315 * C3746 + C2309 * C3748 +
             C2313 * C2731 - C2314 * C2728 - C2313 * C2732 + C2308 * C2737) *
                C50656 * C50880 +
            (C38198 + C38197 + C38196) * C50656 * C33779) *
               C50783) *
              C282) *
         C50684) /
            (p * q * std::sqrt(p + q));
}
